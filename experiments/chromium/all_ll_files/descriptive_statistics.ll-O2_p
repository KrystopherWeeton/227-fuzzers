; ModuleID = '../../third_party/libjxl/src/lib/jxl/base/descriptive_statistics.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/base/descriptive_statistics.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Stats" = type { i64, float, float, double, double, double, double, double }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@.str = private unnamed_addr constant [7 x i8] c"(none)\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"Count=%6zu \00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"../../third_party/libjxl/src/lib/jxl/base/descriptive_statistics.cc\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"ret > 0\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"Mean=%9.6f SD=%8.5f \00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Min=%8.5f Max=%8.5f \00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"Skew=%5.2f Kurt=%7.2f \00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"GeoMean=%9.6f \00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"pos < sizeof(buf)\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl5Stats10AssimilateERKS0_(%"class.jxl::Stats"* nocapture, %"class.jxl::Stats"* nocapture readonly dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add nsw i64 %6, %4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %114, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = load float, float* %10, align 4
  %14 = fcmp olt float %12, %13
  %15 = select i1 %14, float %12, float %13
  store float %15, float* %10, align 8
  %16 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 2
  %18 = load float, float* %16, align 4
  %19 = load float, float* %17, align 4
  %20 = fcmp olt float %18, %19
  %21 = select i1 %20, float %19, float %18
  store float %21, float* %16, align 4
  %22 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 3
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 3
  %25 = load double, double* %24, align 8
  %26 = fmul double %23, %25
  store double %26, double* %24, align 8
  %27 = load i64, i64* %5, align 8
  %28 = mul nsw i64 %27, %4
  %29 = sitofp i64 %28 to double
  %30 = mul nsw i64 %4, %4
  %31 = sitofp i64 %30 to double
  %32 = mul nsw i64 %27, %27
  %33 = sitofp i64 %32 to double
  %34 = sitofp i64 %7 to double
  %35 = fmul double %34, %34
  %36 = fmul double %35, %34
  %37 = fdiv double 1.000000e+00, %34
  %38 = fdiv double 1.000000e+00, %35
  %39 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 4
  %40 = load double, double* %39, align 8
  %41 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 4
  %42 = load double, double* %41, align 8
  %43 = fsub double %40, %42
  %44 = insertelement <2 x double> undef, double %43, i32 0
  %45 = shufflevector <2 x double> %44, <2 x double> undef, <2 x i32> zeroinitializer
  %46 = insertelement <2 x double> %44, double 3.000000e+00, i32 1
  %47 = fmul <2 x double> %45, %46
  %48 = extractelement <2 x double> %47, i32 0
  %49 = fmul double %43, %48
  %50 = fmul double %48, %48
  %51 = sitofp i64 %4 to double
  %52 = fmul double %42, %51
  %53 = sitofp i64 %27 to double
  %54 = fmul double %40, %53
  %55 = fadd double %54, %52
  %56 = fmul double %37, %55
  store double %56, double* %41, align 8
  %57 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 5
  %58 = load double, double* %57, align 8
  %59 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 5
  %60 = load double, double* %59, align 8
  %61 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 6
  %62 = load double, double* %61, align 8
  %63 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 6
  %64 = load double, double* %63, align 8
  %65 = fadd double %62, %64
  %66 = fmul double %49, %29
  %67 = load i64, i64* %5, align 8
  %68 = sub nsw i64 %4, %67
  %69 = sitofp i64 %68 to double
  %70 = fmul double %66, %69
  %71 = fmul double %38, %70
  %72 = insertelement <2 x double> undef, double %58, i32 0
  %73 = insertelement <2 x double> %72, double %65, i32 1
  %74 = insertelement <2 x double> undef, double %60, i32 0
  %75 = insertelement <2 x double> %74, double %71, i32 1
  %76 = fadd <2 x double> %73, %75
  %77 = fmul double %60, %51
  %78 = sitofp i64 %67 to double
  %79 = fmul double %58, %78
  %80 = fsub double %77, %79
  %81 = insertelement <2 x double> undef, double %29, i32 0
  %82 = insertelement <2 x double> %81, double %80, i32 1
  %83 = fmul <2 x double> %47, %82
  %84 = insertelement <2 x double> undef, double %37, i32 0
  %85 = shufflevector <2 x double> %84, <2 x double> undef, <2 x i32> zeroinitializer
  %86 = fmul <2 x double> %85, %83
  %87 = fadd <2 x double> %76, %86
  %88 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 7
  %89 = load double, double* %88, align 8
  %90 = fmul double %50, %29
  %91 = fsub double %31, %29
  %92 = fadd double %91, %33
  %93 = fmul double %92, %90
  %94 = fdiv double %93, %36
  %95 = fadd double %94, %89
  %96 = fmul double %48, 6.000000e+00
  %97 = fmul double %60, %31
  %98 = fmul double %58, %33
  %99 = fadd double %98, %97
  %100 = fmul double %96, %99
  %101 = fmul double %38, %100
  %102 = fadd double %101, %95
  %103 = fmul double %43, 4.000000e+00
  %104 = fmul double %64, %51
  %105 = fmul double %62, %78
  %106 = fsub double %104, %105
  %107 = fmul double %103, %106
  %108 = fmul double %37, %107
  %109 = fadd double %102, %108
  %110 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %0, i64 0, i32 7
  %111 = load double, double* %110, align 8
  %112 = fadd double %111, %109
  store double %112, double* %110, align 8
  %113 = bitcast double* %57 to <2 x double>*
  store <2 x double> %87, <2 x double>* %113, align 8
  store i64 %7, i64* %3, align 8
  br label %114

114:                                              ; preds = %2, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl5Stats8ToStringEi(%"class.std::__1::basic_string"* noalias sret, %"class.jxl::Stats"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %4 = alloca [300 x i8], align 16
  %5 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  store i8 6, i8* %10, align 1
  %11 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6, i1 false) #9
  %12 = getelementptr inbounds i8, i8* %11, i64 6
  store i8 0, i8* %12, align 2
  br label %199

13:                                               ; preds = %3
  %14 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 300, i8* nonnull %14) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 300, i1 false)
  %15 = and i32 %2, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %25

17:                                               ; preds = %13
  %18 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %14, i64 300, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i64 %6) #9
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #9
  %22 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

23:                                               ; preds = %17
  %24 = sext i32 %18 to i64
  br label %25

25:                                               ; preds = %23, %13
  %26 = phi i64 [ %24, %23 ], [ 0, %13 ]
  %27 = and i32 %2, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %56

29:                                               ; preds = %25
  %30 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 %26
  %31 = sub nsw i64 300, %26
  %32 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 4
  %33 = load double, double* %32, align 8
  %34 = load i64, i64* %5, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %29
  %37 = icmp eq i64 %34, 1
  %38 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 5
  %39 = load double, double* %38, align 8
  br i1 %37, label %45, label %40

40:                                               ; preds = %36
  %41 = trunc i64 %34 to i32
  %42 = add i32 %41, -1
  %43 = sitofp i32 %42 to double
  %44 = fdiv double %39, %43
  br label %45

45:                                               ; preds = %29, %36, %40
  %46 = phi double [ %44, %40 ], [ 0.000000e+00, %29 ], [ %39, %36 ]
  %47 = tail call double @sqrt(double %46) #9
  %48 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %30, i64 %31, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), double %33, double %47) #9
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 82, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #9
  %52 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

53:                                               ; preds = %45
  %54 = sext i32 %48 to i64
  %55 = add nuw nsw i64 %26, %54
  br label %56

56:                                               ; preds = %53, %25
  %57 = phi i64 [ %55, %53 ], [ %26, %25 ]
  %58 = and i32 %2, 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %77

60:                                               ; preds = %56
  %61 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 %57
  %62 = sub nsw i64 300, %57
  %63 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 1
  %64 = load float, float* %63, align 8
  %65 = fpext float %64 to double
  %66 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 2
  %67 = load float, float* %66, align 4
  %68 = fpext float %67 to double
  %69 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %61, i64 %62, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), double %65, double %68) #9
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %60
  %72 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 89, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #9
  %73 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

74:                                               ; preds = %60
  %75 = sext i32 %69 to i64
  %76 = add nuw nsw i64 %57, %75
  br label %77

77:                                               ; preds = %74, %56
  %78 = phi i64 [ %76, %74 ], [ %57, %56 ]
  %79 = and i32 %2, 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %142

81:                                               ; preds = %77
  %82 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 %78
  %83 = sub nsw i64 300, %78
  %84 = load i64, i64* %5, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %131, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 5
  %88 = load double, double* %87, align 8
  %89 = tail call double @llvm.fabs.f64(double %88) #9
  %90 = fcmp olt double %89, 0x3E7AD7F29ABCAF48
  br i1 %90, label %101, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 6
  %93 = load double, double* %92, align 8
  %94 = sitofp i64 %84 to double
  %95 = tail call double @sqrt(double %94) #9
  %96 = fmul double %93, %95
  %97 = load double, double* %87, align 8
  %98 = tail call double @pow(double %97, double 1.500000e+00) #9
  %99 = fdiv double %96, %98
  %100 = load i64, i64* %5, align 8
  br label %101

101:                                              ; preds = %86, %91
  %102 = phi i64 [ %100, %91 ], [ %84, %86 ]
  %103 = phi double [ %99, %91 ], [ 0.000000e+00, %86 ]
  %104 = sitofp i64 %102 to double
  %105 = fadd double %104, -1.000000e+00
  %106 = fdiv double %105, %104
  %107 = tail call double @pow(double %106, double 1.500000e+00) #9
  %108 = fmul double %103, %107
  %109 = load i64, i64* %5, align 8
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %131, label %111

111:                                              ; preds = %101
  %112 = load double, double* %87, align 8
  %113 = tail call double @llvm.fabs.f64(double %112) #9
  %114 = fcmp olt double %113, 0x3E7AD7F29ABCAF48
  br i1 %114, label %115, label %117

115:                                              ; preds = %111
  %116 = sitofp i64 %109 to double
  br label %124

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 7
  %119 = load double, double* %118, align 8
  %120 = sitofp i64 %109 to double
  %121 = fmul double %119, %120
  %122 = fmul double %112, %112
  %123 = fdiv double %121, %122
  br label %124

124:                                              ; preds = %117, %115
  %125 = phi double [ %116, %115 ], [ %120, %117 ]
  %126 = phi double [ 0.000000e+00, %115 ], [ %123, %117 ]
  %127 = fadd double %125, -1.000000e+00
  %128 = fdiv double %127, %125
  %129 = fmul double %126, %128
  %130 = fmul double %128, %129
  br label %131

131:                                              ; preds = %81, %101, %124
  %132 = phi double [ %108, %124 ], [ %108, %101 ], [ 0.000000e+00, %81 ]
  %133 = phi double [ %130, %124 ], [ 0.000000e+00, %101 ], [ 0.000000e+00, %81 ]
  %134 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %82, i64 %83, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), double %132, double %133) #9
  %135 = icmp sgt i32 %134, 0
  br i1 %135, label %139, label %136

136:                                              ; preds = %131
  %137 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #9
  %138 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

139:                                              ; preds = %131
  %140 = sext i32 %134 to i64
  %141 = add nuw nsw i64 %78, %140
  br label %142

142:                                              ; preds = %139, %77
  %143 = phi i64 [ %141, %139 ], [ %78, %77 ]
  %144 = and i32 %2, 16
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %167

146:                                              ; preds = %142
  %147 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 %143
  %148 = sub nsw i64 300, %143
  %149 = load i64, i64* %5, align 8
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %157, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %"class.jxl::Stats", %"class.jxl::Stats"* %1, i64 0, i32 3
  %153 = load double, double* %152, align 8
  %154 = sitofp i64 %149 to double
  %155 = fdiv double 1.000000e+00, %154
  %156 = tail call double @pow(double %153, double %155) #9
  br label %157

157:                                              ; preds = %146, %151
  %158 = phi double [ %156, %151 ], [ 0.000000e+00, %146 ]
  %159 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %147, i64 %148, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), double %158) #9
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %157
  %162 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 103, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #9
  %163 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

164:                                              ; preds = %157
  %165 = sext i32 %159 to i64
  %166 = add nuw nsw i64 %143, %165
  br label %167

167:                                              ; preds = %142, %164
  %168 = phi i64 [ %166, %164 ], [ %143, %142 ]
  %169 = icmp ult i64 %168, 300
  br i1 %169, label %173, label %170

170:                                              ; preds = %167
  %171 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 107, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0)) #9
  %172 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

173:                                              ; preds = %167
  %174 = call i64 @strlen(i8* nonnull %14) #9
  %175 = icmp ugt i64 %174, -17
  br i1 %175, label %176, label %178

176:                                              ; preds = %173
  %177 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %177) #10
  unreachable

178:                                              ; preds = %173
  %179 = icmp ult i64 %174, 23
  br i1 %179, label %188, label %180

180:                                              ; preds = %178
  %181 = add nuw i64 %174, 16
  %182 = and i64 %181, -16
  %183 = tail call i8* @_Znwm(i64 %182) #11
  %184 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %183, i8** %184, align 8
  %185 = or i64 %182, -9223372036854775808
  %186 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %185, i64* %186, align 8
  %187 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %174, i64* %187, align 8
  br label %194

188:                                              ; preds = %178
  %189 = trunc i64 %174 to i8
  %190 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %191 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %190, i64 0, i32 1, i32 0
  store i8 %189, i8* %191, align 1
  %192 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %193 = icmp eq i64 %174, 0
  br i1 %193, label %196, label %194

194:                                              ; preds = %188, %180
  %195 = phi i8* [ %183, %180 ], [ %192, %188 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* nonnull align 16 %14, i64 %174, i1 false) #9
  br label %196

196:                                              ; preds = %188, %194
  %197 = phi i8* [ %192, %188 ], [ %195, %194 ]
  %198 = getelementptr inbounds i8, i8* %197, i64 %174
  store i8 0, i8* %198, align 1
  call void @llvm.lifetime.end.p0i8(i64 300, i8* nonnull %14) #9
  br label %199

199:                                              ; preds = %196, %8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #3

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #6

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
