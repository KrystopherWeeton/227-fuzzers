; ModuleID = '../../net/cert/internal/general_names.cc'
source_filename = "../../net/cert/internal/general_names.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::GeneralNames" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.15", %"class.std::__1::vector", i32, [4 x i8] }>
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.3" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.net::IPAddress"*, %"class.net::IPAddress"*, %"class.std::__1::__compressed_pair.10" }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.net::IPAddress"* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.17" }
%"struct.std::__1::pair" = type { %"class.net::IPAddress", i32 }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::der::Input"*, %"class.net::der::Input"*, %"class.std::__1::__compressed_pair" }
%"class.net::der::Input" = type { i8*, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::der::Input"* }
%"class.net::CertErrors" = type { %"class.std::__1::vector.25" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.net::CertError"*, %"struct.net::CertError"*, %"class.std::__1::__compressed_pair.33" }
%"struct.net::CertError" = type { i32, i8*, %"class.std::__1::unique_ptr.27" }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.net::CertErrorParams"* }
%"class.net::CertErrorParams" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.net::CertError"* }
%"class.net::der::Parser" = type { %struct.cbs_st, i64 }
%struct.cbs_st = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

$_ZNSt3__16vectorINS_4pairIN3net9IPAddressEjEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = comdat any

@.str = private unnamed_addr constant [27 x i8] c"Failed parsing GeneralName\00", align 1
@_ZN3net25kFailedParsingGeneralNameE = hidden local_unnamed_addr constant i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), align 8
@.str.1 = private unnamed_addr constant [37 x i8] c"Failed reading GeneralNames SEQUENCE\00", align 1
@.str.2 = private unnamed_addr constant [55 x i8] c"GeneralNames contains trailing data after the sequence\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"GeneralNames is a sequence of 0 elements\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Failed reading GeneralName TLV\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"rfc822Name is not ASCII\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"dNSName is not ASCII\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"uniformResourceIdentifier is not ASCII\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Failed parsing iPAddress\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"Unknown GeneralName type\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"tag\00", align 1

@_ZN3net12GeneralNamesC1Ev = hidden unnamed_addr alias void (%"struct.net::GeneralNames"*), void (%"struct.net::GeneralNames"*)* @_ZN3net12GeneralNamesC2Ev
@_ZN3net12GeneralNamesD1Ev = hidden unnamed_addr alias void (%"struct.net::GeneralNames"*), void (%"struct.net::GeneralNames"*)* @_ZN3net12GeneralNamesD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12GeneralNamesC2Ev(%"struct.net::GeneralNames"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.net::GeneralNames"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 244, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net12GeneralNamesD2Ev(%"struct.net::GeneralNames"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 9, i32 0, i32 0
  %3 = load %"class.net::der::Input"*, %"class.net::der::Input"** %2, align 8
  %4 = icmp eq %"class.net::der::Input"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.net::der::Input"* %3 to i64
  %7 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 9, i32 0, i32 1
  %8 = bitcast %"class.net::der::Input"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.net::der::Input"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #10
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 8, i32 0, i32 0
  %12 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, align 8
  %13 = icmp eq %"struct.std::__1::pair"* %12, null
  br i1 %13, label %28, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 8, i32 0, i32 1
  %16 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %15, align 8
  %17 = icmp eq %"struct.std::__1::pair"* %16, %12
  br i1 %17, label %25, label %18

18:                                               ; preds = %14, %18
  %19 = phi %"struct.std::__1::pair"* [ %20, %18 ], [ %16, %14 ]
  %20 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %19, i64 -1
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  tail call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %21) #11
  %22 = icmp eq %"struct.std::__1::pair"* %20, %12
  br i1 %22, label %23, label %18

23:                                               ; preds = %18
  %24 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, align 8
  br label %25

25:                                               ; preds = %23, %14
  %26 = phi %"struct.std::__1::pair"* [ %24, %23 ], [ %12, %14 ]
  store %"struct.std::__1::pair"* %12, %"struct.std::__1::pair"** %15, align 8
  %27 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %27) #10
  br label %28

28:                                               ; preds = %10, %25
  %29 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 7, i32 0, i32 0
  %30 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %29, align 8
  %31 = icmp eq %"class.net::IPAddress"* %30, null
  br i1 %31, label %45, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 7, i32 0, i32 1
  %34 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %33, align 8
  %35 = icmp eq %"class.net::IPAddress"* %34, %30
  br i1 %35, label %42, label %36

36:                                               ; preds = %32, %36
  %37 = phi %"class.net::IPAddress"* [ %38, %36 ], [ %34, %32 ]
  %38 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %37, i64 -1
  tail call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %38) #11
  %39 = icmp eq %"class.net::IPAddress"* %38, %30
  br i1 %39, label %40, label %36

40:                                               ; preds = %36
  %41 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %29, align 8
  br label %42

42:                                               ; preds = %40, %32
  %43 = phi %"class.net::IPAddress"* [ %41, %40 ], [ %30, %32 ]
  store %"class.net::IPAddress"* %30, %"class.net::IPAddress"** %33, align 8
  %44 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %43, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %44) #10
  br label %45

45:                                               ; preds = %28, %42
  %46 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 6, i32 0, i32 0
  %47 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %46, align 8
  %48 = icmp eq %"class.base::BasicStringPiece"* %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %45
  %50 = ptrtoint %"class.base::BasicStringPiece"* %47 to i64
  %51 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 6, i32 0, i32 1
  %52 = bitcast %"class.base::BasicStringPiece"** %51 to i64*
  store i64 %50, i64* %52, align 8
  %53 = bitcast %"class.base::BasicStringPiece"* %47 to i8*
  tail call void @_ZdlPv(i8* %53) #10
  br label %54

54:                                               ; preds = %45, %49
  %55 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 5, i32 0, i32 0
  %56 = load %"class.net::der::Input"*, %"class.net::der::Input"** %55, align 8
  %57 = icmp eq %"class.net::der::Input"* %56, null
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = ptrtoint %"class.net::der::Input"* %56 to i64
  %60 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 5, i32 0, i32 1
  %61 = bitcast %"class.net::der::Input"** %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = bitcast %"class.net::der::Input"* %56 to i8*
  tail call void @_ZdlPv(i8* %62) #10
  br label %63

63:                                               ; preds = %54, %58
  %64 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 4, i32 0, i32 0
  %65 = load %"class.net::der::Input"*, %"class.net::der::Input"** %64, align 8
  %66 = icmp eq %"class.net::der::Input"* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %63
  %68 = ptrtoint %"class.net::der::Input"* %65 to i64
  %69 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 4, i32 0, i32 1
  %70 = bitcast %"class.net::der::Input"** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = bitcast %"class.net::der::Input"* %65 to i8*
  tail call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %63, %67
  %73 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 3, i32 0, i32 0
  %74 = load %"class.net::der::Input"*, %"class.net::der::Input"** %73, align 8
  %75 = icmp eq %"class.net::der::Input"* %74, null
  br i1 %75, label %81, label %76

76:                                               ; preds = %72
  %77 = ptrtoint %"class.net::der::Input"* %74 to i64
  %78 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 3, i32 0, i32 1
  %79 = bitcast %"class.net::der::Input"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = bitcast %"class.net::der::Input"* %74 to i8*
  tail call void @_ZdlPv(i8* %80) #10
  br label %81

81:                                               ; preds = %72, %76
  %82 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 2, i32 0, i32 0
  %83 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %82, align 8
  %84 = icmp eq %"class.base::BasicStringPiece"* %83, null
  br i1 %84, label %90, label %85

85:                                               ; preds = %81
  %86 = ptrtoint %"class.base::BasicStringPiece"* %83 to i64
  %87 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 2, i32 0, i32 1
  %88 = bitcast %"class.base::BasicStringPiece"** %87 to i64*
  store i64 %86, i64* %88, align 8
  %89 = bitcast %"class.base::BasicStringPiece"* %83 to i8*
  tail call void @_ZdlPv(i8* %89) #10
  br label %90

90:                                               ; preds = %81, %85
  %91 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 1, i32 0, i32 0
  %92 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %91, align 8
  %93 = icmp eq %"class.base::BasicStringPiece"* %92, null
  br i1 %93, label %99, label %94

94:                                               ; preds = %90
  %95 = ptrtoint %"class.base::BasicStringPiece"* %92 to i64
  %96 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 1, i32 0, i32 1
  %97 = bitcast %"class.base::BasicStringPiece"** %96 to i64*
  store i64 %95, i64* %97, align 8
  %98 = bitcast %"class.base::BasicStringPiece"* %92 to i8*
  tail call void @_ZdlPv(i8* %98) #10
  br label %99

99:                                               ; preds = %90, %94
  %100 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 0, i32 0, i32 0
  %101 = load %"class.net::der::Input"*, %"class.net::der::Input"** %100, align 8
  %102 = icmp eq %"class.net::der::Input"* %101, null
  br i1 %102, label %108, label %103

103:                                              ; preds = %99
  %104 = ptrtoint %"class.net::der::Input"* %101 to i64
  %105 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %0, i64 0, i32 0, i32 0, i32 1
  %106 = bitcast %"class.net::der::Input"** %105 to i64*
  store i64 %104, i64* %106, align 8
  %107 = bitcast %"class.net::der::Input"* %101 to i8*
  tail call void @_ZdlPv(i8* %107) #10
  br label %108

108:                                              ; preds = %99, %103
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.net::GeneralNames"* @_ZN3net12GeneralNames6CreateERKNS_3der5InputEPNS_10CertErrorsE(%"class.net::der::Input"* dereferenceable(16), %"class.net::CertErrors"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.net::der::Parser", align 8
  %4 = alloca %"class.net::der::Input", align 8
  %5 = bitcast %"class.net::der::Parser"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #11
  %6 = bitcast %"class.net::der::Parser"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false)
  call void @_ZN3net3der6ParserC1ERKNS0_5InputE(%"class.net::der::Parser"* nonnull %3, %"class.net::der::Input"* dereferenceable(16) %0) #11
  %7 = bitcast %"class.net::der::Input"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #11
  %8 = bitcast %"class.net::der::Input"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  call void @_ZN3net3der5InputC1Ev(%"class.net::der::Input"* nonnull %4) #11
  %9 = call zeroext i1 @_ZN3net3der6Parser7ReadTagEjPNS0_5InputE(%"class.net::der::Parser"* nonnull %3, i32 536870928, %"class.net::der::Input"* nonnull %4) #11
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0)) #11
  br label %16

11:                                               ; preds = %2
  %12 = call zeroext i1 @_ZN3net3der6Parser7HasMoreEv(%"class.net::der::Parser"* nonnull %3) #11
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0)) #11
  br label %16

14:                                               ; preds = %11
  %15 = call %"struct.net::GeneralNames"* @_ZN3net12GeneralNames15CreateFromValueERKNS_3der5InputEPNS_10CertErrorsE(%"class.net::der::Input"* nonnull dereferenceable(16) %4, %"class.net::CertErrors"* %1)
  br label %16

16:                                               ; preds = %14, %13, %10
  %17 = phi %"struct.net::GeneralNames"* [ null, %13 ], [ %15, %14 ], [ null, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #11
  ret %"struct.net::GeneralNames"* %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3net3der6ParserC1ERKNS0_5InputE(%"class.net::der::Parser"*, %"class.net::der::Input"* dereferenceable(16)) unnamed_addr #2

declare void @_ZN3net3der5InputC1Ev(%"class.net::der::Input"*) unnamed_addr #2

declare zeroext i1 @_ZN3net3der6Parser7ReadTagEjPNS0_5InputE(%"class.net::der::Parser"*, i32, %"class.net::der::Input"*) local_unnamed_addr #2

declare void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"*, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN3net3der6Parser7HasMoreEv(%"class.net::der::Parser"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.net::GeneralNames"* @_ZN3net12GeneralNames15CreateFromValueERKNS_3der5InputEPNS_10CertErrorsE(%"class.net::der::Input"* dereferenceable(16), %"class.net::CertErrors"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.net::der::Parser", align 8
  %4 = alloca %"class.net::der::Input", align 8
  %5 = tail call i8* @_Znwm(i64 248) #10
  %6 = bitcast i8* %5 to %"struct.net::GeneralNames"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 244, i1 false) #11
  %7 = bitcast %"class.net::der::Parser"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #11
  %8 = bitcast %"class.net::der::Parser"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  call void @_ZN3net3der6ParserC1ERKNS0_5InputE(%"class.net::der::Parser"* nonnull %3, %"class.net::der::Input"* dereferenceable(16) %0) #11
  %9 = call zeroext i1 @_ZN3net3der6Parser7HasMoreEv(%"class.net::der::Parser"* nonnull %3) #11
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = call zeroext i1 @_ZN3net3der6Parser7HasMoreEv(%"class.net::der::Parser"* nonnull %3) #11
  br i1 %11, label %12, label %16

12:                                               ; preds = %10
  %13 = bitcast %"class.net::der::Input"* %4 to i8*
  %14 = bitcast %"class.net::der::Input"* %4 to i8*
  br label %17

15:                                               ; preds = %2
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %25

16:                                               ; preds = %23, %10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #11
  br label %26

17:                                               ; preds = %12, %23
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 16, i1 false)
  call void @_ZN3net3der5InputC1Ev(%"class.net::der::Input"* nonnull %4) #11
  %18 = call zeroext i1 @_ZN3net3der6Parser10ReadRawTLVEPNS0_5InputE(%"class.net::der::Parser"* nonnull %3, %"class.net::der::Input"* nonnull %4) #11
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0)) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  br label %25

20:                                               ; preds = %17
  %21 = call zeroext i1 @_ZN3net16ParseGeneralNameERKNS_3der5InputENS_12GeneralNames29ParseGeneralNameIPAddressTypeEPS4_PNS_10CertErrorsE(%"class.net::der::Input"* nonnull dereferenceable(16) %4, i32 0, %"struct.net::GeneralNames"* nonnull %6, %"class.net::CertErrors"* %1)
  br i1 %21, label %23, label %22

22:                                               ; preds = %20
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  br label %25

23:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #11
  %24 = call zeroext i1 @_ZN3net3der6Parser7HasMoreEv(%"class.net::der::Parser"* nonnull %3) #11
  br i1 %24, label %17, label %16

25:                                               ; preds = %19, %22, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #11
  call void @_ZN3net12GeneralNamesD2Ev(%"struct.net::GeneralNames"* nonnull %6) #11
  call void @_ZdlPv(i8* nonnull %5) #10
  br label %26

26:                                               ; preds = %16, %25
  %27 = phi %"struct.net::GeneralNames"* [ %6, %16 ], [ null, %25 ]
  ret %"struct.net::GeneralNames"* %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare zeroext i1 @_ZN3net3der6Parser10ReadRawTLVEPNS0_5InputE(%"class.net::der::Parser"*, %"class.net::der::Input"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net16ParseGeneralNameERKNS_3der5InputENS_12GeneralNames29ParseGeneralNameIPAddressTypeEPS4_PNS_10CertErrorsE(%"class.net::der::Input"* dereferenceable(16), i32, %"struct.net::GeneralNames"*, %"class.net::CertErrors"*) local_unnamed_addr #0 {
  %5 = alloca %"class.net::der::Parser", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.net::der::Input", align 8
  %8 = alloca %"class.net::der::Parser", align 8
  %9 = alloca %"class.net::der::Input", align 8
  %10 = alloca %"class.net::IPAddress", align 1
  %11 = alloca %"class.net::IPAddress", align 1
  %12 = alloca %"struct.std::__1::pair", align 4
  %13 = alloca %"class.net::IPAddress", align 1
  %14 = bitcast %"class.net::der::Parser"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #11
  %15 = bitcast %"class.net::der::Parser"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @_ZN3net3der6ParserC1ERKNS0_5InputE(%"class.net::der::Parser"* nonnull %5, %"class.net::der::Input"* dereferenceable(16) %0) #11
  %16 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #11
  store i32 -1431655766, i32* %6, align 4
  %17 = bitcast %"class.net::der::Input"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #11
  %18 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %7, i64 0, i32 0
  %19 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %7, i64 0, i32 1
  %20 = bitcast %"class.net::der::Input"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  call void @_ZN3net3der5InputC1Ev(%"class.net::der::Input"* nonnull %7) #11
  %21 = call zeroext i1 @_ZN3net3der6Parser15ReadTagAndValueEPjPNS0_5InputE(%"class.net::der::Parser"* nonnull %5, i32* nonnull %6, %"class.net::der::Input"* nonnull %7) #11
  br i1 %21, label %22, label %748

22:                                               ; preds = %4
  %23 = load i32, i32* %6, align 4
  %24 = call i32 @_ZN3net3der26ContextSpecificConstructedEh(i8 zeroext 0) #11
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %95

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 0, i32 0, i32 1
  %28 = load %"class.net::der::Input"*, %"class.net::der::Input"** %27, align 8
  %29 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %30 = load %"class.net::der::Input"*, %"class.net::der::Input"** %29, align 8
  %31 = icmp eq %"class.net::der::Input"* %28, %30
  %32 = ptrtoint %"class.net::der::Input"* %30 to i64
  br i1 %31, label %38, label %33

33:                                               ; preds = %26
  %34 = bitcast %"class.net::der::Input"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %35 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %28, i64 1
  %36 = ptrtoint %"class.net::der::Input"* %35 to i64
  %37 = bitcast %"class.net::der::Input"** %27 to i64*
  store i64 %36, i64* %37, align 8
  br label %743

38:                                               ; preds = %26
  %39 = ptrtoint %"class.net::der::Input"* %28 to i64
  %40 = bitcast %"class.net::der::Input"** %27 to i64*
  %41 = bitcast %"struct.net::GeneralNames"* %2 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %39, %42
  %44 = ashr exact i64 %43, 4
  %45 = add nsw i64 %44, 1
  %46 = icmp ugt i64 %45, 1152921504606846975
  br i1 %46, label %47, label %49

47:                                               ; preds = %38
  %48 = bitcast %"struct.net::GeneralNames"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %48) #12
  unreachable

49:                                               ; preds = %38
  %50 = bitcast %"class.net::der::Input"** %29 to i64*
  %51 = sub i64 %32, %42
  %52 = ashr exact i64 %51, 4
  %53 = icmp ult i64 %52, 576460752303423487
  br i1 %53, label %54, label %62

54:                                               ; preds = %49
  %55 = ashr exact i64 %51, 3
  %56 = icmp ult i64 %55, %45
  %57 = select i1 %56, i64 %45, i64 %55
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %54
  %60 = icmp ugt i64 %57, 1152921504606846975
  br i1 %60, label %61, label %62

61:                                               ; preds = %59
  call void @abort() #12
  unreachable

62:                                               ; preds = %59, %49
  %63 = phi i64 [ %57, %59 ], [ 1152921504606846975, %49 ]
  %64 = shl i64 %63, 4
  %65 = call i8* @_Znwm(i64 %64) #10
  %66 = bitcast i8* %65 to %"class.net::der::Input"*
  br label %67

67:                                               ; preds = %62, %54
  %68 = phi i64 [ %63, %62 ], [ 0, %54 ]
  %69 = phi %"class.net::der::Input"* [ %66, %62 ], [ null, %54 ]
  %70 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %69, i64 %44
  %71 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %69, i64 %68
  %72 = ptrtoint %"class.net::der::Input"* %71 to i64
  %73 = bitcast %"class.net::der::Input"* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %74 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %70, i64 1
  %75 = ptrtoint %"class.net::der::Input"* %74 to i64
  %76 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 0, i32 0, i32 0
  %77 = load %"class.net::der::Input"*, %"class.net::der::Input"** %76, align 8
  %78 = load i64, i64* %40, align 8
  %79 = ptrtoint %"class.net::der::Input"* %77 to i64
  %80 = sub i64 %78, %79
  %81 = ashr exact i64 %80, 4
  %82 = sub nsw i64 0, %81
  %83 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %70, i64 %82
  %84 = ptrtoint %"class.net::der::Input"* %83 to i64
  %85 = icmp sgt i64 %80, 0
  br i1 %85, label %86, label %90

86:                                               ; preds = %67
  %87 = bitcast %"class.net::der::Input"* %83 to i8*
  %88 = bitcast %"class.net::der::Input"* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 %80, i1 false) #11
  %89 = load %"class.net::der::Input"*, %"class.net::der::Input"** %76, align 8
  br label %90

90:                                               ; preds = %86, %67
  %91 = phi %"class.net::der::Input"* [ %77, %67 ], [ %89, %86 ]
  store i64 %84, i64* %41, align 8
  store i64 %75, i64* %40, align 8
  store i64 %72, i64* %50, align 8
  %92 = icmp eq %"class.net::der::Input"* %91, null
  br i1 %92, label %743, label %93

93:                                               ; preds = %90
  %94 = bitcast %"class.net::der::Input"* %91 to i8*
  call void @_ZdlPv(i8* %94) #10
  br label %743

95:                                               ; preds = %22
  %96 = load i32, i32* %6, align 4
  %97 = call i32 @_ZN3net3der24ContextSpecificPrimitiveEh(i8 zeroext 1) #11
  %98 = icmp eq i32 %96, %97
  br i1 %98, label %99, label %177

99:                                               ; preds = %95
  %100 = call { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"* nonnull %7) #11
  %101 = extractvalue { i8*, i64 } %100, 0
  %102 = extractvalue { i8*, i64 } %100, 1
  %103 = call zeroext i1 @_ZN4base13IsStringASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8* %101, i64 %102) #11
  br i1 %103, label %105, label %104

104:                                              ; preds = %99
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0)) #11
  br label %748

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 1
  %107 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 1, i32 0, i32 1
  %108 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %107, align 8
  %109 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %110 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %109, align 8
  %111 = icmp eq %"class.base::BasicStringPiece"* %108, %110
  %112 = ptrtoint %"class.base::BasicStringPiece"* %110 to i64
  br i1 %111, label %119, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %108, i64 0, i32 0
  store i8* %101, i8** %114, align 8
  %115 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %108, i64 0, i32 1
  store i64 %102, i64* %115, align 8
  %116 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %108, i64 1
  %117 = ptrtoint %"class.base::BasicStringPiece"* %116 to i64
  %118 = bitcast %"class.base::BasicStringPiece"** %107 to i64*
  store i64 %117, i64* %118, align 8
  br label %743

119:                                              ; preds = %105
  %120 = ptrtoint %"class.base::BasicStringPiece"* %108 to i64
  %121 = bitcast %"class.base::BasicStringPiece"** %107 to i64*
  %122 = bitcast %"class.std::__1::vector.1"* %106 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %120, %123
  %125 = ashr exact i64 %124, 4
  %126 = add nsw i64 %125, 1
  %127 = icmp ugt i64 %126, 1152921504606846975
  br i1 %127, label %128, label %130

128:                                              ; preds = %119
  %129 = bitcast %"class.std::__1::vector.1"* %106 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %129) #12
  unreachable

130:                                              ; preds = %119
  %131 = bitcast %"class.base::BasicStringPiece"** %109 to i64*
  %132 = sub i64 %112, %123
  %133 = ashr exact i64 %132, 4
  %134 = icmp ult i64 %133, 576460752303423487
  br i1 %134, label %135, label %143

135:                                              ; preds = %130
  %136 = ashr exact i64 %132, 3
  %137 = icmp ult i64 %136, %126
  %138 = select i1 %137, i64 %126, i64 %136
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %148, label %140

140:                                              ; preds = %135
  %141 = icmp ugt i64 %138, 1152921504606846975
  br i1 %141, label %142, label %143

142:                                              ; preds = %140
  call void @abort() #12
  unreachable

143:                                              ; preds = %140, %130
  %144 = phi i64 [ %138, %140 ], [ 1152921504606846975, %130 ]
  %145 = shl i64 %144, 4
  %146 = call i8* @_Znwm(i64 %145) #10
  %147 = bitcast i8* %146 to %"class.base::BasicStringPiece"*
  br label %148

148:                                              ; preds = %143, %135
  %149 = phi i64 [ %144, %143 ], [ 0, %135 ]
  %150 = phi %"class.base::BasicStringPiece"* [ %147, %143 ], [ null, %135 ]
  %151 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %150, i64 %125
  %152 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %150, i64 %149
  %153 = ptrtoint %"class.base::BasicStringPiece"* %152 to i64
  %154 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %151, i64 0, i32 0
  store i8* %101, i8** %154, align 8
  %155 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %150, i64 %125, i32 1
  store i64 %102, i64* %155, align 8
  %156 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %151, i64 1
  %157 = ptrtoint %"class.base::BasicStringPiece"* %156 to i64
  %158 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %106, i64 0, i32 0, i32 0
  %159 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %158, align 8
  %160 = load i64, i64* %121, align 8
  %161 = ptrtoint %"class.base::BasicStringPiece"* %159 to i64
  %162 = sub i64 %160, %161
  %163 = ashr exact i64 %162, 4
  %164 = sub nsw i64 0, %163
  %165 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %151, i64 %164
  %166 = ptrtoint %"class.base::BasicStringPiece"* %165 to i64
  %167 = icmp sgt i64 %162, 0
  br i1 %167, label %168, label %172

168:                                              ; preds = %148
  %169 = bitcast %"class.base::BasicStringPiece"* %165 to i8*
  %170 = bitcast %"class.base::BasicStringPiece"* %159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %169, i8* align 8 %170, i64 %162, i1 false) #11
  %171 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %158, align 8
  br label %172

172:                                              ; preds = %168, %148
  %173 = phi %"class.base::BasicStringPiece"* [ %159, %148 ], [ %171, %168 ]
  store i64 %166, i64* %122, align 8
  store i64 %157, i64* %121, align 8
  store i64 %153, i64* %131, align 8
  %174 = icmp eq %"class.base::BasicStringPiece"* %173, null
  br i1 %174, label %743, label %175

175:                                              ; preds = %172
  %176 = bitcast %"class.base::BasicStringPiece"* %173 to i8*
  call void @_ZdlPv(i8* %176) #10
  br label %743

177:                                              ; preds = %95
  %178 = load i32, i32* %6, align 4
  %179 = call i32 @_ZN3net3der24ContextSpecificPrimitiveEh(i8 zeroext 2) #11
  %180 = icmp eq i32 %178, %179
  br i1 %180, label %181, label %259

181:                                              ; preds = %177
  %182 = call { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"* nonnull %7) #11
  %183 = extractvalue { i8*, i64 } %182, 0
  %184 = extractvalue { i8*, i64 } %182, 1
  %185 = call zeroext i1 @_ZN4base13IsStringASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8* %183, i64 %184) #11
  br i1 %185, label %187, label %186

186:                                              ; preds = %181
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0)) #11
  br label %748

187:                                              ; preds = %181
  %188 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 2
  %189 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 2, i32 0, i32 1
  %190 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %189, align 8
  %191 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %192 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %191, align 8
  %193 = icmp eq %"class.base::BasicStringPiece"* %190, %192
  %194 = ptrtoint %"class.base::BasicStringPiece"* %192 to i64
  br i1 %193, label %201, label %195

195:                                              ; preds = %187
  %196 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %190, i64 0, i32 0
  store i8* %183, i8** %196, align 8
  %197 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %190, i64 0, i32 1
  store i64 %184, i64* %197, align 8
  %198 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %190, i64 1
  %199 = ptrtoint %"class.base::BasicStringPiece"* %198 to i64
  %200 = bitcast %"class.base::BasicStringPiece"** %189 to i64*
  store i64 %199, i64* %200, align 8
  br label %743

201:                                              ; preds = %187
  %202 = ptrtoint %"class.base::BasicStringPiece"* %190 to i64
  %203 = bitcast %"class.base::BasicStringPiece"** %189 to i64*
  %204 = bitcast %"class.std::__1::vector.1"* %188 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %202, %205
  %207 = ashr exact i64 %206, 4
  %208 = add nsw i64 %207, 1
  %209 = icmp ugt i64 %208, 1152921504606846975
  br i1 %209, label %210, label %212

210:                                              ; preds = %201
  %211 = bitcast %"class.std::__1::vector.1"* %188 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %211) #12
  unreachable

212:                                              ; preds = %201
  %213 = bitcast %"class.base::BasicStringPiece"** %191 to i64*
  %214 = sub i64 %194, %205
  %215 = ashr exact i64 %214, 4
  %216 = icmp ult i64 %215, 576460752303423487
  br i1 %216, label %217, label %225

217:                                              ; preds = %212
  %218 = ashr exact i64 %214, 3
  %219 = icmp ult i64 %218, %208
  %220 = select i1 %219, i64 %208, i64 %218
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %230, label %222

222:                                              ; preds = %217
  %223 = icmp ugt i64 %220, 1152921504606846975
  br i1 %223, label %224, label %225

224:                                              ; preds = %222
  call void @abort() #12
  unreachable

225:                                              ; preds = %222, %212
  %226 = phi i64 [ %220, %222 ], [ 1152921504606846975, %212 ]
  %227 = shl i64 %226, 4
  %228 = call i8* @_Znwm(i64 %227) #10
  %229 = bitcast i8* %228 to %"class.base::BasicStringPiece"*
  br label %230

230:                                              ; preds = %225, %217
  %231 = phi i64 [ %226, %225 ], [ 0, %217 ]
  %232 = phi %"class.base::BasicStringPiece"* [ %229, %225 ], [ null, %217 ]
  %233 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %232, i64 %207
  %234 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %232, i64 %231
  %235 = ptrtoint %"class.base::BasicStringPiece"* %234 to i64
  %236 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %233, i64 0, i32 0
  store i8* %183, i8** %236, align 8
  %237 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %232, i64 %207, i32 1
  store i64 %184, i64* %237, align 8
  %238 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %233, i64 1
  %239 = ptrtoint %"class.base::BasicStringPiece"* %238 to i64
  %240 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %188, i64 0, i32 0, i32 0
  %241 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %240, align 8
  %242 = load i64, i64* %203, align 8
  %243 = ptrtoint %"class.base::BasicStringPiece"* %241 to i64
  %244 = sub i64 %242, %243
  %245 = ashr exact i64 %244, 4
  %246 = sub nsw i64 0, %245
  %247 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %233, i64 %246
  %248 = ptrtoint %"class.base::BasicStringPiece"* %247 to i64
  %249 = icmp sgt i64 %244, 0
  br i1 %249, label %250, label %254

250:                                              ; preds = %230
  %251 = bitcast %"class.base::BasicStringPiece"* %247 to i8*
  %252 = bitcast %"class.base::BasicStringPiece"* %241 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %251, i8* align 8 %252, i64 %244, i1 false) #11
  %253 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %240, align 8
  br label %254

254:                                              ; preds = %250, %230
  %255 = phi %"class.base::BasicStringPiece"* [ %241, %230 ], [ %253, %250 ]
  store i64 %248, i64* %204, align 8
  store i64 %239, i64* %203, align 8
  store i64 %235, i64* %213, align 8
  %256 = icmp eq %"class.base::BasicStringPiece"* %255, null
  br i1 %256, label %743, label %257

257:                                              ; preds = %254
  %258 = bitcast %"class.base::BasicStringPiece"* %255 to i8*
  call void @_ZdlPv(i8* %258) #10
  br label %743

259:                                              ; preds = %177
  %260 = load i32, i32* %6, align 4
  %261 = call i32 @_ZN3net3der26ContextSpecificConstructedEh(i8 zeroext 3) #11
  %262 = icmp eq i32 %260, %261
  br i1 %262, label %263, label %333

263:                                              ; preds = %259
  %264 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 3
  %265 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 3, i32 0, i32 1
  %266 = load %"class.net::der::Input"*, %"class.net::der::Input"** %265, align 8
  %267 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %268 = load %"class.net::der::Input"*, %"class.net::der::Input"** %267, align 8
  %269 = icmp eq %"class.net::der::Input"* %266, %268
  %270 = ptrtoint %"class.net::der::Input"* %268 to i64
  br i1 %269, label %276, label %271

271:                                              ; preds = %263
  %272 = bitcast %"class.net::der::Input"* %266 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %272, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %273 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %266, i64 1
  %274 = ptrtoint %"class.net::der::Input"* %273 to i64
  %275 = bitcast %"class.net::der::Input"** %265 to i64*
  store i64 %274, i64* %275, align 8
  br label %743

276:                                              ; preds = %263
  %277 = ptrtoint %"class.net::der::Input"* %266 to i64
  %278 = bitcast %"class.net::der::Input"** %265 to i64*
  %279 = bitcast %"class.std::__1::vector"* %264 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = sub i64 %277, %280
  %282 = ashr exact i64 %281, 4
  %283 = add nsw i64 %282, 1
  %284 = icmp ugt i64 %283, 1152921504606846975
  br i1 %284, label %285, label %287

285:                                              ; preds = %276
  %286 = bitcast %"class.std::__1::vector"* %264 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %286) #12
  unreachable

287:                                              ; preds = %276
  %288 = bitcast %"class.net::der::Input"** %267 to i64*
  %289 = sub i64 %270, %280
  %290 = ashr exact i64 %289, 4
  %291 = icmp ult i64 %290, 576460752303423487
  br i1 %291, label %292, label %300

292:                                              ; preds = %287
  %293 = ashr exact i64 %289, 3
  %294 = icmp ult i64 %293, %283
  %295 = select i1 %294, i64 %283, i64 %293
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %305, label %297

297:                                              ; preds = %292
  %298 = icmp ugt i64 %295, 1152921504606846975
  br i1 %298, label %299, label %300

299:                                              ; preds = %297
  call void @abort() #12
  unreachable

300:                                              ; preds = %297, %287
  %301 = phi i64 [ %295, %297 ], [ 1152921504606846975, %287 ]
  %302 = shl i64 %301, 4
  %303 = call i8* @_Znwm(i64 %302) #10
  %304 = bitcast i8* %303 to %"class.net::der::Input"*
  br label %305

305:                                              ; preds = %300, %292
  %306 = phi i64 [ %301, %300 ], [ 0, %292 ]
  %307 = phi %"class.net::der::Input"* [ %304, %300 ], [ null, %292 ]
  %308 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %307, i64 %282
  %309 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %307, i64 %306
  %310 = ptrtoint %"class.net::der::Input"* %309 to i64
  %311 = bitcast %"class.net::der::Input"* %308 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %311, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %312 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %308, i64 1
  %313 = ptrtoint %"class.net::der::Input"* %312 to i64
  %314 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %264, i64 0, i32 0, i32 0
  %315 = load %"class.net::der::Input"*, %"class.net::der::Input"** %314, align 8
  %316 = load i64, i64* %278, align 8
  %317 = ptrtoint %"class.net::der::Input"* %315 to i64
  %318 = sub i64 %316, %317
  %319 = ashr exact i64 %318, 4
  %320 = sub nsw i64 0, %319
  %321 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %308, i64 %320
  %322 = ptrtoint %"class.net::der::Input"* %321 to i64
  %323 = icmp sgt i64 %318, 0
  br i1 %323, label %324, label %328

324:                                              ; preds = %305
  %325 = bitcast %"class.net::der::Input"* %321 to i8*
  %326 = bitcast %"class.net::der::Input"* %315 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %325, i8* align 8 %326, i64 %318, i1 false) #11
  %327 = load %"class.net::der::Input"*, %"class.net::der::Input"** %314, align 8
  br label %328

328:                                              ; preds = %324, %305
  %329 = phi %"class.net::der::Input"* [ %315, %305 ], [ %327, %324 ]
  store i64 %322, i64* %279, align 8
  store i64 %313, i64* %278, align 8
  store i64 %310, i64* %288, align 8
  %330 = icmp eq %"class.net::der::Input"* %329, null
  br i1 %330, label %743, label %331

331:                                              ; preds = %328
  %332 = bitcast %"class.net::der::Input"* %329 to i8*
  call void @_ZdlPv(i8* %332) #10
  br label %743

333:                                              ; preds = %259
  %334 = load i32, i32* %6, align 4
  %335 = call i32 @_ZN3net3der26ContextSpecificConstructedEh(i8 zeroext 4) #11
  %336 = icmp eq i32 %334, %335
  br i1 %336, label %337, label %417

337:                                              ; preds = %333
  %338 = bitcast %"class.net::der::Parser"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %338) #11
  %339 = bitcast %"class.net::der::Parser"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %339, i8 -86, i64 24, i1 false)
  call void @_ZN3net3der6ParserC1ERKNS0_5InputE(%"class.net::der::Parser"* nonnull %8, %"class.net::der::Input"* nonnull dereferenceable(16) %7) #11
  %340 = bitcast %"class.net::der::Input"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %340) #11
  %341 = bitcast %"class.net::der::Input"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %341, i8 -86, i64 16, i1 false)
  call void @_ZN3net3der5InputC1Ev(%"class.net::der::Input"* nonnull %9) #11
  %342 = call zeroext i1 @_ZN3net3der6Parser7ReadTagEjPNS0_5InputE(%"class.net::der::Parser"* nonnull %8, i32 536870928, %"class.net::der::Input"* nonnull %9) #11
  br i1 %342, label %343, label %416

343:                                              ; preds = %337
  %344 = call zeroext i1 @_ZN3net3der6Parser7HasMoreEv(%"class.net::der::Parser"* nonnull %5) #11
  br i1 %344, label %416, label %345

345:                                              ; preds = %343
  %346 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 4
  %347 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 4, i32 0, i32 1
  %348 = load %"class.net::der::Input"*, %"class.net::der::Input"** %347, align 8
  %349 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %350 = load %"class.net::der::Input"*, %"class.net::der::Input"** %349, align 8
  %351 = icmp eq %"class.net::der::Input"* %348, %350
  %352 = ptrtoint %"class.net::der::Input"* %350 to i64
  br i1 %351, label %358, label %353

353:                                              ; preds = %345
  %354 = bitcast %"class.net::der::Input"* %348 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %354, i8* nonnull align 8 %340, i64 16, i1 false) #11
  %355 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %348, i64 1
  %356 = ptrtoint %"class.net::der::Input"* %355 to i64
  %357 = bitcast %"class.net::der::Input"** %347 to i64*
  store i64 %356, i64* %357, align 8
  br label %415

358:                                              ; preds = %345
  %359 = ptrtoint %"class.net::der::Input"* %348 to i64
  %360 = bitcast %"class.net::der::Input"** %347 to i64*
  %361 = bitcast %"class.std::__1::vector"* %346 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = sub i64 %359, %362
  %364 = ashr exact i64 %363, 4
  %365 = add nsw i64 %364, 1
  %366 = icmp ugt i64 %365, 1152921504606846975
  br i1 %366, label %367, label %369

367:                                              ; preds = %358
  %368 = bitcast %"class.std::__1::vector"* %346 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %368) #12
  unreachable

369:                                              ; preds = %358
  %370 = bitcast %"class.net::der::Input"** %349 to i64*
  %371 = sub i64 %352, %362
  %372 = ashr exact i64 %371, 4
  %373 = icmp ult i64 %372, 576460752303423487
  br i1 %373, label %374, label %382

374:                                              ; preds = %369
  %375 = ashr exact i64 %371, 3
  %376 = icmp ult i64 %375, %365
  %377 = select i1 %376, i64 %365, i64 %375
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %387, label %379

379:                                              ; preds = %374
  %380 = icmp ugt i64 %377, 1152921504606846975
  br i1 %380, label %381, label %382

381:                                              ; preds = %379
  call void @abort() #12
  unreachable

382:                                              ; preds = %379, %369
  %383 = phi i64 [ %377, %379 ], [ 1152921504606846975, %369 ]
  %384 = shl i64 %383, 4
  %385 = call i8* @_Znwm(i64 %384) #10
  %386 = bitcast i8* %385 to %"class.net::der::Input"*
  br label %387

387:                                              ; preds = %382, %374
  %388 = phi i64 [ %383, %382 ], [ 0, %374 ]
  %389 = phi %"class.net::der::Input"* [ %386, %382 ], [ null, %374 ]
  %390 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %389, i64 %364
  %391 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %389, i64 %388
  %392 = ptrtoint %"class.net::der::Input"* %391 to i64
  %393 = bitcast %"class.net::der::Input"* %390 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %393, i8* nonnull align 8 %340, i64 16, i1 false) #11
  %394 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %390, i64 1
  %395 = ptrtoint %"class.net::der::Input"* %394 to i64
  %396 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %346, i64 0, i32 0, i32 0
  %397 = load %"class.net::der::Input"*, %"class.net::der::Input"** %396, align 8
  %398 = load i64, i64* %360, align 8
  %399 = ptrtoint %"class.net::der::Input"* %397 to i64
  %400 = sub i64 %398, %399
  %401 = ashr exact i64 %400, 4
  %402 = sub nsw i64 0, %401
  %403 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %390, i64 %402
  %404 = ptrtoint %"class.net::der::Input"* %403 to i64
  %405 = icmp sgt i64 %400, 0
  br i1 %405, label %406, label %410

406:                                              ; preds = %387
  %407 = bitcast %"class.net::der::Input"* %403 to i8*
  %408 = bitcast %"class.net::der::Input"* %397 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %407, i8* align 8 %408, i64 %400, i1 false) #11
  %409 = load %"class.net::der::Input"*, %"class.net::der::Input"** %396, align 8
  br label %410

410:                                              ; preds = %406, %387
  %411 = phi %"class.net::der::Input"* [ %397, %387 ], [ %409, %406 ]
  store i64 %404, i64* %361, align 8
  store i64 %395, i64* %360, align 8
  store i64 %392, i64* %370, align 8
  %412 = icmp eq %"class.net::der::Input"* %411, null
  br i1 %412, label %415, label %413

413:                                              ; preds = %410
  %414 = bitcast %"class.net::der::Input"* %411 to i8*
  call void @_ZdlPv(i8* %414) #10
  br label %415

415:                                              ; preds = %353, %410, %413
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %340) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %338) #11
  br label %743

416:                                              ; preds = %337, %343
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %340) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %338) #11
  br label %748

417:                                              ; preds = %333
  %418 = load i32, i32* %6, align 4
  %419 = call i32 @_ZN3net3der26ContextSpecificConstructedEh(i8 zeroext 5) #11
  %420 = icmp eq i32 %418, %419
  br i1 %420, label %421, label %491

421:                                              ; preds = %417
  %422 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 5
  %423 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 5, i32 0, i32 1
  %424 = load %"class.net::der::Input"*, %"class.net::der::Input"** %423, align 8
  %425 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %426 = load %"class.net::der::Input"*, %"class.net::der::Input"** %425, align 8
  %427 = icmp eq %"class.net::der::Input"* %424, %426
  %428 = ptrtoint %"class.net::der::Input"* %426 to i64
  br i1 %427, label %434, label %429

429:                                              ; preds = %421
  %430 = bitcast %"class.net::der::Input"* %424 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %430, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %431 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %424, i64 1
  %432 = ptrtoint %"class.net::der::Input"* %431 to i64
  %433 = bitcast %"class.net::der::Input"** %423 to i64*
  store i64 %432, i64* %433, align 8
  br label %743

434:                                              ; preds = %421
  %435 = ptrtoint %"class.net::der::Input"* %424 to i64
  %436 = bitcast %"class.net::der::Input"** %423 to i64*
  %437 = bitcast %"class.std::__1::vector"* %422 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = sub i64 %435, %438
  %440 = ashr exact i64 %439, 4
  %441 = add nsw i64 %440, 1
  %442 = icmp ugt i64 %441, 1152921504606846975
  br i1 %442, label %443, label %445

443:                                              ; preds = %434
  %444 = bitcast %"class.std::__1::vector"* %422 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %444) #12
  unreachable

445:                                              ; preds = %434
  %446 = bitcast %"class.net::der::Input"** %425 to i64*
  %447 = sub i64 %428, %438
  %448 = ashr exact i64 %447, 4
  %449 = icmp ult i64 %448, 576460752303423487
  br i1 %449, label %450, label %458

450:                                              ; preds = %445
  %451 = ashr exact i64 %447, 3
  %452 = icmp ult i64 %451, %441
  %453 = select i1 %452, i64 %441, i64 %451
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %463, label %455

455:                                              ; preds = %450
  %456 = icmp ugt i64 %453, 1152921504606846975
  br i1 %456, label %457, label %458

457:                                              ; preds = %455
  call void @abort() #12
  unreachable

458:                                              ; preds = %455, %445
  %459 = phi i64 [ %453, %455 ], [ 1152921504606846975, %445 ]
  %460 = shl i64 %459, 4
  %461 = call i8* @_Znwm(i64 %460) #10
  %462 = bitcast i8* %461 to %"class.net::der::Input"*
  br label %463

463:                                              ; preds = %458, %450
  %464 = phi i64 [ %459, %458 ], [ 0, %450 ]
  %465 = phi %"class.net::der::Input"* [ %462, %458 ], [ null, %450 ]
  %466 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %465, i64 %440
  %467 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %465, i64 %464
  %468 = ptrtoint %"class.net::der::Input"* %467 to i64
  %469 = bitcast %"class.net::der::Input"* %466 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %469, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %470 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %466, i64 1
  %471 = ptrtoint %"class.net::der::Input"* %470 to i64
  %472 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %422, i64 0, i32 0, i32 0
  %473 = load %"class.net::der::Input"*, %"class.net::der::Input"** %472, align 8
  %474 = load i64, i64* %436, align 8
  %475 = ptrtoint %"class.net::der::Input"* %473 to i64
  %476 = sub i64 %474, %475
  %477 = ashr exact i64 %476, 4
  %478 = sub nsw i64 0, %477
  %479 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %466, i64 %478
  %480 = ptrtoint %"class.net::der::Input"* %479 to i64
  %481 = icmp sgt i64 %476, 0
  br i1 %481, label %482, label %486

482:                                              ; preds = %463
  %483 = bitcast %"class.net::der::Input"* %479 to i8*
  %484 = bitcast %"class.net::der::Input"* %473 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %483, i8* align 8 %484, i64 %476, i1 false) #11
  %485 = load %"class.net::der::Input"*, %"class.net::der::Input"** %472, align 8
  br label %486

486:                                              ; preds = %482, %463
  %487 = phi %"class.net::der::Input"* [ %473, %463 ], [ %485, %482 ]
  store i64 %480, i64* %437, align 8
  store i64 %471, i64* %436, align 8
  store i64 %468, i64* %446, align 8
  %488 = icmp eq %"class.net::der::Input"* %487, null
  br i1 %488, label %743, label %489

489:                                              ; preds = %486
  %490 = bitcast %"class.net::der::Input"* %487 to i8*
  call void @_ZdlPv(i8* %490) #10
  br label %743

491:                                              ; preds = %417
  %492 = load i32, i32* %6, align 4
  %493 = call i32 @_ZN3net3der24ContextSpecificPrimitiveEh(i8 zeroext 6) #11
  %494 = icmp eq i32 %492, %493
  br i1 %494, label %495, label %573

495:                                              ; preds = %491
  %496 = call { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"* nonnull %7) #11
  %497 = extractvalue { i8*, i64 } %496, 0
  %498 = extractvalue { i8*, i64 } %496, 1
  %499 = call zeroext i1 @_ZN4base13IsStringASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8* %497, i64 %498) #11
  br i1 %499, label %501, label %500

500:                                              ; preds = %495
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0)) #11
  br label %748

501:                                              ; preds = %495
  %502 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 6
  %503 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 6, i32 0, i32 1
  %504 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %503, align 8
  %505 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %506 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %505, align 8
  %507 = icmp eq %"class.base::BasicStringPiece"* %504, %506
  %508 = ptrtoint %"class.base::BasicStringPiece"* %506 to i64
  br i1 %507, label %515, label %509

509:                                              ; preds = %501
  %510 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %504, i64 0, i32 0
  store i8* %497, i8** %510, align 8
  %511 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %504, i64 0, i32 1
  store i64 %498, i64* %511, align 8
  %512 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %504, i64 1
  %513 = ptrtoint %"class.base::BasicStringPiece"* %512 to i64
  %514 = bitcast %"class.base::BasicStringPiece"** %503 to i64*
  store i64 %513, i64* %514, align 8
  br label %743

515:                                              ; preds = %501
  %516 = ptrtoint %"class.base::BasicStringPiece"* %504 to i64
  %517 = bitcast %"class.base::BasicStringPiece"** %503 to i64*
  %518 = bitcast %"class.std::__1::vector.1"* %502 to i64*
  %519 = load i64, i64* %518, align 8
  %520 = sub i64 %516, %519
  %521 = ashr exact i64 %520, 4
  %522 = add nsw i64 %521, 1
  %523 = icmp ugt i64 %522, 1152921504606846975
  br i1 %523, label %524, label %526

524:                                              ; preds = %515
  %525 = bitcast %"class.std::__1::vector.1"* %502 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %525) #12
  unreachable

526:                                              ; preds = %515
  %527 = bitcast %"class.base::BasicStringPiece"** %505 to i64*
  %528 = sub i64 %508, %519
  %529 = ashr exact i64 %528, 4
  %530 = icmp ult i64 %529, 576460752303423487
  br i1 %530, label %531, label %539

531:                                              ; preds = %526
  %532 = ashr exact i64 %528, 3
  %533 = icmp ult i64 %532, %522
  %534 = select i1 %533, i64 %522, i64 %532
  %535 = icmp eq i64 %534, 0
  br i1 %535, label %544, label %536

536:                                              ; preds = %531
  %537 = icmp ugt i64 %534, 1152921504606846975
  br i1 %537, label %538, label %539

538:                                              ; preds = %536
  call void @abort() #12
  unreachable

539:                                              ; preds = %536, %526
  %540 = phi i64 [ %534, %536 ], [ 1152921504606846975, %526 ]
  %541 = shl i64 %540, 4
  %542 = call i8* @_Znwm(i64 %541) #10
  %543 = bitcast i8* %542 to %"class.base::BasicStringPiece"*
  br label %544

544:                                              ; preds = %539, %531
  %545 = phi i64 [ %540, %539 ], [ 0, %531 ]
  %546 = phi %"class.base::BasicStringPiece"* [ %543, %539 ], [ null, %531 ]
  %547 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %546, i64 %521
  %548 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %546, i64 %545
  %549 = ptrtoint %"class.base::BasicStringPiece"* %548 to i64
  %550 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %547, i64 0, i32 0
  store i8* %497, i8** %550, align 8
  %551 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %546, i64 %521, i32 1
  store i64 %498, i64* %551, align 8
  %552 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %547, i64 1
  %553 = ptrtoint %"class.base::BasicStringPiece"* %552 to i64
  %554 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %502, i64 0, i32 0, i32 0
  %555 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %554, align 8
  %556 = load i64, i64* %517, align 8
  %557 = ptrtoint %"class.base::BasicStringPiece"* %555 to i64
  %558 = sub i64 %556, %557
  %559 = ashr exact i64 %558, 4
  %560 = sub nsw i64 0, %559
  %561 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %547, i64 %560
  %562 = ptrtoint %"class.base::BasicStringPiece"* %561 to i64
  %563 = icmp sgt i64 %558, 0
  br i1 %563, label %564, label %568

564:                                              ; preds = %544
  %565 = bitcast %"class.base::BasicStringPiece"* %561 to i8*
  %566 = bitcast %"class.base::BasicStringPiece"* %555 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %565, i8* align 8 %566, i64 %558, i1 false) #11
  %567 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %554, align 8
  br label %568

568:                                              ; preds = %564, %544
  %569 = phi %"class.base::BasicStringPiece"* [ %555, %544 ], [ %567, %564 ]
  store i64 %562, i64* %518, align 8
  store i64 %553, i64* %517, align 8
  store i64 %549, i64* %527, align 8
  %570 = icmp eq %"class.base::BasicStringPiece"* %569, null
  br i1 %570, label %743, label %571

571:                                              ; preds = %568
  %572 = bitcast %"class.base::BasicStringPiece"* %569 to i8*
  call void @_ZdlPv(i8* %572) #10
  br label %743

573:                                              ; preds = %491
  %574 = load i32, i32* %6, align 4
  %575 = call i32 @_ZN3net3der24ContextSpecificPrimitiveEh(i8 zeroext 7) #11
  %576 = icmp eq i32 %574, %575
  br i1 %576, label %577, label %665

577:                                              ; preds = %573
  %578 = icmp eq i32 %1, 0
  %579 = load i64, i64* %19, align 8
  br i1 %578, label %580, label %597

580:                                              ; preds = %577
  switch i64 %579, label %581 [
    i64 4, label %582
    i64 16, label %582
  ]

581:                                              ; preds = %580
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)) #11
  br label %748

582:                                              ; preds = %580, %580
  %583 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %10, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %583) #11
  %584 = load i8*, i8** %18, align 8
  call void @_ZN3net9IPAddressC1EPKhm(%"class.net::IPAddress"* nonnull %10, i8* %584, i64 %579) #11
  %585 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 7, i32 0, i32 1
  %586 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %585, align 8
  %587 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %588 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %587, align 8
  %589 = icmp ult %"class.net::IPAddress"* %586, %588
  br i1 %589, label %590, label %594

590:                                              ; preds = %582
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %586, %"class.net::IPAddress"* nonnull dereferenceable(17) %10) #11
  %591 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %586, i64 1
  %592 = ptrtoint %"class.net::IPAddress"* %591 to i64
  %593 = bitcast %"class.net::IPAddress"** %585 to i64*
  store i64 %592, i64* %593, align 8
  br label %596

594:                                              ; preds = %582
  %595 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 7
  call void @_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.8"* %595, %"class.net::IPAddress"* nonnull dereferenceable(17) %10) #11
  br label %596

596:                                              ; preds = %590, %594
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %583) #11
  br label %743

597:                                              ; preds = %577
  switch i64 %579, label %598 [
    i64 8, label %599
    i64 32, label %599
  ]

598:                                              ; preds = %597
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)) #11
  br label %748

599:                                              ; preds = %597, %597
  %600 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %11, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %600) #11
  %601 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %11, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %600, i8 -86, i64 17, i1 false)
  %602 = load i8*, i8** %18, align 8
  %603 = lshr i64 %579, 1
  %604 = getelementptr inbounds i8, i8* %602, i64 %603
  call void @_ZN3net9IPAddressC1EPKhm(%"class.net::IPAddress"* nonnull %11, i8* %604, i64 %603) #11
  %605 = call i64 @_ZN3net16MaskPrefixLengthERKNS_9IPAddressE(%"class.net::IPAddress"* nonnull dereferenceable(17) %11) #11
  %606 = trunc i64 %605 to i32
  %607 = load i8, i8* %601, align 1
  %608 = zext i8 %607 to i64
  %609 = shl nuw nsw i64 %608, 3
  %610 = and i64 %605, 4294967295
  %611 = sub nsw i64 %609, %610
  %612 = lshr i64 %611, 3
  %613 = icmp eq i64 %612, 0
  br i1 %613, label %616, label %614

614:                                              ; preds = %599
  %615 = call i8* @_Znwm(i64 %612) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %615, i8 0, i64 %612, i1 false) #11
  br label %616

616:                                              ; preds = %614, %599
  %617 = phi i8* [ null, %599 ], [ %615, %614 ]
  %618 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %11, i64 0, i32 0, i32 0, i32 0, i64 %608
  %619 = sub nsw i64 0, %612
  %620 = getelementptr inbounds i8, i8* %618, i64 %619
  %621 = call i32 @bcmp(i8* %617, i8* %620, i64 %612) #11
  %622 = icmp eq i32 %621, 0
  br i1 %622, label %623, label %636

623:                                              ; preds = %616
  %624 = and i64 %611, 7
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %636, label %626

626:                                              ; preds = %623
  %627 = xor i64 %612, -1
  %628 = add nsw i64 %627, %608
  %629 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %11, i64 0, i32 0, i32 0, i32 0, i64 %628
  %630 = load i8, i8* %629, align 1
  %631 = zext i8 %630 to i32
  %632 = and i32 %631, 1
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %634, label %636

634:                                              ; preds = %626
  %635 = icmp eq i64 %624, 1
  br i1 %635, label %636, label %750

636:                                              ; preds = %775, %626, %634, %750, %753, %755, %758, %760, %763, %765, %768, %770, %773, %623, %616
  %637 = phi i1 [ false, %616 ], [ true, %623 ], [ true, %634 ], [ false, %626 ], [ false, %750 ], [ true, %753 ], [ false, %755 ], [ true, %758 ], [ false, %760 ], [ true, %763 ], [ false, %765 ], [ true, %768 ], [ false, %770 ], [ true, %773 ], [ %778, %775 ]
  %638 = icmp eq i8* %617, null
  br i1 %638, label %640, label %639

639:                                              ; preds = %636
  call void @_ZdlPv(i8* nonnull %617) #10
  br label %640

640:                                              ; preds = %636, %639
  br i1 %637, label %642, label %641

641:                                              ; preds = %640
  call void @_ZN3net10CertErrors8AddErrorEPKv(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)) #11
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %600) #11
  br label %748

642:                                              ; preds = %640
  %643 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %643) #11
  %644 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %13, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %644) #11
  %645 = load i8*, i8** %18, align 8
  %646 = load i64, i64* %19, align 8
  %647 = lshr i64 %646, 1
  call void @_ZN3net9IPAddressC1EPKhm(%"class.net::IPAddress"* nonnull %13, i8* %645, i64 %647) #11
  %648 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* nonnull %648, %"class.net::IPAddress"* nonnull dereferenceable(17) %13) #11
  %649 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 1
  store i32 %606, i32* %649, align 4, !alias.scope !2
  %650 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 8, i32 0, i32 1
  %651 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %650, align 8
  %652 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  %653 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %652, align 8
  %654 = icmp ult %"struct.std::__1::pair"* %651, %653
  br i1 %654, label %655, label %662

655:                                              ; preds = %642
  %656 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %651, i64 0, i32 0
  call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %656, %"class.net::IPAddress"* nonnull dereferenceable(17) %648) #11
  %657 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %651, i64 0, i32 1
  %658 = load i32, i32* %649, align 4
  store i32 %658, i32* %657, align 4
  %659 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %651, i64 1
  %660 = ptrtoint %"struct.std::__1::pair"* %659 to i64
  %661 = bitcast %"struct.std::__1::pair"** %650 to i64*
  store i64 %660, i64* %661, align 8
  br label %664

662:                                              ; preds = %642
  %663 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 8
  call void @_ZNSt3__16vectorINS_4pairIN3net9IPAddressEjEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector.15"* %663, %"struct.std::__1::pair"* nonnull dereferenceable(24) %12) #11
  br label %664

664:                                              ; preds = %655, %662
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %648) #11
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %644) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %643) #11
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %600) #11
  br label %743

665:                                              ; preds = %573
  %666 = load i32, i32* %6, align 4
  %667 = call i32 @_ZN3net3der24ContextSpecificPrimitiveEh(i8 zeroext 8) #11
  %668 = icmp eq i32 %666, %667
  br i1 %668, label %669, label %739

669:                                              ; preds = %665
  %670 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 9
  %671 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 9, i32 0, i32 1
  %672 = load %"class.net::der::Input"*, %"class.net::der::Input"** %671, align 8
  %673 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  %674 = load %"class.net::der::Input"*, %"class.net::der::Input"** %673, align 8
  %675 = icmp eq %"class.net::der::Input"* %672, %674
  %676 = ptrtoint %"class.net::der::Input"* %674 to i64
  br i1 %675, label %682, label %677

677:                                              ; preds = %669
  %678 = bitcast %"class.net::der::Input"* %672 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %678, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %679 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %672, i64 1
  %680 = ptrtoint %"class.net::der::Input"* %679 to i64
  %681 = bitcast %"class.net::der::Input"** %671 to i64*
  store i64 %680, i64* %681, align 8
  br label %743

682:                                              ; preds = %669
  %683 = ptrtoint %"class.net::der::Input"* %672 to i64
  %684 = bitcast %"class.net::der::Input"** %671 to i64*
  %685 = bitcast %"class.std::__1::vector"* %670 to i64*
  %686 = load i64, i64* %685, align 8
  %687 = sub i64 %683, %686
  %688 = ashr exact i64 %687, 4
  %689 = add nsw i64 %688, 1
  %690 = icmp ugt i64 %689, 1152921504606846975
  br i1 %690, label %691, label %693

691:                                              ; preds = %682
  %692 = bitcast %"class.std::__1::vector"* %670 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %692) #12
  unreachable

693:                                              ; preds = %682
  %694 = bitcast %"class.net::der::Input"** %673 to i64*
  %695 = sub i64 %676, %686
  %696 = ashr exact i64 %695, 4
  %697 = icmp ult i64 %696, 576460752303423487
  br i1 %697, label %698, label %706

698:                                              ; preds = %693
  %699 = ashr exact i64 %695, 3
  %700 = icmp ult i64 %699, %689
  %701 = select i1 %700, i64 %689, i64 %699
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %711, label %703

703:                                              ; preds = %698
  %704 = icmp ugt i64 %701, 1152921504606846975
  br i1 %704, label %705, label %706

705:                                              ; preds = %703
  call void @abort() #12
  unreachable

706:                                              ; preds = %703, %693
  %707 = phi i64 [ %701, %703 ], [ 1152921504606846975, %693 ]
  %708 = shl i64 %707, 4
  %709 = call i8* @_Znwm(i64 %708) #10
  %710 = bitcast i8* %709 to %"class.net::der::Input"*
  br label %711

711:                                              ; preds = %706, %698
  %712 = phi i64 [ %707, %706 ], [ 0, %698 ]
  %713 = phi %"class.net::der::Input"* [ %710, %706 ], [ null, %698 ]
  %714 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %713, i64 %688
  %715 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %713, i64 %712
  %716 = ptrtoint %"class.net::der::Input"* %715 to i64
  %717 = bitcast %"class.net::der::Input"* %714 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %717, i8* nonnull align 8 %17, i64 16, i1 false) #11
  %718 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %714, i64 1
  %719 = ptrtoint %"class.net::der::Input"* %718 to i64
  %720 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %670, i64 0, i32 0, i32 0
  %721 = load %"class.net::der::Input"*, %"class.net::der::Input"** %720, align 8
  %722 = load i64, i64* %684, align 8
  %723 = ptrtoint %"class.net::der::Input"* %721 to i64
  %724 = sub i64 %722, %723
  %725 = ashr exact i64 %724, 4
  %726 = sub nsw i64 0, %725
  %727 = getelementptr inbounds %"class.net::der::Input", %"class.net::der::Input"* %714, i64 %726
  %728 = ptrtoint %"class.net::der::Input"* %727 to i64
  %729 = icmp sgt i64 %724, 0
  br i1 %729, label %730, label %734

730:                                              ; preds = %711
  %731 = bitcast %"class.net::der::Input"* %727 to i8*
  %732 = bitcast %"class.net::der::Input"* %721 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %731, i8* align 8 %732, i64 %724, i1 false) #11
  %733 = load %"class.net::der::Input"*, %"class.net::der::Input"** %720, align 8
  br label %734

734:                                              ; preds = %730, %711
  %735 = phi %"class.net::der::Input"* [ %721, %711 ], [ %733, %730 ]
  store i64 %728, i64* %685, align 8
  store i64 %719, i64* %684, align 8
  store i64 %716, i64* %694, align 8
  %736 = icmp eq %"class.net::der::Input"* %735, null
  br i1 %736, label %743, label %737

737:                                              ; preds = %734
  %738 = bitcast %"class.net::der::Input"* %735 to i8*
  call void @_ZdlPv(i8* %738) #10
  br label %743

739:                                              ; preds = %665
  %740 = load i32, i32* %6, align 4
  %741 = zext i32 %740 to i64
  %742 = call %"class.net::CertErrorParams"* @_ZN3net27CreateCertErrorParams1SizeTEPKcm(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0), i64 %741) #11
  call void @_ZN3net10CertErrors8AddErrorEPKvNSt3__110unique_ptrINS_15CertErrorParamsENS3_14default_deleteIS5_EEEE(%"class.net::CertErrors"* %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), %"class.net::CertErrorParams"* %742) #11
  br label %748

743:                                              ; preds = %737, %734, %677, %571, %568, %509, %489, %486, %429, %331, %328, %271, %257, %254, %195, %175, %172, %113, %93, %90, %33, %664, %415, %596
  %744 = phi i32 [ 128, %596 ], [ 16, %415 ], [ 128, %664 ], [ 1, %33 ], [ 1, %90 ], [ 1, %93 ], [ 2, %113 ], [ 2, %172 ], [ 2, %175 ], [ 4, %195 ], [ 4, %254 ], [ 4, %257 ], [ 8, %271 ], [ 8, %328 ], [ 8, %331 ], [ 32, %429 ], [ 32, %486 ], [ 32, %489 ], [ 64, %509 ], [ 64, %568 ], [ 64, %571 ], [ 256, %677 ], [ 256, %734 ], [ 256, %737 ]
  %745 = getelementptr inbounds %"struct.net::GeneralNames", %"struct.net::GeneralNames"* %2, i64 0, i32 10
  %746 = load i32, i32* %745, align 8
  %747 = or i32 %746, %744
  store i32 %747, i32* %745, align 8
  br label %748

748:                                              ; preds = %581, %598, %739, %743, %104, %186, %416, %500, %641, %4
  %749 = phi i1 [ false, %4 ], [ true, %743 ], [ false, %104 ], [ false, %186 ], [ false, %416 ], [ false, %500 ], [ false, %581 ], [ false, %598 ], [ false, %641 ], [ false, %739 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #11
  ret i1 %749

750:                                              ; preds = %634
  %751 = and i32 %631, 2
  %752 = icmp eq i32 %751, 0
  br i1 %752, label %753, label %636

753:                                              ; preds = %750
  %754 = icmp eq i64 %624, 2
  br i1 %754, label %636, label %755

755:                                              ; preds = %753
  %756 = and i32 %631, 4
  %757 = icmp eq i32 %756, 0
  br i1 %757, label %758, label %636

758:                                              ; preds = %755
  %759 = icmp eq i64 %624, 3
  br i1 %759, label %636, label %760

760:                                              ; preds = %758
  %761 = and i32 %631, 8
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %763, label %636

763:                                              ; preds = %760
  %764 = icmp eq i64 %624, 4
  br i1 %764, label %636, label %765

765:                                              ; preds = %763
  %766 = and i32 %631, 16
  %767 = icmp eq i32 %766, 0
  br i1 %767, label %768, label %636

768:                                              ; preds = %765
  %769 = icmp eq i64 %624, 5
  br i1 %769, label %636, label %770

770:                                              ; preds = %768
  %771 = and i32 %631, 32
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %773, label %636

773:                                              ; preds = %770
  %774 = icmp eq i64 %624, 6
  br i1 %774, label %636, label %775

775:                                              ; preds = %773
  %776 = and i32 %631, 64
  %777 = icmp eq i32 %776, 0
  %778 = select i1 %777, i1 true, i1 false
  br label %636
}

declare zeroext i1 @_ZN3net3der6Parser15ReadTagAndValueEPjPNS0_5InputE(%"class.net::der::Parser"*, i32*, %"class.net::der::Input"*) local_unnamed_addr #2

declare i32 @_ZN3net3der26ContextSpecificConstructedEh(i8 zeroext) local_unnamed_addr #2

declare i32 @_ZN3net3der24ContextSpecificPrimitiveEh(i8 zeroext) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK3net3der5Input13AsStringPieceEv(%"class.net::der::Input"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4base13IsStringASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3net9IPAddressC1EPKhm(%"class.net::IPAddress"*, i8*, i64) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"*) unnamed_addr #4

declare i64 @_ZN3net16MaskPrefixLengthERKNS_9IPAddressE(%"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #2

declare void @_ZN3net10CertErrors8AddErrorEPKvNSt3__110unique_ptrINS_15CertErrorParamsENS3_14default_deleteIS5_EEEE(%"class.net::CertErrors"*, i8*, %"class.net::CertErrorParams"*) local_unnamed_addr #2

declare %"class.net::CertErrorParams"* @_ZN3net27CreateCertErrorParams1SizeTEPKcm(i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"*, %"class.net::IPAddress"* dereferenceable(17)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3net9IPAddressENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.8"*, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.net::IPAddress"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 17
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 1085102592571150095
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.net::IPAddress"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 17
  %20 = icmp ult i64 %19, 542551296285575047
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 1085102592571150095, %14 ]
  %28 = mul i64 %27, 17
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"class.net::IPAddress"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.net::IPAddress"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %33, i64 %9
  %35 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %33, i64 %32
  %36 = ptrtoint %"class.net::IPAddress"* %35 to i64
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %34, %"class.net::IPAddress"* dereferenceable(17) %1) #11
  %37 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %34, i64 1
  %38 = ptrtoint %"class.net::IPAddress"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %40 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %39, align 8
  %41 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %3, align 8
  %42 = icmp eq %"class.net::IPAddress"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %"class.net::IPAddress"* %34 to i64
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  br label %60

45:                                               ; preds = %31, %45
  %46 = phi %"class.net::IPAddress"* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %"class.net::IPAddress"* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %46, i64 -1
  %49 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %47, i64 -1
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %48, %"class.net::IPAddress"* dereferenceable(17) %49) #11
  %50 = icmp eq %"class.net::IPAddress"* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %39, align 8
  %53 = load %"class.net::IPAddress"*, %"class.net::IPAddress"** %3, align 8
  %54 = ptrtoint %"class.net::IPAddress"* %48 to i64
  store i64 %54, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %55 = icmp eq %"class.net::IPAddress"* %53, %52
  br i1 %55, label %60, label %56

56:                                               ; preds = %51, %56
  %57 = phi %"class.net::IPAddress"* [ %58, %56 ], [ %53, %51 ]
  %58 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %57, i64 -1
  tail call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %58) #11
  %59 = icmp eq %"class.net::IPAddress"* %58, %52
  br i1 %59, label %60, label %56

60:                                               ; preds = %56, %43, %51
  %61 = phi %"class.net::IPAddress"* [ %40, %43 ], [ %52, %51 ], [ %52, %56 ]
  %62 = icmp eq %"class.net::IPAddress"* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %61, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %64) #10
  br label %65

65:                                               ; preds = %60, %63
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIN3net9IPAddressEjEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector.15"*, %"struct.std::__1::pair"* dereferenceable(24)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.std::__1::pair"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.std::__1::pair"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"struct.std::__1::pair"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.std::__1::pair"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %32
  %36 = ptrtoint %"struct.std::__1::pair"* %35 to i64
  %37 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 0
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %37, %"class.net::IPAddress"* dereferenceable(17) %38) #11
  %39 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 %9, i32 1
  %40 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %39, align 4
  %42 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %34, i64 1
  %43 = ptrtoint %"struct.std::__1::pair"* %42 to i64
  %44 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %45 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %44, align 8
  %46 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %47 = icmp eq %"struct.std::__1::pair"* %46, %45
  br i1 %47, label %48, label %50

48:                                               ; preds = %31
  %49 = ptrtoint %"struct.std::__1::pair"* %34 to i64
  store i64 %49, i64* %6, align 8
  store i64 %43, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  br label %71

50:                                               ; preds = %31, %50
  %51 = phi %"struct.std::__1::pair"* [ %59, %50 ], [ %34, %31 ]
  %52 = phi %"struct.std::__1::pair"* [ %53, %50 ], [ %46, %31 ]
  %53 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %52, i64 -1
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 -1, i32 0
  %55 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %53, i64 0, i32 0
  tail call void @_ZN3net9IPAddressC1ERKS0_(%"class.net::IPAddress"* %54, %"class.net::IPAddress"* dereferenceable(17) %55) #11
  %56 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 -1, i32 1
  %57 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %52, i64 -1, i32 1
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* %56, align 4
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %51, i64 -1
  %60 = icmp eq %"struct.std::__1::pair"* %53, %45
  br i1 %60, label %61, label %50

61:                                               ; preds = %50
  %62 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %44, align 8
  %63 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %3, align 8
  %64 = ptrtoint %"struct.std::__1::pair"* %59 to i64
  store i64 %64, i64* %6, align 8
  store i64 %43, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %65 = icmp eq %"struct.std::__1::pair"* %63, %62
  br i1 %65, label %71, label %66

66:                                               ; preds = %61, %66
  %67 = phi %"struct.std::__1::pair"* [ %68, %66 ], [ %63, %61 ]
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %67, i64 -1
  %69 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %68, i64 0, i32 0
  tail call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* %69) #11
  %70 = icmp eq %"struct.std::__1::pair"* %68, %62
  br i1 %70, label %71, label %66

71:                                               ; preds = %66, %48, %61
  %72 = phi %"struct.std::__1::pair"* [ %45, %48 ], [ %62, %61 ], [ %62, %66 ]
  %73 = icmp eq %"struct.std::__1::pair"* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %72, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %75) #10
  br label %76

76:                                               ; preds = %71, %74
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__19make_pairIN3net9IPAddressERKjEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__19make_pairIN3net9IPAddressERKjEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
