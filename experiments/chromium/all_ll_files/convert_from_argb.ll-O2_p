; ModuleID = '../../third_party/libyuv/source/convert_from_argb.cc'
source_filename = "../../third_party/libyuv/source/convert_from_argb.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZN6libyuvL22kShuffleMaskARGBToRGBAE = internal constant <16 x i8> <i8 3, i8 0, i8 1, i8 2, i8 7, i8 4, i8 5, i8 6, i8 11, i8 8, i8 9, i8 10, i8 15, i8 12, i8 13, i8 14>, align 16
@_ZN6libyuvL14kDither565_4x4E = internal unnamed_addr constant [16 x i8] c"\00\04\01\05\06\02\07\03\01\05\00\04\07\03\06\02", align 16
@cpu_info_ = external local_unnamed_addr global i32, align 4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToI444(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %111, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %34 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = shl nsw i32 %8, 2
  %37 = icmp eq i32 %34, %36
  %38 = icmp eq i32 %3, %8
  %39 = and i1 %38, %37
  %40 = icmp eq i32 %5, %8
  %41 = and i1 %40, %39
  %42 = icmp eq i32 %7, %8
  %43 = and i1 %42, %41
  %44 = select i1 %43, i32 %35, i32 1
  %45 = mul nsw i32 %44, %8
  %46 = select i1 %43, i32 1, i32 %35
  %47 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %32
  %50 = tail call i32 @InitCpuFlags() #4
  br label %51

51:                                               ; preds = %32, %49
  %52 = phi i32 [ %50, %49 ], [ %47, %32 ]
  %53 = and i32 %52, 64
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %59, label %55

55:                                               ; preds = %51
  %56 = and i32 %45, 15
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, void (i8*, i8*, i8*, i32)* @ARGBToUV444Row_SSSE3, void (i8*, i8*, i8*, i32)* @ARGBToUV444Row_Any_SSSE3
  br label %59

59:                                               ; preds = %51, %55
  %60 = phi void (i8*, i8*, i8*, i32)* [ %58, %55 ], [ @ARGBToUV444Row_C, %51 ]
  %61 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = tail call i32 @InitCpuFlags() #4
  br label %65

65:                                               ; preds = %59, %63
  %66 = phi i32 [ %64, %63 ], [ %61, %59 ]
  %67 = and i32 %66, 64
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %65
  %70 = and i32 %45, 15
  %71 = icmp eq i32 %70, 0
  %72 = select i1 %71, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %73

73:                                               ; preds = %65, %69
  %74 = phi void (i8*, i8*, i32)* [ %72, %69 ], [ @ARGBToYRow_C, %65 ]
  %75 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = tail call i32 @InitCpuFlags() #4
  br label %79

79:                                               ; preds = %73, %77
  %80 = phi i32 [ %78, %77 ], [ %75, %73 ]
  %81 = and i32 %80, 1024
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %79
  %84 = and i32 %45, 31
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %87

87:                                               ; preds = %79, %83
  %88 = phi void (i8*, i8*, i32)* [ %86, %83 ], [ %74, %79 ]
  %89 = icmp sgt i32 %46, 0
  br i1 %89, label %90, label %111

90:                                               ; preds = %87
  %91 = sext i32 %34 to i64
  %92 = select i1 %43, i64 0, i64 %91
  %93 = sext i32 %3 to i64
  %94 = select i1 %43, i64 0, i64 %93
  %95 = sext i32 %5 to i64
  %96 = select i1 %43, i64 0, i64 %95
  %97 = sext i32 %7 to i64
  %98 = select i1 %43, i64 0, i64 %97
  br label %99

99:                                               ; preds = %99, %90
  %100 = phi i32 [ 0, %90 ], [ %109, %99 ]
  %101 = phi i8* [ %6, %90 ], [ %108, %99 ]
  %102 = phi i8* [ %4, %90 ], [ %107, %99 ]
  %103 = phi i8* [ %2, %90 ], [ %106, %99 ]
  %104 = phi i8* [ %33, %90 ], [ %105, %99 ]
  tail call void %60(i8* %104, i8* %102, i8* %101, i32 %45) #4, !callees !2
  tail call void %88(i8* %104, i8* %103, i32 %45) #4
  %105 = getelementptr inbounds i8, i8* %104, i64 %92
  %106 = getelementptr inbounds i8, i8* %103, i64 %94
  %107 = getelementptr inbounds i8, i8* %102, i64 %96
  %108 = getelementptr inbounds i8, i8* %101, i64 %98
  %109 = add nuw nsw i32 %100, 1
  %110 = icmp eq i32 %109, %46
  br i1 %110, label %111, label %99

111:                                              ; preds = %99, %87, %10
  %112 = phi i32 [ -1, %10 ], [ 0, %87 ], [ 0, %99 ]
  ret i32 %112
}

declare void @ARGBToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUV444Row_C(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUV444Row_Any_SSSE3(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUV444Row_SSSE3(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToI422(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %103, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %34 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = shl nsw i32 %8, 2
  %37 = icmp eq i32 %34, %36
  %38 = icmp eq i32 %3, %8
  %39 = and i1 %38, %37
  %40 = shl nsw i32 %5, 1
  %41 = icmp eq i32 %40, %8
  %42 = and i1 %41, %39
  %43 = shl nsw i32 %7, 1
  %44 = icmp eq i32 %43, %8
  %45 = and i1 %44, %42
  %46 = select i1 %45, i32 %35, i32 1
  %47 = mul nsw i32 %46, %8
  %48 = select i1 %45, i32 1, i32 %35
  %49 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %32
  %52 = tail call i32 @InitCpuFlags() #4
  br label %53

53:                                               ; preds = %32, %51
  %54 = phi i32 [ %52, %51 ], [ %49, %32 ]
  %55 = and i32 %54, 64
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = and i32 %47, 15
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %61 = select i1 %59, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %62

62:                                               ; preds = %57, %53
  %63 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %53 ], [ %60, %57 ]
  %64 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %53 ], [ %61, %57 ]
  %65 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  %68 = tail call i32 @InitCpuFlags() #4
  br label %69

69:                                               ; preds = %62, %67
  %70 = phi i32 [ %68, %67 ], [ %65, %62 ]
  %71 = and i32 %70, 1024
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %78, label %73

73:                                               ; preds = %69
  %74 = and i32 %47, 31
  %75 = icmp eq i32 %74, 0
  %76 = select i1 %75, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %77 = select i1 %75, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %78

78:                                               ; preds = %73, %69
  %79 = phi void (i8*, i32, i8*, i8*, i32)* [ %63, %69 ], [ %76, %73 ]
  %80 = phi void (i8*, i8*, i32)* [ %64, %69 ], [ %77, %73 ]
  %81 = icmp sgt i32 %48, 0
  br i1 %81, label %82, label %103

82:                                               ; preds = %78
  %83 = sext i32 %34 to i64
  %84 = select i1 %45, i64 0, i64 %83
  %85 = sext i32 %3 to i64
  %86 = select i1 %45, i64 0, i64 %85
  %87 = sext i32 %5 to i64
  %88 = select i1 %45, i64 0, i64 %87
  %89 = sext i32 %7 to i64
  %90 = select i1 %45, i64 0, i64 %89
  br label %91

91:                                               ; preds = %91, %82
  %92 = phi i32 [ 0, %82 ], [ %101, %91 ]
  %93 = phi i8* [ %6, %82 ], [ %100, %91 ]
  %94 = phi i8* [ %4, %82 ], [ %99, %91 ]
  %95 = phi i8* [ %2, %82 ], [ %98, %91 ]
  %96 = phi i8* [ %33, %82 ], [ %97, %91 ]
  tail call void %79(i8* %96, i32 0, i8* %94, i8* %93, i32 %47) #4
  tail call void %80(i8* %96, i8* %95, i32 %47) #4
  %97 = getelementptr inbounds i8, i8* %96, i64 %84
  %98 = getelementptr inbounds i8, i8* %95, i64 %86
  %99 = getelementptr inbounds i8, i8* %94, i64 %88
  %100 = getelementptr inbounds i8, i8* %93, i64 %90
  %101 = add nuw nsw i32 %92, 1
  %102 = icmp eq i32 %101, %48
  br i1 %102, label %103, label %91

103:                                              ; preds = %91, %78, %10
  %104 = phi i32 [ -1, %10 ], [ 0, %78 ], [ 0, %91 ]
  ret i32 %104
}

declare void @ARGBToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToNV12(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = ashr i32 %9, 1
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = xor i1 %15, true
  %17 = icmp slt i32 %6, 1
  %18 = or i1 %17, %16
  %19 = icmp eq i32 %7, 0
  %20 = or i1 %18, %19
  br i1 %20, label %136, label %21

21:                                               ; preds = %8
  %22 = icmp slt i32 %7, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %21
  %24 = sub nsw i32 0, %7
  %25 = xor i32 %7, -1
  %26 = mul nsw i32 %25, %1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sub nsw i32 0, %1
  br label %30

30:                                               ; preds = %23, %21
  %31 = phi i32 [ %29, %23 ], [ %1, %21 ]
  %32 = phi i8* [ %28, %23 ], [ %0, %21 ]
  %33 = phi i32 [ %24, %23 ], [ %7, %21 ]
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %30 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = and i32 %6, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %46 = select i1 %44, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %47

47:                                               ; preds = %42, %38
  %48 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %38 ], [ %45, %42 ]
  %49 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %38 ], [ %46, %42 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %47, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %47 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %6, 31
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ %48, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ %49, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 32
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = and i32 %9, 30
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i8*, i8*, i32)* @MergeUVRow_SSE2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_SSE2
  br label %78

78:                                               ; preds = %70, %74
  %79 = phi void (i8*, i8*, i8*, i32)* [ %77, %74 ], [ @MergeUVRow_C, %70 ]
  %80 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = tail call i32 @InitCpuFlags() #4
  br label %84

84:                                               ; preds = %78, %82
  %85 = phi i32 [ %83, %82 ], [ %80, %78 ]
  %86 = and i32 %85, 1024
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = and i32 %9, 62
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, void (i8*, i8*, i8*, i32)* @MergeUVRow_AVX2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_AVX2
  br label %92

92:                                               ; preds = %84, %88
  %93 = phi void (i8*, i8*, i8*, i32)* [ %91, %88 ], [ %79, %84 ]
  %94 = add nsw i32 %10, 31
  %95 = and i32 %94, -32
  %96 = shl nsw i32 %94, 1
  %97 = or i32 %96, 63
  %98 = sext i32 %97 to i64
  %99 = tail call noalias i8* @malloc(i64 %98) #4
  %100 = ptrtoint i8* %99 to i64
  %101 = add nsw i64 %100, 63
  %102 = and i64 %101, -64
  %103 = inttoptr i64 %102 to i8*
  %104 = sext i32 %95 to i64
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = add nsw i32 %33, -1
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %131

108:                                              ; preds = %92
  %109 = sext i32 %31 to i64
  %110 = sext i32 %3 to i64
  %111 = shl nsw i32 %31, 1
  %112 = sext i32 %111 to i64
  %113 = shl nsw i32 %3, 1
  %114 = sext i32 %113 to i64
  %115 = sext i32 %5 to i64
  br label %116

116:                                              ; preds = %108, %116
  %117 = phi i32 [ 0, %108 ], [ %126, %116 ]
  %118 = phi i8* [ %32, %108 ], [ %123, %116 ]
  %119 = phi i8* [ %4, %108 ], [ %125, %116 ]
  %120 = phi i8* [ %2, %108 ], [ %124, %116 ]
  tail call void %64(i8* %118, i32 %31, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %103, i8* %105, i8* %119, i32 %10) #4
  tail call void %65(i8* %118, i8* %120, i32 %6) #4
  %121 = getelementptr inbounds i8, i8* %118, i64 %109
  %122 = getelementptr inbounds i8, i8* %120, i64 %110
  tail call void %65(i8* %121, i8* %122, i32 %6) #4
  %123 = getelementptr inbounds i8, i8* %118, i64 %112
  %124 = getelementptr inbounds i8, i8* %120, i64 %114
  %125 = getelementptr inbounds i8, i8* %119, i64 %115
  %126 = add nuw nsw i32 %117, 2
  %127 = icmp slt i32 %126, %106
  br i1 %127, label %116, label %128

128:                                              ; preds = %116
  %129 = and i32 %33, 1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %135, label %131

131:                                              ; preds = %92, %128
  %132 = phi i8* [ %123, %128 ], [ %32, %92 ]
  %133 = phi i8* [ %125, %128 ], [ %4, %92 ]
  %134 = phi i8* [ %124, %128 ], [ %2, %92 ]
  tail call void %64(i8* %132, i32 0, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %103, i8* %105, i8* %133, i32 %10) #4
  tail call void %65(i8* %132, i8* %134, i32 %6) #4
  br label %135

135:                                              ; preds = %128, %131
  tail call void @free(i8* %99) #4
  br label %136

136:                                              ; preds = %8, %135
  %137 = phi i32 [ 0, %135 ], [ -1, %8 ]
  ret i32 %137
}

declare void @MergeUVRow_C(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @MergeUVRow_Any_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @MergeUVRow_SSE2(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @MergeUVRow_Any_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @MergeUVRow_AVX2(i8*, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToNV21(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = ashr i32 %9, 1
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = xor i1 %15, true
  %17 = icmp slt i32 %6, 1
  %18 = or i1 %17, %16
  %19 = icmp eq i32 %7, 0
  %20 = or i1 %18, %19
  br i1 %20, label %136, label %21

21:                                               ; preds = %8
  %22 = icmp slt i32 %7, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %21
  %24 = sub nsw i32 0, %7
  %25 = xor i32 %7, -1
  %26 = mul nsw i32 %25, %1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sub nsw i32 0, %1
  br label %30

30:                                               ; preds = %23, %21
  %31 = phi i32 [ %29, %23 ], [ %1, %21 ]
  %32 = phi i8* [ %28, %23 ], [ %0, %21 ]
  %33 = phi i32 [ %24, %23 ], [ %7, %21 ]
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %30 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = and i32 %6, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %46 = select i1 %44, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %47

47:                                               ; preds = %42, %38
  %48 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %38 ], [ %45, %42 ]
  %49 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %38 ], [ %46, %42 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %47, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %47 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %6, 31
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %62 = select i1 %60, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ %48, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ %49, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 32
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = and i32 %9, 30
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i8*, i8*, i32)* @MergeUVRow_SSE2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_SSE2
  br label %78

78:                                               ; preds = %70, %74
  %79 = phi void (i8*, i8*, i8*, i32)* [ %77, %74 ], [ @MergeUVRow_C, %70 ]
  %80 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = tail call i32 @InitCpuFlags() #4
  br label %84

84:                                               ; preds = %78, %82
  %85 = phi i32 [ %83, %82 ], [ %80, %78 ]
  %86 = and i32 %85, 1024
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = and i32 %9, 62
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, void (i8*, i8*, i8*, i32)* @MergeUVRow_AVX2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_AVX2
  br label %92

92:                                               ; preds = %84, %88
  %93 = phi void (i8*, i8*, i8*, i32)* [ %91, %88 ], [ %79, %84 ]
  %94 = add nsw i32 %10, 31
  %95 = and i32 %94, -32
  %96 = shl nsw i32 %94, 1
  %97 = or i32 %96, 63
  %98 = sext i32 %97 to i64
  %99 = tail call noalias i8* @malloc(i64 %98) #4
  %100 = ptrtoint i8* %99 to i64
  %101 = add nsw i64 %100, 63
  %102 = and i64 %101, -64
  %103 = inttoptr i64 %102 to i8*
  %104 = sext i32 %95 to i64
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = add nsw i32 %33, -1
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %131

108:                                              ; preds = %92
  %109 = sext i32 %31 to i64
  %110 = sext i32 %3 to i64
  %111 = shl nsw i32 %31, 1
  %112 = sext i32 %111 to i64
  %113 = shl nsw i32 %3, 1
  %114 = sext i32 %113 to i64
  %115 = sext i32 %5 to i64
  br label %116

116:                                              ; preds = %108, %116
  %117 = phi i32 [ 0, %108 ], [ %126, %116 ]
  %118 = phi i8* [ %32, %108 ], [ %123, %116 ]
  %119 = phi i8* [ %4, %108 ], [ %125, %116 ]
  %120 = phi i8* [ %2, %108 ], [ %124, %116 ]
  tail call void %64(i8* %118, i32 %31, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %105, i8* %103, i8* %119, i32 %10) #4
  tail call void %65(i8* %118, i8* %120, i32 %6) #4
  %121 = getelementptr inbounds i8, i8* %118, i64 %109
  %122 = getelementptr inbounds i8, i8* %120, i64 %110
  tail call void %65(i8* %121, i8* %122, i32 %6) #4
  %123 = getelementptr inbounds i8, i8* %118, i64 %112
  %124 = getelementptr inbounds i8, i8* %120, i64 %114
  %125 = getelementptr inbounds i8, i8* %119, i64 %115
  %126 = add nuw nsw i32 %117, 2
  %127 = icmp slt i32 %126, %106
  br i1 %127, label %116, label %128

128:                                              ; preds = %116
  %129 = and i32 %33, 1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %135, label %131

131:                                              ; preds = %92, %128
  %132 = phi i8* [ %123, %128 ], [ %32, %92 ]
  %133 = phi i8* [ %125, %128 ], [ %4, %92 ]
  %134 = phi i8* [ %124, %128 ], [ %2, %92 ]
  tail call void %64(i8* %132, i32 0, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %105, i8* %103, i8* %133, i32 %10) #4
  tail call void %65(i8* %132, i8* %134, i32 %6) #4
  br label %135

135:                                              ; preds = %128, %131
  tail call void @free(i8* %99) #4
  br label %136

136:                                              ; preds = %8, %135
  %137 = phi i32 [ 0, %135 ], [ -1, %8 ]
  ret i32 %137
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ABGRToNV12(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = ashr i32 %9, 1
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = xor i1 %15, true
  %17 = icmp slt i32 %6, 1
  %18 = or i1 %17, %16
  %19 = icmp eq i32 %7, 0
  %20 = or i1 %18, %19
  br i1 %20, label %136, label %21

21:                                               ; preds = %8
  %22 = icmp slt i32 %7, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %21
  %24 = sub nsw i32 0, %7
  %25 = xor i32 %7, -1
  %26 = mul nsw i32 %25, %1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sub nsw i32 0, %1
  br label %30

30:                                               ; preds = %23, %21
  %31 = phi i32 [ %29, %23 ], [ %1, %21 ]
  %32 = phi i8* [ %28, %23 ], [ %0, %21 ]
  %33 = phi i32 [ %24, %23 ], [ %7, %21 ]
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %30 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = and i32 %6, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_Any_SSSE3
  %46 = select i1 %44, void (i8*, i8*, i32)* @ABGRToYRow_SSSE3, void (i8*, i8*, i32)* @ABGRToYRow_Any_SSSE3
  br label %47

47:                                               ; preds = %42, %38
  %48 = phi void (i8*, i32, i8*, i8*, i32)* [ @ABGRToUVRow_C, %38 ], [ %45, %42 ]
  %49 = phi void (i8*, i8*, i32)* [ @ABGRToYRow_C, %38 ], [ %46, %42 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %47, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %47 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %6, 31
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_Any_AVX2
  %62 = select i1 %60, void (i8*, i8*, i32)* @ABGRToYRow_AVX2, void (i8*, i8*, i32)* @ABGRToYRow_Any_AVX2
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ %48, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ %49, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 32
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = and i32 %9, 30
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i8*, i8*, i32)* @MergeUVRow_SSE2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_SSE2
  br label %78

78:                                               ; preds = %70, %74
  %79 = phi void (i8*, i8*, i8*, i32)* [ %77, %74 ], [ @MergeUVRow_C, %70 ]
  %80 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = tail call i32 @InitCpuFlags() #4
  br label %84

84:                                               ; preds = %78, %82
  %85 = phi i32 [ %83, %82 ], [ %80, %78 ]
  %86 = and i32 %85, 1024
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = and i32 %9, 62
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, void (i8*, i8*, i8*, i32)* @MergeUVRow_AVX2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_AVX2
  br label %92

92:                                               ; preds = %84, %88
  %93 = phi void (i8*, i8*, i8*, i32)* [ %91, %88 ], [ %79, %84 ]
  %94 = add nsw i32 %10, 31
  %95 = and i32 %94, -32
  %96 = shl nsw i32 %94, 1
  %97 = or i32 %96, 63
  %98 = sext i32 %97 to i64
  %99 = tail call noalias i8* @malloc(i64 %98) #4
  %100 = ptrtoint i8* %99 to i64
  %101 = add nsw i64 %100, 63
  %102 = and i64 %101, -64
  %103 = inttoptr i64 %102 to i8*
  %104 = sext i32 %95 to i64
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = add nsw i32 %33, -1
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %131

108:                                              ; preds = %92
  %109 = sext i32 %31 to i64
  %110 = sext i32 %3 to i64
  %111 = shl nsw i32 %31, 1
  %112 = sext i32 %111 to i64
  %113 = shl nsw i32 %3, 1
  %114 = sext i32 %113 to i64
  %115 = sext i32 %5 to i64
  br label %116

116:                                              ; preds = %108, %116
  %117 = phi i32 [ 0, %108 ], [ %126, %116 ]
  %118 = phi i8* [ %32, %108 ], [ %123, %116 ]
  %119 = phi i8* [ %4, %108 ], [ %125, %116 ]
  %120 = phi i8* [ %2, %108 ], [ %124, %116 ]
  tail call void %64(i8* %118, i32 %31, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %103, i8* %105, i8* %119, i32 %10) #4
  tail call void %65(i8* %118, i8* %120, i32 %6) #4
  %121 = getelementptr inbounds i8, i8* %118, i64 %109
  %122 = getelementptr inbounds i8, i8* %120, i64 %110
  tail call void %65(i8* %121, i8* %122, i32 %6) #4
  %123 = getelementptr inbounds i8, i8* %118, i64 %112
  %124 = getelementptr inbounds i8, i8* %120, i64 %114
  %125 = getelementptr inbounds i8, i8* %119, i64 %115
  %126 = add nuw nsw i32 %117, 2
  %127 = icmp slt i32 %126, %106
  br i1 %127, label %116, label %128

128:                                              ; preds = %116
  %129 = and i32 %33, 1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %135, label %131

131:                                              ; preds = %92, %128
  %132 = phi i8* [ %123, %128 ], [ %32, %92 ]
  %133 = phi i8* [ %125, %128 ], [ %4, %92 ]
  %134 = phi i8* [ %124, %128 ], [ %2, %92 ]
  tail call void %64(i8* %132, i32 0, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %103, i8* %105, i8* %133, i32 %10) #4
  tail call void %65(i8* %132, i8* %134, i32 %6) #4
  br label %135

135:                                              ; preds = %128, %131
  tail call void @free(i8* %99) #4
  br label %136

136:                                              ; preds = %8, %135
  %137 = phi i32 [ 0, %135 ], [ -1, %8 ]
  ret i32 %137
}

declare void @ABGRToUVRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_Any_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToUVRow_AVX2(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToYRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ABGRToNV21(i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %6, 1
  %10 = ashr i32 %9, 1
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = xor i1 %15, true
  %17 = icmp slt i32 %6, 1
  %18 = or i1 %17, %16
  %19 = icmp eq i32 %7, 0
  %20 = or i1 %18, %19
  br i1 %20, label %136, label %21

21:                                               ; preds = %8
  %22 = icmp slt i32 %7, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %21
  %24 = sub nsw i32 0, %7
  %25 = xor i32 %7, -1
  %26 = mul nsw i32 %25, %1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %0, i64 %27
  %29 = sub nsw i32 0, %1
  br label %30

30:                                               ; preds = %23, %21
  %31 = phi i32 [ %29, %23 ], [ %1, %21 ]
  %32 = phi i8* [ %28, %23 ], [ %0, %21 ]
  %33 = phi i32 [ %24, %23 ], [ %7, %21 ]
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %30, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %30 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = and i32 %6, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_Any_SSSE3
  %46 = select i1 %44, void (i8*, i8*, i32)* @ABGRToYRow_SSSE3, void (i8*, i8*, i32)* @ABGRToYRow_Any_SSSE3
  br label %47

47:                                               ; preds = %42, %38
  %48 = phi void (i8*, i32, i8*, i8*, i32)* [ @ABGRToUVRow_C, %38 ], [ %45, %42 ]
  %49 = phi void (i8*, i8*, i32)* [ @ABGRToYRow_C, %38 ], [ %46, %42 ]
  %50 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = tail call i32 @InitCpuFlags() #4
  br label %54

54:                                               ; preds = %47, %52
  %55 = phi i32 [ %53, %52 ], [ %50, %47 ]
  %56 = and i32 %55, 1024
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %54
  %59 = and i32 %6, 31
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ABGRToUVRow_Any_AVX2
  %62 = select i1 %60, void (i8*, i8*, i32)* @ABGRToYRow_AVX2, void (i8*, i8*, i32)* @ABGRToYRow_Any_AVX2
  br label %63

63:                                               ; preds = %58, %54
  %64 = phi void (i8*, i32, i8*, i8*, i32)* [ %48, %54 ], [ %61, %58 ]
  %65 = phi void (i8*, i8*, i32)* [ %49, %54 ], [ %62, %58 ]
  %66 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = tail call i32 @InitCpuFlags() #4
  br label %70

70:                                               ; preds = %63, %68
  %71 = phi i32 [ %69, %68 ], [ %66, %63 ]
  %72 = and i32 %71, 32
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = and i32 %9, 30
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, void (i8*, i8*, i8*, i32)* @MergeUVRow_SSE2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_SSE2
  br label %78

78:                                               ; preds = %70, %74
  %79 = phi void (i8*, i8*, i8*, i32)* [ %77, %74 ], [ @MergeUVRow_C, %70 ]
  %80 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %78
  %83 = tail call i32 @InitCpuFlags() #4
  br label %84

84:                                               ; preds = %78, %82
  %85 = phi i32 [ %83, %82 ], [ %80, %78 ]
  %86 = and i32 %85, 1024
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %84
  %89 = and i32 %9, 62
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, void (i8*, i8*, i8*, i32)* @MergeUVRow_AVX2, void (i8*, i8*, i8*, i32)* @MergeUVRow_Any_AVX2
  br label %92

92:                                               ; preds = %84, %88
  %93 = phi void (i8*, i8*, i8*, i32)* [ %91, %88 ], [ %79, %84 ]
  %94 = add nsw i32 %10, 31
  %95 = and i32 %94, -32
  %96 = shl nsw i32 %94, 1
  %97 = or i32 %96, 63
  %98 = sext i32 %97 to i64
  %99 = tail call noalias i8* @malloc(i64 %98) #4
  %100 = ptrtoint i8* %99 to i64
  %101 = add nsw i64 %100, 63
  %102 = and i64 %101, -64
  %103 = inttoptr i64 %102 to i8*
  %104 = sext i32 %95 to i64
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = add nsw i32 %33, -1
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %131

108:                                              ; preds = %92
  %109 = sext i32 %31 to i64
  %110 = sext i32 %3 to i64
  %111 = shl nsw i32 %31, 1
  %112 = sext i32 %111 to i64
  %113 = shl nsw i32 %3, 1
  %114 = sext i32 %113 to i64
  %115 = sext i32 %5 to i64
  br label %116

116:                                              ; preds = %108, %116
  %117 = phi i32 [ 0, %108 ], [ %126, %116 ]
  %118 = phi i8* [ %32, %108 ], [ %123, %116 ]
  %119 = phi i8* [ %4, %108 ], [ %125, %116 ]
  %120 = phi i8* [ %2, %108 ], [ %124, %116 ]
  tail call void %64(i8* %118, i32 %31, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %105, i8* %103, i8* %119, i32 %10) #4
  tail call void %65(i8* %118, i8* %120, i32 %6) #4
  %121 = getelementptr inbounds i8, i8* %118, i64 %109
  %122 = getelementptr inbounds i8, i8* %120, i64 %110
  tail call void %65(i8* %121, i8* %122, i32 %6) #4
  %123 = getelementptr inbounds i8, i8* %118, i64 %112
  %124 = getelementptr inbounds i8, i8* %120, i64 %114
  %125 = getelementptr inbounds i8, i8* %119, i64 %115
  %126 = add nuw nsw i32 %117, 2
  %127 = icmp slt i32 %126, %106
  br i1 %127, label %116, label %128

128:                                              ; preds = %116
  %129 = and i32 %33, 1
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %135, label %131

131:                                              ; preds = %92, %128
  %132 = phi i8* [ %123, %128 ], [ %32, %92 ]
  %133 = phi i8* [ %125, %128 ], [ %4, %92 ]
  %134 = phi i8* [ %124, %128 ], [ %2, %92 ]
  tail call void %64(i8* %132, i32 0, i8* %103, i8* %105, i32 %6) #4
  tail call void %93(i8* %105, i8* %103, i8* %133, i32 %10) #4
  tail call void %65(i8* %132, i8* %134, i32 %6) #4
  br label %135

135:                                              ; preds = %128, %131
  tail call void @free(i8* %99) #4
  br label %136

136:                                              ; preds = %8, %135
  %137 = phi i32 [ 0, %135 ], [ -1, %8 ]
  ret i32 %137
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToYUY2(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %125, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %2, i64 %20
  %22 = sub nsw i32 0, %3
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %2, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %3, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %27, %1
  %29 = shl nsw i32 %4, 1
  %30 = icmp eq i32 %25, %29
  %31 = and i1 %28, %30
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 64
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 15
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %47 = select i1 %45, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %48

48:                                               ; preds = %43, %39
  %49 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %39 ], [ %46, %43 ]
  %50 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %39 ], [ %47, %43 ]
  %51 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %48
  %54 = tail call i32 @InitCpuFlags() #4
  br label %55

55:                                               ; preds = %48, %53
  %56 = phi i32 [ %54, %53 ], [ %51, %48 ]
  %57 = and i32 %56, 1024
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = and i32 %33, 31
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %63 = select i1 %61, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %64

64:                                               ; preds = %59, %55
  %65 = phi void (i8*, i32, i8*, i8*, i32)* [ %49, %55 ], [ %62, %59 ]
  %66 = phi void (i8*, i8*, i32)* [ %50, %55 ], [ %63, %59 ]
  %67 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %64
  %70 = tail call i32 @InitCpuFlags() #4
  br label %71

71:                                               ; preds = %64, %69
  %72 = phi i32 [ %70, %69 ], [ %67, %64 ]
  %73 = and i32 %72, 32
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %71
  %76 = and i32 %33, 15
  %77 = icmp eq i32 %76, 0
  %78 = select i1 %77, void (i8*, i8*, i8*, i8*, i32)* @I422ToYUY2Row_SSE2, void (i8*, i8*, i8*, i8*, i32)* @I422ToYUY2Row_Any_SSE2
  br label %79

79:                                               ; preds = %71, %75
  %80 = phi void (i8*, i8*, i8*, i8*, i32)* [ %78, %75 ], [ @I422ToYUY2Row_C, %71 ]
  %81 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %79
  %84 = tail call i32 @InitCpuFlags() #4
  br label %85

85:                                               ; preds = %79, %83
  %86 = phi i32 [ %84, %83 ], [ %81, %79 ]
  %87 = and i32 %86, 1024
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = and i32 %33, 31
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, void (i8*, i8*, i8*, i8*, i32)* @I422ToYUY2Row_AVX2, void (i8*, i8*, i8*, i8*, i32)* @I422ToYUY2Row_Any_AVX2
  br label %93

93:                                               ; preds = %85, %89
  %94 = phi void (i8*, i8*, i8*, i8*, i32)* [ %92, %89 ], [ %80, %85 ]
  %95 = add nsw i32 %33, 63
  %96 = and i32 %95, -64
  %97 = shl nsw i32 %96, 1
  %98 = or i32 %97, 63
  %99 = sext i32 %98 to i64
  %100 = tail call noalias i8* @malloc(i64 %99) #4
  %101 = ptrtoint i8* %100 to i64
  %102 = add nsw i64 %101, 63
  %103 = and i64 %102, -64
  %104 = inttoptr i64 %103 to i8*
  %105 = sext i32 %96 to i64
  %106 = getelementptr inbounds i8, i8* %104, i64 %105
  %107 = sdiv i32 %96, 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp sgt i32 %34, 0
  br i1 %110, label %111, label %124

111:                                              ; preds = %93
  %112 = sext i32 %1 to i64
  %113 = select i1 %31, i64 0, i64 %112
  %114 = sext i32 %25 to i64
  %115 = select i1 %31, i64 0, i64 %114
  br label %116

116:                                              ; preds = %116, %111
  %117 = phi i32 [ 0, %111 ], [ %122, %116 ]
  %118 = phi i8* [ %24, %111 ], [ %121, %116 ]
  %119 = phi i8* [ %0, %111 ], [ %120, %116 ]
  tail call void %65(i8* %119, i32 0, i8* %106, i8* %109, i32 %33) #4
  tail call void %66(i8* %119, i8* %104, i32 %33) #4
  tail call void %94(i8* %104, i8* %106, i8* %109, i8* %118, i32 %33) #4
  %120 = getelementptr inbounds i8, i8* %119, i64 %113
  %121 = getelementptr inbounds i8, i8* %118, i64 %115
  %122 = add nuw nsw i32 %117, 1
  %123 = icmp eq i32 %122, %34
  br i1 %123, label %124, label %116

124:                                              ; preds = %116, %93
  tail call void @free(i8* %100) #4
  br label %125

125:                                              ; preds = %6, %124
  %126 = phi i32 [ 0, %124 ], [ -1, %6 ]
  ret i32 %126
}

declare void @I422ToYUY2Row_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToYUY2Row_Any_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToYUY2Row_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToYUY2Row_Any_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToYUY2Row_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToUYVY(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %125, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %2, i64 %20
  %22 = sub nsw i32 0, %3
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %2, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %3, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %27, %1
  %29 = shl nsw i32 %4, 1
  %30 = icmp eq i32 %25, %29
  %31 = and i1 %28, %30
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 64
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 15
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_SSSE3
  %47 = select i1 %45, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %48

48:                                               ; preds = %43, %39
  %49 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVRow_C, %39 ], [ %46, %43 ]
  %50 = phi void (i8*, i8*, i32)* [ @ARGBToYRow_C, %39 ], [ %47, %43 ]
  %51 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %48
  %54 = tail call i32 @InitCpuFlags() #4
  br label %55

55:                                               ; preds = %48, %53
  %56 = phi i32 [ %54, %53 ], [ %51, %48 ]
  %57 = and i32 %56, 1024
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = and i32 %33, 31
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_AVX2, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVRow_Any_AVX2
  %63 = select i1 %61, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %64

64:                                               ; preds = %59, %55
  %65 = phi void (i8*, i32, i8*, i8*, i32)* [ %49, %55 ], [ %62, %59 ]
  %66 = phi void (i8*, i8*, i32)* [ %50, %55 ], [ %63, %59 ]
  %67 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %64
  %70 = tail call i32 @InitCpuFlags() #4
  br label %71

71:                                               ; preds = %64, %69
  %72 = phi i32 [ %70, %69 ], [ %67, %64 ]
  %73 = and i32 %72, 32
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %71
  %76 = and i32 %33, 15
  %77 = icmp eq i32 %76, 0
  %78 = select i1 %77, void (i8*, i8*, i8*, i8*, i32)* @I422ToUYVYRow_SSE2, void (i8*, i8*, i8*, i8*, i32)* @I422ToUYVYRow_Any_SSE2
  br label %79

79:                                               ; preds = %71, %75
  %80 = phi void (i8*, i8*, i8*, i8*, i32)* [ %78, %75 ], [ @I422ToUYVYRow_C, %71 ]
  %81 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %79
  %84 = tail call i32 @InitCpuFlags() #4
  br label %85

85:                                               ; preds = %79, %83
  %86 = phi i32 [ %84, %83 ], [ %81, %79 ]
  %87 = and i32 %86, 1024
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = and i32 %33, 31
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, void (i8*, i8*, i8*, i8*, i32)* @I422ToUYVYRow_AVX2, void (i8*, i8*, i8*, i8*, i32)* @I422ToUYVYRow_Any_AVX2
  br label %93

93:                                               ; preds = %85, %89
  %94 = phi void (i8*, i8*, i8*, i8*, i32)* [ %92, %89 ], [ %80, %85 ]
  %95 = add nsw i32 %33, 63
  %96 = and i32 %95, -64
  %97 = shl nsw i32 %96, 1
  %98 = or i32 %97, 63
  %99 = sext i32 %98 to i64
  %100 = tail call noalias i8* @malloc(i64 %99) #4
  %101 = ptrtoint i8* %100 to i64
  %102 = add nsw i64 %101, 63
  %103 = and i64 %102, -64
  %104 = inttoptr i64 %103 to i8*
  %105 = sext i32 %96 to i64
  %106 = getelementptr inbounds i8, i8* %104, i64 %105
  %107 = sdiv i32 %96, 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp sgt i32 %34, 0
  br i1 %110, label %111, label %124

111:                                              ; preds = %93
  %112 = sext i32 %1 to i64
  %113 = select i1 %31, i64 0, i64 %112
  %114 = sext i32 %25 to i64
  %115 = select i1 %31, i64 0, i64 %114
  br label %116

116:                                              ; preds = %116, %111
  %117 = phi i32 [ 0, %111 ], [ %122, %116 ]
  %118 = phi i8* [ %24, %111 ], [ %121, %116 ]
  %119 = phi i8* [ %0, %111 ], [ %120, %116 ]
  tail call void %65(i8* %119, i32 0, i8* %106, i8* %109, i32 %33) #4
  tail call void %66(i8* %119, i8* %104, i32 %33) #4
  tail call void %94(i8* %104, i8* %106, i8* %109, i8* %118, i32 %33) #4
  %120 = getelementptr inbounds i8, i8* %119, i64 %113
  %121 = getelementptr inbounds i8, i8* %118, i64 %115
  %122 = add nuw nsw i32 %117, 1
  %123 = icmp eq i32 %122, %34
  br i1 %123, label %124, label %116

124:                                              ; preds = %116, %93
  tail call void @free(i8* %100) #4
  br label %125

125:                                              ; preds = %6, %124
  %126 = phi i32 [ 0, %124 ], [ -1, %6 ]
  ret i32 %126
}

declare void @I422ToUYVYRow_C(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToUYVYRow_Any_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToUYVYRow_SSE2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToUYVYRow_Any_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

declare void @I422ToUYVYRow_AVX2(i8*, i8*, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToI400(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBToYRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBToYRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBToYRow_AVX2, void (i8*, i8*, i32)* @ARGBToYRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToRGBA(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = tail call i32 @ARGBShuffle(i8* %0, i32 %1, i8* %2, i32 %3, i8* getelementptr (<16 x i8>, <16 x i8>* @_ZN6libyuvL22kShuffleMaskARGBToRGBAE, i64 0, i64 0), i32 %4, i32 %5) #4
  ret i32 %7
}

declare i32 @ARGBShuffle(i8*, i32, i8*, i32, i8*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToRGB24(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %91, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = mul nsw i32 %4, 3
  %30 = icmp eq i32 %29, %3
  %31 = and i1 %30, %28
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 64
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 15
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i32)* @ARGBToRGB24Row_SSSE3, void (i8*, i8*, i32)* @ARGBToRGB24Row_Any_SSSE3
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i32)* [ %46, %43 ], [ @ARGBToRGB24Row_C, %39 ]
  %49 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = tail call i32 @InitCpuFlags() #4
  br label %53

53:                                               ; preds = %47, %51
  %54 = phi i32 [ %52, %51 ], [ %49, %47 ]
  %55 = and i32 %54, 1024
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = and i32 %33, 31
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i8*, i32)* @ARGBToRGB24Row_AVX2, void (i8*, i8*, i32)* @ARGBToRGB24Row_Any_AVX2
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi void (i8*, i8*, i32)* [ %60, %57 ], [ %48, %53 ]
  %63 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = tail call i32 @InitCpuFlags() #4
  br label %67

67:                                               ; preds = %61, %65
  %68 = phi i32 [ %66, %65 ], [ %63, %61 ]
  %69 = and i32 %68, 131072
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = and i32 %33, 31
  %73 = icmp eq i32 %72, 0
  %74 = select i1 %73, void (i8*, i8*, i32)* @ARGBToRGB24Row_AVX512VBMI, void (i8*, i8*, i32)* @ARGBToRGB24Row_Any_AVX512VBMI
  br label %75

75:                                               ; preds = %67, %71
  %76 = phi void (i8*, i8*, i32)* [ %74, %71 ], [ %62, %67 ]
  %77 = icmp sgt i32 %34, 0
  br i1 %77, label %78, label %91

78:                                               ; preds = %75
  %79 = sext i32 %25 to i64
  %80 = select i1 %31, i64 0, i64 %79
  %81 = sext i32 %3 to i64
  %82 = select i1 %31, i64 0, i64 %81
  br label %83

83:                                               ; preds = %83, %78
  %84 = phi i32 [ 0, %78 ], [ %89, %83 ]
  %85 = phi i8* [ %2, %78 ], [ %88, %83 ]
  %86 = phi i8* [ %24, %78 ], [ %87, %83 ]
  tail call void %76(i8* %86, i8* %85, i32 %33) #4
  %87 = getelementptr inbounds i8, i8* %86, i64 %80
  %88 = getelementptr inbounds i8, i8* %85, i64 %82
  %89 = add nuw nsw i32 %84, 1
  %90 = icmp eq i32 %89, %34
  br i1 %90, label %91, label %83

91:                                               ; preds = %83, %75, %6
  %92 = phi i32 [ -1, %6 ], [ 0, %75 ], [ 0, %83 ]
  ret i32 %92
}

declare void @ARGBToRGB24Row_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB24Row_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB24Row_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB24Row_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB24Row_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB24Row_Any_AVX512VBMI(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB24Row_AVX512VBMI(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToRAW(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %77, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = mul nsw i32 %4, 3
  %30 = icmp eq i32 %29, %3
  %31 = and i1 %30, %28
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 64
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 15
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i32)* @ARGBToRAWRow_SSSE3, void (i8*, i8*, i32)* @ARGBToRAWRow_Any_SSSE3
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i32)* [ %46, %43 ], [ @ARGBToRAWRow_C, %39 ]
  %49 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %47
  %52 = tail call i32 @InitCpuFlags() #4
  br label %53

53:                                               ; preds = %47, %51
  %54 = phi i32 [ %52, %51 ], [ %49, %47 ]
  %55 = and i32 %54, 1024
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = and i32 %33, 31
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i8*, i32)* @ARGBToRAWRow_AVX2, void (i8*, i8*, i32)* @ARGBToRAWRow_Any_AVX2
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi void (i8*, i8*, i32)* [ %60, %57 ], [ %48, %53 ]
  %63 = icmp sgt i32 %34, 0
  br i1 %63, label %64, label %77

64:                                               ; preds = %61
  %65 = sext i32 %25 to i64
  %66 = select i1 %31, i64 0, i64 %65
  %67 = sext i32 %3 to i64
  %68 = select i1 %31, i64 0, i64 %67
  br label %69

69:                                               ; preds = %69, %64
  %70 = phi i32 [ 0, %64 ], [ %75, %69 ]
  %71 = phi i8* [ %2, %64 ], [ %74, %69 ]
  %72 = phi i8* [ %24, %64 ], [ %73, %69 ]
  tail call void %62(i8* %72, i8* %71, i32 %33) #4
  %73 = getelementptr inbounds i8, i8* %72, i64 %66
  %74 = getelementptr inbounds i8, i8* %71, i64 %68
  %75 = add nuw nsw i32 %70, 1
  %76 = icmp eq i32 %75, %34
  br i1 %76, label %77, label %69

77:                                               ; preds = %69, %61, %6
  %78 = phi i32 [ -1, %6 ], [ 0, %61 ], [ 0, %69 ]
  ret i32 %78
}

declare void @ARGBToRAWRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRAWRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRAWRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRAWRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRAWRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToRGB565Dither(i8*, i32, i8*, i32, i8* readonly, i32, i32) local_unnamed_addr #0 {
  %8 = icmp eq i8* %0, null
  %9 = icmp eq i8* %2, null
  %10 = or i1 %8, %9
  %11 = icmp slt i32 %5, 1
  %12 = or i1 %10, %11
  %13 = icmp eq i32 %6, 0
  %14 = or i1 %12, %13
  br i1 %14, label %76, label %15

15:                                               ; preds = %7
  %16 = icmp slt i32 %6, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %15
  %18 = sub nsw i32 0, %6
  %19 = xor i32 %6, -1
  %20 = mul nsw i32 %19, %1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = sub nsw i32 0, %1
  br label %24

24:                                               ; preds = %17, %15
  %25 = phi i32 [ %23, %17 ], [ %1, %15 ]
  %26 = phi i8* [ %22, %17 ], [ %0, %15 ]
  %27 = phi i32 [ %18, %17 ], [ %6, %15 ]
  %28 = icmp eq i8* %4, null
  %29 = select i1 %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN6libyuvL14kDither565_4x4E, i64 0, i64 0), i8* %4
  %30 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %24
  %33 = tail call i32 @InitCpuFlags() #4
  br label %34

34:                                               ; preds = %24, %32
  %35 = phi i32 [ %33, %32 ], [ %30, %24 ]
  %36 = and i32 %35, 32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = and i32 %5, 3
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, void (i8*, i8*, i32, i32)* @ARGBToRGB565DitherRow_SSE2, void (i8*, i8*, i32, i32)* @ARGBToRGB565DitherRow_Any_SSE2
  br label %42

42:                                               ; preds = %34, %38
  %43 = phi void (i8*, i8*, i32, i32)* [ %41, %38 ], [ @ARGBToRGB565DitherRow_C, %34 ]
  %44 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = tail call i32 @InitCpuFlags() #4
  br label %48

48:                                               ; preds = %42, %46
  %49 = phi i32 [ %47, %46 ], [ %44, %42 ]
  %50 = and i32 %49, 1024
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %48
  %53 = and i32 %5, 7
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, void (i8*, i8*, i32, i32)* @ARGBToRGB565DitherRow_AVX2, void (i8*, i8*, i32, i32)* @ARGBToRGB565DitherRow_Any_AVX2
  br label %56

56:                                               ; preds = %48, %52
  %57 = phi void (i8*, i8*, i32, i32)* [ %55, %52 ], [ %43, %48 ]
  %58 = icmp sgt i32 %27, 0
  br i1 %58, label %59, label %76

59:                                               ; preds = %56
  %60 = sext i32 %25 to i64
  %61 = sext i32 %3 to i64
  br label %62

62:                                               ; preds = %62, %59
  %63 = phi i32 [ 0, %59 ], [ %74, %62 ]
  %64 = phi i8* [ %26, %59 ], [ %72, %62 ]
  %65 = phi i8* [ %2, %59 ], [ %73, %62 ]
  %66 = shl i32 %63, 2
  %67 = and i32 %66, 12
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %29, i64 %68
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  tail call void %57(i8* %64, i8* %65, i32 %71, i32 %5) #4
  %72 = getelementptr inbounds i8, i8* %64, i64 %60
  %73 = getelementptr inbounds i8, i8* %65, i64 %61
  %74 = add nuw nsw i32 %63, 1
  %75 = icmp eq i32 %74, %27
  br i1 %75, label %76, label %62

76:                                               ; preds = %62, %56, %7
  %77 = phi i32 [ -1, %7 ], [ 0, %56 ], [ 0, %62 ]
  ret i32 %77
}

declare void @ARGBToRGB565DitherRow_C(i8*, i8*, i32, i32) local_unnamed_addr #1

declare void @ARGBToRGB565DitherRow_Any_SSE2(i8*, i8*, i32, i32) local_unnamed_addr #1

declare void @ARGBToRGB565DitherRow_SSE2(i8*, i8*, i32, i32) local_unnamed_addr #1

declare void @ARGBToRGB565DitherRow_Any_AVX2(i8*, i8*, i32, i32) local_unnamed_addr #1

declare void @ARGBToRGB565DitherRow_AVX2(i8*, i8*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToRGB565(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %63, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = shl nsw i32 %4, 1
  %30 = icmp eq i32 %29, %3
  %31 = and i1 %30, %28
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 3
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i32)* @ARGBToRGB565Row_SSE2, void (i8*, i8*, i32)* @ARGBToRGB565Row_Any_SSE2
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i32)* [ %46, %43 ], [ @ARGBToRGB565Row_C, %39 ]
  %49 = icmp sgt i32 %34, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %47
  %51 = sext i32 %25 to i64
  %52 = select i1 %31, i64 0, i64 %51
  %53 = sext i32 %3 to i64
  %54 = select i1 %31, i64 0, i64 %53
  br label %55

55:                                               ; preds = %55, %50
  %56 = phi i32 [ 0, %50 ], [ %61, %55 ]
  %57 = phi i8* [ %2, %50 ], [ %60, %55 ]
  %58 = phi i8* [ %24, %50 ], [ %59, %55 ]
  tail call void %48(i8* %58, i8* %57, i32 %33) #4, !callees !3
  %59 = getelementptr inbounds i8, i8* %58, i64 %52
  %60 = getelementptr inbounds i8, i8* %57, i64 %54
  %61 = add nuw nsw i32 %56, 1
  %62 = icmp eq i32 %61, %34
  br i1 %62, label %63, label %55

63:                                               ; preds = %55, %47, %6
  %64 = phi i32 [ -1, %6 ], [ 0, %47 ], [ 0, %55 ]
  ret i32 %64
}

declare void @ARGBToRGB565Row_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB565Row_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToRGB565Row_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToARGB1555(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %63, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = shl nsw i32 %4, 1
  %30 = icmp eq i32 %29, %3
  %31 = and i1 %30, %28
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 3
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i32)* @ARGBToARGB1555Row_SSE2, void (i8*, i8*, i32)* @ARGBToARGB1555Row_Any_SSE2
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i32)* [ %46, %43 ], [ @ARGBToARGB1555Row_C, %39 ]
  %49 = icmp sgt i32 %34, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %47
  %51 = sext i32 %25 to i64
  %52 = select i1 %31, i64 0, i64 %51
  %53 = sext i32 %3 to i64
  %54 = select i1 %31, i64 0, i64 %53
  br label %55

55:                                               ; preds = %55, %50
  %56 = phi i32 [ 0, %50 ], [ %61, %55 ]
  %57 = phi i8* [ %2, %50 ], [ %60, %55 ]
  %58 = phi i8* [ %24, %50 ], [ %59, %55 ]
  tail call void %48(i8* %58, i8* %57, i32 %33) #4, !callees !4
  %59 = getelementptr inbounds i8, i8* %58, i64 %52
  %60 = getelementptr inbounds i8, i8* %57, i64 %54
  %61 = add nuw nsw i32 %56, 1
  %62 = icmp eq i32 %61, %34
  br i1 %62, label %63, label %55

63:                                               ; preds = %55, %47, %6
  %64 = phi i32 [ -1, %6 ], [ 0, %47 ], [ 0, %55 ]
  ret i32 %64
}

declare void @ARGBToARGB1555Row_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToARGB1555Row_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToARGB1555Row_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToARGB4444(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %63, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = shl nsw i32 %4, 1
  %30 = icmp eq i32 %29, %3
  %31 = and i1 %30, %28
  %32 = select i1 %31, i32 %26, i32 1
  %33 = mul nsw i32 %32, %4
  %34 = select i1 %31, i32 1, i32 %26
  %35 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %23
  %38 = tail call i32 @InitCpuFlags() #4
  br label %39

39:                                               ; preds = %23, %37
  %40 = phi i32 [ %38, %37 ], [ %35, %23 ]
  %41 = and i32 %40, 32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = and i32 %33, 3
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, void (i8*, i8*, i32)* @ARGBToARGB4444Row_SSE2, void (i8*, i8*, i32)* @ARGBToARGB4444Row_Any_SSE2
  br label %47

47:                                               ; preds = %39, %43
  %48 = phi void (i8*, i8*, i32)* [ %46, %43 ], [ @ARGBToARGB4444Row_C, %39 ]
  %49 = icmp sgt i32 %34, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %47
  %51 = sext i32 %25 to i64
  %52 = select i1 %31, i64 0, i64 %51
  %53 = sext i32 %3 to i64
  %54 = select i1 %31, i64 0, i64 %53
  br label %55

55:                                               ; preds = %55, %50
  %56 = phi i32 [ 0, %50 ], [ %61, %55 ]
  %57 = phi i8* [ %2, %50 ], [ %60, %55 ]
  %58 = phi i8* [ %24, %50 ], [ %59, %55 ]
  tail call void %48(i8* %58, i8* %57, i32 %33) #4, !callees !5
  %59 = getelementptr inbounds i8, i8* %58, i64 %52
  %60 = getelementptr inbounds i8, i8* %57, i64 %54
  %61 = add nuw nsw i32 %56, 1
  %62 = icmp eq i32 %61, %34
  br i1 %62, label %63, label %55

63:                                               ; preds = %55, %47, %6
  %64 = phi i32 [ -1, %6 ], [ 0, %47 ], [ 0, %55 ]
  ret i32 %64
}

declare void @ARGBToARGB4444Row_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToARGB4444Row_Any_SSE2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToARGB4444Row_SSE2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ABGRToAR30(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 3
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ABGRToAR30Row_SSSE3, void (i8*, i8*, i32)* @ABGRToAR30Row_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ABGRToAR30Row_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 7
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ABGRToAR30Row_AVX2, void (i8*, i8*, i32)* @ABGRToAR30Row_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ABGRToAR30Row_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToAR30Row_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToAR30Row_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToAR30Row_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ABGRToAR30Row_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToAR30(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 3
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBToAR30Row_SSSE3, void (i8*, i8*, i32)* @ARGBToAR30Row_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBToAR30Row_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 7
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBToAR30Row_AVX2, void (i8*, i8*, i32)* @ARGBToAR30Row_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBToAR30Row_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToAR30Row_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToAR30Row_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToAR30Row_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToAR30Row_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToJ420(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %99, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %34 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = tail call i32 @InitCpuFlags() #4
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i32 [ %39, %38 ], [ %36, %32 ]
  %42 = and i32 %41, 64
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = and i32 %8, 15
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %46, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_SSSE3
  %48 = select i1 %46, void (i8*, i8*, i32)* @ARGBToYJRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYJRow_Any_SSSE3
  br label %49

49:                                               ; preds = %44, %40
  %50 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVJRow_C, %40 ], [ %47, %44 ]
  %51 = phi void (i8*, i8*, i32)* [ @ARGBToYJRow_C, %40 ], [ %48, %44 ]
  %52 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = tail call i32 @InitCpuFlags() #4
  br label %56

56:                                               ; preds = %49, %54
  %57 = phi i32 [ %55, %54 ], [ %52, %49 ]
  %58 = and i32 %57, 1024
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = and i32 %8, 31
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, void (i8*, i8*, i32)* @ARGBToYJRow_AVX2, void (i8*, i8*, i32)* @ARGBToYJRow_Any_AVX2
  br label %64

64:                                               ; preds = %56, %60
  %65 = phi void (i8*, i8*, i32)* [ %63, %60 ], [ %51, %56 ]
  %66 = add nsw i32 %35, -1
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %94

68:                                               ; preds = %64
  %69 = sext i32 %33 to i64
  %70 = sext i32 %3 to i64
  %71 = shl nsw i32 %33, 1
  %72 = sext i32 %71 to i64
  %73 = shl nsw i32 %3, 1
  %74 = sext i32 %73 to i64
  %75 = sext i32 %5 to i64
  %76 = sext i32 %7 to i64
  br label %77

77:                                               ; preds = %68, %77
  %78 = phi i32 [ 0, %68 ], [ %89, %77 ]
  %79 = phi i8* [ %34, %68 ], [ %85, %77 ]
  %80 = phi i8* [ %6, %68 ], [ %88, %77 ]
  %81 = phi i8* [ %4, %68 ], [ %87, %77 ]
  %82 = phi i8* [ %2, %68 ], [ %86, %77 ]
  tail call void %50(i8* %79, i32 %33, i8* %81, i8* %80, i32 %8) #4, !callees !6
  tail call void %65(i8* %79, i8* %82, i32 %8) #4
  %83 = getelementptr inbounds i8, i8* %79, i64 %69
  %84 = getelementptr inbounds i8, i8* %82, i64 %70
  tail call void %65(i8* %83, i8* %84, i32 %8) #4
  %85 = getelementptr inbounds i8, i8* %79, i64 %72
  %86 = getelementptr inbounds i8, i8* %82, i64 %74
  %87 = getelementptr inbounds i8, i8* %81, i64 %75
  %88 = getelementptr inbounds i8, i8* %80, i64 %76
  %89 = add nuw nsw i32 %78, 2
  %90 = icmp slt i32 %89, %66
  br i1 %90, label %77, label %91

91:                                               ; preds = %77
  %92 = and i32 %35, 1
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %99, label %94

94:                                               ; preds = %64, %91
  %95 = phi i8* [ %85, %91 ], [ %34, %64 ]
  %96 = phi i8* [ %88, %91 ], [ %6, %64 ]
  %97 = phi i8* [ %87, %91 ], [ %4, %64 ]
  %98 = phi i8* [ %86, %91 ], [ %2, %64 ]
  tail call void %50(i8* %95, i32 0, i8* %97, i8* %96, i32 %8) #4, !callees !6
  tail call void %65(i8* %95, i8* %98, i32 %8) #4
  br label %99

99:                                               ; preds = %94, %91, %10
  %100 = phi i32 [ -1, %10 ], [ 0, %91 ], [ 0, %94 ]
  ret i32 %100
}

declare void @ARGBToUVJRow_C(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVJRow_Any_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToUVJRow_SSSE3(i8*, i32, i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @ARGBToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToJ422(i8*, i32, i8*, i32, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = icmp ne i8* %0, null
  %12 = icmp ne i8* %2, null
  %13 = and i1 %11, %12
  %14 = icmp ne i8* %4, null
  %15 = and i1 %13, %14
  %16 = icmp ne i8* %6, null
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  %19 = icmp slt i32 %8, 1
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %9, 0
  %22 = or i1 %20, %21
  br i1 %22, label %101, label %23

23:                                               ; preds = %10
  %24 = icmp slt i32 %9, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = sub nsw i32 0, %9
  %27 = xor i32 %9, -1
  %28 = mul nsw i32 %27, %1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = sub nsw i32 0, %1
  br label %32

32:                                               ; preds = %25, %23
  %33 = phi i8* [ %30, %25 ], [ %0, %23 ]
  %34 = phi i32 [ %31, %25 ], [ %1, %23 ]
  %35 = phi i32 [ %26, %25 ], [ %9, %23 ]
  %36 = shl nsw i32 %8, 2
  %37 = icmp eq i32 %34, %36
  %38 = icmp eq i32 %3, %8
  %39 = and i1 %38, %37
  %40 = shl nsw i32 %5, 1
  %41 = icmp eq i32 %40, %8
  %42 = and i1 %41, %39
  %43 = shl nsw i32 %7, 1
  %44 = icmp eq i32 %43, %8
  %45 = and i1 %44, %42
  %46 = select i1 %45, i32 %35, i32 1
  %47 = mul nsw i32 %46, %8
  %48 = select i1 %45, i32 1, i32 %35
  %49 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %32
  %52 = tail call i32 @InitCpuFlags() #4
  br label %53

53:                                               ; preds = %32, %51
  %54 = phi i32 [ %52, %51 ], [ %49, %32 ]
  %55 = and i32 %54, 64
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = and i32 %47, 15
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_SSSE3
  %61 = select i1 %59, void (i8*, i8*, i32)* @ARGBToYJRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYJRow_Any_SSSE3
  br label %62

62:                                               ; preds = %57, %53
  %63 = phi void (i8*, i32, i8*, i8*, i32)* [ @ARGBToUVJRow_C, %53 ], [ %60, %57 ]
  %64 = phi void (i8*, i8*, i32)* [ @ARGBToYJRow_C, %53 ], [ %61, %57 ]
  %65 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %62
  %68 = tail call i32 @InitCpuFlags() #4
  br label %69

69:                                               ; preds = %62, %67
  %70 = phi i32 [ %68, %67 ], [ %65, %62 ]
  %71 = and i32 %70, 1024
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %77, label %73

73:                                               ; preds = %69
  %74 = and i32 %47, 31
  %75 = icmp eq i32 %74, 0
  %76 = select i1 %75, void (i8*, i8*, i32)* @ARGBToYJRow_AVX2, void (i8*, i8*, i32)* @ARGBToYJRow_Any_AVX2
  br label %77

77:                                               ; preds = %69, %73
  %78 = phi void (i8*, i8*, i32)* [ %76, %73 ], [ %64, %69 ]
  %79 = icmp sgt i32 %48, 0
  br i1 %79, label %80, label %101

80:                                               ; preds = %77
  %81 = sext i32 %34 to i64
  %82 = select i1 %45, i64 0, i64 %81
  %83 = sext i32 %3 to i64
  %84 = select i1 %45, i64 0, i64 %83
  %85 = sext i32 %5 to i64
  %86 = select i1 %45, i64 0, i64 %85
  %87 = sext i32 %7 to i64
  %88 = select i1 %45, i64 0, i64 %87
  br label %89

89:                                               ; preds = %89, %80
  %90 = phi i32 [ 0, %80 ], [ %99, %89 ]
  %91 = phi i8* [ %6, %80 ], [ %98, %89 ]
  %92 = phi i8* [ %4, %80 ], [ %97, %89 ]
  %93 = phi i8* [ %2, %80 ], [ %96, %89 ]
  %94 = phi i8* [ %33, %80 ], [ %95, %89 ]
  tail call void %63(i8* %94, i32 0, i8* %92, i8* %91, i32 %47) #4, !callees !6
  tail call void %78(i8* %94, i8* %93, i32 %47) #4
  %95 = getelementptr inbounds i8, i8* %94, i64 %82
  %96 = getelementptr inbounds i8, i8* %93, i64 %84
  %97 = getelementptr inbounds i8, i8* %92, i64 %86
  %98 = getelementptr inbounds i8, i8* %91, i64 %88
  %99 = add nuw nsw i32 %90, 1
  %100 = icmp eq i32 %99, %48
  br i1 %100, label %101, label %89

101:                                              ; preds = %89, %77, %10
  %102 = phi i32 [ -1, %10 ], [ 0, %77 ], [ 0, %89 ]
  ret i32 %102
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToAR64(i8*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i16* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 3
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i16*, i32)* @ARGBToAR64Row_SSSE3, void (i8*, i16*, i32)* @ARGBToAR64Row_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i16*, i32)* [ %45, %42 ], [ @ARGBToAR64Row_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 7
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i16*, i32)* @ARGBToAR64Row_AVX2, void (i8*, i16*, i32)* @ARGBToAR64Row_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i16*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i16* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i16* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i16, i16* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBToAR64Row_C(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAR64Row_Any_SSSE3(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAR64Row_SSSE3(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAR64Row_Any_AVX2(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAR64Row_AVX2(i8*, i16*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToAB64(i8*, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i16* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %27, %3
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 3
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i16*, i32)* @ARGBToAB64Row_SSSE3, void (i8*, i16*, i32)* @ARGBToAB64Row_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i16*, i32)* [ %45, %42 ], [ @ARGBToAB64Row_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 7
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i16*, i32)* @ARGBToAB64Row_AVX2, void (i8*, i16*, i32)* @ARGBToAB64Row_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i16*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i16* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i16* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i16, i16* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @ARGBToAB64Row_C(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAB64Row_Any_SSSE3(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAB64Row_SSSE3(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAB64Row_Any_AVX2(i8*, i16*, i32) local_unnamed_addr #1

declare void @ARGBToAB64Row_AVX2(i8*, i16*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ARGBToJ400(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @ARGBToYJRow_SSSE3, void (i8*, i8*, i32)* @ARGBToYJRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @ARGBToYJRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @ARGBToYJRow_AVX2, void (i8*, i8*, i32)* @ARGBToYJRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @RGBAToJ400(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp eq i8* %0, null
  %8 = icmp eq i8* %2, null
  %9 = or i1 %7, %8
  %10 = icmp slt i32 %4, 1
  %11 = or i1 %9, %10
  %12 = icmp eq i32 %5, 0
  %13 = or i1 %11, %12
  br i1 %13, label %76, label %14

14:                                               ; preds = %6
  %15 = icmp slt i32 %5, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %14
  %17 = sub nsw i32 0, %5
  %18 = xor i32 %5, -1
  %19 = mul nsw i32 %18, %1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %0, i64 %20
  %22 = sub nsw i32 0, %1
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i8* [ %21, %16 ], [ %0, %14 ]
  %25 = phi i32 [ %22, %16 ], [ %1, %14 ]
  %26 = phi i32 [ %17, %16 ], [ %5, %14 ]
  %27 = shl nsw i32 %4, 2
  %28 = icmp eq i32 %25, %27
  %29 = icmp eq i32 %3, %4
  %30 = and i1 %29, %28
  %31 = select i1 %30, i32 %26, i32 1
  %32 = mul nsw i32 %31, %4
  %33 = select i1 %30, i32 1, i32 %26
  %34 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %23
  %37 = tail call i32 @InitCpuFlags() #4
  br label %38

38:                                               ; preds = %23, %36
  %39 = phi i32 [ %37, %36 ], [ %34, %23 ]
  %40 = and i32 %39, 64
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = and i32 %32, 15
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, void (i8*, i8*, i32)* @RGBAToYJRow_SSSE3, void (i8*, i8*, i32)* @RGBAToYJRow_Any_SSSE3
  br label %46

46:                                               ; preds = %38, %42
  %47 = phi void (i8*, i8*, i32)* [ %45, %42 ], [ @RGBAToYJRow_C, %38 ]
  %48 = load atomic i32, i32* @cpu_info_ monotonic, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 @InitCpuFlags() #4
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %51, %50 ], [ %48, %46 ]
  %54 = and i32 %53, 1024
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %52
  %57 = and i32 %32, 31
  %58 = icmp eq i32 %57, 0
  %59 = select i1 %58, void (i8*, i8*, i32)* @RGBAToYJRow_AVX2, void (i8*, i8*, i32)* @RGBAToYJRow_Any_AVX2
  br label %60

60:                                               ; preds = %52, %56
  %61 = phi void (i8*, i8*, i32)* [ %59, %56 ], [ %47, %52 ]
  %62 = icmp sgt i32 %33, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %60
  %64 = sext i32 %25 to i64
  %65 = select i1 %30, i64 0, i64 %64
  %66 = sext i32 %3 to i64
  %67 = select i1 %30, i64 0, i64 %66
  br label %68

68:                                               ; preds = %68, %63
  %69 = phi i32 [ 0, %63 ], [ %74, %68 ]
  %70 = phi i8* [ %2, %63 ], [ %73, %68 ]
  %71 = phi i8* [ %24, %63 ], [ %72, %68 ]
  tail call void %61(i8* %71, i8* %70, i32 %32) #4
  %72 = getelementptr inbounds i8, i8* %71, i64 %65
  %73 = getelementptr inbounds i8, i8* %70, i64 %67
  %74 = add nuw nsw i32 %69, 1
  %75 = icmp eq i32 %74, %33
  br i1 %75, label %76, label %68

76:                                               ; preds = %68, %60, %6
  %77 = phi i32 [ -1, %6 ], [ 0, %60 ], [ 0, %68 ]
  ret i32 %77
}

declare void @RGBAToYJRow_C(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYJRow_Any_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYJRow_Any_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare void @RGBAToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #1

declare i32 @InitCpuFlags() local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{void (i8*, i8*, i8*, i32)* @ARGBToUV444Row_Any_SSSE3, void (i8*, i8*, i8*, i32)* @ARGBToUV444Row_C, void (i8*, i8*, i8*, i32)* @ARGBToUV444Row_SSSE3}
!3 = !{void (i8*, i8*, i32)* @ARGBToRGB565Row_Any_SSE2, void (i8*, i8*, i32)* @ARGBToRGB565Row_C, void (i8*, i8*, i32)* @ARGBToRGB565Row_SSE2}
!4 = !{void (i8*, i8*, i32)* @ARGBToARGB1555Row_Any_SSE2, void (i8*, i8*, i32)* @ARGBToARGB1555Row_C, void (i8*, i8*, i32)* @ARGBToARGB1555Row_SSE2}
!5 = !{void (i8*, i8*, i32)* @ARGBToARGB4444Row_Any_SSE2, void (i8*, i8*, i32)* @ARGBToARGB4444Row_C, void (i8*, i8*, i32)* @ARGBToARGB4444Row_SSE2}
!6 = !{void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_Any_SSSE3, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_C, void (i8*, i32, i8*, i8*, i32)* @ARGBToUVJRow_SSSE3}
