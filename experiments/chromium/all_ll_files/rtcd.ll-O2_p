; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/rtcd.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/rtcd.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.block = type opaque
%struct.blockd = type opaque
%struct.macroblock = type opaque
%struct.variance_vtable = type opaque
%union.int_mv = type opaque

@vp8_bilinear_predict16x16 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)* null, align 8
@vp8_bilinear_predict8x8 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)* null, align 8
@vp8_copy32xn = common hidden local_unnamed_addr global void (i8*, i32, i8*, i32, i32)* null, align 8
@vp8_fast_quantize_b = common hidden local_unnamed_addr global void (%struct.block*, %struct.blockd*)* null, align 8
@vp8_full_search_sad = common hidden local_unnamed_addr global i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* null, align 8
@vp8_regular_quantize_b = common hidden local_unnamed_addr global void (%struct.block*, %struct.blockd*)* null, align 8
@vp8_sixtap_predict16x16 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)* null, align 8
@vp8_sixtap_predict4x4 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)* null, align 8
@vp8_sixtap_predict8x4 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)* null, align 8
@vp8_sixtap_predict8x8 = common hidden local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)* null, align 8
@once.lock = internal global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"VPX_SIMD_CAPS\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"VPX_SIMD_CAPS_MASK\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_rtcd() local_unnamed_addr #0 {
  %1 = tail call i32 @pthread_once(i32* nonnull @once.lock, void ()* nonnull @setup_rtcd_internal) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @setup_rtcd_internal() #0 {
  %1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0)) #4
  %2 = icmp eq i8* %1, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %0
  %4 = load i8, i8* %1, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @strtol(i8* nocapture nonnull %1, i8** null, i32 0) #4
  %8 = trunc i64 %7 to i32
  br label %63

9:                                                ; preds = %3, %0
  %10 = tail call i8* @getenv(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)) #4
  %11 = icmp eq i8* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %9
  %13 = load i8, i8* %10, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = tail call i64 @strtoul(i8* nocapture nonnull %10, i8** null, i32 0) #4
  %17 = trunc i64 %16 to i32
  br label %18

18:                                               ; preds = %15, %12, %9
  %19 = phi i32 [ %17, %15 ], [ -1, %12 ], [ -1, %9 ]
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid           \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0) #4, !srcloc !2
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %63, label %23

23:                                               ; preds = %18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid           \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 1, i32 0) #4, !srcloc !3
  %25 = extractvalue { i32, i32, i32, i32 } %24, 2
  %26 = shl i32 %25, 3
  %27 = and i32 %26, 8
  %28 = lshr i32 %25, 5
  %29 = and i32 %28, 16
  %30 = or i32 %27, %29
  %31 = lshr i32 %25, 14
  %32 = and i32 %31, 32
  %33 = or i32 %30, %32
  %34 = and i32 %25, 402653184
  %35 = icmp eq i32 %34, 402653184
  br i1 %35, label %36, label %60

36:                                               ; preds = %23
  %37 = tail call { i32, i32 } asm sideeffect ".byte 0x0f, 0x01, 0xd0\0A", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #4, !srcloc !4
  %38 = extractvalue { i32, i32 } %37, 0
  %39 = and i32 %38, 6
  %40 = icmp eq i32 %39, 6
  br i1 %40, label %41, label %60

41:                                               ; preds = %36
  %42 = or i32 %33, 64
  %43 = icmp ugt i32 %21, 6
  br i1 %43, label %44, label %60

44:                                               ; preds = %41
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid           \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0) #4, !srcloc !5
  %46 = extractvalue { i32, i32, i32, i32 } %45, 1
  %47 = and i32 %46, 32
  %48 = icmp eq i32 %47, 0
  %49 = or i32 %33, 192
  %50 = select i1 %48, i32 %42, i32 %49
  %51 = and i32 %46, -805109760
  %52 = icmp eq i32 %51, -805109760
  br i1 %52, label %53, label %60

53:                                               ; preds = %44
  %54 = tail call { i32, i32 } asm sideeffect ".byte 0x0f, 0x01, 0xd0\0A", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #4, !srcloc !4
  %55 = extractvalue { i32, i32 } %54, 0
  %56 = and i32 %55, 230
  %57 = icmp eq i32 %56, 230
  %58 = or i32 %50, 256
  %59 = select i1 %57, i32 %58, i32 %50
  br label %60

60:                                               ; preds = %53, %44, %41, %36, %23
  %61 = phi i32 [ %50, %44 ], [ %42, %41 ], [ %33, %36 ], [ %33, %23 ], [ %59, %53 ]
  %62 = and i32 %61, %19
  br label %63

63:                                               ; preds = %6, %18, %60
  %64 = phi i32 [ %8, %6 ], [ %62, %60 ], [ 0, %18 ]
  %65 = and i32 %64, 16
  %66 = icmp ne i32 %65, 0
  %67 = select i1 %66, void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict16x16_ssse3, void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict16x16_sse2
  store void (i8*, i32, i32, i32, i8*, i32)* %67, void (i8*, i32, i32, i32, i8*, i32)** @vp8_bilinear_predict16x16, align 8
  %68 = select i1 %66, void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict8x8_ssse3, void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict8x8_sse2
  store void (i8*, i32, i32, i32, i8*, i32)* %68, void (i8*, i32, i32, i32, i8*, i32)** @vp8_bilinear_predict8x8, align 8
  %69 = and i32 %64, 8
  %70 = icmp ne i32 %69, 0
  %71 = select i1 %70, void (i8*, i32, i8*, i32, i32)* @vp8_copy32xn_sse3, void (i8*, i32, i8*, i32, i32)* @vp8_copy32xn_sse2
  store void (i8*, i32, i8*, i32, i32)* %71, void (i8*, i32, i8*, i32, i32)** @vp8_copy32xn, align 8
  %72 = select i1 %66, void (%struct.block*, %struct.blockd*)* @vp8_fast_quantize_b_ssse3, void (%struct.block*, %struct.blockd*)* @vp8_fast_quantize_b_sse2
  store void (%struct.block*, %struct.blockd*)* %72, void (%struct.block*, %struct.blockd*)** @vp8_fast_quantize_b, align 8
  %73 = select i1 %70, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* @vp8_full_search_sadx3, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* @vp8_full_search_sad_c
  %74 = and i32 %64, 32
  %75 = icmp ne i32 %74, 0
  %76 = select i1 %75, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* @vp8_full_search_sadx8, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* %73
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* %76, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)** @vp8_full_search_sad, align 8
  %77 = select i1 %75, void (%struct.block*, %struct.blockd*)* @vp8_regular_quantize_b_sse4_1, void (%struct.block*, %struct.blockd*)* @vp8_regular_quantize_b_sse2
  store void (%struct.block*, %struct.blockd*)* %77, void (%struct.block*, %struct.blockd*)** @vp8_regular_quantize_b, align 8
  %78 = select i1 %66, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict16x16_ssse3, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict16x16_sse2
  store void (i8*, i32, i32, i32, i8*, i32)* %78, void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict16x16, align 8
  %79 = select i1 %66, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict4x4_ssse3, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict4x4_mmx
  store void (i8*, i32, i32, i32, i8*, i32)* %79, void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict4x4, align 8
  %80 = select i1 %66, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict8x4_ssse3, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict8x4_sse2
  store void (i8*, i32, i32, i32, i8*, i32)* %80, void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict8x4, align 8
  %81 = select i1 %66, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict8x8_ssse3, void (i8*, i32, i32, i32, i8*, i32)* @vp8_sixtap_predict8x8_sse2
  store void (i8*, i32, i32, i32, i8*, i32)* %81, void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict8x8, align 8
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #1

declare void @vp8_bilinear_predict16x16_sse2(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_bilinear_predict16x16_ssse3(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_bilinear_predict8x8_sse2(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_bilinear_predict8x8_ssse3(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_copy32xn_sse2(i8*, i32, i8*, i32, i32) #1

declare void @vp8_copy32xn_sse3(i8*, i32, i8*, i32, i32) #1

declare void @vp8_fast_quantize_b_sse2(%struct.block*, %struct.blockd*) #1

declare void @vp8_fast_quantize_b_ssse3(%struct.block*, %struct.blockd*) #1

declare i32 @vp8_full_search_sad_c(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*) #1

declare i32 @vp8_full_search_sadx3(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*) #1

declare i32 @vp8_full_search_sadx8(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*) #1

declare void @vp8_regular_quantize_b_sse2(%struct.block*, %struct.blockd*) #1

declare void @vp8_regular_quantize_b_sse4_1(%struct.block*, %struct.blockd*) #1

declare void @vp8_sixtap_predict16x16_sse2(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict16x16_ssse3(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict4x4_mmx(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict4x4_ssse3(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict8x4_sse2(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict8x4_ssse3(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict8x8_sse2(i8*, i32, i32, i32, i8*, i32) #1

declare void @vp8_sixtap_predict8x8_ssse3(i8*, i32, i32, i32, i8*, i32) #1

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 -2147175803, i32 -2147175784}
!3 = !{i32 -2147175582, i32 -2147175563}
!4 = !{i32 50141}
!5 = !{i32 -2147175177, i32 -2147175158}
