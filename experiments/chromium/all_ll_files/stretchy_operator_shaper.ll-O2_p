; ModuleID = '../../third_party/blink/renderer/platform/fonts/shaping/stretchy_operator_shaper.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/shaping/stretchy_operator_shaper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%union.anon.293 = type { %"struct.blink::OpenTypeMathStretchData::AssemblyParameters" }
%"struct.blink::OpenTypeMathStretchData::AssemblyParameters" = type { float, i32, i32, float, %"class.WTF::Vector.294" }
%"class.WTF::Vector.294" = type { %"class.WTF::VectorBuffer.295" }
%"class.WTF::VectorBuffer.295" = type { %"class.WTF::VectorBufferBase.296" }
%"class.WTF::VectorBufferBase.296" = type { %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"*, i32, i32 }
%"struct.blink::OpenTypeMathStretchData::GlyphPartRecord" = type { i16, float, float, float, i8 }
%"class.blink::ShapeResult" = type <{ %"class.WTF::RefCounted", float, %"class.blink::FloatRect", %"class.WTF::Vector", %class.scoped_refptr.40, %"class.std::__1::unique_ptr.41", i32, i32, i32, [4 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr.0*, i32, i32 }
%class.scoped_refptr.0 = type { %"struct.blink::ShapeResult::RunInfo"* }
%"struct.blink::ShapeResult::RunInfo" = type <{ %"class.WTF::RefCounted.1", [4 x i8], %"class.blink::ShapeResult::RunInfo::GlyphDataCollection", %class.scoped_refptr.10, %"class.WTF::Vector.35", i32, i32, float, i32, i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.1" = type { %"class.base::RefCounted.2" }
%"class.base::RefCounted.2" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::ShapeResult::RunInfo::GlyphDataCollection" = type { %"class.std::__1::unique_ptr", %"class.blink::ShapeResult::RunInfo::GlyphOffsetArray" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.blink::HarfBuzzRunGlyphData"* }
%"struct.blink::HarfBuzzRunGlyphData" = type { i32, float }
%"class.blink::ShapeResult::RunInfo::GlyphOffsetArray" = type <{ %"class.std::__1::unique_ptr.4", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.blink::ShapeResult::GlyphOffset"* }
%"class.blink::ShapeResult::GlyphOffset" = type { %"class.blink::FloatSize" }
%class.scoped_refptr.10 = type { %"class.blink::SimpleFontData"* }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr.26", %class.scoped_refptr.32, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.11" }>
%"class.WTF::RefCounted.11" = type { %"class.base::RefCounted.12" }
%"class.base::RefCounted.12" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.23, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.14" }
%"struct.std::__1::atomic.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl.17" }
%"struct.std::__1::__cxx_atomic_impl.17" = type { %"struct.std::__1::__cxx_atomic_base_impl.18" }
%"struct.std::__1::__cxx_atomic_base_impl.18" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.21 }
%union.anon.21 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.23 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type { %"class.WTF::RefCounted.24", %"class.blink::FontPlatformData"*, i64, %struct.hb_font_t*, %"struct.blink::HarfBuzzFontData"* }
%"class.WTF::RefCounted.24" = type { %"class.base::RefCounted.25" }
%"class.base::RefCounted.25" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_font_t = type opaque
%"struct.blink::HarfBuzzFontData" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.10, %class.scoped_refptr.10 }
%class.scoped_refptr.32 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.33", [4 x i8] }>
%"class.WTF::RefCounted.33" = type { %"class.base::RefCounted.34" }
%"class.base::RefCounted.34" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.WTF::Vector.35" = type { %"class.WTF::VectorBuffer.36" }
%"class.WTF::VectorBuffer.36" = type { %"class.WTF::VectorBufferBase.37" }
%"class.WTF::VectorBufferBase.37" = type { i32*, i32, i32 }
%class.scoped_refptr.40 = type { %"class.blink::SimpleFontData"* }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.blink::ShapeResult::CharacterPositionData"* }
%"class.blink::ShapeResult::CharacterPositionData" = type { %"class.WTF::Vector.44", i32, float }
%"class.WTF::Vector.44" = type { %"class.WTF::VectorBuffer.45" }
%"class.WTF::VectorBuffer.45" = type { %"class.WTF::VectorBufferBase.46" }
%"class.WTF::VectorBufferBase.46" = type { %"struct.blink::ShapeResultCharacterData"*, i32, i32 }
%"struct.blink::ShapeResultCharacterData" = type { float, i8 }
%"class.blink::StretchyOperatorShaper" = type <{ i16, i8, i8 }>
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.84 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.59, %class.scoped_refptr.67, %class.scoped_refptr.77, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.83 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.58 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.52 }
%class.scoped_refptr.52 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.53" }
%"struct.std::__1::atomic.53" = type { %"struct.std::__1::__atomic_base.54" }
%"struct.std::__1::__atomic_base.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i32 }
%class.scoped_refptr.58 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.282", [4 x i8] }>
%"class.WTF::RefCounted.282" = type { %"class.base::RefCounted.283" }
%"class.base::RefCounted.283" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.59 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.65", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector.60" }
%"class.WTF::Vector.60" = type { %"class.WTF::VectorBuffer.61" }
%"class.WTF::VectorBuffer.61" = type { %"class.WTF::VectorBufferBase.62" }
%"class.WTF::VectorBufferBase.62" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.65" = type { %"class.base::RefCounted.66" }
%"class.base::RefCounted.66" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.67 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.68", %"class.WTF::RefCounted.75", [4 x i8] }>
%"class.blink::FontSettings.68" = type { %"class.WTF::Vector.69" }
%"class.WTF::Vector.69" = type { %"class.WTF::VectorBuffer.70" }
%"class.WTF::VectorBuffer.70" = type { %"class.WTF::VectorBufferBase.71" }
%"class.WTF::VectorBufferBase.71" = type { %"class.blink::FontTagValuePair.72"*, i32, i32 }
%"class.blink::FontTagValuePair.72" = type { i32, float }
%"class.WTF::RefCounted.75" = type { %"class.base::RefCounted.76" }
%"class.base::RefCounted.76" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.77 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.78", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.80, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.78" = type { %"class.base::RefCounted.79" }
%"class.base::RefCounted.79" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.80 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.81", [4 x i8] }>
%"class.WTF::RefCounted.81" = type { %"class.base::RefCounted.82" }
%"class.base::RefCounted.82" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.83 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.84 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.85", %"class.WTF::Vector.87", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.85" = type { %"class.base::RefCounted.86" }
%"class.base::RefCounted.86" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.87" = type { %"class.WTF::VectorBuffer.88" }
%"class.WTF::VectorBuffer.88" = type { %"class.WTF::VectorBufferBase.89", [8 x i8] }
%"class.WTF::VectorBufferBase.89" = type { %class.scoped_refptr.90*, i32, i32 }
%class.scoped_refptr.90 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.11", [4 x i8] }>
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.93", i32, [4 x i8], %"class.std::__1::unique_ptr.231", %"class.std::__1::unique_ptr.231", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.241", %"class.std::__1::unique_ptr.247", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.259", %"class.std::__1::unique_ptr.265", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.272", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.126", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.211", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.129" = type { %"struct.std::__1::__atomic_base.130" }
%"struct.std::__1::__atomic_base.130" = type { %"struct.std::__1::__atomic_base.131" }
%"struct.std::__1::__atomic_base.131" = type { %"struct.std::__1::__cxx_atomic_impl.132" }
%"struct.std::__1::__cxx_atomic_impl.132" = type { %"struct.std::__1::__cxx_atomic_base_impl.133" }
%"struct.std::__1::__cxx_atomic_base_impl.133" = type { i64 }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::Worklist.140"* }
%"class.blink::Worklist.140" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::Worklist.147"* }
%"class.blink::Worklist.147" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::Worklist.154"* }
%"class.blink::Worklist.154" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::Worklist.161"* }
%"class.blink::Worklist.161" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::Worklist.168"* }
%"class.blink::Worklist.168" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::Worklist.175"* }
%"class.blink::Worklist.175" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.blink::Worklist.182"* }
%"class.blink::Worklist.182" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.189", %"class.std::__1::__compressed_pair.198", %"class.std::__1::__compressed_pair.203", %"class.std::__1::__compressed_pair.205", [4 x i8] }>
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191", %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { i64 }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { float }
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.214", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.223" }
%"class.WTF::Vector.223" = type { %"class.WTF::VectorBuffer.224" }
%"class.WTF::VectorBuffer.224" = type { %"class.WTF::VectorBufferBase.225" }
%"class.WTF::VectorBufferBase.225" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.239" }
%"class.WTF::VectorBuffer.239" = type { %"class.WTF::VectorBufferBase.240" }
%"class.WTF::VectorBufferBase.240" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.253" }
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.140"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.147"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.154"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.161"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.168"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.277" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.259" = type { %"class.std::__1::__compressed_pair.260" }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.261" }
%"struct.std::__1::__compressed_pair_elem.261" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.271 }
%class.scoped_refptr.271 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.272" = type { %"struct.std::__1::__atomic_base.273" }
%"struct.std::__1::__atomic_base.273" = type { %"struct.std::__1::__cxx_atomic_impl.274" }
%"struct.std::__1::__cxx_atomic_impl.274" = type { %"struct.std::__1::__cxx_atomic_base_impl.275" }
%"struct.std::__1::__cxx_atomic_base_impl.275" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.276 }
%class.scoped_refptr.276 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.14" }
%"struct.blink::StretchyOperatorShaper::Metrics" = type { float, float, float, float }
%"class.WTF::Vector.284" = type { %"class.WTF::VectorBuffer.285" }
%"class.WTF::VectorBuffer.285" = type { %"class.WTF::VectorBufferBase.286" }
%"class.WTF::VectorBufferBase.286" = type { i16*, i32, i32 }
%"class.absl::optional.289" = type { %"class.absl::optional_internal::optional_data.290" }
%"class.absl::optional_internal::optional_data.290" = type { %"class.absl::optional_internal::optional_data_base.291" }
%"class.absl::optional_internal::optional_data_base.291" = type { %"class.absl::optional_internal::optional_data_dtor_base.292" }
%"class.absl::optional_internal::optional_data_dtor_base.292" = type { i8, %union.anon.293 }
%"class.blink::UnicodeRangeSet" = type { %"class.WTF::RefCounted.300", %"class.WTF::Vector.302" }
%"class.WTF::RefCounted.300" = type { %"class.base::RefCounted.301" }
%"class.base::RefCounted.301" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.302" = type { %"class.WTF::VectorBuffer.303" }
%"class.WTF::VectorBuffer.303" = type { %"class.WTF::VectorBufferBase.304" }
%"class.WTF::VectorBufferBase.304" = type { %"struct.blink::UnicodeRange"*, i32, i32 }
%"struct.blink::UnicodeRange" = type { i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF6VectorIN5blink23OpenTypeMathStretchData15GlyphPartRecordELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@__const._ZNK5blink22StretchyOperatorShaper5ShapeEPKNS_4FontEfPNS0_7MetricsE.params = private unnamed_addr constant { { { { i8, [7 x i8], %union.anon.293 } } } } { { { { i8, [7 x i8], %union.anon.293 } } } { { { i8, [7 x i8], %union.anon.293 } } { { i8, [7 x i8], %union.anon.293 } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.293 { %"struct.blink::OpenTypeMathStretchData::AssemblyParameters" { float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, %"class.WTF::Vector.294" { %"class.WTF::VectorBuffer.295" { %"class.WTF::VectorBufferBase.296" { %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* inttoptr (i64 -6148914691236517206 to %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"*), i32 -1431655766, i32 -1431655766 } } } } } } } } }, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShapeResult"* @_ZNK5blink22StretchyOperatorShaper5ShapeEPKNS_4FontEfPNS0_7MetricsE(%"class.blink::StretchyOperatorShaper"* nocapture readonly, %"class.blink::Font"*, float, %"struct.blink::StretchyOperatorShaper::Metrics"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::Vector.294", align 8
  %6 = alloca float, align 4
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca %"class.WTF::Vector.284", align 8
  %11 = alloca %"class.absl::optional.289", align 8
  %12 = tail call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %1) #5
  %13 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %12, i64 0, i32 2
  %14 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %13, align 8
  %15 = icmp eq %"class.blink::SimpleFontData"* %14, null
  br i1 %15, label %16, label %19

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %1, i64 0, i32 0
  %18 = tail call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %12, %"class.blink::FontDescription"* dereferenceable(80) %17) #5
  store %"class.blink::SimpleFontData"* %18, %"class.blink::SimpleFontData"** %13, align 8
  br label %19

19:                                               ; preds = %4, %16
  %20 = phi %"class.blink::SimpleFontData"* [ %14, %4 ], [ %18, %16 ]
  %21 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %20, i64 0, i32 5
  %22 = tail call %"class.blink::HarfBuzzFace"* @_ZNK5blink16FontPlatformData15GetHarfBuzzFaceEv(%"class.blink::FontPlatformData"* %21) #5
  %23 = getelementptr inbounds %"class.blink::StretchyOperatorShaper", %"class.blink::StretchyOperatorShaper"* %0, i64 0, i32 0
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = tail call zeroext i16 @_ZNK5blink14SimpleFontData17GlyphForCharacterEi(%"class.blink::SimpleFontData"* %20, i32 %25) #5
  %27 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #5
  store float 0.000000e+00, float* %9, align 4
  %28 = icmp ne %"struct.blink::StretchyOperatorShaper::Metrics"* %3, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %19
  %30 = bitcast %"struct.blink::StretchyOperatorShaper::Metrics"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %30, i8 0, i64 16, i1 false)
  br label %31

31:                                               ; preds = %29, %19
  %32 = bitcast %"class.WTF::Vector.284"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #5
  %33 = getelementptr inbounds %"class.blink::StretchyOperatorShaper", %"class.blink::StretchyOperatorShaper"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 2
  call void @_ZN5blink19OpenTypeMathSupport22GetGlyphVariantRecordsEPKNS_12HarfBuzzFaceEtNS_23OpenTypeMathStretchData11StretchAxisE(%"class.WTF::Vector.284"* nonnull sret %10, %"class.blink::HarfBuzzFace"* %22, i16 zeroext %26, i8 zeroext %34) #5
  %35 = getelementptr inbounds %"class.WTF::Vector.284", %"class.WTF::Vector.284"* %10, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = getelementptr inbounds %"class.WTF::Vector.284", %"class.WTF::Vector.284"* %10, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %36, i64 %39
  %41 = icmp eq i32 %38, 0
  br i1 %41, label %86, label %42

42:                                               ; preds = %31
  %43 = bitcast float* %9 to i32*
  %44 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 0
  %45 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 1
  %46 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 2
  %47 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 3
  %48 = bitcast float* %47 to i32*
  br label %51

49:                                               ; preds = %75
  %50 = icmp eq i16* %82, %40
  br i1 %50, label %86, label %51

51:                                               ; preds = %42, %49
  %52 = phi i16* [ %36, %42 ], [ %82, %49 ]
  %53 = load i16, i16* %52, align 2
  %54 = call { <2 x float>, <2 x float> } @_ZNK5blink14SimpleFontData22PlatformBoundsForGlyphEt(%"class.blink::SimpleFontData"* %20, i16 zeroext %53) #5
  %55 = extractvalue { <2 x float>, <2 x float> } %54, 1
  br i1 %28, label %58, label %56

56:                                               ; preds = %51
  %57 = extractelement <2 x float> %55, i32 1
  br label %75

58:                                               ; preds = %51
  %59 = extractvalue { <2 x float>, <2 x float> } %54, 0
  %60 = load i16, i16* %52, align 2
  %61 = call i64 @_ZN5blink19OpenTypeMathSupport20MathItalicCorrectionEPKNS_12HarfBuzzFaceEt(%"class.blink::HarfBuzzFace"* %22, i16 zeroext %60) #5
  %62 = trunc i64 %61 to i8
  %63 = lshr i64 %61, 32
  %64 = trunc i64 %63 to i32
  %65 = bitcast i32 %64 to float
  %66 = icmp eq i8 %62, 0
  %67 = select i1 %66, float 0.000000e+00, float %65
  store float %67, float* %9, align 4
  %68 = load i16, i16* %52, align 2
  %69 = call float @_ZNK5blink14SimpleFontData21PlatformWidthForGlyphEt(%"class.blink::SimpleFontData"* %20, i16 zeroext %68) #5
  %70 = extractelement <2 x float> %59, i32 1
  %71 = fsub float -0.000000e+00, %70
  %72 = extractelement <2 x float> %55, i32 1
  %73 = fadd float %70, %72
  %74 = load i32, i32* %43, align 4
  store float %69, float* %44, align 4
  store float %71, float* %45, align 4
  store float %73, float* %46, align 4
  store i32 %74, i32* %48, align 4
  br label %75

75:                                               ; preds = %56, %58
  %76 = phi float [ %57, %56 ], [ %72, %58 ]
  %77 = load i8, i8* %33, align 2
  %78 = icmp eq i8 %77, 0
  %79 = extractelement <2 x float> %55, i32 0
  %80 = select i1 %78, float %79, float %76
  %81 = fcmp ult float %80, %2
  %82 = getelementptr inbounds i16, i16* %52, i64 1
  br i1 %81, label %49, label %83

83:                                               ; preds = %75
  %84 = call %"class.blink::ShapeResult"* @_ZN5blink11ShapeResult29CreateForStretchyMathOperatorEPKNS_4FontENS_13TextDirectionEtf(%"class.blink::Font"* %1, i8 zeroext 0, i16 zeroext %53, float %80) #5
  %85 = ptrtoint %"class.blink::ShapeResult"* %84 to i64
  br label %86

86:                                               ; preds = %49, %31, %83
  %87 = phi i64 [ %85, %83 ], [ undef, %31 ], [ undef, %49 ]
  %88 = phi i32 [ 1, %83 ], [ 2, %31 ], [ 2, %49 ]
  %89 = phi float [ %80, %83 ], [ 0xFFFFFFFFE0000000, %31 ], [ %80, %49 ]
  %90 = phi i16 [ %53, %83 ], [ -21846, %31 ], [ %53, %49 ]
  %91 = load i16*, i16** %35, align 8
  %92 = icmp eq i16* %91, null
  %93 = bitcast i16* %91 to i8*
  br i1 %92, label %99, label %94, !prof !2

94:                                               ; preds = %86
  %95 = load i32, i32* %37, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %98, label %97, !prof !3

97:                                               ; preds = %94
  store i32 0, i32* %37, align 4
  br label %98

98:                                               ; preds = %97, %94
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %93) #5
  store i16* null, i16** %35, align 8
  br label %99

99:                                               ; preds = %86, %98
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #5
  %100 = icmp eq i32 %88, 2
  br i1 %100, label %101, label %326

101:                                              ; preds = %99
  %102 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %102) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %102, i8* align 8 getelementptr inbounds ({ { { { i8, [7 x i8], %union.anon.293 } } } }, { { { { i8, [7 x i8], %union.anon.293 } } } }* @__const._ZNK5blink22StretchyOperatorShaper5ShapeEPKNS_4FontEfPNS0_7MetricsE.params, i64 0, i32 0, i32 0, i32 0, i32 0), i64 40, i1 false)
  %103 = load i8, i8* %33, align 2
  %104 = select i1 %28, float* %9, float* null
  %105 = bitcast %"class.WTF::Vector.294"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %105) #5, !noalias !4
  %106 = getelementptr inbounds %"class.WTF::Vector.294", %"class.WTF::Vector.294"* %5, i64 0, i32 0, i32 0, i32 0
  %107 = getelementptr inbounds %"class.WTF::Vector.294", %"class.WTF::Vector.294"* %5, i64 0, i32 0, i32 0, i32 1
  %108 = getelementptr inbounds %"class.WTF::Vector.294", %"class.WTF::Vector.294"* %5, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 -86, i64 16, i1 false) #5, !noalias !4
  call void @_ZN5blink19OpenTypeMathSupport19GetGlyphPartRecordsEPKNS_12HarfBuzzFaceEtNS_23OpenTypeMathStretchData11StretchAxisEPf(%"class.WTF::Vector.294"* nonnull sret %5, %"class.blink::HarfBuzzFace"* %22, i16 zeroext %26, i8 zeroext %103, float* %104) #5, !noalias !4
  %109 = load i32, i32* %108, align 4, !noalias !4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %101
  store i8 0, i8* %102, align 8, !alias.scope !4
  %112 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1
  %113 = bitcast %union.anon.293* %112 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 32, i1 false) #5, !alias.scope !4
  br label %258

114:                                              ; preds = %101
  %115 = call %struct.hb_font_t* @_ZNK5blink12HarfBuzzFace13GetScaledFontE13scoped_refptrINS_15UnicodeRangeSetEENS0_23VerticalLayoutCallbacksE(%"class.blink::HarfBuzzFace"* %22, %"class.blink::UnicodeRangeSet"* null, i32 1) #5, !noalias !4
  %116 = icmp eq i8 %103, 0
  %117 = select i1 %116, i32 4, i32 7
  %118 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %118)
  %119 = call i32 @hb_ot_math_get_min_connector_overlap(%struct.hb_font_t* %115, i32 %117) #5, !noalias !4
  %120 = sitofp i32 %119 to float
  %121 = fmul float %120, 0x3EF0000000000000
  store float %121, float* %6, align 4, !noalias !4
  %122 = load %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"*, %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"** %106, align 8, !noalias !4
  %123 = load i32, i32* %108, align 4, !noalias !4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %122, i64 %124
  %126 = icmp eq i32 %123, 0
  br i1 %126, label %190, label %133

127:                                              ; preds = %182
  %128 = bitcast float %183 to i32
  %129 = uitofp i32 %167 to float
  %130 = fmul float %121, %129
  %131 = fsub float %169, %130
  %132 = icmp eq i32 %167, 0
  br i1 %132, label %190, label %186

133:                                              ; preds = %114, %182
  %134 = phi float [ %183, %182 ], [ 0x47EFFFFFE0000000, %114 ]
  %135 = phi %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* [ %184, %182 ], [ %122, %114 ]
  %136 = phi float [ %166, %182 ], [ 0.000000e+00, %114 ]
  %137 = phi i32 [ %167, %182 ], [ 0, %114 ]
  %138 = phi i32 [ %168, %182 ], [ 0, %114 ]
  %139 = phi float [ %169, %182 ], [ 0.000000e+00, %114 ]
  %140 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, i64 0, i32 4
  %141 = load i8, i8* %140, align 4, !range !7, !noalias !4
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %148, label %143

143:                                              ; preds = %133
  %144 = add i32 %137, 1
  %145 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, i64 0, i32 3
  %146 = load float, float* %145, align 4, !noalias !4
  %147 = fadd float %139, %146
  br label %155

148:                                              ; preds = %133
  %149 = add i32 %138, 1
  %150 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, i64 0, i32 3
  %151 = load float, float* %150, align 4, !noalias !4
  %152 = fadd float %136, %151
  %153 = call dereferenceable(20) %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* @_ZN3WTF6VectorIN5blink23OpenTypeMathStretchData15GlyphPartRecordELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.294"* nonnull %5, i32 0) #5, !noalias !4
  %154 = icmp eq %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, %153
  br i1 %154, label %164, label %155

155:                                              ; preds = %148, %143
  %156 = phi float [ %152, %148 ], [ %136, %143 ]
  %157 = phi i32 [ %137, %148 ], [ %144, %143 ]
  %158 = phi i32 [ %149, %148 ], [ %138, %143 ]
  %159 = phi float [ %139, %148 ], [ %147, %143 ]
  %160 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, i64 0, i32 1
  %161 = load float, float* %160, align 4, !noalias !4
  %162 = fcmp olt float %161, %134
  %163 = select i1 %162, float %161, float %134
  br label %164

164:                                              ; preds = %155, %148
  %165 = phi float [ %134, %148 ], [ %163, %155 ]
  %166 = phi float [ %152, %148 ], [ %156, %155 ]
  %167 = phi i32 [ %137, %148 ], [ %157, %155 ]
  %168 = phi i32 [ %149, %148 ], [ %158, %155 ]
  %169 = phi float [ %139, %148 ], [ %159, %155 ]
  %170 = load i8, i8* %140, align 4, !range !7, !noalias !4
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %172, label %177

172:                                              ; preds = %164
  %173 = load i32, i32* %108, align 4, !noalias !4
  %174 = add i32 %173, -1
  %175 = call dereferenceable(20) %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* @_ZN3WTF6VectorIN5blink23OpenTypeMathStretchData15GlyphPartRecordELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.294"* nonnull %5, i32 %174) #5, !noalias !4
  %176 = icmp eq %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, %175
  br i1 %176, label %182, label %177

177:                                              ; preds = %172, %164
  %178 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, i64 0, i32 2
  %179 = load float, float* %178, align 4, !noalias !4
  %180 = fcmp olt float %179, %165
  %181 = select i1 %180, float %179, float %165
  br label %182

182:                                              ; preds = %177, %172
  %183 = phi float [ %165, %172 ], [ %181, %177 ]
  %184 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %135, i64 1
  %185 = icmp eq %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %184, %125
  br i1 %185, label %127, label %133

186:                                              ; preds = %127
  %187 = fcmp ogt float %121, %183
  %188 = fcmp ole float %131, 0.000000e+00
  %189 = or i1 %188, %187
  br i1 %189, label %190, label %193

190:                                              ; preds = %186, %127, %114
  store i8 0, i8* %102, align 8, !alias.scope !4
  %191 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1
  %192 = bitcast %union.anon.293* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %192, i8 0, i64 32, i1 false) #5, !alias.scope !4
  br label %256

193:                                              ; preds = %186
  %194 = fsub float %2, %166
  %195 = add i32 %168, -1
  %196 = uitofp i32 %195 to float
  %197 = fmul float %121, %196
  %198 = fadd float %194, %197
  %199 = fdiv float %198, %131
  %200 = call float @llvm.ceil.f32(float %199) #5
  %201 = fcmp olt float %200, 0.000000e+00
  %202 = select i1 %201, float 0.000000e+00, float %200
  %203 = fptoui float %202 to i32
  %204 = sub i32 32768, %168
  %205 = udiv i32 %204, %167
  %206 = icmp ult i32 %205, %203
  %207 = select i1 %206, i32 %205, i32 %203
  %208 = mul i32 %207, %167
  %209 = add i32 %208, %168
  %210 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %210)
  %211 = bitcast i32* %7 to float*
  store float %183, float* %211, align 4, !noalias !4
  %212 = icmp ugt i32 %209, 1
  br i1 %212, label %219, label %213

213:                                              ; preds = %193
  %214 = uitofp i32 %207 to float
  %215 = fmul float %169, %214
  %216 = fadd float %166, %215
  %217 = add nsw i32 %209, -1
  %218 = uitofp i32 %217 to float
  br label %236

219:                                              ; preds = %193
  %220 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %220)
  %221 = uitofp i32 %207 to float
  %222 = fmul float %169, %221
  %223 = fadd float %166, %222
  %224 = fsub float %223, %2
  %225 = add i32 %209, -1
  %226 = uitofp i32 %225 to float
  %227 = fdiv float %224, %226
  store float %227, float* %8, align 4, !noalias !4
  %228 = fcmp olt float %227, %183
  %229 = select i1 %228, float* %8, float* %211
  %230 = load float, float* %229, align 4, !noalias !4
  %231 = fcmp olt float %121, %230
  %232 = select i1 %231, float* %229, float* %6
  %233 = bitcast float* %232 to i32*
  %234 = load i32, i32* %233, align 4, !noalias !4
  store i32 %234, i32* %7, align 4, !noalias !4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %220)
  %235 = bitcast i32 %234 to float
  br label %236

236:                                              ; preds = %219, %213
  %237 = phi float [ %218, %213 ], [ %226, %219 ]
  %238 = phi float [ %216, %213 ], [ %223, %219 ]
  %239 = phi float [ %183, %213 ], [ %235, %219 ]
  %240 = phi i32 [ %128, %213 ], [ %234, %219 ]
  %241 = fmul float %237, %239
  %242 = fsub float %238, %241
  %243 = bitcast %"class.WTF::Vector.294"* %5 to i64*
  %244 = load i64, i64* %243, align 8, !noalias !4
  store atomic i64 0, i64* %243 monotonic, align 8, !noalias !4
  %245 = load i32, i32* %107, align 8, !noalias !4
  store i32 0, i32* %107, align 8, !noalias !4
  %246 = load i32, i32* %108, align 4, !noalias !4
  store i32 0, i32* %108, align 4, !noalias !4
  store i8 1, i8* %102, align 8, !alias.scope !4
  %247 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1
  %248 = bitcast %union.anon.293* %247 to i32*
  store i32 %240, i32* %248, align 8, !alias.scope !4
  %249 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i32 %207, i32* %249, align 4, !alias.scope !4
  %250 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %209, i32* %250, align 8, !alias.scope !4
  %251 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  store float %242, float* %251, align 4, !alias.scope !4
  %252 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %253 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 1
  %254 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 2
  %255 = bitcast %"class.WTF::Vector.294"* %252 to i64*
  store atomic i64 %244, i64* %255 monotonic, align 8, !alias.scope !4
  store i32 %245, i32* %253, align 8, !alias.scope !4
  store i32 %246, i32* %254, align 4, !alias.scope !4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %210)
  br label %256

256:                                              ; preds = %236, %190
  %257 = phi i8 [ 1, %236 ], [ 0, %190 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %118)
  br label %258

258:                                              ; preds = %256, %111
  %259 = phi i8 [ %257, %256 ], [ 0, %111 ]
  %260 = load %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"*, %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"** %106, align 8, !noalias !4
  %261 = icmp eq %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %260, null
  %262 = bitcast %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %260 to i8*
  br i1 %261, label %269, label %263, !prof !2

263:                                              ; preds = %258
  %264 = load i32, i32* %108, align 4, !noalias !4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %267, label %266, !prof !3

266:                                              ; preds = %263
  store i32 0, i32* %108, align 4, !noalias !4
  br label %267

267:                                              ; preds = %266, %263
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %262) #5, !noalias !4
  store %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* null, %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"** %106, align 8, !noalias !4
  %268 = load i8, i8* %102, align 8, !range !7
  br label %269

269:                                              ; preds = %258, %267
  %270 = phi i8 [ %259, %258 ], [ %268, %267 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %105) #5, !noalias !4
  %271 = icmp eq i8 %270, 0
  br i1 %271, label %272, label %275

272:                                              ; preds = %269
  %273 = call %"class.blink::ShapeResult"* @_ZN5blink11ShapeResult29CreateForStretchyMathOperatorEPKNS_4FontENS_13TextDirectionEtf(%"class.blink::Font"* %1, i8 zeroext 0, i16 zeroext %90, float %89) #5
  %274 = ptrtoint %"class.blink::ShapeResult"* %273 to i64
  br label %309

275:                                              ; preds = %269
  %276 = load i8, i8* %33, align 2
  %277 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %278 = call %"class.blink::ShapeResult"* @_ZN5blink11ShapeResult29CreateForStretchyMathOperatorEPKNS_4FontENS_13TextDirectionENS_23OpenTypeMathStretchData11StretchAxisERKNS5_18AssemblyParametersE(%"class.blink::Font"* %1, i8 zeroext 0, i8 zeroext %276, %"struct.blink::OpenTypeMathStretchData::AssemblyParameters"* dereferenceable(32) %277) #5
  %279 = ptrtoint %"class.blink::ShapeResult"* %278 to i64
  br i1 %28, label %280, label %309

280:                                              ; preds = %275
  %281 = call { <2 x float>, <2 x float> } @_ZNK5blink11ShapeResult16ComputeInkBoundsEv(%"class.blink::ShapeResult"* %278) #5
  %282 = extractvalue { <2 x float>, <2 x float> } %281, 1
  %283 = load i8, i8* %33, align 2
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %285, label %299

285:                                              ; preds = %280
  %286 = extractvalue { <2 x float>, <2 x float> } %281, 0
  %287 = extractelement <2 x float> %282, i32 0
  %288 = extractelement <2 x float> %286, i32 1
  %289 = fsub float -0.000000e+00, %288
  %290 = extractelement <2 x float> %282, i32 1
  %291 = fadd float %288, %290
  %292 = bitcast float* %9 to i32*
  %293 = load i32, i32* %292, align 4
  %294 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 0
  store float %287, float* %294, align 4
  %295 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 1
  store float %289, float* %295, align 4
  %296 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 2
  store float %291, float* %296, align 4
  %297 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 3
  %298 = bitcast float* %297 to i32*
  store i32 %293, i32* %298, align 4
  br label %309

299:                                              ; preds = %280
  %300 = extractelement <2 x float> %282, i32 1
  %301 = extractelement <2 x float> %282, i32 0
  %302 = bitcast float* %9 to i32*
  %303 = load i32, i32* %302, align 4
  %304 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 0
  store float %300, float* %304, align 4
  %305 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 1
  store float %301, float* %305, align 4
  %306 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 2
  store float 0.000000e+00, float* %306, align 4
  %307 = getelementptr inbounds %"struct.blink::StretchyOperatorShaper::Metrics", %"struct.blink::StretchyOperatorShaper::Metrics"* %3, i64 0, i32 3
  %308 = bitcast float* %307 to i32*
  store i32 %303, i32* %308, align 4
  br label %309

309:                                              ; preds = %285, %299, %275, %272
  %310 = phi i64 [ %274, %272 ], [ %279, %275 ], [ %279, %299 ], [ %279, %285 ]
  %311 = load i8, i8* %102, align 8, !range !7
  %312 = icmp eq i8 %311, 0
  br i1 %312, label %325, label %313

313:                                              ; preds = %309
  %314 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0
  %315 = load %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"*, %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"** %314, align 8
  %316 = icmp eq %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %315, null
  %317 = bitcast %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %315 to i8*
  br i1 %316, label %324, label %318, !prof !2

318:                                              ; preds = %313
  %319 = getelementptr inbounds %"class.absl::optional.289", %"class.absl::optional.289"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 2
  %320 = load i32, i32* %319, align 4
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %323, label %322, !prof !3

322:                                              ; preds = %318
  store i32 0, i32* %319, align 4
  br label %323

323:                                              ; preds = %322, %318
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %317) #5
  store %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* null, %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"** %314, align 8
  br label %324

324:                                              ; preds = %323, %313
  store i8 0, i8* %102, align 8
  br label %325

325:                                              ; preds = %309, %324
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %102) #5
  br label %326

326:                                              ; preds = %99, %325
  %327 = phi i64 [ %310, %325 ], [ %87, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #5
  %328 = inttoptr i64 %327 to %"class.blink::ShapeResult"*
  ret %"class.blink::ShapeResult"* %328
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.blink::HarfBuzzFace"* @_ZNK5blink16FontPlatformData15GetHarfBuzzFaceEv(%"class.blink::FontPlatformData"*) local_unnamed_addr #2

declare zeroext i16 @_ZNK5blink14SimpleFontData17GlyphForCharacterEi(%"class.blink::SimpleFontData"*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink19OpenTypeMathSupport22GetGlyphVariantRecordsEPKNS_12HarfBuzzFaceEtNS_23OpenTypeMathStretchData11StretchAxisE(%"class.WTF::Vector.284"* sret, %"class.blink::HarfBuzzFace"*, i16 zeroext, i8 zeroext) local_unnamed_addr #2

declare i64 @_ZN5blink19OpenTypeMathSupport20MathItalicCorrectionEPKNS_12HarfBuzzFaceEt(%"class.blink::HarfBuzzFace"*, i16 zeroext) local_unnamed_addr #2

declare %"class.blink::ShapeResult"* @_ZN5blink11ShapeResult29CreateForStretchyMathOperatorEPKNS_4FontENS_13TextDirectionEtf(%"class.blink::Font"*, i8 zeroext, i16 zeroext, float) local_unnamed_addr #2

declare %"class.blink::ShapeResult"* @_ZN5blink11ShapeResult29CreateForStretchyMathOperatorEPKNS_4FontENS_13TextDirectionENS_23OpenTypeMathStretchData11StretchAxisERKNS5_18AssemblyParametersE(%"class.blink::Font"*, i8 zeroext, i8 zeroext, %"struct.blink::OpenTypeMathStretchData::AssemblyParameters"* dereferenceable(32)) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK5blink11ShapeResult16ComputeInkBoundsEv(%"class.blink::ShapeResult"*) local_unnamed_addr #2

declare %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"*) local_unnamed_addr #2

declare %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"*, %"class.blink::FontDescription"* dereferenceable(80)) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK5blink14SimpleFontData22PlatformBoundsForGlyphEt(%"class.blink::SimpleFontData"*, i16 zeroext) local_unnamed_addr #2

declare float @_ZNK5blink14SimpleFontData21PlatformWidthForGlyphEt(%"class.blink::SimpleFontData"*, i16 zeroext) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZN5blink19OpenTypeMathSupport19GetGlyphPartRecordsEPKNS_12HarfBuzzFaceEtNS_23OpenTypeMathStretchData11StretchAxisEPf(%"class.WTF::Vector.294"* sret, %"class.blink::HarfBuzzFace"*, i16 zeroext, i8 zeroext, float*) local_unnamed_addr #2

declare %struct.hb_font_t* @_ZNK5blink12HarfBuzzFace13GetScaledFontE13scoped_refptrINS_15UnicodeRangeSetEENS0_23VerticalLayoutCallbacksE(%"class.blink::HarfBuzzFace"*, %"class.blink::UnicodeRangeSet"*, i32) local_unnamed_addr #2

declare i32 @hb_ot_math_get_min_connector_overlap(%struct.hb_font_t*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(20) %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* @_ZN3WTF6VectorIN5blink23OpenTypeMathStretchData15GlyphPartRecordELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.294"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.294", %"class.WTF::Vector.294"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #5
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #5
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  %23 = getelementptr inbounds %"class.WTF::Vector.294", %"class.WTF::Vector.294"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"*, %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord", %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %24, i64 %25
  ret %"struct.blink::OpenTypeMathStretchData::GlyphPartRecord"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN5blink12_GLOBAL__N_121GetAssemblyParametersEPKNS_12HarfBuzzFaceEtNS_23OpenTypeMathStretchData11StretchAxisEfPf: argument 0"}
!6 = distinct !{!6, !"_ZN5blink12_GLOBAL__N_121GetAssemblyParametersEPKNS_12HarfBuzzFaceEtNS_23OpenTypeMathStretchData11StretchAxisEfPf"}
!7 = !{i8 0, i8 2}
