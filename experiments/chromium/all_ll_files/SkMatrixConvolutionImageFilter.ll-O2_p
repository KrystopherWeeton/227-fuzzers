; ModuleID = '../../third_party/skia/src/effects/imagefilters/SkMatrixConvolutionImageFilter.cpp'
source_filename = "../../third_party/skia/src/effects/imagefilters/SkMatrixConvolutionImageFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%"class.SkImageFilter_Base::CropRect" = type { %struct.SkRect, i32 }
%class.SkSTArray.140 = type { %class.SkAlignedSTStorage.141, %class.SkTArray.142 }
%class.SkAlignedSTStorage.141 = type { [16 x i8] }
%class.SkTArray.142 = type { %class.sk_sp*, i64 }
%class.sk_sp = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkISize = type { i32, i32 }
%struct.SkIPoint = type { i32, i32 }
%"struct.SkImageFilters::CropRect" = type { %struct.SkRect }
%class.SkImageFilter_Base = type <{ %class.SkImageFilter.base, [4 x i8], %class.SkAutoSTArray, i8, [3 x i8], %"class.SkImageFilter_Base::CropRect", i32, [4 x i8] }>
%class.SkImageFilter.base = type { %class.SkFlattenable.base }
%class.SkAutoSTArray = type { i32, %class.sk_sp*, [16 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.sk_sp.15 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.2*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.15*, %class.SkReadBuffer*)* }
%class.sk_sp.2 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkDeserialProcs = type { void (%class.sk_sp.8*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.13*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.2*, i8*, i64, i8*)*, i8* }
%class.sk_sp.8 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.9", [7 x i8] }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%class.sk_sp.13 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.14, i32, i32 }
%class.sk_sp.14 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%"class.SkImageFilter_Base::Common" = type { %"class.SkImageFilter_Base::CropRect", %class.SkSTArray.140 }
%class.SkAutoSTArray.143 = type { i32, float*, [64 x i8] }
%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter" = type <{ %class.SkImageFilter_Base.base, %struct.SkISize, [4 x i8], float*, float, float, %struct.SkIPoint, i32, i8, [3 x i8] }>
%class.SkImageFilter_Base.base = type <{ %class.SkImageFilter.base, [4 x i8], %class.SkAutoSTArray, i8, [3 x i8], %"class.SkImageFilter_Base::CropRect", i32 }>
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.16*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.16 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.17, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.17 = type { %"struct.std::__1::atomic" }
%class.sk_sp.18 = type { %class.SkSpecialImage* }
%class.SkSpecialImage = type { %class.SkRefCnt.base, %class.SkSurfaceProps, %struct.SkIRect, i32 }
%class.SkSurfaceProps = type { i32, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.skif::Context" = type { %"class.skif::Mapping", %"class.skif::LayerSpace", %class.SkImageFilterCache*, i32, %class.SkColorSpace*, %"class.skif::FilterResult" }
%"class.skif::Mapping" = type { %class.SkMatrix, %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%"class.skif::LayerSpace" = type { %struct.SkIRect }
%class.SkImageFilterCache = type opaque
%"class.skif::FilterResult" = type { %class.sk_sp.18, %"class.skif::LayerSpace.19" }
%"class.skif::LayerSpace.19" = type { %struct.SkIPoint }
%class.GrSurfaceProxyView = type <{ %class.sk_sp.88, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.88 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt.89, %class.sk_sp.90, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.126" }
%class.SkNVRefCnt.89 = type { %"struct.std::__1::atomic" }
%class.sk_sp.90 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.91 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.16, i8* }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.91 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.92, void (i8*)*, i8* }
%class.SkNVRefCnt.92 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.93, i32, [4 x i8] }
%union.anon.93 = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.90, i32, i8, [3 x i8] }>
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.123, %class.sk_sp.125, %class.sk_sp.125 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.103, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.114, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.95 }
%class.SkTHashTable.95 = type { i32, i32, %class.SkAutoTArray.96 }
%class.SkAutoTArray.96 = type { %"class.std::__1::unique_ptr.97" }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.103 = type { %class.SkTHashTable.104 }
%class.SkTHashTable.104 = type { i32, i32, %class.SkAutoTArray.105 }
%class.SkAutoTArray.105 = type { %"class.std::__1::unique_ptr.106" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.112, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.112 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.113, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.113 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.114 = type { %class.SkTHashTable.115 }
%class.SkTHashTable.115 = type { i32, i32, %class.SkAutoTArray.116 }
%class.SkAutoTArray.116 = type { %"class.std::__1::unique_ptr.117" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.GrSingleOwner = type { i8 }
%class.sk_sp.123 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.124, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.124 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.125 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.126" = type { %"struct.std::__1::__atomic_base.127" }
%"struct.std::__1::__atomic_base.127" = type { %"struct.std::__1::__atomic_base.128" }
%"struct.std::__1::__atomic_base.128" = type { %"struct.std::__1::__cxx_atomic_impl.129" }
%"struct.std::__1::__cxx_atomic_impl.129" = type { %"struct.std::__1::__cxx_atomic_base_impl.130" }
%"struct.std::__1::__cxx_atomic_base_impl.130" = type { i64 }
%class.GrSwizzle = type { i16 }
%class.SkBitmap = type { %class.sk_sp.138, %class.SkPixmap, %class.sk_sp.139 }
%class.sk_sp.138 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.139 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.21", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.82" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.20 }
%class.sk_sp.20 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap.32, %class.SkTHashMap.42, %class.SkTArray.53, %class.SkTArray.28, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.24"*, i64 }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.28, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.27 }
%class.sk_sp.27 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap.32 = type { %class.SkTHashTable.33 }
%class.SkTHashTable.33 = type { i32, i32, %class.SkAutoTArray.34 }
%class.SkAutoTArray.34 = type { %"class.std::__1::unique_ptr.35" }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.38" }
%"struct.std::__1::pair.38" = type { i32, i32 }
%class.SkTHashMap.42 = type { %class.SkTHashTable.43 }
%class.SkTHashTable.43 = type { i32, i32, %class.SkAutoTArray.44 }
%class.SkAutoTArray.44 = type { %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.48" }
%"struct.std::__1::pair.48" = type { i32, %class.SkTArray.49* }
%class.SkTArray.49 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.53 = type { %"class.std::__1::unique_ptr.54"*, i64 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.49, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%class.SkTArray.28 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.72 }
%class.SkFibBlockSizes.72 = type { i32 }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %class.GrProxyProvider* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.134 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.134 = type { %"class.std::__1::unique_ptr.131"*, i64 }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK13SkImageFilter18getFlattenableTypeEv = comdat any

$_ZNK18SkImageFilter_Base19onIsColorFilterNodeEPP13SkColorFilter = comdat any

$_ZNK18SkImageFilter_Base21onCanHandleComplexCTMEv = comdat any

@.str = private unnamed_addr constant [31 x i8] c"SkMatrixConvolutionImageFilter\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"SkMatrixConvolutionImageFilterImpl\00", align 1
@_ZN4skifL11kNoCropRectE = internal unnamed_addr constant %struct.SkRect { float 0xFFF0000000000000, float 0xFFF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000 }, align 4
@_ZTVN12_GLOBAL__N_130SkMatrixConvolutionImageFilterE = internal unnamed_addr constant { [19 x i8*] } { [19 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*)* @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilterD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*)* @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilterD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.15*, %class.SkReadBuffer*)* (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter10getFactoryEv to i8*), i8* bitcast (i8* (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter11getTypeNameEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*, %class.SkWriteBuffer*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkImageFilter*)* @_ZNK13SkImageFilter18getFlattenableTypeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%class.SkImageFilter*, %struct.SkRect*)* @_ZNK13SkImageFilter17computeFastBoundsERK6SkRect to i8*), i8* bitcast (void (%class.sk_sp.18*, %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*, %"class.skif::Context"*, %struct.SkIPoint*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter13onFilterImageERKN4skif7ContextEP8SkIPoint to i8*), i8* bitcast ({ i64, i64 } (%class.SkImageFilter_Base*, %struct.SkIRect*, %class.SkMatrix*, i32, %struct.SkIRect*)* @_ZNK18SkImageFilter_Base14onFilterBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS1_ to i8*), i8* bitcast ({ i64, i64 } (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*, %struct.SkIRect*, %class.SkMatrix*, i32, %struct.SkIRect*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18onFilterNodeBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS2_ to i8*), i8* bitcast (i1 (%class.SkImageFilter_Base*, %class.SkColorFilter**)* @_ZNK18SkImageFilter_Base19onIsColorFilterNodeEPP13SkColorFilter to i8*), i8* bitcast (i1 (%class.SkImageFilter_Base*)* @_ZNK18SkImageFilter_Base21onCanHandleComplexCTMEv to i8*), i8* bitcast (i1 (%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter23affectsTransparentBlackEv to i8*), i8* bitcast (void ()* @_ZNK18SkImageFilter_Base13onFilterImageERKN4skif7ContextE to i8*), i8* bitcast ({ i64, i64 } (%class.SkImageFilter_Base*, %"class.skif::Mapping"*, %"class.skif::LayerSpace"*, %"class.skif::LayerSpace"*, i1)* @_ZNK18SkImageFilter_Base21onGetInputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEES8_NS_13VisitChildrenE to i8*), i8* bitcast ({ i64, i64 } (%class.SkImageFilter_Base*, %"class.skif::Mapping"*, %"class.skif::LayerSpace"*)* @_ZNK18SkImageFilter_Base22onGetOutputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEE to i8*)] }, align 8
@__const._ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilter10CreateProcER12SkReadBuffer.common = private unnamed_addr constant { %"class.SkImageFilter_Base::CropRect", [4 x i8], %class.SkSTArray.140 } { %"class.SkImageFilter_Base::CropRect" { %struct.SkRect { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA", %class.SkSTArray.140 { %class.SkAlignedSTStorage.141 { [16 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }, %class.SkTArray.142 { %class.sk_sp* inttoptr (i64 -6148914691236517206 to %class.sk_sp*), i64 -6148914691236517206 } } }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14SkImageFilters17MatrixConvolutionERK7SkISizePKfffRK8SkIPoint10SkTileModeb5sk_spI13SkImageFilterERKNS_8CropRectE(%class.sk_sp* noalias nocapture sret, %struct.SkISize* nocapture readonly dereferenceable(8), float* readonly, float, float, %struct.SkIPoint* nocapture readonly dereferenceable(8), i32, i1 zeroext, %class.sk_sp* nocapture, %"struct.SkImageFilters::CropRect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %11 = alloca %class.sk_sp, align 8
  %12 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 1
  br i1 %18, label %19, label %21

19:                                               ; preds = %15, %10
  %20 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkImageFilter* null, %class.SkImageFilter** %20, align 8
  br label %114

21:                                               ; preds = %15
  %22 = udiv i32 536870911, %13
  %23 = icmp slt i32 %22, %17
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkImageFilter* null, %class.SkImageFilter** %25, align 8
  br label %114

26:                                               ; preds = %21
  %27 = icmp eq float* %2, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkImageFilter* null, %class.SkImageFilter** %29, align 8
  br label %114

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %5, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp sgt i32 %32, -1
  %34 = icmp slt i32 %32, %13
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %42

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %5, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, -1
  %40 = icmp slt i32 %38, %17
  %41 = and i1 %39, %40
  br i1 %41, label %44, label %42

42:                                               ; preds = %36, %30
  %43 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkImageFilter* null, %class.SkImageFilter** %43, align 8
  br label %114

44:                                               ; preds = %36
  %45 = tail call i8* @_Znwm(i64 120) #10
  %46 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %8, i64 0, i32 0
  %47 = bitcast %class.sk_sp* %8 to i64*
  %48 = load i64, i64* %47, align 8
  store %class.SkImageFilter* null, %class.SkImageFilter** %46, align 8
  %49 = bitcast %class.sk_sp* %11 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %9, i64 0, i32 0
  %51 = getelementptr inbounds %"struct.SkImageFilters::CropRect", %"struct.SkImageFilters::CropRect"* %9, i64 0, i32 0, i32 0
  %52 = load float, float* %51, align 4
  %53 = fcmp une float %52, 0xFFF0000000000000
  br i1 %53, label %66, label %54

54:                                               ; preds = %44
  %55 = getelementptr inbounds float, float* %51, i64 1
  %56 = load float, float* %55, align 4
  %57 = fcmp une float %56, 0xFFF0000000000000
  br i1 %57, label %66, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds float, float* %51, i64 2
  %60 = load float, float* %59, align 4
  %61 = fcmp une float %60, 0x7FF0000000000000
  br i1 %61, label %66, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds float, float* %51, i64 3
  %64 = load float, float* %63, align 4
  %65 = fcmp une float %64, 0x7FF0000000000000
  br i1 %65, label %66, label %67

66:                                               ; preds = %62, %58, %54, %44
  br label %67

67:                                               ; preds = %62, %66
  %68 = phi %struct.SkRect* [ %50, %66 ], [ null, %62 ]
  %69 = zext i1 %7 to i8
  %70 = bitcast i8* %45 to %class.SkImageFilter_Base*
  call void @_ZN18SkImageFilter_BaseC2EPK5sk_spI13SkImageFilterEiPK6SkRect(%class.SkImageFilter_Base* nonnull %70, %class.sk_sp* nonnull %11, i32 1, %struct.SkRect* %68) #11
  %71 = bitcast i8* %45 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN12_GLOBAL__N_130SkMatrixConvolutionImageFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %71, align 8
  %72 = getelementptr inbounds i8, i8* %45, i64 76
  %73 = bitcast %struct.SkISize* %1 to i64*
  %74 = bitcast i8* %72 to i64*
  %75 = load i64, i64* %73, align 4
  store i64 %75, i64* %74, align 4
  %76 = getelementptr inbounds i8, i8* %45, i64 96
  %77 = bitcast i8* %76 to float*
  store float %3, float* %77, align 8
  %78 = getelementptr inbounds i8, i8* %45, i64 100
  %79 = bitcast i8* %78 to float*
  store float %4, float* %79, align 4
  %80 = getelementptr inbounds i8, i8* %45, i64 104
  %81 = bitcast %struct.SkIPoint* %5 to i64*
  %82 = bitcast i8* %80 to i64*
  %83 = load i64, i64* %81, align 4
  store i64 %83, i64* %82, align 8
  %84 = getelementptr inbounds i8, i8* %45, i64 112
  %85 = bitcast i8* %84 to i32*
  store i32 %6, i32* %85, align 8
  %86 = getelementptr inbounds i8, i8* %45, i64 116
  store i8 %69, i8* %86, align 4
  %87 = shl i64 %75, 32
  %88 = ashr exact i64 %87, 32
  %89 = ashr i64 %75, 32
  %90 = mul nsw i64 %88, %89
  %91 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %90, i64 4) #11
  %92 = extractvalue { i64, i1 } %91, 1
  %93 = extractvalue { i64, i1 } %91, 0
  %94 = select i1 %92, i64 -1, i64 %93
  %95 = call i8* @_Znam(i64 %94) #10
  %96 = getelementptr inbounds i8, i8* %45, i64 88
  %97 = bitcast i8* %96 to i8**
  store i8* %95, i8** %97, align 8
  %98 = bitcast float* %2 to i8*
  %99 = shl i64 %90, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %95, i8* nonnull align 4 %98, i64 %99, i1 false) #11
  %100 = bitcast %class.sk_sp* %0 to i8**
  store i8* %45, i8** %100, align 8
  %101 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %11, i64 0, i32 0
  %102 = load %class.SkImageFilter*, %class.SkImageFilter** %101, align 8
  %103 = icmp eq %class.SkImageFilter* %102, null
  br i1 %103, label %114, label %104

104:                                              ; preds = %67
  %105 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %102, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = atomicrmw add i32* %105, i32 -1 acq_rel
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %114

108:                                              ; preds = %104
  %109 = bitcast %class.SkImageFilter* %102 to %class.SkRefCntBase*
  %110 = bitcast %class.SkImageFilter* %102 to void (%class.SkRefCntBase*)***
  %111 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %110, align 8
  %112 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %111, i64 2
  %113 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %112, align 8
  call void %113(%class.SkRefCntBase* nonnull %109) #11
  br label %114

114:                                              ; preds = %108, %104, %67, %42, %28, %24, %19
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z49SkRegisterMatrixConvolutionImageFilterFlattenablev() local_unnamed_addr #0 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.15*, %class.SkReadBuffer*)* nonnull @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilter10CreateProcER12SkReadBuffer) #11
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), void (%class.sk_sp.15*, %class.SkReadBuffer*)* nonnull @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilter10CreateProcER12SkReadBuffer) #11
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.15*, %class.SkReadBuffer*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilter10CreateProcER12SkReadBuffer(%class.sk_sp.15* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #0 align 2 {
  %3 = alloca %"class.SkImageFilter_Base::Common", align 8
  %4 = alloca %struct.SkISize, align 4
  %5 = alloca %class.SkAutoSTArray.143, align 8
  %6 = alloca %struct.SkIPoint, align 4
  %7 = alloca %class.sk_sp, align 8
  %8 = alloca %class.sk_sp, align 8
  %9 = alloca %"struct.SkImageFilters::CropRect", align 4
  %10 = bitcast %"class.SkImageFilter_Base::Common"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %10) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 bitcast ({ %"class.SkImageFilter_Base::CropRect", [4 x i8], %class.SkSTArray.140 }* @__const._ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilter10CreateProcER12SkReadBuffer.common to i8*), i64 40, i1 false)
  %11 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %3, i64 0, i32 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %3, i64 0, i32 1, i32 0, i32 0, i64 16
  %13 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %3, i64 0, i32 1, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.SkImageFilter_Base::Common", %"class.SkImageFilter_Base::Common"* %3, i64 0, i32 1, i32 0, i32 0, i64 24
  %15 = bitcast i8* %14 to i64*
  %16 = bitcast i8* %12 to i8**
  store i8* %13, i8** %16, align 8
  store i64 17179869184, i64* %15, align 8
  %17 = call zeroext i1 @_ZN18SkImageFilter_Base6Common9unflattenER12SkReadBufferi(%"class.SkImageFilter_Base::Common"* nonnull %3, %class.SkReadBuffer* dereferenceable(136) %1, i32 1) #11
  br i1 %17, label %20, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %19, align 8
  br label %151

20:                                               ; preds = %2
  %21 = bitcast %struct.SkISize* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #11
  %22 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %4, i64 0, i32 0
  %23 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %4, i64 0, i32 1
  %24 = call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %1) #11
  store i32 %24, i32* %22, align 4
  %25 = call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %1) #11
  store i32 %25, i32* %23, align 4
  %26 = call i32 @_ZN12SkReadBuffer13getArrayCountEv(%class.SkReadBuffer* %1) #11
  %27 = sext i32 %24 to i64
  %28 = sext i32 %25 to i64
  %29 = mul nsw i64 %28, %27
  %30 = sext i32 %26 to i64
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %33, label %32

32:                                               ; preds = %20
  call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #11
  br label %33

33:                                               ; preds = %20, %32
  %34 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 13
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %38, align 8
  br label %150

39:                                               ; preds = %33
  %40 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %1, i64 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.SkReadBuffer* %1 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = lshr i64 %45, 2
  %47 = icmp ult i64 %46, %30
  br i1 %47, label %48, label %53

48:                                               ; preds = %39
  call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #11
  %49 = load i8, i8* %34, align 8, !range !2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %52, align 8
  br label %150

53:                                               ; preds = %39, %48
  %54 = bitcast %class.SkAutoSTArray.143* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %54) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 80, i1 false)
  %55 = getelementptr inbounds %class.SkAutoSTArray.143, %class.SkAutoSTArray.143* %5, i64 0, i32 1
  store float* null, float** %55, align 8
  %56 = getelementptr inbounds %class.SkAutoSTArray.143, %class.SkAutoSTArray.143* %5, i64 0, i32 0
  store i32 0, i32* %56, align 8
  %57 = icmp eq i32 %26, 0
  br i1 %57, label %73, label %58

58:                                               ; preds = %53
  %59 = icmp sgt i32 %26, 16
  br i1 %59, label %60, label %64

60:                                               ; preds = %58
  %61 = call i8* @_Z15sk_malloc_throwmm(i64 %30, i64 4) #11
  %62 = bitcast float** %55 to i8**
  store i8* %61, i8** %62, align 8
  %63 = bitcast i8* %61 to float*
  br label %71

64:                                               ; preds = %58
  %65 = icmp sgt i32 %26, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %64
  %67 = getelementptr inbounds %class.SkAutoSTArray.143, %class.SkAutoSTArray.143* %5, i64 0, i32 2, i64 0
  %68 = bitcast float** %55 to i8**
  store i8* %67, i8** %68, align 8
  %69 = bitcast i8* %67 to float*
  br label %71

70:                                               ; preds = %64
  store float* null, float** %55, align 8
  br label %71

71:                                               ; preds = %70, %66, %60
  %72 = phi float* [ null, %70 ], [ %69, %66 ], [ %63, %60 ]
  store i32 %26, i32* %56, align 8
  br label %73

73:                                               ; preds = %53, %71
  %74 = phi float* [ null, %53 ], [ %72, %71 ]
  %75 = call zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer* %1, float* %74, i64 %30) #11
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %77, align 8
  br label %133

78:                                               ; preds = %73
  %79 = call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #11
  %80 = call float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer* %1) #11
  %81 = bitcast %struct.SkIPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #11
  %82 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %6, i64 0, i32 0
  %83 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %6, i64 0, i32 1
  %84 = call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %1) #11
  store i32 %84, i32* %82, align 4
  %85 = call i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer* %1) #11
  store i32 %85, i32* %83, align 4
  %86 = call i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer* %1) #11
  %87 = icmp ugt i32 %86, 3
  br i1 %87, label %88, label %89

88:                                               ; preds = %78
  call void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer* %1) #11
  br label %89

89:                                               ; preds = %78, %88
  %90 = load i8, i8* %34, align 8, !range !2
  %91 = icmp eq i8 %90, 0
  %92 = select i1 %91, i32 %86, i32 0
  %93 = call zeroext i1 @_ZN12SkReadBuffer8readBoolEv(%class.SkReadBuffer* %1) #11
  %94 = load i8, i8* %34, align 8, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %89
  %97 = getelementptr inbounds %class.sk_sp.15, %class.sk_sp.15* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %97, align 8
  br label %132

98:                                               ; preds = %89
  %99 = bitcast %class.sk_sp* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #11
  %100 = load float*, float** %55, align 8
  %101 = bitcast i8* %12 to %class.sk_sp**
  %102 = load %class.sk_sp*, %class.sk_sp** %101, align 8, !noalias !3
  %103 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %8, i64 0, i32 0
  %104 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %102, i64 0, i32 0
  %105 = load %class.SkImageFilter*, %class.SkImageFilter** %104, align 8, !noalias !3
  %106 = icmp eq %class.SkImageFilter* %105, null
  br i1 %106, label %110, label %107

107:                                              ; preds = %98
  %108 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %105, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = atomicrmw add i32* %108, i32 1 monotonic, !noalias !3
  br label %110

110:                                              ; preds = %107, %98
  store %class.SkImageFilter* %105, %class.SkImageFilter** %103, align 8, !alias.scope !3
  %111 = bitcast %"struct.SkImageFilters::CropRect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %111) #11
  %112 = load i32, i32* %11, align 8
  %113 = icmp eq i32 %112, 0
  %114 = select i1 %113, i8* bitcast (%struct.SkRect* @_ZN4skifL11kNoCropRectE to i8*), i8* %10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %111, i8* align 4 %114, i64 16, i1 false) #11
  call void @_ZN14SkImageFilters17MatrixConvolutionERK7SkISizePKfffRK8SkIPoint10SkTileModeb5sk_spI13SkImageFilterERKNS_8CropRectE(%class.sk_sp* nonnull sret %7, %struct.SkISize* nonnull dereferenceable(8) %4, float* %100, float %79, float %80, %struct.SkIPoint* nonnull dereferenceable(8) %6, i32 %92, i1 zeroext %93, %class.sk_sp* nonnull %8, %"struct.SkImageFilters::CropRect"* nonnull dereferenceable(16) %9)
  %115 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %7, i64 0, i32 0
  %116 = bitcast %class.sk_sp* %7 to i64*
  %117 = load i64, i64* %116, align 8
  store %class.SkImageFilter* null, %class.SkImageFilter** %115, align 8
  %118 = bitcast %class.sk_sp.15* %0 to i64*
  store i64 %117, i64* %118, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %111) #11
  %119 = load %class.SkImageFilter*, %class.SkImageFilter** %103, align 8
  %120 = icmp eq %class.SkImageFilter* %119, null
  br i1 %120, label %131, label %121

121:                                              ; preds = %110
  %122 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %119, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = atomicrmw add i32* %122, i32 -1 acq_rel
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %125, label %131

125:                                              ; preds = %121
  %126 = bitcast %class.SkImageFilter* %119 to %class.SkRefCntBase*
  %127 = bitcast %class.SkImageFilter* %119 to void (%class.SkRefCntBase*)***
  %128 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %127, align 8
  %129 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %128, i64 2
  %130 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %129, align 8
  call void %130(%class.SkRefCntBase* nonnull %126) #11
  br label %131

131:                                              ; preds = %110, %121, %125
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #11
  br label %132

132:                                              ; preds = %131, %96
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #11
  br label %133

133:                                              ; preds = %132, %76
  %134 = load float*, float** %55, align 8
  %135 = load i32, i32* %56, align 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %134, i64 %136
  br label %138

138:                                              ; preds = %138, %133
  %139 = phi float* [ %137, %133 ], [ %141, %138 ]
  %140 = icmp ugt float* %139, %134
  %141 = getelementptr inbounds float, float* %139, i64 -1
  br i1 %140, label %138, label %142

142:                                              ; preds = %138
  %143 = bitcast float* %134 to i8*
  %144 = icmp eq i32 %135, 0
  br i1 %144, label %149, label %145

145:                                              ; preds = %142
  %146 = icmp sgt i32 %135, 16
  br i1 %146, label %147, label %148

147:                                              ; preds = %145
  call void @_Z7sk_freePv(i8* %143) #11
  br label %148

148:                                              ; preds = %147, %145
  store float* null, float** %55, align 8
  store i32 0, i32* %56, align 8
  br label %149

149:                                              ; preds = %142, %148
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %54) #11
  br label %150

150:                                              ; preds = %149, %51, %37
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #11
  br label %151

151:                                              ; preds = %150, %18
  %152 = load i64, i64* %15, align 8
  %153 = and i64 %152, 4294967294
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %151
  %156 = bitcast i8* %12 to %class.sk_sp**
  br label %161

157:                                              ; preds = %177, %151
  %158 = phi i64 [ %152, %151 ], [ %179, %177 ]
  %159 = and i64 %158, 1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %185, label %183

161:                                              ; preds = %177, %155
  %162 = phi i64 [ 0, %155 ], [ %178, %177 ]
  %163 = load %class.sk_sp*, %class.sk_sp** %156, align 8
  %164 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %163, i64 %162, i32 0
  %165 = load %class.SkImageFilter*, %class.SkImageFilter** %164, align 8
  %166 = icmp eq %class.SkImageFilter* %165, null
  br i1 %166, label %177, label %167

167:                                              ; preds = %161
  %168 = getelementptr inbounds %class.SkImageFilter, %class.SkImageFilter* %165, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = atomicrmw add i32* %168, i32 -1 acq_rel
  %170 = icmp eq i32 %169, 1
  br i1 %170, label %171, label %177

171:                                              ; preds = %167
  %172 = bitcast %class.SkImageFilter* %165 to %class.SkRefCntBase*
  %173 = bitcast %class.SkImageFilter* %165 to void (%class.SkRefCntBase*)***
  %174 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %173, align 8
  %175 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %174, i64 2
  %176 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %175, align 8
  call void %176(%class.SkRefCntBase* nonnull %172) #11
  br label %177

177:                                              ; preds = %171, %167, %161
  %178 = add nuw nsw i64 %162, 1
  %179 = load i64, i64* %15, align 8
  %180 = lshr i64 %179, 1
  %181 = and i64 %180, 2147483647
  %182 = icmp ult i64 %178, %181
  br i1 %182, label %161, label %157

183:                                              ; preds = %157
  %184 = load i8*, i8** %16, align 8
  call void @_Z7sk_freePv(i8* %184) #11
  br label %185

185:                                              ; preds = %157, %183
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %10) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN18SkImageFilter_BaseC2EPK5sk_spI13SkImageFilterEiPK6SkRect(%class.SkImageFilter_Base*, %class.sk_sp*, i32, %struct.SkRect*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilterD2Ev(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN12_GLOBAL__N_130SkMatrixConvolutionImageFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %4 = load float*, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast float* %4 to i8*
  tail call void @_ZdaPv(i8* %7) #10
  br label %8

8:                                                ; preds = %6, %1
  %9 = bitcast %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0 to %class.SkImageFilter_Base*
  tail call void @_ZN18SkImageFilter_BaseD2Ev(%class.SkImageFilter_Base* %9) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilterD0Ev(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN12_GLOBAL__N_130SkMatrixConvolutionImageFilterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %4 = load float*, float** %3, align 8
  %5 = icmp eq float* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast float* %4 to i8*
  tail call void @_ZdaPv(i8* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0 to %class.SkImageFilter_Base*
  tail call void @_ZN18SkImageFilter_BaseD2Ev(%class.SkImageFilter_Base* %9) #11
  %10 = bitcast %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #11
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal nonnull void (%class.sk_sp.15*, %class.SkReadBuffer*)* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter10getFactoryEv(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* nocapture readnone) unnamed_addr #5 align 2 {
  ret void (%class.sk_sp.15*, %class.SkReadBuffer*)* @_ZN12_GLOBAL__N_130SkMatrixConvolutionImageFilter10CreateProcER12SkReadBuffer
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter11getTypeNameEv(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter7flattenER13SkWriteBuffer(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0 to %class.SkImageFilter_Base*
  tail call void @_ZNK18SkImageFilter_Base7flattenER13SkWriteBuffer(%class.SkImageFilter_Base* %3, %class.SkWriteBuffer* dereferenceable(56) %1) #11
  %4 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i32)***
  %7 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %6, align 8
  %8 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %7, i64 7
  %9 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %8, align 8
  tail call void %9(%class.SkWriteBuffer* %1, i32 %5) #11
  %10 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %6, align 8
  %13 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %12, i64 7
  %14 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %13, align 8
  tail call void %14(%class.SkWriteBuffer* %1, i32 %11) #11
  %15 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %16 = load float*, float** %15, align 8
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %10, align 4
  %19 = mul nsw i32 %18, %17
  %20 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float*, i32)***
  %21 = load void (%class.SkWriteBuffer*, float*, i32)**, void (%class.SkWriteBuffer*, float*, i32)*** %20, align 8
  %22 = getelementptr inbounds void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %21, i64 6
  %23 = load void (%class.SkWriteBuffer*, float*, i32)*, void (%class.SkWriteBuffer*, float*, i32)** %22, align 8
  tail call void %23(%class.SkWriteBuffer* %1, float* %16, i32 %19) #11
  %24 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %25 = load float, float* %24, align 8
  %26 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, float)***
  %27 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %27, i64 5
  %29 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %28, align 8
  tail call void %29(%class.SkWriteBuffer* %1, float %25) #11
  %30 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %31 = load float, float* %30, align 4
  %32 = load void (%class.SkWriteBuffer*, float)**, void (%class.SkWriteBuffer*, float)*** %26, align 8
  %33 = getelementptr inbounds void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %32, i64 5
  %34 = load void (%class.SkWriteBuffer*, float)*, void (%class.SkWriteBuffer*, float)** %33, align 8
  tail call void %34(%class.SkWriteBuffer* %1, float %31) #11
  %35 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %6, align 8
  %38 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %37, i64 7
  %39 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %38, align 8
  tail call void %39(%class.SkWriteBuffer* %1, i32 %36) #11
  %40 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %6, align 8
  %43 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %42, i64 7
  %44 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %43, align 8
  tail call void %44(%class.SkWriteBuffer* %1, i32 %41) #11
  %45 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 7
  %46 = load i32, i32* %45, align 8
  %47 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %6, align 8
  %48 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %47, i64 7
  %49 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %48, align 8
  tail call void %49(%class.SkWriteBuffer* %1, i32 %46) #11
  %50 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 8
  %51 = load i8, i8* %50, align 4, !range !2
  %52 = icmp ne i8 %51, 0
  %53 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i1)***
  %54 = load void (%class.SkWriteBuffer*, i1)**, void (%class.SkWriteBuffer*, i1)*** %53, align 8
  %55 = getelementptr inbounds void (%class.SkWriteBuffer*, i1)*, void (%class.SkWriteBuffer*, i1)** %54, i64 4
  %56 = load void (%class.SkWriteBuffer*, i1)*, void (%class.SkWriteBuffer*, i1)** %55, align 8
  tail call void %56(%class.SkWriteBuffer* %1, i1 zeroext %52) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK13SkImageFilter18getFlattenableTypeEv(%class.SkImageFilter*) unnamed_addr #0 comdat align 2 {
  ret i32 3
}

declare { <2 x float>, <2 x float> } @_ZNK13SkImageFilter17computeFastBoundsERK6SkRect(%class.SkImageFilter*, %struct.SkRect* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter13onFilterImageERKN4skif7ContextEP8SkIPoint(%class.sk_sp.18* noalias sret, %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*, %"class.skif::Context"* dereferenceable(136), %struct.SkIPoint* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %struct.SkIRect, align 4
  %6 = alloca %struct.SkIRect, align 4
  %7 = alloca %"class.skif::FilterResult", align 8
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %struct.SkIPoint*
  %10 = alloca %struct.SkIRect, align 4
  %11 = alloca %class.sk_sp.18, align 8
  %12 = alloca %"class.skif::Context", align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = bitcast { i64, i64 }* %13 to %struct.SkIRect*
  %15 = alloca { i64, i64 }, align 8
  %16 = bitcast { i64, i64 }* %15 to %struct.SkIRect*
  %17 = alloca %class.sk_sp.18, align 8
  %18 = alloca %class.GrSurfaceProxyView, align 8
  %19 = alloca %class.GrSurfaceProxyView, align 8
  %20 = alloca %class.SkBitmap, align 8
  %21 = alloca %struct.SkImageInfo, align 8
  %22 = alloca %struct.SkImageInfo, align 8
  %23 = alloca %class.SkBitmap, align 8
  %24 = alloca %struct.SkIRect, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = bitcast { i64, i64 }* %25 to %struct.SkIRect*
  %27 = alloca { i64, i64 }, align 8
  %28 = bitcast { i64, i64 }* %27 to %struct.SkIRect*
  %29 = alloca { i64, i64 }, align 8
  %30 = bitcast { i64, i64 }* %29 to %struct.SkIRect*
  %31 = alloca { i64, i64 }, align 8
  %32 = bitcast { i64, i64 }* %31 to %struct.SkIRect*
  %33 = alloca %struct.SkIPoint, align 4
  %34 = alloca { i64, i64 }, align 8
  %35 = bitcast { i64, i64 }* %34 to %struct.SkIRect*
  %36 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #11
  store i64 0, i64* %8, align 8
  %37 = bitcast %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1 to %class.SkImageFilter_Base*
  %38 = bitcast %"class.skif::FilterResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #11, !noalias !6
  call void @_ZNK18SkImageFilter_Base11filterInputILN4skif5UsageE0EEENS1_12FilterResultIXT_EEEiRKNS1_7ContextE(%"class.skif::FilterResult"* nonnull sret %7, %class.SkImageFilter_Base* %37, i32 0, %"class.skif::Context"* dereferenceable(136) %2) #11, !noalias !6
  %39 = getelementptr inbounds %"class.skif::FilterResult", %"class.skif::FilterResult"* %7, i64 0, i32 0, i32 0
  %40 = load %class.SkSpecialImage*, %class.SkSpecialImage** %39, align 8, !noalias !9
  %41 = icmp eq %class.SkSpecialImage* %40, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %4
  %43 = bitcast i64* %8 to i32*
  store i32 0, i32* %43, align 8, !noalias !9
  %44 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %9, i64 0, i32 1
  store i32 0, i32* %44, align 4, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #11, !noalias !6
  %45 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %45, align 8
  br label %1113

46:                                               ; preds = %4
  %47 = getelementptr inbounds %"class.skif::FilterResult", %"class.skif::FilterResult"* %7, i64 0, i32 1, i32 0
  %48 = bitcast %struct.SkIPoint* %47 to i64*
  %49 = load i64, i64* %48, align 8, !noalias !9
  store i64 %49, i64* %8, align 8, !noalias !9
  %50 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %40, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = atomicrmw add i32* %50, i32 1 monotonic, !noalias !9
  %52 = atomicrmw add i32* %50, i32 -1 acq_rel, !noalias !6
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %60

54:                                               ; preds = %46
  %55 = bitcast %class.SkSpecialImage* %40 to %class.SkRefCntBase*
  %56 = bitcast %class.SkSpecialImage* %40 to void (%class.SkRefCntBase*)***
  %57 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %56, align 8, !noalias !6
  %58 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %57, i64 2
  %59 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %58, align 8, !noalias !6
  call void %59(%class.SkRefCntBase* nonnull %55) #11, !noalias !6
  br label %60

60:                                               ; preds = %46, %54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #11, !noalias !6
  %61 = bitcast %struct.SkIRect* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %61) #11
  %62 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 0
  %63 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 1
  %64 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 2
  %65 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 3
  %66 = bitcast %class.sk_sp.18* %11 to i8*
  %67 = bitcast %struct.SkIRect* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #11
  %68 = bitcast %"class.skif::Context"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %68) #11
  call void @_ZNK18SkImageFilter_Base10mapContextERKN4skif7ContextE(%"class.skif::Context"* nonnull sret %12, %class.SkImageFilter_Base* %37, %"class.skif::Context"* dereferenceable(136) %2) #11
  call void @_ZNK18SkImageFilter_Base19applyCropRectAndPadERKN4skif7ContextEP14SkSpecialImageP8SkIPointP7SkIRect(%class.sk_sp.18* nonnull sret %11, %class.SkImageFilter_Base* %37, %"class.skif::Context"* nonnull dereferenceable(136) %12, %class.SkSpecialImage* nonnull %40, %struct.SkIPoint* nonnull %9, %struct.SkIRect* nonnull %10) #11
  %69 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %11, i64 0, i32 0
  %70 = bitcast %class.sk_sp.18* %11 to i64*
  %71 = load i64, i64* %70, align 8
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %69, align 8
  %72 = atomicrmw add i32* %50, i32 -1 acq_rel
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %80

74:                                               ; preds = %60
  %75 = bitcast %class.SkSpecialImage* %40 to %class.SkRefCntBase*
  %76 = bitcast %class.SkSpecialImage* %40 to void (%class.SkRefCntBase*)***
  %77 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %76, align 8
  %78 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %77, i64 2
  %79 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %78, align 8
  call void %79(%class.SkRefCntBase* nonnull %75) #11
  br label %80

80:                                               ; preds = %60, %74
  %81 = load %class.SkSpecialImage*, %class.SkSpecialImage** %69, align 8
  %82 = icmp eq %class.SkSpecialImage* %81, null
  br i1 %82, label %93, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %81, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = atomicrmw add i32* %84, i32 -1 acq_rel
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %87, label %93

87:                                               ; preds = %83
  %88 = bitcast %class.SkSpecialImage* %81 to %class.SkRefCntBase*
  %89 = bitcast %class.SkSpecialImage* %81 to void (%class.SkRefCntBase*)***
  %90 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %89, align 8
  %91 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %90, i64 2
  %92 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %91, align 8
  call void %92(%class.SkRefCntBase* nonnull %88) #11
  br label %93

93:                                               ; preds = %80, %83, %87
  %94 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %12, i64 0, i32 5, i32 0, i32 0
  %95 = load %class.SkSpecialImage*, %class.SkSpecialImage** %94, align 8
  %96 = icmp eq %class.SkSpecialImage* %95, null
  br i1 %96, label %107, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %95, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = atomicrmw add i32* %98, i32 -1 acq_rel
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %101, label %107

101:                                              ; preds = %97
  %102 = bitcast %class.SkSpecialImage* %95 to %class.SkRefCntBase*
  %103 = bitcast %class.SkSpecialImage* %95 to void (%class.SkRefCntBase*)***
  %104 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %103, align 8
  %105 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %104, i64 2
  %106 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %105, align 8
  call void %106(%class.SkRefCntBase* nonnull %102) #11
  br label %107

107:                                              ; preds = %93, %97, %101
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %68) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #11
  %108 = inttoptr i64 %71 to %class.SkSpecialImage*
  %109 = icmp eq i64 %71, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %107
  %111 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %111, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #11
  br label %1113

112:                                              ; preds = %107
  %113 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %113) #11
  %114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 1
  %115 = bitcast i64* %8 to i32*
  %116 = load i32, i32* %115, align 8
  %117 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %9, i64 0, i32 1
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %108, i64 0, i32 2, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %108, i64 0, i32 2, i32 0
  %122 = load i32, i32* %121, align 4
  %123 = sub i32 %120, %122
  %124 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %108, i64 0, i32 2, i32 3
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %108, i64 0, i32 2, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = sub i32 %125, %127
  %129 = sext i32 %116 to i64
  %130 = sext i32 %123 to i64
  %131 = add nsw i64 %130, %129
  %132 = icmp slt i64 %131, 2147483647
  %133 = select i1 %132, i64 %131, i64 2147483647
  %134 = icmp sgt i64 %133, -2147483647
  %135 = select i1 %134, i64 %133, i64 -2147483647
  %136 = sext i32 %118 to i64
  %137 = sext i32 %128 to i64
  %138 = add nsw i64 %137, %136
  %139 = icmp slt i64 %138, 2147483647
  %140 = select i1 %139, i64 %138, i64 2147483647
  %141 = icmp sgt i64 %140, -2147483647
  %142 = select i1 %141, i64 %140, i64 -2147483647
  %143 = zext i32 %118 to i64
  %144 = shl nuw i64 %143, 32
  %145 = zext i32 %116 to i64
  %146 = or i64 %144, %145
  %147 = shl nsw i64 %142, 32
  %148 = and i64 %135, 4294967295
  %149 = or i64 %147, %148
  %150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i64 0, i32 0
  store i64 %146, i64* %150, align 8
  store i64 %149, i64* %114, align 8
  %151 = bitcast { i64, i64 }* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %151) #11
  %152 = bitcast { i64, i64 }* %15 to i32*
  %153 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %16, i64 0, i32 1
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i64 0, i32 1
  %155 = bitcast i64* %154 to i32*
  %156 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %16, i64 0, i32 3
  %157 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 0, i32 1
  %158 = bitcast { i64, i64 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %158, i8 -86, i64 16, i1 false)
  %159 = call { i64, i64 } @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18onFilterNodeBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS2_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, %struct.SkIRect* nonnull dereferenceable(16) %10, %class.SkMatrix* dereferenceable(40) %157, i32 1, %struct.SkIRect* nonnull %14)
  %160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i64 0, i32 0
  %161 = extractvalue { i64, i64 } %159, 0
  store i64 %161, i64* %160, align 8
  %162 = extractvalue { i64, i64 } %159, 1
  store i64 %162, i64* %154, align 8
  %163 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 7
  %164 = load i32, i32* %163, align 8
  %165 = add i32 %164, -1
  %166 = icmp ult i32 %165, 2
  br i1 %166, label %167, label %173

167:                                              ; preds = %112
  %168 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6
  %169 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1
  %170 = call { i64, i64 } @_ZN18SkImageFilter_Base25DetermineRepeatedSrcBoundERK7SkIRectRK8SkIPointRK7SkISizeS2_(%struct.SkIRect* nonnull dereferenceable(16) %16, %struct.SkIPoint* dereferenceable(8) %168, %struct.SkISize* dereferenceable(8) %169, %struct.SkIRect* nonnull dereferenceable(16) %14) #11
  %171 = extractvalue { i64, i64 } %170, 0
  %172 = extractvalue { i64, i64 } %170, 1
  store i64 %171, i64* %160, align 8
  store i64 %172, i64* %154, align 8
  br label %177

173:                                              ; preds = %112
  %174 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %16, %struct.SkIRect* nonnull dereferenceable(16) %16, %struct.SkIRect* nonnull dereferenceable(16) %10) #11
  br i1 %174, label %177, label %175

175:                                              ; preds = %173
  %176 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %176, align 8
  br label %1099

177:                                              ; preds = %173, %167
  %178 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 5, i32 0, i32 0
  %179 = load %class.SkSpecialImage*, %class.SkSpecialImage** %178, align 8
  %180 = call zeroext i1 @_ZNK14SkSpecialImage15isTextureBackedEv(%class.SkSpecialImage* %179) #11
  br i1 %180, label %181, label %429

181:                                              ; preds = %177
  %182 = load %class.SkSpecialImage*, %class.SkSpecialImage** %178, align 8
  %183 = call %class.GrRecordingContext* @_ZNK14SkSpecialImage10getContextEv(%class.SkSpecialImage* %182) #11
  %184 = bitcast %class.sk_sp.18* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %184) #11
  %185 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 3
  %186 = load i32, i32* %185, align 8
  %187 = getelementptr inbounds %"class.skif::Context", %"class.skif::Context"* %2, i64 0, i32 4
  %188 = load %class.SkColorSpace*, %class.SkColorSpace** %187, align 8
  %189 = load %class.SkSpecialImage*, %class.SkSpecialImage** %178, align 8
  %190 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %189, i64 0, i32 1
  call void @_ZN18SkImageFilter_Base17ImageToColorSpaceEP14SkSpecialImage11SkColorTypeP12SkColorSpaceRK14SkSurfaceProps(%class.sk_sp.18* nonnull sret %17, %class.SkSpecialImage* nonnull %108, i32 %186, %class.SkColorSpace* %188, %class.SkSurfaceProps* dereferenceable(8) %190) #11
  %191 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %17, i64 0, i32 0
  %192 = bitcast %class.sk_sp.18* %17 to i64*
  %193 = load i64, i64* %192, align 8
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %191, align 8
  %194 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %108, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = atomicrmw add i32* %194, i32 -1 acq_rel
  %196 = icmp eq i32 %195, 1
  br i1 %196, label %197, label %203

197:                                              ; preds = %181
  %198 = inttoptr i64 %71 to %class.SkRefCntBase*
  %199 = inttoptr i64 %71 to void (%class.SkRefCntBase*)***
  %200 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %199, align 8
  %201 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %200, i64 2
  %202 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %201, align 8
  call void %202(%class.SkRefCntBase* nonnull %198) #11
  br label %203

203:                                              ; preds = %181, %197
  %204 = load %class.SkSpecialImage*, %class.SkSpecialImage** %191, align 8
  %205 = icmp eq %class.SkSpecialImage* %204, null
  br i1 %205, label %216, label %206

206:                                              ; preds = %203
  %207 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %204, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = atomicrmw add i32* %207, i32 -1 acq_rel
  %209 = icmp eq i32 %208, 1
  br i1 %209, label %210, label %216

210:                                              ; preds = %206
  %211 = bitcast %class.SkSpecialImage* %204 to %class.SkRefCntBase*
  %212 = bitcast %class.SkSpecialImage* %204 to void (%class.SkRefCntBase*)***
  %213 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %212, align 8
  %214 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %213, i64 2
  %215 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %214, align 8
  call void %215(%class.SkRefCntBase* nonnull %211) #11
  br label %216

216:                                              ; preds = %203, %206, %210
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %184) #11
  %217 = bitcast %class.GrSurfaceProxyView* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %217) #11
  %218 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %18, i64 0, i32 0, i32 0
  %219 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %18, i64 0, i32 1
  %220 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %18, i64 0, i32 2, i32 0
  %221 = inttoptr i64 %193 to %class.SkSpecialImage*
  %222 = bitcast %class.GrSurfaceProxyView* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %222, i8 -86, i64 16, i1 false)
  call void @_ZNK14SkSpecialImage4viewEP18GrRecordingContext(%class.GrSurfaceProxyView* nonnull sret %18, %class.SkSpecialImage* %221, %class.GrRecordingContext* %183) #11
  %223 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %218, align 8
  %224 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %223, i64 0, i32 15
  %225 = load i8, i8* %224, align 1, !range !2
  %226 = icmp ne i8 %225, 0
  %227 = load i32, i32* %62, align 4
  %228 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  store i32 %227, i32* %228, align 4
  %229 = load i32, i32* %63, align 4
  %230 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  store i32 %229, i32* %230, align 4
  %231 = load i32, i32* %115, align 8
  %232 = sub nsw i32 0, %231
  %233 = load i32, i32* %117, align 4
  %234 = sub nsw i32 0, %233
  %235 = sext i32 %227 to i64
  %236 = sext i32 %232 to i64
  %237 = add nsw i64 %236, %235
  %238 = icmp slt i64 %237, 2147483647
  %239 = select i1 %238, i64 %237, i64 2147483647
  %240 = icmp sgt i64 %239, -2147483647
  %241 = select i1 %240, i64 %239, i64 -2147483647
  %242 = trunc i64 %241 to i32
  store i32 %242, i32* %62, align 4
  %243 = sext i32 %229 to i64
  %244 = sext i32 %234 to i64
  %245 = add nsw i64 %244, %243
  %246 = icmp slt i64 %245, 2147483647
  %247 = select i1 %246, i64 %245, i64 2147483647
  %248 = icmp sgt i64 %247, -2147483647
  %249 = select i1 %248, i64 %247, i64 -2147483647
  %250 = trunc i64 %249 to i32
  store i32 %250, i32* %63, align 4
  %251 = load i32, i32* %64, align 4
  %252 = sext i32 %251 to i64
  %253 = add nsw i64 %252, %236
  %254 = icmp slt i64 %253, 2147483647
  %255 = select i1 %254, i64 %253, i64 2147483647
  %256 = icmp sgt i64 %255, -2147483647
  %257 = select i1 %256, i64 %255, i64 -2147483647
  %258 = trunc i64 %257 to i32
  store i32 %258, i32* %64, align 4
  %259 = load i32, i32* %65, align 4
  %260 = sext i32 %259 to i64
  %261 = add nsw i64 %260, %244
  %262 = icmp slt i64 %261, 2147483647
  %263 = select i1 %262, i64 %261, i64 2147483647
  %264 = icmp sgt i64 %263, -2147483647
  %265 = select i1 %264, i64 %263, i64 -2147483647
  %266 = trunc i64 %265 to i32
  store i32 %266, i32* %65, align 4
  %267 = load i32, i32* %152, align 8
  %268 = sext i32 %267 to i64
  %269 = add nsw i64 %268, %236
  %270 = icmp slt i64 %269, 2147483647
  %271 = select i1 %270, i64 %269, i64 2147483647
  %272 = icmp sgt i64 %271, -2147483647
  %273 = select i1 %272, i64 %271, i64 -2147483647
  %274 = load i32, i32* %153, align 4
  %275 = sext i32 %274 to i64
  %276 = add nsw i64 %275, %244
  %277 = icmp slt i64 %276, 2147483647
  %278 = select i1 %277, i64 %276, i64 2147483647
  %279 = icmp sgt i64 %278, -2147483647
  %280 = select i1 %279, i64 %278, i64 -2147483647
  %281 = load i32, i32* %155, align 8
  %282 = sext i32 %281 to i64
  %283 = add nsw i64 %282, %236
  %284 = icmp slt i64 %283, 2147483647
  %285 = select i1 %284, i64 %283, i64 2147483647
  %286 = icmp sgt i64 %285, -2147483647
  %287 = select i1 %286, i64 %285, i64 -2147483647
  %288 = load i32, i32* %156, align 4
  %289 = sext i32 %288 to i64
  %290 = add nsw i64 %289, %244
  %291 = icmp slt i64 %290, 2147483647
  %292 = select i1 %291, i64 %290, i64 2147483647
  %293 = icmp sgt i64 %292, -2147483647
  %294 = select i1 %293, i64 %292, i64 -2147483647
  %295 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %221, i64 0, i32 2, i32 0
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %221, i64 0, i32 2, i32 1
  %298 = load i32, i32* %297, align 4
  %299 = sext i32 %296 to i64
  %300 = add nsw i64 %273, %299
  %301 = icmp slt i64 %300, 2147483647
  %302 = select i1 %301, i64 %300, i64 2147483647
  %303 = icmp sgt i64 %302, -2147483647
  %304 = select i1 %303, i64 %302, i64 -2147483647
  %305 = trunc i64 %304 to i32
  store i32 %305, i32* %152, align 8
  %306 = sext i32 %298 to i64
  %307 = add nsw i64 %280, %306
  %308 = icmp slt i64 %307, 2147483647
  %309 = select i1 %308, i64 %307, i64 2147483647
  %310 = icmp sgt i64 %309, -2147483647
  %311 = select i1 %310, i64 %309, i64 -2147483647
  %312 = trunc i64 %311 to i32
  store i32 %312, i32* %153, align 4
  %313 = add nsw i64 %287, %299
  %314 = icmp slt i64 %313, 2147483647
  %315 = select i1 %314, i64 %313, i64 2147483647
  %316 = icmp sgt i64 %315, -2147483647
  %317 = select i1 %316, i64 %315, i64 -2147483647
  %318 = trunc i64 %317 to i32
  store i32 %318, i32* %155, align 8
  %319 = add nsw i64 %294, %306
  %320 = icmp slt i64 %319, 2147483647
  %321 = select i1 %320, i64 %319, i64 2147483647
  %322 = icmp sgt i64 %321, -2147483647
  %323 = select i1 %322, i64 %321, i64 -2147483647
  %324 = trunc i64 %323 to i32
  store i32 %324, i32* %156, align 4
  %325 = bitcast %class.GrSurfaceProxyView* %18 to i64*
  %326 = load i64, i64* %325, align 8
  store %class.GrSurfaceProxy* null, %class.GrSurfaceProxy** %218, align 8
  %327 = bitcast %class.GrSurfaceProxyView* %19 to i64*
  store i64 %326, i64* %327, align 8
  %328 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %19, i64 0, i32 1
  %329 = load i32, i32* %219, align 8
  store i32 %329, i32* %328, align 8
  %330 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %19, i64 0, i32 2, i32 0
  %331 = load i16, i16* %220, align 4
  store i16 %331, i16* %330, align 4
  %332 = load i32, i32* %163, align 8
  %333 = icmp ult i32 %332, 4
  br i1 %333, label %335, label %334

334:                                              ; preds = %216
  call void @llvm.trap() #11
  unreachable

335:                                              ; preds = %216
  %336 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6
  %337 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 5
  %338 = load float, float* %337, align 4
  %339 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 4
  %340 = load float, float* %339, align 8
  %341 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 3
  %342 = load float*, float** %341, align 8
  %343 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1
  %344 = trunc i32 %332 to i8
  %345 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 8
  %346 = load i8, i8* %345, align 4, !range !2
  %347 = icmp ne i8 %346, 0
  %348 = load %class.SkSpecialImage*, %class.SkSpecialImage** %178, align 8
  %349 = call %class.GrRecordingContext* @_ZNK14SkSpecialImage10getContextEv(%class.SkSpecialImage* %348) #11
  %350 = getelementptr inbounds %class.GrRecordingContext, %class.GrRecordingContext* %349, i64 0, i32 0, i32 0
  %351 = call %class.GrCaps* @_ZNK14GrContext_Base4capsEv(%class.GrContext_Base* %350) #11
  %352 = call %class.GrFragmentProcessor* @_ZN25GrMatrixConvolutionEffect4MakeEP18GrRecordingContext18GrSurfaceProxyViewRK7SkIRectRK7SkISizePKfffRK8SkIPointN14GrSamplerState8WrapModeEbRK6GrCaps(%class.GrRecordingContext* %183, %class.GrSurfaceProxyView* nonnull %19, %struct.SkIRect* nonnull dereferenceable(16) %16, %struct.SkISize* dereferenceable(8) %343, float* %342, float %340, float %338, %struct.SkIPoint* dereferenceable(8) %336, i8 zeroext %344, i1 zeroext %347, %class.GrCaps* dereferenceable(232) %351) #11
  %353 = getelementptr inbounds %class.GrSurfaceProxyView, %class.GrSurfaceProxyView* %19, i64 0, i32 0, i32 0
  %354 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %353, align 8
  %355 = icmp eq %class.GrSurfaceProxy* %354, null
  br i1 %355, label %368, label %356

356:                                              ; preds = %335
  %357 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %354, i64 0, i32 1
  %358 = getelementptr inbounds %class.SkNVRefCnt.89, %class.SkNVRefCnt.89* %357, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %359 = atomicrmw add i32* %358, i32 -1 acq_rel
  %360 = icmp eq i32 %359, 1
  br i1 %360, label %361, label %368

361:                                              ; preds = %356
  %362 = getelementptr inbounds %class.SkNVRefCnt.89, %class.SkNVRefCnt.89* %357, i64 -2
  %363 = bitcast %class.SkNVRefCnt.89* %362 to %class.GrSurfaceProxy*
  %364 = bitcast %class.SkNVRefCnt.89* %362 to void (%class.GrSurfaceProxy*)***
  %365 = load void (%class.GrSurfaceProxy*)**, void (%class.GrSurfaceProxy*)*** %364, align 8
  %366 = getelementptr inbounds void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %365, i64 1
  %367 = load void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %366, align 8
  call void %367(%class.GrSurfaceProxy* nonnull %363) #11
  br label %368

368:                                              ; preds = %335, %356, %361
  %369 = icmp eq %class.GrFragmentProcessor* %352, null
  br i1 %369, label %411, label %370

370:                                              ; preds = %368
  %371 = load i32, i32* %295, align 4
  %372 = load i32, i32* %297, align 4
  %373 = load i32, i32* %62, align 4
  %374 = sext i32 %373 to i64
  %375 = sext i32 %371 to i64
  %376 = add nsw i64 %374, %375
  %377 = icmp slt i64 %376, 2147483647
  %378 = select i1 %377, i64 %376, i64 2147483647
  %379 = icmp sgt i64 %378, -2147483647
  %380 = select i1 %379, i64 %378, i64 -2147483647
  %381 = trunc i64 %380 to i32
  store i32 %381, i32* %62, align 4
  %382 = load i32, i32* %63, align 4
  %383 = sext i32 %382 to i64
  %384 = sext i32 %372 to i64
  %385 = add nsw i64 %383, %384
  %386 = icmp slt i64 %385, 2147483647
  %387 = select i1 %386, i64 %385, i64 2147483647
  %388 = icmp sgt i64 %387, -2147483647
  %389 = select i1 %388, i64 %387, i64 -2147483647
  %390 = trunc i64 %389 to i32
  store i32 %390, i32* %63, align 4
  %391 = load i32, i32* %64, align 4
  %392 = sext i32 %391 to i64
  %393 = add nsw i64 %392, %375
  %394 = icmp slt i64 %393, 2147483647
  %395 = select i1 %394, i64 %393, i64 2147483647
  %396 = icmp sgt i64 %395, -2147483647
  %397 = select i1 %396, i64 %395, i64 -2147483647
  %398 = trunc i64 %397 to i32
  store i32 %398, i32* %64, align 4
  %399 = load i32, i32* %65, align 4
  %400 = sext i32 %399 to i64
  %401 = add nsw i64 %400, %384
  %402 = icmp slt i64 %401, 2147483647
  %403 = select i1 %402, i64 %401, i64 2147483647
  %404 = icmp sgt i64 %403, -2147483647
  %405 = select i1 %404, i64 %403, i64 -2147483647
  %406 = trunc i64 %405 to i32
  store i32 %406, i32* %65, align 4
  %407 = load i32, i32* %185, align 8
  %408 = load %class.SkColorSpace*, %class.SkColorSpace** %187, align 8
  %409 = load %class.SkSpecialImage*, %class.SkSpecialImage** %178, align 8
  %410 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %409, i64 0, i32 1
  call void @_ZN18SkImageFilter_Base10DrawWithFPEP18GrRecordingContextNSt3__110unique_ptrI19GrFragmentProcessorNS2_14default_deleteIS4_EEEERK7SkIRect11SkColorTypePK12SkColorSpaceRK14SkSurfaceProps11GrProtected(%class.sk_sp.18* sret %0, %class.GrRecordingContext* %183, %class.GrFragmentProcessor* nonnull %352, %struct.SkIRect* nonnull dereferenceable(16) %10, i32 %407, %class.SkColorSpace* %408, %class.SkSurfaceProps* dereferenceable(8) %410, i1 zeroext %226) #11
  br label %413

411:                                              ; preds = %368
  %412 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %412, align 8
  br label %413

413:                                              ; preds = %411, %370
  %414 = load %class.GrSurfaceProxy*, %class.GrSurfaceProxy** %218, align 8
  %415 = icmp eq %class.GrSurfaceProxy* %414, null
  br i1 %415, label %428, label %416

416:                                              ; preds = %413
  %417 = getelementptr inbounds %class.GrSurfaceProxy, %class.GrSurfaceProxy* %414, i64 0, i32 1
  %418 = getelementptr inbounds %class.SkNVRefCnt.89, %class.SkNVRefCnt.89* %417, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %419 = atomicrmw add i32* %418, i32 -1 acq_rel
  %420 = icmp eq i32 %419, 1
  br i1 %420, label %421, label %428

421:                                              ; preds = %416
  %422 = getelementptr inbounds %class.SkNVRefCnt.89, %class.SkNVRefCnt.89* %417, i64 -2
  %423 = bitcast %class.SkNVRefCnt.89* %422 to %class.GrSurfaceProxy*
  %424 = bitcast %class.SkNVRefCnt.89* %422 to void (%class.GrSurfaceProxy*)***
  %425 = load void (%class.GrSurfaceProxy*)**, void (%class.GrSurfaceProxy*)*** %424, align 8
  %426 = getelementptr inbounds void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %425, i64 1
  %427 = load void (%class.GrSurfaceProxy*)*, void (%class.GrSurfaceProxy*)** %426, align 8
  call void %427(%class.GrSurfaceProxy* nonnull %423) #11
  br label %428

428:                                              ; preds = %413, %416, %421
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %217) #11
  br label %1099

429:                                              ; preds = %177
  %430 = bitcast %class.SkBitmap* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %430) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %430, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %20) #11
  %431 = call zeroext i1 @_ZNK14SkSpecialImage11getROPixelsEP8SkBitmap(%class.SkSpecialImage* nonnull %108, %class.SkBitmap* nonnull %20) #11
  br i1 %431, label %434, label %432

432:                                              ; preds = %429
  %433 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %433, align 8
  br label %1098

434:                                              ; preds = %429
  %435 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 0, i32 1
  %436 = load i32, i32* %435, align 8
  %437 = icmp eq i32 %436, 6
  br i1 %437, label %440, label %438

438:                                              ; preds = %434
  %439 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %439, align 8
  br label %1098

440:                                              ; preds = %434
  %441 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 8
  %442 = load i8, i8* %441, align 4, !range !2
  %443 = icmp eq i8 %442, 0
  br i1 %443, label %444, label %481

444:                                              ; preds = %440
  %445 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 0, i32 2
  %446 = load i32, i32* %445, align 4
  %447 = icmp eq i32 %446, 1
  br i1 %447, label %481, label %448

448:                                              ; preds = %444
  %449 = bitcast %struct.SkImageInfo* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %449) #11
  %450 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 1
  %451 = bitcast %struct.SkISize* %450 to i64*
  %452 = load i64, i64* %451, align 8, !noalias !12
  %453 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %454 = load %class.SkColorSpace*, %class.SkColorSpace** %453, align 8, !noalias !15
  %455 = icmp eq %class.SkColorSpace* %454, null
  br i1 %455, label %459, label %456

456:                                              ; preds = %448
  %457 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %454, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %458 = atomicrmw add i32* %457, i32 1 monotonic, !noalias !15
  br label %459

459:                                              ; preds = %448, %456
  %460 = ptrtoint %class.SkColorSpace* %454 to i64
  %461 = bitcast %struct.SkImageInfo* %21 to i64*
  store i64 %460, i64* %461, align 8, !alias.scope !20
  %462 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %21, i64 0, i32 0, i32 1
  %463 = bitcast i32* %462 to i64*
  store i64 12884901894, i64* %463, align 8, !alias.scope !20
  %464 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %21, i64 0, i32 1
  %465 = bitcast %struct.SkISize* %464 to i64*
  store i64 %452, i64* %465, align 8, !alias.scope !20
  %466 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 0
  %467 = load i8*, i8** %466, align 8
  %468 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 1
  %469 = load i64, i64* %468, align 8
  %470 = call zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap* nonnull %20, %struct.SkImageInfo* nonnull dereferenceable(24) %21, i8* %467, i64 %469, i32 0, i32 0) #11
  %471 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %21, i64 0, i32 0, i32 0, i32 0
  %472 = load %class.SkColorSpace*, %class.SkColorSpace** %471, align 8
  %473 = icmp eq %class.SkColorSpace* %472, null
  br i1 %473, label %480, label %474

474:                                              ; preds = %459
  %475 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %472, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %476 = atomicrmw add i32* %475, i32 -1 acq_rel
  %477 = icmp eq i32 %476, 1
  br i1 %477, label %478, label %480

478:                                              ; preds = %474
  %479 = bitcast %class.SkColorSpace* %472 to i8*
  call void @_ZdlPv(i8* %479) #10
  br label %480

480:                                              ; preds = %459, %474, %478
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %449) #11
  br label %481

481:                                              ; preds = %440, %480, %444
  %482 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 0
  %483 = load i8*, i8** %482, align 8
  %484 = icmp eq i8* %483, null
  br i1 %484, label %485, label %487

485:                                              ; preds = %481
  %486 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %486, align 8
  br label %1098

487:                                              ; preds = %481
  %488 = bitcast %struct.SkImageInfo* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %488) #11
  %489 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 0, i32 0, i32 0
  %490 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 0, i32 1
  %491 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 1, i32 0
  %492 = load i32, i32* %64, align 4
  %493 = load i32, i32* %62, align 4
  %494 = sub i32 %492, %493
  %495 = load i32, i32* %65, align 4
  %496 = load i32, i32* %63, align 4
  %497 = sub i32 %495, %496
  %498 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 2, i32 0, i32 2
  %499 = load i32, i32* %498, align 4
  %500 = zext i32 %497 to i64
  %501 = shl nuw i64 %500, 32
  %502 = zext i32 %494 to i64
  %503 = or i64 %501, %502
  %504 = zext i32 %499 to i64
  %505 = shl nuw i64 %504, 32
  %506 = or i64 %505, 6
  %507 = bitcast %struct.SkImageInfo* %22 to i64*
  store i64 0, i64* %507, align 8, !alias.scope !23
  %508 = bitcast i32* %490 to i64*
  store i64 %506, i64* %508, align 8, !alias.scope !23
  %509 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 1
  %510 = bitcast %struct.SkISize* %509 to i64*
  store i64 %503, i64* %510, align 8, !alias.scope !23
  %511 = bitcast %class.SkBitmap* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %511) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %511, i8 -86, i64 56, i1 false)
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %23) #11
  %512 = load i32, i32* %491, align 8
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %22, i64 0, i32 0
  %515 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %514) #11
  %516 = sext i32 %515 to i64
  %517 = mul nsw i64 %516, %513
  %518 = icmp ult i64 %517, 2147483648
  %519 = select i1 %518, i64 %517, i64 0
  %520 = call zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap* nonnull %23, %struct.SkImageInfo* nonnull dereferenceable(24) %22, i64 %519) #11
  br i1 %520, label %523, label %521

521:                                              ; preds = %487
  %522 = getelementptr inbounds %class.sk_sp.18, %class.sk_sp.18* %0, i64 0, i32 0
  store %class.SkSpecialImage* null, %class.SkSpecialImage** %522, align 8
  br label %1088

523:                                              ; preds = %487
  %524 = load i32, i32* %62, align 4
  %525 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  store i32 %524, i32* %525, align 4
  %526 = load i32, i32* %63, align 4
  %527 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  store i32 %526, i32* %527, align 4
  %528 = load i32, i32* %115, align 8
  %529 = sub nsw i32 0, %528
  %530 = load i32, i32* %117, align 4
  %531 = sub nsw i32 0, %530
  %532 = sext i32 %524 to i64
  %533 = sext i32 %529 to i64
  %534 = add nsw i64 %533, %532
  %535 = icmp slt i64 %534, 2147483647
  %536 = select i1 %535, i64 %534, i64 2147483647
  %537 = icmp sgt i64 %536, -2147483647
  %538 = select i1 %537, i64 %536, i64 -2147483647
  %539 = trunc i64 %538 to i32
  store i32 %539, i32* %62, align 4
  %540 = sext i32 %526 to i64
  %541 = sext i32 %531 to i64
  %542 = add nsw i64 %541, %540
  %543 = icmp slt i64 %542, 2147483647
  %544 = select i1 %543, i64 %542, i64 2147483647
  %545 = icmp sgt i64 %544, -2147483647
  %546 = select i1 %545, i64 %544, i64 -2147483647
  %547 = trunc i64 %546 to i32
  store i32 %547, i32* %63, align 4
  %548 = load i32, i32* %64, align 4
  %549 = sext i32 %548 to i64
  %550 = add nsw i64 %549, %533
  %551 = icmp slt i64 %550, 2147483647
  %552 = select i1 %551, i64 %550, i64 2147483647
  %553 = icmp sgt i64 %552, -2147483647
  %554 = select i1 %553, i64 %552, i64 -2147483647
  %555 = trunc i64 %554 to i32
  store i32 %555, i32* %64, align 4
  %556 = load i32, i32* %65, align 4
  %557 = sext i32 %556 to i64
  %558 = add nsw i64 %557, %541
  %559 = icmp slt i64 %558, 2147483647
  %560 = select i1 %559, i64 %558, i64 2147483647
  %561 = icmp sgt i64 %560, -2147483647
  %562 = select i1 %561, i64 %560, i64 -2147483647
  %563 = trunc i64 %562 to i32
  store i32 %563, i32* %65, align 4
  %564 = load i32, i32* %152, align 8
  %565 = sext i32 %564 to i64
  %566 = add nsw i64 %565, %533
  %567 = icmp slt i64 %566, 2147483647
  %568 = select i1 %567, i64 %566, i64 2147483647
  %569 = icmp sgt i64 %568, -2147483647
  %570 = select i1 %569, i64 %568, i64 -2147483647
  %571 = trunc i64 %570 to i32
  store i32 %571, i32* %152, align 8
  %572 = load i32, i32* %153, align 4
  %573 = sext i32 %572 to i64
  %574 = add nsw i64 %573, %541
  %575 = icmp slt i64 %574, 2147483647
  %576 = select i1 %575, i64 %574, i64 2147483647
  %577 = icmp sgt i64 %576, -2147483647
  %578 = select i1 %577, i64 %576, i64 -2147483647
  %579 = trunc i64 %578 to i32
  store i32 %579, i32* %153, align 4
  %580 = load i32, i32* %155, align 8
  %581 = sext i32 %580 to i64
  %582 = add nsw i64 %581, %533
  %583 = icmp slt i64 %582, 2147483647
  %584 = select i1 %583, i64 %582, i64 2147483647
  %585 = icmp sgt i64 %584, -2147483647
  %586 = select i1 %585, i64 %584, i64 -2147483647
  %587 = trunc i64 %586 to i32
  store i32 %587, i32* %155, align 8
  %588 = load i32, i32* %156, align 4
  %589 = sext i32 %588 to i64
  %590 = add nsw i64 %589, %541
  %591 = icmp slt i64 %590, 2147483647
  %592 = select i1 %591, i64 %590, i64 2147483647
  %593 = icmp sgt i64 %592, -2147483647
  %594 = select i1 %593, i64 %592, i64 -2147483647
  %595 = trunc i64 %594 to i32
  store i32 %595, i32* %156, align 4
  %596 = bitcast %struct.SkIRect* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %596) #11
  %597 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %24, i64 0, i32 2
  %598 = bitcast %struct.SkIRect* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %598, i8 -86, i64 16, i1 false)
  %599 = load i32, i32* %163, align 8
  %600 = add i32 %599, -1
  %601 = icmp ult i32 %600, 2
  br i1 %601, label %602, label %612

602:                                              ; preds = %523
  %603 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %24, i64 0, i32 0
  %604 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %24, i64 0, i32 3
  %605 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %24, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %596, i8* nonnull align 4 %61, i64 16, i1 false)
  %606 = load i32, i32* %605, align 4
  %607 = load i32, i32* %604, align 4
  %608 = load i32, i32* %603, align 8
  %609 = load i32, i32* %597, align 8
  %610 = zext i32 %606 to i64
  %611 = shl nuw i64 %610, 32
  br label %654

612:                                              ; preds = %523
  %613 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6, i32 0
  %614 = load i32, i32* %613, align 8
  %615 = add nsw i32 %614, %539
  %616 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6, i32 1
  %617 = load i32, i32* %616, align 4
  %618 = add nsw i32 %617, %547
  %619 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1, i32 0
  %620 = load i32, i32* %619, align 4
  %621 = sub i32 1, %539
  %622 = add i32 %621, %555
  %623 = sub i32 %622, %620
  %624 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1, i32 1
  %625 = load i32, i32* %624, align 4
  %626 = sub i32 1, %547
  %627 = add i32 %626, %563
  %628 = sub i32 %627, %625
  %629 = sext i32 %615 to i64
  %630 = sext i32 %623 to i64
  %631 = add nsw i64 %630, %629
  %632 = icmp slt i64 %631, 2147483647
  %633 = select i1 %632, i64 %631, i64 2147483647
  %634 = icmp sgt i64 %633, -2147483647
  %635 = select i1 %634, i64 %633, i64 -2147483647
  %636 = sext i32 %618 to i64
  %637 = sext i32 %628 to i64
  %638 = add nsw i64 %637, %636
  %639 = icmp slt i64 %638, 2147483647
  %640 = select i1 %639, i64 %638, i64 2147483647
  %641 = icmp sgt i64 %640, -2147483647
  %642 = select i1 %641, i64 %640, i64 -2147483647
  %643 = zext i32 %618 to i64
  %644 = shl nuw i64 %643, 32
  %645 = zext i32 %615 to i64
  %646 = or i64 %644, %645
  %647 = shl nsw i64 %642, 32
  %648 = and i64 %635, 4294967295
  %649 = or i64 %647, %648
  %650 = bitcast %struct.SkIRect* %24 to i64*
  store i64 %646, i64* %650, align 8
  %651 = bitcast i32* %597 to i64*
  store i64 %649, i64* %651, align 8
  %652 = trunc i64 %642 to i32
  %653 = trunc i64 %635 to i32
  br label %654

654:                                              ; preds = %612, %602
  %655 = phi i64 [ %644, %612 ], [ %611, %602 ]
  %656 = phi i32 [ %653, %612 ], [ %609, %602 ]
  %657 = phi i32 [ %615, %612 ], [ %608, %602 ]
  %658 = phi i32 [ %652, %612 ], [ %607, %602 ]
  %659 = bitcast { i64, i64 }* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %659) #11
  %660 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i64 0, i32 1
  %661 = shl nsw i64 %546, 32
  %662 = and i64 %538, 4294967295
  %663 = or i64 %661, %662
  %664 = and i64 %554, 4294967295
  %665 = or i64 %655, %664
  %666 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i64 0, i32 0
  store i64 %663, i64* %666, align 8
  store i64 %665, i64* %660, align 8
  %667 = bitcast { i64, i64 }* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %667) #11
  %668 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i64 0, i32 1
  %669 = zext i32 %658 to i64
  %670 = shl nuw i64 %669, 32
  %671 = or i64 %670, %662
  %672 = shl nsw i64 %562, 32
  %673 = or i64 %672, %664
  %674 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i64 0, i32 0
  store i64 %671, i64* %674, align 8
  store i64 %673, i64* %668, align 8
  %675 = bitcast { i64, i64 }* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %675) #11
  %676 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i64 0, i32 1
  %677 = or i64 %655, %662
  %678 = zext i32 %657 to i64
  %679 = or i64 %670, %678
  %680 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i64 0, i32 0
  store i64 %677, i64* %680, align 8
  store i64 %679, i64* %676, align 8
  %681 = bitcast { i64, i64 }* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %681) #11
  %682 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i64 0, i32 1
  %683 = zext i32 %656 to i64
  %684 = or i64 %655, %683
  %685 = or i64 %670, %664
  %686 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i64 0, i32 0
  store i64 %684, i64* %686, align 8
  store i64 %685, i64* %682, align 8
  %687 = bitcast %struct.SkIPoint* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %687) #11
  %688 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %33, i64 0, i32 0
  %689 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %33, i64 0, i32 1
  %690 = sub nsw i32 %524, %528
  store i32 %690, i32* %688, align 4
  %691 = sub nsw i32 %526, %530
  store i32 %691, i32* %689, align 4
  call fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18filterBorderPixelsERK8SkBitmapPS1_R8SkIPointRK7SkIRectS9_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, %class.SkBitmap* nonnull dereferenceable(56) %20, %class.SkBitmap* nonnull %23, %struct.SkIPoint* nonnull dereferenceable(8) %33, %struct.SkIRect* nonnull dereferenceable(16) %26, %struct.SkIRect* nonnull dereferenceable(16) %16)
  call fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18filterBorderPixelsERK8SkBitmapPS1_R8SkIPointRK7SkIRectS9_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, %class.SkBitmap* nonnull dereferenceable(56) %20, %class.SkBitmap* nonnull %23, %struct.SkIPoint* nonnull dereferenceable(8) %33, %struct.SkIRect* nonnull dereferenceable(16) %30, %struct.SkIRect* nonnull dereferenceable(16) %16)
  %692 = load i32, i32* %163, align 8
  switch i32 %692, label %1072 [
    i32 2, label %693
    i32 1, label %693
    i32 0, label %694
    i32 3, label %694
  ]

693:                                              ; preds = %654, %654
  call fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter12filterPixelsINS_18RepeatPixelFetcherEEEvRK8SkBitmapPS3_R8SkIPointRK7SkIRectSB_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, %class.SkBitmap* nonnull dereferenceable(56) %20, %class.SkBitmap* nonnull %23, %struct.SkIPoint* nonnull dereferenceable(8) %33, %struct.SkIRect* nonnull dereferenceable(16) %24, %struct.SkIRect* nonnull dereferenceable(16) %16) #11
  br label %1072

694:                                              ; preds = %654, %654
  %695 = load i8, i8* %441, align 4, !range !2
  %696 = icmp eq i8 %695, 0
  br i1 %696, label %891, label %697

697:                                              ; preds = %694
  %698 = bitcast %struct.SkIRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %698) #11
  %699 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 0
  %700 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 2
  %701 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %698, i8* nonnull align 8 %596, i64 16, i1 false) #11
  %702 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %6, %struct.SkIRect* nonnull dereferenceable(16) %6, %struct.SkIRect* nonnull dereferenceable(16) %16) #11
  br i1 %702, label %703, label %890

703:                                              ; preds = %697
  %704 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 1
  %705 = load i32, i32* %704, align 4
  %706 = load i32, i32* %701, align 4
  %707 = icmp slt i32 %705, %706
  br i1 %707, label %708, label %890

708:                                              ; preds = %703
  %709 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 0
  %710 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 1
  %711 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1, i32 1
  %712 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1, i32 0
  %713 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6, i32 0
  %714 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6, i32 1
  %715 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 1
  %716 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 3
  %717 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 4
  %718 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 5
  %719 = load i32, i32* %700, align 4
  %720 = sext i32 %705 to i64
  br label %721

721:                                              ; preds = %755, %708
  %722 = phi i64 [ %758, %755 ], [ %720, %708 ]
  %723 = phi i32 [ %756, %755 ], [ %706, %708 ]
  %724 = phi i32 [ %757, %755 ], [ %719, %708 ]
  %725 = phi i32 [ %759, %755 ], [ %705, %708 ]
  %726 = load i32, i32* %699, align 4
  %727 = icmp slt i32 %726, %724
  br i1 %727, label %728, label %755

728:                                              ; preds = %721
  %729 = load i8*, i8** %709, align 8
  %730 = load i64, i64* %710, align 8
  %731 = sub nsw i32 %725, %691
  %732 = sext i32 %731 to i64
  %733 = mul i64 %730, %732
  %734 = getelementptr inbounds i8, i8* %729, i64 %733
  %735 = sub nsw i32 %726, %690
  %736 = shl i32 %735, 2
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i8, i8* %734, i64 %737
  %739 = bitcast i8* %738 to i32*
  %740 = sext i32 %726 to i64
  %741 = trunc i64 %722 to i32
  br label %742

742:                                              ; preds = %778, %728
  %743 = phi i64 [ %740, %728 ], [ %840, %778 ]
  %744 = phi i32* [ %739, %728 ], [ %839, %778 ]
  %745 = load i32, i32* %711, align 4
  %746 = icmp sgt i32 %745, 0
  br i1 %746, label %747, label %778

747:                                              ; preds = %742
  %748 = load i32, i32* %712, align 4
  %749 = icmp sgt i32 %748, 0
  %750 = load i8*, i8** %482, align 8
  %751 = load i64, i64* %715, align 8
  %752 = sext i32 %748 to i64
  br label %762

753:                                              ; preds = %778
  %754 = load i32, i32* %701, align 4
  br label %755

755:                                              ; preds = %753, %721
  %756 = phi i32 [ %754, %753 ], [ %723, %721 ]
  %757 = phi i32 [ %841, %753 ], [ %724, %721 ]
  %758 = add nsw i64 %722, 1
  %759 = add nsw i32 %725, 1
  %760 = sext i32 %756 to i64
  %761 = icmp slt i64 %758, %760
  br i1 %761, label %721, label %890

762:                                              ; preds = %844, %747
  %763 = phi float [ 0.000000e+00, %747 ], [ %848, %844 ]
  %764 = phi i32 [ 0, %747 ], [ %849, %844 ]
  %765 = phi float [ 0.000000e+00, %747 ], [ %847, %844 ]
  %766 = phi float [ 0.000000e+00, %747 ], [ %846, %844 ]
  %767 = phi float [ 0.000000e+00, %747 ], [ %845, %844 ]
  br i1 %749, label %768, label %844

768:                                              ; preds = %762
  %769 = load i32, i32* %713, align 8
  %770 = add nsw i32 %764, %741
  %771 = load i32, i32* %714, align 4
  %772 = sub i32 %770, %771
  %773 = sext i32 %772 to i64
  %774 = mul i64 %751, %773
  %775 = getelementptr inbounds i8, i8* %750, i64 %774
  %776 = load float*, float** %716, align 8
  %777 = mul nsw i32 %764, %748
  br label %851

778:                                              ; preds = %844, %742
  %779 = phi float [ 0.000000e+00, %742 ], [ %845, %844 ]
  %780 = phi float [ 0.000000e+00, %742 ], [ %846, %844 ]
  %781 = phi float [ 0.000000e+00, %742 ], [ %847, %844 ]
  %782 = phi float [ 0.000000e+00, %742 ], [ %848, %844 ]
  %783 = load float, float* %717, align 8
  %784 = fmul float %782, %783
  %785 = load float, float* %718, align 4
  %786 = fadd float %784, %785
  %787 = call float @llvm.floor.f32(float %786) #11
  %788 = fcmp olt float %787, 0x41DFFFFFE0000000
  %789 = select i1 %788, float %787, float 0x41DFFFFFE0000000
  %790 = fcmp ogt float %789, 0xC1DFFFFFE0000000
  %791 = select i1 %790, float %789, float 0xC1DFFFFFE0000000
  %792 = fptosi float %791 to i32
  %793 = icmp slt i32 %792, 255
  %794 = select i1 %793, i32 %792, i32 255
  %795 = icmp sgt i32 %794, 0
  %796 = select i1 %795, i32 %794, i32 0
  %797 = fmul float %779, %783
  %798 = fadd float %797, %785
  %799 = call float @llvm.floor.f32(float %798) #11
  %800 = fcmp olt float %799, 0x41DFFFFFE0000000
  %801 = select i1 %800, float %799, float 0x41DFFFFFE0000000
  %802 = fcmp ogt float %801, 0xC1DFFFFFE0000000
  %803 = select i1 %802, float %801, float 0xC1DFFFFFE0000000
  %804 = fptosi float %803 to i32
  %805 = icmp slt i32 %796, %804
  %806 = select i1 %805, i32 %796, i32 %804
  %807 = icmp sgt i32 %806, 0
  %808 = select i1 %807, i32 %806, i32 0
  %809 = fmul float %780, %783
  %810 = fadd float %809, %785
  %811 = call float @llvm.floor.f32(float %810) #11
  %812 = fcmp olt float %811, 0x41DFFFFFE0000000
  %813 = select i1 %812, float %811, float 0x41DFFFFFE0000000
  %814 = fcmp ogt float %813, 0xC1DFFFFFE0000000
  %815 = select i1 %814, float %813, float 0xC1DFFFFFE0000000
  %816 = fptosi float %815 to i32
  %817 = icmp slt i32 %796, %816
  %818 = select i1 %817, i32 %796, i32 %816
  %819 = icmp sgt i32 %818, 0
  %820 = select i1 %819, i32 %818, i32 0
  %821 = fmul float %781, %783
  %822 = fadd float %821, %785
  %823 = call float @llvm.floor.f32(float %822) #11
  %824 = fcmp olt float %823, 0x41DFFFFFE0000000
  %825 = select i1 %824, float %823, float 0x41DFFFFFE0000000
  %826 = fcmp ogt float %825, 0xC1DFFFFFE0000000
  %827 = select i1 %826, float %825, float 0xC1DFFFFFE0000000
  %828 = fptosi float %827 to i32
  %829 = icmp slt i32 %796, %828
  %830 = select i1 %829, i32 %796, i32 %828
  %831 = icmp sgt i32 %830, 0
  %832 = select i1 %831, i32 %830, i32 0
  %833 = shl i32 %796, 24
  %834 = shl i32 %808, 16
  %835 = shl i32 %820, 8
  %836 = or i32 %832, %833
  %837 = or i32 %836, %834
  %838 = or i32 %837, %835
  %839 = getelementptr inbounds i32, i32* %744, i64 1
  store i32 %838, i32* %744, align 4
  %840 = add nsw i64 %743, 1
  %841 = load i32, i32* %700, align 4
  %842 = sext i32 %841 to i64
  %843 = icmp slt i64 %840, %842
  br i1 %843, label %742, label %753

844:                                              ; preds = %851, %762
  %845 = phi float [ %767, %762 ], [ %878, %851 ]
  %846 = phi float [ %766, %762 ], [ %883, %851 ]
  %847 = phi float [ %765, %762 ], [ %887, %851 ]
  %848 = phi float [ %763, %762 ], [ %873, %851 ]
  %849 = add nuw nsw i32 %764, 1
  %850 = icmp eq i32 %849, %745
  br i1 %850, label %778, label %762

851:                                              ; preds = %851, %768
  %852 = phi i64 [ 0, %768 ], [ %888, %851 ]
  %853 = phi float [ %763, %768 ], [ %873, %851 ]
  %854 = phi float [ %765, %768 ], [ %887, %851 ]
  %855 = phi float [ %766, %768 ], [ %883, %851 ]
  %856 = phi float [ %767, %768 ], [ %878, %851 ]
  %857 = add nsw i64 %852, %743
  %858 = trunc i64 %857 to i32
  %859 = sub i32 %858, %769
  %860 = shl i32 %859, 2
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds i8, i8* %775, i64 %861
  %863 = bitcast i8* %862 to i32*
  %864 = load i32, i32* %863, align 4
  %865 = trunc i64 %852 to i32
  %866 = add nsw i32 %777, %865
  %867 = sext i32 %866 to i64
  %868 = getelementptr inbounds float, float* %776, i64 %867
  %869 = load float, float* %868, align 4
  %870 = lshr i32 %864, 24
  %871 = uitofp i32 %870 to float
  %872 = fmul float %869, %871
  %873 = fadd float %853, %872
  %874 = lshr i32 %864, 16
  %875 = and i32 %874, 255
  %876 = uitofp i32 %875 to float
  %877 = fmul float %869, %876
  %878 = fadd float %856, %877
  %879 = lshr i32 %864, 8
  %880 = and i32 %879, 255
  %881 = uitofp i32 %880 to float
  %882 = fmul float %869, %881
  %883 = fadd float %855, %882
  %884 = and i32 %864, 255
  %885 = uitofp i32 %884 to float
  %886 = fmul float %869, %885
  %887 = fadd float %854, %886
  %888 = add nuw nsw i64 %852, 1
  %889 = icmp eq i64 %888, %752
  br i1 %889, label %844, label %851

890:                                              ; preds = %755, %703, %697
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %698) #11
  br label %1072

891:                                              ; preds = %694
  %892 = bitcast %struct.SkIRect* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %892) #11
  %893 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %894 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %895 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %892, i8* nonnull align 8 %596, i64 16, i1 false) #11
  %896 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %5, %struct.SkIRect* nonnull dereferenceable(16) %5, %struct.SkIRect* nonnull dereferenceable(16) %16) #11
  br i1 %896, label %897, label %1071

897:                                              ; preds = %891
  %898 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %899 = load i32, i32* %898, align 4
  %900 = load i32, i32* %895, align 4
  %901 = icmp slt i32 %899, %900
  br i1 %901, label %902, label %1071

902:                                              ; preds = %897
  %903 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 0
  %904 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %23, i64 0, i32 1, i32 1
  %905 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1, i32 1
  %906 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 1, i32 0
  %907 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6, i32 0
  %908 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 6, i32 1
  %909 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %20, i64 0, i32 1, i32 1
  %910 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 3
  %911 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 4
  %912 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, i64 0, i32 5
  %913 = sext i32 %899 to i64
  %914 = load i32, i32* %894, align 4
  %915 = sext i32 %691 to i64
  br label %916

916:                                              ; preds = %951, %902
  %917 = phi i32 [ %900, %902 ], [ %952, %951 ]
  %918 = phi i32 [ %914, %902 ], [ %953, %951 ]
  %919 = phi i64 [ %913, %902 ], [ %954, %951 ]
  %920 = load i32, i32* %893, align 4
  %921 = icmp slt i32 %920, %918
  br i1 %921, label %922, label %951

922:                                              ; preds = %916
  %923 = load i8*, i8** %903, align 8
  %924 = load i64, i64* %904, align 8
  %925 = sub nsw i64 %919, %915
  %926 = mul i64 %924, %925
  %927 = getelementptr inbounds i8, i8* %923, i64 %926
  %928 = sub nsw i32 %920, %690
  %929 = shl i32 %928, 2
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i8, i8* %927, i64 %930
  %932 = bitcast i8* %931 to i32*
  %933 = sext i32 %920 to i64
  %934 = trunc i64 %919 to i32
  br label %935

935:                                              ; preds = %972, %922
  %936 = phi i64 [ %933, %922 ], [ %1027, %972 ]
  %937 = phi i32* [ %932, %922 ], [ %1026, %972 ]
  %938 = load i32, i32* %905, align 4
  %939 = icmp sgt i32 %938, 0
  br i1 %939, label %943, label %940

940:                                              ; preds = %935
  %941 = load i8*, i8** %482, align 8
  %942 = load i64, i64* %909, align 8
  br label %972

943:                                              ; preds = %935
  %944 = load i32, i32* %906, align 4
  %945 = icmp sgt i32 %944, 0
  %946 = load i8*, i8** %482, align 8
  %947 = load i64, i64* %909, align 8
  %948 = sext i32 %944 to i64
  br label %957

949:                                              ; preds = %972
  %950 = load i32, i32* %895, align 4
  br label %951

951:                                              ; preds = %949, %916
  %952 = phi i32 [ %950, %949 ], [ %917, %916 ]
  %953 = phi i32 [ %1028, %949 ], [ %918, %916 ]
  %954 = add nsw i64 %919, 1
  %955 = sext i32 %952 to i64
  %956 = icmp slt i64 %954, %955
  br i1 %956, label %916, label %1071

957:                                              ; preds = %1031, %943
  %958 = phi float [ 0.000000e+00, %943 ], [ %1034, %1031 ]
  %959 = phi i32 [ 0, %943 ], [ %1035, %1031 ]
  %960 = phi float [ 0.000000e+00, %943 ], [ %1033, %1031 ]
  %961 = phi float [ 0.000000e+00, %943 ], [ %1032, %1031 ]
  br i1 %945, label %962, label %1031

962:                                              ; preds = %957
  %963 = load i32, i32* %907, align 8
  %964 = add nsw i32 %959, %934
  %965 = load i32, i32* %908, align 4
  %966 = sub i32 %964, %965
  %967 = sext i32 %966 to i64
  %968 = mul i64 %947, %967
  %969 = getelementptr inbounds i8, i8* %946, i64 %968
  %970 = load float*, float** %910, align 8
  %971 = mul nsw i32 %959, %944
  br label %1037

972:                                              ; preds = %1031, %940
  %973 = phi i64 [ %942, %940 ], [ %947, %1031 ]
  %974 = phi i8* [ %941, %940 ], [ %946, %1031 ]
  %975 = phi float [ 0.000000e+00, %940 ], [ %1032, %1031 ]
  %976 = phi float [ 0.000000e+00, %940 ], [ %1033, %1031 ]
  %977 = phi float [ 0.000000e+00, %940 ], [ %1034, %1031 ]
  %978 = load float, float* %911, align 8
  %979 = fmul float %977, %978
  %980 = load float, float* %912, align 4
  %981 = fadd float %979, %980
  %982 = call float @llvm.floor.f32(float %981) #11
  %983 = fcmp olt float %982, 0x41DFFFFFE0000000
  %984 = select i1 %983, float %982, float 0x41DFFFFFE0000000
  %985 = fcmp ogt float %984, 0xC1DFFFFFE0000000
  %986 = select i1 %985, float %984, float 0xC1DFFFFFE0000000
  %987 = fptosi float %986 to i32
  %988 = icmp slt i32 %987, 255
  %989 = select i1 %988, i32 %987, i32 255
  %990 = icmp sgt i32 %989, 0
  %991 = select i1 %990, i32 %989, i32 0
  %992 = fmul float %975, %978
  %993 = fadd float %992, %980
  %994 = call float @llvm.floor.f32(float %993) #11
  %995 = fcmp olt float %994, 0x41DFFFFFE0000000
  %996 = select i1 %995, float %994, float 0x41DFFFFFE0000000
  %997 = fcmp ogt float %996, 0xC1DFFFFFE0000000
  %998 = select i1 %997, float %996, float 0xC1DFFFFFE0000000
  %999 = fptosi float %998 to i32
  %1000 = icmp slt i32 %999, 255
  %1001 = select i1 %1000, i32 %999, i32 255
  %1002 = icmp sgt i32 %1001, 0
  %1003 = select i1 %1002, i32 %1001, i32 0
  %1004 = fmul float %976, %978
  %1005 = fadd float %1004, %980
  %1006 = call float @llvm.floor.f32(float %1005) #11
  %1007 = fcmp olt float %1006, 0x41DFFFFFE0000000
  %1008 = select i1 %1007, float %1006, float 0x41DFFFFFE0000000
  %1009 = fcmp ogt float %1008, 0xC1DFFFFFE0000000
  %1010 = select i1 %1009, float %1008, float 0xC1DFFFFFE0000000
  %1011 = fptosi float %1010 to i32
  %1012 = icmp slt i32 %1011, 255
  %1013 = select i1 %1012, i32 %1011, i32 255
  %1014 = icmp sgt i32 %1013, 0
  %1015 = select i1 %1014, i32 %1013, i32 0
  %1016 = mul i64 %973, %919
  %1017 = getelementptr inbounds i8, i8* %974, i64 %1016
  %1018 = trunc i64 %936 to i32
  %1019 = shl i32 %1018, 2
  %1020 = sext i32 %1019 to i64
  %1021 = getelementptr inbounds i8, i8* %1017, i64 %1020
  %1022 = bitcast i8* %1021 to i32*
  %1023 = load i32, i32* %1022, align 4
  %1024 = lshr i32 %1023, 24
  %1025 = call i32 @_Z17SkPreMultiplyARGBjjjj(i32 %1024, i32 %991, i32 %1003, i32 %1015) #11
  %1026 = getelementptr inbounds i32, i32* %937, i64 1
  store i32 %1025, i32* %937, align 4
  %1027 = add nsw i64 %936, 1
  %1028 = load i32, i32* %894, align 4
  %1029 = sext i32 %1028 to i64
  %1030 = icmp slt i64 %1027, %1029
  br i1 %1030, label %935, label %949

1031:                                             ; preds = %1037, %957
  %1032 = phi float [ %961, %957 ], [ %1064, %1037 ]
  %1033 = phi float [ %960, %957 ], [ %1068, %1037 ]
  %1034 = phi float [ %958, %957 ], [ %1059, %1037 ]
  %1035 = add nuw nsw i32 %959, 1
  %1036 = icmp eq i32 %1035, %938
  br i1 %1036, label %972, label %957

1037:                                             ; preds = %1037, %962
  %1038 = phi i64 [ 0, %962 ], [ %1069, %1037 ]
  %1039 = phi float [ %958, %962 ], [ %1059, %1037 ]
  %1040 = phi float [ %960, %962 ], [ %1068, %1037 ]
  %1041 = phi float [ %961, %962 ], [ %1064, %1037 ]
  %1042 = add nsw i64 %1038, %936
  %1043 = trunc i64 %1042 to i32
  %1044 = sub i32 %1043, %963
  %1045 = shl i32 %1044, 2
  %1046 = sext i32 %1045 to i64
  %1047 = getelementptr inbounds i8, i8* %969, i64 %1046
  %1048 = bitcast i8* %1047 to i32*
  %1049 = load i32, i32* %1048, align 4
  %1050 = trunc i64 %1038 to i32
  %1051 = add nsw i32 %971, %1050
  %1052 = sext i32 %1051 to i64
  %1053 = getelementptr inbounds float, float* %970, i64 %1052
  %1054 = load float, float* %1053, align 4
  %1055 = lshr i32 %1049, 16
  %1056 = and i32 %1055, 255
  %1057 = uitofp i32 %1056 to float
  %1058 = fmul float %1054, %1057
  %1059 = fadd float %1039, %1058
  %1060 = lshr i32 %1049, 8
  %1061 = and i32 %1060, 255
  %1062 = uitofp i32 %1061 to float
  %1063 = fmul float %1054, %1062
  %1064 = fadd float %1041, %1063
  %1065 = and i32 %1049, 255
  %1066 = uitofp i32 %1065 to float
  %1067 = fmul float %1054, %1066
  %1068 = fadd float %1040, %1067
  %1069 = add nuw nsw i64 %1038, 1
  %1070 = icmp eq i64 %1069, %948
  br i1 %1070, label %1031, label %1037

1071:                                             ; preds = %951, %897, %891
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %892) #11
  br label %1072

1072:                                             ; preds = %654, %693, %890, %1071
  call fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18filterBorderPixelsERK8SkBitmapPS1_R8SkIPointRK7SkIRectS9_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, %class.SkBitmap* nonnull dereferenceable(56) %20, %class.SkBitmap* nonnull %23, %struct.SkIPoint* nonnull dereferenceable(8) %33, %struct.SkIRect* nonnull dereferenceable(16) %32, %struct.SkIRect* nonnull dereferenceable(16) %16)
  call fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18filterBorderPixelsERK8SkBitmapPS1_R8SkIPointRK7SkIRectS9_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %1, %class.SkBitmap* nonnull dereferenceable(56) %20, %class.SkBitmap* nonnull %23, %struct.SkIPoint* nonnull dereferenceable(8) %33, %struct.SkIRect* nonnull dereferenceable(16) %28, %struct.SkIRect* nonnull dereferenceable(16) %16)
  %1073 = bitcast { i64, i64 }* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1073) #11
  %1074 = load i32, i32* %64, align 4
  %1075 = load i32, i32* %62, align 4
  %1076 = sub i32 %1074, %1075
  %1077 = load i32, i32* %65, align 4
  %1078 = load i32, i32* %63, align 4
  %1079 = sub i32 %1077, %1078
  %1080 = zext i32 %1079 to i64
  %1081 = shl nuw i64 %1080, 32
  %1082 = zext i32 %1076 to i64
  %1083 = or i64 %1081, %1082
  %1084 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i64 0, i32 0
  store i64 0, i64* %1084, align 8
  %1085 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i64 0, i32 1
  store i64 %1083, i64* %1085, align 8
  %1086 = load %class.SkSpecialImage*, %class.SkSpecialImage** %178, align 8
  %1087 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %1086, i64 0, i32 1
  call void @_ZN14SkSpecialImage14MakeFromRasterERK7SkIRectRK8SkBitmapRK14SkSurfaceProps(%class.sk_sp.18* sret %0, %struct.SkIRect* nonnull dereferenceable(16) %35, %class.SkBitmap* nonnull dereferenceable(56) %23, %class.SkSurfaceProps* dereferenceable(8) %1087) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1073) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %687) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %681) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %675) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %667) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %659) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %596) #11
  br label %1088

1088:                                             ; preds = %1072, %521
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %23) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %511) #11
  %1089 = load %class.SkColorSpace*, %class.SkColorSpace** %489, align 8
  %1090 = icmp eq %class.SkColorSpace* %1089, null
  br i1 %1090, label %1097, label %1091

1091:                                             ; preds = %1088
  %1092 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %1089, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1093 = atomicrmw add i32* %1092, i32 -1 acq_rel
  %1094 = icmp eq i32 %1093, 1
  br i1 %1094, label %1095, label %1097

1095:                                             ; preds = %1091
  %1096 = bitcast %class.SkColorSpace* %1089 to i8*
  call void @_ZdlPv(i8* %1096) #10
  br label %1097

1097:                                             ; preds = %1088, %1091, %1095
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %488) #11
  br label %1098

1098:                                             ; preds = %1097, %485, %438, %432
  call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* nonnull %20) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %430) #11
  br label %1099

1099:                                             ; preds = %175, %428, %1098
  %1100 = phi i64 [ %193, %428 ], [ %71, %1098 ], [ %71, %175 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %151) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %113) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #11
  %1101 = icmp eq i64 %1100, 0
  br i1 %1101, label %1113, label %1102

1102:                                             ; preds = %1099
  %1103 = inttoptr i64 %1100 to %class.SkSpecialImage*
  %1104 = getelementptr inbounds %class.SkSpecialImage, %class.SkSpecialImage* %1103, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1105 = atomicrmw add i32* %1104, i32 -1 acq_rel
  %1106 = icmp eq i32 %1105, 1
  br i1 %1106, label %1107, label %1113

1107:                                             ; preds = %1102
  %1108 = inttoptr i64 %1100 to %class.SkRefCntBase*
  %1109 = inttoptr i64 %1100 to void (%class.SkRefCntBase*)***
  %1110 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %1109, align 8
  %1111 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %1110, i64 2
  %1112 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %1111, align 8
  call void %1112(%class.SkRefCntBase* nonnull %1108) #11
  br label %1113

1113:                                             ; preds = %110, %42, %1099, %1102, %1107
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #11
  ret void
}

declare { i64, i64 } @_ZNK18SkImageFilter_Base14onFilterBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS1_(%class.SkImageFilter_Base*, %struct.SkIRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), i32, %struct.SkIRect*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal { i64, i64 } @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18onFilterNodeBoundsERK7SkIRectRK8SkMatrixN13SkImageFilter12MapDirectionEPS2_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"*, %struct.SkIRect* dereferenceable(16), %class.SkMatrix* nocapture readnone dereferenceable(40), i32, %struct.SkIRect*) unnamed_addr #0 align 2 {
  %6 = icmp eq i32 %3, 1
  %7 = icmp ne %struct.SkIRect* %4, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %20

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 7
  %11 = load i32, i32* %10, align 8
  %12 = add i32 %11, -1
  %13 = icmp ult i32 %12, 2
  br i1 %13, label %14, label %20

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6
  %16 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1
  %17 = tail call { i64, i64 } @_ZN18SkImageFilter_Base25DetermineRepeatedSrcBoundERK7SkIRectRK8SkIPointRK7SkISizeS2_(%struct.SkIRect* dereferenceable(16) %1, %struct.SkIPoint* dereferenceable(8) %15, %struct.SkISize* dereferenceable(8) %16, %struct.SkIRect* nonnull dereferenceable(16) %4) #11
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = extractvalue { i64, i64 } %17, 1
  br label %87

20:                                               ; preds = %9, %5
  %21 = bitcast %struct.SkIRect* %1 to i64*
  %22 = load i64, i64* %21, align 4
  %23 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %1, i64 0, i32 2
  %24 = bitcast i32* %23 to i64*
  %25 = load i64, i64* %24, align 4
  %26 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, -1
  %29 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = add nsw i32 %30, -1
  %32 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %33 = load i32, i32* %32, align 8
  br i1 %6, label %34, label %41

34:                                               ; preds = %20
  %35 = sub nsw i32 0, %33
  %36 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub nsw i32 0, %37
  %39 = sub nsw i32 %28, %33
  %40 = sub nsw i32 %31, %37
  br label %46

41:                                               ; preds = %20
  %42 = sub nsw i32 %33, %28
  %43 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = sub nsw i32 %44, %31
  br label %46

46:                                               ; preds = %41, %34
  %47 = phi i32 [ %42, %41 ], [ %35, %34 ]
  %48 = phi i32 [ %45, %41 ], [ %38, %34 ]
  %49 = phi i32 [ %33, %41 ], [ %39, %34 ]
  %50 = phi i32 [ %44, %41 ], [ %40, %34 ]
  %51 = shl i64 %22, 32
  %52 = ashr exact i64 %51, 32
  %53 = sext i32 %47 to i64
  %54 = add nsw i64 %52, %53
  %55 = icmp slt i64 %54, 2147483647
  %56 = select i1 %55, i64 %54, i64 2147483647
  %57 = icmp sgt i64 %56, -2147483647
  %58 = select i1 %57, i64 %56, i64 -2147483647
  %59 = ashr i64 %22, 32
  %60 = sext i32 %48 to i64
  %61 = add nsw i64 %59, %60
  %62 = icmp slt i64 %61, 2147483647
  %63 = select i1 %62, i64 %61, i64 2147483647
  %64 = icmp sgt i64 %63, -2147483647
  %65 = select i1 %64, i64 %63, i64 -2147483647
  %66 = shl i64 %25, 32
  %67 = ashr exact i64 %66, 32
  %68 = sext i32 %49 to i64
  %69 = add nsw i64 %67, %68
  %70 = icmp slt i64 %69, 2147483647
  %71 = select i1 %70, i64 %69, i64 2147483647
  %72 = icmp sgt i64 %71, -2147483647
  %73 = select i1 %72, i64 %71, i64 -2147483647
  %74 = and i64 %73, 4294967295
  %75 = ashr i64 %25, 32
  %76 = sext i32 %50 to i64
  %77 = add nsw i64 %75, %76
  %78 = icmp slt i64 %77, 2147483647
  %79 = select i1 %78, i64 %77, i64 2147483647
  %80 = icmp sgt i64 %79, -2147483647
  %81 = select i1 %80, i64 %79, i64 -2147483647
  %82 = shl nsw i64 %81, 32
  %83 = or i64 %82, %74
  %84 = shl nsw i64 %65, 32
  %85 = and i64 %58, 4294967295
  %86 = or i64 %85, %84
  br label %87

87:                                               ; preds = %46, %14
  %88 = phi i64 [ %18, %14 ], [ %86, %46 ]
  %89 = phi i64 [ %19, %14 ], [ %83, %46 ]
  %90 = insertvalue { i64, i64 } undef, i64 %88, 0
  %91 = insertvalue { i64, i64 } %90, i64 %89, 1
  ret { i64, i64 } %91
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK18SkImageFilter_Base19onIsColorFilterNodeEPP13SkColorFilter(%class.SkImageFilter_Base*, %class.SkColorFilter**) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK18SkImageFilter_Base21onCanHandleComplexCTMEv(%class.SkImageFilter_Base*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter23affectsTransparentBlackEv(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = icmp ugt i32 %4, 1
  ret i1 %5
}

declare void @_ZNK18SkImageFilter_Base13onFilterImageERKN4skif7ContextE() unnamed_addr

declare { i64, i64 } @_ZNK18SkImageFilter_Base21onGetInputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEES8_NS_13VisitChildrenE(%class.SkImageFilter_Base*, %"class.skif::Mapping"* dereferenceable(80), %"class.skif::LayerSpace"* dereferenceable(16), %"class.skif::LayerSpace"* dereferenceable(16), i1 zeroext) unnamed_addr #2

declare { i64, i64 } @_ZNK18SkImageFilter_Base22onGetOutputLayerBoundsERKN4skif7MappingERKNS0_10LayerSpaceI7SkIRectEE(%class.SkImageFilter_Base*, %"class.skif::Mapping"* dereferenceable(80), %"class.skif::LayerSpace"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN18SkImageFilter_BaseD2Ev(%class.SkImageFilter_Base*) unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZNK18SkImageFilter_Base7flattenER13SkWriteBuffer(%class.SkImageFilter_Base*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZNK18SkImageFilter_Base19applyCropRectAndPadERKN4skif7ContextEP14SkSpecialImageP8SkIPointP7SkIRect(%class.sk_sp.18* sret, %class.SkImageFilter_Base*, %"class.skif::Context"* dereferenceable(136), %class.SkSpecialImage*, %struct.SkIPoint*, %struct.SkIRect*) local_unnamed_addr #2

declare void @_ZNK18SkImageFilter_Base10mapContextERKN4skif7ContextE(%"class.skif::Context"* sret, %class.SkImageFilter_Base*, %"class.skif::Context"* dereferenceable(136)) local_unnamed_addr #2

declare { i64, i64 } @_ZN18SkImageFilter_Base25DetermineRepeatedSrcBoundERK7SkIRectRK8SkIPointRK7SkISizeS2_(%struct.SkIRect* dereferenceable(16), %struct.SkIPoint* dereferenceable(8), %struct.SkISize* dereferenceable(8), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN18SkImageFilter_Base17ImageToColorSpaceEP14SkSpecialImage11SkColorTypeP12SkColorSpaceRK14SkSurfaceProps(%class.sk_sp.18* sret, %class.SkSpecialImage*, i32, %class.SkColorSpace*, %class.SkSurfaceProps* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK14SkSpecialImage4viewEP18GrRecordingContext(%class.GrSurfaceProxyView* sret, %class.SkSpecialImage*, %class.GrRecordingContext*) local_unnamed_addr #2

declare %class.GrFragmentProcessor* @_ZN25GrMatrixConvolutionEffect4MakeEP18GrRecordingContext18GrSurfaceProxyViewRK7SkIRectRK7SkISizePKfffRK8SkIPointN14GrSamplerState8WrapModeEbRK6GrCaps(%class.GrRecordingContext*, %class.GrSurfaceProxyView*, %struct.SkIRect* dereferenceable(16), %struct.SkISize* dereferenceable(8), float*, float, float, %struct.SkIPoint* dereferenceable(8), i8 zeroext, i1 zeroext, %class.GrCaps* dereferenceable(232)) local_unnamed_addr #2

declare void @_ZN18SkImageFilter_Base10DrawWithFPEP18GrRecordingContextNSt3__110unique_ptrI19GrFragmentProcessorNS2_14default_deleteIS4_EEEERK7SkIRect11SkColorTypePK12SkColorSpaceRK14SkSurfaceProps11GrProtected(%class.sk_sp.18* sret, %class.GrRecordingContext*, %class.GrFragmentProcessor*, %struct.SkIRect* dereferenceable(16), i32, %class.SkColorSpace*, %class.SkSurfaceProps* dereferenceable(8), i1 zeroext) local_unnamed_addr #2

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare zeroext i1 @_ZNK14SkSpecialImage11getROPixelsEP8SkBitmap(%class.SkSpecialImage*, %class.SkBitmap*) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkBitmap10readPixelsERK11SkImageInfoPvmii(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter18filterBorderPixelsERK8SkBitmapPS1_R8SkIPointRK7SkIRectS9_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* readonly, %class.SkBitmap* nocapture readonly dereferenceable(56), %class.SkBitmap* nocapture readonly, %struct.SkIPoint* nocapture readonly dereferenceable(8), %struct.SkIRect* nocapture readonly dereferenceable(16), %struct.SkIRect* dereferenceable(16)) unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkIRect, align 4
  %8 = alloca %struct.SkIRect, align 4
  %9 = alloca %struct.SkIRect, align 4
  %10 = alloca %struct.SkIRect, align 4
  %11 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 7
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %900 [
    i32 0, label %13
    i32 2, label %456
    i32 1, label %456
    i32 3, label %457
  ]

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 8
  %15 = load i8, i8* %14, align 4, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %231, label %17

17:                                               ; preds = %13
  %18 = bitcast %struct.SkIRect* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #11
  %19 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 0
  %20 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 2
  %21 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 3
  %22 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %18, i8* align 4 %22, i64 16, i1 false) #11
  %23 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %10, %struct.SkIRect* nonnull dereferenceable(16) %10, %struct.SkIRect* dereferenceable(16) %5) #11
  br i1 %23, label %24, label %230

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %10, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = load i32, i32* %21, align 4
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %29, label %230

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  %31 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  %32 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 0
  %33 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 1
  %34 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %35 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %36 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %37 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %38 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %39 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %40 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %41 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %42 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 0
  %43 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 1
  %44 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %45 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %46 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %47 = load i32, i32* %20, align 4
  %48 = sext i32 %26 to i64
  br label %49

49:                                               ; preds = %90, %29
  %50 = phi i64 [ %93, %90 ], [ %48, %29 ]
  %51 = phi i32 [ %91, %90 ], [ %27, %29 ]
  %52 = phi i32 [ %92, %90 ], [ %47, %29 ]
  %53 = load i32, i32* %19, align 4
  %54 = icmp slt i32 %53, %52
  br i1 %54, label %55, label %90

55:                                               ; preds = %49
  %56 = load i8*, i8** %32, align 8
  %57 = load i64, i64* %33, align 8
  %58 = load i32, i32* %31, align 4
  %59 = sext i32 %58 to i64
  %60 = sub nsw i64 %50, %59
  %61 = mul i64 %60, %57
  %62 = getelementptr inbounds i8, i8* %56, i64 %61
  %63 = load i32, i32* %30, align 4
  %64 = sub nsw i32 %53, %63
  %65 = shl i32 %64, 2
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %62, i64 %66
  %68 = bitcast i8* %67 to i32*
  br label %69

69:                                               ; preds = %118, %55
  %70 = phi i32* [ %179, %118 ], [ %68, %55 ]
  %71 = phi i32 [ %180, %118 ], [ %53, %55 ]
  %72 = load i32, i32* %34, align 4
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %118

74:                                               ; preds = %69
  %75 = load i32, i32* %35, align 4
  %76 = icmp sgt i32 %75, 0
  %77 = load i32, i32* %39, align 4
  %78 = add nsw i32 %77, -1
  %79 = load i32, i32* %38, align 4
  %80 = load i32, i32* %41, align 4
  %81 = add nsw i32 %80, -1
  %82 = load i32, i32* %40, align 4
  %83 = load i8*, i8** %42, align 8
  %84 = load i64, i64* %43, align 8
  %85 = sext i32 %75 to i64
  %86 = zext i32 %72 to i64
  %87 = zext i32 %75 to i64
  br label %96

88:                                               ; preds = %118
  %89 = load i32, i32* %21, align 4
  br label %90

90:                                               ; preds = %88, %49
  %91 = phi i32 [ %89, %88 ], [ %51, %49 ]
  %92 = phi i32 [ %181, %88 ], [ %52, %49 ]
  %93 = add nsw i64 %50, 1
  %94 = sext i32 %91 to i64
  %95 = icmp slt i64 %93, %94
  br i1 %95, label %49, label %230

96:                                               ; preds = %183, %74
  %97 = phi i64 [ %188, %183 ], [ 0, %74 ]
  %98 = phi float [ %187, %183 ], [ 0.000000e+00, %74 ]
  %99 = phi float [ %186, %183 ], [ 0.000000e+00, %74 ]
  %100 = phi float [ %185, %183 ], [ 0.000000e+00, %74 ]
  %101 = phi float [ %184, %183 ], [ 0.000000e+00, %74 ]
  br i1 %76, label %102, label %183

102:                                              ; preds = %96
  %103 = load i32, i32* %36, align 8
  %104 = add nsw i64 %97, %50
  %105 = load i32, i32* %37, align 4
  %106 = trunc i64 %104 to i32
  %107 = sub i32 %106, %105
  %108 = icmp sgt i32 %80, %107
  %109 = select i1 %108, i32 %107, i32 %81
  %110 = icmp slt i32 %82, %109
  %111 = select i1 %110, i32 %109, i32 %82
  %112 = sext i32 %111 to i64
  %113 = mul i64 %84, %112
  %114 = getelementptr inbounds i8, i8* %83, i64 %113
  %115 = load float*, float** %44, align 8
  %116 = mul nsw i64 %97, %85
  %117 = sub i32 %71, %103
  br label %190

118:                                              ; preds = %183, %69
  %119 = phi float [ 0.000000e+00, %69 ], [ %184, %183 ]
  %120 = phi float [ 0.000000e+00, %69 ], [ %185, %183 ]
  %121 = phi float [ 0.000000e+00, %69 ], [ %186, %183 ]
  %122 = phi float [ 0.000000e+00, %69 ], [ %187, %183 ]
  %123 = load float, float* %45, align 8
  %124 = fmul float %122, %123
  %125 = load float, float* %46, align 4
  %126 = fadd float %124, %125
  %127 = call float @llvm.floor.f32(float %126) #11
  %128 = fcmp olt float %127, 0x41DFFFFFE0000000
  %129 = select i1 %128, float %127, float 0x41DFFFFFE0000000
  %130 = fcmp ogt float %129, 0xC1DFFFFFE0000000
  %131 = select i1 %130, float %129, float 0xC1DFFFFFE0000000
  %132 = fptosi float %131 to i32
  %133 = icmp slt i32 %132, 255
  %134 = select i1 %133, i32 %132, i32 255
  %135 = icmp sgt i32 %134, 0
  %136 = select i1 %135, i32 %134, i32 0
  %137 = fmul float %119, %123
  %138 = fadd float %137, %125
  %139 = call float @llvm.floor.f32(float %138) #11
  %140 = fcmp olt float %139, 0x41DFFFFFE0000000
  %141 = select i1 %140, float %139, float 0x41DFFFFFE0000000
  %142 = fcmp ogt float %141, 0xC1DFFFFFE0000000
  %143 = select i1 %142, float %141, float 0xC1DFFFFFE0000000
  %144 = fptosi float %143 to i32
  %145 = icmp slt i32 %136, %144
  %146 = select i1 %145, i32 %136, i32 %144
  %147 = icmp sgt i32 %146, 0
  %148 = select i1 %147, i32 %146, i32 0
  %149 = fmul float %120, %123
  %150 = fadd float %149, %125
  %151 = call float @llvm.floor.f32(float %150) #11
  %152 = fcmp olt float %151, 0x41DFFFFFE0000000
  %153 = select i1 %152, float %151, float 0x41DFFFFFE0000000
  %154 = fcmp ogt float %153, 0xC1DFFFFFE0000000
  %155 = select i1 %154, float %153, float 0xC1DFFFFFE0000000
  %156 = fptosi float %155 to i32
  %157 = icmp slt i32 %136, %156
  %158 = select i1 %157, i32 %136, i32 %156
  %159 = icmp sgt i32 %158, 0
  %160 = select i1 %159, i32 %158, i32 0
  %161 = fmul float %121, %123
  %162 = fadd float %161, %125
  %163 = call float @llvm.floor.f32(float %162) #11
  %164 = fcmp olt float %163, 0x41DFFFFFE0000000
  %165 = select i1 %164, float %163, float 0x41DFFFFFE0000000
  %166 = fcmp ogt float %165, 0xC1DFFFFFE0000000
  %167 = select i1 %166, float %165, float 0xC1DFFFFFE0000000
  %168 = fptosi float %167 to i32
  %169 = icmp slt i32 %136, %168
  %170 = select i1 %169, i32 %136, i32 %168
  %171 = icmp sgt i32 %170, 0
  %172 = select i1 %171, i32 %170, i32 0
  %173 = shl i32 %136, 24
  %174 = shl i32 %148, 16
  %175 = shl i32 %160, 8
  %176 = or i32 %172, %173
  %177 = or i32 %176, %174
  %178 = or i32 %177, %175
  %179 = getelementptr inbounds i32, i32* %70, i64 1
  store i32 %178, i32* %70, align 4
  %180 = add nsw i32 %71, 1
  %181 = load i32, i32* %20, align 4
  %182 = icmp slt i32 %180, %181
  br i1 %182, label %69, label %88

183:                                              ; preds = %190, %96
  %184 = phi float [ %101, %96 ], [ %218, %190 ]
  %185 = phi float [ %100, %96 ], [ %223, %190 ]
  %186 = phi float [ %99, %96 ], [ %227, %190 ]
  %187 = phi float [ %98, %96 ], [ %213, %190 ]
  %188 = add nuw nsw i64 %97, 1
  %189 = icmp eq i64 %188, %86
  br i1 %189, label %118, label %96

190:                                              ; preds = %190, %102
  %191 = phi i64 [ %228, %190 ], [ 0, %102 ]
  %192 = phi float [ %213, %190 ], [ %98, %102 ]
  %193 = phi float [ %227, %190 ], [ %99, %102 ]
  %194 = phi float [ %223, %190 ], [ %100, %102 ]
  %195 = phi float [ %218, %190 ], [ %101, %102 ]
  %196 = trunc i64 %191 to i32
  %197 = add i32 %117, %196
  %198 = icmp sgt i32 %77, %197
  %199 = select i1 %198, i32 %197, i32 %78
  %200 = icmp slt i32 %79, %199
  %201 = select i1 %200, i32 %199, i32 %79
  %202 = shl i32 %201, 2
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %114, i64 %203
  %205 = bitcast i8* %204 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = add nsw i64 %191, %116
  %208 = getelementptr inbounds float, float* %115, i64 %207
  %209 = load float, float* %208, align 4
  %210 = lshr i32 %206, 24
  %211 = uitofp i32 %210 to float
  %212 = fmul float %209, %211
  %213 = fadd float %192, %212
  %214 = lshr i32 %206, 16
  %215 = and i32 %214, 255
  %216 = uitofp i32 %215 to float
  %217 = fmul float %209, %216
  %218 = fadd float %195, %217
  %219 = lshr i32 %206, 8
  %220 = and i32 %219, 255
  %221 = uitofp i32 %220 to float
  %222 = fmul float %209, %221
  %223 = fadd float %194, %222
  %224 = and i32 %206, 255
  %225 = uitofp i32 %224 to float
  %226 = fmul float %209, %225
  %227 = fadd float %193, %226
  %228 = add nuw nsw i64 %191, 1
  %229 = icmp eq i64 %228, %87
  br i1 %229, label %183, label %190

230:                                              ; preds = %90, %24, %17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #11
  br label %900

231:                                              ; preds = %13
  %232 = bitcast %struct.SkIRect* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %232) #11
  %233 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 0
  %234 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 2
  %235 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 3
  %236 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %232, i8* align 4 %236, i64 16, i1 false) #11
  %237 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %9, %struct.SkIRect* nonnull dereferenceable(16) %9, %struct.SkIRect* dereferenceable(16) %5) #11
  br i1 %237, label %238, label %455

238:                                              ; preds = %231
  %239 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 1
  %240 = load i32, i32* %239, align 4
  %241 = load i32, i32* %235, align 4
  %242 = icmp slt i32 %240, %241
  br i1 %242, label %243, label %455

243:                                              ; preds = %238
  %244 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  %245 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  %246 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 0
  %247 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 1
  %248 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %249 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %250 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %251 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %252 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %253 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %254 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %255 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %256 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 0
  %257 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 1
  %258 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %259 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %260 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %261 = load i32, i32* %234, align 4
  %262 = sext i32 %240 to i64
  br label %263

263:                                              ; preds = %314, %243
  %264 = phi i64 [ %317, %314 ], [ %262, %243 ]
  %265 = phi i32 [ %315, %314 ], [ %241, %243 ]
  %266 = phi i32 [ %316, %314 ], [ %261, %243 ]
  %267 = load i32, i32* %233, align 4
  %268 = icmp slt i32 %267, %266
  br i1 %268, label %269, label %314

269:                                              ; preds = %263
  %270 = load i8*, i8** %246, align 8
  %271 = load i64, i64* %247, align 8
  %272 = load i32, i32* %245, align 4
  %273 = sext i32 %272 to i64
  %274 = sub nsw i64 %264, %273
  %275 = mul i64 %274, %271
  %276 = getelementptr inbounds i8, i8* %270, i64 %275
  %277 = load i32, i32* %244, align 4
  %278 = sub nsw i32 %267, %277
  %279 = shl i32 %278, 2
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds i8, i8* %276, i64 %280
  %282 = bitcast i8* %281 to i32*
  %283 = trunc i64 %264 to i32
  br label %284

284:                                              ; preds = %341, %269
  %285 = phi i32* [ %410, %341 ], [ %282, %269 ]
  %286 = phi i32 [ %411, %341 ], [ %267, %269 ]
  %287 = load i32, i32* %248, align 4
  %288 = icmp sgt i32 %287, 0
  br i1 %288, label %298, label %289

289:                                              ; preds = %284
  %290 = load i32, i32* %253, align 4
  %291 = load i32, i32* %252, align 4
  %292 = load i32, i32* %255, align 4
  %293 = load i32, i32* %254, align 4
  %294 = load i8*, i8** %256, align 8
  %295 = load i64, i64* %257, align 8
  %296 = add nsw i32 %290, -1
  %297 = add nsw i32 %292, -1
  br label %341

298:                                              ; preds = %284
  %299 = load i32, i32* %249, align 4
  %300 = icmp sgt i32 %299, 0
  %301 = load i32, i32* %253, align 4
  %302 = add nsw i32 %301, -1
  %303 = load i32, i32* %252, align 4
  %304 = load i32, i32* %255, align 4
  %305 = add nsw i32 %304, -1
  %306 = load i32, i32* %254, align 4
  %307 = load i8*, i8** %256, align 8
  %308 = load i64, i64* %257, align 8
  %309 = sext i32 %299 to i64
  %310 = zext i32 %287 to i64
  %311 = zext i32 %299 to i64
  br label %320

312:                                              ; preds = %341
  %313 = load i32, i32* %235, align 4
  br label %314

314:                                              ; preds = %312, %263
  %315 = phi i32 [ %313, %312 ], [ %265, %263 ]
  %316 = phi i32 [ %412, %312 ], [ %266, %263 ]
  %317 = add nsw i64 %264, 1
  %318 = sext i32 %315 to i64
  %319 = icmp slt i64 %317, %318
  br i1 %319, label %263, label %455

320:                                              ; preds = %414, %298
  %321 = phi i64 [ %418, %414 ], [ 0, %298 ]
  %322 = phi float [ %417, %414 ], [ 0.000000e+00, %298 ]
  %323 = phi float [ %416, %414 ], [ 0.000000e+00, %298 ]
  %324 = phi float [ %415, %414 ], [ 0.000000e+00, %298 ]
  br i1 %300, label %325, label %414

325:                                              ; preds = %320
  %326 = load i32, i32* %250, align 8
  %327 = add nsw i64 %321, %264
  %328 = load i32, i32* %251, align 4
  %329 = trunc i64 %327 to i32
  %330 = sub i32 %329, %328
  %331 = icmp sgt i32 %304, %330
  %332 = select i1 %331, i32 %330, i32 %305
  %333 = icmp slt i32 %306, %332
  %334 = select i1 %333, i32 %332, i32 %306
  %335 = sext i32 %334 to i64
  %336 = mul i64 %308, %335
  %337 = getelementptr inbounds i8, i8* %307, i64 %336
  %338 = load float*, float** %258, align 8
  %339 = mul nsw i64 %321, %309
  %340 = sub i32 %286, %326
  br label %420

341:                                              ; preds = %414, %289
  %342 = phi i32 [ %297, %289 ], [ %305, %414 ]
  %343 = phi i32 [ %296, %289 ], [ %302, %414 ]
  %344 = phi i64 [ %295, %289 ], [ %308, %414 ]
  %345 = phi i8* [ %294, %289 ], [ %307, %414 ]
  %346 = phi i32 [ %293, %289 ], [ %306, %414 ]
  %347 = phi i32 [ %292, %289 ], [ %304, %414 ]
  %348 = phi i32 [ %291, %289 ], [ %303, %414 ]
  %349 = phi i32 [ %290, %289 ], [ %301, %414 ]
  %350 = phi float [ 0.000000e+00, %289 ], [ %415, %414 ]
  %351 = phi float [ 0.000000e+00, %289 ], [ %416, %414 ]
  %352 = phi float [ 0.000000e+00, %289 ], [ %417, %414 ]
  %353 = load float, float* %259, align 8
  %354 = fmul float %352, %353
  %355 = load float, float* %260, align 4
  %356 = fadd float %354, %355
  %357 = call float @llvm.floor.f32(float %356) #11
  %358 = fcmp olt float %357, 0x41DFFFFFE0000000
  %359 = select i1 %358, float %357, float 0x41DFFFFFE0000000
  %360 = fcmp ogt float %359, 0xC1DFFFFFE0000000
  %361 = select i1 %360, float %359, float 0xC1DFFFFFE0000000
  %362 = fptosi float %361 to i32
  %363 = icmp slt i32 %362, 255
  %364 = select i1 %363, i32 %362, i32 255
  %365 = icmp sgt i32 %364, 0
  %366 = select i1 %365, i32 %364, i32 0
  %367 = fmul float %350, %353
  %368 = fadd float %367, %355
  %369 = call float @llvm.floor.f32(float %368) #11
  %370 = fcmp olt float %369, 0x41DFFFFFE0000000
  %371 = select i1 %370, float %369, float 0x41DFFFFFE0000000
  %372 = fcmp ogt float %371, 0xC1DFFFFFE0000000
  %373 = select i1 %372, float %371, float 0xC1DFFFFFE0000000
  %374 = fptosi float %373 to i32
  %375 = icmp slt i32 %374, 255
  %376 = select i1 %375, i32 %374, i32 255
  %377 = icmp sgt i32 %376, 0
  %378 = select i1 %377, i32 %376, i32 0
  %379 = fmul float %351, %353
  %380 = fadd float %379, %355
  %381 = call float @llvm.floor.f32(float %380) #11
  %382 = fcmp olt float %381, 0x41DFFFFFE0000000
  %383 = select i1 %382, float %381, float 0x41DFFFFFE0000000
  %384 = fcmp ogt float %383, 0xC1DFFFFFE0000000
  %385 = select i1 %384, float %383, float 0xC1DFFFFFE0000000
  %386 = fptosi float %385 to i32
  %387 = icmp slt i32 %386, 255
  %388 = select i1 %387, i32 %386, i32 255
  %389 = icmp sgt i32 %388, 0
  %390 = select i1 %389, i32 %388, i32 0
  %391 = icmp sgt i32 %349, %286
  %392 = select i1 %391, i32 %286, i32 %343
  %393 = icmp slt i32 %348, %392
  %394 = select i1 %393, i32 %392, i32 %348
  %395 = sext i32 %347 to i64
  %396 = icmp slt i64 %264, %395
  %397 = select i1 %396, i32 %283, i32 %342
  %398 = icmp slt i32 %346, %397
  %399 = select i1 %398, i32 %397, i32 %346
  %400 = sext i32 %399 to i64
  %401 = mul i64 %344, %400
  %402 = getelementptr inbounds i8, i8* %345, i64 %401
  %403 = shl i32 %394, 2
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %402, i64 %404
  %406 = bitcast i8* %405 to i32*
  %407 = load i32, i32* %406, align 4
  %408 = lshr i32 %407, 24
  %409 = call i32 @_Z17SkPreMultiplyARGBjjjj(i32 %408, i32 %366, i32 %378, i32 %390) #11
  %410 = getelementptr inbounds i32, i32* %285, i64 1
  store i32 %409, i32* %285, align 4
  %411 = add nsw i32 %286, 1
  %412 = load i32, i32* %234, align 4
  %413 = icmp slt i32 %411, %412
  br i1 %413, label %284, label %312

414:                                              ; preds = %420, %320
  %415 = phi float [ %324, %320 ], [ %448, %420 ]
  %416 = phi float [ %323, %320 ], [ %452, %420 ]
  %417 = phi float [ %322, %320 ], [ %443, %420 ]
  %418 = add nuw nsw i64 %321, 1
  %419 = icmp eq i64 %418, %310
  br i1 %419, label %341, label %320

420:                                              ; preds = %420, %325
  %421 = phi i64 [ %453, %420 ], [ 0, %325 ]
  %422 = phi float [ %443, %420 ], [ %322, %325 ]
  %423 = phi float [ %452, %420 ], [ %323, %325 ]
  %424 = phi float [ %448, %420 ], [ %324, %325 ]
  %425 = trunc i64 %421 to i32
  %426 = add i32 %340, %425
  %427 = icmp sgt i32 %301, %426
  %428 = select i1 %427, i32 %426, i32 %302
  %429 = icmp slt i32 %303, %428
  %430 = select i1 %429, i32 %428, i32 %303
  %431 = shl i32 %430, 2
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %337, i64 %432
  %434 = bitcast i8* %433 to i32*
  %435 = load i32, i32* %434, align 4
  %436 = add nsw i64 %421, %339
  %437 = getelementptr inbounds float, float* %338, i64 %436
  %438 = load float, float* %437, align 4
  %439 = lshr i32 %435, 16
  %440 = and i32 %439, 255
  %441 = uitofp i32 %440 to float
  %442 = fmul float %438, %441
  %443 = fadd float %422, %442
  %444 = lshr i32 %435, 8
  %445 = and i32 %444, 255
  %446 = uitofp i32 %445 to float
  %447 = fmul float %438, %446
  %448 = fadd float %424, %447
  %449 = and i32 %435, 255
  %450 = uitofp i32 %449 to float
  %451 = fmul float %438, %450
  %452 = fadd float %423, %451
  %453 = add nuw nsw i64 %421, 1
  %454 = icmp eq i64 %453, %311
  br i1 %454, label %414, label %420

455:                                              ; preds = %314, %238, %231
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %232) #11
  br label %900

456:                                              ; preds = %6, %6
  tail call fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter12filterPixelsINS_18RepeatPixelFetcherEEEvRK8SkBitmapPS3_R8SkIPointRK7SkIRectSB_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, %class.SkBitmap* dereferenceable(56) %1, %class.SkBitmap* %2, %struct.SkIPoint* dereferenceable(8) %3, %struct.SkIRect* dereferenceable(16) %4, %struct.SkIRect* dereferenceable(16) %5)
  br label %900

457:                                              ; preds = %6
  %458 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 8
  %459 = load i8, i8* %458, align 4, !range !2
  %460 = icmp eq i8 %459, 0
  br i1 %460, label %674, label %461

461:                                              ; preds = %457
  %462 = bitcast %struct.SkIRect* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %462) #11
  %463 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 0
  %464 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 2
  %465 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  %466 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %462, i8* align 4 %466, i64 16, i1 false) #11
  %467 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %8, %struct.SkIRect* nonnull dereferenceable(16) %8, %struct.SkIRect* dereferenceable(16) %5) #11
  br i1 %467, label %468, label %673

468:                                              ; preds = %461
  %469 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %470 = load i32, i32* %469, align 4
  %471 = load i32, i32* %465, align 4
  %472 = icmp slt i32 %470, %471
  br i1 %472, label %473, label %673

473:                                              ; preds = %468
  %474 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  %475 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  %476 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 0
  %477 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 1
  %478 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %479 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %480 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %481 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %482 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %483 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %484 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %485 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %486 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 0
  %487 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 1
  %488 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %489 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %490 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %491 = load i32, i32* %464, align 4
  br label %492

492:                                              ; preds = %530, %473
  %493 = phi i32 [ %471, %473 ], [ %531, %530 ]
  %494 = phi i32 [ %491, %473 ], [ %532, %530 ]
  %495 = phi i32 [ %470, %473 ], [ %533, %530 ]
  %496 = load i32, i32* %463, align 4
  %497 = icmp slt i32 %496, %494
  br i1 %497, label %498, label %530

498:                                              ; preds = %492
  %499 = load i8*, i8** %476, align 8
  %500 = load i64, i64* %477, align 8
  %501 = load i32, i32* %475, align 4
  %502 = sub nsw i32 %495, %501
  %503 = sext i32 %502 to i64
  %504 = mul i64 %500, %503
  %505 = getelementptr inbounds i8, i8* %499, i64 %504
  %506 = load i32, i32* %474, align 4
  %507 = sub nsw i32 %496, %506
  %508 = shl i32 %507, 2
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds i8, i8* %505, i64 %509
  %511 = bitcast i8* %510 to i32*
  %512 = sext i32 %496 to i64
  br label %513

513:                                              ; preds = %553, %498
  %514 = phi i64 [ %512, %498 ], [ %615, %553 ]
  %515 = phi i32* [ %511, %498 ], [ %614, %553 ]
  %516 = load i32, i32* %478, align 4
  %517 = icmp sgt i32 %516, 0
  br i1 %517, label %518, label %553

518:                                              ; preds = %513
  %519 = load i32, i32* %479, align 4
  %520 = icmp sgt i32 %519, 0
  %521 = load i32, i32* %482, align 4
  %522 = load i32, i32* %483, align 4
  %523 = load i32, i32* %484, align 4
  %524 = load i32, i32* %485, align 4
  %525 = load i8*, i8** %486, align 8
  %526 = load i64, i64* %487, align 8
  %527 = sext i32 %519 to i64
  br label %535

528:                                              ; preds = %553
  %529 = load i32, i32* %465, align 4
  br label %530

530:                                              ; preds = %528, %492
  %531 = phi i32 [ %529, %528 ], [ %493, %492 ]
  %532 = phi i32 [ %616, %528 ], [ %494, %492 ]
  %533 = add nsw i32 %495, 1
  %534 = icmp slt i32 %533, %531
  br i1 %534, label %492, label %673

535:                                              ; preds = %619, %518
  %536 = phi float [ 0.000000e+00, %518 ], [ %623, %619 ]
  %537 = phi i32 [ 0, %518 ], [ %624, %619 ]
  %538 = phi float [ 0.000000e+00, %518 ], [ %622, %619 ]
  %539 = phi float [ 0.000000e+00, %518 ], [ %621, %619 ]
  %540 = phi float [ 0.000000e+00, %518 ], [ %620, %619 ]
  br i1 %520, label %541, label %619

541:                                              ; preds = %535
  %542 = load i32, i32* %480, align 8
  %543 = add nsw i32 %537, %495
  %544 = load i32, i32* %481, align 4
  %545 = sub i32 %543, %544
  %546 = icmp sgt i32 %523, %545
  %547 = icmp sle i32 %524, %545
  %548 = sext i32 %545 to i64
  %549 = mul i64 %526, %548
  %550 = getelementptr inbounds i8, i8* %525, i64 %549
  %551 = load float*, float** %488, align 8
  %552 = mul nsw i32 %537, %519
  br label %626

553:                                              ; preds = %619, %513
  %554 = phi float [ 0.000000e+00, %513 ], [ %620, %619 ]
  %555 = phi float [ 0.000000e+00, %513 ], [ %621, %619 ]
  %556 = phi float [ 0.000000e+00, %513 ], [ %622, %619 ]
  %557 = phi float [ 0.000000e+00, %513 ], [ %623, %619 ]
  %558 = load float, float* %489, align 8
  %559 = fmul float %557, %558
  %560 = load float, float* %490, align 4
  %561 = fadd float %559, %560
  %562 = call float @llvm.floor.f32(float %561) #11
  %563 = fcmp olt float %562, 0x41DFFFFFE0000000
  %564 = select i1 %563, float %562, float 0x41DFFFFFE0000000
  %565 = fcmp ogt float %564, 0xC1DFFFFFE0000000
  %566 = select i1 %565, float %564, float 0xC1DFFFFFE0000000
  %567 = fptosi float %566 to i32
  %568 = icmp slt i32 %567, 255
  %569 = select i1 %568, i32 %567, i32 255
  %570 = icmp sgt i32 %569, 0
  %571 = select i1 %570, i32 %569, i32 0
  %572 = fmul float %554, %558
  %573 = fadd float %572, %560
  %574 = call float @llvm.floor.f32(float %573) #11
  %575 = fcmp olt float %574, 0x41DFFFFFE0000000
  %576 = select i1 %575, float %574, float 0x41DFFFFFE0000000
  %577 = fcmp ogt float %576, 0xC1DFFFFFE0000000
  %578 = select i1 %577, float %576, float 0xC1DFFFFFE0000000
  %579 = fptosi float %578 to i32
  %580 = icmp slt i32 %571, %579
  %581 = select i1 %580, i32 %571, i32 %579
  %582 = icmp sgt i32 %581, 0
  %583 = select i1 %582, i32 %581, i32 0
  %584 = fmul float %555, %558
  %585 = fadd float %584, %560
  %586 = call float @llvm.floor.f32(float %585) #11
  %587 = fcmp olt float %586, 0x41DFFFFFE0000000
  %588 = select i1 %587, float %586, float 0x41DFFFFFE0000000
  %589 = fcmp ogt float %588, 0xC1DFFFFFE0000000
  %590 = select i1 %589, float %588, float 0xC1DFFFFFE0000000
  %591 = fptosi float %590 to i32
  %592 = icmp slt i32 %571, %591
  %593 = select i1 %592, i32 %571, i32 %591
  %594 = icmp sgt i32 %593, 0
  %595 = select i1 %594, i32 %593, i32 0
  %596 = fmul float %556, %558
  %597 = fadd float %596, %560
  %598 = call float @llvm.floor.f32(float %597) #11
  %599 = fcmp olt float %598, 0x41DFFFFFE0000000
  %600 = select i1 %599, float %598, float 0x41DFFFFFE0000000
  %601 = fcmp ogt float %600, 0xC1DFFFFFE0000000
  %602 = select i1 %601, float %600, float 0xC1DFFFFFE0000000
  %603 = fptosi float %602 to i32
  %604 = icmp slt i32 %571, %603
  %605 = select i1 %604, i32 %571, i32 %603
  %606 = icmp sgt i32 %605, 0
  %607 = select i1 %606, i32 %605, i32 0
  %608 = shl i32 %571, 24
  %609 = shl i32 %583, 16
  %610 = shl i32 %595, 8
  %611 = or i32 %607, %608
  %612 = or i32 %611, %609
  %613 = or i32 %612, %610
  %614 = getelementptr inbounds i32, i32* %515, i64 1
  store i32 %613, i32* %515, align 4
  %615 = add nsw i64 %514, 1
  %616 = load i32, i32* %464, align 4
  %617 = sext i32 %616 to i64
  %618 = icmp slt i64 %615, %617
  br i1 %618, label %513, label %528

619:                                              ; preds = %646, %535
  %620 = phi float [ %540, %535 ], [ %661, %646 ]
  %621 = phi float [ %539, %535 ], [ %666, %646 ]
  %622 = phi float [ %538, %535 ], [ %670, %646 ]
  %623 = phi float [ %536, %535 ], [ %656, %646 ]
  %624 = add nuw nsw i32 %537, 1
  %625 = icmp eq i32 %624, %516
  br i1 %625, label %553, label %535

626:                                              ; preds = %646, %541
  %627 = phi i64 [ 0, %541 ], [ %671, %646 ]
  %628 = phi float [ %536, %541 ], [ %656, %646 ]
  %629 = phi float [ %538, %541 ], [ %670, %646 ]
  %630 = phi float [ %539, %541 ], [ %666, %646 ]
  %631 = phi float [ %540, %541 ], [ %661, %646 ]
  %632 = add nsw i64 %627, %514
  %633 = trunc i64 %632 to i32
  %634 = sub i32 %633, %542
  %635 = icmp sgt i32 %521, %634
  %636 = icmp sle i32 %522, %634
  %637 = or i1 %636, %635
  %638 = or i1 %546, %637
  %639 = or i1 %547, %638
  br i1 %639, label %646, label %640

640:                                              ; preds = %626
  %641 = shl i32 %634, 2
  %642 = sext i32 %641 to i64
  %643 = getelementptr inbounds i8, i8* %550, i64 %642
  %644 = bitcast i8* %643 to i32*
  %645 = load i32, i32* %644, align 4
  br label %646

646:                                              ; preds = %640, %626
  %647 = phi i32 [ %645, %640 ], [ 0, %626 ]
  %648 = trunc i64 %627 to i32
  %649 = add nsw i32 %552, %648
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds float, float* %551, i64 %650
  %652 = load float, float* %651, align 4
  %653 = lshr i32 %647, 24
  %654 = uitofp i32 %653 to float
  %655 = fmul float %652, %654
  %656 = fadd float %628, %655
  %657 = lshr i32 %647, 16
  %658 = and i32 %657, 255
  %659 = uitofp i32 %658 to float
  %660 = fmul float %652, %659
  %661 = fadd float %631, %660
  %662 = lshr i32 %647, 8
  %663 = and i32 %662, 255
  %664 = uitofp i32 %663 to float
  %665 = fmul float %652, %664
  %666 = fadd float %630, %665
  %667 = and i32 %647, 255
  %668 = uitofp i32 %667 to float
  %669 = fmul float %652, %668
  %670 = fadd float %629, %669
  %671 = add nuw nsw i64 %627, 1
  %672 = icmp eq i64 %671, %527
  br i1 %672, label %619, label %626

673:                                              ; preds = %530, %468, %461
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %462) #11
  br label %900

674:                                              ; preds = %457
  %675 = bitcast %struct.SkIRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %675) #11
  %676 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 0
  %677 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 2
  %678 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 3
  %679 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %675, i8* align 4 %679, i64 16, i1 false) #11
  %680 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* nonnull dereferenceable(16) %7, %struct.SkIRect* dereferenceable(16) %5) #11
  br i1 %680, label %681, label %899

681:                                              ; preds = %674
  %682 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 1
  %683 = load i32, i32* %682, align 4
  %684 = load i32, i32* %678, align 4
  %685 = icmp slt i32 %683, %684
  br i1 %685, label %686, label %899

686:                                              ; preds = %681
  %687 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  %688 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  %689 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 0
  %690 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 1
  %691 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %692 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %693 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %694 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %695 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %696 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %697 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %698 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %699 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 0
  %700 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 1
  %701 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %702 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %703 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %704 = sext i32 %683 to i64
  %705 = load i32, i32* %677, align 4
  br label %706

706:                                              ; preds = %750, %686
  %707 = phi i32 [ %684, %686 ], [ %751, %750 ]
  %708 = phi i32 [ %705, %686 ], [ %752, %750 ]
  %709 = phi i64 [ %704, %686 ], [ %753, %750 ]
  %710 = load i32, i32* %676, align 4
  %711 = icmp slt i32 %710, %708
  br i1 %711, label %712, label %750

712:                                              ; preds = %706
  %713 = load i8*, i8** %689, align 8
  %714 = load i64, i64* %690, align 8
  %715 = load i32, i32* %688, align 4
  %716 = sext i32 %715 to i64
  %717 = sub nsw i64 %709, %716
  %718 = mul i64 %717, %714
  %719 = getelementptr inbounds i8, i8* %713, i64 %718
  %720 = load i32, i32* %687, align 4
  %721 = sub nsw i32 %710, %720
  %722 = shl i32 %721, 2
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i8, i8* %719, i64 %723
  %725 = bitcast i8* %724 to i32*
  %726 = sext i32 %710 to i64
  %727 = trunc i64 %709 to i32
  br label %728

728:                                              ; preds = %842, %712
  %729 = phi i64 [ %726, %712 ], [ %847, %842 ]
  %730 = phi i32* [ %725, %712 ], [ %846, %842 ]
  %731 = load i32, i32* %691, align 4
  %732 = icmp sgt i32 %731, 0
  br i1 %732, label %738, label %733

733:                                              ; preds = %728
  %734 = load i32, i32* %695, align 4
  %735 = load i32, i32* %696, align 4
  %736 = load i32, i32* %697, align 4
  %737 = load i32, i32* %698, align 4
  br label %773

738:                                              ; preds = %728
  %739 = load i32, i32* %692, align 4
  %740 = icmp sgt i32 %739, 0
  %741 = load i32, i32* %695, align 4
  %742 = load i32, i32* %696, align 4
  %743 = load i32, i32* %697, align 4
  %744 = load i32, i32* %698, align 4
  %745 = load i8*, i8** %699, align 8
  %746 = load i64, i64* %700, align 8
  %747 = sext i32 %739 to i64
  br label %756

748:                                              ; preds = %842
  %749 = load i32, i32* %678, align 4
  br label %750

750:                                              ; preds = %748, %706
  %751 = phi i32 [ %749, %748 ], [ %707, %706 ]
  %752 = phi i32 [ %848, %748 ], [ %708, %706 ]
  %753 = add nsw i64 %709, 1
  %754 = sext i32 %751 to i64
  %755 = icmp slt i64 %753, %754
  br i1 %755, label %706, label %899

756:                                              ; preds = %851, %738
  %757 = phi float [ 0.000000e+00, %738 ], [ %854, %851 ]
  %758 = phi i32 [ 0, %738 ], [ %855, %851 ]
  %759 = phi float [ 0.000000e+00, %738 ], [ %853, %851 ]
  %760 = phi float [ 0.000000e+00, %738 ], [ %852, %851 ]
  br i1 %740, label %761, label %851

761:                                              ; preds = %756
  %762 = load i32, i32* %693, align 8
  %763 = add nsw i32 %758, %727
  %764 = load i32, i32* %694, align 4
  %765 = sub i32 %763, %764
  %766 = icmp sgt i32 %743, %765
  %767 = icmp sle i32 %744, %765
  %768 = sext i32 %765 to i64
  %769 = mul i64 %746, %768
  %770 = getelementptr inbounds i8, i8* %745, i64 %769
  %771 = load float*, float** %701, align 8
  %772 = mul nsw i32 %758, %739
  br label %857

773:                                              ; preds = %851, %733
  %774 = phi i32 [ %737, %733 ], [ %744, %851 ]
  %775 = phi i32 [ %736, %733 ], [ %743, %851 ]
  %776 = phi i32 [ %735, %733 ], [ %742, %851 ]
  %777 = phi i32 [ %734, %733 ], [ %741, %851 ]
  %778 = phi float [ 0.000000e+00, %733 ], [ %852, %851 ]
  %779 = phi float [ 0.000000e+00, %733 ], [ %853, %851 ]
  %780 = phi float [ 0.000000e+00, %733 ], [ %854, %851 ]
  %781 = load float, float* %702, align 8
  %782 = fmul float %780, %781
  %783 = load float, float* %703, align 4
  %784 = fadd float %782, %783
  %785 = call float @llvm.floor.f32(float %784) #11
  %786 = fcmp olt float %785, 0x41DFFFFFE0000000
  %787 = select i1 %786, float %785, float 0x41DFFFFFE0000000
  %788 = fcmp ogt float %787, 0xC1DFFFFFE0000000
  %789 = select i1 %788, float %787, float 0xC1DFFFFFE0000000
  %790 = fptosi float %789 to i32
  %791 = icmp slt i32 %790, 255
  %792 = select i1 %791, i32 %790, i32 255
  %793 = icmp sgt i32 %792, 0
  %794 = select i1 %793, i32 %792, i32 0
  %795 = fmul float %778, %781
  %796 = fadd float %795, %783
  %797 = call float @llvm.floor.f32(float %796) #11
  %798 = fcmp olt float %797, 0x41DFFFFFE0000000
  %799 = select i1 %798, float %797, float 0x41DFFFFFE0000000
  %800 = fcmp ogt float %799, 0xC1DFFFFFE0000000
  %801 = select i1 %800, float %799, float 0xC1DFFFFFE0000000
  %802 = fptosi float %801 to i32
  %803 = icmp slt i32 %802, 255
  %804 = select i1 %803, i32 %802, i32 255
  %805 = icmp sgt i32 %804, 0
  %806 = select i1 %805, i32 %804, i32 0
  %807 = fmul float %779, %781
  %808 = fadd float %807, %783
  %809 = call float @llvm.floor.f32(float %808) #11
  %810 = fcmp olt float %809, 0x41DFFFFFE0000000
  %811 = select i1 %810, float %809, float 0x41DFFFFFE0000000
  %812 = fcmp ogt float %811, 0xC1DFFFFFE0000000
  %813 = select i1 %812, float %811, float 0xC1DFFFFFE0000000
  %814 = fptosi float %813 to i32
  %815 = icmp slt i32 %814, 255
  %816 = select i1 %815, i32 %814, i32 255
  %817 = icmp sgt i32 %816, 0
  %818 = select i1 %817, i32 %816, i32 0
  %819 = sext i32 %777 to i64
  %820 = icmp slt i64 %729, %819
  %821 = sext i32 %776 to i64
  %822 = icmp sge i64 %729, %821
  %823 = or i1 %822, %820
  %824 = sext i32 %775 to i64
  %825 = icmp slt i64 %709, %824
  %826 = or i1 %825, %823
  %827 = xor i1 %826, true
  %828 = sext i32 %774 to i64
  %829 = icmp slt i64 %709, %828
  %830 = and i1 %829, %827
  br i1 %830, label %831, label %842

831:                                              ; preds = %773
  %832 = load i8*, i8** %699, align 8
  %833 = load i64, i64* %700, align 8
  %834 = mul i64 %833, %709
  %835 = getelementptr inbounds i8, i8* %832, i64 %834
  %836 = trunc i64 %729 to i32
  %837 = shl i32 %836, 2
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds i8, i8* %835, i64 %838
  %840 = bitcast i8* %839 to i32*
  %841 = load i32, i32* %840, align 4
  br label %842

842:                                              ; preds = %831, %773
  %843 = phi i32 [ %841, %831 ], [ 0, %773 ]
  %844 = lshr i32 %843, 24
  %845 = call i32 @_Z17SkPreMultiplyARGBjjjj(i32 %844, i32 %794, i32 %806, i32 %818) #11
  %846 = getelementptr inbounds i32, i32* %730, i64 1
  store i32 %845, i32* %730, align 4
  %847 = add nsw i64 %729, 1
  %848 = load i32, i32* %677, align 4
  %849 = sext i32 %848 to i64
  %850 = icmp slt i64 %847, %849
  br i1 %850, label %728, label %748

851:                                              ; preds = %876, %756
  %852 = phi float [ %760, %756 ], [ %892, %876 ]
  %853 = phi float [ %759, %756 ], [ %896, %876 ]
  %854 = phi float [ %757, %756 ], [ %887, %876 ]
  %855 = add nuw nsw i32 %758, 1
  %856 = icmp eq i32 %855, %731
  br i1 %856, label %773, label %756

857:                                              ; preds = %876, %761
  %858 = phi i64 [ 0, %761 ], [ %897, %876 ]
  %859 = phi float [ %757, %761 ], [ %887, %876 ]
  %860 = phi float [ %759, %761 ], [ %896, %876 ]
  %861 = phi float [ %760, %761 ], [ %892, %876 ]
  %862 = add nsw i64 %858, %729
  %863 = trunc i64 %862 to i32
  %864 = sub i32 %863, %762
  %865 = icmp sgt i32 %741, %864
  %866 = icmp sle i32 %742, %864
  %867 = or i1 %866, %865
  %868 = or i1 %766, %867
  %869 = or i1 %767, %868
  br i1 %869, label %876, label %870

870:                                              ; preds = %857
  %871 = shl i32 %864, 2
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, i8* %770, i64 %872
  %874 = bitcast i8* %873 to i32*
  %875 = load i32, i32* %874, align 4
  br label %876

876:                                              ; preds = %870, %857
  %877 = phi i32 [ %875, %870 ], [ 0, %857 ]
  %878 = trunc i64 %858 to i32
  %879 = add nsw i32 %772, %878
  %880 = sext i32 %879 to i64
  %881 = getelementptr inbounds float, float* %771, i64 %880
  %882 = load float, float* %881, align 4
  %883 = lshr i32 %877, 16
  %884 = and i32 %883, 255
  %885 = uitofp i32 %884 to float
  %886 = fmul float %882, %885
  %887 = fadd float %859, %886
  %888 = lshr i32 %877, 8
  %889 = and i32 %888, 255
  %890 = uitofp i32 %889 to float
  %891 = fmul float %882, %890
  %892 = fadd float %861, %891
  %893 = and i32 %877, 255
  %894 = uitofp i32 %893 to float
  %895 = fmul float %882, %894
  %896 = fadd float %860, %895
  %897 = add nuw nsw i64 %858, 1
  %898 = icmp eq i64 %897, %747
  br i1 %898, label %851, label %857

899:                                              ; preds = %750, %681, %674
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %675) #11
  br label %900

900:                                              ; preds = %899, %673, %455, %230, %6, %456
  ret void
}

declare void @_ZN14SkSpecialImage14MakeFromRasterERK7SkIRectRK8SkBitmapRK14SkSurfaceProps(%class.sk_sp.18* sret, %struct.SkIRect* dereferenceable(16), %class.SkBitmap* dereferenceable(56), %class.SkSurfaceProps* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #8

declare void @_ZNK18SkImageFilter_Base11filterInputILN4skif5UsageE0EEENS1_12FilterResultIXT_EEEiRKNS1_7ContextE(%"class.skif::FilterResult"* sret, %class.SkImageFilter_Base*, i32, %"class.skif::Context"* dereferenceable(136)) local_unnamed_addr #2

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZNK14SkSpecialImage15isTextureBackedEv(%class.SkSpecialImage*) local_unnamed_addr #2

declare %class.GrRecordingContext* @_ZNK14SkSpecialImage10getContextEv(%class.SkSpecialImage*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare %class.GrCaps* @_ZNK14GrContext_Base4capsEv(%class.GrContext_Base*) local_unnamed_addr #2

declare zeroext i1 @_ZN8SkBitmap14tryAllocPixelsERK11SkImageInfom(%class.SkBitmap*, %struct.SkImageInfo* dereferenceable(24), i64) local_unnamed_addr #2

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNK12_GLOBAL__N_130SkMatrixConvolutionImageFilter12filterPixelsINS_18RepeatPixelFetcherEEEvRK8SkBitmapPS3_R8SkIPointRK7SkIRectSB_(%"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* nocapture readonly, %class.SkBitmap* nocapture readonly dereferenceable(56), %class.SkBitmap* nocapture readonly, %struct.SkIPoint* nocapture readonly dereferenceable(8), %struct.SkIRect* nocapture readonly dereferenceable(16), %struct.SkIRect* dereferenceable(16)) unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkIRect, align 4
  %8 = alloca %struct.SkIRect, align 4
  %9 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 8
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %225, label %12

12:                                               ; preds = %6
  %13 = bitcast %struct.SkIRect* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #11
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 0
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 2
  %16 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 3
  %17 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %13, i8* align 4 %17, i64 16, i1 false) #11
  %18 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %8, %struct.SkIRect* nonnull dereferenceable(16) %8, %struct.SkIRect* dereferenceable(16) %5) #11
  br i1 %18, label %19, label %451

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %8, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = load i32, i32* %16, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %451

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  %26 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  %27 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 0
  %28 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 1
  %29 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %30 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %31 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %32 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %33 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %34 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %35 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %36 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %37 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 0
  %38 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 1
  %39 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %40 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %41 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %42 = load i32, i32* %15, align 4
  br label %43

43:                                               ; preds = %86, %24
  %44 = phi i32 [ %22, %24 ], [ %87, %86 ]
  %45 = phi i32 [ %42, %24 ], [ %88, %86 ]
  %46 = phi i32 [ %21, %24 ], [ %89, %86 ]
  %47 = load i32, i32* %14, align 4
  %48 = icmp slt i32 %47, %45
  br i1 %48, label %49, label %86

49:                                               ; preds = %43
  %50 = load i8*, i8** %27, align 8
  %51 = load i64, i64* %28, align 8
  %52 = load i32, i32* %26, align 4
  %53 = sub nsw i32 %46, %52
  %54 = sext i32 %53 to i64
  %55 = mul i64 %51, %54
  %56 = getelementptr inbounds i8, i8* %50, i64 %55
  %57 = load i32, i32* %25, align 4
  %58 = sub nsw i32 %47, %57
  %59 = shl i32 %58, 2
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %56, i64 %60
  %62 = bitcast i8* %61 to i32*
  br label %63

63:                                               ; preds = %113, %49
  %64 = phi i32* [ %174, %113 ], [ %62, %49 ]
  %65 = phi i32 [ %175, %113 ], [ %47, %49 ]
  %66 = load i32, i32* %29, align 4
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %113

68:                                               ; preds = %63
  %69 = load i32, i32* %30, align 4
  %70 = icmp sgt i32 %69, 0
  %71 = load i32, i32* %33, align 4
  %72 = load i32, i32* %34, align 4
  %73 = sub i32 %72, %71
  %74 = load i32, i32* %35, align 4
  %75 = load i32, i32* %36, align 4
  %76 = sub i32 %75, %74
  %77 = load i8*, i8** %37, align 8
  %78 = load i64, i64* %38, align 8
  %79 = sub i32 %46, %74
  %80 = sub i32 %65, %71
  %81 = sext i32 %69 to i64
  %82 = zext i32 %66 to i64
  %83 = zext i32 %69 to i64
  br label %91

84:                                               ; preds = %113
  %85 = load i32, i32* %16, align 4
  br label %86

86:                                               ; preds = %84, %43
  %87 = phi i32 [ %85, %84 ], [ %44, %43 ]
  %88 = phi i32 [ %176, %84 ], [ %45, %43 ]
  %89 = add nsw i32 %46, 1
  %90 = icmp slt i32 %89, %87
  br i1 %90, label %43, label %451

91:                                               ; preds = %178, %68
  %92 = phi i64 [ %183, %178 ], [ 0, %68 ]
  %93 = phi float [ %182, %178 ], [ 0.000000e+00, %68 ]
  %94 = phi float [ %181, %178 ], [ 0.000000e+00, %68 ]
  %95 = phi float [ %180, %178 ], [ 0.000000e+00, %68 ]
  %96 = phi float [ %179, %178 ], [ 0.000000e+00, %68 ]
  br i1 %70, label %97, label %178

97:                                               ; preds = %91
  %98 = load i32, i32* %31, align 8
  %99 = load i32, i32* %32, align 4
  %100 = trunc i64 %92 to i32
  %101 = add i32 %79, %100
  %102 = sub i32 %101, %99
  %103 = srem i32 %102, %76
  %104 = icmp slt i32 %103, 0
  %105 = select i1 %104, i32 %75, i32 %74
  %106 = add i32 %105, %103
  %107 = sext i32 %106 to i64
  %108 = mul i64 %78, %107
  %109 = getelementptr inbounds i8, i8* %77, i64 %108
  %110 = load float*, float** %39, align 8
  %111 = mul nsw i64 %92, %81
  %112 = sub i32 %80, %98
  br label %185

113:                                              ; preds = %178, %63
  %114 = phi float [ 0.000000e+00, %63 ], [ %179, %178 ]
  %115 = phi float [ 0.000000e+00, %63 ], [ %180, %178 ]
  %116 = phi float [ 0.000000e+00, %63 ], [ %181, %178 ]
  %117 = phi float [ 0.000000e+00, %63 ], [ %182, %178 ]
  %118 = load float, float* %40, align 8
  %119 = fmul float %117, %118
  %120 = load float, float* %41, align 4
  %121 = fadd float %119, %120
  %122 = call float @llvm.floor.f32(float %121) #11
  %123 = fcmp olt float %122, 0x41DFFFFFE0000000
  %124 = select i1 %123, float %122, float 0x41DFFFFFE0000000
  %125 = fcmp ogt float %124, 0xC1DFFFFFE0000000
  %126 = select i1 %125, float %124, float 0xC1DFFFFFE0000000
  %127 = fptosi float %126 to i32
  %128 = icmp slt i32 %127, 255
  %129 = select i1 %128, i32 %127, i32 255
  %130 = icmp sgt i32 %129, 0
  %131 = select i1 %130, i32 %129, i32 0
  %132 = fmul float %114, %118
  %133 = fadd float %132, %120
  %134 = call float @llvm.floor.f32(float %133) #11
  %135 = fcmp olt float %134, 0x41DFFFFFE0000000
  %136 = select i1 %135, float %134, float 0x41DFFFFFE0000000
  %137 = fcmp ogt float %136, 0xC1DFFFFFE0000000
  %138 = select i1 %137, float %136, float 0xC1DFFFFFE0000000
  %139 = fptosi float %138 to i32
  %140 = icmp slt i32 %131, %139
  %141 = select i1 %140, i32 %131, i32 %139
  %142 = icmp sgt i32 %141, 0
  %143 = select i1 %142, i32 %141, i32 0
  %144 = fmul float %115, %118
  %145 = fadd float %144, %120
  %146 = call float @llvm.floor.f32(float %145) #11
  %147 = fcmp olt float %146, 0x41DFFFFFE0000000
  %148 = select i1 %147, float %146, float 0x41DFFFFFE0000000
  %149 = fcmp ogt float %148, 0xC1DFFFFFE0000000
  %150 = select i1 %149, float %148, float 0xC1DFFFFFE0000000
  %151 = fptosi float %150 to i32
  %152 = icmp slt i32 %131, %151
  %153 = select i1 %152, i32 %131, i32 %151
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = fmul float %116, %118
  %157 = fadd float %156, %120
  %158 = call float @llvm.floor.f32(float %157) #11
  %159 = fcmp olt float %158, 0x41DFFFFFE0000000
  %160 = select i1 %159, float %158, float 0x41DFFFFFE0000000
  %161 = fcmp ogt float %160, 0xC1DFFFFFE0000000
  %162 = select i1 %161, float %160, float 0xC1DFFFFFE0000000
  %163 = fptosi float %162 to i32
  %164 = icmp slt i32 %131, %163
  %165 = select i1 %164, i32 %131, i32 %163
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = shl i32 %131, 24
  %169 = shl i32 %143, 16
  %170 = shl i32 %155, 8
  %171 = or i32 %167, %168
  %172 = or i32 %171, %169
  %173 = or i32 %172, %170
  %174 = getelementptr inbounds i32, i32* %64, i64 1
  store i32 %173, i32* %64, align 4
  %175 = add nsw i32 %65, 1
  %176 = load i32, i32* %15, align 4
  %177 = icmp slt i32 %175, %176
  br i1 %177, label %63, label %84

178:                                              ; preds = %185, %91
  %179 = phi float [ %96, %91 ], [ %213, %185 ]
  %180 = phi float [ %95, %91 ], [ %218, %185 ]
  %181 = phi float [ %94, %91 ], [ %222, %185 ]
  %182 = phi float [ %93, %91 ], [ %208, %185 ]
  %183 = add nuw nsw i64 %92, 1
  %184 = icmp eq i64 %183, %82
  br i1 %184, label %113, label %91

185:                                              ; preds = %185, %97
  %186 = phi i64 [ %223, %185 ], [ 0, %97 ]
  %187 = phi float [ %208, %185 ], [ %93, %97 ]
  %188 = phi float [ %222, %185 ], [ %94, %97 ]
  %189 = phi float [ %218, %185 ], [ %95, %97 ]
  %190 = phi float [ %213, %185 ], [ %96, %97 ]
  %191 = trunc i64 %186 to i32
  %192 = add i32 %112, %191
  %193 = srem i32 %192, %73
  %194 = icmp slt i32 %193, 0
  %195 = select i1 %194, i32 %72, i32 %71
  %196 = add i32 %195, %193
  %197 = shl i32 %196, 2
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %109, i64 %198
  %200 = bitcast i8* %199 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = add nsw i64 %186, %111
  %203 = getelementptr inbounds float, float* %110, i64 %202
  %204 = load float, float* %203, align 4
  %205 = lshr i32 %201, 24
  %206 = uitofp i32 %205 to float
  %207 = fmul float %204, %206
  %208 = fadd float %187, %207
  %209 = lshr i32 %201, 16
  %210 = and i32 %209, 255
  %211 = uitofp i32 %210 to float
  %212 = fmul float %204, %211
  %213 = fadd float %190, %212
  %214 = lshr i32 %201, 8
  %215 = and i32 %214, 255
  %216 = uitofp i32 %215 to float
  %217 = fmul float %204, %216
  %218 = fadd float %189, %217
  %219 = and i32 %201, 255
  %220 = uitofp i32 %219 to float
  %221 = fmul float %204, %220
  %222 = fadd float %188, %221
  %223 = add nuw nsw i64 %186, 1
  %224 = icmp eq i64 %223, %83
  br i1 %224, label %178, label %185

225:                                              ; preds = %6
  %226 = bitcast %struct.SkIRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %226) #11
  %227 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 0
  %228 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 2
  %229 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 3
  %230 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %226, i8* align 4 %230, i64 16, i1 false) #11
  %231 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %7, %struct.SkIRect* nonnull dereferenceable(16) %7, %struct.SkIRect* dereferenceable(16) %5) #11
  br i1 %231, label %232, label %451

232:                                              ; preds = %225
  %233 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %7, i64 0, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = load i32, i32* %229, align 4
  %236 = icmp slt i32 %234, %235
  br i1 %236, label %237, label %451

237:                                              ; preds = %232
  %238 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 0
  %239 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %3, i64 0, i32 1
  %240 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 0
  %241 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %2, i64 0, i32 1, i32 1
  %242 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 1
  %243 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 1, i32 0
  %244 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 0
  %245 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 6, i32 1
  %246 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 0
  %247 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 2
  %248 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 1
  %249 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %5, i64 0, i32 3
  %250 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 0
  %251 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 1
  %252 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 3
  %253 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 4
  %254 = getelementptr inbounds %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter", %"class.(anonymous namespace)::SkMatrixConvolutionImageFilter"* %0, i64 0, i32 5
  %255 = load i32, i32* %228, align 4
  br label %256

256:                                              ; preds = %310, %237
  %257 = phi i32 [ %235, %237 ], [ %311, %310 ]
  %258 = phi i32 [ %255, %237 ], [ %312, %310 ]
  %259 = phi i32 [ %234, %237 ], [ %313, %310 ]
  %260 = load i32, i32* %227, align 4
  %261 = icmp slt i32 %260, %258
  br i1 %261, label %262, label %310

262:                                              ; preds = %256
  %263 = load i8*, i8** %240, align 8
  %264 = load i64, i64* %241, align 8
  %265 = load i32, i32* %239, align 4
  %266 = sub nsw i32 %259, %265
  %267 = sext i32 %266 to i64
  %268 = mul i64 %264, %267
  %269 = getelementptr inbounds i8, i8* %263, i64 %268
  %270 = load i32, i32* %238, align 4
  %271 = sub nsw i32 %260, %270
  %272 = shl i32 %271, 2
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i8, i8* %269, i64 %273
  %275 = bitcast i8* %274 to i32*
  br label %276

276:                                              ; preds = %336, %262
  %277 = phi i32* [ %406, %336 ], [ %275, %262 ]
  %278 = phi i32 [ %407, %336 ], [ %260, %262 ]
  %279 = load i32, i32* %242, align 4
  %280 = icmp sgt i32 %279, 0
  br i1 %280, label %292, label %281

281:                                              ; preds = %276
  %282 = load i32, i32* %246, align 4
  %283 = load i32, i32* %247, align 4
  %284 = load i32, i32* %248, align 4
  %285 = load i32, i32* %249, align 4
  %286 = load i8*, i8** %250, align 8
  %287 = load i64, i64* %251, align 8
  %288 = sub i32 %283, %282
  %289 = sub i32 %285, %284
  %290 = sub nsw i32 %278, %282
  %291 = sub nsw i32 %259, %284
  br label %336

292:                                              ; preds = %276
  %293 = load i32, i32* %243, align 4
  %294 = icmp sgt i32 %293, 0
  %295 = load i32, i32* %246, align 4
  %296 = load i32, i32* %247, align 4
  %297 = sub i32 %296, %295
  %298 = load i32, i32* %248, align 4
  %299 = load i32, i32* %249, align 4
  %300 = sub i32 %299, %298
  %301 = load i8*, i8** %250, align 8
  %302 = load i64, i64* %251, align 8
  %303 = sub i32 %259, %298
  %304 = sub i32 %278, %295
  %305 = sext i32 %293 to i64
  %306 = zext i32 %279 to i64
  %307 = zext i32 %293 to i64
  br label %315

308:                                              ; preds = %336
  %309 = load i32, i32* %229, align 4
  br label %310

310:                                              ; preds = %308, %256
  %311 = phi i32 [ %309, %308 ], [ %257, %256 ]
  %312 = phi i32 [ %408, %308 ], [ %258, %256 ]
  %313 = add nsw i32 %259, 1
  %314 = icmp slt i32 %313, %311
  br i1 %314, label %256, label %451

315:                                              ; preds = %410, %292
  %316 = phi i64 [ %414, %410 ], [ 0, %292 ]
  %317 = phi float [ %413, %410 ], [ 0.000000e+00, %292 ]
  %318 = phi float [ %412, %410 ], [ 0.000000e+00, %292 ]
  %319 = phi float [ %411, %410 ], [ 0.000000e+00, %292 ]
  br i1 %294, label %320, label %410

320:                                              ; preds = %315
  %321 = load i32, i32* %244, align 8
  %322 = load i32, i32* %245, align 4
  %323 = trunc i64 %316 to i32
  %324 = add i32 %303, %323
  %325 = sub i32 %324, %322
  %326 = srem i32 %325, %300
  %327 = icmp slt i32 %326, 0
  %328 = select i1 %327, i32 %299, i32 %298
  %329 = add i32 %328, %326
  %330 = sext i32 %329 to i64
  %331 = mul i64 %302, %330
  %332 = getelementptr inbounds i8, i8* %301, i64 %331
  %333 = load float*, float** %252, align 8
  %334 = mul nsw i64 %316, %305
  %335 = sub i32 %304, %321
  br label %416

336:                                              ; preds = %410, %281
  %337 = phi i32 [ %291, %281 ], [ %303, %410 ]
  %338 = phi i32 [ %290, %281 ], [ %304, %410 ]
  %339 = phi i32 [ %289, %281 ], [ %300, %410 ]
  %340 = phi i32 [ %288, %281 ], [ %297, %410 ]
  %341 = phi i64 [ %287, %281 ], [ %302, %410 ]
  %342 = phi i8* [ %286, %281 ], [ %301, %410 ]
  %343 = phi i32 [ %285, %281 ], [ %299, %410 ]
  %344 = phi i32 [ %284, %281 ], [ %298, %410 ]
  %345 = phi i32 [ %283, %281 ], [ %296, %410 ]
  %346 = phi i32 [ %282, %281 ], [ %295, %410 ]
  %347 = phi float [ 0.000000e+00, %281 ], [ %411, %410 ]
  %348 = phi float [ 0.000000e+00, %281 ], [ %412, %410 ]
  %349 = phi float [ 0.000000e+00, %281 ], [ %413, %410 ]
  %350 = load float, float* %253, align 8
  %351 = fmul float %349, %350
  %352 = load float, float* %254, align 4
  %353 = fadd float %351, %352
  %354 = call float @llvm.floor.f32(float %353) #11
  %355 = fcmp olt float %354, 0x41DFFFFFE0000000
  %356 = select i1 %355, float %354, float 0x41DFFFFFE0000000
  %357 = fcmp ogt float %356, 0xC1DFFFFFE0000000
  %358 = select i1 %357, float %356, float 0xC1DFFFFFE0000000
  %359 = fptosi float %358 to i32
  %360 = icmp slt i32 %359, 255
  %361 = select i1 %360, i32 %359, i32 255
  %362 = icmp sgt i32 %361, 0
  %363 = select i1 %362, i32 %361, i32 0
  %364 = fmul float %347, %350
  %365 = fadd float %364, %352
  %366 = call float @llvm.floor.f32(float %365) #11
  %367 = fcmp olt float %366, 0x41DFFFFFE0000000
  %368 = select i1 %367, float %366, float 0x41DFFFFFE0000000
  %369 = fcmp ogt float %368, 0xC1DFFFFFE0000000
  %370 = select i1 %369, float %368, float 0xC1DFFFFFE0000000
  %371 = fptosi float %370 to i32
  %372 = icmp slt i32 %371, 255
  %373 = select i1 %372, i32 %371, i32 255
  %374 = icmp sgt i32 %373, 0
  %375 = select i1 %374, i32 %373, i32 0
  %376 = fmul float %348, %350
  %377 = fadd float %376, %352
  %378 = call float @llvm.floor.f32(float %377) #11
  %379 = fcmp olt float %378, 0x41DFFFFFE0000000
  %380 = select i1 %379, float %378, float 0x41DFFFFFE0000000
  %381 = fcmp ogt float %380, 0xC1DFFFFFE0000000
  %382 = select i1 %381, float %380, float 0xC1DFFFFFE0000000
  %383 = fptosi float %382 to i32
  %384 = icmp slt i32 %383, 255
  %385 = select i1 %384, i32 %383, i32 255
  %386 = icmp sgt i32 %385, 0
  %387 = select i1 %386, i32 %385, i32 0
  %388 = srem i32 %338, %340
  %389 = srem i32 %337, %339
  %390 = icmp slt i32 %388, 0
  %391 = select i1 %390, i32 %345, i32 %346
  %392 = add i32 %391, %388
  %393 = icmp slt i32 %389, 0
  %394 = select i1 %393, i32 %343, i32 %344
  %395 = add i32 %394, %389
  %396 = sext i32 %395 to i64
  %397 = mul i64 %341, %396
  %398 = getelementptr inbounds i8, i8* %342, i64 %397
  %399 = shl i32 %392, 2
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i8, i8* %398, i64 %400
  %402 = bitcast i8* %401 to i32*
  %403 = load i32, i32* %402, align 4
  %404 = lshr i32 %403, 24
  %405 = call i32 @_Z17SkPreMultiplyARGBjjjj(i32 %404, i32 %363, i32 %375, i32 %387) #11
  %406 = getelementptr inbounds i32, i32* %277, i64 1
  store i32 %405, i32* %277, align 4
  %407 = add nsw i32 %278, 1
  %408 = load i32, i32* %228, align 4
  %409 = icmp slt i32 %407, %408
  br i1 %409, label %276, label %308

410:                                              ; preds = %416, %315
  %411 = phi float [ %319, %315 ], [ %444, %416 ]
  %412 = phi float [ %318, %315 ], [ %448, %416 ]
  %413 = phi float [ %317, %315 ], [ %439, %416 ]
  %414 = add nuw nsw i64 %316, 1
  %415 = icmp eq i64 %414, %306
  br i1 %415, label %336, label %315

416:                                              ; preds = %416, %320
  %417 = phi i64 [ %449, %416 ], [ 0, %320 ]
  %418 = phi float [ %439, %416 ], [ %317, %320 ]
  %419 = phi float [ %448, %416 ], [ %318, %320 ]
  %420 = phi float [ %444, %416 ], [ %319, %320 ]
  %421 = trunc i64 %417 to i32
  %422 = add i32 %335, %421
  %423 = srem i32 %422, %297
  %424 = icmp slt i32 %423, 0
  %425 = select i1 %424, i32 %296, i32 %295
  %426 = add i32 %425, %423
  %427 = shl i32 %426, 2
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i8, i8* %332, i64 %428
  %430 = bitcast i8* %429 to i32*
  %431 = load i32, i32* %430, align 4
  %432 = add nsw i64 %417, %334
  %433 = getelementptr inbounds float, float* %333, i64 %432
  %434 = load float, float* %433, align 4
  %435 = lshr i32 %431, 16
  %436 = and i32 %435, 255
  %437 = uitofp i32 %436 to float
  %438 = fmul float %434, %437
  %439 = fadd float %418, %438
  %440 = lshr i32 %431, 8
  %441 = and i32 %440, 255
  %442 = uitofp i32 %441 to float
  %443 = fmul float %434, %442
  %444 = fadd float %420, %443
  %445 = and i32 %431, 255
  %446 = uitofp i32 %445 to float
  %447 = fmul float %434, %446
  %448 = fadd float %419, %447
  %449 = add nuw nsw i64 %417, 1
  %450 = icmp eq i64 %449, %307
  br i1 %450, label %410, label %416

451:                                              ; preds = %86, %310, %232, %225, %19, %12
  %452 = phi i8* [ %13, %12 ], [ %13, %19 ], [ %226, %225 ], [ %226, %232 ], [ %226, %310 ], [ %13, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %452) #11
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

declare i32 @_Z17SkPreMultiplyARGBjjjj(i32, i32, i32, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN18SkImageFilter_Base6Common9unflattenER12SkReadBufferi(%"class.SkImageFilter_Base::Common"*, %class.SkReadBuffer* dereferenceable(136), i32) local_unnamed_addr #2

declare i32 @_ZN12SkReadBuffer7readIntEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare i32 @_ZN12SkReadBuffer13getArrayCountEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare zeroext i1 @_ZN12SkReadBuffer15readScalarArrayEPfm(%class.SkReadBuffer*, float*, i64) local_unnamed_addr #2

declare float @_ZN12SkReadBuffer10readScalarEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare zeroext i1 @_ZN12SkReadBuffer8readBoolEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

declare void @_ZN12SkReadBuffer10setInvalidEv(%class.SkReadBuffer*) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i32 @_ZN12SkReadBuffer8readUIntEv(%class.SkReadBuffer*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN18SkImageFilter_Base6Common8getInputEi: argument 0"}
!5 = distinct !{!5, !"_ZN18SkImageFilter_Base6Common8getInputEi"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK18SkImageFilter_Base11filterInputEiRKN4skif7ContextEP8SkIPoint: argument 0"}
!8 = distinct !{!8, !"_ZNK18SkImageFilter_Base11filterInputEiRKN4skif7ContextEP8SkIPoint"}
!9 = !{!10, !7}
!10 = distinct !{!10, !11, !"_ZNK4skif12FilterResultILNS_5UsageE0EE14imageAndOffsetEP8SkIPoint: argument 0"}
!11 = distinct !{!11, !"_ZNK4skif12FilterResultILNS_5UsageE0EE14imageAndOffsetEP8SkIPoint"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!14 = distinct !{!14, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType"}
!15 = !{!16, !18, !13}
!16 = distinct !{!16, !17, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!17 = distinct !{!17, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!18 = distinct !{!18, !19, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!19 = distinct !{!19, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!20 = !{!21, !13}
!21 = distinct !{!21, !22, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo: argument 0"}
!22 = distinct !{!22, !"_ZN11SkImageInfo4MakeE7SkISizeO11SkColorInfo"}
!23 = !{!24, !26}
!24 = distinct !{!24, !25, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!25 = distinct !{!25, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!26 = distinct !{!26, !27, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!27 = distinct !{!27, !"_ZN11SkImageInfo7MakeN32Eii11SkAlphaType5sk_spI12SkColorSpaceE"}
