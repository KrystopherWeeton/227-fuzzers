; ModuleID = '../../third_party/swiftshader/third_party/subzero/src/IceAssembler.cpp'
source_filename = "../../third_party/swiftshader/third_party/subzero/src/IceAssembler.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.Ice::AssemblerBuffer::EnsureCapacity" = type { %"class.Ice::AssemblerBuffer"*, i64 }
%"class.Ice::AssemblerBuffer" = type <{ i8, [7 x i8], i64, i64, i64, %"class.Ice::Assembler"*, %"class.std::__1::vector", i8, [7 x i8] }>
%"class.Ice::Assembler" = type { i32 (...)**, i32, [4 x i8], %"class.llvm::BumpPtrAllocatorImpl", %"class.Ice::StringID", i8, i8, [6 x i8], %"class.Ice::AssemblerBuffer" }
%"class.llvm::BumpPtrAllocatorImpl" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.0", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [8 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [3 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.llvm::SmallVector.0" = type <{ %"class.llvm::SmallVectorImpl.1", %"struct.llvm::SmallVectorStorage.6", [7 x i8] }>
%"class.llvm::SmallVectorImpl.1" = type { %"class.llvm::SmallVectorTemplateBase.2" }
%"class.llvm::SmallVectorTemplateBase.2" = type { %"class.llvm::SmallVectorTemplateCommon.3" }
%"class.llvm::SmallVectorTemplateCommon.3" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.4" }
%"struct.llvm::AlignedCharArrayUnion.4" = type { %"struct.llvm::AlignedCharArray.5" }
%"struct.llvm::AlignedCharArray.5" = type { [16 x i8] }
%"struct.llvm::SmallVectorStorage.6" = type { i8 }
%"class.llvm::MallocAllocator" = type { i8 }
%"class.Ice::StringID" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"**, %"class.std::__1::__compressed_pair" }
%"class.Ice::AssemblerFixup" = type { i32 (...)**, i64, i32, i32, i8, %union.anon }
%union.anon = type { %"class.Ice::Constant"* }
%"class.Ice::Constant" = type <{ %"class.Ice::Operand", %"class.Ice::StringID", i8, i8, [6 x i8] }>
%"class.Ice::Operand" = type { i32 (...)**, i32, i32, i32, %"class.Ice::Variable"**, i8* }
%"class.Ice::Variable" = type { %"class.Ice::Operand", i32, %"class.Ice::StringID.9", i8, i8, i8, i8, i8, i8, %"class.Ice::RegNumT", %"class.Ice::RegNumT", i32, %"class.Ice::LiveRange", [1 x %"class.Ice::Variable"*], %"class.Ice::Variable"*, i8* }
%"class.Ice::StringID.9" = type { i64 }
%"class.Ice::RegNumT" = type { i32 }
%"class.Ice::LiveRange" = type { %"class.std::__1::vector.10", %"class.std::__1::unordered_map", %"class.std::__1::__wrap_iter" }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.12" }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13", %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.Ice::sz_allocator" }
%"struct.Ice::sz_allocator" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.llvm::BumpPtrAllocatorImpl.15" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.0", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.25", %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.31", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19", %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22", %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.22" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.Ice::sz_allocator.24" }
%"struct.Ice::sz_allocator.24" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26", %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.Ice::sz_allocator.28" }
%"struct.Ice::sz_allocator.28" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { float }
%"class.std::__1::__wrap_iter" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.Ice::AssemblerFixup"** }
%"class.Ice::Label" = type { i32 (...)**, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.Ice::AssemblerTextFixup" = type { %"class.Ice::AssemblerFixup", %"class.std::__1::basic_string", i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.36 }
%union.anon.36 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.Ice::RelocOffset" = type { i8, i8, i32 }
%"class.Ice::GlobalContext" = type { %"class.std::__1::mutex", %"class.llvm::BumpPtrAllocatorImpl.15", [16 x i8], %"class.std::__1::mutex", %"class.Ice::VariableDeclarationList", [8 x i8], %"class.std::__1::mutex", %"class.std::__1::vector.51", %"class.std::__1::mutex", %"class.std::__1::unique_ptr.65", [16 x i8], %"class.std::__1::mutex", %"class.std::__1::unique_ptr.99", [16 x i8], %"class.std::__1::mutex", %"class.std::__1::vector.105", %"class.std::__1::mutex", %"class.Ice::ErrorCode", %"class.std::__1::mutex", %"class.Ice::GlobalContext::CodeStats", %"class.std::__1::mutex", %"class.Ice::GlobalContext::TimerList", %"class.std::__1::mutex", %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"*, %"struct.std::__1::atomic", [63 x i8], %"class.std::__1::unique_ptr.161", i64, %"class.Ice::BoundedProducerConsumerQueue", %"class.Ice::BoundedProducerConsumerQueue.177", %"class.std::__1::unique_ptr.280", i8, %"class.std::__1::unique_ptr.286", i8, [15 x %"class.Ice::Constant"*], %"class.Ice::Constant"*, [36 x %"class.Ice::Constant"*], %"class.llvm::SmallVector.292", %"class.llvm::SmallVector.298", %"class.llvm::SmallVector.298" }
%"class.Ice::VariableDeclarationList" = type { %"class.std::__1::unique_ptr.40", %"class.std::__1::vector.44", %"class.std::__1::vector.51", %"class.std::__1::vector.58" }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"class.Ice::VariableDeclaration"**, %"class.Ice::VariableDeclaration"**, %"class.std::__1::__compressed_pair.46" }
%"class.Ice::VariableDeclaration" = type opaque
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.Ice::VariableDeclaration"** }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"class.std::__1::unique_ptr.40"*, %"class.std::__1::unique_ptr.40"*, %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.std::__1::unique_ptr.40"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"class.std::__1::function"*, %"class.std::__1::function"*, %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::function"* }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.Ice::StringPool"* }
%"class.Ice::StringPool" = type { i64, %"class.std::__1::unordered_map.68" }
%"class.std::__1::unordered_map.68" = type { %"class.std::__1::__hash_table.69" }
%"class.std::__1::__hash_table.69" = type <{ %"class.std::__1::unique_ptr.70", %"class.std::__1::__compressed_pair.80", %"class.std::__1::__compressed_pair.85", %"class.std::__1::__compressed_pair.90", [4 x i8] }>
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72", %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.std::__1::__hash_node_base.73"** }
%"struct.std::__1::__hash_node_base.73" = type { %"struct.std::__1::__hash_node_base.73"* }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.std::__1::__bucket_list_deallocator.75" }
%"class.std::__1::__bucket_list_deallocator.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::__hash_node_base.73" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.Ice::ConstantPool"* }
%"class.Ice::ConstantPool" = type opaque
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"class.Ice::JumpTableData"*, %"class.Ice::JumpTableData"*, %"class.std::__1::__compressed_pair.114" }
%"class.Ice::JumpTableData" = type { %"class.Ice::StringID", %"class.Ice::StringID", i32, %"class.std::__1::vector.107" }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { i64*, i64*, %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { i64* }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.Ice::JumpTableData"* }
%"class.Ice::ErrorCode" = type <{ %"class.std::__1::error_code", i8, [7 x i8] }>
%"class.std::__1::error_code" = type { i32, %"class.std::__1::error_category"* }
%"class.std::__1::error_category" = type { i32 (...)** }
%"class.Ice::GlobalContext::CodeStats" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [6 x i32] }
%"class.Ice::GlobalContext::TimerList" = type { %"class.std::__1::vector.119" }
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { %"class.Ice::TimerStack"*, %"class.Ice::TimerStack"*, %"class.std::__1::__compressed_pair.156" }
%"class.Ice::TimerStack" = type { %"class.std::__1::basic_string", double, double, i64, %"class.std::__1::map", %"class.std::__1::vector.128", %"class.std::__1::vector.135", %"class.std::__1::vector.149", %"class.std::__1::vector.137", i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.121", %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"class.Ice::TimerStack::TimerTreeNode"*, %"class.Ice::TimerStack::TimerTreeNode"*, %"class.std::__1::__compressed_pair.144" }
%"class.Ice::TimerStack::TimerTreeNode" = type { %"class.std::__1::vector.137", i64, i32, double, i64 }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"class.Ice::TimerStack::TimerTreeNode"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { double*, double*, %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { double* }
%"class.std::__1::vector.137" = type { %"class.std::__1::__vector_base.138" }
%"class.std::__1::__vector_base.138" = type { i64*, i64*, %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { i64* }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.Ice::TimerStack"* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.llvm::raw_ostream" = type <{ i32 (...)**, i8*, i8*, i8*, i32, [4 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i8 }
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.Ice::ELFObjectWriter"* }
%"class.Ice::ELFObjectWriter" = type opaque
%"class.Ice::BoundedProducerConsumerQueue" = type <{ [65536 x %"class.std::__1::unique_ptr.167"], %"class.std::__1::mutex", [24 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.Ice::OptWorkItem"* }
%"class.Ice::OptWorkItem" = type { i32 (...)** }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.173, %union.anon.175, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.173 = type { i64 }
%union.anon.175 = type { i64 }
%"class.Ice::BoundedProducerConsumerQueue.177" = type <{ [128 x %"class.std::__1::unique_ptr.178"], %"class.std::__1::mutex", [24 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], %"class.std::__1::condition_variable", i64, [8 x i8], i64, i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.Ice::EmitterWorkItem"* }
%"class.Ice::EmitterWorkItem" = type { i32, i32, %"class.std::__1::unique_ptr.181", %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.193" }
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.Ice::VariableDeclarationList"* }
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.Ice::Assembler"* }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.Ice::Cfg"* }
%"class.Ice::Cfg" = type <{ %"class.std::__1::unique_ptr.40", %"class.Ice::GlobalContext"*, i32, i32, i32, [4 x i8], %"class.Ice::StringID", i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.Ice::CfgNode"*, %"class.std::__1::vector.196", i32, [4 x i8], %"class.std::__1::vector.202", %"class.std::__1::vector.202", %"class.std::__1::vector.202", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.208", %"class.std::__1::unique_ptr.214", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.181", %"class.std::__1::vector.238", %"class.Ice::CfgNode"*, %"class.std::__1::vector.244", i32, [4 x i8] }>
%"class.std::__1::vector.196" = type { %"class.std::__1::__vector_base.197" }
%"class.std::__1::__vector_base.197" = type { %"class.Ice::CfgNode"**, %"class.Ice::CfgNode"**, %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199", %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.Ice::CfgNode"** }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"struct.Ice::sz_allocator.201" }
%"struct.Ice::sz_allocator.201" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"class.Ice::Variable"**, %"class.Ice::Variable"**, %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205", %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"class.Ice::Variable"** }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"struct.Ice::sz_allocator.207" }
%"struct.Ice::sz_allocator.207" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::unique_ptr.208" = type { %"class.std::__1::__compressed_pair.209" }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.Ice::Liveness"* }
%"class.Ice::Liveness" = type opaque
%"class.std::__1::unique_ptr.214" = type { %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.Ice::TargetLowering"* }
%"class.Ice::TargetLowering" = type opaque
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.Ice::VariablesMetadata"* }
%"class.Ice::VariablesMetadata" = type { %"class.Ice::Cfg"*, i32, %"class.std::__1::vector.223" }
%"class.std::__1::vector.223" = type { %"class.std::__1::__vector_base.224" }
%"class.std::__1::__vector_base.224" = type { %"class.Ice::VariableTracking"*, %"class.Ice::VariableTracking"*, %"class.std::__1::__compressed_pair.231" }
%"class.Ice::VariableTracking" = type <{ i32, i32, %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"*, %"class.std::__1::vector.225", %"class.Ice::Inst"*, %"class.Ice::RegWeight", [4 x i8] }>
%"class.std::__1::vector.225" = type { %"class.std::__1::__vector_base.226" }
%"class.std::__1::__vector_base.226" = type { %"class.Ice::Inst"**, %"class.Ice::Inst"**, %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228", %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.Ice::Inst"** }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"struct.Ice::sz_allocator.230" }
%"struct.Ice::sz_allocator.230" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.Ice::Inst" = type opaque
%"class.Ice::RegWeight" = type { i32 }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232", %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"class.Ice::VariableTracking"* }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.Ice::sz_allocator.234" }
%"struct.Ice::sz_allocator.234" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::vector.238" = type { %"class.std::__1::__vector_base.239" }
%"class.std::__1::__vector_base.239" = type { %"class.Ice::InstJumpTable"**, %"class.Ice::InstJumpTable"**, %"class.std::__1::__compressed_pair.240" }
%"class.Ice::InstJumpTable" = type opaque
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.241", %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"class.Ice::InstJumpTable"** }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.Ice::sz_allocator.243" }
%"struct.Ice::sz_allocator.243" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.Ice::CfgNode" = type opaque
%"class.std::__1::vector.244" = type { %"class.std::__1::__vector_base.245" }
%"class.std::__1::__vector_base.245" = type { %"struct.Ice::Loop"*, %"struct.Ice::Loop"*, %"class.std::__1::__compressed_pair.269" }
%"struct.Ice::Loop" = type { %"class.Ice::CfgNode"*, %"class.Ice::CfgNode"*, %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.246" }
%"class.std::__1::__hash_table.246" = type <{ %"class.std::__1::unique_ptr.247", %"class.std::__1::__compressed_pair.256", %"class.std::__1::__compressed_pair.260", %"class.std::__1::__compressed_pair.264", [4 x i8] }>
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249", %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"struct.std::__1::__hash_node_base.250"** }
%"struct.std::__1::__hash_node_base.250" = type { %"struct.std::__1::__hash_node_base.250"* }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.std::__1::__bucket_list_deallocator.252" }
%"class.std::__1::__bucket_list_deallocator.252" = type { %"class.std::__1::__compressed_pair.253" }
%"class.std::__1::__compressed_pair.253" = type { %"struct.std::__1::__compressed_pair_elem.22", %"struct.std::__1::__compressed_pair_elem.254" }
%"struct.std::__1::__compressed_pair_elem.254" = type { %"struct.Ice::sz_allocator.255" }
%"struct.Ice::sz_allocator.255" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.257", %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"struct.std::__1::__hash_node_base.250" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"struct.Ice::sz_allocator.259" }
%"struct.Ice::sz_allocator.259" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::__compressed_pair.260" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270", %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.Ice::Loop"* }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.Ice::sz_allocator.272" }
%"struct.Ice::sz_allocator.272" = type { %"class.llvm::BumpPtrAllocatorImpl.15"* }
%"class.std::__1::unique_ptr.280" = type { %"class.std::__1::__compressed_pair.281" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"class.Ice::TargetDataLowering"* }
%"class.Ice::TargetDataLowering" = type opaque
%"class.std::__1::unique_ptr.286" = type { %"class.std::__1::__compressed_pair.287" }
%"class.std::__1::__compressed_pair.287" = type { %"struct.std::__1::__compressed_pair_elem.288" }
%"struct.std::__1::__compressed_pair_elem.288" = type { %"class.Ice::Instrumentation"* }
%"class.Ice::Instrumentation" = type { i32 (...)**, %"class.Ice::GlobalContext"*, i8, %"class.std::__1::mutex", %"class.std::__1::condition_variable" }
%"class.llvm::SmallVector.292" = type { %"class.llvm::SmallVectorImpl.293", %"struct.llvm::SmallVectorStorage.297" }
%"class.llvm::SmallVectorImpl.293" = type { %"class.llvm::SmallVectorTemplateBase.294" }
%"class.llvm::SmallVectorTemplateBase.294" = type { %"class.llvm::SmallVectorTemplateCommon.295" }
%"class.llvm::SmallVectorTemplateCommon.295" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.296" }
%"struct.llvm::AlignedCharArrayUnion.296" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage.297" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.296"] }
%"class.llvm::SmallVector.298" = type { %"class.llvm::SmallVectorImpl.299", %"struct.llvm::SmallVectorStorage.303" }
%"class.llvm::SmallVectorImpl.299" = type { %"class.llvm::SmallVectorTemplateBase.300" }
%"class.llvm::SmallVectorTemplateBase.300" = type { %"class.llvm::SmallVectorTemplateCommon.301" }
%"class.llvm::SmallVectorTemplateCommon.301" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.302" }
%"struct.llvm::AlignedCharArrayUnion.302" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage.303" = type { [127 x %"struct.llvm::AlignedCharArrayUnion.302"] }
%"struct.std::__1::pair.305" = type { i8*, i64 }

$_ZN3Ice18AssemblerTextFixupC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE8AllocateEmm = comdat any

$_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_ = comdat any

$_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE12StartNewSlabEv = comdat any

$_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_ = comdat any

$_ZN4llvm11raw_ostreamlsENS_9StringRefE = comdat any

@.str = private unnamed_addr constant [55 x i8] c"Unexpected overflow in AssemblerBuffer::ExtendCapacity\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"\09.byte 0x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@_ZTVN3Ice14AssemblerFixupE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3Ice18AssemblerTextFixupE = external unnamed_addr constant { [6 x i8*] }, align 8

@_ZN3Ice15AssemblerBuffer14EnsureCapacityD1Ev = hidden unnamed_addr alias void (%"class.Ice::AssemblerBuffer::EnsureCapacity"*), void (%"class.Ice::AssemblerBuffer::EnsureCapacity"*)* @_ZN3Ice15AssemblerBuffer14EnsureCapacityD2Ev
@_ZN3Ice15AssemblerBufferC1ERNS_9AssemblerE = hidden unnamed_addr alias void (%"class.Ice::AssemblerBuffer"*, %"class.Ice::Assembler"*), void (%"class.Ice::AssemblerBuffer"*, %"class.Ice::Assembler"*)* @_ZN3Ice15AssemblerBufferC2ERNS_9AssemblerE
@_ZN3Ice15AssemblerBufferD1Ev = hidden unnamed_addr alias void (%"class.Ice::AssemblerBuffer"*), void (%"class.Ice::AssemblerBuffer"*)* @_ZN3Ice15AssemblerBufferD2Ev

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN3Ice5Label6linkToERKNS_9AssemblerEl(%"class.Ice::Label"* nocapture, %"class.Ice::Assembler"* nocapture readonly dereferenceable(240), i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %1, i64 0, i32 6
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %1, i64 0, i32 8, i32 7
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = add nsw i64 %2, 4
  %13 = getelementptr inbounds %"class.Ice::Label", %"class.Ice::Label"* %0, i64 0, i32 1
  store i64 %12, i64* %13, align 8
  br label %14

14:                                               ; preds = %7, %3, %11
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15AssemblerBuffer12installFixupEPNS_14AssemblerFixupE(%"class.Ice::AssemblerBuffer"*, %"class.Ice::AssemblerFixup"*) local_unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.Ice::AssemblerFixup"* %1 to i64
  %4 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 5
  %5 = load %"class.Ice::Assembler"*, %"class.Ice::Assembler"** %4, align 8
  %6 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %5, i64 0, i32 6
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %79

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 6
  %11 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 6, i32 0, i32 1
  %12 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %11, align 8
  %13 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %14 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %13, align 8
  %15 = icmp eq %"class.Ice::AssemblerFixup"** %12, %14
  %16 = ptrtoint %"class.Ice::AssemblerFixup"** %14 to i64
  br i1 %15, label %22, label %17

17:                                               ; preds = %9
  %18 = bitcast %"class.Ice::AssemblerFixup"** %12 to i64*
  store i64 %3, i64* %18, align 8
  %19 = getelementptr inbounds %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %12, i64 1
  %20 = ptrtoint %"class.Ice::AssemblerFixup"** %19 to i64
  %21 = bitcast %"class.Ice::AssemblerFixup"*** %11 to i64*
  store i64 %20, i64* %21, align 8
  br label %79

22:                                               ; preds = %9
  %23 = ptrtoint %"class.Ice::AssemblerFixup"** %12 to i64
  %24 = bitcast %"class.Ice::AssemblerFixup"*** %11 to i64*
  %25 = bitcast %"class.std::__1::vector"* %10 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %23, %26
  %28 = ashr exact i64 %27, 3
  %29 = add nsw i64 %28, 1
  %30 = icmp ugt i64 %29, 2305843009213693951
  br i1 %30, label %31, label %33

31:                                               ; preds = %22
  %32 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #10
  unreachable

33:                                               ; preds = %22
  %34 = bitcast %"class.Ice::AssemblerFixup"*** %13 to i64*
  %35 = sub i64 %16, %26
  %36 = ashr exact i64 %35, 3
  %37 = icmp ult i64 %36, 1152921504606846975
  br i1 %37, label %38, label %46

38:                                               ; preds = %33
  %39 = ashr exact i64 %35, 2
  %40 = icmp ult i64 %39, %29
  %41 = select i1 %40, i64 %29, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = icmp ugt i64 %41, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %43
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %43, %33
  %47 = phi i64 [ %41, %43 ], [ 2305843009213693951, %33 ]
  %48 = shl i64 %47, 3
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to %"class.Ice::AssemblerFixup"**
  br label %51

51:                                               ; preds = %46, %38
  %52 = phi i64 [ %47, %46 ], [ 0, %38 ]
  %53 = phi %"class.Ice::AssemblerFixup"** [ %50, %46 ], [ null, %38 ]
  %54 = getelementptr inbounds %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %53, i64 %28
  %55 = getelementptr inbounds %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %53, i64 %52
  %56 = ptrtoint %"class.Ice::AssemblerFixup"** %55 to i64
  %57 = bitcast %"class.Ice::AssemblerFixup"** %54 to i64*
  store i64 %3, i64* %57, align 8
  %58 = getelementptr inbounds %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %54, i64 1
  %59 = ptrtoint %"class.Ice::AssemblerFixup"** %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %61 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %60, align 8
  %62 = load i64, i64* %24, align 8
  %63 = ptrtoint %"class.Ice::AssemblerFixup"** %61 to i64
  %64 = sub i64 %62, %63
  %65 = ashr exact i64 %64, 3
  %66 = sub nsw i64 0, %65
  %67 = getelementptr inbounds %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %54, i64 %66
  %68 = ptrtoint %"class.Ice::AssemblerFixup"** %67 to i64
  %69 = icmp sgt i64 %64, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %51
  %71 = bitcast %"class.Ice::AssemblerFixup"** %67 to i8*
  %72 = bitcast %"class.Ice::AssemblerFixup"** %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 %64, i1 false) #12
  %73 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %60, align 8
  br label %74

74:                                               ; preds = %70, %51
  %75 = phi %"class.Ice::AssemblerFixup"** [ %61, %51 ], [ %73, %70 ]
  store i64 %68, i64* %25, align 8
  store i64 %59, i64* %24, align 8
  store i64 %56, i64* %34, align 8
  %76 = icmp eq %"class.Ice::AssemblerFixup"** %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast %"class.Ice::AssemblerFixup"** %75 to i8*
  tail call void @_ZdlPv(i8* %78) #11
  br label %79

79:                                               ; preds = %2, %77, %74, %17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.Ice::AssemblerFixup"* @_ZN3Ice15AssemblerBuffer11createFixupEjPKNS_8ConstantE(%"class.Ice::AssemblerBuffer"*, i32, %"class.Ice::Constant"*) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 5
  %5 = load %"class.Ice::Assembler"*, %"class.Ice::Assembler"** %4, align 8
  %6 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %5, i64 0, i32 3
  %7 = tail call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %6, i64 40, i64 8) #13
  %8 = bitcast i8* %7 to %"class.Ice::AssemblerFixup"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false)
  %9 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3Ice14AssemblerFixupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #12
  %11 = getelementptr inbounds i8, i8* %7, i64 16
  %12 = bitcast i8* %11 to i32*
  store i32 %1, i32* %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 24
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds i8, i8* %7, i64 32
  %15 = bitcast i8* %14 to %"class.Ice::Constant"**
  store %"class.Ice::Constant"* %2, %"class.Ice::Constant"** %15, align 8
  tail call void @_ZN3Ice15AssemblerBuffer12installFixupEPNS_14AssemblerFixupE(%"class.Ice::AssemblerBuffer"* %0, %"class.Ice::AssemblerFixup"* %8) #14
  ret %"class.Ice::AssemblerFixup"* %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.Ice::AssemblerTextFixup"* @_ZN3Ice15AssemblerBuffer15createTextFixupERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.Ice::AssemblerBuffer"*, %"class.std::__1::basic_string"* dereferenceable(24), i64) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 5
  %5 = load %"class.Ice::Assembler"*, %"class.Ice::Assembler"** %4, align 8
  %6 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %5, i64 0, i32 3
  %7 = tail call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %6, i64 72, i64 8) #13
  %8 = bitcast i8* %7 to %"class.Ice::AssemblerTextFixup"*
  tail call void @_ZN3Ice18AssemblerTextFixupC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.Ice::AssemblerTextFixup"* %8, %"class.std::__1::basic_string"* dereferenceable(24) %1, i64 %2) #14
  %9 = bitcast i8* %7 to %"class.Ice::AssemblerFixup"*
  tail call void @_ZN3Ice15AssemblerBuffer12installFixupEPNS_14AssemblerFixupE(%"class.Ice::AssemblerBuffer"* %0, %"class.Ice::AssemblerFixup"* %9) #14
  %10 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 8
  ret %"class.Ice::AssemblerTextFixup"* %8
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN3Ice18AssemblerTextFixupC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEm(%"class.Ice::AssemblerTextFixup"*, %"class.std::__1::basic_string"* dereferenceable(24), i64) unnamed_addr #1 comdat align 2 {
  %4 = bitcast %"class.Ice::AssemblerTextFixup"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 40, i1 false)
  %5 = getelementptr inbounds %"class.Ice::AssemblerTextFixup", %"class.Ice::AssemblerTextFixup"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.Ice::AssemblerTextFixup", %"class.Ice::AssemblerTextFixup"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i64* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 17, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3Ice18AssemblerTextFixupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.Ice::AssemblerTextFixup", %"class.Ice::AssemblerTextFixup"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %15 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false) #12
  br label %21

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %8, i8* %18, i64 %20) #13
  br label %21

21:                                               ; preds = %13, %16
  %22 = getelementptr inbounds %"class.Ice::AssemblerTextFixup", %"class.Ice::AssemblerTextFixup"* %0, i64 0, i32 2
  store i64 %2, i64* %22, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15AssemblerBuffer14EnsureCapacity8validateEPS0_(%"class.Ice::AssemblerBuffer::EnsureCapacity"* nocapture, %"class.Ice::AssemblerBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.Ice::AssemblerBuffer::EnsureCapacity", %"class.Ice::AssemblerBuffer::EnsureCapacity"* %0, i64 0, i32 0
  %4 = load %"class.Ice::AssemblerBuffer"*, %"class.Ice::AssemblerBuffer"** %3, align 8
  %5 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %4, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %4, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %6, 32
  %10 = sub i64 %9, %8
  %11 = getelementptr inbounds %"class.Ice::AssemblerBuffer::EnsureCapacity", %"class.Ice::AssemblerBuffer::EnsureCapacity"* %0, i64 0, i32 1
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %1, i64 0, i32 0
  store i8 1, i8* %12, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15AssemblerBuffer14EnsureCapacityD2Ev(%"class.Ice::AssemblerBuffer::EnsureCapacity"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.Ice::AssemblerBuffer::EnsureCapacity", %"class.Ice::AssemblerBuffer::EnsureCapacity"* %0, i64 0, i32 0
  %3 = load %"class.Ice::AssemblerBuffer"*, %"class.Ice::AssemblerBuffer"** %2, align 8
  %4 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %3, i64 0, i32 0
  store i8 0, i8* %4, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15AssemblerBufferC2ERNS_9AssemblerE(%"class.Ice::AssemblerBuffer"* nocapture, %"class.Ice::Assembler"* dereferenceable(240)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 5
  store %"class.Ice::Assembler"* %1, %"class.Ice::Assembler"** %3, align 8
  %4 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 6
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #12
  %6 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %1, i64 0, i32 3
  %7 = tail call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %6, i64 4096, i64 16) #13
  %8 = ptrtoint i8* %7 to i64
  %9 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 2
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 3
  store i64 %8, i64* %10, align 8
  %11 = add i64 %8, 4064
  %12 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 4
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 0
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 7
  store i8 0, i8* %14, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15AssemblerBufferD2Ev(%"class.Ice::AssemblerBuffer"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 6, i32 0, i32 0
  %3 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %2, align 8
  %4 = icmp eq %"class.Ice::AssemblerFixup"** %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.Ice::AssemblerFixup"** %3 to i64
  %7 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 6, i32 0, i32 1
  %8 = bitcast %"class.Ice::AssemblerFixup"*** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.Ice::AssemblerFixup"** %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3Ice15AssemblerBuffer14extendCapacityEv(%"class.Ice::AssemblerBuffer"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 32, %4
  %8 = add i64 %7, %6
  %9 = shl nsw i64 %8, 1
  %10 = add nsw i64 %8, 1048576
  %11 = icmp slt i64 %10, %9
  %12 = select i1 %11, i64 %10, i64 %9
  %13 = icmp slt i64 %12, %8
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  tail call void @_ZN4llvm18report_fatal_errorEPKcb(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i1 zeroext true) #10
  unreachable

15:                                               ; preds = %1
  %16 = load i64, i64* %2, align 8
  %17 = sub i64 %16, %4
  %18 = getelementptr inbounds %"class.Ice::AssemblerBuffer", %"class.Ice::AssemblerBuffer"* %0, i64 0, i32 5
  %19 = load %"class.Ice::Assembler"*, %"class.Ice::Assembler"** %18, align 8
  %20 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %19, i64 0, i32 3
  %21 = tail call noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"* %20, i64 %12, i64 16) #13
  %22 = ptrtoint i8* %21 to i64
  %23 = bitcast i64* %3 to i8**
  %24 = load i8*, i8** %23, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %24, i64 %17, i1 false)
  %25 = ptrtoint i8* %24 to i64
  %26 = sub i64 %22, %25
  store i64 %22, i64* %3, align 8
  %27 = load i64, i64* %2, align 8
  %28 = add i64 %26, %27
  store i64 %28, i64* %2, align 8
  %29 = add i64 %12, -32
  %30 = add i64 %29, %22
  store i64 %30, i64* %5, align 8
  ret void
}

; Function Attrs: noreturn optsize
declare void @_ZN4llvm18report_fatal_errorEPKcb(i8*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK3Ice9Assembler13getBufferViewEv(%"class.Ice::Assembler"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = inttoptr i64 %3 to i8*
  %5 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %6, %3
  %8 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %9 = insertvalue { i8*, i64 } %8, i64 %7, 1
  ret { i8*, i64 } %9
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN3Ice9Assembler15bindRelocOffsetEPNS_11RelocOffsetE(%"class.Ice::Assembler"* nocapture readonly, %"class.Ice::RelocOffset"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 6
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds %"class.Ice::RelocOffset", %"class.Ice::RelocOffset"* %1, i64 0, i32 0
  %14 = load i8, i8* %13, align 4, !range !2
  %15 = icmp eq i8 %14, 0
  %16 = sub nsw i32 0, %12
  %17 = select i1 %15, i32 %12, i32 %16
  %18 = getelementptr inbounds %"class.Ice::RelocOffset", %"class.Ice::RelocOffset"* %1, i64 0, i32 2
  store i32 %17, i32* %18, align 4
  %19 = getelementptr inbounds %"class.Ice::RelocOffset", %"class.Ice::RelocOffset"* %1, i64 0, i32 1
  store i8 1, i8* %19, align 1
  br label %20

20:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZNK3Ice9Assembler12emitIASBytesEPNS_13GlobalContextE(%"class.Ice::Assembler"*, %"class.Ice::GlobalContext"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.Ice::GlobalContext", %"class.Ice::GlobalContext"* %1, i64 0, i32 24
  %4 = load %"class.llvm::raw_ostream"*, %"class.llvm::raw_ostream"** %3, align 8
  %5 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 6, i32 0, i32 0
  %11 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %10, align 8
  %12 = getelementptr inbounds %"class.Ice::Assembler", %"class.Ice::Assembler"* %0, i64 0, i32 8, i32 6, i32 0, i32 1
  %13 = load %"class.Ice::AssemblerFixup"**, %"class.Ice::AssemblerFixup"*** %12, align 8
  %14 = icmp eq %"class.Ice::AssemblerFixup"** %11, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %25, %2
  %16 = phi i64 [ 0, %2 ], [ %31, %25 ]
  %17 = icmp slt i64 %16, %9
  br i1 %17, label %47, label %46

18:                                               ; preds = %2, %25
  %19 = phi i64 [ %31, %25 ], [ 0, %2 ]
  %20 = phi %"class.Ice::AssemblerFixup"** [ %32, %25 ], [ %11, %2 ]
  %21 = load %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %20, align 8
  %22 = getelementptr inbounds %"class.Ice::AssemblerFixup", %"class.Ice::AssemblerFixup"* %21, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp slt i64 %19, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %34, %18
  %26 = bitcast %"class.Ice::AssemblerFixup"* %21 to i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)***
  %27 = load i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)**, i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)*** %26, align 8
  %28 = getelementptr inbounds i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)*, i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)** %27, i64 2
  %29 = load i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)*, i64 (%"class.Ice::AssemblerFixup"*, %"class.Ice::GlobalContext"*, %"class.Ice::Assembler"*)** %28, align 8
  %30 = tail call i64 %29(%"class.Ice::AssemblerFixup"* %21, %"class.Ice::GlobalContext"* %1, %"class.Ice::Assembler"* dereferenceable(240) %0) #13
  %31 = add i64 %30, %23
  %32 = getelementptr inbounds %"class.Ice::AssemblerFixup"*, %"class.Ice::AssemblerFixup"** %20, i64 1
  %33 = icmp eq %"class.Ice::AssemblerFixup"** %32, %13
  br i1 %33, label %15, label %18

34:                                               ; preds = %18, %34
  %35 = phi i64 [ %44, %34 ], [ %19, %18 ]
  %36 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i64 9) #13
  %37 = load i64, i64* %7, align 8
  %38 = add i64 %37, %35
  %39 = inttoptr i64 %38 to i8*
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream9write_hexEy(%"class.llvm::raw_ostream"* %4, i64 %41) #13
  %43 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1) #13
  %44 = add i64 %35, 1
  %45 = icmp eq i64 %44, %23
  br i1 %45, label %25, label %34

46:                                               ; preds = %47, %15
  ret void

47:                                               ; preds = %15, %47
  %48 = phi i64 [ %57, %47 ], [ %16, %15 ]
  %49 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i64 9) #13
  %50 = load i64, i64* %7, align 8
  %51 = add i64 %50, %48
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream9write_hexEy(%"class.llvm::raw_ostream"* %4, i64 %54) #13
  %56 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1) #13
  %57 = add i64 %48, 1
  %58 = icmp eq i64 %57, %9
  br i1 %58, label %46, label %47
}

; Function Attrs: optsize
declare dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream9write_hexEy(%"class.llvm::raw_ostream"*, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: optsize
declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden noalias i8* @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE8AllocateEmm(%"class.llvm::BumpPtrAllocatorImpl"*, i64, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = alloca %"struct.std::__1::pair.305", align 8
  %5 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %1
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  %11 = add i64 %2, -1
  %12 = add i64 %11, %10
  %13 = sub i64 0, %2
  %14 = and i64 %12, %13
  %15 = sub i64 %14, %10
  %16 = add i64 %15, %1
  %17 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %10
  %21 = icmp ugt i64 %16, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %3
  %23 = getelementptr inbounds i8, i8* %9, i64 %15
  %24 = getelementptr inbounds i8, i8* %23, i64 %1
  store i8* %24, i8** %8, align 8
  br label %45

25:                                               ; preds = %3
  %26 = add i64 %11, %1
  %27 = icmp ugt i64 %26, 32768
  br i1 %27, label %28, label %38

28:                                               ; preds = %25
  %29 = tail call noalias i8* @malloc(i64 %26) #13
  %30 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 3, i32 0, i32 0
  %31 = bitcast %"struct.std::__1::pair.305"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"struct.std::__1::pair.305", %"struct.std::__1::pair.305"* %4, i64 0, i32 0
  store i8* %29, i8** %32, align 8
  %33 = getelementptr inbounds %"struct.std::__1::pair.305", %"struct.std::__1::pair.305"* %4, i64 0, i32 1
  store i64 %26, i64* %33, align 8
  call void @_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_(%"class.llvm::SmallVectorTemplateBase.2"* %30, %"struct.std::__1::pair.305"* nonnull dereferenceable(16) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #12
  %34 = ptrtoint i8* %29 to i64
  %35 = add i64 %11, %34
  %36 = and i64 %35, %13
  %37 = inttoptr i64 %36 to i8*
  br label %45

38:                                               ; preds = %25
  tail call void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE12StartNewSlabEv(%"class.llvm::BumpPtrAllocatorImpl"* %0) #14
  %39 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, %11
  %42 = and i64 %41, %13
  %43 = inttoptr i64 %42 to i8*
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  store i8* %44, i8** %8, align 8
  br label %45

45:                                               ; preds = %28, %38, %22
  %46 = phi i8* [ %23, %22 ], [ %37, %28 ], [ %43, %38 ]
  ret i8* %46
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseINSt3__14pairIPvmEELb1EE9push_backERKS4_(%"class.llvm::SmallVectorTemplateBase.2"*, %"struct.std::__1::pair.305"* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8, !prof !3

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase.2", %"class.llvm::SmallVectorTemplateBase.2"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %9, i8* %10, i64 0, i64 16) #13
  %11 = load i8*, i8** %3, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i8* [ %4, %2 ], [ %11, %8 ]
  %14 = bitcast i8** %3 to %"struct.std::__1::pair.305"**
  %15 = bitcast %"struct.std::__1::pair.305"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"struct.std::__1::pair.305"*, %"struct.std::__1::pair.305"** %14, align 8
  %17 = getelementptr inbounds %"struct.std::__1::pair.305", %"struct.std::__1::pair.305"* %16, i64 1
  store %"struct.std::__1::pair.305"* %17, %"struct.std::__1::pair.305"** %14, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm20BumpPtrAllocatorImplINS_15MallocAllocatorELm32768ELm32768EE12StartNewSlabEv(%"class.llvm::BumpPtrAllocatorImpl"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.llvm::SmallVector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = lshr i64 %9, 10
  %11 = and i64 %10, 33554431
  %12 = icmp ult i64 %11, 30
  %13 = select i1 %12, i64 %11, i64 30
  %14 = shl i64 32768, %13
  %15 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #12
  %16 = tail call noalias i8* @malloc(i64 %14) #13
  store i8* %16, i8** %2, align 8
  %17 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %3, i64 0, i32 0, i32 0
  call void @_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"* %17, i8** nonnull dereferenceable(8) %2) #14
  %18 = bitcast i8** %2 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.llvm::BumpPtrAllocatorImpl"* %0 to i64*
  store i64 %19, i64* %20, align 8
  %21 = inttoptr i64 %19 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 %14
  %23 = getelementptr inbounds %"class.llvm::BumpPtrAllocatorImpl", %"class.llvm::BumpPtrAllocatorImpl"* %0, i64 0, i32 1
  store i8* %22, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #12
  ret void
}

; Function Attrs: nofree nounwind optsize
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseIPvLb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"*, i8** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %8, label %10, !prof !3

8:                                                ; preds = %2
  %9 = bitcast i8* %4 to i64*
  br label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %11, i8* %12, i64 0, i64 8) #13
  %13 = bitcast i8** %3 to i64**
  %14 = load i64*, i64** %13, align 8
  br label %15

15:                                               ; preds = %8, %10
  %16 = phi i64* [ %9, %8 ], [ %14, %10 ]
  %17 = bitcast i8** %3 to i8***
  %18 = bitcast i8** %1 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %16, align 1
  %20 = load i8**, i8*** %17, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  store i8** %21, i8*** %17, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostreamlsENS_9StringRefE(%"class.llvm::raw_ostream"*, i8*, i64) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.llvm::raw_ostream", %"class.llvm::raw_ostream"* %0, i64 0, i32 2
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.llvm::raw_ostream", %"class.llvm::raw_ostream"* %0, i64 0, i32 3
  %8 = load i8*, i8** %7, align 8
  %9 = ptrtoint i8* %8 to i64
  %10 = sub i64 %6, %9
  %11 = icmp ult i64 %10, %2
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = tail call dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"* %0, i8* %1, i64 %2) #13
  br label %19

14:                                               ; preds = %3
  %15 = icmp eq i64 %2, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %14
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %1, i64 %2, i1 false)
  %17 = load i8*, i8** %7, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %2
  store i8* %18, i8** %7, align 8
  br label %19

19:                                               ; preds = %16, %14, %12
  %20 = phi %"class.llvm::raw_ostream"* [ %13, %12 ], [ %0, %14 ], [ %0, %16 ]
  ret %"class.llvm::raw_ostream"* %20
}

; Function Attrs: optsize
declare dereferenceable(40) %"class.llvm::raw_ostream"* @_ZN4llvm11raw_ostream5writeEPKcm(%"class.llvm::raw_ostream"*, i8*, i64) local_unnamed_addr #5

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind optsize }
attributes #11 = { builtin nounwind optsize }
attributes #12 = { nounwind }
attributes #13 = { nounwind optsize }
attributes #14 = { optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
