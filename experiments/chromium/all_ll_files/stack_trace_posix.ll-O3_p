; ModuleID = '../../v8/src/base/debug/stack_trace_posix.cc'
source_filename = "../../v8/src/base/debug/stack_trace_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.v8::base::debug::StackTrace" = type { [62 x i8*], i64 }
%struct.sigaction = type { %union.anon, %struct.__sigset_t, i32, void ()* }
%union.anon = type { void (i32)* }
%struct.__sigset_t = type { [16 x i64] }
%struct.siginfo_t = type { i32, i32, i32, i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon.3, [80 x i8] }
%struct.anon.3 = type { i32, i32, i32, i64, i64 }
%"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler" = type { %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler" }
%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.12 }
%union.anon.12 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.13 }
%struct.anon.13 = type { i8 }
%"class.std::__1::allocator" = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler" = type { %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler", %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@_ZN2v84base5debug12_GLOBAL__N_128dump_stack_in_signal_handlerE = internal unnamed_addr global i1 false, align 1
@.str = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@_ZN2v84base5debug12_GLOBAL__N_117in_signal_handlerE = internal global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"Received signal \00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c" BUS_ADRALN \00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c" BUS_ADRERR \00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c" BUS_OBJERR \00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c" <unknown> \00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c" FPE_FLTDIV \00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c" FPE_FLTINV \00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c" FPE_FLTOVF \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c" FPE_FLTRES \00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c" FPE_FLTSUB \00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c" FPE_FLTUND \00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c" FPE_INTDIV \00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c" FPE_INTOVF \00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c" ILL_BADSTK \00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c" ILL_COPROC \00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c" ILL_ILLOPN \00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c" ILL_ILLADR \00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c" ILL_ILLTRP \00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c" ILL_PRVOPC \00", align 1
@.str.20 = private unnamed_addr constant [13 x i8] c" ILL_PRVREG \00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c" SEGV_MAPERR \00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c" SEGV_ACCERR \00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.24 = private unnamed_addr constant [22 x i8] c"[end of stack trace]\0A\00", align 1
@_ZTVN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandlerE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"*, i8*)* @_ZN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandler12HandleOutputEPKc to i8*), i8* bitcast (void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*)* @_ZN2v84base5debug12_GLOBAL__N_122BacktraceOutputHandlerD2Ev to i8*), i8* bitcast (void (%"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"*)* @_ZN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandlerD0Ev to i8*)] }, align 8
@.str.25 = private unnamed_addr constant [52 x i8] c"==== C stack trace ===============================\0A\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c" [\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@_ZN2v84base5debug12_GLOBAL__N_120kMangledSymbolPrefixE = internal constant [3 x i8] c"_Z\00", align 1
@_ZN2v84base5debug12_GLOBAL__N_117kSymbolCharactersE = internal constant [64 x i8] c"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\00", align 16
@.str.30 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@_ZTVN2v84base5debug12_GLOBAL__N_128StreamBacktraceOutputHandlerE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"*, i8*)* @_ZN2v84base5debug12_GLOBAL__N_128StreamBacktraceOutputHandler12HandleOutputEPKc to i8*), i8* bitcast (void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*)* @_ZN2v84base5debug12_GLOBAL__N_122BacktraceOutputHandlerD2Ev to i8*), i8* bitcast (void (%"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"*)* @_ZN2v84base5debug12_GLOBAL__N_128StreamBacktraceOutputHandlerD0Ev to i8*)] }, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN2v84base5debug10StackTraceC1Ev = hidden unnamed_addr alias void (%"class.v8::base::debug::StackTrace"*), void (%"class.v8::base::debug::StackTrace"*)* @_ZN2v84base5debug10StackTraceC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v84base5debug27EnableInProcessStackDumpingEv() local_unnamed_addr #0 {
  %1 = alloca %"class.v8::base::debug::StackTrace", align 8
  %2 = alloca %struct.sigaction, align 8
  %3 = alloca %struct.sigaction, align 8
  %4 = bitcast %struct.sigaction* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %4) #16
  %5 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %2, i64 0, i32 1
  %6 = bitcast %struct.__sigset_t* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 144, i1 false)
  %7 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %2, i64 0, i32 0, i32 0
  store void (i32)* inttoptr (i64 1 to void (i32)*), void (i32)** %7, align 8
  %8 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %2, i64 0, i32 1
  %9 = call i32 @sigemptyset(%struct.__sigset_t* %8) #16
  %10 = call i32 @sigaction(i32 13, %struct.sigaction* nonnull %2, %struct.sigaction* null) #16
  %11 = bitcast %"class.v8::base::debug::StackTrace"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 504, i8* nonnull %11) #16
  %12 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %1, i64 0, i32 0, i64 0
  %13 = call i32 @backtrace(i8** nonnull %12, i32 62) #16
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %1, i64 0, i32 1
  store i64 %14, i64* %15, align 8
  call void @_ZN2v84base5debug10StackTraceD1Ev(%"class.v8::base::debug::StackTrace"* nonnull %1) #16
  call void @llvm.lifetime.end.p0i8(i64 504, i8* nonnull %11) #16
  %16 = bitcast %struct.sigaction* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %16) #16
  %17 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i64 0, i32 1
  %18 = bitcast %struct.__sigset_t* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 144, i1 false)
  %19 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i64 0, i32 2
  store i32 -2147483644, i32* %19, align 8
  %20 = bitcast %struct.sigaction* %3 to void (i32, %struct.siginfo_t*, i8*)**
  store void (i32, %struct.siginfo_t*, i8*)* @_ZN2v84base5debug12_GLOBAL__N_122StackDumpSignalHandlerEiP9siginfo_tPv, void (i32, %struct.siginfo_t*, i8*)** %20, align 8
  %21 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i64 0, i32 1
  %22 = call i32 @sigemptyset(%struct.__sigset_t* %21) #16
  %23 = call i32 @sigaction(i32 4, %struct.sigaction* nonnull %3, %struct.sigaction* null) #16
  %24 = or i32 %23, %10
  %25 = call i32 @sigaction(i32 6, %struct.sigaction* nonnull %3, %struct.sigaction* null) #16
  %26 = or i32 %24, %25
  %27 = call i32 @sigaction(i32 8, %struct.sigaction* nonnull %3, %struct.sigaction* null) #16
  %28 = or i32 %26, %27
  %29 = call i32 @sigaction(i32 7, %struct.sigaction* nonnull %3, %struct.sigaction* null) #16
  %30 = or i32 %28, %29
  %31 = call i32 @sigaction(i32 11, %struct.sigaction* nonnull %3, %struct.sigaction* null) #16
  %32 = or i32 %30, %31
  %33 = call i32 @sigaction(i32 31, %struct.sigaction* nonnull %3, %struct.sigaction* null) #16
  %34 = or i32 %32, %33
  %35 = icmp eq i32 %34, 0
  store i1 false, i1* @_ZN2v84base5debug12_GLOBAL__N_128dump_stack_in_signal_handlerE, align 1
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %16) #16
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %4) #16
  ret i1 %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i32 @sigemptyset(%struct.__sigset_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v84base5debug12_GLOBAL__N_122StackDumpSignalHandlerEiP9siginfo_tPv(i32, %struct.siginfo_t* nocapture readonly, i8* nocapture readnone) #0 {
  %4 = alloca %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler", align 8
  %5 = alloca [1024 x i8], align 16
  %6 = alloca %"class.v8::base::debug::StackTrace", align 8
  store volatile i32 1, i32* @_ZN2v84base5debug12_GLOBAL__N_117in_signal_handlerE, align 4
  %7 = tail call i64 @write(i32 2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i64 16) #16
  %8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %8) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 1024, i1 false)
  %9 = sext i32 %0 to i64
  %10 = icmp slt i32 %0, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %3
  %12 = sub nsw i64 0, %9
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 1
  store i8 45, i8* %8, align 16
  br label %14

14:                                               ; preds = %11, %3
  %15 = phi i64 [ 1022, %11 ], [ 1023, %3 ]
  %16 = phi i8* [ %13, %11 ], [ %8, %3 ]
  %17 = phi i64 [ %12, %11 ], [ %9, %3 ]
  br label %18

18:                                               ; preds = %24, %14
  %19 = phi i64 [ %17, %14 ], [ %29, %24 ]
  %20 = phi i64 [ 0, %14 ], [ %28, %24 ]
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  %22 = icmp eq i64 %20, %15
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  store i8 0, i8* %8, align 16
  br label %49

24:                                               ; preds = %18
  %25 = urem i64 %19, 10
  %26 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = add nuw nsw i64 %20, 1
  store i8 %27, i8* %21, align 1
  %29 = udiv i64 %19, 10
  %30 = icmp ugt i64 %19, 9
  br i1 %30, label %18, label %31

31:                                               ; preds = %24
  %32 = getelementptr inbounds i8, i8* %16, i64 %28
  store i8 0, i8* %32, align 1
  %33 = icmp eq i64 %20, 0
  br i1 %33, label %49, label %34

34:                                               ; preds = %31
  %35 = load i8, i8* %16, align 1
  store i8 %35, i8* %21, align 1
  store i8 %27, i8* %16, align 1
  %36 = add nsw i64 %20, -1
  %37 = icmp sgt i64 %36, 1
  br i1 %37, label %38, label %49

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, i8* %16, i64 %36
  %40 = getelementptr inbounds i8, i8* %16, i64 1
  br label %41

41:                                               ; preds = %38, %41
  %42 = phi i8* [ %47, %41 ], [ %39, %38 ]
  %43 = phi i8* [ %46, %41 ], [ %40, %38 ]
  %44 = load i8, i8* %42, align 1
  %45 = load i8, i8* %43, align 1
  store i8 %45, i8* %42, align 1
  %46 = getelementptr inbounds i8, i8* %43, i64 1
  store i8 %44, i8* %43, align 1
  %47 = getelementptr inbounds i8, i8* %42, i64 -1
  %48 = icmp ugt i8* %47, %46
  br i1 %48, label %41, label %49

49:                                               ; preds = %41, %31, %34, %23
  %50 = call i64 @strlen(i8* nonnull %8) #17
  %51 = call i64 @write(i32 2, i8* nonnull %8, i64 %50) #16
  switch i32 %0, label %154 [
    i32 7, label %52
    i32 8, label %63
    i32 4, label %84
    i32 11, label %103
  ]

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  switch i32 %54, label %61 [
    i32 1, label %55
    i32 2, label %57
    i32 3, label %59
  ]

55:                                               ; preds = %52
  %56 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i64 12) #16
  br label %112

57:                                               ; preds = %52
  %58 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i64 12) #16
  br label %112

59:                                               ; preds = %52
  %60 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i64 12) #16
  br label %112

61:                                               ; preds = %52
  %62 = call i64 @write(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11) #16
  br label %112

63:                                               ; preds = %49
  %64 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %1, i64 0, i32 2
  %65 = load i32, i32* %64, align 8
  switch i32 %65, label %82 [
    i32 3, label %66
    i32 7, label %68
    i32 4, label %70
    i32 6, label %72
    i32 8, label %74
    i32 5, label %76
    i32 1, label %78
    i32 2, label %80
  ]

66:                                               ; preds = %63
  %67 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i64 12) #16
  br label %112

68:                                               ; preds = %63
  %69 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i64 12) #16
  br label %112

70:                                               ; preds = %63
  %71 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i64 12) #16
  br label %112

72:                                               ; preds = %63
  %73 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i64 12) #16
  br label %112

74:                                               ; preds = %63
  %75 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i64 12) #16
  br label %112

76:                                               ; preds = %63
  %77 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i64 12) #16
  br label %112

78:                                               ; preds = %63
  %79 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i64 12) #16
  br label %112

80:                                               ; preds = %63
  %81 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0), i64 12) #16
  br label %112

82:                                               ; preds = %63
  %83 = call i64 @write(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11) #16
  br label %112

84:                                               ; preds = %49
  %85 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %1, i64 0, i32 2
  %86 = load i32, i32* %85, align 8
  switch i32 %86, label %101 [
    i32 8, label %87
    i32 7, label %89
    i32 2, label %91
    i32 3, label %93
    i32 4, label %95
    i32 5, label %97
    i32 6, label %99
  ]

87:                                               ; preds = %84
  %88 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i64 12) #16
  br label %112

89:                                               ; preds = %84
  %90 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i64 12) #16
  br label %112

91:                                               ; preds = %84
  %92 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i64 12) #16
  br label %112

93:                                               ; preds = %84
  %94 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0), i64 12) #16
  br label %112

95:                                               ; preds = %84
  %96 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0), i64 12) #16
  br label %112

97:                                               ; preds = %84
  %98 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i64 0, i64 0), i64 12) #16
  br label %112

99:                                               ; preds = %84
  %100 = call i64 @write(i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.20, i64 0, i64 0), i64 12) #16
  br label %112

101:                                              ; preds = %84
  %102 = call i64 @write(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11) #16
  br label %112

103:                                              ; preds = %49
  %104 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %1, i64 0, i32 2
  %105 = load i32, i32* %104, align 8
  switch i32 %105, label %110 [
    i32 1, label %106
    i32 2, label %108
  ]

106:                                              ; preds = %103
  %107 = call i64 @write(i32 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i64 13) #16
  br label %112

108:                                              ; preds = %103
  %109 = call i64 @write(i32 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0), i64 13) #16
  br label %112

110:                                              ; preds = %103
  %111 = call i64 @write(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11) #16
  br label %112

112:                                              ; preds = %57, %61, %59, %55, %89, %93, %97, %101, %99, %95, %91, %87, %106, %110, %108, %66, %70, %74, %78, %82, %80, %76, %72, %68
  %113 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %1, i64 0, i32 4
  %114 = bitcast %union.anon.0* %113 to i64*
  %115 = load i64, i64* %114, align 8
  br label %116

116:                                              ; preds = %123, %112
  %117 = phi i64 [ 12, %112 ], [ %131, %123 ]
  %118 = phi i64 [ %115, %112 ], [ %128, %123 ]
  %119 = phi i64 [ 0, %112 ], [ %127, %123 ]
  %120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %119
  %121 = icmp eq i64 %119, 1023
  br i1 %121, label %122, label %123

122:                                              ; preds = %116
  store i8 0, i8* %8, align 16
  br label %151

123:                                              ; preds = %116
  %124 = and i64 %118, 15
  %125 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = add nuw nsw i64 %119, 1
  store i8 %126, i8* %120, align 1
  %128 = lshr i64 %118, 4
  %129 = icmp eq i64 %117, 0
  %130 = add i64 %117, -1
  %131 = select i1 %129, i64 0, i64 %130
  %132 = icmp ugt i64 %118, 15
  %133 = icmp ne i64 %131, 0
  %134 = or i1 %133, %132
  br i1 %134, label %116, label %135

135:                                              ; preds = %123
  %136 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 %127
  store i8 0, i8* %136, align 1
  %137 = icmp eq i64 %119, 0
  br i1 %137, label %151, label %138

138:                                              ; preds = %135
  %139 = load i8, i8* %8, align 16
  store i8 %139, i8* %120, align 1
  %140 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 1
  store i8 %126, i8* %8, align 16
  %141 = getelementptr inbounds i8, i8* %120, i64 -1
  %142 = icmp ugt i8* %141, %140
  br i1 %142, label %143, label %151

143:                                              ; preds = %138, %143
  %144 = phi i8* [ %149, %143 ], [ %141, %138 ]
  %145 = phi i8* [ %148, %143 ], [ %140, %138 ]
  %146 = load i8, i8* %144, align 1
  %147 = load i8, i8* %145, align 1
  store i8 %147, i8* %144, align 1
  %148 = getelementptr inbounds i8, i8* %145, i64 1
  store i8 %146, i8* %145, align 1
  %149 = getelementptr inbounds i8, i8* %144, i64 -1
  %150 = icmp ugt i8* %149, %148
  br i1 %150, label %143, label %151

151:                                              ; preds = %143, %138, %135, %122
  %152 = call i64 @strlen(i8* nonnull %8) #17
  %153 = call i64 @write(i32 2, i8* nonnull %8, i64 %152) #16
  br label %154

154:                                              ; preds = %49, %151
  %155 = call i64 @write(i32 2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0), i64 1) #16
  %156 = load i1, i1* @_ZN2v84base5debug12_GLOBAL__N_128dump_stack_in_signal_handlerE, align 1
  br i1 %156, label %167, label %157

157:                                              ; preds = %154
  %158 = bitcast %"class.v8::base::debug::StackTrace"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 504, i8* nonnull %158) #16
  %159 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %6, i64 0, i32 0, i64 0
  %160 = call i32 @backtrace(i8** nonnull %159, i32 62) #16
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %6, i64 0, i32 1
  store i64 %161, i64* %162, align 8
  %163 = bitcast %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %163) #16
  %164 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %164, align 8
  %165 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %4, i64 0, i32 0
  call fastcc void @_ZN2v84base5debug12_GLOBAL__N_116ProcessBacktraceEPKPvmPNS2_22BacktraceOutputHandlerE(i8** nonnull %159, i64 %161, %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* nonnull %165) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %163) #16
  call void @_ZN2v84base5debug10StackTraceD1Ev(%"class.v8::base::debug::StackTrace"* nonnull %6) #16
  call void @llvm.lifetime.end.p0i8(i64 504, i8* nonnull %158) #16
  %166 = call i64 @write(i32 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.24, i64 0, i64 0), i64 21) #16
  br label %167

167:                                              ; preds = %154, %157
  %168 = call void (i32)* @signal(i32 %0, void (i32)* null) #16
  %169 = icmp eq void (i32)* %168, inttoptr (i64 -1 to void (i32)*)
  br i1 %169, label %170, label %171

170:                                              ; preds = %167
  call void @_exit(i32 1) #18
  unreachable

171:                                              ; preds = %167
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %8) #16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v84base5debug22DisableSignalStackDumpEv() local_unnamed_addr #3 {
  store i1 true, i1* @_ZN2v84base5debug12_GLOBAL__N_128dump_stack_in_signal_handlerE, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v84base5debug10StackTraceC2Ev(%"class.v8::base::debug::StackTrace"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %0, i64 0, i32 0, i64 0
  %3 = tail call i32 @backtrace(i8** %2, i32 62) #16
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %0, i64 0, i32 1
  store i64 %4, i64* %5, align 8
  ret void
}

declare i32 @backtrace(i8**, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v84base5debug10StackTrace5PrintEv(%"class.v8::base::debug::StackTrace"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler", align 8
  %3 = bitcast %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #16
  %4 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %2, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %0, i64 0, i32 0, i64 0
  %6 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %2, i64 0, i32 0
  call fastcc void @_ZN2v84base5debug12_GLOBAL__N_116ProcessBacktraceEPKPvmPNS2_22BacktraceOutputHandlerE(i8** %5, i64 %7, %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v84base5debug12_GLOBAL__N_116ProcessBacktraceEPKPvmPNS2_22BacktraceOutputHandlerE(i8**, i64, %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*) unnamed_addr #0 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca i32, align 4
  %6 = alloca [17 x i8], align 16
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2 to void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)***
  %9 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %10 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %9, align 8
  tail call void %10(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)) #16
  %11 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %12 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %11, align 8
  tail call void %12(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.25, i64 0, i64 0)) #16
  %13 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %14 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %13, align 8
  tail call void %14(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)) #16
  %15 = load volatile i32, i32* @_ZN2v84base5debug12_GLOBAL__N_117in_signal_handlerE, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %191

17:                                               ; preds = %3
  %18 = trunc i64 %1 to i32
  %19 = tail call i8** @backtrace_symbols(i8** %0, i32 %18) #16
  %20 = icmp eq i8** %19, null
  br i1 %20, label %191, label %21

21:                                               ; preds = %17
  %22 = icmp eq i64 %1, 0
  br i1 %22, label %189, label %23

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %31 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::allocator"*
  %32 = bitcast i32* %5 to i8*
  %33 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %36

36:                                               ; preds = %186, %23
  %37 = phi i64 [ 0, %23 ], [ %187, %186 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %24) #16
  %38 = getelementptr inbounds i8*, i8** %19, i64 %37
  %39 = load i8*, i8** %38, align 8
  %40 = call i64 @strlen(i8* %39) #16
  %41 = icmp ugt i64 %40, -17
  br i1 %41, label %42, label %44

42:                                               ; preds = %36
  %43 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %43) #18
  unreachable

44:                                               ; preds = %36
  %45 = icmp ult i64 %40, 23
  br i1 %45, label %51, label %46

46:                                               ; preds = %44
  %47 = add nuw i64 %40, 16
  %48 = and i64 %47, -16
  %49 = call i8* @_Znwm(i64 %48) #19
  store i8* %49, i8** %25, align 8
  %50 = or i64 %48, -9223372036854775808
  store i64 %50, i64* %26, align 8
  store i64 %40, i64* %27, align 8
  br label %54

51:                                               ; preds = %44
  %52 = trunc i64 %40 to i8
  store i8 %52, i8* %29, align 1
  %53 = icmp eq i64 %40, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %51, %46
  %55 = phi i8* [ %49, %46 ], [ %24, %51 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %55, i8* align 1 %39, i64 %40, i1 false) #16
  br label %56

56:                                               ; preds = %51, %54
  %57 = phi i8* [ %24, %51 ], [ %55, %54 ]
  %58 = getelementptr inbounds i8, i8* %57, i64 %40
  store i8 0, i8* %58, align 1
  %59 = load i8, i8* %29, align 1
  %60 = icmp slt i8 %59, 0
  %61 = load i64, i64* %27, align 8
  %62 = zext i8 %59 to i64
  %63 = select i1 %60, i64 %61, i64 %62
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %171, label %65

65:                                               ; preds = %56, %164
  %66 = phi i64 [ %167, %164 ], [ %61, %56 ]
  %67 = phi i1 [ %166, %164 ], [ %60, %56 ]
  %68 = phi i8 [ %165, %164 ], [ %59, %56 ]
  %69 = phi i64 [ %156, %164 ], [ 0, %56 ]
  %70 = load i8*, i8** %25, align 8
  %71 = zext i8 %68 to i64
  %72 = select i1 %67, i8* %70, i8* %24
  %73 = select i1 %67, i64 %66, i64 %71
  %74 = icmp ult i64 %73, %69
  br i1 %74, label %171, label %75

75:                                               ; preds = %65
  %76 = getelementptr inbounds i8, i8* %72, i64 %69
  %77 = getelementptr inbounds i8, i8* %72, i64 %73
  %78 = ptrtoint i8* %77 to i64
  %79 = ptrtoint i8* %76 to i64
  %80 = sub i64 %78, %79
  %81 = icmp slt i64 %80, 2
  br i1 %81, label %171, label %82

82:                                               ; preds = %75, %93
  %83 = phi i64 [ %96, %93 ], [ %80, %75 ]
  %84 = phi i8* [ %94, %93 ], [ %76, %75 ]
  %85 = add nsw i64 %83, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %171, label %87

87:                                               ; preds = %82
  %88 = call i8* @memchr(i8* %84, i32 95, i64 %85) #16
  %89 = icmp eq i8* %88, null
  br i1 %89, label %171, label %90

90:                                               ; preds = %87
  %91 = call i32 @bcmp(i8* nonnull %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZN2v84base5debug12_GLOBAL__N_120kMangledSymbolPrefixE, i64 0, i64 0), i64 2) #16
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %98, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %88, i64 1
  %95 = ptrtoint i8* %94 to i64
  %96 = sub i64 %78, %95
  %97 = icmp slt i64 %96, 2
  br i1 %97, label %171, label %82

98:                                               ; preds = %90
  %99 = ptrtoint i8* %88 to i64
  %100 = icmp eq i8* %88, %77
  %101 = ptrtoint i8* %72 to i64
  %102 = sub i64 %99, %101
  %103 = icmp eq i64 %102, -1
  %104 = or i1 %100, %103
  br i1 %104, label %171, label %105

105:                                              ; preds = %98
  %106 = icmp ugt i64 %73, %102
  br i1 %106, label %107, label %120

107:                                              ; preds = %105, %113
  %108 = phi i8* [ %114, %113 ], [ %88, %105 ]
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = call i8* @memchr(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN2v84base5debug12_GLOBAL__N_117kSymbolCharactersE, i64 0, i64 0), i32 %110, i64 63) #16
  %112 = icmp eq i8* %111, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds i8, i8* %108, i64 1
  %115 = icmp eq i8* %114, %77
  br i1 %115, label %120, label %107

116:                                              ; preds = %107
  %117 = ptrtoint i8* %108 to i64
  %118 = sub i64 %117, %101
  %119 = icmp eq i64 %118, -1
  br i1 %119, label %120, label %122

120:                                              ; preds = %113, %116, %105
  %121 = select i1 %67, i64 %66, i64 %71
  br label %122

122:                                              ; preds = %120, %116
  %123 = phi i64 [ %118, %116 ], [ %121, %120 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #16
  %124 = sub i64 %123, %102
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, i64 %102, i64 %124, %"class.std::__1::allocator"* nonnull dereferenceable(1) %31) #16
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #16
  store i32 0, i32* %5, align 4
  %125 = load i8, i8* %34, align 1
  %126 = icmp slt i8 %125, 0
  %127 = load i8*, i8** %35, align 8
  %128 = select i1 %126, i8* %127, i8* %30
  %129 = call i8* @__cxa_demangle(i8* %128, i8* null, i64* null, i32* nonnull %5) #16
  %130 = load i32, i32* %5, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %154

132:                                              ; preds = %122
  %133 = load i8, i8* %29, align 1
  %134 = icmp slt i8 %133, 0
  %135 = load i64, i64* %27, align 8
  %136 = zext i8 %133 to i64
  %137 = select i1 %134, i64 %135, i64 %136
  %138 = icmp ult i64 %137, %102
  br i1 %138, label %139, label %141

139:                                              ; preds = %132
  %140 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %140) #18
  unreachable

141:                                              ; preds = %132
  %142 = icmp eq i64 %124, -1
  br i1 %142, label %143, label %150

143:                                              ; preds = %141
  br i1 %134, label %144, label %147

144:                                              ; preds = %143
  %145 = load i8*, i8** %25, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 %102
  store i8 0, i8* %146, align 1
  store i64 %102, i64* %27, align 8
  br label %151

147:                                              ; preds = %143
  %148 = getelementptr inbounds i8, i8* %24, i64 %102
  store i8 0, i8* %148, align 1
  %149 = trunc i64 %102 to i8
  store i8 %149, i8* %29, align 1
  br label %151

150:                                              ; preds = %141
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"* nonnull %7, i64 %102, i64 %124) #16
  br label %151

151:                                              ; preds = %150, %147, %144
  %152 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* nonnull %7, i64 %102, i8* %129) #16
  %153 = call i64 @strlen(i8* %129) #17
  br label %154

154:                                              ; preds = %151, %122
  %155 = phi i64 [ %153, %151 ], [ 2, %122 ]
  %156 = add i64 %155, %102
  %157 = icmp eq i8* %129, null
  br i1 %157, label %159, label %158

158:                                              ; preds = %154
  call void @free(i8* nonnull %129) #16
  br label %159

159:                                              ; preds = %158, %154
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #16
  %160 = load i8, i8* %34, align 1
  %161 = icmp slt i8 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %159
  %163 = load i8*, i8** %35, align 8
  call void @_ZdlPv(i8* %163) #19
  br label %164

164:                                              ; preds = %162, %159
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #16
  %165 = load i8, i8* %29, align 1
  %166 = icmp slt i8 %165, 0
  %167 = load i64, i64* %27, align 8
  %168 = zext i8 %165 to i64
  %169 = select i1 %166, i64 %167, i64 %168
  %170 = icmp ult i64 %156, %169
  br i1 %170, label %65, label %171

171:                                              ; preds = %98, %75, %65, %164, %82, %87, %93, %56
  %172 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %173 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %172, align 8
  call void %173(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0)) #16
  %174 = load i8, i8* %29, align 1
  %175 = icmp slt i8 %174, 0
  %176 = load i8*, i8** %25, align 8
  %177 = select i1 %175, i8* %176, i8* %24
  %178 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %179 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %178, align 8
  call void %179(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* %177) #16
  %180 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %181 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %180, align 8
  call void %181(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)) #16
  %182 = load i8, i8* %29, align 1
  %183 = icmp slt i8 %182, 0
  br i1 %183, label %184, label %186

184:                                              ; preds = %171
  %185 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %185) #19
  br label %186

186:                                              ; preds = %171, %184
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %24) #16
  %187 = add nuw i64 %37, 1
  %188 = icmp eq i64 %187, %1
  br i1 %188, label %189, label %36

189:                                              ; preds = %186, %21
  %190 = bitcast i8** %19 to i8*
  call void @free(i8* %190) #16
  br label %246

191:                                              ; preds = %17, %3
  %192 = icmp eq i64 %1, 0
  br i1 %192, label %246, label %193

193:                                              ; preds = %191
  %194 = getelementptr inbounds [17 x i8], [17 x i8]* %6, i64 0, i64 0
  %195 = getelementptr inbounds [17 x i8], [17 x i8]* %6, i64 0, i64 1
  br label %196

196:                                              ; preds = %239, %193
  %197 = phi i64 [ 0, %193 ], [ %244, %239 ]
  %198 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %199 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %198, align 8
  call void %199(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i64 0, i64 0)) #16
  %200 = getelementptr inbounds i8*, i8** %0, i64 %197
  %201 = bitcast i8** %200 to i64*
  %202 = load i64, i64* %201, align 8
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %194) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %194, i8 0, i64 17, i1 false) #16
  %203 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %204 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %203, align 8
  call void %204(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i64 0, i64 0)) #16
  br label %205

205:                                              ; preds = %212, %196
  %206 = phi i64 [ 12, %196 ], [ %220, %212 ]
  %207 = phi i64 [ %202, %196 ], [ %217, %212 ]
  %208 = phi i64 [ 0, %196 ], [ %216, %212 ]
  %209 = getelementptr inbounds [17 x i8], [17 x i8]* %6, i64 0, i64 %208
  %210 = icmp eq i64 %208, 16
  br i1 %210, label %211, label %212

211:                                              ; preds = %205
  store i8 0, i8* %194, align 16
  br label %239

212:                                              ; preds = %205
  %213 = and i64 %207, 15
  %214 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = add nuw nsw i64 %208, 1
  store i8 %215, i8* %209, align 1
  %217 = lshr i64 %207, 4
  %218 = icmp eq i64 %206, 0
  %219 = add i64 %206, -1
  %220 = select i1 %218, i64 0, i64 %219
  %221 = icmp ugt i64 %207, 15
  %222 = icmp ne i64 %220, 0
  %223 = or i1 %221, %222
  br i1 %223, label %205, label %224

224:                                              ; preds = %212
  %225 = getelementptr inbounds [17 x i8], [17 x i8]* %6, i64 0, i64 %216
  store i8 0, i8* %225, align 1
  %226 = icmp eq i64 %208, 0
  br i1 %226, label %239, label %227

227:                                              ; preds = %224
  %228 = load i8, i8* %194, align 16
  store i8 %228, i8* %209, align 1
  store i8 %215, i8* %194, align 16
  %229 = getelementptr inbounds i8, i8* %209, i64 -1
  %230 = icmp ugt i8* %229, %195
  br i1 %230, label %231, label %239

231:                                              ; preds = %227, %231
  %232 = phi i8* [ %237, %231 ], [ %229, %227 ]
  %233 = phi i8* [ %236, %231 ], [ %195, %227 ]
  %234 = load i8, i8* %232, align 1
  %235 = load i8, i8* %233, align 1
  store i8 %235, i8* %232, align 1
  %236 = getelementptr inbounds i8, i8* %233, i64 1
  store i8 %234, i8* %233, align 1
  %237 = getelementptr inbounds i8, i8* %232, i64 -1
  %238 = icmp ugt i8* %237, %236
  br i1 %238, label %231, label %239

239:                                              ; preds = %231, %211, %224, %227
  %240 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %241 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %240, align 8
  call void %241(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* nonnull %194) #16
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %194) #16
  %242 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)**, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*** %8, align 8
  %243 = load void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)*, void (%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"*, i8*)** %242, align 8
  call void %243(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i64 0, i64 0)) #16
  %244 = add nuw i64 %197, 1
  %245 = icmp eq i64 %244, %1
  br i1 %245, label %246, label %196

246:                                              ; preds = %239, %191, %189
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2v84base5debug10StackTrace14OutputToStreamEPNSt3__113basic_ostreamIcNS3_11char_traitsIcEEEE(%"class.v8::base::debug::StackTrace"*, %"class.std::__1::basic_ostream"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler", align 8
  %4 = bitcast %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #16
  %5 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v84base5debug12_GLOBAL__N_128StreamBacktraceOutputHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* %3, i64 0, i32 1
  store %"class.std::__1::basic_ostream"* %1, %"class.std::__1::basic_ostream"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %0, i64 0, i32 0, i64 0
  %8 = getelementptr inbounds %"class.v8::base::debug::StackTrace", %"class.v8::base::debug::StackTrace"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* %3, i64 0, i32 0
  call fastcc void @_ZN2v84base5debug12_GLOBAL__N_116ProcessBacktraceEPKPvmPNS2_22BacktraceOutputHandlerE(i8** %7, i64 %9, %"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* nonnull %10)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #16
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2v84base5debug12_GLOBAL__N_122BacktraceOutputHandlerD2Ev(%"class.v8::base::debug::(anonymous namespace)::BacktraceOutputHandler"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZN2v84base5debug8internal6itoa_rElPcmim(i64, i8*, i64, i32, i64) local_unnamed_addr #6 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %65, label %7

7:                                                ; preds = %5
  %8 = add i32 %3, -2
  %9 = icmp ugt i32 %8, 14
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  store i8 0, i8* %1, align 1
  br label %65

11:                                               ; preds = %7
  %12 = icmp slt i64 %0, 0
  %13 = icmp eq i32 %3, 10
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %11
  %16 = icmp ult i64 %2, 2
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  store i8 0, i8* %1, align 1
  br label %65

18:                                               ; preds = %15
  %19 = sub i64 0, %0
  %20 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 45, i8* %1, align 1
  br label %21

21:                                               ; preds = %18, %11
  %22 = phi i64 [ 2, %18 ], [ 1, %11 ]
  %23 = phi i8* [ %20, %18 ], [ %1, %11 ]
  %24 = phi i64 [ %19, %18 ], [ %0, %11 ]
  %25 = sext i32 %3 to i64
  br label %26

26:                                               ; preds = %35, %21
  %27 = phi i64 [ %4, %21 ], [ %43, %35 ]
  %28 = phi i64 [ %22, %21 ], [ %32, %35 ]
  %29 = phi i64 [ %24, %21 ], [ %40, %35 ]
  %30 = phi i64 [ 0, %21 ], [ %39, %35 ]
  %31 = getelementptr inbounds i8, i8* %23, i64 %30
  %32 = add i64 %28, 1
  %33 = icmp ugt i64 %32, %2
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  store i8 0, i8* %1, align 1
  br label %65

35:                                               ; preds = %26
  %36 = urem i64 %29, %25
  %37 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = add nuw nsw i64 %30, 1
  store i8 %38, i8* %31, align 1
  %40 = udiv i64 %29, %25
  %41 = icmp eq i64 %27, 0
  %42 = add i64 %27, -1
  %43 = select i1 %41, i64 0, i64 %42
  %44 = icmp uge i64 %29, %25
  %45 = icmp ne i64 %43, 0
  %46 = or i1 %45, %44
  br i1 %46, label %26, label %47

47:                                               ; preds = %35
  %48 = getelementptr inbounds i8, i8* %23, i64 %39
  store i8 0, i8* %48, align 1
  %49 = icmp eq i64 %30, 0
  br i1 %49, label %65, label %50

50:                                               ; preds = %47
  %51 = load i8, i8* %23, align 1
  store i8 %51, i8* %31, align 1
  store i8 %38, i8* %23, align 1
  %52 = add nsw i64 %30, -1
  %53 = icmp sgt i64 %52, 1
  br i1 %53, label %54, label %65

54:                                               ; preds = %50
  %55 = getelementptr inbounds i8, i8* %23, i64 %52
  %56 = getelementptr inbounds i8, i8* %23, i64 1
  br label %57

57:                                               ; preds = %54, %57
  %58 = phi i8* [ %55, %54 ], [ %63, %57 ]
  %59 = phi i8* [ %56, %54 ], [ %62, %57 ]
  %60 = load i8, i8* %58, align 1
  %61 = load i8, i8* %59, align 1
  store i8 %61, i8* %58, align 1
  %62 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %60, i8* %59, align 1
  %63 = getelementptr inbounds i8, i8* %58, i64 -1
  %64 = icmp ugt i8* %63, %62
  br i1 %64, label %57, label %65

65:                                               ; preds = %57, %50, %47, %17, %34, %5, %10
  %66 = phi i8* [ null, %10 ], [ null, %5 ], [ null, %17 ], [ null, %34 ], [ %1, %47 ], [ %1, %50 ], [ %1, %57 ]
  ret i8* %66
}

; Function Attrs: nounwind
declare void @_ZN2v84base5debug10StackTraceD1Ev(%"class.v8::base::debug::StackTrace"*) unnamed_addr #2

; Function Attrs: nounwind
declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_exit(i32) local_unnamed_addr #7

; Function Attrs: nofree
declare i64 @write(i32, i8* nocapture readonly, i64) local_unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nofree nounwind ssp uwtable
define internal void @_ZN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandler12HandleOutputEPKc(%"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* nocapture readnone, i8* nocapture readonly) unnamed_addr #10 align 2 {
  %3 = tail call i64 @strlen(i8* %1) #17
  %4 = tail call i64 @write(i32 2, i8* %1, i64 %3) #16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v84base5debug12_GLOBAL__N_127PrintBacktraceOutputHandlerD0Ev(%"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"*) unnamed_addr #11 align 2 {
  %2 = bitcast %"class.v8::base::debug::(anonymous namespace)::PrintBacktraceOutputHandler"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: nounwind
declare i8** @backtrace_symbols(i8**, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @__cxa_demangle(i8*, i8*, i64*, i32*) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"*, i64, i8*) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #14

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24), i64, i64, %"class.std::__1::allocator"* dereferenceable(1)) unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE26__erase_external_with_moveEmm(%"class.std::__1::basic_string"*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v84base5debug12_GLOBAL__N_128StreamBacktraceOutputHandler12HandleOutputEPKc(%"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* nocapture readonly, i8*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler", %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* %0, i64 0, i32 1
  %4 = load %"class.std::__1::basic_ostream"*, %"class.std::__1::basic_ostream"** %3, align 8
  %5 = tail call i64 @strlen(i8* %1) #16
  %6 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %4, i8* %1, i64 %5) #16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v84base5debug12_GLOBAL__N_128StreamBacktraceOutputHandlerD0Ev(%"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"*) unnamed_addr #11 align 2 {
  %2 = bitcast %"class.v8::base::debug::(anonymous namespace)::StreamBacktraceOutputHandler"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #16
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #16
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #16
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #16
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #16
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #16
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #16
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #16
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #16
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #16
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #16
  %32 = icmp ult i64 %17, 23
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = add nuw i64 %17, 16
  %35 = and i64 %34, -16
  %36 = tail call i8* @_Znwm(i64 %35) #19
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %46

42:                                               ; preds = %30
  %43 = trunc i64 %17 to i8
  %44 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %33, %42
  %47 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %41, %33 ], [ %44, %42 ]
  %48 = phi i8* [ %36, %33 ], [ %31, %42 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 %5, i64 %17, i1 false) #16
  %49 = getelementptr inbounds i8, i8* %48, i64 %17
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = select i1 %52, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #16
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %50, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %46
  %65 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %65) #19
  br label %66

66:                                               ; preds = %46, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #16
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #16
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #2

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #2

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #4

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #15

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nofree nounwind readonly }
attributes #16 = { nounwind }
attributes #17 = { nounwind readonly }
attributes #18 = { noreturn nounwind }
attributes #19 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
