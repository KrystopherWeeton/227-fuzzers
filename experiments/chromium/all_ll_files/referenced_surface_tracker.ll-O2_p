; ModuleID = '../../components/viz/service/surfaces/referenced_surface_tracker.cc'
source_filename = "../../components/viz/service/surfaces/referenced_surface_tracker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.viz::SurfaceId"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"*, %"class.std::__1::__compressed_pair.3" }
%"class.viz::SurfaceReference" = type { %"class.viz::SurfaceId", %"class.viz::SurfaceId" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.viz::SurfaceReference"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_ = comdat any

$_ZNSt3__16vectorIN3viz16SurfaceReferenceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz29GetSurfaceReferenceDifferenceERKNS_9SurfaceIdERKN4base8internal9flat_treeIS0_NS3_8identityENSt3__14lessIvEENS7_6vectorIS0_NS7_9allocatorIS0_EEEEEESG_PNSA_INS_16SurfaceReferenceENSB_ISH_EEEESK_(%"class.viz::SurfaceId"* dereferenceable(32), %"class.base::internal::flat_tree"* dereferenceable(24), %"class.base::internal::flat_tree"* dereferenceable(24), %"class.std::__1::vector.1"*, %"class.std::__1::vector.1"*) local_unnamed_addr #0 {
  %6 = alloca %"class.viz::SurfaceReference", align 8
  %7 = alloca %"class.viz::SurfaceReference", align 8
  %8 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %1, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %10, align 8
  %12 = icmp eq %"class.viz::SurfaceId"* %9, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %5
  %14 = bitcast %"class.viz::SurfaceReference"* %6 to i8*
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %4, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast %"class.viz::SurfaceReference"** %15 to i64*
  br label %29

18:                                               ; preds = %44, %5
  %19 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %2, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %2, i64 0, i32 0, i32 0, i32 1
  %22 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %21, align 8
  %23 = icmp eq %"class.viz::SurfaceId"* %20, %22
  br i1 %23, label %47, label %24

24:                                               ; preds = %18
  %25 = bitcast %"class.viz::SurfaceReference"* %7 to i8*
  %26 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"class.viz::SurfaceReference"** %26 to i64*
  br label %48

29:                                               ; preds = %13, %44
  %30 = phi %"class.viz::SurfaceId"* [ %9, %13 ], [ %45, %44 ]
  %31 = call { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } @_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_(%"class.base::internal::flat_tree"* %2, %"class.viz::SurfaceId"* dereferenceable(32) %30) #9
  %32 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %31, 0
  %33 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %31, 1
  %34 = icmp eq %"class.viz::SurfaceId"* %33, %32
  br i1 %34, label %35, label %44

35:                                               ; preds = %29
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #9
  call void @_ZN3viz16SurfaceReferenceC1ERKNS_9SurfaceIdES3_(%"class.viz::SurfaceReference"* nonnull %6, %"class.viz::SurfaceId"* dereferenceable(32) %0, %"class.viz::SurfaceId"* dereferenceable(32) %30) #9
  %36 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %15, align 8
  %37 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %16, align 8
  %38 = icmp ult %"class.viz::SurfaceReference"* %36, %37
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  call void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"* %36, %"class.viz::SurfaceReference"* nonnull dereferenceable(64) %6) #9
  %40 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %36, i64 1
  %41 = ptrtoint %"class.viz::SurfaceReference"* %40 to i64
  store i64 %41, i64* %17, align 8
  br label %43

42:                                               ; preds = %35
  call void @_ZNSt3__16vectorIN3viz16SurfaceReferenceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.1"* %4, %"class.viz::SurfaceReference"* nonnull dereferenceable(64) %6) #9
  br label %43

43:                                               ; preds = %39, %42
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #9
  br label %44

44:                                               ; preds = %43, %29
  %45 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 1
  %46 = icmp eq %"class.viz::SurfaceId"* %45, %11
  br i1 %46, label %18, label %29

47:                                               ; preds = %63, %18
  ret void

48:                                               ; preds = %24, %63
  %49 = phi %"class.viz::SurfaceId"* [ %20, %24 ], [ %64, %63 ]
  %50 = call { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } @_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_(%"class.base::internal::flat_tree"* %1, %"class.viz::SurfaceId"* dereferenceable(32) %49) #9
  %51 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %50, 0
  %52 = extractvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %50, 1
  %53 = icmp eq %"class.viz::SurfaceId"* %52, %51
  br i1 %53, label %54, label %63

54:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %25) #9
  call void @_ZN3viz16SurfaceReferenceC1ERKNS_9SurfaceIdES3_(%"class.viz::SurfaceReference"* nonnull %7, %"class.viz::SurfaceId"* dereferenceable(32) %0, %"class.viz::SurfaceId"* dereferenceable(32) %49) #9
  %55 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %26, align 8
  %56 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %27, align 8
  %57 = icmp ult %"class.viz::SurfaceReference"* %55, %56
  br i1 %57, label %58, label %61

58:                                               ; preds = %54
  call void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"* %55, %"class.viz::SurfaceReference"* nonnull dereferenceable(64) %7) #9
  %59 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %55, i64 1
  %60 = ptrtoint %"class.viz::SurfaceReference"* %59 to i64
  store i64 %60, i64* %28, align 8
  br label %62

61:                                               ; preds = %54
  call void @_ZNSt3__16vectorIN3viz16SurfaceReferenceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.1"* %3, %"class.viz::SurfaceReference"* nonnull dereferenceable(64) %7) #9
  br label %62

62:                                               ; preds = %58, %61
  call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #9
  br label %63

63:                                               ; preds = %62, %48
  %64 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %49, i64 1
  %65 = icmp eq %"class.viz::SurfaceId"* %64, %22
  br i1 %65, label %47, label %48
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3viz16SurfaceReferenceC1ERKNS_9SurfaceIdES3_(%"class.viz::SurfaceReference"*, %"class.viz::SurfaceId"* dereferenceable(32), %"class.viz::SurfaceId"* dereferenceable(32)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } @_ZNK4base8internal9flat_treeIN3viz9SurfaceIdENS_8identityENSt3__14lessIvEENS5_6vectorIS3_NS5_9allocatorIS3_EEEEE11equal_rangeIS3_EENS5_4pairINS5_11__wrap_iterIPKS3_EESI_EERKT_(%"class.base::internal::flat_tree"*, %"class.viz::SurfaceId"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.viz::SurfaceId"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"class.viz::SurfaceId"* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = inttoptr i64 %7 to %"class.viz::SurfaceId"*
  br i1 %10, label %74, label %12

12:                                               ; preds = %2
  %13 = ashr exact i64 %9, 5
  %14 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %16 = load i32, i32* %14, align 4
  %17 = load i32, i32* %15, align 4
  %18 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %20 = load i32, i32* %18, align 4
  %21 = load i32, i32* %19, align 4
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %24 = load i64, i64* %22, align 8
  %25 = load i64, i64* %23, align 8
  br label %26

26:                                               ; preds = %68, %12
  %27 = phi %"class.viz::SurfaceId"* [ %4, %12 ], [ %70, %68 ]
  %28 = phi i64 [ %13, %12 ], [ %69, %68 ]
  %29 = lshr i64 %28, 1
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29
  %31 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 0, i32 1
  %33 = load i32, i32* %31, align 4
  %34 = icmp ult i32 %33, %16
  br i1 %34, label %64, label %35

35:                                               ; preds = %26
  %36 = icmp ult i32 %16, %33
  br i1 %36, label %68, label %37

37:                                               ; preds = %35
  %38 = load i32, i32* %32, align 4
  %39 = icmp ult i32 %38, %17
  br i1 %39, label %64, label %40

40:                                               ; preds = %37
  %41 = icmp ult i32 %17, %38
  br i1 %41, label %68, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 0
  %44 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 1
  %45 = load i32, i32* %43, align 4
  %46 = icmp ult i32 %45, %20
  br i1 %46, label %64, label %47

47:                                               ; preds = %42
  %48 = icmp ult i32 %20, %45
  br i1 %48, label %68, label %49

49:                                               ; preds = %47
  %50 = load i32, i32* %44, align 4
  %51 = icmp ult i32 %50, %21
  br i1 %51, label %64, label %52

52:                                               ; preds = %49
  %53 = icmp ult i32 %21, %50
  br i1 %53, label %68, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 2, i32 0, i32 0
  %56 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %27, i64 %29, i32 1, i32 2, i32 0, i32 1
  %57 = load i64, i64* %55, align 8
  %58 = icmp ult i64 %57, %24
  br i1 %58, label %64, label %59

59:                                               ; preds = %54
  %60 = icmp ult i64 %24, %57
  br i1 %60, label %68, label %61

61:                                               ; preds = %59
  %62 = load i64, i64* %56, align 8
  %63 = icmp ult i64 %62, %25
  br i1 %63, label %64, label %68

64:                                               ; preds = %61, %54, %49, %42, %37, %26
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %30, i64 1
  %66 = xor i64 %29, -1
  %67 = add i64 %28, %66
  br label %68

68:                                               ; preds = %64, %61, %59, %52, %47, %40, %35
  %69 = phi i64 [ %67, %64 ], [ %29, %61 ], [ %29, %40 ], [ %29, %59 ], [ %29, %52 ], [ %29, %47 ], [ %29, %35 ]
  %70 = phi %"class.viz::SurfaceId"* [ %65, %64 ], [ %27, %61 ], [ %27, %40 ], [ %27, %59 ], [ %27, %52 ], [ %27, %47 ], [ %27, %35 ]
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %72, label %26

72:                                               ; preds = %68
  %73 = ptrtoint %"class.viz::SurfaceId"* %70 to i64
  br label %74

74:                                               ; preds = %72, %2
  %75 = phi i64 [ %73, %72 ], [ %8, %2 ]
  %76 = phi %"class.viz::SurfaceId"* [ %70, %72 ], [ %4, %2 ]
  %77 = icmp eq %"class.viz::SurfaceId"* %76, %11
  br i1 %77, label %127, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 0, i32 0
  %82 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 0, i32 1
  %83 = load i32, i32* %79, align 4
  %84 = load i32, i32* %81, align 4
  %85 = icmp ult i32 %83, %84
  br i1 %85, label %127, label %86

86:                                               ; preds = %78
  %87 = icmp ult i32 %84, %83
  br i1 %87, label %124, label %88

88:                                               ; preds = %86
  %89 = load i32, i32* %80, align 4
  %90 = load i32, i32* %82, align 4
  %91 = icmp ult i32 %89, %90
  br i1 %91, label %127, label %92

92:                                               ; preds = %88
  %93 = icmp ult i32 %90, %89
  br i1 %93, label %124, label %94

94:                                               ; preds = %92
  %95 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %96 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %97 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 0
  %98 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 1
  %99 = load i32, i32* %95, align 4
  %100 = load i32, i32* %97, align 4
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %127, label %102

102:                                              ; preds = %94
  %103 = icmp ult i32 %100, %99
  br i1 %103, label %124, label %104

104:                                              ; preds = %102
  %105 = load i32, i32* %96, align 4
  %106 = load i32, i32* %98, align 4
  %107 = icmp ult i32 %105, %106
  br i1 %107, label %127, label %108

108:                                              ; preds = %104
  %109 = icmp ult i32 %106, %105
  br i1 %109, label %124, label %110

110:                                              ; preds = %108
  %111 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %112 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %113 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 2, i32 0, i32 0
  %114 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 0, i32 1, i32 2, i32 0, i32 1
  %115 = load i64, i64* %111, align 8
  %116 = load i64, i64* %113, align 8
  %117 = icmp ult i64 %115, %116
  br i1 %117, label %127, label %118

118:                                              ; preds = %110
  %119 = icmp ult i64 %116, %115
  br i1 %119, label %124, label %120

120:                                              ; preds = %118
  %121 = load i64, i64* %112, align 8
  %122 = load i64, i64* %114, align 8
  %123 = icmp ult i64 %121, %122
  br i1 %123, label %127, label %124

124:                                              ; preds = %86, %102, %108, %118, %92, %120
  %125 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %76, i64 1
  %126 = ptrtoint %"class.viz::SurfaceId"* %125 to i64
  br label %127

127:                                              ; preds = %78, %94, %104, %110, %88, %120, %74, %124
  %128 = phi i64 [ %126, %124 ], [ %75, %74 ], [ %75, %120 ], [ %75, %88 ], [ %75, %110 ], [ %75, %104 ], [ %75, %94 ], [ %75, %78 ]
  %129 = insertvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } undef, %"class.viz::SurfaceId"* %76, 0
  %130 = inttoptr i64 %128 to %"class.viz::SurfaceId"*
  %131 = insertvalue { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %129, %"class.viz::SurfaceId"* %130, 1
  ret { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"* } %131
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3viz16SurfaceReferenceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.1"*, %"class.viz::SurfaceReference"* dereferenceable(64)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.viz::SurfaceReference"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.viz::SurfaceReference"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #10
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to %"class.viz::SurfaceReference"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.viz::SurfaceReference"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %36, i64 %9
  %38 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %36, i64 %35
  %39 = ptrtoint %"class.viz::SurfaceReference"* %38 to i64
  tail call void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"* %37, %"class.viz::SurfaceReference"* dereferenceable(64) %1) #9
  %40 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %37, i64 1
  %41 = ptrtoint %"class.viz::SurfaceReference"* %40 to i64
  %42 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %43 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %42, align 8
  %44 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %3, align 8
  %45 = icmp eq %"class.viz::SurfaceReference"* %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = ptrtoint %"class.viz::SurfaceReference"* %43 to i64
  br label %57

48:                                               ; preds = %34, %48
  %49 = phi %"class.viz::SurfaceReference"* [ %51, %48 ], [ %37, %34 ]
  %50 = phi %"class.viz::SurfaceReference"* [ %52, %48 ], [ %44, %34 ]
  %51 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %49, i64 -1
  %52 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %50, i64 -1
  tail call void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"* %51, %"class.viz::SurfaceReference"* dereferenceable(64) %52) #9
  %53 = icmp eq %"class.viz::SurfaceReference"* %52, %43
  br i1 %53, label %54, label %48

54:                                               ; preds = %48
  %55 = load i64, i64* %6, align 8
  %56 = load %"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"** %3, align 8
  br label %57

57:                                               ; preds = %46, %54
  %58 = phi %"class.viz::SurfaceReference"* [ %43, %46 ], [ %56, %54 ]
  %59 = phi %"class.viz::SurfaceReference"* [ %37, %46 ], [ %51, %54 ]
  %60 = phi i64 [ %47, %46 ], [ %55, %54 ]
  %61 = ptrtoint %"class.viz::SurfaceReference"* %59 to i64
  store i64 %61, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %62 = inttoptr i64 %60 to %"class.viz::SurfaceReference"*
  %63 = icmp eq %"class.viz::SurfaceReference"* %58, %62
  br i1 %63, label %68, label %64

64:                                               ; preds = %57, %64
  %65 = phi %"class.viz::SurfaceReference"* [ %66, %64 ], [ %58, %57 ]
  %66 = getelementptr inbounds %"class.viz::SurfaceReference", %"class.viz::SurfaceReference"* %65, i64 -1
  tail call void @_ZN3viz16SurfaceReferenceD1Ev(%"class.viz::SurfaceReference"* %66) #9
  %67 = icmp eq %"class.viz::SurfaceReference"* %66, %62
  br i1 %67, label %68, label %64

68:                                               ; preds = %64, %57
  %69 = icmp eq i64 %60, 0
  br i1 %69, label %72, label %70

70:                                               ; preds = %68
  %71 = inttoptr i64 %60 to i8*
  tail call void @_ZdlPv(i8* %71) #11
  br label %72

72:                                               ; preds = %68, %70
  ret void
}

declare void @_ZN3viz16SurfaceReferenceC1ERKS0_(%"class.viz::SurfaceReference"*, %"class.viz::SurfaceReference"* dereferenceable(64)) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
