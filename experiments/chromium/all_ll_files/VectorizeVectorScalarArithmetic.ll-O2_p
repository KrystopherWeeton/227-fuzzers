; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/gl/VectorizeVectorScalarArithmetic.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/gl/VectorizeVectorScalarArithmetic.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type opaque
%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser" = type { %"class.sh::TIntermTraverser", i8, %"class.std::__1::set" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.1", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.27", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i64 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.sh::TIntermBlock"* }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.35"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.35" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.36", i8, [7 x i8] }>
%"class.sh::TVector.36" = type { %"class.std::__1::vector.37" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { i32*, i32*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.46", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.48" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TDiagnostics" = type opaque
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermOperator" = type <{ %"class.sh::TIntermExpression", i8, [7 x i8] }>
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE = comdat any

@_ZTVN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*)* @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*)* @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh31VectorizeVectorScalarArithmeticEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", align 8
  %5 = bitcast %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 184, i1 false)
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %6, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #7
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 1
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 2, i32 0, i32 0
  %12 = bitcast %"class.std::__1::__tree_node_base"** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #7
  store %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"** %11, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 2
  %14 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %13, i64 0, i32 0
  %15 = bitcast %"class.std::__1::__tree_end_node"* %10 to %"class.std::__1::__tree_node"**
  %16 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %13, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %10, i64 0, i32 0
  %19 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  store i8 0, i8* %8, align 8
  call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %14, %"class.std::__1::__tree_node"* null) #7
  store i64 0, i64* %16, align 8
  store %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"** %17, align 8
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %18, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #7
  %20 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %19) #7
  br i1 %20, label %21, label %27

21:                                               ; preds = %3, %24
  %22 = load i8, i8* %8, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %21
  %25 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %15, align 8
  store i8 0, i8* %8, align 8
  call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %14, %"class.std::__1::__tree_node"* %25) #7
  store i64 0, i64* %16, align 8
  store %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"** %17, align 8
  store %"class.std::__1::__tree_node_base"* null, %"class.std::__1::__tree_node_base"** %18, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #7
  %26 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %19) #7
  br i1 %26, label %21, label %27

27:                                               ; preds = %24, %21, %3
  %28 = phi i1 [ false, %3 ], [ false, %24 ], [ true, %21 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %29 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %4, i64 0, i32 2, i32 0
  %30 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %15, align 8
  call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %29, %"class.std::__1::__tree_node"* %30) #7
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %5) #7
  ret i1 %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserD2Ev(%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %3, %"class.std::__1::__tree_node"* %6) #7
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %7) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserD0Ev(%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %3, %"class.std::__1::__tree_node"* %6) #7
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %7) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector", align 8
  %5 = alloca %"class.sh::TVector", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TType", align 8
  %8 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 2
  %9 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 3
  %11 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 8
  switch i8 %13, label %533 [
    i8 13, label %14
    i8 -116, label %14
  ]

14:                                               ; preds = %3, %3
  %15 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.sh::TIntermBinary"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %17 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %17, i64 31
  %19 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call dereferenceable(184) %"class.sh::TType"* %19(%"class.sh::TIntermTyped"* %15) #7
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %533

24:                                               ; preds = %14
  %25 = bitcast %"class.sh::TIntermTyped"* %9 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %26 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, i64 31
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call dereferenceable(184) %"class.sh::TType"* %28(%"class.sh::TIntermTyped"* %9) #7
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 8
  %31 = load i8, i8* %30, align 8
  %32 = icmp eq i8 %31, 1
  br i1 %32, label %33, label %279

33:                                               ; preds = %24
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 9
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 1
  br i1 %36, label %37, label %279

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 13
  %39 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %38, align 8
  %40 = icmp eq %"class.sh::TStructure"* %39, null
  br i1 %40, label %41, label %279

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 10, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %279

45:                                               ; preds = %41
  %46 = bitcast %"class.sh::TIntermTyped"* %11 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %47 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %47, i64 31
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %48, align 8
  %50 = tail call dereferenceable(184) %"class.sh::TType"* %49(%"class.sh::TIntermTyped"* %11) #7
  %51 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %50, i64 0, i32 8
  %52 = load i8, i8* %51, align 8
  %53 = icmp ugt i8 %52, 1
  %54 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %50, i64 0, i32 9
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 1
  %57 = and i1 %53, %56
  br i1 %57, label %58, label %279

58:                                               ; preds = %45
  %59 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %46, align 8
  %60 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %59, i64 31
  %61 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %60, align 8
  %62 = tail call dereferenceable(184) %"class.sh::TType"* %61(%"class.sh::TIntermTyped"* %11) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %6, %"class.sh::TType"* dereferenceable(184) %62) #7
  %63 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %6, i64 0, i32 2
  store i32 0, i32* %63, align 8
  %64 = bitcast %"class.sh::TVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #7
  %65 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 0, i64 24, i1 false) #7
  %67 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %9, i64 0, i32 0
  %68 = ptrtoint %"class.sh::TIntermTyped"* %9 to i64
  %69 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %70 = bitcast %"class.sh::TIntermNode"*** %66 to i64*
  %71 = bitcast %"class.sh::TVector"* %4 to i64*
  %72 = bitcast %"class.sh::TIntermNode"*** %69 to i64*
  %73 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %74 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %73, i64 8) #7
  %75 = bitcast i8* %74 to %"class.sh::TIntermNode"**
  %76 = getelementptr inbounds i8, i8* %74, i64 8
  %77 = ptrtoint i8* %76 to i64
  %78 = bitcast i8* %74 to i64*
  store i64 %68, i64* %78, align 8
  %79 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %65, align 8
  %80 = ptrtoint %"class.sh::TIntermNode"** %79 to i64
  %81 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %66, align 8
  %82 = bitcast %"class.sh::TIntermNode"** %81 to i8*
  %83 = icmp eq %"class.sh::TIntermNode"** %81, %79
  br i1 %83, label %257, label %84

84:                                               ; preds = %58
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 -1
  %86 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  %87 = sub i64 %86, %80
  %88 = lshr i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = icmp ult i64 %89, 4
  br i1 %90, label %187, label %91

91:                                               ; preds = %84
  %92 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 -1
  %93 = ptrtoint %"class.sh::TIntermNode"** %92 to i64
  %94 = sub i64 %93, %80
  %95 = lshr i64 %94, 3
  %96 = and i64 %94, -8
  %97 = xor i64 %96, -8
  %98 = getelementptr i8, i8* %74, i64 %97
  %99 = xor i64 %95, -1
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 %99
  %101 = bitcast %"class.sh::TIntermNode"** %100 to i8*
  %102 = icmp ult i8* %98, %82
  %103 = icmp ugt i8* %74, %101
  %104 = and i1 %102, %103
  br i1 %104, label %187, label %105

105:                                              ; preds = %91
  %106 = and i64 %89, 4611686018427387900
  %107 = sub nsw i64 0, %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 %107
  %109 = sub nsw i64 0, %106
  %110 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 %109
  %111 = add nsw i64 %106, -4
  %112 = lshr exact i64 %111, 2
  %113 = add nuw nsw i64 %112, 1
  %114 = and i64 %113, 1
  %115 = icmp eq i64 %111, 0
  br i1 %115, label %164, label %116

116:                                              ; preds = %105
  %117 = sub nuw nsw i64 %113, %114
  %118 = getelementptr i8, i8* %74, i64 -8
  %119 = bitcast i8* %118 to %"class.sh::TIntermNode"**
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 -1
  %121 = getelementptr i8, i8* %74, i64 -8
  %122 = bitcast i8* %121 to %"class.sh::TIntermNode"**
  %123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 -1
  br label %124

124:                                              ; preds = %124, %116
  %125 = phi i64 [ 0, %116 ], [ %159, %124 ]
  %126 = phi i64 [ %117, %116 ], [ %160, %124 ]
  %127 = sub i64 0, %125
  %128 = sub i64 0, %125
  %129 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 %127
  %130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 %128
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -1
  %132 = bitcast %"class.sh::TIntermNode"** %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 8, !alias.scope !3
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 -2
  %135 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 -1
  %136 = bitcast %"class.sh::TIntermNode"** %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 8, !alias.scope !3
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %129, i64 -1
  %139 = bitcast %"class.sh::TIntermNode"** %138 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %139, align 8, !alias.scope !6, !noalias !3
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %129, i64 -2
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -1
  %142 = bitcast %"class.sh::TIntermNode"** %141 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %142, align 8, !alias.scope !6, !noalias !3
  %143 = sub nuw nsw i64 -4, %125
  %144 = sub nuw nsw i64 -4, %125
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 %143
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %123, i64 %144
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 -1
  %148 = bitcast %"class.sh::TIntermNode"** %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 8, !alias.scope !3
  %150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 -2
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %150, i64 -1
  %152 = bitcast %"class.sh::TIntermNode"** %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 8, !alias.scope !3
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %155 = bitcast %"class.sh::TIntermNode"** %154 to <2 x i64>*
  store <2 x i64> %149, <2 x i64>* %155, align 8, !alias.scope !6, !noalias !3
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -2
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 -1
  %158 = bitcast %"class.sh::TIntermNode"** %157 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %158, align 8, !alias.scope !6, !noalias !3
  %159 = add i64 %125, 8
  %160 = add i64 %126, -2
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %124, !llvm.loop !8

162:                                              ; preds = %124
  %163 = sub nuw nsw i64 -8, %125
  br label %164

164:                                              ; preds = %162, %105
  %165 = phi i64 [ 0, %105 ], [ %163, %162 ]
  %166 = icmp eq i64 %114, 0
  br i1 %166, label %185, label %167

167:                                              ; preds = %164
  %168 = getelementptr i8, i8* %74, i64 -8
  %169 = bitcast i8* %168 to %"class.sh::TIntermNode"**
  %170 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 -1
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %169, i64 %165
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %165
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -1
  %174 = bitcast %"class.sh::TIntermNode"** %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 8, !alias.scope !3
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %172, i64 -2
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -1
  %178 = bitcast %"class.sh::TIntermNode"** %177 to <2 x i64>*
  %179 = load <2 x i64>, <2 x i64>* %178, align 8, !alias.scope !3
  %180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -1
  %181 = bitcast %"class.sh::TIntermNode"** %180 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %181, align 8, !alias.scope !6, !noalias !3
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 -2
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = bitcast %"class.sh::TIntermNode"** %183 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %184, align 8, !alias.scope !6, !noalias !3
  br label %185

185:                                              ; preds = %164, %167
  %186 = icmp eq i64 %89, %106
  br i1 %186, label %257, label %187

187:                                              ; preds = %185, %91, %84
  %188 = phi %"class.sh::TIntermNode"** [ %75, %91 ], [ %75, %84 ], [ %108, %185 ]
  %189 = phi %"class.sh::TIntermNode"** [ %81, %91 ], [ %81, %84 ], [ %110, %185 ]
  %190 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -1
  %191 = ptrtoint %"class.sh::TIntermNode"** %190 to i64
  %192 = sub i64 %191, %80
  %193 = lshr i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 7
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %208, label %197

197:                                              ; preds = %187, %197
  %198 = phi %"class.sh::TIntermNode"** [ %201, %197 ], [ %188, %187 ]
  %199 = phi %"class.sh::TIntermNode"** [ %202, %197 ], [ %189, %187 ]
  %200 = phi i64 [ %206, %197 ], [ %195, %187 ]
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %198, i64 -1
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 -1
  %203 = bitcast %"class.sh::TIntermNode"** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  store i64 %204, i64* %205, align 8
  %206 = add i64 %200, -1
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %197, !llvm.loop !10

208:                                              ; preds = %197, %187
  %209 = phi %"class.sh::TIntermNode"** [ undef, %187 ], [ %201, %197 ]
  %210 = phi %"class.sh::TIntermNode"** [ %188, %187 ], [ %201, %197 ]
  %211 = phi %"class.sh::TIntermNode"** [ %189, %187 ], [ %202, %197 ]
  %212 = icmp ult i64 %192, 56
  br i1 %212, label %257, label %213

213:                                              ; preds = %208, %213
  %214 = phi %"class.sh::TIntermNode"** [ %251, %213 ], [ %210, %208 ]
  %215 = phi %"class.sh::TIntermNode"** [ %252, %213 ], [ %211, %208 ]
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -1
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -1
  %218 = bitcast %"class.sh::TIntermNode"** %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  store i64 %219, i64* %220, align 8
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -2
  %222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -2
  %223 = bitcast %"class.sh::TIntermNode"** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = bitcast %"class.sh::TIntermNode"** %221 to i64*
  store i64 %224, i64* %225, align 8
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -3
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -3
  %228 = bitcast %"class.sh::TIntermNode"** %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = bitcast %"class.sh::TIntermNode"** %226 to i64*
  store i64 %229, i64* %230, align 8
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -4
  %232 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -4
  %233 = bitcast %"class.sh::TIntermNode"** %232 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = bitcast %"class.sh::TIntermNode"** %231 to i64*
  store i64 %234, i64* %235, align 8
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -5
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -5
  %238 = bitcast %"class.sh::TIntermNode"** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  store i64 %239, i64* %240, align 8
  %241 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -6
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -6
  %243 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  %244 = load i64, i64* %243, align 8
  %245 = bitcast %"class.sh::TIntermNode"** %241 to i64*
  store i64 %244, i64* %245, align 8
  %246 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -7
  %247 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -7
  %248 = bitcast %"class.sh::TIntermNode"** %247 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = bitcast %"class.sh::TIntermNode"** %246 to i64*
  store i64 %249, i64* %250, align 8
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -8
  %252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -8
  %253 = bitcast %"class.sh::TIntermNode"** %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  store i64 %254, i64* %255, align 8
  %256 = icmp eq %"class.sh::TIntermNode"** %252, %79
  br i1 %256, label %257, label %213, !llvm.loop !12

257:                                              ; preds = %208, %213, %185, %58
  %258 = phi %"class.sh::TIntermNode"** [ %75, %58 ], [ %108, %185 ], [ %209, %208 ], [ %251, %213 ]
  %259 = ptrtoint %"class.sh::TIntermNode"** %258 to i64
  store i64 %259, i64* %71, align 8
  store i64 %77, i64* %70, align 8
  store i64 %77, i64* %72, align 8
  %260 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %6, %"class.sh::TVector"* nonnull %4) #7
  %261 = bitcast %"class.sh::TIntermAggregate"* %260 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)***
  %262 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*** %261, align 8
  %263 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %262, i64 27
  %264 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %263, align 8
  %265 = call %"class.sh::TIntermTyped"* %264(%"class.sh::TIntermAggregate"* %260, %"class.sh::TDiagnostics"* null) #7
  %266 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %260, i64 0, i32 0, i32 0, i32 0
  %267 = icmp ne %"class.sh::TIntermTyped"* %265, %266
  %268 = zext i1 %267 to i32
  %269 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %65, align 8
  %270 = icmp eq %"class.sh::TIntermNode"** %269, null
  br i1 %270, label %274, label %271

271:                                              ; preds = %257
  %272 = ptrtoint %"class.sh::TIntermNode"** %269 to i64
  %273 = bitcast %"class.sh::TIntermNode"*** %66 to i64*
  store i64 %272, i64* %273, align 8
  br label %274

274:                                              ; preds = %257, %271
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #7
  %275 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0
  %276 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %277 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %265, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %275, %"class.sh::TIntermNode"* %276, %"class.sh::TIntermNode"* %67, %"class.sh::TIntermNode"* %277, i32 %268) #7
  %278 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 1
  store i8 1, i8* %278, align 8
  br label %533

279:                                              ; preds = %24, %33, %37, %45, %41
  %280 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %281 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %280, i64 31
  %282 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %281, align 8
  %283 = tail call dereferenceable(184) %"class.sh::TType"* %282(%"class.sh::TIntermTyped"* %9) #7
  %284 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %283, i64 0, i32 8
  %285 = load i8, i8* %284, align 8
  %286 = icmp ugt i8 %285, 1
  %287 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %283, i64 0, i32 9
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 1
  %290 = and i1 %286, %289
  br i1 %290, label %291, label %533

291:                                              ; preds = %279
  %292 = bitcast %"class.sh::TIntermTyped"* %11 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %293 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %292, align 8
  %294 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %293, i64 31
  %295 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %294, align 8
  %296 = tail call dereferenceable(184) %"class.sh::TType"* %295(%"class.sh::TIntermTyped"* %11) #7
  %297 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %296, i64 0, i32 8
  %298 = load i8, i8* %297, align 8
  %299 = icmp eq i8 %298, 1
  br i1 %299, label %300, label %533

300:                                              ; preds = %291
  %301 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %296, i64 0, i32 9
  %302 = load i8, i8* %301, align 1
  %303 = icmp eq i8 %302, 1
  br i1 %303, label %304, label %533

304:                                              ; preds = %300
  %305 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %296, i64 0, i32 13
  %306 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %305, align 8
  %307 = icmp eq %"class.sh::TStructure"* %306, null
  br i1 %307, label %308, label %533

308:                                              ; preds = %304
  %309 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %296, i64 0, i32 10, i32 1
  %310 = load i64, i64* %309, align 8
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %533

312:                                              ; preds = %308
  %313 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %314 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %313, i64 31
  %315 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %314, align 8
  %316 = tail call dereferenceable(184) %"class.sh::TType"* %315(%"class.sh::TIntermTyped"* %9) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %7, %"class.sh::TType"* dereferenceable(184) %316) #7
  %317 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 2
  store i32 0, i32* %317, align 8
  %318 = bitcast %"class.sh::TVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %318) #7
  %319 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 0
  %320 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %318, i8 0, i64 24, i1 false) #7
  %321 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %11, i64 0, i32 0
  %322 = ptrtoint %"class.sh::TIntermTyped"* %11 to i64
  %323 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %324 = bitcast %"class.sh::TIntermNode"*** %320 to i64*
  %325 = bitcast %"class.sh::TVector"* %5 to i64*
  %326 = bitcast %"class.sh::TIntermNode"*** %323 to i64*
  %327 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %328 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %327, i64 8) #7
  %329 = bitcast i8* %328 to %"class.sh::TIntermNode"**
  %330 = getelementptr inbounds i8, i8* %328, i64 8
  %331 = ptrtoint i8* %330 to i64
  %332 = bitcast i8* %328 to i64*
  store i64 %322, i64* %332, align 8
  %333 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %319, align 8
  %334 = ptrtoint %"class.sh::TIntermNode"** %333 to i64
  %335 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %320, align 8
  %336 = bitcast %"class.sh::TIntermNode"** %335 to i8*
  %337 = icmp eq %"class.sh::TIntermNode"** %335, %333
  br i1 %337, label %511, label %338

338:                                              ; preds = %312
  %339 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %340 = ptrtoint %"class.sh::TIntermNode"** %339 to i64
  %341 = sub i64 %340, %334
  %342 = lshr i64 %341, 3
  %343 = add nuw nsw i64 %342, 1
  %344 = icmp ult i64 %343, 4
  br i1 %344, label %441, label %345

345:                                              ; preds = %338
  %346 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %347 = ptrtoint %"class.sh::TIntermNode"** %346 to i64
  %348 = sub i64 %347, %334
  %349 = lshr i64 %348, 3
  %350 = and i64 %348, -8
  %351 = xor i64 %350, -8
  %352 = getelementptr i8, i8* %328, i64 %351
  %353 = xor i64 %349, -1
  %354 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 %353
  %355 = bitcast %"class.sh::TIntermNode"** %354 to i8*
  %356 = icmp ult i8* %352, %336
  %357 = icmp ugt i8* %328, %355
  %358 = and i1 %356, %357
  br i1 %358, label %441, label %359

359:                                              ; preds = %345
  %360 = and i64 %343, 4611686018427387900
  %361 = sub nsw i64 0, %360
  %362 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %329, i64 %361
  %363 = sub nsw i64 0, %360
  %364 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 %363
  %365 = add nsw i64 %360, -4
  %366 = lshr exact i64 %365, 2
  %367 = add nuw nsw i64 %366, 1
  %368 = and i64 %367, 1
  %369 = icmp eq i64 %365, 0
  br i1 %369, label %418, label %370

370:                                              ; preds = %359
  %371 = sub nuw nsw i64 %367, %368
  %372 = getelementptr i8, i8* %328, i64 -8
  %373 = bitcast i8* %372 to %"class.sh::TIntermNode"**
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %375 = getelementptr i8, i8* %328, i64 -8
  %376 = bitcast i8* %375 to %"class.sh::TIntermNode"**
  %377 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  br label %378

378:                                              ; preds = %378, %370
  %379 = phi i64 [ 0, %370 ], [ %413, %378 ]
  %380 = phi i64 [ %371, %370 ], [ %414, %378 ]
  %381 = sub i64 0, %379
  %382 = sub i64 0, %379
  %383 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %373, i64 %381
  %384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 %382
  %385 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -1
  %386 = bitcast %"class.sh::TIntermNode"** %385 to <2 x i64>*
  %387 = load <2 x i64>, <2 x i64>* %386, align 8, !alias.scope !13
  %388 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %384, i64 -2
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %388, i64 -1
  %390 = bitcast %"class.sh::TIntermNode"** %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 8, !alias.scope !13
  %392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -1
  %393 = bitcast %"class.sh::TIntermNode"** %392 to <2 x i64>*
  store <2 x i64> %387, <2 x i64>* %393, align 8, !alias.scope !16, !noalias !13
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 -2
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 -1
  %396 = bitcast %"class.sh::TIntermNode"** %395 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %396, align 8, !alias.scope !16, !noalias !13
  %397 = sub nuw nsw i64 -4, %379
  %398 = sub nuw nsw i64 -4, %379
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %376, i64 %397
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %377, i64 %398
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %402 = bitcast %"class.sh::TIntermNode"** %401 to <2 x i64>*
  %403 = load <2 x i64>, <2 x i64>* %402, align 8, !alias.scope !13
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -2
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 -1
  %406 = bitcast %"class.sh::TIntermNode"** %405 to <2 x i64>*
  %407 = load <2 x i64>, <2 x i64>* %406, align 8, !alias.scope !13
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -1
  %409 = bitcast %"class.sh::TIntermNode"** %408 to <2 x i64>*
  store <2 x i64> %403, <2 x i64>* %409, align 8, !alias.scope !16, !noalias !13
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -2
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -1
  %412 = bitcast %"class.sh::TIntermNode"** %411 to <2 x i64>*
  store <2 x i64> %407, <2 x i64>* %412, align 8, !alias.scope !16, !noalias !13
  %413 = add i64 %379, 8
  %414 = add i64 %380, -2
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %378, !llvm.loop !18

416:                                              ; preds = %378
  %417 = sub nuw nsw i64 -8, %379
  br label %418

418:                                              ; preds = %416, %359
  %419 = phi i64 [ 0, %359 ], [ %417, %416 ]
  %420 = icmp eq i64 %368, 0
  br i1 %420, label %439, label %421

421:                                              ; preds = %418
  %422 = getelementptr i8, i8* %328, i64 -8
  %423 = bitcast i8* %422 to %"class.sh::TIntermNode"**
  %424 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 %419
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 %419
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -1
  %428 = bitcast %"class.sh::TIntermNode"** %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 8, !alias.scope !13
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 -2
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !13
  %434 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -1
  %435 = bitcast %"class.sh::TIntermNode"** %434 to <2 x i64>*
  store <2 x i64> %429, <2 x i64>* %435, align 8, !alias.scope !16, !noalias !13
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -2
  %437 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 -1
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %438, align 8, !alias.scope !16, !noalias !13
  br label %439

439:                                              ; preds = %418, %421
  %440 = icmp eq i64 %343, %360
  br i1 %440, label %511, label %441

441:                                              ; preds = %439, %345, %338
  %442 = phi %"class.sh::TIntermNode"** [ %329, %345 ], [ %329, %338 ], [ %362, %439 ]
  %443 = phi %"class.sh::TIntermNode"** [ %335, %345 ], [ %335, %338 ], [ %364, %439 ]
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 -1
  %445 = ptrtoint %"class.sh::TIntermNode"** %444 to i64
  %446 = sub i64 %445, %334
  %447 = lshr i64 %446, 3
  %448 = add nuw nsw i64 %447, 1
  %449 = and i64 %448, 7
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %462, label %451

451:                                              ; preds = %441, %451
  %452 = phi %"class.sh::TIntermNode"** [ %455, %451 ], [ %442, %441 ]
  %453 = phi %"class.sh::TIntermNode"** [ %456, %451 ], [ %443, %441 ]
  %454 = phi i64 [ %460, %451 ], [ %449, %441 ]
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %452, i64 -1
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %453, i64 -1
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = add i64 %454, -1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %462, label %451, !llvm.loop !19

462:                                              ; preds = %451, %441
  %463 = phi %"class.sh::TIntermNode"** [ undef, %441 ], [ %455, %451 ]
  %464 = phi %"class.sh::TIntermNode"** [ %442, %441 ], [ %455, %451 ]
  %465 = phi %"class.sh::TIntermNode"** [ %443, %441 ], [ %456, %451 ]
  %466 = icmp ult i64 %446, 56
  br i1 %466, label %511, label %467

467:                                              ; preds = %462, %467
  %468 = phi %"class.sh::TIntermNode"** [ %505, %467 ], [ %464, %462 ]
  %469 = phi %"class.sh::TIntermNode"** [ %506, %467 ], [ %465, %462 ]
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -1
  %471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -1
  %472 = bitcast %"class.sh::TIntermNode"** %471 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  store i64 %473, i64* %474, align 8
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -2
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -2
  %477 = bitcast %"class.sh::TIntermNode"** %476 to i64*
  %478 = load i64, i64* %477, align 8
  %479 = bitcast %"class.sh::TIntermNode"** %475 to i64*
  store i64 %478, i64* %479, align 8
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -3
  %481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -3
  %482 = bitcast %"class.sh::TIntermNode"** %481 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  store i64 %483, i64* %484, align 8
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -4
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -4
  %487 = bitcast %"class.sh::TIntermNode"** %486 to i64*
  %488 = load i64, i64* %487, align 8
  %489 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  store i64 %488, i64* %489, align 8
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -5
  %491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -5
  %492 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  store i64 %493, i64* %494, align 8
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -6
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -6
  %497 = bitcast %"class.sh::TIntermNode"** %496 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  store i64 %498, i64* %499, align 8
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -7
  %501 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -7
  %502 = bitcast %"class.sh::TIntermNode"** %501 to i64*
  %503 = load i64, i64* %502, align 8
  %504 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  store i64 %503, i64* %504, align 8
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %468, i64 -8
  %506 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %469, i64 -8
  %507 = bitcast %"class.sh::TIntermNode"** %506 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  store i64 %508, i64* %509, align 8
  %510 = icmp eq %"class.sh::TIntermNode"** %506, %333
  br i1 %510, label %511, label %467, !llvm.loop !20

511:                                              ; preds = %462, %467, %439, %312
  %512 = phi %"class.sh::TIntermNode"** [ %329, %312 ], [ %362, %439 ], [ %463, %462 ], [ %505, %467 ]
  %513 = ptrtoint %"class.sh::TIntermNode"** %512 to i64
  store i64 %513, i64* %325, align 8
  store i64 %331, i64* %324, align 8
  store i64 %331, i64* %326, align 8
  %514 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %7, %"class.sh::TVector"* nonnull %5) #7
  %515 = bitcast %"class.sh::TIntermAggregate"* %514 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)***
  %516 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*** %515, align 8
  %517 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %516, i64 27
  %518 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %517, align 8
  %519 = call %"class.sh::TIntermTyped"* %518(%"class.sh::TIntermAggregate"* %514, %"class.sh::TDiagnostics"* null) #7
  %520 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %514, i64 0, i32 0, i32 0, i32 0
  %521 = icmp ne %"class.sh::TIntermTyped"* %519, %520
  %522 = zext i1 %521 to i32
  %523 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %319, align 8
  %524 = icmp eq %"class.sh::TIntermNode"** %523, null
  br i1 %524, label %528, label %525

525:                                              ; preds = %511
  %526 = ptrtoint %"class.sh::TIntermNode"** %523 to i64
  %527 = bitcast %"class.sh::TIntermNode"*** %320 to i64*
  store i64 %526, i64* %527, align 8
  br label %528

528:                                              ; preds = %511, %525
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %318) #7
  %529 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0
  %530 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %531 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %519, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %529, %"class.sh::TIntermNode"* %530, %"class.sh::TIntermNode"* %321, %"class.sh::TIntermNode"* %531, i32 %522) #7
  %532 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 1
  store i8 1, i8* %532, align 8
  br label %533

533:                                              ; preds = %291, %300, %304, %308, %279, %14, %3, %528, %274
  %534 = phi i1 [ false, %274 ], [ false, %528 ], [ true, %3 ], [ true, %14 ], [ true, %279 ], [ true, %308 ], [ true, %304 ], [ true, %300 ], [ true, %291 ]
  ret i1 %534
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_140VectorizeVectorScalarArithmeticTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector", align 8
  %5 = alloca %"class.sh::TVector", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TType", align 8
  %8 = alloca %"class.sh::TType", align 8
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.sh::TVector", align 8
  %11 = alloca %"class.sh::TType", align 8
  %12 = alloca %"class.sh::TType", align 8
  %13 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %14 = alloca %"class.sh::TVector.36", align 8
  %15 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TIntermOperator"*
  %16 = tail call zeroext i1 @_ZNK2sh15TIntermOperator13isConstructorEv(%"class.sh::TIntermOperator"* %15) #7
  br i1 %16, label %17, label %1102

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %20, i64 31
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %21, align 8
  %23 = tail call dereferenceable(184) %"class.sh::TType"* %22(%"class.sh::TIntermTyped"* %18) #7
  %24 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %23, i64 0, i32 8
  %25 = load i8, i8* %24, align 8
  %26 = icmp ugt i8 %25, 1
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %23, i64 0, i32 9
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 1
  %30 = and i1 %26, %29
  br i1 %30, label %31, label %1102

31:                                               ; preds = %17
  %32 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)***
  %33 = load %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)** %33, i64 32
  %35 = load %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)** %34, align 8
  %36 = tail call %"class.sh::TVector"* %35(%"class.sh::TIntermAggregate"* %2) #7
  %37 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %36, i64 0, i32 0, i32 0, i32 1
  %38 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.sh::TVector"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = icmp eq i64 %42, 8
  br i1 %43, label %44, label %1102

44:                                               ; preds = %31
  %45 = load %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*** %32, align 8
  %46 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)** %45, i64 32
  %47 = load %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)** %46, align 8
  %48 = tail call %"class.sh::TVector"* %47(%"class.sh::TIntermAggregate"* %2) #7
  %49 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %48, i64 0, i32 0, i32 0, i32 1
  %50 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %49, align 8
  %51 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 -1
  %52 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %51, align 8
  %53 = bitcast %"class.sh::TIntermNode"* %52 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %54 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %53, align 8
  %55 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %54, i64 4
  %56 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %55, align 8
  %57 = tail call %"class.sh::TIntermTyped"* %56(%"class.sh::TIntermNode"* %52) #7
  %58 = bitcast %"class.sh::TIntermTyped"* %57 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %59 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %58, align 8
  %60 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %59, i64 31
  %61 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %60, align 8
  %62 = tail call dereferenceable(184) %"class.sh::TType"* %61(%"class.sh::TIntermTyped"* %57) #7
  %63 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %62, i64 0, i32 8
  %64 = load i8, i8* %63, align 8
  %65 = icmp eq i8 %64, 1
  br i1 %65, label %66, label %1102

66:                                               ; preds = %44
  %67 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %62, i64 0, i32 9
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 1
  br i1 %69, label %70, label %1102

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %62, i64 0, i32 13
  %72 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %71, align 8
  %73 = icmp eq %"class.sh::TStructure"* %72, null
  br i1 %73, label %74, label %1102

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %62, i64 0, i32 10, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %1102

78:                                               ; preds = %74
  %79 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %58, align 8
  %80 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %79, i64 31
  %81 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %80, align 8
  %82 = tail call dereferenceable(184) %"class.sh::TType"* %81(%"class.sh::TIntermTyped"* %57) #7
  %83 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %82, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %1102

86:                                               ; preds = %78
  %87 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %57, i64 0, i32 0
  %88 = bitcast %"class.sh::TIntermTyped"* %57 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %89 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %88, align 8
  %90 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %89, i64 13
  %91 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %90, align 8
  %92 = tail call %"class.sh::TIntermBinary"* %91(%"class.sh::TIntermNode"* %87) #7
  %93 = icmp eq %"class.sh::TIntermBinary"* %92, null
  br i1 %93, label %1102, label %94

94:                                               ; preds = %86
  %95 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %92, i64 0, i32 0, i32 1
  %96 = load i8, i8* %95, align 8
  switch i8 %96, label %1102 [
    i8 15, label %97
    i8 16, label %97
    i8 -114, label %553
    i8 -109, label %553
  ]

97:                                               ; preds = %94, %94
  %98 = bitcast %"class.sh::TType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %98)
  %99 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %99)
  %100 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %92, i64 0, i32 2
  %101 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %100, align 8
  %102 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %92, i64 0, i32 3
  %103 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %102, align 8
  %104 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %104) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 -86, i64 184, i1 false) #7
  %105 = bitcast %"class.sh::TIntermTyped"* %101 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %106 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %105, align 8
  %107 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %106, i64 31
  %108 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %107, align 8
  %109 = tail call dereferenceable(184) %"class.sh::TType"* %108(%"class.sh::TIntermTyped"* %101) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %6, %"class.sh::TType"* dereferenceable(184) %109) #7
  %110 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0
  %111 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %112 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %111, align 8
  %113 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %112, i64 31
  %114 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %113, align 8
  %115 = call dereferenceable(184) %"class.sh::TType"* %114(%"class.sh::TIntermExpression"* %110) #7
  %116 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %115, i64 0, i32 8
  %117 = load i8, i8* %116, align 8
  call void @_ZN2sh5TType14setPrimarySizeEh(%"class.sh::TType"* nonnull %6, i8 zeroext %117) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %7, %"class.sh::TType"* nonnull dereferenceable(184) %6) #7
  %118 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 2
  store i32 0, i32* %118, align 8
  %119 = bitcast %"class.sh::TVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %119) #7
  %120 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %119, i8 0, i64 24, i1 false) #7
  %122 = ptrtoint %"class.sh::TIntermTyped"* %101 to i64
  %123 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %124 = bitcast %"class.sh::TIntermNode"*** %121 to i64*
  %125 = bitcast %"class.sh::TVector"* %4 to i64*
  %126 = bitcast %"class.sh::TIntermNode"*** %123 to i64*
  %127 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %128 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %127, i64 8) #7
  %129 = bitcast i8* %128 to %"class.sh::TIntermNode"**
  %130 = getelementptr inbounds i8, i8* %128, i64 8
  %131 = ptrtoint i8* %130 to i64
  %132 = bitcast i8* %128 to i64*
  store i64 %122, i64* %132, align 8
  %133 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %120, align 8
  %134 = ptrtoint %"class.sh::TIntermNode"** %133 to i64
  %135 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %121, align 8
  %136 = bitcast %"class.sh::TIntermNode"** %135 to i8*
  %137 = icmp eq %"class.sh::TIntermNode"** %135, %133
  br i1 %137, label %311, label %138

138:                                              ; preds = %97
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %140 = ptrtoint %"class.sh::TIntermNode"** %139 to i64
  %141 = sub i64 %140, %134
  %142 = lshr i64 %141, 3
  %143 = add nuw nsw i64 %142, 1
  %144 = icmp ult i64 %143, 4
  br i1 %144, label %241, label %145

145:                                              ; preds = %138
  %146 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %147 = ptrtoint %"class.sh::TIntermNode"** %146 to i64
  %148 = sub i64 %147, %134
  %149 = lshr i64 %148, 3
  %150 = and i64 %148, -8
  %151 = xor i64 %150, -8
  %152 = getelementptr i8, i8* %128, i64 %151
  %153 = xor i64 %149, -1
  %154 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 %153
  %155 = bitcast %"class.sh::TIntermNode"** %154 to i8*
  %156 = icmp ult i8* %152, %136
  %157 = icmp ugt i8* %128, %155
  %158 = and i1 %156, %157
  br i1 %158, label %241, label %159

159:                                              ; preds = %145
  %160 = and i64 %143, 4611686018427387900
  %161 = sub nsw i64 0, %160
  %162 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %129, i64 %161
  %163 = sub nsw i64 0, %160
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 %163
  %165 = add nsw i64 %160, -4
  %166 = lshr exact i64 %165, 2
  %167 = add nuw nsw i64 %166, 1
  %168 = and i64 %167, 1
  %169 = icmp eq i64 %165, 0
  br i1 %169, label %216, label %170

170:                                              ; preds = %159
  %171 = sub nuw nsw i64 %167, %168
  %172 = getelementptr i8, i8* %128, i64 -8
  %173 = bitcast i8* %172 to %"class.sh::TIntermNode"**
  %174 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %175 = getelementptr i8, i8* %128, i64 -8
  %176 = bitcast i8* %175 to %"class.sh::TIntermNode"**
  %177 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  br label %178

178:                                              ; preds = %178, %170
  %179 = phi i64 [ 0, %170 ], [ %213, %178 ]
  %180 = phi i64 [ %171, %170 ], [ %214, %178 ]
  %181 = sub i64 0, %179
  %182 = sub i64 0, %179
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 %181
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %174, i64 %182
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %186 = bitcast %"class.sh::TIntermNode"** %185 to <2 x i64>*
  %187 = load <2 x i64>, <2 x i64>* %186, align 8, !alias.scope !21
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -2
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %188, i64 -1
  %190 = bitcast %"class.sh::TIntermNode"** %189 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %190, align 8, !alias.scope !21
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -1
  %193 = bitcast %"class.sh::TIntermNode"** %192 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %193, align 8, !alias.scope !24, !noalias !21
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -2
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %196 = bitcast %"class.sh::TIntermNode"** %195 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %196, align 8, !alias.scope !24, !noalias !21
  %197 = sub nuw nsw i64 -4, %179
  %198 = sub nuw nsw i64 -4, %179
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 %197
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %177, i64 %198
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -1
  %202 = bitcast %"class.sh::TIntermNode"** %201 to <2 x i64>*
  %203 = load <2 x i64>, <2 x i64>* %202, align 8, !alias.scope !21
  %204 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -2
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 -1
  %206 = bitcast %"class.sh::TIntermNode"** %205 to <2 x i64>*
  %207 = load <2 x i64>, <2 x i64>* %206, align 8, !alias.scope !21
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 -1
  %209 = bitcast %"class.sh::TIntermNode"** %208 to <2 x i64>*
  store <2 x i64> %203, <2 x i64>* %209, align 8, !alias.scope !24, !noalias !21
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, i64 -2
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -1
  %212 = bitcast %"class.sh::TIntermNode"** %211 to <2 x i64>*
  store <2 x i64> %207, <2 x i64>* %212, align 8, !alias.scope !24, !noalias !21
  %213 = add i64 %179, 8
  %214 = add i64 %180, -2
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %216, label %178, !llvm.loop !26

216:                                              ; preds = %178, %159
  %217 = phi i64 [ 0, %159 ], [ %213, %178 ]
  %218 = icmp eq i64 %168, 0
  br i1 %218, label %239, label %219

219:                                              ; preds = %216
  %220 = sub i64 0, %217
  %221 = getelementptr i8, i8* %128, i64 -8
  %222 = bitcast i8* %221 to %"class.sh::TIntermNode"**
  %223 = sub i64 0, %217
  %224 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 -1
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %222, i64 %220
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %224, i64 %223
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -1
  %228 = bitcast %"class.sh::TIntermNode"** %227 to <2 x i64>*
  %229 = load <2 x i64>, <2 x i64>* %228, align 8, !alias.scope !21
  %230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -2
  %231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %230, i64 -1
  %232 = bitcast %"class.sh::TIntermNode"** %231 to <2 x i64>*
  %233 = load <2 x i64>, <2 x i64>* %232, align 8, !alias.scope !21
  %234 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -1
  %235 = bitcast %"class.sh::TIntermNode"** %234 to <2 x i64>*
  store <2 x i64> %229, <2 x i64>* %235, align 8, !alias.scope !24, !noalias !21
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -2
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %236, i64 -1
  %238 = bitcast %"class.sh::TIntermNode"** %237 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %238, align 8, !alias.scope !24, !noalias !21
  br label %239

239:                                              ; preds = %216, %219
  %240 = icmp eq i64 %143, %160
  br i1 %240, label %311, label %241

241:                                              ; preds = %239, %145, %138
  %242 = phi %"class.sh::TIntermNode"** [ %129, %145 ], [ %129, %138 ], [ %162, %239 ]
  %243 = phi %"class.sh::TIntermNode"** [ %135, %145 ], [ %135, %138 ], [ %164, %239 ]
  %244 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %243, i64 -1
  %245 = ptrtoint %"class.sh::TIntermNode"** %244 to i64
  %246 = sub i64 %245, %134
  %247 = lshr i64 %246, 3
  %248 = add nuw nsw i64 %247, 1
  %249 = and i64 %248, 7
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %262, label %251

251:                                              ; preds = %241, %251
  %252 = phi %"class.sh::TIntermNode"** [ %255, %251 ], [ %242, %241 ]
  %253 = phi %"class.sh::TIntermNode"** [ %256, %251 ], [ %243, %241 ]
  %254 = phi i64 [ %260, %251 ], [ %249, %241 ]
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %252, i64 -1
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %253, i64 -1
  %257 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = bitcast %"class.sh::TIntermNode"** %255 to i64*
  store i64 %258, i64* %259, align 8
  %260 = add i64 %254, -1
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %251, !llvm.loop !27

262:                                              ; preds = %251, %241
  %263 = phi %"class.sh::TIntermNode"** [ undef, %241 ], [ %255, %251 ]
  %264 = phi %"class.sh::TIntermNode"** [ %242, %241 ], [ %255, %251 ]
  %265 = phi %"class.sh::TIntermNode"** [ %243, %241 ], [ %256, %251 ]
  %266 = icmp ult i64 %246, 56
  br i1 %266, label %311, label %267

267:                                              ; preds = %262, %267
  %268 = phi %"class.sh::TIntermNode"** [ %305, %267 ], [ %264, %262 ]
  %269 = phi %"class.sh::TIntermNode"** [ %306, %267 ], [ %265, %262 ]
  %270 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -1
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -1
  %272 = bitcast %"class.sh::TIntermNode"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.sh::TIntermNode"** %270 to i64*
  store i64 %273, i64* %274, align 8
  %275 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -2
  %276 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -2
  %277 = bitcast %"class.sh::TIntermNode"** %276 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = bitcast %"class.sh::TIntermNode"** %275 to i64*
  store i64 %278, i64* %279, align 8
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -3
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -3
  %282 = bitcast %"class.sh::TIntermNode"** %281 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = bitcast %"class.sh::TIntermNode"** %280 to i64*
  store i64 %283, i64* %284, align 8
  %285 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -4
  %286 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -4
  %287 = bitcast %"class.sh::TIntermNode"** %286 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = bitcast %"class.sh::TIntermNode"** %285 to i64*
  store i64 %288, i64* %289, align 8
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -5
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -5
  %292 = bitcast %"class.sh::TIntermNode"** %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = bitcast %"class.sh::TIntermNode"** %290 to i64*
  store i64 %293, i64* %294, align 8
  %295 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -6
  %296 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -6
  %297 = bitcast %"class.sh::TIntermNode"** %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast %"class.sh::TIntermNode"** %295 to i64*
  store i64 %298, i64* %299, align 8
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -7
  %301 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -7
  %302 = bitcast %"class.sh::TIntermNode"** %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = bitcast %"class.sh::TIntermNode"** %300 to i64*
  store i64 %303, i64* %304, align 8
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %268, i64 -8
  %306 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %269, i64 -8
  %307 = bitcast %"class.sh::TIntermNode"** %306 to i64*
  %308 = load i64, i64* %307, align 8
  %309 = bitcast %"class.sh::TIntermNode"** %305 to i64*
  store i64 %308, i64* %309, align 8
  %310 = icmp eq %"class.sh::TIntermNode"** %306, %133
  br i1 %310, label %311, label %267, !llvm.loop !28

311:                                              ; preds = %262, %267, %239, %97
  %312 = phi %"class.sh::TIntermNode"** [ %129, %97 ], [ %162, %239 ], [ %263, %262 ], [ %305, %267 ]
  %313 = ptrtoint %"class.sh::TIntermNode"** %312 to i64
  store i64 %313, i64* %125, align 8
  store i64 %131, i64* %124, align 8
  store i64 %131, i64* %126, align 8
  %314 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %7, %"class.sh::TVector"* nonnull %4) #7
  %315 = bitcast %"class.sh::TIntermAggregate"* %314 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)***
  %316 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*** %315, align 8
  %317 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %316, i64 27
  %318 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %317, align 8
  %319 = call %"class.sh::TIntermTyped"* %318(%"class.sh::TIntermAggregate"* %314, %"class.sh::TDiagnostics"* null) #7
  %320 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %120, align 8
  %321 = icmp eq %"class.sh::TIntermNode"** %320, null
  br i1 %321, label %324, label %322

322:                                              ; preds = %311
  %323 = ptrtoint %"class.sh::TIntermNode"** %320 to i64
  store i64 %323, i64* %124, align 8
  br label %324

324:                                              ; preds = %322, %311
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %119) #7
  %325 = bitcast %"class.sh::TType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %325) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %325, i8 -86, i64 184, i1 false) #7
  %326 = bitcast %"class.sh::TIntermTyped"* %103 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %327 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %326, align 8
  %328 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %327, i64 31
  %329 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %328, align 8
  %330 = call dereferenceable(184) %"class.sh::TType"* %329(%"class.sh::TIntermTyped"* %103) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %8, %"class.sh::TType"* dereferenceable(184) %330) #7
  %331 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %111, align 8
  %332 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %331, i64 31
  %333 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %332, align 8
  %334 = call dereferenceable(184) %"class.sh::TType"* %333(%"class.sh::TIntermExpression"* %110) #7
  %335 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %334, i64 0, i32 8
  %336 = load i8, i8* %335, align 8
  call void @_ZN2sh5TType14setPrimarySizeEh(%"class.sh::TType"* nonnull %8, i8 zeroext %336) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %9, %"class.sh::TType"* nonnull dereferenceable(184) %8) #7
  %337 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 2
  store i32 0, i32* %337, align 8
  %338 = bitcast %"class.sh::TVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %338) #7
  %339 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 0
  %340 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %338, i8 0, i64 24, i1 false) #7
  %341 = ptrtoint %"class.sh::TIntermTyped"* %103 to i64
  %342 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %343 = bitcast %"class.sh::TIntermNode"*** %340 to i64*
  %344 = bitcast %"class.sh::TVector"* %5 to i64*
  %345 = bitcast %"class.sh::TIntermNode"*** %342 to i64*
  %346 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %347 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %346, i64 8) #7
  %348 = bitcast i8* %347 to %"class.sh::TIntermNode"**
  %349 = getelementptr inbounds i8, i8* %347, i64 8
  %350 = ptrtoint i8* %349 to i64
  %351 = bitcast i8* %347 to i64*
  store i64 %341, i64* %351, align 8
  %352 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %339, align 8
  %353 = ptrtoint %"class.sh::TIntermNode"** %352 to i64
  %354 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %340, align 8
  %355 = bitcast %"class.sh::TIntermNode"** %354 to i8*
  %356 = icmp eq %"class.sh::TIntermNode"** %354, %352
  br i1 %356, label %530, label %357

357:                                              ; preds = %324
  %358 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %359 = ptrtoint %"class.sh::TIntermNode"** %358 to i64
  %360 = sub i64 %359, %353
  %361 = lshr i64 %360, 3
  %362 = add nuw nsw i64 %361, 1
  %363 = icmp ult i64 %362, 4
  br i1 %363, label %460, label %364

364:                                              ; preds = %357
  %365 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %366 = ptrtoint %"class.sh::TIntermNode"** %365 to i64
  %367 = sub i64 %366, %353
  %368 = lshr i64 %367, 3
  %369 = and i64 %367, -8
  %370 = xor i64 %369, -8
  %371 = getelementptr i8, i8* %347, i64 %370
  %372 = xor i64 %368, -1
  %373 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %372
  %374 = bitcast %"class.sh::TIntermNode"** %373 to i8*
  %375 = icmp ult i8* %371, %355
  %376 = icmp ugt i8* %347, %374
  %377 = and i1 %375, %376
  br i1 %377, label %460, label %378

378:                                              ; preds = %364
  %379 = and i64 %362, 4611686018427387900
  %380 = sub nsw i64 0, %379
  %381 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %348, i64 %380
  %382 = sub nsw i64 0, %379
  %383 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %382
  %384 = add nsw i64 %379, -4
  %385 = lshr exact i64 %384, 2
  %386 = add nuw nsw i64 %385, 1
  %387 = and i64 %386, 1
  %388 = icmp eq i64 %384, 0
  br i1 %388, label %437, label %389

389:                                              ; preds = %378
  %390 = sub nuw nsw i64 %386, %387
  %391 = getelementptr i8, i8* %347, i64 -8
  %392 = bitcast i8* %391 to %"class.sh::TIntermNode"**
  %393 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %394 = getelementptr i8, i8* %347, i64 -8
  %395 = bitcast i8* %394 to %"class.sh::TIntermNode"**
  %396 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  br label %397

397:                                              ; preds = %397, %389
  %398 = phi i64 [ 0, %389 ], [ %432, %397 ]
  %399 = phi i64 [ %390, %389 ], [ %433, %397 ]
  %400 = sub i64 0, %398
  %401 = sub i64 0, %398
  %402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %400
  %403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %401
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %403, i64 -1
  %405 = bitcast %"class.sh::TIntermNode"** %404 to <2 x i64>*
  %406 = load <2 x i64>, <2 x i64>* %405, align 8, !alias.scope !29
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %403, i64 -2
  %408 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %407, i64 -1
  %409 = bitcast %"class.sh::TIntermNode"** %408 to <2 x i64>*
  %410 = load <2 x i64>, <2 x i64>* %409, align 8, !alias.scope !29
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %402, i64 -1
  %412 = bitcast %"class.sh::TIntermNode"** %411 to <2 x i64>*
  store <2 x i64> %406, <2 x i64>* %412, align 8, !alias.scope !32, !noalias !29
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %402, i64 -2
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %413, i64 -1
  %415 = bitcast %"class.sh::TIntermNode"** %414 to <2 x i64>*
  store <2 x i64> %410, <2 x i64>* %415, align 8, !alias.scope !32, !noalias !29
  %416 = sub nuw nsw i64 -4, %398
  %417 = sub nuw nsw i64 -4, %398
  %418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %395, i64 %416
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %396, i64 %417
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %419, i64 -1
  %421 = bitcast %"class.sh::TIntermNode"** %420 to <2 x i64>*
  %422 = load <2 x i64>, <2 x i64>* %421, align 8, !alias.scope !29
  %423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %419, i64 -2
  %424 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 -1
  %425 = bitcast %"class.sh::TIntermNode"** %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 8, !alias.scope !29
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %418, i64 -1
  %428 = bitcast %"class.sh::TIntermNode"** %427 to <2 x i64>*
  store <2 x i64> %422, <2 x i64>* %428, align 8, !alias.scope !32, !noalias !29
  %429 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %418, i64 -2
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %429, i64 -1
  %431 = bitcast %"class.sh::TIntermNode"** %430 to <2 x i64>*
  store <2 x i64> %426, <2 x i64>* %431, align 8, !alias.scope !32, !noalias !29
  %432 = add i64 %398, 8
  %433 = add i64 %399, -2
  %434 = icmp eq i64 %433, 0
  br i1 %434, label %435, label %397, !llvm.loop !34

435:                                              ; preds = %397
  %436 = sub nuw nsw i64 -8, %398
  br label %437

437:                                              ; preds = %435, %378
  %438 = phi i64 [ 0, %378 ], [ %436, %435 ]
  %439 = icmp eq i64 %387, 0
  br i1 %439, label %458, label %440

440:                                              ; preds = %437
  %441 = getelementptr i8, i8* %347, i64 -8
  %442 = bitcast i8* %441 to %"class.sh::TIntermNode"**
  %443 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %444 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %442, i64 %438
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %443, i64 %438
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %445, i64 -1
  %447 = bitcast %"class.sh::TIntermNode"** %446 to <2 x i64>*
  %448 = load <2 x i64>, <2 x i64>* %447, align 8, !alias.scope !29
  %449 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %445, i64 -2
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %449, i64 -1
  %451 = bitcast %"class.sh::TIntermNode"** %450 to <2 x i64>*
  %452 = load <2 x i64>, <2 x i64>* %451, align 8, !alias.scope !29
  %453 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %444, i64 -1
  %454 = bitcast %"class.sh::TIntermNode"** %453 to <2 x i64>*
  store <2 x i64> %448, <2 x i64>* %454, align 8, !alias.scope !32, !noalias !29
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %444, i64 -2
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %455, i64 -1
  %457 = bitcast %"class.sh::TIntermNode"** %456 to <2 x i64>*
  store <2 x i64> %452, <2 x i64>* %457, align 8, !alias.scope !32, !noalias !29
  br label %458

458:                                              ; preds = %437, %440
  %459 = icmp eq i64 %362, %379
  br i1 %459, label %530, label %460

460:                                              ; preds = %458, %364, %357
  %461 = phi %"class.sh::TIntermNode"** [ %348, %364 ], [ %348, %357 ], [ %381, %458 ]
  %462 = phi %"class.sh::TIntermNode"** [ %354, %364 ], [ %354, %357 ], [ %383, %458 ]
  %463 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 -1
  %464 = ptrtoint %"class.sh::TIntermNode"** %463 to i64
  %465 = sub i64 %464, %353
  %466 = lshr i64 %465, 3
  %467 = add nuw nsw i64 %466, 1
  %468 = and i64 %467, 7
  %469 = icmp eq i64 %468, 0
  br i1 %469, label %481, label %470

470:                                              ; preds = %460, %470
  %471 = phi %"class.sh::TIntermNode"** [ %474, %470 ], [ %461, %460 ]
  %472 = phi %"class.sh::TIntermNode"** [ %475, %470 ], [ %462, %460 ]
  %473 = phi i64 [ %479, %470 ], [ %468, %460 ]
  %474 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %471, i64 -1
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %472, i64 -1
  %476 = bitcast %"class.sh::TIntermNode"** %475 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = bitcast %"class.sh::TIntermNode"** %474 to i64*
  store i64 %477, i64* %478, align 8
  %479 = add i64 %473, -1
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %481, label %470, !llvm.loop !35

481:                                              ; preds = %470, %460
  %482 = phi %"class.sh::TIntermNode"** [ undef, %460 ], [ %474, %470 ]
  %483 = phi %"class.sh::TIntermNode"** [ %461, %460 ], [ %474, %470 ]
  %484 = phi %"class.sh::TIntermNode"** [ %462, %460 ], [ %475, %470 ]
  %485 = icmp ult i64 %465, 56
  br i1 %485, label %530, label %486

486:                                              ; preds = %481, %486
  %487 = phi %"class.sh::TIntermNode"** [ %524, %486 ], [ %483, %481 ]
  %488 = phi %"class.sh::TIntermNode"** [ %525, %486 ], [ %484, %481 ]
  %489 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -1
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -1
  %491 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  %492 = load i64, i64* %491, align 8
  %493 = bitcast %"class.sh::TIntermNode"** %489 to i64*
  store i64 %492, i64* %493, align 8
  %494 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -2
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -2
  %496 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = bitcast %"class.sh::TIntermNode"** %494 to i64*
  store i64 %497, i64* %498, align 8
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -3
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -3
  %501 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.sh::TIntermNode"** %499 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -4
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -4
  %506 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = bitcast %"class.sh::TIntermNode"** %504 to i64*
  store i64 %507, i64* %508, align 8
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -5
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -5
  %511 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = bitcast %"class.sh::TIntermNode"** %509 to i64*
  store i64 %512, i64* %513, align 8
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -6
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -6
  %516 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = bitcast %"class.sh::TIntermNode"** %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -7
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -7
  %521 = bitcast %"class.sh::TIntermNode"** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast %"class.sh::TIntermNode"** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %487, i64 -8
  %525 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -8
  %526 = bitcast %"class.sh::TIntermNode"** %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast %"class.sh::TIntermNode"** %524 to i64*
  store i64 %527, i64* %528, align 8
  %529 = icmp eq %"class.sh::TIntermNode"** %525, %352
  br i1 %529, label %530, label %486, !llvm.loop !36

530:                                              ; preds = %481, %486, %458, %324
  %531 = phi %"class.sh::TIntermNode"** [ %348, %324 ], [ %381, %458 ], [ %482, %481 ], [ %524, %486 ]
  %532 = ptrtoint %"class.sh::TIntermNode"** %531 to i64
  store i64 %532, i64* %344, align 8
  store i64 %350, i64* %343, align 8
  store i64 %350, i64* %345, align 8
  %533 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %9, %"class.sh::TVector"* nonnull %5) #7
  %534 = bitcast %"class.sh::TIntermAggregate"* %533 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)***
  %535 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*** %534, align 8
  %536 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %535, i64 27
  %537 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %536, align 8
  %538 = call %"class.sh::TIntermTyped"* %537(%"class.sh::TIntermAggregate"* %533, %"class.sh::TDiagnostics"* null) #7
  %539 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %339, align 8
  %540 = icmp eq %"class.sh::TIntermNode"** %539, null
  br i1 %540, label %543, label %541

541:                                              ; preds = %530
  %542 = ptrtoint %"class.sh::TIntermNode"** %539 to i64
  store i64 %542, i64* %343, align 8
  br label %543

543:                                              ; preds = %530, %541
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %338) #7
  %544 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %545 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %544, i64 240) #7
  %546 = bitcast i8* %545 to %"class.sh::TIntermBinary"*
  %547 = load i8, i8* %95, align 8
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %546, i8 zeroext %547, %"class.sh::TIntermTyped"* %319, %"class.sh::TIntermTyped"* %538) #7
  %548 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0
  %549 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %550 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %92, i64 0, i32 0, i32 0, i32 0, i32 0
  %551 = bitcast i8* %545 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %548, %"class.sh::TIntermNode"* %549, %"class.sh::TIntermNode"* %550, %"class.sh::TIntermNode"* %551, i32 1) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %325) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %104) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %98)
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %99)
  %552 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 1
  store i8 1, i8* %552, align 8
  br label %1102

553:                                              ; preds = %94, %94
  %554 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %92, i64 0, i32 2
  %555 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %554, align 8
  %556 = bitcast %"class.sh::TIntermTyped"* %555 to i1 (%"class.sh::TIntermTyped"*)***
  %557 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %556, align 8
  %558 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %557, i64 30
  %559 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %558, align 8
  %560 = tail call zeroext i1 %559(%"class.sh::TIntermTyped"* %555) #7
  br i1 %560, label %1102, label %561

561:                                              ; preds = %553
  %562 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0
  %563 = tail call %"class.sh::TIntermBlock"* @_ZNK2sh16TIntermTraverser14getParentBlockEv(%"class.sh::TIntermTraverser"* %562) #7
  %564 = ptrtoint %"class.sh::TIntermBlock"* %563 to i64
  %565 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2
  %566 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %567 = bitcast %"class.std::__1::__tree_end_node"* %566 to %"class.std::__1::__tree_node"**
  %568 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %567, align 8
  %569 = icmp eq %"class.std::__1::__tree_node"* %568, null
  br i1 %569, label %591, label %570

570:                                              ; preds = %561, %570
  %571 = phi %"class.std::__1::__tree_end_node"* [ %581, %570 ], [ %566, %561 ]
  %572 = phi %"class.std::__1::__tree_node"* [ %582, %570 ], [ %568, %561 ]
  %573 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %572, i64 0, i32 1
  %574 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %573, align 8
  %575 = icmp ult %"class.sh::TIntermBlock"* %574, %563
  %576 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %572, i64 0, i32 0, i32 1
  %577 = bitcast %"class.std::__1::__tree_node_base"** %576 to %"class.std::__1::__tree_node"**
  %578 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %572, i64 0, i32 0, i32 0
  %579 = bitcast %"class.std::__1::__tree_node"* %572 to %"class.std::__1::__tree_node"**
  %580 = select i1 %575, %"class.std::__1::__tree_node"** %577, %"class.std::__1::__tree_node"** %579
  %581 = select i1 %575, %"class.std::__1::__tree_end_node"* %571, %"class.std::__1::__tree_end_node"* %578
  %582 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %580, align 8
  %583 = icmp eq %"class.std::__1::__tree_node"* %582, null
  br i1 %583, label %584, label %570

584:                                              ; preds = %570
  %585 = icmp eq %"class.std::__1::__tree_end_node"* %581, %566
  br i1 %585, label %591, label %586

586:                                              ; preds = %584
  %587 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %581, i64 4
  %588 = bitcast %"class.std::__1::__tree_end_node"* %587 to %"class.sh::TIntermBlock"**
  %589 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %588, align 8
  %590 = icmp ult %"class.sh::TIntermBlock"* %563, %589
  br i1 %590, label %591, label %1102

591:                                              ; preds = %586, %584, %561
  %592 = bitcast %"class.sh::TType"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %592)
  %593 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %554, align 8
  %594 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %92, i64 0, i32 3
  %595 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %594, align 8
  %596 = bitcast %"class.sh::TType"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 184, i8* nonnull %596) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %596, i8 -86, i64 184, i1 false) #7
  %597 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0
  %598 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %599 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %598, align 8
  %600 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %599, i64 31
  %601 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %600, align 8
  %602 = tail call dereferenceable(184) %"class.sh::TType"* %601(%"class.sh::TIntermExpression"* %597) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %11, %"class.sh::TType"* dereferenceable(184) %602) #7
  %603 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %11, i64 0, i32 2
  store i32 0, i32* %603, align 8
  %604 = bitcast %"class.sh::TIntermTyped"* %593 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %605 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %604, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %605, i64 23
  %607 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %606, align 8
  %608 = call %"class.sh::TIntermTyped"* %607(%"class.sh::TIntermTyped"* %593) #7
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %12, %"class.sh::TType"* nonnull dereferenceable(184) %11) #7
  %609 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %12, i64 0, i32 2
  store i32 0, i32* %609, align 8
  %610 = bitcast %"class.sh::TVector"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %610) #7
  %611 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 0
  %612 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %610, i8 0, i64 24, i1 false) #7
  %613 = ptrtoint %"class.sh::TIntermTyped"* %608 to i64
  %614 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %615 = bitcast %"class.sh::TIntermNode"*** %612 to i64*
  %616 = bitcast %"class.sh::TVector"* %10 to i64*
  %617 = bitcast %"class.sh::TIntermNode"*** %614 to i64*
  %618 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %619 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %618, i64 8) #7
  %620 = bitcast i8* %619 to %"class.sh::TIntermNode"**
  %621 = getelementptr inbounds i8, i8* %619, i64 8
  %622 = ptrtoint i8* %621 to i64
  %623 = bitcast i8* %619 to i64*
  store i64 %613, i64* %623, align 8
  %624 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %611, align 8
  %625 = ptrtoint %"class.sh::TIntermNode"** %624 to i64
  %626 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %612, align 8
  %627 = bitcast %"class.sh::TIntermNode"** %626 to i8*
  %628 = icmp eq %"class.sh::TIntermNode"** %626, %624
  br i1 %628, label %802, label %629

629:                                              ; preds = %591
  %630 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  %631 = ptrtoint %"class.sh::TIntermNode"** %630 to i64
  %632 = sub i64 %631, %625
  %633 = lshr i64 %632, 3
  %634 = add nuw nsw i64 %633, 1
  %635 = icmp ult i64 %634, 4
  br i1 %635, label %732, label %636

636:                                              ; preds = %629
  %637 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  %638 = ptrtoint %"class.sh::TIntermNode"** %637 to i64
  %639 = sub i64 %638, %625
  %640 = lshr i64 %639, 3
  %641 = and i64 %639, -8
  %642 = xor i64 %641, -8
  %643 = getelementptr i8, i8* %619, i64 %642
  %644 = xor i64 %640, -1
  %645 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 %644
  %646 = bitcast %"class.sh::TIntermNode"** %645 to i8*
  %647 = icmp ult i8* %643, %627
  %648 = icmp ugt i8* %619, %646
  %649 = and i1 %647, %648
  br i1 %649, label %732, label %650

650:                                              ; preds = %636
  %651 = and i64 %634, 4611686018427387900
  %652 = sub nsw i64 0, %651
  %653 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %620, i64 %652
  %654 = sub nsw i64 0, %651
  %655 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 %654
  %656 = add nsw i64 %651, -4
  %657 = lshr exact i64 %656, 2
  %658 = add nuw nsw i64 %657, 1
  %659 = and i64 %658, 1
  %660 = icmp eq i64 %656, 0
  br i1 %660, label %707, label %661

661:                                              ; preds = %650
  %662 = sub nuw nsw i64 %658, %659
  %663 = getelementptr i8, i8* %619, i64 -8
  %664 = bitcast i8* %663 to %"class.sh::TIntermNode"**
  %665 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  %666 = getelementptr i8, i8* %619, i64 -8
  %667 = bitcast i8* %666 to %"class.sh::TIntermNode"**
  %668 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  br label %669

669:                                              ; preds = %669, %661
  %670 = phi i64 [ 0, %661 ], [ %704, %669 ]
  %671 = phi i64 [ %662, %661 ], [ %705, %669 ]
  %672 = sub i64 0, %670
  %673 = sub i64 0, %670
  %674 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %664, i64 %672
  %675 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %665, i64 %673
  %676 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %675, i64 -1
  %677 = bitcast %"class.sh::TIntermNode"** %676 to <2 x i64>*
  %678 = load <2 x i64>, <2 x i64>* %677, align 8, !alias.scope !37
  %679 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %675, i64 -2
  %680 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %679, i64 -1
  %681 = bitcast %"class.sh::TIntermNode"** %680 to <2 x i64>*
  %682 = load <2 x i64>, <2 x i64>* %681, align 8, !alias.scope !37
  %683 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %674, i64 -1
  %684 = bitcast %"class.sh::TIntermNode"** %683 to <2 x i64>*
  store <2 x i64> %678, <2 x i64>* %684, align 8, !alias.scope !40, !noalias !37
  %685 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %674, i64 -2
  %686 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %685, i64 -1
  %687 = bitcast %"class.sh::TIntermNode"** %686 to <2 x i64>*
  store <2 x i64> %682, <2 x i64>* %687, align 8, !alias.scope !40, !noalias !37
  %688 = sub nuw nsw i64 -4, %670
  %689 = sub nuw nsw i64 -4, %670
  %690 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %667, i64 %688
  %691 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %668, i64 %689
  %692 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %691, i64 -1
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !37
  %695 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %691, i64 -2
  %696 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %695, i64 -1
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  %698 = load <2 x i64>, <2 x i64>* %697, align 8, !alias.scope !37
  %699 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %690, i64 -1
  %700 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %700, align 8, !alias.scope !40, !noalias !37
  %701 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %690, i64 -2
  %702 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %701, i64 -1
  %703 = bitcast %"class.sh::TIntermNode"** %702 to <2 x i64>*
  store <2 x i64> %698, <2 x i64>* %703, align 8, !alias.scope !40, !noalias !37
  %704 = add i64 %670, 8
  %705 = add i64 %671, -2
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %707, label %669, !llvm.loop !42

707:                                              ; preds = %669, %650
  %708 = phi i64 [ 0, %650 ], [ %704, %669 ]
  %709 = icmp eq i64 %659, 0
  br i1 %709, label %730, label %710

710:                                              ; preds = %707
  %711 = sub i64 0, %708
  %712 = getelementptr i8, i8* %619, i64 -8
  %713 = bitcast i8* %712 to %"class.sh::TIntermNode"**
  %714 = sub i64 0, %708
  %715 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  %716 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %713, i64 %711
  %717 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 %714
  %718 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %717, i64 -1
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  %720 = load <2 x i64>, <2 x i64>* %719, align 8, !alias.scope !37
  %721 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %717, i64 -2
  %722 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %721, i64 -1
  %723 = bitcast %"class.sh::TIntermNode"** %722 to <2 x i64>*
  %724 = load <2 x i64>, <2 x i64>* %723, align 8, !alias.scope !37
  %725 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %716, i64 -1
  %726 = bitcast %"class.sh::TIntermNode"** %725 to <2 x i64>*
  store <2 x i64> %720, <2 x i64>* %726, align 8, !alias.scope !40, !noalias !37
  %727 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %716, i64 -2
  %728 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 -1
  %729 = bitcast %"class.sh::TIntermNode"** %728 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %729, align 8, !alias.scope !40, !noalias !37
  br label %730

730:                                              ; preds = %707, %710
  %731 = icmp eq i64 %634, %651
  br i1 %731, label %802, label %732

732:                                              ; preds = %730, %636, %629
  %733 = phi %"class.sh::TIntermNode"** [ %620, %636 ], [ %620, %629 ], [ %653, %730 ]
  %734 = phi %"class.sh::TIntermNode"** [ %626, %636 ], [ %626, %629 ], [ %655, %730 ]
  %735 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %734, i64 -1
  %736 = ptrtoint %"class.sh::TIntermNode"** %735 to i64
  %737 = sub i64 %736, %625
  %738 = lshr i64 %737, 3
  %739 = add nuw nsw i64 %738, 1
  %740 = and i64 %739, 7
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %753, label %742

742:                                              ; preds = %732, %742
  %743 = phi %"class.sh::TIntermNode"** [ %746, %742 ], [ %733, %732 ]
  %744 = phi %"class.sh::TIntermNode"** [ %747, %742 ], [ %734, %732 ]
  %745 = phi i64 [ %751, %742 ], [ %740, %732 ]
  %746 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %743, i64 -1
  %747 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %744, i64 -1
  %748 = bitcast %"class.sh::TIntermNode"** %747 to i64*
  %749 = load i64, i64* %748, align 8
  %750 = bitcast %"class.sh::TIntermNode"** %746 to i64*
  store i64 %749, i64* %750, align 8
  %751 = add i64 %745, -1
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %742, !llvm.loop !43

753:                                              ; preds = %742, %732
  %754 = phi %"class.sh::TIntermNode"** [ undef, %732 ], [ %746, %742 ]
  %755 = phi %"class.sh::TIntermNode"** [ %733, %732 ], [ %746, %742 ]
  %756 = phi %"class.sh::TIntermNode"** [ %734, %732 ], [ %747, %742 ]
  %757 = icmp ult i64 %737, 56
  br i1 %757, label %802, label %758

758:                                              ; preds = %753, %758
  %759 = phi %"class.sh::TIntermNode"** [ %796, %758 ], [ %755, %753 ]
  %760 = phi %"class.sh::TIntermNode"** [ %797, %758 ], [ %756, %753 ]
  %761 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -1
  %762 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -1
  %763 = bitcast %"class.sh::TIntermNode"** %762 to i64*
  %764 = load i64, i64* %763, align 8
  %765 = bitcast %"class.sh::TIntermNode"** %761 to i64*
  store i64 %764, i64* %765, align 8
  %766 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -2
  %767 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -2
  %768 = bitcast %"class.sh::TIntermNode"** %767 to i64*
  %769 = load i64, i64* %768, align 8
  %770 = bitcast %"class.sh::TIntermNode"** %766 to i64*
  store i64 %769, i64* %770, align 8
  %771 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -3
  %772 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -3
  %773 = bitcast %"class.sh::TIntermNode"** %772 to i64*
  %774 = load i64, i64* %773, align 8
  %775 = bitcast %"class.sh::TIntermNode"** %771 to i64*
  store i64 %774, i64* %775, align 8
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -4
  %777 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -4
  %778 = bitcast %"class.sh::TIntermNode"** %777 to i64*
  %779 = load i64, i64* %778, align 8
  %780 = bitcast %"class.sh::TIntermNode"** %776 to i64*
  store i64 %779, i64* %780, align 8
  %781 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -5
  %782 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -5
  %783 = bitcast %"class.sh::TIntermNode"** %782 to i64*
  %784 = load i64, i64* %783, align 8
  %785 = bitcast %"class.sh::TIntermNode"** %781 to i64*
  store i64 %784, i64* %785, align 8
  %786 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -6
  %787 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -6
  %788 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %789 = load i64, i64* %788, align 8
  %790 = bitcast %"class.sh::TIntermNode"** %786 to i64*
  store i64 %789, i64* %790, align 8
  %791 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -7
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -7
  %793 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %794 = load i64, i64* %793, align 8
  %795 = bitcast %"class.sh::TIntermNode"** %791 to i64*
  store i64 %794, i64* %795, align 8
  %796 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %759, i64 -8
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %760, i64 -8
  %798 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %799 = load i64, i64* %798, align 8
  %800 = bitcast %"class.sh::TIntermNode"** %796 to i64*
  store i64 %799, i64* %800, align 8
  %801 = icmp eq %"class.sh::TIntermNode"** %797, %624
  br i1 %801, label %802, label %758, !llvm.loop !44

802:                                              ; preds = %753, %758, %730, %591
  %803 = phi %"class.sh::TIntermNode"** [ %620, %591 ], [ %653, %730 ], [ %754, %753 ], [ %796, %758 ]
  %804 = ptrtoint %"class.sh::TIntermNode"** %803 to i64
  store i64 %804, i64* %616, align 8
  store i64 %622, i64* %615, align 8
  store i64 %622, i64* %617, align 8
  %805 = call %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* nonnull dereferenceable(184) %12, %"class.sh::TVector"* nonnull %10) #7
  %806 = bitcast %"class.sh::TIntermAggregate"* %805 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)***
  %807 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*** %806, align 8
  %808 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %807, i64 27
  %809 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)** %808, align 8
  %810 = call %"class.sh::TIntermTyped"* %809(%"class.sh::TIntermAggregate"* %805, %"class.sh::TDiagnostics"* null) #7
  %811 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %611, align 8
  %812 = icmp eq %"class.sh::TIntermNode"** %811, null
  br i1 %812, label %815, label %813

813:                                              ; preds = %802
  %814 = ptrtoint %"class.sh::TIntermNode"** %811 to i64
  store i64 %814, i64* %615, align 8
  br label %815

815:                                              ; preds = %813, %802
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %610) #7
  %816 = bitcast %"class.sh::TIntermDeclaration"** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %816) #7
  store %"class.sh::TIntermDeclaration"* null, %"class.sh::TIntermDeclaration"** %13, align 8
  %817 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 0, i32 8
  %818 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %817, align 8
  %819 = call %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"* %818, %"class.sh::TIntermTyped"* %810, i32 0, %"class.sh::TIntermDeclaration"** nonnull %13) #7
  %820 = load i8, i8* %95, align 8
  %821 = icmp eq i8 %820, -114
  %822 = select i1 %821, i8 -112, i8 %820
  %823 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %824 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %823, i64 240) #7
  %825 = bitcast i8* %824 to %"class.sh::TIntermBinary"*
  %826 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %819) #7
  %827 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %826, i64 0, i32 0
  %828 = bitcast %"class.sh::TIntermTyped"* %595 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %829 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %828, align 8
  %830 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %829, i64 23
  %831 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %830, align 8
  %832 = call %"class.sh::TIntermTyped"* %831(%"class.sh::TIntermTyped"* %595) #7
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %825, i8 zeroext %822, %"class.sh::TIntermTyped"* %827, %"class.sh::TIntermTyped"* %832) #7
  %833 = bitcast %"class.sh::TVector.36"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %833) #7
  %834 = getelementptr inbounds %"class.sh::TVector.36", %"class.sh::TVector.36"* %14, i64 0, i32 0, i32 0, i32 0
  %835 = getelementptr inbounds %"class.sh::TVector.36", %"class.sh::TVector.36"* %14, i64 0, i32 0, i32 0, i32 1
  %836 = getelementptr inbounds %"class.sh::TVector.36", %"class.sh::TVector.36"* %14, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %833, i8 0, i64 24, i1 false) #7
  %837 = bitcast i32** %835 to i64*
  %838 = bitcast %"class.sh::TVector.36"* %14 to i64*
  %839 = bitcast i32** %836 to i64*
  %840 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %841 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %840, i64 4) #7
  %842 = bitcast i8* %841 to i32*
  %843 = getelementptr inbounds i8, i8* %841, i64 4
  %844 = ptrtoint i8* %843 to i64
  store i32 0, i32* %842, align 4
  %845 = load i32*, i32** %834, align 8
  %846 = ptrtoint i32* %845 to i64
  %847 = load i32*, i32** %835, align 8
  %848 = bitcast i32* %847 to i8*
  %849 = icmp eq i32* %847, %845
  br i1 %849, label %1005, label %850

850:                                              ; preds = %815
  %851 = getelementptr i32, i32* %847, i64 -1
  %852 = ptrtoint i32* %851 to i64
  %853 = sub i64 %852, %846
  %854 = lshr i64 %853, 2
  %855 = add nuw nsw i64 %854, 1
  %856 = icmp ult i64 %855, 8
  br i1 %856, label %953, label %857

857:                                              ; preds = %850
  %858 = getelementptr i32, i32* %847, i64 -1
  %859 = ptrtoint i32* %858 to i64
  %860 = sub i64 %859, %846
  %861 = lshr i64 %860, 2
  %862 = and i64 %860, -4
  %863 = xor i64 %862, -4
  %864 = getelementptr i8, i8* %841, i64 %863
  %865 = xor i64 %861, -1
  %866 = getelementptr i32, i32* %847, i64 %865
  %867 = bitcast i32* %866 to i8*
  %868 = icmp ult i8* %864, %848
  %869 = icmp ugt i8* %841, %867
  %870 = and i1 %868, %869
  br i1 %870, label %953, label %871

871:                                              ; preds = %857
  %872 = and i64 %855, 9223372036854775800
  %873 = sub nsw i64 0, %872
  %874 = getelementptr i32, i32* %842, i64 %873
  %875 = sub nsw i64 0, %872
  %876 = getelementptr i32, i32* %847, i64 %875
  %877 = add nsw i64 %872, -8
  %878 = lshr exact i64 %877, 3
  %879 = add nuw nsw i64 %878, 1
  %880 = and i64 %879, 1
  %881 = icmp eq i64 %877, 0
  br i1 %881, label %930, label %882

882:                                              ; preds = %871
  %883 = sub nuw nsw i64 %879, %880
  %884 = getelementptr i8, i8* %841, i64 -4
  %885 = bitcast i8* %884 to i32*
  %886 = getelementptr i32, i32* %847, i64 -1
  %887 = getelementptr i8, i8* %841, i64 -4
  %888 = bitcast i8* %887 to i32*
  %889 = getelementptr i32, i32* %847, i64 -1
  br label %890

890:                                              ; preds = %890, %882
  %891 = phi i64 [ 0, %882 ], [ %925, %890 ]
  %892 = phi i64 [ %883, %882 ], [ %926, %890 ]
  %893 = sub i64 0, %891
  %894 = sub i64 0, %891
  %895 = getelementptr inbounds i32, i32* %885, i64 %893
  %896 = getelementptr inbounds i32, i32* %886, i64 %894
  %897 = getelementptr inbounds i32, i32* %896, i64 -3
  %898 = bitcast i32* %897 to <4 x i32>*
  %899 = load <4 x i32>, <4 x i32>* %898, align 4, !alias.scope !45
  %900 = getelementptr inbounds i32, i32* %896, i64 -4
  %901 = getelementptr inbounds i32, i32* %900, i64 -3
  %902 = bitcast i32* %901 to <4 x i32>*
  %903 = load <4 x i32>, <4 x i32>* %902, align 4, !alias.scope !45
  %904 = getelementptr inbounds i32, i32* %895, i64 -3
  %905 = bitcast i32* %904 to <4 x i32>*
  store <4 x i32> %899, <4 x i32>* %905, align 4, !alias.scope !48, !noalias !45
  %906 = getelementptr inbounds i32, i32* %895, i64 -4
  %907 = getelementptr inbounds i32, i32* %906, i64 -3
  %908 = bitcast i32* %907 to <4 x i32>*
  store <4 x i32> %903, <4 x i32>* %908, align 4, !alias.scope !48, !noalias !45
  %909 = sub nuw nsw i64 -8, %891
  %910 = sub nuw nsw i64 -8, %891
  %911 = getelementptr inbounds i32, i32* %888, i64 %909
  %912 = getelementptr inbounds i32, i32* %889, i64 %910
  %913 = getelementptr inbounds i32, i32* %912, i64 -3
  %914 = bitcast i32* %913 to <4 x i32>*
  %915 = load <4 x i32>, <4 x i32>* %914, align 4, !alias.scope !45
  %916 = getelementptr inbounds i32, i32* %912, i64 -4
  %917 = getelementptr inbounds i32, i32* %916, i64 -3
  %918 = bitcast i32* %917 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 4, !alias.scope !45
  %920 = getelementptr inbounds i32, i32* %911, i64 -3
  %921 = bitcast i32* %920 to <4 x i32>*
  store <4 x i32> %915, <4 x i32>* %921, align 4, !alias.scope !48, !noalias !45
  %922 = getelementptr inbounds i32, i32* %911, i64 -4
  %923 = getelementptr inbounds i32, i32* %922, i64 -3
  %924 = bitcast i32* %923 to <4 x i32>*
  store <4 x i32> %919, <4 x i32>* %924, align 4, !alias.scope !48, !noalias !45
  %925 = add i64 %891, 16
  %926 = add i64 %892, -2
  %927 = icmp eq i64 %926, 0
  br i1 %927, label %928, label %890, !llvm.loop !50

928:                                              ; preds = %890
  %929 = sub nuw nsw i64 -16, %891
  br label %930

930:                                              ; preds = %928, %871
  %931 = phi i64 [ 0, %871 ], [ %929, %928 ]
  %932 = icmp eq i64 %880, 0
  br i1 %932, label %951, label %933

933:                                              ; preds = %930
  %934 = getelementptr i8, i8* %841, i64 -4
  %935 = bitcast i8* %934 to i32*
  %936 = getelementptr i32, i32* %847, i64 -1
  %937 = getelementptr inbounds i32, i32* %935, i64 %931
  %938 = getelementptr inbounds i32, i32* %936, i64 %931
  %939 = getelementptr inbounds i32, i32* %938, i64 -3
  %940 = bitcast i32* %939 to <4 x i32>*
  %941 = load <4 x i32>, <4 x i32>* %940, align 4, !alias.scope !45
  %942 = getelementptr inbounds i32, i32* %938, i64 -4
  %943 = getelementptr inbounds i32, i32* %942, i64 -3
  %944 = bitcast i32* %943 to <4 x i32>*
  %945 = load <4 x i32>, <4 x i32>* %944, align 4, !alias.scope !45
  %946 = getelementptr inbounds i32, i32* %937, i64 -3
  %947 = bitcast i32* %946 to <4 x i32>*
  store <4 x i32> %941, <4 x i32>* %947, align 4, !alias.scope !48, !noalias !45
  %948 = getelementptr inbounds i32, i32* %937, i64 -4
  %949 = getelementptr inbounds i32, i32* %948, i64 -3
  %950 = bitcast i32* %949 to <4 x i32>*
  store <4 x i32> %945, <4 x i32>* %950, align 4, !alias.scope !48, !noalias !45
  br label %951

951:                                              ; preds = %930, %933
  %952 = icmp eq i64 %855, %872
  br i1 %952, label %1005, label %953

953:                                              ; preds = %951, %857, %850
  %954 = phi i32* [ %842, %857 ], [ %842, %850 ], [ %874, %951 ]
  %955 = phi i32* [ %847, %857 ], [ %847, %850 ], [ %876, %951 ]
  %956 = getelementptr i32, i32* %955, i64 -1
  %957 = ptrtoint i32* %956 to i64
  %958 = sub i64 %957, %846
  %959 = lshr i64 %958, 2
  %960 = add nuw nsw i64 %959, 1
  %961 = and i64 %960, 7
  %962 = icmp eq i64 %961, 0
  br i1 %962, label %972, label %963

963:                                              ; preds = %953, %963
  %964 = phi i32* [ %967, %963 ], [ %954, %953 ]
  %965 = phi i32* [ %968, %963 ], [ %955, %953 ]
  %966 = phi i64 [ %970, %963 ], [ %961, %953 ]
  %967 = getelementptr inbounds i32, i32* %964, i64 -1
  %968 = getelementptr inbounds i32, i32* %965, i64 -1
  %969 = load i32, i32* %968, align 4
  store i32 %969, i32* %967, align 4
  %970 = add i64 %966, -1
  %971 = icmp eq i64 %970, 0
  br i1 %971, label %972, label %963, !llvm.loop !51

972:                                              ; preds = %963, %953
  %973 = phi i32* [ undef, %953 ], [ %967, %963 ]
  %974 = phi i32* [ %954, %953 ], [ %967, %963 ]
  %975 = phi i32* [ %955, %953 ], [ %968, %963 ]
  %976 = icmp ult i64 %958, 28
  br i1 %976, label %1005, label %977

977:                                              ; preds = %972, %977
  %978 = phi i32* [ %1001, %977 ], [ %974, %972 ]
  %979 = phi i32* [ %1002, %977 ], [ %975, %972 ]
  %980 = getelementptr inbounds i32, i32* %978, i64 -1
  %981 = getelementptr inbounds i32, i32* %979, i64 -1
  %982 = load i32, i32* %981, align 4
  store i32 %982, i32* %980, align 4
  %983 = getelementptr inbounds i32, i32* %978, i64 -2
  %984 = getelementptr inbounds i32, i32* %979, i64 -2
  %985 = load i32, i32* %984, align 4
  store i32 %985, i32* %983, align 4
  %986 = getelementptr inbounds i32, i32* %978, i64 -3
  %987 = getelementptr inbounds i32, i32* %979, i64 -3
  %988 = load i32, i32* %987, align 4
  store i32 %988, i32* %986, align 4
  %989 = getelementptr inbounds i32, i32* %978, i64 -4
  %990 = getelementptr inbounds i32, i32* %979, i64 -4
  %991 = load i32, i32* %990, align 4
  store i32 %991, i32* %989, align 4
  %992 = getelementptr inbounds i32, i32* %978, i64 -5
  %993 = getelementptr inbounds i32, i32* %979, i64 -5
  %994 = load i32, i32* %993, align 4
  store i32 %994, i32* %992, align 4
  %995 = getelementptr inbounds i32, i32* %978, i64 -6
  %996 = getelementptr inbounds i32, i32* %979, i64 -6
  %997 = load i32, i32* %996, align 4
  store i32 %997, i32* %995, align 4
  %998 = getelementptr inbounds i32, i32* %978, i64 -7
  %999 = getelementptr inbounds i32, i32* %979, i64 -7
  %1000 = load i32, i32* %999, align 4
  store i32 %1000, i32* %998, align 4
  %1001 = getelementptr inbounds i32, i32* %978, i64 -8
  %1002 = getelementptr inbounds i32, i32* %979, i64 -8
  %1003 = load i32, i32* %1002, align 4
  store i32 %1003, i32* %1001, align 4
  %1004 = icmp eq i32* %1002, %845
  br i1 %1004, label %1005, label %977, !llvm.loop !52

1005:                                             ; preds = %972, %977, %951, %815
  %1006 = phi i32* [ %842, %815 ], [ %874, %951 ], [ %973, %972 ], [ %1001, %977 ]
  %1007 = ptrtoint i32* %1006 to i64
  store i64 %1007, i64* %838, align 8
  store i64 %844, i64* %837, align 8
  store i64 %844, i64* %839, align 8
  %1008 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1009 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1008, i64 248) #7
  %1010 = bitcast i8* %1009 to %"class.sh::TIntermSwizzle"*
  %1011 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %819) #7
  %1012 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1011, i64 0, i32 0
  call void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"* %1010, %"class.sh::TIntermTyped"* %1012, %"class.sh::TVector.36"* nonnull dereferenceable(24) %14) #7
  %1013 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1014 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1013, i64 240) #7
  %1015 = bitcast i8* %1014 to %"class.sh::TIntermBinary"*
  %1016 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %604, align 8
  %1017 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %1016, i64 23
  %1018 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %1017, align 8
  %1019 = call %"class.sh::TIntermTyped"* %1018(%"class.sh::TIntermTyped"* %593) #7
  %1020 = bitcast i8* %1009 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1015, i8 zeroext -118, %"class.sh::TIntermTyped"* %1019, %"class.sh::TIntermTyped"* %1020) #7
  %1021 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #7
  %1022 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1021, i64 240) #7
  %1023 = bitcast i8* %1022 to %"class.sh::TIntermBinary"*
  %1024 = bitcast i8* %824 to %"class.sh::TIntermTyped"*
  %1025 = bitcast i8* %1014 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1023, i8 zeroext 30, %"class.sh::TIntermTyped"* %1024, %"class.sh::TIntermTyped"* %1025) #7
  %1026 = bitcast i8* %1022 to %"class.sh::TIntermTyped"*
  %1027 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %819) #7
  %1028 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1027, i64 0, i32 0
  %1029 = call %"class.sh::TIntermBinary"* @_ZN2sh13TIntermBinary11CreateCommaEPNS_12TIntermTypedES2_i(%"class.sh::TIntermTyped"* %1026, %"class.sh::TIntermTyped"* %1028, i32 300) #7
  %1030 = bitcast %"class.sh::TIntermDeclaration"** %13 to %"class.sh::TIntermNode"**
  %1031 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1030, align 8
  call void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %562, %"class.sh::TIntermNode"* %1031) #7
  %1032 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1029, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %562, %"class.sh::TIntermNode"* %1032, i32 1) #7
  %1033 = load i32*, i32** %834, align 8
  %1034 = icmp eq i32* %1033, null
  br i1 %1034, label %1037, label %1035

1035:                                             ; preds = %1005
  %1036 = ptrtoint i32* %1033 to i64
  store i64 %1036, i64* %837, align 8
  br label %1037

1037:                                             ; preds = %1005, %1035
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %833) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %816) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %596) #7
  call void @llvm.lifetime.end.p0i8(i64 184, i8* nonnull %592)
  %1038 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %567, align 8
  %1039 = icmp eq %"class.std::__1::__tree_node"* %1038, null
  br i1 %1039, label %1068, label %1040

1040:                                             ; preds = %1037
  %1041 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  br label %1042

1042:                                             ; preds = %1064, %1040
  %1043 = phi %"class.std::__1::__tree_node"* [ %1067, %1064 ], [ %1038, %1040 ]
  %1044 = phi %"class.std::__1::__tree_node_base"** [ %1066, %1064 ], [ %1041, %1040 ]
  %1045 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1043, i64 0, i32 1
  %1046 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1045, align 8
  %1047 = icmp ult %"class.sh::TIntermBlock"* %563, %1046
  br i1 %1047, label %1048, label %1054

1048:                                             ; preds = %1042
  %1049 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1043, i64 0, i32 0, i32 0, i32 0
  %1050 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1049, align 8
  %1051 = icmp eq %"class.std::__1::__tree_node_base"* %1050, null
  br i1 %1051, label %1052, label %1064

1052:                                             ; preds = %1048
  %1053 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1043, i64 0, i32 0, i32 0
  br label %1070

1054:                                             ; preds = %1042
  %1055 = icmp ult %"class.sh::TIntermBlock"* %1046, %563
  br i1 %1055, label %1056, label %1062

1056:                                             ; preds = %1054
  %1057 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1043, i64 0, i32 0, i32 1
  %1058 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1057, align 8
  %1059 = icmp eq %"class.std::__1::__tree_node_base"* %1058, null
  br i1 %1059, label %1060, label %1064

1060:                                             ; preds = %1056
  %1061 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1043, i64 0, i32 0, i32 0
  br label %1070

1062:                                             ; preds = %1054
  %1063 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1043, i64 0, i32 0, i32 0
  br label %1070

1064:                                             ; preds = %1056, %1048
  %1065 = phi %"class.std::__1::__tree_node_base"* [ %1050, %1048 ], [ %1058, %1056 ]
  %1066 = phi %"class.std::__1::__tree_node_base"** [ %1049, %1048 ], [ %1057, %1056 ]
  %1067 = bitcast %"class.std::__1::__tree_node_base"* %1065 to %"class.std::__1::__tree_node"*
  br label %1042

1068:                                             ; preds = %1037
  %1069 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %566, i64 0, i32 0
  br label %1070

1070:                                             ; preds = %1068, %1062, %1060, %1052
  %1071 = phi %"class.std::__1::__tree_end_node"* [ %566, %1068 ], [ %1053, %1052 ], [ %1061, %1060 ], [ %1063, %1062 ]
  %1072 = phi %"class.std::__1::__tree_node_base"** [ %1069, %1068 ], [ %1049, %1052 ], [ %1057, %1060 ], [ %1044, %1062 ]
  %1073 = bitcast %"class.std::__1::__tree_node_base"** %1072 to %"class.std::__1::__tree_node"**
  %1074 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1073, align 8
  %1075 = icmp eq %"class.std::__1::__tree_node"* %1074, null
  br i1 %1075, label %1076, label %1100

1076:                                             ; preds = %1070
  %1077 = call i8* @_Znwm(i64 40) #8, !noalias !53
  %1078 = getelementptr inbounds i8, i8* %1077, i64 32
  %1079 = bitcast i8* %1078 to i64*
  store i64 %564, i64* %1079, align 8, !noalias !53
  %1080 = bitcast i8* %1077 to %"class.std::__1::__tree_node_base"*
  %1081 = getelementptr inbounds i8, i8* %1077, i64 16
  %1082 = bitcast i8* %1081 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1077, i8 0, i64 16, i1 false) #7
  store %"class.std::__1::__tree_end_node"* %1071, %"class.std::__1::__tree_end_node"** %1082, align 8
  %1083 = bitcast %"class.std::__1::__tree_node_base"** %1072 to i8**
  store i8* %1077, i8** %1083, align 8
  %1084 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %565, i64 0, i32 0, i32 0
  %1085 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %1084, align 8
  %1086 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1085, i64 0, i32 0
  %1087 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1086, align 8
  %1088 = icmp eq %"class.std::__1::__tree_node_base"* %1087, null
  br i1 %1088, label %1093, label %1089

1089:                                             ; preds = %1076
  %1090 = ptrtoint %"class.std::__1::__tree_node_base"* %1087 to i64
  %1091 = bitcast %"class.std::__1::set"* %565 to i64*
  store i64 %1090, i64* %1091, align 8
  %1092 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1072, align 8
  br label %1093

1093:                                             ; preds = %1089, %1076
  %1094 = phi %"class.std::__1::__tree_node_base"* [ %1080, %1076 ], [ %1092, %1089 ]
  %1095 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %1096 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1095, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %1096, %"class.std::__1::__tree_node_base"* %1094) #7
  %1097 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %1098 = load i64, i64* %1097, align 8
  %1099 = add i64 %1098, 1
  store i64 %1099, i64* %1097, align 8
  br label %1100

1100:                                             ; preds = %1070, %1093
  %1101 = getelementptr inbounds %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser", %"class.sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser"* %0, i64 0, i32 1
  store i8 1, i8* %1101, align 8
  br label %1102

1102:                                             ; preds = %586, %44, %66, %70, %78, %74, %553, %94, %1100, %86, %543, %3, %17, %31
  %1103 = phi i1 [ true, %31 ], [ true, %17 ], [ true, %3 ], [ true, %78 ], [ true, %74 ], [ false, %543 ], [ true, %86 ], [ false, %1100 ], [ true, %94 ], [ true, %553 ], [ true, %70 ], [ true, %66 ], [ true, %44 ], [ true, %586 ]
  ret i1 %1103
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(184), %"class.sh::TVector"*) local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh15TIntermOperator13isConstructorEv(%"class.sh::TIntermOperator"*) local_unnamed_addr #2

declare %"class.sh::TIntermBlock"* @_ZNK2sh16TIntermTraverser14getParentBlockEv(%"class.sh::TIntermTraverser"*) local_unnamed_addr #2

declare void @_ZN2sh5TType14setPrimarySizeEh(%"class.sh::TType"*, i8 zeroext) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*, i32, %"class.sh::TIntermDeclaration"**) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #2

declare void @_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.36"* dereferenceable(24)) unnamed_addr #2

declare %"class.sh::TIntermBinary"* @_ZN2sh13TIntermBinary11CreateCommaEPNS_12TIntermTypedES2_i(%"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i32) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #7
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #7
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !9}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !9}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !9}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJRKS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_: argument 0"}
!55 = distinct !{!55, !"_ZNSt3__16__treeIPKN2sh12TIntermBlockENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeIJRKS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISG_EEEEEEDpOT_"}
