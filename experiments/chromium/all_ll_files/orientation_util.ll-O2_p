; ModuleID = '../../services/device/generic_sensor/orientation_util.cc'
source_filename = "../../services/device/generic_sensor/orientation_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double* }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device47ComputeOrientationEulerAnglesFromRotationMatrixERKNSt3__16vectorIdNS0_9allocatorIdEEEEPdS7_S7_(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), double* nocapture, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %6 = load double*, double** %5, align 8
  %7 = getelementptr inbounds double, double* %6, i64 8
  %8 = load double, double* %7, align 8
  %9 = tail call double @llvm.fabs.f64(double %8) #3
  %10 = fcmp olt double %9, 1.000000e-08
  br i1 %10, label %11, label %51

11:                                               ; preds = %4
  %12 = getelementptr inbounds double, double* %6, i64 6
  %13 = load double, double* %12, align 8
  %14 = tail call double @llvm.fabs.f64(double %13) #3
  %15 = fcmp olt double %14, 1.000000e-08
  br i1 %15, label %16, label %26

16:                                               ; preds = %11
  %17 = getelementptr inbounds double, double* %6, i64 3
  %18 = load double, double* %17, align 8
  %19 = load double, double* %6, align 8
  %20 = tail call double @atan2(double %18, double %19) #3
  %21 = load double*, double** %5, align 8
  %22 = getelementptr inbounds double, double* %21, i64 7
  %23 = load double, double* %22, align 8
  %24 = fcmp ogt double %23, 0.000000e+00
  %25 = select i1 %24, double 0x3FF921FB54442D18, double 0xBFF921FB54442D18
  br label %90

26:                                               ; preds = %11
  %27 = fcmp ogt double %13, 0.000000e+00
  %28 = getelementptr inbounds double, double* %6, i64 1
  %29 = load double, double* %28, align 8
  br i1 %27, label %30, label %39

30:                                               ; preds = %26
  %31 = fsub double -0.000000e+00, %29
  %32 = getelementptr inbounds double, double* %6, i64 4
  %33 = load double, double* %32, align 8
  %34 = tail call double @atan2(double %31, double %33) #3
  %35 = load double*, double** %5, align 8
  %36 = getelementptr inbounds double, double* %35, i64 7
  %37 = load double, double* %36, align 8
  %38 = tail call double @asin(double %37) #3
  br label %90

39:                                               ; preds = %26
  %40 = getelementptr inbounds double, double* %6, i64 4
  %41 = load double, double* %40, align 8
  %42 = fsub double -0.000000e+00, %41
  %43 = tail call double @atan2(double %29, double %42) #3
  %44 = load double*, double** %5, align 8
  %45 = getelementptr inbounds double, double* %44, i64 7
  %46 = load double, double* %45, align 8
  %47 = tail call double @asin(double %46) #3
  %48 = fcmp ole double %47, 0.000000e+00
  %49 = select i1 %48, double 0xC00921FB54442D18, double 0x400921FB54442D18
  %50 = fsub double %49, %47
  br label %90

51:                                               ; preds = %4
  %52 = fcmp ogt double %8, 0.000000e+00
  %53 = getelementptr inbounds double, double* %6, i64 1
  %54 = load double, double* %53, align 8
  br i1 %52, label %55, label %71

55:                                               ; preds = %51
  %56 = fsub double -0.000000e+00, %54
  %57 = getelementptr inbounds double, double* %6, i64 4
  %58 = load double, double* %57, align 8
  %59 = tail call double @atan2(double %56, double %58) #3
  %60 = load double*, double** %5, align 8
  %61 = getelementptr inbounds double, double* %60, i64 7
  %62 = load double, double* %61, align 8
  %63 = tail call double @asin(double %62) #3
  %64 = load double*, double** %5, align 8
  %65 = getelementptr inbounds double, double* %64, i64 6
  %66 = load double, double* %65, align 8
  %67 = fsub double -0.000000e+00, %66
  %68 = getelementptr inbounds double, double* %64, i64 8
  %69 = load double, double* %68, align 8
  %70 = tail call double @atan2(double %67, double %69) #3
  br label %90

71:                                               ; preds = %51
  %72 = getelementptr inbounds double, double* %6, i64 4
  %73 = load double, double* %72, align 8
  %74 = fsub double -0.000000e+00, %73
  %75 = tail call double @atan2(double %54, double %74) #3
  %76 = load double*, double** %5, align 8
  %77 = getelementptr inbounds double, double* %76, i64 7
  %78 = load double, double* %77, align 8
  %79 = tail call double @asin(double %78) #3
  %80 = fcmp ole double %79, 0.000000e+00
  %81 = select i1 %80, double 0xC00921FB54442D18, double 0x400921FB54442D18
  %82 = fsub double %81, %79
  %83 = load double*, double** %5, align 8
  %84 = getelementptr inbounds double, double* %83, i64 6
  %85 = load double, double* %84, align 8
  %86 = getelementptr inbounds double, double* %83, i64 8
  %87 = load double, double* %86, align 8
  %88 = fsub double -0.000000e+00, %87
  %89 = tail call double @atan2(double %85, double %88) #3
  br label %90

90:                                               ; preds = %71, %55, %39, %30, %16
  %91 = phi double [ %20, %16 ], [ %34, %30 ], [ %43, %39 ], [ %59, %55 ], [ %75, %71 ]
  %92 = phi double [ %25, %16 ], [ %38, %30 ], [ %50, %39 ], [ %63, %55 ], [ %82, %71 ]
  %93 = phi double [ 0.000000e+00, %16 ], [ 0xBFF921FB54442D18, %30 ], [ 0xBFF921FB54442D18, %39 ], [ %70, %55 ], [ %89, %71 ]
  %94 = fcmp olt double %91, 0.000000e+00
  %95 = fadd double %91, 0x401921FB54442D18
  %96 = select i1 %94, double %95, double %91
  %97 = fmul double %96, 1.800000e+02
  %98 = fdiv double %97, 0x400921FB54442D18
  store double %98, double* %1, align 8
  %99 = fmul double %92, 1.800000e+02
  %100 = fdiv double %99, 0x400921FB54442D18
  store double %100, double* %2, align 8
  %101 = fmul double %93, 1.800000e+02
  %102 = fdiv double %101, 0x400921FB54442D18
  store double %102, double* %3, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @asin(double) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
