; ModuleID = '../../pdf/paint_ready_rect.cc'
source_filename = "../../pdf/paint_ready_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.chrome_pdf::PaintReadyRect" = type <{ %"class.gfx::Rect", %"class.chrome_pdf::Image", i8, [7 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.chrome_pdf::Image" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %class.SkBitmap }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.8 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.8 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque

@_ZN10chrome_pdf14PaintReadyRectC1ERKN3gfx4RectERKNS_5ImageEb = hidden unnamed_addr alias void (%"class.chrome_pdf::PaintReadyRect"*, %"class.gfx::Rect"*, %"class.chrome_pdf::Image"*, i1), void (%"class.chrome_pdf::PaintReadyRect"*, %"class.gfx::Rect"*, %"class.chrome_pdf::Image"*, i1)* @_ZN10chrome_pdf14PaintReadyRectC2ERKN3gfx4RectERKNS_5ImageEb
@_ZN10chrome_pdf14PaintReadyRectC1ERKS0_ = hidden unnamed_addr alias void (%"class.chrome_pdf::PaintReadyRect"*, %"class.chrome_pdf::PaintReadyRect"*), void (%"class.chrome_pdf::PaintReadyRect"*, %"class.chrome_pdf::PaintReadyRect"*)* @_ZN10chrome_pdf14PaintReadyRectC2ERKS0_
@_ZN10chrome_pdf14PaintReadyRectD1Ev = hidden unnamed_addr alias void (%"class.chrome_pdf::PaintReadyRect"*), void (%"class.chrome_pdf::PaintReadyRect"*)* @_ZN10chrome_pdf14PaintReadyRectD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10chrome_pdf14PaintReadyRectC2ERKN3gfx4RectERKNS_5ImageEb(%"class.chrome_pdf::PaintReadyRect"*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.chrome_pdf::Image"* dereferenceable(64), i1 zeroext) unnamed_addr #0 align 2 {
  %5 = zext i1 %3 to i8
  %6 = bitcast %"class.chrome_pdf::PaintReadyRect"* %0 to i8*
  %7 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 4 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 1
  tail call void @_ZN10chrome_pdf5ImageC1ERKS0_(%"class.chrome_pdf::Image"* %8, %"class.chrome_pdf::Image"* dereferenceable(64) %2) #4
  %9 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 2
  store i8 %5, i8* %9, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN10chrome_pdf5ImageC1ERKS0_(%"class.chrome_pdf::Image"*, %"class.chrome_pdf::Image"* dereferenceable(64)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10chrome_pdf14PaintReadyRectC2ERKS0_(%"class.chrome_pdf::PaintReadyRect"*, %"class.chrome_pdf::PaintReadyRect"* dereferenceable(88)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.chrome_pdf::PaintReadyRect"* %0 to i8*
  %4 = bitcast %"class.chrome_pdf::PaintReadyRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %1, i64 0, i32 1
  tail call void @_ZN10chrome_pdf5ImageC1ERKS0_(%"class.chrome_pdf::Image"* %5, %"class.chrome_pdf::Image"* dereferenceable(64) %6) #4
  %7 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %1, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !2
  store i8 %9, i8* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(88) %"class.chrome_pdf::PaintReadyRect"* @_ZN10chrome_pdf14PaintReadyRectaSERKS0_(%"class.chrome_pdf::PaintReadyRect"* returned, %"class.chrome_pdf::PaintReadyRect"* dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.chrome_pdf::PaintReadyRect"* %0 to i8*
  %4 = bitcast %"class.chrome_pdf::PaintReadyRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %1, i64 0, i32 1
  %7 = tail call dereferenceable(64) %"class.chrome_pdf::Image"* @_ZN10chrome_pdf5ImageaSERKS0_(%"class.chrome_pdf::Image"* %5, %"class.chrome_pdf::Image"* dereferenceable(64) %6) #4
  %8 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %1, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 2
  store i8 %9, i8* %10, align 8
  ret %"class.chrome_pdf::PaintReadyRect"* %0
}

declare dereferenceable(64) %"class.chrome_pdf::Image"* @_ZN10chrome_pdf5ImageaSERKS0_(%"class.chrome_pdf::Image"*, %"class.chrome_pdf::Image"* dereferenceable(64)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10chrome_pdf14PaintReadyRectD2Ev(%"class.chrome_pdf::PaintReadyRect"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.chrome_pdf::PaintReadyRect", %"class.chrome_pdf::PaintReadyRect"* %0, i64 0, i32 1
  tail call void @_ZN10chrome_pdf5ImageD1Ev(%"class.chrome_pdf::Image"* %2) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN10chrome_pdf5ImageD1Ev(%"class.chrome_pdf::Image"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
