; ModuleID = '../../third_party/ots/src/src/loca.cc'
source_filename = "../../third_party/ots/src/src/loca.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeLOCA" = type { %"class.ots::Table.base", %"class.std::__1::vector" }
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i32* }
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.ots::OpenTypeHEAD" = type <{ %"class.ots::Table.base", [3 x i8], i32, i16, i16, [4 x i8], i64, i64, i16, i16, i16, i16, i16, i16, i16, [2 x i8] }>
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3ots12OpenTypeLOCAD2Ev = comdat any

$_ZN3ots12OpenTypeLOCAD0Ev = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [41 x i8] c"Required maxp or head tables are missing\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Failed to read offset for glyph %d\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"Out of order offset %d < %d for glyph %d\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Required head table is missing\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"Failed to write glyph offset for glyph %d\00", align 1
@_ZTVN3ots12OpenTypeLOCAE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::OpenTypeLOCA"*)* @_ZN3ots12OpenTypeLOCAD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeLOCA"*)* @_ZN3ots12OpenTypeLOCAD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeLOCA"*, i8*, i64)* @_ZN3ots12OpenTypeLOCA5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeLOCA"*, %"class.ots::OTSStream"*)* @_ZN3ots12OpenTypeLOCA9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::Table"*)* @_ZN3ots5Table15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeLOCA5ParseEPKhm(%"class.ots::OpenTypeLOCA"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.ots::OpenTypeLOCA"* %0 to %"class.ots::Table"*
  %5 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 0, i32 3
  %6 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %7 = tail call %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"* %6, i32 1835104368) #9
  %8 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %9 = tail call %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"* %8, i32 1751474532) #9
  %10 = icmp ne %"class.ots::Table"* %7, null
  %11 = icmp ne %"class.ots::Table"* %9, null
  %12 = and i1 %10, %11
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)) #9
  br label %91

15:                                               ; preds = %3
  %16 = bitcast %"class.ots::Table"* %9 to %"class.ots::OpenTypeHEAD"*
  %17 = getelementptr inbounds %"class.ots::Table", %"class.ots::Table"* %7, i64 0, i32 5, i64 1
  %18 = bitcast i8* %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i64
  %21 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1
  %22 = add nuw nsw i64 %20, 1
  %23 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = bitcast i32** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector"* %21 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = ashr exact i64 %28, 2
  %30 = icmp ugt i64 %29, %20
  %31 = inttoptr i64 %27 to i32*
  br i1 %30, label %34, label %32

32:                                               ; preds = %15
  %33 = sub nsw i64 %22, %29
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* %21, i64 %33) #9
  br label %38

34:                                               ; preds = %15
  %35 = icmp ult i64 %22, %29
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = getelementptr inbounds i32, i32* %31, i64 %22
  store i32* %37, i32** %23, align 8
  br label %38

38:                                               ; preds = %32, %34, %36
  %39 = getelementptr inbounds %"class.ots::OpenTypeHEAD", %"class.ots::OpenTypeHEAD"* %16, i64 0, i32 14
  %40 = load i16, i16* %39, align 4
  %41 = icmp eq i16 %40, 0
  %42 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  br i1 %41, label %43, label %68

43:                                               ; preds = %38, %62
  %44 = phi i64 [ %66, %62 ], [ 0, %38 ]
  %45 = phi i32 [ %57, %62 ], [ 0, %38 ]
  %46 = phi i64 [ %47, %62 ], [ 0, %38 ]
  %47 = add nuw nsw i64 %46, 2
  %48 = icmp ugt i64 %47, %2
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = trunc i64 %44 to i32
  %51 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i32 %50) #9
  br label %91

52:                                               ; preds = %43
  %53 = getelementptr inbounds i8, i8* %1, i64 %46
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 1
  %56 = tail call i16 @llvm.bswap.i16(i16 %55) #9
  %57 = zext i16 %56 to i32
  %58 = icmp ugt i32 %45, %57
  br i1 %58, label %59, label %62

59:                                               ; preds = %52
  %60 = trunc i64 %44 to i32
  %61 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i32 %57, i32 %45, i32 %60) #9
  br label %91

62:                                               ; preds = %52
  %63 = shl nuw nsw i32 %57, 1
  %64 = load i32*, i32** %42, align 8
  %65 = getelementptr inbounds i32, i32* %64, i64 %44
  store i32 %63, i32* %65, align 4
  %66 = add nuw nsw i64 %44, 1
  %67 = icmp eq i64 %66, %22
  br i1 %67, label %91, label %43

68:                                               ; preds = %38, %86
  %69 = phi i64 [ %89, %86 ], [ 0, %38 ]
  %70 = phi i32 [ %81, %86 ], [ 0, %38 ]
  %71 = phi i64 [ %72, %86 ], [ 0, %38 ]
  %72 = add nuw nsw i64 %71, 4
  %73 = icmp ugt i64 %72, %2
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = trunc i64 %69 to i32
  %76 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i32 %75) #9
  br label %91

77:                                               ; preds = %68
  %78 = getelementptr inbounds i8, i8* %1, i64 %71
  %79 = bitcast i8* %78 to i32*
  %80 = load i32, i32* %79, align 1
  %81 = tail call i32 @llvm.bswap.i32(i32 %80) #9
  %82 = icmp ult i32 %81, %70
  br i1 %82, label %83, label %86

83:                                               ; preds = %77
  %84 = trunc i64 %69 to i32
  %85 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0), i32 %81, i32 %70, i32 %84) #9
  br label %91

86:                                               ; preds = %77
  %87 = load i32*, i32** %42, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 %69
  store i32 %81, i32* %88, align 4
  %89 = add nuw nsw i64 %69, 1
  %90 = icmp eq i64 %89, %22
  br i1 %90, label %91, label %68

91:                                               ; preds = %86, %62, %74, %83, %49, %59, %13
  %92 = phi i1 [ %14, %13 ], [ %51, %49 ], [ %61, %59 ], [ %76, %74 ], [ %85, %83 ], [ true, %62 ], [ true, %86 ]
  ret i1 %92
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeLOCA9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeLOCA"*, %"class.ots::OTSStream"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast %"class.ots::OpenTypeLOCA"* %0 to %"class.ots::Table"*
  %10 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 0, i32 3
  %11 = load %"struct.ots::Font"*, %"struct.ots::Font"** %10, align 8
  %12 = tail call %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"* %11, i32 1751474532) #9
  %13 = icmp eq %"class.ots::Table"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %9, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0)) #9
  br label %153

16:                                               ; preds = %2
  %17 = bitcast %"class.ots::Table"* %12 to %"class.ots::OpenTypeHEAD"*
  %18 = getelementptr inbounds %"class.ots::OpenTypeHEAD", %"class.ots::OpenTypeHEAD"* %17, i64 0, i32 14
  %19 = load i16, i16* %18, align 4
  %20 = icmp eq i16 %19, 0
  %21 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1
  %22 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp ne i64 %24, %26
  %28 = inttoptr i64 %26 to i32*
  br i1 %20, label %37, label %29

29:                                               ; preds = %16
  br i1 %27, label %30, label %153

30:                                               ; preds = %29
  %31 = bitcast i32* %8 to i8*
  %32 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %33 = bitcast i32* %6 to i8*
  %34 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %35 = bitcast i32* %7 to i8*
  %36 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  br label %98

37:                                               ; preds = %16
  br i1 %27, label %38, label %153

38:                                               ; preds = %37
  %39 = bitcast i16* %5 to i8*
  %40 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %41 = bitcast i32* %3 to i8*
  %42 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %43 = bitcast i32* %4 to i8*
  %44 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  br label %45

45:                                               ; preds = %38, %87
  %46 = phi i32* [ %28, %38 ], [ %95, %87 ]
  %47 = phi i64 [ 0, %38 ], [ %89, %87 ]
  %48 = phi i32 [ 0, %38 ], [ %88, %87 ]
  %49 = getelementptr inbounds i32, i32* %46, i64 %47
  %50 = load i32, i32* %49, align 4
  %51 = icmp ult i32 %50, 131072
  br i1 %51, label %52, label %96

52:                                               ; preds = %45
  %53 = lshr i32 %50, 1
  %54 = trunc i32 %53 to i16
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %39)
  %55 = call i16 @llvm.bswap.i16(i16 %54) #9
  store i16 %55, i16* %5, align 2
  %56 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %40, align 8
  %57 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %56, i64 4
  %58 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %57, align 8
  %59 = call i64 %58(%"class.ots::OTSStream"* %1) #9
  %60 = and i64 %59, 3
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %52
  %63 = load i32, i32* %42, align 8
  br label %74

64:                                               ; preds = %52
  %65 = sub nuw nsw i64 4, %60
  %66 = icmp ult i64 %65, 2
  %67 = select i1 %66, i64 %65, i64 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %41) #9
  store i32 0, i32* %3, align 4
  %68 = getelementptr inbounds i8, i8* %41, i64 %60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* nonnull align 2 %39, i64 %67, i1 false) #9
  %69 = load i32, i32* %3, align 4
  %70 = call i32 @llvm.bswap.i32(i32 %69) #9
  %71 = load i32, i32* %42, align 8
  %72 = add i32 %71, %70
  store i32 %72, i32* %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %41) #9
  %73 = icmp eq i64 %60, 3
  br i1 %73, label %74, label %82

74:                                               ; preds = %64, %62
  %75 = phi i32 [ %72, %64 ], [ %63, %62 ]
  %76 = phi i64 [ %67, %64 ], [ 0, %62 ]
  %77 = phi i64 [ 1, %64 ], [ 2, %62 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43)
  store i32 0, i32* %4, align 4
  %78 = getelementptr inbounds i8, i8* %39, i64 %76
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 1 %78, i64 %77, i1 false) #9
  %79 = load i32, i32* %4, align 4
  %80 = call i32 @llvm.bswap.i32(i32 %79) #9
  %81 = add i32 %80, %75
  store i32 %81, i32* %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43)
  br label %82

82:                                               ; preds = %64, %74
  %83 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %44, align 8
  %84 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %83, i64 2
  %85 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %84, align 8
  %86 = call zeroext i1 %85(%"class.ots::OTSStream"* %1, i8* nonnull %39, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %39)
  br i1 %86, label %87, label %96

87:                                               ; preds = %82
  %88 = add i32 %48, 1
  %89 = zext i32 %88 to i64
  %90 = load i64, i64* %23, align 8
  %91 = load i64, i64* %25, align 8
  %92 = sub i64 %90, %91
  %93 = ashr exact i64 %92, 2
  %94 = icmp ugt i64 %93, %89
  %95 = inttoptr i64 %91 to i32*
  br i1 %94, label %45, label %153

96:                                               ; preds = %45, %82
  %97 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %9, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i32 %48) #9
  br label %153

98:                                               ; preds = %30, %142
  %99 = phi i32* [ %28, %30 ], [ %150, %142 ]
  %100 = phi i64 [ 0, %30 ], [ %144, %142 ]
  %101 = phi i32 [ 0, %30 ], [ %143, %142 ]
  %102 = getelementptr inbounds i32, i32* %99, i64 %100
  %103 = load i32, i32* %102, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31)
  %104 = call i32 @llvm.bswap.i32(i32 %103) #9
  store i32 %104, i32* %8, align 4
  %105 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %32, align 8
  %106 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %105, i64 4
  %107 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %106, align 8
  %108 = call i64 %107(%"class.ots::OTSStream"* %1) #9
  %109 = and i64 %108, 3
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %113

111:                                              ; preds = %98
  %112 = load i32, i32* %34, align 8
  br label %123

113:                                              ; preds = %98
  %114 = sub nuw nsw i64 4, %109
  %115 = icmp ult i64 %114, 4
  %116 = select i1 %115, i64 %114, i64 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #9
  store i32 0, i32* %6, align 4
  %117 = getelementptr inbounds i8, i8* %33, i64 %109
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* nonnull align 4 %31, i64 %116, i1 false) #9
  %118 = load i32, i32* %6, align 4
  %119 = call i32 @llvm.bswap.i32(i32 %118) #9
  %120 = load i32, i32* %34, align 8
  %121 = add i32 %120, %119
  store i32 %121, i32* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #9
  %122 = icmp eq i64 %116, 0
  br i1 %122, label %123, label %131

123:                                              ; preds = %113, %111
  %124 = phi i32 [ %121, %113 ], [ %112, %111 ]
  %125 = phi i64 [ %114, %113 ], [ 0, %111 ]
  %126 = getelementptr inbounds i8, i8* %31, i64 %125
  %127 = bitcast i8* %126 to i32*
  %128 = load i32, i32* %127, align 1
  %129 = call i32 @llvm.bswap.i32(i32 %128) #9
  %130 = add i32 %129, %124
  store i32 %130, i32* %34, align 8
  br label %137

131:                                              ; preds = %113
  %132 = sub nuw nsw i64 4, %116
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35)
  store i32 0, i32* %7, align 4
  %133 = getelementptr inbounds i8, i8* %31, i64 %114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %35, i8* align 1 %133, i64 %132, i1 false) #9
  %134 = load i32, i32* %7, align 4
  %135 = call i32 @llvm.bswap.i32(i32 %134) #9
  %136 = add i32 %135, %121
  store i32 %136, i32* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35)
  br label %137

137:                                              ; preds = %123, %131
  %138 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %36, align 8
  %139 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %138, i64 2
  %140 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %139, align 8
  %141 = call zeroext i1 %140(%"class.ots::OTSStream"* %1, i8* nonnull %31, i64 4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31)
  br i1 %141, label %142, label %151

142:                                              ; preds = %137
  %143 = add i32 %101, 1
  %144 = zext i32 %143 to i64
  %145 = load i64, i64* %23, align 8
  %146 = load i64, i64* %25, align 8
  %147 = sub i64 %145, %146
  %148 = ashr exact i64 %147, 2
  %149 = icmp ugt i64 %148, %144
  %150 = inttoptr i64 %146 to i32*
  br i1 %149, label %98, label %153

151:                                              ; preds = %137
  %152 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %9, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i32 %101) #9
  br label %153

153:                                              ; preds = %142, %87, %29, %37, %151, %96, %14
  %154 = phi i1 [ %97, %96 ], [ %152, %151 ], [ %15, %14 ], [ true, %37 ], [ true, %29 ], [ true, %87 ], [ true, %142 ]
  ret i1 %154
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeLOCAD2Ev(%"class.ots::OpenTypeLOCA"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeLOCAE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeLOCAD0Ev(%"class.ots::OpenTypeLOCA"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeLOCAE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.ots::OpenTypeLOCA", %"class.ots::OpenTypeLOCA"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.ots::OpenTypeLOCA"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
