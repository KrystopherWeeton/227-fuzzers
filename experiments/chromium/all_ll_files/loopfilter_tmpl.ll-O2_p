; ModuleID = '../../third_party/dav1d/libdav1d/src/loopfilter_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/loopfilter_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dLoopFilterDSPContext = type { [2 x [2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*]] }
%struct.Av1FilterLUT = type { [64 x i8], [64 x i8], [2 x i64] }

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_loop_filter_dsp_init_8bpc(%struct.Dav1dLoopFilterDSPContext*) local_unnamed_addr #0 {
  %2 = bitcast %struct.Dav1dLoopFilterDSPContext* %0 to <2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*>*
  store <2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*> <void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)* @loop_filter_h_sb128y_c, void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)* @loop_filter_v_sb128y_c>, <2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*>* %2, align 8
  %3 = getelementptr inbounds %struct.Dav1dLoopFilterDSPContext, %struct.Dav1dLoopFilterDSPContext* %0, i64 0, i32 0, i64 1, i64 0
  %4 = bitcast void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)** %3 to <2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*>*
  store <2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*> <void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)* @loop_filter_h_sb128uv_c, void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)* @loop_filter_v_sb128uv_c>, <2 x void (i8*, i64, i32*, [4 x i8]*, i64, %struct.Av1FilterLUT*, i32)*>* %4, align 8
  tail call void @dav1d_loop_filter_dsp_init_x86_8bpc(%struct.Dav1dLoopFilterDSPContext* %0) #4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @loop_filter_h_sb128y_c(i8*, i64, i32* nocapture readonly, [4 x i8]* nocapture readonly, i64, %struct.Av1FilterLUT* nocapture readonly, i32) #1 {
  %8 = load i32, i32* %2, align 4
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, %8
  %12 = getelementptr inbounds i32, i32* %2, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %11, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %7
  %17 = shl nsw i64 %1, 2
  br label %19

18:                                               ; preds = %55, %7
  ret void

19:                                               ; preds = %16, %55
  %20 = phi i32 [ 1, %16 ], [ %56, %55 ]
  %21 = phi i8* [ %0, %16 ], [ %57, %55 ]
  %22 = phi [4 x i8]* [ %3, %16 ], [ %58, %55 ]
  %23 = and i32 %20, %14
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %55, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds [4 x i8], [4 x i8]* %22, i64 0, i64 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = getelementptr inbounds [4 x i8], [4 x i8]* %22, i64 -1, i64 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %55, label %33

33:                                               ; preds = %25, %29
  %34 = phi i8 [ %31, %29 ], [ %27, %25 ]
  %35 = lshr i8 %34, 4
  %36 = zext i8 %35 to i32
  %37 = zext i8 %34 to i64
  %38 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 1, i64 %37
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = load i32, i32* %12, align 4
  %45 = and i32 %44, %20
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %33
  %48 = load i32, i32* %9, align 4
  %49 = and i32 %48, %20
  %50 = icmp ne i32 %49, 0
  %51 = zext i1 %50 to i32
  br label %52

52:                                               ; preds = %33, %47
  %53 = phi i32 [ %51, %47 ], [ 2, %33 ]
  %54 = shl i32 4, %53
  tail call fastcc void @loop_filter(i8* %21, i32 %40, i32 %43, i32 %36, i64 %1, i64 1, i32 %54)
  br label %55

55:                                               ; preds = %52, %29, %19
  %56 = shl i32 %20, 1
  %57 = getelementptr inbounds i8, i8* %21, i64 %17
  %58 = getelementptr inbounds [4 x i8], [4 x i8]* %22, i64 %4
  %59 = sub i32 0, %56
  %60 = and i32 %14, %59
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %18, label %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @loop_filter_v_sb128y_c(i8*, i64, i32* nocapture readonly, [4 x i8]* nocapture readonly, i64, %struct.Av1FilterLUT* nocapture readonly, i32) #1 {
  %8 = load i32, i32* %2, align 4
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, %8
  %12 = getelementptr inbounds i32, i32* %2, i64 2
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %11, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %7
  %17 = sub nsw i64 0, %4
  br label %19

18:                                               ; preds = %55, %7
  ret void

19:                                               ; preds = %16, %55
  %20 = phi i32 [ 1, %16 ], [ %56, %55 ]
  %21 = phi i8* [ %0, %16 ], [ %57, %55 ]
  %22 = phi [4 x i8]* [ %3, %16 ], [ %58, %55 ]
  %23 = and i32 %20, %14
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %55, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds [4 x i8], [4 x i8]* %22, i64 0, i64 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = getelementptr inbounds [4 x i8], [4 x i8]* %22, i64 %17, i64 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %55, label %33

33:                                               ; preds = %25, %29
  %34 = phi i8 [ %31, %29 ], [ %27, %25 ]
  %35 = lshr i8 %34, 4
  %36 = zext i8 %35 to i32
  %37 = zext i8 %34 to i64
  %38 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 1, i64 %37
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = load i32, i32* %12, align 4
  %45 = and i32 %44, %20
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %33
  %48 = load i32, i32* %9, align 4
  %49 = and i32 %48, %20
  %50 = icmp ne i32 %49, 0
  %51 = zext i1 %50 to i32
  br label %52

52:                                               ; preds = %33, %47
  %53 = phi i32 [ %51, %47 ], [ 2, %33 ]
  %54 = shl i32 4, %53
  tail call fastcc void @loop_filter(i8* %21, i32 %40, i32 %43, i32 %36, i64 1, i64 %1, i32 %54)
  br label %55

55:                                               ; preds = %52, %29, %19
  %56 = shl i32 %20, 1
  %57 = getelementptr inbounds i8, i8* %21, i64 4
  %58 = getelementptr inbounds [4 x i8], [4 x i8]* %22, i64 1
  %59 = sub i32 0, %56
  %60 = and i32 %14, %59
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %18, label %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @loop_filter_h_sb128uv_c(i8*, i64, i32* nocapture readonly, [4 x i8]* nocapture readonly, i64, %struct.Av1FilterLUT* nocapture readonly, i32) #1 {
  %8 = load i32, i32* %2, align 4
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, %8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = shl nsw i64 %1, 2
  br label %16

15:                                               ; preds = %47, %7
  ret void

16:                                               ; preds = %13, %47
  %17 = phi i8* [ %0, %13 ], [ %49, %47 ]
  %18 = phi [4 x i8]* [ %3, %13 ], [ %50, %47 ]
  %19 = phi i32 [ 1, %13 ], [ %48, %47 ]
  %20 = and i32 %19, %11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %47, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds [4 x i8], [4 x i8]* %18, i64 0, i64 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %18, i64 -1, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %47, label %30

30:                                               ; preds = %22, %26
  %31 = phi i8 [ %28, %26 ], [ %24, %22 ]
  %32 = lshr i8 %31, 4
  %33 = zext i8 %32 to i32
  %34 = zext i8 %31 to i64
  %35 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 1, i64 %34
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = load i32, i32* %9, align 4
  %42 = and i32 %41, %19
  %43 = icmp ne i32 %42, 0
  %44 = zext i1 %43 to i32
  %45 = shl nuw nsw i32 %44, 1
  %46 = or i32 %45, 4
  tail call fastcc void @loop_filter(i8* %17, i32 %37, i32 %40, i32 %33, i64 %1, i64 1, i32 %46)
  br label %47

47:                                               ; preds = %30, %26, %16
  %48 = shl i32 %19, 1
  %49 = getelementptr inbounds i8, i8* %17, i64 %14
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %18, i64 %4
  %51 = sub i32 0, %48
  %52 = and i32 %11, %51
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %15, label %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @loop_filter_v_sb128uv_c(i8*, i64, i32* nocapture readonly, [4 x i8]* nocapture readonly, i64, %struct.Av1FilterLUT* nocapture readonly, i32) #1 {
  %8 = load i32, i32* %2, align 4
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, %8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %7
  %14 = sub nsw i64 0, %4
  br label %16

15:                                               ; preds = %47, %7
  ret void

16:                                               ; preds = %13, %47
  %17 = phi i8* [ %0, %13 ], [ %49, %47 ]
  %18 = phi [4 x i8]* [ %3, %13 ], [ %50, %47 ]
  %19 = phi i32 [ 1, %13 ], [ %48, %47 ]
  %20 = and i32 %19, %11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %47, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds [4 x i8], [4 x i8]* %18, i64 0, i64 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %22
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %18, i64 %14, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %47, label %30

30:                                               ; preds = %22, %26
  %31 = phi i8 [ %28, %26 ], [ %24, %22 ]
  %32 = lshr i8 %31, 4
  %33 = zext i8 %32 to i32
  %34 = zext i8 %31 to i64
  %35 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds %struct.Av1FilterLUT, %struct.Av1FilterLUT* %5, i64 0, i32 1, i64 %34
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = load i32, i32* %9, align 4
  %42 = and i32 %41, %19
  %43 = icmp ne i32 %42, 0
  %44 = zext i1 %43 to i32
  %45 = shl nuw nsw i32 %44, 1
  %46 = or i32 %45, 4
  tail call fastcc void @loop_filter(i8* %17, i32 %37, i32 %40, i32 %33, i64 1, i64 %1, i32 %46)
  br label %47

47:                                               ; preds = %30, %26, %16
  %48 = shl i32 %19, 1
  %49 = getelementptr inbounds i8, i8* %17, i64 4
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %18, i64 1
  %51 = sub i32 0, %48
  %52 = and i32 %11, %51
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %15, label %16
}

declare void @dav1d_loop_filter_dsp_init_x86_8bpc(%struct.Dav1dLoopFilterDSPContext*) local_unnamed_addr #2

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @loop_filter(i8*, i32, i32, i32, i64, i64, i32) unnamed_addr #3 {
  %8 = mul nsw i64 %5, -2
  %9 = sub nsw i64 0, %5
  %10 = icmp sgt i32 %6, 4
  %11 = mul nsw i64 %5, -3
  %12 = shl nsw i64 %5, 1
  %13 = icmp sgt i32 %6, 6
  %14 = icmp sgt i32 %6, 5
  %15 = mul nsw i64 %5, -4
  %16 = mul nsw i64 %5, 3
  %17 = icmp sgt i32 %6, 15
  %18 = mul nsw i64 %5, -7
  %19 = mul nsw i64 %5, -6
  %20 = mul nsw i64 %5, -5
  %21 = shl nsw i64 %5, 2
  %22 = mul nsw i64 %5, 5
  %23 = mul nsw i64 %5, 6
  %24 = icmp sgt i32 %6, 7
  %25 = icmp eq i32 %6, 6
  br label %27

26:                                               ; preds = %558
  ret void

27:                                               ; preds = %558, %7
  %28 = phi i8* [ %0, %7 ], [ %560, %558 ]
  %29 = phi i32 [ 0, %7 ], [ %559, %558 ]
  %30 = getelementptr inbounds i8, i8* %28, i64 %8
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds i8, i8* %28, i64 %9
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = load i8, i8* %28, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %28, i64 %5
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = sub nsw i32 %32, %35
  %42 = icmp slt i32 %41, 0
  %43 = sub nsw i32 0, %41
  %44 = select i1 %42, i32 %43, i32 %41
  %45 = icmp sgt i32 %44, %2
  br i1 %45, label %65, label %46

46:                                               ; preds = %27
  %47 = sub nsw i32 %40, %37
  %48 = icmp slt i32 %47, 0
  %49 = sub nsw i32 0, %47
  %50 = select i1 %48, i32 %49, i32 %47
  %51 = icmp sgt i32 %50, %2
  br i1 %51, label %65, label %52

52:                                               ; preds = %46
  %53 = sub nsw i32 %35, %37
  %54 = icmp slt i32 %53, 0
  %55 = sub nsw i32 0, %53
  %56 = select i1 %54, i32 %55, i32 %53
  %57 = shl nuw nsw i32 %56, 1
  %58 = sub nsw i32 %32, %40
  %59 = icmp slt i32 %58, 0
  %60 = sub nsw i32 0, %58
  %61 = select i1 %59, i32 %60, i32 %58
  %62 = lshr i32 %61, 1
  %63 = add nuw nsw i32 %62, %57
  %64 = icmp sle i32 %63, %1
  br label %65

65:                                               ; preds = %46, %27, %52
  %66 = phi i1 [ false, %46 ], [ false, %27 ], [ %64, %52 ]
  br i1 %10, label %67, label %107

67:                                               ; preds = %65
  %68 = getelementptr inbounds i8, i8* %28, i64 %11
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds i8, i8* %28, i64 %12
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = sub nsw i32 %70, %32
  %75 = icmp slt i32 %74, 0
  %76 = sub nsw i32 0, %74
  %77 = select i1 %75, i32 %76, i32 %74
  %78 = icmp sgt i32 %77, %2
  br i1 %78, label %85, label %79

79:                                               ; preds = %67
  %80 = sub nsw i32 %73, %40
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 0, %80
  %83 = select i1 %81, i32 %82, i32 %80
  %84 = icmp sle i32 %83, %2
  br label %85

85:                                               ; preds = %67, %79
  %86 = phi i1 [ false, %67 ], [ %84, %79 ]
  %87 = and i1 %66, %86
  br i1 %13, label %88, label %107

88:                                               ; preds = %85
  %89 = getelementptr inbounds i8, i8* %28, i64 %15
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds i8, i8* %28, i64 %16
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %70
  %96 = icmp slt i32 %95, 0
  %97 = sub nsw i32 0, %95
  %98 = select i1 %96, i32 %97, i32 %95
  %99 = icmp sgt i32 %98, %2
  br i1 %99, label %558, label %100

100:                                              ; preds = %88
  %101 = sub nsw i32 %94, %73
  %102 = icmp slt i32 %101, 0
  %103 = sub nsw i32 0, %101
  %104 = select i1 %102, i32 %103, i32 %101
  %105 = icmp sle i32 %104, %2
  %106 = and i1 %87, %105
  br i1 %106, label %111, label %558

107:                                              ; preds = %85, %65
  %108 = phi i32 [ %70, %85 ], [ -1431655766, %65 ]
  %109 = phi i32 [ %73, %85 ], [ -1431655766, %65 ]
  %110 = phi i1 [ %87, %85 ], [ %66, %65 ]
  br i1 %110, label %169, label %558

111:                                              ; preds = %100
  br i1 %17, label %112, label %170

112:                                              ; preds = %111
  %113 = getelementptr inbounds i8, i8* %28, i64 %18
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = getelementptr inbounds i8, i8* %28, i64 %19
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8, i8* %28, i64 %20
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %28, i64 %21
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %28, i64 %22
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, i8* %28, i64 %23
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = sub nsw i32 %115, %35
  %132 = icmp slt i32 %131, 0
  %133 = sub nsw i32 0, %131
  %134 = select i1 %132, i32 %133, i32 %131
  %135 = icmp slt i32 %134, 2
  br i1 %135, label %136, label %166

136:                                              ; preds = %112
  %137 = sub nsw i32 %118, %35
  %138 = icmp slt i32 %137, 0
  %139 = sub nsw i32 0, %137
  %140 = select i1 %138, i32 %139, i32 %137
  %141 = icmp slt i32 %140, 2
  br i1 %141, label %142, label %166

142:                                              ; preds = %136
  %143 = sub nsw i32 %121, %35
  %144 = icmp slt i32 %143, 0
  %145 = sub nsw i32 0, %143
  %146 = select i1 %144, i32 %145, i32 %143
  %147 = icmp slt i32 %146, 2
  br i1 %147, label %148, label %166

148:                                              ; preds = %142
  %149 = sub nsw i32 %124, %37
  %150 = icmp slt i32 %149, 0
  %151 = sub nsw i32 0, %149
  %152 = select i1 %150, i32 %151, i32 %149
  %153 = icmp slt i32 %152, 2
  br i1 %153, label %154, label %166

154:                                              ; preds = %148
  %155 = sub nsw i32 %127, %37
  %156 = icmp slt i32 %155, 0
  %157 = sub nsw i32 0, %155
  %158 = select i1 %156, i32 %157, i32 %155
  %159 = icmp slt i32 %158, 2
  br i1 %159, label %160, label %166

160:                                              ; preds = %154
  %161 = sub nsw i32 %130, %37
  %162 = icmp slt i32 %161, 0
  %163 = sub nsw i32 0, %161
  %164 = select i1 %162, i32 %163, i32 %161
  %165 = icmp slt i32 %164, 2
  br label %166

166:                                              ; preds = %112, %136, %142, %148, %154, %160
  %167 = phi i1 [ false, %154 ], [ false, %148 ], [ false, %142 ], [ false, %136 ], [ false, %112 ], [ %165, %160 ]
  %168 = zext i1 %167 to i32
  br label %170

169:                                              ; preds = %107
  br i1 %14, label %170, label %437

170:                                              ; preds = %111, %166, %169
  %171 = phi i1 [ false, %166 ], [ true, %169 ], [ true, %111 ]
  %172 = phi i32 [ %91, %166 ], [ -1431655766, %169 ], [ %91, %111 ]
  %173 = phi i32 [ %70, %166 ], [ %108, %169 ], [ %70, %111 ]
  %174 = phi i32 [ %73, %166 ], [ %109, %169 ], [ %73, %111 ]
  %175 = phi i32 [ %94, %166 ], [ -1431655766, %169 ], [ %94, %111 ]
  %176 = phi i32 [ %168, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %177 = phi i32 [ %130, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %178 = phi i32 [ %127, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %179 = phi i32 [ %124, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %180 = phi i32 [ %121, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %181 = phi i32 [ %118, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %182 = phi i32 [ %115, %166 ], [ -1431655766, %169 ], [ -1431655766, %111 ]
  %183 = sub nsw i32 %173, %35
  %184 = icmp slt i32 %183, 0
  %185 = sub nsw i32 0, %183
  %186 = select i1 %184, i32 %185, i32 %183
  %187 = icmp slt i32 %186, 2
  %188 = icmp slt i32 %44, 2
  %189 = and i1 %188, %187
  br i1 %189, label %190, label %202

190:                                              ; preds = %170
  %191 = sub nsw i32 %40, %37
  %192 = icmp slt i32 %191, 0
  %193 = sub nsw i32 0, %191
  %194 = select i1 %192, i32 %193, i32 %191
  %195 = icmp slt i32 %194, 2
  br i1 %195, label %196, label %202

196:                                              ; preds = %190
  %197 = sub nsw i32 %174, %37
  %198 = icmp slt i32 %197, 0
  %199 = sub nsw i32 0, %197
  %200 = select i1 %198, i32 %199, i32 %197
  %201 = icmp slt i32 %200, 2
  br label %202

202:                                              ; preds = %170, %190, %196
  %203 = phi i1 [ false, %190 ], [ false, %170 ], [ %201, %196 ]
  br i1 %24, label %204, label %219

204:                                              ; preds = %202
  %205 = sub nsw i32 %172, %35
  %206 = icmp slt i32 %205, 0
  %207 = sub nsw i32 0, %205
  %208 = select i1 %206, i32 %207, i32 %205
  %209 = icmp slt i32 %208, 2
  br i1 %209, label %210, label %216

210:                                              ; preds = %204
  %211 = sub nsw i32 %175, %37
  %212 = icmp slt i32 %211, 0
  %213 = sub nsw i32 0, %211
  %214 = select i1 %212, i32 %213, i32 %211
  %215 = icmp slt i32 %214, 2
  br label %216

216:                                              ; preds = %210, %204
  %217 = phi i1 [ false, %204 ], [ %215, %210 ]
  %218 = and i1 %203, %217
  br label %219

219:                                              ; preds = %216, %202
  %220 = phi i1 [ true, %216 ], [ false, %202 ]
  %221 = phi i1 [ %218, %216 ], [ %203, %202 ]
  %222 = zext i1 %221 to i32
  %223 = and i32 %176, %222
  %224 = icmp eq i32 %223, 0
  %225 = or i1 %171, %224
  br i1 %225, label %385, label %226

226:                                              ; preds = %219
  %227 = shl i32 %182, 1
  %228 = mul nsw i32 %182, 3
  %229 = shl i32 %182, 2
  %230 = mul nsw i32 %182, 5
  %231 = mul nsw i32 %182, 7
  %232 = shl nsw i32 %181, 1
  %233 = shl nsw i32 %180, 1
  %234 = add nuw nsw i32 %37, %35
  %235 = add nuw nsw i32 %234, 8
  %236 = add nuw nsw i32 %235, %32
  %237 = add nuw nsw i32 %236, %172
  %238 = add i32 %237, %173
  %239 = add i32 %238, %233
  %240 = add i32 %239, %232
  %241 = add i32 %240, %231
  %242 = lshr i32 %241, 4
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds i8, i8* %28, i64 %19
  store i8 %243, i8* %244, align 1
  %245 = shl nsw i32 %172, 1
  %246 = add nuw nsw i32 %236, %40
  %247 = add nuw nsw i32 %246, %245
  %248 = add i32 %247, %173
  %249 = add i32 %248, %233
  %250 = add i32 %249, %232
  %251 = add i32 %250, %230
  %252 = lshr i32 %251, 4
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds i8, i8* %28, i64 %20
  store i8 %253, i8* %254, align 1
  %255 = shl nsw i32 %173, 1
  %256 = add nuw nsw i32 %32, 8
  %257 = add nuw nsw i32 %256, %35
  %258 = add nuw nsw i32 %257, %37
  %259 = add nuw nsw i32 %258, %40
  %260 = add nuw nsw i32 %259, %245
  %261 = add i32 %260, %255
  %262 = add i32 %261, %174
  %263 = add i32 %262, %181
  %264 = add i32 %263, %233
  %265 = add i32 %264, %229
  %266 = lshr i32 %265, 4
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds i8, i8* %28, i64 %15
  store i8 %267, i8* %268, align 1
  %269 = shl nuw nsw i32 %32, 1
  %270 = add nuw nsw i32 %269, 8
  %271 = add nuw nsw i32 %270, %35
  %272 = add nuw nsw i32 %271, %37
  %273 = add nuw nsw i32 %272, %40
  %274 = add nuw nsw i32 %273, %245
  %275 = add i32 %274, %255
  %276 = add i32 %275, %174
  %277 = add i32 %276, %175
  %278 = add i32 %277, %180
  %279 = add i32 %278, %181
  %280 = add i32 %279, %228
  %281 = lshr i32 %280, 4
  %282 = trunc i32 %281 to i8
  %283 = getelementptr inbounds i8, i8* %28, i64 %11
  store i8 %282, i8* %283, align 1
  %284 = shl nuw nsw i32 %35, 1
  %285 = add nuw nsw i32 %270, %284
  %286 = add nuw nsw i32 %285, %37
  %287 = add nuw nsw i32 %286, %40
  %288 = add nuw nsw i32 %287, %172
  %289 = add i32 %288, %255
  %290 = add i32 %289, %174
  %291 = add i32 %290, %175
  %292 = add i32 %291, %179
  %293 = add i32 %292, %180
  %294 = add i32 %293, %181
  %295 = add i32 %294, %227
  %296 = lshr i32 %295, 4
  %297 = trunc i32 %296 to i8
  store i8 %297, i8* %30, align 1
  %298 = shl nuw nsw i32 %37, 1
  %299 = add nuw nsw i32 %285, %298
  %300 = add nuw nsw i32 %299, %40
  %301 = add nuw nsw i32 %300, %172
  %302 = add i32 %301, %173
  %303 = add i32 %302, %174
  %304 = add i32 %303, %175
  %305 = add i32 %304, %178
  %306 = add i32 %305, %179
  %307 = add i32 %306, %180
  %308 = add i32 %307, %181
  %309 = add i32 %308, %182
  %310 = lshr i32 %309, 4
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %33, align 1
  %312 = shl nuw nsw i32 %40, 1
  %313 = add nuw nsw i32 %256, %284
  %314 = add nuw nsw i32 %313, %298
  %315 = add nuw nsw i32 %314, %312
  %316 = add nuw nsw i32 %315, %172
  %317 = add i32 %316, %173
  %318 = add i32 %317, %174
  %319 = add i32 %318, %175
  %320 = add i32 %319, %177
  %321 = add i32 %320, %178
  %322 = add i32 %321, %179
  %323 = add i32 %322, %180
  %324 = add i32 %323, %181
  %325 = lshr i32 %324, 4
  %326 = trunc i32 %325 to i8
  store i8 %326, i8* %28, align 1
  %327 = shl nsw i32 %174, 1
  %328 = shl i32 %177, 1
  %329 = add nuw nsw i32 %257, %298
  %330 = add nuw nsw i32 %329, %312
  %331 = add nuw nsw i32 %330, %172
  %332 = add i32 %331, %173
  %333 = add i32 %332, %327
  %334 = add i32 %333, %175
  %335 = add i32 %334, %178
  %336 = add i32 %335, %328
  %337 = add i32 %336, %179
  %338 = add i32 %337, %180
  %339 = lshr i32 %338, 4
  %340 = trunc i32 %339 to i8
  store i8 %340, i8* %38, align 1
  %341 = shl nsw i32 %175, 1
  %342 = mul i32 %177, 3
  %343 = add nuw nsw i32 %258, %312
  %344 = add nuw nsw i32 %343, %172
  %345 = add i32 %344, %173
  %346 = add i32 %345, %327
  %347 = add i32 %346, %341
  %348 = add i32 %347, %178
  %349 = add i32 %348, %342
  %350 = add i32 %349, %179
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = getelementptr inbounds i8, i8* %28, i64 %12
  store i8 %352, i8* %353, align 1
  %354 = shl nsw i32 %179, 1
  %355 = shl i32 %177, 2
  %356 = add nsw i32 %259, %173
  %357 = add i32 %356, %327
  %358 = add i32 %357, %341
  %359 = add i32 %358, %178
  %360 = add i32 %359, %355
  %361 = add i32 %360, %354
  %362 = lshr i32 %361, 4
  %363 = trunc i32 %362 to i8
  %364 = getelementptr inbounds i8, i8* %28, i64 %16
  store i8 %363, i8* %364, align 1
  %365 = shl nsw i32 %178, 1
  %366 = mul i32 %177, 5
  %367 = add nsw i32 %246, %174
  %368 = add i32 %367, %341
  %369 = add i32 %368, %366
  %370 = add i32 %369, %365
  %371 = add i32 %370, %354
  %372 = lshr i32 %371, 4
  %373 = trunc i32 %372 to i8
  %374 = getelementptr inbounds i8, i8* %28, i64 %21
  store i8 %373, i8* %374, align 1
  %375 = mul i32 %177, 7
  %376 = add nuw nsw i32 %235, %40
  %377 = add nsw i32 %376, %174
  %378 = add i32 %377, %175
  %379 = add i32 %378, %365
  %380 = add i32 %379, %354
  %381 = add i32 %380, %375
  %382 = lshr i32 %381, 4
  %383 = trunc i32 %382 to i8
  %384 = getelementptr inbounds i8, i8* %28, i64 %22
  store i8 %383, i8* %384, align 1
  br label %558

385:                                              ; preds = %219
  %386 = and i1 %221, %220
  br i1 %386, label %387, label %437

387:                                              ; preds = %385
  %388 = mul nsw i32 %172, 3
  %389 = shl i32 %173, 1
  %390 = add nuw nsw i32 %35, 4
  %391 = add nuw nsw i32 %390, %32
  %392 = add nuw nsw i32 %391, %37
  %393 = add i32 %392, %388
  %394 = add i32 %393, %389
  %395 = lshr i32 %394, 3
  %396 = trunc i32 %395 to i8
  %397 = getelementptr inbounds i8, i8* %28, i64 %11
  store i8 %396, i8* %397, align 1
  %398 = add nuw nsw i32 %172, %32
  %399 = shl i32 %398, 1
  %400 = add nuw nsw i32 %390, %37
  %401 = add nuw nsw i32 %400, %40
  %402 = add nuw nsw i32 %401, %399
  %403 = add i32 %402, %173
  %404 = lshr i32 %403, 3
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %30, align 1
  %406 = shl nuw nsw i32 %35, 1
  %407 = add nuw nsw i32 %37, 4
  %408 = add nuw nsw i32 %407, %32
  %409 = add nuw nsw i32 %408, %406
  %410 = add nuw nsw i32 %409, %40
  %411 = add nuw nsw i32 %410, %172
  %412 = add i32 %411, %174
  %413 = add i32 %412, %173
  %414 = lshr i32 %413, 3
  %415 = trunc i32 %414 to i8
  store i8 %415, i8* %33, align 1
  %416 = shl nuw nsw i32 %37, 1
  %417 = add nuw nsw i32 %391, %416
  %418 = add nuw nsw i32 %417, %40
  %419 = add nuw nsw i32 %418, %175
  %420 = add i32 %419, %174
  %421 = add i32 %420, %173
  %422 = lshr i32 %421, 3
  %423 = trunc i32 %422 to i8
  store i8 %423, i8* %28, align 1
  %424 = add nuw nsw i32 %175, %40
  %425 = shl i32 %424, 1
  %426 = add nsw i32 %392, %174
  %427 = add i32 %426, %425
  %428 = lshr i32 %427, 3
  %429 = trunc i32 %428 to i8
  store i8 %429, i8* %38, align 1
  %430 = shl i32 %174, 1
  %431 = mul i32 %175, 3
  %432 = add i32 %401, %431
  %433 = add i32 %432, %430
  %434 = lshr i32 %433, 3
  %435 = trunc i32 %434 to i8
  %436 = getelementptr inbounds i8, i8* %28, i64 %12
  store i8 %435, i8* %436, align 1
  br label %558

437:                                              ; preds = %169, %385
  %438 = phi i1 [ %221, %385 ], [ true, %169 ]
  %439 = phi i32 [ %173, %385 ], [ %108, %169 ]
  %440 = phi i32 [ %174, %385 ], [ %109, %169 ]
  %441 = and i1 %25, %438
  br i1 %441, label %442, label %476

442:                                              ; preds = %437
  %443 = mul nsw i32 %439, 3
  %444 = shl nuw nsw i32 %32, 1
  %445 = shl nuw nsw i32 %35, 1
  %446 = add nuw nsw i32 %37, 4
  %447 = add nuw nsw i32 %446, %444
  %448 = add nuw nsw i32 %447, %445
  %449 = add i32 %448, %443
  %450 = lshr i32 %449, 3
  %451 = trunc i32 %450 to i8
  store i8 %451, i8* %30, align 1
  %452 = shl nuw nsw i32 %37, 1
  %453 = add nuw nsw i32 %40, 4
  %454 = add nuw nsw i32 %453, %444
  %455 = add nuw nsw i32 %454, %445
  %456 = add nuw nsw i32 %455, %452
  %457 = add nsw i32 %456, %439
  %458 = lshr i32 %457, 3
  %459 = trunc i32 %458 to i8
  store i8 %459, i8* %33, align 1
  %460 = shl nuw nsw i32 %40, 1
  %461 = add nuw nsw i32 %32, 4
  %462 = add nuw nsw i32 %461, %445
  %463 = add nuw nsw i32 %462, %452
  %464 = add nuw nsw i32 %463, %460
  %465 = add nsw i32 %464, %440
  %466 = lshr i32 %465, 3
  %467 = trunc i32 %466 to i8
  store i8 %467, i8* %28, align 1
  %468 = shl i32 %440, 1
  %469 = add nuw nsw i32 %35, 4
  %470 = add nuw nsw i32 %469, %452
  %471 = add nuw nsw i32 %470, %460
  %472 = add nsw i32 %471, %440
  %473 = add i32 %472, %468
  %474 = lshr i32 %473, 3
  %475 = trunc i32 %474 to i8
  store i8 %475, i8* %38, align 1
  br label %558

476:                                              ; preds = %437
  %477 = icmp sgt i32 %44, %3
  br i1 %477, label %484, label %478

478:                                              ; preds = %476
  %479 = sub nsw i32 %40, %37
  %480 = icmp slt i32 %479, 0
  %481 = sub nsw i32 0, %479
  %482 = select i1 %480, i32 %481, i32 %479
  %483 = icmp sgt i32 %482, %3
  br i1 %483, label %484, label %517

484:                                              ; preds = %476, %478
  %485 = sub nsw i32 %32, %40
  %486 = icmp slt i32 %485, 127
  %487 = select i1 %486, i32 %485, i32 127
  %488 = icmp sgt i32 %487, -128
  %489 = select i1 %488, i32 %487, i32 -128
  %490 = sub nsw i32 %37, %35
  %491 = mul nsw i32 %490, 3
  %492 = add nsw i32 %489, %491
  %493 = icmp slt i32 %492, 127
  %494 = select i1 %493, i32 %492, i32 127
  %495 = icmp sgt i32 %494, -128
  %496 = select i1 %495, i32 %494, i32 -128
  %497 = icmp slt i32 %496, 123
  %498 = select i1 %497, i32 %496, i32 123
  %499 = add nsw i32 %498, 4
  %500 = ashr i32 %499, 3
  %501 = icmp slt i32 %496, 124
  %502 = select i1 %501, i32 %496, i32 124
  %503 = add nsw i32 %502, 3
  %504 = ashr i32 %503, 3
  %505 = add nsw i32 %504, %35
  %506 = icmp slt i32 %505, 255
  %507 = select i1 %506, i32 %505, i32 255
  %508 = icmp sgt i32 %507, 0
  %509 = select i1 %508, i32 %507, i32 0
  %510 = trunc i32 %509 to i8
  store i8 %510, i8* %33, align 1
  %511 = sub nsw i32 %37, %500
  %512 = icmp slt i32 %511, 255
  %513 = select i1 %512, i32 %511, i32 255
  %514 = icmp sgt i32 %513, 0
  %515 = select i1 %514, i32 %513, i32 0
  %516 = trunc i32 %515 to i8
  store i8 %516, i8* %28, align 1
  br label %558

517:                                              ; preds = %478
  %518 = sub nsw i32 %37, %35
  %519 = mul nsw i32 %518, 3
  %520 = icmp slt i32 %519, 127
  %521 = select i1 %520, i32 %519, i32 127
  %522 = icmp sgt i32 %521, -128
  %523 = select i1 %522, i32 %521, i32 -128
  %524 = icmp slt i32 %523, 123
  %525 = select i1 %524, i32 %523, i32 123
  %526 = add nsw i32 %525, 4
  %527 = ashr i32 %526, 3
  %528 = icmp slt i32 %523, 124
  %529 = select i1 %528, i32 %523, i32 124
  %530 = add nsw i32 %529, 3
  %531 = ashr i32 %530, 3
  %532 = add nsw i32 %531, %35
  %533 = icmp slt i32 %532, 255
  %534 = select i1 %533, i32 %532, i32 255
  %535 = icmp sgt i32 %534, 0
  %536 = select i1 %535, i32 %534, i32 0
  %537 = trunc i32 %536 to i8
  store i8 %537, i8* %33, align 1
  %538 = sub nsw i32 %37, %527
  %539 = icmp slt i32 %538, 255
  %540 = select i1 %539, i32 %538, i32 255
  %541 = icmp sgt i32 %540, 0
  %542 = select i1 %541, i32 %540, i32 0
  %543 = trunc i32 %542 to i8
  store i8 %543, i8* %28, align 1
  %544 = add nsw i32 %527, 1
  %545 = ashr i32 %544, 1
  %546 = add nsw i32 %545, %32
  %547 = icmp slt i32 %546, 255
  %548 = select i1 %547, i32 %546, i32 255
  %549 = icmp sgt i32 %548, 0
  %550 = select i1 %549, i32 %548, i32 0
  %551 = trunc i32 %550 to i8
  store i8 %551, i8* %30, align 1
  %552 = sub nsw i32 %40, %545
  %553 = icmp slt i32 %552, 255
  %554 = select i1 %553, i32 %552, i32 255
  %555 = icmp sgt i32 %554, 0
  %556 = select i1 %555, i32 %554, i32 0
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %38, align 1
  br label %558

558:                                              ; preds = %88, %100, %226, %442, %387, %517, %484, %107
  %559 = add nuw nsw i32 %29, 1
  %560 = getelementptr inbounds i8, i8* %28, i64 %4
  %561 = icmp eq i32 %559, 4
  br i1 %561, label %26, label %27
}

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree noinline norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
