; ModuleID = '../../third_party/blink/renderer/platform/graphics/dark_mode_image_classifier.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/dark_mode_image_classifier.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.darkmode_tfnative_model::FixedAllocations" = type { [10 x float], [2 x i32], [10 x float], [2 x i32] }
%"class.blink::DarkModeImageClassifier" = type { i8 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.blink::DarkModeImageClassifier::Features" }
%"struct.blink::DarkModeImageClassifier::Features" = type { i8, float, float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { i32*, i32*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i32* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %struct.SkIRect*, %struct.SkIRect*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %struct.SkIRect* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i16, [4 x i8] }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_ = comdat any

$_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE7destroyEPNS_11__tree_nodeItPvEE = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

@__const._ZNK5blink23DarkModeImageClassifier8ClassifyERK8SkPixmapRK7SkIRect.features_or_null = private unnamed_addr constant { { { { i8, [3 x i8], { { i8, [3 x i8], float, float, float } } } } } } { { { { i8, [3 x i8], { { i8, [3 x i8], float, float, float } } } } } { { { i8, [3 x i8], { { i8, [3 x i8], float, float, float } } } } { { i8, [3 x i8], { { i8, [3 x i8], float, float, float } } } { i8 -86, [3 x i8] c"\AA\AA\AA", { { i8, [3 x i8], float, float, float } } { { i8, [3 x i8], float, float, float } { i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } } } } } }, align 4
@_ZZNK5blink23DarkModeImageClassifier24ComputeColorBucketsRatioERKNSt3__16vectorIjNS1_9allocatorIjEEEENS0_9ColorModeEE11max_buckets = internal unnamed_addr constant [2 x float] [float 1.600000e+01, float 4.096000e+03], align 4
@__const._ZNK5blink23DarkModeImageClassifier20ClassifyWithFeaturesERKNS0_8FeaturesE.nn_temp = private unnamed_addr constant %"struct.darkmode_tfnative_model::FixedAllocations" { [10 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [2 x i32] [i32 -1431655766, i32 -1431655766], [10 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [2 x i32] [i32 -1431655766, i32 -1431655766] }, align 16
@_ZN5blink12_GLOBAL__N_123kLowColorCountThresholdE = internal unnamed_addr constant [2 x float] [float 8.125000e-01, float 0x3F8F0025C0000000], align 4
@_ZN5blink12_GLOBAL__N_124kHighColorCountThresholdE = internal unnamed_addr constant [2 x float] [float 1.000000e+00, float 0x3F9A400FC0000000], align 4

@_ZN5blink23DarkModeImageClassifierC1Ev = hidden unnamed_addr alias void (%"class.blink::DarkModeImageClassifier"*), void (%"class.blink::DarkModeImageClassifier"*)* @_ZN5blink23DarkModeImageClassifierC2Ev
@_ZN5blink23DarkModeImageClassifierD1Ev = hidden unnamed_addr alias void (%"class.blink::DarkModeImageClassifier"*), void (%"class.blink::DarkModeImageClassifier"*)* @_ZN5blink23DarkModeImageClassifierD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink23DarkModeImageClassifierC2Ev(%"class.blink::DarkModeImageClassifier"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink23DarkModeImageClassifierD2Ev(%"class.blink::DarkModeImageClassifier"* nocapture) unnamed_addr #0 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZNK5blink23DarkModeImageClassifier8ClassifyERK8SkPixmapRK7SkIRect(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %class.SkPixmap* dereferenceable(40), %struct.SkIRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"struct.darkmode_tfnative_model::FixedAllocations", align 16
  %5 = alloca float, align 4
  %6 = alloca [4 x float], align 16
  %7 = alloca %"class.absl::optional", align 4
  %8 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = sub nsw i64 %14, %17
  %19 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = sub nsw i64 %21, %24
  %26 = icmp slt i64 %18, 1
  %27 = icmp slt i64 %25, 1
  %28 = or i1 %26, %27
  br i1 %28, label %93, label %29

29:                                               ; preds = %3
  %30 = or i64 %25, %18
  %31 = add nsw i64 %30, 2147483648
  %32 = icmp ugt i64 %31, 4294967295
  br i1 %32, label %93, label %33

33:                                               ; preds = %29
  %34 = icmp slt i32 %9, 1
  %35 = icmp slt i32 %11, 1
  %36 = or i1 %34, %35
  br i1 %36, label %93, label %37

37:                                               ; preds = %33
  %38 = or i32 %11, %9
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, 2147483648
  %41 = icmp ugt i64 %40, 4294967295
  br i1 %41, label %93, label %42

42:                                               ; preds = %37
  %43 = or i32 %23, %16
  %44 = icmp sgt i32 %43, -1
  %45 = icmp sge i32 %9, %13
  %46 = icmp sge i32 %11, %20
  %47 = and i1 %44, %45
  %48 = and i1 %46, %47
  br i1 %48, label %49, label %93

49:                                               ; preds = %42
  %50 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %93, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %54) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %54, i8* align 4 getelementptr inbounds ({ { { { i8, [3 x i8], { { i8, [3 x i8], float, float, float } } } } } }, { { { { i8, [3 x i8], { { i8, [3 x i8], float, float, float } } } } } }* @__const._ZNK5blink23DarkModeImageClassifier8ClassifyERK8SkPixmapRK7SkIRect.features_or_null, i64 0, i32 0, i32 0, i32 0, i32 0), i64 20, i1 false)
  call void @_ZNK5blink23DarkModeImageClassifier11GetFeaturesERK8SkPixmapRK7SkIRect(%"class.absl::optional"* nonnull sret %7, %"class.blink::DarkModeImageClassifier"* %0, %class.SkPixmap* dereferenceable(40) %1, %struct.SkIRect* dereferenceable(16) %2)
  %55 = load i8, i8* %54, align 4, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %91, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %59 = load i8, i8* %58, align 4, !range !2
  %60 = zext i8 %59 to i64
  %61 = getelementptr inbounds [2 x float], [2 x float]* @_ZN5blink12_GLOBAL__N_123kLowColorCountThresholdE, i64 0, i64 %60
  %62 = load float, float* %61, align 4
  %63 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %64 = load float, float* %63, align 4
  %65 = fcmp olt float %64, %62
  br i1 %65, label %91, label %66

66:                                               ; preds = %57
  %67 = getelementptr inbounds [2 x float], [2 x float]* @_ZN5blink12_GLOBAL__N_124kHighColorCountThresholdE, i64 0, i64 %60
  %68 = load float, float* %67, align 4
  %69 = fcmp ogt float %64, %68
  br i1 %69, label %91, label %70

70:                                               ; preds = %66
  %71 = bitcast %"struct.darkmode_tfnative_model::FixedAllocations"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %71) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %71, i8* align 16 bitcast (%"struct.darkmode_tfnative_model::FixedAllocations"* @__const._ZNK5blink23DarkModeImageClassifier20ClassifyWithFeaturesERKNS0_8FeaturesE.nn_temp to i8*), i64 96, i1 false) #11
  %72 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72) #11
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %73 = bitcast [4 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #11
  %74 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %75 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %76 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %77 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %78 = icmp ne i8 %59, 0
  %79 = uitofp i1 %78 to float
  store float %79, float* %74, align 16
  store float %64, float* %75, align 4
  %80 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = bitcast float* %76 to i32*
  store i32 %82, i32* %83, align 8
  %84 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  %85 = bitcast float* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = bitcast float* %77 to i32*
  store i32 %86, i32* %87, align 4
  call void @_ZN23darkmode_tfnative_model9InferenceEPKfPfPNS_16FixedAllocationsE(float* nonnull %74, float* nonnull %5, %"struct.darkmode_tfnative_model::FixedAllocations"* nonnull %4) #11
  %88 = load float, float* %5, align 4
  %89 = fcmp ogt float %88, 0.000000e+00
  %90 = zext i1 %89 to i8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %72) #11
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %71) #11
  br label %91

91:                                               ; preds = %53, %70, %66, %57
  %92 = phi i8 [ 0, %53 ], [ %90, %70 ], [ 1, %57 ], [ 0, %66 ]
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %54) #11
  br label %93

93:                                               ; preds = %33, %3, %29, %37, %42, %49, %91
  %94 = phi i8 [ %92, %91 ], [ 0, %49 ], [ 0, %42 ], [ 0, %37 ], [ 0, %29 ], [ 0, %3 ], [ 0, %33 ]
  ret i8 %94
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink23DarkModeImageClassifier11GetFeaturesERK8SkPixmapRK7SkIRect(%"class.absl::optional"* noalias nocapture sret, %"class.blink::DarkModeImageClassifier"* nocapture readnone, %class.SkPixmap* dereferenceable(40), %struct.SkIRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %9 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %10 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #11
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #11
  call void @_ZNK5blink23DarkModeImageClassifier10GetSamplesERK8SkPixmapRK7SkIRectPNSt3__16vectorIjNS7_9allocatorIjEEEEPfSD_(%"class.blink::DarkModeImageClassifier"* %1, %class.SkPixmap* dereferenceable(40) %2, %struct.SkIRect* dereferenceable(16) %3, %"class.std::__1::vector"* nonnull %7, float* nonnull %5, float* nonnull %6)
  %13 = bitcast i32** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %7 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = icmp eq i64 %17, 0
  %19 = inttoptr i64 %16 to i32*
  br i1 %18, label %20, label %22

20:                                               ; preds = %4
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %21, align 4
  br label %142

22:                                               ; preds = %4
  %23 = load float, float* %5, align 4
  %24 = load float, float* %6, align 4
  %25 = lshr exact i64 %17, 2
  %26 = trunc i64 %25 to i32
  %27 = inttoptr i64 %14 to i32*
  %28 = icmp eq i32* %27, %19
  br i1 %28, label %121, label %29

29:                                               ; preds = %22
  %30 = getelementptr i32, i32* %27, i64 -1
  %31 = bitcast i32* %30 to i8*
  %32 = sub i64 0, %16
  %33 = getelementptr i8, i8* %31, i64 %32
  %34 = ptrtoint i8* %33 to i64
  %35 = lshr i64 %34, 2
  %36 = add nuw nsw i64 %35, 1
  %37 = icmp ult i64 %36, 8
  br i1 %37, label %95, label %38

38:                                               ; preds = %29
  %39 = and i64 %36, 9223372036854775800
  %40 = getelementptr i32, i32* %19, i64 %39
  br label %41

41:                                               ; preds = %41, %38
  %42 = phi i64 [ 0, %38 ], [ %85, %41 ]
  %43 = phi <4 x i32> [ zeroinitializer, %38 ], [ %83, %41 ]
  %44 = phi <4 x i32> [ zeroinitializer, %38 ], [ %84, %41 ]
  %45 = getelementptr i32, i32* %19, i64 %42
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = lshr <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %52 = lshr <4 x i32> %50, <i32 16, i32 16, i32 16, i32 16>
  %53 = and <4 x i32> %51, <i32 255, i32 255, i32 255, i32 255>
  %54 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %55 = lshr <4 x i32> %47, <i32 8, i32 8, i32 8, i32 8>
  %56 = lshr <4 x i32> %50, <i32 8, i32 8, i32 8, i32 8>
  %57 = and <4 x i32> %55, <i32 255, i32 255, i32 255, i32 255>
  %58 = and <4 x i32> %56, <i32 255, i32 255, i32 255, i32 255>
  %59 = sub nsw <4 x i32> %53, %57
  %60 = sub nsw <4 x i32> %54, %58
  %61 = icmp slt <4 x i32> %59, zeroinitializer
  %62 = icmp slt <4 x i32> %60, zeroinitializer
  %63 = sub nsw <4 x i32> zeroinitializer, %59
  %64 = sub nsw <4 x i32> zeroinitializer, %60
  %65 = select <4 x i1> %61, <4 x i32> %63, <4 x i32> %59
  %66 = select <4 x i1> %62, <4 x i32> %64, <4 x i32> %60
  %67 = and <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %68 = and <4 x i32> %50, <i32 255, i32 255, i32 255, i32 255>
  %69 = sub nsw <4 x i32> %57, %67
  %70 = sub nsw <4 x i32> %58, %68
  %71 = icmp slt <4 x i32> %69, zeroinitializer
  %72 = icmp slt <4 x i32> %70, zeroinitializer
  %73 = sub nsw <4 x i32> zeroinitializer, %69
  %74 = sub nsw <4 x i32> zeroinitializer, %70
  %75 = select <4 x i1> %71, <4 x i32> %73, <4 x i32> %69
  %76 = select <4 x i1> %72, <4 x i32> %74, <4 x i32> %70
  %77 = add nuw nsw <4 x i32> %65, %75
  %78 = add nuw nsw <4 x i32> %66, %76
  %79 = icmp sgt <4 x i32> %77, <i32 8, i32 8, i32 8, i32 8>
  %80 = icmp sgt <4 x i32> %78, <i32 8, i32 8, i32 8, i32 8>
  %81 = zext <4 x i1> %79 to <4 x i32>
  %82 = zext <4 x i1> %80 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %43, %81
  %84 = add nuw nsw <4 x i32> %44, %82
  %85 = add i64 %42, 8
  %86 = icmp eq i64 %85, %39
  br i1 %86, label %87, label %41, !llvm.loop !3

87:                                               ; preds = %41
  %88 = add nuw <4 x i32> %84, %83
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %90 = add <4 x i32> %88, %89
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %92 = add <4 x i32> %90, %91
  %93 = extractelement <4 x i32> %92, i32 0
  %94 = icmp eq i64 %36, %39
  br i1 %94, label %121, label %95

95:                                               ; preds = %87, %29
  %96 = phi i32 [ 0, %29 ], [ %93, %87 ]
  %97 = phi i32* [ %19, %29 ], [ %40, %87 ]
  br label %98

98:                                               ; preds = %95, %98
  %99 = phi i32 [ %118, %98 ], [ %96, %95 ]
  %100 = phi i32* [ %119, %98 ], [ %97, %95 ]
  %101 = load i32, i32* %100, align 4
  %102 = lshr i32 %101, 16
  %103 = and i32 %102, 255
  %104 = lshr i32 %101, 8
  %105 = and i32 %104, 255
  %106 = sub nsw i32 %103, %105
  %107 = icmp slt i32 %106, 0
  %108 = sub nsw i32 0, %106
  %109 = select i1 %107, i32 %108, i32 %106
  %110 = and i32 %101, 255
  %111 = sub nsw i32 %105, %110
  %112 = icmp slt i32 %111, 0
  %113 = sub nsw i32 0, %111
  %114 = select i1 %112, i32 %113, i32 %111
  %115 = add nuw nsw i32 %109, %114
  %116 = icmp sgt i32 %115, 8
  %117 = zext i1 %116 to i32
  %118 = add nuw nsw i32 %99, %117
  %119 = getelementptr inbounds i32, i32* %100, i64 1
  %120 = icmp eq i32* %119, %27
  br i1 %120, label %121, label %98, !llvm.loop !5

121:                                              ; preds = %98, %87, %22
  %122 = phi i32 [ 0, %22 ], [ %93, %87 ], [ %118, %98 ]
  %123 = sdiv i32 %26, 100
  %124 = icmp sgt i32 %122, %123
  %125 = xor i1 %124, true
  %126 = zext i1 %125 to i32
  %127 = call float @_ZNK5blink23DarkModeImageClassifier24ComputeColorBucketsRatioERKNSt3__16vectorIjNS1_9allocatorIjEEEENS0_9ColorModeE(%"class.blink::DarkModeImageClassifier"* undef, %"class.std::__1::vector"* nonnull dereferenceable(24) %7, i32 %126) #11
  %128 = bitcast float %127 to i32
  %129 = insertelement <2 x float> undef, float %23, i32 0
  %130 = insertelement <2 x float> %129, float %24, i32 1
  %131 = zext i1 %124 to i64
  %132 = zext i32 %128 to i64
  %133 = shl nuw i64 %132, 32
  %134 = or i64 %133, %131
  %135 = or i64 %134, 2863311360
  %136 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %136, align 4
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %138 = bitcast %union.anon* %137 to i64*
  store i64 %135, i64* %138, align 4
  %139 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %140 = bitcast float* %139 to <2 x float>*
  store <2 x float> %130, <2 x float>* %140, align 4
  %141 = load i32*, i32** %11, align 8
  br label %142

142:                                              ; preds = %121, %20
  %143 = phi i32* [ %141, %121 ], [ %19, %20 ]
  %144 = icmp eq i32* %143, null
  br i1 %144, label %148, label %145

145:                                              ; preds = %142
  %146 = ptrtoint i32* %143 to i64
  store i64 %146, i64* %13, align 8
  %147 = bitcast i32* %143 to i8*
  call void @_ZdlPv(i8* %147) #12
  br label %148

148:                                              ; preds = %142, %145
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZNK5blink23DarkModeImageClassifier20ClassifyWithFeaturesERKNS0_8FeaturesE(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %"struct.blink::DarkModeImageClassifier::Features"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"struct.darkmode_tfnative_model::FixedAllocations", align 16
  %4 = alloca float, align 4
  %5 = alloca [4 x float], align 16
  %6 = getelementptr inbounds %"struct.blink::DarkModeImageClassifier::Features", %"struct.blink::DarkModeImageClassifier::Features"* %1, i64 0, i32 0
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = zext i8 %7 to i64
  %9 = getelementptr inbounds [2 x float], [2 x float]* @_ZN5blink12_GLOBAL__N_123kLowColorCountThresholdE, i64 0, i64 %8
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"struct.blink::DarkModeImageClassifier::Features", %"struct.blink::DarkModeImageClassifier::Features"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fcmp olt float %12, %10
  br i1 %13, label %39, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds [2 x float], [2 x float]* @_ZN5blink12_GLOBAL__N_124kHighColorCountThresholdE, i64 0, i64 %8
  %16 = load float, float* %15, align 4
  %17 = fcmp ogt float %12, %16
  br i1 %17, label %39, label %18

18:                                               ; preds = %14
  %19 = bitcast %"struct.darkmode_tfnative_model::FixedAllocations"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %19) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %19, i8* align 16 bitcast (%"struct.darkmode_tfnative_model::FixedAllocations"* @__const._ZNK5blink23DarkModeImageClassifier20ClassifyWithFeaturesERKNS0_8FeaturesE.nn_temp to i8*), i64 96, i1 false)
  %20 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #11
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %21 = bitcast [4 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #11
  %22 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 0
  %23 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 1
  %24 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 2
  %25 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 3
  %26 = icmp ne i8 %7, 0
  %27 = uitofp i1 %26 to float
  store float %27, float* %22, align 16
  store float %12, float* %23, align 4
  %28 = getelementptr inbounds %"struct.blink::DarkModeImageClassifier::Features", %"struct.blink::DarkModeImageClassifier::Features"* %1, i64 0, i32 2
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = bitcast float* %24 to i32*
  store i32 %30, i32* %31, align 8
  %32 = getelementptr inbounds %"struct.blink::DarkModeImageClassifier::Features", %"struct.blink::DarkModeImageClassifier::Features"* %1, i64 0, i32 3
  %33 = bitcast float* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = bitcast float* %25 to i32*
  store i32 %34, i32* %35, align 4
  call void @_ZN23darkmode_tfnative_model9InferenceEPKfPfPNS_16FixedAllocationsE(float* nonnull %22, float* nonnull %4, %"struct.darkmode_tfnative_model::FixedAllocations"* nonnull %3) #11
  %36 = load float, float* %4, align 4
  %37 = fcmp ogt float %36, 0.000000e+00
  %38 = zext i1 %37 to i8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #11
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %19) #11
  br label %39

39:                                               ; preds = %14, %2, %18
  %40 = phi i8 [ %38, %18 ], [ 1, %2 ], [ 0, %14 ]
  ret i8 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink23DarkModeImageClassifier10GetSamplesERK8SkPixmapRK7SkIRectPNSt3__16vectorIjNS7_9allocatorIjEEEEPfSD_(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %class.SkPixmap* dereferenceable(40), %struct.SkIRect* nocapture readonly dereferenceable(16), %"class.std::__1::vector"*, float* nocapture, float* nocapture) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::vector.7", align 8
  %8 = alloca %"class.std::__1::vector.7", align 8
  %9 = alloca %"class.std::__1::vector.14", align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = bitcast { i64, i64 }* %10 to %struct.SkIRect*
  %12 = alloca %"class.std::__1::vector", align 8
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sub i32 %15, %17
  %19 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = sub i32 %20, %22
  %24 = mul nsw i32 %23, %18
  %25 = icmp slt i32 %24, 1000
  %26 = select i1 %25, i32 %24, i32 1000
  %27 = icmp slt i32 %18, 10
  %28 = select i1 %27, i32 %18, i32 10
  %29 = icmp slt i32 %23, 10
  %30 = select i1 %29, i32 %23, i32 10
  %31 = mul nsw i32 %30, %28
  %32 = sdiv i32 %26, %31
  %33 = bitcast %"class.std::__1::vector.7"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #11
  %34 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 1
  %36 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %37 = add nsw i32 %28, 1
  %38 = sext i32 %37 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #11
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %59, label %40

40:                                               ; preds = %6
  %41 = icmp slt i32 %37, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %40
  %43 = bitcast %"class.std::__1::vector.7"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %43) #13
  unreachable

44:                                               ; preds = %40
  %45 = shl nsw i64 %38, 2
  %46 = tail call i8* @_Znwm(i64 %45) #12
  %47 = bitcast i8* %46 to i32*
  %48 = bitcast %"class.std::__1::vector.7"* %7 to i8**
  store i8* %46, i8** %48, align 8
  %49 = getelementptr inbounds i32, i32* %47, i64 %38
  store i32* %49, i32** %36, align 8
  %50 = bitcast i32** %35 to i64*
  %51 = ptrtoint i8* %46 to i64
  %52 = add nsw i64 %38, -1
  %53 = getelementptr i32, i32* %47, i64 %52
  %54 = ptrtoint i32* %53 to i64
  %55 = sub i64 4, %51
  %56 = add i64 %55, %54
  %57 = and i64 %56, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %46, i8 0, i64 %57, i1 false) #11
  %58 = ptrtoint i32* %49 to i64
  store i64 %58, i64* %50, align 8
  br label %59

59:                                               ; preds = %6, %44
  %60 = phi i32* [ null, %6 ], [ %47, %44 ]
  %61 = bitcast %"class.std::__1::vector.7"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #11
  %62 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %8, i64 0, i32 0, i32 0
  %63 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %8, i64 0, i32 0, i32 1
  %64 = getelementptr inbounds %"class.std::__1::vector.7", %"class.std::__1::vector.7"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %65 = add nsw i32 %30, 1
  %66 = sext i32 %65 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 0, i64 24, i1 false) #11
  %67 = icmp eq i32 %65, 0
  br i1 %67, label %87, label %68

68:                                               ; preds = %59
  %69 = icmp slt i32 %65, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %68
  %71 = bitcast %"class.std::__1::vector.7"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %71) #13
  unreachable

72:                                               ; preds = %68
  %73 = shl nsw i64 %66, 2
  %74 = tail call i8* @_Znwm(i64 %73) #12
  %75 = bitcast i8* %74 to i32*
  %76 = bitcast %"class.std::__1::vector.7"* %8 to i8**
  store i8* %74, i8** %76, align 8
  %77 = getelementptr inbounds i32, i32* %75, i64 %66
  store i32* %77, i32** %64, align 8
  %78 = bitcast i32** %63 to i64*
  %79 = ptrtoint i8* %74 to i64
  %80 = add nsw i64 %66, -1
  %81 = getelementptr i32, i32* %75, i64 %80
  %82 = ptrtoint i32* %81 to i64
  %83 = sub i64 4, %79
  %84 = add i64 %83, %82
  %85 = and i64 %84, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %74, i8 0, i64 %85, i1 false) #11
  %86 = ptrtoint i32* %77 to i64
  store i64 %86, i64* %78, align 8
  br label %87

87:                                               ; preds = %59, %72
  %88 = sitofp i32 %18 to float
  %89 = sitofp i32 %28 to float
  %90 = fdiv float %88, %89
  %91 = sitofp i32 %23 to float
  %92 = sitofp i32 %30 to float
  %93 = fdiv float %91, %92
  %94 = icmp slt i32 %28, 0
  br i1 %94, label %102, label %95

95:                                               ; preds = %87
  %96 = sext i32 %28 to i64
  %97 = fmul float %90, 0.000000e+00
  %98 = tail call float @llvm.round.f32(float %97) #11
  %99 = fptosi float %98 to i32
  %100 = add nsw i32 %17, %99
  store i32 %100, i32* %60, align 4
  %101 = icmp eq i32 %28, 0
  br i1 %101, label %102, label %111

102:                                              ; preds = %111, %95, %87
  %103 = icmp slt i32 %30, 0
  br i1 %103, label %137, label %104

104:                                              ; preds = %102
  %105 = add nsw i32 %30, 1
  %106 = sext i32 %105 to i64
  %107 = and i64 %106, 1
  %108 = icmp eq i32 %30, 0
  br i1 %108, label %124, label %109

109:                                              ; preds = %104
  %110 = sub nsw i64 %106, %107
  br label %166

111:                                              ; preds = %95, %111
  %112 = phi i64 [ %113, %111 ], [ 0, %95 ]
  %113 = add nuw nsw i64 %112, 1
  %114 = load i32, i32* %16, align 4
  %115 = load i32*, i32** %34, align 8
  %116 = trunc i64 %113 to i32
  %117 = sitofp i32 %116 to float
  %118 = fmul float %90, %117
  %119 = tail call float @llvm.round.f32(float %118) #11
  %120 = fptosi float %119 to i32
  %121 = add nsw i32 %114, %120
  %122 = getelementptr inbounds i32, i32* %115, i64 %113
  store i32 %121, i32* %122, align 4
  %123 = icmp slt i64 %113, %96
  br i1 %123, label %111, label %102

124:                                              ; preds = %166, %104
  %125 = phi i64 [ 0, %104 ], [ %188, %166 ]
  %126 = icmp eq i64 %107, 0
  br i1 %126, label %137, label %127

127:                                              ; preds = %124
  %128 = load i32, i32* %21, align 4
  %129 = trunc i64 %125 to i32
  %130 = sitofp i32 %129 to float
  %131 = fmul float %93, %130
  %132 = tail call float @llvm.round.f32(float %131) #11
  %133 = fptosi float %132 to i32
  %134 = add nsw i32 %128, %133
  %135 = load i32*, i32** %62, align 8
  %136 = getelementptr inbounds i32, i32* %135, i64 %125
  store i32 %134, i32* %136, align 4
  br label %137

137:                                              ; preds = %127, %124, %102
  %138 = bitcast %"class.std::__1::vector"* %3 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %141 = bitcast i32** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = bitcast %"class.std::__1::vector.14"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142) #11
  %143 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %9, i64 0, i32 0, i32 1
  %144 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %142, i8 0, i64 24, i1 false) #11
  %145 = icmp sgt i32 %23, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %137
  %147 = bitcast %struct.SkIRect** %143 to i64*
  br label %201

148:                                              ; preds = %137
  %149 = icmp sgt i32 %18, 0
  %150 = bitcast { i64, i64 }* %10 to i8*
  %151 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 1
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i64 0, i32 0
  %153 = bitcast %"class.std::__1::vector"* %12 to i8*
  %154 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %155 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %156 = bitcast i32* %13 to i8*
  %157 = bitcast i32** %155 to i64*
  %158 = bitcast %"class.std::__1::vector"* %12 to i64*
  %159 = sitofp i32 %32 to float
  %160 = fmul float %159, 0x3FC99999A0000000
  %161 = bitcast %struct.SkIRect** %143 to i64*
  %162 = bitcast %"class.std::__1::vector.14"* %9 to i64*
  %163 = bitcast %struct.SkIRect** %144 to i64*
  %164 = sext i32 %28 to i64
  %165 = sext i32 %30 to i64
  br label %191

166:                                              ; preds = %166, %109
  %167 = phi i64 [ 0, %109 ], [ %188, %166 ]
  %168 = phi i64 [ %110, %109 ], [ %189, %166 ]
  %169 = load i32, i32* %21, align 4
  %170 = trunc i64 %167 to i32
  %171 = sitofp i32 %170 to float
  %172 = fmul float %93, %171
  %173 = tail call float @llvm.round.f32(float %172) #11
  %174 = fptosi float %173 to i32
  %175 = add nsw i32 %169, %174
  %176 = load i32*, i32** %62, align 8
  %177 = getelementptr inbounds i32, i32* %176, i64 %167
  store i32 %175, i32* %177, align 4
  %178 = or i64 %167, 1
  %179 = load i32, i32* %21, align 4
  %180 = trunc i64 %178 to i32
  %181 = sitofp i32 %180 to float
  %182 = fmul float %93, %181
  %183 = tail call float @llvm.round.f32(float %182) #11
  %184 = fptosi float %183 to i32
  %185 = add nsw i32 %179, %184
  %186 = load i32*, i32** %62, align 8
  %187 = getelementptr inbounds i32, i32* %186, i64 %178
  store i32 %185, i32* %187, align 4
  %188 = add nuw nsw i64 %167, 2
  %189 = add i64 %168, -2
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %124, label %166

191:                                              ; preds = %148, %238
  %192 = phi i64 [ 0, %148 ], [ %196, %238 ]
  %193 = phi i32 [ 0, %148 ], [ %241, %238 ]
  %194 = phi i32 [ 0, %148 ], [ %240, %238 ]
  %195 = phi i32 [ 0, %148 ], [ %239, %238 ]
  %196 = add nuw nsw i64 %192, 1
  br i1 %149, label %243, label %238

197:                                              ; preds = %238
  %198 = load i64, i64* %161, align 8
  %199 = load i64, i64* %162, align 8
  %200 = inttoptr i64 %199 to %struct.SkIRect*
  br label %201

201:                                              ; preds = %146, %197
  %202 = phi i64* [ %147, %146 ], [ %161, %197 ]
  %203 = phi %struct.SkIRect* [ null, %146 ], [ %200, %197 ]
  %204 = phi i64 [ 0, %146 ], [ %199, %197 ]
  %205 = phi i64 [ 0, %146 ], [ %198, %197 ]
  %206 = phi i32 [ 0, %146 ], [ %239, %197 ]
  %207 = phi i32 [ 0, %146 ], [ %240, %197 ]
  %208 = phi i32 [ 0, %146 ], [ %241, %197 ]
  %209 = sitofp i32 %206 to float
  %210 = add nsw i32 %207, %206
  %211 = sitofp i32 %210 to float
  %212 = fdiv float %209, %211
  store float %212, float* %4, align 4
  %213 = sub i64 %205, %204
  %214 = ashr exact i64 %213, 4
  %215 = uitofp i64 %214 to float
  %216 = sitofp i32 %208 to float
  %217 = fdiv float %215, %216
  %218 = fsub float 1.000000e+00, %217
  store float %218, float* %5, align 4
  %219 = icmp eq %struct.SkIRect* %203, null
  br i1 %219, label %223, label %220

220:                                              ; preds = %201
  %221 = ptrtoint %struct.SkIRect* %203 to i64
  store i64 %221, i64* %202, align 8
  %222 = bitcast %struct.SkIRect* %203 to i8*
  call void @_ZdlPv(i8* %222) #12
  br label %223

223:                                              ; preds = %201, %220
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142) #11
  %224 = load i32*, i32** %62, align 8
  %225 = icmp eq i32* %224, null
  br i1 %225, label %230, label %226

226:                                              ; preds = %223
  %227 = ptrtoint i32* %224 to i64
  %228 = bitcast i32** %63 to i64*
  store i64 %227, i64* %228, align 8
  %229 = bitcast i32* %224 to i8*
  call void @_ZdlPv(i8* %229) #12
  br label %230

230:                                              ; preds = %223, %226
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #11
  %231 = load i32*, i32** %34, align 8
  %232 = icmp eq i32* %231, null
  br i1 %232, label %237, label %233

233:                                              ; preds = %230
  %234 = ptrtoint i32* %231 to i64
  %235 = bitcast i32** %35 to i64*
  store i64 %234, i64* %235, align 8
  %236 = bitcast i32* %231 to i8*
  call void @_ZdlPv(i8* %236) #12
  br label %237

237:                                              ; preds = %230, %233
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #11
  ret void

238:                                              ; preds = %356, %191
  %239 = phi i32 [ %195, %191 ], [ %289, %356 ]
  %240 = phi i32 [ %194, %191 ], [ %287, %356 ]
  %241 = phi i32 [ %193, %191 ], [ %350, %356 ]
  %242 = icmp slt i64 %196, %165
  br i1 %242, label %191, label %197

243:                                              ; preds = %191, %356
  %244 = phi i64 [ %254, %356 ], [ 0, %191 ]
  %245 = phi i32 [ %350, %356 ], [ %193, %191 ]
  %246 = phi i32 [ %287, %356 ], [ %194, %191 ]
  %247 = phi i32 [ %289, %356 ], [ %195, %191 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %150) #11
  %248 = load i32*, i32** %34, align 8
  %249 = getelementptr inbounds i32, i32* %248, i64 %244
  %250 = load i32, i32* %249, align 4
  %251 = load i32*, i32** %62, align 8
  %252 = getelementptr inbounds i32, i32* %251, i64 %192
  %253 = load i32, i32* %252, align 4
  %254 = add nuw nsw i64 %244, 1
  %255 = getelementptr inbounds i32, i32* %248, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = sub nsw i32 %256, %250
  %258 = getelementptr inbounds i32, i32* %251, i64 %196
  %259 = load i32, i32* %258, align 4
  %260 = sub nsw i32 %259, %253
  %261 = sext i32 %250 to i64
  %262 = sext i32 %257 to i64
  %263 = add nsw i64 %262, %261
  %264 = icmp slt i64 %263, 2147483647
  %265 = select i1 %264, i64 %263, i64 2147483647
  %266 = icmp sgt i64 %265, -2147483647
  %267 = select i1 %266, i64 %265, i64 -2147483647
  %268 = sext i32 %253 to i64
  %269 = sext i32 %260 to i64
  %270 = add nsw i64 %269, %268
  %271 = icmp slt i64 %270, 2147483647
  %272 = select i1 %271, i64 %270, i64 2147483647
  %273 = icmp sgt i64 %272, -2147483647
  %274 = select i1 %273, i64 %272, i64 -2147483647
  %275 = zext i32 %253 to i64
  %276 = shl nuw i64 %275, 32
  %277 = zext i32 %250 to i64
  %278 = or i64 %276, %277
  %279 = shl nsw i64 %274, 32
  %280 = and i64 %267, 4294967295
  %281 = or i64 %279, %280
  store i64 %278, i64* %152, align 8
  store i64 %281, i64* %151, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %153) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 0, i64 24, i1 false) #11
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #11
  store i32 -1431655766, i32* %13, align 4
  call void @_ZNK5blink23DarkModeImageClassifier15GetBlockSamplesERK8SkPixmapRK7SkIRectiPNSt3__16vectorIjNS7_9allocatorIjEEEEPi(%"class.blink::DarkModeImageClassifier"* undef, %class.SkPixmap* dereferenceable(40) %1, %struct.SkIRect* nonnull dereferenceable(16) %11, i32 %32, %"class.std::__1::vector"* nonnull %12, i32* nonnull %13)
  %282 = load i64, i64* %157, align 8
  %283 = load i64, i64* %158, align 8
  %284 = sub i64 %282, %283
  %285 = lshr exact i64 %284, 2
  %286 = trunc i64 %285 to i32
  %287 = add nsw i32 %246, %286
  %288 = load i32, i32* %13, align 4
  %289 = add nsw i32 %288, %247
  %290 = load i32*, i32** %140, align 8
  %291 = inttoptr i64 %283 to i32*
  %292 = inttoptr i64 %282 to i32*
  %293 = call i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector"* %3, i32* %290, i32* %291, i32* %292)
  %294 = sitofp i32 %287 to float
  %295 = fcmp olt float %160, %294
  br i1 %295, label %296, label %349

296:                                              ; preds = %243
  %297 = load %struct.SkIRect*, %struct.SkIRect** %143, align 8
  %298 = load %struct.SkIRect*, %struct.SkIRect** %144, align 8
  %299 = icmp eq %struct.SkIRect* %297, %298
  %300 = ptrtoint %struct.SkIRect* %298 to i64
  br i1 %299, label %305, label %301

301:                                              ; preds = %296
  %302 = bitcast %struct.SkIRect* %297 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %302, i8* nonnull align 8 %150, i64 16, i1 false) #11
  %303 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %297, i64 1
  %304 = ptrtoint %struct.SkIRect* %303 to i64
  store i64 %304, i64* %161, align 8
  br label %349

305:                                              ; preds = %296
  %306 = ptrtoint %struct.SkIRect* %297 to i64
  %307 = load i64, i64* %162, align 8
  %308 = sub i64 %306, %307
  %309 = ashr exact i64 %308, 4
  %310 = add nsw i64 %309, 1
  %311 = icmp ugt i64 %310, 1152921504606846975
  br i1 %311, label %312, label %314

312:                                              ; preds = %305
  %313 = bitcast %"class.std::__1::vector.14"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %313) #13
  unreachable

314:                                              ; preds = %305
  %315 = sub i64 %300, %307
  %316 = ashr exact i64 %315, 4
  %317 = icmp ult i64 %316, 576460752303423487
  br i1 %317, label %318, label %326

318:                                              ; preds = %314
  %319 = ashr exact i64 %315, 3
  %320 = icmp ult i64 %319, %310
  %321 = select i1 %320, i64 %310, i64 %319
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %331, label %323

323:                                              ; preds = %318
  %324 = icmp ugt i64 %321, 1152921504606846975
  br i1 %324, label %325, label %326

325:                                              ; preds = %323
  call void @abort() #13
  unreachable

326:                                              ; preds = %323, %314
  %327 = phi i64 [ %321, %323 ], [ 1152921504606846975, %314 ]
  %328 = shl i64 %327, 4
  %329 = call i8* @_Znwm(i64 %328) #12
  %330 = bitcast i8* %329 to %struct.SkIRect*
  br label %331

331:                                              ; preds = %326, %318
  %332 = phi i64 [ %327, %326 ], [ 0, %318 ]
  %333 = phi i8* [ %329, %326 ], [ null, %318 ]
  %334 = phi %struct.SkIRect* [ %330, %326 ], [ null, %318 ]
  %335 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %334, i64 %309
  %336 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %334, i64 %332
  %337 = ptrtoint %struct.SkIRect* %336 to i64
  %338 = bitcast %struct.SkIRect* %335 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %338, i8* nonnull align 8 %150, i64 16, i1 false) #11
  %339 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %335, i64 1
  %340 = ptrtoint %struct.SkIRect* %339 to i64
  %341 = ptrtoint %struct.SkIRect* %334 to i64
  %342 = icmp sgt i64 %308, 0
  br i1 %342, label %343, label %345

343:                                              ; preds = %331
  %344 = inttoptr i64 %307 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %333, i8* align 4 %344, i64 %308, i1 false) #11
  br label %345

345:                                              ; preds = %343, %331
  store i64 %341, i64* %162, align 8
  store i64 %340, i64* %161, align 8
  store i64 %337, i64* %163, align 8
  %346 = icmp eq i64 %307, 0
  br i1 %346, label %349, label %347

347:                                              ; preds = %345
  %348 = inttoptr i64 %307 to i8*
  call void @_ZdlPv(i8* %348) #12
  br label %349

349:                                              ; preds = %347, %345, %301, %243
  %350 = add nsw i32 %245, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #11
  %351 = load i32*, i32** %154, align 8
  %352 = icmp eq i32* %351, null
  br i1 %352, label %356, label %353

353:                                              ; preds = %349
  %354 = ptrtoint i32* %351 to i64
  store i64 %354, i64* %157, align 8
  %355 = bitcast i32* %351 to i8*
  call void @_ZdlPv(i8* %355) #12
  br label %356

356:                                              ; preds = %349, %353
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %153) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %150) #11
  %357 = icmp slt i64 %254, %164
  br i1 %357, label %243, label %238
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, <2 x float> } @_ZNK5blink23DarkModeImageClassifier15ComputeFeaturesERKNSt3__16vectorIjNS1_9allocatorIjEEEEff(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), float, float) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = lshr exact i64 %10, 2
  %12 = trunc i64 %11 to i32
  %13 = inttoptr i64 %9 to i32*
  %14 = inttoptr i64 %7 to i32*
  %15 = icmp eq i32* %14, %13
  br i1 %15, label %85, label %16

16:                                               ; preds = %4
  %17 = getelementptr i32, i32* %14, i64 -1
  %18 = bitcast i32* %17 to i8*
  %19 = sub i64 0, %9
  %20 = getelementptr i8, i8* %18, i64 %19
  %21 = ptrtoint i8* %20 to i64
  %22 = lshr i64 %21, 2
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i64 %23, 8
  br i1 %24, label %25, label %28

25:                                               ; preds = %77, %16
  %26 = phi i32 [ 0, %16 ], [ %83, %77 ]
  %27 = phi i32* [ %13, %16 ], [ %30, %77 ]
  br label %102

28:                                               ; preds = %16
  %29 = and i64 %23, 9223372036854775800
  %30 = getelementptr i32, i32* %13, i64 %29
  br label %31

31:                                               ; preds = %31, %28
  %32 = phi i64 [ 0, %28 ], [ %75, %31 ]
  %33 = phi <4 x i32> [ zeroinitializer, %28 ], [ %73, %31 ]
  %34 = phi <4 x i32> [ zeroinitializer, %28 ], [ %74, %31 ]
  %35 = getelementptr i32, i32* %13, i64 %32
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4
  %38 = getelementptr i32, i32* %35, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4
  %41 = lshr <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %42 = lshr <4 x i32> %40, <i32 16, i32 16, i32 16, i32 16>
  %43 = and <4 x i32> %41, <i32 255, i32 255, i32 255, i32 255>
  %44 = and <4 x i32> %42, <i32 255, i32 255, i32 255, i32 255>
  %45 = lshr <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %46 = lshr <4 x i32> %40, <i32 8, i32 8, i32 8, i32 8>
  %47 = and <4 x i32> %45, <i32 255, i32 255, i32 255, i32 255>
  %48 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %49 = sub nsw <4 x i32> %43, %47
  %50 = sub nsw <4 x i32> %44, %48
  %51 = icmp slt <4 x i32> %49, zeroinitializer
  %52 = icmp slt <4 x i32> %50, zeroinitializer
  %53 = sub nsw <4 x i32> zeroinitializer, %49
  %54 = sub nsw <4 x i32> zeroinitializer, %50
  %55 = select <4 x i1> %51, <4 x i32> %53, <4 x i32> %49
  %56 = select <4 x i1> %52, <4 x i32> %54, <4 x i32> %50
  %57 = and <4 x i32> %37, <i32 255, i32 255, i32 255, i32 255>
  %58 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %59 = sub nsw <4 x i32> %47, %57
  %60 = sub nsw <4 x i32> %48, %58
  %61 = icmp slt <4 x i32> %59, zeroinitializer
  %62 = icmp slt <4 x i32> %60, zeroinitializer
  %63 = sub nsw <4 x i32> zeroinitializer, %59
  %64 = sub nsw <4 x i32> zeroinitializer, %60
  %65 = select <4 x i1> %61, <4 x i32> %63, <4 x i32> %59
  %66 = select <4 x i1> %62, <4 x i32> %64, <4 x i32> %60
  %67 = add nuw nsw <4 x i32> %55, %65
  %68 = add nuw nsw <4 x i32> %56, %66
  %69 = icmp sgt <4 x i32> %67, <i32 8, i32 8, i32 8, i32 8>
  %70 = icmp sgt <4 x i32> %68, <i32 8, i32 8, i32 8, i32 8>
  %71 = zext <4 x i1> %69 to <4 x i32>
  %72 = zext <4 x i1> %70 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %33, %71
  %74 = add nuw nsw <4 x i32> %34, %72
  %75 = add i64 %32, 8
  %76 = icmp eq i64 %75, %29
  br i1 %76, label %77, label %31, !llvm.loop !7

77:                                               ; preds = %31
  %78 = add nuw <4 x i32> %74, %73
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = icmp eq i64 %23, %29
  br i1 %84, label %85, label %25

85:                                               ; preds = %102, %77, %4
  %86 = phi i32 [ 0, %4 ], [ %83, %77 ], [ %122, %102 ]
  %87 = sdiv i32 %12, 100
  %88 = icmp sgt i32 %86, %87
  %89 = xor i1 %88, true
  %90 = zext i1 %89 to i32
  %91 = tail call float @_ZNK5blink23DarkModeImageClassifier24ComputeColorBucketsRatioERKNSt3__16vectorIjNS1_9allocatorIjEEEENS0_9ColorModeE(%"class.blink::DarkModeImageClassifier"* undef, %"class.std::__1::vector"* dereferenceable(24) %1, i32 %90)
  %92 = bitcast float %91 to i32
  %93 = insertelement <2 x float> undef, float %2, i32 0
  %94 = insertelement <2 x float> %93, float %3, i32 1
  %95 = zext i1 %88 to i64
  %96 = zext i32 %92 to i64
  %97 = shl nuw i64 %96, 32
  %98 = or i64 %97, %95
  %99 = or i64 %98, 2863311360
  %100 = insertvalue { i64, <2 x float> } undef, i64 %99, 0
  %101 = insertvalue { i64, <2 x float> } %100, <2 x float> %94, 1
  ret { i64, <2 x float> } %101

102:                                              ; preds = %25, %102
  %103 = phi i32 [ %122, %102 ], [ %26, %25 ]
  %104 = phi i32* [ %123, %102 ], [ %27, %25 ]
  %105 = load i32, i32* %104, align 4
  %106 = lshr i32 %105, 16
  %107 = and i32 %106, 255
  %108 = lshr i32 %105, 8
  %109 = and i32 %108, 255
  %110 = sub nsw i32 %107, %109
  %111 = icmp slt i32 %110, 0
  %112 = sub nsw i32 0, %110
  %113 = select i1 %111, i32 %112, i32 %110
  %114 = and i32 %105, 255
  %115 = sub nsw i32 %109, %114
  %116 = icmp slt i32 %115, 0
  %117 = sub nsw i32 0, %115
  %118 = select i1 %116, i32 %117, i32 %115
  %119 = add nuw nsw i32 %113, %118
  %120 = icmp sgt i32 %119, 8
  %121 = zext i1 %120 to i32
  %122 = add nuw nsw i32 %103, %121
  %123 = getelementptr inbounds i32, i32* %104, i64 1
  %124 = icmp eq i32* %123, %14
  br i1 %124, label %85, label %102, !llvm.loop !8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink23DarkModeImageClassifier15GetBlockSamplesERK8SkPixmapRK7SkIRectiPNSt3__16vectorIjNS7_9allocatorIjEEEEPi(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %class.SkPixmap* dereferenceable(40), %struct.SkIRect* nocapture readonly dereferenceable(16), i32, %"class.std::__1::vector"*, i32* nocapture) local_unnamed_addr #1 align 2 {
  store i32 0, i32* %5, align 4
  %7 = bitcast %"class.std::__1::vector"* %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = sub i32 %12, %14
  %16 = sitofp i32 %15 to float
  %17 = fpext float %16 to double
  %18 = sitofp i32 %3 to double
  %19 = tail call double @sqrt(double %18) #11
  %20 = fdiv double %17, %19
  %21 = tail call double @llvm.ceil.f64(double %20)
  %22 = fptosi double %21 to i32
  %23 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = sub i32 %24, %26
  %28 = sitofp i32 %27 to float
  %29 = fpext float %28 to double
  %30 = tail call double @sqrt(double %18) #11
  %31 = fdiv double %29, %30
  %32 = tail call double @llvm.ceil.f64(double %31)
  %33 = fptosi double %32 to i32
  %34 = load i32, i32* %25, align 4
  %35 = load i32, i32* %23, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %42

37:                                               ; preds = %6
  %38 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %39 = bitcast i32** %38 to i64*
  %40 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %41 = load i32, i32* %11, align 4
  br label %43

42:                                               ; preds = %51, %6
  ret void

43:                                               ; preds = %37, %51
  %44 = phi i32 [ %35, %37 ], [ %52, %51 ]
  %45 = phi i32 [ %41, %37 ], [ %53, %51 ]
  %46 = phi i32 [ %34, %37 ], [ %54, %51 ]
  %47 = load i32, i32* %13, align 4
  %48 = icmp slt i32 %47, %45
  br i1 %48, label %56, label %51

49:                                               ; preds = %123
  %50 = load i32, i32* %23, align 4
  br label %51

51:                                               ; preds = %49, %43
  %52 = phi i32 [ %50, %49 ], [ %44, %43 ]
  %53 = phi i32 [ %125, %49 ], [ %45, %43 ]
  %54 = add nsw i32 %46, %33
  %55 = icmp slt i32 %54, %52
  br i1 %55, label %43, label %42

56:                                               ; preds = %43, %123
  %57 = phi i32 [ %124, %123 ], [ %47, %43 ]
  %58 = tail call i32 @_ZNK8SkPixmap8getColorEii(%class.SkPixmap* %1, i32 %57, i32 %46) #11
  %59 = icmp sgt i32 %58, -1
  br i1 %59, label %60, label %63

60:                                               ; preds = %56
  %61 = load i32, i32* %5, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %5, align 4
  br label %123

63:                                               ; preds = %56
  %64 = load i32*, i32** %9, align 8
  %65 = load i32*, i32** %38, align 8
  %66 = icmp eq i32* %64, %65
  %67 = ptrtoint i32* %65 to i64
  br i1 %66, label %71, label %68

68:                                               ; preds = %63
  store i32 %58, i32* %64, align 4
  %69 = getelementptr inbounds i32, i32* %64, i64 1
  %70 = ptrtoint i32* %69 to i64
  store i64 %70, i64* %10, align 8
  br label %123

71:                                               ; preds = %63
  %72 = ptrtoint i32* %64 to i64
  %73 = load i64, i64* %7, align 8
  %74 = sub i64 %72, %73
  %75 = ashr exact i64 %74, 2
  %76 = add nsw i64 %75, 1
  %77 = icmp ugt i64 %76, 4611686018427387903
  br i1 %77, label %78, label %80

78:                                               ; preds = %71
  %79 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %79) #13
  unreachable

80:                                               ; preds = %71
  %81 = sub i64 %67, %73
  %82 = ashr exact i64 %81, 2
  %83 = icmp ult i64 %82, 2305843009213693951
  br i1 %83, label %84, label %92

84:                                               ; preds = %80
  %85 = ashr exact i64 %81, 1
  %86 = icmp ult i64 %85, %76
  %87 = select i1 %86, i64 %76, i64 %85
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %97, label %89

89:                                               ; preds = %84
  %90 = icmp ugt i64 %87, 4611686018427387903
  br i1 %90, label %91, label %92

91:                                               ; preds = %89
  tail call void @abort() #13
  unreachable

92:                                               ; preds = %89, %80
  %93 = phi i64 [ %87, %89 ], [ 4611686018427387903, %80 ]
  %94 = shl i64 %93, 2
  %95 = tail call i8* @_Znwm(i64 %94) #12
  %96 = bitcast i8* %95 to i32*
  br label %97

97:                                               ; preds = %92, %84
  %98 = phi i64 [ %93, %92 ], [ 0, %84 ]
  %99 = phi i32* [ %96, %92 ], [ null, %84 ]
  %100 = getelementptr inbounds i32, i32* %99, i64 %75
  %101 = getelementptr inbounds i32, i32* %99, i64 %98
  %102 = ptrtoint i32* %101 to i64
  store i32 %58, i32* %100, align 4
  %103 = getelementptr inbounds i32, i32* %100, i64 1
  %104 = ptrtoint i32* %103 to i64
  %105 = load i32*, i32** %40, align 8
  %106 = load i64, i64* %10, align 8
  %107 = ptrtoint i32* %105 to i64
  %108 = sub i64 %106, %107
  %109 = ashr exact i64 %108, 2
  %110 = sub nsw i64 0, %109
  %111 = getelementptr inbounds i32, i32* %100, i64 %110
  %112 = ptrtoint i32* %111 to i64
  %113 = icmp sgt i64 %108, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %97
  %115 = bitcast i32* %111 to i8*
  %116 = bitcast i32* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %116, i64 %108, i1 false) #11
  %117 = load i32*, i32** %40, align 8
  br label %118

118:                                              ; preds = %114, %97
  %119 = phi i32* [ %105, %97 ], [ %117, %114 ]
  store i64 %112, i64* %7, align 8
  store i64 %104, i64* %10, align 8
  store i64 %102, i64* %39, align 8
  %120 = icmp eq i32* %119, null
  br i1 %120, label %123, label %121

121:                                              ; preds = %118
  %122 = bitcast i32* %119 to i8*
  tail call void @_ZdlPv(i8* %122) #12
  br label %123

123:                                              ; preds = %121, %118, %68, %60
  %124 = add nsw i32 %57, %22
  %125 = load i32, i32* %11, align 4
  %126 = icmp slt i32 %124, %125
  br i1 %126, label %56, label %49
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIjNS_9allocatorIjEEE6insertINS_11__wrap_iterIPjEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS9_E9referenceEEE5valueES7_E4typeENS5_IPKjEES9_S9_(%"class.std::__1::vector"*, i32*, i32*, i32*) local_unnamed_addr #1 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = ptrtoint i32* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i32* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %706

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = icmp eq i32* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i32, i32* %3, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i32, i32* %3, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i32, i32* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %2, i64 %49
  %51 = icmp ult i32* %19, %50
  %52 = icmp ult i32* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr i32, i32* %19, i64 %55
  %57 = getelementptr i32, i32* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i32, i32* %19, i64 %66
  %69 = getelementptr i32, i32* %30, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !9
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !9
  %75 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !12, !noalias !9
  %76 = getelementptr i32, i32* %68, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !12, !noalias !9
  %78 = or i64 %66, 8
  %79 = getelementptr i32, i32* %19, i64 %78
  %80 = getelementptr i32, i32* %30, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !9
  %83 = getelementptr i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !9
  %86 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !12, !noalias !9
  %87 = getelementptr i32, i32* %79, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !12, !noalias !9
  %89 = or i64 %66, 16
  %90 = getelementptr i32, i32* %19, i64 %89
  %91 = getelementptr i32, i32* %30, i64 %89
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !9
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !9
  %97 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !12, !noalias !9
  %98 = getelementptr i32, i32* %90, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !12, !noalias !9
  %100 = or i64 %66, 24
  %101 = getelementptr i32, i32* %19, i64 %100
  %102 = getelementptr i32, i32* %30, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !9
  %105 = getelementptr i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !9
  %108 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !12, !noalias !9
  %109 = getelementptr i32, i32* %101, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !12, !noalias !9
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !14

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i32, i32* %19, i64 %118
  %121 = getelementptr i32, i32* %30, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !9
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !9
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !12, !noalias !9
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !12, !noalias !9
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !15

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i32* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i32* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i32* %137 to i64
  %139 = getelementptr i32, i32* %3, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i32* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i32* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i32, i32* %148, align 4
  store i32 %150, i32* %147, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  %152 = getelementptr inbounds i32, i32* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !17

155:                                              ; preds = %146, %135
  %156 = phi i32* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i32* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i32* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = getelementptr inbounds i32, i32* %161, i64 1
  %166 = load i32, i32* %164, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 2
  %168 = getelementptr inbounds i32, i32* %161, i64 2
  %169 = load i32, i32* %167, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 3
  %171 = getelementptr inbounds i32, i32* %161, i64 3
  %172 = load i32, i32* %170, align 4
  store i32 %172, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 4
  %174 = getelementptr inbounds i32, i32* %161, i64 4
  %175 = load i32, i32* %173, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 5
  %177 = getelementptr inbounds i32, i32* %161, i64 5
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 6
  %180 = getelementptr inbounds i32, i32* %161, i64 6
  %181 = load i32, i32* %179, align 4
  store i32 %181, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 7
  %183 = getelementptr inbounds i32, i32* %161, i64 7
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 8
  %186 = getelementptr inbounds i32, i32* %161, i64 8
  %187 = icmp eq i32* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !18

188:                                              ; preds = %155, %160, %133
  %189 = phi i32* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i32* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %706

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i32*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i32* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i32* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %12
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 2
  %204 = getelementptr inbounds i32, i32* %1, i64 %203
  %205 = icmp ult i32* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i32, i32* %19, i64 %207
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 2
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 8
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i32* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i32* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i32, i32* %19, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i32, i32* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add i64 %229, 1
  %231 = getelementptr i32, i32* %1, i64 %230
  %232 = icmp ult i32* %198, %231
  %233 = icmp ult i32* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 9223372036854775800
  %237 = getelementptr i32, i32* %198, i64 %236
  %238 = getelementptr i32, i32* %204, i64 %236
  %239 = add nsw i64 %236, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i32, i32* %198, i64 %247
  %250 = getelementptr i32, i32* %204, i64 %247
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !19
  %253 = getelementptr i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !19
  %256 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %256, align 4, !alias.scope !22, !noalias !19
  %257 = getelementptr i32, i32* %249, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4, !alias.scope !22, !noalias !19
  %259 = or i64 %247, 8
  %260 = getelementptr i32, i32* %198, i64 %259
  %261 = getelementptr i32, i32* %204, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !19
  %264 = getelementptr i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !19
  %267 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !22, !noalias !19
  %268 = getelementptr i32, i32* %260, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !22, !noalias !19
  %270 = or i64 %247, 16
  %271 = getelementptr i32, i32* %198, i64 %270
  %272 = getelementptr i32, i32* %204, i64 %270
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !19
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !19
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !22, !noalias !19
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !22, !noalias !19
  %281 = or i64 %247, 24
  %282 = getelementptr i32, i32* %198, i64 %281
  %283 = getelementptr i32, i32* %204, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !19
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !19
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !22, !noalias !19
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !22, !noalias !19
  %292 = add i64 %247, 32
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !24

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i32, i32* %198, i64 %299
  %302 = getelementptr i32, i32* %204, i64 %299
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !19
  %305 = getelementptr i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !19
  %308 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 4, !alias.scope !22, !noalias !19
  %309 = getelementptr i32, i32* %301, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 4, !alias.scope !22, !noalias !19
  %311 = add i64 %299, 8
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !25

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i32* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i32* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i32, i32* %198, i64 %323
  %325 = bitcast i32* %324 to i8*
  %326 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %325, i8* align 4 %326, i64 %202, i1 false) #11
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i32* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i32* [ %331, %327 ], [ %218, %216 ]
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %329, i64 1
  %332 = getelementptr inbounds i32, i32* %328, i64 1
  %333 = icmp ult i32* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !26

334:                                              ; preds = %319, %322
  %335 = ptrtoint i32* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %706, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %336, i1 false) #11
  br label %706

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 2
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 4611686018427387903
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #13
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 2
  %351 = icmp ult i64 %350, 2305843009213693951
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 2
  br label %365

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 1
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 2
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %355
  %363 = icmp ugt i64 %358, 4611686018427387903
  br i1 %363, label %364, label %365

364:                                              ; preds = %362
  tail call void @abort() #13
  unreachable

365:                                              ; preds = %352, %362
  %366 = phi i64 [ 4611686018427387903, %352 ], [ %358, %362 ]
  %367 = phi i64 [ %354, %352 ], [ %360, %362 ]
  %368 = shl i64 %366, 2
  %369 = tail call i8* @_Znwm(i64 %368) #12
  %370 = bitcast i8* %369 to i32*
  br label %371

371:                                              ; preds = %365, %355
  %372 = phi i64 [ %367, %365 ], [ %360, %355 ]
  %373 = phi i64 [ %366, %365 ], [ 0, %355 ]
  %374 = phi i32* [ %370, %365 ], [ null, %355 ]
  %375 = getelementptr inbounds i32, i32* %374, i64 %372
  %376 = getelementptr inbounds i32, i32* %374, i64 %373
  %377 = ptrtoint i32* %376 to i64
  %378 = getelementptr inbounds i32, i32* %375, i64 %12
  %379 = add i64 %11, -4
  %380 = lshr i64 %379, 2
  %381 = add nuw nsw i64 %380, 1
  %382 = icmp ult i64 %381, 8
  br i1 %382, label %475, label %383

383:                                              ; preds = %371
  %384 = add i64 %11, -4
  %385 = lshr i64 %384, 2
  %386 = add nsw i64 %372, %385
  %387 = add i64 %386, 1
  %388 = getelementptr i32, i32* %374, i64 %387
  %389 = add nuw nsw i64 %385, 1
  %390 = getelementptr i32, i32* %2, i64 %389
  %391 = icmp ult i32* %375, %390
  %392 = icmp ugt i32* %388, %2
  %393 = and i1 %391, %392
  br i1 %393, label %475, label %394

394:                                              ; preds = %383
  %395 = and i64 %381, 9223372036854775800
  %396 = getelementptr i32, i32* %375, i64 %395
  %397 = getelementptr i32, i32* %2, i64 %395
  %398 = add nsw i64 %395, -8
  %399 = lshr exact i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 24
  br i1 %402, label %454, label %403

403:                                              ; preds = %394
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %451, %405 ]
  %407 = phi i64 [ %404, %403 ], [ %452, %405 ]
  %408 = getelementptr i32, i32* %375, i64 %406
  %409 = getelementptr i32, i32* %2, i64 %406
  %410 = bitcast i32* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 4, !alias.scope !27
  %412 = getelementptr i32, i32* %409, i64 4
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 4, !alias.scope !27
  %415 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %415, align 4, !alias.scope !30, !noalias !27
  %416 = getelementptr i32, i32* %408, i64 4
  %417 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %417, align 4, !alias.scope !30, !noalias !27
  %418 = or i64 %406, 8
  %419 = getelementptr i32, i32* %375, i64 %418
  %420 = getelementptr i32, i32* %2, i64 %418
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4, !alias.scope !27
  %423 = getelementptr i32, i32* %420, i64 4
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !alias.scope !27
  %426 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %426, align 4, !alias.scope !30, !noalias !27
  %427 = getelementptr i32, i32* %419, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %428, align 4, !alias.scope !30, !noalias !27
  %429 = or i64 %406, 16
  %430 = getelementptr i32, i32* %375, i64 %429
  %431 = getelementptr i32, i32* %2, i64 %429
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4, !alias.scope !27
  %434 = getelementptr i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !alias.scope !27
  %437 = bitcast i32* %430 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %437, align 4, !alias.scope !30, !noalias !27
  %438 = getelementptr i32, i32* %430, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %439, align 4, !alias.scope !30, !noalias !27
  %440 = or i64 %406, 24
  %441 = getelementptr i32, i32* %375, i64 %440
  %442 = getelementptr i32, i32* %2, i64 %440
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !27
  %445 = getelementptr i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !27
  %448 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %448, align 4, !alias.scope !30, !noalias !27
  %449 = getelementptr i32, i32* %441, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %450, align 4, !alias.scope !30, !noalias !27
  %451 = add i64 %406, 32
  %452 = add i64 %407, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %405, !llvm.loop !32

454:                                              ; preds = %405, %394
  %455 = phi i64 [ 0, %394 ], [ %451, %405 ]
  %456 = icmp eq i64 %401, 0
  br i1 %456, label %473, label %457

457:                                              ; preds = %454, %457
  %458 = phi i64 [ %470, %457 ], [ %455, %454 ]
  %459 = phi i64 [ %471, %457 ], [ %401, %454 ]
  %460 = getelementptr i32, i32* %375, i64 %458
  %461 = getelementptr i32, i32* %2, i64 %458
  %462 = bitcast i32* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4, !alias.scope !27
  %464 = getelementptr i32, i32* %461, i64 4
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 4, !alias.scope !27
  %467 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %467, align 4, !alias.scope !30, !noalias !27
  %468 = getelementptr i32, i32* %460, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %469, align 4, !alias.scope !30, !noalias !27
  %470 = add i64 %458, 8
  %471 = add i64 %459, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %457, !llvm.loop !33

473:                                              ; preds = %457, %454
  %474 = icmp eq i64 %381, %395
  br i1 %474, label %529, label %475

475:                                              ; preds = %473, %383, %371
  %476 = phi i32* [ %375, %383 ], [ %375, %371 ], [ %396, %473 ]
  %477 = phi i32* [ %2, %383 ], [ %2, %371 ], [ %397, %473 ]
  %478 = ptrtoint i32* %476 to i64
  %479 = add nsw i64 %372, %12
  %480 = add nsw i64 %479, -1
  %481 = getelementptr i32, i32* %374, i64 %480
  %482 = ptrtoint i32* %481 to i64
  %483 = sub i64 %482, %478
  %484 = lshr i64 %483, 2
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 7
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %475, %488
  %489 = phi i32* [ %493, %488 ], [ %476, %475 ]
  %490 = phi i32* [ %494, %488 ], [ %477, %475 ]
  %491 = phi i64 [ %495, %488 ], [ %486, %475 ]
  %492 = load i32, i32* %490, align 4
  store i32 %492, i32* %489, align 4
  %493 = getelementptr inbounds i32, i32* %489, i64 1
  %494 = getelementptr inbounds i32, i32* %490, i64 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %488, !llvm.loop !34

497:                                              ; preds = %488, %475
  %498 = phi i32* [ %476, %475 ], [ %493, %488 ]
  %499 = phi i32* [ %477, %475 ], [ %494, %488 ]
  %500 = icmp ult i64 %483, 28
  br i1 %500, label %529, label %501

501:                                              ; preds = %497, %501
  %502 = phi i32* [ %526, %501 ], [ %498, %497 ]
  %503 = phi i32* [ %527, %501 ], [ %499, %497 ]
  %504 = load i32, i32* %503, align 4
  store i32 %504, i32* %502, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 1
  %506 = getelementptr inbounds i32, i32* %503, i64 1
  %507 = load i32, i32* %506, align 4
  store i32 %507, i32* %505, align 4
  %508 = getelementptr inbounds i32, i32* %502, i64 2
  %509 = getelementptr inbounds i32, i32* %503, i64 2
  %510 = load i32, i32* %509, align 4
  store i32 %510, i32* %508, align 4
  %511 = getelementptr inbounds i32, i32* %502, i64 3
  %512 = getelementptr inbounds i32, i32* %503, i64 3
  %513 = load i32, i32* %512, align 4
  store i32 %513, i32* %511, align 4
  %514 = getelementptr inbounds i32, i32* %502, i64 4
  %515 = getelementptr inbounds i32, i32* %503, i64 4
  %516 = load i32, i32* %515, align 4
  store i32 %516, i32* %514, align 4
  %517 = getelementptr inbounds i32, i32* %502, i64 5
  %518 = getelementptr inbounds i32, i32* %503, i64 5
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %517, align 4
  %520 = getelementptr inbounds i32, i32* %502, i64 6
  %521 = getelementptr inbounds i32, i32* %503, i64 6
  %522 = load i32, i32* %521, align 4
  store i32 %522, i32* %520, align 4
  %523 = getelementptr inbounds i32, i32* %502, i64 7
  %524 = getelementptr inbounds i32, i32* %503, i64 7
  %525 = load i32, i32* %524, align 4
  store i32 %525, i32* %523, align 4
  %526 = getelementptr inbounds i32, i32* %502, i64 8
  %527 = getelementptr inbounds i32, i32* %503, i64 8
  %528 = icmp eq i32* %378, %526
  br i1 %528, label %529, label %501, !llvm.loop !35

529:                                              ; preds = %497, %501, %473
  %530 = load i32*, i32** %9, align 8
  %531 = ptrtoint i32* %530 to i64
  %532 = sub i64 %7, %531
  %533 = ashr exact i64 %532, 2
  %534 = sub nsw i64 0, %533
  %535 = getelementptr inbounds i32, i32* %375, i64 %534
  %536 = ptrtoint i32* %535 to i64
  %537 = icmp sgt i64 %532, 0
  br i1 %537, label %538, label %541

538:                                              ; preds = %529
  %539 = bitcast i32* %535 to i8*
  %540 = bitcast i32* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %539, i8* align 4 %540, i64 %532, i1 false) #11
  br label %541

541:                                              ; preds = %538, %529
  %542 = load i32*, i32** %18, align 8
  %543 = icmp eq i32* %542, %1
  br i1 %543, label %699, label %544

544:                                              ; preds = %541
  %545 = getelementptr i32, i32* %542, i64 -1
  %546 = ptrtoint i32* %545 to i64
  %547 = sub i64 %546, %7
  %548 = lshr i64 %547, 2
  %549 = add nuw nsw i64 %548, 1
  %550 = icmp ult i64 %549, 8
  br i1 %550, label %646, label %551

551:                                              ; preds = %544
  %552 = add nsw i64 %372, %12
  %553 = getelementptr i32, i32* %542, i64 -1
  %554 = ptrtoint i32* %553 to i64
  %555 = sub i64 %554, %7
  %556 = lshr i64 %555, 2
  %557 = add nsw i64 %552, %556
  %558 = add i64 %557, 1
  %559 = getelementptr i32, i32* %374, i64 %558
  %560 = add nuw nsw i64 %556, 1
  %561 = getelementptr i32, i32* %1, i64 %560
  %562 = icmp ult i32* %378, %561
  %563 = icmp ugt i32* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %551
  %566 = and i64 %549, 9223372036854775800
  %567 = getelementptr i32, i32* %378, i64 %566
  %568 = getelementptr i32, i32* %1, i64 %566
  %569 = add nsw i64 %566, -8
  %570 = lshr exact i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 24
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i32, i32* %378, i64 %577
  %580 = getelementptr i32, i32* %1, i64 %577
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !36
  %583 = getelementptr i32, i32* %580, i64 4
  %584 = bitcast i32* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !alias.scope !36
  %586 = bitcast i32* %579 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %586, align 4, !alias.scope !39, !noalias !36
  %587 = getelementptr i32, i32* %579, i64 4
  %588 = bitcast i32* %587 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %588, align 4, !alias.scope !39, !noalias !36
  %589 = or i64 %577, 8
  %590 = getelementptr i32, i32* %378, i64 %589
  %591 = getelementptr i32, i32* %1, i64 %589
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4, !alias.scope !36
  %594 = getelementptr i32, i32* %591, i64 4
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4, !alias.scope !36
  %597 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %597, align 4, !alias.scope !39, !noalias !36
  %598 = getelementptr i32, i32* %590, i64 4
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %599, align 4, !alias.scope !39, !noalias !36
  %600 = or i64 %577, 16
  %601 = getelementptr i32, i32* %378, i64 %600
  %602 = getelementptr i32, i32* %1, i64 %600
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4, !alias.scope !36
  %605 = getelementptr i32, i32* %602, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4, !alias.scope !36
  %608 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %604, <4 x i32>* %608, align 4, !alias.scope !39, !noalias !36
  %609 = getelementptr i32, i32* %601, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  store <4 x i32> %607, <4 x i32>* %610, align 4, !alias.scope !39, !noalias !36
  %611 = or i64 %577, 24
  %612 = getelementptr i32, i32* %378, i64 %611
  %613 = getelementptr i32, i32* %1, i64 %611
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4, !alias.scope !36
  %616 = getelementptr i32, i32* %613, i64 4
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4, !alias.scope !36
  %619 = bitcast i32* %612 to <4 x i32>*
  store <4 x i32> %615, <4 x i32>* %619, align 4, !alias.scope !39, !noalias !36
  %620 = getelementptr i32, i32* %612, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %618, <4 x i32>* %621, align 4, !alias.scope !39, !noalias !36
  %622 = add i64 %577, 32
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !41

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i32, i32* %378, i64 %629
  %632 = getelementptr i32, i32* %1, i64 %629
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !36
  %635 = getelementptr i32, i32* %632, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !36
  %638 = bitcast i32* %631 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %638, align 4, !alias.scope !39, !noalias !36
  %639 = getelementptr i32, i32* %631, i64 4
  %640 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %640, align 4, !alias.scope !39, !noalias !36
  %641 = add i64 %629, 8
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !42

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %549, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %551, %544
  %647 = phi i32* [ %378, %551 ], [ %378, %544 ], [ %567, %644 ]
  %648 = phi i32* [ %1, %551 ], [ %1, %544 ], [ %568, %644 ]
  %649 = ptrtoint i32* %648 to i64
  %650 = getelementptr i32, i32* %542, i64 -1
  %651 = ptrtoint i32* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 2
  %654 = add nuw nsw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i32* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i32* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i32, i32* %659, align 4
  store i32 %661, i32* %658, align 4
  %662 = getelementptr inbounds i32, i32* %659, i64 1
  %663 = getelementptr inbounds i32, i32* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !43

666:                                              ; preds = %657, %646
  %667 = phi i32* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i32* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i32* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 28
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i32* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i32* [ %696, %671 ], [ %669, %666 ]
  %674 = load i32, i32* %673, align 4
  store i32 %674, i32* %672, align 4
  %675 = getelementptr inbounds i32, i32* %673, i64 1
  %676 = getelementptr inbounds i32, i32* %672, i64 1
  %677 = load i32, i32* %675, align 4
  store i32 %677, i32* %676, align 4
  %678 = getelementptr inbounds i32, i32* %673, i64 2
  %679 = getelementptr inbounds i32, i32* %672, i64 2
  %680 = load i32, i32* %678, align 4
  store i32 %680, i32* %679, align 4
  %681 = getelementptr inbounds i32, i32* %673, i64 3
  %682 = getelementptr inbounds i32, i32* %672, i64 3
  %683 = load i32, i32* %681, align 4
  store i32 %683, i32* %682, align 4
  %684 = getelementptr inbounds i32, i32* %673, i64 4
  %685 = getelementptr inbounds i32, i32* %672, i64 4
  %686 = load i32, i32* %684, align 4
  store i32 %686, i32* %685, align 4
  %687 = getelementptr inbounds i32, i32* %673, i64 5
  %688 = getelementptr inbounds i32, i32* %672, i64 5
  %689 = load i32, i32* %687, align 4
  store i32 %689, i32* %688, align 4
  %690 = getelementptr inbounds i32, i32* %673, i64 6
  %691 = getelementptr inbounds i32, i32* %672, i64 6
  %692 = load i32, i32* %690, align 4
  store i32 %692, i32* %691, align 4
  %693 = getelementptr inbounds i32, i32* %673, i64 7
  %694 = getelementptr inbounds i32, i32* %672, i64 7
  %695 = load i32, i32* %693, align 4
  store i32 %695, i32* %694, align 4
  %696 = getelementptr inbounds i32, i32* %673, i64 8
  %697 = getelementptr inbounds i32, i32* %672, i64 8
  %698 = icmp eq i32* %696, %542
  br i1 %698, label %699, label %671, !llvm.loop !44

699:                                              ; preds = %666, %671, %644, %541
  %700 = phi i32* [ %378, %541 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i32* %700 to i64
  %702 = load i32*, i32** %9, align 8
  store i64 %536, i64* %340, align 8
  store i64 %701, i64* %24, align 8
  store i64 %377, i64* %16, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i32* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #12
  br label %706

706:                                              ; preds = %704, %699, %191, %334, %338, %4
  %707 = phi i32* [ %1, %4 ], [ %1, %338 ], [ %1, %334 ], [ %1, %191 ], [ %375, %699 ], [ %375, %704 ]
  ret i32* %707
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #3

declare i32 @_ZNK8SkPixmap8getColorEii(%class.SkPixmap*, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink23DarkModeImageClassifier24ComputeColorBucketsRatioERKNSt3__16vectorIjNS1_9allocatorIjEEEENS0_9ColorModeE(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %"class.std::__1::vector"* nocapture readonly dereferenceable(24), i32) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::set", align 8
  %5 = bitcast %"class.std::__1::set"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %10 = bitcast %"class.std::__1::__tree_node_base"** %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #11
  store %"class.std::__1::__tree_end_node"* %9, %"class.std::__1::__tree_end_node"** %6, align 8
  %11 = icmp eq i32 %2, 0
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %15 = load i32*, i32** %14, align 8
  %16 = icmp eq i32* %13, %15
  br i1 %11, label %22, label %17

17:                                               ; preds = %3
  br i1 %16, label %176, label %18

18:                                               ; preds = %17
  %19 = bitcast %"class.std::__1::__tree_end_node"* %9 to %"class.std::__1::__tree_node"**
  %20 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %9, i64 0, i32 0
  %21 = bitcast %"class.std::__1::set"* %4 to i64*
  br label %100

22:                                               ; preds = %3
  br i1 %16, label %176, label %23

23:                                               ; preds = %22
  %24 = bitcast %"class.std::__1::__tree_end_node"* %9 to %"class.std::__1::__tree_node"**
  %25 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %9, i64 0, i32 0
  %26 = bitcast %"class.std::__1::set"* %4 to i64*
  br label %27

27:                                               ; preds = %98, %23
  %28 = phi i64 [ 0, %23 ], [ %95, %98 ]
  %29 = phi %"class.std::__1::__tree_node"* [ null, %23 ], [ %99, %98 ]
  %30 = phi i32* [ %13, %23 ], [ %96, %98 ]
  %31 = load i32, i32* %30, align 4
  %32 = lshr i32 %31, 12
  %33 = and i32 %32, 3840
  %34 = lshr i32 %31, 8
  %35 = and i32 %34, 240
  %36 = or i32 %33, %35
  %37 = lshr i32 %31, 4
  %38 = and i32 %37, 15
  %39 = or i32 %36, %38
  %40 = trunc i32 %39 to i16
  %41 = icmp eq %"class.std::__1::__tree_node"* %29, null
  br i1 %41, label %68, label %42

42:                                               ; preds = %27, %64
  %43 = phi %"class.std::__1::__tree_node"* [ %67, %64 ], [ %29, %27 ]
  %44 = phi %"class.std::__1::__tree_node_base"** [ %66, %64 ], [ %7, %27 ]
  %45 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %43, i64 0, i32 1
  %46 = load i16, i16* %45, align 2
  %47 = icmp ugt i16 %46, %40
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %43, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %49, align 8
  %51 = icmp eq %"class.std::__1::__tree_node_base"* %50, null
  br i1 %51, label %52, label %64

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %43, i64 0, i32 0, i32 0
  br label %68

54:                                               ; preds = %42
  %55 = icmp ult i16 %46, %40
  br i1 %55, label %56, label %62

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %43, i64 0, i32 0, i32 1
  %58 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %57, align 8
  %59 = icmp eq %"class.std::__1::__tree_node_base"* %58, null
  br i1 %59, label %60, label %64

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %43, i64 0, i32 0, i32 0
  br label %68

62:                                               ; preds = %54
  %63 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %43, i64 0, i32 0, i32 0
  br label %68

64:                                               ; preds = %56, %48
  %65 = phi %"class.std::__1::__tree_node_base"* [ %50, %48 ], [ %58, %56 ]
  %66 = phi %"class.std::__1::__tree_node_base"** [ %49, %48 ], [ %57, %56 ]
  %67 = bitcast %"class.std::__1::__tree_node_base"* %65 to %"class.std::__1::__tree_node"*
  br label %42

68:                                               ; preds = %27, %62, %60, %52
  %69 = phi %"class.std::__1::__tree_end_node"* [ %53, %52 ], [ %61, %60 ], [ %63, %62 ], [ %9, %27 ]
  %70 = phi %"class.std::__1::__tree_node_base"** [ %49, %52 ], [ %57, %60 ], [ %44, %62 ], [ %25, %27 ]
  %71 = bitcast %"class.std::__1::__tree_node_base"** %70 to %"class.std::__1::__tree_node"**
  %72 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %71, align 8
  %73 = icmp eq %"class.std::__1::__tree_node"* %72, null
  br i1 %73, label %74, label %94

74:                                               ; preds = %68
  %75 = call i8* @_Znwm(i64 32) #12, !noalias !45
  %76 = getelementptr inbounds i8, i8* %75, i64 26
  %77 = bitcast i8* %76 to i16*
  store i16 %40, i16* %77, align 2, !noalias !45
  %78 = bitcast i8* %75 to %"class.std::__1::__tree_node_base"*
  %79 = getelementptr inbounds i8, i8* %75, i64 16
  %80 = bitcast i8* %79 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 0, i64 16, i1 false) #11
  store %"class.std::__1::__tree_end_node"* %69, %"class.std::__1::__tree_end_node"** %80, align 8
  %81 = bitcast %"class.std::__1::__tree_node_base"** %70 to i8**
  store i8* %75, i8** %81, align 8
  %82 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %6, align 8
  %83 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %82, i64 0, i32 0
  %84 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %83, align 8
  %85 = icmp eq %"class.std::__1::__tree_node_base"* %84, null
  br i1 %85, label %89, label %86

86:                                               ; preds = %74
  %87 = ptrtoint %"class.std::__1::__tree_node_base"* %84 to i64
  store i64 %87, i64* %26, align 8
  %88 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %70, align 8
  br label %89

89:                                               ; preds = %86, %74
  %90 = phi %"class.std::__1::__tree_node_base"* [ %78, %74 ], [ %88, %86 ]
  %91 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %91, %"class.std::__1::__tree_node_base"* %90) #11
  %92 = load i64, i64* %8, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %8, align 8
  br label %94

94:                                               ; preds = %68, %89
  %95 = phi i64 [ %28, %68 ], [ %93, %89 ]
  %96 = getelementptr inbounds i32, i32* %30, i64 1
  %97 = icmp eq i32* %96, %15
  br i1 %97, label %176, label %98

98:                                               ; preds = %94
  %99 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %24, align 8
  br label %27

100:                                              ; preds = %174, %18
  %101 = phi i64 [ 0, %18 ], [ %171, %174 ]
  %102 = phi %"class.std::__1::__tree_node"* [ null, %18 ], [ %175, %174 ]
  %103 = phi i32* [ %13, %18 ], [ %172, %174 ]
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 16
  %106 = and i32 %105, 255
  %107 = mul nuw nsw i32 %106, 5
  %108 = lshr i32 %104, 8
  %109 = and i32 %108, 255
  %110 = mul nuw nsw i32 %109, 3
  %111 = shl i32 %104, 1
  %112 = and i32 %111, 510
  %113 = add nuw nsw i32 %110, %112
  %114 = add nuw nsw i32 %113, %107
  %115 = trunc i32 %114 to i16
  %116 = udiv i16 %115, 160
  %117 = icmp eq %"class.std::__1::__tree_node"* %102, null
  br i1 %117, label %144, label %118

118:                                              ; preds = %100, %140
  %119 = phi %"class.std::__1::__tree_node"* [ %143, %140 ], [ %102, %100 ]
  %120 = phi %"class.std::__1::__tree_node_base"** [ %142, %140 ], [ %7, %100 ]
  %121 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %119, i64 0, i32 1
  %122 = load i16, i16* %121, align 2
  %123 = icmp ult i16 %116, %122
  br i1 %123, label %124, label %130

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %119, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %125, align 8
  %127 = icmp eq %"class.std::__1::__tree_node_base"* %126, null
  br i1 %127, label %128, label %140

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %119, i64 0, i32 0, i32 0
  br label %144

130:                                              ; preds = %118
  %131 = icmp ult i16 %122, %116
  br i1 %131, label %132, label %138

132:                                              ; preds = %130
  %133 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %119, i64 0, i32 0, i32 1
  %134 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %133, align 8
  %135 = icmp eq %"class.std::__1::__tree_node_base"* %134, null
  br i1 %135, label %136, label %140

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %119, i64 0, i32 0, i32 0
  br label %144

138:                                              ; preds = %130
  %139 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %119, i64 0, i32 0, i32 0
  br label %144

140:                                              ; preds = %132, %124
  %141 = phi %"class.std::__1::__tree_node_base"* [ %126, %124 ], [ %134, %132 ]
  %142 = phi %"class.std::__1::__tree_node_base"** [ %125, %124 ], [ %133, %132 ]
  %143 = bitcast %"class.std::__1::__tree_node_base"* %141 to %"class.std::__1::__tree_node"*
  br label %118

144:                                              ; preds = %100, %138, %136, %128
  %145 = phi %"class.std::__1::__tree_end_node"* [ %129, %128 ], [ %137, %136 ], [ %139, %138 ], [ %9, %100 ]
  %146 = phi %"class.std::__1::__tree_node_base"** [ %125, %128 ], [ %133, %136 ], [ %120, %138 ], [ %20, %100 ]
  %147 = bitcast %"class.std::__1::__tree_node_base"** %146 to %"class.std::__1::__tree_node"**
  %148 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %147, align 8
  %149 = icmp eq %"class.std::__1::__tree_node"* %148, null
  br i1 %149, label %150, label %170

150:                                              ; preds = %144
  %151 = call i8* @_Znwm(i64 32) #12, !noalias !48
  %152 = getelementptr inbounds i8, i8* %151, i64 26
  %153 = bitcast i8* %152 to i16*
  store i16 %116, i16* %153, align 2, !noalias !48
  %154 = bitcast i8* %151 to %"class.std::__1::__tree_node_base"*
  %155 = getelementptr inbounds i8, i8* %151, i64 16
  %156 = bitcast i8* %155 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 0, i64 16, i1 false) #11
  store %"class.std::__1::__tree_end_node"* %145, %"class.std::__1::__tree_end_node"** %156, align 8
  %157 = bitcast %"class.std::__1::__tree_node_base"** %146 to i8**
  store i8* %151, i8** %157, align 8
  %158 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %6, align 8
  %159 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %158, i64 0, i32 0
  %160 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %159, align 8
  %161 = icmp eq %"class.std::__1::__tree_node_base"* %160, null
  br i1 %161, label %165, label %162

162:                                              ; preds = %150
  %163 = ptrtoint %"class.std::__1::__tree_node_base"* %160 to i64
  store i64 %163, i64* %21, align 8
  %164 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %146, align 8
  br label %165

165:                                              ; preds = %162, %150
  %166 = phi %"class.std::__1::__tree_node_base"* [ %154, %150 ], [ %164, %162 ]
  %167 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %7, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %167, %"class.std::__1::__tree_node_base"* %166) #11
  %168 = load i64, i64* %8, align 8
  %169 = add i64 %168, 1
  store i64 %169, i64* %8, align 8
  br label %170

170:                                              ; preds = %144, %165
  %171 = phi i64 [ %101, %144 ], [ %169, %165 ]
  %172 = getelementptr inbounds i32, i32* %103, i64 1
  %173 = icmp eq i32* %172, %15
  br i1 %173, label %176, label %174

174:                                              ; preds = %170
  %175 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %19, align 8
  br label %100

176:                                              ; preds = %170, %94, %17, %22
  %177 = phi i64 [ 0, %17 ], [ 0, %22 ], [ %95, %94 ], [ %171, %170 ]
  %178 = uitofp i64 %177 to float
  %179 = zext i1 %11 to i64
  %180 = getelementptr inbounds [2 x float], [2 x float]* @_ZZNK5blink23DarkModeImageClassifier24ComputeColorBucketsRatioERKNSt3__16vectorIjNS1_9allocatorIjEEEENS0_9ColorModeEE11max_buckets, i64 0, i64 %179
  %181 = load float, float* %180, align 4
  %182 = fdiv float %178, %181
  %183 = getelementptr inbounds %"class.std::__1::set", %"class.std::__1::set"* %4, i64 0, i32 0
  %184 = bitcast %"class.std::__1::__tree_end_node"* %9 to %"class.std::__1::__tree_node"**
  %185 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %184, align 8
  call void @_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE7destroyEPNS_11__tree_nodeItPvEE(%"class.std::__1::__tree"* nonnull %183, %"class.std::__1::__tree_node"* %185) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #11
  ret float %182
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK5blink23DarkModeImageClassifier25ClassifyUsingDecisionTreeERKNS0_8FeaturesE(%"class.blink::DarkModeImageClassifier"* nocapture readnone, %"struct.blink::DarkModeImageClassifier::Features"* nocapture readonly dereferenceable(16)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"struct.blink::DarkModeImageClassifier::Features", %"struct.blink::DarkModeImageClassifier::Features"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = zext i8 %4 to i64
  %6 = getelementptr inbounds [2 x float], [2 x float]* @_ZN5blink12_GLOBAL__N_123kLowColorCountThresholdE, i64 0, i64 %5
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"struct.blink::DarkModeImageClassifier::Features", %"struct.blink::DarkModeImageClassifier::Features"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fcmp olt float %9, %7
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds [2 x float], [2 x float]* @_ZN5blink12_GLOBAL__N_124kHighColorCountThresholdE, i64 0, i64 %5
  %13 = load float, float* %12, align 4
  %14 = fcmp ogt float %9, %13
  %15 = select i1 %14, i8 0, i8 2
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i8 [ 1, %2 ], [ %15, %11 ]
  ret i8 %17
}

declare void @_ZN23darkmode_tfnative_model9InferenceEPKfPfPNS_16FixedAllocationsE(float*, float*, %"struct.darkmode_tfnative_model::FixedAllocations"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE7destroyEPNS_11__tree_nodeItPvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE7destroyEPNS_11__tree_nodeItPvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #11
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE7destroyEPNS_11__tree_nodeItPvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #11
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #1 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.unroll.disable"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !4}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !4}
!25 = distinct !{!25, !16}
!26 = distinct !{!26, !4}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !4}
!33 = distinct !{!33, !16}
!34 = distinct !{!34, !16}
!35 = distinct !{!35, !4}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !4}
!42 = distinct !{!42, !16}
!43 = distinct !{!43, !16}
!44 = distinct !{!44, !4}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE16__construct_nodeIJRKtEEENS_10unique_ptrINS_11__tree_nodeItPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_: argument 0"}
!47 = distinct !{!47, !"_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE16__construct_nodeIJRKtEEENS_10unique_ptrINS_11__tree_nodeItPvEENS_22__tree_node_destructorINS3_ISC_EEEEEEDpOT_"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE16__construct_nodeIJtEEENS_10unique_ptrINS_11__tree_nodeItPvEENS_22__tree_node_destructorINS3_ISA_EEEEEEDpOT_: argument 0"}
!50 = distinct !{!50, !"_ZNSt3__16__treeItNS_4lessItEENS_9allocatorItEEE16__construct_nodeIJtEEENS_10unique_ptrINS_11__tree_nodeItPvEENS_22__tree_node_destructorINS3_ISA_EEEEEEDpOT_"}
