; ModuleID = '../../third_party/webrtc/modules/audio_processing/capture_levels_adjuster/audio_samples_scaler.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/capture_levels_adjuster/audio_samples_scaler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::AudioSamplesScaler" = type { float, float, i32, float }
%"class.webrtc::AudioBuffer" = type { i32 (...)**, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.17", %"class.std::__1::vector.23", %"class.std::__1::vector.23", i8, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.webrtc::ChannelBuffer"* }
%"class.webrtc::ChannelBuffer" = type { %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.4", i64, i64, i64, i64, i64, %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { float* }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { float** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.10"*, %"class.std::__1::vector.10"*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::vector.10" = type opaque
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::vector.10"* }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.webrtc::SplittingFilter"* }
%"class.webrtc::SplittingFilter" = type opaque
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"class.std::__1::unique_ptr.25"*, %"class.std::__1::unique_ptr.25"*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::unique_ptr.25" = type opaque
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::unique_ptr.25"* }

@_ZN6webrtc18AudioSamplesScalerC1Ef = hidden unnamed_addr alias void (%"class.webrtc::AudioSamplesScaler"*, float), void (%"class.webrtc::AudioSamplesScaler"*, float)* @_ZN6webrtc18AudioSamplesScalerC2Ef

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc18AudioSamplesScalerC2Ef(%"class.webrtc::AudioSamplesScaler"* nocapture, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 0
  store float %1, float* %3, align 4
  %4 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 1
  store float %1, float* %4, align 4
  %5 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 2
  store i32 -1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 3
  store float -1.000000e+00, float* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc18AudioSamplesScaler7ProcessERNS_11AudioBufferE(%"class.webrtc::AudioSamplesScaler"* nocapture, %"class.webrtc::AudioBuffer"* nocapture readonly dereferenceable(168)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, %5
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  store i32 %5, i32* %6, align 4
  %10 = sitofp i32 %5 to float
  %11 = fdiv float 1.000000e+00, %10
  %12 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 3
  store float %11, float* %12, align 4
  br label %13

13:                                               ; preds = %2, %9
  %14 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = fcmp oeq float %15, 1.000000e+00
  %17 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 0
  %18 = load float, float* %17, align 4
  %19 = fcmp oeq float %18, 1.000000e+00
  %20 = and i1 %16, %19
  br i1 %20, label %382, label %21

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 0
  %23 = fcmp oeq float %18, %15
  br i1 %23, label %24, label %126

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 7
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %263, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 10, i32 0, i32 0, i32 0
  %30 = insertelement <4 x float> undef, float %18, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> zeroinitializer
  %32 = insertelement <4 x float> undef, float %18, i32 0
  %33 = shufflevector <4 x float> %32, <4 x float> undef, <4 x i32> zeroinitializer
  br label %34

34:                                               ; preds = %118, %28
  %35 = phi i64 [ %26, %28 ], [ %115, %118 ]
  %36 = phi i32 [ %5, %28 ], [ %119, %118 ]
  %37 = phi i64 [ 0, %28 ], [ %116, %118 ]
  %38 = load %"class.webrtc::ChannelBuffer"*, %"class.webrtc::ChannelBuffer"** %29, align 8
  %39 = getelementptr inbounds %"class.webrtc::ChannelBuffer", %"class.webrtc::ChannelBuffer"* %38, i64 0, i32 1, i32 0, i32 0, i32 0
  %40 = load float**, float*** %39, align 8
  %41 = getelementptr inbounds float*, float** %40, i64 %37
  %42 = load float*, float** %41, align 8
  %43 = sext i32 %36 to i64
  %44 = icmp eq i32 %36, 0
  %45 = select i1 %44, float* null, float* %42
  %46 = getelementptr inbounds float, float* %45, i64 %43
  br i1 %44, label %114, label %47

47:                                               ; preds = %34
  %48 = ptrtoint float* %42 to i64
  %49 = getelementptr float, float* %45, i64 -1
  %50 = sext i32 %36 to i64
  %51 = getelementptr float, float* %49, i64 %50
  %52 = ptrtoint float* %51 to i64
  %53 = sub i64 %52, %48
  %54 = lshr i64 %53, 2
  %55 = add nuw nsw i64 %54, 1
  %56 = icmp ult i64 %55, 8
  br i1 %56, label %57, label %59

57:                                               ; preds = %110, %47
  %58 = phi float* [ %42, %47 ], [ %61, %110 ]
  br label %120

59:                                               ; preds = %47
  %60 = and i64 %55, 9223372036854775800
  %61 = getelementptr float, float* %42, i64 %60
  %62 = add nsw i64 %60, -8
  %63 = lshr exact i64 %62, 3
  %64 = add nuw nsw i64 %63, 1
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %62, 0
  br i1 %66, label %96, label %67

67:                                               ; preds = %59
  %68 = sub nuw nsw i64 %64, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %93, %69 ]
  %71 = phi i64 [ %68, %67 ], [ %94, %69 ]
  %72 = getelementptr float, float* %42, i64 %70
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 4
  %75 = getelementptr float, float* %72, i64 4
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4
  %78 = fmul <4 x float> %31, %74
  %79 = fmul <4 x float> %33, %77
  %80 = bitcast float* %72 to <4 x float>*
  store <4 x float> %78, <4 x float>* %80, align 4
  %81 = bitcast float* %75 to <4 x float>*
  store <4 x float> %79, <4 x float>* %81, align 4
  %82 = or i64 %70, 8
  %83 = getelementptr float, float* %42, i64 %82
  %84 = bitcast float* %83 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 4
  %86 = getelementptr float, float* %83, i64 4
  %87 = bitcast float* %86 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 4
  %89 = fmul <4 x float> %31, %85
  %90 = fmul <4 x float> %33, %88
  %91 = bitcast float* %83 to <4 x float>*
  store <4 x float> %89, <4 x float>* %91, align 4
  %92 = bitcast float* %86 to <4 x float>*
  store <4 x float> %90, <4 x float>* %92, align 4
  %93 = add i64 %70, 16
  %94 = add i64 %71, -2
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %69, !llvm.loop !2

96:                                               ; preds = %69, %59
  %97 = phi i64 [ 0, %59 ], [ %93, %69 ]
  %98 = icmp eq i64 %65, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %96
  %100 = getelementptr float, float* %42, i64 %97
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 4
  %103 = getelementptr float, float* %100, i64 4
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 4
  %106 = fmul <4 x float> %31, %102
  %107 = fmul <4 x float> %33, %105
  %108 = bitcast float* %100 to <4 x float>*
  store <4 x float> %106, <4 x float>* %108, align 4
  %109 = bitcast float* %103 to <4 x float>*
  store <4 x float> %107, <4 x float>* %109, align 4
  br label %110

110:                                              ; preds = %96, %99
  %111 = icmp eq i64 %55, %60
  br i1 %111, label %112, label %57

112:                                              ; preds = %120, %110
  %113 = load i64, i64* %25, align 8
  br label %114

114:                                              ; preds = %112, %34
  %115 = phi i64 [ %113, %112 ], [ %35, %34 ]
  %116 = add nuw i64 %37, 1
  %117 = icmp ult i64 %116, %115
  br i1 %117, label %118, label %263

118:                                              ; preds = %114
  %119 = load i32, i32* %6, align 4
  br label %34

120:                                              ; preds = %57, %120
  %121 = phi float* [ %124, %120 ], [ %58, %57 ]
  %122 = load float, float* %121, align 4
  %123 = fmul float %18, %122
  store float %123, float* %121, align 4
  %124 = getelementptr inbounds float, float* %121, i64 1
  %125 = icmp eq float* %124, %46
  br i1 %125, label %112, label %120, !llvm.loop !4

126:                                              ; preds = %21
  %127 = fsub float %15, %18
  %128 = getelementptr inbounds %"class.webrtc::AudioSamplesScaler", %"class.webrtc::AudioSamplesScaler"* %0, i64 0, i32 3
  %129 = load float, float* %128, align 4
  %130 = fmul float %127, %129
  %131 = fcmp ogt float %130, 0.000000e+00
  %132 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 7
  %133 = load i64, i64* %132, align 8
  %134 = icmp ne i64 %133, 0
  br i1 %131, label %138, label %135

135:                                              ; preds = %126
  br i1 %134, label %136, label %263

136:                                              ; preds = %135
  %137 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 10, i32 0, i32 0, i32 0
  br label %202

138:                                              ; preds = %126
  br i1 %134, label %139, label %263

139:                                              ; preds = %138
  %140 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 10, i32 0, i32 0, i32 0
  br label %141

141:                                              ; preds = %181, %139
  %142 = phi i64 [ %133, %139 ], [ %178, %181 ]
  %143 = phi i32 [ %5, %139 ], [ %183, %181 ]
  %144 = phi float [ %18, %139 ], [ %182, %181 ]
  %145 = phi i64 [ 0, %139 ], [ %179, %181 ]
  %146 = load %"class.webrtc::ChannelBuffer"*, %"class.webrtc::ChannelBuffer"** %140, align 8
  %147 = getelementptr inbounds %"class.webrtc::ChannelBuffer", %"class.webrtc::ChannelBuffer"* %146, i64 0, i32 1, i32 0, i32 0, i32 0
  %148 = load float**, float*** %147, align 8
  %149 = getelementptr inbounds float*, float** %148, i64 %145
  %150 = load float*, float** %149, align 8
  %151 = sext i32 %143 to i64
  %152 = icmp eq i32 %143, 0
  %153 = select i1 %152, float* null, float* %150
  %154 = getelementptr inbounds float, float* %153, i64 %151
  br i1 %152, label %177, label %155

155:                                              ; preds = %141
  %156 = ptrtoint float* %150 to i64
  %157 = getelementptr float, float* %153, i64 -1
  %158 = getelementptr float, float* %157, i64 %151
  %159 = ptrtoint float* %158 to i64
  %160 = sub i64 %159, %156
  %161 = and i64 %160, 4
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %171

163:                                              ; preds = %155
  %164 = fadd float %130, %144
  %165 = load float, float* %14, align 4
  %166 = fcmp olt float %165, %164
  %167 = select i1 %166, float %165, float %164
  %168 = load float, float* %150, align 4
  %169 = fmul float %168, %167
  store float %169, float* %150, align 4
  %170 = getelementptr inbounds float, float* %150, i64 1
  br label %171

171:                                              ; preds = %163, %155
  %172 = phi float [ %167, %163 ], [ %144, %155 ]
  %173 = phi float* [ %170, %163 ], [ %150, %155 ]
  %174 = icmp ult i64 %160, 4
  br i1 %174, label %175, label %184

175:                                              ; preds = %184, %171
  %176 = load i64, i64* %132, align 8
  br label %177

177:                                              ; preds = %175, %141
  %178 = phi i64 [ %176, %175 ], [ %142, %141 ]
  %179 = add nuw i64 %145, 1
  %180 = icmp ult i64 %179, %178
  br i1 %180, label %181, label %263

181:                                              ; preds = %177
  %182 = load float, float* %22, align 4
  %183 = load i32, i32* %6, align 4
  br label %141

184:                                              ; preds = %171, %184
  %185 = phi float [ %197, %184 ], [ %172, %171 ]
  %186 = phi float* [ %200, %184 ], [ %173, %171 ]
  %187 = fadd float %130, %185
  %188 = load float, float* %14, align 4
  %189 = fcmp olt float %188, %187
  %190 = select i1 %189, float %188, float %187
  %191 = load float, float* %186, align 4
  %192 = fmul float %191, %190
  store float %192, float* %186, align 4
  %193 = getelementptr inbounds float, float* %186, i64 1
  %194 = fadd float %130, %190
  %195 = load float, float* %14, align 4
  %196 = fcmp olt float %195, %194
  %197 = select i1 %196, float %195, float %194
  %198 = load float, float* %193, align 4
  %199 = fmul float %198, %197
  store float %199, float* %193, align 4
  %200 = getelementptr inbounds float, float* %186, i64 2
  %201 = icmp eq float* %200, %154
  br i1 %201, label %175, label %184

202:                                              ; preds = %242, %136
  %203 = phi i64 [ %133, %136 ], [ %239, %242 ]
  %204 = phi i32 [ %5, %136 ], [ %244, %242 ]
  %205 = phi float [ %18, %136 ], [ %243, %242 ]
  %206 = phi i64 [ 0, %136 ], [ %240, %242 ]
  %207 = load %"class.webrtc::ChannelBuffer"*, %"class.webrtc::ChannelBuffer"** %137, align 8
  %208 = getelementptr inbounds %"class.webrtc::ChannelBuffer", %"class.webrtc::ChannelBuffer"* %207, i64 0, i32 1, i32 0, i32 0, i32 0
  %209 = load float**, float*** %208, align 8
  %210 = getelementptr inbounds float*, float** %209, i64 %206
  %211 = load float*, float** %210, align 8
  %212 = sext i32 %204 to i64
  %213 = icmp eq i32 %204, 0
  %214 = select i1 %213, float* null, float* %211
  %215 = getelementptr inbounds float, float* %214, i64 %212
  br i1 %213, label %238, label %216

216:                                              ; preds = %202
  %217 = ptrtoint float* %211 to i64
  %218 = getelementptr float, float* %214, i64 -1
  %219 = getelementptr float, float* %218, i64 %212
  %220 = ptrtoint float* %219 to i64
  %221 = sub i64 %220, %217
  %222 = and i64 %221, 4
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %232

224:                                              ; preds = %216
  %225 = fadd float %130, %205
  %226 = load float, float* %14, align 4
  %227 = fcmp olt float %225, %226
  %228 = select i1 %227, float %226, float %225
  %229 = load float, float* %211, align 4
  %230 = fmul float %229, %228
  store float %230, float* %211, align 4
  %231 = getelementptr inbounds float, float* %211, i64 1
  br label %232

232:                                              ; preds = %224, %216
  %233 = phi float [ %228, %224 ], [ %205, %216 ]
  %234 = phi float* [ %231, %224 ], [ %211, %216 ]
  %235 = icmp ult i64 %221, 4
  br i1 %235, label %236, label %245

236:                                              ; preds = %245, %232
  %237 = load i64, i64* %132, align 8
  br label %238

238:                                              ; preds = %236, %202
  %239 = phi i64 [ %237, %236 ], [ %203, %202 ]
  %240 = add nuw i64 %206, 1
  %241 = icmp ult i64 %240, %239
  br i1 %241, label %242, label %263

242:                                              ; preds = %238
  %243 = load float, float* %22, align 4
  %244 = load i32, i32* %6, align 4
  br label %202

245:                                              ; preds = %232, %245
  %246 = phi float [ %258, %245 ], [ %233, %232 ]
  %247 = phi float* [ %261, %245 ], [ %234, %232 ]
  %248 = fadd float %130, %246
  %249 = load float, float* %14, align 4
  %250 = fcmp olt float %248, %249
  %251 = select i1 %250, float %249, float %248
  %252 = load float, float* %247, align 4
  %253 = fmul float %252, %251
  store float %253, float* %247, align 4
  %254 = getelementptr inbounds float, float* %247, i64 1
  %255 = fadd float %130, %251
  %256 = load float, float* %14, align 4
  %257 = fcmp olt float %255, %256
  %258 = select i1 %257, float %256, float %255
  %259 = load float, float* %254, align 4
  %260 = fmul float %259, %258
  store float %260, float* %254, align 4
  %261 = getelementptr inbounds float, float* %247, i64 2
  %262 = icmp eq float* %261, %215
  br i1 %262, label %236, label %245

263:                                              ; preds = %238, %177, %114, %24, %135, %138
  %264 = bitcast float* %14 to i32*
  %265 = load i32, i32* %264, align 4
  %266 = bitcast %"class.webrtc::AudioSamplesScaler"* %0 to i32*
  store i32 %265, i32* %266, align 4
  %267 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 7
  %268 = load i64, i64* %267, align 8
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %382, label %270

270:                                              ; preds = %263
  %271 = getelementptr inbounds %"class.webrtc::AudioBuffer", %"class.webrtc::AudioBuffer"* %1, i64 0, i32 10, i32 0, i32 0, i32 0
  br label %272

272:                                              ; preds = %270, %369
  %273 = phi i64 [ %268, %270 ], [ %370, %369 ]
  %274 = phi i64 [ 0, %270 ], [ %371, %369 ]
  %275 = load %"class.webrtc::ChannelBuffer"*, %"class.webrtc::ChannelBuffer"** %271, align 8
  %276 = getelementptr inbounds %"class.webrtc::ChannelBuffer", %"class.webrtc::ChannelBuffer"* %275, i64 0, i32 1, i32 0, i32 0, i32 0
  %277 = load float**, float*** %276, align 8
  %278 = getelementptr inbounds float*, float** %277, i64 %274
  %279 = load float*, float** %278, align 8
  %280 = load i32, i32* %6, align 4
  %281 = sext i32 %280 to i64
  %282 = icmp eq i32 %280, 0
  %283 = select i1 %282, float* null, float* %279
  %284 = getelementptr inbounds float, float* %283, i64 %281
  br i1 %282, label %369, label %285

285:                                              ; preds = %272
  %286 = ptrtoint float* %279 to i64
  %287 = getelementptr float, float* %283, i64 -1
  %288 = getelementptr float, float* %287, i64 %281
  %289 = ptrtoint float* %288 to i64
  %290 = sub i64 %289, %286
  %291 = lshr i64 %290, 2
  %292 = add nuw nsw i64 %291, 1
  %293 = icmp ult i64 %292, 8
  br i1 %293, label %294, label %296

294:                                              ; preds = %365, %285
  %295 = phi float* [ %279, %285 ], [ %298, %365 ]
  br label %373

296:                                              ; preds = %285
  %297 = and i64 %292, 9223372036854775800
  %298 = getelementptr float, float* %279, i64 %297
  %299 = add nsw i64 %297, -8
  %300 = lshr exact i64 %299, 3
  %301 = add nuw nsw i64 %300, 1
  %302 = and i64 %301, 1
  %303 = icmp eq i64 %299, 0
  br i1 %303, label %345, label %304

304:                                              ; preds = %296
  %305 = sub nuw nsw i64 %301, %302
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %342, %306 ]
  %308 = phi i64 [ %305, %304 ], [ %343, %306 ]
  %309 = getelementptr float, float* %279, i64 %307
  %310 = bitcast float* %309 to <4 x float>*
  %311 = load <4 x float>, <4 x float>* %310, align 4
  %312 = getelementptr float, float* %309, i64 4
  %313 = bitcast float* %312 to <4 x float>*
  %314 = load <4 x float>, <4 x float>* %313, align 4
  %315 = fcmp ole <4 x float> %311, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %316 = fcmp ole <4 x float> %314, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %317 = fcmp oge <4 x float> %311, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %318 = fcmp oge <4 x float> %314, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %319 = select <4 x i1> %317, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %311
  %320 = select <4 x i1> %318, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %314
  %321 = select <4 x i1> %315, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %319
  %322 = select <4 x i1> %316, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %320
  %323 = bitcast float* %309 to <4 x float>*
  store <4 x float> %321, <4 x float>* %323, align 4
  %324 = bitcast float* %312 to <4 x float>*
  store <4 x float> %322, <4 x float>* %324, align 4
  %325 = or i64 %307, 8
  %326 = getelementptr float, float* %279, i64 %325
  %327 = bitcast float* %326 to <4 x float>*
  %328 = load <4 x float>, <4 x float>* %327, align 4
  %329 = getelementptr float, float* %326, i64 4
  %330 = bitcast float* %329 to <4 x float>*
  %331 = load <4 x float>, <4 x float>* %330, align 4
  %332 = fcmp ole <4 x float> %328, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %333 = fcmp ole <4 x float> %331, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %334 = fcmp oge <4 x float> %328, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %335 = fcmp oge <4 x float> %331, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %336 = select <4 x i1> %334, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %328
  %337 = select <4 x i1> %335, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %331
  %338 = select <4 x i1> %332, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %336
  %339 = select <4 x i1> %333, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %337
  %340 = bitcast float* %326 to <4 x float>*
  store <4 x float> %338, <4 x float>* %340, align 4
  %341 = bitcast float* %329 to <4 x float>*
  store <4 x float> %339, <4 x float>* %341, align 4
  %342 = add i64 %307, 16
  %343 = add i64 %308, -2
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %345, label %306, !llvm.loop !6

345:                                              ; preds = %306, %296
  %346 = phi i64 [ 0, %296 ], [ %342, %306 ]
  %347 = icmp eq i64 %302, 0
  br i1 %347, label %365, label %348

348:                                              ; preds = %345
  %349 = getelementptr float, float* %279, i64 %346
  %350 = bitcast float* %349 to <4 x float>*
  %351 = load <4 x float>, <4 x float>* %350, align 4
  %352 = getelementptr float, float* %349, i64 4
  %353 = bitcast float* %352 to <4 x float>*
  %354 = load <4 x float>, <4 x float>* %353, align 4
  %355 = fcmp ole <4 x float> %351, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %356 = fcmp ole <4 x float> %354, <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>
  %357 = fcmp oge <4 x float> %351, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %358 = fcmp oge <4 x float> %354, <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>
  %359 = select <4 x i1> %357, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %351
  %360 = select <4 x i1> %358, <4 x float> <float 3.276700e+04, float 3.276700e+04, float 3.276700e+04, float 3.276700e+04>, <4 x float> %354
  %361 = select <4 x i1> %355, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %359
  %362 = select <4 x i1> %356, <4 x float> <float -3.276800e+04, float -3.276800e+04, float -3.276800e+04, float -3.276800e+04>, <4 x float> %360
  %363 = bitcast float* %349 to <4 x float>*
  store <4 x float> %361, <4 x float>* %363, align 4
  %364 = bitcast float* %352 to <4 x float>*
  store <4 x float> %362, <4 x float>* %364, align 4
  br label %365

365:                                              ; preds = %345, %348
  %366 = icmp eq i64 %292, %297
  br i1 %366, label %367, label %294

367:                                              ; preds = %373, %365
  %368 = load i64, i64* %267, align 8
  br label %369

369:                                              ; preds = %367, %272
  %370 = phi i64 [ %368, %367 ], [ %273, %272 ]
  %371 = add nuw i64 %274, 1
  %372 = icmp ult i64 %371, %370
  br i1 %372, label %272, label %382

373:                                              ; preds = %294, %373
  %374 = phi float* [ %380, %373 ], [ %295, %294 ]
  %375 = load float, float* %374, align 4
  %376 = fcmp ole float %375, -3.276800e+04
  %377 = fcmp oge float %375, 3.276700e+04
  %378 = select i1 %377, float 3.276700e+04, float %375
  %379 = select i1 %376, float -3.276800e+04, float %378
  store float %379, float* %374, align 4
  %380 = getelementptr inbounds float, float* %374, i64 1
  %381 = icmp eq float* %380, %284
  br i1 %381, label %367, label %373, !llvm.loop !7

382:                                              ; preds = %369, %13, %263
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
