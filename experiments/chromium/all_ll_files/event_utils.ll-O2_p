; ModuleID = '../../ui/events/event_utils.cc'
source_filename = "../../ui/events/event_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::Event" = type { i32 (...)**, i32, %"class.base::TimeTicks", %"class.ui::LatencyInfo", i32, %"class.ui::Event"*, i8, i8, %"class.ui::EventTarget"*, i32, i32, i32, %"class.std::__1::unique_ptr.3" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.ui::LatencyInfo" = type { %"class.base::flat_map", i64, i64, i8, i8, i8, i32, float, float, i64 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.0" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::pair"* }
%"class.ui::EventTarget" = type opaque
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.base::flat_map.6"* }
%"class.base::flat_map.6" = type opaque
%"class.ui::KeyEvent" = type <{ %"class.ui::Event", i32, i32, i32, i8, [3 x i8], %"class.ui::DomKey", [4 x i8] }>
%"class.ui::DomKey" = type { i32 }
%"class.ui::MouseEvent" = type { %"class.ui::LocatedEvent", i32, %"class.gfx::Vector2dF", %"struct.ui::PointerDetails" }
%"class.ui::LocatedEvent" = type { %"class.ui::Event", %"class.gfx::PointF", %"class.gfx::PointF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::Vector2dF" = type { float, float }
%"struct.ui::PointerDetails" = type { i32, float, float, float, float, float, float, float, i32, %"class.gfx::Vector2d" }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.ui::MouseWheelEvent" = type { %"class.ui::MouseEvent", %"class.gfx::Vector2d", %"class.gfx::Vector2d" }
%"class.ui::ScrollEvent" = type <{ %"class.ui::MouseEvent", float, float, float, float, i32, i32, i32, [4 x i8] }>
%"class.ui::TouchEvent" = type <{ %"class.ui::LocatedEvent", i32, i8, i8, [2 x i8], %"struct.ui::PointerDetails", [4 x i8] }>
%"class.display::Screen" = type { i32 (...)**, i64, i64 }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { %"class.display::Display"*, %"class.display::Display"*, %"class.std::__1::__compressed_pair.48" }
%"class.display::Display" = type { i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, %"class.absl::optional", i32, i32, %"class.gfx::Size", %"class.gfx::DisplayColorSpaces", i32, i32, i8, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional.43" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.43" = type { %"class.absl::optional_internal::optional_data.44" }
%"class.absl::optional_internal::optional_data.44" = type { %"class.absl::optional_internal::optional_data_base.45" }
%"class.absl::optional_internal::optional_data_base.45" = type { %"class.absl::optional_internal::optional_data_dtor_base.46" }
%"class.absl::optional_internal::optional_data_dtor_base.46" = type { i8, %union.anon.47 }
%union.anon.47 = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.display::Display"* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.54", [4 x i8] }>
%"struct.std::__1::atomic.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__atomic_base.56" }
%"struct.std::__1::__atomic_base.56" = type { %"struct.std::__1::__cxx_atomic_impl.57" }
%"struct.std::__1::__cxx_atomic_impl.57" = type { %"struct.std::__1::__cxx_atomic_base_impl.58" }
%"struct.std::__1::__cxx_atomic_base_impl.58" = type { i32 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.61" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN2ui12_GLOBAL__N_120g_custom_event_typesE = internal unnamed_addr global i32 39, align 4
@.str = private unnamed_addr constant [29 x i8] c"Event.Latency.OS.MOUSE_WHEEL\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"Event.Latency.OS2.MOUSE_WHEEL\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Event.Latency.OS.TOUCH_MOVED\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"Event.Latency.OS2.TOUCH_MOVED\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Event.Latency.OS.TOUCH_PRESSED\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Event.Latency.OS2.TOUCH_PRESSED\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"Event.Latency.OS.TOUCH_RELEASED\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"Event.Latency.OS2.TOUCH_RELEASED\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"Event.Latency.OS.TOUCH_CANCELLED\00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"Event.Latency.OS2.TOUCH_CANCELLED\00", align 1
@.str.10 = private unnamed_addr constant [29 x i8] c"Event.Latency.OS.KEY_PRESSED\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"Event.Latency.OS2.KEY_PRESSED\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"Event.Latency.OS.MOUSE_PRESSED\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"Event.Latency.OS2.MOUSE_PRESSED\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"ET_UNKNOWN\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"ET_MOUSE_PRESSED\00", align 1
@.str.17 = private unnamed_addr constant [17 x i8] c"ET_MOUSE_DRAGGED\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c"ET_MOUSE_RELEASED\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"ET_MOUSE_MOVED\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"ET_MOUSE_ENTERED\00", align 1
@.str.21 = private unnamed_addr constant [16 x i8] c"ET_MOUSE_EXITED\00", align 1
@.str.22 = private unnamed_addr constant [15 x i8] c"ET_KEY_PRESSED\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"ET_KEY_RELEASED\00", align 1
@.str.24 = private unnamed_addr constant [14 x i8] c"ET_MOUSEWHEEL\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"ET_MOUSE_CAPTURE_CHANGED\00", align 1
@.str.26 = private unnamed_addr constant [18 x i8] c"ET_TOUCH_RELEASED\00", align 1
@.str.27 = private unnamed_addr constant [17 x i8] c"ET_TOUCH_PRESSED\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"ET_TOUCH_MOVED\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"ET_TOUCH_CANCELLED\00", align 1
@.str.30 = private unnamed_addr constant [21 x i8] c"ET_DROP_TARGET_EVENT\00", align 1
@.str.31 = private unnamed_addr constant [24 x i8] c"ET_GESTURE_SCROLL_BEGIN\00", align 1
@.str.32 = private unnamed_addr constant [22 x i8] c"ET_GESTURE_SCROLL_END\00", align 1
@.str.33 = private unnamed_addr constant [25 x i8] c"ET_GESTURE_SCROLL_UPDATE\00", align 1
@.str.34 = private unnamed_addr constant [22 x i8] c"ET_GESTURE_SHOW_PRESS\00", align 1
@.str.35 = private unnamed_addr constant [15 x i8] c"ET_GESTURE_TAP\00", align 1
@.str.36 = private unnamed_addr constant [20 x i8] c"ET_GESTURE_TAP_DOWN\00", align 1
@.str.37 = private unnamed_addr constant [22 x i8] c"ET_GESTURE_TAP_CANCEL\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"ET_GESTURE_BEGIN\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"ET_GESTURE_END\00", align 1
@.str.40 = private unnamed_addr constant [26 x i8] c"ET_GESTURE_TWO_FINGER_TAP\00", align 1
@.str.41 = private unnamed_addr constant [23 x i8] c"ET_GESTURE_PINCH_BEGIN\00", align 1
@.str.42 = private unnamed_addr constant [21 x i8] c"ET_GESTURE_PINCH_END\00", align 1
@.str.43 = private unnamed_addr constant [24 x i8] c"ET_GESTURE_PINCH_UPDATE\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"ET_GESTURE_LONG_PRESS\00", align 1
@.str.45 = private unnamed_addr constant [20 x i8] c"ET_GESTURE_LONG_TAP\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"ET_GESTURE_SWIPE\00", align 1
@.str.47 = private unnamed_addr constant [27 x i8] c"ET_GESTURE_TAP_UNCONFIRMED\00", align 1
@.str.48 = private unnamed_addr constant [22 x i8] c"ET_GESTURE_DOUBLE_TAP\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"ET_SCROLL\00", align 1
@.str.50 = private unnamed_addr constant [22 x i8] c"ET_SCROLL_FLING_START\00", align 1
@.str.51 = private unnamed_addr constant [23 x i8] c"ET_SCROLL_FLING_CANCEL\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"ET_CANCEL_MODE\00", align 1
@.str.53 = private unnamed_addr constant [12 x i8] c"ET_UMA_DATA\00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c"NONE\00", align 1
@.str.55 = private unnamed_addr constant [15 x i8] c"IS_SYNTHESIZED\00", align 1
@.str.56 = private unnamed_addr constant [11 x i8] c"SHIFT_DOWN\00", align 1
@.str.57 = private unnamed_addr constant [13 x i8] c"CONTROL_DOWN\00", align 1
@.str.58 = private unnamed_addr constant [9 x i8] c"ALT_DOWN\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"COMMAND_DOWN\00", align 1
@.str.60 = private unnamed_addr constant [11 x i8] c"ALTGR_DOWN\00", align 1
@.str.61 = private unnamed_addr constant [10 x i8] c"MOD3_DOWN\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c"NUM_LOCK_ON\00", align 1
@.str.63 = private unnamed_addr constant [13 x i8] c"CAPS_LOCK_ON\00", align 1
@.str.64 = private unnamed_addr constant [15 x i8] c"SCROLL_LOCK_ON\00", align 1
@.str.65 = private unnamed_addr constant [18 x i8] c"LEFT_MOUSE_BUTTON\00", align 1
@.str.66 = private unnamed_addr constant [20 x i8] c"MIDDLE_MOUSE_BUTTON\00", align 1
@.str.67 = private unnamed_addr constant [19 x i8] c"RIGHT_MOUSE_BUTTON\00", align 1
@.str.68 = private unnamed_addr constant [18 x i8] c"BACK_MOUSE_BUTTON\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"FORWARD_MOUSE_BUTTON\00", align 1
@.str.70 = private unnamed_addr constant [19 x i8] c"IME_FABRICATED_KEY\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"IS_REPEAT\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"FINAL\00", align 1
@.str.73 = private unnamed_addr constant [16 x i8] c"IS_EXTENDED_KEY\00", align 1
@.str.74 = private unnamed_addr constant [17 x i8] c"IS_STYLUS_BUTTON\00", align 1
@.str.75 = private unnamed_addr constant [16 x i8] c"IS_DOUBLE_CLICK\00", align 1
@.str.76 = private unnamed_addr constant [16 x i8] c"IS_TRIPLE_CLICK\00", align 1
@.str.77 = private unnamed_addr constant [14 x i8] c"IS_NON_CLIENT\00", align 1
@.str.78 = private unnamed_addr constant [11 x i8] c"FROM_TOUCH\00", align 1
@.str.79 = private unnamed_addr constant [20 x i8] c"TOUCH_ACCESSIBILITY\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"CURSOR_HIDE\00", align 1
@.str.81 = private unnamed_addr constant [26 x i8] c"PRECISION_SCROLLING_DELTA\00", align 1
@.str.82 = private unnamed_addr constant [15 x i8] c"SCROLL_BY_PAGE\00", align 1
@.str.83 = private unnamed_addr constant [17 x i8] c"UNADJUSTED_MOUSE\00", align 1
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_1.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_2.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_3.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_4.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_5.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_6.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_7.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_8.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_9.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__10_.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__11_.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__12_.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@switch.table._ZN2ui13EventTypeNameENS_9EventTypeE = private unnamed_addr constant [39 x i64] [i64 10, i64 16, i64 16, i64 17, i64 14, i64 16, i64 15, i64 14, i64 15, i64 13, i64 24, i64 17, i64 16, i64 14, i64 18, i64 20, i64 23, i64 21, i64 24, i64 14, i64 19, i64 21, i64 26, i64 21, i64 16, i64 14, i64 25, i64 22, i64 20, i64 23, i64 21, i64 19, i64 16, i64 21, i64 9, i64 21, i64 22, i64 14, i64 11], align 8
@switch.table._ZN2ui13EventTypeNameENS_9EventTypeE.87 = private unnamed_addr constant [39 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.53, i64 0, i64 0)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::Event"* @_ZN2ui15EventFromNativeERKPNS_5EventE(%"class.ui::Event"** dereferenceable(8)) local_unnamed_addr #0 {
  %2 = tail call i32 @_ZN2ui19EventTypeFromNativeERKPNS_5EventE(%"class.ui::Event"** dereferenceable(8) %0) #12
  switch i32 %2, label %23 [
    i32 7, label %3
    i32 8, label %3
    i32 1, label %7
    i32 2, label %7
    i32 3, label %7
    i32 4, label %7
    i32 5, label %7
    i32 6, label %7
    i32 9, label %11
    i32 35, label %15
    i32 36, label %15
    i32 34, label %15
    i32 11, label %19
    i32 12, label %19
    i32 13, label %19
    i32 14, label %19
  ]

3:                                                ; preds = %1, %1
  %4 = tail call i8* @_Znwm(i64 168) #13
  %5 = bitcast i8* %4 to %"class.ui::KeyEvent"*
  tail call void @_ZN2ui8KeyEventC1ERKPNS_5EventE(%"class.ui::KeyEvent"* nonnull %5, %"class.ui::Event"** dereferenceable(8) %0) #12
  %6 = ptrtoint i8* %4 to i64
  br label %23

7:                                                ; preds = %1, %1, %1, %1, %1, %1
  %8 = tail call i8* @_Znwm(i64 216) #13
  %9 = bitcast i8* %8 to %"class.ui::MouseEvent"*
  tail call void @_ZN2ui10MouseEventC1ERKPNS_5EventE(%"class.ui::MouseEvent"* nonnull %9, %"class.ui::Event"** dereferenceable(8) %0) #12
  %10 = ptrtoint i8* %8 to i64
  br label %23

11:                                               ; preds = %1
  %12 = tail call i8* @_Znwm(i64 232) #13
  %13 = bitcast i8* %12 to %"class.ui::MouseWheelEvent"*
  tail call void @_ZN2ui15MouseWheelEventC1ERKPNS_5EventE(%"class.ui::MouseWheelEvent"* nonnull %13, %"class.ui::Event"** dereferenceable(8) %0) #12
  %14 = ptrtoint i8* %12 to i64
  br label %23

15:                                               ; preds = %1, %1, %1
  %16 = tail call i8* @_Znwm(i64 248) #13
  %17 = bitcast i8* %16 to %"class.ui::ScrollEvent"*
  tail call void @_ZN2ui11ScrollEventC1ERKPNS_5EventE(%"class.ui::ScrollEvent"* nonnull %17, %"class.ui::Event"** dereferenceable(8) %0) #12
  %18 = ptrtoint i8* %16 to i64
  br label %23

19:                                               ; preds = %1, %1, %1, %1
  %20 = tail call i8* @_Znwm(i64 216) #13
  %21 = bitcast i8* %20 to %"class.ui::TouchEvent"*
  tail call void @_ZN2ui10TouchEventC1ERKPNS_5EventE(%"class.ui::TouchEvent"* nonnull %21, %"class.ui::Event"** dereferenceable(8) %0) #12
  %22 = ptrtoint i8* %20 to i64
  br label %23

23:                                               ; preds = %3, %7, %11, %15, %19, %1
  %24 = phi i64 [ 0, %1 ], [ %22, %19 ], [ %18, %15 ], [ %14, %11 ], [ %10, %7 ], [ %6, %3 ]
  %25 = inttoptr i64 %24 to %"class.ui::Event"*
  ret %"class.ui::Event"* %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @_ZN2ui19EventTypeFromNativeERKPNS_5EventE(%"class.ui::Event"** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2ui23RegisterCustomEventTypeEv() local_unnamed_addr #3 {
  %1 = load i32, i32* @_ZN2ui12_GLOBAL__N_120g_custom_event_typesE, align 4
  %2 = add nsw i32 %1, 1
  store i32 %2, i32* @_ZN2ui12_GLOBAL__N_120g_custom_event_typesE, align 4
  ret i32 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui28ShouldDefaultToNaturalScrollEv() local_unnamed_addr #0 {
  %1 = tail call %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() #12
  %2 = icmp eq %"class.display::Screen"* %1, null
  br i1 %2, label %25, label %3

3:                                                ; preds = %0
  %4 = bitcast %"class.display::Screen"* %1 to %"class.std::__1::vector.41"* (%"class.display::Screen"*)***
  %5 = load %"class.std::__1::vector.41"* (%"class.display::Screen"*)**, %"class.std::__1::vector.41"* (%"class.display::Screen"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.41"* (%"class.display::Screen"*)*, %"class.std::__1::vector.41"* (%"class.display::Screen"*)** %5, i64 7
  %7 = load %"class.std::__1::vector.41"* (%"class.display::Screen"*)*, %"class.std::__1::vector.41"* (%"class.display::Screen"*)** %6, align 8
  %8 = tail call dereferenceable(24) %"class.std::__1::vector.41"* %7(%"class.display::Screen"* nonnull %1) #12
  %9 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.display::Display"*, %"class.display::Display"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %8, i64 0, i32 0, i32 1
  %12 = load %"class.display::Display"*, %"class.display::Display"** %11, align 8
  %13 = icmp eq %"class.display::Display"* %10, %12
  br i1 %13, label %25, label %14

14:                                               ; preds = %3, %17
  %15 = phi %"class.display::Display"* [ %18, %17 ], [ %10, %3 ]
  %16 = tail call zeroext i1 @_ZNK7display7Display10IsInternalEv(%"class.display::Display"* %15) #12
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %15, i64 1
  %19 = load %"class.display::Display"*, %"class.display::Display"** %11, align 8
  %20 = icmp eq %"class.display::Display"* %18, %19
  br i1 %20, label %25, label %14

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %15, i64 0, i32 7
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 1
  br label %25

25:                                               ; preds = %17, %0, %3, %21
  %26 = phi i1 [ false, %0 ], [ %24, %21 ], [ false, %3 ], [ false, %17 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2ui30GetInternalDisplayTouchSupportEv() local_unnamed_addr #0 {
  %1 = tail call %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() #12
  %2 = icmp eq %"class.display::Screen"* %1, null
  br i1 %2, label %24, label %3

3:                                                ; preds = %0
  %4 = bitcast %"class.display::Screen"* %1 to %"class.std::__1::vector.41"* (%"class.display::Screen"*)***
  %5 = load %"class.std::__1::vector.41"* (%"class.display::Screen"*)**, %"class.std::__1::vector.41"* (%"class.display::Screen"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.41"* (%"class.display::Screen"*)*, %"class.std::__1::vector.41"* (%"class.display::Screen"*)** %5, i64 7
  %7 = load %"class.std::__1::vector.41"* (%"class.display::Screen"*)*, %"class.std::__1::vector.41"* (%"class.display::Screen"*)** %6, align 8
  %8 = tail call dereferenceable(24) %"class.std::__1::vector.41"* %7(%"class.display::Screen"* nonnull %1) #12
  %9 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %8, i64 0, i32 0, i32 0
  %10 = load %"class.display::Display"*, %"class.display::Display"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %8, i64 0, i32 0, i32 1
  %12 = load %"class.display::Display"*, %"class.display::Display"** %11, align 8
  %13 = icmp eq %"class.display::Display"* %10, %12
  br i1 %13, label %24, label %14

14:                                               ; preds = %3, %17
  %15 = phi %"class.display::Display"* [ %18, %17 ], [ %10, %3 ]
  %16 = tail call zeroext i1 @_ZNK7display7Display10IsInternalEv(%"class.display::Display"* %15) #12
  br i1 %16, label %21, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %15, i64 1
  %19 = load %"class.display::Display"*, %"class.display::Display"** %11, align 8
  %20 = icmp eq %"class.display::Display"* %18, %19
  br i1 %20, label %24, label %14

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %15, i64 0, i32 7
  %23 = load i32, i32* %22, align 8
  br label %24

24:                                               ; preds = %17, %3, %21, %0
  %25 = phi i32 [ 0, %0 ], [ %23, %21 ], [ 2, %3 ], [ 2, %17 ]
  ret i32 %25
}

declare %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() local_unnamed_addr #2

declare zeroext i1 @_ZNK7display7Display10IsInternalEv(%"class.display::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21ComputeEventLatencyOSERKPNS_5EventE(%"class.ui::Event"** dereferenceable(8)) local_unnamed_addr #0 {
  %2 = tail call i64 @_ZN2ui15EventTimeForNowEv() #12
  %3 = tail call i64 @_ZN2ui26EventLatencyTimeFromNativeERKPNS_5EventEN4base9TimeTicksE(%"class.ui::Event"** dereferenceable(8) %0, i64 %2) #12
  %4 = tail call i32 @_ZN2ui19EventTypeFromNativeERKPNS_5EventE(%"class.ui::Event"** dereferenceable(8) %0) #12
  tail call void @_ZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_(i32 %4, i64 %3, i64 %2)
  ret void
}

declare i64 @_ZN2ui15EventTimeForNowEv() local_unnamed_addr #2

declare i64 @_ZN2ui26EventLatencyTimeFromNativeERKPNS_5EventEN4base9TimeTicksE(%"class.ui::Event"** dereferenceable(8), i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_(i32, i64, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  %7 = sub nsw i64 %2, %1
  store i64 %7, i64* %6, align 8
  switch i32 %0, label %262 [
    i32 9, label %8
    i32 13, label %44
    i32 12, label %80
    i32 11, label %116
    i32 14, label %152
    i32 7, label %188
    i32 1, label %224
  ]

8:                                                ; preds = %3
  %9 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %10 = inttoptr i64 %9 to %"class.base::HistogramBase"*
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %14 = ptrtoint %"class.base::HistogramBase"* %13 to i64
  store atomic i64 %14, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %15

15:                                               ; preds = %8, %12
  %16 = phi %"class.base::HistogramBase"* [ %10, %8 ], [ %13, %12 ]
  %17 = load i64, i64* %6, align 8
  %18 = tail call i1 @llvm.is.constant.i64(i64 %17) #12
  br i1 %18, label %26, label %19

19:                                               ; preds = %15
  %20 = icmp slt i64 %17, 0
  %21 = select i1 %20, i32 -2147483648, i32 2147483647
  %22 = add i64 %17, 2147483648
  %23 = icmp ult i64 %22, 4294967296
  %24 = trunc i64 %17 to i32
  %25 = select i1 %23, i32 %24, i32 %21, !prof !2
  br label %32

26:                                               ; preds = %15
  %27 = icmp sgt i64 %17, 2147483647
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = icmp sgt i64 %17, -2147483648
  %30 = select i1 %29, i64 %17, i64 -2147483648
  %31 = trunc i64 %30 to i32
  br label %32

32:                                               ; preds = %19, %26, %28
  %33 = phi i32 [ %25, %19 ], [ %31, %28 ], [ 2147483647, %26 ]
  %34 = bitcast %"class.base::HistogramBase"* %16 to void (%"class.base::HistogramBase"*, i32)***
  %35 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %35, i64 6
  %37 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %36, align 8
  tail call void %37(%"class.base::HistogramBase"* %16, i32 %33) #12
  %38 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %39 = inttoptr i64 %38 to %"class.base::HistogramBase"*
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %41, label %260

41:                                               ; preds = %32
  %42 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %43 = ptrtoint %"class.base::HistogramBase"* %42 to i64
  store atomic i64 %43, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %260

44:                                               ; preds = %3
  %45 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_1.0.0.0.0.0 acquire, align 8
  %46 = inttoptr i64 %45 to %"class.base::HistogramBase"*
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %48, label %51

48:                                               ; preds = %44
  %49 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %50 = ptrtoint %"class.base::HistogramBase"* %49 to i64
  store atomic i64 %50, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_1.0.0.0.0.0 release, align 8
  br label %51

51:                                               ; preds = %44, %48
  %52 = phi %"class.base::HistogramBase"* [ %46, %44 ], [ %49, %48 ]
  %53 = load i64, i64* %6, align 8
  %54 = tail call i1 @llvm.is.constant.i64(i64 %53) #12
  br i1 %54, label %62, label %55

55:                                               ; preds = %51
  %56 = icmp slt i64 %53, 0
  %57 = select i1 %56, i32 -2147483648, i32 2147483647
  %58 = add i64 %53, 2147483648
  %59 = icmp ult i64 %58, 4294967296
  %60 = trunc i64 %53 to i32
  %61 = select i1 %59, i32 %60, i32 %57, !prof !2
  br label %68

62:                                               ; preds = %51
  %63 = icmp sgt i64 %53, 2147483647
  br i1 %63, label %68, label %64

64:                                               ; preds = %62
  %65 = icmp sgt i64 %53, -2147483648
  %66 = select i1 %65, i64 %53, i64 -2147483648
  %67 = trunc i64 %66 to i32
  br label %68

68:                                               ; preds = %55, %62, %64
  %69 = phi i32 [ %61, %55 ], [ %67, %64 ], [ 2147483647, %62 ]
  %70 = bitcast %"class.base::HistogramBase"* %52 to void (%"class.base::HistogramBase"*, i32)***
  %71 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %71, i64 6
  %73 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %72, align 8
  tail call void %73(%"class.base::HistogramBase"* %52, i32 %69) #12
  %74 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_2.0.0.0.0.0 acquire, align 8
  %75 = inttoptr i64 %74 to %"class.base::HistogramBase"*
  %76 = icmp eq i64 %74, 0
  br i1 %76, label %77, label %260

77:                                               ; preds = %68
  %78 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %79 = ptrtoint %"class.base::HistogramBase"* %78 to i64
  store atomic i64 %79, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_2.0.0.0.0.0 release, align 8
  br label %260

80:                                               ; preds = %3
  %81 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_3.0.0.0.0.0 acquire, align 8
  %82 = inttoptr i64 %81 to %"class.base::HistogramBase"*
  %83 = icmp eq i64 %81, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %80
  %85 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %86 = ptrtoint %"class.base::HistogramBase"* %85 to i64
  store atomic i64 %86, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_3.0.0.0.0.0 release, align 8
  br label %87

87:                                               ; preds = %80, %84
  %88 = phi %"class.base::HistogramBase"* [ %82, %80 ], [ %85, %84 ]
  %89 = load i64, i64* %6, align 8
  %90 = tail call i1 @llvm.is.constant.i64(i64 %89) #12
  br i1 %90, label %98, label %91

91:                                               ; preds = %87
  %92 = icmp slt i64 %89, 0
  %93 = select i1 %92, i32 -2147483648, i32 2147483647
  %94 = add i64 %89, 2147483648
  %95 = icmp ult i64 %94, 4294967296
  %96 = trunc i64 %89 to i32
  %97 = select i1 %95, i32 %96, i32 %93, !prof !2
  br label %104

98:                                               ; preds = %87
  %99 = icmp sgt i64 %89, 2147483647
  br i1 %99, label %104, label %100

100:                                              ; preds = %98
  %101 = icmp sgt i64 %89, -2147483648
  %102 = select i1 %101, i64 %89, i64 -2147483648
  %103 = trunc i64 %102 to i32
  br label %104

104:                                              ; preds = %91, %98, %100
  %105 = phi i32 [ %97, %91 ], [ %103, %100 ], [ 2147483647, %98 ]
  %106 = bitcast %"class.base::HistogramBase"* %88 to void (%"class.base::HistogramBase"*, i32)***
  %107 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %106, align 8
  %108 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %107, i64 6
  %109 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %108, align 8
  tail call void %109(%"class.base::HistogramBase"* %88, i32 %105) #12
  %110 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_4.0.0.0.0.0 acquire, align 8
  %111 = inttoptr i64 %110 to %"class.base::HistogramBase"*
  %112 = icmp eq i64 %110, 0
  br i1 %112, label %113, label %260

113:                                              ; preds = %104
  %114 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %115 = ptrtoint %"class.base::HistogramBase"* %114 to i64
  store atomic i64 %115, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_4.0.0.0.0.0 release, align 8
  br label %260

116:                                              ; preds = %3
  %117 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_5.0.0.0.0.0 acquire, align 8
  %118 = inttoptr i64 %117 to %"class.base::HistogramBase"*
  %119 = icmp eq i64 %117, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %116
  %121 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %122 = ptrtoint %"class.base::HistogramBase"* %121 to i64
  store atomic i64 %122, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_5.0.0.0.0.0 release, align 8
  br label %123

123:                                              ; preds = %116, %120
  %124 = phi %"class.base::HistogramBase"* [ %118, %116 ], [ %121, %120 ]
  %125 = load i64, i64* %6, align 8
  %126 = tail call i1 @llvm.is.constant.i64(i64 %125) #12
  br i1 %126, label %134, label %127

127:                                              ; preds = %123
  %128 = icmp slt i64 %125, 0
  %129 = select i1 %128, i32 -2147483648, i32 2147483647
  %130 = add i64 %125, 2147483648
  %131 = icmp ult i64 %130, 4294967296
  %132 = trunc i64 %125 to i32
  %133 = select i1 %131, i32 %132, i32 %129, !prof !2
  br label %140

134:                                              ; preds = %123
  %135 = icmp sgt i64 %125, 2147483647
  br i1 %135, label %140, label %136

136:                                              ; preds = %134
  %137 = icmp sgt i64 %125, -2147483648
  %138 = select i1 %137, i64 %125, i64 -2147483648
  %139 = trunc i64 %138 to i32
  br label %140

140:                                              ; preds = %127, %134, %136
  %141 = phi i32 [ %133, %127 ], [ %139, %136 ], [ 2147483647, %134 ]
  %142 = bitcast %"class.base::HistogramBase"* %124 to void (%"class.base::HistogramBase"*, i32)***
  %143 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %143, i64 6
  %145 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %144, align 8
  tail call void %145(%"class.base::HistogramBase"* %124, i32 %141) #12
  %146 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_6.0.0.0.0.0 acquire, align 8
  %147 = inttoptr i64 %146 to %"class.base::HistogramBase"*
  %148 = icmp eq i64 %146, 0
  br i1 %148, label %149, label %260

149:                                              ; preds = %140
  %150 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %151 = ptrtoint %"class.base::HistogramBase"* %150 to i64
  store atomic i64 %151, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_6.0.0.0.0.0 release, align 8
  br label %260

152:                                              ; preds = %3
  %153 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_7.0.0.0.0.0 acquire, align 8
  %154 = inttoptr i64 %153 to %"class.base::HistogramBase"*
  %155 = icmp eq i64 %153, 0
  br i1 %155, label %156, label %159

156:                                              ; preds = %152
  %157 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %158 = ptrtoint %"class.base::HistogramBase"* %157 to i64
  store atomic i64 %158, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_7.0.0.0.0.0 release, align 8
  br label %159

159:                                              ; preds = %152, %156
  %160 = phi %"class.base::HistogramBase"* [ %154, %152 ], [ %157, %156 ]
  %161 = load i64, i64* %6, align 8
  %162 = tail call i1 @llvm.is.constant.i64(i64 %161) #12
  br i1 %162, label %170, label %163

163:                                              ; preds = %159
  %164 = icmp slt i64 %161, 0
  %165 = select i1 %164, i32 -2147483648, i32 2147483647
  %166 = add i64 %161, 2147483648
  %167 = icmp ult i64 %166, 4294967296
  %168 = trunc i64 %161 to i32
  %169 = select i1 %167, i32 %168, i32 %165, !prof !2
  br label %176

170:                                              ; preds = %159
  %171 = icmp sgt i64 %161, 2147483647
  br i1 %171, label %176, label %172

172:                                              ; preds = %170
  %173 = icmp sgt i64 %161, -2147483648
  %174 = select i1 %173, i64 %161, i64 -2147483648
  %175 = trunc i64 %174 to i32
  br label %176

176:                                              ; preds = %163, %170, %172
  %177 = phi i32 [ %169, %163 ], [ %175, %172 ], [ 2147483647, %170 ]
  %178 = bitcast %"class.base::HistogramBase"* %160 to void (%"class.base::HistogramBase"*, i32)***
  %179 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %178, align 8
  %180 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %179, i64 6
  %181 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %180, align 8
  tail call void %181(%"class.base::HistogramBase"* %160, i32 %177) #12
  %182 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_8.0.0.0.0.0 acquire, align 8
  %183 = inttoptr i64 %182 to %"class.base::HistogramBase"*
  %184 = icmp eq i64 %182, 0
  br i1 %184, label %185, label %260

185:                                              ; preds = %176
  %186 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %187 = ptrtoint %"class.base::HistogramBase"* %186 to i64
  store atomic i64 %187, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_8.0.0.0.0.0 release, align 8
  br label %260

188:                                              ; preds = %3
  %189 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_9.0.0.0.0.0 acquire, align 8
  %190 = inttoptr i64 %189 to %"class.base::HistogramBase"*
  %191 = icmp eq i64 %189, 0
  br i1 %191, label %192, label %195

192:                                              ; preds = %188
  %193 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %194 = ptrtoint %"class.base::HistogramBase"* %193 to i64
  store atomic i64 %194, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer_9.0.0.0.0.0 release, align 8
  br label %195

195:                                              ; preds = %188, %192
  %196 = phi %"class.base::HistogramBase"* [ %190, %188 ], [ %193, %192 ]
  %197 = load i64, i64* %6, align 8
  %198 = tail call i1 @llvm.is.constant.i64(i64 %197) #12
  br i1 %198, label %206, label %199

199:                                              ; preds = %195
  %200 = icmp slt i64 %197, 0
  %201 = select i1 %200, i32 -2147483648, i32 2147483647
  %202 = add i64 %197, 2147483648
  %203 = icmp ult i64 %202, 4294967296
  %204 = trunc i64 %197 to i32
  %205 = select i1 %203, i32 %204, i32 %201, !prof !2
  br label %212

206:                                              ; preds = %195
  %207 = icmp sgt i64 %197, 2147483647
  br i1 %207, label %212, label %208

208:                                              ; preds = %206
  %209 = icmp sgt i64 %197, -2147483648
  %210 = select i1 %209, i64 %197, i64 -2147483648
  %211 = trunc i64 %210 to i32
  br label %212

212:                                              ; preds = %199, %206, %208
  %213 = phi i32 [ %205, %199 ], [ %211, %208 ], [ 2147483647, %206 ]
  %214 = bitcast %"class.base::HistogramBase"* %196 to void (%"class.base::HistogramBase"*, i32)***
  %215 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %214, align 8
  %216 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %215, i64 6
  %217 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %216, align 8
  tail call void %217(%"class.base::HistogramBase"* %196, i32 %213) #12
  %218 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__10_.0.0.0.0.0 acquire, align 8
  %219 = inttoptr i64 %218 to %"class.base::HistogramBase"*
  %220 = icmp eq i64 %218, 0
  br i1 %220, label %221, label %260

221:                                              ; preds = %212
  %222 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %223 = ptrtoint %"class.base::HistogramBase"* %222 to i64
  store atomic i64 %223, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__10_.0.0.0.0.0 release, align 8
  br label %260

224:                                              ; preds = %3
  %225 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__11_.0.0.0.0.0 acquire, align 8
  %226 = inttoptr i64 %225 to %"class.base::HistogramBase"*
  %227 = icmp eq i64 %225, 0
  br i1 %227, label %228, label %231

228:                                              ; preds = %224
  %229 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i32 1, i32 1000000, i32 50, i32 1) #12
  %230 = ptrtoint %"class.base::HistogramBase"* %229 to i64
  store atomic i64 %230, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__11_.0.0.0.0.0 release, align 8
  br label %231

231:                                              ; preds = %224, %228
  %232 = phi %"class.base::HistogramBase"* [ %226, %224 ], [ %229, %228 ]
  %233 = load i64, i64* %6, align 8
  %234 = tail call i1 @llvm.is.constant.i64(i64 %233) #12
  br i1 %234, label %242, label %235

235:                                              ; preds = %231
  %236 = icmp slt i64 %233, 0
  %237 = select i1 %236, i32 -2147483648, i32 2147483647
  %238 = add i64 %233, 2147483648
  %239 = icmp ult i64 %238, 4294967296
  %240 = trunc i64 %233 to i32
  %241 = select i1 %239, i32 %240, i32 %237, !prof !2
  br label %248

242:                                              ; preds = %231
  %243 = icmp sgt i64 %233, 2147483647
  br i1 %243, label %248, label %244

244:                                              ; preds = %242
  %245 = icmp sgt i64 %233, -2147483648
  %246 = select i1 %245, i64 %233, i64 -2147483648
  %247 = trunc i64 %246 to i32
  br label %248

248:                                              ; preds = %235, %242, %244
  %249 = phi i32 [ %241, %235 ], [ %247, %244 ], [ 2147483647, %242 ]
  %250 = bitcast %"class.base::HistogramBase"* %232 to void (%"class.base::HistogramBase"*, i32)***
  %251 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %250, align 8
  %252 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %251, i64 6
  %253 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %252, align 8
  tail call void %253(%"class.base::HistogramBase"* %232, i32 %249) #12
  %254 = load atomic i64, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__12_.0.0.0.0.0 acquire, align 8
  %255 = inttoptr i64 %254 to %"class.base::HistogramBase"*
  %256 = icmp eq i64 %254, 0
  br i1 %256, label %257, label %260

257:                                              ; preds = %248
  %258 = tail call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0), i64 1000, i64 60000000, i32 50, i32 1) #12
  %259 = ptrtoint %"class.base::HistogramBase"* %258 to i64
  store atomic i64 %259, i64* @_ZZN2ui21ComputeEventLatencyOSENS_9EventTypeEN4base9TimeTicksES2_E24atomic_histogram_pointer__12_.0.0.0.0.0 release, align 8
  br label %260

260:                                              ; preds = %257, %248, %221, %212, %185, %176, %149, %140, %113, %104, %77, %68, %41, %32
  %261 = phi %"class.base::HistogramBase"* [ %39, %32 ], [ %42, %41 ], [ %75, %68 ], [ %78, %77 ], [ %111, %104 ], [ %114, %113 ], [ %147, %140 ], [ %150, %149 ], [ %183, %176 ], [ %186, %185 ], [ %219, %212 ], [ %222, %221 ], [ %255, %248 ], [ %258, %257 ]
  call void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"* %261, %"class.base::TimeDelta"* nonnull dereferenceable(8) %4) #12
  br label %262

262:                                              ; preds = %260, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  ret void
}

declare %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #2

declare %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8*, i64, i64, i32, i32) local_unnamed_addr #2

declare void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"*, %"class.base::TimeDelta"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui42ConvertEventLocationToTargetWindowLocationERKN3gfx5PointES3_PNS_12LocatedEventE(%"class.gfx::Point"* nocapture readonly dereferenceable(8), %"class.gfx::Point"* nocapture readonly dereferenceable(8), %"class.ui::LocatedEvent"* nocapture) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %0, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %5, %7
  %9 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %10, %12
  %14 = and i1 %8, %13
  br i1 %14, label %39, label %15

15:                                               ; preds = %3
  %16 = icmp sgt i32 %7, -1
  %17 = select i1 %16, i32 -2147483648, i32 2147483647
  %18 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %5, i32 %7) #12
  %19 = extractvalue { i32, i1 } %18, 1
  %20 = extractvalue { i32, i1 } %18, 0
  %21 = select i1 %19, i32 %17, i32 %20, !prof !3
  %22 = icmp sgt i32 %12, -1
  %23 = select i1 %22, i32 -2147483648, i32 2147483647
  %24 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %10, i32 %12) #12
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 %23, i32 %26, !prof !3
  %28 = getelementptr inbounds %"class.ui::LocatedEvent", %"class.ui::LocatedEvent"* %2, i64 0, i32 1
  %29 = sitofp i32 %21 to float
  %30 = sitofp i32 %27 to float
  %31 = bitcast %"class.gfx::PointF"* %28 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = extractelement <2 x float> %32, i32 0
  %34 = fadd float %33, %29
  %35 = insertelement <2 x float> undef, float %34, i32 0
  %36 = extractelement <2 x float> %32, i32 1
  %37 = fadd float %36, %30
  %38 = insertelement <2 x float> %35, float %37, i32 1
  store <2 x float> %38, <2 x float>* %31, align 8
  br label %39

39:                                               ; preds = %3, %15
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i8*, i64 } @_ZN2ui13EventTypeNameENS_9EventTypeE(i32) local_unnamed_addr #5 {
  %2 = icmp ult i32 %0, 39
  br i1 %2, label %3, label %10

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [39 x i64], [39 x i64]* @switch.table._ZN2ui13EventTypeNameENS_9EventTypeE, i64 0, i64 %4
  %6 = load i64, i64* %5, align 8
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds [39 x i8*], [39 x i8*]* @switch.table._ZN2ui13EventTypeNameENS_9EventTypeE.87, i64 0, i64 %7
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %1, %3
  %11 = phi i64 [ 0, %1 ], [ %6, %3 ]
  %12 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %1 ], [ %9, %3 ]
  %13 = insertvalue { i8*, i64 } undef, i8* %12, 0
  %14 = insertvalue { i8*, i64 } %13, i64 %11, 1
  ret { i8*, i64 } %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui15EventFlagsNamesEi(%"class.std::__1::vector.59"* noalias sret, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %6 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %7 = tail call i8* @_Znwm(i64 80) #13
  %8 = getelementptr inbounds i8, i8* %7, i64 80
  %9 = ptrtoint i8* %8 to i64
  %10 = insertelement <2 x i8*> undef, i8* %7, i32 0
  %11 = shufflevector <2 x i8*> %10, <2 x i8*> undef, <2 x i32> zeroinitializer
  %12 = ptrtoint <2 x i8*> %11 to <2 x i64>
  %13 = bitcast %"class.std::__1::vector.59"* %0 to <2 x i64>*
  store <2 x i64> %12, <2 x i64>* %13, align 8
  store i64 %9, i64* %5, align 8
  %14 = icmp eq i32 %1, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = bitcast i8* %7 to i8**
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i64 0, i64 0), i8** %16, align 8
  %17 = getelementptr inbounds i8, i8* %7, i64 8
  %18 = bitcast i8* %17 to i64*
  store i64 4, i64* %18, align 8
  %19 = getelementptr inbounds i8, i8* %7, i64 16
  %20 = ptrtoint i8* %19 to i64
  %21 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %20, i64* %21, align 8
  br label %872

22:                                               ; preds = %2
  %23 = and i32 %1, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %22
  %26 = bitcast i8* %7 to i8**
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.55, i64 0, i64 0), i8** %26, align 8
  %27 = getelementptr inbounds i8, i8* %7, i64 8
  %28 = bitcast i8* %27 to i64*
  store i64 14, i64* %28, align 8
  %29 = getelementptr inbounds i8, i8* %7, i64 16
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %30, i64* %31, align 8
  br label %32

32:                                               ; preds = %25, %22
  %33 = and i32 %1, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %92, label %35

35:                                               ; preds = %32
  %36 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %37 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %38 = icmp ult %"class.base::BasicStringPiece"* %36, %37
  %39 = ptrtoint %"class.base::BasicStringPiece"* %37 to i64
  br i1 %38, label %40, label %46

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i64 0, i64 0), i8** %41, align 8
  %42 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 0, i32 1
  store i64 10, i64* %42, align 8
  %43 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %36, i64 1
  %44 = ptrtoint %"class.base::BasicStringPiece"* %43 to i64
  %45 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %44, i64* %45, align 8
  br label %92

46:                                               ; preds = %35
  %47 = ptrtoint %"class.base::BasicStringPiece"* %36 to i64
  %48 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %49 = load i64, i64* %6, align 8
  %50 = sub i64 %47, %49
  %51 = ashr exact i64 %50, 4
  %52 = add nsw i64 %51, 1
  %53 = icmp ugt i64 %52, 1152921504606846975
  br i1 %53, label %54, label %56

54:                                               ; preds = %46
  %55 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %55) #14
  unreachable

56:                                               ; preds = %46
  %57 = sub i64 %39, %49
  %58 = ashr exact i64 %57, 4
  %59 = icmp ult i64 %58, 576460752303423487
  br i1 %59, label %60, label %68

60:                                               ; preds = %56
  %61 = ashr exact i64 %57, 3
  %62 = icmp ult i64 %61, %52
  %63 = select i1 %62, i64 %52, i64 %61
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %73, label %65

65:                                               ; preds = %60
  %66 = icmp ugt i64 %63, 1152921504606846975
  br i1 %66, label %67, label %68

67:                                               ; preds = %65
  tail call void @abort() #14
  unreachable

68:                                               ; preds = %65, %56
  %69 = phi i64 [ %63, %65 ], [ 1152921504606846975, %56 ]
  %70 = shl i64 %69, 4
  %71 = tail call i8* @_Znwm(i64 %70) #13
  %72 = bitcast i8* %71 to %"class.base::BasicStringPiece"*
  br label %73

73:                                               ; preds = %68, %60
  %74 = phi i64 [ %69, %68 ], [ 0, %60 ]
  %75 = phi i8* [ %71, %68 ], [ null, %60 ]
  %76 = phi %"class.base::BasicStringPiece"* [ %72, %68 ], [ null, %60 ]
  %77 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 %51
  %78 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 %74
  %79 = ptrtoint %"class.base::BasicStringPiece"* %78 to i64
  %80 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %77, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i64 0, i64 0), i8** %80, align 8
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 %51, i32 1
  store i64 10, i64* %81, align 8
  %82 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %77, i64 1
  %83 = ptrtoint %"class.base::BasicStringPiece"* %82 to i64
  %84 = ptrtoint %"class.base::BasicStringPiece"* %76 to i64
  %85 = icmp sgt i64 %50, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %73
  %87 = inttoptr i64 %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %87, i64 %50, i1 false) #12
  br label %88

88:                                               ; preds = %86, %73
  store i64 %84, i64* %6, align 8
  store i64 %83, i64* %48, align 8
  store i64 %79, i64* %5, align 8
  %89 = icmp eq i64 %49, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %88
  %91 = inttoptr i64 %49 to i8*
  tail call void @_ZdlPv(i8* %91) #13
  br label %92

92:                                               ; preds = %90, %88, %40, %32
  %93 = and i32 %1, 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %152, label %95

95:                                               ; preds = %92
  %96 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %97 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %98 = icmp ult %"class.base::BasicStringPiece"* %96, %97
  %99 = ptrtoint %"class.base::BasicStringPiece"* %97 to i64
  br i1 %98, label %100, label %106

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %96, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i64 0, i64 0), i8** %101, align 8
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %96, i64 0, i32 1
  store i64 12, i64* %102, align 8
  %103 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %96, i64 1
  %104 = ptrtoint %"class.base::BasicStringPiece"* %103 to i64
  %105 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %104, i64* %105, align 8
  br label %152

106:                                              ; preds = %95
  %107 = ptrtoint %"class.base::BasicStringPiece"* %96 to i64
  %108 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %109 = load i64, i64* %6, align 8
  %110 = sub i64 %107, %109
  %111 = ashr exact i64 %110, 4
  %112 = add nsw i64 %111, 1
  %113 = icmp ugt i64 %112, 1152921504606846975
  br i1 %113, label %114, label %116

114:                                              ; preds = %106
  %115 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %115) #14
  unreachable

116:                                              ; preds = %106
  %117 = sub i64 %99, %109
  %118 = ashr exact i64 %117, 4
  %119 = icmp ult i64 %118, 576460752303423487
  br i1 %119, label %120, label %128

120:                                              ; preds = %116
  %121 = ashr exact i64 %117, 3
  %122 = icmp ult i64 %121, %112
  %123 = select i1 %122, i64 %112, i64 %121
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %133, label %125

125:                                              ; preds = %120
  %126 = icmp ugt i64 %123, 1152921504606846975
  br i1 %126, label %127, label %128

127:                                              ; preds = %125
  tail call void @abort() #14
  unreachable

128:                                              ; preds = %125, %116
  %129 = phi i64 [ %123, %125 ], [ 1152921504606846975, %116 ]
  %130 = shl i64 %129, 4
  %131 = tail call i8* @_Znwm(i64 %130) #13
  %132 = bitcast i8* %131 to %"class.base::BasicStringPiece"*
  br label %133

133:                                              ; preds = %128, %120
  %134 = phi i64 [ %129, %128 ], [ 0, %120 ]
  %135 = phi i8* [ %131, %128 ], [ null, %120 ]
  %136 = phi %"class.base::BasicStringPiece"* [ %132, %128 ], [ null, %120 ]
  %137 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 %111
  %138 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 %134
  %139 = ptrtoint %"class.base::BasicStringPiece"* %138 to i64
  %140 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i64 0, i64 0), i8** %140, align 8
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %136, i64 %111, i32 1
  store i64 12, i64* %141, align 8
  %142 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %137, i64 1
  %143 = ptrtoint %"class.base::BasicStringPiece"* %142 to i64
  %144 = ptrtoint %"class.base::BasicStringPiece"* %136 to i64
  %145 = icmp sgt i64 %110, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %133
  %147 = inttoptr i64 %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %147, i64 %110, i1 false) #12
  br label %148

148:                                              ; preds = %146, %133
  store i64 %144, i64* %6, align 8
  store i64 %143, i64* %108, align 8
  store i64 %139, i64* %5, align 8
  %149 = icmp eq i64 %109, 0
  br i1 %149, label %152, label %150

150:                                              ; preds = %148
  %151 = inttoptr i64 %109 to i8*
  tail call void @_ZdlPv(i8* %151) #13
  br label %152

152:                                              ; preds = %150, %148, %100, %92
  %153 = and i32 %1, 8
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %212, label %155

155:                                              ; preds = %152
  %156 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %157 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %158 = icmp ult %"class.base::BasicStringPiece"* %156, %157
  %159 = ptrtoint %"class.base::BasicStringPiece"* %157 to i64
  br i1 %158, label %160, label %166

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %156, i64 0, i32 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58, i64 0, i64 0), i8** %161, align 8
  %162 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %156, i64 0, i32 1
  store i64 8, i64* %162, align 8
  %163 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %156, i64 1
  %164 = ptrtoint %"class.base::BasicStringPiece"* %163 to i64
  %165 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %164, i64* %165, align 8
  br label %212

166:                                              ; preds = %155
  %167 = ptrtoint %"class.base::BasicStringPiece"* %156 to i64
  %168 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %169 = load i64, i64* %6, align 8
  %170 = sub i64 %167, %169
  %171 = ashr exact i64 %170, 4
  %172 = add nsw i64 %171, 1
  %173 = icmp ugt i64 %172, 1152921504606846975
  br i1 %173, label %174, label %176

174:                                              ; preds = %166
  %175 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %175) #14
  unreachable

176:                                              ; preds = %166
  %177 = sub i64 %159, %169
  %178 = ashr exact i64 %177, 4
  %179 = icmp ult i64 %178, 576460752303423487
  br i1 %179, label %180, label %188

180:                                              ; preds = %176
  %181 = ashr exact i64 %177, 3
  %182 = icmp ult i64 %181, %172
  %183 = select i1 %182, i64 %172, i64 %181
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %193, label %185

185:                                              ; preds = %180
  %186 = icmp ugt i64 %183, 1152921504606846975
  br i1 %186, label %187, label %188

187:                                              ; preds = %185
  tail call void @abort() #14
  unreachable

188:                                              ; preds = %185, %176
  %189 = phi i64 [ %183, %185 ], [ 1152921504606846975, %176 ]
  %190 = shl i64 %189, 4
  %191 = tail call i8* @_Znwm(i64 %190) #13
  %192 = bitcast i8* %191 to %"class.base::BasicStringPiece"*
  br label %193

193:                                              ; preds = %188, %180
  %194 = phi i64 [ %189, %188 ], [ 0, %180 ]
  %195 = phi i8* [ %191, %188 ], [ null, %180 ]
  %196 = phi %"class.base::BasicStringPiece"* [ %192, %188 ], [ null, %180 ]
  %197 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %196, i64 %171
  %198 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %196, i64 %194
  %199 = ptrtoint %"class.base::BasicStringPiece"* %198 to i64
  %200 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 0, i32 0
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58, i64 0, i64 0), i8** %200, align 8
  %201 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %196, i64 %171, i32 1
  store i64 8, i64* %201, align 8
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 1
  %203 = ptrtoint %"class.base::BasicStringPiece"* %202 to i64
  %204 = ptrtoint %"class.base::BasicStringPiece"* %196 to i64
  %205 = icmp sgt i64 %170, 0
  br i1 %205, label %206, label %208

206:                                              ; preds = %193
  %207 = inttoptr i64 %169 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %195, i8* align 8 %207, i64 %170, i1 false) #12
  br label %208

208:                                              ; preds = %206, %193
  store i64 %204, i64* %6, align 8
  store i64 %203, i64* %168, align 8
  store i64 %199, i64* %5, align 8
  %209 = icmp eq i64 %169, 0
  br i1 %209, label %212, label %210

210:                                              ; preds = %208
  %211 = inttoptr i64 %169 to i8*
  tail call void @_ZdlPv(i8* %211) #13
  br label %212

212:                                              ; preds = %210, %208, %160, %152
  %213 = and i32 %1, 16
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %272, label %215

215:                                              ; preds = %212
  %216 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %217 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %218 = icmp ult %"class.base::BasicStringPiece"* %216, %217
  %219 = ptrtoint %"class.base::BasicStringPiece"* %217 to i64
  br i1 %218, label %220, label %226

220:                                              ; preds = %215
  %221 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %216, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i64 0, i64 0), i8** %221, align 8
  %222 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %216, i64 0, i32 1
  store i64 12, i64* %222, align 8
  %223 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %216, i64 1
  %224 = ptrtoint %"class.base::BasicStringPiece"* %223 to i64
  %225 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %224, i64* %225, align 8
  br label %272

226:                                              ; preds = %215
  %227 = ptrtoint %"class.base::BasicStringPiece"* %216 to i64
  %228 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %229 = load i64, i64* %6, align 8
  %230 = sub i64 %227, %229
  %231 = ashr exact i64 %230, 4
  %232 = add nsw i64 %231, 1
  %233 = icmp ugt i64 %232, 1152921504606846975
  br i1 %233, label %234, label %236

234:                                              ; preds = %226
  %235 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %235) #14
  unreachable

236:                                              ; preds = %226
  %237 = sub i64 %219, %229
  %238 = ashr exact i64 %237, 4
  %239 = icmp ult i64 %238, 576460752303423487
  br i1 %239, label %240, label %248

240:                                              ; preds = %236
  %241 = ashr exact i64 %237, 3
  %242 = icmp ult i64 %241, %232
  %243 = select i1 %242, i64 %232, i64 %241
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %253, label %245

245:                                              ; preds = %240
  %246 = icmp ugt i64 %243, 1152921504606846975
  br i1 %246, label %247, label %248

247:                                              ; preds = %245
  tail call void @abort() #14
  unreachable

248:                                              ; preds = %245, %236
  %249 = phi i64 [ %243, %245 ], [ 1152921504606846975, %236 ]
  %250 = shl i64 %249, 4
  %251 = tail call i8* @_Znwm(i64 %250) #13
  %252 = bitcast i8* %251 to %"class.base::BasicStringPiece"*
  br label %253

253:                                              ; preds = %248, %240
  %254 = phi i64 [ %249, %248 ], [ 0, %240 ]
  %255 = phi i8* [ %251, %248 ], [ null, %240 ]
  %256 = phi %"class.base::BasicStringPiece"* [ %252, %248 ], [ null, %240 ]
  %257 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %256, i64 %231
  %258 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %256, i64 %254
  %259 = ptrtoint %"class.base::BasicStringPiece"* %258 to i64
  %260 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %257, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i64 0, i64 0), i8** %260, align 8
  %261 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %256, i64 %231, i32 1
  store i64 12, i64* %261, align 8
  %262 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %257, i64 1
  %263 = ptrtoint %"class.base::BasicStringPiece"* %262 to i64
  %264 = ptrtoint %"class.base::BasicStringPiece"* %256 to i64
  %265 = icmp sgt i64 %230, 0
  br i1 %265, label %266, label %268

266:                                              ; preds = %253
  %267 = inttoptr i64 %229 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %255, i8* align 8 %267, i64 %230, i1 false) #12
  br label %268

268:                                              ; preds = %266, %253
  store i64 %264, i64* %6, align 8
  store i64 %263, i64* %228, align 8
  store i64 %259, i64* %5, align 8
  %269 = icmp eq i64 %229, 0
  br i1 %269, label %272, label %270

270:                                              ; preds = %268
  %271 = inttoptr i64 %229 to i8*
  tail call void @_ZdlPv(i8* %271) #13
  br label %272

272:                                              ; preds = %270, %268, %220, %212
  %273 = and i32 %1, 32
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %332, label %275

275:                                              ; preds = %272
  %276 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %277 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %278 = icmp ult %"class.base::BasicStringPiece"* %276, %277
  %279 = ptrtoint %"class.base::BasicStringPiece"* %277 to i64
  br i1 %278, label %280, label %286

280:                                              ; preds = %275
  %281 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %276, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i64 0, i64 0), i8** %281, align 8
  %282 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %276, i64 0, i32 1
  store i64 10, i64* %282, align 8
  %283 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %276, i64 1
  %284 = ptrtoint %"class.base::BasicStringPiece"* %283 to i64
  %285 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %284, i64* %285, align 8
  br label %332

286:                                              ; preds = %275
  %287 = ptrtoint %"class.base::BasicStringPiece"* %276 to i64
  %288 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %289 = load i64, i64* %6, align 8
  %290 = sub i64 %287, %289
  %291 = ashr exact i64 %290, 4
  %292 = add nsw i64 %291, 1
  %293 = icmp ugt i64 %292, 1152921504606846975
  br i1 %293, label %294, label %296

294:                                              ; preds = %286
  %295 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %295) #14
  unreachable

296:                                              ; preds = %286
  %297 = sub i64 %279, %289
  %298 = ashr exact i64 %297, 4
  %299 = icmp ult i64 %298, 576460752303423487
  br i1 %299, label %300, label %308

300:                                              ; preds = %296
  %301 = ashr exact i64 %297, 3
  %302 = icmp ult i64 %301, %292
  %303 = select i1 %302, i64 %292, i64 %301
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %313, label %305

305:                                              ; preds = %300
  %306 = icmp ugt i64 %303, 1152921504606846975
  br i1 %306, label %307, label %308

307:                                              ; preds = %305
  tail call void @abort() #14
  unreachable

308:                                              ; preds = %305, %296
  %309 = phi i64 [ %303, %305 ], [ 1152921504606846975, %296 ]
  %310 = shl i64 %309, 4
  %311 = tail call i8* @_Znwm(i64 %310) #13
  %312 = bitcast i8* %311 to %"class.base::BasicStringPiece"*
  br label %313

313:                                              ; preds = %308, %300
  %314 = phi i64 [ %309, %308 ], [ 0, %300 ]
  %315 = phi i8* [ %311, %308 ], [ null, %300 ]
  %316 = phi %"class.base::BasicStringPiece"* [ %312, %308 ], [ null, %300 ]
  %317 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %316, i64 %291
  %318 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %316, i64 %314
  %319 = ptrtoint %"class.base::BasicStringPiece"* %318 to i64
  %320 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %317, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i64 0, i64 0), i8** %320, align 8
  %321 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %316, i64 %291, i32 1
  store i64 10, i64* %321, align 8
  %322 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %317, i64 1
  %323 = ptrtoint %"class.base::BasicStringPiece"* %322 to i64
  %324 = ptrtoint %"class.base::BasicStringPiece"* %316 to i64
  %325 = icmp sgt i64 %290, 0
  br i1 %325, label %326, label %328

326:                                              ; preds = %313
  %327 = inttoptr i64 %289 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %315, i8* align 8 %327, i64 %290, i1 false) #12
  br label %328

328:                                              ; preds = %326, %313
  store i64 %324, i64* %6, align 8
  store i64 %323, i64* %288, align 8
  store i64 %319, i64* %5, align 8
  %329 = icmp eq i64 %289, 0
  br i1 %329, label %332, label %330

330:                                              ; preds = %328
  %331 = inttoptr i64 %289 to i8*
  tail call void @_ZdlPv(i8* %331) #13
  br label %332

332:                                              ; preds = %330, %328, %280, %272
  %333 = and i32 %1, 64
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %392, label %335

335:                                              ; preds = %332
  %336 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %337 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %338 = icmp ult %"class.base::BasicStringPiece"* %336, %337
  %339 = ptrtoint %"class.base::BasicStringPiece"* %337 to i64
  br i1 %338, label %340, label %346

340:                                              ; preds = %335
  %341 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %336, i64 0, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61, i64 0, i64 0), i8** %341, align 8
  %342 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %336, i64 0, i32 1
  store i64 9, i64* %342, align 8
  %343 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %336, i64 1
  %344 = ptrtoint %"class.base::BasicStringPiece"* %343 to i64
  %345 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %344, i64* %345, align 8
  br label %392

346:                                              ; preds = %335
  %347 = ptrtoint %"class.base::BasicStringPiece"* %336 to i64
  %348 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %349 = load i64, i64* %6, align 8
  %350 = sub i64 %347, %349
  %351 = ashr exact i64 %350, 4
  %352 = add nsw i64 %351, 1
  %353 = icmp ugt i64 %352, 1152921504606846975
  br i1 %353, label %354, label %356

354:                                              ; preds = %346
  %355 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %355) #14
  unreachable

356:                                              ; preds = %346
  %357 = sub i64 %339, %349
  %358 = ashr exact i64 %357, 4
  %359 = icmp ult i64 %358, 576460752303423487
  br i1 %359, label %360, label %368

360:                                              ; preds = %356
  %361 = ashr exact i64 %357, 3
  %362 = icmp ult i64 %361, %352
  %363 = select i1 %362, i64 %352, i64 %361
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %373, label %365

365:                                              ; preds = %360
  %366 = icmp ugt i64 %363, 1152921504606846975
  br i1 %366, label %367, label %368

367:                                              ; preds = %365
  tail call void @abort() #14
  unreachable

368:                                              ; preds = %365, %356
  %369 = phi i64 [ %363, %365 ], [ 1152921504606846975, %356 ]
  %370 = shl i64 %369, 4
  %371 = tail call i8* @_Znwm(i64 %370) #13
  %372 = bitcast i8* %371 to %"class.base::BasicStringPiece"*
  br label %373

373:                                              ; preds = %368, %360
  %374 = phi i64 [ %369, %368 ], [ 0, %360 ]
  %375 = phi i8* [ %371, %368 ], [ null, %360 ]
  %376 = phi %"class.base::BasicStringPiece"* [ %372, %368 ], [ null, %360 ]
  %377 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %376, i64 %351
  %378 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %376, i64 %374
  %379 = ptrtoint %"class.base::BasicStringPiece"* %378 to i64
  %380 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %377, i64 0, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61, i64 0, i64 0), i8** %380, align 8
  %381 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %376, i64 %351, i32 1
  store i64 9, i64* %381, align 8
  %382 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %377, i64 1
  %383 = ptrtoint %"class.base::BasicStringPiece"* %382 to i64
  %384 = ptrtoint %"class.base::BasicStringPiece"* %376 to i64
  %385 = icmp sgt i64 %350, 0
  br i1 %385, label %386, label %388

386:                                              ; preds = %373
  %387 = inttoptr i64 %349 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %375, i8* align 8 %387, i64 %350, i1 false) #12
  br label %388

388:                                              ; preds = %386, %373
  store i64 %384, i64* %6, align 8
  store i64 %383, i64* %348, align 8
  store i64 %379, i64* %5, align 8
  %389 = icmp eq i64 %349, 0
  br i1 %389, label %392, label %390

390:                                              ; preds = %388
  %391 = inttoptr i64 %349 to i8*
  tail call void @_ZdlPv(i8* %391) #13
  br label %392

392:                                              ; preds = %390, %388, %340, %332
  %393 = trunc i32 %1 to i8
  %394 = icmp slt i8 %393, 0
  br i1 %394, label %395, label %452

395:                                              ; preds = %392
  %396 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %397 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %398 = icmp ult %"class.base::BasicStringPiece"* %396, %397
  %399 = ptrtoint %"class.base::BasicStringPiece"* %397 to i64
  br i1 %398, label %400, label %406

400:                                              ; preds = %395
  %401 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %396, i64 0, i32 0
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i64 0, i64 0), i8** %401, align 8
  %402 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %396, i64 0, i32 1
  store i64 11, i64* %402, align 8
  %403 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %396, i64 1
  %404 = ptrtoint %"class.base::BasicStringPiece"* %403 to i64
  %405 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %404, i64* %405, align 8
  br label %452

406:                                              ; preds = %395
  %407 = ptrtoint %"class.base::BasicStringPiece"* %396 to i64
  %408 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %409 = load i64, i64* %6, align 8
  %410 = sub i64 %407, %409
  %411 = ashr exact i64 %410, 4
  %412 = add nsw i64 %411, 1
  %413 = icmp ugt i64 %412, 1152921504606846975
  br i1 %413, label %414, label %416

414:                                              ; preds = %406
  %415 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %415) #14
  unreachable

416:                                              ; preds = %406
  %417 = sub i64 %399, %409
  %418 = ashr exact i64 %417, 4
  %419 = icmp ult i64 %418, 576460752303423487
  br i1 %419, label %420, label %428

420:                                              ; preds = %416
  %421 = ashr exact i64 %417, 3
  %422 = icmp ult i64 %421, %412
  %423 = select i1 %422, i64 %412, i64 %421
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %433, label %425

425:                                              ; preds = %420
  %426 = icmp ugt i64 %423, 1152921504606846975
  br i1 %426, label %427, label %428

427:                                              ; preds = %425
  tail call void @abort() #14
  unreachable

428:                                              ; preds = %425, %416
  %429 = phi i64 [ %423, %425 ], [ 1152921504606846975, %416 ]
  %430 = shl i64 %429, 4
  %431 = tail call i8* @_Znwm(i64 %430) #13
  %432 = bitcast i8* %431 to %"class.base::BasicStringPiece"*
  br label %433

433:                                              ; preds = %428, %420
  %434 = phi i64 [ %429, %428 ], [ 0, %420 ]
  %435 = phi i8* [ %431, %428 ], [ null, %420 ]
  %436 = phi %"class.base::BasicStringPiece"* [ %432, %428 ], [ null, %420 ]
  %437 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %436, i64 %411
  %438 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %436, i64 %434
  %439 = ptrtoint %"class.base::BasicStringPiece"* %438 to i64
  %440 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %437, i64 0, i32 0
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i64 0, i64 0), i8** %440, align 8
  %441 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %436, i64 %411, i32 1
  store i64 11, i64* %441, align 8
  %442 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %437, i64 1
  %443 = ptrtoint %"class.base::BasicStringPiece"* %442 to i64
  %444 = ptrtoint %"class.base::BasicStringPiece"* %436 to i64
  %445 = icmp sgt i64 %410, 0
  br i1 %445, label %446, label %448

446:                                              ; preds = %433
  %447 = inttoptr i64 %409 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %435, i8* align 8 %447, i64 %410, i1 false) #12
  br label %448

448:                                              ; preds = %446, %433
  store i64 %444, i64* %6, align 8
  store i64 %443, i64* %408, align 8
  store i64 %439, i64* %5, align 8
  %449 = icmp eq i64 %409, 0
  br i1 %449, label %452, label %450

450:                                              ; preds = %448
  %451 = inttoptr i64 %409 to i8*
  tail call void @_ZdlPv(i8* %451) #13
  br label %452

452:                                              ; preds = %450, %448, %400, %392
  %453 = and i32 %1, 256
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %512, label %455

455:                                              ; preds = %452
  %456 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %457 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %458 = icmp ult %"class.base::BasicStringPiece"* %456, %457
  %459 = ptrtoint %"class.base::BasicStringPiece"* %457 to i64
  br i1 %458, label %460, label %466

460:                                              ; preds = %455
  %461 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %456, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i64 0, i64 0), i8** %461, align 8
  %462 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %456, i64 0, i32 1
  store i64 12, i64* %462, align 8
  %463 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %456, i64 1
  %464 = ptrtoint %"class.base::BasicStringPiece"* %463 to i64
  %465 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %464, i64* %465, align 8
  br label %512

466:                                              ; preds = %455
  %467 = ptrtoint %"class.base::BasicStringPiece"* %456 to i64
  %468 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %469 = load i64, i64* %6, align 8
  %470 = sub i64 %467, %469
  %471 = ashr exact i64 %470, 4
  %472 = add nsw i64 %471, 1
  %473 = icmp ugt i64 %472, 1152921504606846975
  br i1 %473, label %474, label %476

474:                                              ; preds = %466
  %475 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %475) #14
  unreachable

476:                                              ; preds = %466
  %477 = sub i64 %459, %469
  %478 = ashr exact i64 %477, 4
  %479 = icmp ult i64 %478, 576460752303423487
  br i1 %479, label %480, label %488

480:                                              ; preds = %476
  %481 = ashr exact i64 %477, 3
  %482 = icmp ult i64 %481, %472
  %483 = select i1 %482, i64 %472, i64 %481
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %493, label %485

485:                                              ; preds = %480
  %486 = icmp ugt i64 %483, 1152921504606846975
  br i1 %486, label %487, label %488

487:                                              ; preds = %485
  tail call void @abort() #14
  unreachable

488:                                              ; preds = %485, %476
  %489 = phi i64 [ %483, %485 ], [ 1152921504606846975, %476 ]
  %490 = shl i64 %489, 4
  %491 = tail call i8* @_Znwm(i64 %490) #13
  %492 = bitcast i8* %491 to %"class.base::BasicStringPiece"*
  br label %493

493:                                              ; preds = %488, %480
  %494 = phi i64 [ %489, %488 ], [ 0, %480 ]
  %495 = phi i8* [ %491, %488 ], [ null, %480 ]
  %496 = phi %"class.base::BasicStringPiece"* [ %492, %488 ], [ null, %480 ]
  %497 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %496, i64 %471
  %498 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %496, i64 %494
  %499 = ptrtoint %"class.base::BasicStringPiece"* %498 to i64
  %500 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %497, i64 0, i32 0
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i64 0, i64 0), i8** %500, align 8
  %501 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %496, i64 %471, i32 1
  store i64 12, i64* %501, align 8
  %502 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %497, i64 1
  %503 = ptrtoint %"class.base::BasicStringPiece"* %502 to i64
  %504 = ptrtoint %"class.base::BasicStringPiece"* %496 to i64
  %505 = icmp sgt i64 %470, 0
  br i1 %505, label %506, label %508

506:                                              ; preds = %493
  %507 = inttoptr i64 %469 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %495, i8* align 8 %507, i64 %470, i1 false) #12
  br label %508

508:                                              ; preds = %506, %493
  store i64 %504, i64* %6, align 8
  store i64 %503, i64* %468, align 8
  store i64 %499, i64* %5, align 8
  %509 = icmp eq i64 %469, 0
  br i1 %509, label %512, label %510

510:                                              ; preds = %508
  %511 = inttoptr i64 %469 to i8*
  tail call void @_ZdlPv(i8* %511) #13
  br label %512

512:                                              ; preds = %510, %508, %460, %452
  %513 = and i32 %1, 512
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %572, label %515

515:                                              ; preds = %512
  %516 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %517 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %518 = icmp ult %"class.base::BasicStringPiece"* %516, %517
  %519 = ptrtoint %"class.base::BasicStringPiece"* %517 to i64
  br i1 %518, label %520, label %526

520:                                              ; preds = %515
  %521 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %516, i64 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i64 0, i64 0), i8** %521, align 8
  %522 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %516, i64 0, i32 1
  store i64 14, i64* %522, align 8
  %523 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %516, i64 1
  %524 = ptrtoint %"class.base::BasicStringPiece"* %523 to i64
  %525 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %524, i64* %525, align 8
  br label %572

526:                                              ; preds = %515
  %527 = ptrtoint %"class.base::BasicStringPiece"* %516 to i64
  %528 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %529 = load i64, i64* %6, align 8
  %530 = sub i64 %527, %529
  %531 = ashr exact i64 %530, 4
  %532 = add nsw i64 %531, 1
  %533 = icmp ugt i64 %532, 1152921504606846975
  br i1 %533, label %534, label %536

534:                                              ; preds = %526
  %535 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %535) #14
  unreachable

536:                                              ; preds = %526
  %537 = sub i64 %519, %529
  %538 = ashr exact i64 %537, 4
  %539 = icmp ult i64 %538, 576460752303423487
  br i1 %539, label %540, label %548

540:                                              ; preds = %536
  %541 = ashr exact i64 %537, 3
  %542 = icmp ult i64 %541, %532
  %543 = select i1 %542, i64 %532, i64 %541
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %553, label %545

545:                                              ; preds = %540
  %546 = icmp ugt i64 %543, 1152921504606846975
  br i1 %546, label %547, label %548

547:                                              ; preds = %545
  tail call void @abort() #14
  unreachable

548:                                              ; preds = %545, %536
  %549 = phi i64 [ %543, %545 ], [ 1152921504606846975, %536 ]
  %550 = shl i64 %549, 4
  %551 = tail call i8* @_Znwm(i64 %550) #13
  %552 = bitcast i8* %551 to %"class.base::BasicStringPiece"*
  br label %553

553:                                              ; preds = %548, %540
  %554 = phi i64 [ %549, %548 ], [ 0, %540 ]
  %555 = phi i8* [ %551, %548 ], [ null, %540 ]
  %556 = phi %"class.base::BasicStringPiece"* [ %552, %548 ], [ null, %540 ]
  %557 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %556, i64 %531
  %558 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %556, i64 %554
  %559 = ptrtoint %"class.base::BasicStringPiece"* %558 to i64
  %560 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %557, i64 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i64 0, i64 0), i8** %560, align 8
  %561 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %556, i64 %531, i32 1
  store i64 14, i64* %561, align 8
  %562 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %557, i64 1
  %563 = ptrtoint %"class.base::BasicStringPiece"* %562 to i64
  %564 = ptrtoint %"class.base::BasicStringPiece"* %556 to i64
  %565 = icmp sgt i64 %530, 0
  br i1 %565, label %566, label %568

566:                                              ; preds = %553
  %567 = inttoptr i64 %529 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %555, i8* align 8 %567, i64 %530, i1 false) #12
  br label %568

568:                                              ; preds = %566, %553
  store i64 %564, i64* %6, align 8
  store i64 %563, i64* %528, align 8
  store i64 %559, i64* %5, align 8
  %569 = icmp eq i64 %529, 0
  br i1 %569, label %572, label %570

570:                                              ; preds = %568
  %571 = inttoptr i64 %529 to i8*
  tail call void @_ZdlPv(i8* %571) #13
  br label %572

572:                                              ; preds = %570, %568, %520, %512
  %573 = and i32 %1, 1024
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %632, label %575

575:                                              ; preds = %572
  %576 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %577 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %578 = icmp ult %"class.base::BasicStringPiece"* %576, %577
  %579 = ptrtoint %"class.base::BasicStringPiece"* %577 to i64
  br i1 %578, label %580, label %586

580:                                              ; preds = %575
  %581 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %576, i64 0, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.65, i64 0, i64 0), i8** %581, align 8
  %582 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %576, i64 0, i32 1
  store i64 17, i64* %582, align 8
  %583 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %576, i64 1
  %584 = ptrtoint %"class.base::BasicStringPiece"* %583 to i64
  %585 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %584, i64* %585, align 8
  br label %632

586:                                              ; preds = %575
  %587 = ptrtoint %"class.base::BasicStringPiece"* %576 to i64
  %588 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %589 = load i64, i64* %6, align 8
  %590 = sub i64 %587, %589
  %591 = ashr exact i64 %590, 4
  %592 = add nsw i64 %591, 1
  %593 = icmp ugt i64 %592, 1152921504606846975
  br i1 %593, label %594, label %596

594:                                              ; preds = %586
  %595 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %595) #14
  unreachable

596:                                              ; preds = %586
  %597 = sub i64 %579, %589
  %598 = ashr exact i64 %597, 4
  %599 = icmp ult i64 %598, 576460752303423487
  br i1 %599, label %600, label %608

600:                                              ; preds = %596
  %601 = ashr exact i64 %597, 3
  %602 = icmp ult i64 %601, %592
  %603 = select i1 %602, i64 %592, i64 %601
  %604 = icmp eq i64 %603, 0
  br i1 %604, label %613, label %605

605:                                              ; preds = %600
  %606 = icmp ugt i64 %603, 1152921504606846975
  br i1 %606, label %607, label %608

607:                                              ; preds = %605
  tail call void @abort() #14
  unreachable

608:                                              ; preds = %605, %596
  %609 = phi i64 [ %603, %605 ], [ 1152921504606846975, %596 ]
  %610 = shl i64 %609, 4
  %611 = tail call i8* @_Znwm(i64 %610) #13
  %612 = bitcast i8* %611 to %"class.base::BasicStringPiece"*
  br label %613

613:                                              ; preds = %608, %600
  %614 = phi i64 [ %609, %608 ], [ 0, %600 ]
  %615 = phi i8* [ %611, %608 ], [ null, %600 ]
  %616 = phi %"class.base::BasicStringPiece"* [ %612, %608 ], [ null, %600 ]
  %617 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %616, i64 %591
  %618 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %616, i64 %614
  %619 = ptrtoint %"class.base::BasicStringPiece"* %618 to i64
  %620 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %617, i64 0, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.65, i64 0, i64 0), i8** %620, align 8
  %621 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %616, i64 %591, i32 1
  store i64 17, i64* %621, align 8
  %622 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %617, i64 1
  %623 = ptrtoint %"class.base::BasicStringPiece"* %622 to i64
  %624 = ptrtoint %"class.base::BasicStringPiece"* %616 to i64
  %625 = icmp sgt i64 %590, 0
  br i1 %625, label %626, label %628

626:                                              ; preds = %613
  %627 = inttoptr i64 %589 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %615, i8* align 8 %627, i64 %590, i1 false) #12
  br label %628

628:                                              ; preds = %626, %613
  store i64 %624, i64* %6, align 8
  store i64 %623, i64* %588, align 8
  store i64 %619, i64* %5, align 8
  %629 = icmp eq i64 %589, 0
  br i1 %629, label %632, label %630

630:                                              ; preds = %628
  %631 = inttoptr i64 %589 to i8*
  tail call void @_ZdlPv(i8* %631) #13
  br label %632

632:                                              ; preds = %630, %628, %580, %572
  %633 = and i32 %1, 2048
  %634 = icmp eq i32 %633, 0
  br i1 %634, label %692, label %635

635:                                              ; preds = %632
  %636 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %637 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %638 = icmp ult %"class.base::BasicStringPiece"* %636, %637
  %639 = ptrtoint %"class.base::BasicStringPiece"* %637 to i64
  br i1 %638, label %640, label %646

640:                                              ; preds = %635
  %641 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %636, i64 0, i32 0
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.66, i64 0, i64 0), i8** %641, align 8
  %642 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %636, i64 0, i32 1
  store i64 19, i64* %642, align 8
  %643 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %636, i64 1
  %644 = ptrtoint %"class.base::BasicStringPiece"* %643 to i64
  %645 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %644, i64* %645, align 8
  br label %692

646:                                              ; preds = %635
  %647 = ptrtoint %"class.base::BasicStringPiece"* %636 to i64
  %648 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %649 = load i64, i64* %6, align 8
  %650 = sub i64 %647, %649
  %651 = ashr exact i64 %650, 4
  %652 = add nsw i64 %651, 1
  %653 = icmp ugt i64 %652, 1152921504606846975
  br i1 %653, label %654, label %656

654:                                              ; preds = %646
  %655 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %655) #14
  unreachable

656:                                              ; preds = %646
  %657 = sub i64 %639, %649
  %658 = ashr exact i64 %657, 4
  %659 = icmp ult i64 %658, 576460752303423487
  br i1 %659, label %660, label %668

660:                                              ; preds = %656
  %661 = ashr exact i64 %657, 3
  %662 = icmp ult i64 %661, %652
  %663 = select i1 %662, i64 %652, i64 %661
  %664 = icmp eq i64 %663, 0
  br i1 %664, label %673, label %665

665:                                              ; preds = %660
  %666 = icmp ugt i64 %663, 1152921504606846975
  br i1 %666, label %667, label %668

667:                                              ; preds = %665
  tail call void @abort() #14
  unreachable

668:                                              ; preds = %665, %656
  %669 = phi i64 [ %663, %665 ], [ 1152921504606846975, %656 ]
  %670 = shl i64 %669, 4
  %671 = tail call i8* @_Znwm(i64 %670) #13
  %672 = bitcast i8* %671 to %"class.base::BasicStringPiece"*
  br label %673

673:                                              ; preds = %668, %660
  %674 = phi i64 [ %669, %668 ], [ 0, %660 ]
  %675 = phi i8* [ %671, %668 ], [ null, %660 ]
  %676 = phi %"class.base::BasicStringPiece"* [ %672, %668 ], [ null, %660 ]
  %677 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %676, i64 %651
  %678 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %676, i64 %674
  %679 = ptrtoint %"class.base::BasicStringPiece"* %678 to i64
  %680 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %677, i64 0, i32 0
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.66, i64 0, i64 0), i8** %680, align 8
  %681 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %676, i64 %651, i32 1
  store i64 19, i64* %681, align 8
  %682 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %677, i64 1
  %683 = ptrtoint %"class.base::BasicStringPiece"* %682 to i64
  %684 = ptrtoint %"class.base::BasicStringPiece"* %676 to i64
  %685 = icmp sgt i64 %650, 0
  br i1 %685, label %686, label %688

686:                                              ; preds = %673
  %687 = inttoptr i64 %649 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %675, i8* align 8 %687, i64 %650, i1 false) #12
  br label %688

688:                                              ; preds = %686, %673
  store i64 %684, i64* %6, align 8
  store i64 %683, i64* %648, align 8
  store i64 %679, i64* %5, align 8
  %689 = icmp eq i64 %649, 0
  br i1 %689, label %692, label %690

690:                                              ; preds = %688
  %691 = inttoptr i64 %649 to i8*
  tail call void @_ZdlPv(i8* %691) #13
  br label %692

692:                                              ; preds = %690, %688, %640, %632
  %693 = and i32 %1, 4096
  %694 = icmp eq i32 %693, 0
  br i1 %694, label %752, label %695

695:                                              ; preds = %692
  %696 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %697 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %698 = icmp ult %"class.base::BasicStringPiece"* %696, %697
  %699 = ptrtoint %"class.base::BasicStringPiece"* %697 to i64
  br i1 %698, label %700, label %706

700:                                              ; preds = %695
  %701 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %696, i64 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.67, i64 0, i64 0), i8** %701, align 8
  %702 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %696, i64 0, i32 1
  store i64 18, i64* %702, align 8
  %703 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %696, i64 1
  %704 = ptrtoint %"class.base::BasicStringPiece"* %703 to i64
  %705 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %704, i64* %705, align 8
  br label %752

706:                                              ; preds = %695
  %707 = ptrtoint %"class.base::BasicStringPiece"* %696 to i64
  %708 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %709 = load i64, i64* %6, align 8
  %710 = sub i64 %707, %709
  %711 = ashr exact i64 %710, 4
  %712 = add nsw i64 %711, 1
  %713 = icmp ugt i64 %712, 1152921504606846975
  br i1 %713, label %714, label %716

714:                                              ; preds = %706
  %715 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %715) #14
  unreachable

716:                                              ; preds = %706
  %717 = sub i64 %699, %709
  %718 = ashr exact i64 %717, 4
  %719 = icmp ult i64 %718, 576460752303423487
  br i1 %719, label %720, label %728

720:                                              ; preds = %716
  %721 = ashr exact i64 %717, 3
  %722 = icmp ult i64 %721, %712
  %723 = select i1 %722, i64 %712, i64 %721
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %733, label %725

725:                                              ; preds = %720
  %726 = icmp ugt i64 %723, 1152921504606846975
  br i1 %726, label %727, label %728

727:                                              ; preds = %725
  tail call void @abort() #14
  unreachable

728:                                              ; preds = %725, %716
  %729 = phi i64 [ %723, %725 ], [ 1152921504606846975, %716 ]
  %730 = shl i64 %729, 4
  %731 = tail call i8* @_Znwm(i64 %730) #13
  %732 = bitcast i8* %731 to %"class.base::BasicStringPiece"*
  br label %733

733:                                              ; preds = %728, %720
  %734 = phi i64 [ %729, %728 ], [ 0, %720 ]
  %735 = phi i8* [ %731, %728 ], [ null, %720 ]
  %736 = phi %"class.base::BasicStringPiece"* [ %732, %728 ], [ null, %720 ]
  %737 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %736, i64 %711
  %738 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %736, i64 %734
  %739 = ptrtoint %"class.base::BasicStringPiece"* %738 to i64
  %740 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %737, i64 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.67, i64 0, i64 0), i8** %740, align 8
  %741 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %736, i64 %711, i32 1
  store i64 18, i64* %741, align 8
  %742 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %737, i64 1
  %743 = ptrtoint %"class.base::BasicStringPiece"* %742 to i64
  %744 = ptrtoint %"class.base::BasicStringPiece"* %736 to i64
  %745 = icmp sgt i64 %710, 0
  br i1 %745, label %746, label %748

746:                                              ; preds = %733
  %747 = inttoptr i64 %709 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %735, i8* align 8 %747, i64 %710, i1 false) #12
  br label %748

748:                                              ; preds = %746, %733
  store i64 %744, i64* %6, align 8
  store i64 %743, i64* %708, align 8
  store i64 %739, i64* %5, align 8
  %749 = icmp eq i64 %709, 0
  br i1 %749, label %752, label %750

750:                                              ; preds = %748
  %751 = inttoptr i64 %709 to i8*
  tail call void @_ZdlPv(i8* %751) #13
  br label %752

752:                                              ; preds = %750, %748, %700, %692
  %753 = and i32 %1, 8192
  %754 = icmp eq i32 %753, 0
  br i1 %754, label %812, label %755

755:                                              ; preds = %752
  %756 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %757 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %758 = icmp ult %"class.base::BasicStringPiece"* %756, %757
  %759 = ptrtoint %"class.base::BasicStringPiece"* %757 to i64
  br i1 %758, label %760, label %766

760:                                              ; preds = %755
  %761 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %756, i64 0, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.68, i64 0, i64 0), i8** %761, align 8
  %762 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %756, i64 0, i32 1
  store i64 17, i64* %762, align 8
  %763 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %756, i64 1
  %764 = ptrtoint %"class.base::BasicStringPiece"* %763 to i64
  %765 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %764, i64* %765, align 8
  br label %812

766:                                              ; preds = %755
  %767 = ptrtoint %"class.base::BasicStringPiece"* %756 to i64
  %768 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %769 = load i64, i64* %6, align 8
  %770 = sub i64 %767, %769
  %771 = ashr exact i64 %770, 4
  %772 = add nsw i64 %771, 1
  %773 = icmp ugt i64 %772, 1152921504606846975
  br i1 %773, label %774, label %776

774:                                              ; preds = %766
  %775 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %775) #14
  unreachable

776:                                              ; preds = %766
  %777 = sub i64 %759, %769
  %778 = ashr exact i64 %777, 4
  %779 = icmp ult i64 %778, 576460752303423487
  br i1 %779, label %780, label %788

780:                                              ; preds = %776
  %781 = ashr exact i64 %777, 3
  %782 = icmp ult i64 %781, %772
  %783 = select i1 %782, i64 %772, i64 %781
  %784 = icmp eq i64 %783, 0
  br i1 %784, label %793, label %785

785:                                              ; preds = %780
  %786 = icmp ugt i64 %783, 1152921504606846975
  br i1 %786, label %787, label %788

787:                                              ; preds = %785
  tail call void @abort() #14
  unreachable

788:                                              ; preds = %785, %776
  %789 = phi i64 [ %783, %785 ], [ 1152921504606846975, %776 ]
  %790 = shl i64 %789, 4
  %791 = tail call i8* @_Znwm(i64 %790) #13
  %792 = bitcast i8* %791 to %"class.base::BasicStringPiece"*
  br label %793

793:                                              ; preds = %788, %780
  %794 = phi i64 [ %789, %788 ], [ 0, %780 ]
  %795 = phi i8* [ %791, %788 ], [ null, %780 ]
  %796 = phi %"class.base::BasicStringPiece"* [ %792, %788 ], [ null, %780 ]
  %797 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %796, i64 %771
  %798 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %796, i64 %794
  %799 = ptrtoint %"class.base::BasicStringPiece"* %798 to i64
  %800 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %797, i64 0, i32 0
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.68, i64 0, i64 0), i8** %800, align 8
  %801 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %796, i64 %771, i32 1
  store i64 17, i64* %801, align 8
  %802 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %797, i64 1
  %803 = ptrtoint %"class.base::BasicStringPiece"* %802 to i64
  %804 = ptrtoint %"class.base::BasicStringPiece"* %796 to i64
  %805 = icmp sgt i64 %770, 0
  br i1 %805, label %806, label %808

806:                                              ; preds = %793
  %807 = inttoptr i64 %769 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %795, i8* align 8 %807, i64 %770, i1 false) #12
  br label %808

808:                                              ; preds = %806, %793
  store i64 %804, i64* %6, align 8
  store i64 %803, i64* %768, align 8
  store i64 %799, i64* %5, align 8
  %809 = icmp eq i64 %769, 0
  br i1 %809, label %812, label %810

810:                                              ; preds = %808
  %811 = inttoptr i64 %769 to i8*
  tail call void @_ZdlPv(i8* %811) #13
  br label %812

812:                                              ; preds = %810, %808, %760, %752
  %813 = and i32 %1, 16384
  %814 = icmp eq i32 %813, 0
  br i1 %814, label %872, label %815

815:                                              ; preds = %812
  %816 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %817 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %818 = icmp ult %"class.base::BasicStringPiece"* %816, %817
  %819 = ptrtoint %"class.base::BasicStringPiece"* %817 to i64
  br i1 %818, label %820, label %826

820:                                              ; preds = %815
  %821 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %816, i64 0, i32 0
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.69, i64 0, i64 0), i8** %821, align 8
  %822 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %816, i64 0, i32 1
  store i64 20, i64* %822, align 8
  %823 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %816, i64 1
  %824 = ptrtoint %"class.base::BasicStringPiece"* %823 to i64
  %825 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %824, i64* %825, align 8
  br label %872

826:                                              ; preds = %815
  %827 = ptrtoint %"class.base::BasicStringPiece"* %816 to i64
  %828 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %829 = load i64, i64* %6, align 8
  %830 = sub i64 %827, %829
  %831 = ashr exact i64 %830, 4
  %832 = add nsw i64 %831, 1
  %833 = icmp ugt i64 %832, 1152921504606846975
  br i1 %833, label %834, label %836

834:                                              ; preds = %826
  %835 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %835) #14
  unreachable

836:                                              ; preds = %826
  %837 = sub i64 %819, %829
  %838 = ashr exact i64 %837, 4
  %839 = icmp ult i64 %838, 576460752303423487
  br i1 %839, label %840, label %848

840:                                              ; preds = %836
  %841 = ashr exact i64 %837, 3
  %842 = icmp ult i64 %841, %832
  %843 = select i1 %842, i64 %832, i64 %841
  %844 = icmp eq i64 %843, 0
  br i1 %844, label %853, label %845

845:                                              ; preds = %840
  %846 = icmp ugt i64 %843, 1152921504606846975
  br i1 %846, label %847, label %848

847:                                              ; preds = %845
  tail call void @abort() #14
  unreachable

848:                                              ; preds = %845, %836
  %849 = phi i64 [ %843, %845 ], [ 1152921504606846975, %836 ]
  %850 = shl i64 %849, 4
  %851 = tail call i8* @_Znwm(i64 %850) #13
  %852 = bitcast i8* %851 to %"class.base::BasicStringPiece"*
  br label %853

853:                                              ; preds = %848, %840
  %854 = phi i64 [ %849, %848 ], [ 0, %840 ]
  %855 = phi i8* [ %851, %848 ], [ null, %840 ]
  %856 = phi %"class.base::BasicStringPiece"* [ %852, %848 ], [ null, %840 ]
  %857 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %856, i64 %831
  %858 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %856, i64 %854
  %859 = ptrtoint %"class.base::BasicStringPiece"* %858 to i64
  %860 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %857, i64 0, i32 0
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.69, i64 0, i64 0), i8** %860, align 8
  %861 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %856, i64 %831, i32 1
  store i64 20, i64* %861, align 8
  %862 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %857, i64 1
  %863 = ptrtoint %"class.base::BasicStringPiece"* %862 to i64
  %864 = ptrtoint %"class.base::BasicStringPiece"* %856 to i64
  %865 = icmp sgt i64 %830, 0
  br i1 %865, label %866, label %868

866:                                              ; preds = %853
  %867 = inttoptr i64 %829 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %855, i8* align 8 %867, i64 %830, i1 false) #12
  br label %868

868:                                              ; preds = %866, %853
  store i64 %864, i64* %6, align 8
  store i64 %863, i64* %828, align 8
  store i64 %859, i64* %5, align 8
  %869 = icmp eq i64 %829, 0
  br i1 %869, label %872, label %870

870:                                              ; preds = %868
  %871 = inttoptr i64 %829 to i8*
  tail call void @_ZdlPv(i8* %871) #13
  br label %872

872:                                              ; preds = %870, %868, %820, %15, %812
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui18KeyEventFlagsNamesEi(%"class.std::__1::vector.59"* noalias sret, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.59"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 -86, i64 24, i1 false)
  tail call void @_ZN2ui15EventFlagsNamesEi(%"class.std::__1::vector.59"* sret %0, i32 %1)
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %317, label %7

7:                                                ; preds = %2
  %8 = trunc i32 %1 to i16
  %9 = icmp slt i16 %8, 0
  br i1 %9, label %10, label %69

10:                                               ; preds = %7
  %11 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %12 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %13 = icmp ult %"class.base::BasicStringPiece"* %11, %12
  %14 = ptrtoint %"class.base::BasicStringPiece"* %12 to i64
  br i1 %13, label %15, label %21

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.70, i64 0, i64 0), i8** %16, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 1
  store i64 18, i64* %17, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 1
  %19 = ptrtoint %"class.base::BasicStringPiece"* %18 to i64
  %20 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %19, i64* %20, align 8
  br label %69

21:                                               ; preds = %10
  %22 = ptrtoint %"class.base::BasicStringPiece"* %11 to i64
  %23 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %24 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %22, %25
  %27 = ashr exact i64 %26, 4
  %28 = add nsw i64 %27, 1
  %29 = icmp ugt i64 %28, 1152921504606846975
  br i1 %29, label %30, label %32

30:                                               ; preds = %21
  %31 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #14
  unreachable

32:                                               ; preds = %21
  %33 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %34 = sub i64 %14, %25
  %35 = ashr exact i64 %34, 4
  %36 = icmp ult i64 %35, 576460752303423487
  br i1 %36, label %37, label %45

37:                                               ; preds = %32
  %38 = ashr exact i64 %34, 3
  %39 = icmp ult i64 %38, %28
  %40 = select i1 %39, i64 %28, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = icmp ugt i64 %40, 1152921504606846975
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @abort() #14
  unreachable

45:                                               ; preds = %42, %32
  %46 = phi i64 [ %40, %42 ], [ 1152921504606846975, %32 ]
  %47 = shl i64 %46, 4
  %48 = tail call i8* @_Znwm(i64 %47) #13
  %49 = bitcast i8* %48 to %"class.base::BasicStringPiece"*
  br label %50

50:                                               ; preds = %45, %37
  %51 = phi i64 [ %46, %45 ], [ 0, %37 ]
  %52 = phi i8* [ %48, %45 ], [ null, %37 ]
  %53 = phi %"class.base::BasicStringPiece"* [ %49, %45 ], [ null, %37 ]
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 %27
  %55 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 %51
  %56 = ptrtoint %"class.base::BasicStringPiece"* %55 to i64
  %57 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %54, i64 0, i32 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.70, i64 0, i64 0), i8** %57, align 8
  %58 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 %27, i32 1
  store i64 18, i64* %58, align 8
  %59 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %54, i64 1
  %60 = ptrtoint %"class.base::BasicStringPiece"* %59 to i64
  %61 = ptrtoint %"class.base::BasicStringPiece"* %53 to i64
  %62 = icmp sgt i64 %26, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %50
  %64 = inttoptr i64 %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %64, i64 %26, i1 false) #12
  br label %65

65:                                               ; preds = %63, %50
  store i64 %61, i64* %24, align 8
  store i64 %60, i64* %23, align 8
  store i64 %56, i64* %33, align 8
  %66 = icmp eq i64 %25, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = inttoptr i64 %25 to i8*
  tail call void @_ZdlPv(i8* %68) #13
  br label %69

69:                                               ; preds = %67, %65, %15, %7
  %70 = and i32 %1, 65536
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %131, label %72

72:                                               ; preds = %69
  %73 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %74 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %75 = icmp ult %"class.base::BasicStringPiece"* %73, %74
  %76 = ptrtoint %"class.base::BasicStringPiece"* %74 to i64
  br i1 %75, label %77, label %83

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %73, i64 0, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0), i8** %78, align 8
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %73, i64 0, i32 1
  store i64 9, i64* %79, align 8
  %80 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %73, i64 1
  %81 = ptrtoint %"class.base::BasicStringPiece"* %80 to i64
  %82 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %81, i64* %82, align 8
  br label %131

83:                                               ; preds = %72
  %84 = ptrtoint %"class.base::BasicStringPiece"* %73 to i64
  %85 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %86 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %84, %87
  %89 = ashr exact i64 %88, 4
  %90 = add nsw i64 %89, 1
  %91 = icmp ugt i64 %90, 1152921504606846975
  br i1 %91, label %92, label %94

92:                                               ; preds = %83
  %93 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %93) #14
  unreachable

94:                                               ; preds = %83
  %95 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %96 = sub i64 %76, %87
  %97 = ashr exact i64 %96, 4
  %98 = icmp ult i64 %97, 576460752303423487
  br i1 %98, label %99, label %107

99:                                               ; preds = %94
  %100 = ashr exact i64 %96, 3
  %101 = icmp ult i64 %100, %90
  %102 = select i1 %101, i64 %90, i64 %100
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %112, label %104

104:                                              ; preds = %99
  %105 = icmp ugt i64 %102, 1152921504606846975
  br i1 %105, label %106, label %107

106:                                              ; preds = %104
  tail call void @abort() #14
  unreachable

107:                                              ; preds = %104, %94
  %108 = phi i64 [ %102, %104 ], [ 1152921504606846975, %94 ]
  %109 = shl i64 %108, 4
  %110 = tail call i8* @_Znwm(i64 %109) #13
  %111 = bitcast i8* %110 to %"class.base::BasicStringPiece"*
  br label %112

112:                                              ; preds = %107, %99
  %113 = phi i64 [ %108, %107 ], [ 0, %99 ]
  %114 = phi i8* [ %110, %107 ], [ null, %99 ]
  %115 = phi %"class.base::BasicStringPiece"* [ %111, %107 ], [ null, %99 ]
  %116 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 %89
  %117 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 %113
  %118 = ptrtoint %"class.base::BasicStringPiece"* %117 to i64
  %119 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 0, i32 0
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0), i8** %119, align 8
  %120 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 %89, i32 1
  store i64 9, i64* %120, align 8
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 1
  %122 = ptrtoint %"class.base::BasicStringPiece"* %121 to i64
  %123 = ptrtoint %"class.base::BasicStringPiece"* %115 to i64
  %124 = icmp sgt i64 %88, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %112
  %126 = inttoptr i64 %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %126, i64 %88, i1 false) #12
  br label %127

127:                                              ; preds = %125, %112
  store i64 %123, i64* %86, align 8
  store i64 %122, i64* %85, align 8
  store i64 %118, i64* %95, align 8
  %128 = icmp eq i64 %87, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %127
  %130 = inttoptr i64 %87 to i8*
  tail call void @_ZdlPv(i8* %130) #13
  br label %131

131:                                              ; preds = %129, %127, %77, %69
  %132 = and i32 %1, 131072
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %193, label %134

134:                                              ; preds = %131
  %135 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %136 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %137 = icmp ult %"class.base::BasicStringPiece"* %135, %136
  %138 = ptrtoint %"class.base::BasicStringPiece"* %136 to i64
  br i1 %137, label %139, label %145

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %135, i64 0, i32 0
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0), i8** %140, align 8
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %135, i64 0, i32 1
  store i64 5, i64* %141, align 8
  %142 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %135, i64 1
  %143 = ptrtoint %"class.base::BasicStringPiece"* %142 to i64
  %144 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %143, i64* %144, align 8
  br label %193

145:                                              ; preds = %134
  %146 = ptrtoint %"class.base::BasicStringPiece"* %135 to i64
  %147 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %148 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 %146, %149
  %151 = ashr exact i64 %150, 4
  %152 = add nsw i64 %151, 1
  %153 = icmp ugt i64 %152, 1152921504606846975
  br i1 %153, label %154, label %156

154:                                              ; preds = %145
  %155 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %155) #14
  unreachable

156:                                              ; preds = %145
  %157 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %158 = sub i64 %138, %149
  %159 = ashr exact i64 %158, 4
  %160 = icmp ult i64 %159, 576460752303423487
  br i1 %160, label %161, label %169

161:                                              ; preds = %156
  %162 = ashr exact i64 %158, 3
  %163 = icmp ult i64 %162, %152
  %164 = select i1 %163, i64 %152, i64 %162
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %174, label %166

166:                                              ; preds = %161
  %167 = icmp ugt i64 %164, 1152921504606846975
  br i1 %167, label %168, label %169

168:                                              ; preds = %166
  tail call void @abort() #14
  unreachable

169:                                              ; preds = %166, %156
  %170 = phi i64 [ %164, %166 ], [ 1152921504606846975, %156 ]
  %171 = shl i64 %170, 4
  %172 = tail call i8* @_Znwm(i64 %171) #13
  %173 = bitcast i8* %172 to %"class.base::BasicStringPiece"*
  br label %174

174:                                              ; preds = %169, %161
  %175 = phi i64 [ %170, %169 ], [ 0, %161 ]
  %176 = phi i8* [ %172, %169 ], [ null, %161 ]
  %177 = phi %"class.base::BasicStringPiece"* [ %173, %169 ], [ null, %161 ]
  %178 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %177, i64 %151
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %177, i64 %175
  %180 = ptrtoint %"class.base::BasicStringPiece"* %179 to i64
  %181 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %178, i64 0, i32 0
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0), i8** %181, align 8
  %182 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %177, i64 %151, i32 1
  store i64 5, i64* %182, align 8
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %178, i64 1
  %184 = ptrtoint %"class.base::BasicStringPiece"* %183 to i64
  %185 = ptrtoint %"class.base::BasicStringPiece"* %177 to i64
  %186 = icmp sgt i64 %150, 0
  br i1 %186, label %187, label %189

187:                                              ; preds = %174
  %188 = inttoptr i64 %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %176, i8* align 8 %188, i64 %150, i1 false) #12
  br label %189

189:                                              ; preds = %187, %174
  store i64 %185, i64* %148, align 8
  store i64 %184, i64* %147, align 8
  store i64 %180, i64* %157, align 8
  %190 = icmp eq i64 %149, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %189
  %192 = inttoptr i64 %149 to i8*
  tail call void @_ZdlPv(i8* %192) #13
  br label %193

193:                                              ; preds = %191, %189, %139, %131
  %194 = and i32 %1, 262144
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %255, label %196

196:                                              ; preds = %193
  %197 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %198 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %199 = icmp ult %"class.base::BasicStringPiece"* %197, %198
  %200 = ptrtoint %"class.base::BasicStringPiece"* %198 to i64
  br i1 %199, label %201, label %207

201:                                              ; preds = %196
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.73, i64 0, i64 0), i8** %202, align 8
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 0, i32 1
  store i64 15, i64* %203, align 8
  %204 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 1
  %205 = ptrtoint %"class.base::BasicStringPiece"* %204 to i64
  %206 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %205, i64* %206, align 8
  br label %255

207:                                              ; preds = %196
  %208 = ptrtoint %"class.base::BasicStringPiece"* %197 to i64
  %209 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %210 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = sub i64 %208, %211
  %213 = ashr exact i64 %212, 4
  %214 = add nsw i64 %213, 1
  %215 = icmp ugt i64 %214, 1152921504606846975
  br i1 %215, label %216, label %218

216:                                              ; preds = %207
  %217 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %217) #14
  unreachable

218:                                              ; preds = %207
  %219 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %220 = sub i64 %200, %211
  %221 = ashr exact i64 %220, 4
  %222 = icmp ult i64 %221, 576460752303423487
  br i1 %222, label %223, label %231

223:                                              ; preds = %218
  %224 = ashr exact i64 %220, 3
  %225 = icmp ult i64 %224, %214
  %226 = select i1 %225, i64 %214, i64 %224
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %236, label %228

228:                                              ; preds = %223
  %229 = icmp ugt i64 %226, 1152921504606846975
  br i1 %229, label %230, label %231

230:                                              ; preds = %228
  tail call void @abort() #14
  unreachable

231:                                              ; preds = %228, %218
  %232 = phi i64 [ %226, %228 ], [ 1152921504606846975, %218 ]
  %233 = shl i64 %232, 4
  %234 = tail call i8* @_Znwm(i64 %233) #13
  %235 = bitcast i8* %234 to %"class.base::BasicStringPiece"*
  br label %236

236:                                              ; preds = %231, %223
  %237 = phi i64 [ %232, %231 ], [ 0, %223 ]
  %238 = phi i8* [ %234, %231 ], [ null, %223 ]
  %239 = phi %"class.base::BasicStringPiece"* [ %235, %231 ], [ null, %223 ]
  %240 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 %213
  %241 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 %237
  %242 = ptrtoint %"class.base::BasicStringPiece"* %241 to i64
  %243 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %240, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.73, i64 0, i64 0), i8** %243, align 8
  %244 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 %213, i32 1
  store i64 15, i64* %244, align 8
  %245 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %240, i64 1
  %246 = ptrtoint %"class.base::BasicStringPiece"* %245 to i64
  %247 = ptrtoint %"class.base::BasicStringPiece"* %239 to i64
  %248 = icmp sgt i64 %212, 0
  br i1 %248, label %249, label %251

249:                                              ; preds = %236
  %250 = inttoptr i64 %211 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %238, i8* align 8 %250, i64 %212, i1 false) #12
  br label %251

251:                                              ; preds = %249, %236
  store i64 %247, i64* %210, align 8
  store i64 %246, i64* %209, align 8
  store i64 %242, i64* %219, align 8
  %252 = icmp eq i64 %211, 0
  br i1 %252, label %255, label %253

253:                                              ; preds = %251
  %254 = inttoptr i64 %211 to i8*
  tail call void @_ZdlPv(i8* %254) #13
  br label %255

255:                                              ; preds = %253, %251, %201, %193
  %256 = and i32 %1, 524288
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %317, label %258

258:                                              ; preds = %255
  %259 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %260 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %261 = icmp ult %"class.base::BasicStringPiece"* %259, %260
  %262 = ptrtoint %"class.base::BasicStringPiece"* %260 to i64
  br i1 %261, label %263, label %269

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 0, i32 0
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.74, i64 0, i64 0), i8** %264, align 8
  %265 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 0, i32 1
  store i64 16, i64* %265, align 8
  %266 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 1
  %267 = ptrtoint %"class.base::BasicStringPiece"* %266 to i64
  %268 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %267, i64* %268, align 8
  br label %317

269:                                              ; preds = %258
  %270 = ptrtoint %"class.base::BasicStringPiece"* %259 to i64
  %271 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %272 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = sub i64 %270, %273
  %275 = ashr exact i64 %274, 4
  %276 = add nsw i64 %275, 1
  %277 = icmp ugt i64 %276, 1152921504606846975
  br i1 %277, label %278, label %280

278:                                              ; preds = %269
  %279 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %279) #14
  unreachable

280:                                              ; preds = %269
  %281 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %282 = sub i64 %262, %273
  %283 = ashr exact i64 %282, 4
  %284 = icmp ult i64 %283, 576460752303423487
  br i1 %284, label %285, label %293

285:                                              ; preds = %280
  %286 = ashr exact i64 %282, 3
  %287 = icmp ult i64 %286, %276
  %288 = select i1 %287, i64 %276, i64 %286
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %298, label %290

290:                                              ; preds = %285
  %291 = icmp ugt i64 %288, 1152921504606846975
  br i1 %291, label %292, label %293

292:                                              ; preds = %290
  tail call void @abort() #14
  unreachable

293:                                              ; preds = %290, %280
  %294 = phi i64 [ %288, %290 ], [ 1152921504606846975, %280 ]
  %295 = shl i64 %294, 4
  %296 = tail call i8* @_Znwm(i64 %295) #13
  %297 = bitcast i8* %296 to %"class.base::BasicStringPiece"*
  br label %298

298:                                              ; preds = %293, %285
  %299 = phi i64 [ %294, %293 ], [ 0, %285 ]
  %300 = phi i8* [ %296, %293 ], [ null, %285 ]
  %301 = phi %"class.base::BasicStringPiece"* [ %297, %293 ], [ null, %285 ]
  %302 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %301, i64 %275
  %303 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %301, i64 %299
  %304 = ptrtoint %"class.base::BasicStringPiece"* %303 to i64
  %305 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %302, i64 0, i32 0
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.74, i64 0, i64 0), i8** %305, align 8
  %306 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %301, i64 %275, i32 1
  store i64 16, i64* %306, align 8
  %307 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %302, i64 1
  %308 = ptrtoint %"class.base::BasicStringPiece"* %307 to i64
  %309 = ptrtoint %"class.base::BasicStringPiece"* %301 to i64
  %310 = icmp sgt i64 %274, 0
  br i1 %310, label %311, label %313

311:                                              ; preds = %298
  %312 = inttoptr i64 %273 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %300, i8* align 8 %312, i64 %274, i1 false) #12
  br label %313

313:                                              ; preds = %311, %298
  store i64 %309, i64* %272, align 8
  store i64 %308, i64* %271, align 8
  store i64 %304, i64* %281, align 8
  %314 = icmp eq i64 %273, 0
  br i1 %314, label %317, label %315

315:                                              ; preds = %313
  %316 = inttoptr i64 %273 to i8*
  tail call void @_ZdlPv(i8* %316) #13
  br label %317

317:                                              ; preds = %315, %313, %263, %2, %255
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui20MouseEventFlagsNamesEi(%"class.std::__1::vector.59"* noalias sret, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.59"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 -86, i64 24, i1 false)
  tail call void @_ZN2ui15EventFlagsNamesEi(%"class.std::__1::vector.59"* sret %0, i32 %1)
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %565, label %7

7:                                                ; preds = %2
  %8 = trunc i32 %1 to i16
  %9 = icmp slt i16 %8, 0
  br i1 %9, label %10, label %69

10:                                               ; preds = %7
  %11 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %12 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %13 = icmp ult %"class.base::BasicStringPiece"* %11, %12
  %14 = ptrtoint %"class.base::BasicStringPiece"* %12 to i64
  br i1 %13, label %15, label %21

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.75, i64 0, i64 0), i8** %16, align 8
  %17 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 0, i32 1
  store i64 15, i64* %17, align 8
  %18 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %11, i64 1
  %19 = ptrtoint %"class.base::BasicStringPiece"* %18 to i64
  %20 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %19, i64* %20, align 8
  br label %69

21:                                               ; preds = %10
  %22 = ptrtoint %"class.base::BasicStringPiece"* %11 to i64
  %23 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %24 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %22, %25
  %27 = ashr exact i64 %26, 4
  %28 = add nsw i64 %27, 1
  %29 = icmp ugt i64 %28, 1152921504606846975
  br i1 %29, label %30, label %32

30:                                               ; preds = %21
  %31 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #14
  unreachable

32:                                               ; preds = %21
  %33 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %34 = sub i64 %14, %25
  %35 = ashr exact i64 %34, 4
  %36 = icmp ult i64 %35, 576460752303423487
  br i1 %36, label %37, label %45

37:                                               ; preds = %32
  %38 = ashr exact i64 %34, 3
  %39 = icmp ult i64 %38, %28
  %40 = select i1 %39, i64 %28, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = icmp ugt i64 %40, 1152921504606846975
  br i1 %43, label %44, label %45

44:                                               ; preds = %42
  tail call void @abort() #14
  unreachable

45:                                               ; preds = %42, %32
  %46 = phi i64 [ %40, %42 ], [ 1152921504606846975, %32 ]
  %47 = shl i64 %46, 4
  %48 = tail call i8* @_Znwm(i64 %47) #13
  %49 = bitcast i8* %48 to %"class.base::BasicStringPiece"*
  br label %50

50:                                               ; preds = %45, %37
  %51 = phi i64 [ %46, %45 ], [ 0, %37 ]
  %52 = phi i8* [ %48, %45 ], [ null, %37 ]
  %53 = phi %"class.base::BasicStringPiece"* [ %49, %45 ], [ null, %37 ]
  %54 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 %27
  %55 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 %51
  %56 = ptrtoint %"class.base::BasicStringPiece"* %55 to i64
  %57 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %54, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.75, i64 0, i64 0), i8** %57, align 8
  %58 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %53, i64 %27, i32 1
  store i64 15, i64* %58, align 8
  %59 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %54, i64 1
  %60 = ptrtoint %"class.base::BasicStringPiece"* %59 to i64
  %61 = ptrtoint %"class.base::BasicStringPiece"* %53 to i64
  %62 = icmp sgt i64 %26, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %50
  %64 = inttoptr i64 %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %64, i64 %26, i1 false) #12
  br label %65

65:                                               ; preds = %63, %50
  store i64 %61, i64* %24, align 8
  store i64 %60, i64* %23, align 8
  store i64 %56, i64* %33, align 8
  %66 = icmp eq i64 %25, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = inttoptr i64 %25 to i8*
  tail call void @_ZdlPv(i8* %68) #13
  br label %69

69:                                               ; preds = %67, %65, %15, %7
  %70 = and i32 %1, 65536
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %131, label %72

72:                                               ; preds = %69
  %73 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %74 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %75 = icmp ult %"class.base::BasicStringPiece"* %73, %74
  %76 = ptrtoint %"class.base::BasicStringPiece"* %74 to i64
  br i1 %75, label %77, label %83

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %73, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.76, i64 0, i64 0), i8** %78, align 8
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %73, i64 0, i32 1
  store i64 15, i64* %79, align 8
  %80 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %73, i64 1
  %81 = ptrtoint %"class.base::BasicStringPiece"* %80 to i64
  %82 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %81, i64* %82, align 8
  br label %131

83:                                               ; preds = %72
  %84 = ptrtoint %"class.base::BasicStringPiece"* %73 to i64
  %85 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %86 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %84, %87
  %89 = ashr exact i64 %88, 4
  %90 = add nsw i64 %89, 1
  %91 = icmp ugt i64 %90, 1152921504606846975
  br i1 %91, label %92, label %94

92:                                               ; preds = %83
  %93 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %93) #14
  unreachable

94:                                               ; preds = %83
  %95 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %96 = sub i64 %76, %87
  %97 = ashr exact i64 %96, 4
  %98 = icmp ult i64 %97, 576460752303423487
  br i1 %98, label %99, label %107

99:                                               ; preds = %94
  %100 = ashr exact i64 %96, 3
  %101 = icmp ult i64 %100, %90
  %102 = select i1 %101, i64 %90, i64 %100
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %112, label %104

104:                                              ; preds = %99
  %105 = icmp ugt i64 %102, 1152921504606846975
  br i1 %105, label %106, label %107

106:                                              ; preds = %104
  tail call void @abort() #14
  unreachable

107:                                              ; preds = %104, %94
  %108 = phi i64 [ %102, %104 ], [ 1152921504606846975, %94 ]
  %109 = shl i64 %108, 4
  %110 = tail call i8* @_Znwm(i64 %109) #13
  %111 = bitcast i8* %110 to %"class.base::BasicStringPiece"*
  br label %112

112:                                              ; preds = %107, %99
  %113 = phi i64 [ %108, %107 ], [ 0, %99 ]
  %114 = phi i8* [ %110, %107 ], [ null, %99 ]
  %115 = phi %"class.base::BasicStringPiece"* [ %111, %107 ], [ null, %99 ]
  %116 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 %89
  %117 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 %113
  %118 = ptrtoint %"class.base::BasicStringPiece"* %117 to i64
  %119 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.76, i64 0, i64 0), i8** %119, align 8
  %120 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %115, i64 %89, i32 1
  store i64 15, i64* %120, align 8
  %121 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %116, i64 1
  %122 = ptrtoint %"class.base::BasicStringPiece"* %121 to i64
  %123 = ptrtoint %"class.base::BasicStringPiece"* %115 to i64
  %124 = icmp sgt i64 %88, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %112
  %126 = inttoptr i64 %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %126, i64 %88, i1 false) #12
  br label %127

127:                                              ; preds = %125, %112
  store i64 %123, i64* %86, align 8
  store i64 %122, i64* %85, align 8
  store i64 %118, i64* %95, align 8
  %128 = icmp eq i64 %87, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %127
  %130 = inttoptr i64 %87 to i8*
  tail call void @_ZdlPv(i8* %130) #13
  br label %131

131:                                              ; preds = %129, %127, %77, %69
  %132 = and i32 %1, 131072
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %193, label %134

134:                                              ; preds = %131
  %135 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %136 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %137 = icmp ult %"class.base::BasicStringPiece"* %135, %136
  %138 = ptrtoint %"class.base::BasicStringPiece"* %136 to i64
  br i1 %137, label %139, label %145

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %135, i64 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i64 0, i64 0), i8** %140, align 8
  %141 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %135, i64 0, i32 1
  store i64 13, i64* %141, align 8
  %142 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %135, i64 1
  %143 = ptrtoint %"class.base::BasicStringPiece"* %142 to i64
  %144 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %143, i64* %144, align 8
  br label %193

145:                                              ; preds = %134
  %146 = ptrtoint %"class.base::BasicStringPiece"* %135 to i64
  %147 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %148 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = sub i64 %146, %149
  %151 = ashr exact i64 %150, 4
  %152 = add nsw i64 %151, 1
  %153 = icmp ugt i64 %152, 1152921504606846975
  br i1 %153, label %154, label %156

154:                                              ; preds = %145
  %155 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %155) #14
  unreachable

156:                                              ; preds = %145
  %157 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %158 = sub i64 %138, %149
  %159 = ashr exact i64 %158, 4
  %160 = icmp ult i64 %159, 576460752303423487
  br i1 %160, label %161, label %169

161:                                              ; preds = %156
  %162 = ashr exact i64 %158, 3
  %163 = icmp ult i64 %162, %152
  %164 = select i1 %163, i64 %152, i64 %162
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %174, label %166

166:                                              ; preds = %161
  %167 = icmp ugt i64 %164, 1152921504606846975
  br i1 %167, label %168, label %169

168:                                              ; preds = %166
  tail call void @abort() #14
  unreachable

169:                                              ; preds = %166, %156
  %170 = phi i64 [ %164, %166 ], [ 1152921504606846975, %156 ]
  %171 = shl i64 %170, 4
  %172 = tail call i8* @_Znwm(i64 %171) #13
  %173 = bitcast i8* %172 to %"class.base::BasicStringPiece"*
  br label %174

174:                                              ; preds = %169, %161
  %175 = phi i64 [ %170, %169 ], [ 0, %161 ]
  %176 = phi i8* [ %172, %169 ], [ null, %161 ]
  %177 = phi %"class.base::BasicStringPiece"* [ %173, %169 ], [ null, %161 ]
  %178 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %177, i64 %151
  %179 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %177, i64 %175
  %180 = ptrtoint %"class.base::BasicStringPiece"* %179 to i64
  %181 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %178, i64 0, i32 0
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i64 0, i64 0), i8** %181, align 8
  %182 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %177, i64 %151, i32 1
  store i64 13, i64* %182, align 8
  %183 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %178, i64 1
  %184 = ptrtoint %"class.base::BasicStringPiece"* %183 to i64
  %185 = ptrtoint %"class.base::BasicStringPiece"* %177 to i64
  %186 = icmp sgt i64 %150, 0
  br i1 %186, label %187, label %189

187:                                              ; preds = %174
  %188 = inttoptr i64 %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %176, i8* align 8 %188, i64 %150, i1 false) #12
  br label %189

189:                                              ; preds = %187, %174
  store i64 %185, i64* %148, align 8
  store i64 %184, i64* %147, align 8
  store i64 %180, i64* %157, align 8
  %190 = icmp eq i64 %149, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %189
  %192 = inttoptr i64 %149 to i8*
  tail call void @_ZdlPv(i8* %192) #13
  br label %193

193:                                              ; preds = %191, %189, %139, %131
  %194 = and i32 %1, 262144
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %255, label %196

196:                                              ; preds = %193
  %197 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %198 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %199 = icmp ult %"class.base::BasicStringPiece"* %197, %198
  %200 = ptrtoint %"class.base::BasicStringPiece"* %198 to i64
  br i1 %199, label %201, label %207

201:                                              ; preds = %196
  %202 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.78, i64 0, i64 0), i8** %202, align 8
  %203 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 0, i32 1
  store i64 10, i64* %203, align 8
  %204 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %197, i64 1
  %205 = ptrtoint %"class.base::BasicStringPiece"* %204 to i64
  %206 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %205, i64* %206, align 8
  br label %255

207:                                              ; preds = %196
  %208 = ptrtoint %"class.base::BasicStringPiece"* %197 to i64
  %209 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %210 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = sub i64 %208, %211
  %213 = ashr exact i64 %212, 4
  %214 = add nsw i64 %213, 1
  %215 = icmp ugt i64 %214, 1152921504606846975
  br i1 %215, label %216, label %218

216:                                              ; preds = %207
  %217 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %217) #14
  unreachable

218:                                              ; preds = %207
  %219 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %220 = sub i64 %200, %211
  %221 = ashr exact i64 %220, 4
  %222 = icmp ult i64 %221, 576460752303423487
  br i1 %222, label %223, label %231

223:                                              ; preds = %218
  %224 = ashr exact i64 %220, 3
  %225 = icmp ult i64 %224, %214
  %226 = select i1 %225, i64 %214, i64 %224
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %236, label %228

228:                                              ; preds = %223
  %229 = icmp ugt i64 %226, 1152921504606846975
  br i1 %229, label %230, label %231

230:                                              ; preds = %228
  tail call void @abort() #14
  unreachable

231:                                              ; preds = %228, %218
  %232 = phi i64 [ %226, %228 ], [ 1152921504606846975, %218 ]
  %233 = shl i64 %232, 4
  %234 = tail call i8* @_Znwm(i64 %233) #13
  %235 = bitcast i8* %234 to %"class.base::BasicStringPiece"*
  br label %236

236:                                              ; preds = %231, %223
  %237 = phi i64 [ %232, %231 ], [ 0, %223 ]
  %238 = phi i8* [ %234, %231 ], [ null, %223 ]
  %239 = phi %"class.base::BasicStringPiece"* [ %235, %231 ], [ null, %223 ]
  %240 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 %213
  %241 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 %237
  %242 = ptrtoint %"class.base::BasicStringPiece"* %241 to i64
  %243 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %240, i64 0, i32 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.78, i64 0, i64 0), i8** %243, align 8
  %244 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 %213, i32 1
  store i64 10, i64* %244, align 8
  %245 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %240, i64 1
  %246 = ptrtoint %"class.base::BasicStringPiece"* %245 to i64
  %247 = ptrtoint %"class.base::BasicStringPiece"* %239 to i64
  %248 = icmp sgt i64 %212, 0
  br i1 %248, label %249, label %251

249:                                              ; preds = %236
  %250 = inttoptr i64 %211 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %238, i8* align 8 %250, i64 %212, i1 false) #12
  br label %251

251:                                              ; preds = %249, %236
  store i64 %247, i64* %210, align 8
  store i64 %246, i64* %209, align 8
  store i64 %242, i64* %219, align 8
  %252 = icmp eq i64 %211, 0
  br i1 %252, label %255, label %253

253:                                              ; preds = %251
  %254 = inttoptr i64 %211 to i8*
  tail call void @_ZdlPv(i8* %254) #13
  br label %255

255:                                              ; preds = %253, %251, %201, %193
  %256 = and i32 %1, 524288
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %317, label %258

258:                                              ; preds = %255
  %259 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %260 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %261 = icmp ult %"class.base::BasicStringPiece"* %259, %260
  %262 = ptrtoint %"class.base::BasicStringPiece"* %260 to i64
  br i1 %261, label %263, label %269

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 0, i32 0
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.79, i64 0, i64 0), i8** %264, align 8
  %265 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 0, i32 1
  store i64 19, i64* %265, align 8
  %266 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %259, i64 1
  %267 = ptrtoint %"class.base::BasicStringPiece"* %266 to i64
  %268 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %267, i64* %268, align 8
  br label %317

269:                                              ; preds = %258
  %270 = ptrtoint %"class.base::BasicStringPiece"* %259 to i64
  %271 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %272 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = sub i64 %270, %273
  %275 = ashr exact i64 %274, 4
  %276 = add nsw i64 %275, 1
  %277 = icmp ugt i64 %276, 1152921504606846975
  br i1 %277, label %278, label %280

278:                                              ; preds = %269
  %279 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %279) #14
  unreachable

280:                                              ; preds = %269
  %281 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %282 = sub i64 %262, %273
  %283 = ashr exact i64 %282, 4
  %284 = icmp ult i64 %283, 576460752303423487
  br i1 %284, label %285, label %293

285:                                              ; preds = %280
  %286 = ashr exact i64 %282, 3
  %287 = icmp ult i64 %286, %276
  %288 = select i1 %287, i64 %276, i64 %286
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %298, label %290

290:                                              ; preds = %285
  %291 = icmp ugt i64 %288, 1152921504606846975
  br i1 %291, label %292, label %293

292:                                              ; preds = %290
  tail call void @abort() #14
  unreachable

293:                                              ; preds = %290, %280
  %294 = phi i64 [ %288, %290 ], [ 1152921504606846975, %280 ]
  %295 = shl i64 %294, 4
  %296 = tail call i8* @_Znwm(i64 %295) #13
  %297 = bitcast i8* %296 to %"class.base::BasicStringPiece"*
  br label %298

298:                                              ; preds = %293, %285
  %299 = phi i64 [ %294, %293 ], [ 0, %285 ]
  %300 = phi i8* [ %296, %293 ], [ null, %285 ]
  %301 = phi %"class.base::BasicStringPiece"* [ %297, %293 ], [ null, %285 ]
  %302 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %301, i64 %275
  %303 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %301, i64 %299
  %304 = ptrtoint %"class.base::BasicStringPiece"* %303 to i64
  %305 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %302, i64 0, i32 0
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.79, i64 0, i64 0), i8** %305, align 8
  %306 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %301, i64 %275, i32 1
  store i64 19, i64* %306, align 8
  %307 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %302, i64 1
  %308 = ptrtoint %"class.base::BasicStringPiece"* %307 to i64
  %309 = ptrtoint %"class.base::BasicStringPiece"* %301 to i64
  %310 = icmp sgt i64 %274, 0
  br i1 %310, label %311, label %313

311:                                              ; preds = %298
  %312 = inttoptr i64 %273 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %300, i8* align 8 %312, i64 %274, i1 false) #12
  br label %313

313:                                              ; preds = %311, %298
  store i64 %309, i64* %272, align 8
  store i64 %308, i64* %271, align 8
  store i64 %304, i64* %281, align 8
  %314 = icmp eq i64 %273, 0
  br i1 %314, label %317, label %315

315:                                              ; preds = %313
  %316 = inttoptr i64 %273 to i8*
  tail call void @_ZdlPv(i8* %316) #13
  br label %317

317:                                              ; preds = %315, %313, %263, %255
  %318 = and i32 %1, 1048576
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %379, label %320

320:                                              ; preds = %317
  %321 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %322 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %323 = icmp ult %"class.base::BasicStringPiece"* %321, %322
  %324 = ptrtoint %"class.base::BasicStringPiece"* %322 to i64
  br i1 %323, label %325, label %331

325:                                              ; preds = %320
  %326 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %321, i64 0, i32 0
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.80, i64 0, i64 0), i8** %326, align 8
  %327 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %321, i64 0, i32 1
  store i64 11, i64* %327, align 8
  %328 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %321, i64 1
  %329 = ptrtoint %"class.base::BasicStringPiece"* %328 to i64
  %330 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %329, i64* %330, align 8
  br label %379

331:                                              ; preds = %320
  %332 = ptrtoint %"class.base::BasicStringPiece"* %321 to i64
  %333 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %334 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = sub i64 %332, %335
  %337 = ashr exact i64 %336, 4
  %338 = add nsw i64 %337, 1
  %339 = icmp ugt i64 %338, 1152921504606846975
  br i1 %339, label %340, label %342

340:                                              ; preds = %331
  %341 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %341) #14
  unreachable

342:                                              ; preds = %331
  %343 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %344 = sub i64 %324, %335
  %345 = ashr exact i64 %344, 4
  %346 = icmp ult i64 %345, 576460752303423487
  br i1 %346, label %347, label %355

347:                                              ; preds = %342
  %348 = ashr exact i64 %344, 3
  %349 = icmp ult i64 %348, %338
  %350 = select i1 %349, i64 %338, i64 %348
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %360, label %352

352:                                              ; preds = %347
  %353 = icmp ugt i64 %350, 1152921504606846975
  br i1 %353, label %354, label %355

354:                                              ; preds = %352
  tail call void @abort() #14
  unreachable

355:                                              ; preds = %352, %342
  %356 = phi i64 [ %350, %352 ], [ 1152921504606846975, %342 ]
  %357 = shl i64 %356, 4
  %358 = tail call i8* @_Znwm(i64 %357) #13
  %359 = bitcast i8* %358 to %"class.base::BasicStringPiece"*
  br label %360

360:                                              ; preds = %355, %347
  %361 = phi i64 [ %356, %355 ], [ 0, %347 ]
  %362 = phi i8* [ %358, %355 ], [ null, %347 ]
  %363 = phi %"class.base::BasicStringPiece"* [ %359, %355 ], [ null, %347 ]
  %364 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %363, i64 %337
  %365 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %363, i64 %361
  %366 = ptrtoint %"class.base::BasicStringPiece"* %365 to i64
  %367 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %364, i64 0, i32 0
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.80, i64 0, i64 0), i8** %367, align 8
  %368 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %363, i64 %337, i32 1
  store i64 11, i64* %368, align 8
  %369 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %364, i64 1
  %370 = ptrtoint %"class.base::BasicStringPiece"* %369 to i64
  %371 = ptrtoint %"class.base::BasicStringPiece"* %363 to i64
  %372 = icmp sgt i64 %336, 0
  br i1 %372, label %373, label %375

373:                                              ; preds = %360
  %374 = inttoptr i64 %335 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %362, i8* align 8 %374, i64 %336, i1 false) #12
  br label %375

375:                                              ; preds = %373, %360
  store i64 %371, i64* %334, align 8
  store i64 %370, i64* %333, align 8
  store i64 %366, i64* %343, align 8
  %376 = icmp eq i64 %335, 0
  br i1 %376, label %379, label %377

377:                                              ; preds = %375
  %378 = inttoptr i64 %335 to i8*
  tail call void @_ZdlPv(i8* %378) #13
  br label %379

379:                                              ; preds = %377, %375, %325, %317
  %380 = and i32 %1, 2097152
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %441, label %382

382:                                              ; preds = %379
  %383 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %384 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %385 = icmp ult %"class.base::BasicStringPiece"* %383, %384
  %386 = ptrtoint %"class.base::BasicStringPiece"* %384 to i64
  br i1 %385, label %387, label %393

387:                                              ; preds = %382
  %388 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %383, i64 0, i32 0
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.81, i64 0, i64 0), i8** %388, align 8
  %389 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %383, i64 0, i32 1
  store i64 25, i64* %389, align 8
  %390 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %383, i64 1
  %391 = ptrtoint %"class.base::BasicStringPiece"* %390 to i64
  %392 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %391, i64* %392, align 8
  br label %441

393:                                              ; preds = %382
  %394 = ptrtoint %"class.base::BasicStringPiece"* %383 to i64
  %395 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %396 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = sub i64 %394, %397
  %399 = ashr exact i64 %398, 4
  %400 = add nsw i64 %399, 1
  %401 = icmp ugt i64 %400, 1152921504606846975
  br i1 %401, label %402, label %404

402:                                              ; preds = %393
  %403 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %403) #14
  unreachable

404:                                              ; preds = %393
  %405 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %406 = sub i64 %386, %397
  %407 = ashr exact i64 %406, 4
  %408 = icmp ult i64 %407, 576460752303423487
  br i1 %408, label %409, label %417

409:                                              ; preds = %404
  %410 = ashr exact i64 %406, 3
  %411 = icmp ult i64 %410, %400
  %412 = select i1 %411, i64 %400, i64 %410
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %422, label %414

414:                                              ; preds = %409
  %415 = icmp ugt i64 %412, 1152921504606846975
  br i1 %415, label %416, label %417

416:                                              ; preds = %414
  tail call void @abort() #14
  unreachable

417:                                              ; preds = %414, %404
  %418 = phi i64 [ %412, %414 ], [ 1152921504606846975, %404 ]
  %419 = shl i64 %418, 4
  %420 = tail call i8* @_Znwm(i64 %419) #13
  %421 = bitcast i8* %420 to %"class.base::BasicStringPiece"*
  br label %422

422:                                              ; preds = %417, %409
  %423 = phi i64 [ %418, %417 ], [ 0, %409 ]
  %424 = phi i8* [ %420, %417 ], [ null, %409 ]
  %425 = phi %"class.base::BasicStringPiece"* [ %421, %417 ], [ null, %409 ]
  %426 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %425, i64 %399
  %427 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %425, i64 %423
  %428 = ptrtoint %"class.base::BasicStringPiece"* %427 to i64
  %429 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %426, i64 0, i32 0
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.81, i64 0, i64 0), i8** %429, align 8
  %430 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %425, i64 %399, i32 1
  store i64 25, i64* %430, align 8
  %431 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %426, i64 1
  %432 = ptrtoint %"class.base::BasicStringPiece"* %431 to i64
  %433 = ptrtoint %"class.base::BasicStringPiece"* %425 to i64
  %434 = icmp sgt i64 %398, 0
  br i1 %434, label %435, label %437

435:                                              ; preds = %422
  %436 = inttoptr i64 %397 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %424, i8* align 8 %436, i64 %398, i1 false) #12
  br label %437

437:                                              ; preds = %435, %422
  store i64 %433, i64* %396, align 8
  store i64 %432, i64* %395, align 8
  store i64 %428, i64* %405, align 8
  %438 = icmp eq i64 %397, 0
  br i1 %438, label %441, label %439

439:                                              ; preds = %437
  %440 = inttoptr i64 %397 to i8*
  tail call void @_ZdlPv(i8* %440) #13
  br label %441

441:                                              ; preds = %439, %437, %387, %379
  %442 = and i32 %1, 4194304
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %503, label %444

444:                                              ; preds = %441
  %445 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %446 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %447 = icmp ult %"class.base::BasicStringPiece"* %445, %446
  %448 = ptrtoint %"class.base::BasicStringPiece"* %446 to i64
  br i1 %447, label %449, label %455

449:                                              ; preds = %444
  %450 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %445, i64 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i64 0, i64 0), i8** %450, align 8
  %451 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %445, i64 0, i32 1
  store i64 14, i64* %451, align 8
  %452 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %445, i64 1
  %453 = ptrtoint %"class.base::BasicStringPiece"* %452 to i64
  %454 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %453, i64* %454, align 8
  br label %503

455:                                              ; preds = %444
  %456 = ptrtoint %"class.base::BasicStringPiece"* %445 to i64
  %457 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %458 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %459 = load i64, i64* %458, align 8
  %460 = sub i64 %456, %459
  %461 = ashr exact i64 %460, 4
  %462 = add nsw i64 %461, 1
  %463 = icmp ugt i64 %462, 1152921504606846975
  br i1 %463, label %464, label %466

464:                                              ; preds = %455
  %465 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %465) #14
  unreachable

466:                                              ; preds = %455
  %467 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %468 = sub i64 %448, %459
  %469 = ashr exact i64 %468, 4
  %470 = icmp ult i64 %469, 576460752303423487
  br i1 %470, label %471, label %479

471:                                              ; preds = %466
  %472 = ashr exact i64 %468, 3
  %473 = icmp ult i64 %472, %462
  %474 = select i1 %473, i64 %462, i64 %472
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %484, label %476

476:                                              ; preds = %471
  %477 = icmp ugt i64 %474, 1152921504606846975
  br i1 %477, label %478, label %479

478:                                              ; preds = %476
  tail call void @abort() #14
  unreachable

479:                                              ; preds = %476, %466
  %480 = phi i64 [ %474, %476 ], [ 1152921504606846975, %466 ]
  %481 = shl i64 %480, 4
  %482 = tail call i8* @_Znwm(i64 %481) #13
  %483 = bitcast i8* %482 to %"class.base::BasicStringPiece"*
  br label %484

484:                                              ; preds = %479, %471
  %485 = phi i64 [ %480, %479 ], [ 0, %471 ]
  %486 = phi i8* [ %482, %479 ], [ null, %471 ]
  %487 = phi %"class.base::BasicStringPiece"* [ %483, %479 ], [ null, %471 ]
  %488 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %487, i64 %461
  %489 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %487, i64 %485
  %490 = ptrtoint %"class.base::BasicStringPiece"* %489 to i64
  %491 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %488, i64 0, i32 0
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.82, i64 0, i64 0), i8** %491, align 8
  %492 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %487, i64 %461, i32 1
  store i64 14, i64* %492, align 8
  %493 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %488, i64 1
  %494 = ptrtoint %"class.base::BasicStringPiece"* %493 to i64
  %495 = ptrtoint %"class.base::BasicStringPiece"* %487 to i64
  %496 = icmp sgt i64 %460, 0
  br i1 %496, label %497, label %499

497:                                              ; preds = %484
  %498 = inttoptr i64 %459 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %486, i8* align 8 %498, i64 %460, i1 false) #12
  br label %499

499:                                              ; preds = %497, %484
  store i64 %495, i64* %458, align 8
  store i64 %494, i64* %457, align 8
  store i64 %490, i64* %467, align 8
  %500 = icmp eq i64 %459, 0
  br i1 %500, label %503, label %501

501:                                              ; preds = %499
  %502 = inttoptr i64 %459 to i8*
  tail call void @_ZdlPv(i8* %502) #13
  br label %503

503:                                              ; preds = %501, %499, %449, %441
  %504 = and i32 %1, 8388608
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %565, label %506

506:                                              ; preds = %503
  %507 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %508 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %4, align 8
  %509 = icmp ult %"class.base::BasicStringPiece"* %507, %508
  %510 = ptrtoint %"class.base::BasicStringPiece"* %508 to i64
  br i1 %509, label %511, label %517

511:                                              ; preds = %506
  %512 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %507, i64 0, i32 0
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.83, i64 0, i64 0), i8** %512, align 8
  %513 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %507, i64 0, i32 1
  store i64 16, i64* %513, align 8
  %514 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %507, i64 1
  %515 = ptrtoint %"class.base::BasicStringPiece"* %514 to i64
  %516 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  store i64 %515, i64* %516, align 8
  br label %565

517:                                              ; preds = %506
  %518 = ptrtoint %"class.base::BasicStringPiece"* %507 to i64
  %519 = bitcast %"class.base::BasicStringPiece"** %3 to i64*
  %520 = bitcast %"class.std::__1::vector.59"* %0 to i64*
  %521 = load i64, i64* %520, align 8
  %522 = sub i64 %518, %521
  %523 = ashr exact i64 %522, 4
  %524 = add nsw i64 %523, 1
  %525 = icmp ugt i64 %524, 1152921504606846975
  br i1 %525, label %526, label %528

526:                                              ; preds = %517
  %527 = bitcast %"class.std::__1::vector.59"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %527) #14
  unreachable

528:                                              ; preds = %517
  %529 = bitcast %"class.base::BasicStringPiece"** %4 to i64*
  %530 = sub i64 %510, %521
  %531 = ashr exact i64 %530, 4
  %532 = icmp ult i64 %531, 576460752303423487
  br i1 %532, label %533, label %541

533:                                              ; preds = %528
  %534 = ashr exact i64 %530, 3
  %535 = icmp ult i64 %534, %524
  %536 = select i1 %535, i64 %524, i64 %534
  %537 = icmp eq i64 %536, 0
  br i1 %537, label %546, label %538

538:                                              ; preds = %533
  %539 = icmp ugt i64 %536, 1152921504606846975
  br i1 %539, label %540, label %541

540:                                              ; preds = %538
  tail call void @abort() #14
  unreachable

541:                                              ; preds = %538, %528
  %542 = phi i64 [ %536, %538 ], [ 1152921504606846975, %528 ]
  %543 = shl i64 %542, 4
  %544 = tail call i8* @_Znwm(i64 %543) #13
  %545 = bitcast i8* %544 to %"class.base::BasicStringPiece"*
  br label %546

546:                                              ; preds = %541, %533
  %547 = phi i64 [ %542, %541 ], [ 0, %533 ]
  %548 = phi i8* [ %544, %541 ], [ null, %533 ]
  %549 = phi %"class.base::BasicStringPiece"* [ %545, %541 ], [ null, %533 ]
  %550 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %549, i64 %523
  %551 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %549, i64 %547
  %552 = ptrtoint %"class.base::BasicStringPiece"* %551 to i64
  %553 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %550, i64 0, i32 0
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.83, i64 0, i64 0), i8** %553, align 8
  %554 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %549, i64 %523, i32 1
  store i64 16, i64* %554, align 8
  %555 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %550, i64 1
  %556 = ptrtoint %"class.base::BasicStringPiece"* %555 to i64
  %557 = ptrtoint %"class.base::BasicStringPiece"* %549 to i64
  %558 = icmp sgt i64 %522, 0
  br i1 %558, label %559, label %561

559:                                              ; preds = %546
  %560 = inttoptr i64 %521 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %548, i8* align 8 %560, i64 %522, i1 false) #12
  br label %561

561:                                              ; preds = %559, %546
  store i64 %557, i64* %520, align 8
  store i64 %556, i64* %519, align 8
  store i64 %552, i64* %529, align 8
  %562 = icmp eq i64 %521, 0
  br i1 %562, label %565, label %563

563:                                              ; preds = %561
  %564 = inttoptr i64 %521 to i8*
  tail call void @_ZdlPv(i8* %564) #13
  br label %565

565:                                              ; preds = %563, %561, %511, %2, %503
  ret void
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN2ui8KeyEventC1ERKPNS_5EventE(%"class.ui::KeyEvent"*, %"class.ui::Event"** dereferenceable(8)) unnamed_addr #2

declare void @_ZN2ui10MouseEventC1ERKPNS_5EventE(%"class.ui::MouseEvent"*, %"class.ui::Event"** dereferenceable(8)) unnamed_addr #2

declare void @_ZN2ui15MouseWheelEventC1ERKPNS_5EventE(%"class.ui::MouseWheelEvent"*, %"class.ui::Event"** dereferenceable(8)) unnamed_addr #2

declare void @_ZN2ui11ScrollEventC1ERKPNS_5EventE(%"class.ui::ScrollEvent"*, %"class.ui::Event"** dereferenceable(8)) unnamed_addr #2

declare void @_ZN2ui10TouchEventC1ERKPNS_5EventE(%"class.ui::TouchEvent"*, %"class.ui::Event"** dereferenceable(8)) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
