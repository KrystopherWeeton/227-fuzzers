; ModuleID = '../../third_party/pdfium/core/fxge/dib/fx_dib.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/fx_dib.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }

@_ZN21FXDIB_ResampleOptionsC1Ev = hidden unnamed_addr alias void (%struct.FXDIB_ResampleOptions*), void (%struct.FXDIB_ResampleOptions*)* @_ZN21FXDIB_ResampleOptionsC2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i16 @_Z13MakeRGBFormati(i32) local_unnamed_addr #0 {
  switch i32 %0, label %5 [
    i32 1, label %6
    i32 8, label %2
    i32 24, label %3
    i32 32, label %4
  ]

2:                                                ; preds = %1
  br label %6

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %1, %5, %4, %3, %2
  %7 = phi i16 [ 0, %5 ], [ 32, %4 ], [ 24, %3 ], [ 8, %2 ], [ 1, %1 ]
  ret i16 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN21FXDIB_ResampleOptionsC2Ev(%struct.FXDIB_ResampleOptions* nocapture) unnamed_addr #1 align 2 {
  %2 = bitcast %struct.FXDIB_ResampleOptions* %0 to i32*
  store i32 0, i32* %2, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK21FXDIB_ResampleOptions13HasAnyOptionsEv(%struct.FXDIB_ResampleOptions* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %17

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %0, i64 0, i32 1
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %0, i64 0, i32 2
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %0, i64 0, i32 3
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp ne i8 %15, 0
  br label %17

17:                                               ; preds = %9, %5, %1, %13
  %18 = phi i1 [ true, %9 ], [ true, %5 ], [ true, %1 ], [ %16, %13 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_Z17FXDIB_SwapClipBoxRK7FX_RECTiibb(%struct.FX_RECT* nocapture readonly dereferenceable(16), i32, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #3 {
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %struct.FX_RECT*
  %8 = bitcast { i64, i64 }* %6 to i32*
  %9 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 1
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %11 = bitcast i64* %10 to i32*
  %12 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 3
  %13 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #9
  %14 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  br i1 %4, label %16, label %21

16:                                               ; preds = %5
  %17 = sub nsw i32 %2, %15
  store i32 %17, i32* %8, align 8
  %18 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %2, %19
  br label %24

21:                                               ; preds = %5
  store i32 %15, i32* %8, align 8
  %22 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  br label %24

24:                                               ; preds = %21, %16
  %25 = phi i32 [ %23, %21 ], [ %20, %16 ]
  store i32 %25, i32* %11, align 8
  %26 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %3, label %28, label %33

28:                                               ; preds = %24
  %29 = sub nsw i32 %1, %27
  store i32 %29, i32* %9, align 4
  %30 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = sub nsw i32 %1, %31
  br label %36

33:                                               ; preds = %24
  store i32 %27, i32* %9, align 4
  %34 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %0, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  br label %36

36:                                               ; preds = %33, %28
  %37 = phi i32 [ %35, %33 ], [ %32, %28 ]
  store i32 %37, i32* %12, align 4
  call void @_ZN7FX_RECT9NormalizeEv(%struct.FX_RECT* nonnull %7) #9
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = insertvalue { i64, i64 } undef, i64 %39, 0
  %41 = load i64, i64* %10, align 8
  %42 = insertvalue { i64, i64 } %40, i64 %41, 1
  ret { i64, i64 } %42
}

declare void @_ZN7FX_RECT9NormalizeEv(%struct.FX_RECT*) local_unnamed_addr #4

; Function Attrs: nounwind readnone ssp uwtable
define hidden { i64, i64 } @_Z10ArgbDecodej(i32) local_unnamed_addr #5 {
  %2 = and i32 %0, 255
  %3 = tail call i32 @llvm.bswap.i32(i32 %0)
  %4 = lshr i32 %3, 8
  %5 = lshr i32 %3, 16
  %6 = and i32 %3, 255
  %7 = and i32 %4, 255
  %8 = and i32 %5, 255
  %9 = zext i32 %7 to i64
  %10 = shl nuw nsw i64 %9, 32
  %11 = zext i32 %6 to i64
  %12 = or i64 %10, %11
  %13 = insertvalue { i64, i64 } undef, i64 %12, 0
  %14 = zext i32 %2 to i64
  %15 = shl nuw nsw i64 %14, 32
  %16 = zext i32 %8 to i64
  %17 = or i64 %15, %16
  %18 = insertvalue { i64, i64 } %13, i64 %17, 1
  ret { i64, i64 } %18
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_Z22ArgbToAlphaAndColorRefj(i32) local_unnamed_addr #5 {
  %2 = lshr i32 %0, 24
  %3 = lshr i32 %0, 16
  %4 = shl i32 %0, 16
  %5 = and i32 %4, 16711680
  %6 = and i32 %0, 65280
  %7 = or i32 %5, %6
  %8 = and i32 %3, 255
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = shl nuw nsw i64 %10, 32
  %12 = zext i32 %2 to i64
  %13 = or i64 %11, %12
  ret i64 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z14ArgbToColorRefj(i32) local_unnamed_addr #0 {
  %2 = lshr i32 %0, 16
  %3 = shl i32 %0, 16
  %4 = and i32 %3, 16711680
  %5 = and i32 %0, 65280
  %6 = or i32 %4, %5
  %7 = and i32 %2, 255
  %8 = or i32 %6, %7
  ret i32 %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z22AlphaAndColorRefToArgbij(i32, i32) local_unnamed_addr #0 {
  %3 = and i32 %1, 65280
  %4 = lshr i32 %1, 16
  %5 = and i32 %4, 255
  %6 = shl i32 %0, 24
  %7 = shl i32 %1, 16
  %8 = and i32 %7, 16711680
  %9 = or i32 %3, %6
  %10 = or i32 %9, %8
  %11 = or i32 %10, %5
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z14StringToFXARGBN5fxcrt18StringViewTemplateIwEE(%"class.fxcrt::StringViewTemplate"* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %0, i64 0, i32 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %138, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = trunc i64 %3 to i32
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %138

10:                                               ; preds = %5
  %11 = and i64 %3, 4294967295
  br label %12

12:                                               ; preds = %23, %10
  %13 = phi i64 [ 0, %10 ], [ %24, %23 ]
  %14 = getelementptr inbounds i32, i32* %7, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = tail call signext i8 @u_isspace_69(i32 %15) #9
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %12
  %19 = trunc i64 %13 to i32
  %20 = icmp slt i32 %19, %8
  br i1 %20, label %21, label %127

21:                                               ; preds = %18
  %22 = and i64 %13, 4294967295
  br label %26

23:                                               ; preds = %12
  %24 = add nuw nsw i64 %13, 1
  %25 = icmp eq i64 %24, %11
  br i1 %25, label %138, label %12

26:                                               ; preds = %37, %21
  %27 = phi i64 [ %22, %21 ], [ %42, %37 ]
  %28 = phi i32 [ 0, %21 ], [ %43, %37 ]
  %29 = getelementptr inbounds i32, i32* %7, i64 %27
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 44
  br i1 %31, label %48, label %32

32:                                               ; preds = %26
  %33 = icmp ugt i32 %30, 127
  br i1 %33, label %127, label %34

34:                                               ; preds = %32
  %35 = tail call i32 @iswdigit(i32 %30) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %34
  %38 = mul nuw nsw i32 %28, 10
  %39 = load i32, i32* %29, align 4
  %40 = add nuw nsw i32 %38, 208
  %41 = add i32 %40, %39
  %42 = add nuw nsw i64 %27, 1
  %43 = and i32 %41, 255
  %44 = icmp eq i64 %42, %11
  br i1 %44, label %127, label %26

45:                                               ; preds = %34
  %46 = load i32, i32* %29, align 4
  %47 = icmp eq i32 %46, 44
  br i1 %47, label %48, label %127

48:                                               ; preds = %26, %45
  %49 = and i64 %27, 4294967295
  br label %50

50:                                               ; preds = %48, %55
  %51 = phi i64 [ %49, %48 ], [ %52, %55 ]
  %52 = add nuw nsw i64 %51, 1
  %53 = trunc i64 %52 to i32
  %54 = icmp slt i32 %53, %8
  br i1 %54, label %55, label %127

55:                                               ; preds = %50
  %56 = getelementptr inbounds i32, i32* %7, i64 %52
  %57 = load i32, i32* %56, align 4
  %58 = tail call signext i8 @u_isspace_69(i32 %57) #9
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %50

60:                                               ; preds = %55
  %61 = and i64 %52, 4294967295
  br label %62

62:                                               ; preds = %60, %73
  %63 = phi i64 [ %61, %60 ], [ %80, %73 ]
  %64 = phi i8 [ 0, %60 ], [ %79, %73 ]
  %65 = getelementptr inbounds i32, i32* %7, i64 %63
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 44
  br i1 %67, label %86, label %68

68:                                               ; preds = %62
  %69 = icmp ugt i32 %66, 127
  br i1 %69, label %127, label %70

70:                                               ; preds = %68
  %71 = tail call i32 @iswdigit(i32 %66) #9
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %83, label %73

73:                                               ; preds = %70
  %74 = zext i8 %64 to i32
  %75 = mul nuw nsw i32 %74, 10
  %76 = load i32, i32* %65, align 4
  %77 = add nsw i32 %76, %75
  %78 = trunc i32 %77 to i8
  %79 = add i8 %78, -48
  %80 = add nuw nsw i64 %63, 1
  %81 = trunc i64 %80 to i32
  %82 = icmp slt i32 %81, %8
  br i1 %82, label %62, label %127

83:                                               ; preds = %70
  %84 = load i32, i32* %65, align 4
  %85 = icmp eq i32 %84, 44
  br i1 %85, label %86, label %127

86:                                               ; preds = %62, %83
  %87 = shl i64 %63, 32
  %88 = ashr exact i64 %87, 32
  %89 = shl i64 %3, 32
  %90 = ashr exact i64 %89, 32
  br label %91

91:                                               ; preds = %86, %95
  %92 = phi i64 [ %88, %86 ], [ %93, %95 ]
  %93 = add nsw i64 %92, 1
  %94 = icmp slt i64 %93, %90
  br i1 %94, label %95, label %100

95:                                               ; preds = %91
  %96 = getelementptr inbounds i32, i32* %7, i64 %93
  %97 = load i32, i32* %96, align 4
  %98 = tail call signext i8 @u_isspace_69(i32 %97) #9
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %91

100:                                              ; preds = %95, %91
  %101 = trunc i64 %93 to i32
  %102 = icmp slt i32 %101, %8
  br i1 %102, label %103, label %127

103:                                              ; preds = %100
  %104 = shl i64 %93, 32
  %105 = ashr exact i64 %104, 32
  br label %106

106:                                              ; preds = %117, %103
  %107 = phi i64 [ %105, %103 ], [ %124, %117 ]
  %108 = phi i8 [ 0, %103 ], [ %123, %117 ]
  %109 = getelementptr inbounds i32, i32* %7, i64 %107
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 44
  %112 = icmp ugt i32 %110, 127
  %113 = or i1 %111, %112
  br i1 %113, label %127, label %114

114:                                              ; preds = %106
  %115 = tail call i32 @iswdigit(i32 %110) #9
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %127, label %117

117:                                              ; preds = %114
  %118 = zext i8 %108 to i32
  %119 = mul nuw nsw i32 %118, 10
  %120 = load i32, i32* %109, align 4
  %121 = add nsw i32 %120, %119
  %122 = trunc i32 %121 to i8
  %123 = add i8 %122, -48
  %124 = add nsw i64 %107, 1
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, %8
  br i1 %126, label %127, label %106

127:                                              ; preds = %32, %37, %50, %73, %68, %106, %114, %117, %18, %100, %83, %45
  %128 = phi i32 [ %28, %83 ], [ %28, %45 ], [ %28, %100 ], [ 0, %18 ], [ %28, %117 ], [ %28, %114 ], [ %28, %106 ], [ %28, %68 ], [ %28, %73 ], [ %28, %50 ], [ %43, %37 ], [ %28, %32 ]
  %129 = phi i8 [ %64, %83 ], [ 0, %45 ], [ %64, %100 ], [ 0, %18 ], [ %64, %117 ], [ %64, %114 ], [ %64, %106 ], [ %79, %73 ], [ %64, %68 ], [ 0, %50 ], [ 0, %37 ], [ 0, %32 ]
  %130 = phi i8 [ 0, %83 ], [ 0, %45 ], [ 0, %100 ], [ 0, %18 ], [ %108, %106 ], [ %108, %114 ], [ %123, %117 ], [ 0, %68 ], [ 0, %73 ], [ 0, %50 ], [ 0, %37 ], [ 0, %32 ]
  %131 = zext i8 %129 to i32
  %132 = zext i8 %130 to i32
  %133 = shl nuw nsw i32 %128, 16
  %134 = shl nuw nsw i32 %131, 8
  %135 = or i32 %133, %134
  %136 = or i32 %135, %132
  %137 = or i32 %136, -16777216
  br label %138

138:                                              ; preds = %23, %5, %127, %1
  %139 = phi i32 [ -16777216, %1 ], [ %137, %127 ], [ -16777216, %5 ], [ -16777216, %23 ]
  ret i32 %139
}

declare signext i8 @u_isspace_69(i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
