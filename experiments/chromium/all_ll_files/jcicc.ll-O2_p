; ModuleID = '../../third_party/libjpeg_turbo/jcicc.c'
source_filename = "../../third_party/libjpeg_turbo/jcicc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @jpeg_write_icc_profile(%struct.jpeg_compress_struct*, i8* readonly, i32) local_unnamed_addr #0 {
  %4 = icmp eq i8* %1, null
  %5 = icmp eq i32 %2, 0
  %6 = or i1 %4, %5
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %9 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %9, i64 0, i32 5
  store i32 23, i32* %10, align 8
  %11 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %8, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %11, i64 0, i32 0
  %13 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %12, align 8
  %14 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %13(%struct.jpeg_common_struct* %14) #2
  br label %15

15:                                               ; preds = %3, %7
  %16 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 101
  br i1 %18, label %19, label %30

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %21 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %20, align 8
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %21, i64 0, i32 5
  store i32 20, i32* %22, align 8
  %23 = load i32, i32* %16, align 4
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %20, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 6, i32 0, i64 0
  store i32 %23, i32* %25, align 4
  %26 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %20, align 8
  %27 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %26, i64 0, i32 0
  %28 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %27, align 8
  %29 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %28(%struct.jpeg_common_struct* %29) #2
  br label %30

30:                                               ; preds = %19, %15
  %31 = udiv i32 %2, 65519
  %32 = mul i32 %31, 65519
  %33 = icmp ne i32 %32, %2
  %34 = zext i1 %33 to i32
  %35 = add nuw nsw i32 %31, %34
  br i1 %5, label %57, label %36

36:                                               ; preds = %30, %53
  %37 = phi i32 [ %55, %53 ], [ 1, %30 ]
  %38 = phi i32 [ %42, %53 ], [ %2, %30 ]
  %39 = phi i8* [ %54, %53 ], [ %1, %30 ]
  %40 = icmp ult i32 %38, 65519
  %41 = select i1 %40, i32 %38, i32 65519
  %42 = sub i32 %38, %41
  %43 = add nuw nsw i32 %41, 14
  tail call void @jpeg_write_m_header(%struct.jpeg_compress_struct* %0, i32 226, i32 %43) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 73) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 67) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 67) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 95) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 80) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 82) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 79) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 70) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 73) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 76) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 69) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 0) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 %37) #2
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 %35) #2
  %44 = icmp eq i32 %41, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %36, %45
  %46 = phi i32 [ %48, %45 ], [ %41, %36 ]
  %47 = phi i8* [ %51, %45 ], [ %39, %36 ]
  %48 = add i32 %46, -1
  %49 = load i8, i8* %47, align 1
  %50 = zext i8 %49 to i32
  tail call void @jpeg_write_m_byte(%struct.jpeg_compress_struct* %0, i32 %50) #2
  %51 = getelementptr inbounds i8, i8* %47, i64 1
  %52 = icmp eq i32 %48, 0
  br i1 %52, label %53, label %45

53:                                               ; preds = %45, %36
  %54 = phi i8* [ %39, %36 ], [ %51, %45 ]
  %55 = add nuw nsw i32 %37, 1
  %56 = icmp eq i32 %42, 0
  br i1 %56, label %57, label %36

57:                                               ; preds = %53, %30
  ret void
}

declare void @jpeg_write_m_header(%struct.jpeg_compress_struct*, i32, i32) local_unnamed_addr #1

declare void @jpeg_write_m_byte(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
