; ModuleID = '../../third_party/opus/src/silk/stereo_find_predictor.c'
source_filename = "../../third_party/opus/src/silk/stereo_find_predictor.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_stereo_find_predictor(i32* nocapture, i16*, i16*, i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #4
  store i32 -1431655766, i32* %7, align 4
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #4
  store i32 -1431655766, i32* %8, align 4
  %13 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #4
  store i32 -1431655766, i32* %9, align 4
  %14 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #4
  store i32 -1431655766, i32* %10, align 4
  call void @silk_sum_sqr_shift(i32* nonnull %9, i32* nonnull %7, i16* %1, i32 %4) #4
  call void @silk_sum_sqr_shift(i32* nonnull %10, i32* nonnull %8, i16* %2, i32 %4) #4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = icmp sgt i32 %15, %16
  %18 = select i1 %17, i32 %15, i32 %16
  %19 = and i32 %18, 1
  %20 = add nsw i32 %19, %18
  %21 = load i32, i32* %10, align 4
  %22 = sub nsw i32 %20, %16
  %23 = ashr i32 %21, %22
  store i32 %23, i32* %10, align 4
  %24 = load i32, i32* %9, align 4
  %25 = sub nsw i32 %20, %15
  %26 = ashr i32 %24, %25
  %27 = icmp sgt i32 %26, 1
  %28 = select i1 %27, i32 %26, i32 1
  store i32 %28, i32* %9, align 4
  %29 = call i32 @silk_inner_prod_aligned_scale(i16* %1, i16* %2, i32 %20, i32 %4) #4
  %30 = load i32, i32* %9, align 4
  %31 = icmp slt i32 %29, 0
  %32 = sub nsw i32 0, %29
  %33 = select i1 %31, i32 %32, i32 %29
  %34 = call i32 @llvm.ctlz.i32(i32 %33, i1 false) #4, !range !2
  %35 = add nsw i32 %34, -1
  %36 = shl i32 %29, %35
  %37 = icmp slt i32 %30, 0
  %38 = sub nsw i32 0, %30
  %39 = select i1 %37, i32 %38, i32 %30
  %40 = call i32 @llvm.ctlz.i32(i32 %39, i1 false) #4, !range !2
  %41 = add nsw i32 %40, -1
  %42 = shl i32 %30, %41
  %43 = ashr i32 %42, 16
  %44 = sdiv i32 536870911, %43
  %45 = sext i32 %36 to i64
  %46 = zext i32 %44 to i64
  %47 = shl i64 %46, 48
  %48 = ashr exact i64 %47, 48
  %49 = mul nsw i64 %48, %45
  %50 = sext i32 %42 to i64
  %51 = ashr i64 %49, 16
  %52 = mul nsw i64 %51, %50
  %53 = lshr i64 %52, 29
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, -8
  %56 = sub i32 %36, %55
  %57 = sext i32 %56 to i64
  %58 = mul nsw i64 %48, %57
  %59 = lshr i64 %58, 16
  %60 = add nsw i64 %59, %51
  %61 = trunc i64 %60 to i32
  %62 = sub nsw i32 1, %40
  %63 = add nuw nsw i32 %34, 15
  %64 = add nsw i32 %63, %62
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %84

66:                                               ; preds = %6
  %67 = sub nsw i32 0, %64
  %68 = ashr i32 -2147483648, %67
  %69 = lshr i32 2147483647, %67
  %70 = icmp sgt i32 %68, %69
  br i1 %70, label %71, label %76

71:                                               ; preds = %66
  %72 = icmp slt i32 %68, %61
  br i1 %72, label %81, label %73

73:                                               ; preds = %71
  %74 = icmp sgt i32 %69, %61
  %75 = select i1 %74, i32 %69, i32 %61
  br label %81

76:                                               ; preds = %66
  %77 = icmp slt i32 %69, %61
  br i1 %77, label %81, label %78

78:                                               ; preds = %76
  %79 = icmp sgt i32 %68, %61
  %80 = select i1 %79, i32 %68, i32 %61
  br label %81

81:                                               ; preds = %78, %76, %73, %71
  %82 = phi i32 [ %68, %71 ], [ %75, %73 ], [ %69, %76 ], [ %80, %78 ]
  %83 = shl i32 %82, %67
  br label %88

84:                                               ; preds = %6
  %85 = icmp slt i32 %64, 32
  %86 = ashr i32 %61, %64
  %87 = select i1 %85, i32 %86, i32 0
  br label %88

88:                                               ; preds = %84, %81
  %89 = phi i32 [ %83, %81 ], [ %87, %84 ]
  %90 = icmp sgt i32 %89, -16384
  %91 = select i1 %90, i32 %89, i32 -16384
  %92 = icmp slt i32 %91, 16384
  %93 = select i1 %92, i32 %91, i32 16384
  %94 = sext i32 %93 to i64
  %95 = zext i32 %93 to i64
  %96 = shl i64 %95, 48
  %97 = ashr exact i64 %96, 48
  %98 = mul nsw i64 %97, %94
  %99 = lshr i64 %98, 16
  %100 = trunc i64 %99 to i32
  %101 = icmp slt i32 %100, 0
  %102 = sub nsw i32 0, %100
  %103 = select i1 %101, i32 %102, i32 %100
  %104 = icmp slt i32 %103, %5
  %105 = select i1 %104, i32 %5, i32 %103
  %106 = ashr i32 %20, 1
  %107 = load i32, i32* %3, align 4
  %108 = icmp slt i32 %30, 1
  br i1 %108, label %142, label %109

109:                                              ; preds = %88
  %110 = call i32 @llvm.ctlz.i32(i32 %30, i1 false) #4, !range !2
  %111 = sub nsw i32 24, %110
  %112 = add nsw i32 %110, -24
  %113 = icmp eq i32 %111, 0
  br i1 %113, label %126, label %114

114:                                              ; preds = %109
  %115 = icmp ult i32 %30, 128
  br i1 %115, label %116, label %121

116:                                              ; preds = %114
  %117 = shl i32 %30, %112
  %118 = sub nuw nsw i32 56, %110
  %119 = lshr i32 %30, %118
  %120 = or i32 %119, %117
  br label %126

121:                                              ; preds = %114
  %122 = add nuw nsw i32 %110, 8
  %123 = shl i32 %30, %122
  %124 = lshr i32 %30, %111
  %125 = or i32 %123, %124
  br label %126

126:                                              ; preds = %121, %116, %109
  %127 = phi i32 [ %120, %116 ], [ %125, %121 ], [ %30, %109 ]
  %128 = and i32 %127, 127
  %129 = and i32 %110, 1
  %130 = icmp eq i32 %129, 0
  %131 = select i1 %130, i32 46214, i32 32768
  %132 = lshr i32 %110, 1
  %133 = lshr i32 %131, %132
  %134 = sext i32 %133 to i64
  %135 = zext i32 %128 to i64
  %136 = mul nuw nsw i64 %135, 59954170039369728
  %137 = lshr exact i64 %136, 48
  %138 = mul nsw i64 %137, %134
  %139 = lshr i64 %138, 16
  %140 = trunc i64 %139 to i32
  %141 = add i32 %133, %140
  br label %142

142:                                              ; preds = %88, %126
  %143 = phi i32 [ %141, %126 ], [ 0, %88 ]
  %144 = shl i32 %143, %106
  %145 = sub nsw i32 %144, %107
  %146 = sext i32 %145 to i64
  %147 = zext i32 %105 to i64
  %148 = shl i64 %147, 48
  %149 = ashr exact i64 %148, 48
  %150 = mul nsw i64 %149, %146
  %151 = lshr i64 %150, 16
  %152 = trunc i64 %151 to i32
  %153 = add i32 %107, %152
  store i32 %153, i32* %3, align 4
  %154 = load i32, i32* %10, align 4
  %155 = sext i32 %29 to i64
  %156 = mul nsw i64 %97, %155
  %157 = lshr i64 %156, 12
  %158 = trunc i64 %157 to i32
  %159 = and i32 %158, -16
  %160 = sub nsw i32 %154, %159
  %161 = sext i32 %30 to i64
  %162 = shl i64 %99, 48
  %163 = ashr exact i64 %162, 48
  %164 = mul nsw i64 %163, %161
  %165 = lshr i64 %164, 10
  %166 = trunc i64 %165 to i32
  %167 = and i32 %166, -64
  %168 = add nsw i32 %160, %167
  store i32 %168, i32* %10, align 4
  %169 = getelementptr inbounds i32, i32* %3, i64 1
  %170 = load i32, i32* %169, align 4
  %171 = icmp slt i32 %168, 1
  br i1 %171, label %205, label %172

172:                                              ; preds = %142
  %173 = call i32 @llvm.ctlz.i32(i32 %168, i1 false) #4, !range !2
  %174 = sub nsw i32 24, %173
  %175 = add nsw i32 %173, -24
  %176 = icmp eq i32 %174, 0
  br i1 %176, label %189, label %177

177:                                              ; preds = %172
  %178 = icmp ult i32 %168, 128
  br i1 %178, label %179, label %184

179:                                              ; preds = %177
  %180 = shl i32 %168, %175
  %181 = sub nuw nsw i32 56, %173
  %182 = lshr i32 %168, %181
  %183 = or i32 %182, %180
  br label %189

184:                                              ; preds = %177
  %185 = add nuw nsw i32 %173, 8
  %186 = shl i32 %168, %185
  %187 = lshr i32 %168, %174
  %188 = or i32 %186, %187
  br label %189

189:                                              ; preds = %184, %179, %172
  %190 = phi i32 [ %183, %179 ], [ %188, %184 ], [ %168, %172 ]
  %191 = and i32 %190, 127
  %192 = and i32 %173, 1
  %193 = icmp eq i32 %192, 0
  %194 = select i1 %193, i32 46214, i32 32768
  %195 = lshr i32 %173, 1
  %196 = lshr i32 %194, %195
  %197 = sext i32 %196 to i64
  %198 = zext i32 %191 to i64
  %199 = mul nuw nsw i64 %198, 59954170039369728
  %200 = lshr exact i64 %199, 48
  %201 = mul nsw i64 %200, %197
  %202 = lshr i64 %201, 16
  %203 = trunc i64 %202 to i32
  %204 = add i32 %196, %203
  br label %205

205:                                              ; preds = %142, %189
  %206 = phi i32 [ %204, %189 ], [ 0, %142 ]
  %207 = shl i32 %206, %106
  %208 = sub nsw i32 %207, %170
  %209 = sext i32 %208 to i64
  %210 = mul nsw i64 %149, %209
  %211 = lshr i64 %210, 16
  %212 = trunc i64 %211 to i32
  %213 = add i32 %170, %212
  store i32 %213, i32* %169, align 4
  %214 = icmp sgt i32 %153, 1
  %215 = select i1 %214, i32 %153, i32 1
  %216 = icmp slt i32 %213, 0
  %217 = sub nsw i32 0, %213
  %218 = select i1 %216, i32 %217, i32 %213
  %219 = call i32 @llvm.ctlz.i32(i32 %218, i1 false) #4, !range !2
  %220 = add nsw i32 %219, -1
  %221 = shl i32 %213, %220
  %222 = call i32 @llvm.ctlz.i32(i32 %215, i1 false) #4, !range !2
  %223 = add nsw i32 %222, -1
  %224 = shl i32 %215, %223
  %225 = ashr i32 %224, 16
  %226 = sdiv i32 536870911, %225
  %227 = sext i32 %221 to i64
  %228 = zext i32 %226 to i64
  %229 = shl i64 %228, 48
  %230 = ashr exact i64 %229, 48
  %231 = mul nsw i64 %230, %227
  %232 = sext i32 %224 to i64
  %233 = ashr i64 %231, 16
  %234 = mul nsw i64 %233, %232
  %235 = lshr i64 %234, 29
  %236 = trunc i64 %235 to i32
  %237 = and i32 %236, -8
  %238 = sub i32 %221, %237
  %239 = sext i32 %238 to i64
  %240 = mul nsw i64 %230, %239
  %241 = lshr i64 %240, 16
  %242 = add nsw i64 %241, %233
  %243 = trunc i64 %242 to i32
  %244 = sub nsw i32 15, %222
  %245 = add nsw i32 %244, %219
  %246 = icmp slt i32 %245, 0
  br i1 %246, label %247, label %265

247:                                              ; preds = %205
  %248 = sub nsw i32 0, %245
  %249 = ashr i32 -2147483648, %248
  %250 = lshr i32 2147483647, %248
  %251 = icmp sgt i32 %249, %250
  br i1 %251, label %252, label %257

252:                                              ; preds = %247
  %253 = icmp slt i32 %249, %243
  br i1 %253, label %262, label %254

254:                                              ; preds = %252
  %255 = icmp sgt i32 %250, %243
  %256 = select i1 %255, i32 %250, i32 %243
  br label %262

257:                                              ; preds = %247
  %258 = icmp slt i32 %250, %243
  br i1 %258, label %262, label %259

259:                                              ; preds = %257
  %260 = icmp sgt i32 %249, %243
  %261 = select i1 %260, i32 %249, i32 %243
  br label %262

262:                                              ; preds = %259, %257, %254, %252
  %263 = phi i32 [ %249, %252 ], [ %256, %254 ], [ %250, %257 ], [ %261, %259 ]
  %264 = shl i32 %263, %248
  br label %269

265:                                              ; preds = %205
  %266 = icmp slt i32 %245, 32
  %267 = ashr i32 %243, %245
  %268 = select i1 %266, i32 %267, i32 0
  br label %269

269:                                              ; preds = %265, %262
  %270 = phi i32 [ %264, %262 ], [ %268, %265 ]
  %271 = icmp sgt i32 %270, 0
  %272 = select i1 %271, i32 %270, i32 0
  %273 = icmp slt i32 %272, 32767
  %274 = select i1 %273, i32 %272, i32 32767
  store i32 %274, i32* %0, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #4
  ret i32 %93
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @silk_sum_sqr_shift(i32*, i32*, i16*, i32) local_unnamed_addr #2

declare i32 @silk_inner_prod_aligned_scale(i16*, i16*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
