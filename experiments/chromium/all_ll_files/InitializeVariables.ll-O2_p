; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/InitializeVariables.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/InitializeVariables.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.sh::StaticType::Helpers::StaticMangledName" = type { [4 x i8] }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.26" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.36, i32 }
%union.anon.36 = type { i32 }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.37", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.39" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.44", %"class.std::__1::vector.44", %"class.std::__1::vector.44", %"class.std::__1::vector.44", %"class.std::__1::vector.44", %"class.std::__1::vector.44", %"class.std::__1::vector.51", %"class.std::__1::vector.51", %"class.std::__1::vector.51", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.90", %struct.ShBuiltInResources, %"class.std::__1::basic_string.53", %"class.sh::TSymbolTable", %"class.std::__1::map.97", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.131", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string.53", %"class.std::__1::basic_string.53", %"class.std::__1::vector.124", i8, i8, %"class.std::__1::vector.44", %"class.std::__1::basic_string.53", %"class.std::__1::basic_string.53", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { i32*, i32*, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string.53", %"class.std::__1::basic_string.53", %"class.std::__1::basic_string.53", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.44" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.66", %"class.std::__1::map.81" }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.76" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.69" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.68"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.68" = type opaque
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { i32*, i32*, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { i32* }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.92" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%"class.std::__1::basic_string.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.56 }
%union.anon.56 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::map.97" = type { %"class.std::__1::__tree.98" }
%"class.std::__1::__tree.98" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.108", %"class.std::__1::map.81", %"class.std::__1::vector.69", %"class.std::__1::vector.117" }
%"class.std::__1::map.108" = type { %"class.std::__1::__tree.109" }
%"class.std::__1::__tree.109" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string.53", %"class.std::__1::vector.124" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.std::__1::map.131" = type { %"class.std::__1::__tree.132" }
%"class.std::__1::__tree.132" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.133", %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::(anonymous namespace)::InitializeLocalsTraverser" = type <{ %"class.sh::TIntermTraverser", i32, i8, i8, [2 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.142", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.149", %"class.std::__1::vector.156", %"class.sh::TVector", %"class.std::__1::vector.163" }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.163" = type { %"class.std::__1::__vector_base.164" }
%"class.std::__1::__vector_base.164" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.165" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.57 }
%struct.anon.57 = type { i8 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.172", i8, [7 x i8] }>
%"class.sh::TVector.172" = type { %"class.std::__1::vector.173" }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { i32*, i32*, %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_ = comdat any

@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE2ELNS_10TQualifierE0ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00D\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE2ELNS_10TQualifierE0ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 3, i32 2, i32 0, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE2ELNS_10TQualifierE0ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE0ELh1ELh1EEE = internal constant %"struct.sh::StaticType::Helpers::StaticMangledName" { [4 x i8] c"00D\00" }, align 1
@_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE0ELh1ELh1EEE = internal global { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* } { i32 3, i32 3, i32 0, i8 0, i8 0, %"struct.sh::TMemoryQualifier" zeroinitializer, { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 } { i32 -1, i32 0, i32 0, i32 0, %"struct.sh::WorkGroupSize" { [3 x i32] [i32 -1, i32 -1, i32 -1] }, i32 -1, i32 -1, i32 0, i32 -1, i8 0, i8 0, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i8 0 }, i8 1, i8 1, %"class.sh::TSpan" zeroinitializer, %"class.sh::TVector.22"* null, %"class.sh::TInterfaceBlock"* null, %"class.sh::TStructure"* null, i8 0, i64 0, i8* getelementptr inbounds (%"struct.sh::StaticType::Helpers::StaticMangledName", %"struct.sh::StaticType::Helpers::StaticMangledName"* @_ZN2sh10StaticType7HelpersL20kMangledNameInstanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE0ELh1ELh1EEE, i32 0, i32 0, i32 0) }, align 8
@_ZTVN2sh12TIntermBlockE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8
@_ZTVN2sh12_GLOBAL__N_125InitializeLocalsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::InitializeLocalsTraverser"*)* @_ZN2sh12_GLOBAL__N_125InitializeLocalsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::InitializeLocalsTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_125InitializeLocalsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14CreateInitCodeEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"*, i1 zeroext, i1 zeroext, %"class.sh::TVector"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  tail call fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %0, i1 zeroext %1, i1 zeroext %2, %"class.sh::TVector"* %3, %"class.sh::TSymbolTable"* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"*, i1 zeroext, i1 zeroext, %"class.sh::TVector"*, %"class.sh::TSymbolTable"*) unnamed_addr #0 {
  %6 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %8, align 8
  %10 = tail call dereferenceable(184) %"class.sh::TType"* %9(%"class.sh::TIntermTyped"* %0) #6
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 10, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %15 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, i64 31
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %15, align 8
  %17 = tail call dereferenceable(184) %"class.sh::TType"* %16(%"class.sh::TIntermTyped"* %0) #6
  br i1 %13, label %78, label %18

18:                                               ; preds = %5
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %17, i64 0, i32 10, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %17, i64 0, i32 10, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -1
  %24 = getelementptr inbounds i32, i32* %20, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = icmp ult i32 %25, 2
  br i1 %26, label %56, label %27

27:                                               ; preds = %18
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %29 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, i64 31
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call dereferenceable(184) %"class.sh::TType"* %30(%"class.sh::TIntermTyped"* %0) #6
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 90
  br i1 %34, label %56, label %35

35:                                               ; preds = %27
  %36 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %37 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %36, i64 31
  %38 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %37, align 8
  %39 = tail call dereferenceable(184) %"class.sh::TType"* %38(%"class.sh::TIntermTyped"* %0) #6
  %40 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %39, i64 0, i32 10, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp ugt i64 %41, 1
  br i1 %42, label %56, label %43

43:                                               ; preds = %35
  %44 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %45 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %44, i64 31
  %46 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %45, align 8
  %47 = tail call dereferenceable(184) %"class.sh::TType"* %46(%"class.sh::TIntermTyped"* %0) #6
  %48 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %47, i64 0, i32 10, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %47, i64 0, i32 10, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, -1
  %53 = getelementptr inbounds i32, i32* %49, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = icmp ult i32 %54, 4
  br label %56

56:                                               ; preds = %43, %35, %27, %18
  %57 = phi i1 [ true, %18 ], [ false, %35 ], [ false, %27 ], [ %55, %43 ]
  %58 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %59 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %58, i64 31
  %60 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %59, align 8
  %61 = tail call dereferenceable(184) %"class.sh::TType"* %60(%"class.sh::TIntermTyped"* %0) #6
  %62 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %61, i64 0, i32 2
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 28
  br i1 %64, label %76, label %65

65:                                               ; preds = %56
  %66 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %67 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %66, i64 31
  %68 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %67, align 8
  %69 = tail call dereferenceable(184) %"class.sh::TType"* %68(%"class.sh::TIntermTyped"* %0) #6
  %70 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %69, i64 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 10
  %73 = or i1 %57, %72
  %74 = xor i1 %1, true
  %75 = or i1 %73, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %65, %56
  tail call fastcc void @_ZN2sh12_GLOBAL__N_129AddArrayZeroInitStatementListEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %0, i1 zeroext %1, i1 zeroext %2, %"class.sh::TVector"* %3, %"class.sh::TSymbolTable"* %4) #6
  br label %368

77:                                               ; preds = %65
  tail call fastcc void @_ZN2sh12_GLOBAL__N_123AddArrayZeroInitForLoopEPKNS_12TIntermTypedEbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %0, i1 zeroext %2, %"class.sh::TVector"* %3, %"class.sh::TSymbolTable"* %4) #6
  br label %368

78:                                               ; preds = %5
  %79 = tail call zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* %17) #6
  br i1 %79, label %86, label %80

80:                                               ; preds = %78
  %81 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %82 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %81, i64 31
  %83 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %82, align 8
  %84 = tail call dereferenceable(184) %"class.sh::TType"* %83(%"class.sh::TIntermTyped"* %0) #6
  %85 = tail call zeroext i1 @_ZNK2sh5TType16isNamelessStructEv(%"class.sh::TType"* %84) #6
  br i1 %85, label %86, label %129

86:                                               ; preds = %80, %78
  %87 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %88 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %87, i64 31
  %89 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %88, align 8
  %90 = tail call dereferenceable(184) %"class.sh::TType"* %89(%"class.sh::TIntermTyped"* %0) #6
  %91 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %90, i64 0, i32 13
  %92 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %91, align 8
  %93 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %92, i64 0, i32 2, i32 0
  %94 = load %"class.sh::TVector.23"*, %"class.sh::TVector.23"** %93, align 8
  %95 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %94, i64 0, i32 0, i32 0, i32 1
  %96 = bitcast %"class.sh::TField"*** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = bitcast %"class.sh::TVector.23"* %94 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = sub i64 %97, %99
  %101 = lshr exact i64 %100, 3
  %102 = trunc i64 %101 to i32
  %103 = icmp sgt i32 %102, 0
  br i1 %103, label %104, label %368

104:                                              ; preds = %86
  %105 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  br label %106

106:                                              ; preds = %104, %106
  %107 = phi i32 [ 0, %104 ], [ %118, %106 ]
  %108 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %109 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %108, i64 240) #6
  %110 = bitcast i8* %109 to %"class.sh::TIntermBinary"*
  %111 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %105, align 8
  %112 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %111, i64 23
  %113 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %112, align 8
  %114 = tail call %"class.sh::TIntermTyped"* %113(%"class.sh::TIntermTyped"* %0) #6
  %115 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %107) #6
  %116 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %115, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %110, i8 zeroext 46, %"class.sh::TIntermTyped"* %114, %"class.sh::TIntermTyped"* %116) #6
  %117 = bitcast i8* %109 to %"class.sh::TIntermTyped"*
  tail call fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %117, i1 zeroext %1, i1 zeroext %2, %"class.sh::TVector"* %3, %"class.sh::TSymbolTable"* %4) #6
  %118 = add nuw nsw i32 %107, 1
  %119 = load %"class.sh::TVector.23"*, %"class.sh::TVector.23"** %93, align 8
  %120 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %119, i64 0, i32 0, i32 0, i32 1
  %121 = bitcast %"class.sh::TField"*** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.sh::TVector.23"* %119 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %122, %124
  %126 = lshr exact i64 %125, 3
  %127 = trunc i64 %126 to i32
  %128 = icmp slt i32 %118, %127
  br i1 %128, label %106, label %368

129:                                              ; preds = %80
  %130 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %131 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %130, i64 31
  %132 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %131, align 8
  %133 = tail call dereferenceable(184) %"class.sh::TType"* %132(%"class.sh::TIntermTyped"* %0) #6
  %134 = tail call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184) %133) #6
  %135 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %136 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %135, i64 240) #6
  %137 = bitcast i8* %136 to %"class.sh::TIntermBinary"*
  %138 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %139 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %138, align 8
  %140 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %139, i64 23
  %141 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %140, align 8
  %142 = tail call %"class.sh::TIntermTyped"* %141(%"class.sh::TIntermTyped"* %0) #6
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %137, i8 zeroext -118, %"class.sh::TIntermTyped"* %142, %"class.sh::TIntermTyped"* %134) #6
  %143 = ptrtoint i8* %136 to i64
  %144 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %145 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %144, align 8
  %146 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %147 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %146, align 8
  %148 = icmp ult %"class.sh::TIntermNode"** %145, %147
  %149 = ptrtoint %"class.sh::TIntermNode"** %147 to i64
  br i1 %148, label %150, label %155

150:                                              ; preds = %129
  %151 = bitcast %"class.sh::TIntermNode"** %145 to i64*
  store i64 %143, i64* %151, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 1
  %153 = ptrtoint %"class.sh::TIntermNode"** %152 to i64
  %154 = bitcast %"class.sh::TIntermNode"*** %144 to i64*
  store i64 %153, i64* %154, align 8
  br label %368

155:                                              ; preds = %129
  %156 = ptrtoint %"class.sh::TIntermNode"** %145 to i64
  %157 = bitcast %"class.sh::TIntermNode"*** %144 to i64*
  %158 = bitcast %"class.sh::TVector"* %3 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = sub i64 %156, %159
  %161 = ashr exact i64 %160, 3
  %162 = add nsw i64 %161, 1
  %163 = icmp ugt i64 %162, 2305843009213693951
  br i1 %163, label %164, label %166

164:                                              ; preds = %155
  %165 = bitcast %"class.sh::TVector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %165) #7
  unreachable

166:                                              ; preds = %155
  %167 = bitcast %"class.sh::TIntermNode"*** %146 to i64*
  %168 = sub i64 %149, %159
  %169 = ashr exact i64 %168, 3
  %170 = icmp ult i64 %169, 1152921504606846975
  br i1 %170, label %171, label %176

171:                                              ; preds = %166
  %172 = ashr exact i64 %168, 2
  %173 = icmp ult i64 %172, %162
  %174 = select i1 %173, i64 %162, i64 %172
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %182, label %176

176:                                              ; preds = %171, %166
  %177 = phi i64 [ %174, %171 ], [ 2305843009213693951, %166 ]
  %178 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %179 = shl i64 %177, 3
  %180 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %178, i64 %179) #6
  %181 = bitcast i8* %180 to %"class.sh::TIntermNode"**
  br label %182

182:                                              ; preds = %176, %171
  %183 = phi i64 [ %177, %176 ], [ 0, %171 ]
  %184 = phi %"class.sh::TIntermNode"** [ %181, %176 ], [ null, %171 ]
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 %161
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 %183
  %187 = ptrtoint %"class.sh::TIntermNode"** %186 to i64
  %188 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  store i64 %143, i64* %188, align 8
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 1
  %190 = ptrtoint %"class.sh::TIntermNode"** %189 to i64
  %191 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 0
  %192 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %191, align 8
  %193 = ptrtoint %"class.sh::TIntermNode"** %192 to i64
  %194 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %144, align 8
  %195 = icmp eq %"class.sh::TIntermNode"** %194, %192
  br i1 %195, label %365, label %196

196:                                              ; preds = %182
  %197 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %198 = ptrtoint %"class.sh::TIntermNode"** %197 to i64
  %199 = sub i64 %198, %193
  %200 = lshr i64 %199, 3
  %201 = add nuw nsw i64 %200, 1
  %202 = icmp ult i64 %201, 4
  br i1 %202, label %295, label %203

203:                                              ; preds = %196
  %204 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %205 = ptrtoint %"class.sh::TIntermNode"** %204 to i64
  %206 = sub i64 %205, %193
  %207 = lshr i64 %206, 3
  %208 = xor i64 %207, -1
  %209 = add nsw i64 %161, %208
  %210 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 %209
  %211 = xor i64 %207, -1
  %212 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 %211
  %213 = icmp ult %"class.sh::TIntermNode"** %210, %194
  %214 = icmp ult %"class.sh::TIntermNode"** %212, %185
  %215 = and i1 %213, %214
  br i1 %215, label %295, label %216

216:                                              ; preds = %203
  %217 = and i64 %201, 4611686018427387900
  %218 = sub nsw i64 0, %217
  %219 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 %218
  %220 = sub nsw i64 0, %217
  %221 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 %220
  %222 = add nsw i64 %217, -4
  %223 = lshr exact i64 %222, 2
  %224 = add nuw nsw i64 %223, 1
  %225 = and i64 %224, 1
  %226 = icmp eq i64 %222, 0
  br i1 %226, label %273, label %227

227:                                              ; preds = %216
  %228 = sub nuw nsw i64 %224, %225
  %229 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %230 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %231 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %232 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  br label %233

233:                                              ; preds = %233, %227
  %234 = phi i64 [ 0, %227 ], [ %268, %233 ]
  %235 = phi i64 [ %228, %227 ], [ %269, %233 ]
  %236 = sub i64 0, %234
  %237 = sub i64 0, %234
  %238 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 %236
  %239 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %230, i64 %237
  %240 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %241 = bitcast %"class.sh::TIntermNode"** %240 to <2 x i64>*
  %242 = load <2 x i64>, <2 x i64>* %241, align 8, !alias.scope !2
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -2
  %244 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %243, i64 -1
  %245 = bitcast %"class.sh::TIntermNode"** %244 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 8, !alias.scope !2
  %247 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %238, i64 -1
  %248 = bitcast %"class.sh::TIntermNode"** %247 to <2 x i64>*
  store <2 x i64> %242, <2 x i64>* %248, align 8, !alias.scope !5, !noalias !2
  %249 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %238, i64 -2
  %250 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %251 = bitcast %"class.sh::TIntermNode"** %250 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %251, align 8, !alias.scope !5, !noalias !2
  %252 = sub nuw nsw i64 -4, %234
  %253 = sub nuw nsw i64 -4, %234
  %254 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %231, i64 %252
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %232, i64 %253
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -1
  %257 = bitcast %"class.sh::TIntermNode"** %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 8, !alias.scope !2
  %259 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -2
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %261 = bitcast %"class.sh::TIntermNode"** %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8, !alias.scope !2
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -1
  %264 = bitcast %"class.sh::TIntermNode"** %263 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %264, align 8, !alias.scope !5, !noalias !2
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -2
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 -1
  %267 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %267, align 8, !alias.scope !5, !noalias !2
  %268 = add i64 %234, 8
  %269 = add i64 %235, -2
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %233, !llvm.loop !7

271:                                              ; preds = %233
  %272 = sub nuw nsw i64 -8, %234
  br label %273

273:                                              ; preds = %271, %216
  %274 = phi i64 [ 0, %216 ], [ %272, %271 ]
  %275 = icmp eq i64 %225, 0
  br i1 %275, label %293, label %276

276:                                              ; preds = %273
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %185, i64 -1
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %279 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 %274
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %278, i64 %274
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 -1
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !2
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %280, i64 -2
  %285 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %284, i64 -1
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  %287 = load <2 x i64>, <2 x i64>* %286, align 8, !alias.scope !2
  %288 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %279, i64 -1
  %289 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %289, align 8, !alias.scope !5, !noalias !2
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %279, i64 -2
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 -1
  %292 = bitcast %"class.sh::TIntermNode"** %291 to <2 x i64>*
  store <2 x i64> %287, <2 x i64>* %292, align 8, !alias.scope !5, !noalias !2
  br label %293

293:                                              ; preds = %273, %276
  %294 = icmp eq i64 %201, %217
  br i1 %294, label %365, label %295

295:                                              ; preds = %293, %203, %196
  %296 = phi %"class.sh::TIntermNode"** [ %185, %203 ], [ %185, %196 ], [ %219, %293 ]
  %297 = phi %"class.sh::TIntermNode"** [ %194, %203 ], [ %194, %196 ], [ %221, %293 ]
  %298 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %297, i64 -1
  %299 = ptrtoint %"class.sh::TIntermNode"** %298 to i64
  %300 = sub i64 %299, %193
  %301 = lshr i64 %300, 3
  %302 = add nuw nsw i64 %301, 1
  %303 = and i64 %302, 7
  %304 = icmp eq i64 %303, 0
  br i1 %304, label %316, label %305

305:                                              ; preds = %295, %305
  %306 = phi %"class.sh::TIntermNode"** [ %309, %305 ], [ %296, %295 ]
  %307 = phi %"class.sh::TIntermNode"** [ %310, %305 ], [ %297, %295 ]
  %308 = phi i64 [ %314, %305 ], [ %303, %295 ]
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %306, i64 -1
  %310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 -1
  %311 = bitcast %"class.sh::TIntermNode"** %310 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = bitcast %"class.sh::TIntermNode"** %309 to i64*
  store i64 %312, i64* %313, align 8
  %314 = add i64 %308, -1
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %316, label %305, !llvm.loop !9

316:                                              ; preds = %305, %295
  %317 = phi %"class.sh::TIntermNode"** [ undef, %295 ], [ %309, %305 ]
  %318 = phi %"class.sh::TIntermNode"** [ %296, %295 ], [ %309, %305 ]
  %319 = phi %"class.sh::TIntermNode"** [ %297, %295 ], [ %310, %305 ]
  %320 = icmp ult i64 %300, 56
  br i1 %320, label %365, label %321

321:                                              ; preds = %316, %321
  %322 = phi %"class.sh::TIntermNode"** [ %359, %321 ], [ %318, %316 ]
  %323 = phi %"class.sh::TIntermNode"** [ %360, %321 ], [ %319, %316 ]
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -1
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -1
  %326 = bitcast %"class.sh::TIntermNode"** %325 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = bitcast %"class.sh::TIntermNode"** %324 to i64*
  store i64 %327, i64* %328, align 8
  %329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -2
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -2
  %331 = bitcast %"class.sh::TIntermNode"** %330 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = bitcast %"class.sh::TIntermNode"** %329 to i64*
  store i64 %332, i64* %333, align 8
  %334 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -3
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -3
  %336 = bitcast %"class.sh::TIntermNode"** %335 to i64*
  %337 = load i64, i64* %336, align 8
  %338 = bitcast %"class.sh::TIntermNode"** %334 to i64*
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -4
  %340 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -4
  %341 = bitcast %"class.sh::TIntermNode"** %340 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = bitcast %"class.sh::TIntermNode"** %339 to i64*
  store i64 %342, i64* %343, align 8
  %344 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -5
  %345 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -5
  %346 = bitcast %"class.sh::TIntermNode"** %345 to i64*
  %347 = load i64, i64* %346, align 8
  %348 = bitcast %"class.sh::TIntermNode"** %344 to i64*
  store i64 %347, i64* %348, align 8
  %349 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -6
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -6
  %351 = bitcast %"class.sh::TIntermNode"** %350 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = bitcast %"class.sh::TIntermNode"** %349 to i64*
  store i64 %352, i64* %353, align 8
  %354 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -7
  %355 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -7
  %356 = bitcast %"class.sh::TIntermNode"** %355 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = bitcast %"class.sh::TIntermNode"** %354 to i64*
  store i64 %357, i64* %358, align 8
  %359 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %322, i64 -8
  %360 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -8
  %361 = bitcast %"class.sh::TIntermNode"** %360 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = bitcast %"class.sh::TIntermNode"** %359 to i64*
  store i64 %362, i64* %363, align 8
  %364 = icmp eq %"class.sh::TIntermNode"** %360, %192
  br i1 %364, label %365, label %321, !llvm.loop !11

365:                                              ; preds = %316, %321, %293, %182
  %366 = phi %"class.sh::TIntermNode"** [ %185, %182 ], [ %219, %293 ], [ %317, %316 ], [ %359, %321 ]
  %367 = ptrtoint %"class.sh::TIntermNode"** %366 to i64
  store i64 %367, i64* %158, align 8
  store i64 %190, i64* %157, align 8
  store i64 %187, i64* %167, align 8
  br label %368

368:                                              ; preds = %106, %86, %365, %150, %77, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh29InitializeUninitializedLocalsEPNS_9TCompilerEPNS_12TIntermBlockEibbPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, i32, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %7 = alloca %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", align 8
  %8 = bitcast %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 160, i1 false)
  %9 = zext i1 %3 to i8
  %10 = zext i1 %4 to i8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %7, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %11, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %5) #6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %7, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_125InitializeLocalsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %7, i64 0, i32 1
  store i32 %2, i32* %13, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %7, i64 0, i32 2
  store i8 %9, i8* %14, align 4
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %7, i64 0, i32 3
  store i8 %10, i8* %15, align 1
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %11) #6
  %16 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %17 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %11, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %16) #6
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %8) #6
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh19InitializeVariablesEPNS_9TCompilerEPNS_12TIntermBlockERKNSt3__16vectorINS_14ShaderVariableENS4_9allocatorIS6_EEEEPNS_12TSymbolTableEiRKNS4_3mapINS_10TExtensionENS_9TBehaviorENS4_4lessISF_EENS7_INS4_4pairIKSF_SG_EEEEEEbb(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.std::__1::vector.44"* nocapture readonly dereferenceable(24), %"class.sh::TSymbolTable"*, i32, %"class.std::__1::map.97"* dereferenceable(24), i1 zeroext, i1 zeroext) local_unnamed_addr #0 {
  %9 = alloca %"class.sh::ImmutableString", align 8
  %10 = alloca %"class.sh::TVector", align 8
  %11 = tail call %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"* %1) #6
  %12 = bitcast %"class.sh::TIntermBlock"* %11 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %13 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %13, i64 27
  %15 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %14, align 8
  %16 = tail call %"class.sh::TVector"* %15(%"class.sh::TIntermBlock"* %11) #6
  %17 = getelementptr inbounds %"class.std::__1::vector.44", %"class.std::__1::vector.44"* %2, i64 0, i32 0, i32 0
  %18 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %17, align 8
  %19 = getelementptr inbounds %"class.std::__1::vector.44", %"class.std::__1::vector.44"* %2, i64 0, i32 0, i32 1
  %20 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %19, align 8
  %21 = icmp eq %"struct.sh::ShaderVariable"* %18, %20
  br i1 %21, label %87, label %22

22:                                               ; preds = %8
  %23 = bitcast %"class.sh::ImmutableString"* %9 to i8*
  %24 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %9, i64 0, i32 0
  %25 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %9, i64 0, i32 1
  %26 = bitcast %"class.sh::TVector"* %10 to i8*
  %27 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %16, i64 0, i32 0
  %30 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %16, i64 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  br label %32

32:                                               ; preds = %84, %22
  %33 = phi %"struct.sh::ShaderVariable"* [ %18, %22 ], [ %85, %84 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #6
  %34 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %33, i64 0, i32 2
  %35 = bitcast %"class.std::__1::basic_string.53"* %34 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false) #6
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %44

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.std::__1::basic_string.53", %"class.std::__1::basic_string.53"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %47

44:                                               ; preds = %32
  %45 = bitcast %"class.std::__1::basic_string.53"* %34 to i8*
  %46 = zext i8 %37 to i64
  br label %47

47:                                               ; preds = %44, %39
  %48 = phi i8* [ %41, %39 ], [ %45, %44 ]
  %49 = phi i64 [ %43, %39 ], [ %46, %44 ]
  store i8* %48, i8** %24, align 8
  store i64 %49, i64* %25, align 8
  %50 = call zeroext i1 @_ZNK2sh14ShaderVariable9isBuiltInEv(%"struct.sh::ShaderVariable"* %33) #6
  br i1 %50, label %51, label %71

51:                                               ; preds = %47
  %52 = call %"class.sh::TIntermSymbol"* @_ZN2sh24ReferenceBuiltInVariableERKNS_15ImmutableStringERKNS_12TSymbolTableEi(%"class.sh::ImmutableString"* nonnull dereferenceable(16) %9, %"class.sh::TSymbolTable"* dereferenceable(1720) %3, i32 %4) #6
  %53 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %52, i64 0, i32 0
  %54 = bitcast %"class.sh::TIntermSymbol"* %52 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %55 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %54, align 8
  %56 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %55, i64 31
  %57 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %56, align 8
  %58 = call dereferenceable(184) %"class.sh::TType"* %57(%"class.sh::TIntermTyped"* %53) #6
  %59 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %58, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = icmp eq i32 %60, 28
  br i1 %61, label %62, label %74

62:                                               ; preds = %51
  %63 = call zeroext i1 @_ZN2sh18IsExtensionEnabledERKNSt3__13mapINS_10TExtensionENS_9TBehaviorENS0_4lessIS2_EENS0_9allocatorINS0_4pairIKS2_S3_EEEEEES2_(%"class.std::__1::map.97"* dereferenceable(24) %5, i8 zeroext 9) #6
  br i1 %63, label %74, label %64

64:                                               ; preds = %62
  %65 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %66 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %65, i64 240) #6
  %67 = bitcast i8* %66 to %"class.sh::TIntermBinary"*
  %68 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 0) #6
  %69 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %68, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %67, i8 zeroext 44, %"class.sh::TIntermTyped"* %53, %"class.sh::TIntermTyped"* %69) #6
  %70 = bitcast i8* %66 to %"class.sh::TIntermTyped"*
  br label %74

71:                                               ; preds = %47
  %72 = call %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* nonnull dereferenceable(16) %9, %"class.sh::TSymbolTable"* dereferenceable(1720) %3) #6
  %73 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %72, i64 0, i32 0
  br label %74

74:                                               ; preds = %71, %64, %62, %51
  %75 = phi %"class.sh::TIntermTyped"* [ %53, %62 ], [ %70, %64 ], [ %53, %51 ], [ %73, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 24, i1 false) #6
  call fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %75, i1 zeroext %6, i1 zeroext %7, %"class.sh::TVector"* nonnull %10, %"class.sh::TSymbolTable"* %3) #6
  %76 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %30, align 8
  %77 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 8
  %78 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %79 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector"* %29, %"class.sh::TIntermNode"** %76, %"class.sh::TIntermNode"** %77, %"class.sh::TIntermNode"** %78) #6
  %80 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 8
  %81 = icmp eq %"class.sh::TIntermNode"** %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %74
  %83 = ptrtoint %"class.sh::TIntermNode"** %80 to i64
  store i64 %83, i64* %31, align 8
  br label %84

84:                                               ; preds = %82, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #6
  %85 = getelementptr inbounds %"struct.sh::ShaderVariable", %"struct.sh::ShaderVariable"* %33, i64 1
  %86 = icmp eq %"struct.sh::ShaderVariable"* %85, %20
  br i1 %86, label %87, label %32

87:                                               ; preds = %84, %8
  %88 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %89 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %88) #6
  ret i1 %89
}

declare %"class.sh::TIntermBlock"* @_ZN2sh12FindMainBodyEPNS_12TIntermBlockE(%"class.sh::TIntermBlock"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh5TType16isNamelessStructEv(%"class.sh::TType"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_129AddArrayZeroInitStatementListEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"*, i1 zeroext, i1 zeroext, %"class.sh::TVector"*, %"class.sh::TSymbolTable"*) unnamed_addr #0 {
  %6 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %8, align 8
  %10 = tail call dereferenceable(184) %"class.sh::TType"* %9(%"class.sh::TIntermTyped"* %0) #6
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 10, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 10, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, -1
  %16 = getelementptr inbounds i32, i32* %12, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %5
  %20 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  br label %22

21:                                               ; preds = %22, %5
  ret void

22:                                               ; preds = %19, %22
  %23 = phi i32 [ 0, %19 ], [ %34, %22 ]
  %24 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %25 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %24, i64 240) #6
  %26 = bitcast i8* %25 to %"class.sh::TIntermBinary"*
  %27 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %20, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %27, i64 23
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %28, align 8
  %30 = tail call %"class.sh::TIntermTyped"* %29(%"class.sh::TIntermTyped"* %0) #6
  %31 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %23) #6
  %32 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %31, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %26, i8 zeroext 44, %"class.sh::TIntermTyped"* %30, %"class.sh::TIntermTyped"* %32) #6
  %33 = bitcast i8* %25 to %"class.sh::TIntermTyped"*
  tail call fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %33, i1 zeroext %1, i1 zeroext %2, %"class.sh::TVector"* %3, %"class.sh::TSymbolTable"* %4)
  %34 = add nuw i32 %23, 1
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %36 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %35, i64 31
  %37 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %36, align 8
  %38 = tail call dereferenceable(184) %"class.sh::TType"* %37(%"class.sh::TIntermTyped"* %0) #6
  %39 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %38, i64 0, i32 10, i32 0
  %40 = load i32*, i32** %39, align 8
  %41 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %38, i64 0, i32 10, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, -1
  %44 = getelementptr inbounds i32, i32* %40, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp ult i32 %34, %45
  br i1 %46, label %22, label %21
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_123AddArrayZeroInitForLoopEPKNS_12TIntermTypedEbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"*, i1 zeroext, %"class.sh::TVector"*, %"class.sh::TSymbolTable"*) unnamed_addr #0 {
  %5 = select i1 %1, %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE3ELNS_10TQualifierE0ELh1ELh1EEE to %"class.sh::TType"*), %"class.sh::TType"* bitcast ({ i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8 }, i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }* @_ZN2sh10StaticType7HelpersL8instanceILNS_10TBasicTypeE3ELNS_10TPrecisionE2ELNS_10TQualifierE0ELh1ELh1EEE to %"class.sh::TType"*)
  %6 = tail call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %3, %"class.sh::TType"* %5) #6
  %7 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %6) #6
  %8 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %6, i64 0, i32 1
  %9 = load %"class.sh::TType"*, %"class.sh::TType"** %8, align 8
  %10 = tail call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184) %9) #6
  %11 = tail call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %6, %"class.sh::TIntermTyped"* %10) #6
  %12 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %13 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %13, i64 31
  %15 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, align 8
  %16 = tail call dereferenceable(184) %"class.sh::TType"* %15(%"class.sh::TIntermTyped"* %0) #6
  %17 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 10, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %16, i64 0, i32 10, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, -1
  %22 = getelementptr inbounds i32, i32* %18, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %23) #6
  %25 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %26 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %25, i64 240) #6
  %27 = bitcast i8* %26 to %"class.sh::TIntermBinary"*
  %28 = bitcast %"class.sh::TIntermSymbol"* %7 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)***
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %29, i64 23
  %31 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %30, align 8
  %32 = tail call %"class.sh::TIntermTyped"* %31(%"class.sh::TIntermSymbol"* %7) #6
  %33 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %24, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %27, i8 zeroext 20, %"class.sh::TIntermTyped"* %32, %"class.sh::TIntermTyped"* %33) #6
  %34 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %35 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %34, i64 240) #6
  %36 = bitcast i8* %35 to %"class.sh::TIntermUnary"*
  %37 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %28, align 8
  %38 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %37, i64 23
  %39 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %38, align 8
  %40 = tail call %"class.sh::TIntermTyped"* %39(%"class.sh::TIntermSymbol"* %7) #6
  tail call void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"* %36, i8 zeroext 10, %"class.sh::TIntermTyped"* %40, %"class.sh::TFunction"* null) #6
  %41 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %42 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %41, i64 64) #6
  %43 = bitcast i8* %42 to %"class.sh::TIntermBlock"*
  %44 = bitcast i8* %42 to i32 (...)***
  %45 = getelementptr inbounds i8, i8* %42, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false) #6
  %46 = getelementptr inbounds i8, i8* %42, i64 24
  %47 = bitcast i8* %46 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %44, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %47, align 8
  %48 = getelementptr inbounds i8, i8* %42, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 25, i1 false) #6
  %49 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh12TIntermBlockE, i64 0, inrange i32 0, i64 29) to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**), align 8
  %50 = tail call %"class.sh::TVector"* %49(%"class.sh::TIntermBlock"* %43) #6
  %51 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %52 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %51, i64 240) #6
  %53 = bitcast i8* %52 to %"class.sh::TIntermBinary"*
  %54 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %55 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %54, align 8
  %56 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %55, i64 23
  %57 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %56, align 8
  %58 = tail call %"class.sh::TIntermTyped"* %57(%"class.sh::TIntermTyped"* %0) #6
  %59 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*** %28, align 8
  %60 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %59, i64 23
  %61 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)** %60, align 8
  %62 = tail call %"class.sh::TIntermTyped"* %61(%"class.sh::TIntermSymbol"* %7) #6
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %53, i8 zeroext 45, %"class.sh::TIntermTyped"* %58, %"class.sh::TIntermTyped"* %62) #6
  %63 = bitcast i8* %52 to %"class.sh::TIntermTyped"*
  tail call fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %63, i1 zeroext true, i1 zeroext %1, %"class.sh::TVector"* %50, %"class.sh::TSymbolTable"* %3)
  %64 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %65 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %64, i64 64) #6
  %66 = bitcast i8* %65 to %"class.sh::TIntermLoop"*
  %67 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %11, i64 0, i32 0
  %68 = bitcast i8* %26 to %"class.sh::TIntermTyped"*
  %69 = bitcast i8* %35 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh11TIntermLoopC1ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE(%"class.sh::TIntermLoop"* %66, i32 0, %"class.sh::TIntermNode"* %67, %"class.sh::TIntermTyped"* %68, %"class.sh::TIntermTyped"* %69, %"class.sh::TIntermBlock"* %43) #6
  %70 = ptrtoint i8* %65 to i64
  %71 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2, i64 0, i32 0, i32 0, i32 1
  %72 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %71, align 8
  %73 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %74 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %73, align 8
  %75 = icmp ult %"class.sh::TIntermNode"** %72, %74
  %76 = ptrtoint %"class.sh::TIntermNode"** %74 to i64
  br i1 %75, label %77, label %82

77:                                               ; preds = %4
  %78 = bitcast %"class.sh::TIntermNode"** %72 to i64*
  store i64 %70, i64* %78, align 8
  %79 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %72, i64 1
  %80 = ptrtoint %"class.sh::TIntermNode"** %79 to i64
  %81 = bitcast %"class.sh::TIntermNode"*** %71 to i64*
  store i64 %80, i64* %81, align 8
  br label %295

82:                                               ; preds = %4
  %83 = ptrtoint %"class.sh::TIntermNode"** %72 to i64
  %84 = bitcast %"class.sh::TIntermNode"*** %71 to i64*
  %85 = bitcast %"class.sh::TVector"* %2 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %83, %86
  %88 = ashr exact i64 %87, 3
  %89 = add nsw i64 %88, 1
  %90 = icmp ugt i64 %89, 2305843009213693951
  br i1 %90, label %91, label %93

91:                                               ; preds = %82
  %92 = bitcast %"class.sh::TVector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %92) #7
  unreachable

93:                                               ; preds = %82
  %94 = bitcast %"class.sh::TIntermNode"*** %73 to i64*
  %95 = sub i64 %76, %86
  %96 = ashr exact i64 %95, 3
  %97 = icmp ult i64 %96, 1152921504606846975
  br i1 %97, label %98, label %103

98:                                               ; preds = %93
  %99 = ashr exact i64 %95, 2
  %100 = icmp ult i64 %99, %89
  %101 = select i1 %100, i64 %89, i64 %99
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %109, label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %101, %98 ], [ 2305843009213693951, %93 ]
  %105 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %106 = shl i64 %104, 3
  %107 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %105, i64 %106) #6
  %108 = bitcast i8* %107 to %"class.sh::TIntermNode"**
  br label %109

109:                                              ; preds = %103, %98
  %110 = phi i64 [ %104, %103 ], [ 0, %98 ]
  %111 = phi %"class.sh::TIntermNode"** [ %108, %103 ], [ null, %98 ]
  %112 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 %88
  %113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 %110
  %114 = ptrtoint %"class.sh::TIntermNode"** %113 to i64
  %115 = bitcast %"class.sh::TIntermNode"** %112 to i64*
  store i64 %70, i64* %115, align 8
  %116 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 1
  %117 = ptrtoint %"class.sh::TIntermNode"** %116 to i64
  %118 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %2, i64 0, i32 0, i32 0, i32 0
  %119 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %118, align 8
  %120 = ptrtoint %"class.sh::TIntermNode"** %119 to i64
  %121 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %71, align 8
  %122 = icmp eq %"class.sh::TIntermNode"** %121, %119
  br i1 %122, label %292, label %123

123:                                              ; preds = %109
  %124 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  %125 = ptrtoint %"class.sh::TIntermNode"** %124 to i64
  %126 = sub i64 %125, %120
  %127 = lshr i64 %126, 3
  %128 = add nuw nsw i64 %127, 1
  %129 = icmp ult i64 %128, 4
  br i1 %129, label %222, label %130

130:                                              ; preds = %123
  %131 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  %132 = ptrtoint %"class.sh::TIntermNode"** %131 to i64
  %133 = sub i64 %132, %120
  %134 = lshr i64 %133, 3
  %135 = xor i64 %134, -1
  %136 = add nsw i64 %88, %135
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %111, i64 %136
  %138 = xor i64 %134, -1
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 %138
  %140 = icmp ult %"class.sh::TIntermNode"** %137, %121
  %141 = icmp ult %"class.sh::TIntermNode"** %139, %112
  %142 = and i1 %140, %141
  br i1 %142, label %222, label %143

143:                                              ; preds = %130
  %144 = and i64 %128, 4611686018427387900
  %145 = sub nsw i64 0, %144
  %146 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 %145
  %147 = sub nsw i64 0, %144
  %148 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 %147
  %149 = add nsw i64 %144, -4
  %150 = lshr exact i64 %149, 2
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 1
  %153 = icmp eq i64 %149, 0
  br i1 %153, label %200, label %154

154:                                              ; preds = %143
  %155 = sub nuw nsw i64 %151, %152
  %156 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 -1
  %157 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  %158 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 -1
  %159 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  br label %160

160:                                              ; preds = %160, %154
  %161 = phi i64 [ 0, %154 ], [ %195, %160 ]
  %162 = phi i64 [ %155, %154 ], [ %196, %160 ]
  %163 = sub i64 0, %161
  %164 = sub i64 0, %161
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 %163
  %166 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 %164
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, i64 -1
  %168 = bitcast %"class.sh::TIntermNode"** %167 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 8, !alias.scope !12
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, i64 -2
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 -1
  %172 = bitcast %"class.sh::TIntermNode"** %171 to <2 x i64>*
  %173 = load <2 x i64>, <2 x i64>* %172, align 8, !alias.scope !12
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %175 = bitcast %"class.sh::TIntermNode"** %174 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %175, align 8, !alias.scope !15, !noalias !12
  %176 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -2
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %176, i64 -1
  %178 = bitcast %"class.sh::TIntermNode"** %177 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %178, align 8, !alias.scope !15, !noalias !12
  %179 = sub nuw nsw i64 -4, %161
  %180 = sub nuw nsw i64 -4, %161
  %181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 %179
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %159, i64 %180
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %184 = bitcast %"class.sh::TIntermNode"** %183 to <2 x i64>*
  %185 = load <2 x i64>, <2 x i64>* %184, align 8, !alias.scope !12
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -2
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %186, i64 -1
  %188 = bitcast %"class.sh::TIntermNode"** %187 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %188, align 8, !alias.scope !12
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 -1
  %191 = bitcast %"class.sh::TIntermNode"** %190 to <2 x i64>*
  store <2 x i64> %185, <2 x i64>* %191, align 8, !alias.scope !15, !noalias !12
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 -2
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %192, i64 -1
  %194 = bitcast %"class.sh::TIntermNode"** %193 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %194, align 8, !alias.scope !15, !noalias !12
  %195 = add i64 %161, 8
  %196 = add i64 %162, -2
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %160, !llvm.loop !17

198:                                              ; preds = %160
  %199 = sub nuw nsw i64 -8, %161
  br label %200

200:                                              ; preds = %198, %143
  %201 = phi i64 [ 0, %143 ], [ %199, %198 ]
  %202 = icmp eq i64 %152, 0
  br i1 %202, label %220, label %203

203:                                              ; preds = %200
  %204 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %112, i64 -1
  %205 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %121, i64 -1
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 %201
  %207 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 %201
  %208 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -1
  %209 = bitcast %"class.sh::TIntermNode"** %208 to <2 x i64>*
  %210 = load <2 x i64>, <2 x i64>* %209, align 8, !alias.scope !12
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 -2
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 -1
  %213 = bitcast %"class.sh::TIntermNode"** %212 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 8, !alias.scope !12
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  %216 = bitcast %"class.sh::TIntermNode"** %215 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %216, align 8, !alias.scope !15, !noalias !12
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -2
  %218 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 -1
  %219 = bitcast %"class.sh::TIntermNode"** %218 to <2 x i64>*
  store <2 x i64> %214, <2 x i64>* %219, align 8, !alias.scope !15, !noalias !12
  br label %220

220:                                              ; preds = %200, %203
  %221 = icmp eq i64 %128, %144
  br i1 %221, label %292, label %222

222:                                              ; preds = %220, %130, %123
  %223 = phi %"class.sh::TIntermNode"** [ %112, %130 ], [ %112, %123 ], [ %146, %220 ]
  %224 = phi %"class.sh::TIntermNode"** [ %121, %130 ], [ %121, %123 ], [ %148, %220 ]
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %224, i64 -1
  %226 = ptrtoint %"class.sh::TIntermNode"** %225 to i64
  %227 = sub i64 %226, %120
  %228 = lshr i64 %227, 3
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 7
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %222, %232
  %233 = phi %"class.sh::TIntermNode"** [ %236, %232 ], [ %223, %222 ]
  %234 = phi %"class.sh::TIntermNode"** [ %237, %232 ], [ %224, %222 ]
  %235 = phi i64 [ %241, %232 ], [ %230, %222 ]
  %236 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %233, i64 -1
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %234, i64 -1
  %238 = bitcast %"class.sh::TIntermNode"** %237 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = bitcast %"class.sh::TIntermNode"** %236 to i64*
  store i64 %239, i64* %240, align 8
  %241 = add i64 %235, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !18

243:                                              ; preds = %232, %222
  %244 = phi %"class.sh::TIntermNode"** [ undef, %222 ], [ %236, %232 ]
  %245 = phi %"class.sh::TIntermNode"** [ %223, %222 ], [ %236, %232 ]
  %246 = phi %"class.sh::TIntermNode"** [ %224, %222 ], [ %237, %232 ]
  %247 = icmp ult i64 %227, 56
  br i1 %247, label %292, label %248

248:                                              ; preds = %243, %248
  %249 = phi %"class.sh::TIntermNode"** [ %286, %248 ], [ %245, %243 ]
  %250 = phi %"class.sh::TIntermNode"** [ %287, %248 ], [ %246, %243 ]
  %251 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -1
  %252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -1
  %253 = bitcast %"class.sh::TIntermNode"** %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = bitcast %"class.sh::TIntermNode"** %251 to i64*
  store i64 %254, i64* %255, align 8
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -2
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -2
  %258 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  store i64 %259, i64* %260, align 8
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -3
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -3
  %263 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = bitcast %"class.sh::TIntermNode"** %261 to i64*
  store i64 %264, i64* %265, align 8
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -4
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -4
  %268 = bitcast %"class.sh::TIntermNode"** %267 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = bitcast %"class.sh::TIntermNode"** %266 to i64*
  store i64 %269, i64* %270, align 8
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -5
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -5
  %273 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast %"class.sh::TIntermNode"** %271 to i64*
  store i64 %274, i64* %275, align 8
  %276 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -6
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -6
  %278 = bitcast %"class.sh::TIntermNode"** %277 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = bitcast %"class.sh::TIntermNode"** %276 to i64*
  store i64 %279, i64* %280, align 8
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -7
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -7
  %283 = bitcast %"class.sh::TIntermNode"** %282 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = bitcast %"class.sh::TIntermNode"** %281 to i64*
  store i64 %284, i64* %285, align 8
  %286 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %249, i64 -8
  %287 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %250, i64 -8
  %288 = bitcast %"class.sh::TIntermNode"** %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = bitcast %"class.sh::TIntermNode"** %286 to i64*
  store i64 %289, i64* %290, align 8
  %291 = icmp eq %"class.sh::TIntermNode"** %287, %119
  br i1 %291, label %292, label %248, !llvm.loop !19

292:                                              ; preds = %243, %248, %220, %109
  %293 = phi %"class.sh::TIntermNode"** [ %112, %109 ], [ %146, %220 ], [ %244, %243 ], [ %286, %248 ]
  %294 = ptrtoint %"class.sh::TIntermNode"** %293 to i64
  store i64 %294, i64* %85, align 8
  store i64 %117, i64* %84, align 8
  store i64 %114, i64* %94, align 8
  br label %295

295:                                              ; preds = %77, %292
  ret void
}

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #2

declare %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184)) local_unnamed_addr #2

declare void @_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #2

declare void @_ZN2sh11TIntermLoopC1ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE(%"class.sh::TIntermLoop"*, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_125InitializeLocalsTraverserD0Ev(%"class.sh::(anonymous namespace)::InitializeLocalsTraverser"*) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_125InitializeLocalsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::InitializeLocalsTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector", align 8
  %5 = alloca %"class.sh::TVector", align 8
  %6 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %7 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %7, i64 27
  %9 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %8, align 8
  %10 = tail call %"class.sh::TVector"* %9(%"class.sh::TIntermDeclaration"* %2) #6
  %11 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %10, i64 0, i32 0, i32 0, i32 1
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %15 = icmp eq %"class.sh::TIntermNode"** %12, %14
  br i1 %15, label %32, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 0
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 0, i32 6
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 1
  %20 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %2, i64 0, i32 0
  %21 = bitcast %"class.sh::TVector"* %4 to i8*
  %22 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %4, i64 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 2
  %25 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 3
  %26 = getelementptr inbounds %"class.sh::(anonymous namespace)::InitializeLocalsTraverser", %"class.sh::(anonymous namespace)::InitializeLocalsTraverser"* %0, i64 0, i32 0, i32 8
  %27 = bitcast %"class.sh::TVector"* %5 to i8*
  %28 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 1
  %30 = bitcast %"class.sh::TIntermNode"*** %29 to i64*
  %31 = bitcast %"class.sh::TIntermNode"*** %23 to i64*
  br label %33

32:                                               ; preds = %113, %3
  ret i1 false

33:                                               ; preds = %16, %113
  %34 = phi %"class.sh::TIntermNode"** [ %12, %16 ], [ %114, %113 ]
  %35 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, align 8
  %36 = load i8, i8* %18, align 4, !range !20
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %113

38:                                               ; preds = %33
  %39 = bitcast %"class.sh::TIntermNode"* %35 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %40 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %39, align 8
  %41 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %40, i64 13
  %42 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %41, align 8
  %43 = call %"class.sh::TIntermBinary"* %42(%"class.sh::TIntermNode"* %35) #6
  %44 = icmp eq %"class.sh::TIntermBinary"* %43, null
  br i1 %44, label %45, label %113

45:                                               ; preds = %38
  %46 = bitcast %"class.sh::TIntermNode"* %35 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %47 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %47, i64 19
  %49 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %48, align 8
  %50 = call %"class.sh::TIntermSymbol"* %49(%"class.sh::TIntermNode"* %35) #6
  %51 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %50, i64 0, i32 1
  %52 = bitcast %"class.sh::TVariable"** %51 to %"class.sh::TSymbol"**
  %53 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %52, align 8
  %54 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %53, i64 0, i32 2
  %55 = load i8, i8* %54, align 4
  %56 = icmp eq i8 %55, 3
  br i1 %56, label %113, label %57

57:                                               ; preds = %45
  %58 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %50, i64 0, i32 0
  %59 = bitcast %"class.sh::TIntermSymbol"* %50 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %60 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %59, align 8
  %61 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %60, i64 31
  %62 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %61, align 8
  %63 = call dereferenceable(184) %"class.sh::TType"* %62(%"class.sh::TIntermTyped"* %58) #6
  %64 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %63, i64 0, i32 10, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %74

67:                                               ; preds = %57
  %68 = bitcast %"class.sh::TIntermSymbol"* %50 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  %69 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %68, align 8
  %70 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %69, i64 31
  %71 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %70, align 8
  %72 = call dereferenceable(184) %"class.sh::TType"* %71(%"class.sh::TIntermSymbol"* %50) #6
  %73 = call zeroext i1 @_ZNK2sh5TType27isStructureContainingArraysEv(%"class.sh::TType"* %72) #6
  br i1 %73, label %74, label %79

74:                                               ; preds = %57, %67
  %75 = load i32, i32* %19, align 8
  %76 = icmp eq i32 %75, 100
  br i1 %76, label %86, label %77

77:                                               ; preds = %74
  %78 = bitcast %"class.sh::TIntermSymbol"* %50 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  br label %79

79:                                               ; preds = %77, %67
  %80 = phi %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** [ %78, %77 ], [ %68, %67 ]
  %81 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %80, align 8
  %82 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %81, i64 31
  %83 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %82, align 8
  %84 = call dereferenceable(184) %"class.sh::TType"* %83(%"class.sh::TIntermSymbol"* %50) #6
  %85 = call zeroext i1 @_ZNK2sh5TType16isNamelessStructEv(%"class.sh::TType"* %84) #6
  br i1 %85, label %86, label %102

86:                                               ; preds = %79, %74
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 24, i1 false) #6
  %87 = load i8, i8* %24, align 4, !range !20
  %88 = icmp ne i8 %87, 0
  %89 = load i8, i8* %25, align 1, !range !20
  %90 = icmp ne i8 %89, 0
  %91 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %26, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_119AddZeroInitSequenceEPKNS_12TIntermTypedEbbPNS_7TVectorIPNS_11TIntermNodeEEEPNS_12TSymbolTableE(%"class.sh::TIntermTyped"* %58, i1 zeroext %88, i1 zeroext %90, %"class.sh::TVector"* nonnull %4, %"class.sh::TSymbolTable"* %91) #6
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false) #6
  call void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEES6_(%"class.sh::TIntermTraverser"* %17, %"class.sh::TVector"* nonnull dereferenceable(24) %5, %"class.sh::TVector"* nonnull dereferenceable(24) %4) #6
  %92 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %93 = icmp eq %"class.sh::TIntermNode"** %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %86
  %95 = ptrtoint %"class.sh::TIntermNode"** %92 to i64
  store i64 %95, i64* %30, align 8
  br label %96

96:                                               ; preds = %86, %94
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #6
  %97 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %98 = icmp eq %"class.sh::TIntermNode"** %97, null
  br i1 %98, label %101, label %99

99:                                               ; preds = %96
  %100 = ptrtoint %"class.sh::TIntermNode"** %97 to i64
  store i64 %100, i64* %31, align 8
  br label %101

101:                                              ; preds = %96, %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #6
  br label %113

102:                                              ; preds = %79
  %103 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %104 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %103, i64 240) #6
  %105 = bitcast i8* %104 to %"class.sh::TIntermBinary"*
  %106 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %80, align 8
  %107 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %106, i64 31
  %108 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %107, align 8
  %109 = call dereferenceable(184) %"class.sh::TType"* %108(%"class.sh::TIntermSymbol"* %50) #6
  %110 = call %"class.sh::TIntermTyped"* @_ZN2sh14CreateZeroNodeERKNS_5TTypeE(%"class.sh::TType"* dereferenceable(184) %109) #6
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %105, i8 zeroext -117, %"class.sh::TIntermTyped"* %58, %"class.sh::TIntermTyped"* %110) #6
  %111 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %50, i64 0, i32 0, i32 0
  %112 = bitcast i8* %104 to %"class.sh::TIntermNode"*
  call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %17, %"class.sh::TIntermNode"* %20, %"class.sh::TIntermNode"* %111, %"class.sh::TIntermNode"* %112, i32 0) #6
  br label %113

113:                                              ; preds = %45, %33, %38, %101, %102
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 1
  %115 = icmp eq %"class.sh::TIntermNode"** %114, %14
  br i1 %115, label %32, label %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser29insertStatementsInParentBlockERKNS_7TVectorIPNS_11TIntermNodeEEES6_(%"class.sh::TIntermTraverser"*, %"class.sh::TVector"* dereferenceable(24), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh14ShaderVariable9isBuiltInEv(%"struct.sh::ShaderVariable"*) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh24ReferenceBuiltInVariableERKNS_15ImmutableStringERKNS_12TSymbolTableEi(%"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #2

declare zeroext i1 @_ZN2sh18IsExtensionEnabledERKNSt3__13mapINS_10TExtensionENS_9TBehaviorENS0_4lessIS2_EENS0_9allocatorINS0_4pairIKS2_S3_EEEEEES2_(%"class.std::__1::map.97"* dereferenceable(24), i8 zeroext) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh23ReferenceGlobalVariableERKNS_15ImmutableStringERKNS_12TSymbolTableE(%"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TSymbolTable"* dereferenceable(1720)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPS3_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISC_E9referenceEEE5valueESA_E4typeENS8_IPKS3_EESC_SC_(%"class.std::__1::vector"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %7 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint %"class.sh::TIntermNode"** %3 to i64
  %10 = sub i64 %9, %7
  %11 = ashr exact i64 %10, 3
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %834

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = ptrtoint %"class.sh::TIntermNode"** %18 to i64
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp sgt i64 %11, %21
  %23 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  br i1 %22, label %359, label %24

24:                                               ; preds = %13
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 3
  %27 = icmp sgt i64 %11, %26
  br i1 %27, label %28, label %213

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %26
  %30 = icmp eq %"class.sh::TIntermNode"** %29, %3
  br i1 %30, label %208, label %31

31:                                               ; preds = %28
  %32 = xor i64 %26, -1
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = sub i64 %34, %7
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %134, label %39

39:                                               ; preds = %31
  %40 = xor i64 %26, -1
  %41 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %40
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = sub i64 %42, %7
  %44 = lshr i64 %43, 3
  %45 = add nuw nsw i64 %44, 1
  %46 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %45
  %47 = add nsw i64 %26, %44
  %48 = add nsw i64 %47, 1
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %48
  %50 = icmp ult %"class.sh::TIntermNode"** %18, %49
  %51 = icmp ult %"class.sh::TIntermNode"** %29, %46
  %52 = and i1 %50, %51
  br i1 %52, label %134, label %53

53:                                               ; preds = %39
  %54 = and i64 %37, 4611686018427387900
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %54
  %56 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %54
  %57 = add nsw i64 %54, -4
  %58 = lshr exact i64 %57, 2
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 3
  %61 = icmp ult i64 %57, 12
  br i1 %61, label %113, label %62

62:                                               ; preds = %53
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %110, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %111, %64 ]
  %67 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %65
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %65
  %69 = bitcast %"class.sh::TIntermNode"** %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !21
  %71 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 2
  %72 = bitcast %"class.sh::TIntermNode"** %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 8, !alias.scope !21
  %74 = bitcast %"class.sh::TIntermNode"** %67 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 8, !alias.scope !24, !noalias !21
  %75 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %67, i64 2
  %76 = bitcast %"class.sh::TIntermNode"** %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 8, !alias.scope !24, !noalias !21
  %77 = or i64 %65, 4
  %78 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %77
  %80 = bitcast %"class.sh::TIntermNode"** %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !21
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 2
  %83 = bitcast %"class.sh::TIntermNode"** %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 8, !alias.scope !21
  %85 = bitcast %"class.sh::TIntermNode"** %78 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %85, align 8, !alias.scope !24, !noalias !21
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %78, i64 2
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %87, align 8, !alias.scope !24, !noalias !21
  %88 = or i64 %65, 8
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %88
  %90 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %88
  %91 = bitcast %"class.sh::TIntermNode"** %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !21
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %90, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !21
  %96 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 8, !alias.scope !24, !noalias !21
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 2
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %98, align 8, !alias.scope !24, !noalias !21
  %99 = or i64 %65, 12
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %99
  %101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %99
  %102 = bitcast %"class.sh::TIntermNode"** %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !21
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %101, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 8, !alias.scope !21
  %107 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 8, !alias.scope !24, !noalias !21
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %100, i64 2
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 8, !alias.scope !24, !noalias !21
  %110 = add i64 %65, 16
  %111 = add i64 %66, -4
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %64, !llvm.loop !26

113:                                              ; preds = %64, %53
  %114 = phi i64 [ 0, %53 ], [ %110, %64 ]
  %115 = icmp eq i64 %60, 0
  br i1 %115, label %132, label %116

116:                                              ; preds = %113, %116
  %117 = phi i64 [ %129, %116 ], [ %114, %113 ]
  %118 = phi i64 [ %130, %116 ], [ %60, %113 ]
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %117
  %120 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %29, i64 %117
  %121 = bitcast %"class.sh::TIntermNode"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !21
  %123 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %120, i64 2
  %124 = bitcast %"class.sh::TIntermNode"** %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8, !alias.scope !21
  %126 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %126, align 8, !alias.scope !24, !noalias !21
  %127 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 2
  %128 = bitcast %"class.sh::TIntermNode"** %127 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %128, align 8, !alias.scope !24, !noalias !21
  %129 = add i64 %117, 4
  %130 = add i64 %118, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %116, !llvm.loop !27

132:                                              ; preds = %116, %113
  %133 = icmp eq i64 %37, %54
  br i1 %133, label %205, label %134

134:                                              ; preds = %132, %39, %31
  %135 = phi %"class.sh::TIntermNode"** [ %18, %39 ], [ %18, %31 ], [ %55, %132 ]
  %136 = phi %"class.sh::TIntermNode"** [ %29, %39 ], [ %29, %31 ], [ %56, %132 ]
  %137 = ptrtoint %"class.sh::TIntermNode"** %136 to i64
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %139 = ptrtoint %"class.sh::TIntermNode"** %138 to i64
  %140 = sub i64 %139, %137
  %141 = lshr i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 7
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %134, %145
  %146 = phi %"class.sh::TIntermNode"** [ %153, %145 ], [ %135, %134 ]
  %147 = phi %"class.sh::TIntermNode"** [ %152, %145 ], [ %136, %134 ]
  %148 = phi i64 [ %154, %145 ], [ %143, %134 ]
  %149 = bitcast %"class.sh::TIntermNode"** %146 to i64*
  %150 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %147, i64 1
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 1
  %154 = add i64 %148, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %145, !llvm.loop !28

156:                                              ; preds = %145, %134
  %157 = phi %"class.sh::TIntermNode"** [ undef, %134 ], [ %153, %145 ]
  %158 = phi %"class.sh::TIntermNode"** [ %135, %134 ], [ %153, %145 ]
  %159 = phi %"class.sh::TIntermNode"** [ %136, %134 ], [ %152, %145 ]
  %160 = icmp ult i64 %140, 56
  br i1 %160, label %205, label %161

161:                                              ; preds = %156, %161
  %162 = phi %"class.sh::TIntermNode"** [ %203, %161 ], [ %158, %156 ]
  %163 = phi %"class.sh::TIntermNode"** [ %202, %161 ], [ %159, %156 ]
  %164 = bitcast %"class.sh::TIntermNode"** %162 to i64*
  %165 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  %166 = load i64, i64* %165, align 8
  store i64 %166, i64* %164, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 1
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 1
  %169 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  %170 = bitcast %"class.sh::TIntermNode"** %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 2
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 2
  %174 = bitcast %"class.sh::TIntermNode"** %173 to i64*
  %175 = bitcast %"class.sh::TIntermNode"** %172 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 3
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 3
  %179 = bitcast %"class.sh::TIntermNode"** %178 to i64*
  %180 = bitcast %"class.sh::TIntermNode"** %177 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %179, align 8
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 4
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 4
  %184 = bitcast %"class.sh::TIntermNode"** %183 to i64*
  %185 = bitcast %"class.sh::TIntermNode"** %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %184, align 8
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 5
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 5
  %189 = bitcast %"class.sh::TIntermNode"** %188 to i64*
  %190 = bitcast %"class.sh::TIntermNode"** %187 to i64*
  %191 = load i64, i64* %190, align 8
  store i64 %191, i64* %189, align 8
  %192 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 6
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 6
  %194 = bitcast %"class.sh::TIntermNode"** %193 to i64*
  %195 = bitcast %"class.sh::TIntermNode"** %192 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 7
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 7
  %199 = bitcast %"class.sh::TIntermNode"** %198 to i64*
  %200 = bitcast %"class.sh::TIntermNode"** %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %199, align 8
  %202 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %163, i64 8
  %203 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %162, i64 8
  %204 = icmp eq %"class.sh::TIntermNode"** %202, %3
  br i1 %204, label %205, label %161, !llvm.loop !29

205:                                              ; preds = %156, %161, %132
  %206 = phi %"class.sh::TIntermNode"** [ %55, %132 ], [ %157, %156 ], [ %203, %161 ]
  %207 = ptrtoint %"class.sh::TIntermNode"** %206 to i64
  br label %208

208:                                              ; preds = %205, %28
  %209 = phi i64 [ %19, %28 ], [ %207, %205 ]
  store i64 %209, i64* %23, align 8
  %210 = icmp sgt i64 %25, 0
  br i1 %210, label %211, label %834

211:                                              ; preds = %208
  %212 = inttoptr i64 %209 to %"class.sh::TIntermNode"**
  br label %213

213:                                              ; preds = %211, %24
  %214 = phi i64 [ %209, %211 ], [ %19, %24 ]
  %215 = phi %"class.sh::TIntermNode"** [ %212, %211 ], [ %18, %24 ]
  %216 = phi %"class.sh::TIntermNode"** [ %29, %211 ], [ %3, %24 ]
  %217 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %11
  %218 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %219 = sub i64 %214, %218
  %220 = ashr exact i64 %219, 3
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %220
  %222 = icmp ult %"class.sh::TIntermNode"** %221, %18
  br i1 %222, label %223, label %336

223:                                              ; preds = %213
  %224 = sub nsw i64 0, %220
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %224
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i8*
  %227 = xor i64 %6, -1
  %228 = getelementptr i8, i8* %226, i64 %227
  %229 = ptrtoint i8* %228 to i64
  %230 = lshr i64 %229, 3
  %231 = add nuw nsw i64 %230, 1
  %232 = icmp ult i64 %231, 4
  br i1 %232, label %233, label %236

233:                                              ; preds = %331, %236, %223
  %234 = phi %"class.sh::TIntermNode"** [ %215, %236 ], [ %215, %223 ], [ %254, %331 ]
  %235 = phi %"class.sh::TIntermNode"** [ %221, %236 ], [ %221, %223 ], [ %255, %331 ]
  br label %344

236:                                              ; preds = %223
  %237 = sub nsw i64 0, %220
  %238 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %237
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i8*
  %240 = xor i64 %6, -1
  %241 = getelementptr i8, i8* %239, i64 %240
  %242 = ptrtoint i8* %241 to i64
  %243 = lshr i64 %242, 3
  %244 = add nuw nsw i64 %243, 1
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %244
  %246 = add nsw i64 %220, %243
  %247 = add nsw i64 %246, 1
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %247
  %249 = icmp ult %"class.sh::TIntermNode"** %215, %248
  %250 = icmp ult %"class.sh::TIntermNode"** %221, %245
  %251 = and i1 %249, %250
  br i1 %251, label %233, label %252

252:                                              ; preds = %236
  %253 = and i64 %231, 4611686018427387900
  %254 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %253
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %253
  %256 = add nsw i64 %253, -4
  %257 = lshr exact i64 %256, 2
  %258 = add nuw nsw i64 %257, 1
  %259 = and i64 %258, 3
  %260 = icmp ult i64 %256, 12
  br i1 %260, label %312, label %261

261:                                              ; preds = %252
  %262 = sub nsw i64 %258, %259
  br label %263

263:                                              ; preds = %263, %261
  %264 = phi i64 [ 0, %261 ], [ %309, %263 ]
  %265 = phi i64 [ %262, %261 ], [ %310, %263 ]
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %264
  %267 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %264
  %268 = bitcast %"class.sh::TIntermNode"** %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 8, !alias.scope !30
  %270 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %267, i64 2
  %271 = bitcast %"class.sh::TIntermNode"** %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 8, !alias.scope !30
  %273 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 8, !alias.scope !33, !noalias !30
  %274 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %266, i64 2
  %275 = bitcast %"class.sh::TIntermNode"** %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 8, !alias.scope !33, !noalias !30
  %276 = or i64 %264, 4
  %277 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %276
  %278 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %276
  %279 = bitcast %"class.sh::TIntermNode"** %278 to <2 x i64>*
  %280 = load <2 x i64>, <2 x i64>* %279, align 8, !alias.scope !30
  %281 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %278, i64 2
  %282 = bitcast %"class.sh::TIntermNode"** %281 to <2 x i64>*
  %283 = load <2 x i64>, <2 x i64>* %282, align 8, !alias.scope !30
  %284 = bitcast %"class.sh::TIntermNode"** %277 to <2 x i64>*
  store <2 x i64> %280, <2 x i64>* %284, align 8, !alias.scope !33, !noalias !30
  %285 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %277, i64 2
  %286 = bitcast %"class.sh::TIntermNode"** %285 to <2 x i64>*
  store <2 x i64> %283, <2 x i64>* %286, align 8, !alias.scope !33, !noalias !30
  %287 = or i64 %264, 8
  %288 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %287
  %289 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %287
  %290 = bitcast %"class.sh::TIntermNode"** %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 8, !alias.scope !30
  %292 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 2
  %293 = bitcast %"class.sh::TIntermNode"** %292 to <2 x i64>*
  %294 = load <2 x i64>, <2 x i64>* %293, align 8, !alias.scope !30
  %295 = bitcast %"class.sh::TIntermNode"** %288 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %295, align 8, !alias.scope !33, !noalias !30
  %296 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %288, i64 2
  %297 = bitcast %"class.sh::TIntermNode"** %296 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %297, align 8, !alias.scope !33, !noalias !30
  %298 = or i64 %264, 12
  %299 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %298
  %300 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %298
  %301 = bitcast %"class.sh::TIntermNode"** %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 8, !alias.scope !30
  %303 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %300, i64 2
  %304 = bitcast %"class.sh::TIntermNode"** %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 8, !alias.scope !30
  %306 = bitcast %"class.sh::TIntermNode"** %299 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 8, !alias.scope !33, !noalias !30
  %307 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %299, i64 2
  %308 = bitcast %"class.sh::TIntermNode"** %307 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %308, align 8, !alias.scope !33, !noalias !30
  %309 = add i64 %264, 16
  %310 = add i64 %265, -4
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %263, !llvm.loop !35

312:                                              ; preds = %263, %252
  %313 = phi i64 [ 0, %252 ], [ %309, %263 ]
  %314 = icmp eq i64 %259, 0
  br i1 %314, label %331, label %315

315:                                              ; preds = %312, %315
  %316 = phi i64 [ %328, %315 ], [ %313, %312 ]
  %317 = phi i64 [ %329, %315 ], [ %259, %312 ]
  %318 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %316
  %319 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 %316
  %320 = bitcast %"class.sh::TIntermNode"** %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 8, !alias.scope !30
  %322 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %319, i64 2
  %323 = bitcast %"class.sh::TIntermNode"** %322 to <2 x i64>*
  %324 = load <2 x i64>, <2 x i64>* %323, align 8, !alias.scope !30
  %325 = bitcast %"class.sh::TIntermNode"** %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %325, align 8, !alias.scope !33, !noalias !30
  %326 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %318, i64 2
  %327 = bitcast %"class.sh::TIntermNode"** %326 to <2 x i64>*
  store <2 x i64> %324, <2 x i64>* %327, align 8, !alias.scope !33, !noalias !30
  %328 = add i64 %316, 4
  %329 = add i64 %317, -1
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %331, label %315, !llvm.loop !36

331:                                              ; preds = %315, %312
  %332 = icmp eq i64 %231, %253
  br i1 %332, label %333, label %233

333:                                              ; preds = %344, %331
  %334 = phi %"class.sh::TIntermNode"** [ %254, %331 ], [ %351, %344 ]
  %335 = ptrtoint %"class.sh::TIntermNode"** %334 to i64
  br label %336

336:                                              ; preds = %333, %213
  %337 = phi i64 [ %335, %333 ], [ %214, %213 ]
  store i64 %337, i64* %23, align 8
  %338 = icmp eq i64 %219, 0
  br i1 %338, label %353, label %339

339:                                              ; preds = %336
  %340 = sub nsw i64 0, %220
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 %340
  %342 = bitcast %"class.sh::TIntermNode"** %341 to i8*
  %343 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %342, i8* align 8 %343, i64 %219, i1 false) #6
  br label %353

344:                                              ; preds = %233, %344
  %345 = phi %"class.sh::TIntermNode"** [ %351, %344 ], [ %234, %233 ]
  %346 = phi %"class.sh::TIntermNode"** [ %350, %344 ], [ %235, %233 ]
  %347 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast %"class.sh::TIntermNode"** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 1
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 1
  %352 = icmp ult %"class.sh::TIntermNode"** %350, %18
  br i1 %352, label %344, label %333, !llvm.loop !37

353:                                              ; preds = %336, %339
  %354 = ptrtoint %"class.sh::TIntermNode"** %216 to i64
  %355 = sub i64 %354, %7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %834, label %357

357:                                              ; preds = %353
  %358 = bitcast %"class.sh::TIntermNode"** %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %358, i64 %355, i1 false) #6
  br label %834

359:                                              ; preds = %13
  %360 = bitcast %"class.std::__1::vector"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %19, %361
  %363 = ashr exact i64 %362, 3
  %364 = add nsw i64 %363, %11
  %365 = icmp ugt i64 %364, 2305843009213693951
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #7
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %16, %361
  %370 = ashr exact i64 %369, 3
  %371 = icmp ult i64 %370, 1152921504606846975
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %6, %361
  %374 = ashr exact i64 %373, 3
  br label %382

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 2
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %6, %361
  %380 = ashr exact i64 %379, 3
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %389, label %382

382:                                              ; preds = %372, %375
  %383 = phi i64 [ %374, %372 ], [ %380, %375 ]
  %384 = phi i64 [ 2305843009213693951, %372 ], [ %378, %375 ]
  %385 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %386 = shl i64 %384, 3
  %387 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %385, i64 %386) #6
  %388 = bitcast i8* %387 to %"class.sh::TIntermNode"**
  br label %389

389:                                              ; preds = %382, %375
  %390 = phi i64 [ %383, %382 ], [ %380, %375 ]
  %391 = phi i64 [ %384, %382 ], [ 0, %375 ]
  %392 = phi %"class.sh::TIntermNode"** [ %388, %382 ], [ null, %375 ]
  %393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %390
  %394 = ptrtoint %"class.sh::TIntermNode"** %393 to i64
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %391
  %396 = ptrtoint %"class.sh::TIntermNode"** %395 to i64
  %397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %11
  %398 = add i64 %10, -8
  %399 = lshr i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 7
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %418, label %403

403:                                              ; preds = %389, %403
  %404 = phi %"class.sh::TIntermNode"** [ %411, %403 ], [ %393, %389 ]
  %405 = phi i64 [ %412, %403 ], [ %394, %389 ]
  %406 = phi %"class.sh::TIntermNode"** [ %413, %403 ], [ %2, %389 ]
  %407 = phi i64 [ %414, %403 ], [ %401, %389 ]
  %408 = bitcast %"class.sh::TIntermNode"** %406 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = inttoptr i64 %405 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %404, i64 1
  %412 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 1
  %414 = add i64 %407, -1
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %403, !llvm.loop !38

416:                                              ; preds = %403
  %417 = ptrtoint %"class.sh::TIntermNode"** %411 to i64
  br label %418

418:                                              ; preds = %389, %416
  %419 = phi %"class.sh::TIntermNode"** [ %393, %389 ], [ %411, %416 ]
  %420 = phi i64 [ %394, %389 ], [ %417, %416 ]
  %421 = phi %"class.sh::TIntermNode"** [ %2, %389 ], [ %413, %416 ]
  %422 = icmp ult i64 %398, 56
  br i1 %422, label %469, label %423

423:                                              ; preds = %418, %423
  %424 = phi %"class.sh::TIntermNode"** [ %465, %423 ], [ %419, %418 ]
  %425 = phi i64 [ %466, %423 ], [ %420, %418 ]
  %426 = phi %"class.sh::TIntermNode"** [ %467, %423 ], [ %421, %418 ]
  %427 = bitcast %"class.sh::TIntermNode"** %426 to i64*
  %428 = load i64, i64* %427, align 8
  %429 = inttoptr i64 %425 to i64*
  store i64 %428, i64* %429, align 8
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 1
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 1
  %432 = bitcast %"class.sh::TIntermNode"** %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = bitcast %"class.sh::TIntermNode"** %430 to i64*
  store i64 %433, i64* %434, align 8
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 2
  %437 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  store i64 %438, i64* %439, align 8
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 3
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 3
  %442 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 4
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 4
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  store i64 %448, i64* %449, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 5
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 5
  %452 = bitcast %"class.sh::TIntermNode"** %451 to i64*
  %453 = load i64, i64* %452, align 8
  %454 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  store i64 %453, i64* %454, align 8
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 6
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 6
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  store i64 %458, i64* %459, align 8
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 7
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 7
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %424, i64 8
  %466 = ptrtoint %"class.sh::TIntermNode"** %465 to i64
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %426, i64 8
  %468 = icmp eq %"class.sh::TIntermNode"** %397, %465
  br i1 %468, label %469, label %423

469:                                              ; preds = %423, %418
  %470 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %471 = ptrtoint %"class.sh::TIntermNode"** %470 to i64
  %472 = icmp eq %"class.sh::TIntermNode"** %470, %1
  br i1 %472, label %645, label %473

473:                                              ; preds = %469
  %474 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %475 = ptrtoint %"class.sh::TIntermNode"** %474 to i64
  %476 = sub i64 %475, %471
  %477 = lshr i64 %476, 3
  %478 = add nuw nsw i64 %477, 1
  %479 = icmp ult i64 %478, 4
  br i1 %479, label %572, label %480

480:                                              ; preds = %473
  %481 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %482 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  %483 = sub i64 %482, %471
  %484 = lshr i64 %483, 3
  %485 = xor i64 %484, -1
  %486 = add nsw i64 %390, %485
  %487 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %486
  %488 = xor i64 %484, -1
  %489 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %488
  %490 = icmp ult %"class.sh::TIntermNode"** %487, %1
  %491 = icmp ult %"class.sh::TIntermNode"** %489, %393
  %492 = and i1 %490, %491
  br i1 %492, label %572, label %493

493:                                              ; preds = %480
  %494 = and i64 %478, 4611686018427387900
  %495 = sub nsw i64 0, %494
  %496 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 %495
  %497 = sub nsw i64 0, %494
  %498 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %497
  %499 = add nsw i64 %494, -4
  %500 = lshr exact i64 %499, 2
  %501 = add nuw nsw i64 %500, 1
  %502 = and i64 %501, 1
  %503 = icmp eq i64 %499, 0
  br i1 %503, label %548, label %504

504:                                              ; preds = %493
  %505 = sub nuw nsw i64 %501, %502
  %506 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %507 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %508 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %509 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %510

510:                                              ; preds = %510, %504
  %511 = phi i64 [ 0, %504 ], [ %545, %510 ]
  %512 = phi i64 [ %505, %504 ], [ %546, %510 ]
  %513 = sub i64 0, %511
  %514 = sub i64 0, %511
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 %513
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 %514
  %517 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -1
  %518 = bitcast %"class.sh::TIntermNode"** %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 8, !alias.scope !39
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %516, i64 -2
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = bitcast %"class.sh::TIntermNode"** %521 to <2 x i64>*
  %523 = load <2 x i64>, <2 x i64>* %522, align 8, !alias.scope !39
  %524 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -1
  %525 = bitcast %"class.sh::TIntermNode"** %524 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %525, align 8, !alias.scope !42, !noalias !39
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %515, i64 -2
  %527 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %526, i64 -1
  %528 = bitcast %"class.sh::TIntermNode"** %527 to <2 x i64>*
  store <2 x i64> %523, <2 x i64>* %528, align 8, !alias.scope !42, !noalias !39
  %529 = sub nuw nsw i64 -4, %511
  %530 = sub nuw nsw i64 -4, %511
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %508, i64 %529
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %509, i64 %530
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to <2 x i64>*
  %535 = load <2 x i64>, <2 x i64>* %534, align 8, !alias.scope !39
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %532, i64 -2
  %537 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %536, i64 -1
  %538 = bitcast %"class.sh::TIntermNode"** %537 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 8, !alias.scope !39
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -1
  %541 = bitcast %"class.sh::TIntermNode"** %540 to <2 x i64>*
  store <2 x i64> %535, <2 x i64>* %541, align 8, !alias.scope !42, !noalias !39
  %542 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %531, i64 -2
  %543 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 -1
  %544 = bitcast %"class.sh::TIntermNode"** %543 to <2 x i64>*
  store <2 x i64> %539, <2 x i64>* %544, align 8, !alias.scope !42, !noalias !39
  %545 = add i64 %511, 8
  %546 = add i64 %512, -2
  %547 = icmp eq i64 %546, 0
  br i1 %547, label %548, label %510, !llvm.loop !44

548:                                              ; preds = %510, %493
  %549 = phi i64 [ 0, %493 ], [ %545, %510 ]
  %550 = icmp eq i64 %502, 0
  br i1 %550, label %570, label %551

551:                                              ; preds = %548
  %552 = sub i64 0, %549
  %553 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 -1
  %554 = sub i64 0, %549
  %555 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %556 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %552
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %555, i64 %554
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -1
  %559 = bitcast %"class.sh::TIntermNode"** %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8, !alias.scope !39
  %561 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %557, i64 -2
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %561, i64 -1
  %563 = bitcast %"class.sh::TIntermNode"** %562 to <2 x i64>*
  %564 = load <2 x i64>, <2 x i64>* %563, align 8, !alias.scope !39
  %565 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -1
  %566 = bitcast %"class.sh::TIntermNode"** %565 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %566, align 8, !alias.scope !42, !noalias !39
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %556, i64 -2
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %567, i64 -1
  %569 = bitcast %"class.sh::TIntermNode"** %568 to <2 x i64>*
  store <2 x i64> %564, <2 x i64>* %569, align 8, !alias.scope !42, !noalias !39
  br label %570

570:                                              ; preds = %548, %551
  %571 = icmp eq i64 %478, %494
  br i1 %571, label %642, label %572

572:                                              ; preds = %570, %480, %473
  %573 = phi %"class.sh::TIntermNode"** [ %393, %480 ], [ %393, %473 ], [ %496, %570 ]
  %574 = phi %"class.sh::TIntermNode"** [ %1, %480 ], [ %1, %473 ], [ %498, %570 ]
  %575 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %574, i64 -1
  %576 = ptrtoint %"class.sh::TIntermNode"** %575 to i64
  %577 = sub i64 %576, %471
  %578 = lshr i64 %577, 3
  %579 = add nuw nsw i64 %578, 1
  %580 = and i64 %579, 7
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %593, label %582

582:                                              ; preds = %572, %582
  %583 = phi %"class.sh::TIntermNode"** [ %586, %582 ], [ %573, %572 ]
  %584 = phi %"class.sh::TIntermNode"** [ %587, %582 ], [ %574, %572 ]
  %585 = phi i64 [ %591, %582 ], [ %580, %572 ]
  %586 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %583, i64 -1
  %587 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %584, i64 -1
  %588 = bitcast %"class.sh::TIntermNode"** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"class.sh::TIntermNode"** %586 to i64*
  store i64 %589, i64* %590, align 8
  %591 = add i64 %585, -1
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %582, !llvm.loop !45

593:                                              ; preds = %582, %572
  %594 = phi %"class.sh::TIntermNode"** [ undef, %572 ], [ %586, %582 ]
  %595 = phi %"class.sh::TIntermNode"** [ %573, %572 ], [ %586, %582 ]
  %596 = phi %"class.sh::TIntermNode"** [ %574, %572 ], [ %587, %582 ]
  %597 = icmp ult i64 %577, 56
  br i1 %597, label %642, label %598

598:                                              ; preds = %593, %598
  %599 = phi %"class.sh::TIntermNode"** [ %636, %598 ], [ %595, %593 ]
  %600 = phi %"class.sh::TIntermNode"** [ %637, %598 ], [ %596, %593 ]
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -1
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to i64*
  %604 = load i64, i64* %603, align 8
  %605 = bitcast %"class.sh::TIntermNode"** %601 to i64*
  store i64 %604, i64* %605, align 8
  %606 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -2
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -2
  %608 = bitcast %"class.sh::TIntermNode"** %607 to i64*
  %609 = load i64, i64* %608, align 8
  %610 = bitcast %"class.sh::TIntermNode"** %606 to i64*
  store i64 %609, i64* %610, align 8
  %611 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -3
  %612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -3
  %613 = bitcast %"class.sh::TIntermNode"** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.sh::TIntermNode"** %611 to i64*
  store i64 %614, i64* %615, align 8
  %616 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -4
  %617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -4
  %618 = bitcast %"class.sh::TIntermNode"** %617 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = bitcast %"class.sh::TIntermNode"** %616 to i64*
  store i64 %619, i64* %620, align 8
  %621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -5
  %622 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -5
  %623 = bitcast %"class.sh::TIntermNode"** %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.sh::TIntermNode"** %621 to i64*
  store i64 %624, i64* %625, align 8
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -6
  %627 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -6
  %628 = bitcast %"class.sh::TIntermNode"** %627 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %"class.sh::TIntermNode"** %626 to i64*
  store i64 %629, i64* %630, align 8
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -7
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -7
  %633 = bitcast %"class.sh::TIntermNode"** %632 to i64*
  %634 = load i64, i64* %633, align 8
  %635 = bitcast %"class.sh::TIntermNode"** %631 to i64*
  store i64 %634, i64* %635, align 8
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %599, i64 -8
  %637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %600, i64 -8
  %638 = bitcast %"class.sh::TIntermNode"** %637 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = bitcast %"class.sh::TIntermNode"** %636 to i64*
  store i64 %639, i64* %640, align 8
  %641 = icmp eq %"class.sh::TIntermNode"** %637, %470
  br i1 %641, label %642, label %598, !llvm.loop !46

642:                                              ; preds = %593, %598, %570
  %643 = phi %"class.sh::TIntermNode"** [ %496, %570 ], [ %594, %593 ], [ %636, %598 ]
  %644 = ptrtoint %"class.sh::TIntermNode"** %643 to i64
  br label %645

645:                                              ; preds = %642, %469
  %646 = phi i64 [ %394, %469 ], [ %644, %642 ]
  %647 = phi %"class.sh::TIntermNode"** [ %393, %469 ], [ %643, %642 ]
  %648 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %649 = icmp eq %"class.sh::TIntermNode"** %648, %1
  br i1 %649, label %650, label %652

650:                                              ; preds = %645
  %651 = ptrtoint %"class.sh::TIntermNode"** %647 to i64
  br label %830

652:                                              ; preds = %645
  %653 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %654 = ptrtoint %"class.sh::TIntermNode"** %653 to i64
  %655 = sub i64 %654, %6
  %656 = lshr i64 %655, 3
  %657 = add nuw nsw i64 %656, 1
  %658 = icmp ult i64 %657, 4
  br i1 %658, label %755, label %659

659:                                              ; preds = %652
  %660 = add nsw i64 %390, %11
  %661 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %662 = ptrtoint %"class.sh::TIntermNode"** %661 to i64
  %663 = sub i64 %662, %6
  %664 = lshr i64 %663, 3
  %665 = add nsw i64 %660, %664
  %666 = add nsw i64 %665, 1
  %667 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %666
  %668 = add nuw nsw i64 %664, 1
  %669 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %668
  %670 = icmp ult %"class.sh::TIntermNode"** %397, %669
  %671 = icmp ugt %"class.sh::TIntermNode"** %667, %1
  %672 = and i1 %670, %671
  br i1 %672, label %755, label %673

673:                                              ; preds = %659
  %674 = and i64 %657, 4611686018427387900
  %675 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %676 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %674
  %677 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %674
  %678 = add nsw i64 %674, -4
  %679 = lshr exact i64 %678, 2
  %680 = add nuw nsw i64 %679, 1
  %681 = and i64 %680, 3
  %682 = icmp ult i64 %678, 12
  br i1 %682, label %734, label %683

683:                                              ; preds = %673
  %684 = sub nsw i64 %680, %681
  br label %685

685:                                              ; preds = %685, %683
  %686 = phi i64 [ 0, %683 ], [ %731, %685 ]
  %687 = phi i64 [ %684, %683 ], [ %732, %685 ]
  %688 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %686
  %689 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %686
  %690 = bitcast %"class.sh::TIntermNode"** %689 to <2 x i64>*
  %691 = load <2 x i64>, <2 x i64>* %690, align 8, !alias.scope !47
  %692 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 2
  %693 = bitcast %"class.sh::TIntermNode"** %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 8, !alias.scope !47
  %695 = bitcast %"class.sh::TIntermNode"** %688 to <2 x i64>*
  store <2 x i64> %691, <2 x i64>* %695, align 8, !alias.scope !50, !noalias !47
  %696 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %688, i64 2
  %697 = bitcast %"class.sh::TIntermNode"** %696 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %697, align 8, !alias.scope !50, !noalias !47
  %698 = or i64 %686, 4
  %699 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %698
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %698
  %701 = bitcast %"class.sh::TIntermNode"** %700 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 8, !alias.scope !47
  %703 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %700, i64 2
  %704 = bitcast %"class.sh::TIntermNode"** %703 to <2 x i64>*
  %705 = load <2 x i64>, <2 x i64>* %704, align 8, !alias.scope !47
  %706 = bitcast %"class.sh::TIntermNode"** %699 to <2 x i64>*
  store <2 x i64> %702, <2 x i64>* %706, align 8, !alias.scope !50, !noalias !47
  %707 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 2
  %708 = bitcast %"class.sh::TIntermNode"** %707 to <2 x i64>*
  store <2 x i64> %705, <2 x i64>* %708, align 8, !alias.scope !50, !noalias !47
  %709 = or i64 %686, 8
  %710 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %709
  %711 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %709
  %712 = bitcast %"class.sh::TIntermNode"** %711 to <2 x i64>*
  %713 = load <2 x i64>, <2 x i64>* %712, align 8, !alias.scope !47
  %714 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %711, i64 2
  %715 = bitcast %"class.sh::TIntermNode"** %714 to <2 x i64>*
  %716 = load <2 x i64>, <2 x i64>* %715, align 8, !alias.scope !47
  %717 = bitcast %"class.sh::TIntermNode"** %710 to <2 x i64>*
  store <2 x i64> %713, <2 x i64>* %717, align 8, !alias.scope !50, !noalias !47
  %718 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 2
  %719 = bitcast %"class.sh::TIntermNode"** %718 to <2 x i64>*
  store <2 x i64> %716, <2 x i64>* %719, align 8, !alias.scope !50, !noalias !47
  %720 = or i64 %686, 12
  %721 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %720
  %722 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %720
  %723 = bitcast %"class.sh::TIntermNode"** %722 to <2 x i64>*
  %724 = load <2 x i64>, <2 x i64>* %723, align 8, !alias.scope !47
  %725 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %722, i64 2
  %726 = bitcast %"class.sh::TIntermNode"** %725 to <2 x i64>*
  %727 = load <2 x i64>, <2 x i64>* %726, align 8, !alias.scope !47
  %728 = bitcast %"class.sh::TIntermNode"** %721 to <2 x i64>*
  store <2 x i64> %724, <2 x i64>* %728, align 8, !alias.scope !50, !noalias !47
  %729 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %721, i64 2
  %730 = bitcast %"class.sh::TIntermNode"** %729 to <2 x i64>*
  store <2 x i64> %727, <2 x i64>* %730, align 8, !alias.scope !50, !noalias !47
  %731 = add i64 %686, 16
  %732 = add i64 %687, -4
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %685, !llvm.loop !52

734:                                              ; preds = %685, %673
  %735 = phi i64 [ 0, %673 ], [ %731, %685 ]
  %736 = icmp eq i64 %681, 0
  br i1 %736, label %753, label %737

737:                                              ; preds = %734, %737
  %738 = phi i64 [ %750, %737 ], [ %735, %734 ]
  %739 = phi i64 [ %751, %737 ], [ %681, %734 ]
  %740 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %397, i64 %738
  %741 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %738
  %742 = bitcast %"class.sh::TIntermNode"** %741 to <2 x i64>*
  %743 = load <2 x i64>, <2 x i64>* %742, align 8, !alias.scope !47
  %744 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %741, i64 2
  %745 = bitcast %"class.sh::TIntermNode"** %744 to <2 x i64>*
  %746 = load <2 x i64>, <2 x i64>* %745, align 8, !alias.scope !47
  %747 = bitcast %"class.sh::TIntermNode"** %740 to <2 x i64>*
  store <2 x i64> %743, <2 x i64>* %747, align 8, !alias.scope !50, !noalias !47
  %748 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %740, i64 2
  %749 = bitcast %"class.sh::TIntermNode"** %748 to <2 x i64>*
  store <2 x i64> %746, <2 x i64>* %749, align 8, !alias.scope !50, !noalias !47
  %750 = add i64 %738, 4
  %751 = add i64 %739, -1
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %737, !llvm.loop !53

753:                                              ; preds = %737, %734
  %754 = icmp eq i64 %657, %674
  br i1 %754, label %830, label %755

755:                                              ; preds = %753, %659, %652
  %756 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %675, %753 ]
  %757 = phi %"class.sh::TIntermNode"** [ %397, %659 ], [ %397, %652 ], [ %676, %753 ]
  %758 = phi %"class.sh::TIntermNode"** [ %1, %659 ], [ %1, %652 ], [ %677, %753 ]
  %759 = ptrtoint %"class.sh::TIntermNode"** %758 to i64
  %760 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %648, i64 -1
  %761 = ptrtoint %"class.sh::TIntermNode"** %760 to i64
  %762 = sub i64 %761, %759
  %763 = lshr i64 %762, 3
  %764 = add nuw nsw i64 %763, 1
  %765 = and i64 %764, 7
  %766 = icmp eq i64 %765, 0
  br i1 %766, label %779, label %767

767:                                              ; preds = %755, %767
  %768 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %756, %755 ]
  %769 = phi %"class.sh::TIntermNode"** [ %776, %767 ], [ %757, %755 ]
  %770 = phi %"class.sh::TIntermNode"** [ %775, %767 ], [ %758, %755 ]
  %771 = phi i64 [ %777, %767 ], [ %765, %755 ]
  %772 = bitcast %"class.sh::TIntermNode"** %769 to i64*
  %773 = bitcast %"class.sh::TIntermNode"** %770 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %772, align 8
  %775 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %770, i64 1
  %776 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %768, i64 1
  %777 = add i64 %771, -1
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %779, label %767, !llvm.loop !54

779:                                              ; preds = %767, %755
  %780 = phi %"class.sh::TIntermNode"** [ undef, %755 ], [ %776, %767 ]
  %781 = phi %"class.sh::TIntermNode"** [ %756, %755 ], [ %776, %767 ]
  %782 = phi %"class.sh::TIntermNode"** [ %757, %755 ], [ %776, %767 ]
  %783 = phi %"class.sh::TIntermNode"** [ %758, %755 ], [ %775, %767 ]
  %784 = icmp ult i64 %762, 56
  br i1 %784, label %830, label %785

785:                                              ; preds = %779, %785
  %786 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %781, %779 ]
  %787 = phi %"class.sh::TIntermNode"** [ %828, %785 ], [ %782, %779 ]
  %788 = phi %"class.sh::TIntermNode"** [ %827, %785 ], [ %783, %779 ]
  %789 = bitcast %"class.sh::TIntermNode"** %787 to i64*
  %790 = bitcast %"class.sh::TIntermNode"** %788 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %789, align 8
  %792 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 1
  %793 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 1
  %794 = bitcast %"class.sh::TIntermNode"** %793 to i64*
  %795 = bitcast %"class.sh::TIntermNode"** %792 to i64*
  %796 = load i64, i64* %795, align 8
  store i64 %796, i64* %794, align 8
  %797 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 2
  %798 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 2
  %799 = bitcast %"class.sh::TIntermNode"** %798 to i64*
  %800 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %799, align 8
  %802 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 3
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 3
  %804 = bitcast %"class.sh::TIntermNode"** %803 to i64*
  %805 = bitcast %"class.sh::TIntermNode"** %802 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %804, align 8
  %807 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 4
  %808 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 4
  %809 = bitcast %"class.sh::TIntermNode"** %808 to i64*
  %810 = bitcast %"class.sh::TIntermNode"** %807 to i64*
  %811 = load i64, i64* %810, align 8
  store i64 %811, i64* %809, align 8
  %812 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 5
  %813 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 5
  %814 = bitcast %"class.sh::TIntermNode"** %813 to i64*
  %815 = bitcast %"class.sh::TIntermNode"** %812 to i64*
  %816 = load i64, i64* %815, align 8
  store i64 %816, i64* %814, align 8
  %817 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 6
  %818 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 6
  %819 = bitcast %"class.sh::TIntermNode"** %818 to i64*
  %820 = bitcast %"class.sh::TIntermNode"** %817 to i64*
  %821 = load i64, i64* %820, align 8
  store i64 %821, i64* %819, align 8
  %822 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 7
  %823 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 7
  %824 = bitcast %"class.sh::TIntermNode"** %823 to i64*
  %825 = bitcast %"class.sh::TIntermNode"** %822 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %824, align 8
  %827 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %788, i64 8
  %828 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %786, i64 8
  %829 = icmp eq %"class.sh::TIntermNode"** %827, %648
  br i1 %829, label %830, label %785, !llvm.loop !55

830:                                              ; preds = %779, %785, %753, %650
  %831 = phi %"class.sh::TIntermNode"** [ %397, %650 ], [ %675, %753 ], [ %780, %779 ], [ %828, %785 ]
  %832 = phi i64 [ %651, %650 ], [ %646, %753 ], [ %646, %785 ], [ %646, %779 ]
  %833 = ptrtoint %"class.sh::TIntermNode"** %831 to i64
  store i64 %832, i64* %360, align 8
  store i64 %833, i64* %23, align 8
  store i64 %396, i64* %15, align 8
  ret %"class.sh::TIntermNode"** %393

834:                                              ; preds = %208, %353, %357, %4
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{i8 0, i8 2}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !10}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !8}
!45 = distinct !{!45, !10}
!46 = distinct !{!46, !8}
!47 = !{!48}
!48 = distinct !{!48, !49}
!49 = distinct !{!49, !"LVerDomain"}
!50 = !{!51}
!51 = distinct !{!51, !49}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !10}
!55 = distinct !{!55, !8}
