; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/av1_txfm_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/av1_txfm_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_round_shift_array_sse4_1(i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = bitcast i32* %0 to <2 x i64>*
  %5 = ashr i32 %1, 2
  %6 = icmp sgt i32 %2, 0
  %7 = icmp sgt i32 %1, 3
  br i1 %6, label %17, label %8

8:                                                ; preds = %3
  br i1 %7, label %9, label %110

9:                                                ; preds = %8
  %10 = sub nsw i32 0, %2
  %11 = zext i32 %5 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %11, 3
  %14 = icmp ult i64 %12, 3
  br i1 %14, label %97, label %15

15:                                               ; preds = %9
  %16 = sub nsw i64 %11, %13
  br label %58

17:                                               ; preds = %3
  br i1 %7, label %18, label %110

18:                                               ; preds = %17
  %19 = add nsw i32 %2, -1
  %20 = shl i32 1, %19
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = zext i32 %5 to i64
  %24 = add nsw i64 %23, -1
  %25 = and i64 %23, 3
  %26 = icmp ult i64 %24, 3
  br i1 %26, label %83, label %27

27:                                               ; preds = %18
  %28 = sub nsw i64 %23, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %32 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %30
  %33 = bitcast <2 x i64>* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = add <4 x i32> %34, %22
  %36 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %35, i32 %2) #2
  store <4 x i32> %36, <4 x i32>* %33, align 16
  %37 = or i64 %30, 1
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %37
  %39 = bitcast <2 x i64>* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = add <4 x i32> %40, %22
  %42 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %41, i32 %2) #2
  store <4 x i32> %42, <4 x i32>* %39, align 16
  %43 = or i64 %30, 2
  %44 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %43
  %45 = bitcast <2 x i64>* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 16
  %47 = add <4 x i32> %46, %22
  %48 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %47, i32 %2) #2
  store <4 x i32> %48, <4 x i32>* %45, align 16
  %49 = or i64 %30, 3
  %50 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %49
  %51 = bitcast <2 x i64>* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 16
  %53 = add <4 x i32> %52, %22
  %54 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %53, i32 %2) #2
  store <4 x i32> %54, <4 x i32>* %51, align 16
  %55 = add nuw nsw i64 %30, 4
  %56 = add i64 %31, -4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %83, label %29

58:                                               ; preds = %58, %15
  %59 = phi i64 [ 0, %15 ], [ %80, %58 ]
  %60 = phi i64 [ %16, %15 ], [ %81, %58 ]
  %61 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %59
  %62 = bitcast <2 x i64>* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 16
  %64 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %63, i32 %10) #2
  store <4 x i32> %64, <4 x i32>* %62, align 16
  %65 = or i64 %59, 1
  %66 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %65
  %67 = bitcast <2 x i64>* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 16
  %69 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %68, i32 %10) #2
  store <4 x i32> %69, <4 x i32>* %67, align 16
  %70 = or i64 %59, 2
  %71 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %70
  %72 = bitcast <2 x i64>* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 16
  %74 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %73, i32 %10) #2
  store <4 x i32> %74, <4 x i32>* %72, align 16
  %75 = or i64 %59, 3
  %76 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %75
  %77 = bitcast <2 x i64>* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %78, i32 %10) #2
  store <4 x i32> %79, <4 x i32>* %77, align 16
  %80 = add nuw nsw i64 %59, 4
  %81 = add i64 %60, -4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %97, label %58

83:                                               ; preds = %29, %18
  %84 = phi i64 [ 0, %18 ], [ %55, %29 ]
  %85 = icmp eq i64 %25, 0
  br i1 %85, label %110, label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %94, %86 ], [ %84, %83 ]
  %88 = phi i64 [ %95, %86 ], [ %25, %83 ]
  %89 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %87
  %90 = bitcast <2 x i64>* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 16
  %92 = add <4 x i32> %91, %22
  %93 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %92, i32 %2) #2
  store <4 x i32> %93, <4 x i32>* %90, align 16
  %94 = add nuw nsw i64 %87, 1
  %95 = add i64 %88, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %110, label %86, !llvm.loop !2

97:                                               ; preds = %58, %9
  %98 = phi i64 [ 0, %9 ], [ %80, %58 ]
  %99 = icmp eq i64 %13, 0
  br i1 %99, label %110, label %100

100:                                              ; preds = %97, %100
  %101 = phi i64 [ %107, %100 ], [ %98, %97 ]
  %102 = phi i64 [ %108, %100 ], [ %13, %97 ]
  %103 = getelementptr inbounds <2 x i64>, <2 x i64>* %4, i64 %101
  %104 = bitcast <2 x i64>* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 16
  %106 = tail call <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32> %105, i32 %10) #2
  store <4 x i32> %106, <4 x i32>* %104, align 16
  %107 = add nuw nsw i64 %101, 1
  %108 = add i64 %102, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %100, !llvm.loop !4

110:                                              ; preds = %97, %100, %83, %86, %8, %17
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pslli.d(<4 x i32>, i32) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
