; ModuleID = '../../third_party/opus/src/celt/celt_decoder.c'
source_filename = "../../third_party/opus/src/celt/celt_decoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusCustomDecoder = type { %struct.OpusCustomMode*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i32, i32, [2 x float], [1 x float] }
%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.ec_ctx = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [72 x i8] c"assertion failed: st->mode == opus_custom_mode_create(48000, 960, NULL)\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/opus/src/celt/celt_decoder.c\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"assertion failed: st->overlap == 120\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"assertion failed: st->end <= 21\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"assertion failed: st->channels == 1 || st->channels == 2\00", align 1
@.str.5 = private unnamed_addr constant [71 x i8] c"assertion failed: st->stream_channels == 1 || st->stream_channels == 2\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"assertion failed: st->downsample > 0\00", align 1
@.str.7 = private unnamed_addr constant [52 x i8] c"assertion failed: st->start == 0 || st->start == 17\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"assertion failed: st->start < st->end\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"assertion failed: st->arch >= 0\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"assertion failed: st->arch <= OPUS_ARCHMASK\00", align 1
@.str.11 = private unnamed_addr constant [60 x i8] c"assertion failed: st->last_pitch_index <= PLC_PITCH_LAG_MAX\00", align 1
@.str.12 = private unnamed_addr constant [89 x i8] c"assertion failed: st->last_pitch_index >= PLC_PITCH_LAG_MIN || st->last_pitch_index == 0\00", align 1
@.str.13 = private unnamed_addr constant [53 x i8] c"assertion failed: st->postfilter_period < MAX_PERIOD\00", align 1
@.str.14 = private unnamed_addr constant [94 x i8] c"assertion failed: st->postfilter_period >= COMBFILTER_MINPERIOD || st->postfilter_period == 0\00", align 1
@.str.15 = private unnamed_addr constant [57 x i8] c"assertion failed: st->postfilter_period_old < MAX_PERIOD\00", align 1
@.str.16 = private unnamed_addr constant [102 x i8] c"assertion failed: st->postfilter_period_old >= COMBFILTER_MINPERIOD || st->postfilter_period_old == 0\00", align 1
@.str.17 = private unnamed_addr constant [45 x i8] c"assertion failed: st->postfilter_tapset <= 2\00", align 1
@.str.18 = private unnamed_addr constant [45 x i8] c"assertion failed: st->postfilter_tapset >= 0\00", align 1
@.str.19 = private unnamed_addr constant [49 x i8] c"assertion failed: st->postfilter_tapset_old <= 2\00", align 1
@.str.20 = private unnamed_addr constant [49 x i8] c"assertion failed: st->postfilter_tapset_old >= 0\00", align 1
@tapset_icdf = internal constant [3 x i8] c"\02\01\00", align 1
@spread_icdf = internal constant [4 x i8] c"\19\17\02\00", align 1
@trim_icdf = internal constant [11 x i8] c"~|wmW)\13\09\04\02\00", align 1
@.str.21 = private unnamed_addr constant [27 x i8] c"assertion failed: accum==0\00", align 1
@tf_select_table = external local_unnamed_addr constant [4 x [8 x i8]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @validate_celt_decoder(%struct.OpusCustomDecoder* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  %3 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %2, align 8
  %4 = tail call %struct.OpusCustomMode* @opus_custom_mode_create(i32 48000, i32 960, i32* null) #4
  %5 = icmp eq %struct.OpusCustomMode* %3, %4
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @celt_fatal(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 118) #6
  unreachable

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 120
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 119) #6
  unreachable

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 22
  br i1 %15, label %17, label %16

16:                                               ; preds = %12
  tail call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 120) #6
  unreachable

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, -1
  %21 = icmp ult i32 %20, 2
  br i1 %21, label %23, label %22

22:                                               ; preds = %17
  tail call void @celt_fatal(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 128) #6
  unreachable

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, -1
  %27 = icmp ult i32 %26, 2
  br i1 %27, label %29, label %28

28:                                               ; preds = %23
  tail call void @celt_fatal(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 129) #6
  unreachable

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @celt_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 130) #6
  unreachable

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 5
  %36 = load i32, i32* %35, align 8
  switch i32 %36, label %37 [
    i32 0, label %38
    i32 17, label %38
  ]

37:                                               ; preds = %34
  tail call void @celt_fatal(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 131) #6
  unreachable

38:                                               ; preds = %34, %34
  %39 = icmp slt i32 %36, %14
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  tail call void @celt_fatal(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 132) #6
  unreachable

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  %43 = load i32, i32* %42, align 8
  %44 = icmp sgt i32 %43, -1
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @celt_fatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 134) #6
  unreachable

46:                                               ; preds = %41
  %47 = icmp slt i32 %43, 8
  br i1 %47, label %49, label %48

48:                                               ; preds = %46
  tail call void @celt_fatal(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 135) #6
  unreachable

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 12
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %51, 721
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  tail call void @celt_fatal(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 137) #6
  unreachable

54:                                               ; preds = %49
  %55 = icmp sgt i32 %51, 99
  %56 = icmp eq i32 %51, 0
  %57 = or i1 %55, %56
  br i1 %57, label %59, label %58

58:                                               ; preds = %54
  tail call void @celt_fatal(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 138) #6
  unreachable

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 15
  %61 = load i32, i32* %60, align 8
  %62 = icmp slt i32 %61, 1024
  br i1 %62, label %64, label %63

63:                                               ; preds = %59
  tail call void @celt_fatal(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 139) #6
  unreachable

64:                                               ; preds = %59
  %65 = icmp sgt i32 %61, 14
  %66 = icmp eq i32 %61, 0
  %67 = or i1 %65, %66
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  tail call void @celt_fatal(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 140) #6
  unreachable

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 16
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 1024
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @celt_fatal(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 141) #6
  unreachable

74:                                               ; preds = %69
  %75 = icmp sgt i32 %71, 14
  %76 = icmp eq i32 %71, 0
  %77 = or i1 %75, %76
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call void @celt_fatal(i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 142) #6
  unreachable

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 19
  %81 = load i32, i32* %80, align 8
  %82 = icmp slt i32 %81, 3
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  tail call void @celt_fatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 143) #6
  unreachable

84:                                               ; preds = %79
  %85 = icmp sgt i32 %81, -1
  br i1 %85, label %87, label %86

86:                                               ; preds = %84
  tail call void @celt_fatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 144) #6
  unreachable

87:                                               ; preds = %84
  %88 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 20
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %89, 3
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @celt_fatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 145) #6
  unreachable

92:                                               ; preds = %87
  %93 = icmp sgt i32 %89, -1
  br i1 %93, label %95, label %94

94:                                               ; preds = %92
  tail call void @celt_fatal(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 146) #6
  unreachable

95:                                               ; preds = %92
  ret void
}

declare %struct.OpusCustomMode* @opus_custom_mode_create(i32, i32, i32*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @celt_decoder_get_size(i32) local_unnamed_addr #0 {
  %2 = tail call %struct.OpusCustomMode* @opus_custom_mode_create(i32 48000, i32 960, i32* null) #4
  %3 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %2, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %2, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = shl i32 %4, 2
  %8 = shl i32 %6, 5
  %9 = add i32 %7, 8288
  %10 = mul i32 %9, %0
  %11 = add i32 %8, 100
  %12 = add i32 %11, %10
  ret i32 %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @celt_decoder_init(%struct.OpusCustomDecoder*, i32, i32) local_unnamed_addr #0 {
  %4 = tail call %struct.OpusCustomMode* @opus_custom_mode_create(i32 48000, i32 960, i32* null) #4
  %5 = icmp ugt i32 %2, 2
  br i1 %5, label %41, label %6

6:                                                ; preds = %3
  %7 = icmp eq %struct.OpusCustomDecoder* %0, null
  br i1 %7, label %41, label %8

8:                                                ; preds = %6
  %9 = bitcast %struct.OpusCustomDecoder* %0 to i8*
  %10 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %4, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %4, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = shl i32 %11, 2
  %15 = shl i32 %13, 5
  %16 = add i32 %14, 8288
  %17 = mul i32 %16, %2
  %18 = add i32 %15, 100
  %19 = add i32 %18, %17
  %20 = sext i32 %19 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %9, i8 0, i64 %20, i1 false) #4
  %21 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  store %struct.OpusCustomMode* %4, %struct.OpusCustomMode** %21, align 8
  %22 = load i32, i32* %10, align 4
  %23 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 1
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 2
  store i32 %2, i32* %24, align 4
  %25 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 3
  store i32 %2, i32* %25, align 8
  %26 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 4
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 5
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %4, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 6
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 7
  store i32 1, i32* %31, align 8
  %32 = icmp eq i32 %2, 1
  %33 = zext i1 %32 to i32
  %34 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 8
  store i32 %33, i32* %34, align 4
  %35 = tail call i32 @opus_select_arch() #4
  %36 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  store i32 %35, i32* %36, align 8
  %37 = tail call i32 (%struct.OpusCustomDecoder*, i32, ...) @opus_custom_decoder_ctl(%struct.OpusCustomDecoder* nonnull %0, i32 4028) #4
  %38 = tail call i32 @resampling_factor(i32 %1) #4
  store i32 %38, i32* %26, align 4
  %39 = icmp eq i32 %38, 0
  %40 = sext i1 %39 to i32
  br label %41

41:                                               ; preds = %6, %3, %8
  %42 = phi i32 [ %40, %8 ], [ -7, %6 ], [ -1, %3 ]
  ret i32 %42
}

declare i32 @resampling_factor(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @celt_decode_with_ec(%struct.OpusCustomDecoder* noalias, i8*, i32, float* noalias, i32, %struct.ec_ctx*, i32) local_unnamed_addr #0 {
  %8 = bitcast %struct.OpusCustomDecoder* %0 to i8*
  %9 = alloca %struct.ec_ctx, align 8
  %10 = alloca [2 x float*], align 16
  %11 = alloca [2 x float*], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = bitcast %struct.ec_ctx* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %15) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 56, i1 false)
  %16 = bitcast [2 x float*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #4
  %17 = bitcast [2 x float*]* %11 to i8*
  %18 = bitcast [2 x float*]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #4
  %19 = getelementptr inbounds [2 x float*], [2 x float*]* %11, i64 0, i64 0
  %20 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 2
  %21 = bitcast [2 x float*]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 16, i1 false)
  %22 = load i32, i32* %20, align 4
  %23 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #4
  store i32 0, i32* %12, align 4
  %24 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #4
  store i32 0, i32* %13, align 4
  %25 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #4
  store i32 -1431655766, i32* %14, align 4
  %26 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 3
  %27 = load i32, i32* %26, align 8
  tail call void @validate_celt_decoder(%struct.OpusCustomDecoder* %0)
  %28 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  %29 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %28, align 8
  %30 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 5
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 5
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 6
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = mul nsw i32 %41, %4
  %43 = add nsw i32 %33, 2048
  %44 = mul nsw i32 %43, %22
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %45
  %47 = mul nsw i32 %22, 24
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %46, i64 %48
  %50 = shl nsw i32 %31, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %49, i64 %51
  %53 = getelementptr inbounds float, float* %52, i64 %51
  %54 = getelementptr inbounds float, float* %53, i64 %51
  %55 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 6
  %56 = load i32, i32* %55, align 8
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %1726, label %58

58:                                               ; preds = %7
  %59 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 8
  %60 = load i32, i32* %59, align 8
  br label %61

61:                                               ; preds = %65, %58
  %62 = phi i32 [ 0, %58 ], [ %66, %65 ]
  %63 = shl i32 %60, %62
  %64 = icmp eq i32 %63, %42
  br i1 %64, label %68, label %65

65:                                               ; preds = %61
  %66 = add nuw nsw i32 %62, 1
  %67 = icmp slt i32 %62, %56
  br i1 %67, label %61, label %1726

68:                                               ; preds = %61
  %69 = shl i32 1, %62
  %70 = icmp ugt i32 %2, 1275
  %71 = icmp eq float* %3, null
  %72 = or i1 %70, %71
  br i1 %72, label %1726, label %73

73:                                               ; preds = %68
  %74 = sext i32 %42 to i64
  %75 = sub nsw i64 0, %74
  %76 = sext i32 %22 to i64
  br label %77

77:                                               ; preds = %77, %73
  %78 = phi i64 [ %87, %77 ], [ 0, %73 ]
  %79 = trunc i64 %78 to i32
  %80 = mul nsw i32 %43, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %81
  %83 = getelementptr inbounds [2 x float*], [2 x float*]* %10, i64 0, i64 %78
  store float* %82, float** %83, align 8
  %84 = getelementptr inbounds float, float* %82, i64 2048
  %85 = getelementptr inbounds float, float* %84, i64 %75
  %86 = getelementptr inbounds [2 x float*], [2 x float*]* %11, i64 0, i64 %78
  store float* %85, float** %86, align 8
  %87 = add nuw nsw i64 %78, 1
  %88 = icmp slt i64 %87, %76
  br i1 %88, label %77, label %89

89:                                               ; preds = %77
  %90 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 3
  %91 = load i32, i32* %90, align 4
  %92 = icmp sgt i32 %39, %91
  %93 = select i1 %92, i32 %91, i32 %39
  %94 = icmp eq i8* %1, null
  %95 = icmp slt i32 %2, 2
  %96 = or i1 %94, %95
  br i1 %96, label %97, label %103

97:                                               ; preds = %89
  tail call fastcc void @celt_decode_lost(%struct.OpusCustomDecoder* %0, i32 %42, i32 %62)
  %98 = load i32, i32* %40, align 4
  %99 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 4, i64 0
  %100 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 21, i64 0
  call fastcc void @deemphasis(float** nonnull %19, float* %3, i32 %42, i32 %22, i32 %98, float* %99, float* %100, i32 %6)
  %101 = load i32, i32* %40, align 4
  %102 = sdiv i32 %42, %101
  br label %1726

103:                                              ; preds = %89
  %104 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 13
  %105 = load i32, i32* %104, align 8
  %106 = icmp ne i32 %105, 0
  %107 = zext i1 %106 to i32
  %108 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 14
  store i32 %107, i32* %108, align 4
  %109 = icmp eq %struct.ec_ctx* %5, null
  br i1 %109, label %110, label %111

110:                                              ; preds = %103
  call void @ec_dec_init(%struct.ec_ctx* nonnull %9, i8* nonnull %1, i32 %2) #4
  br label %111

111:                                              ; preds = %110, %103
  %112 = phi %struct.ec_ctx* [ %9, %110 ], [ %5, %103 ]
  %113 = icmp eq i32 %27, 1
  %114 = icmp sgt i32 %31, 0
  %115 = and i1 %113, %114
  br i1 %115, label %116, label %257

116:                                              ; preds = %111
  %117 = sext i32 %31 to i64
  %118 = zext i32 %31 to i64
  %119 = icmp ult i32 %31, 8
  br i1 %119, label %220, label %120

120:                                              ; preds = %116
  %121 = shl nsw i64 %45, 2
  %122 = shl nsw i64 %48, 2
  %123 = add nsw i64 %121, %122
  %124 = add nsw i64 %123, 96
  %125 = getelementptr i8, i8* %8, i64 %124
  %126 = shl nuw nsw i64 %118, 2
  %127 = add nsw i64 %123, %126
  %128 = add nsw i64 %127, 96
  %129 = getelementptr i8, i8* %8, i64 %128
  %130 = shl nsw i64 %117, 2
  %131 = add nsw i64 %130, %121
  %132 = add nsw i64 %131, %122
  %133 = add nsw i64 %132, 96
  %134 = getelementptr i8, i8* %8, i64 %133
  %135 = add nsw i64 %132, %126
  %136 = add nsw i64 %135, 96
  %137 = getelementptr i8, i8* %8, i64 %136
  %138 = icmp ult i8* %125, %137
  %139 = icmp ult i8* %134, %129
  %140 = and i1 %138, %139
  br i1 %140, label %220, label %141

141:                                              ; preds = %120
  %142 = and i64 %118, 4294967288
  %143 = add nsw i64 %142, -8
  %144 = lshr exact i64 %143, 3
  %145 = add nuw nsw i64 %144, 1
  %146 = and i64 %145, 1
  %147 = icmp eq i64 %143, 0
  br i1 %147, label %195, label %148

148:                                              ; preds = %141
  %149 = sub nuw nsw i64 %145, %146
  br label %150

150:                                              ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %192, %150 ]
  %152 = phi i64 [ %149, %148 ], [ %193, %150 ]
  %153 = getelementptr inbounds float, float* %49, i64 %151
  %154 = bitcast float* %153 to <4 x float>*
  %155 = load <4 x float>, <4 x float>* %154, align 4, !alias.scope !2, !noalias !5
  %156 = getelementptr inbounds float, float* %153, i64 4
  %157 = bitcast float* %156 to <4 x float>*
  %158 = load <4 x float>, <4 x float>* %157, align 4, !alias.scope !2, !noalias !5
  %159 = add nsw i64 %151, %117
  %160 = getelementptr inbounds float, float* %49, i64 %159
  %161 = bitcast float* %160 to <4 x float>*
  %162 = load <4 x float>, <4 x float>* %161, align 4, !alias.scope !5
  %163 = getelementptr inbounds float, float* %160, i64 4
  %164 = bitcast float* %163 to <4 x float>*
  %165 = load <4 x float>, <4 x float>* %164, align 4, !alias.scope !5
  %166 = fcmp ogt <4 x float> %155, %162
  %167 = fcmp ogt <4 x float> %158, %165
  %168 = select <4 x i1> %166, <4 x float> %155, <4 x float> %162
  %169 = select <4 x i1> %167, <4 x float> %158, <4 x float> %165
  %170 = bitcast float* %153 to <4 x float>*
  store <4 x float> %168, <4 x float>* %170, align 4, !alias.scope !2, !noalias !5
  %171 = bitcast float* %156 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 4, !alias.scope !2, !noalias !5
  %172 = or i64 %151, 8
  %173 = getelementptr inbounds float, float* %49, i64 %172
  %174 = bitcast float* %173 to <4 x float>*
  %175 = load <4 x float>, <4 x float>* %174, align 4, !alias.scope !2, !noalias !5
  %176 = getelementptr inbounds float, float* %173, i64 4
  %177 = bitcast float* %176 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 4, !alias.scope !2, !noalias !5
  %179 = add nsw i64 %172, %117
  %180 = getelementptr inbounds float, float* %49, i64 %179
  %181 = bitcast float* %180 to <4 x float>*
  %182 = load <4 x float>, <4 x float>* %181, align 4, !alias.scope !5
  %183 = getelementptr inbounds float, float* %180, i64 4
  %184 = bitcast float* %183 to <4 x float>*
  %185 = load <4 x float>, <4 x float>* %184, align 4, !alias.scope !5
  %186 = fcmp ogt <4 x float> %175, %182
  %187 = fcmp ogt <4 x float> %178, %185
  %188 = select <4 x i1> %186, <4 x float> %175, <4 x float> %182
  %189 = select <4 x i1> %187, <4 x float> %178, <4 x float> %185
  %190 = bitcast float* %173 to <4 x float>*
  store <4 x float> %188, <4 x float>* %190, align 4, !alias.scope !2, !noalias !5
  %191 = bitcast float* %176 to <4 x float>*
  store <4 x float> %189, <4 x float>* %191, align 4, !alias.scope !2, !noalias !5
  %192 = add i64 %151, 16
  %193 = add i64 %152, -2
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %150, !llvm.loop !7

195:                                              ; preds = %150, %141
  %196 = phi i64 [ 0, %141 ], [ %192, %150 ]
  %197 = icmp eq i64 %146, 0
  br i1 %197, label %218, label %198

198:                                              ; preds = %195
  %199 = getelementptr inbounds float, float* %49, i64 %196
  %200 = bitcast float* %199 to <4 x float>*
  %201 = load <4 x float>, <4 x float>* %200, align 4, !alias.scope !2, !noalias !5
  %202 = getelementptr inbounds float, float* %199, i64 4
  %203 = bitcast float* %202 to <4 x float>*
  %204 = load <4 x float>, <4 x float>* %203, align 4, !alias.scope !2, !noalias !5
  %205 = add nsw i64 %196, %117
  %206 = getelementptr inbounds float, float* %49, i64 %205
  %207 = bitcast float* %206 to <4 x float>*
  %208 = load <4 x float>, <4 x float>* %207, align 4, !alias.scope !5
  %209 = getelementptr inbounds float, float* %206, i64 4
  %210 = bitcast float* %209 to <4 x float>*
  %211 = load <4 x float>, <4 x float>* %210, align 4, !alias.scope !5
  %212 = fcmp ogt <4 x float> %201, %208
  %213 = fcmp ogt <4 x float> %204, %211
  %214 = select <4 x i1> %212, <4 x float> %201, <4 x float> %208
  %215 = select <4 x i1> %213, <4 x float> %204, <4 x float> %211
  %216 = bitcast float* %199 to <4 x float>*
  store <4 x float> %214, <4 x float>* %216, align 4, !alias.scope !2, !noalias !5
  %217 = bitcast float* %202 to <4 x float>*
  store <4 x float> %215, <4 x float>* %217, align 4, !alias.scope !2, !noalias !5
  br label %218

218:                                              ; preds = %195, %198
  %219 = icmp eq i64 %142, %118
  br i1 %219, label %257, label %220

220:                                              ; preds = %218, %120, %116
  %221 = phi i64 [ 0, %120 ], [ 0, %116 ], [ %142, %218 ]
  %222 = xor i64 %221, -1
  %223 = and i64 %118, 1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %234, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds float, float* %49, i64 %221
  %227 = load float, float* %226, align 4
  %228 = add nsw i64 %221, %117
  %229 = getelementptr inbounds float, float* %49, i64 %228
  %230 = load float, float* %229, align 4
  %231 = fcmp ogt float %227, %230
  %232 = select i1 %231, float %227, float %230
  store float %232, float* %226, align 4
  %233 = or i64 %221, 1
  br label %234

234:                                              ; preds = %220, %225
  %235 = phi i64 [ %221, %220 ], [ %233, %225 ]
  %236 = sub nsw i64 0, %118
  %237 = icmp eq i64 %222, %236
  br i1 %237, label %257, label %238

238:                                              ; preds = %234, %238
  %239 = phi i64 [ %255, %238 ], [ %235, %234 ]
  %240 = getelementptr inbounds float, float* %49, i64 %239
  %241 = load float, float* %240, align 4
  %242 = add nsw i64 %239, %117
  %243 = getelementptr inbounds float, float* %49, i64 %242
  %244 = load float, float* %243, align 4
  %245 = fcmp ogt float %241, %244
  %246 = select i1 %245, float %241, float %244
  store float %246, float* %240, align 4
  %247 = add nuw nsw i64 %239, 1
  %248 = getelementptr inbounds float, float* %49, i64 %247
  %249 = load float, float* %248, align 4
  %250 = add nsw i64 %247, %117
  %251 = getelementptr inbounds float, float* %49, i64 %250
  %252 = load float, float* %251, align 4
  %253 = fcmp ogt float %249, %252
  %254 = select i1 %253, float %249, float %252
  store float %254, float* %248, align 4
  %255 = add nuw nsw i64 %239, 2
  %256 = icmp eq i64 %255, %118
  br i1 %256, label %257, label %238, !llvm.loop !9

257:                                              ; preds = %234, %238, %218, %111
  %258 = shl nsw i32 %2, 3
  %259 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %112, i64 0, i32 5
  %260 = load i32, i32* %259, align 8
  %261 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %112, i64 0, i32 7
  %262 = load i32, i32* %261, align 8
  %263 = call i32 @llvm.ctlz.i32(i32 %262, i1 true) #4, !range !10
  %264 = or i32 %263, -32
  %265 = add i32 %264, %260
  %266 = icmp slt i32 %265, %258
  br i1 %266, label %267, label %276

267:                                              ; preds = %257
  %268 = icmp eq i32 %265, 1
  br i1 %268, label %269, label %280

269:                                              ; preds = %267
  %270 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 15) #4
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %280, label %272

272:                                              ; preds = %269
  %273 = load i32, i32* %261, align 8
  %274 = call i32 @llvm.ctlz.i32(i32 %273, i1 true) #4, !range !10
  %275 = or i32 %274, -32
  br label %276

276:                                              ; preds = %272, %257
  %277 = phi i32 [ %275, %272 ], [ %264, %257 ]
  %278 = phi i32 [ %270, %272 ], [ 1, %257 ]
  %279 = sub i32 %258, %277
  store i32 %279, i32* %259, align 8
  br label %280

280:                                              ; preds = %269, %267, %276
  %281 = phi i1 [ true, %276 ], [ false, %269 ], [ false, %267 ]
  %282 = phi i32 [ %278, %276 ], [ 0, %269 ], [ 0, %267 ]
  %283 = phi i32 [ %258, %276 ], [ 1, %269 ], [ %265, %267 ]
  %284 = icmp ne i32 %37, 0
  %285 = add nsw i32 %283, 16
  %286 = icmp sgt i32 %285, %258
  %287 = or i1 %284, %286
  br i1 %287, label %322, label %288

288:                                              ; preds = %280
  %289 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 1) #4
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %313, label %291

291:                                              ; preds = %288
  %292 = call i32 @ec_dec_uint(%struct.ec_ctx* %112, i32 6) #4
  %293 = shl i32 16, %292
  %294 = add nsw i32 %292, 4
  %295 = call i32 @ec_dec_bits(%struct.ec_ctx* %112, i32 %294) #4
  %296 = add i32 %295, -1
  %297 = add i32 %296, %293
  %298 = call i32 @ec_dec_bits(%struct.ec_ctx* %112, i32 3) #4
  %299 = load i32, i32* %259, align 8
  %300 = load i32, i32* %261, align 8
  %301 = call i32 @llvm.ctlz.i32(i32 %300, i1 true) #4, !range !10
  %302 = or i32 %301, -32
  %303 = add i32 %299, 2
  %304 = add i32 %303, %302
  %305 = icmp sgt i32 %304, %258
  br i1 %305, label %308, label %306

306:                                              ; preds = %291
  %307 = call i32 @ec_dec_icdf(%struct.ec_ctx* %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @tapset_icdf, i64 0, i64 0), i32 2) #4
  br label %308

308:                                              ; preds = %291, %306
  %309 = phi i32 [ %307, %306 ], [ 0, %291 ]
  %310 = add nsw i32 %298, 1
  %311 = sitofp i32 %310 to float
  %312 = fmul float %311, 9.375000e-02
  br label %313

313:                                              ; preds = %288, %308
  %314 = phi i32 [ %297, %308 ], [ 0, %288 ]
  %315 = phi float [ %312, %308 ], [ 0.000000e+00, %288 ]
  %316 = phi i32 [ %309, %308 ], [ 0, %288 ]
  %317 = load i32, i32* %259, align 8
  %318 = load i32, i32* %261, align 8
  %319 = call i32 @llvm.ctlz.i32(i32 %318, i1 true) #4, !range !10
  %320 = or i32 %319, -32
  %321 = add i32 %320, %317
  br label %322

322:                                              ; preds = %280, %313
  %323 = phi i32 [ %314, %313 ], [ 0, %280 ]
  %324 = phi float [ %315, %313 ], [ 0.000000e+00, %280 ]
  %325 = phi i32 [ %321, %313 ], [ %283, %280 ]
  %326 = phi i32 [ %316, %313 ], [ 0, %280 ]
  %327 = icmp eq i32 %62, 0
  %328 = add nsw i32 %325, 3
  %329 = icmp sgt i32 %328, %258
  %330 = or i1 %327, %329
  br i1 %330, label %339, label %331

331:                                              ; preds = %322
  %332 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 3) #4
  %333 = load i32, i32* %259, align 8
  %334 = load i32, i32* %261, align 8
  %335 = call i32 @llvm.ctlz.i32(i32 %334, i1 true) #4, !range !10
  %336 = or i32 %335, -32
  %337 = add i32 %336, %333
  %338 = add nsw i32 %337, 3
  br label %339

339:                                              ; preds = %322, %331
  %340 = phi i32 [ %328, %322 ], [ %338, %331 ]
  %341 = phi i32 [ 0, %322 ], [ %332, %331 ]
  %342 = icmp ne i32 %341, 0
  %343 = select i1 %342, i32 %69, i32 0
  %344 = icmp sgt i32 %340, %258
  br i1 %344, label %347, label %345

345:                                              ; preds = %339
  %346 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 3) #4
  br label %347

347:                                              ; preds = %339, %345
  %348 = phi i32 [ %346, %345 ], [ 0, %339 ]
  call void @unquant_coarse_energy(%struct.OpusCustomMode* %29, i32 %37, i32 %39, float* %49, i32 %348, %struct.ec_ctx* %112, i32 %27, i32 %62) #4
  %349 = sext i32 %31 to i64
  %350 = shl nsw i64 %349, 2
  %351 = alloca i32, i64 %349, align 16
  %352 = bitcast i32* %351 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %352, i8 -86, i64 %350, i1 false)
  %353 = getelementptr inbounds %struct.ec_ctx, %struct.ec_ctx* %112, i64 0, i32 1
  %354 = load i32, i32* %353, align 8
  %355 = shl i32 %354, 3
  %356 = load i32, i32* %259, align 8
  %357 = load i32, i32* %261, align 8
  %358 = call i32 @llvm.ctlz.i32(i32 %357, i1 true) #4, !range !10
  %359 = or i32 %358, -32
  %360 = add i32 %359, %356
  %361 = select i1 %342, i32 2, i32 4
  br i1 %327, label %366, label %362

362:                                              ; preds = %347
  %363 = or i32 %361, 1
  %364 = add i32 %360, %363
  %365 = icmp ule i32 %364, %355
  br label %366

366:                                              ; preds = %347, %362
  %367 = phi i1 [ false, %347 ], [ %365, %362 ]
  %368 = zext i1 %367 to i32
  %369 = sub i32 %355, %368
  %370 = icmp slt i32 %37, %39
  br i1 %370, label %371, label %414

371:                                              ; preds = %366
  %372 = select i1 %342, i32 4, i32 5
  %373 = sext i32 %37 to i64
  %374 = add i32 %361, %360
  %375 = icmp ugt i32 %374, %369
  br i1 %375, label %383, label %376

376:                                              ; preds = %371
  %377 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 %361) #4
  %378 = load i32, i32* %259, align 8
  %379 = load i32, i32* %261, align 8
  %380 = call i32 @llvm.ctlz.i32(i32 %379, i1 true) #4, !range !10
  %381 = or i32 %380, -32
  %382 = add i32 %381, %378
  br label %383

383:                                              ; preds = %376, %371
  %384 = phi i32 [ %377, %376 ], [ 0, %371 ]
  %385 = phi i32 [ %382, %376 ], [ %360, %371 ]
  %386 = getelementptr inbounds i32, i32* %351, i64 %373
  store i32 %384, i32* %386, align 4
  %387 = add nsw i64 %373, 1
  %388 = trunc i64 %387 to i32
  %389 = icmp eq i32 %39, %388
  br i1 %389, label %414, label %390

390:                                              ; preds = %383, %406
  %391 = phi i64 [ %411, %406 ], [ %387, %383 ]
  %392 = phi i32 [ %409, %406 ], [ %385, %383 ]
  %393 = phi i32 [ %408, %406 ], [ %384, %383 ]
  %394 = phi i32 [ %407, %406 ], [ %384, %383 ]
  %395 = add i32 %372, %392
  %396 = icmp ugt i32 %395, %369
  br i1 %396, label %406, label %397

397:                                              ; preds = %390
  %398 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 %372) #4
  %399 = xor i32 %398, %394
  %400 = load i32, i32* %259, align 8
  %401 = load i32, i32* %261, align 8
  %402 = call i32 @llvm.ctlz.i32(i32 %401, i1 true) #4, !range !10
  %403 = or i32 %402, -32
  %404 = add i32 %403, %400
  %405 = or i32 %399, %393
  br label %406

406:                                              ; preds = %397, %390
  %407 = phi i32 [ %399, %397 ], [ %394, %390 ]
  %408 = phi i32 [ %405, %397 ], [ %393, %390 ]
  %409 = phi i32 [ %404, %397 ], [ %392, %390 ]
  %410 = getelementptr inbounds i32, i32* %351, i64 %391
  store i32 %407, i32* %410, align 4
  %411 = add nsw i64 %391, 1
  %412 = trunc i64 %411 to i32
  %413 = icmp eq i32 %39, %412
  br i1 %413, label %414, label %390, !llvm.loop !11

414:                                              ; preds = %383, %406, %366
  %415 = phi i32 [ 0, %366 ], [ %384, %383 ], [ %408, %406 ]
  br i1 %367, label %416, label %432

416:                                              ; preds = %414
  %417 = zext i32 %62 to i64
  %418 = shl nsw i32 %341, 2
  %419 = add nsw i32 %415, %418
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %417, i64 %420
  %422 = load i8, i8* %421, align 1
  %423 = or i32 %418, 2
  %424 = add nsw i32 %415, %423
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %417, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = icmp eq i8 %422, %427
  br i1 %428, label %432, label %429

429:                                              ; preds = %416
  %430 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 1) #4
  %431 = shl i32 %430, 1
  br label %432

432:                                              ; preds = %429, %416, %414
  %433 = phi i32 [ %431, %429 ], [ 0, %416 ], [ 0, %414 ]
  br i1 %370, label %434, label %476

434:                                              ; preds = %432
  %435 = zext i32 %62 to i64
  %436 = shl i32 %341, 2
  %437 = add nsw i32 %433, %436
  %438 = sext i32 %37 to i64
  %439 = sext i32 %39 to i64
  %440 = sub nsw i64 %439, %438
  %441 = xor i64 %438, -1
  %442 = and i64 %440, 1
  %443 = icmp eq i64 %442, 0
  br i1 %443, label %453, label %444

444:                                              ; preds = %434
  %445 = getelementptr inbounds i32, i32* %351, i64 %438
  %446 = load i32, i32* %445, align 4
  %447 = add nsw i32 %437, %446
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %435, i64 %448
  %450 = load i8, i8* %449, align 1
  %451 = sext i8 %450 to i32
  store i32 %451, i32* %445, align 4
  %452 = add nsw i64 %438, 1
  br label %453

453:                                              ; preds = %434, %444
  %454 = phi i64 [ %438, %434 ], [ %452, %444 ]
  %455 = sub nsw i64 0, %439
  %456 = icmp eq i64 %441, %455
  br i1 %456, label %476, label %457

457:                                              ; preds = %453, %457
  %458 = phi i64 [ %474, %457 ], [ %454, %453 ]
  %459 = getelementptr inbounds i32, i32* %351, i64 %458
  %460 = load i32, i32* %459, align 4
  %461 = add nsw i32 %437, %460
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %435, i64 %462
  %464 = load i8, i8* %463, align 1
  %465 = sext i8 %464 to i32
  store i32 %465, i32* %459, align 4
  %466 = add nsw i64 %458, 1
  %467 = getelementptr inbounds i32, i32* %351, i64 %466
  %468 = load i32, i32* %467, align 4
  %469 = add nsw i32 %437, %468
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds [4 x [8 x i8]], [4 x [8 x i8]]* @tf_select_table, i64 0, i64 %435, i64 %470
  %472 = load i8, i8* %471, align 1
  %473 = sext i8 %472 to i32
  store i32 %473, i32* %467, align 4
  %474 = add nsw i64 %458, 2
  %475 = icmp eq i64 %474, %439
  br i1 %475, label %476, label %457

476:                                              ; preds = %453, %457, %432
  %477 = load i32, i32* %259, align 8
  %478 = load i32, i32* %261, align 8
  %479 = call i32 @llvm.ctlz.i32(i32 %478, i1 true) #4, !range !10
  %480 = or i32 %479, -32
  %481 = add i32 %477, 4
  %482 = add i32 %481, %480
  %483 = icmp sgt i32 %482, %258
  br i1 %483, label %486, label %484

484:                                              ; preds = %476
  %485 = call i32 @ec_dec_icdf(%struct.ec_ctx* %112, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @spread_icdf, i64 0, i64 0), i32 5) #4
  br label %486

486:                                              ; preds = %476, %484
  %487 = phi i32 [ %485, %484 ], [ 2, %476 ]
  %488 = alloca i32, i64 %349, align 16
  %489 = bitcast i32* %488 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %489, i8 -86, i64 %350, i1 false)
  call void @init_caps(%struct.OpusCustomMode* %29, i32* nonnull %488, i32 %62, i32 %27) #4
  %490 = alloca i32, i64 %349, align 16
  %491 = bitcast i32* %490 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %491, i8 -86, i64 %350, i1 false)
  %492 = shl i32 %2, 6
  %493 = call i32 @ec_tell_frac(%struct.ec_ctx* %112) #4
  br i1 %370, label %494, label %556

494:                                              ; preds = %486
  %495 = sext i32 %37 to i64
  %496 = sext i32 %39 to i64
  br label %497

497:                                              ; preds = %551, %494
  %498 = phi i64 [ %495, %494 ], [ %502, %551 ]
  %499 = phi i32 [ 6, %494 ], [ %554, %551 ]
  %500 = phi i32 [ %493, %494 ], [ %552, %551 ]
  %501 = phi i32 [ %492, %494 ], [ %553, %551 ]
  %502 = add nsw i64 %498, 1
  %503 = getelementptr inbounds i16, i16* %35, i64 %502
  %504 = load i16, i16* %503, align 2
  %505 = sext i16 %504 to i32
  %506 = getelementptr inbounds i16, i16* %35, i64 %498
  %507 = load i16, i16* %506, align 2
  %508 = sext i16 %507 to i32
  %509 = sub nsw i32 %505, %508
  %510 = mul nsw i32 %509, %27
  %511 = shl i32 %510, %62
  %512 = shl i32 %511, 3
  %513 = icmp sgt i32 %511, 48
  %514 = select i1 %513, i32 %511, i32 48
  %515 = icmp slt i32 %512, %514
  %516 = select i1 %515, i32 %512, i32 %514
  %517 = getelementptr inbounds i32, i32* %488, i64 %498
  %518 = shl i32 %499, 3
  %519 = add nsw i32 %518, %500
  %520 = icmp slt i32 %519, %501
  br i1 %520, label %521, label %524

521:                                              ; preds = %497
  %522 = load i32, i32* %517, align 4
  %523 = icmp sgt i32 %522, 0
  br i1 %523, label %529, label %541

524:                                              ; preds = %497
  %525 = getelementptr inbounds i32, i32* %490, i64 %498
  store i32 0, i32* %525, align 4
  br label %551

526:                                              ; preds = %536
  %527 = load i32, i32* %517, align 4
  %528 = icmp slt i32 %537, %527
  br i1 %528, label %529, label %541

529:                                              ; preds = %521, %526
  %530 = phi i32 [ %538, %526 ], [ %501, %521 ]
  %531 = phi i32 [ 1, %526 ], [ %499, %521 ]
  %532 = phi i32 [ %537, %526 ], [ 0, %521 ]
  %533 = call i32 @ec_dec_bit_logp(%struct.ec_ctx* %112, i32 %531) #4
  %534 = call i32 @ec_tell_frac(%struct.ec_ctx* %112) #4
  %535 = icmp eq i32 %533, 0
  br i1 %535, label %541, label %536

536:                                              ; preds = %529
  %537 = add nsw i32 %532, %516
  %538 = sub nsw i32 %530, %516
  %539 = add nsw i32 %534, 8
  %540 = icmp slt i32 %539, %538
  br i1 %540, label %526, label %541

541:                                              ; preds = %529, %536, %526, %521
  %542 = phi i32 [ %501, %521 ], [ %530, %529 ], [ %538, %536 ], [ %538, %526 ]
  %543 = phi i32 [ 0, %521 ], [ %532, %529 ], [ %537, %536 ], [ %537, %526 ]
  %544 = phi i32 [ %500, %521 ], [ %534, %526 ], [ %534, %536 ], [ %534, %529 ]
  %545 = getelementptr inbounds i32, i32* %490, i64 %498
  store i32 %543, i32* %545, align 4
  %546 = icmp sgt i32 %543, 0
  br i1 %546, label %547, label %551

547:                                              ; preds = %541
  %548 = icmp sgt i32 %499, 3
  %549 = select i1 %548, i32 %499, i32 3
  %550 = add nsw i32 %549, -1
  br label %551

551:                                              ; preds = %524, %547, %541
  %552 = phi i32 [ %544, %547 ], [ %544, %541 ], [ %500, %524 ]
  %553 = phi i32 [ %542, %547 ], [ %542, %541 ], [ %501, %524 ]
  %554 = phi i32 [ %550, %547 ], [ %499, %541 ], [ %499, %524 ]
  %555 = icmp eq i64 %502, %496
  br i1 %555, label %556, label %497

556:                                              ; preds = %551, %486
  %557 = phi i32 [ %492, %486 ], [ %553, %551 ]
  %558 = phi i32 [ %493, %486 ], [ %552, %551 ]
  %559 = alloca i32, i64 %349, align 16
  %560 = bitcast i32* %559 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %560, i8 -86, i64 %350, i1 false)
  %561 = add nsw i32 %558, 48
  %562 = icmp sgt i32 %561, %557
  br i1 %562, label %565, label %563

563:                                              ; preds = %556
  %564 = call i32 @ec_dec_icdf(%struct.ec_ctx* %112, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @trim_icdf, i64 0, i64 0), i32 7) #4
  br label %565

565:                                              ; preds = %556, %563
  %566 = phi i32 [ %564, %563 ], [ 5, %556 ]
  %567 = call i32 @ec_tell_frac(%struct.ec_ctx* %112) #4
  %568 = xor i32 %567, -1
  %569 = add i32 %492, %568
  %570 = icmp ugt i32 %62, 1
  %571 = and i1 %570, %342
  br i1 %571, label %572, label %577

572:                                              ; preds = %565
  %573 = shl i32 %62, 3
  %574 = add i32 %573, 16
  %575 = icmp sge i32 %569, %574
  %576 = select i1 %575, i32 8, i32 0
  br label %577

577:                                              ; preds = %572, %565
  %578 = phi i1 [ false, %565 ], [ %575, %572 ]
  %579 = phi i32 [ 0, %565 ], [ %576, %572 ]
  %580 = sub nsw i32 %569, %579
  %581 = alloca i32, i64 %349, align 16
  %582 = bitcast i32* %581 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %582, i8 -86, i64 %350, i1 false)
  %583 = alloca i32, i64 %349, align 16
  %584 = bitcast i32* %583 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %584, i8 -86, i64 %350, i1 false)
  %585 = call i32 @clt_compute_allocation(%struct.OpusCustomMode* %29, i32 %37, i32 %39, i32* nonnull %490, i32* nonnull %488, i32 %566, i32* nonnull %12, i32* nonnull %13, i32 %580, i32* nonnull %14, i32* nonnull %581, i32* nonnull %559, i32* nonnull %583, i32 %27, i32 %62, %struct.ec_ctx* %112, i32 0, i32 0, i32 0) #4
  call void @unquant_fine_energy(%struct.OpusCustomMode* %29, i32 %37, i32 %39, float* %49, i32* nonnull %559, %struct.ec_ctx* %112, i32 %27) #4
  %586 = sdiv i32 %33, 2
  %587 = add nsw i32 %586, 2048
  %588 = sub i32 %587, %42
  %589 = sext i32 %588 to i64
  %590 = shl nsw i64 %589, 2
  br label %591

591:                                              ; preds = %591, %577
  %592 = phi i64 [ %598, %591 ], [ 0, %577 ]
  %593 = getelementptr inbounds [2 x float*], [2 x float*]* %10, i64 0, i64 %592
  %594 = load float*, float** %593, align 8
  %595 = bitcast float* %594 to i8*
  %596 = getelementptr inbounds float, float* %594, i64 %74
  %597 = bitcast float* %596 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %595, i8* align 4 %597, i64 %590, i1 false)
  %598 = add nuw nsw i64 %592, 1
  %599 = icmp slt i64 %598, %76
  br i1 %599, label %591, label %600

600:                                              ; preds = %591
  %601 = mul i32 %31, %27
  %602 = sext i32 %601 to i64
  %603 = alloca i8, i64 %602, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %603, i8 -86, i64 %602, i1 false)
  %604 = mul nsw i32 %42, %27
  %605 = sext i32 %604 to i64
  %606 = shl nsw i64 %605, 2
  %607 = alloca float, i64 %605, align 16
  %608 = bitcast float* %607 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %608, i8 -86, i64 %606, i1 false)
  %609 = icmp eq i32 %27, 2
  %610 = getelementptr inbounds float, float* %607, i64 %74
  %611 = select i1 %609, float* %610, float* null
  %612 = load i32, i32* %13, align 4
  %613 = load i32, i32* %12, align 4
  %614 = sub nsw i32 %492, %579
  %615 = load i32, i32* %14, align 4
  %616 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 10
  %617 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  %618 = load i32, i32* %617, align 8
  %619 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 8
  %620 = load i32, i32* %619, align 4
  call void @quant_all_bands(i32 0, %struct.OpusCustomMode* %29, i32 %37, i32 %39, float* nonnull %607, float* %611, i8* nonnull %603, float* null, i32* nonnull %581, i32 %343, i32 %487, i32 %612, i32 %613, i32* nonnull %351, i32 %614, i32 %615, %struct.ec_ctx* %112, i32 %62, i32 %585, i32* %616, i32 0, i32 %618, i32 %620) #4
  br i1 %578, label %621, label %633

621:                                              ; preds = %600
  %622 = call i32 @ec_dec_bits(%struct.ec_ctx* %112, i32 1) #4
  %623 = icmp eq i32 %622, 0
  %624 = load i32, i32* %259, align 8
  %625 = load i32, i32* %261, align 8
  %626 = call i32 @llvm.ctlz.i32(i32 %625, i1 true) #4, !range !10
  %627 = or i32 %626, -32
  %628 = sub i32 %258, %624
  %629 = sub i32 %628, %627
  call void @unquant_energy_finalise(%struct.OpusCustomMode* %29, i32 %37, i32 %39, float* %49, i32* nonnull %559, i32* nonnull %583, i32 %629, %struct.ec_ctx* %112, i32 %27) #4
  br i1 %623, label %640, label %630

630:                                              ; preds = %621
  %631 = load i32, i32* %616, align 4
  %632 = load i32, i32* %617, align 8
  call void @anti_collapse(%struct.OpusCustomMode* %29, float* nonnull %607, i8* nonnull %603, i32 %62, i32 %27, i32 %42, i32 %37, i32 %39, float* %49, float* %52, float* %53, i32* nonnull %581, i32 %631, i32 %632) #4
  br label %640

633:                                              ; preds = %600
  %634 = load i32, i32* %259, align 8
  %635 = load i32, i32* %261, align 8
  %636 = call i32 @llvm.ctlz.i32(i32 %635, i1 true) #4, !range !10
  %637 = or i32 %636, -32
  %638 = sub i32 %258, %634
  %639 = sub i32 %638, %637
  call void @unquant_energy_finalise(%struct.OpusCustomMode* %29, i32 %37, i32 %39, float* %49, i32* nonnull %559, i32* nonnull %583, i32 %639, %struct.ec_ctx* %112, i32 %27) #4
  br label %640

640:                                              ; preds = %621, %633, %630
  br i1 %281, label %641, label %722

641:                                              ; preds = %640
  %642 = icmp sgt i32 %601, 0
  br i1 %642, label %643, label %722

643:                                              ; preds = %641
  %644 = zext i32 %601 to i64
  %645 = icmp ult i32 %601, 8
  br i1 %645, label %715, label %646

646:                                              ; preds = %643
  %647 = and i64 %644, 4294967288
  %648 = add nsw i64 %647, -8
  %649 = lshr exact i64 %648, 3
  %650 = add nuw nsw i64 %649, 1
  %651 = and i64 %650, 7
  %652 = icmp ult i64 %648, 56
  br i1 %652, label %700, label %653

653:                                              ; preds = %646
  %654 = sub nsw i64 %650, %651
  br label %655

655:                                              ; preds = %655, %653
  %656 = phi i64 [ 0, %653 ], [ %697, %655 ]
  %657 = phi i64 [ %654, %653 ], [ %698, %655 ]
  %658 = getelementptr inbounds float, float* %49, i64 %656
  %659 = bitcast float* %658 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %659, align 4
  %660 = getelementptr inbounds float, float* %658, i64 4
  %661 = bitcast float* %660 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %661, align 4
  %662 = or i64 %656, 8
  %663 = getelementptr inbounds float, float* %49, i64 %662
  %664 = bitcast float* %663 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %664, align 4
  %665 = getelementptr inbounds float, float* %663, i64 4
  %666 = bitcast float* %665 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %666, align 4
  %667 = or i64 %656, 16
  %668 = getelementptr inbounds float, float* %49, i64 %667
  %669 = bitcast float* %668 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %669, align 4
  %670 = getelementptr inbounds float, float* %668, i64 4
  %671 = bitcast float* %670 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %671, align 4
  %672 = or i64 %656, 24
  %673 = getelementptr inbounds float, float* %49, i64 %672
  %674 = bitcast float* %673 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %674, align 4
  %675 = getelementptr inbounds float, float* %673, i64 4
  %676 = bitcast float* %675 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %676, align 4
  %677 = or i64 %656, 32
  %678 = getelementptr inbounds float, float* %49, i64 %677
  %679 = bitcast float* %678 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %679, align 4
  %680 = getelementptr inbounds float, float* %678, i64 4
  %681 = bitcast float* %680 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %681, align 4
  %682 = or i64 %656, 40
  %683 = getelementptr inbounds float, float* %49, i64 %682
  %684 = bitcast float* %683 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %684, align 4
  %685 = getelementptr inbounds float, float* %683, i64 4
  %686 = bitcast float* %685 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %686, align 4
  %687 = or i64 %656, 48
  %688 = getelementptr inbounds float, float* %49, i64 %687
  %689 = bitcast float* %688 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %689, align 4
  %690 = getelementptr inbounds float, float* %688, i64 4
  %691 = bitcast float* %690 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %691, align 4
  %692 = or i64 %656, 56
  %693 = getelementptr inbounds float, float* %49, i64 %692
  %694 = bitcast float* %693 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %694, align 4
  %695 = getelementptr inbounds float, float* %693, i64 4
  %696 = bitcast float* %695 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %696, align 4
  %697 = add i64 %656, 64
  %698 = add i64 %657, -8
  %699 = icmp eq i64 %698, 0
  br i1 %699, label %700, label %655, !llvm.loop !13

700:                                              ; preds = %655, %646
  %701 = phi i64 [ 0, %646 ], [ %697, %655 ]
  %702 = icmp eq i64 %651, 0
  br i1 %702, label %713, label %703

703:                                              ; preds = %700, %703
  %704 = phi i64 [ %710, %703 ], [ %701, %700 ]
  %705 = phi i64 [ %711, %703 ], [ %651, %700 ]
  %706 = getelementptr inbounds float, float* %49, i64 %704
  %707 = bitcast float* %706 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %707, align 4
  %708 = getelementptr inbounds float, float* %706, i64 4
  %709 = bitcast float* %708 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %709, align 4
  %710 = add i64 %704, 8
  %711 = add i64 %705, -1
  %712 = icmp eq i64 %711, 0
  br i1 %712, label %713, label %703, !llvm.loop !14

713:                                              ; preds = %703, %700
  %714 = icmp eq i64 %647, %644
  br i1 %714, label %722, label %715

715:                                              ; preds = %713, %643
  %716 = phi i64 [ 0, %643 ], [ %647, %713 ]
  br label %717

717:                                              ; preds = %715, %717
  %718 = phi i64 [ %720, %717 ], [ %716, %715 ]
  %719 = getelementptr inbounds float, float* %49, i64 %718
  store float -2.800000e+01, float* %719, align 4
  %720 = add nuw nsw i64 %718, 1
  %721 = icmp eq i64 %720, %644
  br i1 %721, label %722, label %717, !llvm.loop !15

722:                                              ; preds = %717, %641, %713, %640
  %723 = phi i32 [ 0, %640 ], [ %282, %713 ], [ %282, %641 ], [ %282, %717 ]
  %724 = load i32, i32* %40, align 4
  %725 = load i32, i32* %617, align 8
  call fastcc void @celt_synthesis(%struct.OpusCustomMode* %29, float* nonnull %607, float** nonnull %19, float* %49, i32 %37, i32 %93, i32 %27, i32 %22, i32 %341, i32 %62, i32 %724, i32 %723, i32 %725)
  %726 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 15
  %727 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 16
  %728 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 18
  %729 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 17
  %730 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 20
  %731 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 19
  %732 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 12
  %733 = icmp ne i32 %62, 0
  br i1 %733, label %734, label %762

734:                                              ; preds = %722, %734
  %735 = phi i64 [ %760, %734 ], [ 0, %722 ]
  %736 = load i32, i32* %726, align 8
  %737 = icmp sgt i32 %736, 15
  %738 = select i1 %737, i32 %736, i32 15
  store i32 %738, i32* %726, align 8
  %739 = load i32, i32* %727, align 4
  %740 = icmp sgt i32 %739, 15
  %741 = select i1 %740, i32 %739, i32 15
  store i32 %741, i32* %727, align 4
  %742 = getelementptr inbounds [2 x float*], [2 x float*]* %11, i64 0, i64 %735
  %743 = load float*, float** %742, align 8
  %744 = load i32, i32* %59, align 8
  %745 = load float, float* %728, align 4
  %746 = load float, float* %729, align 8
  %747 = load i32, i32* %730, align 4
  %748 = load i32, i32* %731, align 8
  %749 = load float*, float** %732, align 8
  %750 = load i32, i32* %617, align 8
  call void @comb_filter(float* %743, float* %743, i32 %741, i32 %738, i32 %744, float %745, float %746, i32 %747, i32 %748, float* %749, i32 %33, i32 %750) #4
  %751 = load i32, i32* %59, align 8
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds float, float* %743, i64 %752
  %754 = load i32, i32* %726, align 8
  %755 = sub nsw i32 %42, %751
  %756 = load float, float* %729, align 8
  %757 = load i32, i32* %731, align 8
  %758 = load float*, float** %732, align 8
  %759 = load i32, i32* %617, align 8
  call void @comb_filter(float* %753, float* %753, i32 %754, i32 %323, i32 %755, float %756, float %324, i32 %757, i32 %326, float* %758, i32 %33, i32 %759) #4
  %760 = add nuw nsw i64 %735, 1
  %761 = icmp slt i64 %760, %76
  br i1 %761, label %734, label %781

762:                                              ; preds = %722, %762
  %763 = phi i64 [ %779, %762 ], [ 0, %722 ]
  %764 = load i32, i32* %726, align 8
  %765 = icmp sgt i32 %764, 15
  %766 = select i1 %765, i32 %764, i32 15
  store i32 %766, i32* %726, align 8
  %767 = load i32, i32* %727, align 4
  %768 = icmp sgt i32 %767, 15
  %769 = select i1 %768, i32 %767, i32 15
  store i32 %769, i32* %727, align 4
  %770 = getelementptr inbounds [2 x float*], [2 x float*]* %11, i64 0, i64 %763
  %771 = load float*, float** %770, align 8
  %772 = load i32, i32* %59, align 8
  %773 = load float, float* %728, align 4
  %774 = load float, float* %729, align 8
  %775 = load i32, i32* %730, align 4
  %776 = load i32, i32* %731, align 8
  %777 = load float*, float** %732, align 8
  %778 = load i32, i32* %617, align 8
  call void @comb_filter(float* %771, float* %771, i32 %769, i32 %766, i32 %772, float %773, float %774, i32 %775, i32 %776, float* %777, i32 %33, i32 %778) #4
  %779 = add nuw nsw i64 %763, 1
  %780 = icmp slt i64 %779, %76
  br i1 %780, label %762, label %781

781:                                              ; preds = %762, %734
  %782 = load i32, i32* %726, align 8
  store i32 %782, i32* %727, align 4
  %783 = bitcast float* %729 to i32*
  %784 = load i32, i32* %783, align 8
  %785 = bitcast float* %728 to i32*
  store i32 %784, i32* %785, align 4
  %786 = load i32, i32* %731, align 8
  store i32 %786, i32* %730, align 4
  store i32 %323, i32* %726, align 8
  store float %324, float* %729, align 8
  store i32 %326, i32* %731, align 8
  br i1 %733, label %787, label %788

787:                                              ; preds = %781
  store i32 %323, i32* %727, align 4
  store float %324, float* %728, align 4
  store i32 %326, i32* %730, align 4
  br label %788

788:                                              ; preds = %787, %781
  br i1 %113, label %789, label %793

789:                                              ; preds = %788
  %790 = getelementptr inbounds float, float* %49, i64 %349
  %791 = bitcast float* %790 to i8*
  %792 = bitcast float* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %791, i8* align 4 %792, i64 %350, i1 false)
  br label %793

793:                                              ; preds = %789, %788
  br i1 %342, label %794, label %903

794:                                              ; preds = %793
  br i1 %114, label %795, label %1052

795:                                              ; preds = %794
  %796 = icmp sgt i64 %51, 1
  %797 = select i1 %796, i64 %51, i64 1
  %798 = icmp ult i64 %797, 8
  br i1 %798, label %799, label %801

799:                                              ; preds = %901, %801, %795
  %800 = phi i64 [ 0, %801 ], [ 0, %795 ], [ %828, %901 ]
  br label %1042

801:                                              ; preds = %795
  %802 = shl nsw i64 %45, 2
  %803 = shl nsw i64 %48, 2
  %804 = add nsw i64 %802, %803
  %805 = shl nsw i64 %51, 2
  %806 = add nsw i64 %804, %805
  %807 = add nsw i64 %806, 96
  %808 = getelementptr i8, i8* %8, i64 %807
  %809 = icmp sgt i64 %51, 1
  %810 = select i1 %809, i64 %51, i64 1
  %811 = shl nsw i64 %810, 2
  %812 = add nsw i64 %811, %802
  %813 = add nsw i64 %812, %803
  %814 = add nsw i64 %813, %805
  %815 = add nsw i64 %814, 96
  %816 = getelementptr i8, i8* %8, i64 %815
  %817 = add nsw i64 %802, %803
  %818 = add nsw i64 %817, 96
  %819 = getelementptr i8, i8* %8, i64 %818
  %820 = add nsw i64 %811, %802
  %821 = add nsw i64 %820, %803
  %822 = add nsw i64 %821, 96
  %823 = getelementptr i8, i8* %8, i64 %822
  %824 = icmp ult i8* %808, %823
  %825 = icmp ult i8* %819, %816
  %826 = and i1 %824, %825
  br i1 %826, label %799, label %827

827:                                              ; preds = %801
  %828 = and i64 %797, 9223372036854775800
  %829 = add nsw i64 %828, -8
  %830 = lshr exact i64 %829, 3
  %831 = add nuw nsw i64 %830, 1
  %832 = and i64 %831, 1
  %833 = icmp eq i64 %829, 0
  br i1 %833, label %879, label %834

834:                                              ; preds = %827
  %835 = sub nuw nsw i64 %831, %832
  br label %836

836:                                              ; preds = %836, %834
  %837 = phi i64 [ 0, %834 ], [ %876, %836 ]
  %838 = phi i64 [ %835, %834 ], [ %877, %836 ]
  %839 = getelementptr inbounds float, float* %52, i64 %837
  %840 = bitcast float* %839 to <4 x float>*
  %841 = load <4 x float>, <4 x float>* %840, align 4, !alias.scope !17, !noalias !20
  %842 = getelementptr inbounds float, float* %839, i64 4
  %843 = bitcast float* %842 to <4 x float>*
  %844 = load <4 x float>, <4 x float>* %843, align 4, !alias.scope !17, !noalias !20
  %845 = getelementptr inbounds float, float* %49, i64 %837
  %846 = bitcast float* %845 to <4 x float>*
  %847 = load <4 x float>, <4 x float>* %846, align 4, !alias.scope !20
  %848 = getelementptr inbounds float, float* %845, i64 4
  %849 = bitcast float* %848 to <4 x float>*
  %850 = load <4 x float>, <4 x float>* %849, align 4, !alias.scope !20
  %851 = fcmp olt <4 x float> %841, %847
  %852 = fcmp olt <4 x float> %844, %850
  %853 = select <4 x i1> %851, <4 x float> %841, <4 x float> %847
  %854 = select <4 x i1> %852, <4 x float> %844, <4 x float> %850
  %855 = bitcast float* %839 to <4 x float>*
  store <4 x float> %853, <4 x float>* %855, align 4, !alias.scope !17, !noalias !20
  %856 = bitcast float* %842 to <4 x float>*
  store <4 x float> %854, <4 x float>* %856, align 4, !alias.scope !17, !noalias !20
  %857 = or i64 %837, 8
  %858 = getelementptr inbounds float, float* %52, i64 %857
  %859 = bitcast float* %858 to <4 x float>*
  %860 = load <4 x float>, <4 x float>* %859, align 4, !alias.scope !17, !noalias !20
  %861 = getelementptr inbounds float, float* %858, i64 4
  %862 = bitcast float* %861 to <4 x float>*
  %863 = load <4 x float>, <4 x float>* %862, align 4, !alias.scope !17, !noalias !20
  %864 = getelementptr inbounds float, float* %49, i64 %857
  %865 = bitcast float* %864 to <4 x float>*
  %866 = load <4 x float>, <4 x float>* %865, align 4, !alias.scope !20
  %867 = getelementptr inbounds float, float* %864, i64 4
  %868 = bitcast float* %867 to <4 x float>*
  %869 = load <4 x float>, <4 x float>* %868, align 4, !alias.scope !20
  %870 = fcmp olt <4 x float> %860, %866
  %871 = fcmp olt <4 x float> %863, %869
  %872 = select <4 x i1> %870, <4 x float> %860, <4 x float> %866
  %873 = select <4 x i1> %871, <4 x float> %863, <4 x float> %869
  %874 = bitcast float* %858 to <4 x float>*
  store <4 x float> %872, <4 x float>* %874, align 4, !alias.scope !17, !noalias !20
  %875 = bitcast float* %861 to <4 x float>*
  store <4 x float> %873, <4 x float>* %875, align 4, !alias.scope !17, !noalias !20
  %876 = add i64 %837, 16
  %877 = add i64 %838, -2
  %878 = icmp eq i64 %877, 0
  br i1 %878, label %879, label %836, !llvm.loop !22

879:                                              ; preds = %836, %827
  %880 = phi i64 [ 0, %827 ], [ %876, %836 ]
  %881 = icmp eq i64 %832, 0
  br i1 %881, label %901, label %882

882:                                              ; preds = %879
  %883 = getelementptr inbounds float, float* %52, i64 %880
  %884 = bitcast float* %883 to <4 x float>*
  %885 = load <4 x float>, <4 x float>* %884, align 4, !alias.scope !17, !noalias !20
  %886 = getelementptr inbounds float, float* %883, i64 4
  %887 = bitcast float* %886 to <4 x float>*
  %888 = load <4 x float>, <4 x float>* %887, align 4, !alias.scope !17, !noalias !20
  %889 = getelementptr inbounds float, float* %49, i64 %880
  %890 = bitcast float* %889 to <4 x float>*
  %891 = load <4 x float>, <4 x float>* %890, align 4, !alias.scope !20
  %892 = getelementptr inbounds float, float* %889, i64 4
  %893 = bitcast float* %892 to <4 x float>*
  %894 = load <4 x float>, <4 x float>* %893, align 4, !alias.scope !20
  %895 = fcmp olt <4 x float> %885, %891
  %896 = fcmp olt <4 x float> %888, %894
  %897 = select <4 x i1> %895, <4 x float> %885, <4 x float> %891
  %898 = select <4 x i1> %896, <4 x float> %888, <4 x float> %894
  %899 = bitcast float* %883 to <4 x float>*
  store <4 x float> %897, <4 x float>* %899, align 4, !alias.scope !17, !noalias !20
  %900 = bitcast float* %886 to <4 x float>*
  store <4 x float> %898, <4 x float>* %900, align 4, !alias.scope !17, !noalias !20
  br label %901

901:                                              ; preds = %879, %882
  %902 = icmp eq i64 %797, %828
  br i1 %902, label %1052, label %799

903:                                              ; preds = %793
  %904 = bitcast float* %53 to i8*
  %905 = bitcast float* %52 to i8*
  %906 = shl nsw i64 %51, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %904, i8* align 4 %905, i64 %906, i1 false)
  %907 = bitcast float* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %905, i8* align 4 %907, i64 %906, i1 false)
  %908 = load i32, i32* %104, align 8
  %909 = icmp slt i32 %908, 10
  %910 = sitofp i32 %69 to float
  %911 = fmul float %910, 0x3F50624DE0000000
  %912 = select i1 %909, float %911, float 1.000000e+00
  br i1 %114, label %913, label %1052

913:                                              ; preds = %903
  %914 = icmp sgt i64 %51, 1
  %915 = select i1 %914, i64 %51, i64 1
  %916 = icmp ult i64 %915, 8
  br i1 %916, label %1029, label %917

917:                                              ; preds = %913
  %918 = mul nsw i64 %51, 12
  %919 = add nsw i64 %45, %48
  %920 = shl nsw i64 %919, 2
  %921 = add nsw i64 %918, %920
  %922 = add nsw i64 %921, 96
  %923 = getelementptr i8, i8* %8, i64 %922
  %924 = icmp sgt i64 %51, 1
  %925 = select i1 %924, i64 %51, i64 1
  %926 = shl nsw i64 %925, 2
  %927 = add nsw i64 %918, %926
  %928 = add nsw i64 %927, %920
  %929 = add nsw i64 %928, 96
  %930 = getelementptr i8, i8* %8, i64 %929
  %931 = shl nsw i64 %45, 2
  %932 = shl nsw i64 %48, 2
  %933 = add nsw i64 %931, %932
  %934 = add nsw i64 %933, 96
  %935 = getelementptr i8, i8* %8, i64 %934
  %936 = add nsw i64 %926, %931
  %937 = add nsw i64 %936, %932
  %938 = add nsw i64 %937, 96
  %939 = getelementptr i8, i8* %8, i64 %938
  %940 = icmp ult i8* %923, %939
  %941 = icmp ult i8* %935, %930
  %942 = and i1 %940, %941
  br i1 %942, label %1029, label %943

943:                                              ; preds = %917
  %944 = and i64 %915, 9223372036854775800
  %945 = insertelement <4 x float> undef, float %912, i32 0
  %946 = shufflevector <4 x float> %945, <4 x float> undef, <4 x i32> zeroinitializer
  %947 = insertelement <4 x float> undef, float %912, i32 0
  %948 = shufflevector <4 x float> %947, <4 x float> undef, <4 x i32> zeroinitializer
  %949 = add nsw i64 %944, -8
  %950 = lshr exact i64 %949, 3
  %951 = add nuw nsw i64 %950, 1
  %952 = and i64 %951, 1
  %953 = icmp eq i64 %949, 0
  br i1 %953, label %1003, label %954

954:                                              ; preds = %943
  %955 = sub nuw nsw i64 %951, %952
  br label %956

956:                                              ; preds = %956, %954
  %957 = phi i64 [ 0, %954 ], [ %1000, %956 ]
  %958 = phi i64 [ %955, %954 ], [ %1001, %956 ]
  %959 = getelementptr inbounds float, float* %54, i64 %957
  %960 = bitcast float* %959 to <4 x float>*
  %961 = load <4 x float>, <4 x float>* %960, align 4, !alias.scope !23, !noalias !26
  %962 = getelementptr inbounds float, float* %959, i64 4
  %963 = bitcast float* %962 to <4 x float>*
  %964 = load <4 x float>, <4 x float>* %963, align 4, !alias.scope !23, !noalias !26
  %965 = fadd <4 x float> %946, %961
  %966 = fadd <4 x float> %948, %964
  %967 = getelementptr inbounds float, float* %49, i64 %957
  %968 = bitcast float* %967 to <4 x float>*
  %969 = load <4 x float>, <4 x float>* %968, align 4, !alias.scope !26
  %970 = getelementptr inbounds float, float* %967, i64 4
  %971 = bitcast float* %970 to <4 x float>*
  %972 = load <4 x float>, <4 x float>* %971, align 4, !alias.scope !26
  %973 = fcmp olt <4 x float> %965, %969
  %974 = fcmp olt <4 x float> %966, %972
  %975 = select <4 x i1> %973, <4 x float> %965, <4 x float> %969
  %976 = select <4 x i1> %974, <4 x float> %966, <4 x float> %972
  %977 = bitcast float* %959 to <4 x float>*
  store <4 x float> %975, <4 x float>* %977, align 4, !alias.scope !23, !noalias !26
  %978 = bitcast float* %962 to <4 x float>*
  store <4 x float> %976, <4 x float>* %978, align 4, !alias.scope !23, !noalias !26
  %979 = or i64 %957, 8
  %980 = getelementptr inbounds float, float* %54, i64 %979
  %981 = bitcast float* %980 to <4 x float>*
  %982 = load <4 x float>, <4 x float>* %981, align 4, !alias.scope !23, !noalias !26
  %983 = getelementptr inbounds float, float* %980, i64 4
  %984 = bitcast float* %983 to <4 x float>*
  %985 = load <4 x float>, <4 x float>* %984, align 4, !alias.scope !23, !noalias !26
  %986 = fadd <4 x float> %946, %982
  %987 = fadd <4 x float> %948, %985
  %988 = getelementptr inbounds float, float* %49, i64 %979
  %989 = bitcast float* %988 to <4 x float>*
  %990 = load <4 x float>, <4 x float>* %989, align 4, !alias.scope !26
  %991 = getelementptr inbounds float, float* %988, i64 4
  %992 = bitcast float* %991 to <4 x float>*
  %993 = load <4 x float>, <4 x float>* %992, align 4, !alias.scope !26
  %994 = fcmp olt <4 x float> %986, %990
  %995 = fcmp olt <4 x float> %987, %993
  %996 = select <4 x i1> %994, <4 x float> %986, <4 x float> %990
  %997 = select <4 x i1> %995, <4 x float> %987, <4 x float> %993
  %998 = bitcast float* %980 to <4 x float>*
  store <4 x float> %996, <4 x float>* %998, align 4, !alias.scope !23, !noalias !26
  %999 = bitcast float* %983 to <4 x float>*
  store <4 x float> %997, <4 x float>* %999, align 4, !alias.scope !23, !noalias !26
  %1000 = add i64 %957, 16
  %1001 = add i64 %958, -2
  %1002 = icmp eq i64 %1001, 0
  br i1 %1002, label %1003, label %956, !llvm.loop !28

1003:                                             ; preds = %956, %943
  %1004 = phi i64 [ 0, %943 ], [ %1000, %956 ]
  %1005 = icmp eq i64 %952, 0
  br i1 %1005, label %1027, label %1006

1006:                                             ; preds = %1003
  %1007 = getelementptr inbounds float, float* %54, i64 %1004
  %1008 = bitcast float* %1007 to <4 x float>*
  %1009 = load <4 x float>, <4 x float>* %1008, align 4, !alias.scope !23, !noalias !26
  %1010 = getelementptr inbounds float, float* %1007, i64 4
  %1011 = bitcast float* %1010 to <4 x float>*
  %1012 = load <4 x float>, <4 x float>* %1011, align 4, !alias.scope !23, !noalias !26
  %1013 = fadd <4 x float> %946, %1009
  %1014 = fadd <4 x float> %948, %1012
  %1015 = getelementptr inbounds float, float* %49, i64 %1004
  %1016 = bitcast float* %1015 to <4 x float>*
  %1017 = load <4 x float>, <4 x float>* %1016, align 4, !alias.scope !26
  %1018 = getelementptr inbounds float, float* %1015, i64 4
  %1019 = bitcast float* %1018 to <4 x float>*
  %1020 = load <4 x float>, <4 x float>* %1019, align 4, !alias.scope !26
  %1021 = fcmp olt <4 x float> %1013, %1017
  %1022 = fcmp olt <4 x float> %1014, %1020
  %1023 = select <4 x i1> %1021, <4 x float> %1013, <4 x float> %1017
  %1024 = select <4 x i1> %1022, <4 x float> %1014, <4 x float> %1020
  %1025 = bitcast float* %1007 to <4 x float>*
  store <4 x float> %1023, <4 x float>* %1025, align 4, !alias.scope !23, !noalias !26
  %1026 = bitcast float* %1010 to <4 x float>*
  store <4 x float> %1024, <4 x float>* %1026, align 4, !alias.scope !23, !noalias !26
  br label %1027

1027:                                             ; preds = %1003, %1006
  %1028 = icmp eq i64 %915, %944
  br i1 %1028, label %1052, label %1029

1029:                                             ; preds = %1027, %917, %913
  %1030 = phi i64 [ 0, %917 ], [ 0, %913 ], [ %944, %1027 ]
  br label %1031

1031:                                             ; preds = %1029, %1031
  %1032 = phi i64 [ %1040, %1031 ], [ %1030, %1029 ]
  %1033 = getelementptr inbounds float, float* %54, i64 %1032
  %1034 = load float, float* %1033, align 4
  %1035 = fadd float %912, %1034
  %1036 = getelementptr inbounds float, float* %49, i64 %1032
  %1037 = load float, float* %1036, align 4
  %1038 = fcmp olt float %1035, %1037
  %1039 = select i1 %1038, float %1035, float %1037
  store float %1039, float* %1033, align 4
  %1040 = add nuw nsw i64 %1032, 1
  %1041 = icmp slt i64 %1040, %51
  br i1 %1041, label %1031, label %1052, !llvm.loop !29

1042:                                             ; preds = %799, %1042
  %1043 = phi i64 [ %1050, %1042 ], [ %800, %799 ]
  %1044 = getelementptr inbounds float, float* %52, i64 %1043
  %1045 = load float, float* %1044, align 4
  %1046 = getelementptr inbounds float, float* %49, i64 %1043
  %1047 = load float, float* %1046, align 4
  %1048 = fcmp olt float %1045, %1047
  %1049 = select i1 %1048, float %1045, float %1047
  store float %1049, float* %1044, align 4
  %1050 = add nuw nsw i64 %1043, 1
  %1051 = icmp slt i64 %1050, %51
  br i1 %1051, label %1042, label %1052, !llvm.loop !30

1052:                                             ; preds = %1031, %1042, %1027, %901, %903, %794
  %1053 = icmp sgt i32 %37, 0
  %1054 = icmp slt i32 %39, %31
  br i1 %1053, label %1055, label %1435

1055:                                             ; preds = %1052
  %1056 = sext i32 %39 to i64
  %1057 = zext i32 %37 to i64
  %1058 = icmp ult i32 %37, 8
  br i1 %1058, label %1059, label %1073

1059:                                             ; preds = %1166, %1073, %1055
  %1060 = phi i64 [ 0, %1073 ], [ 0, %1055 ], [ %1111, %1166 ]
  %1061 = xor i64 %1060, -1
  %1062 = and i64 %1057, 1
  %1063 = icmp eq i64 %1062, 0
  br i1 %1063, label %1069, label %1064

1064:                                             ; preds = %1059
  %1065 = getelementptr inbounds float, float* %49, i64 %1060
  store float 0.000000e+00, float* %1065, align 4
  %1066 = getelementptr inbounds float, float* %53, i64 %1060
  store float -2.800000e+01, float* %1066, align 4
  %1067 = getelementptr inbounds float, float* %52, i64 %1060
  store float -2.800000e+01, float* %1067, align 4
  %1068 = or i64 %1060, 1
  br label %1069

1069:                                             ; preds = %1059, %1064
  %1070 = phi i64 [ %1060, %1059 ], [ %1068, %1064 ]
  %1071 = sub nsw i64 0, %1057
  %1072 = icmp eq i64 %1061, %1071
  br i1 %1072, label %1309, label %1298

1073:                                             ; preds = %1055
  %1074 = shl nsw i64 %45, 2
  %1075 = shl nsw i64 %48, 2
  %1076 = add nsw i64 %1074, %1075
  %1077 = add nsw i64 %1076, 96
  %1078 = getelementptr i8, i8* %8, i64 %1077
  %1079 = shl nuw nsw i64 %1057, 2
  %1080 = add nsw i64 %1076, %1079
  %1081 = add nsw i64 %1080, 96
  %1082 = getelementptr i8, i8* %8, i64 %1081
  %1083 = shl nsw i64 %51, 3
  %1084 = add nsw i64 %1083, %1074
  %1085 = add nsw i64 %1084, %1075
  %1086 = add nsw i64 %1085, 96
  %1087 = getelementptr i8, i8* %8, i64 %1086
  %1088 = add nsw i64 %1085, %1079
  %1089 = add nsw i64 %1088, 96
  %1090 = getelementptr i8, i8* %8, i64 %1089
  %1091 = add nsw i64 %1074, %1075
  %1092 = shl nsw i64 %51, 2
  %1093 = add nsw i64 %1091, %1092
  %1094 = add nsw i64 %1093, 96
  %1095 = getelementptr i8, i8* %8, i64 %1094
  %1096 = add nsw i64 %1093, %1079
  %1097 = add nsw i64 %1096, 96
  %1098 = getelementptr i8, i8* %8, i64 %1097
  %1099 = icmp ult i8* %1078, %1090
  %1100 = icmp ult i8* %1087, %1082
  %1101 = and i1 %1099, %1100
  %1102 = icmp ult i8* %1078, %1098
  %1103 = icmp ult i8* %1095, %1082
  %1104 = and i1 %1102, %1103
  %1105 = or i1 %1101, %1104
  %1106 = icmp ult i8* %1087, %1098
  %1107 = icmp ult i8* %1095, %1090
  %1108 = and i1 %1106, %1107
  %1109 = or i1 %1105, %1108
  br i1 %1109, label %1059, label %1110

1110:                                             ; preds = %1073
  %1111 = and i64 %1057, 4294967288
  %1112 = add nsw i64 %1111, -8
  %1113 = lshr exact i64 %1112, 3
  %1114 = add nuw nsw i64 %1113, 1
  %1115 = and i64 %1114, 1
  %1116 = icmp eq i64 %1112, 0
  br i1 %1116, label %1150, label %1117

1117:                                             ; preds = %1110
  %1118 = sub nuw nsw i64 %1114, %1115
  br label %1119

1119:                                             ; preds = %1119, %1117
  %1120 = phi i64 [ 0, %1117 ], [ %1147, %1119 ]
  %1121 = phi i64 [ %1118, %1117 ], [ %1148, %1119 ]
  %1122 = getelementptr inbounds float, float* %49, i64 %1120
  %1123 = bitcast float* %1122 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1123, align 4, !alias.scope !31, !noalias !34
  %1124 = getelementptr inbounds float, float* %1122, i64 4
  %1125 = bitcast float* %1124 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1125, align 4, !alias.scope !31, !noalias !34
  %1126 = getelementptr inbounds float, float* %53, i64 %1120
  %1127 = bitcast float* %1126 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1127, align 4, !alias.scope !37, !noalias !38
  %1128 = getelementptr inbounds float, float* %1126, i64 4
  %1129 = bitcast float* %1128 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1129, align 4, !alias.scope !37, !noalias !38
  %1130 = getelementptr inbounds float, float* %52, i64 %1120
  %1131 = bitcast float* %1130 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1131, align 4, !alias.scope !38
  %1132 = getelementptr inbounds float, float* %1130, i64 4
  %1133 = bitcast float* %1132 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1133, align 4, !alias.scope !38
  %1134 = or i64 %1120, 8
  %1135 = getelementptr inbounds float, float* %49, i64 %1134
  %1136 = bitcast float* %1135 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1136, align 4, !alias.scope !31, !noalias !34
  %1137 = getelementptr inbounds float, float* %1135, i64 4
  %1138 = bitcast float* %1137 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1138, align 4, !alias.scope !31, !noalias !34
  %1139 = getelementptr inbounds float, float* %53, i64 %1134
  %1140 = bitcast float* %1139 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1140, align 4, !alias.scope !37, !noalias !38
  %1141 = getelementptr inbounds float, float* %1139, i64 4
  %1142 = bitcast float* %1141 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1142, align 4, !alias.scope !37, !noalias !38
  %1143 = getelementptr inbounds float, float* %52, i64 %1134
  %1144 = bitcast float* %1143 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1144, align 4, !alias.scope !38
  %1145 = getelementptr inbounds float, float* %1143, i64 4
  %1146 = bitcast float* %1145 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1146, align 4, !alias.scope !38
  %1147 = add i64 %1120, 16
  %1148 = add i64 %1121, -2
  %1149 = icmp eq i64 %1148, 0
  br i1 %1149, label %1150, label %1119, !llvm.loop !39

1150:                                             ; preds = %1119, %1110
  %1151 = phi i64 [ 0, %1110 ], [ %1147, %1119 ]
  %1152 = icmp eq i64 %1115, 0
  br i1 %1152, label %1166, label %1153

1153:                                             ; preds = %1150
  %1154 = getelementptr inbounds float, float* %49, i64 %1151
  %1155 = bitcast float* %1154 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1155, align 4, !alias.scope !31, !noalias !34
  %1156 = getelementptr inbounds float, float* %1154, i64 4
  %1157 = bitcast float* %1156 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1157, align 4, !alias.scope !31, !noalias !34
  %1158 = getelementptr inbounds float, float* %53, i64 %1151
  %1159 = bitcast float* %1158 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1159, align 4, !alias.scope !37, !noalias !38
  %1160 = getelementptr inbounds float, float* %1158, i64 4
  %1161 = bitcast float* %1160 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1161, align 4, !alias.scope !37, !noalias !38
  %1162 = getelementptr inbounds float, float* %52, i64 %1151
  %1163 = bitcast float* %1162 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1163, align 4, !alias.scope !38
  %1164 = getelementptr inbounds float, float* %1162, i64 4
  %1165 = bitcast float* %1164 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1165, align 4, !alias.scope !38
  br label %1166

1166:                                             ; preds = %1150, %1153
  %1167 = icmp eq i64 %1111, %1057
  br i1 %1167, label %1309, label %1059

1168:                                             ; preds = %1324, %1287, %1433, %1309
  %1169 = icmp ult i32 %37, 8
  br i1 %1169, label %1170, label %1185

1170:                                             ; preds = %1285, %1185, %1168
  %1171 = phi i64 [ 0, %1185 ], [ 0, %1168 ], [ %1227, %1285 ]
  %1172 = xor i64 %1171, -1
  %1173 = and i64 %1057, 1
  %1174 = icmp eq i64 %1173, 0
  br i1 %1174, label %1181, label %1175

1175:                                             ; preds = %1170
  %1176 = add nsw i64 %1171, %349
  %1177 = getelementptr inbounds float, float* %49, i64 %1176
  store float 0.000000e+00, float* %1177, align 4
  %1178 = getelementptr inbounds float, float* %53, i64 %1176
  store float -2.800000e+01, float* %1178, align 4
  %1179 = getelementptr inbounds float, float* %52, i64 %1176
  store float -2.800000e+01, float* %1179, align 4
  %1180 = or i64 %1171, 1
  br label %1181

1181:                                             ; preds = %1170, %1175
  %1182 = phi i64 [ %1171, %1170 ], [ %1180, %1175 ]
  %1183 = sub nsw i64 0, %1057
  %1184 = icmp eq i64 %1172, %1183
  br i1 %1184, label %1741, label %1728

1185:                                             ; preds = %1168
  %1186 = shl nsw i64 %349, 2
  %1187 = shl nsw i64 %45, 2
  %1188 = add nsw i64 %1186, %1187
  %1189 = shl nsw i64 %48, 2
  %1190 = add nsw i64 %1188, %1189
  %1191 = add nsw i64 %1190, 96
  %1192 = getelementptr i8, i8* %8, i64 %1191
  %1193 = shl nuw nsw i64 %1057, 2
  %1194 = add nsw i64 %1190, %1193
  %1195 = add nsw i64 %1194, 96
  %1196 = getelementptr i8, i8* %8, i64 %1195
  %1197 = shl nsw i64 %51, 3
  %1198 = add nsw i64 %1197, %1186
  %1199 = add nsw i64 %1198, %1187
  %1200 = add nsw i64 %1199, %1189
  %1201 = add nsw i64 %1200, 96
  %1202 = getelementptr i8, i8* %8, i64 %1201
  %1203 = add nsw i64 %1200, %1193
  %1204 = add nsw i64 %1203, 96
  %1205 = getelementptr i8, i8* %8, i64 %1204
  %1206 = add nsw i64 %1186, %1187
  %1207 = add nsw i64 %1206, %1189
  %1208 = shl nsw i64 %51, 2
  %1209 = add nsw i64 %1207, %1208
  %1210 = add nsw i64 %1209, 96
  %1211 = getelementptr i8, i8* %8, i64 %1210
  %1212 = add nsw i64 %1209, %1193
  %1213 = add nsw i64 %1212, 96
  %1214 = getelementptr i8, i8* %8, i64 %1213
  %1215 = icmp ult i8* %1192, %1205
  %1216 = icmp ult i8* %1202, %1196
  %1217 = and i1 %1215, %1216
  %1218 = icmp ult i8* %1192, %1214
  %1219 = icmp ult i8* %1211, %1196
  %1220 = and i1 %1218, %1219
  %1221 = or i1 %1217, %1220
  %1222 = icmp ult i8* %1202, %1214
  %1223 = icmp ult i8* %1211, %1205
  %1224 = and i1 %1222, %1223
  %1225 = or i1 %1221, %1224
  br i1 %1225, label %1170, label %1226

1226:                                             ; preds = %1185
  %1227 = and i64 %1057, 4294967288
  %1228 = add nsw i64 %1227, -8
  %1229 = lshr exact i64 %1228, 3
  %1230 = add nuw nsw i64 %1229, 1
  %1231 = and i64 %1230, 1
  %1232 = icmp eq i64 %1228, 0
  br i1 %1232, label %1268, label %1233

1233:                                             ; preds = %1226
  %1234 = sub nuw nsw i64 %1230, %1231
  br label %1235

1235:                                             ; preds = %1235, %1233
  %1236 = phi i64 [ 0, %1233 ], [ %1265, %1235 ]
  %1237 = phi i64 [ %1234, %1233 ], [ %1266, %1235 ]
  %1238 = add nsw i64 %1236, %349
  %1239 = getelementptr inbounds float, float* %49, i64 %1238
  %1240 = bitcast float* %1239 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1240, align 4, !alias.scope !40, !noalias !43
  %1241 = getelementptr inbounds float, float* %1239, i64 4
  %1242 = bitcast float* %1241 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1242, align 4, !alias.scope !40, !noalias !43
  %1243 = getelementptr inbounds float, float* %53, i64 %1238
  %1244 = bitcast float* %1243 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1244, align 4, !alias.scope !46, !noalias !47
  %1245 = getelementptr inbounds float, float* %1243, i64 4
  %1246 = bitcast float* %1245 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1246, align 4, !alias.scope !46, !noalias !47
  %1247 = getelementptr inbounds float, float* %52, i64 %1238
  %1248 = bitcast float* %1247 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1248, align 4, !alias.scope !47
  %1249 = getelementptr inbounds float, float* %1247, i64 4
  %1250 = bitcast float* %1249 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1250, align 4, !alias.scope !47
  %1251 = or i64 %1236, 8
  %1252 = add nsw i64 %1251, %349
  %1253 = getelementptr inbounds float, float* %49, i64 %1252
  %1254 = bitcast float* %1253 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1254, align 4, !alias.scope !40, !noalias !43
  %1255 = getelementptr inbounds float, float* %1253, i64 4
  %1256 = bitcast float* %1255 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1256, align 4, !alias.scope !40, !noalias !43
  %1257 = getelementptr inbounds float, float* %53, i64 %1252
  %1258 = bitcast float* %1257 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1258, align 4, !alias.scope !46, !noalias !47
  %1259 = getelementptr inbounds float, float* %1257, i64 4
  %1260 = bitcast float* %1259 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1260, align 4, !alias.scope !46, !noalias !47
  %1261 = getelementptr inbounds float, float* %52, i64 %1252
  %1262 = bitcast float* %1261 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1262, align 4, !alias.scope !47
  %1263 = getelementptr inbounds float, float* %1261, i64 4
  %1264 = bitcast float* %1263 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1264, align 4, !alias.scope !47
  %1265 = add i64 %1236, 16
  %1266 = add i64 %1237, -2
  %1267 = icmp eq i64 %1266, 0
  br i1 %1267, label %1268, label %1235, !llvm.loop !48

1268:                                             ; preds = %1235, %1226
  %1269 = phi i64 [ 0, %1226 ], [ %1265, %1235 ]
  %1270 = icmp eq i64 %1231, 0
  br i1 %1270, label %1285, label %1271

1271:                                             ; preds = %1268
  %1272 = add nsw i64 %1269, %349
  %1273 = getelementptr inbounds float, float* %49, i64 %1272
  %1274 = bitcast float* %1273 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1274, align 4, !alias.scope !40, !noalias !43
  %1275 = getelementptr inbounds float, float* %1273, i64 4
  %1276 = bitcast float* %1275 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1276, align 4, !alias.scope !40, !noalias !43
  %1277 = getelementptr inbounds float, float* %53, i64 %1272
  %1278 = bitcast float* %1277 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1278, align 4, !alias.scope !46, !noalias !47
  %1279 = getelementptr inbounds float, float* %1277, i64 4
  %1280 = bitcast float* %1279 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1280, align 4, !alias.scope !46, !noalias !47
  %1281 = getelementptr inbounds float, float* %52, i64 %1272
  %1282 = bitcast float* %1281 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1282, align 4, !alias.scope !47
  %1283 = getelementptr inbounds float, float* %1281, i64 4
  %1284 = bitcast float* %1283 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1284, align 4, !alias.scope !47
  br label %1285

1285:                                             ; preds = %1268, %1271
  %1286 = icmp eq i64 %1227, %1057
  br i1 %1286, label %1741, label %1170

1287:                                             ; preds = %1324, %1287
  %1288 = phi i64 [ %1296, %1287 ], [ %1325, %1324 ]
  %1289 = getelementptr inbounds float, float* %49, i64 %1288
  store float 0.000000e+00, float* %1289, align 4
  %1290 = getelementptr inbounds float, float* %53, i64 %1288
  store float -2.800000e+01, float* %1290, align 4
  %1291 = getelementptr inbounds float, float* %52, i64 %1288
  store float -2.800000e+01, float* %1291, align 4
  %1292 = add nsw i64 %1288, 1
  %1293 = getelementptr inbounds float, float* %49, i64 %1292
  store float 0.000000e+00, float* %1293, align 4
  %1294 = getelementptr inbounds float, float* %53, i64 %1292
  store float -2.800000e+01, float* %1294, align 4
  %1295 = getelementptr inbounds float, float* %52, i64 %1292
  store float -2.800000e+01, float* %1295, align 4
  %1296 = add nsw i64 %1288, 2
  %1297 = icmp eq i64 %1296, %349
  br i1 %1297, label %1168, label %1287, !llvm.loop !49

1298:                                             ; preds = %1069, %1298
  %1299 = phi i64 [ %1307, %1298 ], [ %1070, %1069 ]
  %1300 = getelementptr inbounds float, float* %49, i64 %1299
  store float 0.000000e+00, float* %1300, align 4
  %1301 = getelementptr inbounds float, float* %53, i64 %1299
  store float -2.800000e+01, float* %1301, align 4
  %1302 = getelementptr inbounds float, float* %52, i64 %1299
  store float -2.800000e+01, float* %1302, align 4
  %1303 = add nuw nsw i64 %1299, 1
  %1304 = getelementptr inbounds float, float* %49, i64 %1303
  store float 0.000000e+00, float* %1304, align 4
  %1305 = getelementptr inbounds float, float* %53, i64 %1303
  store float -2.800000e+01, float* %1305, align 4
  %1306 = getelementptr inbounds float, float* %52, i64 %1303
  store float -2.800000e+01, float* %1306, align 4
  %1307 = add nuw nsw i64 %1299, 2
  %1308 = icmp eq i64 %1307, %1057
  br i1 %1308, label %1309, label %1298, !llvm.loop !50

1309:                                             ; preds = %1069, %1298, %1166
  br i1 %1054, label %1310, label %1168

1310:                                             ; preds = %1309
  %1311 = sub nsw i64 %349, %1056
  %1312 = icmp ult i64 %1311, 8
  br i1 %1312, label %1313, label %1328

1313:                                             ; preds = %1433, %1328, %1310
  %1314 = phi i64 [ %1056, %1328 ], [ %1056, %1310 ], [ %1375, %1433 ]
  %1315 = sub nsw i64 %349, %1314
  %1316 = xor i64 %1314, -1
  %1317 = and i64 %1315, 1
  %1318 = icmp eq i64 %1317, 0
  br i1 %1318, label %1324, label %1319

1319:                                             ; preds = %1313
  %1320 = getelementptr inbounds float, float* %49, i64 %1314
  store float 0.000000e+00, float* %1320, align 4
  %1321 = getelementptr inbounds float, float* %53, i64 %1314
  store float -2.800000e+01, float* %1321, align 4
  %1322 = getelementptr inbounds float, float* %52, i64 %1314
  store float -2.800000e+01, float* %1322, align 4
  %1323 = add nsw i64 %1314, 1
  br label %1324

1324:                                             ; preds = %1313, %1319
  %1325 = phi i64 [ %1314, %1313 ], [ %1323, %1319 ]
  %1326 = sub nsw i64 0, %349
  %1327 = icmp eq i64 %1316, %1326
  br i1 %1327, label %1168, label %1287

1328:                                             ; preds = %1310
  %1329 = shl nsw i64 %1056, 2
  %1330 = shl nsw i64 %45, 2
  %1331 = add nsw i64 %1329, %1330
  %1332 = shl nsw i64 %48, 2
  %1333 = add nsw i64 %1331, %1332
  %1334 = add nsw i64 %1333, 96
  %1335 = getelementptr i8, i8* %8, i64 %1334
  %1336 = add nsw i64 %349, %45
  %1337 = add nsw i64 %1336, %48
  %1338 = shl nsw i64 %1337, 2
  %1339 = add nsw i64 %1338, 96
  %1340 = getelementptr i8, i8* %8, i64 %1339
  %1341 = shl nsw i64 %51, 3
  %1342 = add nsw i64 %1341, %1329
  %1343 = add nsw i64 %1342, %1330
  %1344 = add nsw i64 %1343, %1332
  %1345 = add nsw i64 %1344, 96
  %1346 = getelementptr i8, i8* %8, i64 %1345
  %1347 = add nsw i64 %1341, %1338
  %1348 = add nsw i64 %1347, 96
  %1349 = getelementptr i8, i8* %8, i64 %1348
  %1350 = add nsw i64 %1329, %1330
  %1351 = add nsw i64 %1350, %1332
  %1352 = shl nsw i64 %51, 2
  %1353 = add nsw i64 %1351, %1352
  %1354 = add nsw i64 %1353, 96
  %1355 = getelementptr i8, i8* %8, i64 %1354
  %1356 = add nsw i64 %349, %45
  %1357 = add nsw i64 %1356, %48
  %1358 = add nsw i64 %1357, %51
  %1359 = shl nsw i64 %1358, 2
  %1360 = add nsw i64 %1359, 96
  %1361 = getelementptr i8, i8* %8, i64 %1360
  %1362 = icmp ult i8* %1335, %1349
  %1363 = icmp ult i8* %1346, %1340
  %1364 = and i1 %1362, %1363
  %1365 = icmp ult i8* %1335, %1361
  %1366 = icmp ult i8* %1355, %1340
  %1367 = and i1 %1365, %1366
  %1368 = or i1 %1364, %1367
  %1369 = icmp ult i8* %1346, %1361
  %1370 = icmp ult i8* %1355, %1349
  %1371 = and i1 %1369, %1370
  %1372 = or i1 %1368, %1371
  br i1 %1372, label %1313, label %1373

1373:                                             ; preds = %1328
  %1374 = and i64 %1311, -8
  %1375 = add nsw i64 %1374, %1056
  %1376 = add nsw i64 %1374, -8
  %1377 = lshr exact i64 %1376, 3
  %1378 = add nuw nsw i64 %1377, 1
  %1379 = and i64 %1378, 1
  %1380 = icmp eq i64 %1376, 0
  br i1 %1380, label %1416, label %1381

1381:                                             ; preds = %1373
  %1382 = sub nuw nsw i64 %1378, %1379
  br label %1383

1383:                                             ; preds = %1383, %1381
  %1384 = phi i64 [ 0, %1381 ], [ %1413, %1383 ]
  %1385 = phi i64 [ %1382, %1381 ], [ %1414, %1383 ]
  %1386 = add i64 %1384, %1056
  %1387 = getelementptr inbounds float, float* %49, i64 %1386
  %1388 = bitcast float* %1387 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1388, align 4, !alias.scope !51, !noalias !54
  %1389 = getelementptr inbounds float, float* %1387, i64 4
  %1390 = bitcast float* %1389 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1390, align 4, !alias.scope !51, !noalias !54
  %1391 = getelementptr inbounds float, float* %53, i64 %1386
  %1392 = bitcast float* %1391 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1392, align 4, !alias.scope !57, !noalias !58
  %1393 = getelementptr inbounds float, float* %1391, i64 4
  %1394 = bitcast float* %1393 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1394, align 4, !alias.scope !57, !noalias !58
  %1395 = getelementptr inbounds float, float* %52, i64 %1386
  %1396 = bitcast float* %1395 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1396, align 4, !alias.scope !58
  %1397 = getelementptr inbounds float, float* %1395, i64 4
  %1398 = bitcast float* %1397 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1398, align 4, !alias.scope !58
  %1399 = or i64 %1384, 8
  %1400 = add i64 %1399, %1056
  %1401 = getelementptr inbounds float, float* %49, i64 %1400
  %1402 = bitcast float* %1401 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1402, align 4, !alias.scope !51, !noalias !54
  %1403 = getelementptr inbounds float, float* %1401, i64 4
  %1404 = bitcast float* %1403 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1404, align 4, !alias.scope !51, !noalias !54
  %1405 = getelementptr inbounds float, float* %53, i64 %1400
  %1406 = bitcast float* %1405 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1406, align 4, !alias.scope !57, !noalias !58
  %1407 = getelementptr inbounds float, float* %1405, i64 4
  %1408 = bitcast float* %1407 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1408, align 4, !alias.scope !57, !noalias !58
  %1409 = getelementptr inbounds float, float* %52, i64 %1400
  %1410 = bitcast float* %1409 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1410, align 4, !alias.scope !58
  %1411 = getelementptr inbounds float, float* %1409, i64 4
  %1412 = bitcast float* %1411 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1412, align 4, !alias.scope !58
  %1413 = add i64 %1384, 16
  %1414 = add i64 %1385, -2
  %1415 = icmp eq i64 %1414, 0
  br i1 %1415, label %1416, label %1383, !llvm.loop !59

1416:                                             ; preds = %1383, %1373
  %1417 = phi i64 [ 0, %1373 ], [ %1413, %1383 ]
  %1418 = icmp eq i64 %1379, 0
  br i1 %1418, label %1433, label %1419

1419:                                             ; preds = %1416
  %1420 = add i64 %1417, %1056
  %1421 = getelementptr inbounds float, float* %49, i64 %1420
  %1422 = bitcast float* %1421 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1422, align 4, !alias.scope !51, !noalias !54
  %1423 = getelementptr inbounds float, float* %1421, i64 4
  %1424 = bitcast float* %1423 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1424, align 4, !alias.scope !51, !noalias !54
  %1425 = getelementptr inbounds float, float* %53, i64 %1420
  %1426 = bitcast float* %1425 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1426, align 4, !alias.scope !57, !noalias !58
  %1427 = getelementptr inbounds float, float* %1425, i64 4
  %1428 = bitcast float* %1427 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1428, align 4, !alias.scope !57, !noalias !58
  %1429 = getelementptr inbounds float, float* %52, i64 %1420
  %1430 = bitcast float* %1429 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1430, align 4, !alias.scope !58
  %1431 = getelementptr inbounds float, float* %1429, i64 4
  %1432 = bitcast float* %1431 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1432, align 4, !alias.scope !58
  br label %1433

1433:                                             ; preds = %1416, %1419
  %1434 = icmp eq i64 %1311, %1374
  br i1 %1434, label %1168, label %1313

1435:                                             ; preds = %1052
  br i1 %1054, label %1436, label %1706

1436:                                             ; preds = %1435
  %1437 = sext i32 %39 to i64
  %1438 = sub nsw i64 %349, %1437
  %1439 = icmp ult i64 %1438, 8
  br i1 %1439, label %1547, label %1440

1440:                                             ; preds = %1436
  %1441 = shl nsw i64 %1437, 2
  %1442 = shl nsw i64 %45, 2
  %1443 = add nsw i64 %1441, %1442
  %1444 = shl nsw i64 %48, 2
  %1445 = add nsw i64 %1443, %1444
  %1446 = add nsw i64 %1445, 96
  %1447 = getelementptr i8, i8* %8, i64 %1446
  %1448 = add nsw i64 %349, %45
  %1449 = add nsw i64 %1448, %48
  %1450 = shl nsw i64 %1449, 2
  %1451 = add nsw i64 %1450, 96
  %1452 = getelementptr i8, i8* %8, i64 %1451
  %1453 = shl nsw i64 %51, 3
  %1454 = add nsw i64 %1453, %1441
  %1455 = add nsw i64 %1454, %1442
  %1456 = add nsw i64 %1455, %1444
  %1457 = add nsw i64 %1456, 96
  %1458 = getelementptr i8, i8* %8, i64 %1457
  %1459 = add nsw i64 %1453, %1450
  %1460 = add nsw i64 %1459, 96
  %1461 = getelementptr i8, i8* %8, i64 %1460
  %1462 = add nsw i64 %1441, %1442
  %1463 = add nsw i64 %1462, %1444
  %1464 = shl nsw i64 %51, 2
  %1465 = add nsw i64 %1463, %1464
  %1466 = add nsw i64 %1465, 96
  %1467 = getelementptr i8, i8* %8, i64 %1466
  %1468 = add nsw i64 %349, %45
  %1469 = add nsw i64 %1468, %48
  %1470 = add nsw i64 %1469, %51
  %1471 = shl nsw i64 %1470, 2
  %1472 = add nsw i64 %1471, 96
  %1473 = getelementptr i8, i8* %8, i64 %1472
  %1474 = icmp ult i8* %1447, %1461
  %1475 = icmp ult i8* %1458, %1452
  %1476 = and i1 %1474, %1475
  %1477 = icmp ult i8* %1447, %1473
  %1478 = icmp ult i8* %1467, %1452
  %1479 = and i1 %1477, %1478
  %1480 = or i1 %1476, %1479
  %1481 = icmp ult i8* %1458, %1473
  %1482 = icmp ult i8* %1467, %1461
  %1483 = and i1 %1481, %1482
  %1484 = or i1 %1480, %1483
  br i1 %1484, label %1547, label %1485

1485:                                             ; preds = %1440
  %1486 = and i64 %1438, -8
  %1487 = add nsw i64 %1486, %1437
  %1488 = add nsw i64 %1486, -8
  %1489 = lshr exact i64 %1488, 3
  %1490 = add nuw nsw i64 %1489, 1
  %1491 = and i64 %1490, 1
  %1492 = icmp eq i64 %1488, 0
  br i1 %1492, label %1528, label %1493

1493:                                             ; preds = %1485
  %1494 = sub nuw nsw i64 %1490, %1491
  br label %1495

1495:                                             ; preds = %1495, %1493
  %1496 = phi i64 [ 0, %1493 ], [ %1525, %1495 ]
  %1497 = phi i64 [ %1494, %1493 ], [ %1526, %1495 ]
  %1498 = add i64 %1496, %1437
  %1499 = getelementptr inbounds float, float* %49, i64 %1498
  %1500 = bitcast float* %1499 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1500, align 4, !alias.scope !60, !noalias !63
  %1501 = getelementptr inbounds float, float* %1499, i64 4
  %1502 = bitcast float* %1501 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1502, align 4, !alias.scope !60, !noalias !63
  %1503 = getelementptr inbounds float, float* %53, i64 %1498
  %1504 = bitcast float* %1503 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1504, align 4, !alias.scope !66, !noalias !67
  %1505 = getelementptr inbounds float, float* %1503, i64 4
  %1506 = bitcast float* %1505 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1506, align 4, !alias.scope !66, !noalias !67
  %1507 = getelementptr inbounds float, float* %52, i64 %1498
  %1508 = bitcast float* %1507 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1508, align 4, !alias.scope !67
  %1509 = getelementptr inbounds float, float* %1507, i64 4
  %1510 = bitcast float* %1509 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1510, align 4, !alias.scope !67
  %1511 = or i64 %1496, 8
  %1512 = add i64 %1511, %1437
  %1513 = getelementptr inbounds float, float* %49, i64 %1512
  %1514 = bitcast float* %1513 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1514, align 4, !alias.scope !60, !noalias !63
  %1515 = getelementptr inbounds float, float* %1513, i64 4
  %1516 = bitcast float* %1515 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1516, align 4, !alias.scope !60, !noalias !63
  %1517 = getelementptr inbounds float, float* %53, i64 %1512
  %1518 = bitcast float* %1517 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1518, align 4, !alias.scope !66, !noalias !67
  %1519 = getelementptr inbounds float, float* %1517, i64 4
  %1520 = bitcast float* %1519 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1520, align 4, !alias.scope !66, !noalias !67
  %1521 = getelementptr inbounds float, float* %52, i64 %1512
  %1522 = bitcast float* %1521 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1522, align 4, !alias.scope !67
  %1523 = getelementptr inbounds float, float* %1521, i64 4
  %1524 = bitcast float* %1523 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1524, align 4, !alias.scope !67
  %1525 = add i64 %1496, 16
  %1526 = add i64 %1497, -2
  %1527 = icmp eq i64 %1526, 0
  br i1 %1527, label %1528, label %1495, !llvm.loop !68

1528:                                             ; preds = %1495, %1485
  %1529 = phi i64 [ 0, %1485 ], [ %1525, %1495 ]
  %1530 = icmp eq i64 %1491, 0
  br i1 %1530, label %1545, label %1531

1531:                                             ; preds = %1528
  %1532 = add i64 %1529, %1437
  %1533 = getelementptr inbounds float, float* %49, i64 %1532
  %1534 = bitcast float* %1533 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1534, align 4, !alias.scope !60, !noalias !63
  %1535 = getelementptr inbounds float, float* %1533, i64 4
  %1536 = bitcast float* %1535 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1536, align 4, !alias.scope !60, !noalias !63
  %1537 = getelementptr inbounds float, float* %53, i64 %1532
  %1538 = bitcast float* %1537 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1538, align 4, !alias.scope !66, !noalias !67
  %1539 = getelementptr inbounds float, float* %1537, i64 4
  %1540 = bitcast float* %1539 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1540, align 4, !alias.scope !66, !noalias !67
  %1541 = getelementptr inbounds float, float* %52, i64 %1532
  %1542 = bitcast float* %1541 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1542, align 4, !alias.scope !67
  %1543 = getelementptr inbounds float, float* %1541, i64 4
  %1544 = bitcast float* %1543 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1544, align 4, !alias.scope !67
  br label %1545

1545:                                             ; preds = %1528, %1531
  %1546 = icmp eq i64 %1438, %1486
  br i1 %1546, label %1573, label %1547

1547:                                             ; preds = %1545, %1440, %1436
  %1548 = phi i64 [ %1437, %1440 ], [ %1437, %1436 ], [ %1487, %1545 ]
  %1549 = sub nsw i64 %349, %1548
  %1550 = xor i64 %1548, -1
  %1551 = and i64 %1549, 1
  %1552 = icmp eq i64 %1551, 0
  br i1 %1552, label %1558, label %1553

1553:                                             ; preds = %1547
  %1554 = getelementptr inbounds float, float* %49, i64 %1548
  store float 0.000000e+00, float* %1554, align 4
  %1555 = getelementptr inbounds float, float* %53, i64 %1548
  store float -2.800000e+01, float* %1555, align 4
  %1556 = getelementptr inbounds float, float* %52, i64 %1548
  store float -2.800000e+01, float* %1556, align 4
  %1557 = add nsw i64 %1548, 1
  br label %1558

1558:                                             ; preds = %1547, %1553
  %1559 = phi i64 [ %1548, %1547 ], [ %1557, %1553 ]
  %1560 = sub nsw i64 0, %349
  %1561 = icmp eq i64 %1550, %1560
  br i1 %1561, label %1573, label %1562

1562:                                             ; preds = %1558, %1562
  %1563 = phi i64 [ %1571, %1562 ], [ %1559, %1558 ]
  %1564 = getelementptr inbounds float, float* %49, i64 %1563
  store float 0.000000e+00, float* %1564, align 4
  %1565 = getelementptr inbounds float, float* %53, i64 %1563
  store float -2.800000e+01, float* %1565, align 4
  %1566 = getelementptr inbounds float, float* %52, i64 %1563
  store float -2.800000e+01, float* %1566, align 4
  %1567 = add nsw i64 %1563, 1
  %1568 = getelementptr inbounds float, float* %49, i64 %1567
  store float 0.000000e+00, float* %1568, align 4
  %1569 = getelementptr inbounds float, float* %53, i64 %1567
  store float -2.800000e+01, float* %1569, align 4
  %1570 = getelementptr inbounds float, float* %52, i64 %1567
  store float -2.800000e+01, float* %1570, align 4
  %1571 = add nsw i64 %1563, 2
  %1572 = icmp eq i64 %1571, %349
  br i1 %1572, label %1573, label %1562, !llvm.loop !69

1573:                                             ; preds = %1558, %1562, %1545
  %1574 = sub nsw i64 %349, %1437
  %1575 = icmp ult i64 %1574, 8
  br i1 %1575, label %1576, label %1592

1576:                                             ; preds = %1704, %1592, %1573
  %1577 = phi i64 [ %1437, %1592 ], [ %1437, %1573 ], [ %1643, %1704 ]
  %1578 = sub nsw i64 %349, %1577
  %1579 = xor i64 %1577, -1
  %1580 = and i64 %1578, 1
  %1581 = icmp eq i64 %1580, 0
  br i1 %1581, label %1588, label %1582

1582:                                             ; preds = %1576
  %1583 = add nsw i64 %1577, %349
  %1584 = getelementptr inbounds float, float* %49, i64 %1583
  store float 0.000000e+00, float* %1584, align 4
  %1585 = getelementptr inbounds float, float* %53, i64 %1583
  store float -2.800000e+01, float* %1585, align 4
  %1586 = getelementptr inbounds float, float* %52, i64 %1583
  store float -2.800000e+01, float* %1586, align 4
  %1587 = add nsw i64 %1577, 1
  br label %1588

1588:                                             ; preds = %1576, %1582
  %1589 = phi i64 [ %1577, %1576 ], [ %1587, %1582 ]
  %1590 = sub nsw i64 0, %349
  %1591 = icmp eq i64 %1579, %1590
  br i1 %1591, label %1706, label %1888

1592:                                             ; preds = %1573
  %1593 = add nsw i64 %1437, %349
  %1594 = shl nsw i64 %1593, 2
  %1595 = shl nsw i64 %45, 2
  %1596 = add nsw i64 %1594, %1595
  %1597 = shl nsw i64 %48, 2
  %1598 = add nsw i64 %1596, %1597
  %1599 = add nsw i64 %1598, 96
  %1600 = getelementptr i8, i8* %8, i64 %1599
  %1601 = shl nsw i64 %349, 3
  %1602 = add nsw i64 %45, %48
  %1603 = shl nsw i64 %1602, 2
  %1604 = add nsw i64 %1601, %1603
  %1605 = add nsw i64 %1604, 96
  %1606 = getelementptr i8, i8* %8, i64 %1605
  %1607 = shl nsw i64 %51, 3
  %1608 = add nsw i64 %1607, %1594
  %1609 = add nsw i64 %1608, %1595
  %1610 = add nsw i64 %1609, %1597
  %1611 = add nsw i64 %1610, 96
  %1612 = getelementptr i8, i8* %8, i64 %1611
  %1613 = add nsw i64 %349, %51
  %1614 = shl nsw i64 %1613, 3
  %1615 = add nsw i64 %1614, %1603
  %1616 = add nsw i64 %1615, 96
  %1617 = getelementptr i8, i8* %8, i64 %1616
  %1618 = add nsw i64 %1594, %1595
  %1619 = add nsw i64 %1618, %1597
  %1620 = shl nsw i64 %51, 2
  %1621 = add nsw i64 %1619, %1620
  %1622 = add nsw i64 %1621, 96
  %1623 = getelementptr i8, i8* %8, i64 %1622
  %1624 = add nsw i64 %45, %48
  %1625 = add nsw i64 %1624, %51
  %1626 = shl nsw i64 %1625, 2
  %1627 = add nsw i64 %1601, %1626
  %1628 = add nsw i64 %1627, 96
  %1629 = getelementptr i8, i8* %8, i64 %1628
  %1630 = icmp ult i8* %1600, %1617
  %1631 = icmp ult i8* %1612, %1606
  %1632 = and i1 %1630, %1631
  %1633 = icmp ult i8* %1600, %1629
  %1634 = icmp ult i8* %1623, %1606
  %1635 = and i1 %1633, %1634
  %1636 = or i1 %1632, %1635
  %1637 = icmp ult i8* %1612, %1629
  %1638 = icmp ult i8* %1623, %1617
  %1639 = and i1 %1637, %1638
  %1640 = or i1 %1636, %1639
  br i1 %1640, label %1576, label %1641

1641:                                             ; preds = %1592
  %1642 = and i64 %1574, -8
  %1643 = add nsw i64 %1642, %1437
  %1644 = add nsw i64 %1642, -8
  %1645 = lshr exact i64 %1644, 3
  %1646 = add nuw nsw i64 %1645, 1
  %1647 = and i64 %1646, 1
  %1648 = icmp eq i64 %1644, 0
  br i1 %1648, label %1686, label %1649

1649:                                             ; preds = %1641
  %1650 = sub nuw nsw i64 %1646, %1647
  br label %1651

1651:                                             ; preds = %1651, %1649
  %1652 = phi i64 [ 0, %1649 ], [ %1683, %1651 ]
  %1653 = phi i64 [ %1650, %1649 ], [ %1684, %1651 ]
  %1654 = add i64 %1652, %1437
  %1655 = add nsw i64 %1654, %349
  %1656 = getelementptr inbounds float, float* %49, i64 %1655
  %1657 = bitcast float* %1656 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1657, align 4, !alias.scope !70, !noalias !73
  %1658 = getelementptr inbounds float, float* %1656, i64 4
  %1659 = bitcast float* %1658 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1659, align 4, !alias.scope !70, !noalias !73
  %1660 = getelementptr inbounds float, float* %53, i64 %1655
  %1661 = bitcast float* %1660 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1661, align 4, !alias.scope !76, !noalias !77
  %1662 = getelementptr inbounds float, float* %1660, i64 4
  %1663 = bitcast float* %1662 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1663, align 4, !alias.scope !76, !noalias !77
  %1664 = getelementptr inbounds float, float* %52, i64 %1655
  %1665 = bitcast float* %1664 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1665, align 4, !alias.scope !77
  %1666 = getelementptr inbounds float, float* %1664, i64 4
  %1667 = bitcast float* %1666 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1667, align 4, !alias.scope !77
  %1668 = or i64 %1652, 8
  %1669 = add i64 %1668, %1437
  %1670 = add nsw i64 %1669, %349
  %1671 = getelementptr inbounds float, float* %49, i64 %1670
  %1672 = bitcast float* %1671 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1672, align 4, !alias.scope !70, !noalias !73
  %1673 = getelementptr inbounds float, float* %1671, i64 4
  %1674 = bitcast float* %1673 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1674, align 4, !alias.scope !70, !noalias !73
  %1675 = getelementptr inbounds float, float* %53, i64 %1670
  %1676 = bitcast float* %1675 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1676, align 4, !alias.scope !76, !noalias !77
  %1677 = getelementptr inbounds float, float* %1675, i64 4
  %1678 = bitcast float* %1677 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1678, align 4, !alias.scope !76, !noalias !77
  %1679 = getelementptr inbounds float, float* %52, i64 %1670
  %1680 = bitcast float* %1679 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1680, align 4, !alias.scope !77
  %1681 = getelementptr inbounds float, float* %1679, i64 4
  %1682 = bitcast float* %1681 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1682, align 4, !alias.scope !77
  %1683 = add i64 %1652, 16
  %1684 = add i64 %1653, -2
  %1685 = icmp eq i64 %1684, 0
  br i1 %1685, label %1686, label %1651, !llvm.loop !78

1686:                                             ; preds = %1651, %1641
  %1687 = phi i64 [ 0, %1641 ], [ %1683, %1651 ]
  %1688 = icmp eq i64 %1647, 0
  br i1 %1688, label %1704, label %1689

1689:                                             ; preds = %1686
  %1690 = add i64 %1687, %1437
  %1691 = add nsw i64 %1690, %349
  %1692 = getelementptr inbounds float, float* %49, i64 %1691
  %1693 = bitcast float* %1692 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1693, align 4, !alias.scope !70, !noalias !73
  %1694 = getelementptr inbounds float, float* %1692, i64 4
  %1695 = bitcast float* %1694 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1695, align 4, !alias.scope !70, !noalias !73
  %1696 = getelementptr inbounds float, float* %53, i64 %1691
  %1697 = bitcast float* %1696 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1697, align 4, !alias.scope !76, !noalias !77
  %1698 = getelementptr inbounds float, float* %1696, i64 4
  %1699 = bitcast float* %1698 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1699, align 4, !alias.scope !76, !noalias !77
  %1700 = getelementptr inbounds float, float* %52, i64 %1691
  %1701 = bitcast float* %1700 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1701, align 4, !alias.scope !77
  %1702 = getelementptr inbounds float, float* %1700, i64 4
  %1703 = bitcast float* %1702 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1703, align 4, !alias.scope !77
  br label %1704

1704:                                             ; preds = %1686, %1689
  %1705 = icmp eq i64 %1574, %1642
  br i1 %1705, label %1706, label %1576

1706:                                             ; preds = %1588, %1888, %1871, %1875, %1704, %1857, %1741, %1435
  %1707 = load i32, i32* %261, align 8
  store i32 %1707, i32* %616, align 4
  %1708 = load i32, i32* %40, align 4
  %1709 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %29, i64 0, i32 4, i64 0
  %1710 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 21, i64 0
  call fastcc void @deemphasis(float** nonnull %19, float* %3, i32 %42, i32 %22, i32 %1708, float* %1709, float* %1710, i32 %6)
  store i32 0, i32* %104, align 8
  %1711 = load i32, i32* %259, align 8
  %1712 = load i32, i32* %261, align 8
  %1713 = call i32 @llvm.ctlz.i32(i32 %1712, i1 true) #4, !range !10
  %1714 = or i32 %1713, -32
  %1715 = add i32 %1714, %1711
  %1716 = icmp sgt i32 %1715, %258
  br i1 %1716, label %1726, label %1717

1717:                                             ; preds = %1706
  %1718 = getelementptr %struct.ec_ctx, %struct.ec_ctx* %112, i64 0, i32 11
  %1719 = load i32, i32* %1718, align 8
  %1720 = icmp eq i32 %1719, 0
  br i1 %1720, label %1723, label %1721

1721:                                             ; preds = %1717
  %1722 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 11
  store i32 1, i32* %1722, align 8
  br label %1723

1723:                                             ; preds = %1717, %1721
  %1724 = load i32, i32* %40, align 4
  %1725 = sdiv i32 %42, %1724
  br label %1726

1726:                                             ; preds = %65, %7, %1706, %68, %1723, %97
  %1727 = phi i32 [ %102, %97 ], [ %1725, %1723 ], [ -1, %68 ], [ -3, %1706 ], [ -1, %7 ], [ -1, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %15) #4
  ret i32 %1727

1728:                                             ; preds = %1181, %1728
  %1729 = phi i64 [ %1739, %1728 ], [ %1182, %1181 ]
  %1730 = add nsw i64 %1729, %349
  %1731 = getelementptr inbounds float, float* %49, i64 %1730
  store float 0.000000e+00, float* %1731, align 4
  %1732 = getelementptr inbounds float, float* %53, i64 %1730
  store float -2.800000e+01, float* %1732, align 4
  %1733 = getelementptr inbounds float, float* %52, i64 %1730
  store float -2.800000e+01, float* %1733, align 4
  %1734 = add nuw nsw i64 %1729, 1
  %1735 = add nsw i64 %1734, %349
  %1736 = getelementptr inbounds float, float* %49, i64 %1735
  store float 0.000000e+00, float* %1736, align 4
  %1737 = getelementptr inbounds float, float* %53, i64 %1735
  store float -2.800000e+01, float* %1737, align 4
  %1738 = getelementptr inbounds float, float* %52, i64 %1735
  store float -2.800000e+01, float* %1738, align 4
  %1739 = add nuw nsw i64 %1729, 2
  %1740 = icmp eq i64 %1739, %1057
  br i1 %1740, label %1741, label %1728, !llvm.loop !79

1741:                                             ; preds = %1181, %1728, %1285
  br i1 %1054, label %1742, label %1706

1742:                                             ; preds = %1741
  %1743 = sub nsw i64 %349, %1056
  %1744 = icmp ult i64 %1743, 8
  br i1 %1744, label %1859, label %1745

1745:                                             ; preds = %1742
  %1746 = add nsw i64 %1056, %349
  %1747 = shl nsw i64 %1746, 2
  %1748 = shl nsw i64 %45, 2
  %1749 = add nsw i64 %1747, %1748
  %1750 = shl nsw i64 %48, 2
  %1751 = add nsw i64 %1749, %1750
  %1752 = add nsw i64 %1751, 96
  %1753 = getelementptr i8, i8* %8, i64 %1752
  %1754 = shl nsw i64 %349, 3
  %1755 = add nsw i64 %45, %48
  %1756 = shl nsw i64 %1755, 2
  %1757 = add nsw i64 %1754, %1756
  %1758 = add nsw i64 %1757, 96
  %1759 = getelementptr i8, i8* %8, i64 %1758
  %1760 = shl nsw i64 %51, 3
  %1761 = add nsw i64 %1760, %1747
  %1762 = add nsw i64 %1761, %1748
  %1763 = add nsw i64 %1762, %1750
  %1764 = add nsw i64 %1763, 96
  %1765 = getelementptr i8, i8* %8, i64 %1764
  %1766 = add nsw i64 %349, %51
  %1767 = shl nsw i64 %1766, 3
  %1768 = add nsw i64 %1767, %1756
  %1769 = add nsw i64 %1768, 96
  %1770 = getelementptr i8, i8* %8, i64 %1769
  %1771 = add nsw i64 %1747, %1748
  %1772 = add nsw i64 %1771, %1750
  %1773 = shl nsw i64 %51, 2
  %1774 = add nsw i64 %1772, %1773
  %1775 = add nsw i64 %1774, 96
  %1776 = getelementptr i8, i8* %8, i64 %1775
  %1777 = add nsw i64 %45, %48
  %1778 = add nsw i64 %1777, %51
  %1779 = shl nsw i64 %1778, 2
  %1780 = add nsw i64 %1754, %1779
  %1781 = add nsw i64 %1780, 96
  %1782 = getelementptr i8, i8* %8, i64 %1781
  %1783 = icmp ult i8* %1753, %1770
  %1784 = icmp ult i8* %1765, %1759
  %1785 = and i1 %1783, %1784
  %1786 = icmp ult i8* %1753, %1782
  %1787 = icmp ult i8* %1776, %1759
  %1788 = and i1 %1786, %1787
  %1789 = or i1 %1785, %1788
  %1790 = icmp ult i8* %1765, %1782
  %1791 = icmp ult i8* %1776, %1770
  %1792 = and i1 %1790, %1791
  %1793 = or i1 %1789, %1792
  br i1 %1793, label %1859, label %1794

1794:                                             ; preds = %1745
  %1795 = and i64 %1743, -8
  %1796 = add nsw i64 %1795, %1056
  %1797 = add nsw i64 %1795, -8
  %1798 = lshr exact i64 %1797, 3
  %1799 = add nuw nsw i64 %1798, 1
  %1800 = and i64 %1799, 1
  %1801 = icmp eq i64 %1797, 0
  br i1 %1801, label %1839, label %1802

1802:                                             ; preds = %1794
  %1803 = sub nuw nsw i64 %1799, %1800
  br label %1804

1804:                                             ; preds = %1804, %1802
  %1805 = phi i64 [ 0, %1802 ], [ %1836, %1804 ]
  %1806 = phi i64 [ %1803, %1802 ], [ %1837, %1804 ]
  %1807 = add i64 %1805, %1056
  %1808 = add nsw i64 %1807, %349
  %1809 = getelementptr inbounds float, float* %49, i64 %1808
  %1810 = bitcast float* %1809 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1810, align 4, !alias.scope !80, !noalias !83
  %1811 = getelementptr inbounds float, float* %1809, i64 4
  %1812 = bitcast float* %1811 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1812, align 4, !alias.scope !80, !noalias !83
  %1813 = getelementptr inbounds float, float* %53, i64 %1808
  %1814 = bitcast float* %1813 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1814, align 4, !alias.scope !86, !noalias !87
  %1815 = getelementptr inbounds float, float* %1813, i64 4
  %1816 = bitcast float* %1815 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1816, align 4, !alias.scope !86, !noalias !87
  %1817 = getelementptr inbounds float, float* %52, i64 %1808
  %1818 = bitcast float* %1817 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1818, align 4, !alias.scope !87
  %1819 = getelementptr inbounds float, float* %1817, i64 4
  %1820 = bitcast float* %1819 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1820, align 4, !alias.scope !87
  %1821 = or i64 %1805, 8
  %1822 = add i64 %1821, %1056
  %1823 = add nsw i64 %1822, %349
  %1824 = getelementptr inbounds float, float* %49, i64 %1823
  %1825 = bitcast float* %1824 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1825, align 4, !alias.scope !80, !noalias !83
  %1826 = getelementptr inbounds float, float* %1824, i64 4
  %1827 = bitcast float* %1826 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1827, align 4, !alias.scope !80, !noalias !83
  %1828 = getelementptr inbounds float, float* %53, i64 %1823
  %1829 = bitcast float* %1828 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1829, align 4, !alias.scope !86, !noalias !87
  %1830 = getelementptr inbounds float, float* %1828, i64 4
  %1831 = bitcast float* %1830 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1831, align 4, !alias.scope !86, !noalias !87
  %1832 = getelementptr inbounds float, float* %52, i64 %1823
  %1833 = bitcast float* %1832 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1833, align 4, !alias.scope !87
  %1834 = getelementptr inbounds float, float* %1832, i64 4
  %1835 = bitcast float* %1834 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1835, align 4, !alias.scope !87
  %1836 = add i64 %1805, 16
  %1837 = add i64 %1806, -2
  %1838 = icmp eq i64 %1837, 0
  br i1 %1838, label %1839, label %1804, !llvm.loop !88

1839:                                             ; preds = %1804, %1794
  %1840 = phi i64 [ 0, %1794 ], [ %1836, %1804 ]
  %1841 = icmp eq i64 %1800, 0
  br i1 %1841, label %1857, label %1842

1842:                                             ; preds = %1839
  %1843 = add i64 %1840, %1056
  %1844 = add nsw i64 %1843, %349
  %1845 = getelementptr inbounds float, float* %49, i64 %1844
  %1846 = bitcast float* %1845 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1846, align 4, !alias.scope !80, !noalias !83
  %1847 = getelementptr inbounds float, float* %1845, i64 4
  %1848 = bitcast float* %1847 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %1848, align 4, !alias.scope !80, !noalias !83
  %1849 = getelementptr inbounds float, float* %53, i64 %1844
  %1850 = bitcast float* %1849 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1850, align 4, !alias.scope !86, !noalias !87
  %1851 = getelementptr inbounds float, float* %1849, i64 4
  %1852 = bitcast float* %1851 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1852, align 4, !alias.scope !86, !noalias !87
  %1853 = getelementptr inbounds float, float* %52, i64 %1844
  %1854 = bitcast float* %1853 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1854, align 4, !alias.scope !87
  %1855 = getelementptr inbounds float, float* %1853, i64 4
  %1856 = bitcast float* %1855 to <4 x float>*
  store <4 x float> <float -2.800000e+01, float -2.800000e+01, float -2.800000e+01, float -2.800000e+01>, <4 x float>* %1856, align 4, !alias.scope !87
  br label %1857

1857:                                             ; preds = %1839, %1842
  %1858 = icmp eq i64 %1743, %1795
  br i1 %1858, label %1706, label %1859

1859:                                             ; preds = %1857, %1745, %1742
  %1860 = phi i64 [ %1056, %1745 ], [ %1056, %1742 ], [ %1796, %1857 ]
  %1861 = sub nsw i64 %349, %1860
  %1862 = xor i64 %1860, -1
  %1863 = and i64 %1861, 1
  %1864 = icmp eq i64 %1863, 0
  br i1 %1864, label %1871, label %1865

1865:                                             ; preds = %1859
  %1866 = add nsw i64 %1860, %349
  %1867 = getelementptr inbounds float, float* %49, i64 %1866
  store float 0.000000e+00, float* %1867, align 4
  %1868 = getelementptr inbounds float, float* %53, i64 %1866
  store float -2.800000e+01, float* %1868, align 4
  %1869 = getelementptr inbounds float, float* %52, i64 %1866
  store float -2.800000e+01, float* %1869, align 4
  %1870 = add nsw i64 %1860, 1
  br label %1871

1871:                                             ; preds = %1859, %1865
  %1872 = phi i64 [ %1860, %1859 ], [ %1870, %1865 ]
  %1873 = sub nsw i64 0, %349
  %1874 = icmp eq i64 %1862, %1873
  br i1 %1874, label %1706, label %1875

1875:                                             ; preds = %1871, %1875
  %1876 = phi i64 [ %1886, %1875 ], [ %1872, %1871 ]
  %1877 = add nsw i64 %1876, %349
  %1878 = getelementptr inbounds float, float* %49, i64 %1877
  store float 0.000000e+00, float* %1878, align 4
  %1879 = getelementptr inbounds float, float* %53, i64 %1877
  store float -2.800000e+01, float* %1879, align 4
  %1880 = getelementptr inbounds float, float* %52, i64 %1877
  store float -2.800000e+01, float* %1880, align 4
  %1881 = add nsw i64 %1876, 1
  %1882 = add nsw i64 %1881, %349
  %1883 = getelementptr inbounds float, float* %49, i64 %1882
  store float 0.000000e+00, float* %1883, align 4
  %1884 = getelementptr inbounds float, float* %53, i64 %1882
  store float -2.800000e+01, float* %1884, align 4
  %1885 = getelementptr inbounds float, float* %52, i64 %1882
  store float -2.800000e+01, float* %1885, align 4
  %1886 = add nsw i64 %1876, 2
  %1887 = icmp eq i64 %1886, %349
  br i1 %1887, label %1706, label %1875, !llvm.loop !89

1888:                                             ; preds = %1588, %1888
  %1889 = phi i64 [ %1899, %1888 ], [ %1589, %1588 ]
  %1890 = add nsw i64 %1889, %349
  %1891 = getelementptr inbounds float, float* %49, i64 %1890
  store float 0.000000e+00, float* %1891, align 4
  %1892 = getelementptr inbounds float, float* %53, i64 %1890
  store float -2.800000e+01, float* %1892, align 4
  %1893 = getelementptr inbounds float, float* %52, i64 %1890
  store float -2.800000e+01, float* %1893, align 4
  %1894 = add nsw i64 %1889, 1
  %1895 = add nsw i64 %1894, %349
  %1896 = getelementptr inbounds float, float* %49, i64 %1895
  store float 0.000000e+00, float* %1896, align 4
  %1897 = getelementptr inbounds float, float* %53, i64 %1895
  store float -2.800000e+01, float* %1897, align 4
  %1898 = getelementptr inbounds float, float* %52, i64 %1895
  store float -2.800000e+01, float* %1898, align 4
  %1899 = add nsw i64 %1889, 2
  %1900 = icmp eq i64 %1899, %349
  br i1 %1900, label %1706, label %1888, !llvm.loop !90
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @celt_decode_lost(%struct.OpusCustomDecoder* noalias, i32, i32) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca [4096 x i8], align 16
  %6 = alloca [2 x float*], align 16
  %7 = alloca [2 x float*], align 16
  %8 = alloca [25 x float], align 16
  %9 = alloca [24 x float], align 16
  %10 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = bitcast [2 x float*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #4
  %13 = getelementptr inbounds [2 x float*], [2 x float*]* %6, i64 0, i64 0
  %14 = bitcast [2 x float*]* %7 to i8*
  %15 = bitcast [2 x float*]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #4
  %16 = getelementptr inbounds [2 x float*], [2 x float*]* %7, i64 0, i64 0
  %17 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  %18 = bitcast [2 x float*]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 16, i1 false)
  %19 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %17, align 8
  %20 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %19, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %19, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %19, i64 0, i32 5
  %25 = load i16*, i16** %24, align 8
  %26 = add nsw i32 %23, 2048
  %27 = sext i32 %1 to i64
  %28 = sub nsw i64 0, %27
  %29 = sext i32 %11 to i64
  br label %30

30:                                               ; preds = %30, %3
  %31 = phi i64 [ %40, %30 ], [ 0, %3 ]
  %32 = trunc i64 %31 to i32
  %33 = mul nsw i32 %26, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %34
  %36 = getelementptr inbounds [2 x float*], [2 x float*]* %6, i64 0, i64 %31
  store float* %35, float** %36, align 8
  %37 = getelementptr inbounds float, float* %35, i64 2048
  %38 = getelementptr inbounds float, float* %37, i64 %28
  %39 = getelementptr inbounds [2 x float*], [2 x float*]* %7, i64 0, i64 %31
  store float* %38, float** %39, align 8
  %40 = add nuw nsw i64 %31, 1
  %41 = icmp slt i64 %40, %29
  br i1 %41, label %30, label %42

42:                                               ; preds = %30
  %43 = mul nsw i32 %26, %11
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %44
  %46 = mul nsw i32 %11, 24
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %45, i64 %47
  %49 = shl nsw i32 %21, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %48, i64 %50
  %52 = getelementptr inbounds float, float* %51, i64 %50
  %53 = getelementptr inbounds float, float* %52, i64 %50
  %54 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 13
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 5
  %57 = load i32, i32* %56, align 8
  %58 = icmp sgt i32 %55, 4
  %59 = icmp ne i32 %57, 0
  %60 = or i1 %58, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %42
  %62 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 14
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %264, label %65

65:                                               ; preds = %61, %42
  %66 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 6
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %19, i64 0, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = icmp slt i32 %67, %69
  %71 = select i1 %70, i32 %67, i32 %69
  %72 = icmp sgt i32 %57, %71
  %73 = select i1 %72, i32 %57, i32 %71
  %74 = mul nsw i32 %11, %1
  %75 = sext i32 %74 to i64
  %76 = shl nsw i64 %75, 2
  %77 = alloca float, i64 %75, align 16
  %78 = bitcast float* %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %78, i8 -86, i64 %76, i1 false)
  %79 = icmp eq i32 %55, 0
  %80 = select i1 %79, float 1.500000e+00, float 5.000000e-01
  %81 = icmp slt i32 %57, %67
  br i1 %81, label %82, label %193

82:                                               ; preds = %65
  %83 = sext i32 %57 to i64
  %84 = sext i32 %21 to i64
  %85 = sext i32 %67 to i64
  %86 = sub nsw i64 %85, %83
  %87 = add nsw i64 %83, %44
  %88 = add nsw i64 %87, %47
  %89 = add nsw i64 %85, %44
  %90 = add nsw i64 %89, %47
  %91 = mul nsw i64 %50, 3
  %92 = add nsw i64 %91, %83
  %93 = add nsw i64 %92, %44
  %94 = add nsw i64 %93, %47
  %95 = add nsw i64 %91, %85
  %96 = add nsw i64 %95, %44
  %97 = add nsw i64 %96, %47
  %98 = icmp ult i64 %86, 8
  %99 = and i64 %86, -8
  %100 = add nsw i64 %99, %83
  %101 = insertelement <4 x float> undef, float %80, i32 0
  %102 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> zeroinitializer
  %103 = insertelement <4 x float> undef, float %80, i32 0
  %104 = shufflevector <4 x float> %103, <4 x float> undef, <4 x i32> zeroinitializer
  %105 = icmp eq i64 %86, %99
  %106 = sub nsw i64 0, %85
  br label %107

107:                                              ; preds = %82, %190
  %108 = phi i64 [ 0, %82 ], [ %191, %190 ]
  %109 = mul i64 %108, %84
  %110 = mul nsw i64 %108, %84
  br i1 %98, label %150, label %111

111:                                              ; preds = %107
  %112 = add i64 %97, %109
  %113 = getelementptr %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %112
  %114 = add i64 %94, %109
  %115 = getelementptr %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %114
  %116 = add i64 %90, %109
  %117 = getelementptr %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %116
  %118 = add i64 %88, %109
  %119 = getelementptr %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %118
  %120 = icmp ult float* %119, %113
  %121 = icmp ult float* %115, %117
  %122 = and i1 %120, %121
  br i1 %122, label %150, label %123

123:                                              ; preds = %111, %123
  %124 = phi i64 [ %147, %123 ], [ 0, %111 ]
  %125 = add i64 %124, %83
  %126 = add nsw i64 %125, %110
  %127 = getelementptr inbounds float, float* %53, i64 %126
  %128 = bitcast float* %127 to <4 x float>*
  %129 = load <4 x float>, <4 x float>* %128, align 4, !alias.scope !91
  %130 = getelementptr inbounds float, float* %127, i64 4
  %131 = bitcast float* %130 to <4 x float>*
  %132 = load <4 x float>, <4 x float>* %131, align 4, !alias.scope !91
  %133 = getelementptr inbounds float, float* %48, i64 %126
  %134 = bitcast float* %133 to <4 x float>*
  %135 = load <4 x float>, <4 x float>* %134, align 4, !alias.scope !94, !noalias !91
  %136 = getelementptr inbounds float, float* %133, i64 4
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 4, !alias.scope !94, !noalias !91
  %139 = fsub <4 x float> %135, %102
  %140 = fsub <4 x float> %138, %104
  %141 = fcmp ogt <4 x float> %129, %139
  %142 = fcmp ogt <4 x float> %132, %140
  %143 = select <4 x i1> %141, <4 x float> %129, <4 x float> %139
  %144 = select <4 x i1> %142, <4 x float> %132, <4 x float> %140
  %145 = bitcast float* %133 to <4 x float>*
  store <4 x float> %143, <4 x float>* %145, align 4, !alias.scope !94, !noalias !91
  %146 = bitcast float* %136 to <4 x float>*
  store <4 x float> %144, <4 x float>* %146, align 4, !alias.scope !94, !noalias !91
  %147 = add i64 %124, 8
  %148 = icmp eq i64 %147, %99
  br i1 %148, label %149, label %123, !llvm.loop !96

149:                                              ; preds = %123
  br i1 %105, label %190, label %150

150:                                              ; preds = %149, %111, %107
  %151 = phi i64 [ %83, %111 ], [ %83, %107 ], [ %100, %149 ]
  %152 = sub nsw i64 %85, %151
  %153 = xor i64 %151, -1
  %154 = and i64 %152, 1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %166, label %156

156:                                              ; preds = %150
  %157 = add nsw i64 %151, %110
  %158 = getelementptr inbounds float, float* %53, i64 %157
  %159 = load float, float* %158, align 4
  %160 = getelementptr inbounds float, float* %48, i64 %157
  %161 = load float, float* %160, align 4
  %162 = fsub float %161, %80
  %163 = fcmp ogt float %159, %162
  %164 = select i1 %163, float %159, float %162
  store float %164, float* %160, align 4
  %165 = add nsw i64 %151, 1
  br label %166

166:                                              ; preds = %156, %150
  %167 = phi i64 [ %165, %156 ], [ %151, %150 ]
  %168 = icmp eq i64 %153, %106
  br i1 %168, label %190, label %169

169:                                              ; preds = %166, %169
  %170 = phi i64 [ %188, %169 ], [ %167, %166 ]
  %171 = add nsw i64 %170, %110
  %172 = getelementptr inbounds float, float* %53, i64 %171
  %173 = load float, float* %172, align 4
  %174 = getelementptr inbounds float, float* %48, i64 %171
  %175 = load float, float* %174, align 4
  %176 = fsub float %175, %80
  %177 = fcmp ogt float %173, %176
  %178 = select i1 %177, float %173, float %176
  store float %178, float* %174, align 4
  %179 = add nsw i64 %170, 1
  %180 = add nsw i64 %179, %110
  %181 = getelementptr inbounds float, float* %53, i64 %180
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds float, float* %48, i64 %180
  %184 = load float, float* %183, align 4
  %185 = fsub float %184, %80
  %186 = fcmp ogt float %182, %185
  %187 = select i1 %186, float %182, float %185
  store float %187, float* %183, align 4
  %188 = add nsw i64 %170, 2
  %189 = icmp eq i64 %188, %85
  br i1 %189, label %190, label %169, !llvm.loop !97

190:                                              ; preds = %166, %169, %149
  %191 = add nuw nsw i64 %108, 1
  %192 = icmp slt i64 %191, %29
  br i1 %192, label %107, label %193

193:                                              ; preds = %190, %65
  %194 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 10
  %195 = load i32, i32* %194, align 4
  %196 = icmp sgt i32 %11, 0
  br i1 %196, label %197, label %243

197:                                              ; preds = %193
  %198 = icmp slt i32 %57, %71
  %199 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  br i1 %198, label %200, label %243

200:                                              ; preds = %197
  %201 = sext i32 %57 to i64
  %202 = sext i32 %73 to i64
  br label %203

203:                                              ; preds = %240, %200
  %204 = phi i32 [ %241, %240 ], [ 0, %200 ]
  %205 = phi i32 [ %226, %240 ], [ %195, %200 ]
  %206 = mul nsw i32 %204, %1
  br label %207

207:                                              ; preds = %203, %225
  %208 = phi i64 [ %201, %203 ], [ %215, %225 ]
  %209 = phi i32 [ %205, %203 ], [ %226, %225 ]
  %210 = getelementptr inbounds i16, i16* %25, i64 %208
  %211 = load i16, i16* %210, align 2
  %212 = sext i16 %211 to i32
  %213 = shl i32 %212, %2
  %214 = add nsw i32 %213, %206
  %215 = add nsw i64 %208, 1
  %216 = getelementptr inbounds i16, i16* %25, i64 %215
  %217 = load i16, i16* %216, align 2
  %218 = sext i16 %217 to i32
  %219 = sub nsw i32 %218, %212
  %220 = shl i32 %219, %2
  %221 = icmp sgt i32 %220, 0
  %222 = sext i32 %214 to i64
  br i1 %221, label %223, label %225

223:                                              ; preds = %207
  %224 = zext i32 %220 to i64
  br label %230

225:                                              ; preds = %230, %207
  %226 = phi i32 [ %209, %207 ], [ %233, %230 ]
  %227 = getelementptr inbounds float, float* %77, i64 %222
  %228 = load i32, i32* %199, align 8
  call void @renormalise_vector(float* %227, i32 %220, float 1.000000e+00, i32 %228) #4
  %229 = icmp slt i64 %215, %202
  br i1 %229, label %207, label %240

230:                                              ; preds = %230, %223
  %231 = phi i64 [ 0, %223 ], [ %238, %230 ]
  %232 = phi i32 [ %209, %223 ], [ %233, %230 ]
  %233 = call i32 @celt_lcg_rand(i32 %232) #4
  %234 = ashr i32 %233, 20
  %235 = sitofp i32 %234 to float
  %236 = add nsw i64 %231, %222
  %237 = getelementptr inbounds float, float* %77, i64 %236
  store float %235, float* %237, align 4
  %238 = add nuw nsw i64 %231, 1
  %239 = icmp eq i64 %238, %224
  br i1 %239, label %225, label %230

240:                                              ; preds = %225
  %241 = add nuw nsw i32 %204, 1
  %242 = icmp eq i32 %241, %11
  br i1 %242, label %243, label %203

243:                                              ; preds = %240, %197, %193
  %244 = phi i32 [ %195, %193 ], [ %195, %197 ], [ %226, %240 ]
  store i32 %244, i32* %194, align 4
  %245 = sub i32 2048, %1
  %246 = ashr i32 %23, 1
  %247 = add nsw i32 %245, %246
  %248 = sext i32 %247 to i64
  %249 = shl nsw i64 %248, 2
  br label %250

250:                                              ; preds = %250, %243
  %251 = phi i64 [ %257, %250 ], [ 0, %243 ]
  %252 = getelementptr inbounds [2 x float*], [2 x float*]* %6, i64 0, i64 %251
  %253 = load float*, float** %252, align 8
  %254 = bitcast float* %253 to i8*
  %255 = getelementptr inbounds float, float* %253, i64 %27
  %256 = bitcast float* %255 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %254, i8* align 4 %256, i64 %249, i1 false)
  %257 = add nuw nsw i64 %251, 1
  %258 = icmp slt i64 %257, %29
  br i1 %258, label %250, label %259

259:                                              ; preds = %250
  %260 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 4
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  %263 = load i32, i32* %262, align 8
  call fastcc void @celt_synthesis(%struct.OpusCustomMode* %19, float* nonnull %77, float** nonnull %16, float* %48, i32 %57, i32 %73, i32 %11, i32 %11, i32 0, i32 %2, i32 %261, i32 0, i32 %263)
  br label %1189

264:                                              ; preds = %61
  %265 = icmp eq i32 %55, 0
  br i1 %265, label %266, label %277

266:                                              ; preds = %264
  %267 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  %268 = load i32, i32* %267, align 8
  %269 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %269)
  %270 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %270) #4
  store i32 -1431655766, i32* %4, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %269, i8 -86, i64 4096, i1 false) #4
  %271 = bitcast [4096 x i8]* %5 to float*
  call void @pitch_downsample(float** nonnull %13, float* nonnull %271, i32 2048, i32 %11, i32 %268) #4
  %272 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 1440
  %273 = bitcast i8* %272 to float*
  call void @pitch_search(float* %273, float* nonnull %271, i32 1328, i32 620, i32* nonnull %4, i32 %268) #4
  %274 = load i32, i32* %4, align 4
  %275 = sub nsw i32 720, %274
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %270) #4
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %269)
  %276 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 12
  store i32 %275, i32* %276, align 4
  br label %280

277:                                              ; preds = %264
  %278 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 12
  %279 = load i32, i32* %278, align 4
  br label %280

280:                                              ; preds = %277, %266
  %281 = phi float [ 1.000000e+00, %266 ], [ 0x3FE99999A0000000, %277 ]
  %282 = phi i32 [ %275, %266 ], [ %279, %277 ]
  %283 = shl nsw i32 %282, 1
  %284 = icmp slt i32 %283, 1024
  %285 = select i1 %284, i32 %283, i32 1024
  %286 = sext i32 %23 to i64
  %287 = shl nsw i64 %286, 2
  %288 = alloca float, i64 %286, align 16
  %289 = bitcast float* %288 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %289, i8 -86, i64 %287, i1 false)
  %290 = alloca [4192 x i8], align 16
  %291 = getelementptr inbounds [4192 x i8], [4192 x i8]* %290, i64 0, i64 0
  %292 = getelementptr inbounds [4192 x i8], [4192 x i8]* %290, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %292, i8 -86, i64 4192, i1 false)
  %293 = sext i32 %285 to i64
  %294 = shl nsw i64 %293, 2
  %295 = alloca float, i64 %293, align 16
  %296 = bitcast float* %295 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %296, i8 -86, i64 %294, i1 false)
  %297 = getelementptr inbounds [4192 x i8], [4192 x i8]* %290, i64 0, i64 96
  %298 = bitcast i8* %297 to float*
  %299 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %19, i64 0, i32 12
  %300 = load float*, float** %299, align 8
  %301 = bitcast [25 x float]* %8 to i8*
  %302 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 0
  %303 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 9
  %304 = getelementptr inbounds [4192 x i8], [4192 x i8]* %290, i64 0, i64 4192
  %305 = bitcast i8* %304 to float*
  %306 = sub nsw i64 0, %293
  %307 = getelementptr inbounds float, float* %305, i64 %306
  %308 = bitcast float* %307 to i8*
  %309 = ashr exact i32 %285, 1
  %310 = icmp sgt i32 %282, 0
  %311 = sub nsw i32 1024, %309
  %312 = sub i32 1024, %285
  %313 = sub nsw i32 2048, %1
  %314 = sext i32 %313 to i64
  %315 = shl nsw i64 %314, 2
  %316 = sub nsw i32 1024, %282
  %317 = add i32 %23, %1
  %318 = icmp sgt i32 %317, 0
  %319 = bitcast [24 x float]* %9 to i8*
  %320 = sub i32 2047, %1
  %321 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 0
  %322 = icmp sgt i32 %23, 0
  %323 = icmp sgt i32 %1, 0
  %324 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 15
  %325 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 17
  %326 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 19
  %327 = sdiv i32 %23, 2
  %328 = icmp sgt i32 %23, 1
  %329 = sext i32 %312 to i64
  %330 = sext i32 %309 to i64
  %331 = sext i32 %317 to i64
  %332 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 4
  %333 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 8
  %334 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 12
  %335 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 16
  %336 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 20
  %337 = getelementptr inbounds [25 x float], [25 x float]* %8, i64 0, i64 24
  %338 = zext i32 %317 to i64
  %339 = sext i32 %320 to i64
  %340 = bitcast [24 x float]* %9 to i32*
  %341 = sub i32 2046, %1
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 1
  %344 = bitcast float* %343 to i32*
  %345 = sub i32 2045, %1
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 2
  %348 = bitcast float* %347 to i32*
  %349 = sub i32 2044, %1
  %350 = sext i32 %349 to i64
  %351 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 3
  %352 = bitcast float* %351 to i32*
  %353 = sub i32 2043, %1
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 4
  %356 = bitcast float* %355 to i32*
  %357 = sub i32 2042, %1
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 5
  %360 = bitcast float* %359 to i32*
  %361 = sub i32 2041, %1
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 6
  %364 = bitcast float* %363 to i32*
  %365 = sub i32 2040, %1
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 7
  %368 = bitcast float* %367 to i32*
  %369 = sub i32 2039, %1
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 8
  %372 = bitcast float* %371 to i32*
  %373 = sub i32 2038, %1
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 9
  %376 = bitcast float* %375 to i32*
  %377 = sub i32 2037, %1
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 10
  %380 = bitcast float* %379 to i32*
  %381 = sub i32 2036, %1
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 11
  %384 = bitcast float* %383 to i32*
  %385 = sub i32 2035, %1
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 12
  %388 = bitcast float* %387 to i32*
  %389 = sub i32 2034, %1
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 13
  %392 = bitcast float* %391 to i32*
  %393 = sub i32 2033, %1
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 14
  %396 = bitcast float* %395 to i32*
  %397 = sub i32 2032, %1
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 15
  %400 = bitcast float* %399 to i32*
  %401 = sub i32 2031, %1
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 16
  %404 = bitcast float* %403 to i32*
  %405 = sub i32 2030, %1
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 17
  %408 = bitcast float* %407 to i32*
  %409 = sub i32 2029, %1
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 18
  %412 = bitcast float* %411 to i32*
  %413 = sub i32 2028, %1
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 19
  %416 = bitcast float* %415 to i32*
  %417 = sub i32 2027, %1
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 20
  %420 = bitcast float* %419 to i32*
  %421 = sub i32 2026, %1
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 21
  %424 = bitcast float* %423 to i32*
  %425 = sub i32 2025, %1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 22
  %428 = bitcast float* %427 to i32*
  %429 = sub i32 2024, %1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [24 x float], [24 x float]* %9, i64 0, i64 23
  %432 = bitcast float* %431 to i32*
  %433 = zext i32 %317 to i64
  %434 = zext i32 %23 to i64
  %435 = zext i32 %327 to i64
  %436 = add nsw i64 %435, -1
  %437 = add i32 %23, -1
  %438 = add nuw nsw i64 %435, 2048
  %439 = sext i32 %437 to i64
  %440 = add nsw i64 %439, 1
  %441 = sub nsw i64 %440, %435
  %442 = getelementptr float, float* %300, i64 %441
  %443 = add nsw i64 %439, 1
  %444 = getelementptr float, float* %300, i64 %443
  %445 = getelementptr float, float* %300, i64 %435
  %446 = getelementptr float, float* %288, i64 %435
  %447 = getelementptr float, float* %288, i64 %441
  %448 = getelementptr float, float* %288, i64 %443
  %449 = add nsw i64 %286, 1
  %450 = icmp sgt i64 %449, %331
  %451 = select i1 %450, i64 %449, i64 %331
  %452 = sub nsw i64 %451, %286
  %453 = add nsw i64 %286, 1
  %454 = icmp sgt i64 %453, %331
  %455 = select i1 %454, i64 %453, i64 %331
  %456 = xor i64 %286, -1
  %457 = add nsw i64 %455, %456
  %458 = add i32 %23, 2048
  %459 = sub i32 %458, %1
  %460 = add nsw i64 %434, -1
  %461 = sub i32 2048, %1
  %462 = getelementptr float, float* %300, i64 %434
  %463 = sext i32 %461 to i64
  %464 = add nsw i64 %463, %434
  %465 = add nsw i64 %433, -1
  %466 = getelementptr inbounds [4192 x i8], [4192 x i8]* %290, i64 1, i64 0
  %467 = and i64 %338, 4294967288
  %468 = add nsw i64 %467, -8
  %469 = lshr exact i64 %468, 3
  %470 = add nuw nsw i64 %469, 1
  %471 = sub nsw i64 %451, %286
  %472 = add nsw i64 %471, -8
  %473 = lshr i64 %472, 3
  %474 = add nuw nsw i64 %473, 1
  %475 = bitcast [25 x float]* %8 to <4 x float>*
  %476 = bitcast [25 x float]* %8 to <4 x float>*
  %477 = bitcast float* %332 to <4 x float>*
  %478 = bitcast float* %332 to <4 x float>*
  %479 = bitcast float* %333 to <4 x float>*
  %480 = bitcast float* %333 to <4 x float>*
  %481 = bitcast float* %334 to <4 x float>*
  %482 = bitcast float* %334 to <4 x float>*
  %483 = bitcast float* %335 to <4 x float>*
  %484 = bitcast float* %335 to <4 x float>*
  %485 = bitcast float* %336 to <4 x float>*
  %486 = bitcast float* %336 to <4 x float>*
  %487 = and i64 %338, 1
  %488 = icmp eq i32 %317, 1
  %489 = sub nsw i64 %338, %487
  %490 = icmp eq i64 %487, 0
  %491 = icmp ult i32 %317, 8
  %492 = trunc i64 %465 to i32
  %493 = add i32 %461, %492
  %494 = icmp slt i32 %493, %461
  %495 = icmp ugt i64 %465, 4294967295
  %496 = or i1 %494, %495
  %497 = and i64 %433, 4294967288
  %498 = trunc i64 %497 to i32
  %499 = and i64 %470, 3
  %500 = icmp ult i64 %468, 24
  %501 = sub nsw i64 %470, %499
  %502 = icmp eq i64 %499, 0
  %503 = icmp eq i64 %497, %433
  %504 = and i64 %338, 3
  %505 = icmp eq i64 %504, 0
  %506 = icmp ult i32 %23, 8
  %507 = trunc i64 %460 to i32
  %508 = add i32 %461, %507
  %509 = icmp slt i32 %508, %461
  %510 = icmp ugt i64 %460, 4294967295
  %511 = or i1 %509, %510
  %512 = and i64 %434, 4294967288
  %513 = trunc i64 %512 to i32
  %514 = icmp eq i64 %512, %434
  %515 = and i64 %434, 1
  %516 = icmp eq i64 %515, 0
  %517 = sub nsw i64 0, %434
  %518 = icmp ult i64 %452, 8
  %519 = trunc i64 %457 to i32
  %520 = add i32 %459, %519
  %521 = icmp slt i32 %520, %459
  %522 = icmp ugt i64 %457, 4294967295
  %523 = or i1 %521, %522
  %524 = and i64 %452, -8
  %525 = add nsw i64 %524, %286
  %526 = trunc i64 %524 to i32
  %527 = add i32 %23, %526
  %528 = and i64 %474, 1
  %529 = icmp eq i64 %473, 0
  %530 = sub nuw nsw i64 %474, %528
  %531 = icmp eq i64 %528, 0
  %532 = icmp eq i64 %452, %524
  %533 = icmp ult i32 %327, 4
  %534 = trunc i64 %436 to i32
  %535 = sub i32 %437, %534
  %536 = icmp sgt i32 %535, %437
  %537 = icmp ugt i64 %436, 4294967295
  %538 = or i1 %536, %537
  %539 = and i64 %435, 4294967292
  %540 = trunc i64 %539 to i32
  %541 = getelementptr inbounds float, float* %288, i64 -3
  %542 = getelementptr inbounds float, float* %300, i64 -3
  %543 = icmp eq i64 %539, %435
  br label %544

544:                                              ; preds = %1186, %280
  %545 = phi i64 [ %1187, %1186 ], [ 0, %280 ]
  %546 = getelementptr inbounds [2 x float*], [2 x float*]* %6, i64 0, i64 %545
  %547 = load float*, float** %546, align 8
  %548 = getelementptr float, float* %547, i64 1000
  %549 = bitcast float* %548 to i8*
  %550 = getelementptr float, float* %547, i64 2048
  %551 = bitcast float* %550 to i8*
  %552 = icmp ult i8* %291, %551
  %553 = icmp ugt i8* %466, %549
  %554 = and i1 %552, %553
  br i1 %554, label %571, label %555

555:                                              ; preds = %544, %1191
  %556 = phi i64 [ %1204, %1191 ], [ 0, %544 ]
  %557 = add nuw nsw i64 %556, 1000
  %558 = getelementptr inbounds float, float* %547, i64 %557
  %559 = bitcast float* %558 to <4 x i32>*
  %560 = load <4 x i32>, <4 x i32>* %559, align 4, !alias.scope !98
  %561 = getelementptr inbounds float, float* %558, i64 4
  %562 = bitcast float* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4, !alias.scope !98
  %564 = add nsw i64 %556, -24
  %565 = getelementptr inbounds float, float* %298, i64 %564
  %566 = bitcast float* %565 to <4 x i32>*
  store <4 x i32> %560, <4 x i32>* %566, align 16, !alias.scope !101, !noalias !98
  %567 = getelementptr inbounds float, float* %565, i64 4
  %568 = bitcast float* %567 to <4 x i32>*
  store <4 x i32> %563, <4 x i32>* %568, align 16, !alias.scope !101, !noalias !98
  %569 = or i64 %556, 8
  %570 = icmp eq i64 %569, 1048
  br i1 %570, label %603, label %1191, !llvm.loop !103

571:                                              ; preds = %544, %571
  %572 = phi i64 [ %601, %571 ], [ 0, %544 ]
  %573 = add nuw nsw i64 %572, 1000
  %574 = getelementptr inbounds float, float* %547, i64 %573
  %575 = bitcast float* %574 to i32*
  %576 = load i32, i32* %575, align 4
  %577 = add nsw i64 %572, -24
  %578 = getelementptr inbounds float, float* %298, i64 %577
  %579 = bitcast float* %578 to i32*
  store i32 %576, i32* %579, align 16
  %580 = add nuw nsw i64 %572, 1001
  %581 = getelementptr inbounds float, float* %547, i64 %580
  %582 = bitcast float* %581 to i32*
  %583 = load i32, i32* %582, align 4
  %584 = add nsw i64 %572, -23
  %585 = getelementptr inbounds float, float* %298, i64 %584
  %586 = bitcast float* %585 to i32*
  store i32 %583, i32* %586, align 4
  %587 = add nuw nsw i64 %572, 1002
  %588 = getelementptr inbounds float, float* %547, i64 %587
  %589 = bitcast float* %588 to i32*
  %590 = load i32, i32* %589, align 4
  %591 = add nsw i64 %572, -22
  %592 = getelementptr inbounds float, float* %298, i64 %591
  %593 = bitcast float* %592 to i32*
  store i32 %590, i32* %593, align 8
  %594 = add nuw nsw i64 %572, 1003
  %595 = getelementptr inbounds float, float* %547, i64 %594
  %596 = bitcast float* %595 to i32*
  %597 = load i32, i32* %596, align 4
  %598 = add nsw i64 %572, -21
  %599 = getelementptr inbounds float, float* %298, i64 %598
  %600 = bitcast float* %599 to i32*
  store i32 %597, i32* %600, align 4
  %601 = add nuw nsw i64 %572, 4
  %602 = icmp eq i64 %601, 1048
  br i1 %602, label %603, label %571, !llvm.loop !104

603:                                              ; preds = %555, %571
  br i1 %265, label %607, label %604

604:                                              ; preds = %603
  %605 = mul i64 %545, 24
  %606 = and i64 %605, 4294967288
  br label %660

607:                                              ; preds = %603
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %301) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %301, i8 -1, i64 100, i1 false)
  %608 = load i32, i32* %303, align 8
  %609 = call i32 @_celt_autocorr(float* %298, float* nonnull %302, float* %300, i32 %23, i32 24, i32 1024, i32 %608) #4
  %610 = load <4 x float>, <4 x float>* %475, align 16
  %611 = extractelement <4 x float> %610, i32 1
  %612 = fmul float %611, 0x3F10C6F7C0000000
  %613 = extractelement <4 x float> %610, i32 2
  %614 = fmul float %613, 0x3F10C6F7C0000000
  %615 = fmul float %614, 2.000000e+00
  %616 = fmul float %615, 2.000000e+00
  %617 = extractelement <4 x float> %610, i32 3
  %618 = fmul float %617, 0x3F10C6F7C0000000
  %619 = fmul float %618, 3.000000e+00
  %620 = fmul float %619, 3.000000e+00
  %621 = insertelement <4 x float> <float 0x3FF00068E0000000, float undef, float undef, float undef>, float %612, i32 1
  %622 = insertelement <4 x float> %621, float %616, i32 2
  %623 = insertelement <4 x float> %622, float %620, i32 3
  %624 = fmul <4 x float> %610, %623
  %625 = fsub <4 x float> %610, %623
  %626 = shufflevector <4 x float> %624, <4 x float> %625, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  store <4 x float> %626, <4 x float>* %476, align 16
  %627 = load <4 x float>, <4 x float>* %477, align 16
  %628 = fmul <4 x float> %627, <float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000>
  %629 = fmul <4 x float> %628, <float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00>
  %630 = fmul <4 x float> %629, <float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00>
  %631 = fsub <4 x float> %627, %630
  store <4 x float> %631, <4 x float>* %478, align 16
  %632 = load <4 x float>, <4 x float>* %479, align 16
  %633 = fmul <4 x float> %632, <float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000>
  %634 = fmul <4 x float> %633, <float 8.000000e+00, float 9.000000e+00, float 1.000000e+01, float 1.100000e+01>
  %635 = fmul <4 x float> %634, <float 8.000000e+00, float 9.000000e+00, float 1.000000e+01, float 1.100000e+01>
  %636 = fsub <4 x float> %632, %635
  store <4 x float> %636, <4 x float>* %480, align 16
  %637 = load <4 x float>, <4 x float>* %481, align 16
  %638 = fmul <4 x float> %637, <float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000>
  %639 = fmul <4 x float> %638, <float 1.200000e+01, float 1.300000e+01, float 1.400000e+01, float 1.500000e+01>
  %640 = fmul <4 x float> %639, <float 1.200000e+01, float 1.300000e+01, float 1.400000e+01, float 1.500000e+01>
  %641 = fsub <4 x float> %637, %640
  store <4 x float> %641, <4 x float>* %482, align 16
  %642 = load <4 x float>, <4 x float>* %483, align 16
  %643 = fmul <4 x float> %642, <float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000>
  %644 = fmul <4 x float> %643, <float 1.600000e+01, float 1.700000e+01, float 1.800000e+01, float 1.900000e+01>
  %645 = fmul <4 x float> %644, <float 1.600000e+01, float 1.700000e+01, float 1.800000e+01, float 1.900000e+01>
  %646 = fsub <4 x float> %642, %645
  store <4 x float> %646, <4 x float>* %484, align 16
  %647 = load <4 x float>, <4 x float>* %485, align 16
  %648 = fmul <4 x float> %647, <float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000, float 0x3F10C6F7C0000000>
  %649 = fmul <4 x float> %648, <float 2.000000e+01, float 2.100000e+01, float 2.200000e+01, float 2.300000e+01>
  %650 = fmul <4 x float> %649, <float 2.000000e+01, float 2.100000e+01, float 2.200000e+01, float 2.300000e+01>
  %651 = fsub <4 x float> %647, %650
  store <4 x float> %651, <4 x float>* %486, align 16
  %652 = load float, float* %337, align 16
  %653 = fmul float %652, 0x3F10C6F7C0000000
  %654 = fmul float %653, 2.400000e+01
  %655 = fmul float %654, 2.400000e+01
  %656 = fsub float %652, %655
  store float %656, float* %337, align 16
  %657 = mul i64 %545, 24
  %658 = and i64 %657, 4294967288
  %659 = getelementptr inbounds float, float* %45, i64 %658
  call void @_celt_lpc(float* %659, float* nonnull %302, i32 24) #4
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %301) #4
  br label %660

660:                                              ; preds = %604, %607
  %661 = phi i64 [ %606, %604 ], [ %658, %607 ]
  %662 = getelementptr inbounds float, float* %45, i64 %661
  %663 = load i32, i32* %303, align 8
  call void @celt_fir_c(float* %307, float* %662, float* nonnull %295, i32 %285, i32 24, i32 %663) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %308, i8* nonnull align 16 %296, i64 %294, i1 false)
  br i1 %310, label %664, label %682

664:                                              ; preds = %660, %664
  %665 = phi i64 [ %679, %664 ], [ 0, %660 ]
  %666 = phi i32 [ %680, %664 ], [ 0, %660 ]
  %667 = phi <2 x float> [ %678, %664 ], [ <float 1.000000e+00, float 1.000000e+00>, %660 ]
  %668 = add nsw i32 %311, %666
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds float, float* %298, i64 %669
  %671 = load float, float* %670, align 4
  %672 = add nsw i64 %665, %329
  %673 = getelementptr inbounds float, float* %298, i64 %672
  %674 = load float, float* %673, align 4
  %675 = insertelement <2 x float> undef, float %671, i32 0
  %676 = insertelement <2 x float> %675, float %674, i32 1
  %677 = fmul <2 x float> %676, %676
  %678 = fadd <2 x float> %667, %677
  %679 = add nuw nsw i64 %665, 1
  %680 = add nuw nsw i32 %666, 1
  %681 = icmp slt i64 %679, %330
  br i1 %681, label %664, label %682

682:                                              ; preds = %664, %660
  %683 = phi <2 x float> [ <float 1.000000e+00, float 1.000000e+00>, %660 ], [ %678, %664 ]
  %684 = extractelement <2 x float> %683, i32 0
  %685 = extractelement <2 x float> %683, i32 1
  %686 = fcmp olt float %684, %685
  %687 = select i1 %686, float %684, float %685
  %688 = fdiv float %687, %685
  %689 = call float @sqrtf(float %688) #7
  %690 = bitcast float* %547 to i8*
  %691 = getelementptr inbounds float, float* %547, i64 %27
  %692 = bitcast float* %691 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %690, i8* align 4 %692, i64 %315, i1 false)
  br i1 %318, label %693, label %725

693:                                              ; preds = %682
  %694 = fmul float %281, %689
  br label %695

695:                                              ; preds = %695, %693
  %696 = phi i64 [ 0, %693 ], [ %721, %695 ]
  %697 = phi i32 [ 0, %693 ], [ %722, %695 ]
  %698 = phi i32 [ 0, %693 ], [ %723, %695 ]
  %699 = phi float [ 0.000000e+00, %693 ], [ %720, %695 ]
  %700 = phi float [ %694, %693 ], [ %703, %695 ]
  %701 = icmp slt i32 %698, %282
  %702 = fmul float %689, %700
  %703 = select i1 %701, float %700, float %702
  %704 = select i1 %701, i32 0, i32 %282
  %705 = sub nsw i32 %698, %704
  %706 = add i32 %705, %316
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds float, float* %298, i64 %707
  %709 = load float, float* %708, align 4
  %710 = fmul float %703, %709
  %711 = add nsw i32 %697, %313
  %712 = sext i32 %711 to i64
  %713 = getelementptr inbounds float, float* %547, i64 %712
  store float %710, float* %713, align 4
  %714 = add i32 %706, 1024
  %715 = sub i32 %714, %1
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds float, float* %547, i64 %716
  %718 = load float, float* %717, align 4
  %719 = fmul float %718, %718
  %720 = fadd float %699, %719
  %721 = add nuw nsw i64 %696, 1
  %722 = add nuw nsw i32 %697, 1
  %723 = add nsw i32 %705, 1
  %724 = icmp eq i64 %721, %338
  br i1 %724, label %725, label %695

725:                                              ; preds = %695, %682
  %726 = phi float [ 0.000000e+00, %682 ], [ %720, %695 ]
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %319) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %319, i8 -1, i64 96, i1 false)
  %727 = getelementptr inbounds float, float* %547, i64 %339
  %728 = bitcast float* %727 to i32*
  %729 = load i32, i32* %728, align 4
  store i32 %729, i32* %340, align 16
  %730 = getelementptr inbounds float, float* %547, i64 %342
  %731 = bitcast float* %730 to i32*
  %732 = load i32, i32* %731, align 4
  store i32 %732, i32* %344, align 4
  %733 = getelementptr inbounds float, float* %547, i64 %346
  %734 = bitcast float* %733 to i32*
  %735 = load i32, i32* %734, align 4
  store i32 %735, i32* %348, align 8
  %736 = getelementptr inbounds float, float* %547, i64 %350
  %737 = bitcast float* %736 to i32*
  %738 = load i32, i32* %737, align 4
  store i32 %738, i32* %352, align 4
  %739 = getelementptr inbounds float, float* %547, i64 %354
  %740 = bitcast float* %739 to i32*
  %741 = load i32, i32* %740, align 4
  store i32 %741, i32* %356, align 16
  %742 = getelementptr inbounds float, float* %547, i64 %358
  %743 = bitcast float* %742 to i32*
  %744 = load i32, i32* %743, align 4
  store i32 %744, i32* %360, align 4
  %745 = getelementptr inbounds float, float* %547, i64 %362
  %746 = bitcast float* %745 to i32*
  %747 = load i32, i32* %746, align 4
  store i32 %747, i32* %364, align 8
  %748 = getelementptr inbounds float, float* %547, i64 %366
  %749 = bitcast float* %748 to i32*
  %750 = load i32, i32* %749, align 4
  store i32 %750, i32* %368, align 4
  %751 = getelementptr inbounds float, float* %547, i64 %370
  %752 = bitcast float* %751 to i32*
  %753 = load i32, i32* %752, align 4
  store i32 %753, i32* %372, align 16
  %754 = getelementptr inbounds float, float* %547, i64 %374
  %755 = bitcast float* %754 to i32*
  %756 = load i32, i32* %755, align 4
  store i32 %756, i32* %376, align 4
  %757 = getelementptr inbounds float, float* %547, i64 %378
  %758 = bitcast float* %757 to i32*
  %759 = load i32, i32* %758, align 4
  store i32 %759, i32* %380, align 8
  %760 = getelementptr inbounds float, float* %547, i64 %382
  %761 = bitcast float* %760 to i32*
  %762 = load i32, i32* %761, align 4
  store i32 %762, i32* %384, align 4
  %763 = getelementptr inbounds float, float* %547, i64 %386
  %764 = bitcast float* %763 to i32*
  %765 = load i32, i32* %764, align 4
  store i32 %765, i32* %388, align 16
  %766 = getelementptr inbounds float, float* %547, i64 %390
  %767 = bitcast float* %766 to i32*
  %768 = load i32, i32* %767, align 4
  store i32 %768, i32* %392, align 4
  %769 = getelementptr inbounds float, float* %547, i64 %394
  %770 = bitcast float* %769 to i32*
  %771 = load i32, i32* %770, align 4
  store i32 %771, i32* %396, align 8
  %772 = getelementptr inbounds float, float* %547, i64 %398
  %773 = bitcast float* %772 to i32*
  %774 = load i32, i32* %773, align 4
  store i32 %774, i32* %400, align 4
  %775 = getelementptr inbounds float, float* %547, i64 %402
  %776 = bitcast float* %775 to i32*
  %777 = load i32, i32* %776, align 4
  store i32 %777, i32* %404, align 16
  %778 = getelementptr inbounds float, float* %547, i64 %406
  %779 = bitcast float* %778 to i32*
  %780 = load i32, i32* %779, align 4
  store i32 %780, i32* %408, align 4
  %781 = getelementptr inbounds float, float* %547, i64 %410
  %782 = bitcast float* %781 to i32*
  %783 = load i32, i32* %782, align 4
  store i32 %783, i32* %412, align 8
  %784 = getelementptr inbounds float, float* %547, i64 %414
  %785 = bitcast float* %784 to i32*
  %786 = load i32, i32* %785, align 4
  store i32 %786, i32* %416, align 4
  %787 = getelementptr inbounds float, float* %547, i64 %418
  %788 = bitcast float* %787 to i32*
  %789 = load i32, i32* %788, align 4
  store i32 %789, i32* %420, align 16
  %790 = getelementptr inbounds float, float* %547, i64 %422
  %791 = bitcast float* %790 to i32*
  %792 = load i32, i32* %791, align 4
  store i32 %792, i32* %424, align 4
  %793 = getelementptr inbounds float, float* %547, i64 %426
  %794 = bitcast float* %793 to i32*
  %795 = load i32, i32* %794, align 4
  store i32 %795, i32* %428, align 8
  %796 = getelementptr inbounds float, float* %547, i64 %430
  %797 = bitcast float* %796 to i32*
  %798 = load i32, i32* %797, align 4
  store i32 %798, i32* %432, align 4
  %799 = getelementptr inbounds float, float* %547, i64 2048
  %800 = getelementptr inbounds float, float* %799, i64 %28
  %801 = load i32, i32* %303, align 8
  call void @celt_iir(float* %800, float* %662, float* %800, i32 %317, i32 24, float* nonnull %321, i32 %801) #4
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %319) #4
  br i1 %318, label %802, label %834

802:                                              ; preds = %725
  br i1 %488, label %823, label %803

803:                                              ; preds = %802, %803
  %804 = phi i32 [ %820, %803 ], [ 0, %802 ]
  %805 = phi float [ %819, %803 ], [ 0.000000e+00, %802 ]
  %806 = phi i64 [ %821, %803 ], [ %489, %802 ]
  %807 = add nsw i32 %804, %313
  %808 = sext i32 %807 to i64
  %809 = getelementptr inbounds float, float* %547, i64 %808
  %810 = load float, float* %809, align 4
  %811 = fmul float %810, %810
  %812 = fadd float %805, %811
  %813 = or i32 %804, 1
  %814 = add nsw i32 %813, %313
  %815 = sext i32 %814 to i64
  %816 = getelementptr inbounds float, float* %547, i64 %815
  %817 = load float, float* %816, align 4
  %818 = fmul float %817, %817
  %819 = fadd float %812, %818
  %820 = add nuw nsw i32 %804, 2
  %821 = add i64 %806, -2
  %822 = icmp eq i64 %821, 0
  br i1 %822, label %823, label %803

823:                                              ; preds = %803, %802
  %824 = phi float [ undef, %802 ], [ %819, %803 ]
  %825 = phi i32 [ 0, %802 ], [ %820, %803 ]
  %826 = phi float [ 0.000000e+00, %802 ], [ %819, %803 ]
  br i1 %490, label %834, label %827

827:                                              ; preds = %823
  %828 = add nsw i32 %825, %313
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds float, float* %547, i64 %829
  %831 = load float, float* %830, align 4
  %832 = fmul float %831, %831
  %833 = fadd float %826, %832
  br label %834

834:                                              ; preds = %827, %823, %725
  %835 = phi float [ 0.000000e+00, %725 ], [ %824, %823 ], [ %833, %827 ]
  %836 = fmul float %835, 0x3FC99999A0000000
  %837 = fcmp ogt float %726, %836
  br i1 %837, label %936, label %838

838:                                              ; preds = %834
  br i1 %318, label %839, label %1106

839:                                              ; preds = %838
  %840 = or i1 %491, %496
  br i1 %840, label %895, label %841

841:                                              ; preds = %839
  br i1 %500, label %879, label %842

842:                                              ; preds = %841, %842
  %843 = phi i64 [ %876, %842 ], [ 0, %841 ]
  %844 = phi i64 [ %877, %842 ], [ %501, %841 ]
  %845 = trunc i64 %843 to i32
  %846 = add nsw i32 %313, %845
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds float, float* %547, i64 %847
  %849 = bitcast float* %848 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %849, align 4
  %850 = getelementptr inbounds float, float* %848, i64 4
  %851 = bitcast float* %850 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %851, align 4
  %852 = trunc i64 %843 to i32
  %853 = or i32 %852, 8
  %854 = add nsw i32 %313, %853
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds float, float* %547, i64 %855
  %857 = bitcast float* %856 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %857, align 4
  %858 = getelementptr inbounds float, float* %856, i64 4
  %859 = bitcast float* %858 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %859, align 4
  %860 = trunc i64 %843 to i32
  %861 = or i32 %860, 16
  %862 = add nsw i32 %313, %861
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds float, float* %547, i64 %863
  %865 = bitcast float* %864 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %865, align 4
  %866 = getelementptr inbounds float, float* %864, i64 4
  %867 = bitcast float* %866 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %867, align 4
  %868 = trunc i64 %843 to i32
  %869 = or i32 %868, 24
  %870 = add nsw i32 %313, %869
  %871 = sext i32 %870 to i64
  %872 = getelementptr inbounds float, float* %547, i64 %871
  %873 = bitcast float* %872 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %873, align 4
  %874 = getelementptr inbounds float, float* %872, i64 4
  %875 = bitcast float* %874 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %875, align 4
  %876 = add i64 %843, 32
  %877 = add i64 %844, -4
  %878 = icmp eq i64 %877, 0
  br i1 %878, label %879, label %842, !llvm.loop !105

879:                                              ; preds = %842, %841
  %880 = phi i64 [ 0, %841 ], [ %876, %842 ]
  br i1 %502, label %894, label %881

881:                                              ; preds = %879, %881
  %882 = phi i64 [ %891, %881 ], [ %880, %879 ]
  %883 = phi i64 [ %892, %881 ], [ %499, %879 ]
  %884 = trunc i64 %882 to i32
  %885 = add nsw i32 %313, %884
  %886 = sext i32 %885 to i64
  %887 = getelementptr inbounds float, float* %547, i64 %886
  %888 = bitcast float* %887 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %888, align 4
  %889 = getelementptr inbounds float, float* %887, i64 4
  %890 = bitcast float* %889 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %890, align 4
  %891 = add i64 %882, 8
  %892 = add i64 %883, -1
  %893 = icmp eq i64 %892, 0
  br i1 %893, label %894, label %881, !llvm.loop !106

894:                                              ; preds = %881, %879
  br i1 %503, label %1106, label %895

895:                                              ; preds = %839, %894
  %896 = phi i64 [ 0, %839 ], [ %497, %894 ]
  %897 = phi i32 [ 0, %839 ], [ %498, %894 ]
  %898 = xor i64 %896, -1
  %899 = add nsw i64 %898, %338
  br i1 %505, label %911, label %900

900:                                              ; preds = %895, %900
  %901 = phi i64 [ %907, %900 ], [ %896, %895 ]
  %902 = phi i32 [ %908, %900 ], [ %897, %895 ]
  %903 = phi i64 [ %909, %900 ], [ %504, %895 ]
  %904 = add nsw i32 %902, %313
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds float, float* %547, i64 %905
  store float 0.000000e+00, float* %906, align 4
  %907 = add nuw nsw i64 %901, 1
  %908 = add nuw nsw i32 %902, 1
  %909 = add i64 %903, -1
  %910 = icmp eq i64 %909, 0
  br i1 %910, label %911, label %900, !llvm.loop !107

911:                                              ; preds = %900, %895
  %912 = phi i64 [ %896, %895 ], [ %907, %900 ]
  %913 = phi i32 [ %897, %895 ], [ %908, %900 ]
  %914 = icmp ult i64 %899, 3
  br i1 %914, label %1106, label %915

915:                                              ; preds = %911, %915
  %916 = phi i64 [ %933, %915 ], [ %912, %911 ]
  %917 = phi i32 [ %934, %915 ], [ %913, %911 ]
  %918 = add nsw i32 %917, %313
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds float, float* %547, i64 %919
  store float 0.000000e+00, float* %920, align 4
  %921 = add nuw nsw i32 %917, 1
  %922 = add nsw i32 %921, %313
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds float, float* %547, i64 %923
  store float 0.000000e+00, float* %924, align 4
  %925 = add nuw nsw i32 %917, 2
  %926 = add nsw i32 %925, %313
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds float, float* %547, i64 %927
  store float 0.000000e+00, float* %928, align 4
  %929 = add nuw nsw i32 %917, 3
  %930 = add nsw i32 %929, %313
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds float, float* %547, i64 %931
  store float 0.000000e+00, float* %932, align 4
  %933 = add nuw nsw i64 %916, 4
  %934 = add nuw nsw i32 %917, 4
  %935 = icmp eq i64 %933, %433
  br i1 %935, label %1106, label %915, !llvm.loop !108

936:                                              ; preds = %834
  %937 = fcmp olt float %726, %835
  br i1 %937, label %938, label %1106

938:                                              ; preds = %936
  %939 = fadd float %726, 1.000000e+00
  %940 = fadd float %835, 1.000000e+00
  %941 = fdiv float %939, %940
  %942 = call float @sqrtf(float %941) #7
  br i1 %322, label %943, label %1005

943:                                              ; preds = %938
  %944 = fsub float 1.000000e+00, %942
  %945 = or i1 %506, %511
  br i1 %945, label %946, label %966

946:                                              ; preds = %943, %1004, %966
  %947 = phi i64 [ 0, %966 ], [ 0, %943 ], [ %512, %1004 ]
  %948 = phi i32 [ 0, %966 ], [ 0, %943 ], [ %513, %1004 ]
  %949 = xor i64 %947, -1
  br i1 %516, label %962, label %950

950:                                              ; preds = %946
  %951 = getelementptr inbounds float, float* %300, i64 %947
  %952 = load float, float* %951, align 4
  %953 = fmul float %944, %952
  %954 = fsub float 1.000000e+00, %953
  %955 = add nsw i32 %948, %313
  %956 = sext i32 %955 to i64
  %957 = getelementptr inbounds float, float* %547, i64 %956
  %958 = load float, float* %957, align 4
  %959 = fmul float %958, %954
  store float %959, float* %957, align 4
  %960 = or i64 %947, 1
  %961 = add nuw nsw i32 %948, 1
  br label %962

962:                                              ; preds = %950, %946
  %963 = phi i64 [ %960, %950 ], [ %947, %946 ]
  %964 = phi i32 [ %961, %950 ], [ %948, %946 ]
  %965 = icmp eq i64 %949, %517
  br i1 %965, label %1005, label %1069

966:                                              ; preds = %943
  %967 = getelementptr float, float* %547, i64 %463
  %968 = getelementptr float, float* %547, i64 %464
  %969 = icmp ult float* %300, %968
  %970 = icmp ult float* %967, %462
  %971 = and i1 %969, %970
  br i1 %971, label %946, label %972

972:                                              ; preds = %966
  %973 = insertelement <4 x float> undef, float %944, i32 0
  %974 = shufflevector <4 x float> %973, <4 x float> undef, <4 x i32> zeroinitializer
  %975 = insertelement <4 x float> undef, float %944, i32 0
  %976 = shufflevector <4 x float> %975, <4 x float> undef, <4 x i32> zeroinitializer
  br label %977

977:                                              ; preds = %977, %972
  %978 = phi i64 [ 0, %972 ], [ %1002, %977 ]
  %979 = trunc i64 %978 to i32
  %980 = getelementptr inbounds float, float* %300, i64 %978
  %981 = bitcast float* %980 to <4 x float>*
  %982 = load <4 x float>, <4 x float>* %981, align 4, !alias.scope !109, !noalias !112
  %983 = getelementptr inbounds float, float* %980, i64 4
  %984 = bitcast float* %983 to <4 x float>*
  %985 = load <4 x float>, <4 x float>* %984, align 4, !alias.scope !109, !noalias !112
  %986 = fmul <4 x float> %974, %982
  %987 = fmul <4 x float> %976, %985
  %988 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %986
  %989 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %987
  %990 = add nsw i32 %313, %979
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds float, float* %547, i64 %991
  %993 = bitcast float* %992 to <4 x float>*
  %994 = load <4 x float>, <4 x float>* %993, align 4, !alias.scope !112
  %995 = getelementptr inbounds float, float* %992, i64 4
  %996 = bitcast float* %995 to <4 x float>*
  %997 = load <4 x float>, <4 x float>* %996, align 4, !alias.scope !112
  %998 = fmul <4 x float> %994, %988
  %999 = fmul <4 x float> %997, %989
  %1000 = bitcast float* %992 to <4 x float>*
  store <4 x float> %998, <4 x float>* %1000, align 4, !alias.scope !112
  %1001 = bitcast float* %995 to <4 x float>*
  store <4 x float> %999, <4 x float>* %1001, align 4, !alias.scope !112
  %1002 = add i64 %978, 8
  %1003 = icmp eq i64 %1002, %512
  br i1 %1003, label %1004, label %977, !llvm.loop !114

1004:                                             ; preds = %977
  br i1 %514, label %1005, label %946

1005:                                             ; preds = %962, %1069, %1004, %938
  br i1 %323, label %1006, label %1106

1006:                                             ; preds = %1005
  %1007 = or i1 %518, %523
  br i1 %1007, label %1008, label %1011

1008:                                             ; preds = %1006, %1068
  %1009 = phi i64 [ %286, %1006 ], [ %525, %1068 ]
  %1010 = phi i32 [ %23, %1006 ], [ %527, %1068 ]
  br label %1095

1011:                                             ; preds = %1006
  %1012 = insertelement <4 x float> undef, float %942, i32 0
  %1013 = shufflevector <4 x float> %1012, <4 x float> undef, <4 x i32> zeroinitializer
  %1014 = insertelement <4 x float> undef, float %942, i32 0
  %1015 = shufflevector <4 x float> %1014, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %529, label %1051, label %1016

1016:                                             ; preds = %1011, %1016
  %1017 = phi i64 [ %1048, %1016 ], [ 0, %1011 ]
  %1018 = phi i64 [ %1049, %1016 ], [ %530, %1011 ]
  %1019 = trunc i64 %1017 to i32
  %1020 = add i32 %23, %1019
  %1021 = add nsw i32 %1020, %313
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds float, float* %547, i64 %1022
  %1024 = bitcast float* %1023 to <4 x float>*
  %1025 = load <4 x float>, <4 x float>* %1024, align 4
  %1026 = getelementptr inbounds float, float* %1023, i64 4
  %1027 = bitcast float* %1026 to <4 x float>*
  %1028 = load <4 x float>, <4 x float>* %1027, align 4
  %1029 = fmul <4 x float> %1013, %1025
  %1030 = fmul <4 x float> %1015, %1028
  %1031 = bitcast float* %1023 to <4 x float>*
  store <4 x float> %1029, <4 x float>* %1031, align 4
  %1032 = bitcast float* %1026 to <4 x float>*
  store <4 x float> %1030, <4 x float>* %1032, align 4
  %1033 = trunc i64 %1017 to i32
  %1034 = or i32 %1033, 8
  %1035 = add i32 %23, %1034
  %1036 = add nsw i32 %1035, %313
  %1037 = sext i32 %1036 to i64
  %1038 = getelementptr inbounds float, float* %547, i64 %1037
  %1039 = bitcast float* %1038 to <4 x float>*
  %1040 = load <4 x float>, <4 x float>* %1039, align 4
  %1041 = getelementptr inbounds float, float* %1038, i64 4
  %1042 = bitcast float* %1041 to <4 x float>*
  %1043 = load <4 x float>, <4 x float>* %1042, align 4
  %1044 = fmul <4 x float> %1013, %1040
  %1045 = fmul <4 x float> %1015, %1043
  %1046 = bitcast float* %1038 to <4 x float>*
  store <4 x float> %1044, <4 x float>* %1046, align 4
  %1047 = bitcast float* %1041 to <4 x float>*
  store <4 x float> %1045, <4 x float>* %1047, align 4
  %1048 = add i64 %1017, 16
  %1049 = add i64 %1018, -2
  %1050 = icmp eq i64 %1049, 0
  br i1 %1050, label %1051, label %1016, !llvm.loop !115

1051:                                             ; preds = %1016, %1011
  %1052 = phi i64 [ 0, %1011 ], [ %1048, %1016 ]
  br i1 %531, label %1068, label %1053

1053:                                             ; preds = %1051
  %1054 = trunc i64 %1052 to i32
  %1055 = add i32 %23, %1054
  %1056 = add nsw i32 %1055, %313
  %1057 = sext i32 %1056 to i64
  %1058 = getelementptr inbounds float, float* %547, i64 %1057
  %1059 = bitcast float* %1058 to <4 x float>*
  %1060 = load <4 x float>, <4 x float>* %1059, align 4
  %1061 = getelementptr inbounds float, float* %1058, i64 4
  %1062 = bitcast float* %1061 to <4 x float>*
  %1063 = load <4 x float>, <4 x float>* %1062, align 4
  %1064 = fmul <4 x float> %1013, %1060
  %1065 = fmul <4 x float> %1015, %1063
  %1066 = bitcast float* %1058 to <4 x float>*
  store <4 x float> %1064, <4 x float>* %1066, align 4
  %1067 = bitcast float* %1061 to <4 x float>*
  store <4 x float> %1065, <4 x float>* %1067, align 4
  br label %1068

1068:                                             ; preds = %1051, %1053
  br i1 %532, label %1106, label %1008

1069:                                             ; preds = %962, %1069
  %1070 = phi i64 [ %1092, %1069 ], [ %963, %962 ]
  %1071 = phi i32 [ %1093, %1069 ], [ %964, %962 ]
  %1072 = getelementptr inbounds float, float* %300, i64 %1070
  %1073 = load float, float* %1072, align 4
  %1074 = fmul float %944, %1073
  %1075 = fsub float 1.000000e+00, %1074
  %1076 = add nsw i32 %1071, %313
  %1077 = sext i32 %1076 to i64
  %1078 = getelementptr inbounds float, float* %547, i64 %1077
  %1079 = load float, float* %1078, align 4
  %1080 = fmul float %1079, %1075
  store float %1080, float* %1078, align 4
  %1081 = add nuw nsw i64 %1070, 1
  %1082 = add nuw nsw i32 %1071, 1
  %1083 = getelementptr inbounds float, float* %300, i64 %1081
  %1084 = load float, float* %1083, align 4
  %1085 = fmul float %944, %1084
  %1086 = fsub float 1.000000e+00, %1085
  %1087 = add nsw i32 %1082, %313
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds float, float* %547, i64 %1088
  %1090 = load float, float* %1089, align 4
  %1091 = fmul float %1090, %1086
  store float %1091, float* %1089, align 4
  %1092 = add nuw nsw i64 %1070, 2
  %1093 = add nuw nsw i32 %1071, 2
  %1094 = icmp eq i64 %1092, %434
  br i1 %1094, label %1005, label %1069, !llvm.loop !116

1095:                                             ; preds = %1008, %1095
  %1096 = phi i64 [ %1103, %1095 ], [ %1009, %1008 ]
  %1097 = phi i32 [ %1104, %1095 ], [ %1010, %1008 ]
  %1098 = add nsw i32 %1097, %313
  %1099 = sext i32 %1098 to i64
  %1100 = getelementptr inbounds float, float* %547, i64 %1099
  %1101 = load float, float* %1100, align 4
  %1102 = fmul float %942, %1101
  store float %1102, float* %1100, align 4
  %1103 = add nsw i64 %1096, 1
  %1104 = add nsw i32 %1097, 1
  %1105 = icmp slt i64 %1103, %331
  br i1 %1105, label %1095, label %1106, !llvm.loop !117

1106:                                             ; preds = %911, %915, %1095, %894, %1068, %838, %1005, %936
  %1107 = load i32, i32* %324, align 8
  %1108 = load float, float* %325, align 8
  %1109 = fsub float -0.000000e+00, %1108
  %1110 = load i32, i32* %326, align 8
  %1111 = load i32, i32* %303, align 8
  call void @comb_filter(float* nonnull %288, float* %799, i32 %1107, i32 %1107, i32 %23, float %1109, float %1109, i32 %1110, i32 %1110, float* null, i32 0, i32 %1111) #4
  br i1 %328, label %1112, label %1186

1112:                                             ; preds = %1106
  %1113 = or i1 %533, %538
  br i1 %1113, label %1161, label %1114

1114:                                             ; preds = %1112
  %1115 = getelementptr float, float* %547, i64 2048
  %1116 = getelementptr float, float* %547, i64 %438
  %1117 = icmp ult float* %1115, %444
  %1118 = icmp ult float* %442, %1116
  %1119 = and i1 %1117, %1118
  %1120 = icmp ult float* %1115, %445
  %1121 = icmp ult float* %300, %1116
  %1122 = and i1 %1120, %1121
  %1123 = or i1 %1119, %1122
  %1124 = icmp ult float* %1115, %446
  %1125 = icmp ult float* %288, %1116
  %1126 = and i1 %1124, %1125
  %1127 = or i1 %1123, %1126
  %1128 = icmp ult float* %1115, %448
  %1129 = icmp ult float* %447, %1116
  %1130 = and i1 %1128, %1129
  %1131 = or i1 %1127, %1130
  br i1 %1131, label %1161, label %1132

1132:                                             ; preds = %1114, %1132
  %1133 = phi i64 [ %1158, %1132 ], [ 0, %1114 ]
  %1134 = trunc i64 %1133 to i32
  %1135 = getelementptr inbounds float, float* %300, i64 %1133
  %1136 = bitcast float* %1135 to <4 x float>*
  %1137 = load <4 x float>, <4 x float>* %1136, align 4, !alias.scope !118
  %1138 = xor i32 %1134, -1
  %1139 = add i32 %23, %1138
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds float, float* %541, i64 %1140
  %1142 = bitcast float* %1141 to <4 x float>*
  %1143 = load <4 x float>, <4 x float>* %1142, align 4, !alias.scope !121
  %1144 = shufflevector <4 x float> %1143, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1145 = fmul <4 x float> %1137, %1144
  %1146 = getelementptr inbounds float, float* %542, i64 %1140
  %1147 = bitcast float* %1146 to <4 x float>*
  %1148 = load <4 x float>, <4 x float>* %1147, align 4, !alias.scope !123
  %1149 = shufflevector <4 x float> %1148, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1150 = getelementptr inbounds float, float* %288, i64 %1133
  %1151 = bitcast float* %1150 to <4 x float>*
  %1152 = load <4 x float>, <4 x float>* %1151, align 16, !alias.scope !125
  %1153 = fmul <4 x float> %1149, %1152
  %1154 = fadd <4 x float> %1145, %1153
  %1155 = add nuw nsw i64 %1133, 2048
  %1156 = getelementptr inbounds float, float* %547, i64 %1155
  %1157 = bitcast float* %1156 to <4 x float>*
  store <4 x float> %1154, <4 x float>* %1157, align 4, !alias.scope !127, !noalias !129
  %1158 = add i64 %1133, 4
  %1159 = icmp eq i64 %1158, %539
  br i1 %1159, label %1160, label %1132, !llvm.loop !130

1160:                                             ; preds = %1132
  br i1 %543, label %1186, label %1161

1161:                                             ; preds = %1112, %1160, %1114
  %1162 = phi i64 [ 0, %1114 ], [ 0, %1112 ], [ %539, %1160 ]
  %1163 = phi i32 [ 0, %1114 ], [ 0, %1112 ], [ %540, %1160 ]
  br label %1164

1164:                                             ; preds = %1161, %1164
  %1165 = phi i64 [ %1183, %1164 ], [ %1162, %1161 ]
  %1166 = phi i32 [ %1184, %1164 ], [ %1163, %1161 ]
  %1167 = getelementptr inbounds float, float* %300, i64 %1165
  %1168 = load float, float* %1167, align 4
  %1169 = xor i32 %1166, -1
  %1170 = add i32 %23, %1169
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds float, float* %288, i64 %1171
  %1173 = load float, float* %1172, align 4
  %1174 = fmul float %1168, %1173
  %1175 = getelementptr inbounds float, float* %300, i64 %1171
  %1176 = load float, float* %1175, align 4
  %1177 = getelementptr inbounds float, float* %288, i64 %1165
  %1178 = load float, float* %1177, align 4
  %1179 = fmul float %1176, %1178
  %1180 = fadd float %1174, %1179
  %1181 = add nuw nsw i64 %1165, 2048
  %1182 = getelementptr inbounds float, float* %547, i64 %1181
  store float %1180, float* %1182, align 4
  %1183 = add nuw nsw i64 %1165, 1
  %1184 = add nuw nsw i32 %1166, 1
  %1185 = icmp eq i64 %1183, %435
  br i1 %1185, label %1186, label %1164, !llvm.loop !131

1186:                                             ; preds = %1164, %1160, %1106
  %1187 = add nuw nsw i64 %545, 1
  %1188 = icmp slt i64 %1187, %29
  br i1 %1188, label %544, label %1189

1189:                                             ; preds = %1186, %259
  %1190 = add nsw i32 %55, 1
  store i32 %1190, i32* %54, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #4
  ret void

1191:                                             ; preds = %555
  %1192 = add nuw nsw i64 %556, 1008
  %1193 = getelementptr inbounds float, float* %547, i64 %1192
  %1194 = bitcast float* %1193 to <4 x i32>*
  %1195 = load <4 x i32>, <4 x i32>* %1194, align 4, !alias.scope !98
  %1196 = getelementptr inbounds float, float* %1193, i64 4
  %1197 = bitcast float* %1196 to <4 x i32>*
  %1198 = load <4 x i32>, <4 x i32>* %1197, align 4, !alias.scope !98
  %1199 = add nsw i64 %556, -16
  %1200 = getelementptr inbounds float, float* %298, i64 %1199
  %1201 = bitcast float* %1200 to <4 x i32>*
  store <4 x i32> %1195, <4 x i32>* %1201, align 16, !alias.scope !101, !noalias !98
  %1202 = getelementptr inbounds float, float* %1200, i64 4
  %1203 = bitcast float* %1202 to <4 x i32>*
  store <4 x i32> %1198, <4 x i32>* %1203, align 16, !alias.scope !101, !noalias !98
  %1204 = add nuw nsw i64 %556, 16
  br label %555
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @deemphasis(float** nocapture readonly, float* nocapture, i32, i32, i32, float* nocapture readonly, float* nocapture, i32) unnamed_addr #0 {
  %9 = icmp ne i32 %4, 1
  %10 = icmp ne i32 %3, 2
  %11 = or i1 %10, %9
  %12 = icmp ne i32 %7, 0
  %13 = or i1 %11, %12
  br i1 %13, label %53, label %14

14:                                               ; preds = %8
  %15 = load float*, float** %0, align 8
  %16 = getelementptr float*, float** %0, i64 1
  %17 = load float*, float** %16, align 8
  %18 = getelementptr inbounds float, float* %6, i64 1
  %19 = bitcast float* %6 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = icmp sgt i32 %2, 0
  br i1 %21, label %22, label %49

22:                                               ; preds = %14
  %23 = load float, float* %5, align 4
  %24 = zext i32 %2 to i64
  %25 = insertelement <2 x float> undef, float %23, i32 0
  %26 = shufflevector <2 x float> %25, <2 x float> undef, <2 x i32> zeroinitializer
  br label %27

27:                                               ; preds = %27, %22
  %28 = phi i64 [ 0, %22 ], [ %47, %27 ]
  %29 = phi <2 x float> [ %20, %22 ], [ %38, %27 ]
  %30 = getelementptr inbounds float, float* %15, i64 %28
  %31 = load float, float* %30, align 4
  %32 = getelementptr inbounds float, float* %17, i64 %28
  %33 = load float, float* %32, align 4
  %34 = insertelement <2 x float> undef, float %31, i32 0
  %35 = insertelement <2 x float> %34, float %33, i32 1
  %36 = fadd <2 x float> %35, <float 0x39B4484C00000000, float 0x39B4484C00000000>
  %37 = fadd <2 x float> %29, %36
  %38 = fmul <2 x float> %26, %37
  %39 = extractelement <2 x float> %37, i32 0
  %40 = fmul float %39, 0x3F00000000000000
  %41 = shl nuw nsw i64 %28, 1
  %42 = getelementptr inbounds float, float* %1, i64 %41
  store float %40, float* %42, align 4
  %43 = extractelement <2 x float> %37, i32 1
  %44 = fmul float %43, 0x3F00000000000000
  %45 = or i64 %41, 1
  %46 = getelementptr inbounds float, float* %1, i64 %45
  store float %44, float* %46, align 4
  %47 = add nuw nsw i64 %28, 1
  %48 = icmp eq i64 %47, %24
  br i1 %48, label %49, label %27

49:                                               ; preds = %27, %14
  %50 = phi <2 x float> [ %20, %14 ], [ %38, %27 ]
  %51 = extractelement <2 x float> %50, i32 0
  store float %51, float* %6, align 4
  %52 = extractelement <2 x float> %50, i32 1
  store float %52, float* %18, align 4
  br label %208

53:                                               ; preds = %8
  %54 = icmp eq i32 %7, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %53
  tail call void @celt_fatal(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 285) #6
  unreachable

56:                                               ; preds = %53
  %57 = sext i32 %2 to i64
  %58 = shl nsw i64 %57, 2
  %59 = alloca float, i64 %57, align 16
  %60 = bitcast float* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %60, i8 -86, i64 %58, i1 false)
  %61 = load float, float* %5, align 4
  %62 = sdiv i32 %2, %4
  %63 = icmp sgt i32 %4, 1
  %64 = icmp sgt i32 %2, 0
  %65 = icmp slt i32 %62, 1
  br i1 %63, label %73, label %66

66:                                               ; preds = %56
  %67 = sext i32 %3 to i64
  %68 = zext i32 %2 to i64
  %69 = and i64 %68, 1
  %70 = icmp eq i32 %2, 1
  %71 = sub nsw i64 %68, %69
  %72 = icmp eq i64 %69, 0
  br label %159

73:                                               ; preds = %56
  %74 = sext i32 %4 to i64
  %75 = sext i32 %3 to i64
  %76 = zext i32 %2 to i64
  %77 = zext i32 %62 to i64
  %78 = and i64 %76, 1
  %79 = icmp eq i32 %2, 1
  %80 = sub nsw i64 %76, %78
  %81 = icmp eq i64 %78, 0
  %82 = and i64 %77, 1
  %83 = icmp eq i32 %62, 1
  %84 = sub nsw i64 %77, %82
  %85 = icmp eq i64 %82, 0
  br label %86

86:                                               ; preds = %73, %122
  %87 = phi i64 [ 0, %73 ], [ %123, %122 ]
  %88 = getelementptr inbounds float, float* %6, i64 %87
  %89 = load float, float* %88, align 4
  %90 = getelementptr inbounds float*, float** %0, i64 %87
  %91 = load float*, float** %90, align 8
  %92 = getelementptr inbounds float, float* %1, i64 %87
  br i1 %64, label %93, label %156

93:                                               ; preds = %86
  br i1 %79, label %145, label %125

94:                                               ; preds = %158, %94
  %95 = phi i64 [ %110, %94 ], [ 0, %158 ]
  %96 = phi i64 [ %111, %94 ], [ %84, %158 ]
  %97 = mul nsw i64 %95, %74
  %98 = getelementptr inbounds float, float* %59, i64 %97
  %99 = load float, float* %98, align 8
  %100 = fmul float %99, 0x3F00000000000000
  %101 = mul nsw i64 %95, %75
  %102 = getelementptr inbounds float, float* %92, i64 %101
  store float %100, float* %102, align 4
  %103 = or i64 %95, 1
  %104 = mul nsw i64 %103, %74
  %105 = getelementptr inbounds float, float* %59, i64 %104
  %106 = load float, float* %105, align 4
  %107 = fmul float %106, 0x3F00000000000000
  %108 = mul nsw i64 %103, %75
  %109 = getelementptr inbounds float, float* %92, i64 %108
  store float %107, float* %109, align 4
  %110 = add nuw nsw i64 %95, 2
  %111 = add i64 %96, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %94

113:                                              ; preds = %94, %158
  %114 = phi i64 [ 0, %158 ], [ %110, %94 ]
  br i1 %85, label %122, label %115

115:                                              ; preds = %113
  %116 = mul nsw i64 %114, %74
  %117 = getelementptr inbounds float, float* %59, i64 %116
  %118 = load float, float* %117, align 4
  %119 = fmul float %118, 0x3F00000000000000
  %120 = mul nsw i64 %114, %75
  %121 = getelementptr inbounds float, float* %92, i64 %120
  store float %119, float* %121, align 4
  br label %122

122:                                              ; preds = %115, %113, %156
  %123 = add nuw nsw i64 %87, 1
  %124 = icmp slt i64 %123, %75
  br i1 %124, label %86, label %208

125:                                              ; preds = %93, %125
  %126 = phi i64 [ %142, %125 ], [ 0, %93 ]
  %127 = phi float [ %140, %125 ], [ %89, %93 ]
  %128 = phi i64 [ %143, %125 ], [ %80, %93 ]
  %129 = getelementptr inbounds float, float* %91, i64 %126
  %130 = load float, float* %129, align 4
  %131 = fadd float %130, 0x39B4484C00000000
  %132 = fadd float %127, %131
  %133 = fmul float %61, %132
  %134 = getelementptr inbounds float, float* %59, i64 %126
  store float %132, float* %134, align 8
  %135 = or i64 %126, 1
  %136 = getelementptr inbounds float, float* %91, i64 %135
  %137 = load float, float* %136, align 4
  %138 = fadd float %137, 0x39B4484C00000000
  %139 = fadd float %133, %138
  %140 = fmul float %61, %139
  %141 = getelementptr inbounds float, float* %59, i64 %135
  store float %139, float* %141, align 4
  %142 = add nuw nsw i64 %126, 2
  %143 = add i64 %128, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %125

145:                                              ; preds = %125, %93
  %146 = phi float [ undef, %93 ], [ %140, %125 ]
  %147 = phi i64 [ 0, %93 ], [ %142, %125 ]
  %148 = phi float [ %89, %93 ], [ %140, %125 ]
  br i1 %81, label %156, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds float, float* %91, i64 %147
  %151 = load float, float* %150, align 4
  %152 = fadd float %151, 0x39B4484C00000000
  %153 = fadd float %148, %152
  %154 = getelementptr inbounds float, float* %59, i64 %147
  store float %153, float* %154, align 4
  %155 = fmul float %61, %153
  br label %156

156:                                              ; preds = %149, %145, %86
  %157 = phi float [ %89, %86 ], [ %146, %145 ], [ %155, %149 ]
  store float %157, float* %88, align 4
  br i1 %65, label %122, label %158

158:                                              ; preds = %156
  br i1 %83, label %113, label %94

159:                                              ; preds = %66, %204
  %160 = phi i64 [ 0, %66 ], [ %206, %204 ]
  %161 = getelementptr inbounds float, float* %6, i64 %160
  %162 = load float, float* %161, align 4
  %163 = getelementptr inbounds float*, float** %0, i64 %160
  %164 = load float*, float** %163, align 8
  %165 = getelementptr inbounds float, float* %1, i64 %160
  br i1 %64, label %166, label %204

166:                                              ; preds = %159
  br i1 %70, label %191, label %167

167:                                              ; preds = %166, %167
  %168 = phi i64 [ %188, %167 ], [ 0, %166 ]
  %169 = phi float [ %184, %167 ], [ %162, %166 ]
  %170 = phi i64 [ %189, %167 ], [ %71, %166 ]
  %171 = getelementptr inbounds float, float* %164, i64 %168
  %172 = load float, float* %171, align 4
  %173 = fadd float %172, 0x39B4484C00000000
  %174 = fadd float %169, %173
  %175 = fmul float %61, %174
  %176 = fmul float %174, 0x3F00000000000000
  %177 = mul nsw i64 %168, %67
  %178 = getelementptr inbounds float, float* %165, i64 %177
  store float %176, float* %178, align 4
  %179 = or i64 %168, 1
  %180 = getelementptr inbounds float, float* %164, i64 %179
  %181 = load float, float* %180, align 4
  %182 = fadd float %181, 0x39B4484C00000000
  %183 = fadd float %175, %182
  %184 = fmul float %61, %183
  %185 = fmul float %183, 0x3F00000000000000
  %186 = mul nsw i64 %179, %67
  %187 = getelementptr inbounds float, float* %165, i64 %186
  store float %185, float* %187, align 4
  %188 = add nuw nsw i64 %168, 2
  %189 = add i64 %170, -2
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %167

191:                                              ; preds = %167, %166
  %192 = phi float [ undef, %166 ], [ %184, %167 ]
  %193 = phi i64 [ 0, %166 ], [ %188, %167 ]
  %194 = phi float [ %162, %166 ], [ %184, %167 ]
  br i1 %72, label %204, label %195

195:                                              ; preds = %191
  %196 = getelementptr inbounds float, float* %164, i64 %193
  %197 = load float, float* %196, align 4
  %198 = fadd float %197, 0x39B4484C00000000
  %199 = fadd float %194, %198
  %200 = fmul float %199, 0x3F00000000000000
  %201 = mul nsw i64 %193, %67
  %202 = getelementptr inbounds float, float* %165, i64 %201
  store float %200, float* %202, align 4
  %203 = fmul float %61, %199
  br label %204

204:                                              ; preds = %195, %191, %159
  %205 = phi float [ %162, %159 ], [ %192, %191 ], [ %203, %195 ]
  store float %205, float* %161, align 4
  %206 = add nuw nsw i64 %160, 1
  %207 = icmp slt i64 %206, %67
  br i1 %207, label %159, label %208

208:                                              ; preds = %204, %122, %49
  ret void
}

declare void @ec_dec_init(%struct.ec_ctx*, i8*, i32) local_unnamed_addr #1

declare i32 @ec_dec_bit_logp(%struct.ec_ctx*, i32) local_unnamed_addr #1

declare i32 @ec_dec_uint(%struct.ec_ctx*, i32) local_unnamed_addr #1

declare i32 @ec_dec_bits(%struct.ec_ctx*, i32) local_unnamed_addr #1

declare i32 @ec_dec_icdf(%struct.ec_ctx*, i8*, i32) local_unnamed_addr #1

declare void @unquant_coarse_energy(%struct.OpusCustomMode*, i32, i32, float*, i32, %struct.ec_ctx*, i32, i32) local_unnamed_addr #1

declare void @init_caps(%struct.OpusCustomMode*, i32*, i32, i32) local_unnamed_addr #1

declare i32 @ec_tell_frac(%struct.ec_ctx*) local_unnamed_addr #1

declare i32 @clt_compute_allocation(%struct.OpusCustomMode*, i32, i32, i32*, i32*, i32, i32*, i32*, i32, i32*, i32*, i32*, i32*, i32, i32, %struct.ec_ctx*, i32, i32, i32) local_unnamed_addr #1

declare void @unquant_fine_energy(%struct.OpusCustomMode*, i32, i32, float*, i32*, %struct.ec_ctx*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare void @quant_all_bands(i32, %struct.OpusCustomMode*, i32, i32, float*, float*, i8*, float*, i32*, i32, i32, i32, i32, i32*, i32, i32, %struct.ec_ctx*, i32, i32, i32*, i32, i32, i32) local_unnamed_addr #1

declare void @unquant_energy_finalise(%struct.OpusCustomMode*, i32, i32, float*, i32*, i32*, i32, %struct.ec_ctx*, i32) local_unnamed_addr #1

declare void @anti_collapse(%struct.OpusCustomMode*, float*, i8*, i32, i32, i32, i32, i32, float*, float*, float*, i32*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @celt_synthesis(%struct.OpusCustomMode*, float*, float** nocapture readonly, float*, i32, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %14 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 8
  %19 = load i32, i32* %18, align 8
  %20 = shl i32 %19, %9
  %21 = sext i32 %20 to i64
  %22 = shl nsw i64 %21, 2
  %23 = alloca float, i64 %21, align 16
  %24 = bitcast float* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 %22, i1 false)
  %25 = shl i32 1, %9
  %26 = icmp eq i32 %8, 0
  %27 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 6
  %28 = load i32, i32* %27, align 8
  %29 = select i1 %26, i32 1, i32 %25
  %30 = select i1 %26, i32 %20, i32 %19
  %31 = select i1 %26, i32 %9, i32 0
  %32 = sub nsw i32 %28, %31
  %33 = icmp eq i32 %7, 2
  %34 = icmp eq i32 %6, 1
  %35 = and i1 %34, %33
  br i1 %35, label %36, label %73

36:                                               ; preds = %13
  call void @denormalise_bands(%struct.OpusCustomMode* %0, float* %1, float* nonnull %23, float* %3, i32 %4, i32 %5, i32 %25, i32 %10, i32 %11) #4
  %37 = getelementptr inbounds float*, float** %2, i64 1
  %38 = load float*, float** %37, align 8
  %39 = sdiv i32 %15, 2
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %38, i64 %40
  %42 = bitcast float* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* nonnull align 16 %24, i64 %22, i1 false)
  %43 = icmp sgt i32 %29, 0
  br i1 %43, label %44, label %271

44:                                               ; preds = %36
  %45 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 13
  %46 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 12
  %47 = sext i32 %30 to i64
  %48 = zext i32 %29 to i64
  br label %55

49:                                               ; preds = %55
  br i1 %43, label %50, label %271

50:                                               ; preds = %49
  %51 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 13
  %52 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 12
  %53 = sext i32 %30 to i64
  %54 = zext i32 %29 to i64
  br label %64

55:                                               ; preds = %55, %44
  %56 = phi i64 [ 0, %44 ], [ %62, %55 ]
  %57 = getelementptr inbounds float, float* %41, i64 %56
  %58 = load float*, float** %2, align 8
  %59 = mul nsw i64 %56, %47
  %60 = getelementptr inbounds float, float* %58, i64 %59
  %61 = load float*, float** %46, align 8
  call void @clt_mdct_backward_c(%struct.mdct_lookup* %45, float* %57, float* %60, float* %61, i32 %15, i32 %32, i32 %29, i32 %12) #4
  %62 = add nuw nsw i64 %56, 1
  %63 = icmp eq i64 %62, %48
  br i1 %63, label %49, label %55

64:                                               ; preds = %64, %50
  %65 = phi i64 [ 0, %50 ], [ %71, %64 ]
  %66 = getelementptr inbounds float, float* %23, i64 %65
  %67 = load float*, float** %37, align 8
  %68 = mul nsw i64 %65, %53
  %69 = getelementptr inbounds float, float* %67, i64 %68
  %70 = load float*, float** %52, align 8
  call void @clt_mdct_backward_c(%struct.mdct_lookup* %51, float* %66, float* %69, float* %70, i32 %15, i32 %32, i32 %29, i32 %12) #4
  %71 = add nuw nsw i64 %65, 1
  %72 = icmp eq i64 %71, %54
  br i1 %72, label %271, label %64

73:                                               ; preds = %13
  %74 = icmp eq i32 %7, 1
  %75 = icmp eq i32 %6, 2
  %76 = and i1 %75, %74
  br i1 %76, label %109, label %77

77:                                               ; preds = %73
  %78 = icmp sgt i32 %29, 0
  %79 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 13
  %80 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 12
  br i1 %78, label %84, label %81

81:                                               ; preds = %77
  %82 = sext i32 %7 to i64
  %83 = sext i32 %17 to i64
  br label %263

84:                                               ; preds = %77
  %85 = sext i32 %17 to i64
  %86 = sext i32 %7 to i64
  %87 = zext i32 %29 to i64
  br label %88

88:                                               ; preds = %84, %106
  %89 = phi i64 [ 0, %84 ], [ %107, %106 ]
  %90 = mul nsw i64 %89, %21
  %91 = getelementptr inbounds float, float* %1, i64 %90
  %92 = mul nsw i64 %89, %85
  %93 = getelementptr inbounds float, float* %3, i64 %92
  call void @denormalise_bands(%struct.OpusCustomMode* %0, float* %91, float* nonnull %23, float* %93, i32 %4, i32 %5, i32 %25, i32 %10, i32 %11) #4
  %94 = getelementptr inbounds float*, float** %2, i64 %89
  br label %95

95:                                               ; preds = %95, %88
  %96 = phi i64 [ 0, %88 ], [ %104, %95 ]
  %97 = getelementptr inbounds float, float* %23, i64 %96
  %98 = load float*, float** %94, align 8
  %99 = trunc i64 %96 to i32
  %100 = mul nsw i32 %30, %99
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %98, i64 %101
  %103 = load float*, float** %80, align 8
  call void @clt_mdct_backward_c(%struct.mdct_lookup* %79, float* %97, float* %102, float* %103, i32 %15, i32 %32, i32 %29, i32 %12) #4
  %104 = add nuw nsw i64 %96, 1
  %105 = icmp eq i64 %104, %87
  br i1 %105, label %106, label %95

106:                                              ; preds = %95
  %107 = add nuw nsw i64 %89, 1
  %108 = icmp slt i64 %107, %86
  br i1 %108, label %88, label %271

109:                                              ; preds = %73
  %110 = load float*, float** %2, align 8
  %111 = sdiv i32 %15, 2
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float, float* %110, i64 %112
  call void @denormalise_bands(%struct.OpusCustomMode* %0, float* %1, float* nonnull %23, float* %3, i32 %4, i32 %5, i32 %25, i32 %10, i32 %11) #4
  %114 = getelementptr inbounds float, float* %1, i64 %21
  %115 = sext i32 %17 to i64
  %116 = getelementptr inbounds float, float* %3, i64 %115
  call void @denormalise_bands(%struct.OpusCustomMode* %0, float* %114, float* %113, float* %116, i32 %4, i32 %5, i32 %25, i32 %10, i32 %11) #4
  %117 = icmp sgt i32 %20, 0
  br i1 %117, label %118, label %228

118:                                              ; preds = %109
  %119 = zext i32 %20 to i64
  %120 = icmp ult i32 %20, 8
  br i1 %120, label %121, label %139

121:                                              ; preds = %226, %139, %118
  %122 = phi i64 [ 0, %139 ], [ 0, %118 ], [ %147, %226 ]
  %123 = xor i64 %122, -1
  %124 = and i64 %119, 1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %135, label %126

126:                                              ; preds = %121
  %127 = getelementptr inbounds float, float* %23, i64 %122
  %128 = load float, float* %127, align 16
  %129 = fmul float %128, 5.000000e-01
  %130 = getelementptr inbounds float, float* %113, i64 %122
  %131 = load float, float* %130, align 4
  %132 = fmul float %131, 5.000000e-01
  %133 = fadd float %129, %132
  store float %133, float* %127, align 16
  %134 = or i64 %122, 1
  br label %135

135:                                              ; preds = %121, %126
  %136 = phi i64 [ %122, %121 ], [ %134, %126 ]
  %137 = sub nsw i64 0, %119
  %138 = icmp eq i64 %123, %137
  br i1 %138, label %228, label %235

139:                                              ; preds = %118
  %140 = getelementptr float, float* %23, i64 %119
  %141 = add nsw i64 %112, %119
  %142 = getelementptr float, float* %110, i64 %141
  %143 = icmp ult float* %23, %142
  %144 = icmp ult float* %113, %140
  %145 = and i1 %143, %144
  br i1 %145, label %121, label %146

146:                                              ; preds = %139
  %147 = and i64 %119, 4294967288
  %148 = add nsw i64 %147, -8
  %149 = lshr exact i64 %148, 3
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 1
  %152 = icmp eq i64 %148, 0
  br i1 %152, label %202, label %153

153:                                              ; preds = %146
  %154 = sub nuw nsw i64 %150, %151
  br label %155

155:                                              ; preds = %155, %153
  %156 = phi i64 [ 0, %153 ], [ %199, %155 ]
  %157 = phi i64 [ %154, %153 ], [ %200, %155 ]
  %158 = getelementptr inbounds float, float* %23, i64 %156
  %159 = bitcast float* %158 to <4 x float>*
  %160 = load <4 x float>, <4 x float>* %159, align 16, !alias.scope !132, !noalias !135
  %161 = getelementptr inbounds float, float* %158, i64 4
  %162 = bitcast float* %161 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 16, !alias.scope !132, !noalias !135
  %164 = fmul <4 x float> %160, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %165 = fmul <4 x float> %163, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %166 = getelementptr inbounds float, float* %113, i64 %156
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 4, !alias.scope !135
  %169 = getelementptr inbounds float, float* %166, i64 4
  %170 = bitcast float* %169 to <4 x float>*
  %171 = load <4 x float>, <4 x float>* %170, align 4, !alias.scope !135
  %172 = fmul <4 x float> %168, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %173 = fmul <4 x float> %171, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %174 = fadd <4 x float> %164, %172
  %175 = fadd <4 x float> %165, %173
  %176 = bitcast float* %158 to <4 x float>*
  store <4 x float> %174, <4 x float>* %176, align 16, !alias.scope !132, !noalias !135
  %177 = bitcast float* %161 to <4 x float>*
  store <4 x float> %175, <4 x float>* %177, align 16, !alias.scope !132, !noalias !135
  %178 = or i64 %156, 8
  %179 = getelementptr inbounds float, float* %23, i64 %178
  %180 = bitcast float* %179 to <4 x float>*
  %181 = load <4 x float>, <4 x float>* %180, align 16, !alias.scope !132, !noalias !135
  %182 = getelementptr inbounds float, float* %179, i64 4
  %183 = bitcast float* %182 to <4 x float>*
  %184 = load <4 x float>, <4 x float>* %183, align 16, !alias.scope !132, !noalias !135
  %185 = fmul <4 x float> %181, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %186 = fmul <4 x float> %184, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %187 = getelementptr inbounds float, float* %113, i64 %178
  %188 = bitcast float* %187 to <4 x float>*
  %189 = load <4 x float>, <4 x float>* %188, align 4, !alias.scope !135
  %190 = getelementptr inbounds float, float* %187, i64 4
  %191 = bitcast float* %190 to <4 x float>*
  %192 = load <4 x float>, <4 x float>* %191, align 4, !alias.scope !135
  %193 = fmul <4 x float> %189, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %194 = fmul <4 x float> %192, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %195 = fadd <4 x float> %185, %193
  %196 = fadd <4 x float> %186, %194
  %197 = bitcast float* %179 to <4 x float>*
  store <4 x float> %195, <4 x float>* %197, align 16, !alias.scope !132, !noalias !135
  %198 = bitcast float* %182 to <4 x float>*
  store <4 x float> %196, <4 x float>* %198, align 16, !alias.scope !132, !noalias !135
  %199 = add i64 %156, 16
  %200 = add i64 %157, -2
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %202, label %155, !llvm.loop !137

202:                                              ; preds = %155, %146
  %203 = phi i64 [ 0, %146 ], [ %199, %155 ]
  %204 = icmp eq i64 %151, 0
  br i1 %204, label %226, label %205

205:                                              ; preds = %202
  %206 = getelementptr inbounds float, float* %23, i64 %203
  %207 = bitcast float* %206 to <4 x float>*
  %208 = load <4 x float>, <4 x float>* %207, align 16, !alias.scope !132, !noalias !135
  %209 = getelementptr inbounds float, float* %206, i64 4
  %210 = bitcast float* %209 to <4 x float>*
  %211 = load <4 x float>, <4 x float>* %210, align 16, !alias.scope !132, !noalias !135
  %212 = fmul <4 x float> %208, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %213 = fmul <4 x float> %211, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %214 = getelementptr inbounds float, float* %113, i64 %203
  %215 = bitcast float* %214 to <4 x float>*
  %216 = load <4 x float>, <4 x float>* %215, align 4, !alias.scope !135
  %217 = getelementptr inbounds float, float* %214, i64 4
  %218 = bitcast float* %217 to <4 x float>*
  %219 = load <4 x float>, <4 x float>* %218, align 4, !alias.scope !135
  %220 = fmul <4 x float> %216, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %221 = fmul <4 x float> %219, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %222 = fadd <4 x float> %212, %220
  %223 = fadd <4 x float> %213, %221
  %224 = bitcast float* %206 to <4 x float>*
  store <4 x float> %222, <4 x float>* %224, align 16, !alias.scope !132, !noalias !135
  %225 = bitcast float* %209 to <4 x float>*
  store <4 x float> %223, <4 x float>* %225, align 16, !alias.scope !132, !noalias !135
  br label %226

226:                                              ; preds = %202, %205
  %227 = icmp eq i64 %147, %119
  br i1 %227, label %228, label %121

228:                                              ; preds = %135, %235, %226, %109
  %229 = icmp sgt i32 %29, 0
  br i1 %229, label %230, label %271

230:                                              ; preds = %228
  %231 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 13
  %232 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %0, i64 0, i32 12
  %233 = sext i32 %30 to i64
  %234 = zext i32 %29 to i64
  br label %254

235:                                              ; preds = %135, %235
  %236 = phi i64 [ %252, %235 ], [ %136, %135 ]
  %237 = getelementptr inbounds float, float* %23, i64 %236
  %238 = load float, float* %237, align 4
  %239 = fmul float %238, 5.000000e-01
  %240 = getelementptr inbounds float, float* %113, i64 %236
  %241 = load float, float* %240, align 4
  %242 = fmul float %241, 5.000000e-01
  %243 = fadd float %239, %242
  store float %243, float* %237, align 4
  %244 = add nuw nsw i64 %236, 1
  %245 = getelementptr inbounds float, float* %23, i64 %244
  %246 = load float, float* %245, align 4
  %247 = fmul float %246, 5.000000e-01
  %248 = getelementptr inbounds float, float* %113, i64 %244
  %249 = load float, float* %248, align 4
  %250 = fmul float %249, 5.000000e-01
  %251 = fadd float %247, %250
  store float %251, float* %245, align 4
  %252 = add nuw nsw i64 %236, 2
  %253 = icmp eq i64 %252, %119
  br i1 %253, label %228, label %235, !llvm.loop !138

254:                                              ; preds = %254, %230
  %255 = phi i64 [ 0, %230 ], [ %261, %254 ]
  %256 = getelementptr inbounds float, float* %23, i64 %255
  %257 = load float*, float** %2, align 8
  %258 = mul nsw i64 %255, %233
  %259 = getelementptr inbounds float, float* %257, i64 %258
  %260 = load float*, float** %232, align 8
  call void @clt_mdct_backward_c(%struct.mdct_lookup* %231, float* %256, float* %259, float* %260, i32 %15, i32 %32, i32 %29, i32 %12) #4
  %261 = add nuw nsw i64 %255, 1
  %262 = icmp eq i64 %261, %234
  br i1 %262, label %271, label %254

263:                                              ; preds = %81, %263
  %264 = phi i64 [ 0, %81 ], [ %269, %263 ]
  %265 = mul nsw i64 %264, %21
  %266 = getelementptr inbounds float, float* %1, i64 %265
  %267 = mul nsw i64 %264, %83
  %268 = getelementptr inbounds float, float* %3, i64 %267
  call void @denormalise_bands(%struct.OpusCustomMode* %0, float* %266, float* nonnull %23, float* %268, i32 %4, i32 %5, i32 %25, i32 %10, i32 %11) #4
  %269 = add nuw nsw i64 %264, 1
  %270 = icmp slt i64 %269, %82
  br i1 %270, label %263, label %271

271:                                              ; preds = %263, %106, %254, %64, %36, %228, %49
  ret void
}

declare void @comb_filter(float*, float*, i32, i32, i32, float, float, i32, i32, float*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_custom_decoder_ctl(%struct.OpusCustomDecoder* noalias nocapture, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #4
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 2
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 3
  %8 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  switch i32 %1, label %274 [
    i32 10010, label %9
    i32 10012, label %33
    i32 10008, label %57
    i32 10007, label %76
    i32 4027, label %95
    i32 4028, label %117
    i32 4033, label %163
    i32 10015, label %182
    i32 10016, label %202
    i32 4031, label %218
    i32 4046, label %237
    i32 4047, label %255
  ]

9:                                                ; preds = %2
  %10 = load i32, i32* %5, align 16
  %11 = icmp ult i32 %10, 41
  br i1 %11, label %12, label %17

12:                                               ; preds = %9
  %13 = load i8*, i8** %7, align 16
  %14 = sext i32 %10 to i64
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = add nuw nsw i32 %10, 8
  store i32 %16, i32* %5, align 16
  br label %20

17:                                               ; preds = %9
  %18 = load i8*, i8** %6, align 8
  %19 = getelementptr i8, i8* %18, i64 8
  store i8* %19, i8** %6, align 8
  br label %20

20:                                               ; preds = %17, %12
  %21 = phi i8* [ %15, %12 ], [ %18, %17 ]
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %274, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  %27 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %26, align 8
  %28 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %27, i64 0, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = icmp slt i32 %23, %29
  br i1 %30, label %31, label %274

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 5
  store i32 %23, i32* %32, align 8
  br label %274

33:                                               ; preds = %2
  %34 = load i32, i32* %5, align 16
  %35 = icmp ult i32 %34, 41
  br i1 %35, label %36, label %41

36:                                               ; preds = %33
  %37 = load i8*, i8** %7, align 16
  %38 = sext i32 %34 to i64
  %39 = getelementptr i8, i8* %37, i64 %38
  %40 = add nuw nsw i32 %34, 8
  store i32 %40, i32* %5, align 16
  br label %44

41:                                               ; preds = %33
  %42 = load i8*, i8** %6, align 8
  %43 = getelementptr i8, i8* %42, i64 8
  store i8* %43, i8** %6, align 8
  br label %44

44:                                               ; preds = %41, %36
  %45 = phi i8* [ %39, %36 ], [ %42, %41 ]
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %47, 1
  br i1 %48, label %274, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  %51 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %50, align 8
  %52 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %51, i64 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = icmp sgt i32 %47, %53
  br i1 %54, label %274, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 6
  store i32 %47, i32* %56, align 4
  br label %274

57:                                               ; preds = %2
  %58 = load i32, i32* %5, align 16
  %59 = icmp ult i32 %58, 41
  br i1 %59, label %60, label %65

60:                                               ; preds = %57
  %61 = load i8*, i8** %7, align 16
  %62 = sext i32 %58 to i64
  %63 = getelementptr i8, i8* %61, i64 %62
  %64 = add nuw nsw i32 %58, 8
  store i32 %64, i32* %5, align 16
  br label %68

65:                                               ; preds = %57
  %66 = load i8*, i8** %6, align 8
  %67 = getelementptr i8, i8* %66, i64 8
  store i8* %67, i8** %6, align 8
  br label %68

68:                                               ; preds = %65, %60
  %69 = phi i8* [ %63, %60 ], [ %66, %65 ]
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = add i32 %71, -1
  %73 = icmp ugt i32 %72, 1
  br i1 %73, label %274, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 3
  store i32 %71, i32* %75, align 8
  br label %274

76:                                               ; preds = %2
  %77 = load i32, i32* %5, align 16
  %78 = icmp ult i32 %77, 41
  br i1 %78, label %79, label %84

79:                                               ; preds = %76
  %80 = load i8*, i8** %7, align 16
  %81 = sext i32 %77 to i64
  %82 = getelementptr i8, i8* %80, i64 %81
  %83 = add nuw nsw i32 %77, 8
  store i32 %83, i32* %5, align 16
  br label %87

84:                                               ; preds = %76
  %85 = load i8*, i8** %6, align 8
  %86 = getelementptr i8, i8* %85, i64 8
  store i8* %86, i8** %6, align 8
  br label %87

87:                                               ; preds = %84, %79
  %88 = phi i8* [ %82, %79 ], [ %85, %84 ]
  %89 = bitcast i8* %88 to i32**
  %90 = load i32*, i32** %89, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %274, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 11
  %94 = load i32, i32* %93, align 8
  store i32 %94, i32* %90, align 4
  store i32 0, i32* %93, align 8
  br label %274

95:                                               ; preds = %2
  %96 = load i32, i32* %5, align 16
  %97 = icmp ult i32 %96, 41
  br i1 %97, label %98, label %103

98:                                               ; preds = %95
  %99 = load i8*, i8** %7, align 16
  %100 = sext i32 %96 to i64
  %101 = getelementptr i8, i8* %99, i64 %100
  %102 = add nuw nsw i32 %96, 8
  store i32 %102, i32* %5, align 16
  br label %106

103:                                              ; preds = %95
  %104 = load i8*, i8** %6, align 8
  %105 = getelementptr i8, i8* %104, i64 8
  store i8* %105, i8** %6, align 8
  br label %106

106:                                              ; preds = %103, %98
  %107 = phi i8* [ %101, %98 ], [ %104, %103 ]
  %108 = bitcast i8* %107 to i32**
  %109 = load i32*, i32** %108, align 8
  %110 = icmp eq i32* %109, null
  br i1 %110, label %274, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 1
  %113 = load i32, i32* %112, align 8
  %114 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 4
  %115 = load i32, i32* %114, align 4
  %116 = sdiv i32 %113, %115
  store i32 %116, i32* %109, align 4
  br label %274

117:                                              ; preds = %2
  %118 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 1
  %119 = load i32, i32* %118, align 8
  %120 = add nsw i32 %119, 2048
  %121 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 2
  %122 = load i32, i32* %121, align 4
  %123 = mul nsw i32 %120, %122
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 22, i64 %124
  %126 = mul nsw i32 %122, 24
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %125, i64 %127
  %129 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 0
  %130 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %129, align 8
  %131 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %130, i64 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = shl nsw i32 %132, 1
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %128, i64 %134
  %136 = getelementptr inbounds float, float* %135, i64 %134
  %137 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 10
  %138 = bitcast i32* %137 to i8*
  %139 = getelementptr %struct.OpusCustomMode, %struct.OpusCustomMode* %130, i64 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = shl i32 %140, 2
  %142 = shl i32 %132, 5
  %143 = add i32 %141, 8288
  %144 = mul i32 %143, %122
  %145 = add i32 %142, 100
  %146 = add i32 %145, %144
  %147 = sext i32 %146 to i64
  %148 = add nsw i64 %147, -44
  call void @llvm.memset.p0i8.i64(i8* align 4 %138, i8 0, i64 %148, i1 false)
  %149 = icmp sgt i32 %132, 0
  br i1 %149, label %150, label %161

150:                                              ; preds = %117, %150
  %151 = phi i64 [ %154, %150 ], [ 0, %117 ]
  %152 = getelementptr inbounds float, float* %136, i64 %151
  store float -2.800000e+01, float* %152, align 4
  %153 = getelementptr inbounds float, float* %135, i64 %151
  store float -2.800000e+01, float* %153, align 4
  %154 = add nuw nsw i64 %151, 1
  %155 = load %struct.OpusCustomMode*, %struct.OpusCustomMode** %129, align 8
  %156 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %155, i64 0, i32 2
  %157 = load i32, i32* %156, align 8
  %158 = shl nsw i32 %157, 1
  %159 = sext i32 %158 to i64
  %160 = icmp slt i64 %154, %159
  br i1 %160, label %150, label %161

161:                                              ; preds = %150, %117
  %162 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 14
  store i32 1, i32* %162, align 4
  br label %274

163:                                              ; preds = %2
  %164 = load i32, i32* %5, align 16
  %165 = icmp ult i32 %164, 41
  br i1 %165, label %166, label %171

166:                                              ; preds = %163
  %167 = load i8*, i8** %7, align 16
  %168 = sext i32 %164 to i64
  %169 = getelementptr i8, i8* %167, i64 %168
  %170 = add nuw nsw i32 %164, 8
  store i32 %170, i32* %5, align 16
  br label %174

171:                                              ; preds = %163
  %172 = load i8*, i8** %6, align 8
  %173 = getelementptr i8, i8* %172, i64 8
  store i8* %173, i8** %6, align 8
  br label %174

174:                                              ; preds = %171, %166
  %175 = phi i8* [ %169, %166 ], [ %172, %171 ]
  %176 = bitcast i8* %175 to i32**
  %177 = load i32*, i32** %176, align 8
  %178 = icmp eq i32* %177, null
  br i1 %178, label %274, label %179

179:                                              ; preds = %174
  %180 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 15
  %181 = load i32, i32* %180, align 8
  store i32 %181, i32* %177, align 4
  br label %274

182:                                              ; preds = %2
  %183 = load i32, i32* %5, align 16
  %184 = icmp ult i32 %183, 41
  br i1 %184, label %185, label %190

185:                                              ; preds = %182
  %186 = load i8*, i8** %7, align 16
  %187 = sext i32 %183 to i64
  %188 = getelementptr i8, i8* %186, i64 %187
  %189 = add nuw nsw i32 %183, 8
  store i32 %189, i32* %5, align 16
  br label %193

190:                                              ; preds = %182
  %191 = load i8*, i8** %6, align 8
  %192 = getelementptr i8, i8* %191, i64 8
  store i8* %192, i8** %6, align 8
  br label %193

193:                                              ; preds = %190, %185
  %194 = phi i8* [ %188, %185 ], [ %191, %190 ]
  %195 = bitcast i8* %194 to %struct.OpusCustomMode***
  %196 = load %struct.OpusCustomMode**, %struct.OpusCustomMode*** %195, align 8
  %197 = icmp eq %struct.OpusCustomMode** %196, null
  br i1 %197, label %274, label %198

198:                                              ; preds = %193
  %199 = bitcast %struct.OpusCustomDecoder* %0 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = bitcast %struct.OpusCustomMode** %196 to i64*
  store i64 %200, i64* %201, align 8
  br label %274

202:                                              ; preds = %2
  %203 = load i32, i32* %5, align 16
  %204 = icmp ult i32 %203, 41
  br i1 %204, label %205, label %210

205:                                              ; preds = %202
  %206 = load i8*, i8** %7, align 16
  %207 = sext i32 %203 to i64
  %208 = getelementptr i8, i8* %206, i64 %207
  %209 = add nuw nsw i32 %203, 8
  store i32 %209, i32* %5, align 16
  br label %213

210:                                              ; preds = %202
  %211 = load i8*, i8** %6, align 8
  %212 = getelementptr i8, i8* %211, i64 8
  store i8* %212, i8** %6, align 8
  br label %213

213:                                              ; preds = %210, %205
  %214 = phi i8* [ %208, %205 ], [ %211, %210 ]
  %215 = bitcast i8* %214 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 7
  store i32 %216, i32* %217, align 8
  br label %274

218:                                              ; preds = %2
  %219 = load i32, i32* %5, align 16
  %220 = icmp ult i32 %219, 41
  br i1 %220, label %221, label %226

221:                                              ; preds = %218
  %222 = load i8*, i8** %7, align 16
  %223 = sext i32 %219 to i64
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = add nuw nsw i32 %219, 8
  store i32 %225, i32* %5, align 16
  br label %229

226:                                              ; preds = %218
  %227 = load i8*, i8** %6, align 8
  %228 = getelementptr i8, i8* %227, i64 8
  store i8* %228, i8** %6, align 8
  br label %229

229:                                              ; preds = %226, %221
  %230 = phi i8* [ %224, %221 ], [ %227, %226 ]
  %231 = bitcast i8* %230 to i32**
  %232 = load i32*, i32** %231, align 8
  %233 = icmp eq i32* %232, null
  br i1 %233, label %274, label %234

234:                                              ; preds = %229
  %235 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 10
  %236 = load i32, i32* %235, align 4
  store i32 %236, i32* %232, align 4
  br label %274

237:                                              ; preds = %2
  %238 = load i32, i32* %5, align 16
  %239 = icmp ult i32 %238, 41
  br i1 %239, label %240, label %245

240:                                              ; preds = %237
  %241 = load i8*, i8** %7, align 16
  %242 = sext i32 %238 to i64
  %243 = getelementptr i8, i8* %241, i64 %242
  %244 = add nuw nsw i32 %238, 8
  store i32 %244, i32* %5, align 16
  br label %248

245:                                              ; preds = %237
  %246 = load i8*, i8** %6, align 8
  %247 = getelementptr i8, i8* %246, i64 8
  store i8* %247, i8** %6, align 8
  br label %248

248:                                              ; preds = %245, %240
  %249 = phi i8* [ %243, %240 ], [ %246, %245 ]
  %250 = bitcast i8* %249 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = icmp ugt i32 %251, 1
  br i1 %252, label %274, label %253

253:                                              ; preds = %248
  %254 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 8
  store i32 %251, i32* %254, align 4
  br label %274

255:                                              ; preds = %2
  %256 = load i32, i32* %5, align 16
  %257 = icmp ult i32 %256, 41
  br i1 %257, label %258, label %263

258:                                              ; preds = %255
  %259 = load i8*, i8** %7, align 16
  %260 = sext i32 %256 to i64
  %261 = getelementptr i8, i8* %259, i64 %260
  %262 = add nuw nsw i32 %256, 8
  store i32 %262, i32* %5, align 16
  br label %266

263:                                              ; preds = %255
  %264 = load i8*, i8** %6, align 8
  %265 = getelementptr i8, i8* %264, i64 8
  store i8* %265, i8** %6, align 8
  br label %266

266:                                              ; preds = %263, %258
  %267 = phi i8* [ %261, %258 ], [ %264, %263 ]
  %268 = bitcast i8* %267 to i32**
  %269 = load i32*, i32** %268, align 8
  %270 = icmp eq i32* %269, null
  br i1 %270, label %274, label %271

271:                                              ; preds = %266
  %272 = getelementptr inbounds %struct.OpusCustomDecoder, %struct.OpusCustomDecoder* %0, i64 0, i32 8
  %273 = load i32, i32* %272, align 4
  store i32 %273, i32* %269, align 4
  br label %274

274:                                              ; preds = %2, %68, %87, %106, %174, %193, %229, %248, %266, %25, %20, %49, %44, %161, %213, %31, %55, %74, %92, %111, %179, %198, %234, %253, %271
  %275 = phi i32 [ 0, %271 ], [ 0, %253 ], [ 0, %234 ], [ 0, %198 ], [ 0, %179 ], [ 0, %111 ], [ 0, %92 ], [ 0, %74 ], [ 0, %55 ], [ 0, %31 ], [ 0, %213 ], [ 0, %161 ], [ -1, %44 ], [ -1, %49 ], [ -1, %20 ], [ -1, %25 ], [ -1, %266 ], [ -1, %248 ], [ -1, %229 ], [ -1, %193 ], [ -1, %174 ], [ -1, %106 ], [ -1, %87 ], [ -1, %68 ], [ -5, %2 ]
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #4
  ret i32 %275
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

declare i32 @opus_select_arch() local_unnamed_addr #1

declare i32 @celt_lcg_rand(i32) local_unnamed_addr #1

declare void @renormalise_vector(float*, i32, float, i32) local_unnamed_addr #1

declare i32 @_celt_autocorr(float*, float*, float*, i32, i32, i32, i32) local_unnamed_addr #1

declare void @_celt_lpc(float*, float*, i32) local_unnamed_addr #1

declare void @celt_fir_c(float*, float*, float*, i32, i32, i32) local_unnamed_addr #1

declare void @celt_iir(float*, float*, float*, i32, i32, float*, i32) local_unnamed_addr #1

declare void @pitch_downsample(float**, float*, i32, i32, i32) local_unnamed_addr #1

declare void @pitch_search(float*, float*, i32, i32, i32*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

declare void @denormalise_bands(%struct.OpusCustomMode*, float*, float*, float*, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare void @clt_mdct_backward_c(%struct.mdct_lookup*, float*, float*, float*, i32, i32, i32, i32) local_unnamed_addr #1

declare float @sqrtf(float) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn nounwind }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{i32 0, i32 33}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !8}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16, !8}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35, !36}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !33}
!37 = !{!35}
!38 = !{!36}
!39 = distinct !{!39, !8}
!40 = !{!41}
!41 = distinct !{!41, !42}
!42 = distinct !{!42, !"LVerDomain"}
!43 = !{!44, !45}
!44 = distinct !{!44, !42}
!45 = distinct !{!45, !42}
!46 = !{!44}
!47 = !{!45}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !8}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55, !56}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !53}
!57 = !{!55}
!58 = !{!56}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64, !65}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !62}
!66 = !{!64}
!67 = !{!65}
!68 = distinct !{!68, !8}
!69 = distinct !{!69, !8}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74, !75}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !72}
!76 = !{!74}
!77 = !{!75}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !8}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84, !85}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !82}
!86 = !{!84}
!87 = !{!85}
!88 = distinct !{!88, !8}
!89 = distinct !{!89, !8}
!90 = distinct !{!90, !8}
!91 = !{!92}
!92 = distinct !{!92, !93}
!93 = distinct !{!93, !"LVerDomain"}
!94 = !{!95}
!95 = distinct !{!95, !93}
!96 = distinct !{!96, !8}
!97 = distinct !{!97, !8}
!98 = !{!99}
!99 = distinct !{!99, !100}
!100 = distinct !{!100, !"LVerDomain"}
!101 = !{!102}
!102 = distinct !{!102, !100}
!103 = distinct !{!103, !8}
!104 = distinct !{!104, !8}
!105 = distinct !{!105, !8}
!106 = distinct !{!106, !12}
!107 = distinct !{!107, !12}
!108 = distinct !{!108, !8}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !8}
!115 = distinct !{!115, !8}
!116 = distinct !{!116, !8}
!117 = distinct !{!117, !8}
!118 = !{!119}
!119 = distinct !{!119, !120}
!120 = distinct !{!120, !"LVerDomain"}
!121 = !{!122}
!122 = distinct !{!122, !120}
!123 = !{!124}
!124 = distinct !{!124, !120}
!125 = !{!126}
!126 = distinct !{!126, !120}
!127 = !{!128}
!128 = distinct !{!128, !120}
!129 = !{!124, !119, !126, !122}
!130 = distinct !{!130, !8}
!131 = distinct !{!131, !8}
!132 = !{!133}
!133 = distinct !{!133, !134}
!134 = distinct !{!134, !"LVerDomain"}
!135 = !{!136}
!136 = distinct !{!136, !134}
!137 = distinct !{!137, !8}
!138 = distinct !{!138, !8}
