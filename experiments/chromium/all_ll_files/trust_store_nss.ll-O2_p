; ModuleID = '../../net/cert/internal/trust_store_nss.cc'
source_filename = "../../net/cert/internal/trust_store_nss.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.net::ParseCertificateOptions" = type { i8 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.net::TrustStoreNSS" = type { %"class.net::TrustStore", i32, i8, %"class.std::__1::unique_ptr" }
%"class.net::TrustStore" = type { %"class.net::CertIssuerSource" }
%"class.net::CertIssuerSource" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.PK11SlotInfoStr* }
%struct.PK11SlotInfoStr = type opaque
%"class.net::ParsedCertificate" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr.2", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::BitString", %"struct.net::ParsedTbsCertificate", %"class.std::__1::unique_ptr.6", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"struct.net::ParsedBasicConstraints", i8, [3 x i8], %"class.net::der::BitString", i8, %"class.std::__1::vector", %"struct.net::ParsedExtension", %"class.std::__1::unique_ptr.18", %"class.std::__1::unique_ptr.24", i8, [7 x i8], %"struct.net::ParsedExtension", %"class.std::__1::vector.30", %"class.std::__1::vector.30", i8, %"class.std::__1::vector", i8, %"struct.net::ParsedPolicyConstraints", i8, %"class.std::__1::vector.37", i8, i8, %"class.absl::optional", %"class.absl::optional.45", %"class.std::__1::map" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.net::der::Input" = type { i8*, i64 }
%"struct.net::ParsedTbsCertificate" = type { i32, %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"struct.net::der::GeneralizedTime", %"struct.net::der::GeneralizedTime", %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8], %"class.net::der::BitString", i8, [7 x i8], %"class.net::der::BitString", i8, %"class.net::der::Input" }
%"struct.net::der::GeneralizedTime" = type { i16, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.net::SignatureAlgorithm"* }
%"class.net::SignatureAlgorithm" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.net::ParsedBasicConstraints" = type { i8, i8, i8 }
%"class.net::der::BitString" = type <{ %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.net::GeneralNames"* }
%"struct.net::GeneralNames" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.net::NameConstraints"* }
%"class.net::NameConstraints" = type opaque
%"struct.net::ParsedExtension" = type <{ %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.32" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::der::Input"*, %"class.net::der::Input"*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.net::der::Input"* }
%"struct.net::ParsedPolicyConstraints" = type { i8, i8, i8, i8 }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.net::ParsedPolicyMapping"*, %"struct.net::ParsedPolicyMapping"*, %"class.std::__1::__compressed_pair.39" }
%"struct.net::ParsedPolicyMapping" = type { %"class.net::der::Input", %"class.net::der::Input" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.net::ParsedPolicyMapping"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.44 }
%union.anon.44 = type { %"struct.net::ParsedAuthorityKeyIdentifier" }
%"struct.net::ParsedAuthorityKeyIdentifier" = type { %"class.absl::optional.45", %"class.absl::optional.45", %"class.absl::optional.45" }
%"class.absl::optional.45" = type { %"class.absl::optional_internal::optional_data.46" }
%"class.absl::optional_internal::optional_data.46" = type { %"class.absl::optional_internal::optional_data_base.47" }
%"class.absl::optional_internal::optional_data_base.47" = type { %"class.absl::optional_internal::optional_data_dtor_base.48" }
%"class.absl::optional_internal::optional_data_dtor_base.48" = type { i8, %union.anon.49 }
%union.anon.49 = type { %"class.net::der::Input" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.54", %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { i64 }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %class.scoped_refptr*, %class.scoped_refptr*, %"class.std::__1::__compressed_pair.64" }
%class.scoped_refptr = type { %"class.net::ParsedCertificate"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %class.scoped_refptr* }
%struct.SECItemStr = type { i32, i8*, i32 }
%"class.net::CertErrors" = type { %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.net::CertError"*, %"struct.net::CertError"*, %"class.std::__1::__compressed_pair.80" }
%"struct.net::CertError" = type { i32, i8*, %"class.std::__1::unique_ptr.74" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.net::CertErrorParams"* }
%"class.net::CertErrorParams" = type opaque
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.net::CertError"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%struct.NSSTrustDomainStr = type opaque
%struct.CERTCertListStr = type { %struct.PRCListStr, %struct.PLArenaPool* }
%struct.PRCListStr = type { %struct.PRCListStr*, %struct.PRCListStr* }
%struct.PLArenaPool = type { %struct.PLArena, %struct.PLArena*, i32, i64 }
%struct.PLArena = type { %struct.PLArena*, i64, i64, i64 }
%struct.CERTCertListNodeStr = type { %struct.PRCListStr, %struct.CERTCertificateStr*, i8* }
%struct.CERTCertificateStr = type { %struct.PLArenaPool*, i8*, i8*, %struct.CERTSignedDataStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.CERTNameStr, %struct.CERTValidityStr, %struct.CERTNameStr, %struct.CERTSubjectPublicKeyInfoStr, %struct.SECItemStr, %struct.SECItemStr, %struct.CERTCertExtensionStr**, i8*, %struct.NSSTrustDomainStr*, %struct.SECItemStr, i32, i32, i32, i32, i32, i32, i32, %struct.CERTOKDomainNameStr*, i32, i32, i8*, i8*, %struct.NSSCertificateStr*, %struct.CERTCertTrustStr*, i32, %struct.CERTSubjectListStr*, %struct.CERTAuthKeyIDStr*, i32, %union.anon.70, i32, %struct.PK11SlotInfoStr*, i64, i32, %struct.CERTCertDistrustStr* }
%struct.CERTSignedDataStr = type { %struct.SECItemStr, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.SECAlgorithmIDStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTValidityStr = type { %struct.PLArenaPool*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTNameStr = type { %struct.PLArenaPool*, %struct.CERTRDNStr** }
%struct.CERTRDNStr = type { %struct.CERTAVAStr** }
%struct.CERTAVAStr = type { %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTSubjectPublicKeyInfoStr = type { %struct.PLArenaPool*, %struct.SECAlgorithmIDStr, %struct.SECItemStr }
%struct.CERTCertExtensionStr = type { %struct.SECItemStr, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTOKDomainNameStr = type { %struct.CERTOKDomainNameStr*, i8* }
%struct.NSSCertificateStr = type opaque
%struct.CERTCertTrustStr = type { i32, i32, i32 }
%struct.CERTSubjectListStr = type { %struct.PLArenaPool*, i32, i8*, %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, i8* }
%struct.CERTSubjectNodeStr = type { %struct.CERTSubjectNodeStr*, %struct.CERTSubjectNodeStr*, %struct.SECItemStr, %struct.SECItemStr }
%struct.CERTAuthKeyIDStr = type { %struct.SECItemStr, %struct.CERTGeneralNameStr*, %struct.SECItemStr, %struct.SECItemStr** }
%struct.CERTGeneralNameStr = type { i32, %union.anon.69, %struct.SECItemStr, %struct.PRCListStr }
%union.anon.69 = type { %struct.OtherNameStr }
%struct.OtherNameStr = type { %struct.SECItemStr, %struct.SECItemStr }
%union.anon.70 = type { i8* }
%struct.CERTCertDistrustStr = type { %struct.SECItemStr, %struct.SECItemStr }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.net::CertificateTrust" = type { i32 }
%"class.base::SupportsUserData" = type <{ i32 (...)**, %"class.std::__1::map.85", %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%"class.std::__1::map.85" = type { %"class.std::__1::__tree.86" }
%"class.std::__1::__tree.86" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.87", %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%struct.PK11SlotListStr = type { %struct.PK11SlotListElementStr*, %struct.PK11SlotListElementStr*, %struct.PRLock* }
%struct.PK11SlotListElementStr = type { %struct.PK11SlotListElementStr*, %struct.PK11SlotListElementStr*, %struct.PK11SlotInfoStr*, i32 }
%struct.PRLock = type opaque
%"class.std::__1::unique_ptr.105" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN3net17ParsedCertificateEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_ = comdat any

@_ZTVN3net13TrustStoreNSSE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::TrustStoreNSS"*)* @_ZN3net13TrustStoreNSSD2Ev to i8*), i8* bitcast (void (%"class.net::TrustStoreNSS"*)* @_ZN3net13TrustStoreNSSD0Ev to i8*), i8* bitcast (void (%"class.net::TrustStoreNSS"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.62"*)* @_ZN3net13TrustStoreNSS16SyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__16vectorI13scoped_refptrIS1_ENS4_9allocatorIS7_EEEE to i8*), i8* bitcast (void (%"class.net::TrustStore"*, %"class.net::ParsedCertificate"*, %"class.std::__1::unique_ptr.105"*)* @_ZN3net10TrustStore17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE to i8*), i8* bitcast (void (%"class.net::TrustStoreNSS"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)* @_ZNK3net13TrustStoreNSS8GetTrustERK13scoped_refptrINS_17ParsedCertificateEEPNS_16CertificateTrustEPN4base16SupportsUserDataE to i8*)] }, align 8
@.ref.tmp = private constant %"struct.net::ParseCertificateOptions" zeroinitializer, align 1
@.str = private unnamed_addr constant [43 x i8] c"../../net/cert/internal/trust_store_nss.cc\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Error parsing issuer certificate:\0A\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnum = hidden unnamed_addr alias void (%"class.net::TrustStoreNSS"*, i32), void (%"class.net::TrustStoreNSS"*, i32)* @_ZN3net13TrustStoreNSSC2E16SECTrustTypeEnum
@_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnumNSt3__110unique_ptrI15PK11SlotInfoStrN6crypto12NSSDestroyerIS4_XadL_Z13PK11_FreeSlotEEEEEE = hidden unnamed_addr alias void (%"class.net::TrustStoreNSS"*, i32, %struct.PK11SlotInfoStr*), void (%"class.net::TrustStoreNSS"*, i32, %struct.PK11SlotInfoStr*)* @_ZN3net13TrustStoreNSSC2E16SECTrustTypeEnumNSt3__110unique_ptrI15PK11SlotInfoStrN6crypto12NSSDestroyerIS4_XadL_Z13PK11_FreeSlotEEEEEE
@_ZN3net13TrustStoreNSSC1E16SECTrustTypeEnumNS0_32DisallowTrustForCertsOnUserSlotsE = hidden unnamed_addr alias void (%"class.net::TrustStoreNSS"*, i32), void (%"class.net::TrustStoreNSS"*, i32)* @_ZN3net13TrustStoreNSSC2E16SECTrustTypeEnumNS0_32DisallowTrustForCertsOnUserSlotsE
@_ZN3net13TrustStoreNSSD1Ev = hidden unnamed_addr alias void (%"class.net::TrustStoreNSS"*), void (%"class.net::TrustStoreNSS"*)* @_ZN3net13TrustStoreNSSD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13TrustStoreNSSC2E16SECTrustTypeEnum(%"class.net::TrustStoreNSS"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0
  tail call void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"* %3) #9
  %4 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net13TrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 1
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 2
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 3
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 0, i64* %8, align 8
  ret void
}

declare void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13TrustStoreNSSC2E16SECTrustTypeEnumNSt3__110unique_ptrI15PK11SlotInfoStrN6crypto12NSSDestroyerIS4_XadL_Z13PK11_FreeSlotEEEEEE(%"class.net::TrustStoreNSS"*, i32, %struct.PK11SlotInfoStr*) unnamed_addr #0 align 2 {
  %4 = ptrtoint %struct.PK11SlotInfoStr* %2 to i64
  %5 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0
  tail call void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"* %5) #9
  %6 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net13TrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 1
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 2
  store i8 1, i8* %8, align 4
  %9 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 3
  %10 = bitcast %"class.std::__1::unique_ptr"* %9 to i64*
  store i64 %4, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13TrustStoreNSSC2E16SECTrustTypeEnumNS0_32DisallowTrustForCertsOnUserSlotsE(%"class.net::TrustStoreNSS"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0
  tail call void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"* %3) #9
  %4 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net13TrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 1
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 2
  store i8 1, i8* %6, align 4
  %7 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 3
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 0, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13TrustStoreNSSD2Ev(%"class.net::TrustStoreNSS"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net13TrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %3, align 8
  store %struct.PK11SlotInfoStr* null, %struct.PK11SlotInfoStr** %3, align 8
  %5 = icmp eq %struct.PK11SlotInfoStr* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @PK11_FreeSlot(%struct.PK11SlotInfoStr* nonnull %4) #9
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13TrustStoreNSSD0Ev(%"class.net::TrustStoreNSS"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net13TrustStoreNSSE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %3, align 8
  store %struct.PK11SlotInfoStr* null, %struct.PK11SlotInfoStr** %3, align 8
  %5 = icmp eq %struct.PK11SlotInfoStr* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @PK11_FreeSlot(%struct.PK11SlotInfoStr* nonnull %4) #9
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.net::TrustStoreNSS"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net13TrustStoreNSS16SyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__16vectorI13scoped_refptrIS1_ENS4_9allocatorIS7_EEEE(%"class.net::TrustStoreNSS"* nocapture readnone, %"class.net::ParsedCertificate"* nocapture readonly, %"class.std::__1::vector.62"*) unnamed_addr #0 align 2 {
  %4 = alloca %struct.SECItemStr, align 8
  %5 = alloca %"class.net::CertErrors", align 8
  %6 = alloca %class.scoped_refptr, align 8
  %7 = alloca %"class.logging::LogMessage", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  tail call void @_ZN6crypto13EnsureNSSInitEv() #9
  %9 = bitcast %struct.SECItemStr* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %1, i64 0, i32 6, i32 3, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds %struct.SECItemStr, %struct.SECItemStr* %4, i64 0, i32 2
  store i32 %12, i32* %13, align 8
  %14 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %1, i64 0, i32 6, i32 3, i32 0
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.SECItemStr, %struct.SECItemStr* %4, i64 0, i32 1
  %18 = bitcast i8** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = tail call %struct.NSSTrustDomainStr* @CERT_GetDefaultCertDB() #9
  %20 = tail call i64 @PR_Now() #9
  %21 = call %struct.CERTCertListStr* @CERT_CreateSubjectCertList(%struct.CERTCertListStr* null, %struct.NSSTrustDomainStr* %19, %struct.SECItemStr* nonnull %4, i64 %20, i32 0) #9
  %22 = icmp eq %struct.CERTCertListStr* %21, null
  br i1 %22, label %97, label %23

23:                                               ; preds = %3
  %24 = bitcast %struct.CERTCertListStr* %21 to %struct.CERTCertListNodeStr**
  %25 = load %struct.CERTCertListNodeStr*, %struct.CERTCertListNodeStr** %24, align 8
  %26 = bitcast %struct.CERTCertListStr* %21 to %struct.CERTCertListNodeStr*
  %27 = icmp eq %struct.CERTCertListNodeStr* %25, %26
  br i1 %27, label %44, label %28

28:                                               ; preds = %23
  %29 = bitcast %"class.net::CertErrors"* %5 to i8*
  %30 = bitcast %class.scoped_refptr* %6 to i8*
  %31 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %6, i64 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %2, i64 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %class.scoped_refptr** %32 to i64*
  %35 = bitcast %"class.logging::LogMessage"* %7 to i8*
  %36 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %7, i64 0, i32 2
  %37 = bitcast %"class.std::__1::basic_ostringstream"* %36 to %"class.std::__1::basic_ostream"*
  %38 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %39 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = bitcast %"class.net::CertErrors"* %5 to i8*
  br label %45

44:                                               ; preds = %93, %23
  call void @CERT_DestroyCertList(%struct.CERTCertListStr* nonnull %21) #9
  br label %97

45:                                               ; preds = %28, %93
  %46 = phi %struct.CERTCertListNodeStr* [ %25, %28 ], [ %95, %93 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 -86, i64 24, i1 false)
  call void @_ZN3net10CertErrorsC1Ev(%"class.net::CertErrors"* nonnull %5) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #9
  store %"class.net::ParsedCertificate"* inttoptr (i64 -6148914691236517206 to %"class.net::ParsedCertificate"*), %"class.net::ParsedCertificate"** %31, align 8
  %47 = getelementptr inbounds %struct.CERTCertListNodeStr, %struct.CERTCertListNodeStr* %46, i64 0, i32 1
  %48 = load %struct.CERTCertificateStr*, %struct.CERTCertificateStr** %47, align 8
  %49 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %48, i64 0, i32 4, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %struct.CERTCertificateStr, %struct.CERTCertificateStr* %48, i64 0, i32 4, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = zext i32 %52 to i64
  %54 = call %struct.crypto_buffer_st* @_ZN3net9x509_util18CreateCryptoBufferEPKhm(i8* %50, i64 %53) #9
  %55 = call %"class.net::ParsedCertificate"* @_ZN3net17ParsedCertificate6CreateENSt3__110unique_ptrI16crypto_buffer_stN4bssl8internal7DeleterIS3_EEEERKNS_23ParseCertificateOptionsEPNS_10CertErrorsE(%struct.crypto_buffer_st* %54, %"struct.net::ParseCertificateOptions"* nonnull dereferenceable(1) @.ref.tmp, %"class.net::CertErrors"* nonnull %5) #9
  store %"class.net::ParsedCertificate"* %55, %"class.net::ParsedCertificate"** %31, align 8
  %56 = icmp eq %"class.net::ParsedCertificate"* %55, null
  %57 = ptrtoint %"class.net::ParsedCertificate"* %55 to i64
  br i1 %56, label %58, label %75

58:                                               ; preds = %45
  %59 = call zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32 2) #9
  br i1 %59, label %60, label %84

60:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %35) #9
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %7, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i32 68, i32 2) #9
  %61 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %37, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i64 34) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #9
  call void @_ZNK3net10CertErrors13ToDebugStringEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.net::CertErrors"* nonnull %5) #9
  %62 = load i8, i8* %40, align 1
  %63 = icmp slt i8 %62, 0
  %64 = load i8*, i8** %41, align 8
  %65 = load i64, i64* %42, align 8
  %66 = zext i8 %62 to i64
  %67 = select i1 %63, i8* %64, i8* %38
  %68 = select i1 %63, i64 %65, i64 %66
  %69 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %61, i8* %67, i64 %68) #9
  %70 = load i8, i8* %40, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %60
  %73 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %73) #10
  br label %74

74:                                               ; preds = %60, %72
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #9
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %35) #9
  br label %84

75:                                               ; preds = %45
  %76 = load %class.scoped_refptr*, %class.scoped_refptr** %32, align 8
  %77 = load %class.scoped_refptr*, %class.scoped_refptr** %33, align 8
  %78 = icmp ult %class.scoped_refptr* %76, %77
  br i1 %78, label %79, label %83

79:                                               ; preds = %75
  %80 = bitcast %class.scoped_refptr* %76 to i64*
  store i64 %57, i64* %80, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %31, align 8
  %81 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %76, i64 1
  %82 = ptrtoint %class.scoped_refptr* %81 to i64
  store i64 %82, i64* %34, align 8
  br label %93

83:                                               ; preds = %75
  call void @_ZNSt3__16vectorI13scoped_refptrIN3net17ParsedCertificateEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector.62"* %2, %class.scoped_refptr* nonnull dereferenceable(8) %6) #9
  br label %84

84:                                               ; preds = %83, %74, %58
  %85 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %31, align 8
  %86 = icmp eq %"class.net::ParsedCertificate"* %85, null
  br i1 %86, label %93, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %85, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw sub i32* %88, i32 1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %93

91:                                               ; preds = %87
  call void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"* nonnull %85) #9
  %92 = bitcast %"class.net::ParsedCertificate"* %85 to i8*
  call void @_ZdlPv(i8* %92) #10
  br label %93

93:                                               ; preds = %79, %84, %87, %91
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #9
  call void @_ZN3net10CertErrorsD1Ev(%"class.net::CertErrors"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #9
  %94 = bitcast %struct.CERTCertListNodeStr* %46 to %struct.CERTCertListNodeStr**
  %95 = load %struct.CERTCertListNodeStr*, %struct.CERTCertListNodeStr** %94, align 8
  %96 = icmp eq %struct.CERTCertListNodeStr* %95, %26
  br i1 %96, label %44, label %45

97:                                               ; preds = %3, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  ret void
}

declare void @_ZN6crypto13EnsureNSSInitEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare %struct.CERTCertListStr* @CERT_CreateSubjectCertList(%struct.CERTCertListStr*, %struct.NSSTrustDomainStr*, %struct.SECItemStr*, i64, i32) local_unnamed_addr #1

declare %struct.NSSTrustDomainStr* @CERT_GetDefaultCertDB() local_unnamed_addr #1

declare i64 @PR_Now() local_unnamed_addr #1

declare void @_ZN3net10CertErrorsC1Ev(%"class.net::CertErrors"*) unnamed_addr #1

declare %"class.net::ParsedCertificate"* @_ZN3net17ParsedCertificate6CreateENSt3__110unique_ptrI16crypto_buffer_stN4bssl8internal7DeleterIS3_EEEERKNS_23ParseCertificateOptionsEPNS_10CertErrorsE(%struct.crypto_buffer_st*, %"struct.net::ParseCertificateOptions"* dereferenceable(1), %"class.net::CertErrors"*) local_unnamed_addr #1

declare %struct.crypto_buffer_st* @_ZN3net9x509_util18CreateCryptoBufferEPKhm(i8*, i64) local_unnamed_addr #1

declare zeroext i1 @_ZN7logging22ShouldCreateLogMessageEi(i32) local_unnamed_addr #1

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #1

declare void @_ZNK3net10CertErrors13ToDebugStringEv(%"class.std::__1::basic_string"* sret, %"class.net::CertErrors"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN3net10CertErrorsD1Ev(%"class.net::CertErrors"*) unnamed_addr #4

declare void @CERT_DestroyCertList(%struct.CERTCertListStr*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net13TrustStoreNSS8GetTrustERK13scoped_refptrINS_17ParsedCertificateEEPNS_16CertificateTrustEPN4base16SupportsUserDataE(%"class.net::TrustStoreNSS"* nocapture readonly, %class.scoped_refptr* nocapture readonly dereferenceable(8), %"struct.net::CertificateTrust"* nocapture, %"class.base::SupportsUserData"* nocapture readnone) unnamed_addr #0 align 2 {
  %5 = alloca %struct.CERTCertTrustStr, align 4
  tail call void @_ZN6crypto13EnsureNSSInitEv() #9
  %6 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %7 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %6, align 8
  %8 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %7, i64 0, i32 2, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %7, i64 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = tail call %struct.CERTCertificateStr* @_ZN3net9x509_util30CreateCERTCertificateFromBytesEPKhm(i8* %9, i64 %11) #9
  %13 = icmp eq %struct.CERTCertificateStr* %12, null
  br i1 %13, label %55, label %14

14:                                               ; preds = %4
  %15 = tail call zeroext i1 @_ZNK3net13TrustStoreNSS21IsCertAllowedForTrustEP18CERTCertificateStr(%"class.net::TrustStoreNSS"* %0, %struct.CERTCertificateStr* nonnull %12)
  br i1 %15, label %19, label %16

16:                                               ; preds = %14
  %17 = tail call i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() #9
  %18 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %2, i64 0, i32 0
  store i32 %17, i32* %18, align 4
  br label %58

19:                                               ; preds = %14
  %20 = bitcast %struct.CERTCertTrustStr* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20) #9
  %21 = getelementptr inbounds %struct.CERTCertTrustStr, %struct.CERTCertTrustStr* %5, i64 0, i32 0
  store i32 -1431655766, i32* %21, align 4
  %22 = getelementptr inbounds %struct.CERTCertTrustStr, %struct.CERTCertTrustStr* %5, i64 0, i32 1
  store i32 -1431655766, i32* %22, align 4
  %23 = getelementptr inbounds %struct.CERTCertTrustStr, %struct.CERTCertTrustStr* %5, i64 0, i32 2
  store i32 -1431655766, i32* %23, align 4
  %24 = call i32 @CERT_GetCertTrust(%struct.CERTCertificateStr* nonnull %12, %struct.CERTCertTrustStr* nonnull %5) #9
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %19
  %27 = call i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() #9
  br label %52

28:                                               ; preds = %19
  %29 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  switch i32 %30, label %35 [
    i32 0, label %31
    i32 1, label %33
  ]

31:                                               ; preds = %28
  %32 = load i32, i32* %21, align 4
  br label %39

33:                                               ; preds = %28
  %34 = load i32, i32* %22, align 4
  br label %39

35:                                               ; preds = %28
  %36 = icmp eq i32 %30, 2
  %37 = load i32, i32* %23, align 4
  %38 = select i1 %36, i32 %37, i32 0
  br label %39

39:                                               ; preds = %33, %35, %31
  %40 = phi i32 [ %32, %31 ], [ %34, %33 ], [ %38, %35 ]
  %41 = and i32 %40, 19
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %45

43:                                               ; preds = %39
  %44 = call i32 @_ZN3net16CertificateTrust13ForDistrustedEv() #9
  br label %52

45:                                               ; preds = %39
  %46 = and i32 %40, 16
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %45
  %49 = call i32 @_ZN3net16CertificateTrust14ForTrustAnchorEv() #9
  br label %52

50:                                               ; preds = %45
  %51 = call i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() #9
  br label %52

52:                                               ; preds = %43, %48, %50, %26
  %53 = phi i32 [ %44, %43 ], [ %49, %48 ], [ %51, %50 ], [ %27, %26 ]
  %54 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %2, i64 0, i32 0
  store i32 %53, i32* %54, align 4
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20) #9
  br label %58

55:                                               ; preds = %4
  %56 = tail call i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() #9
  %57 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %2, i64 0, i32 0
  store i32 %56, i32* %57, align 4
  br label %59

58:                                               ; preds = %52, %16
  call void @CERT_DestroyCertificate(%struct.CERTCertificateStr* nonnull %12) #9
  br label %59

59:                                               ; preds = %55, %58
  ret void
}

declare %struct.CERTCertificateStr* @_ZN3net9x509_util30CreateCERTCertificateFromBytesEPKhm(i8*, i64) local_unnamed_addr #1

declare i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net13TrustStoreNSS21IsCertAllowedForTrustEP18CERTCertificateStr(%"class.net::TrustStoreNSS"* nocapture readonly, %struct.CERTCertificateStr*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %38, label %6

6:                                                ; preds = %2
  %7 = tail call %struct.PK11SlotListStr* @PK11_GetAllSlotsForCert(%struct.CERTCertificateStr* %1, i8* null) #9
  %8 = icmp eq %struct.PK11SlotListStr* %7, null
  br i1 %8, label %38, label %9

9:                                                ; preds = %6
  %10 = tail call %struct.PK11SlotListElementStr* @PK11_GetFirstSafe(%struct.PK11SlotListStr* nonnull %7) #9
  %11 = icmp eq %struct.PK11SlotListElementStr* %10, null
  br i1 %11, label %36, label %12

12:                                               ; preds = %9
  %13 = getelementptr inbounds %"class.net::TrustStoreNSS", %"class.net::TrustStoreNSS"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  br label %14

14:                                               ; preds = %12, %31
  %15 = phi %struct.PK11SlotListElementStr* [ %10, %12 ], [ %32, %31 ]
  %16 = getelementptr inbounds %struct.PK11SlotListElementStr, %struct.PK11SlotListElementStr* %15, i64 0, i32 2
  %17 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %16, align 8
  %18 = tail call i32 @PK11_HasRootCerts(%struct.PK11SlotInfoStr* %17) #9
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %34

20:                                               ; preds = %14
  %21 = tail call i32 @PK11_IsInternal(%struct.PK11SlotInfoStr* %17) #9
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = tail call i32 @PK11_IsRemovable(%struct.PK11SlotInfoStr* %17) #9
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %23, %20
  %27 = load %struct.PK11SlotInfoStr*, %struct.PK11SlotInfoStr** %13, align 8
  %28 = icmp ne %struct.PK11SlotInfoStr* %27, null
  %29 = icmp eq %struct.PK11SlotInfoStr* %17, %27
  %30 = and i1 %28, %29
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = tail call %struct.PK11SlotListElementStr* @PK11_GetNextSafe(%struct.PK11SlotListStr* nonnull %7, %struct.PK11SlotListElementStr* nonnull %15, i32 0) #9
  %33 = icmp eq %struct.PK11SlotListElementStr* %32, null
  br i1 %33, label %36, label %14

34:                                               ; preds = %26, %14, %23
  %35 = tail call i32 @PK11_FreeSlotListElement(%struct.PK11SlotListStr* nonnull %7, %struct.PK11SlotListElementStr* nonnull %15) #9
  br label %36

36:                                               ; preds = %31, %9, %34
  %37 = phi i1 [ true, %34 ], [ false, %9 ], [ false, %31 ]
  tail call void @PK11_FreeSlotList(%struct.PK11SlotListStr* nonnull %7) #9
  br label %38

38:                                               ; preds = %6, %36, %2
  %39 = phi i1 [ true, %2 ], [ %37, %36 ], [ false, %6 ]
  ret i1 %39
}

declare i32 @CERT_GetCertTrust(%struct.CERTCertificateStr*, %struct.CERTCertTrustStr*) local_unnamed_addr #1

declare i32 @_ZN3net16CertificateTrust13ForDistrustedEv() local_unnamed_addr #1

declare i32 @_ZN3net16CertificateTrust14ForTrustAnchorEv() local_unnamed_addr #1

declare %struct.PK11SlotListStr* @PK11_GetAllSlotsForCert(%struct.CERTCertificateStr*, i8*) local_unnamed_addr #1

declare %struct.PK11SlotListElementStr* @PK11_GetFirstSafe(%struct.PK11SlotListStr*) local_unnamed_addr #1

declare i32 @PK11_HasRootCerts(%struct.PK11SlotInfoStr*) local_unnamed_addr #1

declare i32 @PK11_IsInternal(%struct.PK11SlotInfoStr*) local_unnamed_addr #1

declare i32 @PK11_IsRemovable(%struct.PK11SlotInfoStr*) local_unnamed_addr #1

declare i32 @PK11_FreeSlotListElement(%struct.PK11SlotListStr*, %struct.PK11SlotListElementStr*) local_unnamed_addr #1

declare %struct.PK11SlotListElementStr* @PK11_GetNextSafe(%struct.PK11SlotListStr*, %struct.PK11SlotListElementStr*, i32) local_unnamed_addr #1

declare void @_ZN3net10TrustStore17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE(%"class.net::TrustStore"*, %"class.net::ParsedCertificate"*, %"class.std::__1::unique_ptr.105"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #9
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #9
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #9
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #9
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #9
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #9
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #9
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #9
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #9
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #9
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #10
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #9
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #9
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #9
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #9
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #1

declare void @PK11_FreeSlot(%struct.PK11SlotInfoStr*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN3net17ParsedCertificateEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_(%"class.std::__1::vector.62"*, %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.62"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.62"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %class.scoped_refptr*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %1, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.scoped_refptr* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %40, align 8
  %44 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %37, i64 1
  %45 = ptrtoint %class.scoped_refptr* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 0
  %47 = load %class.scoped_refptr*, %class.scoped_refptr** %46, align 8
  %48 = ptrtoint %class.scoped_refptr* %47 to i64
  %49 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  %50 = icmp eq %class.scoped_refptr* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %class.scoped_refptr, %class.scoped_refptr* %49, i64 -1, i32 0
  %53 = ptrtoint %"class.net::ParsedCertificate"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %class.scoped_refptr* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %class.scoped_refptr* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %60, i64 -1
  %64 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %61, i64 -1
  %65 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !3

71:                                               ; preds = %59, %51
  %72 = phi %class.scoped_refptr* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %class.scoped_refptr* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %class.scoped_refptr* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %class.scoped_refptr* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %class.scoped_refptr* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -1
  %80 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %80, i64 0, i32 0
  %82 = bitcast %class.scoped_refptr* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %class.scoped_refptr* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %81, align 8
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -2
  %86 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -2
  %87 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %86, i64 0, i32 0
  %88 = bitcast %class.scoped_refptr* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %class.scoped_refptr* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %87, align 8
  %91 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -3
  %92 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -3
  %93 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %92, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %class.scoped_refptr* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %93, align 8
  %97 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -4
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -4
  %99 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %99, align 8
  %103 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -5
  %104 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -5
  %105 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %105, align 8
  %109 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -6
  %110 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -6
  %111 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %110, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -7
  %116 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -7
  %117 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %116, i64 0, i32 0
  %118 = bitcast %class.scoped_refptr* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %class.scoped_refptr* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %117, align 8
  %121 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %77, i64 -8
  %122 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %78, i64 -8
  %123 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %122, i64 0, i32 0
  %124 = bitcast %class.scoped_refptr* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %class.scoped_refptr* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.net::ParsedCertificate"* null, %"class.net::ParsedCertificate"** %123, align 8
  %127 = icmp eq %class.scoped_refptr* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %class.scoped_refptr* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %class.scoped_refptr*, %class.scoped_refptr** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %class.scoped_refptr* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %class.scoped_refptr* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %class.scoped_refptr* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %class.scoped_refptr*
  %138 = icmp eq %class.scoped_refptr* %133, %137
  br i1 %138, label %153, label %139

139:                                              ; preds = %132, %151
  %140 = phi %class.scoped_refptr* [ %141, %151 ], [ %133, %132 ]
  %141 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %140, i64 -1
  %142 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %141, i64 0, i32 0
  %143 = load %"class.net::ParsedCertificate"*, %"class.net::ParsedCertificate"** %142, align 8
  %144 = icmp eq %"class.net::ParsedCertificate"* %143, null
  br i1 %144, label %151, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.net::ParsedCertificate", %"class.net::ParsedCertificate"* %143, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = atomicrmw sub i32* %146, i32 1 acq_rel
  %148 = icmp eq i32 %147, 1
  br i1 %148, label %149, label %151

149:                                              ; preds = %145
  tail call void @_ZN3net17ParsedCertificateD1Ev(%"class.net::ParsedCertificate"* nonnull %143) #9
  %150 = bitcast %"class.net::ParsedCertificate"* %143 to i8*
  tail call void @_ZdlPv(i8* %150) #10
  br label %151

151:                                              ; preds = %149, %145, %139
  %152 = icmp eq %class.scoped_refptr* %141, %137
  br i1 %152, label %153, label %139

153:                                              ; preds = %151, %132
  %154 = icmp eq i64 %135, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %153
  %156 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %156) #10
  br label %157

157:                                              ; preds = %153, %155
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

declare void @CERT_DestroyCertificate(%struct.CERTCertificateStr*) local_unnamed_addr #1

declare void @PK11_FreeSlotList(%struct.PK11SlotListStr*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
