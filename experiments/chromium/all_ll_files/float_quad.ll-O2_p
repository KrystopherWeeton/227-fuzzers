; ModuleID = '../../third_party/blink/renderer/platform/geometry/float_quad.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/float_quad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.blink::FloatPoint" = type { float, float }
%struct.SkPoint = type { float, float }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [15 x i8] c"%s; %s; %s; %s\00", align 1

@_ZN5blink9FloatQuadC1ERA4_K7SkPoint = hidden unnamed_addr alias void (%"class.blink::FloatQuad"*, [4 x %struct.SkPoint]*), void (%"class.blink::FloatQuad"*, [4 x %struct.SkPoint]*)* @_ZN5blink9FloatQuadC2ERA4_K7SkPoint

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink9FloatQuad11BoundingBoxEv(%"class.blink::FloatQuad"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  %9 = load float, float* %8, align 4
  %10 = fcmp olt float %5, %3
  %11 = fcmp olt float %9, %7
  %12 = select i1 %11, float %9, float %7
  %13 = select i1 %10, float %5, float %3
  %14 = fcmp olt float %12, %13
  %15 = select i1 %14, float %12, float %13
  %16 = tail call float @llvm.fabs.f32(float %15) #9
  %17 = fcmp oeq float %16, 0x7FF0000000000000
  br i1 %17, label %18, label %23, !prof !2

18:                                               ; preds = %1
  %19 = bitcast float %15 to i32
  %20 = icmp slt i32 %19, 0
  %21 = select i1 %20, i32 -2147483648, i32 2147483647
  %22 = sitofp i32 %21 to float
  br label %23

23:                                               ; preds = %1, %18
  %24 = phi float [ %22, %18 ], [ %15, %1 ]
  %25 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 1
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 1
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 1
  %32 = load float, float* %31, align 4
  %33 = fcmp olt float %28, %26
  %34 = fcmp olt float %32, %30
  %35 = select i1 %34, float %32, float %30
  %36 = select i1 %33, float %28, float %26
  %37 = fcmp olt float %35, %36
  %38 = select i1 %37, float %35, float %36
  %39 = tail call float @llvm.fabs.f32(float %38) #9
  %40 = fcmp oeq float %39, 0x7FF0000000000000
  br i1 %40, label %41, label %46, !prof !2

41:                                               ; preds = %23
  %42 = bitcast float %38 to i32
  %43 = icmp slt i32 %42, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = sitofp i32 %44 to float
  br label %46

46:                                               ; preds = %23, %41
  %47 = phi float [ %45, %41 ], [ %38, %23 ]
  %48 = fcmp olt float %3, %5
  %49 = fcmp olt float %7, %9
  %50 = select i1 %48, float %5, float %3
  %51 = select i1 %49, float %9, float %7
  %52 = fcmp olt float %50, %51
  %53 = select i1 %52, float %51, float %50
  %54 = tail call float @llvm.fabs.f32(float %53) #9
  %55 = fcmp oeq float %54, 0x7FF0000000000000
  br i1 %55, label %56, label %61, !prof !2

56:                                               ; preds = %46
  %57 = bitcast float %53 to i32
  %58 = icmp slt i32 %57, 0
  %59 = select i1 %58, i32 -2147483648, i32 2147483647
  %60 = sitofp i32 %59 to float
  br label %61

61:                                               ; preds = %46, %56
  %62 = phi float [ %60, %56 ], [ %53, %46 ]
  %63 = fcmp olt float %26, %28
  %64 = fcmp olt float %30, %32
  %65 = select i1 %63, float %28, float %26
  %66 = select i1 %64, float %32, float %30
  %67 = fcmp olt float %65, %66
  %68 = select i1 %67, float %66, float %65
  %69 = tail call float @llvm.fabs.f32(float %68) #9
  %70 = fcmp oeq float %69, 0x7FF0000000000000
  br i1 %70, label %71, label %76, !prof !2

71:                                               ; preds = %61
  %72 = bitcast float %68 to i32
  %73 = icmp slt i32 %72, 0
  %74 = select i1 %73, i32 -2147483648, i32 2147483647
  %75 = sitofp i32 %74 to float
  br label %76

76:                                               ; preds = %61, %71
  %77 = phi float [ %75, %71 ], [ %68, %61 ]
  %78 = fsub float %62, %24
  %79 = fsub float %77, %47
  %80 = insertelement <2 x float> undef, float %24, i32 0
  %81 = insertelement <2 x float> %80, float %47, i32 1
  %82 = insertelement <2 x float> undef, float %78, i32 0
  %83 = insertelement <2 x float> %82, float %79, i32 1
  %84 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %81, 0
  %85 = insertvalue { <2 x float>, <2 x float> } %84, <2 x float> %83, 1
  ret { <2 x float>, <2 x float> } %85
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink9FloatQuadC2ERA4_K7SkPoint(%"class.blink::FloatQuad"* nocapture, [4 x %struct.SkPoint]* nocapture readonly dereferenceable(32)) unnamed_addr #2 align 2 {
  %3 = bitcast [4 x %struct.SkPoint]* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 0, i32 1
  %6 = bitcast float* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 1
  %9 = bitcast %struct.SkPoint* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 1, i32 1
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 2
  %15 = bitcast %struct.SkPoint* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 2, i32 1
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 3
  %21 = bitcast %struct.SkPoint* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %1, i64 0, i64 3, i32 1
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = bitcast %"class.blink::FloatQuad"* %0 to i64*
  %27 = zext i32 %7 to i64
  %28 = shl nuw i64 %27, 32
  %29 = zext i32 %4 to i64
  %30 = or i64 %28, %29
  store i64 %30, i64* %26, align 4
  %31 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1
  %32 = bitcast %"class.blink::FloatPoint"* %31 to i64*
  %33 = zext i32 %13 to i64
  %34 = shl nuw i64 %33, 32
  %35 = zext i32 %10 to i64
  %36 = or i64 %34, %35
  store i64 %36, i64* %32, align 4
  %37 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2
  %38 = bitcast %"class.blink::FloatPoint"* %37 to i64*
  %39 = zext i32 %19 to i64
  %40 = shl nuw i64 %39, 32
  %41 = zext i32 %16 to i64
  %42 = or i64 %40, %41
  store i64 %42, i64* %38, align 4
  %43 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3
  %44 = bitcast %"class.blink::FloatPoint"* %43 to i64*
  %45 = zext i32 %25 to i64
  %46 = shl nuw i64 %45, 32
  %47 = zext i32 %22 to i64
  %48 = or i64 %46, %47
  store i64 %48, i64* %44, align 4
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad13IsRectilinearEv(%"class.blink::FloatQuad"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  %5 = load float, float* %4, align 4
  %6 = fsub float %3, %5
  %7 = tail call float @llvm.fabs.f32(float %6) #10
  %8 = fcmp olt float %7, 0x3E80000000000000
  %9 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 1
  %10 = load float, float* %9, align 4
  br i1 %8, label %11, label %33

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 1
  %13 = load float, float* %12, align 4
  %14 = fsub float %10, %13
  %15 = tail call float @llvm.fabs.f32(float %14) #10
  %16 = fcmp olt float %15, 0x3E80000000000000
  br i1 %16, label %17, label %33

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  %21 = load float, float* %20, align 4
  %22 = fsub float %19, %21
  %23 = tail call float @llvm.fabs.f32(float %22) #10
  %24 = fcmp olt float %23, 0x3E80000000000000
  br i1 %24, label %25, label %33

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 1
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = fsub float %27, %29
  %31 = tail call float @llvm.fabs.f32(float %30) #10
  %32 = fcmp olt float %31, 0x3E80000000000000
  br i1 %32, label %59, label %33

33:                                               ; preds = %1, %25, %17, %11
  %34 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = fsub float %35, %10
  %37 = tail call float @llvm.fabs.f32(float %36) #10
  %38 = fcmp olt float %37, 0x3E80000000000000
  br i1 %38, label %39, label %59

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %41 = load float, float* %40, align 4
  %42 = fsub float %5, %41
  %43 = tail call float @llvm.fabs.f32(float %42) #10
  %44 = fcmp olt float %43, 0x3E80000000000000
  br i1 %44, label %45, label %59

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 1
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 1
  %49 = load float, float* %48, align 4
  %50 = fsub float %47, %49
  %51 = tail call float @llvm.fabs.f32(float %50) #10
  %52 = fcmp olt float %51, 0x3E80000000000000
  br i1 %52, label %53, label %59

53:                                               ; preds = %45
  %54 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  %55 = load float, float* %54, align 4
  %56 = fsub float %55, %3
  %57 = tail call float @llvm.fabs.f32(float %56) #10
  %58 = fcmp olt float %57, 0x3E80000000000000
  br label %59

59:                                               ; preds = %33, %39, %45, %53, %25
  %60 = phi i1 [ true, %25 ], [ false, %45 ], [ false, %39 ], [ false, %33 ], [ %58, %53 ]
  ret i1 %60
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad13ContainsPointERKNS_10FloatPointE(%"class.blink::FloatQuad"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %4 = bitcast float* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.blink::FloatQuad"* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  %10 = bitcast float* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fsub <2 x float> %11, %7
  %13 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = extractelement <2 x float> %7, i32 0
  %16 = fsub float %14, %15
  %17 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %1, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = extractelement <2 x float> %7, i32 1
  %20 = fsub float %18, %19
  %21 = fmul <2 x float> %8, %12
  %22 = extractelement <2 x float> %21, i32 0
  %23 = extractelement <2 x float> %21, i32 1
  %24 = fadd float %22, %23
  %25 = shufflevector <2 x float> %8, <2 x float> undef, <2 x i32> zeroinitializer
  %26 = insertelement <2 x float> %8, float %16, i32 1
  %27 = fmul <2 x float> %25, %26
  %28 = shufflevector <2 x float> %8, <2 x float> undef, <2 x i32> <i32 1, i32 undef>
  %29 = shufflevector <2 x float> %8, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %30 = insertelement <2 x float> %28, float %20, i32 1
  %31 = fmul <2 x float> %29, %30
  %32 = fadd <2 x float> %27, %31
  %33 = shufflevector <2 x float> %12, <2 x float> undef, <2 x i32> zeroinitializer
  %34 = insertelement <2 x float> undef, float %16, i32 0
  %35 = shufflevector <2 x float> %34, <2 x float> %12, <2 x i32> <i32 0, i32 2>
  %36 = fmul <2 x float> %33, %35
  %37 = shufflevector <2 x float> %12, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %38 = insertelement <2 x float> %12, float %20, i32 0
  %39 = fmul <2 x float> %37, %38
  %40 = fadd <2 x float> %36, %39
  %41 = extractelement <2 x float> %32, i32 0
  %42 = extractelement <2 x float> %40, i32 1
  %43 = fmul float %41, %42
  %44 = fmul float %24, %24
  %45 = fsub float %43, %44
  %46 = fdiv float 1.000000e+00, %45
  %47 = fmul <2 x float> %32, %40
  %48 = insertelement <2 x float> undef, float %24, i32 0
  %49 = shufflevector <2 x float> %48, <2 x float> undef, <2 x i32> zeroinitializer
  %50 = shufflevector <2 x float> %32, <2 x float> undef, <2 x i32> <i32 1, i32 undef>
  %51 = shufflevector <2 x float> %50, <2 x float> %40, <2 x i32> <i32 0, i32 2>
  %52 = fmul <2 x float> %49, %51
  %53 = fsub <2 x float> %47, %52
  %54 = insertelement <2 x float> undef, float %46, i32 0
  %55 = shufflevector <2 x float> %54, <2 x float> undef, <2 x i32> zeroinitializer
  %56 = fmul <2 x float> %55, %53
  %57 = extractelement <2 x float> %56, i32 1
  %58 = fcmp oge float %57, 0.000000e+00
  %59 = extractelement <2 x float> %56, i32 0
  %60 = fcmp oge float %59, 0.000000e+00
  %61 = and i1 %58, %60
  %62 = fadd float %57, %59
  %63 = fcmp ole float %62, 1.000000e+00
  %64 = and i1 %61, %63
  br i1 %64, label %104, label %65

65:                                               ; preds = %2
  %66 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  %67 = bitcast float* %66 to <2 x float>*
  %68 = load <2 x float>, <2 x float>* %67, align 4
  %69 = fsub <2 x float> %68, %7
  %70 = fmul <2 x float> %8, %69
  %71 = extractelement <2 x float> %70, i32 0
  %72 = extractelement <2 x float> %70, i32 1
  %73 = fadd float %71, %72
  %74 = shufflevector <2 x float> %34, <2 x float> %69, <2 x i32> <i32 0, i32 2>
  %75 = shufflevector <2 x float> %69, <2 x float> undef, <2 x i32> zeroinitializer
  %76 = fmul <2 x float> %74, %75
  %77 = insertelement <2 x float> %69, float %20, i32 0
  %78 = shufflevector <2 x float> %69, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %79 = fmul <2 x float> %77, %78
  %80 = fadd <2 x float> %76, %79
  %81 = extractelement <2 x float> %80, i32 1
  %82 = fmul float %41, %81
  %83 = fmul float %73, %73
  %84 = fsub float %82, %83
  %85 = fdiv float 1.000000e+00, %84
  %86 = fmul <2 x float> %32, %80
  %87 = insertelement <2 x float> %50, float %73, i32 1
  %88 = insertelement <2 x float> undef, float %73, i32 0
  %89 = shufflevector <2 x float> %88, <2 x float> %80, <2 x i32> <i32 0, i32 2>
  %90 = fmul <2 x float> %87, %89
  %91 = fsub <2 x float> %86, %90
  %92 = insertelement <2 x float> undef, float %85, i32 0
  %93 = shufflevector <2 x float> %92, <2 x float> undef, <2 x i32> zeroinitializer
  %94 = fmul <2 x float> %91, %93
  %95 = fcmp oge <2 x float> %94, zeroinitializer
  %96 = extractelement <2 x i1> %95, i32 0
  %97 = extractelement <2 x i1> %95, i32 1
  %98 = and i1 %96, %97
  br i1 %98, label %99, label %104

99:                                               ; preds = %65
  %100 = extractelement <2 x float> %94, i32 0
  %101 = extractelement <2 x float> %94, i32 1
  %102 = fadd float %100, %101
  %103 = fcmp ole float %102, 1.000000e+00
  br label %104

104:                                              ; preds = %2, %99, %65
  %105 = phi i1 [ false, %65 ], [ %103, %99 ], [ true, %2 ]
  ret i1 %105
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad12ContainsQuadERKS0_(%"class.blink::FloatQuad"* nocapture readonly, %"class.blink::FloatQuad"* nocapture readonly dereferenceable(32)) local_unnamed_addr #4 align 2 {
  %3 = alloca <2 x float>, align 8
  %4 = bitcast <2 x float>* %3 to %"class.blink::FloatPoint"*
  %5 = alloca <2 x float>, align 8
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %"class.blink::FloatPoint"*
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %"class.blink::FloatPoint"*
  %10 = bitcast <2 x float>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = bitcast %"class.blink::FloatQuad"* %1 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = bitcast <2 x float>* %3 to i64*
  store i64 %12, i64* %13, align 8
  %14 = call zeroext i1 @_ZNK5blink9FloatQuad13ContainsPointERKNS_10FloatPointE(%"class.blink::FloatQuad"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %4)
  %15 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  %16 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  br i1 %14, label %18, label %37

18:                                               ; preds = %2
  %19 = bitcast <2 x float>* %5 to %"class.blink::FloatPoint"*
  %20 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %1, i64 0, i32 1
  %21 = bitcast %"class.blink::FloatPoint"* %20 to i64*
  %22 = load i64, i64* %21, align 4
  %23 = bitcast <2 x float>* %5 to i64*
  store i64 %22, i64* %23, align 8
  %24 = call zeroext i1 @_ZNK5blink9FloatQuad13ContainsPointERKNS_10FloatPointE(%"class.blink::FloatQuad"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %19)
  br i1 %24, label %25, label %37

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %1, i64 0, i32 2
  %27 = bitcast %"class.blink::FloatPoint"* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = bitcast <2 x float>* %6 to i64*
  store i64 %28, i64* %29, align 8
  %30 = call zeroext i1 @_ZNK5blink9FloatQuad13ContainsPointERKNS_10FloatPointE(%"class.blink::FloatQuad"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %7)
  br i1 %30, label %31, label %37

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %1, i64 0, i32 3
  %33 = bitcast %"class.blink::FloatPoint"* %32 to i64*
  %34 = load i64, i64* %33, align 4
  %35 = bitcast <2 x float>* %8 to i64*
  store i64 %34, i64* %35, align 8
  %36 = call zeroext i1 @_ZNK5blink9FloatQuad13ContainsPointERKNS_10FloatPointE(%"class.blink::FloatQuad"* %0, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %9)
  br label %37

37:                                               ; preds = %31, %25, %18, %2
  %38 = phi i1 [ false, %25 ], [ false, %18 ], [ false, %2 ], [ %36, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  ret i1 %38
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad14IntersectsRectERKNS_9FloatRectE(%"class.blink::FloatQuad"* nocapture readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  %4 = bitcast float* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.blink::FloatQuad"* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %10 = bitcast float* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fsub <2 x float> %11, %5
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %14 = fmul <2 x float> %8, %13
  %15 = extractelement <2 x float> %14, i32 0
  %16 = extractelement <2 x float> %14, i32 1
  %17 = fsub float %15, %16
  %18 = fcmp olt float %17, 0.000000e+00
  %19 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  br i1 %18, label %24, label %22

22:                                               ; preds = %2
  %23 = fsub <2 x float> %7, %21
  br label %28

24:                                               ; preds = %2
  %25 = fsub <2 x float> %21, %7
  %26 = fsub <2 x float> %7, %5
  %27 = fsub <2 x float> %11, %21
  br label %28

28:                                               ; preds = %24, %22
  %29 = phi <2 x float> [ %5, %24 ], [ %21, %22 ]
  %30 = phi <2 x float> [ %26, %24 ], [ %12, %22 ]
  %31 = phi <2 x float> [ %25, %24 ], [ %8, %22 ]
  %32 = phi <2 x float> [ %21, %24 ], [ %21, %22 ]
  %33 = phi <2 x float> [ %27, %24 ], [ %23, %22 ]
  %34 = fsub <2 x float> %29, %11
  %35 = shufflevector <2 x float> %31, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %36 = extractelement <2 x float> %31, i32 0
  %37 = fcmp ult float %36, 0.000000e+00
  %38 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %41 = load float, float* %40, align 4
  %42 = fadd float %39, %41
  %43 = select i1 %37, float %39, float %42
  %44 = insertelement <2 x float> undef, float %43, i32 1
  %45 = extractelement <2 x float> %31, i32 1
  %46 = fcmp ult float %45, 0.000000e+00
  %47 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %50 = load float, float* %49, align 4
  %51 = fadd float %48, %50
  %52 = select i1 %46, float %51, float %48
  %53 = insertelement <2 x float> %44, float %52, i32 0
  %54 = fsub <2 x float> %53, %7
  %55 = fmul <2 x float> %35, %54
  %56 = extractelement <2 x float> %55, i32 0
  %57 = extractelement <2 x float> %55, i32 1
  %58 = fsub float %57, %56
  %59 = fcmp olt float %58, 0.000000e+00
  br i1 %59, label %126, label %60

60:                                               ; preds = %28
  %61 = shufflevector <2 x float> %30, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %62 = extractelement <2 x float> %30, i32 0
  %63 = fcmp ult float %62, 0.000000e+00
  %64 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %65 = load float, float* %64, align 4
  %66 = fadd float %39, %65
  %67 = select i1 %63, float %39, float %66
  %68 = insertelement <2 x float> undef, float %67, i32 1
  %69 = extractelement <2 x float> %30, i32 1
  %70 = fcmp ult float %69, 0.000000e+00
  %71 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %72 = load float, float* %71, align 4
  %73 = fadd float %48, %72
  %74 = select i1 %70, float %73, float %48
  %75 = insertelement <2 x float> %68, float %74, i32 0
  %76 = fsub <2 x float> %75, %5
  %77 = fmul <2 x float> %61, %76
  %78 = extractelement <2 x float> %77, i32 0
  %79 = extractelement <2 x float> %77, i32 1
  %80 = fsub float %79, %78
  %81 = fcmp olt float %80, 0.000000e+00
  br i1 %81, label %126, label %82

82:                                               ; preds = %60
  %83 = shufflevector <2 x float> %34, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %84 = extractelement <2 x float> %34, i32 0
  %85 = fcmp ult float %84, 0.000000e+00
  %86 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %87 = load float, float* %86, align 4
  %88 = fadd float %39, %87
  %89 = select i1 %85, float %39, float %88
  %90 = insertelement <2 x float> undef, float %89, i32 1
  %91 = extractelement <2 x float> %34, i32 1
  %92 = fcmp ult float %91, 0.000000e+00
  %93 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %94 = load float, float* %93, align 4
  %95 = fadd float %48, %94
  %96 = select i1 %92, float %95, float %48
  %97 = insertelement <2 x float> %90, float %96, i32 0
  %98 = fsub <2 x float> %97, %11
  %99 = fmul <2 x float> %83, %98
  %100 = extractelement <2 x float> %99, i32 0
  %101 = extractelement <2 x float> %99, i32 1
  %102 = fsub float %101, %100
  %103 = fcmp olt float %102, 0.000000e+00
  br i1 %103, label %126, label %104

104:                                              ; preds = %82
  %105 = shufflevector <2 x float> %33, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %106 = extractelement <2 x float> %33, i32 0
  %107 = fcmp ult float %106, 0.000000e+00
  %108 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %109 = load float, float* %108, align 4
  %110 = fadd float %39, %109
  %111 = select i1 %107, float %39, float %110
  %112 = insertelement <2 x float> undef, float %111, i32 1
  %113 = extractelement <2 x float> %33, i32 1
  %114 = fcmp ult float %113, 0.000000e+00
  %115 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %116 = load float, float* %115, align 4
  %117 = fadd float %48, %116
  %118 = select i1 %114, float %117, float %48
  %119 = insertelement <2 x float> %112, float %118, i32 0
  %120 = fsub <2 x float> %119, %32
  %121 = fmul <2 x float> %105, %120
  %122 = extractelement <2 x float> %121, i32 0
  %123 = extractelement <2 x float> %121, i32 1
  %124 = fsub float %123, %122
  %125 = fcmp uge float %124, 0.000000e+00
  br label %126

126:                                              ; preds = %104, %82, %60, %28
  %127 = phi i1 [ false, %28 ], [ false, %60 ], [ false, %82 ], [ %125, %104 ]
  ret i1 %127
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad18IsCounterclockwiseEv(%"class.blink::FloatQuad"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %"class.blink::FloatQuad"* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fsub <2 x float> %4, %6
  %8 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %9 = bitcast float* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fsub <2 x float> %10, %4
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %13 = fmul <2 x float> %7, %12
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  %16 = fsub float %14, %15
  %17 = fcmp olt float %16, 0.000000e+00
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad16IntersectsCircleERKNS_10FloatPointEf(%"class.blink::FloatQuad"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), float) local_unnamed_addr #5 align 2 {
  %4 = tail call zeroext i1 @_ZNK5blink9FloatQuad13ContainsPointERKNS_10FloatPointE(%"class.blink::FloatQuad"* %0, %"class.blink::FloatPoint"* dereferenceable(8) %1)
  br i1 %4, label %230, label %5

5:                                                ; preds = %3
  %6 = bitcast %"class.blink::FloatQuad"* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fsub <2 x float> %7, %9
  %11 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1, i32 0
  %12 = bitcast float* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fsub <2 x float> %13, %9
  %15 = fmul float %2, %2
  %16 = fmul <2 x float> %10, %10
  %17 = extractelement <2 x float> %16, i32 0
  %18 = extractelement <2 x float> %16, i32 1
  %19 = fadd float %17, %18
  %20 = fcmp ugt float %19, %15
  br i1 %20, label %21, label %230

21:                                               ; preds = %5
  %22 = fmul <2 x float> %14, %14
  %23 = extractelement <2 x float> %22, i32 0
  %24 = extractelement <2 x float> %22, i32 1
  %25 = fadd float %23, %24
  %26 = fcmp ugt float %25, %15
  br i1 %26, label %27, label %230

27:                                               ; preds = %21
  %28 = extractelement <2 x float> %7, i32 0
  %29 = extractelement <2 x float> %13, i32 0
  %30 = fcmp oeq float %28, %29
  %31 = extractelement <2 x float> %7, i32 1
  %32 = extractelement <2 x float> %13, i32 1
  %33 = fcmp oeq float %31, %32
  %34 = and i1 %30, %33
  br i1 %34, label %75, label %35

35:                                               ; preds = %27
  %36 = extractelement <2 x float> %10, i32 1
  %37 = extractelement <2 x float> %14, i32 1
  %38 = fsub float %36, %37
  %39 = extractelement <2 x float> %10, i32 0
  %40 = extractelement <2 x float> %14, i32 0
  %41 = fsub float %40, %39
  %42 = shufflevector <2 x float> %14, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %43 = fmul <2 x float> %10, %42
  %44 = extractelement <2 x float> %43, i32 0
  %45 = extractelement <2 x float> %43, i32 1
  %46 = fsub float %44, %45
  %47 = fmul float %46, %46
  %48 = fmul float %38, %38
  %49 = fmul float %41, %41
  %50 = fadd float %49, %48
  %51 = fdiv float %47, %50
  %52 = fcmp ogt float %51, %15
  br i1 %52, label %75, label %53

53:                                               ; preds = %35
  %54 = fmul float %38, %46
  %55 = fsub float -0.000000e+00, %54
  %56 = fdiv float %55, %50
  %57 = fmul float %41, %46
  %58 = fsub float -0.000000e+00, %57
  %59 = fdiv float %58, %50
  %60 = fcmp ugt float %39, %56
  %61 = fcmp ugt float %56, %40
  %62 = or i1 %60, %61
  br i1 %62, label %63, label %67

63:                                               ; preds = %53
  %64 = fcmp ult float %39, %56
  %65 = fcmp ult float %56, %40
  %66 = or i1 %64, %65
  br i1 %66, label %75, label %67

67:                                               ; preds = %63, %53
  %68 = fcmp ugt float %36, %59
  %69 = fcmp ugt float %59, %37
  %70 = or i1 %68, %69
  br i1 %70, label %71, label %230

71:                                               ; preds = %67
  %72 = fcmp ole float %37, %59
  %73 = fcmp ole float %59, %36
  %74 = and i1 %72, %73
  br i1 %74, label %230, label %75

75:                                               ; preds = %35, %63, %27, %71
  %76 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2, i32 0
  %77 = bitcast float* %76 to <2 x float>*
  %78 = load <2 x float>, <2 x float>* %77, align 4
  %79 = fsub <2 x float> %78, %9
  %80 = fmul <2 x float> %79, %79
  %81 = extractelement <2 x float> %80, i32 0
  %82 = extractelement <2 x float> %80, i32 1
  %83 = fadd float %81, %82
  %84 = fcmp ugt float %83, %15
  br i1 %84, label %85, label %230

85:                                               ; preds = %75
  %86 = extractelement <2 x float> %78, i32 0
  %87 = fcmp oeq float %29, %86
  %88 = extractelement <2 x float> %78, i32 1
  %89 = fcmp oeq float %32, %88
  %90 = and i1 %87, %89
  br i1 %90, label %131, label %91

91:                                               ; preds = %85
  %92 = extractelement <2 x float> %79, i32 1
  %93 = extractelement <2 x float> %14, i32 1
  %94 = fsub float %93, %92
  %95 = extractelement <2 x float> %79, i32 0
  %96 = extractelement <2 x float> %14, i32 0
  %97 = fsub float %95, %96
  %98 = shufflevector <2 x float> %79, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %99 = fmul <2 x float> %14, %98
  %100 = extractelement <2 x float> %99, i32 0
  %101 = extractelement <2 x float> %99, i32 1
  %102 = fsub float %100, %101
  %103 = fmul float %102, %102
  %104 = fmul float %94, %94
  %105 = fmul float %97, %97
  %106 = fadd float %105, %104
  %107 = fdiv float %103, %106
  %108 = fcmp ogt float %107, %15
  br i1 %108, label %131, label %109

109:                                              ; preds = %91
  %110 = fmul float %94, %102
  %111 = fsub float -0.000000e+00, %110
  %112 = fdiv float %111, %106
  %113 = fmul float %97, %102
  %114 = fsub float -0.000000e+00, %113
  %115 = fdiv float %114, %106
  %116 = fcmp ugt float %96, %112
  %117 = fcmp ugt float %112, %95
  %118 = or i1 %116, %117
  br i1 %118, label %119, label %123

119:                                              ; preds = %109
  %120 = fcmp ult float %96, %112
  %121 = fcmp ult float %112, %95
  %122 = or i1 %120, %121
  br i1 %122, label %131, label %123

123:                                              ; preds = %119, %109
  %124 = fcmp ugt float %93, %115
  %125 = fcmp ugt float %115, %92
  %126 = or i1 %124, %125
  br i1 %126, label %127, label %230

127:                                              ; preds = %123
  %128 = fcmp ole float %92, %115
  %129 = fcmp ole float %115, %93
  %130 = and i1 %128, %129
  br i1 %130, label %230, label %131

131:                                              ; preds = %91, %119, %85, %127
  %132 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3, i32 0
  %133 = bitcast float* %132 to <2 x float>*
  %134 = load <2 x float>, <2 x float>* %133, align 4
  %135 = fsub <2 x float> %134, %9
  %136 = shufflevector <2 x float> %135, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %137 = fmul <2 x float> %135, %135
  %138 = extractelement <2 x float> %137, i32 1
  %139 = extractelement <2 x float> %137, i32 0
  %140 = fadd float %139, %138
  %141 = fcmp ugt float %140, %15
  br i1 %141, label %142, label %230

142:                                              ; preds = %131
  %143 = extractelement <2 x float> %134, i32 0
  %144 = fcmp oeq float %86, %143
  %145 = extractelement <2 x float> %134, i32 1
  %146 = fcmp oeq float %88, %145
  %147 = and i1 %144, %146
  br i1 %147, label %187, label %148

148:                                              ; preds = %142
  %149 = extractelement <2 x float> %135, i32 1
  %150 = extractelement <2 x float> %79, i32 1
  %151 = fsub float %150, %149
  %152 = extractelement <2 x float> %135, i32 0
  %153 = extractelement <2 x float> %79, i32 0
  %154 = fsub float %152, %153
  %155 = fmul <2 x float> %79, %136
  %156 = extractelement <2 x float> %155, i32 0
  %157 = extractelement <2 x float> %155, i32 1
  %158 = fsub float %156, %157
  %159 = fmul float %158, %158
  %160 = fmul float %151, %151
  %161 = fmul float %154, %154
  %162 = fadd float %161, %160
  %163 = fdiv float %159, %162
  %164 = fcmp ogt float %163, %15
  br i1 %164, label %187, label %165

165:                                              ; preds = %148
  %166 = fmul float %151, %158
  %167 = fsub float -0.000000e+00, %166
  %168 = fdiv float %167, %162
  %169 = fmul float %154, %158
  %170 = fsub float -0.000000e+00, %169
  %171 = fdiv float %170, %162
  %172 = fcmp ugt float %153, %168
  %173 = fcmp ugt float %168, %152
  %174 = or i1 %172, %173
  br i1 %174, label %175, label %179

175:                                              ; preds = %165
  %176 = fcmp ult float %153, %168
  %177 = fcmp ult float %168, %152
  %178 = or i1 %176, %177
  br i1 %178, label %187, label %179

179:                                              ; preds = %175, %165
  %180 = fcmp ugt float %150, %171
  %181 = fcmp ugt float %171, %149
  %182 = or i1 %180, %181
  br i1 %182, label %183, label %230

183:                                              ; preds = %179
  %184 = fcmp ole float %149, %171
  %185 = fcmp ole float %171, %150
  %186 = and i1 %184, %185
  br i1 %186, label %230, label %187

187:                                              ; preds = %148, %175, %142, %183
  %188 = fcmp oeq float %143, %28
  %189 = fcmp oeq float %145, %31
  %190 = and i1 %188, %189
  br i1 %190, label %230, label %191

191:                                              ; preds = %187
  %192 = extractelement <2 x float> %10, i32 1
  %193 = extractelement <2 x float> %135, i32 1
  %194 = fsub float %193, %192
  %195 = extractelement <2 x float> %10, i32 0
  %196 = extractelement <2 x float> %135, i32 0
  %197 = fsub float %195, %196
  %198 = fmul <2 x float> %10, %136
  %199 = extractelement <2 x float> %198, i32 0
  %200 = extractelement <2 x float> %198, i32 1
  %201 = fsub float %200, %199
  %202 = fmul float %201, %201
  %203 = fmul float %194, %194
  %204 = fmul float %197, %197
  %205 = fadd float %204, %203
  %206 = fdiv float %202, %205
  %207 = fcmp ogt float %206, %15
  br i1 %207, label %230, label %208

208:                                              ; preds = %191
  %209 = fmul float %194, %201
  %210 = fsub float -0.000000e+00, %209
  %211 = fdiv float %210, %205
  %212 = fmul float %197, %201
  %213 = fsub float -0.000000e+00, %212
  %214 = fdiv float %213, %205
  %215 = fcmp ugt float %196, %211
  %216 = fcmp ugt float %211, %195
  %217 = or i1 %215, %216
  br i1 %217, label %218, label %222

218:                                              ; preds = %208
  %219 = fcmp ult float %196, %211
  %220 = fcmp ult float %211, %195
  %221 = or i1 %219, %220
  br i1 %221, label %230, label %222

222:                                              ; preds = %218, %208
  %223 = fcmp ugt float %193, %214
  %224 = fcmp ugt float %214, %192
  %225 = or i1 %223, %224
  br i1 %225, label %226, label %230

226:                                              ; preds = %222
  %227 = fcmp ugt float %192, %214
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp ole float %214, %193
  br label %230

230:                                              ; preds = %183, %127, %71, %179, %131, %123, %75, %67, %5, %21, %228, %226, %222, %218, %191, %187, %3
  %231 = phi i1 [ true, %3 ], [ false, %191 ], [ false, %218 ], [ false, %226 ], [ %229, %228 ], [ true, %222 ], [ false, %187 ], [ true, %21 ], [ true, %5 ], [ true, %67 ], [ true, %75 ], [ true, %123 ], [ true, %131 ], [ true, %179 ], [ true, %71 ], [ true, %127 ], [ true, %183 ]
  ret i1 %231
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink9FloatQuad17IntersectsEllipseERKNS_10FloatPointERKNS_9FloatSizeE(%"class.blink::FloatQuad"* nocapture readonly, %"class.blink::FloatPoint"* nocapture readonly dereferenceable(8), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::FloatQuad", align 16
  %5 = alloca %"class.blink::FloatPoint", align 4
  %6 = bitcast %"class.blink::FloatQuad"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %4, i64 0, i32 2, i32 0
  %8 = bitcast %"class.blink::FloatQuad"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %6, i8* align 4 %8, i64 32, i1 false)
  %9 = bitcast %"class.blink::FloatPoint"* %1 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = shufflevector <2 x float> %10, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %12 = bitcast %"class.blink::FloatQuad"* %4 to <4 x float>*
  %13 = load <4 x float>, <4 x float>* %12, align 16
  %14 = fsub <4 x float> %13, %11
  %15 = bitcast float* %7 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 16
  %17 = shufflevector <2 x float> %10, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %18 = fsub <4 x float> %16, %17
  %19 = bitcast %"class.blink::FloatSize"* %2 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = shufflevector <2 x float> %20, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %22 = shufflevector <2 x float> %21, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %23 = fmul <4 x float> %14, %22
  %24 = bitcast %"class.blink::FloatQuad"* %4 to <4 x float>*
  store <4 x float> %23, <4 x float>* %24, align 16
  %25 = extractelement <2 x float> %20, i32 1
  %26 = extractelement <2 x float> %20, i32 0
  %27 = shufflevector <2 x float> %20, <2 x float> undef, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %28 = fmul <4 x float> %18, %27
  %29 = bitcast float* %7 to <4 x float>*
  store <4 x float> %28, <4 x float>* %29, align 16
  %30 = bitcast %"class.blink::FloatPoint"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #10
  %31 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %5, i64 0, i32 0
  %32 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %5, i64 0, i32 1
  store float 0.000000e+00, float* %31, align 4
  store float 0.000000e+00, float* %32, align 4
  %33 = fmul float %25, %26
  %34 = call zeroext i1 @_ZNK5blink9FloatQuad16IntersectsCircleERKNS_10FloatPointEf(%"class.blink::FloatQuad"* nonnull %4, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %5, float %33)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret i1 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_9FloatQuadE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::FloatQuad"* dereferenceable(32)) local_unnamed_addr #2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9FloatQuad8ToStringEv(%"class.blink::FloatQuad"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #10
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #10
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink9FloatQuad8ToStringEv(%"class.blink::FloatQuad"*) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #10
  %11 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 0
  %13 = tail call %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"* %12) #10
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"** %14, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #10
  %15 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = select i1 %18, i8* %20, i8* %10
  %22 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #10
  %23 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #10
  %24 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 1
  %25 = call %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"* %24) #10
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %25, %"class.WTF::StringImpl"** %26, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.WTF::String"* nonnull %5) #10
  %27 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = select i1 %30, i8* %32, i8* %22
  %34 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #10
  %35 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 2
  %37 = call %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"* %36) #10
  %38 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* nonnull %7) #10
  %39 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = select i1 %42, i8* %44, i8* %34
  %46 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #10
  %47 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #10
  %48 = getelementptr inbounds %"class.blink::FloatQuad", %"class.blink::FloatQuad"* %0, i64 0, i32 3
  %49 = call %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"* %48) #10
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"** %50, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.WTF::String"* nonnull %9) #10
  %51 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = select i1 %54, i8* %56, i8* %46
  %58 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %21, i8* %33, i8* %45, i8* %57) #10
  %59 = load i8, i8* %52, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %1
  %62 = load i8*, i8** %55, align 8
  call void @_ZdlPv(i8* %62) #11
  br label %63

63:                                               ; preds = %1, %61
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #10
  br label %79

79:                                               ; preds = %63, %75, %78
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #10
  %80 = load i8, i8* %40, align 1
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %79
  %83 = load i8*, i8** %43, align 8
  call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %79, %82
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %86 = icmp eq %"class.WTF::StringImpl"* %85, null
  br i1 %86, label %100, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  br i1 %91, label %94, label %96

94:                                               ; preds = %87
  %95 = add i32 %93, -1
  store i32 %95, i32* %92, align 4
  br label %96

96:                                               ; preds = %94, %87
  %97 = phi i32 [ %95, %94 ], [ %93, %87 ]
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %96
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %85) #10
  br label %100

100:                                              ; preds = %84, %96, %99
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #10
  %101 = load i8, i8* %28, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  %104 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %104) #11
  br label %105

105:                                              ; preds = %100, %103
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %121, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  br i1 %112, label %115, label %117

115:                                              ; preds = %108
  %116 = add i32 %114, -1
  store i32 %116, i32* %113, align 4
  br label %117

117:                                              ; preds = %115, %108
  %118 = phi i32 [ %116, %115 ], [ %114, %108 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #10
  br label %121

121:                                              ; preds = %105, %117, %120
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #10
  %122 = load i8, i8* %16, align 1
  %123 = icmp slt i8 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %121
  %125 = load i8*, i8** %19, align 8
  call void @_ZdlPv(i8* %125) #11
  br label %126

126:                                              ; preds = %121, %124
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %142, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  br i1 %133, label %136, label %138

136:                                              ; preds = %129
  %137 = add i32 %135, -1
  store i32 %137, i32* %134, align 4
  br label %138

138:                                              ; preds = %136, %129
  %139 = phi i32 [ %137, %136 ], [ %135, %129 ]
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %127) #10
  br label %142

142:                                              ; preds = %126, %138, %141
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #10
  ret %"class.WTF::StringImpl"* %58
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #6

declare %"class.WTF::StringImpl"* @_ZNK5blink10FloatPoint8ToStringEv(%"class.blink::FloatPoint"*) local_unnamed_addr #6

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
