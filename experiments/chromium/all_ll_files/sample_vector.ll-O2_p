; ModuleID = '../../base/metrics/sample_vector.cc'
source_filename = "../../base/metrics/sample_vector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::LazyInstance" = type { i64, [40 x i8] }
%"class.base::SampleVectorBase" = type { %"class.base::HistogramSamples", %"struct.std::__1::atomic", %"class.base::BucketRanges"* }
%"class.base::HistogramSamples" = type { i32 (...)**, %"struct.base::HistogramSamples::Metadata"* }
%"struct.base::HistogramSamples::Metadata" = type { i64, i64, i32, %"union.base::HistogramSamples::AtomicSingleSample" }
%"union.base::HistogramSamples::AtomicSingleSample" = type { i32 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32* }
%"class.base::BucketRanges" = type { %"class.std::__1::vector", i32, %"struct.std::__1::atomic.1" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"class.base::SampleVector" = type { %"class.base::SampleVectorBase", %"class.std::__1::vector" }
%"class.base::PersistentSampleVector" = type { %"class.base::SampleVectorBase", %"class.base::DelayedPersistentAllocation" }
%"class.base::DelayedPersistentAllocation" = type { %"class.base::PersistentMemoryAllocator"*, i32, i32, i32, i8, %"struct.std::__1::atomic.30"* }
%"class.base::PersistentMemoryAllocator" = type { i32 (...)**, i8*, i32, i32, i32, i64, i8, %"struct.std::__1::atomic.26", %"class.base::HistogramBase"*, %"class.base::HistogramBase"*, %"class.base::HistogramBase"* }
%"struct.std::__1::atomic.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__cxx_atomic_impl.28" }
%"struct.std::__1::__cxx_atomic_impl.28" = type { %"struct.std::__1::__cxx_atomic_base_impl.29" }
%"struct.std::__1::__cxx_atomic_base_impl.29" = type { i8 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.30", [4 x i8] }>
%"struct.std::__1::atomic.30" = type { %"struct.std::__1::__atomic_base.31" }
%"struct.std::__1::__atomic_base.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl.33" }
%"struct.std::__1::__cxx_atomic_impl.33" = type { %"struct.std::__1::__cxx_atomic_base_impl.34" }
%"struct.std::__1::__cxx_atomic_base_impl.34" = type { i32 }
%"class.base::SampleVectorIterator" = type { %"class.base::SampleCountIterator", i32*, i64, %"class.base::BucketRanges"*, i64 }
%"class.base::SampleCountIterator" = type { i32 (...)** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::SingleSampleIterator" = type <{ %"class.base::SampleCountIterator", i32, [4 x i8], i64, i64, i32, [4 x i8] }>
%"struct.base::HistogramSamples::LocalMetadata" = type { %"struct.base::HistogramSamples::Metadata" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::PickleIterator" = type opaque
%"class.base::Pickle" = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

@_ZTVN4base16SampleVectorBaseE = hidden unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SampleVectorBase"*)* @_ZN4base16SampleVectorBaseD2Ev to i8*), i8* bitcast (void (%"class.base::SampleVectorBase"*)* @_ZN4base16SampleVectorBaseD0Ev to i8*), i8* bitcast (void (%"class.base::SampleVectorBase"*, i32, i32)* @_ZN4base16SampleVectorBase10AccumulateEii to i8*), i8* bitcast (i32 (%"class.base::SampleVectorBase"*, i32)* @_ZNK4base16SampleVectorBase8GetCountEi to i8*), i8* bitcast (i32 (%"class.base::SampleVectorBase"*)* @_ZNK4base16SampleVectorBase10TotalCountEv to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples3AddERKS0_ to i8*), i8* bitcast (i1 (%"class.base::HistogramSamples"*, %"class.base::PickleIterator"*)* @_ZN4base16HistogramSamples13AddFromPickleEPNS_14PickleIteratorE to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples8SubtractERKS0_ to i8*), i8* bitcast (%"class.base::SampleCountIterator"* (%"class.base::SampleVectorBase"*)* @_ZNK4base16SampleVectorBase8IteratorEv to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::Pickle"*)* @_ZNK4base16HistogramSamples9SerializeEPNS_6PickleE to i8*), i8* bitcast (i1 (%"class.base::SampleVectorBase"*, %"class.base::SampleCountIterator"*, i32)* @_ZN4base16SampleVectorBase15AddSubtractImplEPNS_19SampleCountIteratorENS_16HistogramSamples8OperatorE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)* @_ZNK4base16HistogramSamples12GetAsciiBodyEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)* @_ZNK4base16HistogramSamples14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi to i8*), i8* bitcast (i64 (%"class.base::SampleVectorBase"*, i32)* @_ZNK4base16SampleVectorBase14GetBucketIndexEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [37 x i8] c"bucket_ranges_->bucket_count() >= 1u\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"../../base/metrics/sample_vector.cc\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"bucket_count >= 1u\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"value >= bucket_ranges_->range(0)\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"value < bucket_ranges_->range(bucket_count)\00", align 1
@.str.5 = private unnamed_addr constant [39 x i8] c"bucket_ranges_->range(mid + 1) > value\00", align 1
@_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock = internal global %"class.base::LazyInstance" zeroinitializer, align 8
@_ZTVN4base12SampleVectorE = hidden unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SampleVector"*)* @_ZN4base12SampleVectorD2Ev to i8*), i8* bitcast (void (%"class.base::SampleVector"*)* @_ZN4base12SampleVectorD0Ev to i8*), i8* bitcast (void (%"class.base::SampleVectorBase"*, i32, i32)* @_ZN4base16SampleVectorBase10AccumulateEii to i8*), i8* bitcast (i32 (%"class.base::SampleVectorBase"*, i32)* @_ZNK4base16SampleVectorBase8GetCountEi to i8*), i8* bitcast (i32 (%"class.base::SampleVectorBase"*)* @_ZNK4base16SampleVectorBase10TotalCountEv to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples3AddERKS0_ to i8*), i8* bitcast (i1 (%"class.base::HistogramSamples"*, %"class.base::PickleIterator"*)* @_ZN4base16HistogramSamples13AddFromPickleEPNS_14PickleIteratorE to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples8SubtractERKS0_ to i8*), i8* bitcast (%"class.base::SampleCountIterator"* (%"class.base::SampleVectorBase"*)* @_ZNK4base16SampleVectorBase8IteratorEv to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::Pickle"*)* @_ZNK4base16HistogramSamples9SerializeEPNS_6PickleE to i8*), i8* bitcast (i1 (%"class.base::SampleVectorBase"*, %"class.base::SampleCountIterator"*, i32)* @_ZN4base16SampleVectorBase15AddSubtractImplEPNS_19SampleCountIteratorENS_16HistogramSamples8OperatorE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::SampleVector"*)* @_ZNK4base12SampleVector12GetAsciiBodyEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::SampleVector"*, i8*, i64, i32)* @_ZNK4base12SampleVector14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi to i8*), i8* bitcast (i64 (%"class.base::SampleVectorBase"*, i32)* @_ZNK4base16SampleVectorBase14GetBucketIndexEi to i8*), i8* bitcast (i1 (%"class.base::SampleVector"*)* @_ZNK4base12SampleVector26MountExistingCountsStorageEv to i8*), i8* bitcast (i32* (%"class.base::SampleVector"*)* @_ZN4base12SampleVector30CreateCountsStorageWhileLockedEv to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [36 x i8] c"Histogram: %.*s recorded %d samples\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c", mean = %.1f\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c" (flags = 0x%x)\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"... \0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c" {%3.1f%%}\00", align 1
@_ZTVN4base22PersistentSampleVectorE = hidden unnamed_addr constant { [18 x i8*] } { [18 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::PersistentSampleVector"*)* @_ZN4base22PersistentSampleVectorD2Ev to i8*), i8* bitcast (void (%"class.base::PersistentSampleVector"*)* @_ZN4base22PersistentSampleVectorD0Ev to i8*), i8* bitcast (void (%"class.base::SampleVectorBase"*, i32, i32)* @_ZN4base16SampleVectorBase10AccumulateEii to i8*), i8* bitcast (i32 (%"class.base::SampleVectorBase"*, i32)* @_ZNK4base16SampleVectorBase8GetCountEi to i8*), i8* bitcast (i32 (%"class.base::SampleVectorBase"*)* @_ZNK4base16SampleVectorBase10TotalCountEv to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples3AddERKS0_ to i8*), i8* bitcast (i1 (%"class.base::HistogramSamples"*, %"class.base::PickleIterator"*)* @_ZN4base16HistogramSamples13AddFromPickleEPNS_14PickleIteratorE to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"*)* @_ZN4base16HistogramSamples8SubtractERKS0_ to i8*), i8* bitcast (%"class.base::SampleCountIterator"* (%"class.base::SampleVectorBase"*)* @_ZNK4base16SampleVectorBase8IteratorEv to i8*), i8* bitcast (void (%"class.base::HistogramSamples"*, %"class.base::Pickle"*)* @_ZNK4base16HistogramSamples9SerializeEPNS_6PickleE to i8*), i8* bitcast (i1 (%"class.base::SampleVectorBase"*, %"class.base::SampleCountIterator"*, i32)* @_ZN4base16SampleVectorBase15AddSubtractImplEPNS_19SampleCountIteratorENS_16HistogramSamples8OperatorE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*)* @_ZNK4base16HistogramSamples12GetAsciiBodyEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.base::HistogramSamples"*, i8*, i64, i32)* @_ZNK4base16HistogramSamples14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi to i8*), i8* bitcast (i64 (%"class.base::SampleVectorBase"*, i32)* @_ZNK4base16SampleVectorBase14GetBucketIndexEi to i8*), i8* bitcast (i1 (%"class.base::PersistentSampleVector"*)* @_ZNK4base22PersistentSampleVector26MountExistingCountsStorageEv to i8*), i8* bitcast (i32* (%"class.base::PersistentSampleVector"*)* @_ZN4base22PersistentSampleVector30CreateCountsStorageWhileLockedEv to i8*)] }, align 8
@_ZTVN4base20SampleVectorIteratorE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::SampleVectorIterator"*)* @_ZN4base20SampleVectorIteratorD2Ev to i8*), i8* bitcast (void (%"class.base::SampleVectorIterator"*)* @_ZN4base20SampleVectorIteratorD0Ev to i8*), i8* bitcast (i1 (%"class.base::SampleVectorIterator"*)* @_ZNK4base20SampleVectorIterator4DoneEv to i8*), i8* bitcast (void (%"class.base::SampleVectorIterator"*)* @_ZN4base20SampleVectorIterator4NextEv to i8*), i8* bitcast (void (%"class.base::SampleVectorIterator"*, i32*, i64*, i32*)* @_ZNK4base20SampleVectorIterator3GetEPiPlS1_ to i8*), i8* bitcast (i1 (%"class.base::SampleVectorIterator"*, i64*)* @_ZNK4base20SampleVectorIterator14GetBucketIndexEPm to i8*)] }, align 8

@_ZN4base16SampleVectorBaseD1Ev = hidden unnamed_addr alias void (%"class.base::SampleVectorBase"*), void (%"class.base::SampleVectorBase"*)* @_ZN4base16SampleVectorBaseD2Ev
@_ZN4base12SampleVectorC1EPKNS_12BucketRangesE = hidden unnamed_addr alias void (%"class.base::SampleVector"*, %"class.base::BucketRanges"*), void (%"class.base::SampleVector"*, %"class.base::BucketRanges"*)* @_ZN4base12SampleVectorC2EPKNS_12BucketRangesE
@_ZN4base12SampleVectorC1EmPKNS_12BucketRangesE = hidden unnamed_addr alias void (%"class.base::SampleVector"*, i64, %"class.base::BucketRanges"*), void (%"class.base::SampleVector"*, i64, %"class.base::BucketRanges"*)* @_ZN4base12SampleVectorC2EmPKNS_12BucketRangesE
@_ZN4base12SampleVectorD1Ev = hidden unnamed_addr alias void (%"class.base::SampleVector"*), void (%"class.base::SampleVector"*)* @_ZN4base12SampleVectorD2Ev
@_ZN4base22PersistentSampleVectorC1EmPKNS_12BucketRangesEPNS_16HistogramSamples8MetadataERKNS_27DelayedPersistentAllocationE = hidden unnamed_addr alias void (%"class.base::PersistentSampleVector"*, i64, %"class.base::BucketRanges"*, %"struct.base::HistogramSamples::Metadata"*, %"class.base::DelayedPersistentAllocation"*), void (%"class.base::PersistentSampleVector"*, i64, %"class.base::BucketRanges"*, %"struct.base::HistogramSamples::Metadata"*, %"class.base::DelayedPersistentAllocation"*)* @_ZN4base22PersistentSampleVectorC2EmPKNS_12BucketRangesEPNS_16HistogramSamples8MetadataERKNS_27DelayedPersistentAllocationE
@_ZN4base22PersistentSampleVectorD1Ev = hidden unnamed_addr alias void (%"class.base::PersistentSampleVector"*), void (%"class.base::PersistentSampleVector"*)* @_ZN4base22PersistentSampleVectorD2Ev
@_ZN4base20SampleVectorIteratorC1EPKNSt3__16vectorIiNS1_9allocatorIiEEEEPKNS_12BucketRangesE = hidden unnamed_addr alias void (%"class.base::SampleVectorIterator"*, %"class.std::__1::vector"*, %"class.base::BucketRanges"*), void (%"class.base::SampleVectorIterator"*, %"class.std::__1::vector"*, %"class.base::BucketRanges"*)* @_ZN4base20SampleVectorIteratorC2EPKNSt3__16vectorIiNS1_9allocatorIiEEEEPKNS_12BucketRangesE
@_ZN4base20SampleVectorIteratorC1EPKimPKNS_12BucketRangesE = hidden unnamed_addr alias void (%"class.base::SampleVectorIterator"*, i32*, i64, %"class.base::BucketRanges"*), void (%"class.base::SampleVectorIterator"*, i32*, i64, %"class.base::BucketRanges"*)* @_ZN4base20SampleVectorIteratorC2EPKimPKNS_12BucketRangesE
@_ZN4base20SampleVectorIteratorD1Ev = hidden unnamed_addr alias void (%"class.base::SampleVectorIterator"*), void (%"class.base::SampleVectorIterator"*)* @_ZN4base20SampleVectorIteratorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16SampleVectorBaseC2EmPNS_16HistogramSamples8MetadataEPKNS_12BucketRangesE(%"class.base::SampleVectorBase"*, i64, %"struct.base::HistogramSamples::Metadata"*, %"class.base::BucketRanges"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0
  tail call void @_ZN4base16HistogramSamplesC2EmPNS0_8MetadataE(%"class.base::HistogramSamples"* %8, i64 %1, %"struct.base::HistogramSamples::Metadata"* %2) #13
  %9 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base16SampleVectorBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i32* null, i32** %10, align 8
  %11 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  store %"class.base::BucketRanges"* %3, %"class.base::BucketRanges"** %11, align 8
  %12 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %13, align 8
  %14 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %3, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.base::BucketRanges"* %3 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20)
  %21 = icmp eq i64 %19, 4
  br i1 %21, label %23, label %22

22:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  store i8* null, i8** %13, align 8
  br label %32

23:                                               ; preds = %4
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #13
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 1) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %24, i8* %25) #13
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  store i8* %27, i8** %13, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 32, %"class.logging::CheckOpResult"* nonnull %6) #13
  %31 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #13
  br label %32

32:                                               ; preds = %22, %23, %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  ret void
}

declare void @_ZN4base16HistogramSamplesC2EmPNS0_8MetadataE(%"class.base::HistogramSamples"*, i64, %"struct.base::HistogramSamples::Metadata"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16SampleVectorBaseD2Ev(%"class.base::SampleVectorBase"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0
  tail call void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"* %2) #13
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN4base16SampleVectorBaseD0Ev(%"class.base::SampleVectorBase"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16SampleVectorBase10AccumulateEii(%"class.base::SampleVectorBase"*, i32, i32) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.base::SampleVectorBase"* %0 to i64 (%"class.base::SampleVectorBase"*, i32)***
  %5 = load i64 (%"class.base::SampleVectorBase"*, i32)**, i64 (%"class.base::SampleVectorBase"*, i32)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %5, i64 13
  %7 = load i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %6, align 8
  %8 = tail call i64 %7(%"class.base::SampleVectorBase"* %0, i32 %1) #13
  %9 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %10 = bitcast %"struct.std::__1::__atomic_base"* %9 to i64*
  %11 = load atomic i64, i64* %10 acquire, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %34

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0
  %15 = tail call zeroext i1 @_ZN4base16HistogramSamples22AccumulateSingleSampleEiim(%"class.base::HistogramSamples"* %14, i32 %1, i32 %2, i64 %8) #13
  br i1 %15, label %16, label %33

16:                                               ; preds = %13
  %17 = load atomic i64, i64* %10 acquire, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %49, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %21 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %20, align 8
  %22 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %21, i64 0, i32 3
  %23 = tail call i32 @_ZN4base16HistogramSamples18AtomicSingleSample7ExtractEb(%"union.base::HistogramSamples::AtomicSingleSample"* %22, i1 zeroext true) #13
  %24 = lshr i32 %23, 16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %49, label %26

26:                                               ; preds = %19
  %27 = load atomic i64, i64* %10 acquire, align 8
  %28 = inttoptr i64 %27 to i32*
  %29 = and i32 %23, 65535
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i32, i32* %28, i64 %30
  %32 = atomicrmw volatile add i32* %31, i32 %24 monotonic
  br label %49

33:                                               ; preds = %13
  tail call void @_ZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEv(%"class.base::SampleVectorBase"* %0)
  br label %34

34:                                               ; preds = %3, %33
  %35 = load atomic i64, i64* %10 acquire, align 8
  %36 = inttoptr i64 %35 to i32*
  %37 = getelementptr inbounds i32, i32* %36, i64 %8
  %38 = atomicrmw volatile add i32* %37, i32 %2 monotonic
  %39 = add nsw i32 %38, %2
  %40 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0
  %41 = sext i32 %2 to i64
  %42 = sext i32 %1 to i64
  %43 = mul nsw i64 %41, %42
  tail call void @_ZN4base16HistogramSamples19IncreaseSumAndCountEli(%"class.base::HistogramSamples"* %40, i64 %43, i32 %2) #13
  %44 = xor i32 %39, %38
  %45 = icmp slt i32 %44, 0
  %46 = icmp sgt i32 %2, 0
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %49

48:                                               ; preds = %34
  tail call void @_ZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEi(%"class.base::HistogramSamples"* %40, i32 8, i32 %2) #13
  br label %49

49:                                               ; preds = %26, %19, %34, %48, %16
  ret void
}

declare zeroext i1 @_ZN4base16HistogramSamples22AccumulateSingleSampleEiim(%"class.base::HistogramSamples"*, i32, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16SampleVectorBase24MoveSingleSampleToCountsEv(%"class.base::SampleVectorBase"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %3, i64 0, i32 3
  %5 = tail call i32 @_ZN4base16HistogramSamples18AtomicSingleSample7ExtractEb(%"union.base::HistogramSamples::AtomicSingleSample"* %4, i1 zeroext true) #13
  %6 = lshr i32 %5, 16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %10 = bitcast %"struct.std::__1::__atomic_base"* %9 to i64*
  %11 = load atomic i64, i64* %10 acquire, align 8
  %12 = inttoptr i64 %11 to i32*
  %13 = and i32 %5, 65535
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %12, i64 %14
  %16 = atomicrmw volatile add i32* %15, i32 %6 monotonic
  br label %17

17:                                               ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEv(%"class.base::SampleVectorBase"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %3 = bitcast %"struct.std::__1::__atomic_base"* %2 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %34

6:                                                ; preds = %1
  %7 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 0) acquire, align 8
  %8 = icmp ugt i64 %7, 1
  br i1 %8, label %14, label %9

9:                                                ; preds = %6
  %10 = tail call zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 0)) #13
  br i1 %10, label %11, label %12

11:                                               ; preds = %9
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* bitcast (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 1, i64 0) to %"class.base::internal::LockImpl"*)) #13
  tail call void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 0), i64 ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 1, i64 0) to i64), void (i8*)* null, i8* bitcast (%"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock to i8*)) #13
  br label %14

12:                                               ; preds = %9
  %13 = load atomic i64, i64* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 0) acquire, align 8
  br label %14

14:                                               ; preds = %6, %11, %12
  %15 = phi i64 [ %7, %6 ], [ ptrtoint (i8* getelementptr inbounds (%"class.base::LazyInstance", %"class.base::LazyInstance"* @_ZZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEvE11counts_lock, i64 0, i32 1, i64 0) to i64), %11 ], [ %13, %12 ]
  %16 = inttoptr i64 %15 to %"class.base::Lock"*
  %17 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %16, i64 0, i32 0, i32 0
  %18 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %17) #13
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %22, label %20, !prof !2

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.base::Lock", %"class.base::Lock"* %16, i64 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %21) #13
  br label %22

22:                                               ; preds = %14, %20
  %23 = load atomic i64, i64* %3 monotonic, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %22
  %26 = bitcast %"class.base::SampleVectorBase"* %0 to i32* (%"class.base::SampleVectorBase"*)***
  %27 = load i32* (%"class.base::SampleVectorBase"*)**, i32* (%"class.base::SampleVectorBase"*)*** %26, align 8
  %28 = getelementptr inbounds i32* (%"class.base::SampleVectorBase"*)*, i32* (%"class.base::SampleVectorBase"*)** %27, i64 15
  %29 = load i32* (%"class.base::SampleVectorBase"*)*, i32* (%"class.base::SampleVectorBase"*)** %28, align 8
  %30 = tail call i32* %29(%"class.base::SampleVectorBase"* %0) #13
  %31 = ptrtoint i32* %30 to i64
  store atomic i64 %31, i64* %3 release, align 8
  br label %32

32:                                               ; preds = %22, %25
  %33 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %17) #13
  br label %34

34:                                               ; preds = %1, %32
  %35 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %36 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %35, align 8
  %37 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %36, i64 0, i32 3
  %38 = tail call i32 @_ZN4base16HistogramSamples18AtomicSingleSample7ExtractEb(%"union.base::HistogramSamples::AtomicSingleSample"* %37, i1 zeroext true) #13
  %39 = lshr i32 %38, 16
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %34
  %42 = load atomic i64, i64* %3 acquire, align 8
  %43 = inttoptr i64 %42 to i32*
  %44 = and i32 %38, 65535
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %43, i64 %45
  %47 = atomicrmw volatile add i32* %46, i32 %39 monotonic
  br label %48

48:                                               ; preds = %34, %41
  ret void
}

declare void @_ZN4base16HistogramSamples19IncreaseSumAndCountEli(%"class.base::HistogramSamples"*, i64, i32) local_unnamed_addr #1

declare void @_ZN4base16HistogramSamples20RecordNegativeSampleENS0_20NegativeSampleReasonEi(%"class.base::HistogramSamples"*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4base16SampleVectorBase8GetCountEi(%"class.base::SampleVectorBase"*, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.base::SampleVectorBase"* %0 to i64 (%"class.base::SampleVectorBase"*, i32)***
  %4 = load i64 (%"class.base::SampleVectorBase"*, i32)**, i64 (%"class.base::SampleVectorBase"*, i32)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %4, i64 13
  %6 = load i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %5, align 8
  %7 = tail call i64 %6(%"class.base::SampleVectorBase"* %0, i32 %1) #13
  %8 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %9 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %8, align 8
  %10 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %9, i64 0, i32 3
  %11 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %10) #13
  %12 = lshr i32 %11, 16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = and i32 %11, 65535
  %16 = zext i32 %15 to i64
  %17 = icmp eq i64 %7, %16
  %18 = select i1 %17, i32 %12, i32 0
  br label %35

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %21 = bitcast %"struct.std::__1::__atomic_base"* %20 to i64*
  %22 = load atomic i64, i64* %21 acquire, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %30

24:                                               ; preds = %19
  %25 = bitcast %"class.base::SampleVectorBase"* %0 to i1 (%"class.base::SampleVectorBase"*)***
  %26 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %25, align 8
  %27 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %26, i64 14
  %28 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %27, align 8
  %29 = tail call zeroext i1 %28(%"class.base::SampleVectorBase"* %0) #13
  br i1 %29, label %30, label %35

30:                                               ; preds = %24, %19
  %31 = load atomic i64, i64* %21 acquire, align 8
  %32 = inttoptr i64 %31 to i32*
  %33 = getelementptr inbounds i32, i32* %32, i64 %7
  %34 = load atomic i32, i32* %33 monotonic, align 4
  br label %35

35:                                               ; preds = %14, %24, %30
  %36 = phi i32 [ %18, %14 ], [ %34, %30 ], [ 0, %24 ]
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4base16SampleVectorBase15GetCountAtIndexEm(%"class.base::SampleVectorBase"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %4 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %3, align 8
  %5 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %4, i64 0, i32 3
  %6 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %5) #13
  %7 = lshr i32 %6, 16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = and i32 %6, 65535
  %11 = zext i32 %10 to i64
  %12 = icmp eq i64 %11, %1
  %13 = select i1 %12, i32 %7, i32 0
  br label %30

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %16 = bitcast %"struct.std::__1::__atomic_base"* %15 to i64*
  %17 = load atomic i64, i64* %16 acquire, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %14
  %20 = bitcast %"class.base::SampleVectorBase"* %0 to i1 (%"class.base::SampleVectorBase"*)***
  %21 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %21, i64 14
  %23 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.base::SampleVectorBase"* %0) #13
  br i1 %24, label %25, label %30

25:                                               ; preds = %14, %19
  %26 = load atomic i64, i64* %16 acquire, align 8
  %27 = inttoptr i64 %26 to i32*
  %28 = getelementptr inbounds i32, i32* %27, i64 %1
  %29 = load atomic i32, i32* %28 monotonic, align 4
  br label %30

30:                                               ; preds = %19, %25, %9
  %31 = phi i32 [ %13, %9 ], [ %29, %25 ], [ 0, %19 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK4base16SampleVectorBase10TotalCountEv(%"class.base::SampleVectorBase"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %3, i64 0, i32 3
  %5 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %4) #13
  %6 = lshr i32 %5, 16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %92

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %10 = bitcast %"struct.std::__1::__atomic_base"* %9 to i64*
  %11 = load atomic i64, i64* %10 acquire, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %8
  %14 = bitcast %"class.base::SampleVectorBase"* %0 to i1 (%"class.base::SampleVectorBase"*)***
  %15 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %15, i64 14
  %17 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.base::SampleVectorBase"* %0) #13
  br i1 %18, label %19, label %92

19:                                               ; preds = %8, %13
  %20 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  %21 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %20, align 8
  %22 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %21, i64 0, i32 0, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.base::BucketRanges"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = ashr exact i64 %27, 2
  %29 = add nsw i64 %28, -1
  %30 = load atomic i64, i64* %10 acquire, align 8
  %31 = inttoptr i64 %30 to i32*
  %32 = icmp eq i64 %29, 0
  br i1 %32, label %92, label %33

33:                                               ; preds = %19
  %34 = add nsw i64 %28, -2
  %35 = and i64 %29, 7
  %36 = icmp ult i64 %34, 7
  br i1 %36, label %77, label %37

37:                                               ; preds = %33
  %38 = sub nsw i64 %29, %35
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %74, %39 ]
  %41 = phi i32 [ 0, %37 ], [ %73, %39 ]
  %42 = phi i64 [ %38, %37 ], [ %75, %39 ]
  %43 = getelementptr inbounds i32, i32* %31, i64 %40
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = add nsw i32 %44, %41
  %46 = or i64 %40, 1
  %47 = getelementptr inbounds i32, i32* %31, i64 %46
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = add nsw i32 %48, %45
  %50 = or i64 %40, 2
  %51 = getelementptr inbounds i32, i32* %31, i64 %50
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = add nsw i32 %52, %49
  %54 = or i64 %40, 3
  %55 = getelementptr inbounds i32, i32* %31, i64 %54
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = add nsw i32 %56, %53
  %58 = or i64 %40, 4
  %59 = getelementptr inbounds i32, i32* %31, i64 %58
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = add nsw i32 %60, %57
  %62 = or i64 %40, 5
  %63 = getelementptr inbounds i32, i32* %31, i64 %62
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = add nsw i32 %64, %61
  %66 = or i64 %40, 6
  %67 = getelementptr inbounds i32, i32* %31, i64 %66
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = add nsw i32 %68, %65
  %70 = or i64 %40, 7
  %71 = getelementptr inbounds i32, i32* %31, i64 %70
  %72 = load atomic i32, i32* %71 monotonic, align 4
  %73 = add nsw i32 %72, %69
  %74 = add nuw i64 %40, 8
  %75 = add i64 %42, -8
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %39

77:                                               ; preds = %39, %33
  %78 = phi i32 [ undef, %33 ], [ %73, %39 ]
  %79 = phi i64 [ 0, %33 ], [ %74, %39 ]
  %80 = phi i32 [ 0, %33 ], [ %73, %39 ]
  %81 = icmp eq i64 %35, 0
  br i1 %81, label %92, label %82

82:                                               ; preds = %77, %82
  %83 = phi i64 [ %89, %82 ], [ %79, %77 ]
  %84 = phi i32 [ %88, %82 ], [ %80, %77 ]
  %85 = phi i64 [ %90, %82 ], [ %35, %77 ]
  %86 = getelementptr inbounds i32, i32* %31, i64 %83
  %87 = load atomic i32, i32* %86 monotonic, align 4
  %88 = add nsw i32 %87, %84
  %89 = add nuw i64 %83, 1
  %90 = add i64 %85, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %82, !llvm.loop !3

92:                                               ; preds = %77, %82, %19, %13, %1
  %93 = phi i32 [ %6, %1 ], [ 0, %13 ], [ 0, %19 ], [ %78, %77 ], [ %88, %82 ]
  ret i32 %93
}

declare i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SampleCountIterator"* @_ZNK4base16SampleVectorBase8IteratorEv(%"class.base::SampleVectorBase"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %2, align 8
  %4 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %3, i64 0, i32 3
  %5 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %4) #13
  %6 = lshr i32 %5, 16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %23, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  %10 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %9, align 8
  %11 = and i32 %5, 65535
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %10, i64 0, i32 0, i32 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds i32, i32* %14, i64 %12
  %16 = load i32, i32* %15, align 4
  %17 = add nuw nsw i64 %12, 1
  %18 = getelementptr inbounds i32, i32* %14, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = tail call i8* @_Znwm(i64 40) #15
  %21 = bitcast i8* %20 to %"class.base::SingleSampleIterator"*
  %22 = sext i32 %19 to i64
  tail call void @_ZN4base20SingleSampleIteratorC1Eilim(%"class.base::SingleSampleIterator"* nonnull %21, i32 %16, i64 %22, i32 %6, i64 %12) #13
  br label %78

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %25 = bitcast %"struct.std::__1::__atomic_base"* %24 to i64*
  %26 = load atomic i64, i64* %25 acquire, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %23
  %29 = bitcast %"class.base::SampleVectorBase"* %0 to i1 (%"class.base::SampleVectorBase"*)***
  %30 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %29, align 8
  %31 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %30, i64 14
  %32 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %31, align 8
  %33 = tail call zeroext i1 %32(%"class.base::SampleVectorBase"* %0) #13
  br i1 %33, label %34, label %67

34:                                               ; preds = %23, %28
  %35 = load atomic i64, i64* %25 acquire, align 8
  %36 = inttoptr i64 %35 to i32*
  %37 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  %38 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %37, align 8
  %39 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %38, i64 0, i32 0, i32 0, i32 1
  %40 = bitcast i32** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.base::BucketRanges"* %38 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %41, %43
  %45 = ashr exact i64 %44, 2
  %46 = add nsw i64 %45, -1
  %47 = tail call i8* @_Znwm(i64 40) #15
  %48 = ptrtoint %"class.base::BucketRanges"* %38 to i64
  %49 = bitcast i8* %47 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base20SampleVectorIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  %50 = getelementptr inbounds i8, i8* %47, i64 8
  %51 = bitcast i8* %50 to i32**
  store i32* %36, i32** %51, align 8
  %52 = getelementptr inbounds i8, i8* %47, i64 16
  %53 = bitcast i8* %52 to i64*
  store i64 %46, i64* %53, align 8
  %54 = getelementptr inbounds i8, i8* %47, i64 24
  %55 = bitcast i8* %54 to i64*
  store i64 %48, i64* %55, align 8
  %56 = getelementptr inbounds i8, i8* %47, i64 32
  %57 = bitcast i8* %56 to i64*
  store i64 0, i64* %57, align 8
  %58 = icmp eq i64 %46, 0
  br i1 %58, label %78, label %59

59:                                               ; preds = %34, %64
  %60 = phi i64 [ %65, %64 ], [ 0, %34 ]
  %61 = getelementptr inbounds i32, i32* %36, i64 %60
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %78

64:                                               ; preds = %59
  %65 = add nuw i64 %60, 1
  store i64 %65, i64* %57, align 8
  %66 = icmp eq i64 %65, %46
  br i1 %66, label %78, label %59

67:                                               ; preds = %28
  %68 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  %69 = tail call i8* @_Znwm(i64 40) #15
  %70 = bitcast %"class.base::BucketRanges"** %68 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast i8* %69 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base20SampleVectorIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %72, align 8
  %73 = getelementptr inbounds i8, i8* %69, i64 8
  %74 = getelementptr inbounds i8, i8* %69, i64 24
  %75 = bitcast i8* %74 to i64*
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 16, i1 false)
  store i64 %71, i64* %75, align 8
  %76 = getelementptr inbounds i8, i8* %69, i64 32
  %77 = bitcast i8* %76 to i64*
  store i64 0, i64* %77, align 8
  br label %78

78:                                               ; preds = %59, %64, %34, %67, %8
  %79 = phi i8* [ %69, %67 ], [ %20, %8 ], [ %47, %34 ], [ %47, %64 ], [ %47, %59 ]
  %80 = bitcast i8* %79 to %"class.base::SampleCountIterator"*
  ret %"class.base::SampleCountIterator"* %80
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base16SampleVectorBase15AddSubtractImplEPNS_19SampleCountIteratorENS_16HistogramSamples8OperatorE(%"class.base::SampleVectorBase"*, %"class.base::SampleCountIterator"*, i32) unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = bitcast %"class.base::SampleCountIterator"* %1 to i1 (%"class.base::SampleCountIterator"*)***
  %9 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %9, i64 2
  %11 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.base::SampleCountIterator"* %1) #13
  br i1 %12, label %160, label %13

13:                                               ; preds = %3
  %14 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #13
  store i32 -1431655766, i32* %4, align 4
  %15 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  store i64 -6148914691236517206, i64* %5, align 8
  %16 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #13
  store i32 -1431655766, i32* %6, align 4
  %17 = bitcast %"class.base::SampleCountIterator"* %1 to void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)***
  %18 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)**, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %18, i64 4
  %20 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %19, align 8
  call void %20(%"class.base::SampleCountIterator"* %1, i32* nonnull %4, i64* nonnull %5, i32* nonnull %6) #13
  %21 = load i32, i32* %4, align 4
  %22 = bitcast %"class.base::SampleVectorBase"* %0 to i64 (%"class.base::SampleVectorBase"*, i32)***
  %23 = load i64 (%"class.base::SampleVectorBase"*, i32)**, i64 (%"class.base::SampleVectorBase"*, i32)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %23, i64 13
  %25 = load i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %24, align 8
  %26 = call i64 %25(%"class.base::SampleVectorBase"* %0, i32 %21) #13
  %27 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #13
  store i64 -6148914691236517206, i64* %7, align 8
  %28 = bitcast %"class.base::SampleCountIterator"* %1 to i1 (%"class.base::SampleCountIterator"*, i64*)***
  %29 = load i1 (%"class.base::SampleCountIterator"*, i64*)**, i1 (%"class.base::SampleCountIterator"*, i64*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*, i64*)*, i1 (%"class.base::SampleCountIterator"*, i64*)** %29, i64 5
  %31 = load i1 (%"class.base::SampleCountIterator"*, i64*)*, i1 (%"class.base::SampleCountIterator"*, i64*)** %30, align 8
  %32 = call zeroext i1 %31(%"class.base::SampleCountIterator"* %1, i64* nonnull %7) #13
  %33 = load i64, i64* %7, align 8
  %34 = sub i64 %26, %33
  %35 = select i1 %32, i64 %34, i64 0
  %36 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  %37 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %36, align 8
  %38 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %37, i64 0, i32 0, i32 0, i32 1
  %39 = bitcast i32** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.base::BucketRanges"* %37 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = ashr exact i64 %43, 2
  %45 = add nsw i64 %44, -1
  %46 = icmp ult i64 %26, %45
  br i1 %46, label %47, label %158

47:                                               ; preds = %13
  %48 = bitcast %"class.base::SampleCountIterator"* %1 to void (%"class.base::SampleCountIterator"*)***
  %49 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %49, i64 3
  %51 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %50, align 8
  call void %51(%"class.base::SampleCountIterator"* %1) #13
  %52 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 1, i32 0
  %53 = bitcast %"struct.std::__1::__atomic_base"* %52 to i64*
  %54 = load atomic i64, i64* %53 acquire, align 8
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %87

56:                                               ; preds = %47
  %57 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %8, align 8
  %58 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %57, i64 2
  %59 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %58, align 8
  %60 = call zeroext i1 %59(%"class.base::SampleCountIterator"* %1) #13
  br i1 %60, label %61, label %86

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 0, i32 1
  %63 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %62, align 8
  %64 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %63, i64 0, i32 3
  %65 = icmp eq i32 %2, 0
  %66 = load i32, i32* %6, align 4
  %67 = sub nsw i32 0, %66
  %68 = select i1 %65, i32 %66, i32 %67
  %69 = call zeroext i1 @_ZN4base16HistogramSamples18AtomicSingleSample10AccumulateEmi(%"union.base::HistogramSamples::AtomicSingleSample"* %64, i64 %26, i32 %68) #13
  br i1 %69, label %70, label %86

70:                                               ; preds = %61
  %71 = load atomic i64, i64* %53 acquire, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %158, label %73

73:                                               ; preds = %70
  %74 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %62, align 8
  %75 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %74, i64 0, i32 3
  %76 = call i32 @_ZN4base16HistogramSamples18AtomicSingleSample7ExtractEb(%"union.base::HistogramSamples::AtomicSingleSample"* %75, i1 zeroext true) #13
  %77 = lshr i32 %76, 16
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %158, label %79

79:                                               ; preds = %73
  %80 = load atomic i64, i64* %53 acquire, align 8
  %81 = inttoptr i64 %80 to i32*
  %82 = and i32 %76, 65535
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %81, i64 %83
  %85 = atomicrmw volatile add i32* %84, i32 %77 monotonic
  br label %158

86:                                               ; preds = %61, %56
  call void @_ZN4base16SampleVectorBase37MountCountsStorageAndMoveSingleSampleEv(%"class.base::SampleVectorBase"* %0)
  br label %87

87:                                               ; preds = %47, %86
  %88 = load i32, i32* %4, align 4
  %89 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %36, align 8
  %90 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %89, i64 0, i32 0, i32 0, i32 0
  %91 = load i32*, i32** %90, align 8
  %92 = getelementptr inbounds i32, i32* %91, i64 %26
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %88, %93
  br i1 %94, label %95, label %158

95:                                               ; preds = %87
  %96 = icmp eq i32 %2, 0
  br label %97

97:                                               ; preds = %95, %147
  %98 = phi i32* [ %91, %95 ], [ %154, %147 ]
  %99 = phi i64 [ %26, %95 ], [ %136, %147 ]
  %100 = load i64, i64* %5, align 8
  %101 = add nuw i64 %99, 1
  %102 = getelementptr inbounds i32, i32* %98, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = sext i32 %103 to i64
  %105 = icmp eq i64 %100, %104
  br i1 %105, label %106, label %158

106:                                              ; preds = %97
  %107 = load atomic i64, i64* %53 acquire, align 8
  %108 = inttoptr i64 %107 to i32*
  %109 = getelementptr inbounds i32, i32* %108, i64 %99
  %110 = load i32, i32* %6, align 4
  %111 = sub nsw i32 0, %110
  %112 = select i1 %96, i32 %110, i32 %111
  %113 = atomicrmw volatile add i32* %109, i32 %112 monotonic
  %114 = load i1 (%"class.base::SampleCountIterator"*)**, i1 (%"class.base::SampleCountIterator"*)*** %8, align 8
  %115 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %114, i64 2
  %116 = load i1 (%"class.base::SampleCountIterator"*)*, i1 (%"class.base::SampleCountIterator"*)** %115, align 8
  %117 = call zeroext i1 %116(%"class.base::SampleCountIterator"* %1) #13
  br i1 %117, label %158, label %118

118:                                              ; preds = %106
  %119 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)**, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*** %17, align 8
  %120 = getelementptr inbounds void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %119, i64 4
  %121 = load void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)*, void (%"class.base::SampleCountIterator"*, i32*, i64*, i32*)** %120, align 8
  call void %121(%"class.base::SampleCountIterator"* %1, i32* nonnull %4, i64* nonnull %5, i32* nonnull %6) #13
  %122 = load i1 (%"class.base::SampleCountIterator"*, i64*)**, i1 (%"class.base::SampleCountIterator"*, i64*)*** %28, align 8
  %123 = getelementptr inbounds i1 (%"class.base::SampleCountIterator"*, i64*)*, i1 (%"class.base::SampleCountIterator"*, i64*)** %122, i64 5
  %124 = load i1 (%"class.base::SampleCountIterator"*, i64*)*, i1 (%"class.base::SampleCountIterator"*, i64*)** %123, align 8
  %125 = call zeroext i1 %124(%"class.base::SampleCountIterator"* %1, i64* nonnull %7) #13
  br i1 %125, label %126, label %129

126:                                              ; preds = %118
  %127 = load i64, i64* %7, align 8
  %128 = add i64 %127, %35
  br label %135

129:                                              ; preds = %118
  %130 = load i32, i32* %4, align 4
  %131 = load i64 (%"class.base::SampleVectorBase"*, i32)**, i64 (%"class.base::SampleVectorBase"*, i32)*** %22, align 8
  %132 = getelementptr inbounds i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %131, i64 13
  %133 = load i64 (%"class.base::SampleVectorBase"*, i32)*, i64 (%"class.base::SampleVectorBase"*, i32)** %132, align 8
  %134 = call i64 %133(%"class.base::SampleVectorBase"* %0, i32 %130) #13
  br label %135

135:                                              ; preds = %129, %126
  %136 = phi i64 [ %128, %126 ], [ %134, %129 ]
  %137 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %36, align 8
  %138 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %137, i64 0, i32 0, i32 0, i32 1
  %139 = bitcast i32** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %"class.base::BucketRanges"* %137 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = sub i64 %140, %142
  %144 = ashr exact i64 %143, 2
  %145 = add nsw i64 %144, -1
  %146 = icmp ult i64 %136, %145
  br i1 %146, label %147, label %158

147:                                              ; preds = %135
  %148 = load void (%"class.base::SampleCountIterator"*)**, void (%"class.base::SampleCountIterator"*)*** %48, align 8
  %149 = getelementptr inbounds void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %148, i64 3
  %150 = load void (%"class.base::SampleCountIterator"*)*, void (%"class.base::SampleCountIterator"*)** %149, align 8
  call void %150(%"class.base::SampleCountIterator"* %1) #13
  %151 = load i32, i32* %4, align 4
  %152 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %36, align 8
  %153 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %152, i64 0, i32 0, i32 0, i32 0
  %154 = load i32*, i32** %153, align 8
  %155 = getelementptr inbounds i32, i32* %154, i64 %136
  %156 = load i32, i32* %155, align 4
  %157 = icmp eq i32 %151, %156
  br i1 %157, label %97, label %158

158:                                              ; preds = %97, %147, %106, %135, %87, %79, %73, %70, %13
  %159 = phi i1 [ false, %13 ], [ true, %70 ], [ true, %73 ], [ true, %79 ], [ false, %87 ], [ false, %97 ], [ false, %147 ], [ true, %106 ], [ false, %135 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #13
  br label %160

160:                                              ; preds = %3, %158
  %161 = phi i1 [ %159, %158 ], [ true, %3 ]
  ret i1 %161
}

declare zeroext i1 @_ZN4base16HistogramSamples18AtomicSingleSample10AccumulateEmi(%"union.base::HistogramSamples::AtomicSingleSample"*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base16SampleVectorBase14GetBucketIndexEi(%"class.base::SampleVectorBase"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = alloca %"class.logging::CheckOpResult", align 8
  %14 = alloca %"class.logging::CheckError", align 8
  %15 = getelementptr inbounds %"class.base::SampleVectorBase", %"class.base::SampleVectorBase"* %0, i64 0, i32 2
  %16 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %15, align 8
  %17 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %16, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.base::BucketRanges"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = ashr exact i64 %22, 2
  %24 = add nsw i64 %23, -1
  %25 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #13
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp eq i64 %24, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %26, align 8
  br label %39

30:                                               ; preds = %2
  %31 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #13
  %32 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 1) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %31, i8* %32) #13
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %26, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 222, %"class.logging::CheckOpResult"* nonnull %7) #13
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #13
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #13
  %40 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %15, align 8
  %43 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load i32*, i32** %43, align 8
  %45 = load i32, i32* %44, align 4
  %46 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46)
  %47 = icmp sgt i32 %45, %1
  br i1 %47, label %49, label %48

48:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46)
  store i8* null, i8** %41, align 8
  br label %58

49:                                               ; preds = %39
  %50 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %1) #13
  %51 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %45) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0), i8* %50, i8* %51) #13
  %52 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46)
  store i8* %53, i8** %41, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %49
  %56 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 223, %"class.logging::CheckOpResult"* nonnull %9) #13
  %57 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #13
  br label %58

58:                                               ; preds = %48, %49, %55
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13
  %59 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #13
  %60 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %60, align 8
  %61 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %15, align 8
  %62 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %61, i64 0, i32 0, i32 0, i32 0
  %63 = load i32*, i32** %62, align 8
  %64 = getelementptr inbounds i32, i32* %63, i64 %24
  %65 = load i32, i32* %64, align 4
  %66 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66)
  %67 = icmp sgt i32 %65, %1
  br i1 %67, label %68, label %69

68:                                               ; preds = %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66)
  store i8* null, i8** %60, align 8
  br label %78

69:                                               ; preds = %58
  %70 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %1) #13
  %71 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %65) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %70, i8* %71) #13
  %72 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66)
  store i8* %73, i8** %60, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %69
  %76 = bitcast %"class.logging::CheckError"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 224, %"class.logging::CheckOpResult"* nonnull %11) #13
  %77 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #13
  br label %78

78:                                               ; preds = %68, %69, %75
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #13
  %79 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %15, align 8
  %80 = add nsw i64 %23, -2
  %81 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %79, i64 0, i32 0, i32 0, i32 0
  %82 = load i32*, i32** %81, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 %80
  %84 = load i32, i32* %83, align 4
  %85 = trunc i64 %80 to i32
  %86 = icmp eq i32 %84, %85
  br i1 %86, label %90, label %87

87:                                               ; preds = %78
  %88 = lshr i64 %24, 1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %109, label %96

90:                                               ; preds = %78
  %91 = icmp slt i32 %1, 1
  br i1 %91, label %130, label %92

92:                                               ; preds = %90
  %93 = icmp slt i32 %84, %1
  %94 = sext i32 %1 to i64
  %95 = select i1 %93, i64 %80, i64 %94
  ret i64 %95

96:                                               ; preds = %87, %96
  %97 = phi i64 [ %107, %96 ], [ %88, %87 ]
  %98 = phi i64 [ %104, %96 ], [ %24, %87 ]
  %99 = phi i64 [ %103, %96 ], [ 0, %87 ]
  %100 = getelementptr inbounds i32, i32* %82, i64 %97
  %101 = load i32, i32* %100, align 4
  %102 = icmp sgt i32 %101, %1
  %103 = select i1 %102, i64 %99, i64 %97
  %104 = select i1 %102, i64 %97, i64 %98
  %105 = sub i64 %104, %103
  %106 = lshr i64 %105, 1
  %107 = add i64 %106, %103
  %108 = icmp eq i64 %106, 0
  br i1 %108, label %109, label %96

109:                                              ; preds = %96, %87
  %110 = phi i64 [ 0, %87 ], [ %107, %96 ]
  %111 = bitcast %"class.logging::CheckOpResult"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #13
  %112 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %13, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %112, align 8
  %113 = add i64 %110, 1
  %114 = load i32*, i32** %81, align 8
  %115 = getelementptr inbounds i32, i32* %114, i64 %113
  %116 = load i32, i32* %115, align 4
  %117 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117)
  %118 = icmp sgt i32 %116, %1
  br i1 %118, label %119, label %120

119:                                              ; preds = %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117)
  store i8* null, i8** %112, align 8
  br label %129

120:                                              ; preds = %109
  %121 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %116) #13
  %122 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %1) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.5, i64 0, i64 0), i8* %121, i8* %122) #13
  %123 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %124 = load i8*, i8** %123, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117)
  store i8* %124, i8** %112, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %129, label %126

126:                                              ; preds = %120
  %127 = bitcast %"class.logging::CheckError"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %14, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 255, %"class.logging::CheckOpResult"* nonnull %13) #13
  %128 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %14) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %14) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #13
  br label %129

129:                                              ; preds = %119, %120, %126
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #13
  br label %130

130:                                              ; preds = %90, %129
  %131 = phi i64 [ %110, %129 ], [ 0, %90 ]
  ret i64 %131
}

declare i32 @_ZN4base16HistogramSamples18AtomicSingleSample7ExtractEb(%"union.base::HistogramSamples::AtomicSingleSample"*, i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12SampleVectorC2EPKNS_12BucketRangesE(%"class.base::SampleVector"*, %"class.base::BucketRanges"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0
  %4 = tail call i8* @_Znwm(i64 24) #15
  %5 = bitcast i8* %4 to %"struct.base::HistogramSamples::LocalMetadata"*
  tail call void @_ZN4base16HistogramSamples13LocalMetadataC1Ev(%"struct.base::HistogramSamples::LocalMetadata"* nonnull %5) #13
  %6 = bitcast i8* %4 to %"struct.base::HistogramSamples::Metadata"*
  tail call void @_ZN4base16SampleVectorBaseC2EmPNS_16HistogramSamples8MetadataEPKNS_12BucketRangesE(%"class.base::SampleVectorBase"* %3, i64 0, %"struct.base::HistogramSamples::Metadata"* nonnull %6, %"class.base::BucketRanges"* %1) #13
  %7 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base12SampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12SampleVectorC2EmPKNS_12BucketRangesE(%"class.base::SampleVector"*, i64, %"class.base::BucketRanges"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0
  %5 = tail call i8* @_Znwm(i64 24) #15
  %6 = bitcast i8* %5 to %"struct.base::HistogramSamples::LocalMetadata"*
  tail call void @_ZN4base16HistogramSamples13LocalMetadataC1Ev(%"struct.base::HistogramSamples::LocalMetadata"* nonnull %6) #13
  %7 = bitcast i8* %5 to %"struct.base::HistogramSamples::Metadata"*
  tail call void @_ZN4base16SampleVectorBaseC2EmPNS_16HistogramSamples8MetadataEPKNS_12BucketRangesE(%"class.base::SampleVectorBase"* %4, i64 %1, %"struct.base::HistogramSamples::Metadata"* nonnull %7, %"class.base::BucketRanges"* %2)
  %8 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base12SampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1
  %10 = bitcast %"class.std::__1::vector"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN4base16HistogramSamples13LocalMetadataC1Ev(%"struct.base::HistogramSamples::LocalMetadata"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12SampleVectorD2Ev(%"class.base::SampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base12SampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %3, align 8
  %5 = icmp eq %"struct.base::HistogramSamples::Metadata"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.base::HistogramSamples::Metadata"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #15
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = icmp eq i32* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = ptrtoint i32* %10 to i64
  %14 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* %16) #15
  br label %17

17:                                               ; preds = %8, %12
  %18 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"* %18) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base12SampleVectorD0Ev(%"class.base::SampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base12SampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %3, align 8
  %5 = icmp eq %"struct.base::HistogramSamples::Metadata"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.base::HistogramSamples::Metadata"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #15
  br label %8

8:                                                ; preds = %6, %1
  %9 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = icmp eq i32* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = ptrtoint i32* %10 to i64
  %14 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* %16) #15
  br label %17

17:                                               ; preds = %8, %12
  %18 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"* %18) #13
  %19 = bitcast %"class.base::SampleVector"* %0 to i8*
  tail call void @_ZdlPv(i8* %19) #15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base12SampleVector26MountExistingCountsStorageEv(%"class.base::SampleVector"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 1, i32 0
  %3 = bitcast %"struct.std::__1::__atomic_base"* %2 to i64*
  %4 = load atomic i64, i64* %3 acquire, align 8
  %5 = icmp ne i64 %4, 0
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base12SampleVector14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.std::__1::basic_string"* noalias sret, %"class.base::SampleVector"*, i8*, i64, i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0
  %7 = bitcast %"class.base::SampleVector"* %1 to i32 (%"class.base::SampleVectorBase"*)***
  %8 = load i32 (%"class.base::SampleVectorBase"*)**, i32 (%"class.base::SampleVectorBase"*)*** %7, align 8
  %9 = getelementptr inbounds i32 (%"class.base::SampleVectorBase"*)*, i32 (%"class.base::SampleVectorBase"*)** %8, i64 4
  %10 = load i32 (%"class.base::SampleVectorBase"*)*, i32 (%"class.base::SampleVectorBase"*)** %9, align 8
  %11 = tail call i32 %10(%"class.base::SampleVectorBase"* %6) #13
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #13
  %13 = trunc i64 %3 to i32
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0), i32 %13, i8* %2, i32 %11) #13
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %24, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 0, i32 1
  %17 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %16, align 8
  %18 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %17, i64 0, i32 1
  %19 = load atomic i64, i64* %18 monotonic, align 8
  %20 = sitofp i64 %19 to float
  %21 = sitofp i32 %11 to float
  %22 = fdiv float %20, %21
  %23 = fpext float %22 to double
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), double %23) #13
  br label %24

24:                                               ; preds = %5, %15
  %25 = icmp eq i32 %4, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %24
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 %4) #13
  br label %27

27:                                               ; preds = %26, %24
  ret void
}

declare void @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"*, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base12SampleVector12GetAsciiBodyEv(%"class.std::__1::basic_string"* noalias sret, %"class.base::SampleVector"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0
  %6 = bitcast %"class.base::SampleVector"* %1 to i32 (%"class.base::SampleVectorBase"*)***
  %7 = load i32 (%"class.base::SampleVectorBase"*)**, i32 (%"class.base::SampleVectorBase"*)*** %6, align 8
  %8 = getelementptr inbounds i32 (%"class.base::SampleVectorBase"*)*, i32 (%"class.base::SampleVectorBase"*)** %7, i64 4
  %9 = load i32 (%"class.base::SampleVectorBase"*)*, i32 (%"class.base::SampleVectorBase"*)** %8, align 8
  %10 = tail call i32 %9(%"class.base::SampleVectorBase"* %5) #13
  %11 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 2
  %12 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %13 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %12, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::BucketRanges"* %12 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = icmp eq i64 %18, 4
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = bitcast %"class.base::SampleVector"* %1 to i1 (%"class.base::SampleVectorBase"*)***
  br label %74

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 1, i32 0
  %25 = bitcast %"struct.std::__1::__atomic_base"* %24 to i64*
  %26 = bitcast %"class.base::SampleVector"* %1 to i1 (%"class.base::SampleVectorBase"*)***
  br label %32

27:                                               ; preds = %58
  %28 = sitofp i32 %61 to double
  %29 = lshr i64 %70, 2
  %30 = trunc i64 %29 to i32
  %31 = add i32 %30, -1
  br label %74

32:                                               ; preds = %58, %22
  %33 = phi i64 [ 0, %22 ], [ %63, %58 ]
  %34 = phi i32 [ 0, %22 ], [ %62, %58 ]
  %35 = phi i32 [ 0, %22 ], [ %61, %58 ]
  %36 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %23, align 8
  %37 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %36, i64 0, i32 3
  %38 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %37) #13
  %39 = lshr i32 %38, 16
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %32
  %42 = and i32 %38, 65535
  %43 = icmp eq i32 %42, %34
  %44 = select i1 %43, i32 %39, i32 0
  br label %58

45:                                               ; preds = %32
  %46 = load atomic i64, i64* %25 acquire, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %45
  %49 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %26, align 8
  %50 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %49, i64 14
  %51 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %50, align 8
  %52 = tail call zeroext i1 %51(%"class.base::SampleVectorBase"* %5) #13
  br i1 %52, label %53, label %58

53:                                               ; preds = %48, %45
  %54 = load atomic i64, i64* %25 acquire, align 8
  %55 = inttoptr i64 %54 to i32*
  %56 = getelementptr inbounds i32, i32* %55, i64 %33
  %57 = load atomic i32, i32* %56 monotonic, align 4
  br label %58

58:                                               ; preds = %53, %48, %41
  %59 = phi i32 [ %44, %41 ], [ %57, %53 ], [ 0, %48 ]
  %60 = icmp sgt i32 %59, %35
  %61 = select i1 %60, i32 %59, i32 %35
  %62 = add i32 %34, 1
  %63 = zext i32 %62 to i64
  %64 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %65 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %64, i64 0, i32 0, i32 0, i32 1
  %66 = bitcast i32** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.base::BucketRanges"* %64 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %67, %69
  %71 = ashr exact i64 %70, 2
  %72 = add nsw i64 %71, -1
  %73 = icmp ugt i64 %72, %63
  br i1 %73, label %32, label %27

74:                                               ; preds = %20, %27
  %75 = phi i1 (%"class.base::SampleVectorBase"*)*** [ %21, %20 ], [ %26, %27 ]
  %76 = phi i32 [ 0, %20 ], [ %31, %27 ]
  %77 = phi double [ 0.000000e+00, %20 ], [ %28, %27 ]
  %78 = fdiv double 7.200000e+01, %77
  %79 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 0, i32 1
  %80 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 1, i32 0
  %81 = bitcast %"struct.std::__1::__atomic_base"* %80 to i64*
  br label %82

82:                                               ; preds = %108, %74
  %83 = phi i32 [ %76, %74 ], [ %84, %108 ]
  %84 = add i32 %83, -1
  %85 = zext i32 %84 to i64
  %86 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %79, align 8
  %87 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %86, i64 0, i32 3
  %88 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %87) #13
  %89 = lshr i32 %88, 16
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %82
  %92 = and i32 %88, 65535
  %93 = icmp eq i32 %92, %84
  %94 = select i1 %93, i32 %89, i32 0
  br label %108

95:                                               ; preds = %82
  %96 = load atomic i64, i64* %81 acquire, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %103

98:                                               ; preds = %95
  %99 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %75, align 8
  %100 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %99, i64 14
  %101 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %100, align 8
  %102 = tail call zeroext i1 %101(%"class.base::SampleVectorBase"* %5) #13
  br i1 %102, label %103, label %108

103:                                              ; preds = %98, %95
  %104 = load atomic i64, i64* %81 acquire, align 8
  %105 = inttoptr i64 %104 to i32*
  %106 = getelementptr inbounds i32, i32* %105, i64 %85
  %107 = load atomic i32, i32* %106 monotonic, align 4
  br label %108

108:                                              ; preds = %91, %98, %103
  %109 = phi i32 [ %94, %91 ], [ %107, %103 ], [ 0, %98 ]
  %110 = icmp ne i32 %109, 0
  %111 = icmp eq i32 %84, 0
  %112 = or i1 %111, %110
  br i1 %112, label %113, label %82

113:                                              ; preds = %108
  %114 = fcmp ogt double %77, 7.200000e+01
  %115 = select i1 %114, double %78, double 1.000000e+00
  %116 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %117 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %116, i64 0, i32 0, i32 0, i32 1
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.base::BucketRanges"* %116 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %119, %121
  %123 = icmp eq i64 %122, 4
  br i1 %123, label %134, label %124

124:                                              ; preds = %113
  %125 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %126 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 0
  %127 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %128 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %127, i64 0, i32 1, i32 0
  %129 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %130 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %153

131:                                              ; preds = %196
  %132 = bitcast i32** %201 to i64*
  %133 = bitcast %"class.base::BucketRanges"* %200 to i64*
  br label %134

134:                                              ; preds = %131, %113
  %135 = phi i64* [ %120, %113 ], [ %133, %131 ]
  %136 = phi i64* [ %118, %113 ], [ %132, %131 ]
  %137 = phi i64 [ 1, %113 ], [ %197, %131 ]
  %138 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 24, i1 false) #13
  %139 = load i64, i64* %136, align 8
  %140 = load i64, i64* %135, align 8
  %141 = sub i64 %139, %140
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %383, label %143

143:                                              ; preds = %134
  %144 = sext i32 %10 to i64
  %145 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %146 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %148 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %1, i64 0, i32 0, i32 0
  %149 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %150 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %149, i64 0, i32 1, i32 0
  %151 = add i64 %137, 1
  %152 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  br label %210

153:                                              ; preds = %124, %196
  %154 = phi i64 [ 0, %124 ], [ %199, %196 ]
  %155 = phi i32 [ 0, %124 ], [ %198, %196 ]
  %156 = phi i64 [ 1, %124 ], [ %197, %196 ]
  %157 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %79, align 8
  %158 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %157, i64 0, i32 3
  %159 = call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %158) #13
  %160 = icmp ult i32 %159, 65536
  br i1 %160, label %164, label %161

161:                                              ; preds = %153
  %162 = and i32 %159, 65535
  %163 = icmp eq i32 %162, %155
  br i1 %163, label %178, label %196

164:                                              ; preds = %153
  %165 = load atomic i64, i64* %81 acquire, align 8
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %172

167:                                              ; preds = %164
  %168 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %75, align 8
  %169 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %168, i64 14
  %170 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %169, align 8
  %171 = call zeroext i1 %170(%"class.base::SampleVectorBase"* %5) #13
  br i1 %171, label %172, label %196

172:                                              ; preds = %164, %167
  %173 = load atomic i64, i64* %81 acquire, align 8
  %174 = inttoptr i64 %173 to i32*
  %175 = getelementptr inbounds i32, i32* %174, i64 %154
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %196, label %178

178:                                              ; preds = %161, %172
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #13
  %179 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %180 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %179, i64 0, i32 0, i32 0, i32 0
  %181 = load i32*, i32** %180, align 8
  %182 = getelementptr inbounds i32, i32* %181, i64 %154
  %183 = load i32, i32* %182, align 4
  call void @_ZNK4base16HistogramSamples25GetSimpleAsciiBucketRangeEi(%"class.std::__1::basic_string"* nonnull sret %3, %"class.base::HistogramSamples"* %126, i32 %183) #13
  %184 = load i8, i8* %128, align 1
  %185 = icmp slt i8 %184, 0
  br i1 %185, label %188, label %186

186:                                              ; preds = %178
  %187 = zext i8 %184 to i64
  br label %191

188:                                              ; preds = %178
  %189 = load i64, i64* %129, align 8
  %190 = load i8*, i8** %130, align 8
  call void @_ZdlPv(i8* %190) #15
  br label %191

191:                                              ; preds = %186, %188
  %192 = phi i64 [ %187, %186 ], [ %189, %188 ]
  %193 = add i64 %192, 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %125) #13
  %194 = icmp ugt i64 %193, %156
  %195 = select i1 %194, i64 %193, i64 %156
  br label %196

196:                                              ; preds = %167, %161, %172, %191
  %197 = phi i64 [ %195, %191 ], [ %156, %172 ], [ %156, %161 ], [ %156, %167 ]
  %198 = add i32 %155, 1
  %199 = zext i32 %198 to i64
  %200 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %201 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %200, i64 0, i32 0, i32 0, i32 1
  %202 = bitcast i32** %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = bitcast %"class.base::BucketRanges"* %200 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %203, %205
  %207 = ashr exact i64 %206, 2
  %208 = add nsw i64 %207, -1
  %209 = icmp ugt i64 %208, %199
  br i1 %209, label %153, label %131

210:                                              ; preds = %143, %370
  %211 = phi i64 [ 0, %143 ], [ %372, %370 ]
  %212 = phi i32 [ 0, %143 ], [ %371, %370 ]
  %213 = phi i64 [ 0, %143 ], [ %363, %370 ]
  %214 = phi i64 [ %144, %143 ], [ %240, %370 ]
  %215 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %79, align 8
  %216 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %215, i64 0, i32 3
  %217 = call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %216) #13
  %218 = lshr i32 %217, 16
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %224, label %220

220:                                              ; preds = %210
  %221 = and i32 %217, 65535
  %222 = icmp eq i32 %221, %212
  %223 = select i1 %222, i32 %218, i32 0
  br label %237

224:                                              ; preds = %210
  %225 = load atomic i64, i64* %81 acquire, align 8
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %232

227:                                              ; preds = %224
  %228 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %75, align 8
  %229 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %228, i64 14
  %230 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %229, align 8
  %231 = call zeroext i1 %230(%"class.base::SampleVectorBase"* %5) #13
  br i1 %231, label %232, label %237

232:                                              ; preds = %227, %224
  %233 = load atomic i64, i64* %81 acquire, align 8
  %234 = inttoptr i64 %233 to i32*
  %235 = getelementptr inbounds i32, i32* %234, i64 %211
  %236 = load atomic i32, i32* %235 monotonic, align 4
  br label %237

237:                                              ; preds = %220, %227, %232
  %238 = phi i32 [ %223, %220 ], [ %236, %232 ], [ 0, %227 ]
  %239 = sext i32 %238 to i64
  %240 = sub nsw i64 %214, %239
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %145) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %152, i8 -86, i64 24, i1 false)
  %241 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %242 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %241, i64 0, i32 0, i32 0, i32 0
  %243 = load i32*, i32** %242, align 8
  %244 = getelementptr inbounds i32, i32* %243, i64 %211
  %245 = load i32, i32* %244, align 4
  call void @_ZNK4base16HistogramSamples25GetSimpleAsciiBucketRangeEi(%"class.std::__1::basic_string"* nonnull sret %4, %"class.base::HistogramSamples"* %148, i32 %245) #13
  %246 = load i8, i8* %150, align 1
  %247 = icmp slt i8 %246, 0
  %248 = load i8*, i8** %146, align 8
  %249 = load i64, i64* %147, align 8
  %250 = zext i8 %246 to i64
  %251 = select i1 %247, i8* %248, i8* %145
  %252 = select i1 %247, i64 %249, i64 %250
  %253 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %251, i64 %252) #13
  %254 = load i8, i8* %150, align 1
  %255 = icmp slt i8 %254, 0
  %256 = load i64, i64* %147, align 8
  %257 = zext i8 %254 to i64
  %258 = select i1 %255, i64 %256, i64 %257
  %259 = icmp ult i64 %258, %151
  br i1 %259, label %262, label %260

260:                                              ; preds = %262, %237
  %261 = icmp eq i32 %238, 0
  br i1 %261, label %272, label %347

262:                                              ; preds = %237, %262
  %263 = phi i64 [ %264, %262 ], [ 0, %237 ]
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext 32) #13
  %264 = add i64 %263, 1
  %265 = load i8, i8* %150, align 1
  %266 = icmp slt i8 %265, 0
  %267 = load i64, i64* %147, align 8
  %268 = zext i8 %265 to i64
  %269 = select i1 %266, i64 %267, i64 %268
  %270 = add i64 %269, %264
  %271 = icmp ult i64 %270, %151
  br i1 %271, label %262, label %260

272:                                              ; preds = %260
  %273 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %274 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %273, i64 0, i32 0, i32 0, i32 1
  %275 = bitcast i32** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = bitcast %"class.base::BucketRanges"* %273 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = sub i64 %276, %278
  %280 = ashr exact i64 %279, 2
  %281 = add nsw i64 %280, -2
  %282 = icmp ugt i64 %281, %211
  br i1 %282, label %283, label %347

283:                                              ; preds = %272
  %284 = add i32 %212, 1
  %285 = zext i32 %284 to i64
  %286 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %79, align 8
  %287 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %286, i64 0, i32 3
  %288 = call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %287) #13
  %289 = icmp ult i32 %288, 65536
  br i1 %289, label %293, label %290

290:                                              ; preds = %283
  %291 = and i32 %288, 65535
  %292 = icmp eq i32 %291, %284
  br i1 %292, label %347, label %307

293:                                              ; preds = %283
  %294 = load atomic i64, i64* %81 acquire, align 8
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %301

296:                                              ; preds = %293
  %297 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %75, align 8
  %298 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %297, i64 14
  %299 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %298, align 8
  %300 = call zeroext i1 %299(%"class.base::SampleVectorBase"* %5) #13
  br i1 %300, label %301, label %307

301:                                              ; preds = %293, %296
  %302 = load atomic i64, i64* %81 acquire, align 8
  %303 = inttoptr i64 %302 to i32*
  %304 = getelementptr inbounds i32, i32* %303, i64 %285
  %305 = load atomic i32, i32* %304 monotonic, align 4
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %347

307:                                              ; preds = %296, %290, %301
  br label %308

308:                                              ; preds = %307, %344
  %309 = phi i32 [ %322, %344 ], [ %212, %307 ]
  %310 = zext i32 %309 to i64
  %311 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %312 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %311, i64 0, i32 0, i32 0, i32 1
  %313 = bitcast i32** %312 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = bitcast %"class.base::BucketRanges"* %311 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = sub i64 %314, %316
  %318 = ashr exact i64 %317, 2
  %319 = add nsw i64 %318, -2
  %320 = icmp ugt i64 %319, %310
  br i1 %320, label %321, label %361

321:                                              ; preds = %308
  %322 = add i32 %309, 1
  %323 = zext i32 %322 to i64
  %324 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %79, align 8
  %325 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %324, i64 0, i32 3
  %326 = call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %325) #13
  %327 = icmp ult i32 %326, 65536
  br i1 %327, label %331, label %328

328:                                              ; preds = %321
  %329 = and i32 %326, 65535
  %330 = icmp eq i32 %329, %322
  br i1 %330, label %361, label %344

331:                                              ; preds = %321
  %332 = load atomic i64, i64* %81 acquire, align 8
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %339

334:                                              ; preds = %331
  %335 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %75, align 8
  %336 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %335, i64 14
  %337 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %336, align 8
  %338 = call zeroext i1 %337(%"class.base::SampleVectorBase"* %5) #13
  br i1 %338, label %339, label %344

339:                                              ; preds = %334, %331
  %340 = load atomic i64, i64* %81 acquire, align 8
  %341 = inttoptr i64 %340 to i32*
  %342 = getelementptr inbounds i32, i32* %341, i64 %323
  %343 = load atomic i32, i32* %342 monotonic, align 4
  br label %344

344:                                              ; preds = %328, %334, %339
  %345 = phi i32 [ 0, %328 ], [ %343, %339 ], [ 0, %334 ]
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %308, label %361

347:                                              ; preds = %290, %301, %272, %260
  %348 = sitofp i32 %238 to double
  %349 = fmul double %115, %348
  %350 = call double @llvm.round.f64(double %349)
  %351 = fptosi double %350 to i32
  %352 = sitofp i32 %351 to double
  call void @_ZNK4base16HistogramSamples21WriteAsciiBucketGraphEdiPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"* %148, double %352, i32 72, %"class.std::__1::basic_string"* %0) #13
  %353 = add nsw i64 %213, %239
  %354 = add i64 %213, %214
  %355 = sitofp i64 %354 to double
  %356 = fdiv double %355, 1.000000e+02
  call void @_ZNK4base16HistogramSamples21WriteAsciiBucketValueEidPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"* %148, i32 %238, double %356, %"class.std::__1::basic_string"* %0) #13
  %357 = icmp eq i32 %212, 0
  br i1 %357, label %361, label %358

358:                                              ; preds = %347
  %359 = sitofp i64 %213 to double
  %360 = fdiv double %359, %356
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double %360) #13
  br label %361

361:                                              ; preds = %344, %308, %328, %358, %347
  %362 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), %347 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), %358 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), %328 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), %308 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), %344 ]
  %363 = phi i64 [ %353, %347 ], [ %353, %358 ], [ %213, %328 ], [ %213, %308 ], [ %213, %344 ]
  %364 = phi i32 [ %212, %347 ], [ %212, %358 ], [ %309, %328 ], [ %309, %308 ], [ %309, %344 ]
  %365 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* %362) #13
  %366 = load i8, i8* %150, align 1
  %367 = icmp slt i8 %366, 0
  br i1 %367, label %368, label %370

368:                                              ; preds = %361
  %369 = load i8*, i8** %146, align 8
  call void @_ZdlPv(i8* %369) #15
  br label %370

370:                                              ; preds = %361, %368
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %145) #13
  %371 = add i32 %364, 1
  %372 = zext i32 %371 to i64
  %373 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %11, align 8
  %374 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %373, i64 0, i32 0, i32 0, i32 1
  %375 = bitcast i32** %374 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.base::BucketRanges"* %373 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = sub i64 %376, %378
  %380 = ashr exact i64 %379, 2
  %381 = add nsw i64 %380, -1
  %382 = icmp ugt i64 %381, %372
  br i1 %382, label %210, label %383

383:                                              ; preds = %370, %134
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK4base12SampleVector17GetPeakBucketSizeEv(%"class.base::SampleVector"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 2
  %3 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %2, align 8
  %4 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %3, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast i32** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.base::BucketRanges"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = icmp eq i64 %9, 4
  br i1 %10, label %19, label %11

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 1, i32 0
  %15 = bitcast %"struct.std::__1::__atomic_base"* %14 to i64*
  %16 = bitcast %"class.base::SampleVector"* %0 to i1 (%"class.base::SampleVectorBase"*)***
  br label %21

17:                                               ; preds = %47
  %18 = sitofp i32 %50 to double
  br label %19

19:                                               ; preds = %17, %1
  %20 = phi double [ 0.000000e+00, %1 ], [ %18, %17 ]
  ret double %20

21:                                               ; preds = %11, %47
  %22 = phi i64 [ 0, %11 ], [ %52, %47 ]
  %23 = phi i32 [ 0, %11 ], [ %51, %47 ]
  %24 = phi i32 [ 0, %11 ], [ %50, %47 ]
  %25 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %13, align 8
  %26 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %25, i64 0, i32 3
  %27 = tail call i32 @_ZNK4base16HistogramSamples18AtomicSingleSample4LoadEv(%"union.base::HistogramSamples::AtomicSingleSample"* %26) #13
  %28 = lshr i32 %27, 16
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %21
  %31 = and i32 %27, 65535
  %32 = icmp eq i32 %31, %23
  %33 = select i1 %32, i32 %28, i32 0
  br label %47

34:                                               ; preds = %21
  %35 = load atomic i64, i64* %15 acquire, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = load i1 (%"class.base::SampleVectorBase"*)**, i1 (%"class.base::SampleVectorBase"*)*** %16, align 8
  %39 = getelementptr inbounds i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %38, i64 14
  %40 = load i1 (%"class.base::SampleVectorBase"*)*, i1 (%"class.base::SampleVectorBase"*)** %39, align 8
  %41 = tail call zeroext i1 %40(%"class.base::SampleVectorBase"* %12) #13
  br i1 %41, label %42, label %47

42:                                               ; preds = %37, %34
  %43 = load atomic i64, i64* %15 acquire, align 8
  %44 = inttoptr i64 %43 to i32*
  %45 = getelementptr inbounds i32, i32* %44, i64 %22
  %46 = load atomic i32, i32* %45 monotonic, align 4
  br label %47

47:                                               ; preds = %30, %37, %42
  %48 = phi i32 [ %33, %30 ], [ %46, %42 ], [ 0, %37 ]
  %49 = icmp sgt i32 %48, %24
  %50 = select i1 %49, i32 %48, i32 %24
  %51 = add i32 %23, 1
  %52 = zext i32 %51 to i64
  %53 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %2, align 8
  %54 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %53, i64 0, i32 0, i32 0, i32 1
  %55 = bitcast i32** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.base::BucketRanges"* %53 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = ashr exact i64 %59, 2
  %61 = add nsw i64 %60, -1
  %62 = icmp ugt i64 %61, %52
  br i1 %62, label %21, label %17
}

declare void @_ZNK4base16HistogramSamples25GetSimpleAsciiBucketRangeEi(%"class.std::__1::basic_string"* sret, %"class.base::HistogramSamples"*, i32) local_unnamed_addr #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #9

declare void @_ZNK4base16HistogramSamples21WriteAsciiBucketGraphEdiPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"*, double, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4base12SampleVector23WriteAsciiBucketContextEliljPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::SampleVector"*, i64, i32, i64, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %7 = sext i32 %2 to i64
  %8 = add nsw i64 %7, %1
  %9 = add nsw i64 %8, %3
  %10 = sitofp i64 %9 to double
  %11 = fdiv double %10, 1.000000e+02
  %12 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNK4base16HistogramSamples21WriteAsciiBucketValueEidPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"* %12, i32 %2, double %11, %"class.std::__1::basic_string"* %5) #13
  %13 = icmp eq i32 %4, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %6
  %15 = sitofp i64 %1 to double
  %16 = fdiv double %15, %11
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base13StringAppendFEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKcz(%"class.std::__1::basic_string"* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), double %16) #13
  br label %17

17:                                               ; preds = %6, %14
  ret void
}

declare void @_ZNK4base16HistogramSamples21WriteAsciiBucketValueEidPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.base::HistogramSamples"*, i32, double, %"class.std::__1::basic_string"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32* @_ZN4base12SampleVector30CreateCountsStorageWhileLockedEv(%"class.base::SampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 0, i32 2
  %4 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %3, align 8
  %5 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %4, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.base::BucketRanges"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  %12 = add nsw i64 %11, -1
  %13 = getelementptr inbounds %"class.base::SampleVector", %"class.base::SampleVector"* %0, i64 0, i32 1, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector"* %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp ugt i64 %12, %19
  %21 = inttoptr i64 %17 to i32*
  br i1 %20, label %22, label %26

22:                                               ; preds = %1
  %23 = sub nsw i64 %12, %19
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %2, i64 %23) #13
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  br label %30

26:                                               ; preds = %1
  %27 = icmp ult i64 %12, %19
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = getelementptr inbounds i32, i32* %21, i64 %12
  store i32* %29, i32** %13, align 8
  br label %30

30:                                               ; preds = %22, %26, %28
  %31 = phi i32* [ %25, %22 ], [ %21, %26 ], [ %21, %28 ]
  ret i32* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22PersistentSampleVectorC2EmPKNS_12BucketRangesEPNS_16HistogramSamples8MetadataERKNS_27DelayedPersistentAllocationE(%"class.base::PersistentSampleVector"*, i64, %"class.base::BucketRanges"*, %"struct.base::HistogramSamples::Metadata"*, %"class.base::DelayedPersistentAllocation"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0
  tail call void @_ZN4base16SampleVectorBaseC2EmPNS_16HistogramSamples8MetadataEPKNS_12BucketRangesE(%"class.base::SampleVectorBase"* %6, i64 %1, %"struct.base::HistogramSamples::Metadata"* %3, %"class.base::BucketRanges"* %2)
  %7 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base22PersistentSampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 1
  %9 = bitcast %"class.base::DelayedPersistentAllocation"* %8 to i8*
  %10 = bitcast %"class.base::DelayedPersistentAllocation"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 32, i1 false)
  %11 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load %"struct.base::HistogramSamples::Metadata"*, %"struct.base::HistogramSamples::Metadata"** %11, align 8
  %13 = getelementptr inbounds %"struct.base::HistogramSamples::Metadata", %"struct.base::HistogramSamples::Metadata"* %12, i64 0, i32 3
  %14 = tail call zeroext i1 @_ZNK4base16HistogramSamples18AtomicSingleSample10IsDisabledEv(%"union.base::HistogramSamples::AtomicSingleSample"* %13) #13
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = bitcast %"class.base::PersistentSampleVector"* %0 to i1 (%"class.base::PersistentSampleVector"*)***
  %17 = load i1 (%"class.base::PersistentSampleVector"*)**, i1 (%"class.base::PersistentSampleVector"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.base::PersistentSampleVector"*)*, i1 (%"class.base::PersistentSampleVector"*)** %17, i64 14
  %19 = load i1 (%"class.base::PersistentSampleVector"*)*, i1 (%"class.base::PersistentSampleVector"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.base::PersistentSampleVector"* %0) #13
  br label %21

21:                                               ; preds = %15, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZNK4base16HistogramSamples18AtomicSingleSample10IsDisabledEv(%"union.base::HistogramSamples::AtomicSingleSample"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22PersistentSampleVectorD2Ev(%"class.base::PersistentSampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base22PersistentSampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 1
  tail call void @_ZN4base27DelayedPersistentAllocationD1Ev(%"class.base::DelayedPersistentAllocation"* %3) #13
  %4 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"* %4) #13
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base27DelayedPersistentAllocationD1Ev(%"class.base::DelayedPersistentAllocation"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base22PersistentSampleVectorD0Ev(%"class.base::PersistentSampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTVN4base22PersistentSampleVectorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 1
  tail call void @_ZN4base27DelayedPersistentAllocationD1Ev(%"class.base::DelayedPersistentAllocation"* %3) #13
  %4 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base16HistogramSamplesD2Ev(%"class.base::HistogramSamples"* %4) #13
  %5 = bitcast %"class.base::PersistentSampleVector"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base22PersistentSampleVector26MountExistingCountsStorageEv(%"class.base::PersistentSampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 1, i32 5
  %3 = bitcast %"struct.std::__1::atomic.30"** %2 to %"struct.std::__1::__atomic_base.32"**
  %4 = load %"struct.std::__1::__atomic_base.32"*, %"struct.std::__1::__atomic_base.32"** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__atomic_base.32", %"struct.std::__1::__atomic_base.32"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 1
  %10 = tail call i8* @_ZNK4base27DelayedPersistentAllocation3GetEv(%"class.base::DelayedPersistentAllocation"* %9) #13
  %11 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 1, i32 0
  %12 = ptrtoint i8* %10 to i64
  %13 = bitcast %"struct.std::__1::__atomic_base"* %11 to i64*
  store atomic i64 %12, i64* %13 release, align 8
  %14 = load atomic i64, i64* %13 acquire, align 8
  %15 = icmp ne i64 %14, 0
  br label %16

16:                                               ; preds = %1, %8
  %17 = phi i1 [ %15, %8 ], [ false, %1 ]
  ret i1 %17
}

declare i8* @_ZNK4base27DelayedPersistentAllocation3GetEv(%"class.base::DelayedPersistentAllocation"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32* @_ZN4base22PersistentSampleVector30CreateCountsStorageWhileLockedEv(%"class.base::PersistentSampleVector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 1
  %3 = tail call i8* @_ZNK4base27DelayedPersistentAllocation3GetEv(%"class.base::DelayedPersistentAllocation"* %2) #13
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %21

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::PersistentSampleVector", %"class.base::PersistentSampleVector"* %0, i64 0, i32 0, i32 2
  %7 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %6, align 8
  %8 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %7, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::BucketRanges"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = add nsw i64 %14, -1
  %16 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %15, i64 4)
  %17 = extractvalue { i64, i1 } %16, 1
  %18 = extractvalue { i64, i1 } %16, 0
  %19 = select i1 %17, i64 -1, i64 %18
  %20 = tail call i8* @_Znam(i64 %19) #15
  br label %21

21:                                               ; preds = %1, %5
  %22 = phi i8* [ %20, %5 ], [ %3, %1 ]
  %23 = bitcast i8* %22 to i32*
  ret i32* %23
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base20SampleVectorIteratorC2EPKNSt3__16vectorIiNS1_9allocatorIiEEEEPKNS_12BucketRangesE(%"class.base::SampleVectorIterator"* nocapture, %"class.std::__1::vector"* nocapture readonly, %"class.base::BucketRanges"*) unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base20SampleVectorIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::vector"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast i32** %5 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %11 = bitcast i32** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = load i64, i64* %6, align 8
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 2
  store i64 %15, i64* %9, align 8
  %16 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 3
  store %"class.base::BucketRanges"* %2, %"class.base::BucketRanges"** %16, align 8
  %17 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  store i64 0, i64* %17, align 8
  %18 = inttoptr i64 %7 to i32*
  %19 = icmp eq i64 %14, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %3, %25
  %21 = phi i64 [ %26, %25 ], [ 0, %3 ]
  %22 = getelementptr inbounds i32, i32* %18, i64 %21
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = add i64 %21, 1
  store i64 %26, i64* %17, align 8
  %27 = icmp eq i64 %26, %15
  br i1 %27, label %28, label %20

28:                                               ; preds = %20, %25, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20SampleVectorIterator16SkipEmptyBucketsEv(%"class.base::SampleVectorIterator"*) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.base::SampleVectorIterator"* %0 to i1 (%"class.base::SampleVectorIterator"*)***
  %3 = load i1 (%"class.base::SampleVectorIterator"*)**, i1 (%"class.base::SampleVectorIterator"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.base::SampleVectorIterator"*)*, i1 (%"class.base::SampleVectorIterator"*)** %3, i64 2
  %5 = load i1 (%"class.base::SampleVectorIterator"*)*, i1 (%"class.base::SampleVectorIterator"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.base::SampleVectorIterator"* %0) #13
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %9, %11
  br i1 %12, label %13, label %24

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 1
  %15 = load i32*, i32** %14, align 8
  br label %16

16:                                               ; preds = %13, %21
  %17 = phi i64 [ %22, %21 ], [ %9, %13 ]
  %18 = getelementptr inbounds i32, i32* %15, i64 %17
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = add nuw i64 %17, 1
  store i64 %22, i64* %8, align 8
  %23 = icmp ult i64 %22, %11
  br i1 %23, label %16, label %24

24:                                               ; preds = %21, %16, %7, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base20SampleVectorIteratorC2EPKimPKNS_12BucketRangesE(%"class.base::SampleVectorIterator"* nocapture, i32*, i64, %"class.base::BucketRanges"*) unnamed_addr #8 align 2 {
  %5 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base20SampleVectorIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 1
  store i32* %1, i32** %6, align 8
  %7 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 2
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 3
  store %"class.base::BucketRanges"* %3, %"class.base::BucketRanges"** %8, align 8
  %9 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  store i64 0, i64* %9, align 8
  %10 = icmp eq i64 %2, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %4, %16
  %12 = phi i64 [ %17, %16 ], [ 0, %4 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %11
  %17 = add nuw i64 %12, 1
  store i64 %17, i64* %9, align 8
  %18 = icmp eq i64 %17, %2
  br i1 %18, label %19, label %11

19:                                               ; preds = %11, %16, %4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base19SampleCountIteratorD2Ev(%"class.base::SampleCountIterator"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20SampleVectorIteratorD2Ev(%"class.base::SampleVectorIterator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 0
  tail call void @_ZN4base19SampleCountIteratorD2Ev(%"class.base::SampleCountIterator"* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20SampleVectorIteratorD0Ev(%"class.base::SampleVectorIterator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 0
  tail call void @_ZN4base19SampleCountIteratorD2Ev(%"class.base::SampleCountIterator"* %2) #13
  %3 = bitcast %"class.base::SampleVectorIterator"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #15
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base20SampleVectorIterator4DoneEv(%"class.base::SampleVectorIterator"* nocapture readonly) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp uge i64 %3, %5
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base20SampleVectorIterator4NextEv(%"class.base::SampleVectorIterator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %2, align 8
  %5 = bitcast %"class.base::SampleVectorIterator"* %0 to i1 (%"class.base::SampleVectorIterator"*)***
  %6 = load i1 (%"class.base::SampleVectorIterator"*)**, i1 (%"class.base::SampleVectorIterator"*)*** %5, align 8
  %7 = getelementptr inbounds i1 (%"class.base::SampleVectorIterator"*)*, i1 (%"class.base::SampleVectorIterator"*)** %6, i64 2
  %8 = load i1 (%"class.base::SampleVectorIterator"*)*, i1 (%"class.base::SampleVectorIterator"*)** %7, align 8
  %9 = tail call zeroext i1 %8(%"class.base::SampleVectorIterator"* %0) #13
  br i1 %9, label %26, label %10

10:                                               ; preds = %1
  %11 = load i64, i64* %2, align 8
  %12 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %11, %13
  br i1 %14, label %15, label %26

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 1
  %17 = load i32*, i32** %16, align 8
  br label %18

18:                                               ; preds = %23, %15
  %19 = phi i64 [ %24, %23 ], [ %11, %15 ]
  %20 = getelementptr inbounds i32, i32* %17, i64 %19
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = add i64 %19, 1
  store i64 %24, i64* %2, align 8
  %25 = icmp eq i64 %24, %13
  br i1 %25, label %26, label %18

26:                                               ; preds = %18, %23, %1, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK4base20SampleVectorIterator3GetEPiPlS1_(%"class.base::SampleVectorIterator"* nocapture readonly, i32*, i64*, i32*) unnamed_addr #8 align 2 {
  %5 = icmp eq i32* %1, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 3
  %8 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %7, align 8
  %9 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %8, i64 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 %10
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %1, align 4
  br label %15

15:                                               ; preds = %4, %6
  %16 = icmp eq i64* %2, null
  br i1 %16, label %28, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 3
  %19 = load %"class.base::BucketRanges"*, %"class.base::BucketRanges"** %18, align 8
  %20 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, 1
  %23 = getelementptr inbounds %"class.base::BucketRanges", %"class.base::BucketRanges"* %19, i64 0, i32 0, i32 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds i32, i32* %24, i64 %22
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %2, align 8
  br label %28

28:                                               ; preds = %15, %17
  %29 = icmp eq i32* %3, null
  br i1 %29, label %37, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 1
  %32 = load i32*, i32** %31, align 8
  %33 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds i32, i32* %32, i64 %34
  %36 = load atomic i32, i32* %35 monotonic, align 4
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %28, %30
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base20SampleVectorIterator14GetBucketIndexEPm(%"class.base::SampleVectorIterator"* nocapture readonly, i64*) unnamed_addr #8 align 2 {
  %3 = icmp eq i64* %1, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.base::SampleVectorIterator", %"class.base::SampleVectorIterator"* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %1, align 8
  br label %7

7:                                                ; preds = %2, %4
  ret i1 true
}

declare void @_ZN4base16HistogramSamples3AddERKS0_(%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"* dereferenceable(16)) unnamed_addr #1

declare zeroext i1 @_ZN4base16HistogramSamples13AddFromPickleEPNS_14PickleIteratorE(%"class.base::HistogramSamples"*, %"class.base::PickleIterator"*) unnamed_addr #1

declare void @_ZN4base16HistogramSamples8SubtractERKS0_(%"class.base::HistogramSamples"*, %"class.base::HistogramSamples"* dereferenceable(16)) unnamed_addr #1

declare void @_ZNK4base16HistogramSamples9SerializeEPNS_6PickleE(%"class.base::HistogramSamples"*, %"class.base::Pickle"*) unnamed_addr #1

declare void @_ZNK4base16HistogramSamples12GetAsciiBodyEv(%"class.std::__1::basic_string"* sret, %"class.base::HistogramSamples"*) unnamed_addr #1

declare void @_ZNK4base16HistogramSamples14GetAsciiHeaderENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEEi(%"class.std::__1::basic_string"* sret, %"class.base::HistogramSamples"*, i8*, i64, i32) unnamed_addr #1

declare void @__cxa_pure_virtual() unnamed_addr

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEi(i32) local_unnamed_addr #1

declare void @_ZN4base20SingleSampleIteratorC1Eilim(%"class.base::SingleSampleIterator"*, i32, i64, i32, i64) unnamed_addr #1

declare zeroext i1 @_ZN4base8internal17NeedsLazyInstanceEPl(i64*) local_unnamed_addr #1

declare void @_ZN4base8internal20CompleteLazyInstanceEPllPFvPvES2_(i64*, i64, void (i8*)*, i8*) local_unnamed_addr #1

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #1

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #13
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #13
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #13
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
