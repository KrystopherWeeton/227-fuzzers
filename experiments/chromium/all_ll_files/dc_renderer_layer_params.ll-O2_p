; ModuleID = '../../ui/gl/dc_renderer_layer_params.cc'
source_filename = "../../ui/gl/dc_renderer_layer_params.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.ui::DCRendererLayerParams" = type { %"struct.std::__1::array", i32, %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Transform", %"class.absl::optional", i32, %"struct.gfx::HDRMetadata", %"struct.std::__1::array.0" }
%"struct.std::__1::array" = type { [2 x %class.scoped_refptr] }
%class.scoped_refptr = type { %"class.gl::GLImage"* }
%"class.gl::GLImage" = type { i32 (...)**, %"class.base::RefCounted", %"class.gfx::ColorSpace" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.gfx::PointF" = type { float, float }
%"struct.std::__1::array.0" = type { [2 x %"class.base::OnceCallback"] }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.1 }
%class.scoped_refptr.1 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4

@_ZN2ui21DCRendererLayerParamsC1Ev = hidden unnamed_addr alias void (%"struct.ui::DCRendererLayerParams"*), void (%"struct.ui::DCRendererLayerParams"*)* @_ZN2ui21DCRendererLayerParamsC2Ev
@_ZN2ui21DCRendererLayerParamsD1Ev = hidden unnamed_addr alias void (%"struct.ui::DCRendererLayerParams"*), void (%"struct.ui::DCRendererLayerParams"*)* @_ZN2ui21DCRendererLayerParamsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21DCRendererLayerParamsC2Ev(%"struct.ui::DCRendererLayerParams"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.ui::DCRendererLayerParams"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false) #4
  %3 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 1
  store i32 1, i32* %3, align 8
  %4 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 4
  %6 = bitcast %"class.gfx::Transform"* %5 to i8*
  %7 = bitcast %"class.gfx::Rect"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 32, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #4
  %8 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 4, i32 0, i32 1
  store i8 0, i8* %8, align 4
  %9 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %9, align 4
  %10 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 6
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 7
  tail call void @_ZN3gfx11HDRMetadataC1Ev(%"struct.gfx::HDRMetadata"* %11) #4
  %12 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 8
  %13 = bitcast %"struct.std::__1::array.0"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #4
  ret void
}

declare void @_ZN3gfx11HDRMetadataC1Ev(%"struct.gfx::HDRMetadata"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui21DCRendererLayerParamsD2Ev(%"struct.ui::DCRendererLayerParams"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 8, i32 0, i64 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %2) #4
  %3 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 8, i32 0, i64 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #4
  %4 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 0, i32 0, i64 1, i32 0
  %5 = load %"class.gl::GLImage"*, %"class.gl::GLImage"** %4, align 8
  %6 = icmp eq %"class.gl::GLImage"* %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.gl::GLImage", %"class.gl::GLImage"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %8, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %9) #4
  %10 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %8, i64 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %8, i64 -2
  %15 = bitcast %"class.base::RefCounted"* %14 to %"class.gl::GLImage"*
  %16 = bitcast %"class.base::RefCounted"* %14 to void (%"class.gl::GLImage"*)***
  %17 = load void (%"class.gl::GLImage"*)**, void (%"class.gl::GLImage"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.gl::GLImage"*)*, void (%"class.gl::GLImage"*)** %17, i64 21
  %19 = load void (%"class.gl::GLImage"*)*, void (%"class.gl::GLImage"*)** %18, align 8
  tail call void %19(%"class.gl::GLImage"* nonnull %15) #4
  br label %20

20:                                               ; preds = %13, %7, %1
  %21 = getelementptr inbounds %"struct.ui::DCRendererLayerParams", %"struct.ui::DCRendererLayerParams"* %0, i64 0, i32 0, i32 0, i64 0, i32 0
  %22 = load %"class.gl::GLImage"*, %"class.gl::GLImage"** %21, align 8
  %23 = icmp eq %"class.gl::GLImage"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.gl::GLImage", %"class.gl::GLImage"* %22, i64 0, i32 1
  %26 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %25, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %26) #4
  %27 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %25, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %37

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %25, i64 -2
  %32 = bitcast %"class.base::RefCounted"* %31 to %"class.gl::GLImage"*
  %33 = bitcast %"class.base::RefCounted"* %31 to void (%"class.gl::GLImage"*)***
  %34 = load void (%"class.gl::GLImage"*)**, void (%"class.gl::GLImage"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.gl::GLImage"*)*, void (%"class.gl::GLImage"*)** %34, i64 21
  %36 = load void (%"class.gl::GLImage"*)*, void (%"class.gl::GLImage"*)** %35, align 8
  tail call void %36(%"class.gl::GLImage"* nonnull %32) #4
  br label %37

37:                                               ; preds = %20, %24, %30
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
