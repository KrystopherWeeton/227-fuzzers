; ModuleID = '../../components/sync/base/invalidation_interface.cc'
source_filename = "../../components/sync/base/invalidation_interface.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.syncer::InvalidationInterface" = type { i32 (...)** }

@_ZTVN6syncer21InvalidationInterfaceE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.syncer::InvalidationInterface"*)* @_ZN6syncer21InvalidationInterfaceD2Ev to i8*), i8* bitcast (void (%"class.syncer::InvalidationInterface"*)* @_ZN6syncer21InvalidationInterfaceD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN6syncer21InvalidationInterfaceD1Ev = hidden unnamed_addr alias void (%"class.syncer::InvalidationInterface"*), void (%"class.syncer::InvalidationInterface"*)* @_ZN6syncer21InvalidationInterfaceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6syncer21InvalidationInterface17LessThanByVersionERKS0_S2_(%"class.syncer::InvalidationInterface"* dereferenceable(8), %"class.syncer::InvalidationInterface"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.syncer::InvalidationInterface"* %0 to i1 (%"class.syncer::InvalidationInterface"*)***
  %4 = load i1 (%"class.syncer::InvalidationInterface"*)**, i1 (%"class.syncer::InvalidationInterface"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %4, i64 2
  %6 = load i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.syncer::InvalidationInterface"* %0) #5
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = bitcast %"class.syncer::InvalidationInterface"* %1 to i1 (%"class.syncer::InvalidationInterface"*)***
  %10 = load i1 (%"class.syncer::InvalidationInterface"*)**, i1 (%"class.syncer::InvalidationInterface"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %10, i64 2
  %12 = load i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.syncer::InvalidationInterface"* %1) #5
  br i1 %13, label %14, label %48

14:                                               ; preds = %8, %2
  %15 = load i1 (%"class.syncer::InvalidationInterface"*)**, i1 (%"class.syncer::InvalidationInterface"*)*** %3, align 8
  %16 = getelementptr inbounds i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %15, i64 2
  %17 = load i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.syncer::InvalidationInterface"* %0) #5
  br i1 %18, label %25, label %19

19:                                               ; preds = %14
  %20 = bitcast %"class.syncer::InvalidationInterface"* %1 to i1 (%"class.syncer::InvalidationInterface"*)***
  %21 = load i1 (%"class.syncer::InvalidationInterface"*)**, i1 (%"class.syncer::InvalidationInterface"*)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %21, i64 2
  %23 = load i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.syncer::InvalidationInterface"* %1) #5
  br i1 %24, label %48, label %25

25:                                               ; preds = %19, %14
  %26 = load i1 (%"class.syncer::InvalidationInterface"*)**, i1 (%"class.syncer::InvalidationInterface"*)*** %3, align 8
  %27 = getelementptr inbounds i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %26, i64 2
  %28 = load i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %27, align 8
  %29 = tail call zeroext i1 %28(%"class.syncer::InvalidationInterface"* %0) #5
  br i1 %29, label %30, label %36

30:                                               ; preds = %25
  %31 = bitcast %"class.syncer::InvalidationInterface"* %1 to i1 (%"class.syncer::InvalidationInterface"*)***
  %32 = load i1 (%"class.syncer::InvalidationInterface"*)**, i1 (%"class.syncer::InvalidationInterface"*)*** %31, align 8
  %33 = getelementptr inbounds i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %32, i64 2
  %34 = load i1 (%"class.syncer::InvalidationInterface"*)*, i1 (%"class.syncer::InvalidationInterface"*)** %33, align 8
  %35 = tail call zeroext i1 %34(%"class.syncer::InvalidationInterface"* %1) #5
  br i1 %35, label %48, label %36

36:                                               ; preds = %30, %25
  %37 = bitcast %"class.syncer::InvalidationInterface"* %0 to i64 (%"class.syncer::InvalidationInterface"*)***
  %38 = load i64 (%"class.syncer::InvalidationInterface"*)**, i64 (%"class.syncer::InvalidationInterface"*)*** %37, align 8
  %39 = getelementptr inbounds i64 (%"class.syncer::InvalidationInterface"*)*, i64 (%"class.syncer::InvalidationInterface"*)** %38, i64 4
  %40 = load i64 (%"class.syncer::InvalidationInterface"*)*, i64 (%"class.syncer::InvalidationInterface"*)** %39, align 8
  %41 = tail call i64 %40(%"class.syncer::InvalidationInterface"* %0) #5
  %42 = bitcast %"class.syncer::InvalidationInterface"* %1 to i64 (%"class.syncer::InvalidationInterface"*)***
  %43 = load i64 (%"class.syncer::InvalidationInterface"*)**, i64 (%"class.syncer::InvalidationInterface"*)*** %42, align 8
  %44 = getelementptr inbounds i64 (%"class.syncer::InvalidationInterface"*)*, i64 (%"class.syncer::InvalidationInterface"*)** %43, i64 4
  %45 = load i64 (%"class.syncer::InvalidationInterface"*)*, i64 (%"class.syncer::InvalidationInterface"*)** %44, align 8
  %46 = tail call i64 %45(%"class.syncer::InvalidationInterface"* %1) #5
  %47 = icmp slt i64 %41, %46
  br label %48

48:                                               ; preds = %30, %19, %8, %36
  %49 = phi i1 [ %47, %36 ], [ true, %8 ], [ false, %19 ], [ false, %30 ]
  ret i1 %49
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6syncer21InvalidationInterfaceC2Ev(%"class.syncer::InvalidationInterface"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.syncer::InvalidationInterface", %"class.syncer::InvalidationInterface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN6syncer21InvalidationInterfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6syncer21InvalidationInterfaceD2Ev(%"class.syncer::InvalidationInterface"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN6syncer21InvalidationInterfaceD0Ev(%"class.syncer::InvalidationInterface"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare void @__cxa_pure_virtual() unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
