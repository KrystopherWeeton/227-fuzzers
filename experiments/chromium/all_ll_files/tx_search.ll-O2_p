; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/tx_search.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/tx_search.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.RD_RECORD_IDX_NODE = type { i32, [4 x i8] }
%struct.NN_CONFIG = type { i32, i32, i32, [10 x i32], [11 x float*], [11 x float*] }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.txb_ctx = type { i32, i32 }
%struct.QUANT_PARAM = type { i32, i8, i8*, i8*, i32, i32, i32 }
%struct.txfm_param = type { i8, i8, i32, i32, i32, i8, i32 }
%struct.rdcost_block_args = type { %struct.AV1_COMP*, %struct.macroblock*, [32 x i8], [32 x i8], %struct.RD_STATS, i64, i64, i32, i32, i8, i32 }
%struct.tx_size_rd_info_node = type { %struct.TXB_RD_INFO*, [4 x %struct.tx_size_rd_info_node*] }

@__const.prune_txk_type_separ.idx_h = private unnamed_addr constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16
@prune_txk_type_separ.sel_pattern_v = internal unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 1, i32 1, i32 0, i32 2, i32 1, i32 2, i32 2, i32 0, i32 3, i32 1, i32 3, i32 2, i32 3, i32 3], align 16
@prune_txk_type_separ.sel_pattern_h = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 2, i32 1, i32 2, i32 3, i32 0, i32 3, i32 1, i32 3, i32 2, i32 3], align 16
@tx_size_wide_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 1, i32 2, i32 2, i32 4, i32 4, i32 8, i32 8, i32 16, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16], align 16
@tx_size_high_unit = internal unnamed_addr constant [19 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 2, i32 1, i32 4, i32 2, i32 8, i32 4, i32 16, i32 8, i32 4, i32 1, i32 8, i32 2, i32 16, i32 4], align 16
@mi_size_high = internal unnamed_addr constant [22 x i8] c"\01\02\01\02\04\02\04\08\04\08\10\08\10 \10 \04\01\08\02\10\04", align 16
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@txsize_sqr_up_map = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\01\01\02\02\03\03\04\04\02\02\03\03\04\04", align 16
@av1_block_error = external local_unnamed_addr global i64 (i32*, i32*, i64, i64*)*, align 8
@tx_size_2d = internal unnamed_addr constant [20 x i32] [i32 16, i32 64, i32 256, i32 1024, i32 4096, i32 32, i32 32, i32 128, i32 128, i32 512, i32 512, i32 2048, i32 2048, i32 64, i32 64, i32 256, i32 256, i32 1024, i32 1024, i32 0], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@block_size_wide = internal unnamed_addr constant [22 x i8] c"\04\04\08\08\08\10\10\10   @@@\80\80\04\10\08 \10@", align 16
@block_size_high = internal unnamed_addr constant [22 x i8] c"\04\08\04\08\10\08\10 \10 @ @\80@\80\10\04 \08@\10", align 16
@get_txb_ctx.signs = internal unnamed_addr constant [3 x i8] c"\00\FF\01", align 1
@get_txb_ctx.dc_sign_contexts = internal unnamed_addr constant [65 x i8] c"\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02", align 16
@txsize_to_bsize = internal unnamed_addr constant [19 x i8] c"\00\03\06\09\0C\01\02\04\05\07\08\0A\0B\10\11\12\13\14\15", align 16
@get_txb_ctx.skip_contexts = internal unnamed_addr constant [5 x [5 x i8]] [[5 x i8] c"\01\02\02\02\03", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\02\04\04\04\05", [5 x i8] c"\03\05\05\05\06"], align 16
@num_pels_log2_lookup = internal unnamed_addr constant [22 x i8] c"\04\05\05\06\07\07\08\09\09\0A\0B\0B\0C\0D\0D\0E\06\06\08\08\0A\0A", align 16
@bsize_to_tx_size_cat.bsize_to_tx_size_depth_table = internal unnamed_addr constant [22 x i8] c"\00\01\01\01\02\02\02\03\03\03\04\04\04\04\04\04\02\02\03\03\04\04", align 16
@max_txsize_rect_lookup = internal unnamed_addr constant [22 x i8] c"\00\05\06\01\07\08\02\09\0A\03\0B\0C\04\04\04\04\0D\0E\0F\10\11\12", align 16
@sub_tx_size_map = internal unnamed_addr constant [19 x i8] c"\00\00\01\02\03\00\00\01\01\02\02\03\03\05\06\07\08\09\0A", align 16
@model_based_tx_search_prune.prune_factor_by8 = internal unnamed_addr constant [2 x i32] [i32 3, i32 5], align 4
@aom_sse = external local_unnamed_addr global i64 (i8*, i32, i8*, i32, i32, i32)*, align 8
@av1_get_crc32c_value = external local_unnamed_addr global i32 (i8*, i8*, i64)*, align 8
@max_predict_sf_tx_size = internal unnamed_addr constant [22 x i8] c"\00\05\06\01\07\08\02\02\02\02\02\02\02\02\02\02\0D\0E\01\01\02\02", align 16
@skip_pred_threshold = internal unnamed_addr constant [3 x [22 x i32]] [[22 x i32] [i32 64, i32 64, i32 64, i32 70, i32 60, i32 60, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 64, i32 64, i32 70, i32 70, i32 68, i32 68], [22 x i32] [i32 88, i32 88, i32 88, i32 86, i32 87, i32 87, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 88, i32 88, i32 86, i32 86, i32 68, i32 68], [22 x i32] [i32 90, i32 93, i32 93, i32 90, i32 93, i32 93, i32 74, i32 74, i32 74, i32 74, i32 74, i32 74, i32 74, i32 74, i32 74, i32 74, i32 90, i32 90, i32 90, i32 90, i32 74, i32 74]], align 16
@aom_sum_squares_2d_i16 = external local_unnamed_addr global i64 (i16*, i32, i32, i32)*, align 8
@av1_ext_tx_set_lookup = internal unnamed_addr constant [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\05\04"], align 1
@tx_size_wide_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6], align 16
@tx_size_high_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 3, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6, i32 5, i32 4, i32 2, i32 5, i32 3, i32 6, i32 4], align 16
@max_txsize_lookup = internal unnamed_addr constant [22 x i8] c"\00\00\00\01\01\01\02\02\02\03\03\03\04\04\04\04\00\00\01\01\02\02", align 16
@rd_record_tree = internal unnamed_addr constant [22 x %struct.RD_RECORD_IDX_NODE*] [%struct.RD_RECORD_IDX_NODE* null, %struct.RD_RECORD_IDX_NODE* null, %struct.RD_RECORD_IDX_NODE* null, %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([1 x %struct.RD_RECORD_IDX_NODE], [1 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_8x8, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_8x16, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_16x8, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([5 x %struct.RD_RECORD_IDX_NODE], [5 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_16x16, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_1_2, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_2_1, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([5 x %struct.RD_RECORD_IDX_NODE], [5 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_sqr, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_1_2, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_2_1, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([5 x %struct.RD_RECORD_IDX_NODE], [5 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_sqr, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([10 x %struct.RD_RECORD_IDX_NODE], [10 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_64x128, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([10 x %struct.RD_RECORD_IDX_NODE], [10 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_128x64, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([20 x %struct.RD_RECORD_IDX_NODE], [20 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_128x128, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* null, %struct.RD_RECORD_IDX_NODE* null, %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_1_4, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_4_1, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_1_4, i32 0, i32 0), %struct.RD_RECORD_IDX_NODE* getelementptr inbounds ([3 x %struct.RD_RECORD_IDX_NODE], [3 x %struct.RD_RECORD_IDX_NODE]* @rd_record_tree_4_1, i32 0, i32 0)], align 16
@rd_record_tree_size = internal unnamed_addr constant [22 x i32] [i32 0, i32 0, i32 0, i32 1, i32 3, i32 3, i32 5, i32 3, i32 3, i32 5, i32 3, i32 3, i32 5, i32 10, i32 10, i32 20, i32 0, i32 0, i32 3, i32 3, i32 3, i32 3], align 16
@rd_record_tree_8x8 = internal constant [1 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }], align 4
@rd_record_tree_8x16 = internal constant [3 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }], align 16
@rd_record_tree_16x8 = internal constant [3 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }], align 16
@rd_record_tree_16x16 = internal constant [5 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\03\04" }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }, %struct.RD_RECORD_IDX_NODE { i32 1, [4 x i8] zeroinitializer }], align 16
@rd_record_tree_1_2 = internal constant [3 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\03\04\05\06" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\07\08\09\0A" }], align 16
@rd_record_tree_2_1 = internal constant [3 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\03\04\07\08" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\05\06\09\0A" }], align 16
@rd_record_tree_sqr = internal constant [5 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\03\04" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\05\06\09\0A" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\07\08\0B\0C" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0D\0E\11\12" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0F\10\13\14" }], align 16
@rd_record_tree_64x128 = internal constant [10 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\02\03\04\05" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\06\07\08\09" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0A\0B\0E\0F" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0C\0D\10\11" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\12\13\16\17" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\14\15\18\19" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\1A\1B\1E\1F" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\1C\1D !" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\22#&'" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"$%()" }], align 16
@rd_record_tree_128x64 = internal constant [10 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\02\03\06\07" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\04\05\08\09" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0A\0B\12\13" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0C\0D\14\15" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0E\0F\16\17" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\10\11\18\19" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\1A\1B\22#" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\1C\1D$%" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\1E\1F&'" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c" !()" }], align 16
@rd_record_tree_128x128 = internal constant [20 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\04\05\08\09" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\06\07\0A\0B" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0C\0D\10\11" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\0E\0F\12\13" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\14\15\1C\1D" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\16\17\1E\1F" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\18\19 !" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\1A\1B\22#" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"$%,-" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"&'./" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"()01" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"*+23" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"45<=" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"67>?" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"89@A" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c":;BC" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"DELM" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"FGNO" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"HIPQ" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"JKRS" }], align 16
@rd_record_tree_1_4 = internal constant [3 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\FF\02\FF" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\03\04\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\05\06\FF\FF" }], align 16
@rd_record_tree_4_1 = internal constant [3 x %struct.RD_RECORD_IDX_NODE] [%struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\01\02\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\03\04\FF\FF" }, %struct.RD_RECORD_IDX_NODE { i32 0, [4 x i8] c"\05\06\FF\FF" }], align 16
@prune_tx_split_no_split.no_split_thresh_scales = internal unnamed_addr constant [4 x i32] [i32 0, i32 24, i32 8, i32 8], align 16
@prune_tx_split_no_split.split_thresh_scales = internal unnamed_addr constant [4 x i32] [i32 0, i32 24, i32 10, i32 8], align 16
@aom_get_blk_sse_sum = external local_unnamed_addr global void (i16*, i32, i32, i32, i32*, i64*)*, align 8
@intra_mode_to_tx_type._intra_mode_to_tx_type = internal unnamed_addr constant [13 x i8] c"\00\01\02\00\03\01\02\02\01\03\01\02\03", align 1
@get_uv_mode.uv2y = internal unnamed_addr constant [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\00\19\19", align 16
@av1_ext_tx_used = internal unnamed_addr constant <{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }> <{ <{ i32, [15 x i32] }> <{ i32 1, [15 x i32] zeroinitializer }>, [16 x i32] [i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1] }>, align 16
@__const.search_tx_type.txk_map = private unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15], align 16
@dc_coeff_scale = internal unnamed_addr constant [19 x i16] [i16 1024, i16 2048, i16 4096, i16 4096, i16 0, i16 1448, i16 1448, i16 2896, i16 2896, i16 2896, i16 2896, i16 0, i16 0, i16 2048, i16 2048, i16 4096, i16 4096, i16 0, i16 0], align 16
@aom_sum_sse_2d_i16 = external local_unnamed_addr global i64 (i16*, i32, i32, i32, i32*)*, align 8
@fimode_to_intradir = internal unnamed_addr constant [5 x i8] c"\00\01\02\06\00", align 1
@av1_reduced_intra_tx_used_flag = internal unnamed_addr constant [13 x i16] [i16 2063, i16 1039, i16 2063, i16 527, i16 2063, i16 1039, i16 2063, i16 2063, i16 1039, i16 2063, i16 1039, i16 2063, i16 3086], align 16
@av1_ext_tx_used_flag = internal unnamed_addr constant [6 x i16] [i16 1, i16 513, i16 527, i16 3599, i16 4095, i16 -1], align 2
@av1_derived_intra_tx_used_flag = internal unnamed_addr constant [13 x i16] [i16 521, i16 1027, i16 2053, i16 527, i16 9, i16 9, i16 9, i16 2053, i16 1027, i16 517, i16 1027, i16 2053, i16 521], align 16
@get_tx_mask.thresh_arr = internal unnamed_addr constant [2 x [7 x i32]] [[7 x i32] [i32 10, i32 15, i32 15, i32 10, i32 15, i32 15, i32 15], [7 x i32] [i32 10, i32 17, i32 17, i32 10, i32 17, i32 17, i32 17]], align 16
@prune_factors = internal unnamed_addr constant [5 x i32] [i32 200, i32 200, i32 120, i32 80, i32 40], align 16
@mul_factors = internal unnamed_addr constant [5 x i32] [i32 80, i32 80, i32 70, i32 50, i32 30], align 16
@__const.prune_tx_2D.tx_type_table_2D = private unnamed_addr constant [16 x i32] [i32 0, i32 2, i32 5, i32 10, i32 1, i32 3, i32 7, i32 12, i32 4, i32 8, i32 6, i32 14, i32 11, i32 13, i32 15, i32 9], align 16
@av1_tx_type_nnconfig_map_hor = internal unnamed_addr constant [19 x %struct.NN_CONFIG*] [%struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_4x4_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_8x8_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_16x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_4x8_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_8x4_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_8x16_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_16x8_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_4x16_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_16x4_hor to %struct.NN_CONFIG*), %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null], align 16
@av1_tx_type_nnconfig_map_ver = internal unnamed_addr constant [19 x %struct.NN_CONFIG*] [%struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_4x4_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_8x8_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_16x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_4x8_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_8x4_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_8x16_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_16x8_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_4x16_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_type_nnconfig_16x4_ver to %struct.NN_CONFIG*), %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null, %struct.NN_CONFIG* null], align 16
@av1_get_horver_correlation_full = external local_unnamed_addr global void (i16*, i32, i32, i32, float*, float*)*, align 8
@av1_nn_predict = external local_unnamed_addr global void (float*, %struct.NN_CONFIG*, i32, float*)*, align 8
@av1_tx_type_nn_weights_4x4_hor_layer0 = internal constant [32 x float] [float 0xBFFA643AA0000000, float 0xBFF8B83280000000, float 0xBFFA0D9940000000, float 0xBFC6C02F20000000, float 0xC00728EB40000000, float 0xBFE7330940000000, float 0x3FE70D3060000000, float 0x3FC708EDE0000000, float 0x3FF3333340000000, float 0xBFD1B2D4E0000000, float 0x3FE8C447C0000000, float 0x3FF3782D40000000, float 0xBFFC253B80000000, float 0xBFE06833C0000000, float 0xBFF425CE60000000, float 0x3FD6673820000000, float 0xBFA5CBBC20000000, float 0xBFCDF01B80000000, float 0xBFDAC73AC0000000, float 0xBFB510F520000000, float 0x3FB853E2E0000000, float 0x4005D9FD40000000, float 0xBFC59999A0000000, float 0xBFCE0E94E0000000, float 0x3F96777080000000, float 0xBFD0E9CCC0000000, float 0x3FD1F38C60000000, float 0x3FCB367A00000000, float 0x3FF5BA0A60000000, float 0x3FD1BFC660000000, float 0x3FEC5F0700000000, float 0xBFE5DB76C0000000], align 16
@av1_tx_type_nn_weights_4x4_hor_layer1 = internal constant [32 x float] [float 0x3FFA70CDC0000000, float 0x3FF0257A80000000, float 0xBFEC94EE40000000, float 0xC000694EE0000000, float 0xBFCDBDA520000000, float 0x3FEEF84CA0000000, float 0xBFD7C5D640000000, float 0xBFCAF3A140000000, float 0x3FF238F9C0000000, float 0x3FD8C08320000000, float 0x3FEC139440000000, float 0xBFF6D4DE80000000, float 0x3FDEBAC720000000, float 0x3FE3CD74A0000000, float 0xBFA45F5AE0000000, float 0x3FBD681EC0000000, float 0x3FDEBF3380000000, float 0x3FDCED9160000000, float 0xBFCDBFF040000000, float 0x3FE80D9940000000, float 0x3FE1BF1E80000000, float 0x3FD93FD0E0000000, float 0xBFD6951820000000, float 0x3FF9758E20000000, float 0xBFF7E017A0000000, float 0xBFDEF18000000000, float 0xBFE4B391A0000000, float 0x3FF7E33480000000, float 0xBFD123F680000000, float 0xBFE4EEE100000000, float 0xBFBB424600000000, float 0x3FAC8216C0000000], align 16
@av1_tx_type_nn_bias_4x4_hor_layer0 = internal constant [8 x float] [float 0x3FF632DF60000000, float 0x3FE30D8440000000, float 0xBFF604FF40000000, float 0x3FFEBCFD40000000, float 0.000000e+00, float 0xBFD8F56EA0000000, float 0xBFD4F1D3E0000000, float 0xBFC4083120000000], align 16
@av1_tx_type_nn_bias_4x4_hor_layer1 = internal constant [4 x float] [float 0x4010497E20000000, float 0x400A282940000000, float 0x3FE29628C0000000, float 0x3FF3644FA0000000], align 16
@av1_tx_type_nnconfig_4x4_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 4, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x4_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x4_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_tx_type_nn_bias_4x4_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_4x4_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_8x8_hor_layer0 = internal constant [128 x float] [float 0xBFEB5E8920000000, float 0x3FD8137F40000000, float 0x3FC0533B20000000, float 0x3FB61283A0000000, float 0x3FDCFA5900000000, float 0x3FE193C8A0000000, float 0x3FF9B443E0000000, float 0xBFE40C9DA0000000, float 0xBFE193C8A0000000, float 0xBFB9EF73C0000000, float 0xBFC67D0280000000, float 0x3FC1DA7B00000000, float 0x3FD448E8A0000000, float 0xBFACC100E0000000, float 0x3FCA37DEA0000000, float 0xBFD753A3E0000000, float 0x40022D1E20000000, float 0xBFD52CF960000000, float 0x3FDE83BA40000000, float 0x3FEBCDDD60000000, float 0x3FD9326180000000, float 0x3FDD97CC40000000, float 0x3F86CB5360000000, float 0x3FF80D64E0000000, float 0xBFF7B75640000000, float 0xBFFB23AD20000000, float 0xBFF7F6DDA0000000, float 0xBFF638BAC0000000, float 0xBFF60A5CE0000000, float 0xBFF3A10380000000, float 0xBFFB4ACB00000000, float 0x3FE06CDF20000000, float 0xBFFA818400000000, float 0x3FFBDF1BE0000000, float 0xBFC1619120000000, float 0xBFC0CF6BE0000000, float 0xBFE2AFCCE0000000, float 0xBFE1C36120000000, float 0xBFF1B6A400000000, float 0xC002CC49C0000000, float 0x3FCCBAC720000000, float 0xBFE213BE20000000, float 0xBFEAB2BFE0000000, float 0x3FC1450F00000000, float 0x3FF524BDC0000000, float 0x4006D2A300000000, float 0x3FC1B035C0000000, float 0x3FA36A4000000000, float 0xBFF4ED3D80000000, float 0x3FA5460AA0000000, float 0xBFE69B2800000000, float 0xBFDBCB9240000000, float 0xBFC4C05920000000, float 0xBFEBD288C0000000, float 0xBFF2B75640000000, float 0x3FFAEF2A60000000, float 0x3FD2E7D560000000, float 0x3F874927A0000000, float 0xBFD036E2E0000000, float 0xBFC5935FC0000000, float 0x3FBECAAB80000000, float 0x3FAAA8EB40000000, float 0x3FD9304040000000, float 0xBF8FA43FE0000000, float 0xBFCC226800000000, float 0xBFFF0DF7A0000000, float 0xBFF035DCC0000000, float 0xBFE5D8ADA0000000, float 0xBFD9FA4400000000, float 0xBFE579BBA0000000, float 0x4000A9A2C0000000, float 0x3FC8B14660000000, float 0xC01341CD60000000, float 0xBFE4D06780000000, float 0xBFCF7C45C0000000, float 0x3FB04F4C60000000, float 0xBFBA4BDBA0000000, float 0xBFC29003E0000000, float 0xBFB17635E0000000, float 0x3FDCEDE540000000, float 0x3FCAFF1960000000, float 0xBFE9E06100000000, float 0x3FD91F8A00000000, float 0x3FFCAB94E0000000, float 0x3FFCDF5AE0000000, float 0x3FF1AD6CC0000000, float 0x3FF2D13940000000, float 0x3FEF022140000000, float 0xBFD6F51AC0000000, float 0xBFEE2DF500000000, float 0x3FE43500A0000000, float 0x40079CD0C0000000, float 0x3FDD630AA0000000, float 0xBFDB6C6160000000, float 0xBFE1CE4640000000, float 0xBFAF3775C0000000, float 0x400BF1A4C0000000, float 0xBFE04FA060000000, float 0x3FBC5A1CA0000000, float 0xBFB5844D00000000, float 0xBFB7BDCF00000000, float 0xBFCD0C5EC0000000, float 0xBFDB271360000000, float 0x3FDF1FDDE0000000, float 0xBFF9C59740000000, float 0x3FFD479920000000, float 0x3FD8142700000000, float 0xBFF340B780000000, float 0xBF87635E80000000, float 0xBFF5544140000000, float 0xBFD1984A00000000, float 0xC001E3C220000000, float 0x3FF63721E0000000, float 0x3FF6BBCD40000000, float 0x3FF6CF95E0000000, float 0x3FF5C8C940000000, float 0x3FF7816F00000000, float 0x3FF4654B40000000, float 0x3FF58F7120000000, float 0x3FC052E720000000, float 0xBFF14FBFC0000000, float 0xBFF1532620000000, float 0xBFE96FBD20000000, float 0xBFF1F95D40000000, float 0xBFF11652C0000000, float 0xBFEC1D3EE0000000, float 0xBFEFF72720000000, float 0x3FF19259A0000000], align 16
@av1_tx_type_nn_weights_8x8_hor_layer1 = internal constant [64 x float] [float 0xBFD85B6C40000000, float 0xBFDA6DC5E0000000, float 0xBFF44D2B20000000, float 0xBFE82DE000000000, float 0xBFF93126E0000000, float 0x3FE1F16B20000000, float 0xBFF6C58260000000, float 0xBFD2A0BA20000000, float 0x3FB280F120000000, float 0x3FA67B5F20000000, float 0x3FF9D273E0000000, float 0xBF9F487FC0000000, float 0x3FEA1FB400000000, float 0x40007BCD40000000, float 0x3FD15B2D40000000, float 0xBFDEEE0F40000000, float 0xBFDD234EC0000000, float 0xBFE35EF200000000, float 0xBFF9CB1EE0000000, float 0xBFE9029F20000000, float 0xBFFA67CAE0000000, float 0x3FE381ADE0000000, float 0xBFF4E238E0000000, float 0x3FD0176DE0000000, float 0x3FBD2DCB20000000, float 0x3FD83AFB80000000, float 0x3FF8C5CBC0000000, float 0x3F97A4E7A0000000, float 0x3FE5883BA0000000, float 0x4000EA6F40000000, float 0x3FDCB367A0000000, float 0xBFE687A8E0000000, float 0xBFE5BA1F40000000, float 0xBFD8CE4640000000, float 0xBFF4DC7CE0000000, float 0xBFF39F9480000000, float 0xBFF8BB3A60000000, float 0x3FE3606B80000000, float 0xBFF8691000000000, float 0x3FBD5C52E0000000, float 0x3FC6334820000000, float 0x3FB61283A0000000, float 0x3FF943D460000000, float 0xBF829DC720000000, float 0x3FEA1F7520000000, float 0x4000648940000000, float 0x3FF43C0C20000000, float 0xBFF7518D20000000, float 0xBFE812C280000000, float 0x3FAFBE76C0000000, float 0xBFF0EF0060000000, float 0xBFE533C600000000, float 0xBFFBCD74A0000000, float 0x3FEFF9B140000000, float 0xBFFDEEE100000000, float 0x3FC2A99300000000, float 0x3FDFB22D00000000, float 0x3FDDFA1A00000000, float 0x3FF52708E0000000, float 0x3FD5B5F1C0000000, float 0x3FEF0A5260000000, float 0x4003163340000000, float 0x3FF968E600000000, float 0x3FAF8B5880000000], align 16
@av1_tx_type_nn_bias_8x8_hor_layer0 = internal constant [16 x float] [float 0xBFDF822BC0000000, float 0xBFD2FF9720000000, float 0xBFF70B0F20000000, float 0x3FF1C01A40000000, float 0x3FF2A1DFC0000000, float 0xBFD64FCA40000000, float 0xBFD8CE9A20000000, float 0xBFD7320DA0000000, float 0x3FCBDF8F40000000, float 0x3FD211DBC0000000, float 0x4002BDD440000000, float 0xBFA50331E0000000, float 0xBFD0D81AE0000000, float 0x40053F0EE0000000, float 0xBFF4D26960000000, float 0xBF8E7429A0000000], align 16
@av1_tx_type_nn_bias_8x8_hor_layer1 = internal constant [4 x float] [float 0x3FFB42F840000000, float 0x3FFD2DFF80000000, float 0x3FFC8F3240000000, float 0x3FFCEEA200000000], align 16
@av1_tx_type_nnconfig_8x8_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_8x8_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_8x8_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_8x8_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_8x8_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_16x16_layer0 = internal constant [128 x float] [float 0x3FF4413560000000, float 0x3FF5CF6160000000, float 0x3FF4F3F520000000, float 0x3FF4C9C4E0000000, float 0x3FF7CF80E0000000, float 0x3FFB042300000000, float 0x3FF51EB860000000, float 0x3FC10D0680000000, float 0xBFCCC54360000000, float 0xBFEC732E00000000, float 0xBFC91DBCA0000000, float 0x3FFB230560000000, float 0x3FF38C7E20000000, float 0xBFF93E4CE0000000, float 0xBFF285BC00000000, float 0x3FAD3C3620000000, float 0xBFF2230560000000, float 0xBFEB5B0360000000, float 0xBFEFFD9FE0000000, float 0xBFED4D7F00000000, float 0xBFF0F707A0000000, float 0xBFE8F1D3E0000000, float 0xBFF28403A0000000, float 0x3FF2D974E0000000, float 0x3FF5B24200000000, float 0xBFAAD81AE0000000, float 0xBFD80FBA80000000, float 0x3FD0B588E0000000, float 0x3FC68AC5C0000000, float 0xBFBA6D4800000000, float 0x3FE8BAB220000000, float 0xBFDF4D9400000000, float 0xBFE960E940000000, float 0x3FE1A2C660000000, float 0x3FDC1B8660000000, float 0x3FD1D68C60000000, float 0x3FD2608080000000, float 0x3FDD54C980000000, float 0x3FF0E90580000000, float 0x3FA2F837C0000000, float 0xC003FF7CE0000000, float 0xBF93DD9800000000, float 0x3FAD3AE680000000, float 0x3FB454DE80000000, float 0xBFC102DE00000000, float 0xBFBA84DFC0000000, float 0x3F576DDAC0000000, float 0x3FD7DFB940000000, float 0x3FEEDED280000000, float 0x3FE10DC340000000, float 0x3FF2503DA0000000, float 0x3FEC8A0900000000, float 0x3FDBC30D40000000, float 0x3FDE91A760000000, float 0x3FED187E80000000, float 0x3FC38E9F60000000, float 0xBFC3A97E20000000, float 0x3F9E32A060000000, float 0x3FDB089A00000000, float 0x3FE5CE4640000000, float 0x3FECAB0C80000000, float 0x3FE799ED80000000, float 0x3FBC17EBA0000000, float 0x3FF93DA520000000, float 0xBFD9844D00000000, float 0xBFD510A140000000, float 0x3FD6CEEE00000000, float 0x3FD664ECE0000000, float 0xBEFF751040000000, float 0xBFCDEADD60000000, float 0x3FD2F69440000000, float 0xBFE88B2EA0000000, float 0xBF8BC55860000000, float 0x3FA5AD96A0000000, float 0x3FEAF60180000000, float 0x3FFEBB83C0000000, float 0x3FEDCFAAC0000000, float 0x3FE709AAA0000000, float 0x3FE6E9CCC0000000, float 0x3FE8773180000000, float 0xBFF990ABC0000000, float 0x3FD4B14660000000, float 0x3FF1DC4860000000, float 0x3FD528E0C0000000, float 0xBFA3165D40000000, float 0xBFAD3C3620000000, float 0x3FE9BE37E0000000, float 0xBFC2D71F40000000, float 0x3FF58B9780000000, float 0xBFAD46B260000000, float 0x3FE47C1BE0000000, float 0x3FCC10B640000000, float 0x3FDAA86D80000000, float 0x3FC0481700000000, float 0x3FE14F3780000000, float 0x3FF64E4640000000, float 0x3FFD174E60000000, float 0xBFCF606B80000000, float 0x3F838EF340000000, float 0x3FD853B8E0000000, float 0xBFE27DE940000000, float 0xBFDAB9CB60000000, float 0x3FE606E1A0000000, float 0xBFD45753A0000000, float 0xBFD9FD0D00000000, float 0xBFB9DFB940000000, float 0xBFE9665160000000, float 0x3FE8311200000000, float 0xBFC4D74920000000, float 0xBFC28C1540000000, float 0xBFCA9A2C60000000, float 0xBFE19B2800000000, float 0xBFC1A7B0C0000000, float 0xBFCC88F860000000, float 0x3FC76E2EC0000000, float 0x3FBFDBF480000000, float 0x3FE22F8380000000, float 0x3FCF721D60000000, float 0x3FB7C06E20000000, float 0x3FE6A82E80000000, float 0x3FD6E9F6A0000000, float 0xBFF86D9BE0000000, float 0xBFECADFF80000000, float 0x3FE8DA5120000000, float 0x3FC9714BA0000000, float 0x3FE8B22D00000000, float 0x3FE01D14E0000000, float 0x3FB5FEDA60000000], align 16
@av1_tx_type_nn_weights_16x16_layer1 = internal constant [64 x float] [float 0xBFFCDA7080000000, float 0xBFF1043800000000, float 0x3FE1A4FCA0000000, float 0x3FE7E2D620000000, float 0x3FC1989E00000000, float 0xBFEDC408E0000000, float 0xBFBA550880000000, float 0x3FE57B8900000000, float 0x3FCF4F0D80000000, float 0x3FF7221EA0000000, float 0x3F964063A0000000, float 0x3FD0A9E6E0000000, float 0xBFE7947060000000, float 0x3FC90B6300000000, float 0x3FE3CA6CA0000000, float 0xBFE2C09800000000, float 0xBFF082E880000000, float 0xBFE7D013A0000000, float 0x3FD339EAE0000000, float 0xBFDADBDF80000000, float 0x3FF165FD80000000, float 0x3FEECAAB80000000, float 0xBFE2ECAAC0000000, float 0x3FA385C680000000, float 0x3FABA9D200000000, float 0x3FF5592B80000000, float 0xBFE1666660000000, float 0xBFFEBFBBE0000000, float 0x3FE1815A00000000, float 0x3FC16B11C0000000, float 0x3FCC5A7080000000, float 0xBFD85E5F40000000, float 0x3FF2F14120000000, float 0xBFE8CD74A0000000, float 0xBFFD7C3B40000000, float 0x3FF0249E40000000, float 0x3FE3F11720000000, float 0xBFC3943180000000, float 0x3FF46A7F00000000, float 0x3FCD365020000000, float 0x3FC0523F60000000, float 0x3FEE0D1B80000000, float 0xBFD23DC480000000, float 0x3FE14078A0000000, float 0xBFEF0125A0000000, float 0x3FBA10E020000000, float 0x3FEA1522A0000000, float 0xBFDB89B520000000, float 0x40056410C0000000, float 0x3FE0B48D40000000, float 0x3FDFE28240000000, float 0xBFDAB1EE20000000, float 0x3FF0CE5B40000000, float 0x3FF1F36260000000, float 0x3FE7CAAB80000000, float 0xBFE8222920000000, float 0xBFA30941C0000000, float 0xBFD6E464A0000000, float 0x3FECB035C0000000, float 0x3FE43C4B00000000, float 0x3FE1594B00000000, float 0xBFB4356960000000, float 0x3FDEE53660000000, float 0x3FF169A2C0000000], align 16
@av1_tx_type_nn_bias_16x16_layer0 = internal constant [16 x float] [float 0xBFF517EBA0000000, float 0x3FC25CE5C0000000, float 0xBFB9C23B80000000, float 0x3FEB0956C0000000, float 0x3FEE98F1E0000000, float 0xBFB13404E0000000, float 0xBFE5EBAF20000000, float 0xBFED42EDC0000000, float 0xBFD46FBD20000000, float 0x3FD02D3840000000, float 0xBFC3606B80000000, float 0xBFF939CB60000000, float 0xBFC1FFD600000000, float 0xBFDAF4F0E0000000, float 0x3FEE436B80000000, float 0xBFB7C65400000000], align 16
@av1_tx_type_nn_bias_16x16_layer1 = internal constant [4 x float] [float 0x3FEA3C4B00000000, float 0x3FF44C6400000000, float 0x3FBC764AE0000000, float 0x4003DF5060000000], align 16
@av1_tx_type_nnconfig_16x16 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_16x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_16x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_16x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_16x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_4x8_hor_layer0 = internal constant [32 x float] [float 0x3F61DBCAA0000000, float 0xBFDACD9E80000000, float 0xBFE396BBA0000000, float 0xBFEDA0CF20000000, float 0x3FE15F84C0000000, float 0xBFBBE61D00000000, float 0x3FE69F01C0000000, float 0x3FDDF6D340000000, float 0xBFF9DB0DE0000000, float 0xBFB69D7340000000, float 0xBFEEFD0D00000000, float 0x3FF2F54F40000000, float 0xBFDCE8D100000000, float 0xBFE4F14120000000, float 0xBFD4983520000000, float 0xBFBA9F16C0000000, float 0x3FF0B35D20000000, float 0x3FED6809E0000000, float 0x3FEB637360000000, float 0x3FB529DC80000000, float 0x3FF5A97E20000000, float 0xC0003F6800000000, float 0x3FB4E8FB00000000, float 0xBFB04FF440000000, float 0xBFD11BC560000000, float 0xBFDEE33F00000000, float 0xBFB639D5E0000000, float 0x4003869300000000, float 0xBFF5BE4CE0000000, float 0xBFF2BD46C0000000, float 0x3FFB04C060000000, float 0x3FBA839040000000], align 16
@av1_tx_type_nn_weights_4x8_hor_layer1 = internal constant [32 x float] [float 0xBFF85512E0000000, float 0xBFF0FFB6A0000000, float 0x3FD69AAA40000000, float 0xBFDF7E1320000000, float 0x3FE1729B20000000, float 0x3FDC555C60000000, float 0x3FF5F05000000000, float 0xBFD8EEB700000000, float 0xBFF49F4B20000000, float 0xBFE24855E0000000, float 0x3FA7D95580000000, float 0x3FE3EDD060000000, float 0x3FD84F4C60000000, float 0x3FD5473040000000, float 0x3FFA7CCE20000000, float 0xBFE22D8C20000000, float 0xBFF62EE640000000, float 0xBFE8670E20000000, float 0x3FE5BC7F80000000, float 0x3FB67C06E0000000, float 0xBF8D8D79E0000000, float 0x3FD65E3540000000, float 0x3FF75475A0000000, float 0xBFE06D1E20000000, float 0xBFF69CEB00000000, float 0xBFC50F51A0000000, float 0x3FAD773180000000, float 0x3FD4196520000000, float 0xBFE00FA580000000, float 0x3FC7520080000000, float 0x3FFD62E0A0000000, float 0xBFE8169C20000000], align 16
@av1_tx_type_nn_bias_4x8_hor_layer0 = internal constant [8 x float] [float 0x400778A5C0000000, float 0x3FE562CBA0000000, float 0xBFCB6A9400000000, float 0.000000e+00, float 0xBFE7522A60000000, float 0x3FC35CD0C0000000, float 0xBFF77B15C0000000, float 0x3FC5527E60000000], align 16
@av1_tx_type_nn_bias_4x8_hor_layer1 = internal constant [4 x float] [float 0xBFF2CAF500000000, float 0xC002164D80000000, float 0xBFFCC73040000000, float 0xC0021B4CC0000000], align 16
@av1_tx_type_nnconfig_4x8_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 4, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x8_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x8_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_tx_type_nn_bias_4x8_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_4x8_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_8x4_hor_layer0 = internal constant [128 x float] [float 0xBFCCCA2DC0000000, float 0x3FC1139440000000, float 0xC010213560000000, float 0xBFE47C1BE0000000, float 0x3F9C7F77A0000000, float 0x3FE3595FE0000000, float 0xBFC1119CE0000000, float 0x3FC58A3300000000, float 0x3FBF948560000000, float 0x3FE0EDE540000000, float 0x3FF2F3EAC0000000, float 0xBFD4C08320000000, float 0x3FC0B4E120000000, float 0x3FEE04EA40000000, float 0xC00DB17580000000, float 0x3F9E9E1B00000000, float 0xC0128AD580000000, float 0x3FAD028A20000000, float 0x3FA20AFA20000000, float 0xBFB311C6E0000000, float 0xBFDC29F160000000, float 0xBFD541F220000000, float 0xBFD59389C0000000, float 0x3FB4BA7320000000, float 0x3FE37AB760000000, float 0x3FD2EEB700000000, float 0x3FCBC55860000000, float 0xBFE9317AC0000000, float 0xBFC572EF00000000, float 0xBFD100BCC0000000, float 0xBF7D7DBF40000000, float 0xBFF1CBD120000000, float 0x3FF94F6BE0000000, float 0x3FF95AA500000000, float 0x3FF7C408E0000000, float 0x3FF8B328C0000000, float 0x3FF99C6D20000000, float 0x3FF76147A0000000, float 0x3FF8A10E00000000, float 0x3FAE963DC0000000, float 0xBFFD2695A0000000, float 0x3FDE1B8660000000, float 0x3FD860AA60000000, float 0x3FCAAA8EC0000000, float 0xBFACDC8760000000, float 0x3FAA897640000000, float 0x3F8B185480000000, float 0xBFD06C7640000000, float 0x3FE929B280000000, float 0xBFE19F40A0000000, float 0xBF9E76C8C0000000, float 0xBFF4AFE1E0000000, float 0xBFE8B391A0000000, float 0xC002BE7180000000, float 0xBFF47DE940000000, float 0x3FE8ED13A0000000, float 0xBFFB288CE0000000, float 0xBFFA90ABC0000000, float 0xBFF7177860000000, float 0xBFF8CF6160000000, float 0xBFF8229C80000000, float 0xBFF3CA57A0000000, float 0xBFFCE7F4E0000000, float 0x3FE80678C0000000, float 0x40029AA500000000, float 0x3FAE186980000000, float 0x3FE9BD7B20000000, float 0x3FEC58CD20000000, float 0x3FE6210380000000, float 0x3FEC7FCBA0000000, float 0x3FE7923A20000000, float 0x3FEBEC41E0000000, float 0xBF7E83E420000000, float 0xBFF4CE9A20000000, float 0xBFE3048160000000, float 0x400094E3C0000000, float 0x3FF0877460000000, float 0xBFEB1A60E0000000, float 0xBFF31A5660000000, float 0x3FC67674E0000000, float 0xBFCFF8CA80000000, float 0xC00D60F3C0000000, float 0x3FCA9984A0000000, float 0xBFE14341A0000000, float 0xBFA9F2BAA0000000, float 0x3FEC3F6800000000, float 0x3FF4DBFF00000000, float 0x3FBA565800000000, float 0x3FB36AE7E0000000, float 0x3FBF620EE0000000, float 0xBFD3B8BAC0000000, float 0x3FD0479920000000, float 0xC006915380000000, float 0xC0058EFDC0000000, float 0x3F9844D020000000, float 1.250000e-01, float 0xBFCAE78180000000, float 0xBFDF803460000000, float 0x3FA2A06640000000, float 0xBFD3119CE0000000, float 0x3FD2553260000000, float 0xBFDEFF1960000000, float 0xBFD8B19A40000000, float 0xBFD49320E0000000, float 0xBFDE34C1A0000000, float 0x3FD4C27A60000000, float 0x3FD4D16340000000, float 0xBFC8E11DC0000000, float 0x3FD371F360000000, float 0xBFD4670E20000000, float 0x3FD0DEA8A0000000, float 0xBFBF23CC80000000, float 0xBFDBEF1FE0000000, float 0xBFB5379FA0000000, float 0xBFD5667B60000000, float 0xBFE45AC480000000, float 0xBFDDDAA500000000, float 0xBFDDCEAF20000000, float 0x3FDE988900000000, float 0xBFDF5E2040000000, float 0xBFF8328B60000000, float 0xBFF2290AC0000000, float 0xBFF3467380000000, float 0xBFF0775100000000, float 0xBFF1781840000000, float 0xBFEE0E0220000000, float 0xBFFDAF05A0000000, float 0x3FED9C38C0000000], align 16
@av1_tx_type_nn_weights_8x4_hor_layer1 = internal constant [64 x float] [float 0xBFDFA469E0000000, float 0xBFD4745380000000, float 0xBFEB2EC6C0000000, float 0xBFEB74BC60000000, float 0xC0030577E0000000, float 0x3FEA0A1380000000, float 0xBFE76A4000000000, float 0xBFE6301640000000, float 0x3FEC6B11C0000000, float 0xBFDF83CF20000000, float 0xBFDC9E6EE0000000, float 0xBFBD46B260000000, float 0x3FB98B2EA0000000, float 0x3FC3B3FA60000000, float 0x3FC5DDC1E0000000, float 0x3FF72D0E60000000, float 0xBFCA584F40000000, float 0xBFA91E6460000000, float 0x3FDB837B40000000, float 0xBFE3D20B00000000, float 0xBFF18CFC00000000, float 0xBFF261B080000000, float 0xBFF5E69060000000, float 0xBFF4EEB700000000, float 0xBFE30EFDC0000000, float 0xBFD3C725C0000000, float 0xBFB6CCA2E0000000, float 0x3FB1CCB7E0000000, float 0x3FC3B0B3A0000000, float 0xBFA577D960000000, float 0xBFE18DF7A0000000, float 0x3FFD3A68C0000000, float 0xBFCCAFA300000000, float 0x3FAAF3A140000000, float 0xBFDD57BC80000000, float 0xBFE75AEE60000000, float 0x3FEC045780000000, float 0x3FA512EC60000000, float 0xBFF4C38B00000000, float 0xC0050A9BC0000000, float 0x3FF1744920000000, float 0xBFD7121AC0000000, float 0xBFC56872C0000000, float 0x3FBDC3DEE0000000, float 0x3FDFF290A0000000, float 0x3FB34CC260000000, float 0x3F7F40A280000000, float 0x3FE795FEE0000000, float 0x3FEC189380000000, float 0x3FE2417440000000, float 0x3FE38294A0000000, float 0x3FF071D3E0000000, float 0x3FF888C400000000, float 0xBFD6FC5040000000, float 0x3FB068DB80000000, float 0x3FF7221420000000, float 0x3FB8D3AE60000000, float 0x3FE70110A0000000, float 0x3FE363DC40000000, float 0x3FEAE9B7C0000000, float 0xBFE0240B80000000, float 0xBFD8D91680000000, float 0x3FC40053E0000000, float 0xBFF1B46340000000], align 16
@av1_tx_type_nn_bias_8x4_hor_layer0 = internal constant [16 x float] [float 0x3FD7719F80000000, float 0x3F9DB4CC20000000, float 0x3FE493DDA0000000, float 0x3FF87DE940000000, float 0xBFF66FC7A0000000, float 0x3FA3B8E4C0000000, float 0xBFA9D1F600000000, float 0x3FECAEA740000000, float 0xBFF3BADC00000000, float 0x3FB2031CE0000000, float 0x3FC5D97F60000000, float 5.625000e-01, float 0xBFD2887A80000000, float 0xBFD50941C0000000, float 0xBF9172EF00000000, float 0x3FE5D09180000000], align 16
@av1_tx_type_nn_bias_8x4_hor_layer1 = internal constant [4 x float] [float 0xBFEDB72C60000000, float 0xBFF7396280000000, float 0xBFF55FC3C0000000, float 0xC0115AA7A0000000], align 16
@av1_tx_type_nnconfig_8x4_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_8x4_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_8x4_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_8x4_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_8x4_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_8x16_hor_layer0 = internal constant [128 x float] [float 0xBFF9E64700000000, float 0xBFF95CFAA0000000, float 0xBFF69906C0000000, float 0xBFF8855320000000, float 0xBFF9912980000000, float 0xBFF41F7F80000000, float 0xBFFE682940000000, float 0x3FE77F77A0000000, float 0x3FF19F2120000000, float 0x3FDE1D53C0000000, float 0x3FDBAACDA0000000, float 0xBFDB869840000000, float 0xBFB762B6A0000000, float 0xBFB2A8EB40000000, float 0xBFD8D288C0000000, float 0x3FF3CDD300000000, float 0xBFD69984A0000000, float 0x3FE79CCB80000000, float 0x3FEC6FBD20000000, float 0x3FE84E65C0000000, float 0x3FE40678C0000000, float 0x3FDE103860000000, float 0x3FCBF822C0000000, float 0x3FFA361BC0000000, float 0xC0022EE100000000, float 0xBFE5ED5280000000, float 0xBFE65729C0000000, float 0xBFEAFF6D40000000, float 0xBFED38EF40000000, float 0xBFE42D7740000000, float 0xBFF0870120000000, float 0x3FE1D95580000000, float 0xBF4743E960000000, float 0x3FF467FF60000000, float 0x3FF99C62A0000000, float 0x3FF68E5600000000, float 0x3FEF28B6E0000000, float 0x3FEDB5B2E0000000, float 0x3FFE8956C0000000, float 0x3FC02949A0000000, float 0x3FFB8331E0000000, float 0x3FF6B76B40000000, float 0xBFBF51ACA0000000, float 0xBFF4544BC0000000, float 0x3FE862E0A0000000, float 0x3F998C7E20000000, float 0xBFE573C0C0000000, float 0xBFAAE7D560000000, float 0x3FFBAAED20000000, float 0x3FF79EECC0000000, float 0x3FF7877EE0000000, float 0x3FF79E4500000000, float 0x3FF7E58A40000000, float 0x3FFA94B9C0000000, float 0x3FF820CF20000000, float 0x3FC5F212E0000000, float 0xC00279CB60000000, float 0xC000DE3540000000, float 0xBFF41A0D00000000, float 0xBFCFDF3B60000000, float 0x3FE73B8E40000000, float 0x3FF44063A0000000, float 0x3FEF5119C0000000, float 0xBFE4F2F980000000, float 0x3FF4FB0B40000000, float 0x3FD139EAE0000000, float 0x3FBF136A40000000, float 0xBFC0558640000000, float 0xBFD90D3060000000, float 0xBFD2017980000000, float 0x3FB0DAE3E0000000, float 0x4001F414A0000000, float 0x3FCCD20B00000000, float 0x3FA9A804A0000000, float 0xBF911C6D20000000, float 0xBFD2DD5900000000, float 0xBFD9CF0300000000, float 0x3FCB0E8000000000, float 0xBFBDA07B40000000, float 0xBFD3F04580000000, float 0xBFD791E640000000, float 0x3FA2E9CCC0000000, float 0xBFB25C3DE0000000, float 0xBFE44B48E0000000, float 0xC00925E8A0000000, float 0xBFF3B33340000000, float 0x3FE4E64700000000, float 0xBFBD330940000000, float 0x3FFF90E020000000, float 0xBFBAAE2980000000, float 0x3FEAD8C2A0000000, float 0x3FEB35E740000000, float 0x3FDFD2C7C0000000, float 0x3FE9C115E0000000, float 0x3FE0771CA0000000, float 0x3FF10811C0000000, float 0x3FE88AB0C0000000, float 0x3FE73B4F60000000, float 0xBFE924B340000000, float 0xBFE1439580000000, float 0x3FDA2C12A0000000, float 0x3F4C2E33E0000000, float 0x3FBB9B6700000000, float 0xBFE68F3240000000, float 0x3FF29F8A00000000, float 0x3FF255E4A0000000, float 0x3FF228CBE0000000, float 0x3FF1F2C520000000, float 0x3FF0560420000000, float 0xBFF6030800000000, float 0xC007C58260000000, float 0x3FD5B20320000000, float 0x3FDAE36900000000, float 0x3FEB9FE860000000, float 0x40028F0300000000, float 0x4000521580000000, float 0x3FEE8F9B20000000, float 0x3FC34DBE00000000, float 0x3FBD844D00000000, float 0xBF9A5B9620000000, float 0xC01315B2E0000000, float 0x3FC0F80DC0000000, float 0xBF9172EF00000000, float 0xBFCD8D25E0000000, float 0xBF80E56040000000, float 0x3FB1FE8680000000, float 0xBFD201CD60000000, float 0x3FDB3C6000000000], align 16
@av1_tx_type_nn_weights_8x16_hor_layer1 = internal constant [64 x float] [float 0x3FB1244A60000000, float 0xBFBD898B20000000, float 0xBFF6B98200000000, float 0x3FD518FC60000000, float 0x3FE9EF49C0000000, float 0x3F87785720000000, float 0x3FF359E840000000, float 0xBFC5A176E0000000, float 0x3FE1081C20000000, float 0xBFD9BF9C60000000, float 0x3F9249E440000000, float 0xBFE76FFC20000000, float 0x3FF4C28F60000000, float 0x3FFF3AC720000000, float 0x3FE6721D60000000, float 0x3FF6ED0920000000, float 0x3FE863F140000000, float 0x3FE9947060000000, float 0xBFFCA44A60000000, float 0xBFF26DB0E0000000, float 0x3FDB3775C0000000, float 0xBFE59B2800000000, float 0x3FE8B9B660000000, float 0xBFD3A56580000000, float 0x4003AE2980000000, float 0xBFDFE3D1C0000000, float 0x3F9D70A3E0000000, float 0x3FF1987400000000, float 0x3FF7A03C40000000, float 0x3FE3C00540000000, float 0x3FE3A747E0000000, float 0xBFBFA63740000000, float 0x40043E6C40000000, float 0x3F711F0C40000000, float 0xBFF63BF720000000, float 0x3FEC328B60000000, float 0x3FD91CEB00000000, float 0xBFC8C3A000000000, float 0xC004B020C0000000, float 0xBFD593DDA0000000, float 0x3FF17DDEC0000000, float 0xBFD48FB000000000, float 0x3F992641C0000000, float 0xBFC87AE140000000, float 0x3FF20956C0000000, float 0x3FE547D800000000, float 0x3FD5F30E80000000, float 0x3FF2622E60000000, float 0x3FD32DCB20000000, float 0x3FF312CD00000000, float 0x3FCC4C5980000000, float 0xBFBEA7EFA0000000, float 0x3FF7F6D340000000, float 0xBFF58A3300000000, float 0xC004ADA120000000, float 0xBFF58A86E0000000, float 0x3FF8835BE0000000, float 0x3FDD34ACA0000000, float 0xBFF7C193C0000000, float 0x3FC662CBA0000000, float 0x3FE6F90960000000, float 0xC000F78580000000, float 0xBFF37C06E0000000, float 0xBFF4FFB6A0000000], align 16
@av1_tx_type_nn_bias_8x16_hor_layer0 = internal constant [16 x float] [float 0x3FEDF51AC0000000, float 0xBFCEB851E0000000, float 0xBFF44A96A0000000, float 0x3FE935A860000000, float 0x3FC185F060000000, float 0xBFCC17EBA0000000, float 0xBFF739D5E0000000, float 0x3FDC88A480000000, float 0xBFFED028A0000000, float 0xBFCDA804A0000000, float 0x3FE1EBD900000000, float 0xBFF3309EA0000000, float 0x3FFD0CB2A0000000, float 0xBFF06C41E0000000, float 0xBFEA240B80000000, float 0x3FB540CC80000000], align 16
@av1_tx_type_nn_bias_8x16_hor_layer1 = internal constant [4 x float] [float 0x3FEAACC4E0000000, float 0x3FF11999A0000000, float 0x3FFC6C56E0000000, float 0x3FF7EE6320000000], align 16
@av1_tx_type_nnconfig_8x16_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_8x16_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_8x16_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_8x16_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_8x16_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_16x8_hor_layer0 = internal constant [128 x float] [float 0x3F9A9FBE80000000, float 0x3FB90D5A60000000, float 0xBFF0D12EC0000000, float 0xBFD6C7B8A0000000, float 0xBFC40AD040000000, float 0x4007FC7A40000000, float 0xBFB230FD00000000, float 0xBFB9DBCAA0000000, float 0xBFC2728620000000, float 0xBFEAD013A0000000, float 0xBFC8E02220000000, float 0x400244FA00000000, float 0x3FFEAD2340000000, float 0xBF83943180000000, float 0xBFED013AA0000000, float 0x3FB77C45C0000000, float 0x3FF96C56E0000000, float 0x3FF63B2FE0000000, float 0x3FF7E8B1A0000000, float 0x3FF83890E0000000, float 0x3FF72B2180000000, float 0x3FF8912980000000, float 0x3FF726AA80000000, float 0x3FC6B94DA0000000, float 0x3FFB285880000000, float 0xBFE92B2C00000000, float 0x3FD3E61D00000000, float 0xBFCE61D000000000, float 0x3F96D86EC0000000, float 0xBFB94D9400000000, float 0xBF74317AC0000000, float 0x3FF363E6C0000000, float 0xBFFF19E300000000, float 0xBFD6299D80000000, float 0xBFE2A8AC60000000, float 0x3FE7221420000000, float 0xBFD33C6000000000, float 0x3FED02DE00000000, float 0xBFE265FD80000000, float 0x40089FEDA0000000, float 0x3FE790EAA0000000, float 0x3FF6E35400000000, float 0x3FF57F38C0000000, float 0xBFE54C1A80000000, float 0x3FE0085B20000000, float 0xBFE493DDA0000000, float 0x3FDAE87D20000000, float 0xBFFA961E40000000, float 0xBFAD5A5BA0000000, float 0xC0041CB680000000, float 0xBFF02BB440000000, float 0xBFD55E9E20000000, float 0xBFD51C6D20000000, float 0xBFED93F2A0000000, float 0x3FFDCE11E0000000, float 0xBFB2A99300000000, float 0xBFD0D35A80000000, float 0xBFE60FA580000000, float 0x3FFCFC2660000000, float 0x3FE528F5C0000000, float 0xC000CC4480000000, float 0x3FC5CD0BC0000000, float 0xBFE59667C0000000, float 0xBF81F0C340000000, float 0xBFF8064EC0000000, float 0x3FF2BE9640000000, float 0x3FF00F7120000000, float 0x3FD5225320000000, float 0x3FE7E685E0000000, float 0x3FDB7121A0000000, float 0x3FE3C08320000000, float 0xBFEADE93A0000000, float 0x3FB83C4B00000000, float 0xBFD987E7C0000000, float 0x3FD5AC1D20000000, float 0x3FBB478420000000, float 0xBFB7AD6CC0000000, float 0xBFD971C980000000, float 0x3FDF072080000000, float 0xBFD680F120000000, float 0x3FF785B180000000, float 0x3FFADA31A0000000, float 0xBFFD72BAA0000000, float 0x3FC4DA3C20000000, float 0xBFE00B0F20000000, float 0xC0026493C0000000, float 0xBFDB04D560000000, float 0xBFC1192640000000, float 0x3FF75805E0000000, float 0xBFC2DEFC80000000, float 0xBF9C4B09E0000000, float 0xBFD1EC0300000000, float 0xBF8BEF49C0000000, float 0x3FCAE5DE20000000, float 0xBFD2939EA0000000, float 0xBFC9DA7B00000000, float 0x3FF63482C0000000, float 0x3FE2276740000000, float 0x3FD197CC40000000, float 0x3FDBAA4FC0000000, float 0x3FDA72DA20000000, float 0x3FDB5768A0000000, float 0x3FEC1205C0000000, float 0xBFFE692500000000, float 0xC01432B2C0000000, float 0xBFC6939EA0000000, float 0xBFE2991BC0000000, float 0xBFB6EC17E0000000, float 0xBFC1869840000000, float 0xBFBF8D4FE0000000, float 0xBFD8ABB440000000, float 0x3FE5449120000000, float 0xBFF6C7C300000000, float 0xBFF381B860000000, float 0xBFF61C62A0000000, float 0xBFF5D8A320000000, float 0xBFF64CEC40000000, float 0xBFF3240100000000, float 0xBFF991E640000000, float 0x3FD25C67E0000000, float 0x3FD4BB6EE0000000, float 0x3FE0AE5360000000, float 0x3F84BF09A0000000, float 0xBFD286D720000000, float 0xBFD0D3D860000000, float 0xBFDC5F30E0000000, float 0xBFD767A100000000, float 0xBFE03E0380000000], align 16
@av1_tx_type_nn_weights_16x8_hor_layer1 = internal constant [64 x float] [float 0x3FE1DD1A20000000, float 0xBFC2BFDB40000000, float 0x3FEA391920000000, float 0xBFDD5AD960000000, float 0xBFFDC5C140000000, float 0xBFC621EA40000000, float 0x3FD64DA900000000, float 0x3FC36555C0000000, float 0x3FFC1999A0000000, float 0xBFD07C84C0000000, float 0x3FE70B7800000000, float 0xBFD33CDDE0000000, float 0xBFE28D4FE0000000, float 0x3FB37AA260000000, float 0xBF94D94080000000, float 0x3FB4413560000000, float 0x3FE243FE60000000, float 0xBFC1A75CE0000000, float 0x3FE7BD2740000000, float 0xBFEC0DD820000000, float 0xBFFE02F300000000, float 0xBFD173EAC0000000, float 0x3FD970CDC0000000, float 0x3FC9279140000000, float 0x400047F780000000, float 0xBFD5158B80000000, float 0x3FE8667B60000000, float 0x3FA685DB80000000, float 0xBFE4374BC0000000, float 0x3FD7F2E480000000, float 0x3FB54562E0000000, float 0x3FA6DDACE0000000, float 0x3FE3481700000000, float 0xBFC068DB80000000, float 0x3FFA9205C0000000, float 0xBFE309E980000000, float 0xBFFF2AC320000000, float 0xBFC30110A0000000, float 0x3FD93B3A60000000, float 0x3FC4D45620000000, float 0x3FFCE4D800000000, float 0x3FDA5DB760000000, float 0x3FE7E6AFC0000000, float 0xBFCB286300000000, float 0xBFE43721E0000000, float 0x3FB8587940000000, float 0xBFD6BE8BC0000000, float 0xBFA69057E0000000, float 0x3FEDB606C0000000, float 0x3FC9C7CD80000000, float 0x3FFAFD2200000000, float 0xBFE216C620000000, float 0xC002282400000000, float 0x3FC09CA180000000, float 0x3FE7996FA0000000, float 0x3FDB290AC0000000, float 0x40000DC880000000, float 0xBFD9B890E0000000, float 0x3FEE890D60000000, float 0x3FCDBD5120000000, float 0xBFE9E7AB80000000, float 0x3FE50F7BA0000000, float 0x3FDFA4E7A0000000, float 0xBFCDE25840000000], align 16
@av1_tx_type_nn_bias_16x8_hor_layer0 = internal constant [16 x float] [float 0xBFB64302C0000000, float 0xBFCC4D0140000000, float 0xBFF6FA0520000000, float 0xBFF0127920000000, float 0xBFF82A25E0000000, float 0x3FE46540C0000000, float 0x3FDCF76600000000, float 0x3FC4C5EB40000000, float 0x40100E43A0000000, float 0xBFCBD66280000000, float 0x3FD74D9400000000, float 0xBFB66F9340000000, float 0xBFBF8FEF00000000, float 0x3FB70110A0000000, float 0x3FF14C78E0000000, float 0xBF6205BC00000000], align 16
@av1_tx_type_nn_bias_16x8_hor_layer1 = internal constant [4 x float] [float 0x400C92F1A0000000, float 0x400368B1A0000000, float 0x400A802F20000000, float 0x4000A9B7C0000000], align 16
@av1_tx_type_nnconfig_16x8_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_16x8_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_16x8_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_16x8_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_16x8_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_4x16_hor_layer0 = internal constant [32 x float] [float 0x3FD7628CC0000000, float 0x3FD06D4800000000, float 0x3F8E892260000000, float 0xBFCC1B8660000000, float 0x4004688CE0000000, float 0x3FC68C1540000000, float 0x3FFCC80C80000000, float 0x3FFA8CBD20000000, float 0xBFDC646F20000000, float 0x3F7CEAF260000000, float 0xBFE5C2E340000000, float 0xBFE4985F00000000, float 0x3FFC1F2120000000, float 0x3FFEB47840000000, float 0x3FF7A10E00000000, float 0x3FB8B43960000000, float 0xC00CBD5120000000, float 0xBFD6670E20000000, float 0x3FEDDABA00000000, float 0x3FD0840E20000000, float 0xBFB4DFCE40000000, float 0x3FE962E0A0000000, float 0x3FE97381E0000000, float 0x3FF183C4C0000000, float 0x3FF941BDA0000000, float 0xBFE06F5440000000, float 0x3FECFA1A00000000, float 0xBFFAD6CB60000000, float 0xBFFBEE19C0000000, float 0xBFEC6CF420000000, float 0xBFFC6A9E60000000, float 0x4001465940000000], align 16
@av1_tx_type_nn_weights_4x16_hor_layer1 = internal constant [32 x float] [float 0xBFE24D1640000000, float 0xBFF76D4800000000, float 0x3FE58BC160000000, float 0xBFF2678180000000, float 0x3FDD9FD360000000, float 0x3FEA001500000000, float 0x4004243560000000, float 0xBFD15FC3C0000000, float 0x3F7F2BA9E0000000, float 0xC001379520000000, float 0xBFE649BA60000000, float 0xBFE0423100000000, float 0x3FEDB4CC20000000, float 0x3FDD3A3EC0000000, float 0x4002BC6FC0000000, float 0xBFE0F0ED40000000, float 0x3FE0529340000000, float 0xBFF8E11DC0000000, float 0xBF8C13FD00000000, float 0xBFBFA1A0C0000000, float 0x3FE551D680000000, float 0x3FEC2C7B80000000, float 0x4005305FA0000000, float 0xBFF47BDD00000000, float 0xBFC67FF580000000, float 0xBFFCCE3160000000, float 0xBFD49E6EE0000000, float 0x3FECA56580000000, float 0x3FF48BCBE0000000, float 0xBFD3689CA0000000, float 0x4003A05680000000, float 0xBFEAAACDA0000000], align 16
@av1_tx_type_nn_bias_4x16_hor_layer0 = internal constant [8 x float] [float 0xBFD75182A0000000, float 0xC001D187E0000000, float 0xBF81244A60000000, float 0xBFF5870120000000, float 0x3FE4191140000000, float 0xBFCA76C8C0000000, float 0x4013AD7740000000, float 0xBFE1F1FDE0000000], align 16
@av1_tx_type_nn_bias_4x16_hor_layer1 = internal constant [4 x float] [float 0x4002A7E520000000, float 0x400AE64C20000000, float 0x3FFA043800000000, float 0x400748D3A0000000], align 16
@av1_tx_type_nnconfig_4x16_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 4, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x16_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x16_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_tx_type_nn_bias_4x16_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_4x16_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_16x4_hor_layer0 = internal constant [128 x float] [float 0x3FF74169C0000000, float 0xBFC426AA80000000, float 0x3FDC4FA060000000, float 0x3FD0846200000000, float 0x3FD5B96280000000, float 0x3FD8C100E0000000, float 0x3FCF449120000000, float 0x3FFAC41360000000, float 0x3FB86B7AA0000000, float 0xBFDB7B4A20000000, float 0xBFD42A1B60000000, float 0xBF593B3A60000000, float 0xC007E680A0000000, float 0xC002383280000000, float 0xBFDF7A2480000000, float 0x3FB7E479A0000000, float 0xBFEFB035C0000000, float 0xBFCC5C67E0000000, float 0x3FE12F2FA0000000, float 0x3FE357D180000000, float 0x3FC413FD00000000, float 0xBFA7C99AE0000000, float 0x3FD0DBB5A0000000, float 0x4000FD2740000000, float 0x3FD1566D00000000, float 0xBFF25AC480000000, float 0xBFE486D720000000, float 0xBFED503320000000, float 0xBFE81B7180000000, float 0xBFE337C9A0000000, float 0xBFF40370C0000000, float 0x3FFAF4A780000000, float 0xC009ED0E60000000, float 0xC010279920000000, float 0xC000A15220000000, float 0xBF98088500000000, float 0x3F6B478420000000, float 0xBF89C8C940000000, float 0xBF730BE0E0000000, float 0x3F99DDC1E0000000, float 0x3FD7391920000000, float 0xBFBA6DEFC0000000, float 0x400105BC00000000, float 0xBFE7DDEBE0000000, float 0xBFF0CEEE00000000, float 0x3FFC8E0220000000, float 0xBFE19EECC0000000, float 0xBFA1077460000000, float 0x4003BE1320000000, float 0x3FF2EF9340000000, float 0x3FEEB98C80000000, float 0x3FF04577E0000000, float 0x3FF1B18540000000, float 0x3FF1297E20000000, float 0x3FF1D84F40000000, float 0xBFF106AD20000000, float 0x3FD4BA9D20000000, float 0xBFFDFA4400000000, float 0xBFC27A0FA0000000, float 0x3FFC77D960000000, float 0x3FF1983520000000, float 0xBFC03AFB80000000, float 0xBFE3A4BDC0000000, float 0xBFB8E4B880000000, float 0xBFD52E48E0000000, float 0x3FF1F08460000000, float 0x3FF0206640000000, float 0x3FF862F5A0000000, float 0x3FF599C380000000, float 0x3FF539A180000000, float 0x3FE3810620000000, float 0xBFF22A8440000000, float 0xBFD8BD1240000000, float 0x3FB0922540000000, float 0x4000DA8040000000, float 0x3FD1BFF040000000, float 0xBFD88CBD20000000, float 0xBFFEA1FF20000000, float 0xBFF3A0CF20000000, float 0x3FAD9FD360000000, float 0x3FEF2DA120000000, float 0x400198ECA0000000, float 0x3FE0257000000000, float 0x3FE945B6C0000000, float 0x3FEE756440000000, float 0xBFD4BEB5C0000000, float 0x3FDFA3C220000000, float 0xBFA7121AC0000000, float 0x3FC84FA060000000, float 0xBFB467DFE0000000, float 0x3FCE93F2A0000000, float 0xBFB945B6C0000000, float 0xBFE521AB40000000, float 0x3FAB87BDC0000000, float 0x4005922FA0000000, float 0xBFB5249E40000000, float 0xBFE625AEE0000000, float 0xBFF153CDE0000000, float 0xBFFF70CDC0000000, float 0xC0028E4640000000, float 0xBFE9A6CA00000000, float 0xBFE9BEF4A0000000, float 0xBFF5B05FA0000000, float 0xBFAB40F660000000, float 0xC011B4D160000000, float 0xBFD3AB2180000000, float 0xBFBED48020000000, float 0x3FBC7B8900000000, float 0x3FBB92E1E0000000, float 0xBFC324C840000000, float 0xBF96B65AA0000000, float 0x3FDA400FC0000000, float 0x3FF2A7E520000000, float 0x3FF2573420000000, float 0x3FF20F9B20000000, float 0x3FF2FCF800000000, float 0x3FF3F2C520000000, float 0x3FF49758E0000000, float 0x3FF1CD9E80000000, float 0x3FB5139440000000, float 0x3FFC1205C0000000, float 0x3FDF818400000000, float 0xBFD64F2280000000, float 0xBFC5CD0BC0000000, float 0x3FD2BE8BC0000000, float 0x3FDE3126E0000000, float 0x3FC863F140000000, float 0xBFF906AD20000000], align 16
@av1_tx_type_nn_weights_16x4_hor_layer1 = internal constant [64 x float] [float 0xBFF2BB8E40000000, float 0x3FC87160A0000000, float 0xBFF0EBA4A0000000, float 0xBFD3B6C380000000, float 0xBFF3780340000000, float 0xBFE58587A0000000, float 0x3FF99E4F80000000, float 0x3FAE939EA0000000, float 0x3FF7295420000000, float 0xBFA4D40240000000, float 0xBFD0DA1220000000, float 0x3FD4189380000000, float 0x3FEF03EEA0000000, float 0x3FD5674D20000000, float 0xBFE8B573E0000000, float 0xBFED389B60000000, float 0xBFFCA0E420000000, float 0x3FCB7F8CA0000000, float 0xBFF3D75E20000000, float 0xBFDD8FC500000000, float 0xBFBF0B8D00000000, float 0xBFE3E2D620000000, float 0x3FF603CF20000000, float 0x3FB56F5440000000, float 0x3FF8FE9100000000, float 0x3F66DB0DE0000000, float 0xBFC2A1B5C0000000, float 0x3FD8C63F20000000, float 0x3FEECAFF60000000, float 0x3FE5423100000000, float 0xBFE0934AC0000000, float 0xBFE9D60EA0000000, float 0xBFC7BADC00000000, float 0x3FC8CD74A0000000, float 0xBFF07E9100000000, float 0xBFF82AC320000000, float 0xBFE30902E0000000, float 0xBFE4074A80000000, float 0x3FFE84CAE0000000, float 0x3FB73D5BA0000000, float 0x3FF7DBAB20000000, float 0x3F60CB2960000000, float 0xBFC46002A0000000, float 0x3FDA211880000000, float 0x3FF15E54C0000000, float 0x3FDBCBBC20000000, float 0x3FD573C0C0000000, float 0xBFF206EC20000000, float 0xBFF1A4D2C0000000, float 0x3FE999ED80000000, float 0xBFFD603700000000, float 0xBFE100BCC0000000, float 0x40000A8C20000000, float 0xBFD4E8A720000000, float 0x3FF5F09960000000, float 0x3FE05D0FA0000000, float 0x3FFA0294A0000000, float 0x3FCFBA3440000000, float 0x3FD4531120000000, float 0x3FEA290AC0000000, float 0x3FF92973A0000000, float 0x3FEAA0E420000000, float 0x3FF0BEEA20000000, float 0xBFDC0B4E20000000], align 16
@av1_tx_type_nn_bias_16x4_hor_layer0 = internal constant [16 x float] [float 0xBFFB657540000000, float 0x3FDE442840000000, float 0xBFEF362620000000, float 0xBFE5306A20000000, float 0x3FBE06B7A0000000, float 0xBFCB751040000000, float 0x400605C140000000, float 0x3FA61BB060000000, float 0x4000513400000000, float 0x3FC2B606C0000000, float 0xBFE68DF7A0000000, float 0xBFCF61BB00000000, float 0x3FF23F6800000000, float 0x3FD5512EC0000000, float 0xBFF1BDE400000000, float 0x3FDA5B9620000000], align 16
@av1_tx_type_nn_bias_16x4_hor_layer1 = internal constant [4 x float] [float 0x40029B22E0000000, float 0x40060E65C0000000, float 0x3FF1F7F8C0000000, float 0x40013ECFE0000000], align 16
@av1_tx_type_nnconfig_16x4_hor = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_16x4_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_16x4_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_16x4_hor_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_16x4_hor_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_4x4_ver_layer0 = internal constant [32 x float] [float 0xBF94CEC420000000, float 0x4004EDC5E0000000, float 0x3F957BC800000000, float 0xBFD356C0E0000000, float 0x3FC02CE460000000, float 0x3FBC3419E0000000, float 0xC00828E0C0000000, float 0x3FD67DFE40000000, float 0x3FFF0110A0000000, float 0xBFCA3150E0000000, float 0x3FFA419E40000000, float 0xBFF6B7BF20000000, float 0xC00D565D40000000, float 0xBFE08793E0000000, float 0x3FDC1A36E0000000, float 0x3FD82D8C20000000, float 0xBFF06BE380000000, float 0x3FEB4ECEA0000000, float 0xBFE6522A60000000, float 0x3FF0087020000000, float 0x4000F15620000000, float 0x3FFE4EEE00000000, float 0x3FFEDDF660000000, float 0x3FDBA60D40000000, float 0xBFFAC6FBE0000000, float 0xBFFAB9C0E0000000, float 0xBFF8BD5BA0000000, float 0x3FC564D800000000, float 0xBFB0DE2AC0000000, float 0xBFD202C900000000, float 0xBFD5320DA0000000, float 0x3FFB8E6B00000000], align 16
@av1_tx_type_nn_weights_4x4_ver_layer1 = internal constant [32 x float] [float 0xBFF6522A60000000, float 0xBFF100DC40000000, float 0xBFF1BDE400000000, float 0xBFFB27B0C0000000, float 0x3FC936F7E0000000, float 0xC0033020C0000000, float 0xBFF43BADC0000000, float 0x3FE81ADEA0000000, float 0xBFF4292A40000000, float 0xBFEA79E5A0000000, float 0xBFBEC22680000000, float 0xBFF06EAC80000000, float 0x3FF68850A0000000, float 0xC00304E500000000, float 0xBFE50125A0000000, float 0xBFE70995A0000000, float 0xBFECF1E8E0000000, float 0xBFF20068E0000000, float 0xC0034F1800000000, float 0xBFF291DBC0000000, float 0xBFFDB13BE0000000, float 0xBFEFBB98C0000000, float 0xBFFE9E5A00000000, float 0x3FC57C1BE0000000, float 0x3FD641B320000000, float 0x3FE29BF9C0000000, float 0xBFC75158C0000000, float 0xBFD2B97780000000, float 0xBFEB9EECC0000000, float 0xBFE1114900000000, float 0x3FD367A100000000, float 0xBFF52C4720000000], align 16
@av1_tx_type_nn_bias_4x4_ver_layer0 = internal constant [8 x float] [float 0xBFD58EF340000000, float 0x3FCC3126E0000000, float 0x3FD2027520000000, float 0x3FE1F6D340000000, float 0x3FEDEA9E60000000, float 0xBFFC53E2E0000000, float 0x3FF5992640000000, float 0xBFEDFFC120000000], align 16
@av1_tx_type_nn_bias_4x4_ver_layer1 = internal constant [4 x float] [float 0xBFF50B04A0000000, float 0xC00A1B0DE0000000, float 0x3FFB7CAEA0000000, float 0xBFFE864460000000], align 16
@av1_tx_type_nnconfig_4x4_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 4, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x4_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_4x4_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_tx_type_nn_bias_4x4_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_4x4_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_8x8_ver_layer0 = internal constant [128 x float] [float 0xBFE571F360000000, float 0xBFFB941C80000000, float 0xBFFDDA2720000000, float 0xBFF8276740000000, float 0xBFFB445CC0000000, float 0xBFFBD590C0000000, float 0xBFFD89D4A0000000, float 0x4000C64460000000, float 0xBFAA03C4C0000000, float 0xBFE38793E0000000, float 0x4000340A20000000, float 0x3FE34562E0000000, float 0x3FEFFAC1E0000000, float 0x40002B4B80000000, float 0xBFE13EEA20000000, float 0xBFCE68B1A0000000, float 0x3FE78A86E0000000, float 0x3FD04894C0000000, float 0x3F55A07B40000000, float 0xBFE7B10780000000, float 0xBFE81CC100000000, float 0xBFE8A0E420000000, float 0xBFFB5C7260000000, float 0xBFC42F8380000000, float 0x3FF9C1D2A0000000, float 0x40016939E0000000, float 0x3FED049660000000, float 0x3FE4CA96A0000000, float 0x3FEB7E1320000000, float 0x3FE2CFBFC0000000, float 0xBFF7657FC0000000, float 0x3FAA8EB460000000, float 0x3FF3023640000000, float 0x3FD3BE76C0000000, float 0x3FD2E33F00000000, float 0x3FD9EFC7A0000000, float 0x3FD8161E40000000, float 0x3FD4ADD5A0000000, float 0x3FD7FB3FA0000000, float 0x3FF1F9B140000000, float 0x400B593600000000, float 0xBFD7753A40000000, float 0x3FDB394320000000, float 0xBFC8A09020000000, float 0x3F59652BE0000000, float 0x3FD3BA8820000000, float 0xBF95AAF780000000, float 0xBFE1196520000000, float 0xBFD64A6220000000, float 0xBFE0CA03C0000000, float 0xBFBD7E6700000000, float 0xBFD2AA10E0000000, float 0xC0007482C0000000, float 0xC006FD60E0000000, float 0xBFE40A5260000000, float 0x3FB889A020000000, float 0xBFE8150DA0000000, float 0x3FB9BEF4A0000000, float 0x3FF6F4B1E0000000, float 0x3FEC9FBE80000000, float 0x3FE849BA60000000, float 0x3FF1C894C0000000, float 0x3FF016DB00000000, float 0x3FD0912980000000, float 0x4001C48160000000, float 0xBFC6F1FDE0000000, float 0x3FE24AA100000000, float 0x3FD94F3780000000, float 0x3FDE9F16C0000000, float 0x3FD9E3A7E0000000, float 0x3FE16017A0000000, float 0x3FDD522A60000000, float 0xC00D05E600000000, float 0xC008309EA0000000, float 0x3FA306A2C0000000, float 0xBFC1D6E040000000, float 0xBFB81A36E0000000, float 0xBFBFE7C060000000, float 0x3FAD1782E0000000, float 0x3FA2CCF6C0000000, float 0x3FF351C1A0000000, float 0x3FF4001F80000000, float 0x3FF454D400000000, float 0x3FF519ED80000000, float 0x3FF4654B40000000, float 0x3FF59743E0000000, float 0x3FF3B48D40000000, float 0x3FB723CC80000000, float 0x3FC8D10F60000000, float 0x3FE44B5DC0000000, float 0x40065E7420000000, float 0x3FEE045780000000, float 0xBFBCFCA420000000, float 0xBF94C1A8A0000000, float 0x3FDA6C4C60000000, float 0xBFAE9CCB80000000, float 0xC00E74D6A0000000, float 0xBFE0C8C940000000, float 0xBFE8ABDE40000000, float 0xBFE5CD5FA0000000, float 0xBFE4FA97E0000000, float 0xBFE3831260000000, float 0xBFF42FB7E0000000, float 0x3FD05F5AE0000000, float 0x3FAB5F1BE0000000, float 0x3FE3A62240000000, float 0x3FD491D140000000, float 0xC0032FBD20000000, float 0xBFF6C6DC60000000, float 0x3FF4E2F5A0000000, float 0x3FF060B4E0000000, float 0x3FC08CE700000000, float 0xBFF9D5C520000000, float 0xBFE8A6CA00000000, float 0xBFE2ED13A0000000, float 0x3FF4716B20000000, float 0x3FF854B480000000, float 0x3FEA48A9C0000000, float 0x3FFD4E3160000000, float 0xBFE5520080000000, float 0xBFE65681E0000000, float 0xBFF0171A00000000, float 0xBFEB84B5E0000000, float 0xBFED15A080000000, float 0xBFEB030800000000, float 0xBFEB6D86E0000000, float 0xBFF4C69300000000, float 0x3FD9283900000000], align 16
@av1_tx_type_nn_weights_8x8_ver_layer1 = internal constant [64 x float] [float 0xBFF6D57140000000, float 0xBFCBC115E0000000, float 0x4000F70260000000, float 0x3FCA39D5E0000000, float 0xBFE012AD80000000, float 0xBFCFB4A240000000, float 0x3FCDF0C340000000, float 0x3FF08E21A0000000, float 0xBFDCB3BB80000000, float 0xBFE43B6460000000, float 0xBFCBA05140000000, float 0xBFB08E3680000000, float 0xBFCC059220000000, float 0xBFB3EEA200000000, float 0x3FF6EE7820000000, float 0x3F66F00680000000, float 0xBFF87D3700000000, float 0xBFC8351580000000, float 0x3FFF40D700000000, float 0x3FD3EFC7A0000000, float 0xC0009BAB20000000, float 0x3FB158B820000000, float 0x3FD056ABE0000000, float 0x3FEE560420000000, float 0xBFF1D51D60000000, float 0xBFCA5C3DE0000000, float 0xBFC0FFEB00000000, float 0x3F8E69AD40000000, float 0x3FC6978D40000000, float 0xBFB45D6380000000, float 0x3FF6FF5840000000, float 0xBFCDAFE1E0000000, float 0xC000845CC0000000, float 0xBFCB2F44A0000000, float 0x400118B820000000, float 0x3FD36CB540000000, float 0x3FD1A90040000000, float 0xBFD7326180000000, float 0x3FC9028A20000000, float 0x3FED226800000000, float 0xBFCECE9A20000000, float 0xBFD8130160000000, float 0x3FEC69D740000000, float 0x3F9E2D6240000000, float 0xBFC5A2C660000000, float 0xBFA94078A0000000, float 0x3FF834F620000000, float 0xBFEEB59DE0000000, float 0xBFFA1081C0000000, float 0x3FAB44E500000000, float 0x400274CC20000000, float 0x3FE49F55A0000000, float 0xBFF183A540000000, float 0xBFC5470640000000, float 0x3FF009D4A0000000, float 0x3FB352A840000000, float 0xBFE0214260000000, float 0x3FE46EEB80000000, float 0x3FF05FD8A0000000, float 0x3FDFE4A380000000, float 0x3FC17FB6A0000000, float 0x3FD11A21E0000000, float 0x4000C2E340000000, float 0xBFDA6F6940000000], align 16
@av1_tx_type_nn_bias_8x8_ver_layer0 = internal constant [16 x float] [float 0xBFC307F240000000, float 0xBFDEF08460000000, float 0x400F8DA3C0000000, float 0xBFE8F8CA80000000, float 0xBFF567FF60000000, float 0xBFE36540C0000000, float 0x3FE092E1E0000000, float 0x3FDC2DE000000000, float 0xBFE6E670E0000000, float 0x3FCCE0C9E0000000, float 0xBFF30DA3C0000000, float 0xBFDD890D60000000, float 0x3FEA9096C0000000, float 0x3FAED7C700000000, float 0x3FF2BFB160000000, float 0x3FE4D6CB60000000], align 16
@av1_tx_type_nn_bias_8x8_ver_layer1 = internal constant [4 x float] [float 0x40012017A0000000, float 0x400622CBA0000000, float 0x400056B120000000, float 0x3FF59187E0000000], align 16
@av1_tx_type_nnconfig_8x8_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_8x8_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_8x8_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_8x8_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_8x8_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_4x8_ver_layer0 = internal constant [128 x float] [float 0xBF837F38C0000000, float 0xBFEFA27280000000, float 0xBFEDD16340000000, float 0x3FF655C520000000, float 0x3FEEE61D00000000, float 0x3FC73F5300000000, float 0xBFE85729C0000000, float 0xBFAF0ED3E0000000, float 0x3FB43DEE80000000, float 0xBFB7F97240000000, float 0xBFCB47D800000000, float 0xBF966516E0000000, float 0xC004EFC260000000, float 0xC0057F0460000000, float 0xBFBC1D29E0000000, float 0x3FC7C169C0000000, float 0x3FF2BA53C0000000, float 0x3FF1D26960000000, float 0x3FF20811C0000000, float 0x3FF0EDBB60000000, float 0x3FF20AD040000000, float 0x3FF102C900000000, float 0x3FF1EDA660000000, float 0x3FC6479920000000, float 0x3FFD4E1C60000000, float 0x3FC8C88A40000000, float 0x3FDE05BC00000000, float 0x3FD9595FE0000000, float 0x3FD556C0E0000000, float 0x3FD9A732E0000000, float 0x3FD1B15B60000000, float 0x3FF1192640000000, float 0xC010440B80000000, float 0xBFD8D0E560000000, float 0xBFBC56D5C0000000, float 0x3FA35BD520000000, float 0xBFB766A560000000, float 0x3FAFAACDA0000000, float 0xBFA8D79D00000000, float 0x3FC9CF0300000000, float 0x3FC57BC800000000, float 0x3FC54CEC40000000, float 0xBFE04D1640000000, float 0xBFE38C3F40000000, float 0x40008F8620000000, float 0xBFEA5CA6C0000000, float 0xBFEB60E940000000, float 0x3FAC4DA900000000, float 0xBFBAF837C0000000, float 0xC0067DF3C0000000, float 0x3FE573C0C0000000, float 0x3FDBEE7820000000, float 0x3FDF665160000000, float 0xBFA6DC5D60000000, float 0x3FECF0AE60000000, float 0x3F84024B40000000, float 0x3FDD9D3460000000, float 0x3FF98F66A0000000, float 0x3FEE7991C0000000, float 0x3FD6747D80000000, float 0x3FEB665160000000, float 0x3FE7685DC0000000, float 0x3FFAD83A60000000, float 0xC001B88BA0000000, float 0xBFF3F598A0000000, float 0xBFF17136A0000000, float 0xBFED94C440000000, float 0xBFF39D53C0000000, float 0xBFF11D1F60000000, float 0xBFEEAFE1E0000000, float 0xBFF3FE32A0000000, float 0x3FE79D7340000000, float 0x3FF3B95820000000, float 0xBFE3387160000000, float 0xBFB4193B40000000, float 0x3FC26D9BE0000000, float 0x3FCC4D0140000000, float 0xBFA6A40100000000, float 0x3FC25E3540000000, float 0x3FE84BDBA0000000, float 0x3FD66BA4A0000000, float 0x3FDEC95C00000000, float 0x4006833C60000000, float 0x3FD62F05A0000000, float 0x3FDAF00680000000, float 0x3FD6BBC2C0000000, float 0xBFF5E37DE0000000, float 0xBFC32AAE20000000, float 0xBFDE868340000000, float 0xBFB43419E0000000, float 0x3FD79F55A0000000, float 0x3FD4ABDE40000000, float 0x3FCE9CCB80000000, float 0x3FAEE24360000000, float 0xBFC6D71F40000000, float 0xBFC67967C0000000, float 0xBFF6D6E040000000, float 0xBFE1DD6E00000000, float 0xBFF0111F00000000, float 0xBFE4BE4CE0000000, float 0xBFE791BC60000000, float 0xBFEB4356A0000000, float 0xBFF8288260000000, float 0x3FFB1A0280000000, float 0xBFA97635E0000000, float 0xBFB7BD2740000000, float 0x3FF0AE0A00000000, float 0x3FE95AEE60000000, float 0x3FF21DDC20000000, float 0x3FEFE09FE0000000, float 0x3FA3B79520000000, float 0x3FE206E1A0000000, float 0x3FED0DED20000000, float 0x3FF153CDE0000000, float 0x3FE2B9E060000000, float 0x3FFBF65FE0000000, float 0x3FE4788120000000, float 0x3FF5C08D80000000, float 0x3FB3F9C620000000, float 0xBFAA400FC0000000, float 0x3FD0F80DC0000000, float 0xBFEB14CEC0000000, float 0xBFE53AD180000000, float 0xC000D9B3E0000000, float 0x3FBC3419E0000000, float 0x40017B7420000000, float 0xBFCC1B3280000000, float 0x3FAE90FFA0000000], align 16
@av1_tx_type_nn_weights_4x8_ver_layer1 = internal constant [64 x float] [float 0xBFD8718A80000000, float 0xBFBEF69440000000, float 0x3FF93F91E0000000, float 0x3FD65B4240000000, float 0xBFDE4B09E0000000, float 0xBFBF7F8CA0000000, float 0xBF91C6D1E0000000, float 0xC0043212E0000000, float 0x3FC84C5980000000, float 0xBFE4B4CC20000000, float 0xBFE37C06E0000000, float 0xBFE1333340000000, float 0x3FED554760000000, float 0xBFE41A75C0000000, float 0xBFC11F6020000000, float 0xBFDBE670E0000000, float 0xBFD8B72C60000000, float 0xBF8B328B60000000, float 0x3FEF2FAD60000000, float 0x3FF7C634A0000000, float 0xBFF084A0E0000000, float 0xBFD569EC20000000, float 0xBFD6781840000000, float 0xC00364B340000000, float 0x3FE345F5A0000000, float 0x3FB1782D40000000, float 0xBFE8288CE0000000, float 0x3FD1379FA0000000, float 0x3FE4E64700000000, float 0xBFCE934AC0000000, float 0xBFDC8BEB60000000, float 0xBFE1DB22E0000000, float 0xBFD5A8AC60000000, float 0x3FA5CE5B40000000, float 0xBFE31187E0000000, float 0x3FDFD512E0000000, float 0xBFE3EFB2A0000000, float 0xBFD3C60020000000, float 0xBFD2F1FDE0000000, float 0xC004906CC0000000, float 0x4000135000000000, float 0xBFE546DC60000000, float 0xBFE86B7AA0000000, float 0x3FD2157680000000, float 0x3FF1027FA0000000, float 0xBFD88D8EC0000000, float 0xBFE4529340000000, float 0xBFE26F5440000000, float 0xBFEC67A100000000, float 0xBFF0B458C0000000, float 0xBFDDC7A3A0000000, float 0x3FD5D052A0000000, float 0xBFF3479920000000, float 0xBFE5DF6560000000, float 0xBFE71ECD40000000, float 0xC0050F3240000000, float 0xBFE5FEDA60000000, float 0xBFD8423100000000, float 0xBFF52DEA80000000, float 0x3FDE43AA80000000, float 0x3FF84DFCE0000000, float 0x3FE9143C00000000, float 0xBFF04AF500000000, float 0xBFF04BB1A0000000], align 16
@av1_tx_type_nn_bias_4x8_ver_layer0 = internal constant [16 x float] [float 0x3FA58793E0000000, float 0x3FCC7E2820000000, float 0xBFF09E83E0000000, float 0xBFF3218160000000, float 0x3FDC5753A0000000, float 0x3F87689CA0000000, float 0x3F63404EA0000000, float 0x4011122540000000, float 0x3FDC649900000000, float 0xBFD53F5300000000, float 0xBFD9023640000000, float 0xBFD67B8900000000, float 0x3FB5379FA0000000, float 0x3FC74A2340000000, float 0xBFE99096C0000000, float 0x3FB9B866E0000000], align 16
@av1_tx_type_nn_bias_4x8_ver_layer1 = internal constant [4 x float] [float 0xBFF75A5120000000, float 0xC000B74680000000, float 0xBFF3F85720000000, float 0xBFF8DBDF80000000], align 16
@av1_tx_type_nnconfig_4x8_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_4x8_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_4x8_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_4x8_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_4x8_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_8x4_ver_layer0 = internal constant [32 x float] [float 0xBFF1C05920000000, float 0x3FFDDA1220000000, float 0xBFF97EB080000000, float 0x3FD14AA100000000, float 0xBFFB4EE3A0000000, float 0xBFE7AC9B00000000, float 0xBFC858CD20000000, float 0xBFFF12C280000000, float 0xC0026176E0000000, float 0xBFF71AB4C0000000, float 0x3FD25E3540000000, float 0xBFF2EF34E0000000, float 0xBFF80678C0000000, float 0xBFDC45A1C0000000, float 0xBFF5E49900000000, float 0x3FF00F51A0000000, float 0x4004BEB5C0000000, float 0x3FE017D6C0000000, float 0xBFE6BBC2C0000000, float 0xBFBF544BC0000000, float 0xBFC45A7080000000, float 0xBFCD3165E0000000, float 0xBFE58F7120000000, float 0xBFD3566D00000000, float 0x3FE1690580000000, float 0xBFDD24F220000000, float 0x3FF2EC0300000000, float 0x40024B8280000000, float 0x3FFA980B20000000, float 0x3FFB550880000000, float 0x3FF8D44140000000, float 0x3FBF4F0D80000000], align 16
@av1_tx_type_nn_weights_8x4_ver_layer1 = internal constant [32 x float] [float 0x3FF344A620000000, float 0xBFF3B7C9A0000000, float 0x400348C400000000, float 0xBFE7323780000000, float 0x3FF40A3300000000, float 0x3FC7102360000000, float 0xBFB88A47E0000000, float 0x40016E9CC0000000, float 0x3FC3AA79C0000000, float 0x3FF37212E0000000, float 0xBFD87D0280000000, float 0xBFE7C764A0000000, float 0x3FE02D2340000000, float 0xBFE158B820000000, float 0x3FE2ECAAC0000000, float 0x3FF2934040000000, float 0x3FE1E4E260000000, float 0xBFE3423100000000, float 0x3FF30826A0000000, float 0x3FF9B9D5E0000000, float 0x3FE147D800000000, float 0xBFBB6C3760000000, float 0xBFC4AD03E0000000, float 0x3FC4BEB5C0000000, float 0xBFD4B24200000000, float 0x40057F38C0000000, float 0xC006ADBB60000000, float 0xBFD155C520000000, float 0xBFF2669AE0000000, float 0xBFD928B6E0000000, float 0x3FF832A060000000, float 0xBFFB092260000000], align 16
@av1_tx_type_nn_bias_8x4_ver_layer0 = internal constant [8 x float] [float 0x3FBC039AC0000000, float 0x4000C87A80000000, float 0x4001538480000000, float 0x3FC42E33E0000000, float 0xBFDB2CCF60000000, float 0.000000e+00, float 0x3FF388CE80000000, float 0xBFF4983FA0000000], align 16
@av1_tx_type_nn_bias_8x4_ver_layer1 = internal constant [4 x float] [float 0x3FFCF64AE0000000, float 0x3FF1AEC6C0000000, float 0x4007346880000000, float 0x3FEE866E40000000], align 16
@av1_tx_type_nnconfig_8x4_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 4, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_8x4_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_8x4_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_tx_type_nn_bias_8x4_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_8x4_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_8x16_ver_layer0 = internal constant [128 x float] [float 0x3FD5077460000000, float 0xBFF49F3620000000, float 0x3FD0678C00000000, float 0xBFAAF10240000000, float 0x4005894700000000, float 0xBFB1EE2440000000, float 0x3FF5F952E0000000, float 0xBFAD4FDF40000000, float 0xBFACF95D40000000, float 0x3FACA18BE0000000, float 0x3F85475A40000000, float 0xBFD2C78EA0000000, float 0x3FF9616720000000, float 0xBFD333B100000000, float 0xC00B730E80000000, float 0x3F664840E0000000, float 0x3FFB593600000000, float 0xBFE86E6DA0000000, float 0x3FAE26D480000000, float 0xBFA0B4E120000000, float 0xBFB3C60020000000, float 0x3FA209AAA0000000, float 0xBFC9758E20000000, float 0x3FF2E17C20000000, float 0xBFA2752540000000, float 0xBFCA474540000000, float 0xC010078180000000, float 0x3FBA2339C0000000, float 0xBFAB7BF1E0000000, float 0xBFC6978D40000000, float 0xBFC39B1320000000, float 0x3FB0A32F40000000, float 0x3FE2254600000000, float 0x3FF0B1CEA0000000, float 0x3FE41FF2E0000000, float 0x3FE7811B20000000, float 0xBFCC6A2B20000000, float 0x3FEBBB1B00000000, float 0x3FE91A0D00000000, float 0xBFE3BB83C0000000, float 0xBFE031A4C0000000, float 0x3FD35BAB20000000, float 0x3FC2809D40000000, float 0x3FD922FAE0000000, float 0x3FDF7D6B60000000, float 0x3FE4CE5B40000000, float 0x3FBF689CA0000000, float 0x3FFA40B780000000, float 0x3FFAED1E20000000, float 0x3FF6D4BF00000000, float 0x3FF9BB6460000000, float 0x3FF95C3380000000, float 0x3FF78F7120000000, float 0x3FFA03A540000000, float 0x3FF7B70260000000, float 0x3FC6B074A0000000, float 0xBFA9018E80000000, float 0x3FD6A40100000000, float 0xBFA88E3680000000, float 0x3FD4DB61C0000000, float 0x3FD674A780000000, float 0x3FD690ABC0000000, float 0xBFDD818400000000, float 0xBFD3F3E040000000, float 0xBFAAA3AD20000000, float 0x3FB28D64E0000000, float 0xBFD11FB400000000, float 0x3FCC2F2FA0000000, float 0x3FA1782D40000000, float 0x3FD59D5E40000000, float 0x3FD3143C00000000, float 0xBFBC84B5E0000000, float 0x3FC06C7640000000, float 0xBFDC973960000000, float 0xBFB93C8A00000000, float 0x3FB43222A0000000, float 0x3FC36017A0000000, float 0x3F6C6D1E20000000, float 0xBFCDF1BF00000000, float 0x3FB6BF8760000000, float 0xBFD3F7F8C0000000, float 0xBFE9926420000000, float 0xBFE05974E0000000, float 0x3FC213D320000000, float 0xBFF1892CC0000000, float 0xC0110A71E0000000, float 0xBFE5F9DB20000000, float 0xBF9D1A21E0000000, float 0xBFF8B9E060000000, float 0xBFF4A2E5E0000000, float 0xBFF4E3A7E0000000, float 0xBFF35F30E0000000, float 0xBFF5F15620000000, float 0xBFF25BDF80000000, float 0xBFFDA9DC80000000, float 0x3FEA8E21A0000000, float 0xBFD3A2C660000000, float 0x3FA7026020000000, float 0xBFCEBFDB40000000, float 0xC010B8DCE0000000, float 0xBFC49A5660000000, float 0xBFE1C1E7A0000000, float 0xBFD1D82FE0000000, float 0x3FADD82FE0000000, float 0xBFDA6223E0000000, float 0xC0042AC320000000, float 0xBFE1F8CA80000000, float 0xBFF0BA3EC0000000, float 0xBFFB4F4200000000, float 0xBFD2757920000000, float 0xBFF6FCD8A0000000, float 0xBF8E108C40000000, float 0xC009A594A0000000, float 0xBFE61E4F80000000, float 0xBFDC1DA7C0000000, float 0xBFDD9CE080000000, float 0xBFE5154CA0000000, float 0xBFE1E20460000000, float 0xBFE80B4E20000000, float 0x3FD748A9C0000000, float 0xC016D59600000000, float 0xBFC29F16C0000000, float 0xBFC4275260000000, float 0xBFBE3D1CC0000000, float 0xBFB3780340000000, float 0xBFB3B1AF40000000, float 0xBFBF52FC20000000, float 0x3FC49374C0000000], align 16
@av1_tx_type_nn_weights_8x16_ver_layer1 = internal constant [64 x float] [float 0xBFE421D540000000, float 0xBFD5F45E00000000, float 0x3FDB7F0EE0000000, float 0xBFC652BD40000000, float 0xBFF70E0220000000, float 0x3FE6201CE0000000, float 0xBFF5C54DE0000000, float 0x3FE0B52000000000, float 0x3FDC94C440000000, float 0xBFD0F5EC80000000, float 0xBFDAA91540000000, float 0x3FD608AF00000000, float 0xBFD6027520000000, float 0xBFE2BDCF00000000, float 0xBFEAE939E0000000, float 0xBFFF68E600000000, float 0xBFD7D14E40000000, float 0xBFCC7AE140000000, float 0xBFF3CF4C60000000, float 0xBFB28D64E0000000, float 0xBFEA276740000000, float 0x3FE2CD35A0000000, float 0xBFF4E3B260000000, float 0x3FD9500920000000, float 0x3FDAB72C60000000, float 0xBFB9724740000000, float 0xBFD5446740000000, float 0x3FC2819900000000, float 0xBFD016C620000000, float 0xBFE1720860000000, float 0x3FC13D85A0000000, float 0xBFD86BA4A0000000, float 0xBFD9079E60000000, float 0xBFC74D6A20000000, float 0x3FB17EBB00000000, float 0xBFB57DBF40000000, float 0xBFED7FF580000000, float 0x3FE226D480000000, float 0x3FF719D880000000, float 0x3FE1084620000000, float 0xBFCC9D9D40000000, float 0x3FBF731900000000, float 0xBFD2D3D860000000, float 0xBFFDE13D40000000, float 0xBFCCA2DB60000000, float 0xBFE343E960000000, float 0xBFEC142700000000, float 0xBFF2B5B2E0000000, float 0x3FE233F000000000, float 0x3FE40B8D00000000, float 0xBFBE445240000000, float 0x3FF0102DE0000000, float 0x3FFA5DF660000000, float 0xBFE4A6B500000000, float 0x40025883C0000000, float 0xBFCDF2BAA0000000, float 0x3FC614CEC0000000, float 0xBFD6FE47A0000000, float 0x3FE5007DE0000000, float 0xBFD128E0C0000000, float 0x3FE9A41600000000, float 0x3FEB7079E0000000, float 0x3FDE56ABE0000000, float 0x4001A4CD80000000], align 16
@av1_tx_type_nn_bias_8x16_ver_layer0 = internal constant [16 x float] [float 0xBFD6A57A80000000, float 0x3FD383A540000000, float 0xBFECCDB380000000, float 0x3FDB7B7420000000, float 0x3FF3593600000000, float 0xBFEC441360000000, float 0xBFF7CF95E0000000, float 0xBFD6432CA0000000, float 0xBFD4E85340000000, float 0xBFCD0CB2A0000000, float 0x3FEC8A47E0000000, float 0x3FE4F77B00000000, float 0x3FE26E6DA0000000, float 0x3FEFF12C20000000, float 0x3FE80E5600000000, float 0x3FC5D0FA60000000], align 16
@av1_tx_type_nn_bias_8x16_ver_layer1 = internal constant [4 x float] [float 0xBFDC361140000000, float 0xBFFACAF500000000, float 0xBFF769C240000000, float 0xC018873AC0000000], align 16
@av1_tx_type_nnconfig_8x16_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_8x16_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_8x16_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_8x16_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_8x16_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_16x8_ver_layer0 = internal constant [128 x float] [float 0x3FDDD859C0000000, float 0x3FF8DA3C20000000, float 0xBFBCBFB160000000, float 0xBFD2ECE9A0000000, float 0x3FC814F8C0000000, float 0xBFF8638860000000, float 0xC002C5D640000000, float 0x3FB620EE80000000, float 0xBFFFA28780000000, float 0xBFF4A99300000000, float 0xBFF1F64060000000, float 0xBFF213DDA0000000, float 0xBFF4255080000000, float 0xBFEEE1C580000000, float 0xBFF9240100000000, float 0x3FEEBA0A60000000, float 0x3FF5788120000000, float 0x3FF49465E0000000, float 0x3FF376FD20000000, float 0x3FF499ED80000000, float 0x3FF413BE20000000, float 0x3FF4D4C980000000, float 0x3FF31205C0000000, float 0x3FB7D566C0000000, float 0x3FE0A9BD00000000, float 0x3FED469D80000000, float 0x3FF3DB22E0000000, float 0x3FF9CC3A00000000, float 0x3FFB8BEB60000000, float 0x4001A8F5C0000000, float 0x3FF9FB0B40000000, float 0xBFF7079E60000000, float 0x3FE0367A00000000, float 0x3FD9BC7F80000000, float 0x3FE547D800000000, float 0xBFFAABFDC0000000, float 0xC0089C0440000000, float 0x3FAE171A00000000, float 0x3FE3840E20000000, float 0xBFB99652C0000000, float 0xBFBBF1E8E0000000, float 0x3FDEC05920000000, float 0x3FCE7AB760000000, float 0x3FD9808860000000, float 0xBFCBC0C200000000, float 0xBFE44E3BC0000000, float 0x3FD568F080000000, float 0xBFE5BD9020000000, float 0xC01092FEC0000000, float 0xBFE414F8C0000000, float 0xBFCCCD74A0000000, float 0xBFC60902E0000000, float 0x3F85BFF040000000, float 0x3FD14FB540000000, float 0xBFBB83CF20000000, float 0x3FD3CE0760000000, float 0x4005CBAC80000000, float 0xBFEC89B520000000, float 0xBFB16872C0000000, float 0x3FCA5C91E0000000, float 0xBFE77BB300000000, float 0x3FA4D7F0E0000000, float 0xBFF4D8D7A0000000, float 0x3FFD5C7260000000, float 0x3FED9F55A0000000, float 0x3FE6465E80000000, float 0x3FE8694460000000, float 0x3FE65D8D80000000, float 0x3FE8736CE0000000, float 0x3FE4317AC0000000, float 0x3FE77CAEA0000000, float 0x3FF1883120000000, float 0xBFC9C3DEE0000000, float 0xBFCEBF8760000000, float 0xBFCF7C99A0000000, float 0xBFE2EA0BA0000000, float 0xBFEC66CF40000000, float 0xBFE6136A40000000, float 0xBFE8288CE0000000, float 0xBFF4F5D780000000, float 0xBFF4D681E0000000, float 0xBFEE1C1940000000, float 0xC0014115E0000000, float 0xBFF7E37360000000, float 0xBFF2CCB7E0000000, float 0xBFF6646F20000000, float 0xBFED34D6A0000000, float 0xBFAC9AFE20000000, float 0x3FF06186A0000000, float 0xBFE82F8380000000, float 0xBFE4E25840000000, float 0xBFE9475A40000000, float 0xBFE6BE76C0000000, float 0xBFE6B9CB60000000, float 0xBFE6831260000000, float 0xBFF430FD00000000, float 0x4002BC9480000000, float 0xBFE127D020000000, float 0x3FC94855E0000000, float 0xBFC58EC960000000, float 0xBFCFC7A3A0000000, float 0x3FCBFA1A00000000, float 0x3FB50C5EC0000000, float 0xC00478B580000000, float 0xBFFC1CC100000000, float 0x3FBD2B2C00000000, float 0x3FF07E47A0000000, float 0x3FE9974E60000000, float 0xBFF8A86D80000000, float 0xBFFD2CB000000000, float 0xBFE26E58A0000000, float 0xBF9544BB20000000, float 0xBFD95AAF80000000, float 0xBF8460AA60000000, float 0xBFC06540C0000000, float 0x3F88548AA0000000, float 0xBFD0132B60000000, float 0x3FB78E9F60000000, float 0x3FB7E670E0000000, float 0xBFACBE61C0000000, float 0xBFD3399700000000, float 0x3FD088A480000000, float 0x3FF330E800000000, float 0x3FF39AF3A0000000, float 0x3FED8BAC80000000, float 0x3FE84F3780000000, float 0xBFEA38EF40000000, float 0xBFDAA771C0000000], align 16
@av1_tx_type_nn_weights_16x8_ver_layer1 = internal constant [64 x float] [float 0x3FD324C840000000, float 0xBFB99F7F80000000, float 0xBFF1D62380000000, float 0x3FFC4A3840000000, float 0xBFD1BD7B20000000, float 0x3FE0AFF6E0000000, float 0x3FC68E6080000000, float 0xBFF2BD1240000000, float 0x3FE77CAEA0000000, float 0xBFE62B55E0000000, float 0xBFBC5D6380000000, float 0x3FF899A420000000, float 0xBFF6B87160000000, float 0x3FC2DB0DE0000000, float 0x3FC165D3A0000000, float 0xBFA9003EE0000000, float 0x3FD9143C00000000, float 0xBFC17A7860000000, float 0xBFDC27FA20000000, float 0x3FFD3DCF00000000, float 0xBFD06277C0000000, float 0xBFC3391920000000, float 0x3FE09D4960000000, float 0xBFF8F8A0A0000000, float 0x3FD446F160000000, float 0xBFE965BEA0000000, float 0xBF9DBCA960000000, float 0x3FF494F8C0000000, float 0xBFF26EB700000000, float 0x3FD10A9160000000, float 0x3FDB68F080000000, float 0xBFCF0CDC80000000, float 0x3FD8BBECA0000000, float 0xBFEAAC3220000000, float 0x3FD4D57BC0000000, float 0x4000C302C0000000, float 0xBFD12A8440000000, float 0xBFDB0092C0000000, float 0x3FD5020C40000000, float 0xBFF4EB7020000000, float 0x3FF81691A0000000, float 0xBFE0DAA500000000, float 0x3FC9A85880000000, float 0x3FFB1743E0000000, float 0xBFF7A77C40000000, float 0x3FD3B69980000000, float 0xBFB2A99300000000, float 0xBFD1FCE320000000, float 0x3FE5D249E0000000, float 0xBFC3DE3FC0000000, float 0x3FF2033C60000000, float 0x4001C0F120000000, float 0x3FB8E21960000000, float 0xBFE015B580000000, float 0x3FEA9CE080000000, float 0xBFF5134AC0000000, float 0x3FE72CCF60000000, float 0xBFF3FE08A0000000, float 0x3FE3BA9D20000000, float 0x40005450E0000000, float 0xBFF6C8F320000000, float 0x3FE0D25EE0000000, float 0xBFDD8E21A0000000, float 0xBF81E108C0000000], align 16
@av1_tx_type_nn_bias_16x8_ver_layer0 = internal constant [16 x float] [float 0x3FC6D62380000000, float 0x3FE58A71E0000000, float 0xBFF3E978E0000000, float 0x40091BD520000000, float 0x3FC4BD6620000000, float 0xBFC3309420000000, float 0x3FD2E9F6A0000000, float 0xBFF27D9FE0000000, float 0xBFE6DACEE0000000, float 0x3FF28E6B00000000, float 0x3FF25566C0000000, float 0x4008326180000000, float 0xBFA71758E0000000, float 0x3FDEB851E0000000, float 0xBFB7F23CC0000000, float 0xBFDB266BA0000000], align 16
@av1_tx_type_nn_bias_16x8_ver_layer1 = internal constant [4 x float] [float 0x400ACC6920000000, float 0x400DFA0FA0000000, float 0x3FF6225D80000000, float 0x3FDCE9A2C0000000], align 16
@av1_tx_type_nnconfig_16x8_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_16x8_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_16x8_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_16x8_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_16x8_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_4x16_ver_layer0 = internal constant [128 x float] [float 0x3FF9D29DC0000000, float 0x3FF6992640000000, float 0x3FF79F9480000000, float 0x3FF7926EA0000000, float 0x3FF760AA60000000, float 0x3FF7DF8F40000000, float 0x3FF7E7FF60000000, float 0x3FC06DC5E0000000, float 0xBFE8A2B180000000, float 0x3FB2248940000000, float 0xBFCF73C0C0000000, float 0xBFEDD052A0000000, float 0x4008A28240000000, float 0xBFC74634A0000000, float 0xBFB92AD820000000, float 0xBFB3B83D00000000, float 0xBFA07F23C0000000, float 0xBFD04D7F00000000, float 0xBFAF2E48E0000000, float 0x40077F3E00000000, float 0xBFD8C66900000000, float 0xBFC07DD440000000, float 0xBFC7760C00000000, float 0xBFB007DD40000000, float 0xBF6AC9AFE0000000, float 0xBF9E00D1C0000000, float 0xBF90CDC880000000, float 0xBF797A2480000000, float 0xBFA0EBEE00000000, float 0xC010486300000000, float 0xC00621A600000000, float 0x3FA6983520000000, float 0xBFF08216C0000000, float 0xBFC89906C0000000, float 0xBFDCC98600000000, float 0xC003E3A2A0000000, float 0xC004A62240000000, float 0xBFEC0FF980000000, float 0x3FC4B82800000000, float 0xBFA90ABB40000000, float 0xBFB18BD660000000, float 0x3FF14BF0A0000000, float 0x3FE8141200000000, float 0x3FF7E36900000000, float 0x3FE446B260000000, float 0x3FF7507C80000000, float 0x3FED9FA980000000, float 0x3FFB864EC0000000, float 0x3FD55421C0000000, float 0x400EEE82A0000000, float 0x3FA6A40100000000, float 0x3FDA408D80000000, float 0x3FD72CF960000000, float 0x3FE21CAC00000000, float 0xBFF03F91E0000000, float 0x3FAA415F40000000, float 0x3FD9E3FBC0000000, float 0xBFF0D0E560000000, float 0xBFDE6002A0000000, float 0xBFF54E8FC0000000, float 0xBFDD8865A0000000, float 0xBFF5E63200000000, float 0xBFEC6D9BE0000000, float 0xBFF0DB76C0000000, float 0xBFC7BA3440000000, float 0xBFD5FD0D00000000, float 0xBFA2EF0AE0000000, float 0x3FE60CB2A0000000, float 0x3FDA3F1420000000, float 0x3FD3FB9380000000, float 0xBFDBC3B500000000, float 0xBFE7E8A720000000, float 0x400044EF80000000, float 0xBFD377D960000000, float 0x3FDD473040000000, float 0x3FB862F5A0000000, float 0x3FD4461FA0000000, float 0x3FCD54C980000000, float 0x3FCBF1E8E0000000, float 0x3FF438BAC0000000, float 0xBFB1719F80000000, float 0xBFE6DA7B00000000, float 0xBFF30811C0000000, float 0x3FA342EDC0000000, float 0x3FBBFF0460000000, float 0x4007CAAB80000000, float 0xBFDB49CF60000000, float 0xBF9FFAC1E0000000, float 0xC015FD8060000000, float 0xBFC5CC1000000000, float 0xBFBCFCA420000000, float 0x3FAA7C5AC0000000, float 0xBFDC55DA20000000, float 0xBFC4250720000000, float 0x3FBCF4C6E0000000, float 0x3FDC13FD00000000, float 0x3FC58D25E0000000, float 0xBFE0E963E0000000, float 0x4007343960000000, float 0xBFE183E420000000, float 0xBFD2F03080000000, float 0x3FF3D844E0000000, float 0x3FCBC55860000000, float 0xBFA6BF8760000000, float 0xBFF9BD85A0000000, float 0xBFF5D182A0000000, float 0xBFF4639D60000000, float 0xBFF85460A0000000, float 0xBFF580E6A0000000, float 0xBFF223AD20000000, float 0xBFFE023640000000, float 0x3FE9A3AD20000000, float 0x3FDB67A100000000, float 0xBFC21EF740000000, float 0xC005EAC320000000, float 0xBFE5C5D640000000, float 0xBFD68D1100000000, float 0x3FC28C1540000000, float 0x4001E0CF20000000, float 0x3F8C0EBEE0000000, float 0xBFCA253120000000, float 0xBFF839CB60000000, float 0xBFE7223E20000000, float 0x3FE4A526A0000000, float 0x3FEF3E8140000000, float 0x3FD4DFCE40000000, float 0xBFD1E76C80000000, float 0xBF878811C0000000], align 16
@av1_tx_type_nn_weights_4x16_ver_layer1 = internal constant [64 x float] [float 0x3FD1677700000000, float 0x3FE031B9C0000000, float 0x3FDF81ADE0000000, float 0xBFDED7C700000000, float 0x3FC40DC340000000, float 0xBFF638F9C0000000, float 0x3FD862A1C0000000, float 0xBFE2D2F1A0000000, float 0xBFB2C86060000000, float 0xBFE0EE4E20000000, float 0x3FD7A9FBE0000000, float 0x3FD25FD8A0000000, float 0x3FD66516E0000000, float 0xBFE78FC500000000, float 0x3FD3727140000000, float 0xBFE2D2B2C0000000, float 0x3FD71F0C40000000, float 0x3FE28B43A0000000, float 0x3FE1E186A0000000, float 0xBFDB63B260000000, float 0x3FC98EC960000000, float 0xBFF7486060000000, float 0x3FDB37F380000000, float 0xBFE17B4A20000000, float 0xBFD86D9BE0000000, float 0xBFEB2AED20000000, float 0x3FDAA35940000000, float 0x3FDE09D4A0000000, float 0x3FD9026020000000, float 0xBFE824B340000000, float 0x3FD4496680000000, float 0xBFE8613D40000000, float 0x3FEF48E8A0000000, float 0x3FE241B320000000, float 0x3FE1DD2F20000000, float 0xBFE15E0B40000000, float 0x3FCA324C80000000, float 0xBFF76A5F80000000, float 0x3FDAC2A460000000, float 0xBFE19B2800000000, float 0xBFC9888F80000000, float 0xBFE28DE2A0000000, float 0x3FDA5F30E0000000, float 0x3FD4B7FE00000000, float 0x3FD8A9E6E0000000, float 0xBFF1DD7880000000, float 0x3FD50C34C0000000, float 0xBFE89C8CA0000000, float 0x3FF1F620E0000000, float 0x3FE71797C0000000, float 0x3FEA6ED680000000, float 0x3FD82EDBC0000000, float 0x3FD66277C0000000, float 0xBFFDDCDB40000000, float 0x3FE3300140000000, float 0xBFC4E6AFC0000000, float 0xBFD7719F80000000, float 0xBFE22E33E0000000, float 0x3FE354C980000000, float 0x3FE102B400000000, float 0x3FE20B6300000000, float 0xBFE69003E0000000, float 0x3FE052A840000000, float 0xBFE2158B80000000], align 16
@av1_tx_type_nn_bias_4x16_ver_layer0 = internal constant [16 x float] [float 0xBFF60EDE60000000, float 0xBFAD81ADE0000000, float 0xBFB20663C0000000, float 0x3FC3977860000000, float 0x3FEEBA7320000000, float 0xBFF6BC9EE0000000, float 0xBFE1DCF040000000, float 0x3FF0C67380000000, float 0xBFC69B7C00000000, float 0xBFF40E21A0000000, float 0xBFBE887A80000000, float 0x3FDFE69AE0000000, float 0xBFD4D1B720000000, float 0x3FE783BA40000000, float 0x3FB54DE7E0000000, float 0xBFCE944680000000], align 16
@av1_tx_type_nn_bias_4x16_ver_layer1 = internal constant [4 x float] [float 0x40126F9340000000, float 0x4012245CC0000000, float 0x40121FFD60000000, float 0x401118EF40000000], align 16
@av1_tx_type_nnconfig_4x16_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_type_nn_weights_4x16_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_type_nn_weights_4x16_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_type_nn_bias_4x16_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_4x16_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_type_nn_weights_16x4_ver_layer0 = internal constant [32 x float] [float 0x3FD0AB8A60000000, float 0x3FEFFA4400000000, float 0x3FF2A32F40000000, float 0xBFD20BA200000000, float 0xC005660D40000000, float 0xBFCB76B3C0000000, float 0xBFC592B800000000, float 0x3FDDAE1480000000, float 0x3FF7AC12A0000000, float 0x3FF23295E0000000, float 0x3FF1FA1A00000000, float 0x3FD186C220000000, float 0x3FE0501E20000000, float 0x4000CC1FC0000000, float 0xBFF794EE40000000, float 0x3F93F7CEE0000000, float 0xBFB0496680000000, float 0x3FD0A62240000000, float 0x3FF0BA1F40000000, float 0xBF9FBBD7C0000000, float 0x3FB324C840000000, float 0xBFD9689CA0000000, float 0x3FAC63F140000000, float 0x4005E40100000000, float 0xBFE2048160000000, float 0xBF969C23C0000000, float 0xBFDC7DAA40000000, float 0xBF825EDD00000000, float 0xBFC6FF6D40000000, float 0xBFEEEB4640000000, float 0x3FDB495180000000, float 0xBFF0C3F3E0000000], align 16
@av1_tx_type_nn_weights_16x4_ver_layer1 = internal constant [32 x float] [float 0x3FBBF1E8E0000000, float 0xBFCB290AC0000000, float 0xBFE06DC5E0000000, float 0x3FE621AB40000000, float 0x3FF75BAB20000000, float 0xBFF5E92500000000, float 0xBFDA2CE460000000, float 0x3FF0D25EE0000000, float 0xBFB5B96280000000, float 0x3FB99ED7C0000000, float 0xBFE1B28100000000, float 0x3FEC29F160000000, float 0x3FF9C9CF60000000, float 0xBFFA5234E0000000, float 0x3FE44C05A0000000, float 0x3FF26BB980000000, float 0xBFC6209AA0000000, float 0xBFC7CC3A00000000, float 0xBF87689CA0000000, float 0x3FEC40F660000000, float 0x3FFBBB6EE0000000, float 0xBFFA2E0A00000000, float 0x3FB7F583A0000000, float 0x3FF2F160A0000000, float 0x3FD0FAD6C0000000, float 0x3FCCA4D2C0000000, float 0x3FC36AE7E0000000, float 0x3FF11D4960000000, float 0x3FF44A4D20000000, float 0xBFFF0509C0000000, float 0xBF7F751040000000, float 0x3FF9545620000000], align 16
@av1_tx_type_nn_bias_16x4_ver_layer0 = internal constant [8 x float] [float 0xBFE0AB0C80000000, float 0x3FE0E8FB00000000, float 0xBFF095B580000000, float 0xBFD3D2C7C0000000, float 0x4004CBD120000000, float 0xBFFEFA0520000000, float 0.000000e+00, float 0x4004249900000000], align 16
@av1_tx_type_nn_bias_16x4_ver_layer1 = internal constant [4 x float] [float 0x4002C6EC20000000, float 0x3FFAFC99A0000000, float 0x3FF413FD00000000, float 0x3FFB2B7FE0000000], align 16
@av1_tx_type_nnconfig_16x4_ver = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 4, i32 4, i32 1, <{ i32, [9 x i32] }> <{ i32 8, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_16x4_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_type_nn_weights_16x4_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([8 x float], [8 x float]* @av1_tx_type_nn_bias_16x4_ver_layer0, i32 0, i32 0), float* getelementptr inbounds ([4 x float], [4 x float]* @av1_tx_type_nn_bias_16x4_ver_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@get_adaptive_thresholds.prune_aggr_table = internal unnamed_addr constant [5 x [2 x i32]] [[2 x i32] [i32 4, i32 1], [2 x i32] [i32 6, i32 3], [2 x i32] [i32 9, i32 6], [2 x i32] [i32 9, i32 6], [2 x i32] [i32 12, i32 9]], align 16
@prune_2D_adaptive_thresholds = internal unnamed_addr constant [19 x float*] [float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral, i32 0, i32 0), float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.19, i32 0, i32 0), float* getelementptr inbounds ([10 x float], [10 x float]* @.compoundliteral.20, i32 0, i32 0), float* null, float* null, float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.21, i32 0, i32 0), float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.22, i32 0, i32 0), float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.23, i32 0, i32 0), float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.24, i32 0, i32 0), float* null, float* null, float* null, float* null, float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.25, i32 0, i32 0), float* getelementptr inbounds ([14 x float], [14 x float]* @.compoundliteral.26, i32 0, i32 0), float* null, float* null, float* null, float* null], align 16
@.compoundliteral = internal global [14 x float] [float 0x3F767CAEA0000000, float 0x3F8ABF3380000000, float 0x3F94E11DC0000000, float 0x3F9C211880000000, float 0x3FA1705000000000, float 0x3FA4D013A0000000, float 0x3FA82FD760000000, float 0x3FAB8F9B20000000, float 0x3FAF102360000000, float 0x3FB167CAE0000000, float 0x3FB3780340000000, float 0x3FB5D82FE0000000, float 0x3FB9081C20000000, float 0x3FBE282400000000], align 4
@.compoundliteral.19 = internal global [14 x float] [float 0x3F383F91E0000000, float 0x3F5DFB9380000000, float 0x3F75810620000000, float 0x3F85421C00000000, float 0x3F91609560000000, float 0x3F999ED7C0000000, float 0x3FA14F8B60000000, float 0x3FA62F5980000000, float 0x3FAB107740000000, float 0x3FB0183FA0000000, float 0x3FB307F240000000, float 0x3FB6A7EFA0000000, float 0x3FBBA7DAA0000000, float 0x3FC2142700000000], align 4
@.compoundliteral.20 = internal global [10 x float] [float 0x3F8CC100E0000000, float 0x3F947AE140000000, float 0x3FA58F7120000000, float 0x3FAA708EE0000000, float 0x3FADAF8E00000000, float 0x3FB037B4A0000000, float 0x3FB1A804A0000000, float 0x3FB387BDC0000000, float 0x3FB6B851E0000000, float 0x3FBC97B740000000], align 4
@.compoundliteral.21 = internal global [14 x float] [float 0x3F5DFB9380000000, float 0x3F7E83E420000000, float 0x3F8D3ED520000000, float 0x3F965FD8A0000000, float 0x3F9E5F30E0000000, float 0x3FA30FCF80000000, float 0x3FA6D09180000000, float 0x3FAA9003E0000000, float 0x3FAE4F7660000000, float 0x3FB1283900000000, float 0x3FB3780340000000, float 0x3FB64840E0000000, float 0x3FBA07B360000000, float 0x3FC01BDA60000000], align 4
@.compoundliteral.22 = internal global [14 x float] [float 0x3F4BDA5120000000, float 0x3F737F38C0000000, float 0x3F873EAB40000000, float 0x3F935FC3C0000000, float 0x3F9BA0A520000000, float 0x3FA2103860000000, float 0x3FA6501E20000000, float 0x3FAA708EE0000000, float 0x3FAEB074A0000000, float 0x3FB187E7C0000000, float 0x3FB417EBA0000000, float 0x3FB71800A0000000, float 0x3FBB17ACC0000000, float 0x3FC0CC2500000000], align 4
@.compoundliteral.23 = internal global [14 x float] [float 0x3F383F91E0000000, float 0x3F63016480000000, float 0x3F7B7BF1E0000000, float 0x3F89BE4CE0000000, float 0x3F941F2120000000, float 0x3F9BDF8F40000000, float 0x3FA22FAD60000000, float 0x3FA66F9340000000, float 0x3FAAD03DA0000000, float 0x3FAFB00BC0000000, float 0x3FB2C7B8A0000000, float 0x3FB657FB60000000, float 0x3FBB780340000000, float 0x3FC233F000000000], align 4
@.compoundliteral.24 = internal global [14 x float] [float 0x3F43FD0D00000000, float 0x3F6B089A00000000, float 0x3F80C0AD00000000, float 0x3F8DC1E7A0000000, float 0x3F965FD8A0000000, float 0x3F9E5F30E0000000, float 0x3FA3500920000000, float 0x3FA77079E0000000, float 0x3FAB8F9B20000000, float 0x3FB007DD40000000, float 0x3FB2A84380000000, float 0x3FB5F84CA0000000, float 0x3FBA77C460000000, float 0x3FC13BE220000000], align 4
@.compoundliteral.25 = internal global [14 x float] [float 0x3F63016480000000, float 0x3F7B7BF1E0000000, float 0x3F89BE4CE0000000, float 0x3F93E03700000000, float 0x3F9B5F1BE0000000, float 0x3FA18FC500000000, float 0x3FA58F7120000000, float 0x3FA96FA820000000, float 0x3FAD70A3E0000000, float 0x3FB0D844E0000000, float 0x3FB337C9A0000000, float 0x3FB6282400000000, float 0x3FBA383280000000, float 0x3FC07BDD00000000], align 4
@.compoundliteral.26 = internal global [14 x float] [float 0x3F5205BC00000000, float 0x3F75810620000000, float 0x3F88BD6620000000, float 0x3F9460AA60000000, float 0x3F9C9EECC0000000, float 0x3FA26FE720000000, float 0x3FA6501E20000000, float 0x3FAA305540000000, float 0x3FAE300140000000, float 0x3FB1283900000000, float 0x3FB387BDC0000000, float 0x3FB667B600000000, float 0x3FBA27D020000000, float 0x3FC0240B80000000], align 4
@aom_satd = external local_unnamed_addr global i32 (i32*, i32)*, align 8
@sqrt_tx_pixels_2d = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 32, i32 6, i32 6, i32 12, i32 12, i32 23, i32 23, i32 32, i32 32, i32 8, i32 8, i32 16, i32 16, i32 23, i32 23], align 16
@aom_convolve_copy = external local_unnamed_addr global void (i8*, i64, i8*, i64, i32, i32)*, align 8
@av1_tx_split_nnconfig_map = internal unnamed_addr constant [19 x %struct.NN_CONFIG*] [%struct.NN_CONFIG* null, %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_8x8 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_16x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_32x32 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_64x64 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_4x8 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_4x8 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_8x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_8x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_16x32 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_16x32 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_32x64 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_32x64 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_4x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_4x16 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_8x32 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_8x32 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_16x64 to %struct.NN_CONFIG*), %struct.NN_CONFIG* bitcast ({ i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> }* @av1_tx_split_nnconfig_16x64 to %struct.NN_CONFIG*)], align 16
@av1_tx_split_nn_weights_8x8_layer0 = internal constant [144 x float] [float 0x3FC6C825A0000000, float 0xBFEE074220000000, float 0xBFB30FCF80000000, float 0xBFCC655A00000000, float 0xBFB2BC0E40000000, float 0xBFD2E3D1C0000000, float 0xBFB923C420000000, float 0xBFD1E37DE0000000, float 0x3F5144CBE0000000, float 0xBFBE8BB0A0000000, float 0xBFFD5D50A0000000, float 0xBFE29BB4A0000000, float 0xBFF38E38A0000000, float 0xBFF0C8BA80000000, float 0xBFE9D71B00000000, float 0xBFDD127700000000, float 0xBFE8CBCF00000000, float 0xBFC71E2160000000, float 0xBFEC621B80000000, float 0xBFCDB139C0000000, float 0xBFEA63C100000000, float 0xBFD6851220000000, float 0xBFF52E5CE0000000, float 0x3FCE20DDC0000000, float 0x3F8F65DC00000000, float 0xBFD5E058A0000000, float 0x3FC2A15980000000, float 0xBFD64B9020000000, float 0x3FC2E618C0000000, float 0xBFD4B295E0000000, float 0x3FA85985A0000000, float 0xBFE1B26180000000, float 0xBFD2E939E0000000, float 0xBFD524BFE0000000, float 0xBFE0FAB760000000, float 0xBFDA14BE00000000, float 0x3FDCA7C5A0000000, float 0x3FE90943E0000000, float 0xBFC6EED8A0000000, float 0xBFE2B5A860000000, float 0xBFAAF44920000000, float 0x3FA3CAB820000000, float 0xBFB8C6C540000000, float 0x3FA3A19000000000, float 0xBFC5DB8780000000, float 0xBFD9F95920000000, float 0xBFE1AF6E80000000, float 0xBFE050D280000000, float 0x3FE83B03E0000000, float 0xBFF4BE5220000000, float 0x3FE4314660000000, float 0x3F82F98740000000, float 0x3FE4AD9AE0000000, float 0x3FA6CBB800000000, float 0x3FE4E6B1E0000000, float 0x3FA150DAE0000000, float 0x3FEB303E20000000, float 0xBFB18CD200000000, float 0xBFF093CDE0000000, float 0xBFE05F7400000000, float 0x3FBACD2920000000, float 0xBFF756CB60000000, float 0x3FD24EA8E0000000, float 0xBFB6FD2200000000, float 0x3FD86B8B60000000, float 0xBFD35E7420000000, float 0x3FD37C5AC0000000, float 0xBFD1327AA0000000, float 0x3FDBAFC480000000, float 0xBFBE2F9CA0000000, float 0xC0008F6C60000000, float 0xBFE21A2E80000000, float 0xBFB2B1E5C0000000, float 0xBFFC8980C0000000, float 0xBFD45C78A0000000, float 0xBFD48B19A0000000, float 0xBFD6038A00000000, float 0xBFC20C2820000000, float 0xBFD4ABA7C0000000, float 0xBFCDB6FE20000000, float 0xBFD7E2AC40000000, float 0xBFC4420F60000000, float 0xBFFEC1C2E0000000, float 0xBFE44CC8A0000000, float 0x3FBA15B9A0000000, float 0xBFCC657B80000000, float 0x3F92DA9860000000, float 0xBFDB20F700000000, float 0xBFD11159C0000000, float 0xBFDC79BBA0000000, float 0xBFC91E4B40000000, float 0x3FBB4CA0C0000000, float 0xBFB0DA7F40000000, float 0xBFE13A94C0000000, float 0xBFD1F82B20000000, float 0xBFE3D9E400000000, float 0x3FF17076C0000000, float 0xBFE99902A0000000, float 0x3FE021AF80000000, float 0xBFC537B8E0000000, float 0x3FE2850BE0000000, float 0xBFC6197E60000000, float 0x3FE1839CE0000000, float 0xBFC25DAF00000000, float 0x3FE6F37760000000, float 0xBFD3052940000000, float 0xBFF3CE4000000000, float 0xBFB3275680000000, float 0xBFEF461300000000, float 0xBFDEFB5D00000000, float 0xBFE4AF87A0000000, float 0xBFDCE47120000000, float 0xBFE3968940000000, float 0xBFCCBB98C0000000, float 0xBFE7695520000000, float 0xBFD073F320000000, float 0xBFE54EB360000000, float 0xBFD6310560000000, float 0xBFF3764280000000, float 0x3FCD1715C0000000, float 0x3FCD999140000000, float 0xBFFB16D3C0000000, float 0xBFA2615A80000000, float 0x3FD85FC3C0000000, float 0xBFADF09100000000, float 0x3FDA33B100000000, float 0xBFB111E000000000, float 0x3FDA07E180000000, float 0xBFB1894820000000, float 0x3FD96451C0000000, float 0x3FE4767900000000, float 0x3FC34E8740000000, float 0xBFDACB4F20000000, float 0xBFF6C03AC0000000, float 0x3FBA1565C0000000, float 0x3FB5650A40000000, float 0x3FC09B8460000000, float 0x3FC135FC40000000, float 0x3FB4C88A40000000, float 0x3FC04F4C60000000, float 0x3FB56B0100000000, float 0x3FAA294140000000, float 0x3FF5C97960000000, float 0x3FD8B5BF60000000], align 16
@av1_tx_split_nn_weights_8x8_layer1 = internal constant [12 x float] [float 0x3FF2DC8000000000, float 0xBFDB6CFC80000000, float 0xBFB4281BA0000000, float 0x3FD8696A20000000, float 0xBFDDE19BA0000000, float 0xBFECDB1860000000, float 0xBFE88B0080000000, float 0xBFD6D39100000000, float 0x3FDCCF3120000000, float 0x3FE04CC260000000, float 0xBFD6D299A0000000, float 0xBFDC626700000000], align 16
@av1_tx_split_nn_bias_8x8_layer0 = internal constant [12 x float] [float 0x40111F2C80000000, float 0x4001C04FC0000000, float 0xBFD071EB00000000, float 0x40094A9C60000000, float 0x4000A90EE0000000, float 0x40040C6500000000, float 0x4004817BA0000000, float 0x3FF6C069E0000000, float 0xBFFA0B85A0000000, float 0xBFF6FA3440000000, float 0x400260CC80000000, float 0x3FF801EBC0000000], align 16
@av1_tx_split_nn_bias_8x8_layer1 = internal constant [1 x float] [float 0xBFC4017120000000], align 4
@av1_tx_split_nnconfig_8x8 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 12, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 12, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([144 x float], [144 x float]* @av1_tx_split_nn_weights_8x8_layer0, i32 0, i32 0), float* getelementptr inbounds ([12 x float], [12 x float]* @av1_tx_split_nn_weights_8x8_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([12 x float], [12 x float]* @av1_tx_split_nn_bias_8x8_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_8x8_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_16x16_layer0 = internal constant [288 x float] [float 0xBFC6AEFB20000000, float 0xBFD304C480000000, float 0x3FD331F460000000, float 0x3FCA9BBF00000000, float 0x3FCBC26DC0000000, float 0x3FC62D83C0000000, float 0x3FD2E8E1E0000000, float 0x3FA8C73AC0000000, float 0x3FC3CE39C0000000, float 0x3FD39389C0000000, float 0x3FAD132F80000000, float 0xBFC553B4C0000000, float 0x3FBD9B6F60000000, float 0xBFE0F179C0000000, float 0xBFB2F15620000000, float 0xBFCB1A7E40000000, float 0xBF929AE500000000, float 0x3F49D23920000000, float 0xBF9989DF20000000, float 0xBF7CE5B420000000, float 0x3F56CE78A0000000, float 0x3F9632C200000000, float 0xBFF9837B40000000, float 0xBFB97EED40000000, float 0x3FD54EB9A0000000, float 0x3FBA83D360000000, float 0x3FC44180E0000000, float 0x3FC75F7840000000, float 0x3FD54A6220000000, float 0x3FCCF459E0000000, float 0xBFC1DD4C80000000, float 0x3FC7BF7AE0000000, float 0x3FB95CE9E0000000, float 0xBFC7C382A0000000, float 0xBFC9FFDE80000000, float 0xBFD2488C60000000, float 0xBFD40F9D20000000, float 0xBFD2D84D40000000, float 0xBFC264FDC0000000, float 0xBFA001F760000000, float 0xBFDCFE7180000000, float 0xBFAFADF2E0000000, float 0xBFB0EF34E0000000, float 0xBFB95BDD80000000, float 0xBFDD5E4600000000, float 0x3FC0535CA0000000, float 0x3FD5A6EFC0000000, float 0xBFC4A71DE0000000, float 0x3F9ED02CE0000000, float 0xBFB355CDA0000000, float 0x3F71B1D920000000, float 0x3FD6A2DB60000000, float 0xBF8B9B6700000000, float 0xBFDAE7DDC0000000, float 0xBF731550C0000000, float 0xBFD514E7E0000000, float 0xBF5C970F80000000, float 0x3FCD1AEB40000000, float 0xBFAC40F240000000, float 0x3FBF1465E0000000, float 0x3FC4860560000000, float 0x3FC2619540000000, float 0xBFCC645E40000000, float 0x3FB4405B40000000, float 0xBFE50B6100000000, float 0xBFB597D4A0000000, float 0xBFD36B2280000000, float 0x3FA7F2C300000000, float 0xBFD7880D80000000, float 0x3FAEB8F9C0000000, float 0x3FC59628C0000000, float 0x3FB59C9D60000000, float 0xBFC11A9FC0000000, float 0x3FD349BA60000000, float 0x3FB4545840000000, float 0xBFDAD5DC40000000, float 0x3F91A60D40000000, float 0x3FB19231C0000000, float 0x3F92D34160000000, float 0xBFDB69AD40000000, float 0xBF943A2160000000, float 0x3FC320FB20000000, float 0xBFDE63B680000000, float 0xBFD260DCC0000000, float 0x3FC95AC8A0000000, float 0x3F9CF89400000000, float 0xBFD32452C0000000, float 0xBF77F51F00000000, float 0xBFD0665160000000, float 0x3FCDDC0540000000, float 0xBFCBD90A00000000, float 0xBFD0E56CE0000000, float 0x3FD13E07A0000000, float 0x3FCA800640000000, float 0xBFD5B8E8E0000000, float 0xBFC9662FE0000000, float 0xBF9D349BE0000000, float 0x3FC43BD5A0000000, float 0x3FC6ABBCC0000000, float 0x3FD61FFB40000000, float 0xBFC293AF80000000, float 0x3FB08B2200000000, float 0xBFB7430F40000000, float 0x3FD27BF620000000, float 0xBFD0D83C60000000, float 0xBFB22EE420000000, float 0xBFA6CEBBC0000000, float 0x3FD85232E0000000, float 0xBF8CE07600000000, float 0xBFD15B35C0000000, float 0xBFD4634540000000, float 0x3FC0839040000000, float 0xBFA9C2C1C0000000, float 0xBFB7E61D00000000, float 0xBFE2830E40000000, float 0x3FB95DF660000000, float 0xBFC108C400000000, float 0xBF9EB1C440000000, float 0xBFAEA1C680000000, float 0xBFC431A4C0000000, float 0xBFD48DC560000000, float 0xBFD5FEB4A0000000, float 0xBFCF1947C0000000, float 0x3FC06C4400000000, float 0x3F91950340000000, float 0x3FB2A22B40000000, float 0xBFDE742140000000, float 0xBF6F2DC2C0000000, float 0xBFB190C0A0000000, float 0x3FC3456B40000000, float 0xBFC477B3A0000000, float 0xBFDAA82620000000, float 0x3FCC017120000000, float 0xBFD296D4C0000000, float 0xBFB5A65060000000, float 0xBFC5C304C0000000, float 0xBFA6BD6E80000000, float 0xBFC397C3E0000000, float 0xBFB3CBD560000000, float 0xBFB6F9A8C0000000, float 0xBFB8B5ED80000000, float 0x3FE136E720000000, float 0x3FC13EAB40000000, float 0xBF7A7F3D00000000, float 0xBFD4B18540000000, float 0xBFC5870540000000, float 0xBFBB6F08C0000000, float 0xBFC1EA0340000000, float 0x3F871D1D40000000, float 0xBF963BABA0000000, float 0xBFE0729F60000000, float 0x3FD095AB00000000, float 0xBFD477BC00000000, float 0x3FB3EB6C00000000, float 0x3FBAC7EAE0000000, float 0x3FD7B76F60000000, float 0x3FC7B61340000000, float 0x3FB0C69300000000, float 0xBFB75232E0000000, float 0xBFE25C1620000000, float 0x3FBCA7B4E0000000, float 0x3FDBFEA3E0000000, float 0xBFBFAA36A0000000, float 0x3FCC3DF6E0000000, float 0xBF9960B700000000, float 0xBFC3218160000000, float 0xBFD6AAF780000000, float 0xBFC12B12E0000000, float 0x3FA376B3C0000000, float 0xBFD85BAF60000000, float 0x3FD0100E60000000, float 0x3FC233DF20000000, float 0x3FC14D4020000000, float 0xBFC0C8D5C0000000, float 0xBFD6E23280000000, float 0xBFE0FD8060000000, float 0x3FC47021E0000000, float 0xBFC2D1B720000000, float 0xBFD82E59A0000000, float 0xBFE024EE00000000, float 0xBFDF8B2EA0000000, float 0x3F95404640000000, float 0x3FC247DC40000000, float 0x3F99C6B060000000, float 0x3FB60D4560000000, float 0x3FB75E52A0000000, float 0x3FB665CF60000000, float 0xBFC7DC7260000000, float 0x3FC6C1A8A0000000, float 0xBFC8F9B9A0000000, float 0xBFF30EF140000000, float 0xBFDE88D6E0000000, float 0x3F97EE9140000000, float 0x3FCD0E77A0000000, float 0xBF9810E880000000, float 0xBFCF17C5E0000000, float 0xBFB30BBF60000000, float 0xBFC3A53B80000000, float 0x3FC4D9E840000000, float 0x3FDA97B300000000, float 0xBFC4CEEE00000000, float 0xBFC0DBD720000000, float 0xBFD0910800000000, float 0xBFD02135E0000000, float 0xBFB4B24200000000, float 0xBFD5233580000000, float 0x3F96662340000000, float 0x3FCDBF37C0000000, float 0x3FB1BC2340000000, float 0x3FCC3B8A20000000, float 0xBF98D19580000000, float 0xBFD7792D20000000, float 0x3FB4E88580000000, float 0xBFDB839480000000, float 0xBFD356C0E0000000, float 0x3FAF414A40000000, float 0x3FD693E600000000, float 0xBFCD7CF600000000, float 0x3FDA1F2DC0000000, float 0x3FB093FB00000000, float 0x3FC22EBA20000000, float 0x3F7D91AB80000000, float 0x3FE3EE9DE0000000, float 0x3FCB35B920000000, float 0x3FA2AEAFA0000000, float 0x3FB4C63F20000000, float 0xBFD2399F60000000, float 0x3FBB965B20000000, float 0xBFE0F401C0000000, float 0xBFB27B0B40000000, float 0xBFD33A1900000000, float 0xBFD26DEBA0000000, float 0xBFE2346DC0000000, float 0x3F87A5F420000000, float 0xBFC0DB6A20000000, float 0xBFD6D6B220000000, float 0xBFE2D095A0000000, float 0xBF9B3C81A0000000, float 0x3FD9F91A40000000, float 0x3FAD7928E0000000, float 0x3FDA835160000000, float 0xBFC45F30E0000000, float 0x3FCC58ABA0000000, float 0x3FC2BA6AC0000000, float 0x3FD1027960000000, float 0xBF7AB08560000000, float 0x3FDE55A7E0000000, float 0xBFC7DCF8A0000000, float 0x3FD2799A20000000, float 0xBFAEF19940000000, float 0x3FB5586440000000, float 0xBFCA5271C0000000, float 0x3FD70A8080000000, float 0x3FCC6BD6E0000000, float 0x3FDAE175E0000000, float 0x3F992B3CC0000000, float 0x3FD829B6C0000000, float 0x3FD00639E0000000, float 0xBFB1E4F760000000, float 0x3FD2FDD660000000, float 0x3FB2D2FE40000000, float 0xBFCF21FF20000000, float 0xBFD7FFC980000000, float 0xBFD8C953A0000000, float 0xBFCE5E5F40000000, float 0xBFD25E6BC0000000, float 0x3FDABDBE40000000, float 0xBFD030F4A0000000, float 0xBFD07D5EE0000000, float 0xBFB1182AA0000000, float 0xBFD04052E0000000, float 0x3FAD9D55E0000000, float 0x3FD6270B00000000, float 0xBFC432B120000000, float 0xBFD9FC5CE0000000, float 0xBFD25C7480000000, float 0x3FD19185C0000000, float 0xBFDCF6C260000000, float 0x3FC25A4F00000000, float 0xBFB90678C0000000, float 0x3F95C07680000000, float 0x3FA1B1FAC0000000, float 0x3FA6963DC0000000, float 0x3F70A67620000000, float 0x3FB11526E0000000, float 0x3FA64D3C00000000, float 0x3FBA5D9E40000000, float 0xBFDE909280000000], align 16
@av1_tx_split_nn_weights_16x16_layer1 = internal constant [24 x float] [float 0xBFC68C71A0000000, float 0x3FFAB91700000000, float 0xBFC722FAE0000000, float 0xBFD4909AE0000000, float 0x3FCFF71640000000, float 0xBFC5D31340000000, float 0xBFE13AD5C0000000, float 0x3FA15A6C60000000, float 0x3FC32E05C0000000, float 0x3FD9DD6E00000000, float 0xBFD82E1260000000, float 0x3FD5AF85A0000000, float 0xBFC68A2660000000, float 0x3FCFFAE360000000, float 0xBFD733BDA0000000, float 0x3FF6996FA0000000, float 0x3FC932C620000000, float 0x3FD1CDEE40000000, float 0xBFC1FA11A0000000, float 0x3FD30E4540000000, float 0x3FC6158FC0000000, float 0x3FBDD0FA60000000, float 0xBFC36976C0000000, float 0xBFE34DD300000000], align 16
@av1_tx_split_nn_bias_16x16_layer0 = internal constant [24 x float] [float 0xBFDEA87A00000000, float 0x3FF77A7A80000000, float 0xBFD7714FC0000000, float 0x3FD7D73860000000, float 0x3FE6E3EB00000000, float 0xBFE3604180000000, float 0x3FC6A2F480000000, float 0x3FA08BFC20000000, float 0x3FCE6412C0000000, float 0xBFA79378E0000000, float 0x3FDCEEE960000000, float 0x3FDCEA5F80000000, float 0xBFEA54BF00000000, float 0x3FE4605AC0000000, float 0xBFAD5CFAA0000000, float 0x3FF29FA760000000, float 0x3FE74E2080000000, float 0x3FE3512240000000, float 0xBFCF6D2AA0000000, float 0xBFEC981E00000000, float 0xBFF6D9D880000000, float 0x3FE9E24360000000, float 0xBFB37F2800000000, float 0x3FF3B62C80000000], align 16
@av1_tx_split_nn_bias_16x16_layer1 = internal constant [1 x float] [float 0x3FC7A79FE0000000], align 4
@av1_tx_split_nnconfig_16x16 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 12, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 24, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([288 x float], [288 x float]* @av1_tx_split_nn_weights_16x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([24 x float], [24 x float]* @av1_tx_split_nn_weights_16x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([24 x float], [24 x float]* @av1_tx_split_nn_bias_16x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_16x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_32x32_layer0 = internal constant [384 x float] [float 0xBFDC1D8A60000000, float 0x3F73B6CBE0000000, float 0xBFD75D0320000000, float 0xBFBDEB0FA0000000, float 0xBFD6D46F60000000, float 0xBFC9281FE0000000, float 0xBFC92FC260000000, float 0xBFB37B0700000000, float 0x3FD6D92740000000, float 0xBFA6FE5000000000, float 0xBFBCE7AB80000000, float 0xBFC085B9E0000000, float 0x3FC40F90A0000000, float 0xBFD8B9E4A0000000, float 0x3FA3F401C0000000, float 0x3FC491AFC0000000, float 0x3FCA3AEAC0000000, float 0xBFD898E980000000, float 0xBFD4737120000000, float 0x3F9CDAF4A0000000, float 0xBFD00895E0000000, float 0xBFD289EFE0000000, float 0xBFD22F5120000000, float 0xBFD092D980000000, float 0xBFC7263940000000, float 0xBF4A719B40000000, float 0xBF9E54B480000000, float 0xBFD699BF60000000, float 0x3FCB302F80000000, float 0x3FC219DAA0000000, float 0x3FD3649D40000000, float 0x3FB91ADA80000000, float 0x3FDEE08AE0000000, float 0x3FA277A2C0000000, float 0xBFC548A160000000, float 0x3FCAE52DE0000000, float 0xBFB61A2E80000000, float 0xBF981D7DC0000000, float 0xBFD00D0AA0000000, float 0xBFC78B8280000000, float 0xBFD934EFC0000000, float 0x3FC5D67BA0000000, float 0xBFD39C1B60000000, float 0x3F9AF31B20000000, float 0xBFD1BF37C0000000, float 0x3FB7BA2380000000, float 0xBFA131EC00000000, float 0xBF92CFD900000000, float 0xBF99A4DF40000000, float 0xBFD07D7C20000000, float 0xBFC1D017E0000000, float 0xBFCA7D4E00000000, float 0xBFC8555C60000000, float 0x3F9CB9ED00000000, float 0x3FD7289120000000, float 0xBFD757ABC0000000, float 0xBFB8C5FC00000000, float 0xBFC792C060000000, float 0xBFDBBA01E0000000, float 0xBFC75208E0000000, float 0xBFB8D855A0000000, float 0x3FD0964620000000, float 0x3F90D38CE0000000, float 0x3FD0995240000000, float 0x3FC2914B20000000, float 0x3FA30B5AA0000000, float 0x3FB771DA40000000, float 0xBFCC1D4B60000000, float 0x3FC1F81A60000000, float 0xBFDC98FA40000000, float 0xBFCE051CA0000000, float 0x3FC3231400000000, float 0xBFB55B9A60000000, float 0x3FC7D50A80000000, float 0xBFB9926420000000, float 0xBFBC7CA640000000, float 0x3FDFB19600000000, float 0x3FB5C60880000000, float 0xBFD1103000000000, float 0xBFAA4CA500000000, float 0x3FC3051860000000, float 0x3FBCA3D700000000, float 0x3FB3E9D940000000, float 0xBFD7C929A0000000, float 0xBFC2B545C0000000, float 0xBFCD579280000000, float 0x3FB3820A40000000, float 0x3FDF4B5DC0000000, float 0x3FB8C5FC00000000, float 0xBF836BD2C0000000, float 0x3FC8B3BB80000000, float 0x3FCF85DFA0000000, float 0xBFC8A97180000000, float 0xBFE1DA3C20000000, float 0xBFD2BAC720000000, float 0xBFB6C29C00000000, float 0xBFBB5D4620000000, float 0xBFD5192200000000, float 0x3F88CA81A0000000, float 0xBFD6FF3280000000, float 0x3FC5DA4060000000, float 0xBF71D8A540000000, float 0x3FC5F6C260000000, float 0xBFDEA42280000000, float 0xBFCE35C5C0000000, float 0xBFA1F59CC0000000, float 0x3FC11E18E0000000, float 0x3FC1A8BD20000000, float 0xBFD9779EA0000000, float 0xBFC3DC6A00000000, float 0xBFD1B599A0000000, float 0xBFC7E29300000000, float 0xBFD08800E0000000, float 0x3FA2ED13A0000000, float 0xBFE4C78C80000000, float 0x3FC0555C60000000, float 0x3FB911F0C0000000, float 0x3FC7652BE0000000, float 0xBFD40D8020000000, float 0x3FAB508F60000000, float 0x3FCA2352E0000000, float 0xBFCC898F60000000, float 0xBFAE364BE0000000, float 0xBFA97A0300000000, float 0xBFAD1B2E60000000, float 0x3FB6663420000000, float 0xBFA4792D20000000, float 0xBFAC2E7700000000, float 0xBFA54F9C20000000, float 0xBFB4139860000000, float 0xBFD44E7EE0000000, float 0xBFC87FBAC0000000, float 0x3FE43A8C60000000, float 0x3FCC64C300000000, float 0x3FD12D5E00000000, float 0xBFB8AADA40000000, float 0x3FDC52A840000000, float 0xBF7D26B720000000, float 0xBFA27EF9E0000000, float 0x3F413404E0000000, float 0x3FB68D3280000000, float 0xBFCA114D20000000, float 0x3FB640B780000000, float 0x3FDC1AE2E0000000, float 0x3FD51CE6C0000000, float 0xBFD7AEE640000000, float 0xBFC8DF04E0000000, float 0xBFCA8D1100000000, float 0x3FC0FEE700000000, float 0xBFCBDAC680000000, float 0xBFA4320100000000, float 0xBFAB254E60000000, float 0xBFD0AFB7E0000000, float 0xBFBDD712A0000000, float 0xBFD158D9C0000000, float 0x3FD228BF40000000, float 0xBF7DE69AE0000000, float 0x3FAFE02640000000, float 0xBFD6436B80000000, float 0xBFD2FE3B00000000, float 0xBFD6FBDF00000000, float 0x3FCD7FAE40000000, float 0xBFC834FC60000000, float 0xBFB66E6540000000, float 0xBFE1F47520000000, float 0x3FC79346A0000000, float 0xBFA7079E60000000, float 0x3F89E492C0000000, float 0x3FCEEF1BA0000000, float 0x3FA9BD4060000000, float 0xBFCA388EC0000000, float 0xBFC4637360000000, float 0xBFB0679CC0000000, float 0xBFBE60E520000000, float 0xBFD13F0340000000, float 0x3FCDA74C00000000, float 0x3FC1603920000000, float 0xBFC0C9EAA0000000, float 0x3FB0110A20000000, float 0x3FB9D7CB20000000, float 0x3FB3310980000000, float 0xBFAD245B20000000, float 0x3FD01BF7A0000000, float 0x3FA1754B00000000, float 0x3FD5D7B200000000, float 0xBFBAE30CA0000000, float 0x3FD40C3900000000, float 0xBFB7B9CFA0000000, float 0xBF8DF761C0000000, float 0xBFD9059A80000000, float 0x3FC1855100000000, float 0xBFCEEB3DE0000000, float 0x3FB90129C0000000, float 0x3FBC5F7C60000000, float 0xBFD8F9C620000000, float 0x3F9213E3E0000000, float 0xBFE032F880000000, float 0x3FB0B45AE0000000, float 0x3FCF56B880000000, float 0xBFC5EEDCC0000000, float 0xBFD53A9B00000000, float 0x3FBC6D5060000000, float 0x3FC0071C60000000, float 0xBFADC16160000000, float 0xBFD87C6FC0000000, float 0xBFAAE72DA0000000, float 0x3FBD403580000000, float 0xBFDF976BC0000000, float 0x3FCF3ADE20000000, float 0xBFC5E510A0000000, float 0x3FC51F03E0000000, float 0xBFB0221420000000, float 0x3FB8B45AE0000000, float 0x3FD5D87F80000000, float 0xBF8B8800E0000000, float 0x3FACDCCA80000000, float 0x3FD5B6D440000000, float 0x3FD97EFE00000000, float 0x3FD8EC13C0000000, float 0x3FD076D120000000, float 0x3FE08E4760000000, float 0x3FB42FE820000000, float 0x3FB6748E40000000, float 0xBFC5E657C0000000, float 0x3FCD1D7120000000, float 0x3FC00A0F40000000, float 0xBFABDD54E0000000, float 0xBFC2531980000000, float 0x3FCCAD6020000000, float 0xBFB6235B40000000, float 0xBFB7B139C0000000, float 0x3FB2884840000000, float 0xBFAF8B1580000000, float 0x3FD088C1E0000000, float 0x3FC2D1FA40000000, float 0xBFDE9B8CC0000000, float 0xBFCA3925C0000000, float 0x3FA3BD1680000000, float 0xBFC2810A60000000, float 0x3FCCAEE200000000, float 0xBFD2FD3700000000, float 0x3FC3B2A280000000, float 0xBFB08B32C0000000, float 0x3FB5D3ED60000000, float 0xBFBA945740000000, float 0x3FC0615A80000000, float 0x3F9471B480000000, float 0x3FBCA7E740000000, float 0xBFB2FDEB60000000, float 0xBF9E39F780000000, float 0xBFC04B87C0000000, float 0xBF89018E80000000, float 0x3FA5DE9C00000000, float 0x3FB1EEED80000000, float 0xBFC9E6EEC0000000, float 0x3FD647FDC0000000, float 0xBFC0E88E00000000, float 0xBFCAD3AE60000000, float 0xBFCFC7D5E0000000, float 0xBFB0D690A0000000, float 0xBFB6E84AE0000000, float 0xBFC10D8CC0000000, float 0x3FD4D3D860000000, float 0xBF8B951C60000000, float 0xBFD9FD60E0000000, float 0xBFC28D4340000000, float 0x3FCAB40F60000000, float 0x3FD5FB00C0000000, float 0xBFAE8900C0000000, float 0x3FBD6744C0000000, float 0xBFB1C63AE0000000, float 0xBFCBFF2E40000000, float 0x3FC864C300000000, float 0xBFD78EF780000000, float 0x3F9EC02F20000000, float 0x3FB014A4E0000000, float 0xBFCEA3A4C0000000, float 0xBFE1361560000000, float 0x3F9706D500000000, float 0x3F97974600000000, float 0x3FC86BBDC0000000, float 0x3FA48B0080000000, float 0xBF71A11240000000, float 0x3FAF1A7E40000000, float 0xBFBBE2C560000000, float 0x3FC1828800000000, float 0xBFE15F3B60000000, float 0xBFCD10C2C0000000, float 0xBFC753C580000000, float 0x3FB5229620000000, float 0x3F939BCBA0000000, float 0x3FC6E4B020000000, float 0x3FBECAEEA0000000, float 0x3F82934AC0000000, float 0x3FB17A0300000000, float 0xBFE16F2E80000000, float 0x3FBEDB7280000000, float 0x3FD6A86500000000, float 0xBFBEB11C60000000, float 0xBFBF3EFF20000000, float 0xBFD9F10240000000, float 0x3FBF51BD60000000, float 0xBFD37B7C80000000, float 0x3FAFF38C60000000, float 0xBFD35D4620000000, float 0xBFD1B24200000000, float 0xBFBEF44920000000, float 0xBFCC654920000000, float 0x3FD20C6720000000, float 0xBFD0410FA0000000, float 0x3FAE790320000000, float 0xBFC28E92E0000000, float 0x3FC31F3E80000000, float 0xBFA83EEA20000000, float 0xBFC57891E0000000, float 0xBFD91BFBE0000000, float 0xBFA50F40E0000000, float 0x3FD5E58A40000000, float 0x3F91E79680000000, float 0x3F958AFC40000000, float 0xBF984C2720000000, float 0xBFC8996320000000, float 0xBFBA9F7B60000000, float 0x3FB7C68660000000, float 0xBFBD470640000000, float 0xBFD97470E0000000, float 0xBFB0BF6E40000000, float 0x3FAB2DD380000000, float 0x3FA205DD80000000, float 0x3FAB254E60000000, float 0xBFBAF9FCC0000000, float 0xBFA4395820000000, float 0x3FC0E23B00000000, float 0xBFBFB8A1A0000000, float 0xBFD8FB2240000000, float 0xBFC0067D00000000, float 0xBF2083DBC0000000, float 0x3F8E710440000000, float 0xBFCC2F1660000000, float 0x3FB584B1A0000000, float 0xBFDF7F77A0000000, float 0xBFC51E0820000000, float 0x3FC1198AE0000000, float 0x3FBF1BDE80000000, float 0xBFCED2F5E0000000, float 0x3FC7E52160000000, float 0x3FBE615A80000000, float 0x3FCE14AD40000000, float 0xBFCEB4D8C0000000, float 0xBFC7C6F360000000, float 0xBFD59146E0000000, float 0x3FCAD4D400000000, float 0xBFD32046C0000000, float 0x3FC05BD940000000, float 0xBFB5807FE0000000, float 0x3FC8E02220000000, float 0xBFCF688BE0000000, float 0x3FCB2CE8A0000000, float 0x3FC23DD540000000, float 0xBFC4E7CD00000000, float 0x3FD88B2EA0000000, float 0x3FD2A0CF20000000, float 0x3FD257FB60000000, float 0xBFCEB6E940000000, float 0x3FCCD0F620000000, float 0xBFC6538680000000, float 0x3FD305D520000000, float 0xBFA7432020000000, float 0x3FC4065B60000000, float 0xBFC7964200000000, float 0xBFCA2F4060000000, float 0x3FC9ED3100000000, float 0x3FD7AE6420000000, float 0xBFB2EBC400000000, float 0x3FD612CAE0000000, float 0x3FB0275260000000, float 0x3FD5AAC100000000, float 0xBFB9619120000000, float 0x3FD9144880000000, float 0xBFCB6C58E0000000, float 0xBFCEF123C0000000, float 0xBFD209D8C0000000, float 0xBFA1FCF3E0000000, float 0xBFC39AA600000000], align 16
@av1_tx_split_nn_weights_32x32_layer1 = internal constant [32 x float] [float 0xBFB71F9AC0000000, float 0xBFD11F96A0000000, float 0xBF9AB25B40000000, float 0x3FB9D55E60000000, float 0x3FD1DD6160000000, float 0x3FB43D89C0000000, float 0xBFB32BA9E0000000, float 0x3FAB8C32A0000000, float 0x3FE793F2A0000000, float 0xBFA03A10A0000000, float 0xBFEF0E7360000000, float 0x3FC647E4A0000000, float 0x3FB88F8620000000, float 0xBFB0A6EBA0000000, float 0x3FAB172680000000, float 0x3FC69F05E0000000, float 0xBFADD61700000000, float 0x3FC2FD9760000000, float 0xBFC4C34C20000000, float 0x3FB8083120000000, float 0xBFD787CA60000000, float 0x3F956084A0000000, float 0x3FC1926420000000, float 0xBFF195FAA0000000, float 0x3FC2CC1CA0000000, float 0x3FB359DDC0000000, float 0x3FCD409A20000000, float 0x3FC22CD3A0000000, float 0x3FB277F6C0000000, float 0x3FB9F6BA00000000, float 0xBFB18C4BE0000000, float 0xBFC3BB1F20000000], align 16
@av1_tx_split_nn_bias_32x32_layer0 = internal constant [32 x float] [float 0x3FC2591040000000, float 0xBF96827300000000, float 0xBFD427F5E0000000, float 0x3FC5DEF840000000, float 0xBFB4CCAB40000000, float 0x3FC018D6A0000000, float 0xBFD6C4CE00000000, float 0x3FD1E835E0000000, float 0x3FF0718220000000, float 0xBFDBD17820000000, float 0x3FF126EEC0000000, float 0x3FE5679240000000, float 0xBF9FF71640000000, float 0xBFE0EAB360000000, float 0x3FD503AB80000000, float 0x3FE1658A40000000, float 0xBFC82AED20000000, float 0x3FCC4D5520000000, float 0xBFFA37DB60000000, float 0x3FADB81300000000, float 0xBFFBB29B20000000, float 0xBFDC6F2620000000, float 0x3FE0702C40000000, float 0x3FEC7B15C0000000, float 0x3FC4845140000000, float 0x3FD92C0620000000, float 0x3FD54D8340000000, float 0xBFB4AD2560000000, float 0x3FD33048A0000000, float 0x3FCE312F40000000, float 0x3FD050F840000000, float 0xBF92391D60000000], align 16
@av1_tx_split_nn_bias_32x32_layer1 = internal constant [1 x float] [float 0x3FD44388E0000000], align 4
@av1_tx_split_nnconfig_32x32 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 12, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 32, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([384 x float], [384 x float]* @av1_tx_split_nn_weights_32x32_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_weights_32x32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_bias_32x32_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_32x32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_64x64_layer0 = internal constant [384 x float] [float 0xBF7BF7AD40000000, float 0x3FC3315D80000000, float 0xBF92096780000000, float 0xBFA6D5AE20000000, float 0xBF991AFC00000000, float 0x3FE03F0FE0000000, float 0x3F5105E1C0000000, float 0x3FA30728E0000000, float 0x3F8EE807C0000000, float 0xBFD39FA980000000, float 0xBFC4BDF4C0000000, float 0xBFD7A4E7A0000000, float 0x3FD95D24A0000000, float 0x3FB64D8FE0000000, float 0x3FCAB3B320000000, float 0xBFB543F1C0000000, float 0x3FDF99FE40000000, float 0x3FCBDD0100000000, float 0x3FD8273500000000, float 0x3FC620E620000000, float 0x3FD96F5CA0000000, float 0x3FB4340920000000, float 0x3FE7B923A0000000, float 0x3FB06D6120000000, float 0xBFB998E100000000, float 0xBFC8B3AAC0000000, float 0xBFD1CE8540000000, float 0xBFD3D7D3A0000000, float 0xBFDC286300000000, float 0xBFCD0470A0000000, float 0xBFDBF13060000000, float 0xBF7EEDCC20000000, float 0xBFD963E080000000, float 0x3FC3A82E80000000, float 0xBFC86D6120000000, float 0xBFB26601C0000000, float 0x3FA8FC2EC0000000, float 0xBFD3488400000000, float 0xBF748A9BC0000000, float 0x3FE003EEA0000000, float 0xBF9F5B5FA0000000, float 0xBFE1E41B40000000, float 0xBFA0B56760000000, float 0xBFABBADC00000000, float 0xBFAD2C5A00000000, float 0xBFDD380880000000, float 0x3FD39E4920000000, float 0xBFDA531DC0000000, float 0xBF75FAA8A0000000, float 0xBFB1CA7D60000000, float 0x3F94784240000000, float 0x3FD4FCD240000000, float 0xBF649C6F40000000, float 0x3FD92A0660000000, float 0x3F5CD1C7E0000000, float 0x3FA1F7B5A0000000, float 0xBF9F077CC0000000, float 0xBFE0ED6FE0000000, float 0x3FC65F3940000000, float 0x3FCEE83A20000000, float 0xBFDA965B20000000, float 0xBFC50E66C0000000, float 0x3FC24FF440000000, float 0xBFBF6262C0000000, float 0x3FB50129C0000000, float 0xBFC2592960000000, float 0x3FAC7D1BC0000000, float 0xBFBFEC67A0000000, float 0x3F7096BBA0000000, float 0xBFCBAD96A0000000, float 0xC005742EE0000000, float 0x3FBA064240000000, float 0x3FD8663840000000, float 0x3FDDD1E540000000, float 0x3FD531A080000000, float 0x3FD34F2F20000000, float 0xBFD70D0AA0000000, float 0x3FAC1A0480000000, float 0xBFBE605EE0000000, float 0x3FD26D4C40000000, float 0x3FD1C87120000000, float 0x3FCA159820000000, float 0x3FCFB83480000000, float 0x3FE5058580000000, float 0xBFD6B239A0000000, float 0x3FD42A4980000000, float 0x3FBAE85BA0000000, float 0xBFE05362E0000000, float 0x3FAE583E80000000, float 0x3FAF6DFC60000000, float 0x3FB3907520000000, float 0x3FD63732A0000000, float 0x3FB9A261C0000000, float 0x3F9D156A00000000, float 0xBFBE5DF220000000, float 0xBFCE8D5C80000000, float 0x3FB4841EE0000000, float 0xBFC1C64340000000, float 0x3F82734F80000000, float 0xBFB9BC1260000000, float 0xBFC1C6A7E0000000, float 0x3FB1266340000000, float 0x3F785DFA80000000, float 0x3FE20F0A60000000, float 0x3FA80F9900000000, float 0x3F73111F00000000, float 0x3FD76D5060000000, float 0x3F8E186980000000, float 0xBFC2CE8960000000, float 0xBF9941C820000000, float 0xBFDC2ECF20000000, float 0xBFBC014F80000000, float 0x3FE0DF1380000000, float 0xBF956D5D00000000, float 0xBFCD1611C0000000, float 0xBFB171B040000000, float 0x3FD20C6F80000000, float 0x3FA4940BC0000000, float 0xBFD1182AA0000000, float 0x3FCD5757E0000000, float 0x3FC1225B80000000, float 0x3FD5AD5BE0000000, float 0xBF9EE6FB40000000, float 0xBFA4F355C0000000, float 0xBF9AF9A8C0000000, float 0xBFD5244200000000, float 0xBFB12263E0000000, float 0xBFBC4EF880000000, float 0xBFB2724320000000, float 0x3FE32EC080000000, float 0xBF953C57A0000000, float 0x3FC5A85880000000, float 0x3FEAC27A60000000, float 0xBFC42A8860000000, float 0x3FD8B8B260000000, float 0x3F63B18DA0000000, float 0x3FD5150DA0000000, float 0xBF7CC100E0000000, float 0x3FD68255C0000000, float 0xBFA51FE640000000, float 0x3FD8E31940000000, float 0x3F6FF0CBA0000000, float 0x3FE2A4E160000000, float 0x3F98234220000000, float 0x3FDA3BFF80000000, float 0xBFC448CF80000000, float 0x3FE12A0CA0000000, float 0x3FE0CD8FE0000000, float 0x3FE355FDC0000000, float 0x3FDC1B2E60000000, float 0x3FE62BAE00000000, float 0x3FA7B0F6A0000000, float 0x3FE2E44960000000, float 0xBFB508D4C0000000, float 0x3FD0CA7500000000, float 0x3FDEA28BC0000000, float 0x3FA059C8C0000000, float 0x3FA5D97F60000000, float 0x3FBEB87380000000, float 0x3FD982ECA0000000, float 0xBFB4372E60000000, float 0x3FCD2EA520000000, float 0xBFA6E02A80000000, float 0x3FC355F780000000, float 0xBFB5E785C0000000, float 0x3FCC2FAD60000000, float 0xBFD0FFB040000000, float 0xBFCA105180000000, float 0x3FCA343B80000000, float 0xBFC01E3640000000, float 0x3FA3BC0A00000000, float 0xBFD13D8160000000, float 0x3F9A7C9DE0000000, float 0x3FBC26CC20000000, float 0x3F93858360000000, float 0xBFCE5FBF80000000, float 0xBFD3D2E0E0000000, float 0xBFD5104500000000, float 0xBFD1D0C800000000, float 0xBFB0591040000000, float 0x3FD1D2E0E0000000, float 0x3F93111F00000000, float 0x3FCAE05460000000, float 0x3FD2F5C280000000, float 0x3FC248E8A0000000, float 0x3FD279E160000000, float 0x3FC18BF800000000, float 0x3FC0B4C800000000, float 0x3FC067E840000000, float 0xBFC3E40420000000, float 0xBF814DB5A0000000, float 0xBFB98F7120000000, float 0x3FC633C600000000, float 0xBFAEAC6480000000, float 0xBFC2DB5100000000, float 0x3FBA547180000000, float 0xBFD016C1E0000000, float 0xBF57B95A20000000, float 0x3FBA99A620000000, float 0x3FD3068560000000, float 0xBF9C83A960000000, float 0x3F9CF03080000000, float 0xBFD87C88E0000000, float 0x3FD6304040000000, float 0xBFE340A4A0000000, float 0x3FC4C868C0000000, float 0xBFDE8F4740000000, float 0xBFA5E0D660000000, float 0xBFD8D2E0E0000000, float 0xBFAA8459A0000000, float 0xBFD9B224A0000000, float 0xBFA8CDEA00000000, float 0xBFDD338720000000, float 0xBFAFE414E0000000, float 0x3FDF9C5E60000000, float 0x3F68A43BC0000000, float 0x3FB9942920000000, float 0xBFD6F212E0000000, float 0xBFB84B9020000000, float 0xBF975BC440000000, float 0xBFAFE06960000000, float 0x3F93EC0300000000, float 0xBFA9EE02A0000000, float 0x3F9485A0C0000000, float 0xBFC10342A0000000, float 0xBFAF8726E0000000, float 0xC008AB6620000000, float 0xBF8EA3DF60000000, float 0xBFC086D720000000, float 0xBFE6BCE640000000, float 0x3FC41F8E40000000, float 0xBFEB0259E0000000, float 0xBFBF3ACD60000000, float 0xBFEE3037E0000000, float 0xBFCD9A3900000000, float 0xBF6C5C5720000000, float 0x3FD536EF80000000, float 0xBFC0FC6980000000, float 0xBFF4936D60000000, float 0xBFBEF709C0000000, float 0xBFD7EB9A20000000, float 0xBFD4A5A040000000, float 0x3FD3C79F60000000, float 0xBFC0D5BEE0000000, float 0xBFBE4B2320000000, float 0xBFB0558640000000, float 0xBFBAB03180000000, float 0x3F88EA7CE0000000, float 0xBFB83E31A0000000, float 0xBFD2290260000000, float 0x3FC067CF20000000, float 0xBFE0DC9A40000000, float 0xBFA9C4FC20000000, float 0x3FC7D3DC80000000, float 0x3F78383AE0000000, float 0xBFCC517620000000, float 0x3FA29E2BC0000000, float 0x3FC498AA80000000, float 0xBF55FCC180000000, float 0xBFD87EF5A0000000, float 0x3FA35D24A0000000, float 0x3FD2073140000000, float 0xBF98DB8BA0000000, float 0x3F9D8BE720000000, float 0x3FD45EE140000000, float 0x3FD462BAE0000000, float 0x3FA2517E80000000, float 0x3FA16C82E0000000, float 0x3FC846E080000000, float 0xBFD2C68660000000, float 0x3FB4FF64C0000000, float 0x3FC05FC7E0000000, float 0x3FB4308FE0000000, float 0xBFB4D41320000000, float 0xBFD128D440000000, float 0x3FCF930BE0000000, float 0x3FCFD249E0000000, float 0xBFCB94D0E0000000, float 0xBFB2B5A200000000, float 0x3FDFC0C200000000, float 0xBFB13C57A0000000, float 0x3FD95BF260000000, float 0xBFBEE8C040000000, float 0x3FA147F140000000, float 0xBFA696E580000000, float 0xBFCC064240000000, float 0xBF9CC07AA0000000, float 0x3FC8FA15E0000000, float 0xBFA4AF4F00000000, float 0x3FD205CCC0000000, float 0xBFB9B877A0000000, float 0x3FDA92C060000000, float 0xBFD08B5020000000, float 0xBFDB810200000000, float 0x3FC345D860000000, float 0xBF863D3E40000000, float 0x3FC17720C0000000, float 0x3F9B3A25A0000000, float 0x3FC300EF20000000, float 0x3FBC5B0780000000, float 0x3FD861C360000000, float 0x3F82CB6420000000, float 0x3FBA631F80000000, float 0x3FBDCD8120000000, float 0x3FCCF68380000000, float 0xBFD4F9CA60000000, float 0x3FC5AD2140000000, float 0x3FD2361DC0000000, float 0xBFB85100A0000000, float 0x3FD40403A0000000, float 0xBFC2EC6BC0000000, float 0x3F99A9DA60000000, float 0xBFDFA597E0000000, float 0x3FBCC575C0000000, float 0xBFCB631B60000000, float 0x3FBB67A100000000, float 0xBFDBBC59C0000000, float 0xBFB8A58B40000000, float 0xBFCF56C0E0000000, float 0xBF6CD1C7E0000000, float 0xBFDD62AE40000000, float 0xBFC291FB40000000, float 0x3F918FC500000000, float 0x3FA5EFE940000000, float 0xBFCE65B640000000, float 0x3FBAD0A240000000, float 0x3FC44F8720000000, float 0x3FD6F8D2E0000000, float 0x3FB9946C40000000, float 0x3FD1BC2760000000, float 0x3F896A6A00000000, float 0xBFB01A0480000000, float 0x3FBDBAB220000000, float 0x3FD056FB80000000, float 0x3FD5DD3BA0000000, float 0x3FC28F6CE0000000, float 0xBFDB7A5F40000000, float 0xBF90D3D000000000, float 0xBFB1A90040000000, float 0x3FD2409E60000000, float 0xBFD2599AA0000000, float 0xBF92BCB600000000, float 0xBFC6F59040000000, float 0xBFC8EA7480000000, float 0xBFC52B2C00000000, float 0x3F9AB25B40000000, float 0xBFDB68BE20000000, float 0xBFD850C1C0000000, float 0xBFE7480840000000, float 0x3FC6FD75E0000000, float 0xBFEED8EA80000000, float 0xBFA5846E80000000, float 0xBFE3B7ED40000000, float 0x3FC11348C0000000, float 0xBFE91E7100000000, float 0x3FAF564300000000, float 0xBFE6D3D200000000, float 0x3FC09D1F60000000, float 0x3FBED9DFE0000000, float 0xBFD5BB1B00000000, float 0x3FD6A0AD80000000, float 0x3FBD6A7AC0000000, float 0xBFD51BA800000000, float 0xBFCAE0DAA0000000, float 0x3FB5DD6E00000000, float 0x3FCB6E9BC0000000, float 0xBFBF40C420000000, float 0x3FD57D4180000000, float 0xBF95708240000000, float 0x3FC9EA1400000000, float 0x3FD27F5A60000000, float 0xBFDAF4B620000000, float 0x3FD5A03C40000000, float 0x3FDA172680000000, float 0x3FC0FEA3E0000000, float 0x3FB25D28E0000000, float 0x3FCB6188C0000000, float 0x3FC075CD00000000, float 0x3FD35EC3E0000000, float 0xBFCAD0EDC0000000, float 0x3FCBDF6DC0000000, float 0x3FD0327240000000, float 0xBFB6E9CCC0000000, float 0xBFCA518F40000000], align 16
@av1_tx_split_nn_weights_64x64_layer1 = internal constant [32 x float] [float 0x3FE0113C60000000, float 0xBFE6A81FE0000000, float 0x3FDADB8340000000, float 0x3FF955AE20000000, float 0x3FDAD6B660000000, float 0xBFF7685EC0000000, float 0xBFDC22C880000000, float 0x3FD9F6D760000000, float 0x3FEA581F20000000, float 0x3FAF911D00000000, float 0x3FE8072B00000000, float 0x3FE8CD0DC0000000, float 0xBFD8D38040000000, float 0x3FDCA1F4C0000000, float 0x3FD2385C60000000, float 0x3FD69BD840000000, float 0xBFCCB76700000000, float 0x3FEAA6D260000000, float 0xBFFB55FAA0000000, float 0xBFF0ADDCE0000000, float 0xBFD17607C0000000, float 0x3FE14CEC40000000, float 0x3FD3DF6120000000, float 0x3FE728EB40000000, float 0x3FCF6F8F00000000, float 0xBFCBF516A0000000, float 0xBFE322B5A0000000, float 0xBFD72FF080000000, float 0x3FE6788FC0000000, float 0xBFE629E4E0000000, float 0x3FCA999560000000, float 0x3FE06F1560000000], align 16
@av1_tx_split_nn_bias_64x64_layer0 = internal constant [32 x float] [float 0x3FD300A3A0000000, float 0xBFFD3AA360000000, float 0x3FD626FE80000000, float 0x3FEF064EC0000000, float 0xBFE0E6A340000000, float 0x3FF2D054A0000000, float 0xBFB373C0C0000000, float 0xBFB8EA2900000000, float 0xBFCDD4E0A0000000, float 0x3F73D96640000000, float 0x3FD9AE8E20000000, float 0xC0022DF260000000, float 0x3FB614F060000000, float 0x3FDA81A160000000, float 0xBFC8EEBF60000000, float 0xBFCDF00260000000, float 0xBFBCFBA880000000, float 0xC003A0DCC0000000, float 0x3FEB8F10A0000000, float 0x3FD31858C0000000, float 0x3FD11D0840000000, float 0xBFC44B9880000000, float 0xBFBEB27CC0000000, float 0xBFB91F4F60000000, float 0xBFD5B67C20000000, float 0x3FD8B21C40000000, float 0xBFE5B32F00000000, float 0x3FD0D89040000000, float 0x3FD01A6500000000, float 0xBFF27E0BE0000000, float 0xBFD76351E0000000, float 0x3FCD583A60000000], align 16
@av1_tx_split_nn_bias_64x64_layer1 = internal constant [1 x float] [float 0xBFCD87B9A0000000], align 4
@av1_tx_split_nnconfig_64x64 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 12, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 32, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([384 x float], [384 x float]* @av1_tx_split_nn_weights_64x64_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_weights_64x64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_bias_64x64_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_64x64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_4x8_layer0 = internal constant [128 x float] [float 0x3FB1930BE0000000, float 0xBFE76D2460000000, float 0xBFA4AA3260000000, float 0x3FD4A4A8C0000000, float 0xBF95A14480000000, float 0x3FCB33CA40000000, float 0xBFD66F5880000000, float 0x3FDBE73600000000, float 0xBFBC9C0A80000000, float 0xBFD9B34A40000000, float 0x3FB1CDE5E0000000, float 0xBFD4083120000000, float 0x3FB2EC4A40000000, float 0xBFD7EC6BC0000000, float 0xBFE8D36F80000000, float 0xBFBFEFD000000000, float 0x3FC72E16A0000000, float 0xBFE348D5C0000000, float 0xBF9AD92740000000, float 0xBFD6683C20000000, float 0x3F9517E780000000, float 0xBFD3F3BEA0000000, float 0xBFDE7EAE60000000, float 0xBFE56C41E0000000, float 0xBFD3E62140000000, float 0x3FD653DEA0000000, float 0xBFBDB120A0000000, float 0x3FC3BE76C0000000, float 0x3FC9A97E20000000, float 0xBF9116EBE0000000, float 0x3F94E1A400000000, float 0x3FDA7BDD00000000, float 0x3FE44A40A0000000, float 0xBFE414B9C0000000, float 0x3FD98C21E0000000, float 0xBF89285AA0000000, float 0x3FDE35BD60000000, float 0x3FB7517A40000000, float 0xBFE6985F00000000, float 0xBFDCAB1D40000000, float 0xBFD18CEB40000000, float 0x3FDC85A0C0000000, float 0x3FD3CC35C0000000, float 0x3FE02D3C80000000, float 0x3FA3B5BF60000000, float 0xBFC38F3EC0000000, float 0x3FDA27E0E0000000, float 0xBFB1725800000000, float 0x3FD1621740000000, float 0x3FD69B5EA0000000, float 0xBFC33F2900000000, float 0x3FB3411800000000, float 0xBFA1F81A60000000, float 0x3FD62EF0A0000000, float 0x3FBFD77FA0000000, float 0x3FDE885900000000, float 0x3FCBAF5340000000, float 0x3FB20F6F00000000, float 0xBFBB3A8A40000000, float 0x3FE5CFC620000000, float 0xBFC29FCF40000000, float 0xBFCBFC19C0000000, float 0xBFB9685120000000, float 0xBF603EA700000000, float 0xBFC9315D80000000, float 0xBFEF026AA0000000, float 0x3FB0215BA0000000, float 0xBFBF8066C0000000, float 0x3FBAD91680000000, float 0xBFC19C4120000000, float 0xBFD21B9300000000, float 0xBF6DB01420000000, float 0xBFD433C1C0000000, float 0xBFD55870E0000000, float 0xBFE0189380000000, float 0xBFB99DBAA0000000, float 0xBFE12CBC80000000, float 0xBFAEB56FC0000000, float 0xBFE572ABE0000000, float 0xBFD6A40960000000, float 0x3FC72E9460000000, float 0x3FD28AB0C0000000, float 0xBFB23A8E80000000, float 0x3FD0B688C0000000, float 0x3FAB0813C0000000, float 0xBFBD536940000000, float 0xBFC1D1C3A0000000, float 0xBFD0BA7320000000, float 0x3FB373B000000000, float 0xBFE4BBCD40000000, float 0xBFB97AAAC0000000, float 0xBFE5B0A700000000, float 0x3F9016CE80000000, float 0xBFD8EBAF20000000, float 0xBFB87AAF00000000, float 0xBFC5228DC0000000, float 0xBFBC052D60000000, float 0xBFC66E43A0000000, float 0xBFD935E320000000, float 0x3FCB2DA120000000, float 0x3FA35D67C0000000, float 0x3FCFC7A3A0000000, float 0x3FC710B200000000, float 0x3FBC4944E0000000, float 0xBFE0D2C160000000, float 0xBFB7A2DFA0000000, float 0xBFE0C4D880000000, float 0xBFDA124080000000, float 0xBFE15B1EA0000000, float 0xBFDBE14BE0000000, float 0xBFED30B180000000, float 0x3FB0134480000000, float 0x3FC4891180000000, float 0x3FE7BA3EC0000000, float 0xBFBA896560000000, float 0xBFBE8C36E0000000, float 0xBFAC4D0140000000, float 0x3FD5661F20000000, float 0x3F8E21D960000000, float 0x3FA7B82C20000000, float 0x3FEA987C60000000, float 0xBFE2742DC0000000, float 0x3FD6ADFB60000000, float 0xBFB503B820000000, float 0x3FDCF2FDC0000000, float 0x3FA4577DA0000000, float 0xBFE95B9400000000, float 0xBFD8B1F680000000], align 16
@av1_tx_split_nn_weights_4x8_layer1 = internal constant [16 x float] [float 0xBFD77F1FA0000000, float 0x3FF5F80BA0000000, float 0xBFECB48B20000000, float 0xBFD4EA9A40000000, float 0xBFE77D2C80000000, float 0xBFD2962060000000, float 0xBFE00A3B60000000, float 0x3FE02B9700000000, float 0xBFE134C5E0000000, float 0xBFE8929460000000, float 0x3FD13254E0000000, float 0x3FD1DAEC40000000, float 0x3FB5C7EF20000000, float 0x3FE3ADF720000000, float 0x3FEB2207A0000000, float 0x3FE4670A00000000], align 16
@av1_tx_split_nn_bias_4x8_layer0 = internal constant [16 x float] [float 0x3FCE8B2200000000, float 0x40017EA0C0000000, float 0x3FF620E940000000, float 0xBFEBBF9A40000000, float 0x3FF41D28E0000000, float 0xBFD68023A0000000, float 0xBFCECD9E80000000, float 0xBFEF1819E0000000, float 0x4005F57040000000, float 0x3FF1DF3200000000, float 0x3FC1CCC8A0000000, float 0xBFC5299960000000, float 0x3FD0C768E0000000, float 0xBFF99208E0000000, float 0xBFF6D66280000000, float 0xBFF9A30BA0000000], align 16
@av1_tx_split_nn_bias_4x8_layer1 = internal constant [1 x float] [float 0x3FCA59A560000000], align 4
@av1_tx_split_nnconfig_4x8 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_split_nn_weights_4x8_layer0, i32 0, i32 0), float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_split_nn_weights_4x8_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_split_nn_bias_4x8_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_4x8_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_8x16_layer0 = internal constant [512 x float] [float 0x3FD7FA6DE0000000, float 0x3FCC051440000000, float 0xBFC1E44740000000, float 0x3FCB276FC0000000, float 0x3FACEFCBE0000000, float 0x3FAA2B9D40000000, float 0x3FA5F1BF00000000, float 0xBFD17D0F20000000, float 0xBFD5CFD080000000, float 0x3FC1CA31E0000000, float 0xBFCBC68660000000, float 0xBFCEEA1840000000, float 0xBFBF8CEB40000000, float 0x3FB41D9F40000000, float 0xBFDE39B880000000, float 0xBFC8DB9400000000, float 0x3FC001D5C0000000, float 0x3FCEB07D00000000, float 0xBFD54C4CE0000000, float 0x3FC65F41A0000000, float 0xBFCB0F27C0000000, float 0xBFC09D1F60000000, float 0x3FAFD805E0000000, float 0x3FBCF91A40000000, float 0xBF8229E900000000, float 0x3FC2048E00000000, float 0x3FAEA26E60000000, float 0x3FC4F84020000000, float 0x3FD6FEA820000000, float 0xBFBC1BA800000000, float 0xBF969F05E0000000, float 0xBFAE7B80A0000000, float 0xBFC817CA20000000, float 0x3FC700B460000000, float 0x3FA011D360000000, float 0x3FC517D6C0000000, float 0x3FCB7047A0000000, float 0x3FC96A4000000000, float 0x3FC37D5240000000, float 0xBFCF19F800000000, float 0x3FD4708240000000, float 0xBFC1860140000000, float 0x3FA7D1FE60000000, float 0xBFA6518F40000000, float 0x3FD5E63E80000000, float 0xBF88140DE0000000, float 0xBF8D41FA80000000, float 0x3FB2A7AC80000000, float 0xBFD1CFE580000000, float 0xBFD61971C0000000, float 0xBFD02274A0000000, float 0xBFBB6E71C0000000, float 0xBFCE17CA20000000, float 0xBFBB533F40000000, float 0xBFBEF10240000000, float 0xBFC47C41A0000000, float 0x3FCEB93CC0000000, float 0x3FBCE72540000000, float 0xBFC21F85E0000000, float 0xBFE67F1300000000, float 0xBFC17BD060000000, float 0x3FD46A61A0000000, float 0xBFC3C3EFA0000000, float 0xBFABFD71C0000000, float 0x3FC8AFF6E0000000, float 0x3FC68C9B80000000, float 0xBF9EAF2520000000, float 0x3FD11593E0000000, float 0xBFC6D54980000000, float 0x3FA3CDDD60000000, float 0x3FC1341E20000000, float 0xBF63DFB0E0000000, float 0x3FE11D4960000000, float 0xBFB2280280000000, float 0x3FDA733220000000, float 0x3FDAC2EFE0000000, float 0x3FB7FE9FA0000000, float 0x3F90D95140000000, float 0x3FD38AFC40000000, float 0xBFA4BDFD20000000, float 0x3FB1E53A80000000, float 0xBFCD219A80000000, float 0xBFD72E9CC0000000, float 0xBFA02E6640000000, float 0xBFD9460EE0000000, float 0x3FB24E37A0000000, float 0xBFD5F0F9E0000000, float 0xBFC23F1420000000, float 0xBFC4FE1DA0000000, float 0x3FC75F6FE0000000, float 0x3FCB459DA0000000, float 0x3FB3A97E20000000, float 0x3FD1D72BC0000000, float 0x3FC0141640000000, float 0xBFA233DF20000000, float 0x3FA4FA26A0000000, float 0x3FC7657FC0000000, float 0xBFCD2DD380000000, float 0xBFBAFC58A0000000, float 0xBFB32FDB80000000, float 0xBFB5AA3F00000000, float 0xBFD04E1A40000000, float 0x3FBD5A2940000000, float 0x3FA8203E60000000, float 0x3FC9135120000000, float 0x3FD0F1CFC0000000, float 0x3F9239E6A0000000, float 0x3FCAE8D100000000, float 0x3FC34BBE40000000, float 0xBFC231B580000000, float 0x3FC75BF6A0000000, float 0xBFC23AA7A0000000, float 0xBFD0A044A0000000, float 0xBFBD657FC0000000, float 0xBFC9732160000000, float 0x3F0FFB4800000000, float 0xBFD80AF1C0000000, float 0xBFD1B4BB60000000, float 0xBFD7E28AA0000000, float 0x3FCAEB0B80000000, float 0x3FDB0D3060000000, float 0x3FB1244A60000000, float 0x3FD6788540000000, float 0xBFCAC1A040000000, float 0x3FD7801F80000000, float 0xBFBC3AEAC0000000, float 0x3FBD963120000000, float 0xBFB10F7340000000, float 0xBFD8F06700000000, float 0xBFD0AB29E0000000, float 0x3FAD286B60000000, float 0xBFC7182AA0000000, float 0x3FB1E66880000000, float 0xBFC3A615A0000000, float 0xBFB8D87720000000, float 0xBFBC9C1B60000000, float 0x3FB814E7E0000000, float 0x3FC28A04E0000000, float 0xBFAB20B800000000, float 0xBFE036BB20000000, float 0xBFA1A69380000000, float 0x3FD1DC11E0000000, float 0xBFBAE2EB20000000, float 0x3F7B435260000000, float 0xBFC0008EA0000000, float 0xBFBD356540000000, float 0x3FBA683C20000000, float 0xBFBE0E0EC0000000, float 0xBFD70196E0000000, float 0x3FB29196A0000000, float 0x3FBC3C07E0000000, float 0x3F694C0160000000, float 0xBFDD3DCCE0000000, float 0x3FA3A01EE0000000, float 0xBFD4A087C0000000, float 0x3FBD2B4D80000000, float 0xBFBEB2D0A0000000, float 0xBFC8E1D640000000, float 0x3FB7D9CAE0000000, float 0x3FC8C343C0000000, float 0x3FB31DA380000000, float 0x3FA1344800000000, float 0x3F722FAD60000000, float 0xBFC6FC6980000000, float 0xBFA2C215C0000000, float 0xBFCBAB8620000000, float 0xBFD2FA5900000000, float 0xBFD46A5D60000000, float 0x3FD46D1E20000000, float 0xBFB0F3A9C0000000, float 0x3FD2A3C640000000, float 0x3FC7349380000000, float 0x3FB7049AA0000000, float 0x3F99E12A60000000, float 0x3FD3667300000000, float 0x3F93854040000000, float 0x3FB41B8660000000, float 0xBFD9671F00000000, float 0x3F8CCE1C60000000, float 0xBFBF435260000000, float 0x3FA2FFB040000000, float 0xBFC3710020000000, float 0xBFD3293D20000000, float 0xBFC60AE100000000, float 0xBFBFE3E2A0000000, float 0xBFCDC44C00000000, float 0x3FBA5C3DE0000000, float 0xBFCCCE1C60000000, float 0x3FAF432020000000, float 0xBFD0862700000000, float 0xBFDE125DE0000000, float 0xBFB97FD820000000, float 0xBFAF8012E0000000, float 0xBFCB5A8580000000, float 0x3FB1FB0D60000000, float 0xBFD2812BE0000000, float 0xBFCE7E2820000000, float 0x3FD068E820000000, float 0xBFBE8D5420000000, float 0x3FB15A2940000000, float 0xBFD988F000000000, float 0xBFBFBCD360000000, float 0xBFC9A05140000000, float 0xBFA8155D60000000, float 0x3F9B34E760000000, float 0x3F9FC829C0000000, float 0x3FB8242D00000000, float 0xBFB9EACCA0000000, float 0x3FDBBB4D40000000, float 0xBFD36E6100000000, float 0x3FB6AA5C60000000, float 0xBFC50C3D20000000, float 0x3FC9EA91E0000000, float 0xBFA8E10D00000000, float 0xBFD01F3200000000, float 0x3FBF6134C0000000, float 0xBFD3D4F9C0000000, float 0xBFD0DBA0A0000000, float 0xBFD2B85E80000000, float 0x3FCBB93040000000, float 0x3FA21D10C0000000, float 0x3FC17C1380000000, float 0xBFC2AB0420000000, float 0xBF92A5E780000000, float 0x3FC6486260000000, float 0xBFDCCBD560000000, float 0xBF57657760000000, float 0x3FB06B1600000000, float 0x3FA44D4460000000, float 0x3FBC6FEF80000000, float 0xBFCF7F6B20000000, float 0xBFCA34B0E0000000, float 0x3FACF54D20000000, float 0xBF201F3200000000, float 0x3FBAA2F480000000, float 0x3FC1BAC2E0000000, float 0xBFC06C6DE0000000, float 0x3FB67DAA40000000, float 0x3FCDCBDDC0000000, float 0x3FCFA237C0000000, float 0x3FC4D58420000000, float 0x3FC3D16FC0000000, float 0x3FD4121AC0000000, float 0xBFC501B860000000, float 0xBFAA083980000000, float 0x3FC409CC40000000, float 0x3FC7B738E0000000, float 0xBFCE964E80000000, float 0xBFD3BAE040000000, float 0xBFC6FCDEE0000000, float 0xBFC8BCCF20000000, float 0x3FC9D052A0000000, float 0xBFCA08FA80000000, float 0xBFB8C9EAA0000000, float 0xBFC05DF220000000, float 0x3FD3E21540000000, float 0xBF80C13340000000, float 0x3F70B417C0000000, float 0xBFCB034B00000000, float 0xBFC8C3F3E0000000, float 0xBFC7C304C0000000, float 0xBFC339D1C0000000, float 0xBFCA38C980000000, float 0xBFCED12880000000, float 0x3FBD40AAE0000000, float 0xBFA0A86D80000000, float 0xBFAAD490E0000000, float 0xBFCDFE9FA0000000, float 0xBFB06705C0000000, float 0xBFCAAE4B00000000, float 0xBFD69524C0000000, float 0xBFCCAC10A0000000, float 0xBFC4029F20000000, float 0x3FCB936820000000, float 0x3FC5FF0CC0000000, float 0x3FD2ADA760000000, float 0x3FBBDC6A00000000, float 0x3FA80F3460000000, float 0xBFC05BC880000000, float 0x3FA0A1DFC0000000, float 0x3FC21C7140000000, float 0x3FBF91D580000000, float 0xBFAD4FDF40000000, float 0x3FD42EA100000000, float 0xBFAF64F120000000, float 0xBFDDC3F820000000, float 0xBFC0A9B4A0000000, float 0xBFCBE236C0000000, float 0xBFCE9A77E0000000, float 0xBFB2C093E0000000, float 0xBFD4F954E0000000, float 0x3FAC1C8220000000, float 0xBFD21F70E0000000, float 0xBF9D97F620000000, float 0x3FB24A8C20000000, float 0x3FD148DC20000000, float 0x3FCFDBA900000000, float 0x3FB68A9360000000, float 0x3FD03660E0000000, float 0x3FBF705860000000, float 0x3FC67674E0000000, float 0xBFC2EB4640000000, float 0x3FB6D3C7A0000000, float 0xBFA74623E0000000, float 0xBFD52BA160000000, float 0x3FB98BE720000000, float 0xBFC1958960000000, float 0xBFC915C640000000, float 0xBFD675D560000000, float 0xBFD23C4B00000000, float 0xBFE1E3A1A0000000, float 0x3F9F3C70C0000000, float 0x3FC4CE91C0000000, float 0xBFC97C1BE0000000, float 0xBFA9D4F9C0000000, float 0xBFC0CF1800000000, float 0xBFB3EED460000000, float 0xBFB0F5F4E0000000, float 0xBFD84D61C0000000, float 0xBFDB239600000000, float 0xBFB4C85800000000, float 0xBFD0250B60000000, float 0xBFBA521580000000, float 0x3FADD1A220000000, float 0xBFC74CF4A0000000, float 0x3FC6A07700000000, float 0xBFB22174C0000000, float 0x3FCBA7A860000000, float 0xBFCB138360000000, float 0xBFCDD2AE80000000, float 0x3FD1E0CE00000000, float 0x3FBE343300000000, float 0x3FCE4B5560000000, float 0x3FC0353F80000000, float 0xBFA7AA25E0000000, float 0x3FA6FF9F80000000, float 0x3FD1D2D020000000, float 0x3FB57D5AA0000000, float 0x3FC71B0460000000, float 0x3FCBE73A40000000, float 0x3FD9ACC4E0000000, float 0xBFB07DA1E0000000, float 0x3F87D49D80000000, float 0xBFC1DE5080000000, float 0xBFA99C38C0000000, float 0xBFD12E16A0000000, float 0xBFA0CB8E00000000, float 0x3F99817BA0000000, float 0xBFB5F14980000000, float 0xBF8A975B00000000, float 0xBFAC422040000000, float 0xBFD5AC8E60000000, float 0x3FA7768160000000, float 0xBFD405B7C0000000, float 0xBF97F455A0000000, float 0xBFC59B3D00000000, float 0xBF9FA09460000000, float 0xBFC0DF58C0000000, float 0xBFD03A0840000000, float 0xBFBAD4F5A0000000, float 0xBFD6AE4F40000000, float 0x3FC5B0FF20000000, float 0x3FB81A47A0000000, float 0xBFCBCAA760000000, float 0xBFDD359BC0000000, float 0x3FCB11B600000000, float 0x3FCC0FCB40000000, float 0xBFC3E80BE0000000, float 0xBFD6A30560000000, float 0xBFD0F1CFC0000000, float 0xBFA1C560C0000000, float 0x3FA19E0E80000000, float 0xBFC3069A40000000, float 0xBFC1013AA0000000, float 0xBFCBBFCEC0000000, float 0xBFBE557DE0000000, float 0x3FC63C7D60000000, float 0xBFC27485E0000000, float 0x3FD5711940000000, float 0x3FC6958DA0000000, float 0x3FBB218160000000, float 0x3FC5AE9240000000, float 0x3FC3EB3140000000, float 0xBFA4CBE1E0000000, float 0xBFC6881E40000000, float 0x3FC3E9AF60000000, float 0xBFC7A89BA0000000, float 0xBFC5E69280000000, float 0xBFC6DE6DE0000000, float 0xBFA068FD20000000, float 0xBFDBCC20E0000000, float 0x3FB79CE8E0000000, float 0xBFD0D6AE00000000, float 0x3FAFA4C620000000, float 0xBFC6237480000000, float 0x3F786B9C40000000, float 0xBFB9A52260000000, float 0x3FC01D6D00000000, float 0x3FA89F83C0000000, float 0xBFB69068A0000000, float 0x3FCFA41E60000000, float 0xBFCC5D6BE0000000, float 0xBFBD4E2B00000000, float 0xBFBFD95580000000, float 0xBFC404AFA0000000, float 0xBFC744A200000000, float 0xBFB56451C0000000, float 0x3FA1E34340000000, float 0x3FD9D15260000000, float 0xBFA7A786C0000000, float 0x3FD49FE440000000, float 0x3FCC1E68A0000000, float 0x3FBC1F2120000000, float 0x3FAA8A6120000000, float 0x3FC932BDC0000000, float 0xBF9393AB40000000, float 0x3FCFD944A0000000, float 0xBFC19BCBA0000000, float 0x3FC05DC840000000, float 0x3FAAC625E0000000, float 0x3FD31E53A0000000, float 0x3FD1A682C0000000, float 0x3F8F6CACE0000000, float 0x3FAE0FC2E0000000, float 0x3FD227FE40000000, float 0xBFAB8AE320000000, float 0xBFBF8E9F60000000, float 0xBFCD2745C0000000, float 0xBFC224AAE0000000, float 0xBFD12F5980000000, float 0xBF7D723680000000, float 0xBFCEFDB0A0000000, float 0xBFD0274180000000, float 0xBFB1AB1920000000, float 0x3FA1D1B2E0000000, float 0xBF6BC126A0000000, float 0xBFD0CE0FC0000000, float 0x3FAFCD8980000000, float 0xBFD318DF00000000, float 0x3FCB92B800000000, float 0xBFC3A9A800000000, float 0x3FD28DC120000000, float 0x3FB5FCA000000000, float 0xBFE02324C0000000, float 0x3FB3C1F000000000, float 0x3FC34F69C0000000, float 0xBFCD4AE420000000, float 0xBFD0B48D40000000, float 0x3FC95EBFA0000000, float 0x3FC4C01E60000000, float 0x3FD62BB660000000, float 0xBFD25D6380000000, float 0x3FD6B45280000000, float 0xBFCCFB4C40000000, float 0x3F99503320000000, float 0x3FCAA0F4E0000000, float 0x3FBB771860000000, float 0xBFBC6099A0000000, float 0x3FBABAF100000000, float 0xBFCA96BBA0000000, float 0x3FB05DD900000000, float 0xBFA353B4C0000000, float 0xBFC56177E0000000, float 0xBFB17AEDE0000000, float 0x3FD4883BA0000000, float 0xBFAA908A20000000, float 0x3FB998E100000000, float 0xBFB4113C60000000, float 0x3FC043DCC0000000, float 0x3FA7E5C920000000, float 0xBFD58A6120000000, float 0xBFD17A2480000000, float 0x3FD0F0BF20000000, float 0xBF7E1D2180000000, float 0xBFB8051CA0000000, float 0x3FB8430B20000000, float 0xBFC27CD040000000, float 0x3FB77FE080000000, float 0xBFA02FD760000000, float 0x3FAD23D500000000, float 0x3FB08E68E0000000, float 0xBFC17E5EA0000000, float 0x3FD6101F40000000, float 0x3FCCEB24A0000000, float 0x3FD2240FA0000000, float 0xBFB17FA5E0000000, float 0x3F9F4E4440000000, float 0x3FC723EE20000000, float 0xBFD831EC00000000, float 0xBFB7CC5B80000000, float 0xBFB5528F20000000, float 0x3FA3F3E040000000, float 0x3FAAAC10A0000000, float 0xBF925CC420000000, float 0x3FCBAFC8C0000000, float 0xBFC79A49C0000000, float 0x3FB4738A40000000, float 0x3FCAEE9580000000, float 0xBF951F3E80000000, float 0x3FCF53C580000000, float 0x3FD590F300000000, float 0xBFC769B9E0000000, float 0xBFCC48F100000000, float 0xBFD3786C20000000, float 0xBFD52EADA0000000, float 0xBFD7BC4D20000000, float 0xBFB5BE4CE0000000, float 0xBFC17878C0000000, float 0xBFCAE3F780000000, float 0xBFC8134480000000, float 0xBFDA294140000000, float 0x3FC7A40520000000], align 16
@av1_tx_split_nn_weights_8x16_layer1 = internal constant [64 x float] [float 0xBFC2917D60000000, float 0xBFC292AB60000000, float 0x3FC65F6340000000, float 0x3FC92D3420000000, float 0x3FBA1E4F80000000, float 0xBFB675CD00000000, float 0x3FD8BA01E0000000, float 0xBFE52322A0000000, float 0xBFC78B5880000000, float 0x3FDF5CE5C0000000, float 0xBFD1B09A60000000, float 0xBFC2A54820000000, float 0x3FCADC3BE0000000, float 0xBFB5E82D80000000, float 0xBFC412B5E0000000, float 0xBFD8282400000000, float 0xBFEE667B60000000, float 0x3FDCD86A80000000, float 0xBFBBC99AE0000000, float 0xBFD0B73080000000, float 0x3FF6F83E00000000, float 0xBFC69B8460000000, float 0xBFF28969A0000000, float 0x40004912A0000000, float 0x3FCBE9AF60000000, float 0xBFC1BE9860000000, float 0x3FD394D0E0000000, float 0xBFD1BD8BE0000000, float 0xBFE3476B00000000, float 0x3FCA1882A0000000, float 0x3FBEE78180000000, float 0x3FCBA90040000000, float 0xBFDBCEE180000000, float 0xBFE28D4780000000, float 0xBFCEA64C20000000, float 0x3FE82D4B20000000, float 0x3FE175E840000000, float 0x3FCDB52860000000, float 0x3FD5217D20000000, float 0x3FEF9ECF60000000, float 0xBFB209FE80000000, float 0xBFD61E0C60000000, float 0xBFC4CB5360000000, float 0xBFE3BEFD00000000, float 0x3FBFB6AA40000000, float 0xBFC9BD9440000000, float 0x3FCC8344C0000000, float 0x3FBCE91C80000000, float 0x3FA8E84280000000, float 0xBFC2EE0F40000000, float 0x3FD940DD40000000, float 0xBFD0C70860000000, float 0x3FD1F4C2C0000000, float 0xBFC903EA80000000, float 0xBFA853E2E0000000, float 0x3FF2227280000000, float 0x3FD058B820000000, float 0xBFD3235720000000, float 0xBFD975AB80000000, float 0xBFC39D90A0000000, float 0xBFD06E5480000000, float 0x3FC6B40F60000000, float 0x3FCB54B060000000, float 0xBFE0F70DE0000000], align 16
@av1_tx_split_nn_bias_8x16_layer0 = internal constant [64 x float] [float 0xBFD18AF820000000, float 0x3FDC872F40000000, float 0x3FCDFF79C0000000, float 0x3FD2A975A0000000, float 0x3FC4E6F2E0000000, float 0x3FC783B600000000, float 0xBFE19016C0000000, float 0xBFC86B7240000000, float 0xBFC4E88580000000, float 0xBFE568AD60000000, float 0x3FD98CA3E0000000, float 0xBFD6B7E4E0000000, float 0.000000e+00, float 0xBFD04BDBA0000000, float 0x3FCC2DD7A0000000, float 0x3FD7C02B00000000, float 0x3FE945B4A0000000, float 0x3FD14C9860000000, float 0x3FC8F9E380000000, float 0xBFCA7D9980000000, float 0x3FED5DDD20000000, float 0xBFD0661AE0000000, float 0x3FF21C65C0000000, float 0x3FF2DCF460000000, float 0x3FDD8572A0000000, float 0x3FCF827740000000, float 0xBFEA321600000000, float 0xBFBCAB1D40000000, float 0x3FE84CA2E0000000, float 0x3FC3D36720000000, float 0x3FDE196100000000, float 0xBFF0676C80000000, float 0x3FE5B7BAE0000000, float 0x3FEEB2F660000000, float 0xBFC5016480000000, float 0x3FE1691860000000, float 0xBFDCB80AA0000000, float 0x3FE4C66B20000000, float 0xBFE12C6AC0000000, float 0x3FEECEE9E0000000, float 0xBFD0694CC0000000, float 0x3FE9E09360000000, float 0xBFBE62BAE0000000, float 0x3FE5EA7AC0000000, float 0xBF90029F20000000, float 0xBFA7CAC8E0000000, float 0x3FB352B900000000, float 0x3FDA68CF00000000, float 0x3FDD15CEA0000000, float 0xBFBB6F6D80000000, float 0x3FE8CEB9A0000000, float 0xBFD0BE8780000000, float 0xBFF31E1A00000000, float 0x3F84ABA380000000, float 0xBFCD9AE0C0000000, float 0x3FE510ADC0000000, float 0xBFE89E4500000000, float 0x3FE210C0A0000000, float 0x3FDEE8D980000000, float 0xBFC0D0FE80000000, float 0xBFD05FBF80000000, float 0xBFB41205C0000000, float 0x3FDE831AE0000000, float 0x3FE49376E0000000], align 16
@av1_tx_split_nn_bias_8x16_layer1 = internal constant [1 x float] [float 0x3FC315F140000000], align 4
@av1_tx_split_nnconfig_8x16 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 64, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([512 x float], [512 x float]* @av1_tx_split_nn_weights_8x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_split_nn_weights_8x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([64 x float], [64 x float]* @av1_tx_split_nn_bias_8x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_8x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_16x32_layer0 = internal constant [256 x float] [float 0x3FC7219A80000000, float 0x3FA1010840000000, float 0x3FE37123C0000000, float 0x3FC1BF0560000000, float 0x3FE463F9A0000000, float 0xBF4ECD4AA0000000, float 0x3F89DDC1E0000000, float 0x3FD6EB4200000000, float 0x3F96C58EE0000000, float 0x3FC85F9E00000000, float 0x3FB43F1C80000000, float 0x3FB0E07600000000, float 0x3FA39474A0000000, float 0x3FC4C8DE20000000, float 0xBFBF6B1A20000000, float 0x3FD847CB80000000, float 0xBFD368FD20000000, float 0xBFD4F69440000000, float 0x3F9DD1A220000000, float 0xBFD2361DC0000000, float 0x3FD140EE00000000, float 0xBFD3D3D860000000, float 0xBFCEDA4480000000, float 0xBFC49F05E0000000, float 0xBFD38344C0000000, float 0x3FCEB32CE0000000, float 0xBFC3173760000000, float 0x3FD3EB4200000000, float 0xBFB2DA1220000000, float 0xBFC0FCE740000000, float 0x3FC6E63A60000000, float 0x3FDE61AE80000000, float 0x3F94C447C0000000, float 0x3FB04DA900000000, float 0xBFE37E5220000000, float 0xBF8BF8B9C0000000, float 0xBFD5A30120000000, float 0x3FD0070760000000, float 0x3FB53E0BE0000000, float 0xBFC7D92B80000000, float 0xBFE93F2700000000, float 0x3FA4686620000000, float 0xBFDB4B2320000000, float 0xBF58F81E80000000, float 0xBFDC9F1AE0000000, float 0x3FD832D2C0000000, float 0x3FD43311A0000000, float 0x3F91D8A540000000, float 0x3FE7DB1640000000, float 0xBFCC08FA80000000, float 0x3FE0692700000000, float 0x3FC9AAB480000000, float 0x3FE5C63D00000000, float 0x3FD4136E80000000, float 0xBFDA6787C0000000, float 0xBFC103C080000000, float 0x3FE43222A0000000, float 0x3FA5E15CA0000000, float 0x3FD58387E0000000, float 0x3FA6EC5B00000000, float 0x3FDBAFD120000000, float 0x3FC67CB700000000, float 0xBFE44D1840000000, float 0xBFB2D17C60000000, float 0xBFA4CF28C0000000, float 0xBFE1E57540000000, float 0xBFBAA1F8E0000000, float 0xBFE2417EC0000000, float 0xBFCFA9A800000000, float 0x3FB0318BA0000000, float 0xBFE29FEA80000000, float 0xBFDF868340000000, float 0xBFC8F44920000000, float 0xBFCA9D94E0000000, float 0xBFE03649E0000000, float 0x3F9643CC00000000, float 0xBFDAA83B20000000, float 0x3FD4893B80000000, float 0x3FBDAAE6C0000000, float 0x3FC31F81A0000000, float 0xBFCD5C3160000000, float 0x3FB8730400000000, float 0x3FBD7D2840000000, float 0xBFDE33F420000000, float 0x3FBCF20640000000, float 0x3FD5FEEB20000000, float 0xBFA2DB8340000000, float 0x3F95BFF040000000, float 0x3FD2E31D80000000, float 0x3F9FE9FAE0000000, float 0x3FDCAF5340000000, float 0xBFC0ED45E0000000, float 0x3FC4FF0020000000, float 0x3FD6C1B100000000, float 0x3FB278AF40000000, float 0x3F91C04420000000, float 0xBFA79C1F80000000, float 0x3FC6E043A0000000, float 0xBF9B86B160000000, float 0xBFCF0D3060000000, float 0x3FAC328740000000, float 0xBF8A89B960000000, float 0x3FB3F18440000000, float 0x3FD67C9DE0000000, float 0x3FBB8F4740000000, float 0x3FD0AD2560000000, float 0xBFB47E49C0000000, float 0xBFC9496AA0000000, float 0x3FB5F49060000000, float 0x3FD0DBCEC0000000, float 0xBFD4F9B560000000, float 0x3FC4555C60000000, float 0x3FAD21DDA0000000, float 0xBFC4C06180000000, float 0x3FD5BAA9C0000000, float 0xBFE2474DA0000000, float 0x3FD0F53400000000, float 0xBFD0244640000000, float 0xBFC9ED7C60000000, float 0xBFC12DE440000000, float 0xBFD521CCE0000000, float 0x3F836501E0000000, float 0xBFDDF9DF60000000, float 0xBFB0B391A0000000, float 0xBFD3B59140000000, float 0x3FBDD19160000000, float 0xBFCC724B80000000, float 0xBFDD5B9A60000000, float 0x3FC7DF00A0000000, float 0xBFD90CF180000000, float 0x3FBE5FC7E0000000, float 0xBFBACA8A00000000, float 0xBFD0A326E0000000, float 0xBFD540D0A0000000, float 0xBFD9D79D00000000, float 0xBFA9ACDE20000000, float 0xBFE25A33C0000000, float 0x3FC6ABC520000000, float 0xBFE325BFA0000000, float 0x3FC51CFBC0000000, float 0xBFBEA44420000000, float 0xBFADF65560000000, float 0x3FCA1711A0000000, float 0xBFD11D25A0000000, float 0xBFA8ADEEC0000000, float 0xBFE3333FC0000000, float 0x3FC73E78E0000000, float 0xBFE76AF260000000, float 0x3FC2BDCAE0000000, float 0xBFE5FD1DC0000000, float 0xBFF35E4F80000000, float 0xBFDCCE7460000000, float 0xBFE3DC3DE0000000, float 0x3FCABAC720000000, float 0xBFE3903C80000000, float 0x3FBCB94540000000, float 0xBFD3CE52E0000000, float 0xBFD4B4F620000000, float 0x3FD6E5B420000000, float 0x3FD3B74580000000, float 0x3FE1B3CE60000000, float 0x3FA91819E0000000, float 0x3FE0F685A0000000, float 0xBFCAB34E80000000, float 0x3FE373C500000000, float 0xBFADC1E7A0000000, float 0xBFE0E260C0000000, float 0x3F92923E60000000, float 0x3FAF1B0460000000, float 0x3FBE6FD660000000, float 0x3FC67BAAA0000000, float 0x3F8E2B4960000000, float 0x3FDB698FE0000000, float 0xBFBB414A40000000, float 0xBFBE7BD480000000, float 0x3FB4869C60000000, float 0x3FE0CCC680000000, float 0x3FD791FF80000000, float 0x3FE0E7B800000000, float 0x3FCB592DA0000000, float 0x3FE47507E0000000, float 0x3FC8F85940000000, float 0xBFA9815A00000000, float 0xBFB78DD620000000, float 0xBFD363AA00000000, float 0x3FD314DF80000000, float 0xBFC6415F40000000, float 0xBFC29613E0000000, float 0xBFCDE63E80000000, float 0xBFD36A61A0000000, float 0x3FC2154CA0000000, float 0x3FD4D6FDA0000000, float 0xBFBD83D7A0000000, float 0x3FC3DD3340000000, float 0x3FA82DE000000000, float 0x3FCD930BE0000000, float 0xBFC56EE740000000, float 0x3FD6625EA0000000, float 0x3FD2EA3160000000, float 0xBFD4722180000000, float 0x3FB85B5B80000000, float 0x3FC659AFA0000000, float 0xBFC8EA5B60000000, float 0x3FD3941C80000000, float 0xBFCE97D060000000, float 0xBFA32D0A20000000, float 0x3FD1F6EC60000000, float 0x3FC01BDA60000000, float 0x3FE7F969E0000000, float 0xBFBA175D20000000, float 0x3FE9567DC0000000, float 0xBFCE4FD2A0000000, float 0x3FB06C97E0000000, float 0x3FA0D3AE60000000, float 0xBFCCEAA6E0000000, float 0x3FD66CB100000000, float 0x3FE72450A0000000, float 0xBFBA9F3840000000, float 0x3FDEEADD60000000, float 0xBFBFBDF0A0000000, float 0x3FE344B6E0000000, float 0x3F9877EE40000000, float 0xBFE629C9A0000000, float 0xBFBE4E9C40000000, float 0x3FC4CDAF40000000, float 0x3FC2953160000000, float 0xBFC7A450A0000000, float 0xBF922DD7A0000000, float 0xBFC4686620000000, float 0x3FBFC55860000000, float 0xBFC0C6CDA0000000, float 0x3FD3DB8BA0000000, float 0x3FC36451C0000000, float 0x3FC1C84300000000, float 0x3FE132DD40000000, float 0x3FD0D87720000000, float 0x3FE3B56B80000000, float 0x3FD2001500000000, float 0x3F95CDD500000000, float 0xBFDE4D2700000000, float 0x3FCAE60800000000, float 0xBFAD056C60000000, float 0x3FB04BE400000000, float 0x3FD824EE00000000, float 0xBFD41F4B20000000, float 0xBFC77C8080000000, float 0x3FD3397DE0000000, float 0x3FD505AB40000000, float 0x3FC514B160000000, float 0xBFC4630660000000, float 0xBFC499BF60000000, float 0xBFE0177000000000, float 0xBFC087E380000000, float 0x3FA7824D40000000, float 0xBFE36B7020000000, float 0xBFB9F3E8A0000000], align 16
@av1_tx_split_nn_weights_16x32_layer1 = internal constant [32 x float] [float 0x3FF357B640000000, float 0x3FD4C85800000000, float 0x3FD888D6E0000000, float 0xBFEBFA7000000000, float 0x3FC6169C20000000, float 0xBFE296F440000000, float 0xBFDBB51380000000, float 0x3FDBC1B540000000, float 0xBFE9A973A0000000, float 0x3FE58140E0000000, float 0x3FE2082280000000, float 0x3FD0A51A00000000, float 0xBFC9ABDA00000000, float 0xBFBF23AB00000000, float 0x3FE0FBC800000000, float 0xBFE0CE67E0000000, float 0x3FD208FEA0000000, float 0x3FE3F97AA0000000, float 0xBFE53573E0000000, float 0xBFCD8DB480000000, float 0x3FEF644300000000, float 0x3FCC999560000000, float 0xBFE94C8580000000, float 0x3FE3392180000000, float 0xBFD1801F80000000, float 0x3FDB5E5F40000000, float 0xBFE00D7160000000, float 0xBFEC1BC560000000, float 0x3FCE0BAA60000000, float 0xBFC6161E40000000, float 0x3FDACF52C0000000, float 0x3FFCACCC40000000], align 16
@av1_tx_split_nn_bias_16x32_layer0 = internal constant [32 x float] [float 0x3FAA73B420000000, float 0xBFCB32C620000000, float 0xBFB3DD54E0000000, float 0xBFEA30E1C0000000, float 0x3FE46E6320000000, float 0xBFE8516760000000, float 0x3FC41F1060000000, float 0x3FEFAB2180000000, float 0x3FF9606640000000, float 0x3FDB97DD00000000, float 0x3FA54D4020000000, float 0x3FE160F3C0000000, float 0x3FDFE57100000000, float 0x3FD4832340000000, float 0x3FC12E8C00000000, float 0x3FE578A900000000, float 0xBFBB061C80000000, float 0xBFF932B460000000, float 0x3FF43061C0000000, float 0xBFD266E440000000, float 0xBFF9C4FC20000000, float 0x3FE7638640000000, float 0xBFEC9D9D40000000, float 0xBFE50C9DA0000000, float 0x3FD154E2C0000000, float 0xBFC7423520000000, float 0x3FD31BE6E0000000, float 0x3FEA26D480000000, float 0xBFCC5A5FC0000000, float 0xBFC9D3A1E0000000, float 0xBFD2D74500000000, float 0x3FF74D77C0000000], align 16
@av1_tx_split_nn_bias_16x32_layer1 = internal constant [1 x float] [float 0xBFD2B5A860000000], align 4
@av1_tx_split_nnconfig_16x32 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 32, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([256 x float], [256 x float]* @av1_tx_split_nn_weights_16x32_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_weights_16x32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_bias_16x32_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_16x32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_32x64_layer0 = internal constant [256 x float] [float 0x3FA02FB5E0000000, float 0xBFBC65A580000000, float 0x3FAAD68840000000, float 0xBFE67AEDE0000000, float 0x3FA7670A00000000, float 0x3FCE819080000000, float 0xBF96544FE0000000, float 0xBFCAA3F040000000, float 0x3FE04FD4C0000000, float 0xBFD2CF1C40000000, float 0x3FD1C74760000000, float 0x3FBD2AF9A0000000, float 0x3FE7BAFDA0000000, float 0x3FB016CE80000000, float 0x3FD6852B40000000, float 0x3FCB343FA0000000, float 0x3FD8B1A2A0000000, float 0x3FB4DE4C60000000, float 0x3FD9810E80000000, float 0xBF8F0A1BE0000000, float 0x3FCF0E0A80000000, float 0x3FCB78A2A0000000, float 0xBFC761FE20000000, float 0xBFC5D47380000000, float 0x3FBC509C00000000, float 0xBFCE4DCA80000000, float 0xBF98672760000000, float 0xBFD2416BE0000000, float 0x3FC2D60200000000, float 0xBFD07D2840000000, float 0x3FD5D8C2A0000000, float 0xBFE24AE220000000, float 0xBFE718F600000000, float 0x3FC1DE0500000000, float 0xBFE09780C0000000, float 0xBFCA6F71A0000000, float 0xBFE2420700000000, float 0xBFC796FA80000000, float 0x3FBC3AB860000000, float 0x3FCAEAD920000000, float 0xBFBBF01320000000, float 0xBF51B1D920000000, float 0x3FC08B4C00000000, float 0xBFCA243560000000, float 0xBFD95D2D00000000, float 0xBFC76D54A0000000, float 0x3FDAF5A540000000, float 0xBF8AF07C00000000, float 0x3FCC7F0AA0000000, float 0x3FC5BCDBC0000000, float 0x3FCCEEC7C0000000, float 0x3FCBEC7000000000, float 0xBFD5FC5CE0000000, float 0x3FD1980F60000000, float 0xBFC40C8480000000, float 0x3FD00446C0000000, float 0xBFDEFA2F00000000, float 0x3F94630660000000, float 0xBFD65F6FE0000000, float 0xBFD2585BE0000000, float 0xBFE03C9680000000, float 0x3FC9E9C020000000, float 0xBFC3B9E060000000, float 0xBFD2BAADE0000000, float 0x3FBF670A00000000, float 0x3FD3A54820000000, float 0x3FDB317AC0000000, float 0x3F76DA0160000000, float 0x3FDF9F3C80000000, float 0xBFB45D7440000000, float 0x3FDE51C1A0000000, float 0x3FD68DF380000000, float 0xBFD6D7BA60000000, float 0x3FD0EACCA0000000, float 0xBFE1BE5B80000000, float 0x3FBEB6E0E0000000, float 0x3F892C0620000000, float 0xBFC2214AE0000000, float 0xBFD04D3C00000000, float 0xBFCB5B4680000000, float 0xBFBDE01DE0000000, float 0xBF87132720000000, float 0x3FC852BD40000000, float 0xBFBE5614E0000000, float 0x3FD3879800000000, float 0xBFD4462800000000, float 0xBFCC433500000000, float 0xBFD3BD2740000000, float 0xBFD4C115E0000000, float 0x3FDAF70DE0000000, float 0xBFC6AA1940000000, float 0xBFAC37E700000000, float 0x3FCD66BE80000000, float 0xBFC989F840000000, float 0x3FABCA5380000000, float 0x3FD75C7CE0000000, float 0xBFAF0520E0000000, float 0xBFD33D5340000000, float 0x3FC42B0640000000, float 0xBFB0787480000000, float 0xBF77646AE0000000, float 0xBFC6A7A420000000, float 0xBFDB2B0A60000000, float 0xBFBCA66560000000, float 0x3FB7B52860000000, float 0x3FC0351DE0000000, float 0x3FB41BA800000000, float 0x3FC2F1ED20000000, float 0x3F98CD63C0000000, float 0x3FBFE5B860000000, float 0x3F5600F340000000, float 0x3FAE69F060000000, float 0x3FDD0A4A00000000, float 0x3FA81DC0E0000000, float 0x3FCF0BAE80000000, float 0x3FAC894C40000000, float 0xBFB1447800000000, float 0xBFC5C48F20000000, float 0xBFC5D1EDA0000000, float 0xBFCDB7D840000000, float 0x3FCB821B00000000, float 0x3FCFDB9840000000, float 0x3FE16B4C80000000, float 0xBFB5A61E00000000, float 0x3FD9C23320000000, float 0x3FD312F0A0000000, float 0x3FB95A8DE0000000, float 0xBFCE776820000000, float 0xBFDE67CAE0000000, float 0xBFB1EE45C0000000, float 0xBFE8289760000000, float 0xBFA922FAE0000000, float 0xBFE914E5E0000000, float 0xBFB9903A80000000, float 0xBFE29FCF40000000, float 0xBFAC426360000000, float 0xBFBA892260000000, float 0x3FC26466C0000000, float 0x3FB9A7F3C0000000, float 0x3FD2CFD080000000, float 0x3FB969D300000000, float 0xBFA2988900000000, float 0x3FD6D2F5E0000000, float 0xBFD0BB83C0000000, float 0x3FEC253980000000, float 0x3F4CC532A0000000, float 0x3FE10DAE40000000, float 0xBFB80B02A0000000, float 0x3FE048A380000000, float 0xBFA4970F80000000, float 0xBFE93FD500000000, float 0xBFC29BCFE0000000, float 0xBFB70CDC80000000, float 0xBFB10F0EA0000000, float 0x3F8F277820000000, float 0x3FD6975F20000000, float 0xBFAE1F18C0000000, float 0xBFC5113840000000, float 0x3FA46C7640000000, float 0x3FBF73D180000000, float 0x3FCC7B2460000000, float 0x3FAF57D5A0000000, float 0x3FDDDAEC40000000, float 0x3F9735C180000000, float 0x3FDB1F29A0000000, float 0xBF6205BC00000000, float 0xBFE504CAE0000000, float 0xBFB989DF20000000, float 0xBFE0A8CDE0000000, float 0x3FD367B1C0000000, float 0xBFE2092CC0000000, float 0xBFC49917A0000000, float 0xBFCF2146A0000000, float 0x3FD40DFDE0000000, float 0xBFD5897A60000000, float 0xBFCA773E20000000, float 0xBFCE368F00000000, float 0x3FD4DB8780000000, float 0xBFDACCC460000000, float 0x3FC4E3E6C0000000, float 0xBFDE7ABFC0000000, float 0xBFBF36AC60000000, float 0x3FC1D095A0000000, float 0xBFC41EE680000000, float 0xBFE1043A20000000, float 0xBFC710DC00000000, float 0xBFDF0E66C0000000, float 0x3FC806A6E0000000, float 0xBFDC2A23C0000000, float 0x3FC1A53320000000, float 0x3F9DD69D40000000, float 0x3FBC0A2880000000, float 0xBFB416F000000000, float 0xBFD7145D80000000, float 0xBFD56B4420000000, float 0xBFD674FB60000000, float 0xBFD9DABE20000000, float 0x3FC7154000000000, float 0xBFD37D9DC0000000, float 0x3F74FBDAE0000000, float 0x3FDA7EE4E0000000, float 0x3FD4230BA0000000, float 0x3FD5EDF1E0000000, float 0xBFD2C4D660000000, float 0x3FD6EBAF20000000, float 0xBFC7182AA0000000, float 0xBFD7A66120000000, float 0xBFA8C996C0000000, float 0x3FDFE53A80000000, float 0x3FBF333340000000, float 0x3FD1573640000000, float 0xBFC80F4520000000, float 0x3FD5EB91C0000000, float 0x3FC6536500000000, float 0xBFD688E360000000, float 0x3FB68C6920000000, float 0x3F80F38820000000, float 0x3F94C2F840000000, float 0xBF638151A0000000, float 0x3FE023F460000000, float 0xBF9348B220000000, float 0xBFD76D5060000000, float 0xBFB7484D80000000, float 0xBFC585F060000000, float 0x3F909289E0000000, float 0xBFD50CED40000000, float 0x3FB6EEA640000000, float 0xBF91C3EFA0000000, float 0x3F77EFE0C0000000, float 0xBF74855DA0000000, float 0xBFFDB860A0000000, float 0xBFD2134480000000, float 0x3F84D7ADE0000000, float 0xBFCB7C2CA0000000, float 0xBFC75D1C40000000, float 0x3FC416B540000000, float 0xBFC4BD76E0000000, float 0xBFDE3FF6A0000000, float 0x3FB1C64BA0000000, float 0x3F914E7EE0000000, float 0xBFE892AD80000000, float 0x3FC18D7160000000, float 0xBFDA5568E0000000, float 0x3FA91DDE40000000, float 0xBFDBA044A0000000, float 0xBFA345AE60000000, float 0x3FE922D0E0000000, float 0x3FA7AACDA0000000, float 0x3FC910FD80000000, float 0x3FCF62D840000000, float 0x3FD7975F20000000, float 0x3FCB2B5E60000000, float 0x3FDC333760000000, float 0xBFC43AEAC0000000, float 0xBFDD818820000000, float 0xBFC2B94DA0000000], align 16
@av1_tx_split_nn_weights_32x64_layer1 = internal constant [32 x float] [float 0x3FF08A8A00000000, float 0x3FE34F5F40000000, float 0x3FD37E6B40000000, float 0xBFD1EA8980000000, float 0xBFE8FD34E0000000, float 0xBFC0FF9F80000000, float 0x3FC3B83480000000, float 0x3FE52F3800000000, float 0xBFE6FCDEE0000000, float 0x3FC9701540000000, float 0x3FA45C3580000000, float 0xBFCAB0A700000000, float 0xBFBADB5100000000, float 0xBFD93AB860000000, float 0x3FB4E4DA00000000, float 0x3FD75CD4E0000000, float 0xBFEBFFAC20000000, float 0xBFB0356960000000, float 0xBFF309D160000000, float 0x3FD5951820000000, float 0x3FDA4C1220000000, float 0x3FD3AE6420000000, float 0x3FCC544FE0000000, float 0x3FCDF04580000000, float 0x3FDE0CE0C0000000, float 0x3FDC115160000000, float 0x3FD1EDE120000000, float 0x3FDB08FA80000000, float 0xBFF64FECE0000000, float 0x3FE9055320000000, float 0x3FD6973DA0000000, float 0x3FBC7BDD00000000], align 16
@av1_tx_split_nn_bias_32x64_layer0 = internal constant [32 x float] [float 0x3FDF68E3E0000000, float 0xBFFE4ECC80000000, float 0x3FE3E1F5C0000000, float 0xBFB3A64800000000, float 0x3FD252B4E0000000, float 0x3FD253F7C0000000, float 0xBFC02EE420000000, float 0xBFD666F500000000, float 0xBFF047F9A0000000, float 0x3FE3D81060000000, float 0x3FDA1EC4E0000000, float 0x3FCE8F8E80000000, float 0xBFAF17BD80000000, float 0x3FCAFF2A20000000, float 0x3FA6145960000000, float 0x3FDC858360000000, float 0x3FED065940000000, float 0x3FD70EB240000000, float 0x3FF15461C0000000, float 0xBFB1A6D6A0000000, float 0x3FF0FF60A0000000, float 0x3FD95DDD20000000, float 0x3FD1ECBFC0000000, float 0x3FE00E3040000000, float 0x3FD504DDC0000000, float 0x3FB0F52BA0000000, float 0x3FDE616F80000000, float 0x3FC02B0640000000, float 0x3FE7B7F5A0000000, float 0x3FD4259E20000000, float 0x3FE1AFD120000000, float 0x3FD3298880000000], align 16
@av1_tx_split_nn_bias_32x64_layer1 = internal constant [1 x float] [float 0xBFC73EEB60000000], align 4
@av1_tx_split_nnconfig_32x64 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 32, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([256 x float], [256 x float]* @av1_tx_split_nn_weights_32x64_layer0, i32 0, i32 0), float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_weights_32x64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([32 x float], [32 x float]* @av1_tx_split_nn_bias_32x64_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_32x64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_4x16_layer0 = internal constant [128 x float] [float 0xBFF581C720000000, float 0xBFF74624E0000000, float 0xBFE67FE080000000, float 0xBFC1FE32A0000000, float 0xBFEAEDDCE0000000, float 0xBFB1710880000000, float 0xC001082060000000, float 0xBFE4FA00E0000000, float 0x3FDBA8D640000000, float 0x3FEC26EDA0000000, float 0xBFCC716900000000, float 0x3FAF8C0060000000, float 0xBFCD906460000000, float 0x3FE2394FA0000000, float 0x3FF6C97960000000, float 0x3FE3235500000000, float 0xBFDBE78180000000, float 0xBFE79A77E0000000, float 0xBFC1A5E360000000, float 0xBFB5F266C0000000, float 0xBFB3964A60000000, float 0xBFE2A8C360000000, float 0xBFEDFEFE00000000, float 0xBFCA0E1F80000000, float 0xBFCB9F3C80000000, float 0xBF8F759680000000, float 0xBFBFC4E300000000, float 0xBFDA5CD920000000, float 0x3FD5C9C900000000, float 0xBFD53B6CC0000000, float 0xBFDE3F3160000000, float 0xBFB903C8E0000000, float 0xBFEDC73EE0000000, float 0xBFF5ACE780000000, float 0xBFE19F8800000000, float 0x3FC68E1D60000000, float 0xBFE45A9A80000000, float 0x3FC7756CA0000000, float 0xBFE386DB60000000, float 0x3FD62324C0000000, float 0xBFF19D4FA0000000, float 0xBFF9B10020000000, float 0x3FBCA4B120000000, float 0xBFC20A3940000000, float 0x3FB0219EC0000000, float 0xBF8B44E500000000, float 0xBFD18090C0000000, float 0xBFD0602CA0000000, float 0x3FF3348B20000000, float 0x3FD1893FA0000000, float 0x3FF017A8A0000000, float 0x3FD4A21200000000, float 0x3FF38ED700000000, float 0x3FC440C840000000, float 0x3FDA29F160000000, float 0x3FC29014C0000000, float 0x3FC1E657C0000000, float 0xBFF3FD9760000000, float 0x3FD258D580000000, float 0xBFE457A560000000, float 0x3FD4010400000000, float 0xBFDFB80240000000, float 0xBFF1DF5F00000000, float 0xBFB5C99280000000, float 0xBFB8F4B620000000, float 0xBFD5DB7AE0000000, float 0xBFC0EBE5A0000000, float 0xBFEB9E2580000000, float 0x3FCBD9A100000000, float 0xBFF2953260000000, float 0xBFD35564C0000000, float 0xBFF5B761C0000000, float 0xBFE0A9C560000000, float 0xBFF36089E0000000, float 0xBFF0C79800000000, float 0xBFD5514C20000000, float 0xBFF2BE9320000000, float 0xBFD1F90540000000, float 0xC000762300000000, float 0xBFCD47D800000000, float 0x3FE366A120000000, float 0x3FB9E81CC0000000, float 0xBFD4267400000000, float 0xBFF4DA21E0000000, float 0xBFD2E0B0A0000000, float 0x3FF4D4AD40000000, float 0x3FA55B4680000000, float 0x3FB3DD2280000000, float 0xBFF271A5C0000000, float 0x3FDFB33DA0000000, float 0xBFE80CD420000000, float 0x3FCD78CCA0000000, float 0xBFEAE6B1E0000000, float 0x3FB9C981C0000000, float 0x3FF58A5160000000, float 0x3FE4CBF6E0000000, float 0xBFF6EA8760000000, float 0xBFDD3ABCA0000000, float 0xBFF04A3B60000000, float 0xBFD64ECA60000000, float 0xBFF39A86A0000000, float 0xBFC5DA0E00000000, float 0xBFD6A91DA0000000, float 0x3FB17B95A0000000, float 0xBFCDF93780000000, float 0x3FD1C29C00000000, float 0x3FC6EDDCE0000000, float 0x3FED0995A0000000, float 0x3FD6B23140000000, float 0xBFE4121AC0000000, float 0x3FECFC2440000000, float 0x3FE0675140000000, float 0x3FC4A1DFC0000000, float 0xBFEAFB4E60000000, float 0x3F8E9FADA0000000, float 0xBFD6B80AA0000000, float 0x3F86C3FC40000000, float 0xBFDB7E88A0000000, float 0xBFF0463280000000, float 0xBFCB103420000000, float 0x3FEE238DA0000000, float 0xBFD20824A0000000, float 0x3FEEA619E0000000, float 0xBFE1575C00000000, float 0x3FF0AB8A60000000, float 0xBFDBBFC660000000, float 0xBFF6A9C880000000, float 0xBFC54ECA60000000], align 16
@av1_tx_split_nn_weights_4x16_layer1 = internal constant [16 x float] [float 0xBFE8471500000000, float 0x3FD8E1B4C0000000, float 0x3FDC276B80000000, float 0x3F8753A3E0000000, float 0xBFB595EE20000000, float 0xBFE5600080000000, float 0xBFDDE88160000000, float 0xBFEC0405C0000000, float 0xBFC490C4E0000000, float 0x3FE9C4F3C0000000, float 0x3FBD48DC20000000, float 0xBFE196FEC0000000, float 0x3FDD9331A0000000, float 0x3FD5F8DF80000000, float 0x3FF17B42C0000000, float 0x3FDEEBF660000000], align 16
@av1_tx_split_nn_bias_4x16_layer0 = internal constant [16 x float] [float 0x4008B05EA0000000, float 0xC009E17980000000, float 0x401352E620000000, float 0xBFC535DAA0000000, float 0x3FEE8F9D20000000, float 0x4010391F20000000, float 0xBFD3EF6F80000000, float 0x4012A40CC0000000, float 0xBFE270DC80000000, float 0xBFCFC219E0000000, float 0xBFE94BEE80000000, float 0xBFFAFB8B20000000, float 0xBFF3113840000000, float 0xC00E668CA0000000, float 0x40107C7820000000, float 0xBFF663EE20000000], align 16
@av1_tx_split_nn_bias_4x16_layer1 = internal constant [1 x float] [float 0x3FEA419AA0000000], align 4
@av1_tx_split_nnconfig_4x16 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_split_nn_weights_4x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_split_nn_weights_4x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_split_nn_bias_4x16_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_4x16_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_8x32_layer0 = internal constant [192 x float] [float 0xBFE602D5A0000000, float 0x3FBF145520000000, float 0xBFD7DDACE0000000, float 0x3FC039FFE0000000, float 0xBFBA71BCE0000000, float 0xBFBA05BC00000000, float 0xBFC301B860000000, float 0xBFD1643020000000, float 0x3FE5DA7080000000, float 0xBFB46B7AA0000000, float 0x3FE44C9220000000, float 0xBFC3647340000000, float 0x3FD2698BC0000000, float 0xBFB43E1000000000, float 0xBFCE544FE0000000, float 0x3FB0A808C0000000, float 0x3FE6D408A0000000, float 0x3FD96A76A0000000, float 0x3FE1B74360000000, float 0x3FD795FAA0000000, float 0x3FE890B200000000, float 0xBFA7DC1620000000, float 0xBFD91D1D40000000, float 0xBFD2DE5D20000000, float 0xBFD2B573E0000000, float 0xBF85A74C00000000, float 0xBFEAD07200000000, float 0x3FA9A86940000000, float 0xBFE9F6A940000000, float 0x3FC97E2400000000, float 0x3FC34E7680000000, float 0x3F87C2CA20000000, float 0x3FD7A91100000000, float 0xBFCCE98140000000, float 0x3FCDF76A20000000, float 0xBFD14488C0000000, float 0x3FD3718A80000000, float 0xBFC85B20C0000000, float 0xBFDCDF6980000000, float 0x3FCAD94080000000, float 0xBFD3C4EB60000000, float 0x3FD4ECD8E0000000, float 0x3FD411E000000000, float 0x3FB70531A0000000, float 0xBFB8835580000000, float 0x3FD905D520000000, float 0x3FDDE95320000000, float 0x3FC5B7BF20000000, float 0x3FEB4E6A00000000, float 0x3FABAD18E0000000, float 0x3FEA91F920000000, float 0xBFBF3604A0000000, float 0x3FD0C4EB60000000, float 0xBFB7F151E0000000, float 0x3FD8ACFB80000000, float 0x3FDAD3BF20000000, float 0x3FA494D500000000, float 0xBFD635BD60000000, float 0xBFDCD4DC60000000, float 0xBFBB54E2C0000000, float 0x3FDF333BA0000000, float 0xBFCA22D520000000, float 0x3FDB8B3F60000000, float 0xBFBDCB9AA0000000, float 0x3FCE4295A0000000, float 0xBFC424E5A0000000, float 0x3FE76EF3E0000000, float 0xBFE4D82980000000, float 0x3FD63C8E20000000, float 0x3FD5ECBFC0000000, float 0x3FA8C8ABE0000000, float 0x3FC8052500000000, float 0x3FDBD562A0000000, float 0xBFDCA875E0000000, float 0x3FA0C1B980000000, float 0xBFB23810E0000000, float 0xBFD0574700000000, float 0x3FBAAB25C0000000, float 0x3FB87F1300000000, float 0xBFDBA1AD60000000, float 0x3FE738E2A0000000, float 0x3FA047B240000000, float 0x3FE0BDD120000000, float 0x3FAFA46180000000, float 0x3FDE1144C0000000, float 0xBFB2318320000000, float 0xBFAE3864C0000000, float 0xBFCB20C060000000, float 0x3FD918B940000000, float 0xBFD4934AC0000000, float 0x3FD76D86E0000000, float 0xBFDB610AE0000000, float 0x3FC558C080000000, float 0x3FD32D7FA0000000, float 0x3FA6DDACE0000000, float 0x3FCA4217E0000000, float 0x3FA4093DA0000000, float 0xBFAA8A1E00000000, float 0xBFDDCA57A0000000, float 0x3FCBC5DEA0000000, float 0xBFD5D58000000000, float 0x3FB86961C0000000, float 0x3FCD8B1580000000, float 0x3FC9D07420000000, float 0x3FD1DF7E80000000, float 0xBFE6D54540000000, float 0xBFB778FEE0000000, float 0xBFE23B0C40000000, float 0xBFBE76D980000000, float 0x3FD02363C0000000, float 0xBFF8B69760000000, float 0xBFD234DF00000000, float 0x3FE1C56920000000, float 0x3FCCFD0080000000, float 0x3FD6408D80000000, float 0x3FA1984A00000000, float 0x3FE8AAAE20000000, float 0xBFCEF53C60000000, float 0xBFC0ABBCC0000000, float 0x3FD2BF76A0000000, float 0x3FD9624140000000, float 0xBFDABF22C0000000, float 0x3FDF809920000000, float 0x3FC010F0E0000000, float 0x3FD61198A0000000, float 0x3FCDB7CFE0000000, float 0xBFDBA79FE0000000, float 0xBFD1D6F540000000, float 0x3FA1F49060000000, float 0xBFD3A9EF60000000, float 0xBFBEEA20A0000000, float 0x3FC5E1B080000000, float 0x3FDBC01E60000000, float 0x3FA6ACA7A0000000, float 0x3FC21B75A0000000, float 0xBFA5300580000000, float 0x3FE0F06700000000, float 0x3F8641F640000000, float 0xBFD4B71320000000, float 0x3FC7B4CC20000000, float 0x3FE3F36040000000, float 0x3FCDCDC440000000, float 0xBFDA074220000000, float 0xBFC24BFD20000000, float 0x3FCC8ADEE0000000, float 0x3FD5FE1980000000, float 0x3FB0BE1EC0000000, float 0x3F6578A2A0000000, float 0x3FE9C54DE0000000, float 0xBFDB52C160000000, float 0x3FD1DE1A00000000, float 0x3FC0D08920000000, float 0x3FC89E9080000000, float 0xBFD9C0C620000000, float 0x3FE1696E60000000, float 0xBFAF095280000000, float 0x3FDDF01B80000000, float 0x3FC5260F60000000, float 0xBFD7E160E0000000, float 0x3F63E1C9C0000000, float 0x3FE6049EC0000000, float 0x3FD4A0D780000000, float 0x3FD09F2340000000, float 0x3FC0B6F1A0000000, float 0x3FC7AF20E0000000, float 0xBFC834CA00000000, float 0xBFB15CB7A0000000, float 0x3F8645A1C0000000, float 0x3FE4A19440000000, float 0xBFC6F301E0000000, float 0x3FDDA56DE0000000, float 0x3FC3DE93A0000000, float 0x3FE71593E0000000, float 0xBFA78FCD60000000, float 0x3FDC106680000000, float 0x3FDC296700000000, float 0xBFDD92E1E0000000, float 0xBF60B417C0000000, float 0xBFDDF42360000000, float 0xBF8234EBA0000000, float 0xBFD506A2C0000000, float 0x3FD7AFC040000000, float 0x3FDEE1C9C0000000, float 0x3FA641D4C0000000, float 0xBFDE1016C0000000, float 0xBFE10B9340000000, float 0x3FBF40B340000000, float 0xBFD84C5540000000, float 0x3FA30E5E60000000, float 0xBFE0A320A0000000, float 0xBFC08240C0000000, float 0xBFD9E11DC0000000], align 16
@av1_tx_split_nn_weights_8x32_layer1 = internal constant [24 x float] [float 0x3FEA1AED60000000, float 0xBFD92E87E0000000, float 0xBFDEF077C0000000, float 0xBFE2195460000000, float 0x3FDF9567E0000000, float 0x3FDB88DF40000000, float 0xBFE039F120000000, float 0xBFD0169800000000, float 0xBFD69E6680000000, float 0xBFDFB55F00000000, float 0x3FEA3DAD80000000, float 0x3FE4C5CDE0000000, float 0xBFDF314880000000, float 0x3FFD8315A0000000, float 0x3FDEBDA0E0000000, float 0xBFEF7251C0000000, float 0xBFE00BD880000000, float 0xBFCC3C18C0000000, float 0x3FD56527A0000000, float 0x3FE9ABEF00000000, float 0x3FE9C96CC0000000, float 0xBFDF38E6E0000000, float 0x3FD33FD940000000, float 0xBFF3B9C840000000], align 16
@av1_tx_split_nn_bias_8x32_layer0 = internal constant [24 x float] [float 0xBFF32EF5E0000000, float 0x3FD94B05C0000000, float 0xBFDA26F1E0000000, float 0xBF962C7760000000, float 0xBFE5113E80000000, float 0x3FC3C779A0000000, float 0xBFD2746460000000, float 0x3FF3523920000000, float 0x3FDA57C920000000, float 0x3FEEDEA460000000, float 0xBFF2D48DC0000000, float 0x3FF0F1B040000000, float 0xBFDE451FC0000000, float 0x4000B42C40000000, float 0x3FF10C6F80000000, float 0x3FE30EE6C0000000, float 0x3FC9550440000000, float 0xBFD6656260000000, float 0x3FF037EA20000000, float 0xBFEDCB8380000000, float 0xBFEF27B0C0000000, float 0xBFDD61CBC0000000, float 0xBFF40C8AC0000000, float 0x3FF9FF1B60000000], align 16
@av1_tx_split_nn_bias_8x32_layer1 = internal constant [1 x float] [float 0x3FC132AB40000000], align 4
@av1_tx_split_nnconfig_8x32 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 24, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([192 x float], [192 x float]* @av1_tx_split_nn_weights_8x32_layer0, i32 0, i32 0), float* getelementptr inbounds ([24 x float], [24 x float]* @av1_tx_split_nn_weights_8x32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([24 x float], [24 x float]* @av1_tx_split_nn_bias_8x32_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_8x32_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_tx_split_nn_weights_16x64_layer0 = internal constant [128 x float] [float 0xBFD834CE40000000, float 0xBFBFCC9EA0000000, float 0xBFE0736AC0000000, float 0xBFBC30A0C0000000, float 0xBFE2BEE1C0000000, float 0xBFB8474DA0000000, float 0xBFDD250720000000, float 0xBFCC314880000000, float 0xBFE0256BC0000000, float 0xBFB514F480000000, float 0xBFDE7DAA40000000, float 0xBFD0416BE0000000, float 0xBFDD19F3C0000000, float 0xBFAE71AC20000000, float 0x3FCAEB8960000000, float 0xBFC3ED6BA0000000, float 0x3FC8B32CE0000000, float 0xBFC05BE1A0000000, float 0x3FDE352EC0000000, float 0x3FD0375420000000, float 0x3FDE3F7CE0000000, float 0x3FDF0F8400000000, float 0x3FC3458CE0000000, float 0x3FC51A6500000000, float 0xBFDE700480000000, float 0x3FDCA4CE80000000, float 0xBFDD2B27C0000000, float 0xBFD3A06640000000, float 0xBFC8F15E80000000, float 0xBFD2286720000000, float 0xBFCF380460000000, float 0x3FD2C0D700000000, float 0xBFD3BB2780000000, float 0xBFC8904F60000000, float 0xBFDDFD04A0000000, float 0x3F8CC7D1C0000000, float 0xBFE3CD9A60000000, float 0x3FB8A558E0000000, float 0xBFDC7418E0000000, float 0x3FD6418940000000, float 0xBFD1F60E00000000, float 0xBFB0186120000000, float 0x3FBE609140000000, float 0x3FE1487DC0000000, float 0x3FBAA8FC00000000, float 0xBFD1E00D20000000, float 0xBFB945C780000000, float 0xBFC632DB20000000, float 0xBFEF817FC0000000, float 0xBFDB2BF980000000, float 0xBFDA5D0740000000, float 0xBFBEF1AA00000000, float 0xBFDF4BC280000000, float 0xBFA9F772A0000000, float 0xBFE0BD4280000000, float 0x3FB7F77B00000000, float 0xBFEDC5CDE0000000, float 0xBFDBA5D6C0000000, float 0xBFF29CDD60000000, float 0x3FC85E80C0000000, float 0xBFDB0B9120000000, float 0xBF75EE1360000000, float 0x3FDCD5D800000000, float 0x3FD7A12300000000, float 0x3FE1FFDE80000000, float 0x3FE5C1EBC0000000, float 0x3FD20DE900000000, float 0xBFA401A360000000, float 0x3FD9DE58E0000000, float 0x3F7A187A40000000, float 0x3FB1D67BA0000000, float 0xBFC91BC560000000, float 0xBFCB59B3E0000000, float 0x3FD19CA9E0000000, float 0xBFBAAF2520000000, float 0xBFC8B72C60000000, float 0x3F6986B9C0000000, float 0xBFD02834E0000000, float 0xBFB8371DA0000000, float 0x3FCAEFAA40000000, float 0xBFC18B8280000000, float 0x3FC290C4E0000000, float 0x3F9925BB80000000, float 0x3FBF28E920000000, float 0x3F84C33B60000000, float 0x3FD34E4000000000, float 0xBFD830FD00000000, float 0x3FDC714760000000, float 0x3F5E3A7DA0000000, float 0xBFB867CF20000000, float 0x3FE19BB8C0000000, float 0x3FB66D2680000000, float 0x3FE95C1820000000, float 0xBFA6D3B6C0000000, float 0x3FE488DB00000000, float 0xBFD50574C0000000, float 0xBFDCA89BA0000000, float 0x3FC1540040000000, float 0x3FD6CF0300000000, float 0x3FC16030C0000000, float 0x3FD3DD1A20000000, float 0x3FD2CCEA20000000, float 0xBFAFBE76C0000000, float 0xBFACDC4440000000, float 0x3FD602F300000000, float 0x3FD3F87260000000, float 0x3FD7BA94C0000000, float 0x3FDCF3CF80000000, float 0xBF98327680000000, float 0xBFC7CBDDC0000000, float 0x3FDB069620000000, float 0xBF79D45200000000, float 0x3FA71FFF80000000, float 0x3FDB185060000000, float 0xBFC430A920000000, float 0xBFB5BC1260000000, float 0x3FCC197600000000, float 0xBFCAD13940000000, float 0x3FE266DE00000000, float 0x3FCFE846A0000000, float 0x3FB1BB7B60000000, float 0x3FCDF05EA0000000, float 0xBFCD5CB7A0000000, float 0x3FBE009F60000000, float 0xBFA3BCF4E0000000, float 0x3FD2D080C0000000, float 0x3FBA1C68E0000000, float 0x3FBEF1DC60000000], align 16
@av1_tx_split_nn_weights_16x64_layer1 = internal constant [16 x float] [float 0xBFFC763E40000000, float 0x3FC65C3DE0000000, float 0x3FCB228560000000, float 0x3FE6C9D5A0000000, float 0x3FE2DBF8C0000000, float 0x3FDDDDA060000000, float 0x3FF07761C0000000, float 0xBFDF5CE180000000, float 0x3FDEE9B7C0000000, float 0x3FE334F620000000, float 0xBFE27D2420000000, float 0xBFE82D6EC0000000, float 0x3FD64B2740000000, float 0xBFCA402080000000, float 0x3FD6375C80000000, float 0xBFD4A02FC0000000], align 16
@av1_tx_split_nn_bias_16x64_layer0 = internal constant [16 x float] [float 0x3FF0978820000000, float 0x3FC4830A00000000, float 0x3FB9AAE6C0000000, float 0x3FE63C7720000000, float 0x3FE63ACB40000000, float 0x3FC06EB920000000, float 0xBFEAFD2C80000000, float 0xBFD9F3F520000000, float 0x3FBAA8DA80000000, float 0x3FC76BE380000000, float 0xBF9A155500000000, float 0x3FECD58A80000000, float 0xBFD3310120000000, float 0xBFBA6362A0000000, float 0xBFC85D7440000000, float 0xBFA8A350E0000000], align 16
@av1_tx_split_nn_bias_16x64_layer1 = internal constant [1 x float] [float 0x3FA5A99640000000], align 4
@av1_tx_split_nnconfig_16x64 = internal constant { i32, i32, i32, <{ i32, [9 x i32] }>, [4 x i8], <{ float*, float*, [9 x float*] }>, <{ float*, float*, [9 x float*] }> } { i32 8, i32 1, i32 1, <{ i32, [9 x i32] }> <{ i32 16, [9 x i32] zeroinitializer }>, [4 x i8] undef, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([128 x float], [128 x float]* @av1_tx_split_nn_weights_16x64_layer0, i32 0, i32 0), float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_split_nn_weights_16x64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }>, <{ float*, float*, [9 x float*] }> <{ float* getelementptr inbounds ([16 x float], [16 x float]* @av1_tx_split_nn_bias_16x64_layer0, i32 0, i32 0), float* getelementptr inbounds ([1 x float], [1 x float]* @av1_tx_split_nn_bias_16x64_layer1, i32 0, i32 0), [9 x float*] zeroinitializer }> }, align 8
@av1_get_txb_size_index.tw_w_log2_table = internal unnamed_addr constant [22 x i8] c"\00\00\00\00\01\01\01\02\02\02\03\03\03\03\03\03\00\01\01\02\02\03", align 16
@av1_get_txb_size_index.tw_h_log2_table = internal unnamed_addr constant [22 x i8] c"\00\00\00\00\01\01\01\02\02\02\03\03\03\03\03\03\01\00\02\01\03\02", align 16
@av1_get_txb_size_index.stride_log2_table = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\00\01\01\00\01\01\00\01\01\01\02\02\00\01\00\01\00\01", align 16
@choose_largest_tx_size.tx_size_max_32 = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\03\05\06\07\08\09\0A\03\03\0D\0E\0F\10\09\0A", align 16
@choose_largest_tx_size.tx_size_max_square = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\04\00\00\01\01\02\02\03\03\00\00\01\01\02\02", align 16
@choose_largest_tx_size.tx_size_max_32_square = internal unnamed_addr constant [19 x i8] c"\00\01\02\03\03\00\00\01\01\02\02\03\03\00\00\01\01\02\02", align 16
@tx_mode_to_biggest_tx_size = internal unnamed_addr constant [3 x i8] c"\00\04\04", align 1
@__const.choose_tx_size_type_from_rd.rd = private unnamed_addr constant [3 x i64] [i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807], align 16
@ss_size_lookup = internal unnamed_addr constant [22 x [2 x [2 x i8]]] [[2 x [2 x i8]] zeroinitializer, [2 x [2 x i8]] [[2 x i8] c"\01\00", [2 x i8] c"\FF\00"], [2 x [2 x i8]] [[2 x i8] c"\02\FF", [2 x i8] zeroinitializer], [2 x [2 x i8]] [[2 x i8] c"\03\02", [2 x i8] c"\01\00"], [2 x [2 x i8]] [[2 x i8] c"\04\03", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\05\FF", [2 x i8] c"\03\02"], [2 x [2 x i8]] [[2 x i8] c"\06\05", [2 x i8] c"\04\03"], [2 x [2 x i8]] [[2 x i8] c"\07\06", [2 x i8] c"\FF\04"], [2 x [2 x i8]] [[2 x i8] c"\08\FF", [2 x i8] c"\06\05"], [2 x [2 x i8]] [[2 x i8] c"\09\08", [2 x i8] c"\07\06"], [2 x [2 x i8]] [[2 x i8] c"\0A\09", [2 x i8] c"\FF\07"], [2 x [2 x i8]] [[2 x i8] c"\0B\FF", [2 x i8] c"\09\08"], [2 x [2 x i8]] [[2 x i8] c"\0C\0B", [2 x i8] c"\0A\09"], [2 x [2 x i8]] [[2 x i8] c"\0D\0C", [2 x i8] c"\FF\0A"], [2 x [2 x i8]] [[2 x i8] c"\0E\FF", [2 x i8] c"\0C\0B"], [2 x [2 x i8]] [[2 x i8] c"\0F\0E", [2 x i8] c"\0D\0C"], [2 x [2 x i8]] [[2 x i8] c"\10\01", [2 x i8] c"\FF\01"], [2 x [2 x i8]] [[2 x i8] c"\11\FF", [2 x i8] c"\02\02"], [2 x [2 x i8]] [[2 x i8] c"\12\04", [2 x i8] c"\FF\10"], [2 x [2 x i8]] [[2 x i8] c"\13\FF", [2 x i8] c"\05\11"], [2 x [2 x i8]] [[2 x i8] c"\14\07", [2 x i8] c"\FF\12"], [2 x [2 x i8]] [[2 x i8] c"\15\FF", [2 x i8] c"\08\13"]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @prune_txk_type_separ(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, i32, i32, i8 zeroext, i32* nocapture, i16 signext, i32, %struct.txb_ctx*, i32, i64, i32) local_unnamed_addr #0 {
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca [4 x i64], align 16
  %19 = alloca [4 x i64], align 16
  %20 = alloca [4 x i32], align 16
  %21 = alloca [4 x i32], align 16
  %22 = alloca [4 x i32], align 16
  %23 = alloca [4 x i32], align 16
  %24 = alloca %struct.QUANT_PARAM, align 8
  %25 = alloca %struct.txfm_param, align 4
  %26 = alloca [16 x i64], align 16
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %28 = bitcast [4 x i64]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %28) #6
  %29 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %30 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  %31 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 2
  %32 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 3
  %33 = bitcast [4 x i64]* %19 to i8*
  %34 = bitcast [4 x i64]* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #6
  %35 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %36 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  %37 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 2
  %38 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 3
  %39 = bitcast [4 x i32]* %20 to i8*
  %40 = bitcast [4 x i64]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %39, i8* align 16 bitcast ([4 x i32]* @__const.prune_txk_type_separ.idx_h to i8*), i64 16, i1 false)
  %41 = bitcast [4 x i32]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %41, i8* align 16 bitcast ([4 x i32]* @__const.prune_txk_type_separ.idx_h to i8*), i64 16, i1 false)
  %42 = bitcast [4 x i32]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %42, i8 0, i64 16, i1 false)
  %43 = bitcast [4 x i32]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %43, i8 0, i64 16, i1 false)
  %44 = bitcast %struct.QUANT_PARAM* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %44) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 40, i1 false)
  %45 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %25, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %45, i8 -86, i64 24, i1 false)
  call void @av1_setup_xform(%struct.AV1Common* %27, %struct.macroblock* %1, i8 zeroext %4, i8 zeroext 0, %struct.txfm_param* nonnull %25) #6
  %46 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 4
  %47 = load i32, i32* %46, align 4
  call void @av1_setup_quant(i8 zeroext %4, i32 1, i32 1, i32 %47, %struct.QUANT_PARAM* nonnull %24) #6
  %48 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %25, i64 0, i32 5
  store i8 5, i8* %48, align 4
  %49 = sext i32 %2 to i64
  %50 = zext i8 %4 to i64
  %51 = getelementptr inbounds [20 x i32], [20 x i32]* @tx_size_2d, i64 0, i64 %50
  %52 = bitcast i64* %17 to i8*
  %53 = shl i32 %3, 4
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %49, i32 3
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %49, i32 1
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %58

58:                                               ; preds = %100, %15
  %59 = phi i64 [ 0, %15 ], [ %101, %100 ]
  %60 = getelementptr inbounds [16 x i32], [16 x i32]* @__const.prune_tx_2D.tx_type_table_2D, i64 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %45, align 4
  call void @av1_xform_quant(%struct.macroblock* %1, i32 %2, i32 %3, i32 %5, i32 %6, i8 zeroext %7, %struct.txfm_param* nonnull %25, %struct.QUANT_PARAM* nonnull %24) #6
  switch i8 %4, label %64 [
    i8 4, label %67
    i8 12, label %67
    i8 11, label %67
    i8 17, label %63
    i8 18, label %63
  ]

63:                                               ; preds = %58, %58
  br label %67

64:                                               ; preds = %58
  %65 = load i32, i32* %51, align 4
  %66 = sext i32 %65 to i64
  br label %67

67:                                               ; preds = %58, %58, %58, %63, %64
  %68 = phi i64 [ 512, %63 ], [ %66, %64 ], [ 1024, %58 ], [ 1024, %58 ], [ 1024, %58 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #6
  store i64 -6148914691236517206, i64* %17, align 8
  %69 = call i32 @av1_get_tx_scale(i8 zeroext %4) #6
  %70 = shl i32 %69, 1
  %71 = sub i32 2, %70
  %72 = load i32*, i32** %54, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 %55
  %74 = load i32*, i32** %56, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 %55
  %76 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @av1_block_error, align 8
  %77 = call i64 %76(i32* %73, i32* %75, i64 %68, i64* nonnull %17) #6
  %78 = icmp slt i32 %71, 0
  %79 = add i32 %70, -2
  %80 = zext i32 %79 to i64
  %81 = shl i64 %77, %80
  %82 = zext i32 %71 to i64
  %83 = ashr i64 %77, %82
  %84 = select i1 %78, i64 %81, i64 %83
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #6
  %85 = call i32 @av1_cost_coeffs_txb_laplacian(%struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %62, %struct.txb_ctx* %11, i32 %12, i32 0) #6
  %86 = sext i32 %85 to i64
  %87 = load i32, i32* %57, align 8
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, %86
  %90 = add nsw i64 %89, 256
  %91 = ashr i64 %90, 9
  %92 = shl nsw i64 %84, 7
  %93 = add nsw i64 %91, %92
  %94 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 %59
  store i64 %93, i64* %94, align 8
  %95 = ashr i64 %93, 2
  %96 = sub nsw i64 %93, %95
  %97 = icmp sgt i64 %96, %13
  br i1 %97, label %98, label %100

98:                                               ; preds = %67
  %99 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %59
  store i32 1, i32* %99, align 4
  br label %100

100:                                              ; preds = %67, %98
  %101 = add nuw nsw i64 %59, 1
  %102 = icmp eq i64 %101, 4
  br i1 %102, label %103, label %58

103:                                              ; preds = %100
  %104 = load i64, i64* %36, align 8
  %105 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %106 = load i64, i64* %105, align 16
  %107 = icmp sgt i64 %106, %104
  br i1 %107, label %108, label %117

108:                                              ; preds = %103
  %109 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %110 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %111 = load i64, i64* %110, align 16
  %112 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  store i64 %111, i64* %112, align 8
  %113 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  %114 = load i32, i32* %113, align 16
  %115 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %114, i32* %115, align 4
  store i64 %104, i64* %109, align 16
  %116 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  store i32 1, i32* %116, align 16
  br label %117

117:                                              ; preds = %103, %108
  %118 = load i64, i64* %37, align 16
  %119 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %120 = load i64, i64* %119, align 16
  %121 = icmp sgt i64 %120, %118
  br i1 %121, label %430, label %426

122:                                              ; preds = %467
  %123 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  %124 = load i32, i32* %123, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %125
  store i32 1, i32* %126, align 4
  br label %127

127:                                              ; preds = %467, %122
  %128 = load i64, i64* %37, align 16
  %129 = sitofp i64 %128 to double
  %130 = fcmp olt double %471, %129
  br i1 %130, label %406, label %411

131:                                              ; preds = %420
  store i64 %469, i64* %29, align 16
  %132 = getelementptr inbounds [16 x i32], [16 x i32]* @__const.prune_tx_2D.tx_type_table_2D, i64 0, i64 %422
  %133 = bitcast i64* %16 to i8*
  br label %134

134:                                              ; preds = %182, %131
  %135 = phi i32 [ 1, %131 ], [ %184, %182 ]
  %136 = phi i64 [ 1, %131 ], [ %180, %182 ]
  %137 = shl nsw i32 %135, 2
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, i32* %132, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = trunc i32 %140 to i8
  store i8 %141, i8* %45, align 4
  call void @av1_xform_quant(%struct.macroblock* %1, i32 %2, i32 %3, i32 %5, i32 %6, i8 zeroext %7, %struct.txfm_param* nonnull %25, %struct.QUANT_PARAM* nonnull %24) #6
  switch i8 %4, label %143 [
    i8 4, label %146
    i8 12, label %146
    i8 11, label %146
    i8 17, label %142
    i8 18, label %142
  ]

142:                                              ; preds = %134, %134
  br label %146

143:                                              ; preds = %134
  %144 = load i32, i32* %51, align 4
  %145 = sext i32 %144 to i64
  br label %146

146:                                              ; preds = %134, %134, %134, %142, %143
  %147 = phi i64 [ 512, %142 ], [ %145, %143 ], [ 1024, %134 ], [ 1024, %134 ], [ 1024, %134 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %133) #6
  store i64 -6148914691236517206, i64* %16, align 8
  %148 = call i32 @av1_get_tx_scale(i8 zeroext %4) #6
  %149 = shl i32 %148, 1
  %150 = sub i32 2, %149
  %151 = load i32*, i32** %54, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 %55
  %153 = load i32*, i32** %56, align 8
  %154 = getelementptr inbounds i32, i32* %153, i64 %55
  %155 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @av1_block_error, align 8
  %156 = call i64 %155(i32* %152, i32* %154, i64 %147, i64* nonnull %16) #6
  %157 = icmp slt i32 %150, 0
  %158 = add i32 %149, -2
  %159 = zext i32 %158 to i64
  %160 = shl i64 %156, %159
  %161 = zext i32 %150 to i64
  %162 = ashr i64 %156, %161
  %163 = select i1 %157, i64 %160, i64 %162
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %133) #6
  %164 = call i32 @av1_cost_coeffs_txb_laplacian(%struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %141, %struct.txb_ctx* %11, i32 %12, i32 0) #6
  %165 = sext i32 %164 to i64
  %166 = load i32, i32* %57, align 8
  %167 = sext i32 %166 to i64
  %168 = mul nsw i64 %167, %165
  %169 = add nsw i64 %168, 256
  %170 = ashr i64 %169, 9
  %171 = shl nsw i64 %163, 7
  %172 = add nsw i64 %170, %171
  %173 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 %136
  store i64 %172, i64* %173, align 8
  %174 = ashr i64 %172, 2
  %175 = sub nsw i64 %172, %174
  %176 = icmp sgt i64 %175, %13
  br i1 %176, label %177, label %179

177:                                              ; preds = %146
  %178 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 %136
  store i32 1, i32* %178, align 4
  br label %179

179:                                              ; preds = %146, %177
  %180 = add nuw nsw i64 %136, 1
  %181 = icmp eq i64 %180, 4
  br i1 %181, label %185, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 %180
  %184 = load i32, i32* %183, align 4
  br label %134

185:                                              ; preds = %179
  %186 = load i64, i64* %30, align 8
  %187 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %188 = load i64, i64* %187, align 16
  %189 = icmp sgt i64 %188, %186
  br i1 %189, label %190, label %199

190:                                              ; preds = %185
  %191 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %192 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %193 = load i64, i64* %192, align 16
  %194 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 0
  %196 = load i32, i32* %195, align 16
  %197 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %196, i32* %197, align 4
  store i64 %186, i64* %191, align 16
  %198 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 0
  store i32 1, i32* %198, align 16
  br label %199

199:                                              ; preds = %185, %190
  %200 = load i64, i64* %31, align 16
  %201 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %202 = load i64, i64* %201, align 16
  %203 = icmp sgt i64 %202, %200
  br i1 %203, label %362, label %358

204:                                              ; preds = %399
  %205 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  %206 = load i32, i32* %205, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 %207
  store i32 1, i32* %208, align 4
  br label %209

209:                                              ; preds = %399, %204
  %210 = load i64, i64* %31, align 16
  %211 = sitofp i64 %210 to double
  %212 = fcmp olt double %402, %211
  br i1 %212, label %341, label %346

213:                                              ; preds = %314
  %214 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 0
  %215 = icmp sgt i32 %315, 1
  br i1 %215, label %216, label %254

216:                                              ; preds = %213
  %217 = zext i32 %315 to i64
  br label %218

218:                                              ; preds = %251, %216
  %219 = phi i64 [ 1, %216 ], [ %252, %251 ]
  %220 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %219
  %221 = load i64, i64* %220, align 8
  br label %222

222:                                              ; preds = %248, %218
  %223 = phi i64 [ 0, %218 ], [ %249, %248 ]
  %224 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %223
  %225 = load i64, i64* %224, align 8
  %226 = icmp sgt i64 %225, %221
  br i1 %226, label %227, label %248

227:                                              ; preds = %222
  %228 = and i64 %223, 4294967295
  %229 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %228
  %230 = getelementptr inbounds i32, i32* %8, i64 %219
  %231 = load i32, i32* %230, align 4
  %232 = icmp ugt i64 %219, %228
  br i1 %232, label %233, label %246

233:                                              ; preds = %227
  %234 = shl i64 %223, 32
  %235 = ashr exact i64 %234, 32
  br label %236

236:                                              ; preds = %236, %233
  %237 = phi i64 [ %219, %233 ], [ %238, %236 ]
  %238 = add nsw i64 %237, -1
  %239 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %238
  %240 = load i64, i64* %239, align 8
  %241 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %237
  store i64 %240, i64* %241, align 8
  %242 = getelementptr inbounds i32, i32* %8, i64 %238
  %243 = load i32, i32* %242, align 4
  %244 = getelementptr inbounds i32, i32* %8, i64 %237
  store i32 %243, i32* %244, align 4
  %245 = icmp sgt i64 %238, %235
  br i1 %245, label %236, label %246

246:                                              ; preds = %236, %227
  store i64 %221, i64* %229, align 8
  %247 = getelementptr inbounds i32, i32* %8, i64 %228
  store i32 %231, i32* %247, align 4
  br label %251

248:                                              ; preds = %222
  %249 = add nuw nsw i64 %223, 1
  %250 = icmp eq i64 %249, %219
  br i1 %250, label %251, label %222

251:                                              ; preds = %248, %246
  %252 = add nuw nsw i64 %219, 1
  %253 = icmp eq i64 %252, %217
  br i1 %253, label %254, label %218

254:                                              ; preds = %251, %213
  %255 = load i32, i32* %8, align 4
  %256 = shl i32 1, %255
  %257 = trunc i32 %256 to i16
  %258 = xor i16 %257, -1
  %259 = icmp sgt i32 %315, %14
  %260 = select i1 %259, i32 %14, i32 %315
  %261 = icmp sgt i32 %260, 1
  br i1 %261, label %262, label %337

262:                                              ; preds = %254
  %263 = load i64, i64* %214, align 16
  %264 = sext i32 %10 to i64
  %265 = sext i32 %260 to i64
  br label %319

266:                                              ; preds = %314, %355
  %267 = phi i64 [ 0, %355 ], [ %317, %314 ]
  %268 = phi i32 [ 15, %355 ], [ %316, %314 ]
  %269 = phi i32 [ 0, %355 ], [ %315, %314 ]
  %270 = getelementptr inbounds [16 x i32], [16 x i32]* @prune_txk_type_separ.sel_pattern_v, i64 0, i64 %267
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds [16 x i32], [16 x i32]* @prune_txk_type_separ.sel_pattern_h, i64 0, i64 %267
  %273 = load i32, i32* %272, align 4
  %274 = sext i32 %271 to i64
  %275 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = shl i32 %276, 2
  %278 = sext i32 %273 to i64
  %279 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = add nsw i32 %277, %280
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [16 x i32], [16 x i32]* @__const.prune_tx_2D.tx_type_table_2D, i64 0, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = shl i32 1, %284
  %286 = and i32 %285, %357
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %298, label %288

288:                                              ; preds = %266
  %289 = sext i32 %280 to i64
  %290 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %298

293:                                              ; preds = %288
  %294 = sext i32 %276 to i64
  %295 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %302, label %298

298:                                              ; preds = %293, %288, %266
  %299 = sext i32 %268 to i64
  %300 = getelementptr inbounds i32, i32* %8, i64 %299
  store i32 %284, i32* %300, align 4
  %301 = add nsw i32 %268, -1
  br label %314

302:                                              ; preds = %293
  %303 = sext i32 %269 to i64
  %304 = getelementptr inbounds i32, i32* %8, i64 %303
  store i32 %284, i32* %304, align 4
  %305 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 %274
  %306 = load i64, i64* %305, align 8
  %307 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 %278
  %308 = load i64, i64* %307, align 8
  %309 = add nsw i64 %308, %306
  %310 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %303
  %311 = icmp eq i64 %309, 0
  %312 = select i1 %311, i64 1, i64 %309
  store i64 %312, i64* %310, align 8
  %313 = add nsw i32 %269, 1
  br label %314

314:                                              ; preds = %298, %302
  %315 = phi i32 [ %269, %298 ], [ %313, %302 ]
  %316 = phi i32 [ %301, %298 ], [ %268, %302 ]
  %317 = add nuw nsw i64 %267, 1
  %318 = icmp eq i64 %317, 16
  br i1 %318, label %213, label %266

319:                                              ; preds = %262, %328
  %320 = phi i64 [ 1, %262 ], [ %335, %328 ]
  %321 = phi i16 [ %258, %262 ], [ %334, %328 ]
  %322 = getelementptr inbounds [16 x i64], [16 x i64]* %26, i64 0, i64 %320
  %323 = load i64, i64* %322, align 8
  %324 = sub nsw i64 %323, %263
  %325 = mul nsw i64 %324, 1800
  %326 = sdiv i64 %325, %263
  %327 = icmp slt i64 %326, %264
  br i1 %327, label %328, label %337

328:                                              ; preds = %319
  %329 = getelementptr inbounds i32, i32* %8, i64 %320
  %330 = load i32, i32* %329, align 4
  %331 = shl i32 1, %330
  %332 = trunc i32 %331 to i16
  %333 = xor i16 %332, -1
  %334 = and i16 %321, %333
  %335 = add nuw nsw i64 %320, 1
  %336 = icmp slt i64 %335, %265
  br i1 %336, label %319, label %337

337:                                              ; preds = %328, %319, %254
  %338 = phi i16 [ %258, %254 ], [ %321, %319 ], [ %334, %328 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %356) #6
  br label %339

339:                                              ; preds = %420, %337
  %340 = phi i16 [ %338, %337 ], [ -1, %420 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %44) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %28) #6
  ret i16 %340

341:                                              ; preds = %209
  %342 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 2
  %343 = load i32, i32* %342, align 8
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 %344
  store i32 1, i32* %345, align 4
  br label %346

346:                                              ; preds = %341, %209
  %347 = load i64, i64* %32, align 8
  %348 = sitofp i64 %347 to double
  %349 = fcmp olt double %402, %348
  br i1 %349, label %350, label %355

350:                                              ; preds = %346
  %351 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  %352 = load i32, i32* %351, align 4
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds [4 x i32], [4 x i32]* %22, i64 0, i64 %353
  store i32 1, i32* %354, align 4
  br label %355

355:                                              ; preds = %350, %346
  %356 = bitcast [16 x i64]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %356) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %356, i8 -86, i64 128, i1 false)
  %357 = sext i16 %9 to i32
  br label %266

358:                                              ; preds = %199
  %359 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  %360 = load i64, i64* %359, align 8
  %361 = icmp sgt i64 %360, %200
  br i1 %361, label %362, label %376

362:                                              ; preds = %358, %199
  %363 = phi i64 [ 0, %199 ], [ 1, %358 ]
  %364 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 %363
  %365 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 2
  %366 = load i32, i32* %365, align 8
  %367 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  %368 = load i64, i64* %367, align 8
  %369 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 2
  store i64 %368, i64* %369, align 16
  %370 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  %371 = load i32, i32* %370, align 4
  %372 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 2
  store i32 %371, i32* %372, align 8
  %373 = icmp eq i64 %363, 1
  br i1 %373, label %374, label %494

374:                                              ; preds = %494, %362
  store i64 %200, i64* %364, align 8
  %375 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 %363
  store i32 %366, i32* %375, align 4
  br label %376

376:                                              ; preds = %358, %374
  %377 = load i64, i64* %32, align 8
  %378 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %379 = load i64, i64* %378, align 16
  %380 = icmp sgt i64 %379, %377
  br i1 %380, label %385, label %381

381:                                              ; preds = %376
  %382 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  %383 = load i64, i64* %382, align 8
  %384 = icmp sgt i64 %383, %377
  br i1 %384, label %385, label %490

385:                                              ; preds = %490, %381, %376
  %386 = phi i64 [ 0, %376 ], [ 1, %381 ], [ 2, %490 ]
  %387 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 %386
  %388 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  %389 = load i32, i32* %388, align 4
  %390 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 2
  %391 = load i64, i64* %390, align 16
  %392 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 3
  store i64 %391, i64* %392, align 8
  %393 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 2
  %394 = load i32, i32* %393, align 8
  %395 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 3
  store i32 %394, i32* %395, align 4
  %396 = icmp ult i64 %386, 2
  br i1 %396, label %475, label %397

397:                                              ; preds = %385, %475, %483
  store i64 %377, i64* %387, align 8
  %398 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 %386
  store i32 %389, i32* %398, align 4
  br label %399

399:                                              ; preds = %490, %397
  %400 = load i64, i64* %29, align 16
  %401 = sitofp i64 %400 to double
  %402 = fmul double %401, 1.200000e+00
  %403 = load i64, i64* %30, align 8
  %404 = sitofp i64 %403 to double
  %405 = fcmp olt double %402, %404
  br i1 %405, label %204, label %209

406:                                              ; preds = %127
  %407 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  %408 = load i32, i32* %407, align 8
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %409
  store i32 1, i32* %410, align 4
  br label %411

411:                                              ; preds = %406, %127
  %412 = load i64, i64* %38, align 8
  %413 = sitofp i64 %412 to double
  %414 = fcmp olt double %471, %413
  br i1 %414, label %415, label %420

415:                                              ; preds = %411
  %416 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  %417 = load i32, i32* %416, align 4
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %418
  store i32 1, i32* %419, align 4
  br label %420

420:                                              ; preds = %415, %411
  %421 = load i32, i32* %468, align 16
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds [4 x i32], [4 x i32]* %23, i64 0, i64 %422
  %424 = load i32, i32* %423, align 4
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %131, label %339

426:                                              ; preds = %117
  %427 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  %428 = load i64, i64* %427, align 8
  %429 = icmp sgt i64 %428, %118
  br i1 %429, label %430, label %444

430:                                              ; preds = %426, %117
  %431 = phi i64 [ 0, %117 ], [ 1, %426 ]
  %432 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 %431
  %433 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  %434 = load i32, i32* %433, align 8
  %435 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  %436 = load i64, i64* %435, align 8
  %437 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 2
  store i64 %436, i64* %437, align 16
  %438 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  %439 = load i32, i32* %438, align 4
  %440 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  store i32 %439, i32* %440, align 8
  %441 = icmp eq i64 %431, 1
  br i1 %441, label %442, label %520

442:                                              ; preds = %520, %430
  store i64 %118, i64* %432, align 8
  %443 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 %431
  store i32 %434, i32* %443, align 4
  br label %444

444:                                              ; preds = %426, %442
  %445 = load i64, i64* %38, align 8
  %446 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %447 = load i64, i64* %446, align 16
  %448 = icmp sgt i64 %447, %445
  br i1 %448, label %453, label %449

449:                                              ; preds = %444
  %450 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  %451 = load i64, i64* %450, align 8
  %452 = icmp sgt i64 %451, %445
  br i1 %452, label %453, label %516

453:                                              ; preds = %516, %449, %444
  %454 = phi i64 [ 0, %444 ], [ 1, %449 ], [ 2, %516 ]
  %455 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 %454
  %456 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  %457 = load i32, i32* %456, align 4
  %458 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 2
  %459 = load i64, i64* %458, align 16
  %460 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 3
  store i64 %459, i64* %460, align 8
  %461 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  %462 = load i32, i32* %461, align 8
  %463 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 3
  store i32 %462, i32* %463, align 4
  %464 = icmp ult i64 %454, 2
  br i1 %464, label %501, label %465

465:                                              ; preds = %453, %501, %509
  store i64 %445, i64* %455, align 8
  %466 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 %454
  store i32 %457, i32* %466, align 4
  br label %467

467:                                              ; preds = %516, %465
  %468 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  %469 = load i64, i64* %35, align 16
  %470 = sitofp i64 %469 to double
  %471 = fmul double %470, 1.200000e+00
  %472 = load i64, i64* %36, align 8
  %473 = sitofp i64 %472 to double
  %474 = fcmp olt double %471, %473
  br i1 %474, label %122, label %127

475:                                              ; preds = %385
  %476 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  %477 = load i64, i64* %476, align 8
  %478 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 2
  store i64 %477, i64* %478, align 16
  %479 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  %480 = load i32, i32* %479, align 4
  %481 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 2
  store i32 %480, i32* %481, align 8
  %482 = icmp eq i64 %386, 0
  br i1 %482, label %483, label %397

483:                                              ; preds = %475
  %484 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %485 = load i64, i64* %484, align 16
  %486 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  store i64 %485, i64* %486, align 8
  %487 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 0
  %488 = load i32, i32* %487, align 16
  %489 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %488, i32* %489, align 4
  br label %397

490:                                              ; preds = %381
  %491 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 2
  %492 = load i64, i64* %491, align 16
  %493 = icmp sgt i64 %492, %377
  br i1 %493, label %385, label %399

494:                                              ; preds = %362
  %495 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 0
  %496 = load i64, i64* %495, align 16
  %497 = getelementptr inbounds [4 x i64], [4 x i64]* %18, i64 0, i64 1
  store i64 %496, i64* %497, align 8
  %498 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 0
  %499 = load i32, i32* %498, align 16
  %500 = getelementptr inbounds [4 x i32], [4 x i32]* %20, i64 0, i64 1
  store i32 %499, i32* %500, align 4
  br label %374

501:                                              ; preds = %453
  %502 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  %503 = load i64, i64* %502, align 8
  %504 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 2
  store i64 %503, i64* %504, align 16
  %505 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  %506 = load i32, i32* %505, align 4
  %507 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 2
  store i32 %506, i32* %507, align 8
  %508 = icmp eq i64 %454, 0
  br i1 %508, label %509, label %465

509:                                              ; preds = %501
  %510 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %511 = load i64, i64* %510, align 16
  %512 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  store i64 %511, i64* %512, align 8
  %513 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  %514 = load i32, i32* %513, align 16
  %515 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %514, i32* %515, align 4
  br label %465

516:                                              ; preds = %449
  %517 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 2
  %518 = load i64, i64* %517, align 16
  %519 = icmp sgt i64 %518, %445
  br i1 %519, label %453, label %467

520:                                              ; preds = %430
  %521 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 0
  %522 = load i64, i64* %521, align 16
  %523 = getelementptr inbounds [4 x i64], [4 x i64]* %19, i64 0, i64 1
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 0
  %525 = load i32, i32* %524, align 16
  %526 = getelementptr inbounds [4 x i32], [4 x i32]* %21, i64 0, i64 1
  store i32 %525, i32* %526, align 4
  br label %442
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @av1_setup_xform(%struct.AV1Common*, %struct.macroblock*, i8 zeroext, i8 zeroext, %struct.txfm_param*) local_unnamed_addr #2

declare void @av1_setup_quant(i8 zeroext, i32, i32, i32, %struct.QUANT_PARAM*) local_unnamed_addr #2

declare void @av1_xform_quant(%struct.macroblock*, i32, i32, i32, i32, i8 zeroext, %struct.txfm_param*, %struct.QUANT_PARAM*) local_unnamed_addr #2

declare i32 @av1_cost_coeffs_txb_laplacian(%struct.macroblock*, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @prune_txk_type(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, i32, i32, i8 zeroext, i32* nocapture, i16 zeroext, i32, %struct.txb_ctx*, i32) local_unnamed_addr #0 {
  %14 = alloca i64, align 8
  %15 = alloca [16 x i64], align 16
  %16 = alloca %struct.txfm_param, align 4
  %17 = alloca %struct.QUANT_PARAM, align 8
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %19 = bitcast [16 x i64]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 128, i1 false)
  %20 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %16, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 -86, i64 24, i1 false)
  %21 = bitcast %struct.QUANT_PARAM* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 40, i1 false)
  call void @av1_setup_xform(%struct.AV1Common* %18, %struct.macroblock* %1, i8 zeroext %4, i8 zeroext 0, %struct.txfm_param* nonnull %16) #6
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 4
  %23 = load i32, i32* %22, align 4
  call void @av1_setup_quant(i8 zeroext %4, i32 1, i32 1, i32 %23, %struct.QUANT_PARAM* nonnull %17) #6
  %24 = zext i16 %9 to i32
  %25 = sext i32 %2 to i64
  %26 = zext i8 %4 to i64
  %27 = getelementptr inbounds [20 x i32], [20 x i32]* @tx_size_2d, i64 0, i64 %26
  %28 = bitcast i64* %14 to i8*
  %29 = shl i32 %3, 4
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %25, i32 3
  %31 = sext i32 %29 to i64
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %25, i32 1
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %36

34:                                               ; preds = %86
  %35 = icmp eq i32 %87, 0
  br i1 %35, label %164, label %91

36:                                               ; preds = %86, %13
  %37 = phi i32 [ 0, %13 ], [ %89, %86 ]
  %38 = phi i32 [ 15, %13 ], [ %88, %86 ]
  %39 = phi i32 [ 0, %13 ], [ %87, %86 ]
  %40 = shl i32 1, %37
  %41 = and i32 %40, %24
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %36
  %44 = sext i32 %38 to i64
  %45 = getelementptr inbounds i32, i32* %8, i64 %44
  store i32 %37, i32* %45, align 4
  %46 = add nsw i32 %38, -1
  br label %86

47:                                               ; preds = %36
  %48 = trunc i32 %37 to i8
  store i8 %48, i8* %20, align 4
  call void @av1_xform_quant(%struct.macroblock* %1, i32 %2, i32 %3, i32 %5, i32 %6, i8 zeroext %7, %struct.txfm_param* nonnull %16, %struct.QUANT_PARAM* nonnull %17) #6
  %49 = call i32 @av1_cost_coeffs_txb_laplacian(%struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %48, %struct.txb_ctx* %11, i32 %12, i32 0) #6
  switch i8 %4, label %51 [
    i8 4, label %54
    i8 12, label %54
    i8 11, label %54
    i8 17, label %50
    i8 18, label %50
  ]

50:                                               ; preds = %47, %47
  br label %54

51:                                               ; preds = %47
  %52 = load i32, i32* %27, align 4
  %53 = sext i32 %52 to i64
  br label %54

54:                                               ; preds = %47, %47, %47, %50, %51
  %55 = phi i64 [ 512, %50 ], [ %53, %51 ], [ 1024, %47 ], [ 1024, %47 ], [ 1024, %47 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #6
  store i64 -6148914691236517206, i64* %14, align 8
  %56 = call i32 @av1_get_tx_scale(i8 zeroext %4) #6
  %57 = shl i32 %56, 1
  %58 = sub i32 2, %57
  %59 = load i32*, i32** %30, align 8
  %60 = getelementptr inbounds i32, i32* %59, i64 %31
  %61 = load i32*, i32** %32, align 8
  %62 = getelementptr inbounds i32, i32* %61, i64 %31
  %63 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @av1_block_error, align 8
  %64 = call i64 %63(i32* %60, i32* %62, i64 %55, i64* nonnull %14) #6
  %65 = icmp slt i32 %58, 0
  %66 = add i32 %57, -2
  %67 = zext i32 %66 to i64
  %68 = shl i64 %64, %67
  %69 = zext i32 %58 to i64
  %70 = ashr i64 %64, %69
  %71 = select i1 %65, i64 %68, i64 %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #6
  %72 = sext i32 %39 to i64
  %73 = getelementptr inbounds i32, i32* %8, i64 %72
  store i32 %37, i32* %73, align 4
  %74 = sext i32 %49 to i64
  %75 = load i32, i32* %33, align 8
  %76 = sext i32 %75 to i64
  %77 = mul nsw i64 %76, %74
  %78 = add nsw i64 %77, 256
  %79 = ashr i64 %78, 9
  %80 = shl nsw i64 %71, 7
  %81 = add nsw i64 %79, %80
  %82 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %72
  %83 = icmp eq i64 %81, 0
  %84 = select i1 %83, i64 1, i64 %81
  store i64 %84, i64* %82, align 8
  %85 = add nsw i32 %39, 1
  br label %86

86:                                               ; preds = %54, %43
  %87 = phi i32 [ %85, %54 ], [ %39, %43 ]
  %88 = phi i32 [ %38, %54 ], [ %46, %43 ]
  %89 = add nuw nsw i32 %37, 1
  %90 = icmp eq i32 %89, 16
  br i1 %90, label %34, label %36

91:                                               ; preds = %34
  %92 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 0
  %93 = icmp sgt i32 %87, 1
  br i1 %93, label %99, label %94

94:                                               ; preds = %91
  %95 = load i32, i32* %8, align 4
  %96 = shl i32 1, %95
  %97 = trunc i32 %96 to i16
  %98 = xor i16 %97, -1
  br label %164

99:                                               ; preds = %91
  %100 = zext i32 %87 to i64
  br label %101

101:                                              ; preds = %134, %99
  %102 = phi i64 [ 1, %99 ], [ %135, %134 ]
  %103 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %102
  %104 = load i64, i64* %103, align 8
  br label %105

105:                                              ; preds = %131, %101
  %106 = phi i64 [ 0, %101 ], [ %132, %131 ]
  %107 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %106
  %108 = load i64, i64* %107, align 8
  %109 = icmp sgt i64 %108, %104
  br i1 %109, label %110, label %131

110:                                              ; preds = %105
  %111 = and i64 %106, 4294967295
  %112 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %111
  %113 = getelementptr inbounds i32, i32* %8, i64 %102
  %114 = load i32, i32* %113, align 4
  %115 = icmp ugt i64 %102, %111
  br i1 %115, label %116, label %129

116:                                              ; preds = %110
  %117 = shl i64 %106, 32
  %118 = ashr exact i64 %117, 32
  br label %119

119:                                              ; preds = %119, %116
  %120 = phi i64 [ %102, %116 ], [ %121, %119 ]
  %121 = add nsw i64 %120, -1
  %122 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %121
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %120
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32, i32* %8, i64 %121
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds i32, i32* %8, i64 %120
  store i32 %126, i32* %127, align 4
  %128 = icmp sgt i64 %121, %118
  br i1 %128, label %119, label %129

129:                                              ; preds = %119, %110
  store i64 %104, i64* %112, align 8
  %130 = getelementptr inbounds i32, i32* %8, i64 %111
  store i32 %114, i32* %130, align 4
  br label %134

131:                                              ; preds = %105
  %132 = add nuw nsw i64 %106, 1
  %133 = icmp eq i64 %132, %102
  br i1 %133, label %134, label %105

134:                                              ; preds = %131, %129
  %135 = add nuw nsw i64 %102, 1
  %136 = icmp eq i64 %135, %100
  br i1 %136, label %137, label %101

137:                                              ; preds = %134
  %138 = load i32, i32* %8, align 4
  %139 = shl i32 1, %138
  %140 = trunc i32 %139 to i16
  %141 = xor i16 %140, -1
  br i1 %93, label %142, label %164

142:                                              ; preds = %137
  %143 = load i64, i64* %92, align 16
  %144 = sext i32 %10 to i64
  %145 = zext i32 %87 to i64
  br label %146

146:                                              ; preds = %155, %142
  %147 = phi i64 [ 1, %142 ], [ %162, %155 ]
  %148 = phi i16 [ %141, %142 ], [ %161, %155 ]
  %149 = getelementptr inbounds [16 x i64], [16 x i64]* %15, i64 0, i64 %147
  %150 = load i64, i64* %149, align 8
  %151 = sub nsw i64 %150, %143
  %152 = mul nsw i64 %151, 1000
  %153 = sdiv i64 %152, %143
  %154 = icmp slt i64 %153, %144
  br i1 %154, label %155, label %164

155:                                              ; preds = %146
  %156 = getelementptr inbounds i32, i32* %8, i64 %147
  %157 = load i32, i32* %156, align 4
  %158 = shl i32 1, %157
  %159 = trunc i32 %158 to i16
  %160 = xor i16 %159, -1
  %161 = and i16 %148, %160
  %162 = add nuw nsw i64 %147, 1
  %163 = icmp eq i64 %162, %145
  br i1 %163, label %164, label %146

164:                                              ; preds = %146, %155, %94, %137, %34
  %165 = phi i16 [ -1, %34 ], [ %141, %137 ], [ %98, %94 ], [ %148, %146 ], [ %161, %155 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %19) #6
  ret i16 %165
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @av1_estimate_txfm_yrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS* nocapture, i64, i8 zeroext, i8 zeroext) local_unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = alloca %struct.rdcost_block_args, align 8
  %9 = alloca %struct.txb_ctx, align 4
  %10 = alloca %struct.txfm_param, align 4
  %11 = alloca %struct.QUANT_PARAM, align 8
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %13 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %12, align 8
  %14 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %13, align 8
  %15 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 28
  %16 = load i16, i16* %15, align 1
  %17 = trunc i16 %16 to i8
  %18 = icmp sgt i8 %17, -1
  br i1 %18, label %19, label %24

19:                                               ; preds = %6
  %20 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 6, i64 0
  %21 = load i8, i8* %20, align 8
  %22 = icmp sgt i8 %21, 0
  %23 = zext i1 %22 to i32
  br label %24

24:                                               ; preds = %6, %19
  %25 = phi i32 [ 1, %6 ], [ %23, %19 ]
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  %27 = load i8, i8* %26, align 4
  %28 = icmp eq i8 %27, 2
  br i1 %28, label %29, label %86

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 0
  %31 = load i8, i8* %30, align 8
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %86, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 27
  %35 = load i8*, i8** %34, align 16
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 28
  %37 = load i8*, i8** %36, align 8
  %38 = zext i8 %5 to i64
  %39 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %38
  %42 = load i32, i32* %41, align 4
  %43 = load i8, i8* %35, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %40, 255
  %46 = icmp ugt i32 %45, %44
  %47 = zext i1 %46 to i64
  %48 = load i8, i8* %37, align 1
  %49 = zext i8 %48 to i32
  %50 = and i32 %42, 255
  %51 = icmp ugt i32 %50, %49
  %52 = zext i1 %51 to i64
  %53 = icmp eq i8 %5, 0
  br i1 %53, label %82, label %54

54:                                               ; preds = %33
  %55 = zext i8 %31 to i64
  %56 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %55
  %59 = load i8, i8* %58, align 1
  %60 = icmp ugt i8 %57, %59
  %61 = select i1 %60, i8 %57, i8 %59
  switch i8 %61, label %78 [
    i8 -128, label %65
    i8 64, label %65
    i8 32, label %62
    i8 16, label %63
    i8 8, label %64
  ]

62:                                               ; preds = %54
  br label %65

63:                                               ; preds = %54
  br label %65

64:                                               ; preds = %54
  br label %65

65:                                               ; preds = %64, %63, %62, %54, %54
  %66 = phi i8 [ 4, %54 ], [ 4, %54 ], [ 3, %62 ], [ 2, %63 ], [ 1, %64 ]
  %67 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %38
  %68 = load i8, i8* %67, align 1
  %69 = icmp ne i8 %68, %66
  %70 = icmp ne i8 %66, 1
  %71 = and i1 %70, %69
  %72 = zext i1 %71 to i64
  %73 = shl nuw nsw i8 %66, 1
  %74 = zext i8 %73 to i64
  %75 = sub nuw nsw i64 8, %74
  %76 = or i64 %75, %72
  %77 = mul nsw i64 %76, 3
  br label %78

78:                                               ; preds = %65, %54
  %79 = phi i64 [ %77, %65 ], [ 63, %54 ]
  %80 = add nuw nsw i64 %52, %47
  %81 = add nsw i64 %80, %79
  br label %82

82:                                               ; preds = %33, %78
  %83 = phi i64 [ %81, %78 ], [ 0, %33 ]
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 40, i64 %83, i64 0
  %85 = load i32, i32* %84, align 4
  br label %86

86:                                               ; preds = %29, %24, %82
  %87 = phi i32 [ %85, %82 ], [ 0, %29 ], [ 0, %24 ]
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %89 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %88, align 16
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %91 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %90, align 8
  %92 = icmp eq %struct.MB_MODE_INFO* %89, null
  br i1 %92, label %97, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %89, i64 0, i32 23
  %95 = load i8, i8* %94, align 8
  %96 = sext i8 %95 to i64
  br label %97

97:                                               ; preds = %93, %86
  %98 = phi i64 [ %96, %93 ], [ 0, %86 ]
  %99 = icmp eq %struct.MB_MODE_INFO* %91, null
  br i1 %99, label %104, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %91, i64 0, i32 23
  %102 = load i8, i8* %101, align 8
  %103 = sext i8 %102 to i64
  br label %104

104:                                              ; preds = %97, %100
  %105 = phi i64 [ %103, %100 ], [ 0, %97 ]
  %106 = add nsw i64 %105, %98
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %106, i64 0
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %106, i64 1
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %113 = load i32, i32* %112, align 8
  %114 = sext i32 %113 to i64
  %115 = mul nsw i64 %114, %111
  %116 = add nsw i64 %115, 256
  %117 = ashr i64 %116, 9
  %118 = add i32 %108, %87
  %119 = sext i32 %118 to i64
  %120 = mul nsw i64 %114, %119
  %121 = add nsw i64 %120, 256
  %122 = ashr i64 %121, 9
  %123 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %14, i64 0, i32 24
  store i8 %5, i8* %123, align 1
  %124 = zext i8 %5 to i64
  %125 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %124
  %128 = load i32, i32* %127, align 4
  %129 = and i32 %126, 255
  %130 = and i32 %128, 255
  %131 = mul nuw nsw i32 %130, %129
  %132 = zext i8 %4 to i64
  %133 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %137 = load i32, i32* %136, align 8
  %138 = icmp slt i32 %137, 0
  br i1 %138, label %139, label %145

139:                                              ; preds = %104
  %140 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %141 = load i32, i32* %140, align 4
  %142 = add nsw i32 %141, 3
  %143 = ashr i32 %137, %142
  %144 = add nsw i32 %143, %135
  br label %145

145:                                              ; preds = %104, %139
  %146 = phi i32 [ %144, %139 ], [ %135, %104 ]
  %147 = ashr i32 %146, 2
  %148 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %132
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %152 = load i32, i32* %151, align 16
  %153 = icmp slt i32 %152, 0
  br i1 %153, label %154, label %160

154:                                              ; preds = %145
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %156 = load i32, i32* %155, align 8
  %157 = add nsw i32 %156, 3
  %158 = ashr i32 %152, %157
  %159 = add nsw i32 %158, %150
  br label %160

160:                                              ; preds = %145, %154
  %161 = phi i32 [ %159, %154 ], [ %150, %145 ]
  %162 = ashr i32 %161, 2
  %163 = bitcast %struct.rdcost_block_args* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %163) #6
  %164 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 2, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 0, i64 136, i1 false)
  %165 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 1
  store %struct.macroblock* %1, %struct.macroblock** %165, align 8
  %166 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 0
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %166, align 8
  %167 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 6
  store i64 %3, i64* %167, align 8
  %168 = icmp slt i64 %122, %117
  %169 = select i1 %168, i64 %122, i64 %117
  %170 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 5
  store i64 %169, i64* %170, align 8
  %171 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4
  %172 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %171, i64 0, i32 0
  store i32 0, i32* %172, align 8
  %173 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4, i32 1
  %174 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4, i32 4
  %175 = bitcast i64* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %174, align 8
  %176 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4, i32 5
  store i32 0, i32* %176, align 4
  %177 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0
  %178 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 2, i64 0
  %179 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 3, i64 0
  call void @av1_get_entropy_contexts(i8 zeroext %4, %struct.macroblockd_plane* %177, i8* %178, i8* %179) #6
  %180 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 8
  %181 = icmp sgt i32 %161, 3
  br i1 %181, label %182, label %241

182:                                              ; preds = %160
  %183 = icmp sgt i32 %146, 3
  %184 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 7
  %185 = bitcast %struct.txb_ctx* %9 to i8*
  %186 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %9, i64 0, i32 0
  %187 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %9, i64 0, i32 1
  %188 = sext i32 %126 to i64
  %189 = sext i32 %128 to i64
  %190 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %124
  %191 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %10, i64 0, i32 0
  %192 = bitcast %struct.QUANT_PARAM* %11 to i8*
  %193 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %194 = getelementptr inbounds [20 x i32], [20 x i32]* @tx_size_2d, i64 0, i64 %124
  %195 = bitcast i64* %7 to i8*
  %196 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 3
  %197 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 1
  %198 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %199 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4, i32 3
  %200 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %201 = and i32 %126, 255
  %202 = zext i32 %201 to i64
  %203 = and i32 %128, 255
  %204 = zext i32 %203 to i64
  %205 = icmp sgt i64 %189, 1
  %206 = select i1 %205, i64 %189, i64 1
  %207 = icmp sgt i64 %188, 1
  %208 = select i1 %207, i64 %188, i64 1
  %209 = and i64 %208, 9223372036854775800
  %210 = add nsw i64 %209, -8
  %211 = lshr exact i64 %210, 3
  %212 = add nuw nsw i64 %211, 1
  %213 = and i64 %206, 9223372036854775800
  %214 = add nsw i64 %213, -8
  %215 = lshr exact i64 %214, 3
  %216 = add nuw nsw i64 %215, 1
  %217 = icmp ult i64 %208, 8
  %218 = and i64 %208, 9223372036854775800
  %219 = and i64 %212, 1
  %220 = icmp eq i64 %210, 0
  %221 = sub nuw nsw i64 %212, %219
  %222 = icmp eq i64 %219, 0
  %223 = icmp eq i64 %208, %218
  %224 = icmp ult i64 %206, 8
  %225 = and i64 %206, 9223372036854775800
  %226 = and i64 %216, 1
  %227 = icmp eq i64 %214, 0
  %228 = sub nuw nsw i64 %216, %226
  %229 = icmp eq i64 %226, 0
  %230 = icmp eq i64 %206, %225
  %231 = bitcast i64* %173 to <2 x i64>*
  br label %232

232:                                              ; preds = %182, %526
  %233 = phi i64 [ 0, %182 ], [ %528, %526 ]
  %234 = phi i32 [ 0, %182 ], [ %527, %526 ]
  %235 = load i32, i32* %180, align 4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %531

237:                                              ; preds = %232
  br i1 %183, label %238, label %526

238:                                              ; preds = %237
  %239 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 3, i64 %233
  %240 = trunc i64 %233 to i32
  br label %244

241:                                              ; preds = %526, %160
  %242 = load i32, i32* %180, align 4
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %534, label %531

244:                                              ; preds = %519, %238
  %245 = phi i64 [ 0, %238 ], [ %522, %519 ]
  %246 = phi i32 [ %234, %238 ], [ %520, %519 ]
  %247 = load i32, i32* %184, align 8
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %250, label %249

249:                                              ; preds = %244
  store i32 1, i32* %180, align 4
  br label %526

250:                                              ; preds = %244
  %251 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 2, i64 %245
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #6
  store i32 -1431655766, i32* %186, align 4
  store i32 -1431655766, i32* %187, align 4
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ %263, %252 ], [ 0, %250 ]
  %254 = phi i32 [ %262, %252 ], [ 0, %250 ]
  %255 = getelementptr inbounds i8, i8* %251, i64 %253
  %256 = load i8, i8* %255, align 1
  %257 = lshr i8 %256, 3
  %258 = zext i8 %257 to i64
  %259 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = sext i8 %260 to i32
  %262 = add nsw i32 %254, %261
  %263 = add nuw nsw i64 %253, 1
  %264 = icmp slt i64 %263, %188
  br i1 %264, label %252, label %265

265:                                              ; preds = %252, %265
  %266 = phi i64 [ %276, %265 ], [ 0, %252 ]
  %267 = phi i32 [ %275, %265 ], [ %262, %252 ]
  %268 = getelementptr inbounds i8, i8* %239, i64 %266
  %269 = load i8, i8* %268, align 1
  %270 = lshr i8 %269, 3
  %271 = zext i8 %270 to i64
  %272 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = sext i8 %273 to i32
  %275 = add nsw i32 %267, %274
  %276 = add nuw nsw i64 %266, 1
  %277 = icmp slt i64 %276, %189
  br i1 %277, label %265, label %278

278:                                              ; preds = %265
  %279 = add nsw i32 %275, 32
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds [65 x i8], [65 x i8]* @get_txb_ctx.dc_sign_contexts, i64 0, i64 %280
  %282 = load i8, i8* %281, align 1
  %283 = sext i8 %282 to i32
  store i32 %283, i32* %187, align 4
  %284 = load i8, i8* %190, align 1
  %285 = icmp eq i8 %284, %4
  br i1 %285, label %438, label %286

286:                                              ; preds = %278
  br i1 %217, label %343, label %287

287:                                              ; preds = %286
  br i1 %220, label %317, label %288

288:                                              ; preds = %287, %288
  %289 = phi i64 [ %314, %288 ], [ 0, %287 ]
  %290 = phi <4 x i32> [ %312, %288 ], [ zeroinitializer, %287 ]
  %291 = phi <4 x i32> [ %313, %288 ], [ zeroinitializer, %287 ]
  %292 = phi i64 [ %315, %288 ], [ %221, %287 ]
  %293 = getelementptr inbounds i8, i8* %251, i64 %289
  %294 = bitcast i8* %293 to <4 x i8>*
  %295 = load <4 x i8>, <4 x i8>* %294, align 1
  %296 = getelementptr inbounds i8, i8* %293, i64 4
  %297 = bitcast i8* %296 to <4 x i8>*
  %298 = load <4 x i8>, <4 x i8>* %297, align 1
  %299 = sext <4 x i8> %295 to <4 x i32>
  %300 = sext <4 x i8> %298 to <4 x i32>
  %301 = or <4 x i32> %290, %299
  %302 = or <4 x i32> %291, %300
  %303 = or i64 %289, 8
  %304 = getelementptr inbounds i8, i8* %251, i64 %303
  %305 = bitcast i8* %304 to <4 x i8>*
  %306 = load <4 x i8>, <4 x i8>* %305, align 1
  %307 = getelementptr inbounds i8, i8* %304, i64 4
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = sext <4 x i8> %306 to <4 x i32>
  %311 = sext <4 x i8> %309 to <4 x i32>
  %312 = or <4 x i32> %301, %310
  %313 = or <4 x i32> %302, %311
  %314 = add i64 %289, 16
  %315 = add i64 %292, -2
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %288, !llvm.loop !2

317:                                              ; preds = %288, %287
  %318 = phi <4 x i32> [ undef, %287 ], [ %312, %288 ]
  %319 = phi <4 x i32> [ undef, %287 ], [ %313, %288 ]
  %320 = phi i64 [ 0, %287 ], [ %314, %288 ]
  %321 = phi <4 x i32> [ zeroinitializer, %287 ], [ %312, %288 ]
  %322 = phi <4 x i32> [ zeroinitializer, %287 ], [ %313, %288 ]
  br i1 %222, label %334, label %323

323:                                              ; preds = %317
  %324 = getelementptr inbounds i8, i8* %251, i64 %320
  %325 = getelementptr inbounds i8, i8* %324, i64 4
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = sext <4 x i8> %327 to <4 x i32>
  %329 = or <4 x i32> %322, %328
  %330 = bitcast i8* %324 to <4 x i8>*
  %331 = load <4 x i8>, <4 x i8>* %330, align 1
  %332 = sext <4 x i8> %331 to <4 x i32>
  %333 = or <4 x i32> %321, %332
  br label %334

334:                                              ; preds = %317, %323
  %335 = phi <4 x i32> [ %318, %317 ], [ %333, %323 ]
  %336 = phi <4 x i32> [ %319, %317 ], [ %329, %323 ]
  %337 = or <4 x i32> %336, %335
  %338 = shufflevector <4 x i32> %337, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %339 = or <4 x i32> %337, %338
  %340 = shufflevector <4 x i32> %339, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %341 = or <4 x i32> %339, %340
  %342 = extractelement <4 x i32> %341, i32 0
  br i1 %223, label %355, label %343

343:                                              ; preds = %334, %286
  %344 = phi i64 [ 0, %286 ], [ %218, %334 ]
  %345 = phi i32 [ 0, %286 ], [ %342, %334 ]
  br label %346

346:                                              ; preds = %343, %346
  %347 = phi i64 [ %353, %346 ], [ %344, %343 ]
  %348 = phi i32 [ %352, %346 ], [ %345, %343 ]
  %349 = getelementptr inbounds i8, i8* %251, i64 %347
  %350 = load i8, i8* %349, align 1
  %351 = sext i8 %350 to i32
  %352 = or i32 %348, %351
  %353 = add nuw nsw i64 %347, 1
  %354 = icmp slt i64 %353, %188
  br i1 %354, label %346, label %355, !llvm.loop !4

355:                                              ; preds = %346, %334
  %356 = phi i32 [ %342, %334 ], [ %352, %346 ]
  %357 = and i32 %356, 7
  br i1 %224, label %414, label %358

358:                                              ; preds = %355
  br i1 %227, label %388, label %359

359:                                              ; preds = %358, %359
  %360 = phi i64 [ %385, %359 ], [ 0, %358 ]
  %361 = phi <4 x i32> [ %383, %359 ], [ zeroinitializer, %358 ]
  %362 = phi <4 x i32> [ %384, %359 ], [ zeroinitializer, %358 ]
  %363 = phi i64 [ %386, %359 ], [ %228, %358 ]
  %364 = getelementptr inbounds i8, i8* %239, i64 %360
  %365 = bitcast i8* %364 to <4 x i8>*
  %366 = load <4 x i8>, <4 x i8>* %365, align 1
  %367 = getelementptr inbounds i8, i8* %364, i64 4
  %368 = bitcast i8* %367 to <4 x i8>*
  %369 = load <4 x i8>, <4 x i8>* %368, align 1
  %370 = sext <4 x i8> %366 to <4 x i32>
  %371 = sext <4 x i8> %369 to <4 x i32>
  %372 = or <4 x i32> %361, %370
  %373 = or <4 x i32> %362, %371
  %374 = or i64 %360, 8
  %375 = getelementptr inbounds i8, i8* %239, i64 %374
  %376 = bitcast i8* %375 to <4 x i8>*
  %377 = load <4 x i8>, <4 x i8>* %376, align 1
  %378 = getelementptr inbounds i8, i8* %375, i64 4
  %379 = bitcast i8* %378 to <4 x i8>*
  %380 = load <4 x i8>, <4 x i8>* %379, align 1
  %381 = sext <4 x i8> %377 to <4 x i32>
  %382 = sext <4 x i8> %380 to <4 x i32>
  %383 = or <4 x i32> %372, %381
  %384 = or <4 x i32> %373, %382
  %385 = add i64 %360, 16
  %386 = add i64 %363, -2
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %359, !llvm.loop !6

388:                                              ; preds = %359, %358
  %389 = phi <4 x i32> [ undef, %358 ], [ %383, %359 ]
  %390 = phi <4 x i32> [ undef, %358 ], [ %384, %359 ]
  %391 = phi i64 [ 0, %358 ], [ %385, %359 ]
  %392 = phi <4 x i32> [ zeroinitializer, %358 ], [ %383, %359 ]
  %393 = phi <4 x i32> [ zeroinitializer, %358 ], [ %384, %359 ]
  br i1 %229, label %405, label %394

394:                                              ; preds = %388
  %395 = getelementptr inbounds i8, i8* %239, i64 %391
  %396 = getelementptr inbounds i8, i8* %395, i64 4
  %397 = bitcast i8* %396 to <4 x i8>*
  %398 = load <4 x i8>, <4 x i8>* %397, align 1
  %399 = sext <4 x i8> %398 to <4 x i32>
  %400 = or <4 x i32> %393, %399
  %401 = bitcast i8* %395 to <4 x i8>*
  %402 = load <4 x i8>, <4 x i8>* %401, align 1
  %403 = sext <4 x i8> %402 to <4 x i32>
  %404 = or <4 x i32> %392, %403
  br label %405

405:                                              ; preds = %388, %394
  %406 = phi <4 x i32> [ %389, %388 ], [ %404, %394 ]
  %407 = phi <4 x i32> [ %390, %388 ], [ %400, %394 ]
  %408 = or <4 x i32> %407, %406
  %409 = shufflevector <4 x i32> %408, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %410 = or <4 x i32> %408, %409
  %411 = shufflevector <4 x i32> %410, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %412 = or <4 x i32> %410, %411
  %413 = extractelement <4 x i32> %412, i32 0
  br i1 %230, label %426, label %414

414:                                              ; preds = %405, %355
  %415 = phi i64 [ 0, %355 ], [ %225, %405 ]
  %416 = phi i32 [ 0, %355 ], [ %413, %405 ]
  br label %417

417:                                              ; preds = %414, %417
  %418 = phi i64 [ %424, %417 ], [ %415, %414 ]
  %419 = phi i32 [ %423, %417 ], [ %416, %414 ]
  %420 = getelementptr inbounds i8, i8* %239, i64 %418
  %421 = load i8, i8* %420, align 1
  %422 = sext i8 %421 to i32
  %423 = or i32 %419, %422
  %424 = add nuw nsw i64 %418, 1
  %425 = icmp slt i64 %424, %189
  br i1 %425, label %417, label %426, !llvm.loop !7

426:                                              ; preds = %417, %405
  %427 = phi i32 [ %413, %405 ], [ %423, %417 ]
  %428 = icmp ult i32 %357, 4
  %429 = select i1 %428, i32 %357, i32 4
  %430 = and i32 %427, 7
  %431 = icmp ult i32 %430, 4
  %432 = select i1 %431, i32 %430, i32 4
  %433 = zext i32 %429 to i64
  %434 = zext i32 %432 to i64
  %435 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %433, i64 %434
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i32
  br label %438

438:                                              ; preds = %278, %426
  %439 = phi i32 [ %437, %426 ], [ 0, %278 ]
  store i32 %439, i32* %186, align 4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %191, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %192) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %192, i8 -86, i64 40, i1 false)
  call void @av1_setup_xform(%struct.AV1Common* %193, %struct.macroblock* %1, i8 zeroext %5, i8 zeroext 0, %struct.txfm_param* nonnull %10) #6
  call void @av1_setup_quant(i8 zeroext %5, i32 0, i32 1, i32 0, %struct.QUANT_PARAM* nonnull %11) #6
  %440 = trunc i64 %245 to i32
  call void @av1_xform(%struct.macroblock* %1, i32 0, i32 %246, i32 %240, i32 %440, i8 zeroext %4, %struct.txfm_param* nonnull %10) #6
  call void @av1_quant(%struct.macroblock* %1, i32 0, i32 %246, %struct.txfm_param* nonnull %10, %struct.QUANT_PARAM* nonnull %11) #6
  %441 = load i8, i8* %191, align 4
  %442 = call i32 @av1_cost_coeffs_txb(%struct.macroblock* %1, i32 0, i32 %246, i8 zeroext %5, i8 zeroext %441, %struct.txb_ctx* nonnull %9, i32 0) #6
  switch i8 %5, label %444 [
    i8 4, label %447
    i8 12, label %447
    i8 11, label %447
    i8 17, label %443
    i8 18, label %443
  ]

443:                                              ; preds = %438, %438
  br label %447

444:                                              ; preds = %438
  %445 = load i32, i32* %194, align 4
  %446 = sext i32 %445 to i64
  br label %447

447:                                              ; preds = %438, %438, %438, %443, %444
  %448 = phi i64 [ 512, %443 ], [ %446, %444 ], [ 1024, %438 ], [ 1024, %438 ], [ 1024, %438 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %195) #6
  store i64 -6148914691236517206, i64* %7, align 8
  %449 = call i32 @av1_get_tx_scale(i8 zeroext %5) #6
  %450 = shl i32 %449, 1
  %451 = sub i32 2, %450
  %452 = shl i32 %246, 4
  %453 = load i32*, i32** %196, align 8
  %454 = sext i32 %452 to i64
  %455 = getelementptr inbounds i32, i32* %453, i64 %454
  %456 = load i32*, i32** %197, align 8
  %457 = getelementptr inbounds i32, i32* %456, i64 %454
  %458 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @av1_block_error, align 8
  %459 = call i64 %458(i32* %455, i32* %457, i64 %448, i64* nonnull %7) #6
  %460 = icmp slt i32 %451, 0
  %461 = add i32 %450, -2
  %462 = zext i32 %461 to i64
  %463 = shl i64 %459, %462
  %464 = zext i32 %451 to i64
  %465 = ashr i64 %459, %464
  %466 = select i1 %460, i64 %463, i64 %465
  %467 = load i64, i64* %7, align 8
  %468 = shl i64 %467, %462
  %469 = ashr i64 %467, %464
  %470 = select i1 %460, i64 %468, i64 %469
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %195) #6
  %471 = sext i32 %442 to i64
  %472 = load i32, i32* %112, align 8
  %473 = sext i32 %472 to i64
  %474 = mul nsw i64 %473, %471
  %475 = add nsw i64 %474, 256
  %476 = ashr i64 %475, 9
  %477 = shl nsw i64 %466, 7
  %478 = add nsw i64 %476, %477
  %479 = shl nsw i64 %470, 7
  %480 = load i16*, i16** %198, align 16
  %481 = sext i32 %246 to i64
  %482 = getelementptr inbounds i16, i16* %480, i64 %481
  %483 = load i16, i16* %482, align 2
  %484 = icmp eq i16 %483, 0
  %485 = zext i1 %484 to i32
  %486 = load i32, i32* %172, align 8
  %487 = icmp eq i32 %486, 2147483647
  %488 = icmp eq i32 %442, 2147483647
  %489 = or i1 %488, %487
  br i1 %489, label %490, label %491

490:                                              ; preds = %447
  store i32 2147483647, i32* %172, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %231, align 8
  store i64 9223372036854775807, i64* %199, align 8
  store i32 0, i32* %174, align 8
  store i32 0, i32* %176, align 4
  br label %507

491:                                              ; preds = %447
  %492 = sext i32 %486 to i64
  %493 = add nsw i64 %492, %471
  %494 = icmp slt i64 %493, 2147483647
  %495 = select i1 %494, i64 %493, i64 2147483647
  %496 = trunc i64 %495 to i32
  store i32 %496, i32* %172, align 8
  %497 = load i32, i32* %176, align 4
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %499, label %500

499:                                              ; preds = %491
  store i32 0, i32* %176, align 4
  br label %500

500:                                              ; preds = %499, %491
  %501 = load i64, i64* %173, align 8
  %502 = add nsw i64 %501, %466
  store i64 %502, i64* %173, align 8
  %503 = load i64, i64* %199, align 8
  %504 = add nsw i64 %503, %470
  store i64 %504, i64* %199, align 8
  %505 = load i32, i32* %174, align 8
  %506 = and i32 %505, %485
  store i32 %506, i32* %174, align 8
  br label %507

507:                                              ; preds = %490, %500
  %508 = icmp slt i64 %478, %479
  %509 = select i1 %508, i64 %478, i64 %479
  %510 = load i64, i64* %170, align 8
  %511 = add nsw i64 %510, %509
  store i64 %511, i64* %170, align 8
  %512 = icmp sgt i64 %511, %3
  br i1 %512, label %513, label %514

513:                                              ; preds = %507
  store i32 1, i32* %184, align 8
  br label %519

514:                                              ; preds = %507
  %515 = load i8*, i8** %200, align 8
  %516 = getelementptr inbounds i8, i8* %515, i64 %481
  %517 = load i8, i8* %516, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %251, i8 %517, i64 %188, i1 false) #6
  call void @llvm.memset.p0i8.i64(i8* align 1 %239, i8 %517, i64 %189, i1 false) #6
  %518 = add nsw i32 %246, %131
  br label %519

519:                                              ; preds = %513, %514
  %520 = phi i32 [ %246, %513 ], [ %518, %514 ]
  %521 = phi i1 [ false, %513 ], [ true, %514 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %192) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #6
  %522 = add i64 %245, %202
  %523 = trunc i64 %522 to i32
  %524 = icmp sgt i32 %147, %523
  %525 = and i1 %521, %524
  br i1 %525, label %244, label %526

526:                                              ; preds = %519, %237, %249
  %527 = phi i32 [ %246, %249 ], [ %234, %237 ], [ %520, %519 ]
  %528 = add i64 %233, %204
  %529 = trunc i64 %528 to i32
  %530 = icmp sgt i32 %162, %529
  br i1 %530, label %232, label %241

531:                                              ; preds = %232, %241
  store i32 2147483647, i32* %172, align 8
  %532 = bitcast i64* %173 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %532, align 8
  %533 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %8, i64 0, i32 4, i32 3
  store i64 9223372036854775807, i64* %533, align 8
  store i32 0, i32* %174, align 8
  store i32 0, i32* %176, align 4
  br label %534

534:                                              ; preds = %241, %531
  %535 = bitcast %struct.RD_STATS* %2 to i8*
  %536 = bitcast %struct.RD_STATS* %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %535, i8* align 8 %536, i64 40, i1 false)
  %537 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  %538 = load i32, i32* %537, align 8
  %539 = icmp eq i32 %538, 2147483647
  br i1 %539, label %591, label %540

540:                                              ; preds = %534
  %541 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  %542 = load i32, i32* %541, align 8
  %543 = icmp ne i32 %542, 0
  %544 = icmp ne i32 %25, 0
  %545 = and i1 %544, %543
  br i1 %545, label %546, label %556

546:                                              ; preds = %540
  %547 = load i32, i32* %112, align 8
  %548 = sext i32 %547 to i64
  %549 = mul nsw i64 %548, %111
  %550 = add nsw i64 %549, 256
  %551 = ashr i64 %550, 9
  %552 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  %553 = load i64, i64* %552, align 8
  %554 = shl i64 %553, 7
  %555 = add nsw i64 %551, %554
  br label %591

556:                                              ; preds = %540
  %557 = add i32 %118, %538
  %558 = sext i32 %557 to i64
  %559 = load i32, i32* %112, align 8
  %560 = sext i32 %559 to i64
  %561 = mul nsw i64 %560, %558
  %562 = add nsw i64 %561, 256
  %563 = ashr i64 %562, 9
  %564 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %565 = load i64, i64* %564, align 8
  %566 = shl i64 %565, 7
  %567 = add nsw i64 %563, %566
  %568 = add nsw i32 %538, %87
  store i32 %568, i32* %537, align 8
  %569 = icmp eq i32 %542, 0
  %570 = and i1 %544, %569
  br i1 %570, label %571, label %591

571:                                              ; preds = %556
  %572 = load i16, i16* %15, align 1
  %573 = and i16 %572, 7
  %574 = zext i16 %573 to i64
  %575 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %574
  %576 = load i32, i32* %575, align 4
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %578, label %591

578:                                              ; preds = %571
  %579 = load i32, i32* %112, align 8
  %580 = sext i32 %579 to i64
  %581 = mul nsw i64 %580, %111
  %582 = add nsw i64 %581, 256
  %583 = ashr i64 %582, 9
  %584 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  %585 = load i64, i64* %584, align 8
  %586 = shl nsw i64 %585, 7
  %587 = add nsw i64 %583, %586
  %588 = icmp sgt i64 %587, %567
  br i1 %588, label %591, label %589

589:                                              ; preds = %578
  store i32 0, i32* %537, align 8
  %590 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  store i64 %585, i64* %590, align 8
  store i32 1, i32* %541, align 8
  br label %591

591:                                              ; preds = %546, %556, %571, %578, %589, %534
  %592 = phi i64 [ 9223372036854775807, %534 ], [ %567, %571 ], [ %567, %556 ], [ %587, %589 ], [ %567, %578 ], [ %555, %546 ]
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %163) #6
  ret i64 %592
}

declare void @av1_get_entropy_contexts(i8 zeroext, %struct.macroblockd_plane*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @get_txb_ctx(i8 zeroext, i8 zeroext, i32, i8* readonly, i8* readonly, %struct.txb_ctx* nocapture) unnamed_addr #3 {
  %7 = zext i8 %1 to i64
  %8 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %7
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %9 to i64
  br label %13

13:                                               ; preds = %13, %6
  %14 = phi i64 [ %24, %13 ], [ 0, %6 ]
  %15 = phi i32 [ %23, %13 ], [ 0, %6 ]
  %16 = getelementptr inbounds i8, i8* %3, i64 %14
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %17, 3
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = add nsw i32 %15, %22
  %24 = add nuw nsw i64 %14, 1
  %25 = icmp slt i64 %24, %12
  br i1 %25, label %13, label %26

26:                                               ; preds = %13
  %27 = sext i32 %11 to i64
  br label %28

28:                                               ; preds = %26, %28
  %29 = phi i64 [ 0, %26 ], [ %39, %28 ]
  %30 = phi i32 [ %23, %26 ], [ %38, %28 ]
  %31 = getelementptr inbounds i8, i8* %4, i64 %29
  %32 = load i8, i8* %31, align 1
  %33 = lshr i8 %32, 3
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = add nsw i32 %30, %37
  %39 = add nuw nsw i64 %29, 1
  %40 = icmp slt i64 %39, %27
  br i1 %40, label %28, label %41

41:                                               ; preds = %28
  %42 = add nsw i32 %38, 32
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [65 x i8], [65 x i8]* @get_txb_ctx.dc_sign_contexts, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 1
  store i32 %46, i32* %47, align 4
  %48 = icmp eq i32 %2, 0
  br i1 %48, label %49, label %231

49:                                               ; preds = %41
  %50 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %7
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, %0
  br i1 %52, label %400, label %53

53:                                               ; preds = %49
  %54 = icmp sgt i64 %12, 1
  %55 = select i1 %54, i64 %12, i64 1
  %56 = icmp ult i64 %55, 8
  br i1 %56, label %123, label %57

57:                                               ; preds = %53
  %58 = and i64 %55, 9223372036854775800
  %59 = add nsw i64 %58, -8
  %60 = lshr exact i64 %59, 3
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 1
  %63 = icmp eq i64 %59, 0
  br i1 %63, label %95, label %64

64:                                               ; preds = %57
  %65 = sub nuw nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %92, %66 ]
  %68 = phi <4 x i32> [ zeroinitializer, %64 ], [ %90, %66 ]
  %69 = phi <4 x i32> [ zeroinitializer, %64 ], [ %91, %66 ]
  %70 = phi i64 [ %65, %64 ], [ %93, %66 ]
  %71 = getelementptr inbounds i8, i8* %3, i64 %67
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = getelementptr inbounds i8, i8* %71, i64 4
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = sext <4 x i8> %73 to <4 x i32>
  %78 = sext <4 x i8> %76 to <4 x i32>
  %79 = or <4 x i32> %68, %77
  %80 = or <4 x i32> %69, %78
  %81 = or i64 %67, 8
  %82 = getelementptr inbounds i8, i8* %3, i64 %81
  %83 = bitcast i8* %82 to <4 x i8>*
  %84 = load <4 x i8>, <4 x i8>* %83, align 1
  %85 = getelementptr inbounds i8, i8* %82, i64 4
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1
  %88 = sext <4 x i8> %84 to <4 x i32>
  %89 = sext <4 x i8> %87 to <4 x i32>
  %90 = or <4 x i32> %79, %88
  %91 = or <4 x i32> %80, %89
  %92 = add i64 %67, 16
  %93 = add i64 %70, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %66, !llvm.loop !8

95:                                               ; preds = %66, %57
  %96 = phi <4 x i32> [ undef, %57 ], [ %90, %66 ]
  %97 = phi <4 x i32> [ undef, %57 ], [ %91, %66 ]
  %98 = phi i64 [ 0, %57 ], [ %92, %66 ]
  %99 = phi <4 x i32> [ zeroinitializer, %57 ], [ %90, %66 ]
  %100 = phi <4 x i32> [ zeroinitializer, %57 ], [ %91, %66 ]
  %101 = icmp eq i64 %62, 0
  br i1 %101, label %113, label %102

102:                                              ; preds = %95
  %103 = getelementptr inbounds i8, i8* %3, i64 %98
  %104 = getelementptr inbounds i8, i8* %103, i64 4
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = sext <4 x i8> %106 to <4 x i32>
  %108 = or <4 x i32> %100, %107
  %109 = bitcast i8* %103 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1
  %111 = sext <4 x i8> %110 to <4 x i32>
  %112 = or <4 x i32> %99, %111
  br label %113

113:                                              ; preds = %95, %102
  %114 = phi <4 x i32> [ %96, %95 ], [ %112, %102 ]
  %115 = phi <4 x i32> [ %97, %95 ], [ %108, %102 ]
  %116 = or <4 x i32> %115, %114
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %118 = or <4 x i32> %116, %117
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %120 = or <4 x i32> %118, %119
  %121 = extractelement <4 x i32> %120, i32 0
  %122 = icmp eq i64 %55, %58
  br i1 %122, label %135, label %123

123:                                              ; preds = %113, %53
  %124 = phi i64 [ 0, %53 ], [ %58, %113 ]
  %125 = phi i32 [ 0, %53 ], [ %121, %113 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i64 [ %133, %126 ], [ %124, %123 ]
  %128 = phi i32 [ %132, %126 ], [ %125, %123 ]
  %129 = getelementptr inbounds i8, i8* %3, i64 %127
  %130 = load i8, i8* %129, align 1
  %131 = sext i8 %130 to i32
  %132 = or i32 %128, %131
  %133 = add nuw nsw i64 %127, 1
  %134 = icmp slt i64 %133, %12
  br i1 %134, label %126, label %135, !llvm.loop !9

135:                                              ; preds = %126, %113
  %136 = phi i32 [ %121, %113 ], [ %132, %126 ]
  %137 = and i32 %136, 7
  %138 = icmp ult i32 %137, 4
  %139 = icmp sgt i64 %27, 1
  %140 = select i1 %139, i64 %27, i64 1
  %141 = icmp ult i64 %140, 8
  br i1 %141, label %208, label %142

142:                                              ; preds = %135
  %143 = and i64 %140, 9223372036854775800
  %144 = add nsw i64 %143, -8
  %145 = lshr exact i64 %144, 3
  %146 = add nuw nsw i64 %145, 1
  %147 = and i64 %146, 1
  %148 = icmp eq i64 %144, 0
  br i1 %148, label %180, label %149

149:                                              ; preds = %142
  %150 = sub nuw nsw i64 %146, %147
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ 0, %149 ], [ %177, %151 ]
  %153 = phi <4 x i32> [ zeroinitializer, %149 ], [ %175, %151 ]
  %154 = phi <4 x i32> [ zeroinitializer, %149 ], [ %176, %151 ]
  %155 = phi i64 [ %150, %149 ], [ %178, %151 ]
  %156 = getelementptr inbounds i8, i8* %4, i64 %152
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = getelementptr inbounds i8, i8* %156, i64 4
  %160 = bitcast i8* %159 to <4 x i8>*
  %161 = load <4 x i8>, <4 x i8>* %160, align 1
  %162 = sext <4 x i8> %158 to <4 x i32>
  %163 = sext <4 x i8> %161 to <4 x i32>
  %164 = or <4 x i32> %153, %162
  %165 = or <4 x i32> %154, %163
  %166 = or i64 %152, 8
  %167 = getelementptr inbounds i8, i8* %4, i64 %166
  %168 = bitcast i8* %167 to <4 x i8>*
  %169 = load <4 x i8>, <4 x i8>* %168, align 1
  %170 = getelementptr inbounds i8, i8* %167, i64 4
  %171 = bitcast i8* %170 to <4 x i8>*
  %172 = load <4 x i8>, <4 x i8>* %171, align 1
  %173 = sext <4 x i8> %169 to <4 x i32>
  %174 = sext <4 x i8> %172 to <4 x i32>
  %175 = or <4 x i32> %164, %173
  %176 = or <4 x i32> %165, %174
  %177 = add i64 %152, 16
  %178 = add i64 %155, -2
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %151, !llvm.loop !10

180:                                              ; preds = %151, %142
  %181 = phi <4 x i32> [ undef, %142 ], [ %175, %151 ]
  %182 = phi <4 x i32> [ undef, %142 ], [ %176, %151 ]
  %183 = phi i64 [ 0, %142 ], [ %177, %151 ]
  %184 = phi <4 x i32> [ zeroinitializer, %142 ], [ %175, %151 ]
  %185 = phi <4 x i32> [ zeroinitializer, %142 ], [ %176, %151 ]
  %186 = icmp eq i64 %147, 0
  br i1 %186, label %198, label %187

187:                                              ; preds = %180
  %188 = getelementptr inbounds i8, i8* %4, i64 %183
  %189 = getelementptr inbounds i8, i8* %188, i64 4
  %190 = bitcast i8* %189 to <4 x i8>*
  %191 = load <4 x i8>, <4 x i8>* %190, align 1
  %192 = sext <4 x i8> %191 to <4 x i32>
  %193 = or <4 x i32> %185, %192
  %194 = bitcast i8* %188 to <4 x i8>*
  %195 = load <4 x i8>, <4 x i8>* %194, align 1
  %196 = sext <4 x i8> %195 to <4 x i32>
  %197 = or <4 x i32> %184, %196
  br label %198

198:                                              ; preds = %180, %187
  %199 = phi <4 x i32> [ %181, %180 ], [ %197, %187 ]
  %200 = phi <4 x i32> [ %182, %180 ], [ %193, %187 ]
  %201 = or <4 x i32> %200, %199
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %203 = or <4 x i32> %201, %202
  %204 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %205 = or <4 x i32> %203, %204
  %206 = extractelement <4 x i32> %205, i32 0
  %207 = icmp eq i64 %140, %143
  br i1 %207, label %220, label %208

208:                                              ; preds = %198, %135
  %209 = phi i64 [ 0, %135 ], [ %143, %198 ]
  %210 = phi i32 [ 0, %135 ], [ %206, %198 ]
  br label %211

211:                                              ; preds = %208, %211
  %212 = phi i64 [ %218, %211 ], [ %209, %208 ]
  %213 = phi i32 [ %217, %211 ], [ %210, %208 ]
  %214 = getelementptr inbounds i8, i8* %4, i64 %212
  %215 = load i8, i8* %214, align 1
  %216 = sext i8 %215 to i32
  %217 = or i32 %213, %216
  %218 = add nuw nsw i64 %212, 1
  %219 = icmp slt i64 %218, %27
  br i1 %219, label %211, label %220, !llvm.loop !11

220:                                              ; preds = %211, %198
  %221 = phi i32 [ %206, %198 ], [ %217, %211 ]
  %222 = select i1 %138, i32 %137, i32 4
  %223 = and i32 %221, 7
  %224 = icmp ult i32 %223, 4
  %225 = select i1 %224, i32 %223, i32 4
  %226 = zext i32 %222 to i64
  %227 = zext i32 %225 to i64
  %228 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %226, i64 %227
  %229 = load i8, i8* %228, align 1
  %230 = zext i8 %229 to i32
  br label %400

231:                                              ; preds = %41
  switch i8 %1, label %383 [
    i8 0, label %232
    i8 5, label %237
    i8 6, label %243
    i8 7, label %249
    i8 8, label %256
    i8 9, label %263
    i8 10, label %270
    i8 1, label %277
    i8 2, label %284
    i8 3, label %291
    i8 4, label %298
    i8 11, label %313
    i8 12, label %324
    i8 13, label %335
    i8 14, label %341
    i8 15, label %347
    i8 16, label %354
    i8 17, label %361
    i8 18, label %372
  ]

232:                                              ; preds = %231
  %233 = load i8, i8* %3, align 1
  %234 = icmp ne i8 %233, 0
  %235 = load i8, i8* %4, align 1
  %236 = icmp ne i8 %235, 0
  br label %383

237:                                              ; preds = %231
  %238 = load i8, i8* %3, align 1
  %239 = icmp ne i8 %238, 0
  %240 = bitcast i8* %4 to i16*
  %241 = load i16, i16* %240, align 2
  %242 = icmp ne i16 %241, 0
  br label %383

243:                                              ; preds = %231
  %244 = bitcast i8* %3 to i16*
  %245 = load i16, i16* %244, align 2
  %246 = icmp ne i16 %245, 0
  %247 = load i8, i8* %4, align 1
  %248 = icmp ne i8 %247, 0
  br label %383

249:                                              ; preds = %231
  %250 = bitcast i8* %3 to i16*
  %251 = load i16, i16* %250, align 2
  %252 = icmp ne i16 %251, 0
  %253 = bitcast i8* %4 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = icmp ne i32 %254, 0
  br label %383

256:                                              ; preds = %231
  %257 = bitcast i8* %3 to i32*
  %258 = load i32, i32* %257, align 4
  %259 = icmp ne i32 %258, 0
  %260 = bitcast i8* %4 to i16*
  %261 = load i16, i16* %260, align 2
  %262 = icmp ne i16 %261, 0
  br label %383

263:                                              ; preds = %231
  %264 = bitcast i8* %3 to i32*
  %265 = load i32, i32* %264, align 4
  %266 = icmp ne i32 %265, 0
  %267 = bitcast i8* %4 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = icmp ne i64 %268, 0
  br label %383

270:                                              ; preds = %231
  %271 = bitcast i8* %3 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = icmp ne i64 %272, 0
  %274 = bitcast i8* %4 to i32*
  %275 = load i32, i32* %274, align 4
  %276 = icmp ne i32 %275, 0
  br label %383

277:                                              ; preds = %231
  %278 = bitcast i8* %3 to i16*
  %279 = load i16, i16* %278, align 2
  %280 = icmp ne i16 %279, 0
  %281 = bitcast i8* %4 to i16*
  %282 = load i16, i16* %281, align 2
  %283 = icmp ne i16 %282, 0
  br label %383

284:                                              ; preds = %231
  %285 = bitcast i8* %3 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = icmp ne i32 %286, 0
  %288 = bitcast i8* %4 to i32*
  %289 = load i32, i32* %288, align 4
  %290 = icmp ne i32 %289, 0
  br label %383

291:                                              ; preds = %231
  %292 = bitcast i8* %3 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = icmp ne i64 %293, 0
  %295 = bitcast i8* %4 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = icmp ne i64 %296, 0
  br label %383

298:                                              ; preds = %231
  %299 = bitcast i8* %3 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = getelementptr inbounds i8, i8* %3, i64 8
  %302 = bitcast i8* %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = or i64 %303, %300
  %305 = icmp ne i64 %304, 0
  %306 = bitcast i8* %4 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = getelementptr inbounds i8, i8* %4, i64 8
  %309 = bitcast i8* %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = or i64 %310, %307
  %312 = icmp ne i64 %311, 0
  br label %383

313:                                              ; preds = %231
  %314 = bitcast i8* %3 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = icmp ne i64 %315, 0
  %317 = bitcast i8* %4 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = getelementptr inbounds i8, i8* %4, i64 8
  %320 = bitcast i8* %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = or i64 %321, %318
  %323 = icmp ne i64 %322, 0
  br label %383

324:                                              ; preds = %231
  %325 = bitcast i8* %3 to i64*
  %326 = load i64, i64* %325, align 8
  %327 = getelementptr inbounds i8, i8* %3, i64 8
  %328 = bitcast i8* %327 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = or i64 %329, %326
  %331 = icmp ne i64 %330, 0
  %332 = bitcast i8* %4 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = icmp ne i64 %333, 0
  br label %383

335:                                              ; preds = %231
  %336 = load i8, i8* %3, align 1
  %337 = icmp ne i8 %336, 0
  %338 = bitcast i8* %4 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = icmp ne i32 %339, 0
  br label %383

341:                                              ; preds = %231
  %342 = bitcast i8* %3 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = icmp ne i32 %343, 0
  %345 = load i8, i8* %4, align 1
  %346 = icmp ne i8 %345, 0
  br label %383

347:                                              ; preds = %231
  %348 = bitcast i8* %3 to i16*
  %349 = load i16, i16* %348, align 2
  %350 = icmp ne i16 %349, 0
  %351 = bitcast i8* %4 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = icmp ne i64 %352, 0
  br label %383

354:                                              ; preds = %231
  %355 = bitcast i8* %3 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = icmp ne i64 %356, 0
  %358 = bitcast i8* %4 to i16*
  %359 = load i16, i16* %358, align 2
  %360 = icmp ne i16 %359, 0
  br label %383

361:                                              ; preds = %231
  %362 = bitcast i8* %3 to i32*
  %363 = load i32, i32* %362, align 4
  %364 = icmp ne i32 %363, 0
  %365 = bitcast i8* %4 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = getelementptr inbounds i8, i8* %4, i64 8
  %368 = bitcast i8* %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = or i64 %369, %366
  %371 = icmp ne i64 %370, 0
  br label %383

372:                                              ; preds = %231
  %373 = bitcast i8* %3 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = getelementptr inbounds i8, i8* %3, i64 8
  %376 = bitcast i8* %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = or i64 %377, %374
  %379 = icmp ne i64 %378, 0
  %380 = bitcast i8* %4 to i32*
  %381 = load i32, i32* %380, align 4
  %382 = icmp ne i32 %381, 0
  br label %383

383:                                              ; preds = %231, %232, %237, %243, %249, %256, %263, %270, %277, %284, %291, %298, %313, %324, %335, %341, %347, %354, %361, %372
  %384 = phi i1 [ false, %231 ], [ %379, %372 ], [ %364, %361 ], [ %357, %354 ], [ %350, %347 ], [ %344, %341 ], [ %337, %335 ], [ %331, %324 ], [ %316, %313 ], [ %305, %298 ], [ %294, %291 ], [ %287, %284 ], [ %280, %277 ], [ %273, %270 ], [ %266, %263 ], [ %259, %256 ], [ %252, %249 ], [ %246, %243 ], [ %239, %237 ], [ %234, %232 ]
  %385 = phi i1 [ false, %231 ], [ %382, %372 ], [ %371, %361 ], [ %360, %354 ], [ %353, %347 ], [ %346, %341 ], [ %340, %335 ], [ %334, %324 ], [ %323, %313 ], [ %312, %298 ], [ %297, %291 ], [ %290, %284 ], [ %283, %277 ], [ %276, %270 ], [ %269, %263 ], [ %262, %256 ], [ %255, %249 ], [ %248, %243 ], [ %242, %237 ], [ %236, %232 ]
  %386 = zext i1 %384 to i32
  %387 = zext i1 %385 to i32
  %388 = add nuw nsw i32 %387, %386
  %389 = zext i8 %0 to i64
  %390 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %389
  %391 = load i8, i8* %390, align 1
  %392 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %7
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i64
  %395 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = icmp ugt i8 %391, %396
  %398 = select i1 %397, i32 10, i32 7
  %399 = add nuw nsw i32 %388, %398
  br label %400

400:                                              ; preds = %49, %220, %383
  %401 = phi i32 [ %230, %220 ], [ %399, %383 ], [ 0, %49 ]
  %402 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %5, i64 0, i32 0
  store i32 %401, i32* %402, align 4
  ret void
}

declare void @av1_xform(%struct.macroblock*, i32, i32, i32, i32, i8 zeroext, %struct.txfm_param*) local_unnamed_addr #2

declare void @av1_quant(%struct.macroblock*, i32, i32, %struct.txfm_param*, %struct.QUANT_PARAM*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @av1_uniform_txfm_yrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS* nocapture, i64, i8 zeroext, i8 zeroext, i8 zeroext, i32) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %10 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %9, align 8
  %11 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %10, align 8
  %12 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 28
  %13 = load i16, i16* %12, align 1
  %14 = trunc i16 %13 to i8
  %15 = icmp sgt i8 %14, -1
  br i1 %15, label %16, label %21

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 6, i64 0
  %18 = load i8, i8* %17, align 8
  %19 = icmp sgt i8 %18, 0
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %8, %16
  %22 = phi i32 [ 1, %8 ], [ %20, %16 ]
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  %24 = load i8, i8* %23, align 4
  %25 = icmp eq i8 %24, 2
  br i1 %25, label %26, label %181

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 0
  %28 = load i8, i8* %27, align 8
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %181, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 27
  %32 = load i8*, i8** %31, align 16
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 28
  %34 = load i8*, i8** %33, align 8
  %35 = zext i8 %5 to i64
  %36 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %35
  %39 = load i32, i32* %38, align 4
  %40 = load i8, i8* %32, align 1
  %41 = zext i8 %40 to i32
  %42 = and i32 %37, 255
  %43 = icmp ugt i32 %42, %41
  %44 = zext i1 %43 to i64
  %45 = load i8, i8* %34, align 1
  %46 = zext i8 %45 to i32
  %47 = and i32 %39, 255
  %48 = icmp ugt i32 %47, %46
  %49 = zext i1 %48 to i64
  %50 = icmp eq i8 %5, 0
  br i1 %50, label %79, label %51

51:                                               ; preds = %30
  %52 = zext i8 %28 to i64
  %53 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %52
  %56 = load i8, i8* %55, align 1
  %57 = icmp ugt i8 %54, %56
  %58 = select i1 %57, i8 %54, i8 %56
  switch i8 %58, label %75 [
    i8 -128, label %62
    i8 64, label %62
    i8 32, label %59
    i8 16, label %60
    i8 8, label %61
  ]

59:                                               ; preds = %51
  br label %62

60:                                               ; preds = %51
  br label %62

61:                                               ; preds = %51
  br label %62

62:                                               ; preds = %61, %60, %59, %51, %51
  %63 = phi i8 [ 4, %51 ], [ 4, %51 ], [ 3, %59 ], [ 2, %60 ], [ 1, %61 ]
  %64 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %35
  %65 = load i8, i8* %64, align 1
  %66 = icmp ne i8 %65, %63
  %67 = icmp ne i8 %63, 1
  %68 = and i1 %67, %66
  %69 = zext i1 %68 to i64
  %70 = shl nuw nsw i8 %63, 1
  %71 = zext i8 %70 to i64
  %72 = sub nuw nsw i64 8, %71
  %73 = or i64 %72, %69
  %74 = mul nsw i64 %73, 3
  br label %75

75:                                               ; preds = %62, %51
  %76 = phi i64 [ %74, %62 ], [ 63, %51 ]
  %77 = add nuw nsw i64 %49, %44
  %78 = add nsw i64 %77, %76
  br label %79

79:                                               ; preds = %30, %75
  %80 = phi i64 [ %78, %75 ], [ 0, %30 ]
  %81 = icmp eq i32 %22, 0
  br i1 %81, label %85, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 40, i64 %80, i64 0
  %84 = load i32, i32* %83, align 4
  br label %181

85:                                               ; preds = %79
  %86 = icmp eq i8 %4, 0
  br i1 %86, label %181, label %87

87:                                               ; preds = %85
  %88 = zext i8 %4 to i64
  %89 = getelementptr inbounds [22 x i8], [22 x i8]* @bsize_to_tx_size_cat.bsize_to_tx_size_depth_table, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = add nsw i64 %91, -1
  %93 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %88
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, %5
  br i1 %95, label %106, label %96

96:                                               ; preds = %87, %96
  %97 = phi i8 [ %102, %96 ], [ %94, %87 ]
  %98 = phi i32 [ %99, %96 ], [ 0, %87 ]
  %99 = add nuw nsw i32 %98, 1
  %100 = zext i8 %97 to i64
  %101 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, %5
  br i1 %103, label %104, label %96

104:                                              ; preds = %96
  %105 = zext i32 %99 to i64
  br label %106

106:                                              ; preds = %104, %87
  %107 = phi i64 [ 0, %87 ], [ %105, %104 ]
  %108 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %109 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %108, align 16
  %110 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %111 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %110, align 8
  %112 = zext i8 %28 to i64
  %113 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %115
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 7
  %121 = load i8, i8* %120, align 16, !range !12
  %122 = icmp ne i8 %121, 0
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 8
  %124 = load i8, i8* %123, align 1, !range !12
  %125 = icmp ne i8 %124, 0
  %126 = icmp sle i32 %117, %41
  %127 = zext i1 %126 to i32
  %128 = icmp sle i32 %119, %46
  %129 = zext i1 %128 to i32
  br i1 %122, label %130, label %148

130:                                              ; preds = %106
  %131 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %109, i64 0, i32 28
  %132 = load i16, i16* %131, align 1
  %133 = trunc i16 %132 to i8
  %134 = icmp sgt i8 %133, -1
  br i1 %134, label %135, label %139

135:                                              ; preds = %130
  %136 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %109, i64 0, i32 6, i64 0
  %137 = load i8, i8* %136, align 8
  %138 = icmp slt i8 %137, 1
  br i1 %138, label %148, label %139

139:                                              ; preds = %135, %130
  %140 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %109, i64 0, i32 0
  %141 = load i8, i8* %140, align 8
  %142 = zext i8 %141 to i64
  %143 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %142
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = icmp sle i32 %117, %145
  %147 = zext i1 %146 to i32
  br label %148

148:                                              ; preds = %139, %135, %106
  %149 = phi i32 [ %147, %139 ], [ %127, %135 ], [ %127, %106 ]
  br i1 %125, label %150, label %172

150:                                              ; preds = %148
  %151 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %111, i64 0, i32 28
  %152 = load i16, i16* %151, align 1
  %153 = trunc i16 %152 to i8
  %154 = icmp sgt i8 %153, -1
  br i1 %154, label %155, label %159

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %111, i64 0, i32 6, i64 0
  %157 = load i8, i8* %156, align 8
  %158 = icmp slt i8 %157, 1
  br i1 %158, label %168, label %159

159:                                              ; preds = %155, %150
  %160 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %111, i64 0, i32 0
  %161 = load i8, i8* %160, align 8
  %162 = zext i8 %161 to i64
  %163 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = icmp sle i32 %119, %165
  %167 = zext i1 %166 to i32
  br label %168

168:                                              ; preds = %159, %155
  %169 = phi i32 [ %167, %159 ], [ %129, %155 ]
  br i1 %122, label %170, label %172

170:                                              ; preds = %168
  %171 = add nuw nsw i32 %169, %149
  br label %176

172:                                              ; preds = %168, %148
  %173 = phi i32 [ %169, %168 ], [ %129, %148 ]
  %174 = select i1 %125, i32 %173, i32 0
  %175 = select i1 %122, i32 %149, i32 %174
  br label %176

176:                                              ; preds = %172, %170
  %177 = phi i32 [ %171, %170 ], [ %175, %172 ]
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 39, i64 %92, i64 %178, i64 %107
  %180 = load i32, i32* %179, align 4
  br label %181

181:                                              ; preds = %26, %176, %85, %21, %82
  %182 = phi i32 [ 0, %26 ], [ %84, %82 ], [ 0, %21 ], [ %180, %176 ], [ 0, %85 ]
  %183 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %184 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %183, align 16
  %185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %186 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %185, align 8
  %187 = icmp eq %struct.MB_MODE_INFO* %184, null
  br i1 %187, label %192, label %188

188:                                              ; preds = %181
  %189 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %184, i64 0, i32 23
  %190 = load i8, i8* %189, align 8
  %191 = sext i8 %190 to i64
  br label %192

192:                                              ; preds = %188, %181
  %193 = phi i64 [ %191, %188 ], [ 0, %181 ]
  %194 = icmp eq %struct.MB_MODE_INFO* %186, null
  br i1 %194, label %199, label %195

195:                                              ; preds = %192
  %196 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %186, i64 0, i32 23
  %197 = load i8, i8* %196, align 8
  %198 = sext i8 %197 to i64
  br label %199

199:                                              ; preds = %192, %195
  %200 = phi i64 [ %198, %195 ], [ 0, %192 ]
  %201 = add nsw i64 %200, %193
  %202 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %201, i64 0
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %201, i64 1
  %205 = load i32, i32* %204, align 4
  %206 = icmp ne i32 %22, 0
  br i1 %206, label %211, label %207

207:                                              ; preds = %199
  %208 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %209 = load i32, i32* %208, align 8
  %210 = sext i32 %209 to i64
  br label %219

211:                                              ; preds = %199
  %212 = sext i32 %205 to i64
  %213 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %214 = load i32, i32* %213, align 8
  %215 = sext i32 %214 to i64
  %216 = mul nsw i64 %215, %212
  %217 = add nsw i64 %216, 256
  %218 = ashr i64 %217, 9
  br label %219

219:                                              ; preds = %207, %211
  %220 = phi i64 [ %210, %207 ], [ %215, %211 ]
  %221 = phi i64 [ 9223372036854775807, %207 ], [ %218, %211 ]
  %222 = add i32 %203, %182
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %225 = mul nsw i64 %220, %223
  %226 = add nsw i64 %225, 256
  %227 = ashr i64 %226, 9
  %228 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %11, i64 0, i32 24
  store i8 %5, i8* %228, align 1
  %229 = icmp slt i64 %227, %221
  %230 = select i1 %229, i64 %227, i64 %221
  tail call void @av1_txfm_rd_in_plane(%struct.macroblock* %1, %struct.AV1_COMP* %0, %struct.RD_STATS* %2, i64 %3, i64 %230, i32 0, i8 zeroext %4, i8 zeroext %5, i8 zeroext %6, i32 %7)
  %231 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  %232 = load i32, i32* %231, align 8
  %233 = icmp eq i32 %232, 2147483647
  br i1 %233, label %286, label %234

234:                                              ; preds = %219
  %235 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  %236 = load i32, i32* %235, align 8
  %237 = icmp ne i32 %236, 0
  %238 = and i1 %206, %237
  br i1 %238, label %239, label %250

239:                                              ; preds = %234
  %240 = sext i32 %205 to i64
  %241 = load i32, i32* %224, align 8
  %242 = sext i32 %241 to i64
  %243 = mul nsw i64 %242, %240
  %244 = add nsw i64 %243, 256
  %245 = ashr i64 %244, 9
  %246 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  %247 = load i64, i64* %246, align 8
  %248 = shl i64 %247, 7
  %249 = add nsw i64 %245, %248
  br label %286

250:                                              ; preds = %234
  %251 = add i32 %222, %232
  %252 = sext i32 %251 to i64
  %253 = load i32, i32* %224, align 8
  %254 = sext i32 %253 to i64
  %255 = mul nsw i64 %254, %252
  %256 = add nsw i64 %255, 256
  %257 = ashr i64 %256, 9
  %258 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %259 = load i64, i64* %258, align 8
  %260 = shl i64 %259, 7
  %261 = add nsw i64 %257, %260
  %262 = add nsw i32 %232, %182
  store i32 %262, i32* %231, align 8
  %263 = icmp eq i32 %236, 0
  %264 = and i1 %206, %263
  br i1 %264, label %265, label %286

265:                                              ; preds = %250
  %266 = load i16, i16* %12, align 1
  %267 = and i16 %266, 7
  %268 = zext i16 %267 to i64
  %269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %268
  %270 = load i32, i32* %269, align 4
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %286

272:                                              ; preds = %265
  %273 = sext i32 %205 to i64
  %274 = load i32, i32* %224, align 8
  %275 = sext i32 %274 to i64
  %276 = mul nsw i64 %275, %273
  %277 = add nsw i64 %276, 256
  %278 = ashr i64 %277, 9
  %279 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  %280 = load i64, i64* %279, align 8
  %281 = shl nsw i64 %280, 7
  %282 = add nsw i64 %278, %281
  %283 = icmp sgt i64 %282, %261
  br i1 %283, label %286, label %284

284:                                              ; preds = %272
  store i32 0, i32* %231, align 8
  %285 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  store i64 %280, i64* %285, align 8
  store i32 1, i32* %235, align 8
  br label %286

286:                                              ; preds = %239, %250, %265, %272, %284, %219
  %287 = phi i64 [ 9223372036854775807, %219 ], [ %261, %265 ], [ %261, %250 ], [ %282, %284 ], [ %261, %272 ], [ %249, %239 ]
  ret i64 %287
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_txfm_rd_in_plane(%struct.macroblock*, %struct.AV1_COMP*, %struct.RD_STATS* nocapture, i64, i64, i32, i8 zeroext, i8 zeroext, i8 zeroext, i32) local_unnamed_addr #0 {
  %11 = alloca %struct.rdcost_block_args, align 8
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %1, i64 0, i32 9, i32 19, i32 0
  %13 = load i8, i8* %12, align 2, !range !12
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = zext i8 %7 to i64
  %17 = lshr i64 399376, %16
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 2147483647, i32* %21, align 8
  %22 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %23 = bitcast i64* %22 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %23, align 8
  %24 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  store i64 9223372036854775807, i64* %24, align 8
  %25 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 0, i32* %26, align 4
  br label %89

27:                                               ; preds = %15, %10
  %28 = icmp sgt i64 %4, %3
  br i1 %28, label %29, label %36

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 2147483647, i32* %30, align 8
  %31 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %32 = bitcast i64* %31 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %32, align 8
  %33 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  store i64 9223372036854775807, i64* %33, align 8
  %34 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  store i32 0, i32* %34, align 8
  %35 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 0, i32* %35, align 4
  br label %89

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2
  %38 = sext i32 %5 to i64
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 %38
  %40 = bitcast %struct.rdcost_block_args* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %40) #6
  %41 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 2, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 136, i1 false)
  %42 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 1
  store %struct.macroblock* %0, %struct.macroblock** %42, align 8
  %43 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 0
  store %struct.AV1_COMP* %1, %struct.AV1_COMP** %43, align 8
  %44 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 6
  store i64 %3, i64* %44, align 8
  %45 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 5
  store i64 %4, i64* %45, align 8
  %46 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 9
  store i8 %8, i8* %46, align 8
  %47 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 10
  store i32 %9, i32* %47, align 4
  %48 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 4
  %49 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %48, i64 0, i32 0
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 4, i32 1
  %51 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 4, i32 4
  %52 = bitcast i64* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %51, align 8
  %53 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 4, i32 5
  store i32 0, i32* %53, align 4
  %54 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 2, i64 0
  %55 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 3, i64 0
  call void @av1_get_entropy_contexts(i8 zeroext %6, %struct.macroblockd_plane* %39, i8* %54, i8* %55) #6
  call void @av1_foreach_transformed_block_in_plane(%struct.macroblockd* %37, i8 zeroext %6, i32 %5, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @block_rd_txfm, i8* nonnull %40) #6
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 6
  %57 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %56, align 8
  %58 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %57, align 8
  %59 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %58, i64 0, i32 28
  %60 = load i16, i16* %59, align 1
  %61 = trunc i16 %60 to i8
  %62 = icmp sgt i8 %61, -1
  br i1 %62, label %66, label %63

63:                                               ; preds = %36
  %64 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 8
  %65 = load i32, i32* %64, align 4
  br label %75

66:                                               ; preds = %36
  %67 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %58, i64 0, i32 6, i64 0
  %68 = load i8, i8* %67, align 8
  %69 = icmp slt i8 %68, 1
  %70 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 8
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %11, i64 0, i32 7
  %73 = load i32, i32* %72, align 8
  %74 = select i1 %69, i32 %73, i32 %71
  br label %75

75:                                               ; preds = %66, %63
  %76 = phi i32 [ %65, %63 ], [ %74, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %85, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 2147483647, i32* %79, align 8
  %80 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %81 = bitcast i64* %80 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %81, align 8
  %82 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  store i64 9223372036854775807, i64* %82, align 8
  %83 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  store i32 0, i32* %83, align 8
  %84 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 0, i32* %84, align 4
  br label %88

85:                                               ; preds = %75
  %86 = bitcast %struct.RD_STATS* %2 to i8*
  %87 = bitcast %struct.RD_STATS* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 40, i1 false)
  br label %88

88:                                               ; preds = %85, %78
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %40) #6
  br label %89

89:                                               ; preds = %88, %29, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_pick_recursive_tx_size_type_yrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS*, i8 zeroext, i64) local_unnamed_addr #0 {
  %6 = alloca [4 x %struct.TXB_RD_RECORD*], align 16
  %7 = alloca [16384 x i16], align 16
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca [32 x i8], align 16
  %11 = alloca [32 x i8], align 16
  %12 = alloca [32 x i8], align 16
  %13 = alloca [32 x i8], align 16
  %14 = alloca %struct.RD_STATS, align 8
  %15 = alloca [32 x i8], align 16
  %16 = alloca [32 x i8], align 16
  %17 = alloca [32 x i8], align 16
  %18 = alloca [32 x i8], align 16
  %19 = alloca i32, align 4
  %20 = alloca %struct.RD_STATS, align 8
  %21 = alloca i64, align 8
  %22 = alloca [84 x %struct.tx_size_rd_info_node], align 16
  %23 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 2147483647, i32* %23, align 8
  %24 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %25 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %25, align 8
  %26 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  store i64 9223372036854775807, i64* %26, align 8
  %27 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 8
  %30 = load i32, i32* %29, align 4
  %31 = icmp ne i32 %30, 0
  %32 = icmp ne i64 %4, 9223372036854775807
  %33 = and i1 %32, %31
  br i1 %33, label %34, label %179

34:                                               ; preds = %5
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %36 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %35, align 8
  %37 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %36, align 8
  %38 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %37, i64 0, i32 6, i64 0
  %39 = load i8, i8* %38, align 8
  %40 = zext i8 %3 to i64
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 40
  %44 = bitcast double* %8 to i8*
  %45 = bitcast double* %9 to i8*
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %47 = sext i8 %39 to i64
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61, i64 %47
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = sext i32 %50 to i64
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %40, i64 %53, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %57
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = load i32, i32* %41, align 16
  %65 = icmp sgt i32 %64, -1
  br i1 %65, label %74, label %66

66:                                               ; preds = %34
  %67 = add nsw i32 %52, 3
  %68 = ashr i32 %64, %67
  %69 = add nsw i32 %68, %60
  %70 = icmp slt i32 %69, 0
  %71 = icmp sgt i32 %69, %60
  %72 = select i1 %71, i32 %60, i32 %69
  %73 = select i1 %70, i32 0, i32 %72
  br label %74

74:                                               ; preds = %66, %34
  %75 = phi i32 [ %73, %66 ], [ %60, %34 ]
  %76 = load i32, i32* %42, align 8
  %77 = icmp sgt i32 %76, -1
  br i1 %77, label %86, label %78

78:                                               ; preds = %74
  %79 = add nsw i32 %50, 3
  %80 = ashr i32 %76, %79
  %81 = add nsw i32 %80, %63
  %82 = icmp slt i32 %81, 0
  %83 = icmp sgt i32 %81, %63
  %84 = select i1 %83, i32 %63, i32 %81
  %85 = select i1 %82, i32 0, i32 %84
  br label %86

86:                                               ; preds = %78, %74
  %87 = phi i32 [ %85, %78 ], [ %63, %74 ]
  %88 = load i32, i32* %43, align 16
  %89 = load i64 (i8*, i32, i8*, i32, i32, i32)*, i64 (i8*, i32, i8*, i32, i32, i32)** @aom_sse, align 8
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i32 4
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 3, i32 4
  %97 = load i32, i32* %96, align 8
  %98 = tail call i64 %89(i8* %91, i32 %93, i8* %95, i32 %97, i32 %87, i32 %75) #6
  %99 = shl i32 %88, 1
  %100 = add i32 %99, -16
  %101 = shl i32 1, %100
  %102 = ashr i32 %101, 1
  %103 = sext i32 %102 to i64
  %104 = add nsw i64 %98, %103
  %105 = zext i32 %100 to i64
  %106 = ashr i64 %104, %105
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 13
  %108 = load i16*, i16** %107, align 8
  %109 = getelementptr inbounds i16, i16* %108, i64 1
  %110 = load i16, i16* %109, align 2
  %111 = icmp sgt i16 %110, 15
  %112 = ashr i16 %110, 3
  %113 = sitofp i16 %112 to double
  %114 = select i1 %111, double %113, double 1.000000e+00
  %115 = icmp eq i64 %106, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %86
  store i32 0, i32* %48, align 4
  br label %179

117:                                              ; preds = %86
  %118 = mul nsw i32 %87, %75
  %119 = sitofp i64 %106 to double
  %120 = sitofp i32 %118 to double
  %121 = fdiv double %119, %120
  %122 = fmul double %114, %114
  %123 = fdiv double %121, %122
  %124 = tail call double @log2(double %123) #6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %9, align 8
  call void @av1_model_rd_curvfit(i8 zeroext %56, double %121, double %124, double* nonnull %8, double* nonnull %9) #6
  %125 = load double, double* %9, align 8
  %126 = fmul double %121, %125
  %127 = load double, double* %8, align 8
  %128 = fmul double %127, %120
  %129 = fcmp olt double %128, 0.000000e+00
  %130 = fadd double %128, 5.000000e-01
  %131 = fptosi double %130 to i32
  %132 = fmul double %126, %120
  %133 = fcmp olt double %132, 0.000000e+00
  %134 = fadd double %132, 5.000000e-01
  %135 = fptosi double %134 to i64
  %136 = select i1 %133, i64 0, i64 %135
  %137 = icmp eq i32 %131, 0
  %138 = or i1 %129, %137
  br i1 %138, label %139, label %141

139:                                              ; preds = %117
  %140 = shl i64 %106, 4
  br label %155

141:                                              ; preds = %117
  %142 = sext i32 %131 to i64
  %143 = load i32, i32* %46, align 8
  %144 = sext i32 %143 to i64
  %145 = mul nsw i64 %144, %142
  %146 = add nsw i64 %145, 256
  %147 = ashr i64 %146, 9
  %148 = shl i64 %136, 7
  %149 = add nsw i64 %147, %148
  %150 = shl i64 %106, 11
  %151 = icmp slt i64 %149, %150
  %152 = shl i64 %106, 4
  %153 = select i1 %151, i32 %131, i32 0
  %154 = select i1 %151, i64 %136, i64 %152
  br label %155

155:                                              ; preds = %141, %139
  %156 = phi i32 [ 0, %139 ], [ %153, %141 ]
  %157 = phi i64 [ %140, %139 ], [ %154, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #6
  %158 = icmp slt i64 %106, 4294967295
  %159 = select i1 %158, i64 %106, i64 4294967295
  %160 = trunc i64 %159 to i32
  store i32 %160, i32* %48, align 4
  %161 = icmp eq i32 %156, 0
  br i1 %161, label %179, label %162

162:                                              ; preds = %155
  %163 = sext i32 %156 to i64
  %164 = load i32, i32* %46, align 8
  %165 = sext i32 %164 to i64
  %166 = mul nsw i64 %165, %163
  %167 = add nsw i64 %166, 256
  %168 = ashr i64 %167, 9
  %169 = shl i64 %157, 7
  %170 = add nsw i64 %168, %169
  %171 = add nsw i32 %30, -1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [2 x i32], [2 x i32]* @model_based_tx_search_prune.prune_factor_by8, i64 0, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %174 to i64
  %176 = mul nsw i64 %170, %175
  %177 = ashr i64 %176, 3
  %178 = icmp sgt i64 %177, %4
  br i1 %178, label %1044, label %179

179:                                              ; preds = %162, %116, %155, %5
  %180 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 0
  %181 = load i32, i32* %180, align 16
  %182 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 0
  %185 = load i32, i32* %184, align 16
  %186 = icmp slt i32 %181, %185
  %187 = zext i8 %3 to i64
  br i1 %186, label %208, label %188

188:                                              ; preds = %179
  %189 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %187
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = add nsw i32 %181, %191
  %193 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = icmp slt i32 %192, %194
  br i1 %195, label %196, label %208

196:                                              ; preds = %188
  %197 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 2
  %198 = load i32, i32* %197, align 8
  %199 = icmp slt i32 %183, %198
  br i1 %199, label %208, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %187
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = add nsw i32 %183, %203
  %205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 3
  %206 = load i32, i32* %205, align 4
  %207 = icmp slt i32 %204, %206
  br i1 %207, label %214, label %208

208:                                              ; preds = %179, %200, %196, %188
  %209 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %187
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = add nsw i32 %211, -4
  %213 = shl i32 1, %212
  br label %284

214:                                              ; preds = %200
  %215 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 10, i32 4
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %216, 0
  %218 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %187
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nsw i32 %220, -4
  %222 = shl i32 1, %221
  br i1 %217, label %284, label %223

223:                                              ; preds = %214
  %224 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %187
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i64
  %227 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %187
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i64
  %230 = bitcast %struct.macroblock* %1 to i8**
  %231 = load i8*, i8** %230, align 16
  %232 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** @av1_get_crc32c_value, align 8
  %233 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 3
  %234 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %233, align 8
  %235 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %234, i64 0, i32 0, i32 3
  %236 = bitcast %struct._CRC32C* %235 to i8*
  %237 = shl nuw nsw i64 %226, 1
  %238 = mul nuw nsw i64 %237, %229
  %239 = call i32 %232(i8* %236, i8* %231, i64 %238) #6
  %240 = shl i32 %239, 5
  %241 = zext i8 %3 to i32
  %242 = add i32 %240, %241
  %243 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %233, align 8
  %244 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0
  %245 = icmp eq i64 %4, 9223372036854775807
  br i1 %245, label %284, label %246

246:                                              ; preds = %223
  %247 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 2
  %248 = load i32, i32* %247, align 4
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %250, label %284

250:                                              ; preds = %246
  %251 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 1
  %252 = load i32, i32* %251, align 8
  br label %255

253:                                              ; preds = %255
  %254 = icmp eq i32 %263, %248
  br i1 %254, label %284, label %255

255:                                              ; preds = %253, %250
  %256 = phi i32 [ 0, %250 ], [ %263, %253 ]
  %257 = add nsw i32 %256, %252
  %258 = srem i32 %257, 8
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 0, i64 %259, i32 5
  %261 = load i32, i32* %260, align 8
  %262 = icmp eq i32 %261, %242
  %263 = add nuw nsw i32 %256, 1
  br i1 %262, label %264, label %253

264:                                              ; preds = %255
  %265 = icmp eq i32 %258, -1
  br i1 %265, label %284, label %266

266:                                              ; preds = %264
  %267 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %268 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %267, align 8
  %269 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %268, align 8
  %270 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 0, i64 %259, i32 0
  %271 = load i8, i8* %270, align 8
  %272 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %269, i64 0, i32 24
  store i8 %271, i8* %272, align 1
  %273 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %274 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 0, i64 %259, i32 2, i64 0
  %275 = sext i32 %222 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %273, i8* align 1 %274, i64 %275, i1 false) #6
  %276 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %269, i64 0, i32 25, i64 0
  %277 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 0, i64 %259, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %276, i8* align 1 %277, i64 16, i1 false) #6
  %278 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %279 = load i8*, i8** %278, align 8
  %280 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 0, i64 %259, i32 3, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %279, i8* align 1 %280, i64 %275, i1 false) #6
  %281 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %243, i64 0, i32 0, i32 0, i64 %259, i32 4
  %282 = bitcast %struct.RD_STATS* %2 to i8*
  %283 = bitcast %struct.RD_STATS* %281 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %282, i8* align 8 %283, i64 40, i1 false) #6
  br label %1044

284:                                              ; preds = %253, %214, %246, %223, %208, %264
  %285 = phi i32 [ %222, %214 ], [ %222, %264 ], [ %213, %208 ], [ %222, %223 ], [ %222, %246 ], [ %222, %253 ]
  %286 = phi i1 [ false, %214 ], [ true, %264 ], [ false, %208 ], [ true, %223 ], [ true, %246 ], [ true, %253 ]
  %287 = phi i1 [ true, %214 ], [ true, %264 ], [ false, %208 ], [ true, %223 ], [ true, %246 ], [ true, %253 ]
  %288 = phi i32 [ 0, %214 ], [ %242, %264 ], [ 0, %208 ], [ %242, %223 ], [ %242, %246 ], [ %242, %253 ]
  %289 = phi %struct.MB_RD_RECORD* [ null, %214 ], [ %244, %264 ], [ null, %208 ], [ %244, %223 ], [ %244, %246 ], [ %244, %253 ]
  %290 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %290) #6
  store i64 -6148914691236517206, i64* %21, align 8
  %291 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 7
  %292 = load i32, i32* %291, align 4
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %337, label %294

294:                                              ; preds = %284
  %295 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %296 = load i8, i8* %295, align 1, !range !12
  %297 = zext i8 %296 to i32
  %298 = call fastcc i32 @predict_skip_txfm(%struct.macroblock* %1, i8 zeroext %3, i64* nonnull %21, i32 %297)
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %337, label %300

300:                                              ; preds = %294
  %301 = zext i8 %3 to i32
  %302 = load i64, i64* %21, align 8
  call fastcc void @set_skip_txfm(%struct.macroblock* %1, %struct.RD_STATS* %2, i32 %301, i64 %302)
  br i1 %286, label %303, label %1043

303:                                              ; preds = %300
  %304 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 2
  %305 = load i32, i32* %304, align 4
  %306 = icmp slt i32 %305, 8
  %307 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 1
  %308 = load i32, i32* %307, align 8
  br i1 %306, label %309, label %313

309:                                              ; preds = %303
  %310 = add nsw i32 %308, %305
  %311 = srem i32 %310, 8
  %312 = add nsw i32 %305, 1
  store i32 %312, i32* %304, align 4
  br label %316

313:                                              ; preds = %303
  %314 = add nsw i32 %308, 1
  %315 = srem i32 %314, 8
  store i32 %315, i32* %307, align 8
  br label %316

316:                                              ; preds = %309, %313
  %317 = phi i32 [ %311, %309 ], [ %308, %313 ]
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %320 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %319, align 8
  %321 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %320, align 8
  %322 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %318, i32 5
  store i32 %288, i32* %322, align 8
  %323 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %321, i64 0, i32 24
  %324 = load i8, i8* %323, align 1
  %325 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %318, i32 0
  store i8 %324, i8* %325, align 8
  %326 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %318, i32 2, i64 0
  %327 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %328 = sext i32 %285 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %326, i8* align 4 %327, i64 %328, i1 false) #6
  %329 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %318, i32 1, i64 0
  %330 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %321, i64 0, i32 25, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %329, i8* align 2 %330, i64 16, i1 false) #6
  %331 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %318, i32 3, i64 0
  %332 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %333 = load i8*, i8** %332, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %331, i8* align 1 %333, i64 %328, i1 false) #6
  %334 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %318, i32 4
  %335 = bitcast %struct.RD_STATS* %334 to i8*
  %336 = bitcast %struct.RD_STATS* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %335, i8* align 8 %336, i64 40, i1 false) #6
  br label %1043

337:                                              ; preds = %294, %284
  %338 = bitcast [84 x %struct.tx_size_rd_info_node]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3360, i8* nonnull %338) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %338, i8 -86, i64 3360, i1 false)
  %339 = and i1 %32, %287
  br i1 %339, label %340, label %556

340:                                              ; preds = %337
  %341 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 10
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %556, label %344

344:                                              ; preds = %340
  %345 = bitcast [4 x %struct.TXB_RD_RECORD*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %345) #6
  %346 = getelementptr inbounds [4 x %struct.TXB_RD_RECORD*], [4 x %struct.TXB_RD_RECORD*]* %6, i64 0, i64 0
  %347 = getelementptr inbounds [4 x %struct.TXB_RD_RECORD*], [4 x %struct.TXB_RD_RECORD*]* %6, i64 0, i64 1
  %348 = getelementptr inbounds [4 x %struct.TXB_RD_RECORD*], [4 x %struct.TXB_RD_RECORD*]* %6, i64 0, i64 2
  %349 = getelementptr inbounds [4 x %struct.TXB_RD_RECORD*], [4 x %struct.TXB_RD_RECORD*]* %6, i64 0, i64 3
  %350 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 3
  %351 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %350, align 8
  %352 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %351, i64 0, i32 1, i64 0
  store %struct.TXB_RD_RECORD* %352, %struct.TXB_RD_RECORD** %346, align 16
  %353 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %351, i64 0, i32 2, i64 0
  store %struct.TXB_RD_RECORD* %353, %struct.TXB_RD_RECORD** %347, align 8
  %354 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %351, i64 0, i32 3, i64 0
  store %struct.TXB_RD_RECORD* %354, %struct.TXB_RD_RECORD** %348, align 16
  %355 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %351, i64 0, i32 4, i64 0
  store %struct.TXB_RD_RECORD* %355, %struct.TXB_RD_RECORD** %349, align 8
  %356 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %187
  %357 = load i8, i8* %356, align 1
  %358 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %187
  %359 = load i8, i8* %358, align 1
  %360 = lshr i64 196615, %187
  %361 = and i64 %360, 1
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %553

363:                                              ; preds = %344
  %364 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0
  %365 = load i16*, i16** %364, align 8
  %366 = getelementptr inbounds [22 x %struct.RD_RECORD_IDX_NODE*], [22 x %struct.RD_RECORD_IDX_NODE*]* @rd_record_tree, i64 0, i64 %187
  %367 = load %struct.RD_RECORD_IDX_NODE*, %struct.RD_RECORD_IDX_NODE** %366, align 8
  %368 = lshr i64 3997688, %187
  %369 = and i64 %368, 1
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %415, label %371

371:                                              ; preds = %363
  %372 = getelementptr inbounds [22 x i32], [22 x i32]* @rd_record_tree_size, i64 0, i64 %187
  %373 = load i32, i32* %372, align 4
  %374 = sext i32 %373 to i64
  br label %375

375:                                              ; preds = %412, %371
  %376 = phi i64 [ 0, %371 ], [ %413, %412 ]
  %377 = getelementptr inbounds %struct.RD_RECORD_IDX_NODE, %struct.RD_RECORD_IDX_NODE* %367, i64 %376, i32 0
  %378 = load i32, i32* %377, align 4
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %380, label %409

380:                                              ; preds = %375
  %381 = getelementptr inbounds %struct.RD_RECORD_IDX_NODE, %struct.RD_RECORD_IDX_NODE* %367, i64 %376, i32 1, i64 0
  %382 = load i8, i8* %381, align 1
  %383 = icmp sgt i8 %382, 0
  %384 = sext i8 %382 to i64
  %385 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %384
  %386 = select i1 %383, %struct.tx_size_rd_info_node* %385, %struct.tx_size_rd_info_node* null
  %387 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %376, i32 1, i64 0
  store %struct.tx_size_rd_info_node* %386, %struct.tx_size_rd_info_node** %387, align 8
  %388 = getelementptr inbounds %struct.RD_RECORD_IDX_NODE, %struct.RD_RECORD_IDX_NODE* %367, i64 %376, i32 1, i64 1
  %389 = load i8, i8* %388, align 1
  %390 = icmp sgt i8 %389, 0
  %391 = sext i8 %389 to i64
  %392 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %391
  %393 = select i1 %390, %struct.tx_size_rd_info_node* %392, %struct.tx_size_rd_info_node* null
  %394 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %376, i32 1, i64 1
  store %struct.tx_size_rd_info_node* %393, %struct.tx_size_rd_info_node** %394, align 8
  %395 = getelementptr inbounds %struct.RD_RECORD_IDX_NODE, %struct.RD_RECORD_IDX_NODE* %367, i64 %376, i32 1, i64 2
  %396 = load i8, i8* %395, align 1
  %397 = icmp sgt i8 %396, 0
  %398 = sext i8 %396 to i64
  %399 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %398
  %400 = select i1 %397, %struct.tx_size_rd_info_node* %399, %struct.tx_size_rd_info_node* null
  %401 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %376, i32 1, i64 2
  store %struct.tx_size_rd_info_node* %400, %struct.tx_size_rd_info_node** %401, align 8
  %402 = getelementptr inbounds %struct.RD_RECORD_IDX_NODE, %struct.RD_RECORD_IDX_NODE* %367, i64 %376, i32 1, i64 3
  %403 = load i8, i8* %402, align 1
  %404 = icmp sgt i8 %403, 0
  %405 = sext i8 %403 to i64
  %406 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %405
  %407 = select i1 %404, %struct.tx_size_rd_info_node* %406, %struct.tx_size_rd_info_node* null
  %408 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %376, i32 1, i64 3
  store %struct.tx_size_rd_info_node* %407, %struct.tx_size_rd_info_node** %408, align 8
  br label %412

409:                                              ; preds = %375
  %410 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %376, i32 1
  %411 = bitcast [4 x %struct.tx_size_rd_info_node*]* %410 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %411, i8 0, i64 32, i1 false) #6
  br label %412

412:                                              ; preds = %409, %380
  %413 = add nuw nsw i64 %376, 1
  %414 = icmp slt i64 %413, %374
  br i1 %414, label %375, label %415

415:                                              ; preds = %412, %363
  %416 = load i32, i32* %180, align 16
  %417 = load i32, i32* %182, align 4
  %418 = srem i32 %416, 32
  %419 = shl nsw i32 %418, 2
  %420 = srem i32 %417, 32
  %421 = shl nsw i32 %420, 2
  %422 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %187
  %423 = load i8, i8* %422, align 1
  %424 = bitcast [16384 x i16]* %7 to i8*
  %425 = getelementptr inbounds [16384 x i16], [16384 x i16]* %7, i64 0, i64 0
  %426 = zext i8 %357 to i64
  %427 = zext i8 %359 to i64
  br label %428

428:                                              ; preds = %550, %415
  %429 = phi i8 [ %423, %415 ], [ %442, %550 ]
  %430 = phi i32 [ 0, %415 ], [ %551, %550 ]
  %431 = phi i64 [ 0, %415 ], [ %547, %550 ]
  %432 = zext i8 %429 to i64
  %433 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %432
  %436 = load i32, i32* %435, align 4
  %437 = lshr i64 24673, %432
  %438 = and i64 %437, 1
  %439 = icmp eq i64 %438, 0
  br i1 %439, label %440, label %554

440:                                              ; preds = %428
  %441 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %432
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %429 to i32
  %444 = add nsw i32 %443, -1
  %445 = icmp eq i32 %434, %436
  %446 = sext i32 %434 to i64
  %447 = shl nsw i64 %446, 1
  %448 = shl i32 %434, 1
  %449 = mul nsw i32 %448, %436
  %450 = sext i32 %449 to i64
  %451 = lshr i32 32, %443
  %452 = sext i32 %444 to i64
  %453 = getelementptr inbounds [4 x %struct.TXB_RD_RECORD*], [4 x %struct.TXB_RD_RECORD*]* %6, i64 0, i64 %452
  %454 = sext i32 %436 to i64
  br label %455

455:                                              ; preds = %464, %440
  %456 = phi i64 [ 0, %440 ], [ %465, %464 ]
  %457 = phi i64 [ %431, %440 ], [ %547, %464 ]
  %458 = mul nsw i64 %456, %426
  %459 = getelementptr inbounds i16, i16* %365, i64 %458
  %460 = shl i64 %457, 32
  %461 = ashr exact i64 %460, 32
  %462 = trunc i64 %456 to i32
  %463 = add i32 %419, %462
  br label %467

464:                                              ; preds = %546
  %465 = add i64 %456, %454
  %466 = icmp slt i64 %465, %427
  br i1 %466, label %455, label %550

467:                                              ; preds = %546, %455
  %468 = phi i64 [ %461, %455 ], [ %547, %546 ]
  %469 = phi i64 [ 0, %455 ], [ %548, %546 ]
  br i1 %445, label %472, label %470

470:                                              ; preds = %467
  %471 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %468, i32 0
  store %struct.TXB_RD_INFO* null, %struct.TXB_RD_INFO** %471, align 8
  br label %546

472:                                              ; preds = %467
  %473 = trunc i64 %469 to i32
  %474 = add i32 %421, %473
  call void @llvm.lifetime.start.p0i8(i64 32768, i8* nonnull %424) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %424, i8 -86, i64 32768, i1 false) #6
  %475 = getelementptr inbounds i16, i16* %459, i64 %469
  br label %536

476:                                              ; preds = %536
  %477 = sdiv i32 %463, %434
  %478 = sdiv i32 %474, %434
  %479 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** @av1_get_crc32c_value, align 8
  %480 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %350, align 8
  %481 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %480, i64 0, i32 0, i32 3
  %482 = bitcast %struct._CRC32C* %481 to i8*
  %483 = call i32 %479(i8* %482, i8* nonnull %424, i64 %450) #6
  %484 = mul nsw i32 %477, %451
  %485 = add nsw i32 %484, %478
  %486 = load %struct.TXB_RD_RECORD*, %struct.TXB_RD_RECORD** %453, align 8
  %487 = sext i32 %485 to i64
  %488 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 2
  %489 = load i32, i32* %488, align 8
  %490 = sext i32 %489 to i64
  br label %491

491:                                              ; preds = %495, %476
  %492 = phi i64 [ %493, %495 ], [ %490, %476 ]
  %493 = add nsw i64 %492, -1
  %494 = icmp sgt i64 %492, 0
  br i1 %494, label %495, label %499

495:                                              ; preds = %491
  %496 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 0, i64 %493
  %497 = load i32, i32* %496, align 4
  %498 = icmp eq i32 %497, %483
  br i1 %498, label %529, label %491

499:                                              ; preds = %491
  %500 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 3
  %501 = load i32, i32* %500, align 4
  %502 = sext i32 %501 to i64
  br label %503

503:                                              ; preds = %507, %499
  %504 = phi i64 [ %505, %507 ], [ %502, %499 ]
  %505 = add nsw i64 %504, -1
  %506 = icmp sgt i64 %504, %490
  br i1 %506, label %507, label %511

507:                                              ; preds = %503
  %508 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 0, i64 %505
  %509 = load i32, i32* %508, align 4
  %510 = icmp eq i32 %509, %483
  br i1 %510, label %527, label %503

511:                                              ; preds = %503
  %512 = icmp slt i32 %501, 256
  br i1 %512, label %513, label %518

513:                                              ; preds = %511
  %514 = add nsw i32 %501, %489
  %515 = srem i32 %514, 256
  %516 = add nsw i32 %501, 1
  store i32 %516, i32* %500, align 4
  %517 = sext i32 %515 to i64
  br label %521

518:                                              ; preds = %511
  %519 = add nsw i32 %489, 1
  %520 = srem i32 %519, 256
  store i32 %520, i32* %488, align 8
  br label %521

521:                                              ; preds = %518, %513
  %522 = phi i64 [ %490, %518 ], [ %517, %513 ]
  %523 = phi i32 [ %489, %518 ], [ %515, %513 ]
  %524 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 0, i64 %522
  store i32 %483, i32* %524, align 4
  %525 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 1, i64 %522
  %526 = bitcast %struct.TXB_RD_INFO* %525 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %526, i8 0, i64 32, i1 false) #6
  br label %531

527:                                              ; preds = %507
  %528 = trunc i64 %505 to i32
  br label %531

529:                                              ; preds = %495
  %530 = trunc i64 %493 to i32
  br label %531

531:                                              ; preds = %529, %527, %521
  %532 = phi i32 [ %523, %521 ], [ %528, %527 ], [ %530, %529 ]
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds %struct.TXB_RD_RECORD, %struct.TXB_RD_RECORD* %486, i64 %487, i32 1, i64 %533
  %535 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 %468, i32 0
  store %struct.TXB_RD_INFO* %534, %struct.TXB_RD_INFO** %535, align 8
  call void @llvm.lifetime.end.p0i8(i64 32768, i8* nonnull %424) #6
  br label %546

536:                                              ; preds = %536, %472
  %537 = phi i32 [ %544, %536 ], [ 0, %472 ]
  %538 = phi i16* [ %543, %536 ], [ %475, %472 ]
  %539 = phi i16* [ %542, %536 ], [ %425, %472 ]
  %540 = bitcast i16* %539 to i8*
  %541 = bitcast i16* %538 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %540, i8* align 2 %541, i64 %447, i1 false) #6
  %542 = getelementptr inbounds i16, i16* %539, i64 %446
  %543 = getelementptr inbounds i16, i16* %538, i64 %426
  %544 = add nuw nsw i32 %537, 1
  %545 = icmp slt i32 %544, %434
  br i1 %545, label %536, label %476

546:                                              ; preds = %531, %470
  %547 = add i64 %468, 1
  %548 = add i64 %469, %446
  %549 = icmp slt i64 %548, %426
  br i1 %549, label %467, label %464

550:                                              ; preds = %464
  %551 = add nuw nsw i32 %430, 1
  %552 = icmp eq i32 %551, 3
  br i1 %552, label %554, label %428

553:                                              ; preds = %344
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %345) #6
  br label %556

554:                                              ; preds = %550, %428
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %345) #6
  %555 = getelementptr inbounds [84 x %struct.tx_size_rd_info_node], [84 x %struct.tx_size_rd_info_node]* %22, i64 0, i64 0
  br label %556

556:                                              ; preds = %337, %340, %553, %554
  %557 = phi %struct.tx_size_rd_info_node* [ %555, %554 ], [ null, %553 ], [ null, %340 ], [ null, %337 ]
  %558 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 5
  %559 = load i8, i8* %558, align 4
  %560 = icmp ne i8 %559, 0
  %561 = icmp eq i64 %4, 0
  br i1 %561, label %562, label %564

562:                                              ; preds = %556
  store i32 2147483647, i32* %23, align 8
  %563 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %563, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  br label %1005

564:                                              ; preds = %556
  %565 = and i1 %32, %560
  br i1 %565, label %566, label %572

566:                                              ; preds = %564
  %567 = sub nsw i64 9223372036854775807, %4
  %568 = ashr i64 %4, 3
  %569 = icmp sgt i64 %567, %568
  %570 = select i1 %569, i64 %568, i64 0
  %571 = add nsw i64 %570, %4
  br label %572

572:                                              ; preds = %566, %564
  %573 = phi i64 [ %4, %564 ], [ %571, %566 ]
  %574 = zext i1 %560 to i8
  %575 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0
  %576 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %187
  %577 = load i8, i8* %576, align 1
  %578 = zext i8 %577 to i32
  %579 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %187
  %580 = load i8, i8* %579, align 1
  %581 = zext i8 %580 to i32
  %582 = getelementptr inbounds [32 x i8], [32 x i8]* %15, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %582) #6
  %583 = getelementptr inbounds [32 x i8], [32 x i8]* %16, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %582, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %583) #6
  %584 = getelementptr inbounds [32 x i8], [32 x i8]* %17, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %583, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %584) #6
  %585 = getelementptr inbounds [32 x i8], [32 x i8]* %18, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %584, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %585) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %585, i8 -86, i64 32, i1 false) #6
  call void @av1_get_entropy_contexts(i8 zeroext %3, %struct.macroblockd_plane* %575, i8* nonnull %582, i8* nonnull %583) #6
  %586 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 27
  %587 = load i8*, i8** %586, align 16
  %588 = zext i8 %577 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %584, i8* align 1 %587, i64 %588, i1 false) #6
  %589 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 28
  %590 = load i8*, i8** %589, align 8
  %591 = zext i8 %580 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %585, i8* align 1 %590, i64 %591, i1 false) #6
  %592 = load i8, i8* %558, align 4
  %593 = icmp eq i8 %592, 2
  br i1 %593, label %607, label %594

594:                                              ; preds = %572
  %595 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 4
  %596 = load i32, i32* %595, align 4
  %597 = icmp ne i32 %596, 0
  %598 = add nsw i64 %187, -13
  %599 = icmp ult i64 %598, 3
  %600 = and i1 %599, %597
  br i1 %600, label %607, label %601

601:                                              ; preds = %594
  %602 = icmp eq i8 %580, %577
  %603 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 1
  %604 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 0
  %605 = select i1 %602, i32* %604, i32* %603
  %606 = load i32, i32* %605, align 4
  br label %607

607:                                              ; preds = %601, %594, %572
  %608 = phi i32 [ %606, %601 ], [ 2, %572 ], [ 2, %594 ]
  %609 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %187
  %610 = load i8, i8* %609, align 1
  %611 = zext i8 %610 to i64
  %612 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %611
  %613 = load i32, i32* %612, align 4
  %614 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %611
  %615 = load i32, i32* %614, align 4
  %616 = mul nsw i32 %615, %613
  %617 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %618 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %617, align 16
  %619 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %620 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %619, align 8
  %621 = icmp eq %struct.MB_MODE_INFO* %618, null
  br i1 %621, label %626, label %622

622:                                              ; preds = %607
  %623 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %618, i64 0, i32 23
  %624 = load i8, i8* %623, align 8
  %625 = sext i8 %624 to i64
  br label %626

626:                                              ; preds = %622, %607
  %627 = phi i64 [ %625, %622 ], [ 0, %607 ]
  %628 = icmp eq %struct.MB_MODE_INFO* %620, null
  br i1 %628, label %633, label %629

629:                                              ; preds = %626
  %630 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %620, i64 0, i32 23
  %631 = load i8, i8* %630, align 8
  %632 = sext i8 %631 to i64
  br label %633

633:                                              ; preds = %629, %626
  %634 = phi i64 [ %632, %629 ], [ 0, %626 ]
  %635 = add nsw i64 %634, %627
  %636 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %635, i64 0
  %637 = load i32, i32* %636, align 4
  %638 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %635, i64 1
  %639 = load i32, i32* %638, align 4
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %642 = load i32, i32* %641, align 8
  %643 = sext i32 %642 to i64
  %644 = mul nsw i64 %643, %640
  %645 = add nsw i64 %644, 256
  %646 = ashr i64 %645, 9
  %647 = sext i32 %637 to i64
  %648 = mul nsw i64 %643, %647
  %649 = add nsw i64 %648, 256
  %650 = ashr i64 %649, 9
  store i32 0, i32* %23, align 8
  %651 = bitcast i64* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %651, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %27, align 8
  store i32 0, i32* %28, align 4
  %652 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %187
  %653 = load i8, i8* %652, align 1
  %654 = zext i8 %653 to i32
  %655 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %656 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %657 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %187
  %658 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %659 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %660 = icmp eq i64 %573, 9223372036854775807
  %661 = bitcast i32* %19 to i8*
  %662 = bitcast %struct.RD_STATS* %20 to i8*
  %663 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %20, i64 0, i32 0
  %664 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %20, i64 0, i32 5
  %665 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %20, i64 0, i32 1
  %666 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %20, i64 0, i32 3
  %667 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %20, i64 0, i32 4
  %668 = bitcast i64* %24 to <2 x i64>*
  br label %669

669:                                              ; preds = %772, %633
  %670 = phi i64 [ 0, %633 ], [ %693, %772 ]
  %671 = phi i64 [ 0, %633 ], [ %694, %772 ]
  %672 = phi i32 [ 0, %633 ], [ %695, %772 ]
  %673 = phi %struct.tx_size_rd_info_node* [ %557, %633 ], [ %696, %772 ]
  %674 = phi i64 [ %646, %633 ], [ %697, %772 ]
  %675 = phi i64 [ %650, %633 ], [ %698, %772 ]
  %676 = phi i32 [ 0, %633 ], [ %699, %772 ]
  %677 = phi i32 [ 0, %633 ], [ %773, %772 ]
  %678 = load i32, i32* %655, align 16
  %679 = icmp slt i32 %678, 0
  br i1 %679, label %680, label %685

680:                                              ; preds = %669
  %681 = load i32, i32* %656, align 8
  %682 = add nsw i32 %681, 3
  %683 = ashr i32 %678, %682
  %684 = add nsw i32 %683, %654
  br label %685

685:                                              ; preds = %680, %669
  %686 = phi i32 [ %684, %680 ], [ %654, %669 ]
  %687 = ashr i32 %686, 2
  %688 = icmp slt i32 %677, %687
  br i1 %688, label %689, label %776

689:                                              ; preds = %685
  %690 = load i8, i8* %657, align 1
  %691 = zext i8 %690 to i32
  br label %692

692:                                              ; preds = %749, %689
  %693 = phi i64 [ %750, %749 ], [ %670, %689 ]
  %694 = phi i64 [ %752, %749 ], [ %671, %689 ]
  %695 = phi i32 [ %751, %749 ], [ %672, %689 ]
  %696 = phi %struct.tx_size_rd_info_node* [ %770, %749 ], [ %673, %689 ]
  %697 = phi i64 [ %759, %749 ], [ %674, %689 ]
  %698 = phi i64 [ %766, %749 ], [ %675, %689 ]
  %699 = phi i32 [ %767, %749 ], [ %676, %689 ]
  %700 = phi i32 [ %771, %749 ], [ 0, %689 ]
  %701 = load i32, i32* %658, align 8
  %702 = icmp slt i32 %701, 0
  br i1 %702, label %703, label %708

703:                                              ; preds = %692
  %704 = load i32, i32* %659, align 4
  %705 = add nsw i32 %704, 3
  %706 = ashr i32 %701, %705
  %707 = add nsw i32 %706, %691
  br label %708

708:                                              ; preds = %703, %692
  %709 = phi i32 [ %707, %703 ], [ %691, %692 ]
  %710 = ashr i32 %709, 2
  %711 = icmp slt i32 %700, %710
  br i1 %711, label %712, label %772

712:                                              ; preds = %708
  br i1 %660, label %717, label %713

713:                                              ; preds = %712
  %714 = icmp slt i64 %697, %698
  %715 = select i1 %714, i64 %697, i64 %698
  %716 = sub nsw i64 %573, %715
  br label %717

717:                                              ; preds = %713, %712
  %718 = phi i64 [ %716, %713 ], [ 9223372036854775807, %712 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %661) #6
  store i32 1, i32* %19, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %662) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %662, i8 -86, i64 40, i1 false) #6
  call fastcc void @select_tx_block(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %677, i32 %700, i32 %699, i8 zeroext %610, i32 %608, i8 zeroext %3, i8* nonnull %582, i8* nonnull %583, i8* nonnull %584, i8* nonnull %585, %struct.RD_STATS* nonnull %20, i64 9223372036854775807, i64 %718, i32* nonnull %19, i8 zeroext %574, %struct.tx_size_rd_info_node* %696) #6
  %719 = load i32, i32* %19, align 4
  %720 = icmp eq i32 %719, 0
  br i1 %720, label %774, label %721

721:                                              ; preds = %717
  %722 = load i32, i32* %663, align 8
  %723 = icmp eq i32 %722, 2147483647
  br i1 %723, label %774, label %724

724:                                              ; preds = %721
  %725 = load i32, i32* %23, align 8
  %726 = icmp eq i32 %725, 2147483647
  br i1 %726, label %727, label %728

727:                                              ; preds = %724
  store i32 2147483647, i32* %23, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %668, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  br label %749

728:                                              ; preds = %724
  %729 = sext i32 %725 to i64
  %730 = sext i32 %722 to i64
  %731 = add nsw i64 %729, %730
  %732 = icmp slt i64 %731, 2147483647
  %733 = select i1 %732, i64 %731, i64 2147483647
  %734 = trunc i64 %733 to i32
  store i32 %734, i32* %23, align 8
  %735 = load i32, i32* %28, align 4
  %736 = icmp eq i32 %735, 0
  br i1 %736, label %737, label %739

737:                                              ; preds = %728
  %738 = load i32, i32* %664, align 4
  store i32 %738, i32* %28, align 4
  br label %739

739:                                              ; preds = %737, %728
  %740 = load i64, i64* %665, align 8
  %741 = load i64, i64* %24, align 8
  %742 = add nsw i64 %741, %740
  store i64 %742, i64* %24, align 8
  %743 = load i64, i64* %666, align 8
  %744 = load i64, i64* %26, align 8
  %745 = add nsw i64 %744, %743
  store i64 %745, i64* %26, align 8
  %746 = load i32, i32* %667, align 8
  %747 = load i32, i32* %27, align 8
  %748 = and i32 %747, %746
  store i32 %748, i32* %27, align 8
  br label %749

749:                                              ; preds = %739, %727
  %750 = phi i64 [ %742, %739 ], [ 9223372036854775807, %727 ]
  %751 = phi i32 [ %734, %739 ], [ 2147483647, %727 ]
  %752 = phi i64 [ %745, %739 ], [ 9223372036854775807, %727 ]
  %753 = load i32, i32* %641, align 8
  %754 = sext i32 %753 to i64
  %755 = mul nsw i64 %754, %640
  %756 = add nsw i64 %755, 256
  %757 = ashr i64 %756, 9
  %758 = shl i64 %752, 7
  %759 = add nsw i64 %757, %758
  %760 = add nsw i32 %751, %637
  %761 = sext i32 %760 to i64
  %762 = mul nsw i64 %754, %761
  %763 = add nsw i64 %762, 256
  %764 = ashr i64 %763, 9
  %765 = shl i64 %750, 7
  %766 = add nsw i64 %764, %765
  %767 = add nsw i32 %699, %616
  %768 = icmp eq %struct.tx_size_rd_info_node* %696, null
  %769 = getelementptr inbounds %struct.tx_size_rd_info_node, %struct.tx_size_rd_info_node* %696, i64 1
  %770 = select i1 %768, %struct.tx_size_rd_info_node* null, %struct.tx_size_rd_info_node* %769
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %662) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %661) #6
  %771 = add nsw i32 %700, %615
  br label %692

772:                                              ; preds = %708
  %773 = add nsw i32 %677, %613
  br label %669

774:                                              ; preds = %721, %717
  store i32 2147483647, i32* %23, align 8
  %775 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %775, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %662) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %661) #6
  br label %1002

776:                                              ; preds = %685
  %777 = icmp eq i32 %672, 2147483647
  br i1 %777, label %1002, label %778

778:                                              ; preds = %776
  %779 = icmp sle i64 %674, %675
  %780 = zext i1 %779 to i32
  store i32 %780, i32* %27, align 8
  br i1 %560, label %781, label %960

781:                                              ; preds = %778
  %782 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 11
  %783 = load i32, i32* %782, align 4
  %784 = icmp eq i32 %783, 0
  br i1 %784, label %960, label %785

785:                                              ; preds = %781
  %786 = icmp slt i64 %4, 0
  br i1 %786, label %787, label %789

787:                                              ; preds = %785
  store i32 2147483647, i32* %23, align 8
  %788 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %788, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  br label %1002

789:                                              ; preds = %785
  store i32 0, i32* %23, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %651, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %27, align 8
  store i32 0, i32* %28, align 4
  %790 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %791 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %790, align 8
  %792 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %791, align 8
  %793 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %792, i64 0, i32 28
  %794 = load i16, i16* %793, align 1
  %795 = and i16 %794, 7
  %796 = zext i16 %795 to i64
  %797 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %796
  %798 = load i32, i32* %797, align 4
  %799 = icmp eq i32 %798, 0
  %800 = zext i8 %610 to i32
  %801 = select i1 %799, i32 %800, i32 0
  %802 = trunc i32 %801 to i8
  %803 = zext i32 %801 to i64
  %804 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %803
  %805 = load i32, i32* %804, align 4
  %806 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %803
  %807 = load i32, i32* %806, align 4
  %808 = mul nsw i32 %807, %805
  %809 = load i8, i8* %558, align 4
  %810 = icmp eq i8 %809, 2
  br i1 %810, label %824, label %811

811:                                              ; preds = %789
  %812 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 4
  %813 = load i32, i32* %812, align 4
  %814 = icmp ne i32 %813, 0
  %815 = add nsw i64 %187, -13
  %816 = icmp ult i64 %815, 3
  %817 = and i1 %816, %814
  br i1 %817, label %824, label %818

818:                                              ; preds = %811
  %819 = icmp eq i8 %580, %577
  %820 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 1
  %821 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 0
  %822 = select i1 %819, i32* %821, i32* %820
  %823 = load i32, i32* %822, align 4
  br label %824

824:                                              ; preds = %818, %811, %789
  %825 = phi i32 [ %823, %818 ], [ 2, %789 ], [ 2, %811 ]
  %826 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %826) #6
  %827 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %826, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %827) #6
  %828 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %827, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %828) #6
  %829 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %828, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %829) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %829, i8 -86, i64 32, i1 false) #6
  call void @av1_get_entropy_contexts(i8 zeroext %3, %struct.macroblockd_plane* %575, i8* nonnull %826, i8* nonnull %827) #6
  %830 = load i8*, i8** %586, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %828, i8* align 1 %830, i64 %588, i1 false) #6
  %831 = load i8*, i8** %589, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %829, i8* align 1 %831, i64 %591, i1 false) #6
  %832 = bitcast %struct.RD_STATS* %14 to i8*
  %833 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 0
  %834 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 1
  %835 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 4
  %836 = bitcast i64* %834 to i8*
  %837 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 5
  %838 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %14, i64 0, i32 3
  %839 = bitcast %struct.RD_STATS* %14 to i64*
  %840 = bitcast i64* %24 to <2 x i64>*
  br label %841

841:                                              ; preds = %908, %824
  %842 = phi i32 [ 0, %824 ], [ %905, %908 ]
  %843 = phi i32 [ 0, %824 ], [ %909, %908 ]
  %844 = phi i64 [ 0, %824 ], [ %904, %908 ]
  br label %845

845:                                              ; preds = %880, %841
  %846 = phi i32 [ %906, %880 ], [ 0, %841 ]
  %847 = phi i32 [ %905, %880 ], [ %842, %841 ]
  %848 = phi i64 [ %904, %880 ], [ %844, %841 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %832) #6
  store i64 -6148914694099828736, i64* %839, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %836, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %835, align 8
  store i32 0, i32* %837, align 4
  %849 = sub nsw i64 %4, %848
  call fastcc void @tx_block_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %843, i32 %846, i32 %847, i8 zeroext %802, i8 zeroext %3, i32 %825, i8* nonnull %826, i8* nonnull %827, i8* nonnull %828, i8* nonnull %829, i64 %849, %struct.RD_STATS* nonnull %14) #6
  %850 = load i32, i32* %833, align 8
  %851 = icmp eq i32 %850, 2147483647
  br i1 %851, label %911, label %852

852:                                              ; preds = %845
  %853 = load i32, i32* %23, align 8
  %854 = icmp eq i32 %853, 2147483647
  br i1 %854, label %855, label %859

855:                                              ; preds = %852
  store i32 2147483647, i32* %23, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %840, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  %856 = load i64, i64* %834, align 8
  %857 = load i64, i64* %838, align 8
  %858 = sext i32 %850 to i64
  br label %880

859:                                              ; preds = %852
  %860 = sext i32 %853 to i64
  %861 = sext i32 %850 to i64
  %862 = add nsw i64 %860, %861
  %863 = icmp slt i64 %862, 2147483647
  %864 = select i1 %863, i64 %862, i64 2147483647
  %865 = trunc i64 %864 to i32
  store i32 %865, i32* %23, align 8
  %866 = load i32, i32* %28, align 4
  %867 = icmp eq i32 %866, 0
  br i1 %867, label %868, label %870

868:                                              ; preds = %859
  %869 = load i32, i32* %837, align 4
  store i32 %869, i32* %28, align 4
  br label %870

870:                                              ; preds = %868, %859
  %871 = load i64, i64* %834, align 8
  %872 = load i64, i64* %24, align 8
  %873 = add nsw i64 %872, %871
  store i64 %873, i64* %24, align 8
  %874 = load i64, i64* %838, align 8
  %875 = load i64, i64* %26, align 8
  %876 = add nsw i64 %875, %874
  store i64 %876, i64* %26, align 8
  %877 = load i32, i32* %835, align 8
  %878 = load i32, i32* %27, align 8
  %879 = and i32 %878, %877
  store i32 %879, i32* %27, align 8
  br label %880

880:                                              ; preds = %870, %855
  %881 = phi i32 [ %879, %870 ], [ 0, %855 ]
  %882 = phi i64 [ %873, %870 ], [ 9223372036854775807, %855 ]
  %883 = phi i32 [ %865, %870 ], [ 2147483647, %855 ]
  %884 = phi i64 [ %876, %870 ], [ 9223372036854775807, %855 ]
  %885 = phi i64 [ %861, %870 ], [ %858, %855 ]
  %886 = phi i64 [ %874, %870 ], [ %857, %855 ]
  %887 = phi i64 [ %871, %870 ], [ %856, %855 ]
  %888 = load i32, i32* %641, align 8
  %889 = sext i32 %888 to i64
  %890 = mul nsw i64 %885, %889
  %891 = add nsw i64 %890, 256
  %892 = ashr i64 %891, 9
  %893 = shl nsw i64 %887, 7
  %894 = add nsw i64 %892, %893
  %895 = load i32, i32* %837, align 4
  %896 = sext i32 %895 to i64
  %897 = mul nsw i64 %896, %889
  %898 = add nsw i64 %897, 256
  %899 = ashr i64 %898, 9
  %900 = shl nsw i64 %886, 7
  %901 = add nsw i64 %899, %900
  %902 = icmp slt i64 %894, %901
  %903 = select i1 %902, i64 %894, i64 %901
  %904 = add nsw i64 %903, %848
  %905 = add nsw i32 %847, %808
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %832) #6
  %906 = add nsw i32 %846, %807
  %907 = icmp slt i32 %906, %578
  br i1 %907, label %845, label %908

908:                                              ; preds = %880
  %909 = add nsw i32 %843, %805
  %910 = icmp slt i32 %909, %581
  br i1 %910, label %841, label %913

911:                                              ; preds = %845
  store i32 2147483647, i32* %23, align 8
  %912 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %912, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %832) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %829) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %828) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %827) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %826) #6
  br label %1002

913:                                              ; preds = %908
  %914 = sext i32 %888 to i64
  %915 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %617, align 16
  %916 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %619, align 8
  %917 = icmp eq %struct.MB_MODE_INFO* %915, null
  br i1 %917, label %922, label %918

918:                                              ; preds = %913
  %919 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %915, i64 0, i32 23
  %920 = load i8, i8* %919, align 8
  %921 = sext i8 %920 to i64
  br label %922

922:                                              ; preds = %918, %913
  %923 = phi i64 [ %921, %918 ], [ 0, %913 ]
  %924 = icmp eq %struct.MB_MODE_INFO* %916, null
  br i1 %924, label %929, label %925

925:                                              ; preds = %922
  %926 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %916, i64 0, i32 23
  %927 = load i8, i8* %926, align 8
  %928 = sext i8 %927 to i64
  br label %929

929:                                              ; preds = %925, %922
  %930 = phi i64 [ %928, %925 ], [ 0, %922 ]
  %931 = add nsw i64 %930, %923
  %932 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %931, i64 0
  %933 = load i32, i32* %932, align 4
  %934 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %931, i64 1
  %935 = load i32, i32* %934, align 4
  %936 = sext i32 %935 to i64
  %937 = mul nsw i64 %936, %914
  %938 = add nsw i64 %937, 256
  %939 = ashr i64 %938, 9
  %940 = shl nsw i64 %884, 7
  %941 = add nsw i64 %939, %940
  %942 = add nsw i32 %933, %883
  %943 = sext i32 %942 to i64
  %944 = mul nsw i64 %943, %914
  %945 = add nsw i64 %944, 256
  %946 = ashr i64 %945, 9
  %947 = shl nsw i64 %882, 7
  %948 = add nsw i64 %946, %947
  %949 = icmp slt i64 %941, %948
  br i1 %949, label %950, label %951

950:                                              ; preds = %929
  store i32 0, i32* %23, align 8
  store i64 %884, i64* %24, align 8
  store i32 1, i32* %27, align 8
  br label %951

951:                                              ; preds = %950, %929
  %952 = phi i64 [ %884, %950 ], [ %882, %929 ]
  %953 = phi i32 [ 0, %950 ], [ %883, %929 ]
  %954 = phi i32 [ 1, %950 ], [ %881, %929 ]
  %955 = phi i64 [ %941, %950 ], [ %948, %929 ]
  %956 = icmp sgt i64 %955, %4
  br i1 %956, label %959, label %957

957:                                              ; preds = %951
  store i32 2147483647, i32* %23, align 8
  %958 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %958, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %829) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %828) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %827) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %826) #6
  br label %1002

959:                                              ; preds = %951
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %829) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %828) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %827) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %826) #6
  br label %960

960:                                              ; preds = %959, %781, %778
  %961 = phi i64 [ %952, %959 ], [ %670, %781 ], [ %670, %778 ]
  %962 = phi i32 [ %953, %959 ], [ %672, %781 ], [ %672, %778 ]
  %963 = phi i64 [ %884, %959 ], [ %671, %781 ], [ %671, %778 ]
  %964 = phi i32 [ %954, %959 ], [ %780, %781 ], [ %780, %778 ]
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %974, label %966

966:                                              ; preds = %960
  %967 = load i32, i32* %641, align 8
  %968 = sext i32 %967 to i64
  %969 = mul nsw i64 %968, %640
  %970 = add nsw i64 %969, 256
  %971 = ashr i64 %970, 9
  %972 = shl i64 %963, 7
  %973 = add nsw i64 %971, %972
  br label %1002

974:                                              ; preds = %960
  %975 = add nsw i32 %962, %637
  %976 = sext i32 %975 to i64
  %977 = load i32, i32* %641, align 8
  %978 = sext i32 %977 to i64
  %979 = mul nsw i64 %978, %976
  %980 = add nsw i64 %979, 256
  %981 = ashr i64 %980, 9
  %982 = shl nsw i64 %961, 7
  %983 = add nsw i64 %981, %982
  %984 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %985 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %984, align 8
  %986 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %985, align 8
  %987 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %986, i64 0, i32 28
  %988 = load i16, i16* %987, align 1
  %989 = and i16 %988, 7
  %990 = zext i16 %989 to i64
  %991 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %990
  %992 = load i32, i32* %991, align 4
  %993 = icmp eq i32 %992, 0
  br i1 %993, label %994, label %1002

994:                                              ; preds = %974
  %995 = mul nsw i64 %978, %640
  %996 = add nsw i64 %995, 256
  %997 = ashr i64 %996, 9
  %998 = shl nsw i64 %963, 7
  %999 = add nsw i64 %997, %998
  %1000 = icmp slt i64 %983, %999
  %1001 = select i1 %1000, i64 %983, i64 %999
  br label %1002

1002:                                             ; preds = %774, %776, %787, %911, %957, %966, %974, %994
  %1003 = phi i64 [ 9223372036854775807, %774 ], [ 9223372036854775807, %776 ], [ %973, %966 ], [ %983, %974 ], [ %1001, %994 ], [ 9223372036854775807, %787 ], [ 9223372036854775807, %911 ], [ 9223372036854775807, %957 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %585) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %584) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %583) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %582) #6
  %1004 = icmp eq i64 %1003, 9223372036854775807
  br i1 %1004, label %1005, label %1007

1005:                                             ; preds = %562, %1002
  store i32 2147483647, i32* %23, align 8
  %1006 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %1006, align 8
  store i64 9223372036854775807, i64* %26, align 8
  store i32 0, i32* %27, align 8
  store i32 0, i32* %28, align 4
  br label %1042

1007:                                             ; preds = %1002
  br i1 %286, label %1008, label %1042

1008:                                             ; preds = %1007
  %1009 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 2
  %1010 = load i32, i32* %1009, align 4
  %1011 = icmp slt i32 %1010, 8
  %1012 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 1
  %1013 = load i32, i32* %1012, align 8
  br i1 %1011, label %1014, label %1018

1014:                                             ; preds = %1008
  %1015 = add nsw i32 %1013, %1010
  %1016 = srem i32 %1015, 8
  %1017 = add nsw i32 %1010, 1
  store i32 %1017, i32* %1009, align 4
  br label %1021

1018:                                             ; preds = %1008
  %1019 = add nsw i32 %1013, 1
  %1020 = srem i32 %1019, 8
  store i32 %1020, i32* %1012, align 8
  br label %1021

1021:                                             ; preds = %1014, %1018
  %1022 = phi i32 [ %1016, %1014 ], [ %1013, %1018 ]
  %1023 = sext i32 %1022 to i64
  %1024 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %1025 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %1024, align 8
  %1026 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %1025, align 8
  %1027 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %1023, i32 5
  store i32 %288, i32* %1027, align 8
  %1028 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1026, i64 0, i32 24
  %1029 = load i8, i8* %1028, align 1
  %1030 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %1023, i32 0
  store i8 %1029, i8* %1030, align 8
  %1031 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %1023, i32 2, i64 0
  %1032 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %1033 = sext i32 %285 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1031, i8* align 4 %1032, i64 %1033, i1 false) #6
  %1034 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %1023, i32 1, i64 0
  %1035 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %1026, i64 0, i32 25, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1034, i8* align 2 %1035, i64 16, i1 false) #6
  %1036 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %1023, i32 3, i64 0
  %1037 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %1038 = load i8*, i8** %1037, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1036, i8* align 1 %1038, i64 %1033, i1 false) #6
  %1039 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %289, i64 0, i32 0, i64 %1023, i32 4
  %1040 = bitcast %struct.RD_STATS* %1039 to i8*
  %1041 = bitcast %struct.RD_STATS* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1040, i8* align 8 %1041, i64 40, i1 false) #6
  br label %1042

1042:                                             ; preds = %1007, %1021, %1005
  call void @llvm.lifetime.end.p0i8(i64 3360, i8* nonnull %338) #6
  br label %1043

1043:                                             ; preds = %300, %316, %1042
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %290) #6
  br label %1044

1044:                                             ; preds = %162, %1043, %266
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @predict_skip_txfm(%struct.macroblock* nocapture readonly, i8 zeroext, i64* nocapture, i32) unnamed_addr #0 {
  %5 = alloca [1024 x i32], align 32
  %6 = alloca %struct.txfm_param, align 4
  %7 = zext i8 %1 to i64
  %8 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %7
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 15
  %15 = load i32, i32* %14, align 16
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 40
  %17 = load i32, i32* %16, align 16
  %18 = tail call signext i16 @av1_dc_quant_QTX(i32 %15, i32 0, i32 %17) #6
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 20
  %20 = load i32, i32* %19, align 16
  %21 = icmp sgt i32 %20, -1
  br i1 %21, label %32, label %22

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = add nsw i32 %24, 3
  %26 = ashr i32 %20, %25
  %27 = add nsw i32 %26, %13
  %28 = icmp slt i32 %27, 0
  %29 = icmp sgt i32 %27, %13
  %30 = select i1 %29, i32 %13, i32 %27
  %31 = select i1 %28, i32 0, i32 %30
  br label %32

32:                                               ; preds = %22, %4
  %33 = phi i32 [ %31, %22 ], [ %13, %4 ]
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 18
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, -1
  br i1 %36, label %47, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = add nsw i32 %39, 3
  %41 = ashr i32 %35, %40
  %42 = add nsw i32 %41, %10
  %43 = icmp slt i32 %42, 0
  %44 = icmp sgt i32 %42, %10
  %45 = select i1 %44, i32 %10, i32 %42
  %46 = select i1 %43, i32 0, i32 %45
  br label %47

47:                                               ; preds = %32, %37
  %48 = phi i32 [ %46, %37 ], [ %10, %32 ]
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 0
  %50 = load i16*, i16** %49, align 8
  %51 = load i64 (i16*, i32, i32, i32)*, i64 (i16*, i32, i32, i32)** @aom_sum_squares_2d_i16, align 8
  %52 = tail call i64 %51(i16* %50, i32 %10, i32 %48, i32 %33) #6
  store i64 %52, i64* %2, align 8
  %53 = sext i16 %18 to i32
  %54 = ashr i16 %18, 3
  %55 = sext i16 %54 to i64
  %56 = mul nsw i64 %55, %55
  %57 = lshr i64 %56, 3
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 57, i32 7
  %59 = load i32, i32* %58, align 4
  %60 = icmp ugt i32 %59, 1
  br i1 %60, label %61, label %64

61:                                               ; preds = %47
  %62 = icmp sle i64 %52, %57
  %63 = zext i1 %62 to i32
  br label %179

64:                                               ; preds = %47
  %65 = zext i8 %9 to i64
  %66 = sdiv i64 %52, %65
  %67 = zext i8 %12 to i64
  %68 = sdiv i64 %66, %67
  %69 = icmp sgt i64 %68, %57
  %70 = or i1 %60, %69
  %71 = xor i1 %69, true
  %72 = zext i1 %71 to i32
  br i1 %70, label %179, label %73

73:                                               ; preds = %64
  %74 = getelementptr inbounds [22 x i8], [22 x i8]* @max_predict_sf_tx_size, i64 0, i64 %7
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %76
  %80 = load i32, i32* %79, align 4
  %81 = bitcast [1024 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %81) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %81, i8 -86, i64 4096, i1 false)
  %82 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %82, i8 -86, i64 24, i1 false)
  store i8 0, i8* %82, align 4
  %83 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %6, i64 0, i32 1
  store i8 %75, i8* %83, align 1
  %84 = load i32, i32* %16, align 16
  %85 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %6, i64 0, i32 3
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %6, i64 0, i32 4
  store i32 0, i32* %86, align 4
  %87 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %6, i64 0, i32 2
  store i32 0, i32* %87, align 4
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 6
  %89 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %88, align 8
  %90 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %89, align 8
  %91 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %90, i64 0, i32 28
  %92 = load i16, i16* %91, align 1
  %93 = trunc i16 %92 to i8
  %94 = icmp sgt i8 %93, -1
  br i1 %94, label %95, label %100

95:                                               ; preds = %73
  %96 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %90, i64 0, i32 6, i64 0
  %97 = load i8, i8* %96, align 8
  %98 = icmp sgt i8 %97, 0
  %99 = zext i1 %98 to i32
  br label %100

100:                                              ; preds = %73, %95
  %101 = phi i32 [ 1, %73 ], [ %99, %95 ]
  %102 = lshr i64 399376, %76
  %103 = and i64 %102, 1
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %122

105:                                              ; preds = %100
  %106 = lshr i64 99848, %76
  %107 = and i64 %106, 1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %105
  %110 = trunc i32 %101 to i8
  br label %122

111:                                              ; preds = %105
  %112 = icmp eq i32 %3, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %111
  %114 = icmp eq i32 %101, 0
  %115 = select i1 %114, i8 2, i8 1
  br label %122

116:                                              ; preds = %111
  %117 = zext i32 %101 to i64
  %118 = lshr i64 394756, %76
  %119 = and i64 %118, 1
  %120 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %117, i64 %119
  %121 = load i8, i8* %120, align 1
  br label %122

122:                                              ; preds = %116, %113, %109, %100
  %123 = phi i8 [ %110, %109 ], [ %115, %113 ], [ %121, %116 ], [ 0, %100 ]
  %124 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %6, i64 0, i32 5
  store i8 %123, i8* %124, align 4
  %125 = icmp eq i32 %84, 8
  %126 = icmp eq i32 %84, 10
  %127 = select i1 %126, i64 1, i64 2
  %128 = select i1 %125, i64 0, i64 %127
  %129 = getelementptr inbounds [3 x [22 x i32]], [3 x [22 x i32]]* @skip_pred_threshold, i64 0, i64 %128, i64 %7
  %130 = load i32, i32* %129, align 4
  %131 = load i16*, i16** %49, align 16
  %132 = mul i32 %80, %78
  %133 = load i32, i32* %14, align 16
  %134 = tail call signext i16 @av1_ac_quant_QTX(i32 %133, i32 0, i32 %84) #6
  %135 = mul i32 %130, %53
  %136 = sext i16 %134 to i32
  %137 = mul i32 %130, %136
  %138 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 0
  %139 = icmp sgt i32 %132, 1
  %140 = mul nsw i32 %78, %10
  %141 = sext i32 %140 to i64
  %142 = sext i32 %80 to i64
  %143 = zext i8 %9 to i64
  %144 = zext i32 %132 to i64
  br label %145

145:                                              ; preds = %173, %122
  %146 = phi i32 [ 0, %122 ], [ %175, %173 ]
  %147 = phi i16* [ %131, %122 ], [ %174, %173 ]
  br label %148

148:                                              ; preds = %145, %170
  %149 = phi i64 [ 0, %145 ], [ %171, %170 ]
  %150 = getelementptr inbounds i16, i16* %147, i64 %149
  call void @av1_fwd_txfm(i16* %150, i32* nonnull %138, i32 %10, %struct.txfm_param* nonnull %6) #6
  %151 = load i32, i32* %138, align 32
  %152 = icmp slt i32 %151, 0
  %153 = sub nsw i32 0, %151
  %154 = select i1 %152, i32 %153, i32 %151
  %155 = shl i32 %154, 7
  %156 = icmp ult i32 %155, %135
  br i1 %156, label %157, label %177

157:                                              ; preds = %148
  br i1 %139, label %160, label %170

158:                                              ; preds = %160
  %159 = icmp eq i64 %169, %144
  br i1 %159, label %170, label %160

160:                                              ; preds = %157, %158
  %161 = phi i64 [ %169, %158 ], [ 1, %157 ]
  %162 = getelementptr inbounds [1024 x i32], [1024 x i32]* %5, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp slt i32 %163, 0
  %165 = sub nsw i32 0, %163
  %166 = select i1 %164, i32 %165, i32 %163
  %167 = shl i32 %166, 7
  %168 = icmp ult i32 %167, %137
  %169 = add nuw nsw i64 %161, 1
  br i1 %168, label %158, label %177

170:                                              ; preds = %158, %157
  %171 = add i64 %149, %142
  %172 = icmp slt i64 %171, %143
  br i1 %172, label %148, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds i16, i16* %147, i64 %141
  %175 = add nsw i32 %146, %78
  %176 = icmp slt i32 %175, %13
  br i1 %176, label %145, label %177

177:                                              ; preds = %173, %148, %160
  %178 = phi i32 [ 0, %160 ], [ 0, %148 ], [ 1, %173 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #6
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %81) #6
  br label %179

179:                                              ; preds = %61, %64, %177
  %180 = phi i32 [ %178, %177 ], [ %72, %64 ], [ %63, %61 ]
  ret i32 %180
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @set_skip_txfm(%struct.macroblock*, %struct.RD_STATS* nocapture, i32, i64) unnamed_addr #4 {
  %5 = alloca [32 x i8], align 16
  %6 = alloca [32 x i8], align 16
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 6
  %8 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %7, align 8
  %9 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %8, align 8
  %10 = trunc i32 %2 to i8
  %11 = and i32 %2, 255
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = add nsw i32 %15, -4
  %17 = shl i32 1, %16
  %18 = sext i32 %2 to i64
  %19 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 15
  %22 = load i8*, i8** %21, align 8
  %23 = sext i32 %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 0, i64 %23, i1 false)
  %24 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %9, i64 0, i32 24
  %25 = icmp eq i32 %16, 31
  call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %20, i64 17, i1 false)
  br i1 %25, label %84, label %26

26:                                               ; preds = %4
  %27 = icmp sgt i64 %23, 1
  %28 = select i1 %27, i64 %23, i64 1
  %29 = icmp ult i64 %28, 32
  br i1 %29, label %30, label %32

30:                                               ; preds = %82, %26
  %31 = phi i64 [ 0, %26 ], [ %33, %82 ]
  br label %309

32:                                               ; preds = %26
  %33 = and i64 %28, 9223372036854775776
  %34 = add nsw i64 %33, -32
  %35 = lshr exact i64 %34, 5
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 1
  %38 = icmp eq i64 %34, 0
  br i1 %38, label %68, label %39

39:                                               ; preds = %32
  %40 = sub nuw nsw i64 %36, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %65, %41 ]
  %43 = phi i64 [ %40, %39 ], [ %66, %41 ]
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 58, i32 1, i64 %42
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1
  %50 = or <16 x i8> %46, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %51 = or <16 x i8> %49, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %52 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %52, align 1
  %53 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %53, align 1
  %54 = or i64 %42, 32
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 58, i32 1, i64 %54
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = getelementptr inbounds i8, i8* %55, i64 16
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = or <16 x i8> %57, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %62 = or <16 x i8> %60, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %63 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %63, align 1
  %64 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %64, align 1
  %65 = add i64 %42, 64
  %66 = add i64 %43, -2
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %41, !llvm.loop !13

68:                                               ; preds = %41, %32
  %69 = phi i64 [ 0, %32 ], [ %65, %41 ]
  %70 = icmp eq i64 %37, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 58, i32 1, i64 %69
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1
  %75 = getelementptr inbounds i8, i8* %72, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = or <16 x i8> %74, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %79 = or <16 x i8> %77, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %80 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %80, align 1
  %81 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %81, align 1
  br label %82

82:                                               ; preds = %68, %71
  %83 = icmp eq i64 %28, %33
  br i1 %83, label %84, label %30

84:                                               ; preds = %309, %82, %4
  %85 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 4
  store i32 1, i32* %85, align 8
  %86 = shl i64 %3, 4
  %87 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 3
  store i64 %86, i64* %87, align 8
  %88 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 1
  store i64 %86, i64* %88, align 8
  %89 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %89) #6
  %90 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %89, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %90) #6
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i32 4, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %90, i8 -86, i64 32, i1 false)
  call void @av1_get_entropy_contexts(i8 zeroext %10, %struct.macroblockd_plane* %91, i8* nonnull %89, i8* nonnull %90) #6
  %92 = zext i8 %20 to i64
  %93 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %92
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i64
  %99 = add nuw nsw i64 %95, 1
  %100 = add nuw nsw i64 %99, %98
  %101 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %92
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %92
  %104 = load i32, i32* %103, align 4
  %105 = sext i32 %102 to i64
  %106 = lshr i64 %100, 1
  %107 = sext i32 %104 to i64
  %108 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %92
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %109, %10
  br i1 %110, label %289, label %111

111:                                              ; preds = %84
  %112 = icmp sgt i64 %105, 1
  %113 = select i1 %112, i64 %105, i64 1
  %114 = icmp ult i64 %113, 8
  br i1 %114, label %181, label %115

115:                                              ; preds = %111
  %116 = and i64 %113, 9223372036854775800
  %117 = add nsw i64 %116, -8
  %118 = lshr exact i64 %117, 3
  %119 = add nuw nsw i64 %118, 1
  %120 = and i64 %119, 1
  %121 = icmp eq i64 %117, 0
  br i1 %121, label %153, label %122

122:                                              ; preds = %115
  %123 = sub nuw nsw i64 %119, %120
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ 0, %122 ], [ %150, %124 ]
  %126 = phi <4 x i32> [ zeroinitializer, %122 ], [ %148, %124 ]
  %127 = phi <4 x i32> [ zeroinitializer, %122 ], [ %149, %124 ]
  %128 = phi i64 [ %123, %122 ], [ %151, %124 ]
  %129 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %125
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 16
  %132 = getelementptr inbounds i8, i8* %129, i64 4
  %133 = bitcast i8* %132 to <4 x i8>*
  %134 = load <4 x i8>, <4 x i8>* %133, align 4
  %135 = sext <4 x i8> %131 to <4 x i32>
  %136 = sext <4 x i8> %134 to <4 x i32>
  %137 = or <4 x i32> %126, %135
  %138 = or <4 x i32> %127, %136
  %139 = or i64 %125, 8
  %140 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %139
  %141 = bitcast i8* %140 to <4 x i8>*
  %142 = load <4 x i8>, <4 x i8>* %141, align 8
  %143 = getelementptr inbounds i8, i8* %140, i64 4
  %144 = bitcast i8* %143 to <4 x i8>*
  %145 = load <4 x i8>, <4 x i8>* %144, align 4
  %146 = sext <4 x i8> %142 to <4 x i32>
  %147 = sext <4 x i8> %145 to <4 x i32>
  %148 = or <4 x i32> %137, %146
  %149 = or <4 x i32> %138, %147
  %150 = add i64 %125, 16
  %151 = add i64 %128, -2
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %124, !llvm.loop !14

153:                                              ; preds = %124, %115
  %154 = phi <4 x i32> [ undef, %115 ], [ %148, %124 ]
  %155 = phi <4 x i32> [ undef, %115 ], [ %149, %124 ]
  %156 = phi i64 [ 0, %115 ], [ %150, %124 ]
  %157 = phi <4 x i32> [ zeroinitializer, %115 ], [ %148, %124 ]
  %158 = phi <4 x i32> [ zeroinitializer, %115 ], [ %149, %124 ]
  %159 = icmp eq i64 %120, 0
  br i1 %159, label %171, label %160

160:                                              ; preds = %153
  %161 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %156
  %162 = getelementptr inbounds i8, i8* %161, i64 4
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 4
  %165 = sext <4 x i8> %164 to <4 x i32>
  %166 = or <4 x i32> %158, %165
  %167 = bitcast i8* %161 to <4 x i8>*
  %168 = load <4 x i8>, <4 x i8>* %167, align 8
  %169 = sext <4 x i8> %168 to <4 x i32>
  %170 = or <4 x i32> %157, %169
  br label %171

171:                                              ; preds = %153, %160
  %172 = phi <4 x i32> [ %154, %153 ], [ %170, %160 ]
  %173 = phi <4 x i32> [ %155, %153 ], [ %166, %160 ]
  %174 = or <4 x i32> %173, %172
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %176 = or <4 x i32> %174, %175
  %177 = shufflevector <4 x i32> %176, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %178 = or <4 x i32> %176, %177
  %179 = extractelement <4 x i32> %178, i32 0
  %180 = icmp eq i64 %113, %116
  br i1 %180, label %193, label %181

181:                                              ; preds = %171, %111
  %182 = phi i64 [ 0, %111 ], [ %116, %171 ]
  %183 = phi i32 [ 0, %111 ], [ %179, %171 ]
  br label %184

184:                                              ; preds = %181, %184
  %185 = phi i64 [ %191, %184 ], [ %182, %181 ]
  %186 = phi i32 [ %190, %184 ], [ %183, %181 ]
  %187 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 %185
  %188 = load i8, i8* %187, align 1
  %189 = sext i8 %188 to i32
  %190 = or i32 %186, %189
  %191 = add nuw nsw i64 %185, 1
  %192 = icmp slt i64 %191, %105
  br i1 %192, label %184, label %193, !llvm.loop !15

193:                                              ; preds = %184, %171
  %194 = phi i32 [ %179, %171 ], [ %190, %184 ]
  %195 = and i32 %194, 7
  %196 = icmp sgt i64 %107, 1
  %197 = select i1 %196, i64 %107, i64 1
  %198 = icmp ult i64 %197, 8
  br i1 %198, label %265, label %199

199:                                              ; preds = %193
  %200 = and i64 %197, 9223372036854775800
  %201 = add nsw i64 %200, -8
  %202 = lshr exact i64 %201, 3
  %203 = add nuw nsw i64 %202, 1
  %204 = and i64 %203, 1
  %205 = icmp eq i64 %201, 0
  br i1 %205, label %237, label %206

206:                                              ; preds = %199
  %207 = sub nuw nsw i64 %203, %204
  br label %208

208:                                              ; preds = %208, %206
  %209 = phi i64 [ 0, %206 ], [ %234, %208 ]
  %210 = phi <4 x i32> [ zeroinitializer, %206 ], [ %232, %208 ]
  %211 = phi <4 x i32> [ zeroinitializer, %206 ], [ %233, %208 ]
  %212 = phi i64 [ %207, %206 ], [ %235, %208 ]
  %213 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %209
  %214 = bitcast i8* %213 to <4 x i8>*
  %215 = load <4 x i8>, <4 x i8>* %214, align 16
  %216 = getelementptr inbounds i8, i8* %213, i64 4
  %217 = bitcast i8* %216 to <4 x i8>*
  %218 = load <4 x i8>, <4 x i8>* %217, align 4
  %219 = sext <4 x i8> %215 to <4 x i32>
  %220 = sext <4 x i8> %218 to <4 x i32>
  %221 = or <4 x i32> %210, %219
  %222 = or <4 x i32> %211, %220
  %223 = or i64 %209, 8
  %224 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %223
  %225 = bitcast i8* %224 to <4 x i8>*
  %226 = load <4 x i8>, <4 x i8>* %225, align 8
  %227 = getelementptr inbounds i8, i8* %224, i64 4
  %228 = bitcast i8* %227 to <4 x i8>*
  %229 = load <4 x i8>, <4 x i8>* %228, align 4
  %230 = sext <4 x i8> %226 to <4 x i32>
  %231 = sext <4 x i8> %229 to <4 x i32>
  %232 = or <4 x i32> %221, %230
  %233 = or <4 x i32> %222, %231
  %234 = add i64 %209, 16
  %235 = add i64 %212, -2
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %208, !llvm.loop !16

237:                                              ; preds = %208, %199
  %238 = phi <4 x i32> [ undef, %199 ], [ %232, %208 ]
  %239 = phi <4 x i32> [ undef, %199 ], [ %233, %208 ]
  %240 = phi i64 [ 0, %199 ], [ %234, %208 ]
  %241 = phi <4 x i32> [ zeroinitializer, %199 ], [ %232, %208 ]
  %242 = phi <4 x i32> [ zeroinitializer, %199 ], [ %233, %208 ]
  %243 = icmp eq i64 %204, 0
  br i1 %243, label %255, label %244

244:                                              ; preds = %237
  %245 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %240
  %246 = getelementptr inbounds i8, i8* %245, i64 4
  %247 = bitcast i8* %246 to <4 x i8>*
  %248 = load <4 x i8>, <4 x i8>* %247, align 4
  %249 = sext <4 x i8> %248 to <4 x i32>
  %250 = or <4 x i32> %242, %249
  %251 = bitcast i8* %245 to <4 x i8>*
  %252 = load <4 x i8>, <4 x i8>* %251, align 8
  %253 = sext <4 x i8> %252 to <4 x i32>
  %254 = or <4 x i32> %241, %253
  br label %255

255:                                              ; preds = %237, %244
  %256 = phi <4 x i32> [ %238, %237 ], [ %254, %244 ]
  %257 = phi <4 x i32> [ %239, %237 ], [ %250, %244 ]
  %258 = or <4 x i32> %257, %256
  %259 = shufflevector <4 x i32> %258, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %260 = or <4 x i32> %258, %259
  %261 = shufflevector <4 x i32> %260, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %262 = or <4 x i32> %260, %261
  %263 = extractelement <4 x i32> %262, i32 0
  %264 = icmp eq i64 %197, %200
  br i1 %264, label %277, label %265

265:                                              ; preds = %255, %193
  %266 = phi i64 [ 0, %193 ], [ %200, %255 ]
  %267 = phi i32 [ 0, %193 ], [ %263, %255 ]
  br label %268

268:                                              ; preds = %265, %268
  %269 = phi i64 [ %275, %268 ], [ %266, %265 ]
  %270 = phi i32 [ %274, %268 ], [ %267, %265 ]
  %271 = getelementptr inbounds [32 x i8], [32 x i8]* %6, i64 0, i64 %269
  %272 = load i8, i8* %271, align 1
  %273 = sext i8 %272 to i32
  %274 = or i32 %270, %273
  %275 = add nuw nsw i64 %269, 1
  %276 = icmp slt i64 %275, %107
  br i1 %276, label %268, label %277, !llvm.loop !17

277:                                              ; preds = %268, %255
  %278 = phi i32 [ %263, %255 ], [ %274, %268 ]
  %279 = icmp ult i32 %195, 4
  %280 = select i1 %279, i32 %195, i32 4
  %281 = and i32 %278, 7
  %282 = icmp ult i32 %281, 4
  %283 = select i1 %282, i32 %281, i32 4
  %284 = zext i32 %280 to i64
  %285 = zext i32 %283 to i64
  %286 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %284, i64 %285
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i64
  br label %289

289:                                              ; preds = %84, %277
  %290 = phi i64 [ %288, %277 ], [ 0, %84 ]
  %291 = and i64 %106, 255
  %292 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 23, i32 0, i64 %291, i64 0, i32 0, i64 %290, i64 1
  %293 = load i32, i32* %292, align 4
  %294 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %18
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %92
  %298 = load i32, i32* %297, align 4
  %299 = lshr i32 %296, %298
  %300 = mul nsw i32 %299, %293
  %301 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %18
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i32
  %304 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_log2, i64 0, i64 %92
  %305 = load i32, i32* %304, align 4
  %306 = lshr i32 %303, %305
  %307 = mul nsw i32 %300, %306
  %308 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %1, i64 0, i32 0
  store i32 %307, i32* %308, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %90) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89) #6
  ret void

309:                                              ; preds = %30, %309
  %310 = phi i64 [ %314, %309 ], [ %31, %30 ]
  %311 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 58, i32 1, i64 %310
  %312 = load i8, i8* %311, align 1
  %313 = or i8 %312, 1
  store i8 %313, i8* %311, align 1
  %314 = add nuw nsw i64 %310, 1
  %315 = icmp slt i64 %314, %23
  br i1 %315, label %309, label %84, !llvm.loop !18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS* nocapture, i8 zeroext, i64) local_unnamed_addr #0 {
  %6 = alloca [1024 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca [3 x i64], align 16
  %9 = alloca %struct.RD_STATS, align 8
  %10 = alloca i64, align 8
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %12 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %13 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %12, align 8
  %14 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %13, i64 0, i32 28
  %15 = load i16, i16* %14, align 1
  %16 = trunc i16 %15 to i8
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %23

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %13, i64 0, i32 6, i64 0
  %20 = load i8, i8* %19, align 8
  %21 = icmp sgt i8 %20, 0
  %22 = zext i1 %21 to i32
  br label %23

23:                                               ; preds = %5, %18
  %24 = phi i32 [ 1, %5 ], [ %22, %18 ]
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 0
  %26 = load i32, i32* %25, align 16
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 0, i32* %29, align 8
  %30 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %31 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  %32 = bitcast i64* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %31, align 8
  %33 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 0, i32* %33, align 4
  %34 = zext i8 %3 to i64
  %35 = getelementptr inbounds [22 x i8], [22 x i8]* @num_pels_log2_lookup, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = add nsw i32 %37, -4
  %39 = shl i32 1, %38
  %40 = icmp ne i32 %24, 0
  br i1 %40, label %41, label %129

41:                                               ; preds = %23
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 10, i32 4
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %129, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 0
  %47 = load i32, i32* %46, align 16
  %48 = icmp slt i32 %26, %47
  br i1 %48, label %129, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %34
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add nsw i32 %26, %52
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %53, %55
  br i1 %56, label %57, label %129

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = icmp slt i32 %28, %59
  br i1 %60, label %129, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %34
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nsw i32 %28, %64
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %65, %67
  br i1 %68, label %69, label %129

69:                                               ; preds = %61
  %70 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %34
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %34
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = bitcast %struct.macroblock* %1 to i8**
  %77 = load i8*, i8** %76, align 16
  %78 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** @av1_get_crc32c_value, align 8
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 3
  %80 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %79, align 8
  %81 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %80, i64 0, i32 0, i32 3
  %82 = bitcast %struct._CRC32C* %81 to i8*
  %83 = shl nuw nsw i64 %72, 1
  %84 = mul nuw nsw i64 %83, %75
  %85 = tail call i32 %78(i8* %82, i8* %77, i64 %84) #6
  %86 = shl i32 %85, 5
  %87 = zext i8 %3 to i32
  %88 = add i32 %86, %87
  %89 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %79, align 8
  %90 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0
  %91 = icmp eq i64 %4, 9223372036854775807
  br i1 %91, label %129, label %92

92:                                               ; preds = %69
  %93 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %129

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 1
  %98 = load i32, i32* %97, align 8
  br label %101

99:                                               ; preds = %101
  %100 = icmp eq i32 %109, %94
  br i1 %100, label %129, label %101

101:                                              ; preds = %99, %96
  %102 = phi i32 [ 0, %96 ], [ %109, %99 ]
  %103 = add nsw i32 %102, %98
  %104 = srem i32 %103, 8
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 0, i64 %105, i32 5
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, %88
  %109 = add nuw nsw i32 %102, 1
  br i1 %108, label %110, label %99

110:                                              ; preds = %101
  %111 = icmp eq i32 %104, -1
  br i1 %111, label %129, label %112

112:                                              ; preds = %110
  %113 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %114 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %113, align 8
  %115 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 0, i64 %105, i32 0
  %116 = load i8, i8* %115, align 8
  %117 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %114, i64 0, i32 24
  store i8 %116, i8* %117, align 1
  %118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %119 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 0, i64 %105, i32 2, i64 0
  %120 = sext i32 %39 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 1 %119, i64 %120, i1 false) #6
  %121 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %114, i64 0, i32 25, i64 0
  %122 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 0, i64 %105, i32 1, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %121, i8* align 1 %122, i64 16, i1 false) #6
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 0, i64 %105, i32 3, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %125, i64 %120, i1 false) #6
  %126 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %89, i64 0, i32 0, i32 0, i64 %105, i32 4
  %127 = bitcast %struct.RD_STATS* %2 to i8*
  %128 = bitcast %struct.RD_STATS* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 40, i1 false) #6
  br label %489

129:                                              ; preds = %99, %92, %69, %110, %61, %57, %49, %45, %41, %23
  %130 = phi i32 [ 0, %41 ], [ 0, %23 ], [ 0, %45 ], [ 0, %49 ], [ 0, %57 ], [ 0, %61 ], [ %88, %110 ], [ %88, %69 ], [ %88, %92 ], [ %88, %99 ]
  %131 = phi %struct.MB_RD_RECORD* [ null, %41 ], [ null, %23 ], [ null, %45 ], [ null, %49 ], [ null, %57 ], [ null, %61 ], [ %90, %110 ], [ %90, %69 ], [ %90, %92 ], [ %90, %99 ]
  %132 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %132) #6
  store i64 -6148914691236517206, i64* %10, align 8
  %133 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 7
  %134 = load i32, i32* %133, align 4
  %135 = icmp ne i32 %134, 0
  %136 = and i1 %40, %135
  br i1 %136, label %137, label %187

137:                                              ; preds = %129
  %138 = load i16, i16* %14, align 1
  %139 = and i16 %138, 7
  %140 = zext i16 %139 to i64
  %141 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %187

144:                                              ; preds = %137
  %145 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %146 = load i8, i8* %145, align 1, !range !12
  %147 = zext i8 %146 to i32
  %148 = call fastcc i32 @predict_skip_txfm(%struct.macroblock* %1, i8 zeroext %3, i64* nonnull %10, i32 %147)
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %187, label %150

150:                                              ; preds = %144
  %151 = zext i8 %3 to i32
  %152 = load i64, i64* %10, align 8
  tail call fastcc void @set_skip_txfm(%struct.macroblock* %1, %struct.RD_STATS* %2, i32 %151, i64 %152)
  %153 = icmp eq %struct.MB_RD_RECORD* %131, null
  br i1 %153, label %488, label %154

154:                                              ; preds = %150
  %155 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 2
  %156 = load i32, i32* %155, align 4
  %157 = icmp slt i32 %156, 8
  %158 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 1
  %159 = load i32, i32* %158, align 8
  br i1 %157, label %160, label %164

160:                                              ; preds = %154
  %161 = add nsw i32 %159, %156
  %162 = srem i32 %161, 8
  %163 = add nsw i32 %156, 1
  store i32 %163, i32* %155, align 4
  br label %167

164:                                              ; preds = %154
  %165 = add nsw i32 %159, 1
  %166 = srem i32 %165, 8
  store i32 %166, i32* %158, align 8
  br label %167

167:                                              ; preds = %160, %164
  %168 = phi i32 [ %162, %160 ], [ %159, %164 ]
  %169 = sext i32 %168 to i64
  %170 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %171 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %170, align 8
  %172 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %169, i32 5
  store i32 %130, i32* %172, align 8
  %173 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %171, i64 0, i32 24
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %169, i32 0
  store i8 %174, i8* %175, align 8
  %176 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %169, i32 2, i64 0
  %177 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %178 = sext i32 %39 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 4 %177, i64 %178, i1 false) #6
  %179 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %169, i32 1, i64 0
  %180 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %171, i64 0, i32 25, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 2 %180, i64 16, i1 false) #6
  %181 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %169, i32 3, i64 0
  %182 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %183 = load i8*, i8** %182, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %183, i64 %178, i1 false) #6
  %184 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %169, i32 4
  %185 = bitcast %struct.RD_STATS* %184 to i8*
  %186 = bitcast %struct.RD_STATS* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 40, i1 false) #6
  br label %488

187:                                              ; preds = %144, %137, %129
  %188 = load i16, i16* %14, align 1
  %189 = and i16 %188, 7
  %190 = zext i16 %189 to i64
  %191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %190
  %192 = load i32, i32* %191, align 4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %198, label %194

194:                                              ; preds = %187
  %195 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %196 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %195, align 8
  %197 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %196, i64 0, i32 24
  store i8 0, i8* %197, align 1
  tail call void @av1_txfm_rd_in_plane(%struct.macroblock* %1, %struct.AV1_COMP* %0, %struct.RD_STATS* %2, i64 %4, i64 0, i32 0, i8 zeroext %3, i8 zeroext 0, i8 zeroext 0, i32 0) #6
  br label %453

198:                                              ; preds = %187
  %199 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 5
  %200 = load i8, i8* %199, align 4
  %201 = icmp eq i8 %200, 2
  br i1 %201, label %202, label %302

202:                                              ; preds = %198
  %203 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %204 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %203, align 8
  %205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  %206 = load i8, i8* %205, align 4
  %207 = zext i8 %206 to i64
  %208 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %207
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %34
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %3, 0
  br i1 %212, label %213, label %218

213:                                              ; preds = %202
  %214 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %34
  %215 = load i8, i8* %214, align 1
  %216 = icmp ult i8 %215, %209
  %217 = select i1 %216, i8 %215, i8 %209
  br label %224

218:                                              ; preds = %202
  %219 = zext i8 %211 to i64
  %220 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = icmp ugt i8 %221, %209
  %223 = select i1 %222, i8 %209, i8 %211
  br label %224

224:                                              ; preds = %218, %213
  %225 = phi i8 [ %217, %213 ], [ %223, %218 ]
  %226 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %204, i64 0, i32 24
  store i8 %225, i8* %226, align 1
  %227 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 0
  %228 = load i8, i8* %227, align 2, !range !12
  %229 = icmp eq i8 %228, 0
  %230 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 2
  %231 = load i8, i8* %230, align 2, !range !12
  %232 = icmp eq i8 %231, 0
  br i1 %229, label %233, label %238

233:                                              ; preds = %224
  %234 = zext i8 %225 to i64
  br i1 %232, label %243, label %235

235:                                              ; preds = %233
  %236 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_32, i64 0, i64 %234
  %237 = load i8, i8* %236, align 1
  br label %246

238:                                              ; preds = %224
  br i1 %232, label %239, label %248

239:                                              ; preds = %238
  %240 = zext i8 %225 to i64
  %241 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %240
  %242 = load i8, i8* %241, align 1
  br label %246

243:                                              ; preds = %233
  %244 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_32_square, i64 0, i64 %234
  %245 = load i8, i8* %244, align 1
  br label %246

246:                                              ; preds = %235, %239, %243
  %247 = phi i8 [ %245, %243 ], [ %242, %239 ], [ %237, %235 ]
  store i8 %247, i8* %226, align 1
  br label %248

248:                                              ; preds = %246, %238
  %249 = phi i8 [ %225, %238 ], [ %247, %246 ]
  %250 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %251 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %250, align 16
  %252 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %253 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %252, align 8
  %254 = icmp eq %struct.MB_MODE_INFO* %251, null
  br i1 %254, label %259, label %255

255:                                              ; preds = %248
  %256 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %251, i64 0, i32 23
  %257 = load i8, i8* %256, align 8
  %258 = sext i8 %257 to i64
  br label %259

259:                                              ; preds = %255, %248
  %260 = phi i64 [ %258, %255 ], [ 0, %248 ]
  %261 = icmp eq %struct.MB_MODE_INFO* %253, null
  br i1 %261, label %266, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %253, i64 0, i32 23
  %264 = load i8, i8* %263, align 8
  %265 = sext i8 %264 to i64
  br label %266

266:                                              ; preds = %262, %259
  %267 = phi i64 [ %265, %262 ], [ 0, %259 ]
  %268 = add nsw i64 %267, %260
  %269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %268, i64 0
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %268, i64 1
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %204, i64 0, i32 28
  %274 = load i16, i16* %273, align 1
  %275 = trunc i16 %274 to i8
  %276 = icmp sgt i8 %275, -1
  br i1 %276, label %277, label %285

277:                                              ; preds = %266
  %278 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %204, i64 0, i32 6, i64 0
  %279 = load i8, i8* %278, align 8
  %280 = icmp slt i8 %279, 1
  br i1 %280, label %281, label %285

281:                                              ; preds = %277
  %282 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %283 = load i32, i32* %282, align 8
  %284 = sext i32 %283 to i64
  br label %293

285:                                              ; preds = %277, %266
  %286 = sext i32 %272 to i64
  %287 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %288 = load i32, i32* %287, align 8
  %289 = sext i32 %288 to i64
  %290 = mul nsw i64 %289, %286
  %291 = add nsw i64 %290, 256
  %292 = ashr i64 %291, 9
  br label %293

293:                                              ; preds = %281, %285
  %294 = phi i64 [ %284, %281 ], [ %289, %285 ]
  %295 = phi i64 [ 9223372036854775807, %281 ], [ %292, %285 ]
  %296 = sext i32 %270 to i64
  %297 = mul nsw i64 %294, %296
  %298 = add nsw i64 %297, 256
  %299 = ashr i64 %298, 9
  %300 = icmp slt i64 %299, %295
  %301 = select i1 %300, i64 %299, i64 %295
  tail call void @av1_txfm_rd_in_plane(%struct.macroblock* %1, %struct.AV1_COMP* %0, %struct.RD_STATS* %2, i64 %4, i64 %301, i32 0, i8 zeroext %3, i8 zeroext %249, i8 zeroext 0, i32 0) #6
  br label %453

302:                                              ; preds = %198
  store i32 2147483647, i32* %29, align 8
  %303 = bitcast i64* %30 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %303, align 8
  %304 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  store i64 9223372036854775807, i64* %304, align 8
  store i32 0, i32* %31, align 8
  store i32 0, i32* %33, align 4
  %305 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %306 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %305, align 8
  %307 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %34
  %308 = load i8, i8* %307, align 1
  %309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  %310 = load i8, i8* %309, align 4
  %311 = icmp eq i8 %310, 2
  br i1 %311, label %312, label %350

312:                                              ; preds = %302
  %313 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %34
  %314 = load i8, i8* %313, align 1
  %315 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %34
  %316 = load i8, i8* %315, align 1
  %317 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %306, i64 0, i32 28
  %318 = load i16, i16* %317, align 1
  %319 = trunc i16 %318 to i8
  %320 = icmp sgt i8 %319, -1
  br i1 %320, label %321, label %326

321:                                              ; preds = %312
  %322 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %306, i64 0, i32 6, i64 0
  %323 = load i8, i8* %322, align 8
  %324 = icmp sgt i8 %323, 0
  %325 = zext i1 %324 to i32
  br label %326

326:                                              ; preds = %321, %312
  %327 = phi i32 [ 1, %312 ], [ %325, %321 ]
  %328 = load i8, i8* %199, align 4
  %329 = icmp eq i8 %328, 2
  br i1 %329, label %366, label %330

330:                                              ; preds = %326
  %331 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 4
  %332 = load i32, i32* %331, align 4
  %333 = icmp ne i32 %332, 0
  %334 = add nsw i64 %34, -13
  %335 = icmp ult i64 %334, 3
  %336 = and i1 %335, %333
  br i1 %336, label %366, label %337

337:                                              ; preds = %330
  %338 = icmp eq i32 %327, 0
  %339 = icmp ne i8 %316, %314
  br i1 %338, label %345, label %340

340:                                              ; preds = %337
  %341 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 1
  %342 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 0
  %343 = select i1 %339, i32* %341, i32* %342
  %344 = load i32, i32* %343, align 4
  br label %366

345:                                              ; preds = %337
  %346 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 3
  %347 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 2
  %348 = select i1 %339, i32* %346, i32* %347
  %349 = load i32, i32* %348, align 4
  br label %366

350:                                              ; preds = %302
  %351 = zext i8 %310 to i64
  %352 = getelementptr inbounds [3 x i8], [3 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %351
  %353 = load i8, i8* %352, align 1
  %354 = icmp eq i8 %3, 0
  br i1 %354, label %355, label %360

355:                                              ; preds = %350
  %356 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_lookup, i64 0, i64 %34
  %357 = load i8, i8* %356, align 1
  %358 = icmp ult i8 %357, %353
  %359 = select i1 %358, i8 %357, i8 %353
  br label %366

360:                                              ; preds = %350
  %361 = zext i8 %308 to i64
  %362 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = icmp ugt i8 %363, %353
  %365 = select i1 %364, i8 %353, i8 %308
  br label %366

366:                                              ; preds = %360, %355, %345, %340, %330, %326
  %367 = phi i8 [ %308, %326 ], [ %308, %340 ], [ %308, %345 ], [ %359, %355 ], [ %365, %360 ], [ %308, %330 ]
  %368 = phi i32 [ 2, %326 ], [ %344, %340 ], [ %349, %345 ], [ 2, %355 ], [ 2, %360 ], [ 2, %330 ]
  %369 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %369)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %369, i8 -86, i64 1024, i1 false)
  %370 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %370)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %370, i8 -86, i64 1024, i1 false)
  %371 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  store i8 0, i8* %371, align 4
  %372 = bitcast [3 x i64]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %372) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %372, i8* align 16 bitcast ([3 x i64]* @__const.choose_tx_size_type_from_rd.rd to i8*), i64 24, i1 false) #6
  %373 = icmp slt i32 %368, 3
  br i1 %373, label %374, label %442

374:                                              ; preds = %366
  %375 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 0
  %376 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 2
  %377 = bitcast %struct.RD_STATS* %9 to i8*
  %378 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %379 = sext i32 %39 to i64
  %380 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %381 = bitcast %struct.RD_STATS* %2 to i8*
  %382 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60
  %383 = sext i32 %368 to i64
  br label %384

384:                                              ; preds = %433, %374
  %385 = phi i64 [ %383, %374 ], [ %437, %433 ]
  %386 = phi i8 [ %367, %374 ], [ %439, %433 ]
  %387 = phi i64 [ 9223372036854775807, %374 ], [ %436, %433 ]
  %388 = phi i8 [ %308, %374 ], [ %435, %433 ]
  %389 = load i8, i8* %375, align 2, !range !12
  %390 = icmp eq i8 %389, 0
  br i1 %390, label %391, label %396

391:                                              ; preds = %384
  %392 = zext i8 %386 to i64
  %393 = lshr i64 399376, %392
  %394 = and i64 %393, 1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %433

396:                                              ; preds = %391, %384
  %397 = load i8, i8* %376, align 2, !range !12
  %398 = icmp eq i8 %397, 0
  br i1 %398, label %399, label %406

399:                                              ; preds = %396
  %400 = zext i8 %386 to i64
  %401 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %400
  %404 = load i32, i32* %403, align 4
  %405 = icmp eq i32 %402, %404
  br i1 %405, label %406, label %433

406:                                              ; preds = %399, %396
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %377) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %377, i8 -86, i64 40, i1 false) #6
  %407 = call i64 @av1_uniform_txfm_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* nonnull %9, i64 %4, i8 zeroext %3, i8 zeroext %386, i8 zeroext 0, i32 0) #6
  %408 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %385
  store i64 %407, i64* %408, align 8
  %409 = icmp slt i64 %407, %387
  br i1 %409, label %410, label %412

410:                                              ; preds = %406
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %370, i8* align 4 %378, i64 %379, i1 false) #6
  %411 = load i8*, i8** %380, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %369, i8* align 1 %411, i64 %379, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %381, i8* nonnull align 8 %377, i64 40, i1 false) #6
  br label %412

412:                                              ; preds = %410, %406
  %413 = phi i8 [ %386, %410 ], [ %388, %406 ]
  %414 = phi i64 [ %407, %410 ], [ %387, %406 ]
  %415 = icmp eq i8 %386, 0
  br i1 %415, label %430, label %416

416:                                              ; preds = %412
  %417 = icmp sgt i64 %385, %383
  %418 = icmp ne i64 %385, 2
  %419 = and i1 %417, %418
  br i1 %419, label %420, label %431

420:                                              ; preds = %416
  %421 = load i32, i32* %382, align 4
  %422 = icmp ult i32 %421, 256
  br i1 %422, label %423, label %431

423:                                              ; preds = %420
  %424 = add nsw i64 %385, -1
  %425 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %424
  %426 = load i64, i64* %425, align 8
  %427 = icmp ne i64 %426, 9223372036854775807
  %428 = icmp sgt i64 %407, %426
  %429 = and i1 %427, %428
  br i1 %429, label %430, label %431

430:                                              ; preds = %423, %412
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %377) #6
  br label %442

431:                                              ; preds = %423, %420, %416
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %377) #6
  %432 = zext i8 %386 to i64
  br label %433

433:                                              ; preds = %431, %399, %391
  %434 = phi i64 [ %432, %431 ], [ %400, %399 ], [ %392, %391 ]
  %435 = phi i8 [ %413, %431 ], [ %388, %399 ], [ %388, %391 ]
  %436 = phi i64 [ %414, %431 ], [ %387, %399 ], [ %387, %391 ]
  %437 = add nsw i64 %385, 1
  %438 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %434
  %439 = load i8, i8* %438, align 1
  %440 = trunc i64 %437 to i32
  %441 = icmp eq i32 %440, 3
  br i1 %441, label %442, label %384

442:                                              ; preds = %433, %430, %366
  %443 = phi i8 [ %413, %430 ], [ %308, %366 ], [ %435, %433 ]
  %444 = load i32, i32* %29, align 8
  %445 = icmp eq i32 %444, 2147483647
  br i1 %445, label %452, label %446

446:                                              ; preds = %442
  %447 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %306, i64 0, i32 24
  store i8 %443, i8* %447, align 1
  %448 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %449 = load i8*, i8** %448, align 8
  %450 = sext i32 %39 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %449, i8* nonnull align 16 %369, i64 %450, i1 false) #6
  %451 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %451, i8* nonnull align 16 %370, i64 %450, i1 false) #6
  br label %452

452:                                              ; preds = %442, %446
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %372) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %370)
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %369)
  br label %453

453:                                              ; preds = %293, %452, %194
  %454 = icmp eq %struct.MB_RD_RECORD* %131, null
  br i1 %454, label %488, label %455

455:                                              ; preds = %453
  %456 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 2
  %457 = load i32, i32* %456, align 4
  %458 = icmp slt i32 %457, 8
  %459 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 1
  %460 = load i32, i32* %459, align 8
  br i1 %458, label %461, label %465

461:                                              ; preds = %455
  %462 = add nsw i32 %460, %457
  %463 = srem i32 %462, 8
  %464 = add nsw i32 %457, 1
  store i32 %464, i32* %456, align 4
  br label %468

465:                                              ; preds = %455
  %466 = add nsw i32 %460, 1
  %467 = srem i32 %466, 8
  store i32 %467, i32* %459, align 8
  br label %468

468:                                              ; preds = %461, %465
  %469 = phi i32 [ %463, %461 ], [ %460, %465 ]
  %470 = sext i32 %469 to i64
  %471 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %11, align 8
  %472 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %471, align 8
  %473 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %470, i32 5
  store i32 %130, i32* %473, align 8
  %474 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %472, i64 0, i32 24
  %475 = load i8, i8* %474, align 1
  %476 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %470, i32 0
  store i8 %475, i8* %476, align 8
  %477 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %470, i32 2, i64 0
  %478 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %479 = sext i32 %39 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %477, i8* align 4 %478, i64 %479, i1 false) #6
  %480 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %470, i32 1, i64 0
  %481 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %472, i64 0, i32 25, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %480, i8* align 2 %481, i64 16, i1 false) #6
  %482 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %470, i32 3, i64 0
  %483 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %484 = load i8*, i8** %483, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %482, i8* align 1 %484, i64 %479, i1 false) #6
  %485 = getelementptr inbounds %struct.MB_RD_RECORD, %struct.MB_RD_RECORD* %131, i64 0, i32 0, i64 %470, i32 4
  %486 = bitcast %struct.RD_STATS* %485 to i8*
  %487 = bitcast %struct.RD_STATS* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %486, i8* align 8 %487, i64 40, i1 false) #6
  br label %488

488:                                              ; preds = %468, %453, %167, %150
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #6
  br label %489

489:                                              ; preds = %112, %488
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_txfm_uvrd(%struct.AV1_COMP*, %struct.macroblock*, %struct.RD_STATS*, i8 zeroext, i64) local_unnamed_addr #0 {
  %6 = alloca %struct.rdcost_block_args, align 8
  %7 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 0
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 1
  %9 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 4
  %10 = bitcast i64* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %9, align 8
  %11 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 5
  store i32 0, i32* %11, align 4
  %12 = icmp slt i64 %4, 0
  br i1 %12, label %194, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 3
  %16 = load i8, i8* %15, align 4, !range !12
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %194, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %20 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %21 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %20, align 8
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %21, i64 0, i32 28
  %23 = load i16, i16* %22, align 1
  %24 = trunc i16 %23 to i8
  %25 = icmp sgt i8 %24, -1
  br i1 %25, label %26, label %30

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %21, i64 0, i32 6, i64 0
  %28 = load i8, i8* %27, align 8
  %29 = icmp sgt i8 %28, 0
  br label %30

30:                                               ; preds = %18, %26
  %31 = phi i1 [ true, %18 ], [ %29, %26 ]
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = zext i8 %3 to i64
  %37 = sext i32 %33 to i64
  %38 = sext i32 %35 to i64
  %39 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %36, i64 %37, i64 %38
  %40 = load i8, i8* %39, align 1
  br i1 %31, label %41, label %46

41:                                               ; preds = %30
  tail call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %40, i32 1) #6
  tail call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %40, i32 2) #6
  %42 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %43 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %42, align 8
  %44 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 28
  %45 = load i16, i16* %44, align 1
  br label %46

46:                                               ; preds = %41, %30
  %47 = phi i16 [ %45, %41 ], [ %23, %30 ]
  %48 = phi %struct.MB_MODE_INFO* [ %43, %41 ], [ %21, %30 ]
  %49 = and i16 %47, 7
  %50 = zext i16 %49 to i64
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %71

54:                                               ; preds = %46
  %55 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %48, i64 0, i32 0
  %56 = load i8, i8* %55, align 8
  %57 = load i32, i32* %32, align 4
  %58 = load i32, i32* %34, align 8
  %59 = zext i8 %56 to i64
  %60 = sext i32 %57 to i64
  %61 = sext i32 %58 to i64
  %62 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %59, i64 %60, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  switch i8 %66, label %69 [
    i8 4, label %71
    i8 12, label %71
    i8 11, label %71
    i8 18, label %67
    i8 17, label %68
  ]

67:                                               ; preds = %54
  br label %71

68:                                               ; preds = %54
  br label %71

69:                                               ; preds = %54
  %70 = zext i8 %66 to i64
  br label %71

71:                                               ; preds = %46, %54, %54, %54, %67, %68, %69
  %72 = phi i64 [ 0, %46 ], [ %70, %69 ], [ 9, %68 ], [ 10, %67 ], [ 3, %54 ], [ 3, %54 ], [ 3, %54 ]
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 11
  %74 = icmp ne i64 %4, 9223372036854775807
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 0
  %76 = lshr i64 399376, %72
  %77 = and i64 %76, 1
  %78 = icmp ne i64 %77, 0
  %79 = bitcast %struct.rdcost_block_args* %6 to i8*
  %80 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 2, i64 0
  %81 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 1
  %82 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 0
  %83 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 6
  %84 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 5
  %85 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 9
  %86 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 10
  %87 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 4, i32 0
  %88 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 4, i32 1
  %89 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 4, i32 4
  %90 = bitcast i64* %88 to i8*
  %91 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 4, i32 5
  %92 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 3, i64 0
  %93 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 8
  %94 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 7
  %95 = getelementptr inbounds %struct.rdcost_block_args, %struct.rdcost_block_args* %6, i64 0, i32 4, i32 3
  %96 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %2, i64 0, i32 3
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %98 = bitcast i64* %8 to <2 x i64>*
  br label %99

99:                                               ; preds = %169, %71
  %100 = phi i64 [ 1, %71 ], [ %186, %169 ]
  %101 = phi i64 [ 0, %71 ], [ %182, %169 ]
  %102 = phi i64 [ 0, %71 ], [ %181, %169 ]
  %103 = load i32, i32* %73, align 4
  %104 = icmp ne i32 %103, 0
  %105 = and i1 %31, %104
  %106 = and i1 %74, %105
  br i1 %106, label %107, label %111

107:                                              ; preds = %99
  %108 = icmp slt i64 %102, %101
  %109 = select i1 %108, i64 %102, i64 %101
  %110 = sub nsw i64 %4, %109
  br label %111

111:                                              ; preds = %107, %99
  %112 = phi i64 [ %110, %107 ], [ %4, %99 ]
  %113 = load i8, i8* %75, align 2, !range !12
  %114 = icmp eq i8 %113, 0
  %115 = icmp slt i64 %112, 0
  br i1 %114, label %116, label %118

116:                                              ; preds = %111
  %117 = or i1 %78, %115
  br i1 %117, label %192, label %119

118:                                              ; preds = %111
  br i1 %115, label %192, label %119

119:                                              ; preds = %116, %118
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %100
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %79) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 0, i64 136, i1 false) #6
  store %struct.macroblock* %1, %struct.macroblock** %81, align 8
  store %struct.AV1_COMP* %0, %struct.AV1_COMP** %82, align 8
  store i64 %112, i64* %83, align 8
  store i64 0, i64* %84, align 8
  store i8 0, i8* %85, align 8
  store i32 0, i32* %86, align 4
  store i32 0, i32* %87, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %89, align 8
  store i32 0, i32* %91, align 4
  call void @av1_get_entropy_contexts(i8 zeroext %40, %struct.macroblockd_plane* %120, i8* %80, i8* %92) #6
  %121 = trunc i64 %100 to i32
  call void @av1_foreach_transformed_block_in_plane(%struct.macroblockd* %14, i8 zeroext %40, i32 %121, void (i32, i32, i32, i32, i8, i8, i8*)* nonnull @block_rd_txfm, i8* nonnull %79) #6
  %122 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %123 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %122, align 8
  %124 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %123, i64 0, i32 28
  %125 = load i16, i16* %124, align 1
  %126 = trunc i16 %125 to i8
  %127 = icmp sgt i8 %126, -1
  br i1 %127, label %130, label %128

128:                                              ; preds = %119
  %129 = load i32, i32* %93, align 4
  br label %137

130:                                              ; preds = %119
  %131 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %123, i64 0, i32 6, i64 0
  %132 = load i8, i8* %131, align 8
  %133 = icmp slt i8 %132, 1
  %134 = load i32, i32* %93, align 4
  %135 = load i32, i32* %94, align 8
  %136 = select i1 %133, i32 %135, i32 %134
  br label %137

137:                                              ; preds = %130, %128
  %138 = phi i32 [ %129, %128 ], [ %136, %130 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %141, label %140

140:                                              ; preds = %137
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %79) #6
  br label %192

141:                                              ; preds = %137
  %142 = load i32, i32* %87, align 8
  %143 = load i64, i64* %88, align 8
  %144 = load i64, i64* %95, align 8
  %145 = load i32, i32* %89, align 8
  %146 = load i32, i32* %91, align 4
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %79) #6
  %147 = icmp eq i32 %142, 2147483647
  br i1 %147, label %192, label %148

148:                                              ; preds = %141
  %149 = load i32, i32* %7, align 8
  %150 = icmp eq i32 %149, 2147483647
  br i1 %150, label %151, label %152

151:                                              ; preds = %148
  store i32 2147483647, i32* %7, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %98, align 8
  store i64 9223372036854775807, i64* %96, align 8
  store i32 0, i32* %9, align 8
  store i32 0, i32* %11, align 4
  br label %169

152:                                              ; preds = %148
  %153 = sext i32 %149 to i64
  %154 = sext i32 %142 to i64
  %155 = add nsw i64 %153, %154
  %156 = icmp slt i64 %155, 2147483647
  %157 = select i1 %156, i64 %155, i64 2147483647
  %158 = trunc i64 %157 to i32
  store i32 %158, i32* %7, align 8
  %159 = load i32, i32* %11, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %152
  store i32 %146, i32* %11, align 4
  br label %162

162:                                              ; preds = %161, %152
  %163 = load i64, i64* %8, align 8
  %164 = add nsw i64 %163, %143
  store i64 %164, i64* %8, align 8
  %165 = load i64, i64* %96, align 8
  %166 = add nsw i64 %165, %144
  store i64 %166, i64* %96, align 8
  %167 = load i32, i32* %9, align 8
  %168 = and i32 %167, %145
  store i32 %168, i32* %9, align 8
  br label %169

169:                                              ; preds = %162, %151
  %170 = phi i64 [ %166, %162 ], [ 9223372036854775807, %151 ]
  %171 = phi i64 [ %164, %162 ], [ 9223372036854775807, %151 ]
  %172 = phi i64 [ %157, %162 ], [ 2147483647, %151 ]
  %173 = shl i64 %172, 32
  %174 = ashr exact i64 %173, 32
  %175 = load i32, i32* %97, align 8
  %176 = sext i32 %175 to i64
  %177 = mul nsw i64 %174, %176
  %178 = add nsw i64 %177, 256
  %179 = ashr i64 %178, 9
  %180 = shl nsw i64 %171, 7
  %181 = add nsw i64 %179, %180
  %182 = shl nsw i64 %170, 7
  %183 = icmp slt i64 %181, %182
  %184 = select i1 %183, i64 %181, i64 %182
  %185 = icmp sgt i64 %184, %4
  %186 = add nuw nsw i64 %100, 1
  %187 = icmp eq i64 %186, 3
  %188 = or i1 %185, %187
  br i1 %188, label %189, label %99

189:                                              ; preds = %169
  %190 = xor i1 %185, true
  %191 = zext i1 %190 to i32
  br i1 %185, label %192, label %194

192:                                              ; preds = %116, %141, %118, %140, %189
  store i32 2147483647, i32* %7, align 8
  %193 = bitcast i64* %8 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %193, align 8
  store i64 9223372036854775807, i64* %96, align 8
  store i32 0, i32* %9, align 8
  store i32 0, i32* %11, align 4
  br label %194

194:                                              ; preds = %192, %189, %13, %5
  %195 = phi i32 [ 0, %5 ], [ 1, %13 ], [ %191, %189 ], [ 0, %192 ]
  ret i32 %195
}

declare void @av1_subtract_plane(%struct.macroblock*, i8 zeroext, i32) local_unnamed_addr #2

declare void @av1_foreach_transformed_block_in_plane(%struct.macroblockd*, i8 zeroext, i32, void (i32, i32, i32, i32, i8, i8, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @block_rd_txfm(i32, i32, i32, i32, i8 zeroext, i8 zeroext, i8*) #4 {
  %8 = alloca %struct.RD_STATS, align 8
  %9 = alloca %struct.txb_ctx, align 4
  %10 = getelementptr inbounds i8, i8* %6, i64 136
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds i8, i8* %6, i64 140
  %16 = bitcast i8* %15 to i32*
  store i32 1, i32* %16, align 4
  br label %194

17:                                               ; preds = %7
  %18 = getelementptr inbounds i8, i8* %6, i64 8
  %19 = bitcast i8* %18 to %struct.macroblock**
  %20 = load %struct.macroblock*, %struct.macroblock** %19, align 8
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 2
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 2, i32 6
  %23 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %22, align 8
  %24 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %23, align 8
  %25 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %24, i64 0, i32 28
  %26 = load i16, i16* %25, align 1
  %27 = trunc i16 %26 to i8
  %28 = icmp sgt i8 %27, -1
  br i1 %28, label %29, label %33

29:                                               ; preds = %17
  %30 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %24, i64 0, i32 6, i64 0
  %31 = load i8, i8* %30, align 8
  %32 = icmp sgt i8 %31, 0
  br label %33

33:                                               ; preds = %17, %29
  %34 = phi i1 [ true, %17 ], [ %32, %29 ]
  %35 = bitcast i8* %6 to %struct.AV1_COMP**
  %36 = load %struct.AV1_COMP*, %struct.AV1_COMP** %35, align 8
  %37 = getelementptr inbounds i8, i8* %6, i64 16
  %38 = sext i32 %3 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  %40 = getelementptr inbounds i8, i8* %6, i64 48
  %41 = sext i32 %2 to i64
  %42 = getelementptr inbounds i8, i8* %40, i64 %41
  %43 = bitcast %struct.RD_STATS* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %43) #6
  %44 = bitcast %struct.RD_STATS* %8 to i64*
  store i64 -6148914691236517206, i64* %44, align 8
  %45 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 0
  store i32 0, i32* %45, align 8
  %46 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 1
  %47 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 4
  %48 = bitcast i64* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %47, align 8
  %49 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 5
  store i32 0, i32* %49, align 4
  br i1 %34, label %52, label %50

50:                                               ; preds = %33
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %36, i64 0, i32 8
  tail call void @av1_predict_intra_block_facade(%struct.AV1Common* %51, %struct.macroblockd* %21, i32 %0, i32 %3, i32 %2, i8 zeroext %5) #6
  tail call void @av1_subtract_txb(%struct.macroblock* %20, i32 %0, i8 zeroext %4, i32 %3, i32 %2, i8 zeroext %5) #6
  br label %52

52:                                               ; preds = %50, %33
  %53 = bitcast %struct.txb_ctx* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #6
  %54 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %9, i64 0, i32 0
  store i32 -1431655766, i32* %54, align 4
  %55 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %9, i64 0, i32 1
  store i32 -1431655766, i32* %55, align 4
  call fastcc void @get_txb_ctx(i8 zeroext %4, i8 zeroext %5, i32 %0, i8* %39, i8* %42, %struct.txb_ctx* nonnull %9)
  %56 = getelementptr inbounds i8, i8* %6, i64 144
  %57 = load i8, i8* %56, align 8
  %58 = getelementptr inbounds i8, i8* %6, i64 148
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds i8, i8* %6, i64 128
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds i8, i8* %6, i64 120
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = sub nsw i64 %63, %66
  call fastcc void @search_tx_type(%struct.AV1_COMP* %36, %struct.macroblock* %20, i32 %0, i32 %1, i32 %2, i32 %3, i8 zeroext %4, i8 zeroext %5, %struct.txb_ctx* nonnull %9, i8 zeroext %57, i32 %60, i64 %67, %struct.RD_STATS* nonnull %8)
  %68 = icmp eq i32 %0, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %52
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 2, i32 51, i32 10
  %71 = load i32, i32* %70, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  call void @cfl_store_tx(%struct.macroblockd* %21, i32 %2, i32 %3, i8 zeroext %5, i8 zeroext %4) #6
  br label %74

74:                                               ; preds = %69, %73, %52
  %75 = sext i32 %0 to i64
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 0, i64 %75, i32 5
  %77 = load i8*, i8** %76, align 8
  %78 = sext i32 %1 to i64
  %79 = getelementptr inbounds i8, i8* %77, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %5 to i64
  %82 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %80, i64 %84, i1 false) #6
  %85 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %81
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %80, i64 %87, i1 false) #6
  %88 = zext i8 %4 to i64
  %89 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = lshr i8 %90, 2
  %92 = zext i8 %91 to i32
  %93 = mul nsw i32 %92, %2
  %94 = add nsw i32 %93, %3
  br i1 %68, label %95, label %107

95:                                               ; preds = %74
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 0, i64 0, i32 4
  %97 = load i16*, i16** %96, align 8
  %98 = getelementptr inbounds i16, i16* %97, i64 %78
  %99 = load i16, i16* %98, align 2
  %100 = icmp eq i16 %99, 0
  %101 = sext i32 %94 to i64
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 58, i32 1, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = or i8 %103, 1
  %105 = and i8 %103, -2
  %106 = select i1 %100, i8 %104, i8 %105
  store i8 %106, i8* %102, align 1
  br label %116

107:                                              ; preds = %74
  %108 = zext i32 %0 to i64
  %109 = shl i64 1, %108
  %110 = sext i32 %94 to i64
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 58, i32 1, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = trunc i64 %109 to i8
  %114 = xor i8 %113, -1
  %115 = and i8 %112, %114
  store i8 %115, i8* %111, align 1
  br label %116

116:                                              ; preds = %107, %95
  %117 = load i32, i32* %45, align 8
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 17
  %120 = load i32, i32* %119, align 8
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, %118
  %123 = add nsw i64 %122, 256
  %124 = ashr i64 %123, 9
  %125 = load i64, i64* %46, align 8
  %126 = shl nsw i64 %125, 7
  %127 = add nsw i64 %124, %126
  br i1 %34, label %128, label %142

128:                                              ; preds = %116
  %129 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 3
  %130 = load i64, i64* %129, align 8
  %131 = shl nsw i64 %130, 7
  %132 = icmp slt i64 %127, %131
  %133 = select i1 %132, i64 %127, i64 %131
  %134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %20, i64 0, i32 0, i64 %75, i32 4
  %135 = load i16*, i16** %134, align 8
  %136 = getelementptr inbounds i16, i16* %135, i64 %78
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 0
  %139 = zext i1 %138 to i32
  %140 = load i32, i32* %47, align 8
  %141 = and i32 %140, %139
  br label %142

142:                                              ; preds = %116, %128
  %143 = phi i32 [ %141, %128 ], [ 0, %116 ]
  %144 = phi i64 [ %133, %128 ], [ %127, %116 ]
  store i32 %143, i32* %47, align 8
  %145 = getelementptr inbounds i8, i8* %6, i64 80
  %146 = bitcast i8* %145 to i32*
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %147, 2147483647
  %149 = icmp eq i32 %117, 2147483647
  %150 = or i1 %149, %148
  br i1 %150, label %151, label %160

151:                                              ; preds = %142
  store i32 2147483647, i32* %146, align 8
  %152 = getelementptr inbounds i8, i8* %6, i64 88
  %153 = bitcast i8* %152 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %153, align 8
  %154 = getelementptr inbounds i8, i8* %6, i64 104
  %155 = bitcast i8* %154 to i64*
  store i64 9223372036854775807, i64* %155, align 8
  %156 = getelementptr inbounds i8, i8* %6, i64 112
  %157 = bitcast i8* %156 to i32*
  store i32 0, i32* %157, align 8
  %158 = getelementptr inbounds i8, i8* %6, i64 116
  %159 = bitcast i8* %158 to i32*
  store i32 0, i32* %159, align 4
  br label %187

160:                                              ; preds = %142
  %161 = sext i32 %147 to i64
  %162 = add nsw i64 %161, %118
  %163 = icmp slt i64 %162, 2147483647
  %164 = select i1 %163, i64 %162, i64 2147483647
  %165 = trunc i64 %164 to i32
  store i32 %165, i32* %146, align 8
  %166 = getelementptr inbounds i8, i8* %6, i64 116
  %167 = bitcast i8* %166 to i32*
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %160
  %171 = load i32, i32* %49, align 4
  store i32 %171, i32* %167, align 4
  br label %172

172:                                              ; preds = %170, %160
  %173 = getelementptr inbounds i8, i8* %6, i64 88
  %174 = bitcast i8* %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = add nsw i64 %175, %125
  store i64 %176, i64* %174, align 8
  %177 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 3
  %178 = load i64, i64* %177, align 8
  %179 = getelementptr inbounds i8, i8* %6, i64 104
  %180 = bitcast i8* %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = add nsw i64 %181, %178
  store i64 %182, i64* %180, align 8
  %183 = getelementptr inbounds i8, i8* %6, i64 112
  %184 = bitcast i8* %183 to i32*
  %185 = load i32, i32* %184, align 8
  %186 = and i32 %185, %143
  store i32 %186, i32* %184, align 8
  br label %187

187:                                              ; preds = %151, %172
  %188 = load i64, i64* %65, align 8
  %189 = add nsw i64 %188, %144
  store i64 %189, i64* %65, align 8
  %190 = load i64, i64* %62, align 8
  %191 = icmp sgt i64 %189, %190
  br i1 %191, label %192, label %193

192:                                              ; preds = %187
  store i32 1, i32* %11, align 8
  br label %193

193:                                              ; preds = %192, %187
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %43) #6
  br label %194

194:                                              ; preds = %193, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_txfm_search(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, %struct.RD_STATS*, %struct.RD_STATS*, %struct.RD_STATS*, i32, i64) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 12
  %10 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %9, align 16
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 11
  %12 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %11, align 8
  %13 = icmp eq %struct.MB_MODE_INFO* %10, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %10, i64 0, i32 23
  %16 = load i8, i8* %15, align 8
  %17 = sext i8 %16 to i64
  br label %18

18:                                               ; preds = %14, %8
  %19 = phi i64 [ %17, %14 ], [ 0, %8 ]
  %20 = icmp eq %struct.MB_MODE_INFO* %12, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %12, i64 0, i32 23
  %23 = load i8, i8* %22, align 8
  %24 = sext i8 %23 to i64
  br label %25

25:                                               ; preds = %18, %21
  %26 = phi i64 [ %24, %21 ], [ 0, %18 ]
  %27 = add nsw i64 %26, %19
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %27, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 38, i64 %27, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %29, %31
  %33 = select i1 %32, i32 %29, i32 %31
  %34 = add nsw i32 %33, %6
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %37 = load i32, i32* %36, align 8
  %38 = sext i32 %37 to i64
  %39 = mul nsw i64 %35, %38
  %40 = add nsw i64 %39, 256
  %41 = ashr i64 %40, 9
  %42 = icmp sgt i64 %41, %7
  br i1 %42, label %43, label %50

43:                                               ; preds = %25
  %44 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 0
  store i32 2147483647, i32* %44, align 8
  %45 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 1
  %46 = bitcast i64* %45 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %46, align 8
  %47 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 3
  store i64 9223372036854775807, i64* %47, align 8
  %48 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 4
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 5
  store i32 0, i32* %49, align 4
  br label %323

50:                                               ; preds = %25
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %52 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %51, align 8
  %53 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %52, align 8
  %54 = icmp eq i64 %7, 9223372036854775807
  br i1 %54, label %61, label %55

55:                                               ; preds = %50
  %56 = sext i32 %6 to i64
  %57 = mul nsw i64 %38, %56
  %58 = add nsw i64 %57, 256
  %59 = ashr i64 %58, 9
  %60 = sub nsw i64 %7, %59
  br label %61

61:                                               ; preds = %50, %55
  %62 = phi i64 [ %60, %55 ], [ 9223372036854775807, %50 ]
  %63 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 0
  %64 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 1
  %65 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 4
  %66 = bitcast i64* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %65, align 8
  %67 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 5
  store i32 0, i32* %67, align 4
  %68 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 0
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 1
  %70 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 4
  %71 = bitcast i64* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %70, align 8
  %72 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 5
  store i32 0, i32* %72, align 4
  store i32 %6, i32* %63, align 8
  tail call void @av1_subtract_plane(%struct.macroblock* %1, i8 zeroext %2, i32 0) #6
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 8
  %74 = load i8, i8* %73, align 4
  %75 = icmp eq i8 %74, 2
  br i1 %75, label %76, label %85

76:                                               ; preds = %61
  %77 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %53, i64 0, i32 28
  %78 = load i16, i16* %77, align 1
  %79 = and i16 %78, 7
  %80 = zext i16 %79 to i64
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %76
  tail call void @av1_pick_recursive_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* %4, i8 zeroext %2, i64 %62)
  br label %155

85:                                               ; preds = %76, %61
  tail call void @av1_pick_uniform_tx_size_type_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* %4, i8 zeroext %2, i64 %62)
  %86 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %53, i64 0, i32 25, i64 0
  %87 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %53, i64 0, i32 24
  %88 = load i8, i8* %87, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %86, i8 %88, i64 16, i1 false)
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 33
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 32
  %93 = load i8, i8* %92, align 4
  %94 = zext i8 %93 to i32
  %95 = mul nuw nsw i32 %94, %91
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %155, label %97

97:                                               ; preds = %85
  %98 = zext i32 %95 to i64
  %99 = icmp ult i32 %95, 8
  br i1 %99, label %142, label %100

100:                                              ; preds = %97
  %101 = getelementptr %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 0
  %102 = getelementptr %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 897, i32 5
  %103 = bitcast i8** %102 to i8*
  %104 = add nuw nsw i64 %98, 4
  %105 = getelementptr i8, i8* %103, i64 %104
  %106 = getelementptr %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 4
  %107 = bitcast i32* %106 to i8*
  %108 = getelementptr i8, i8* %107, i64 1
  %109 = bitcast i32* %70 to i8*
  %110 = icmp ult i8* %101, %108
  %111 = icmp ugt i8* %105, %109
  %112 = and i1 %110, %111
  br i1 %112, label %142, label %113

113:                                              ; preds = %100
  %114 = and i64 %98, 65528
  %115 = load i32, i32* %70, align 8, !alias.scope !19
  %116 = insertelement <4 x i32> undef, i32 %115, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  %118 = insertelement <4 x i32> undef, i32 %115, i32 0
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> zeroinitializer
  %120 = icmp eq <4 x i32> %117, zeroinitializer
  %121 = icmp eq <4 x i32> %119, zeroinitializer
  br label %122

122:                                              ; preds = %122, %113
  %123 = phi i64 [ 0, %113 ], [ %138, %122 ]
  %124 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 %123
  %125 = bitcast i8* %124 to <4 x i8>*
  %126 = load <4 x i8>, <4 x i8>* %125, align 1, !alias.scope !22, !noalias !19
  %127 = getelementptr inbounds i8, i8* %124, i64 4
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1, !alias.scope !22, !noalias !19
  %130 = or <4 x i8> %126, <i8 1, i8 1, i8 1, i8 1>
  %131 = or <4 x i8> %129, <i8 1, i8 1, i8 1, i8 1>
  %132 = and <4 x i8> %126, <i8 -2, i8 -2, i8 -2, i8 -2>
  %133 = and <4 x i8> %129, <i8 -2, i8 -2, i8 -2, i8 -2>
  %134 = select <4 x i1> %120, <4 x i8> %132, <4 x i8> %130
  %135 = select <4 x i1> %121, <4 x i8> %133, <4 x i8> %131
  %136 = bitcast i8* %124 to <4 x i8>*
  store <4 x i8> %134, <4 x i8>* %136, align 1, !alias.scope !22, !noalias !19
  %137 = bitcast i8* %127 to <4 x i8>*
  store <4 x i8> %135, <4 x i8>* %137, align 1, !alias.scope !22, !noalias !19
  %138 = add i64 %123, 8
  %139 = icmp eq i64 %138, %114
  br i1 %139, label %140, label %122, !llvm.loop !24

140:                                              ; preds = %122
  %141 = icmp eq i64 %114, %98
  br i1 %141, label %155, label %142

142:                                              ; preds = %140, %100, %97
  %143 = phi i64 [ 0, %100 ], [ 0, %97 ], [ %114, %140 ]
  br label %144

144:                                              ; preds = %142, %144
  %145 = phi i64 [ %153, %144 ], [ %143, %142 ]
  %146 = load i32, i32* %70, align 8
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 %145
  %149 = load i8, i8* %148, align 1
  %150 = or i8 %149, 1
  %151 = and i8 %149, -2
  %152 = select i1 %147, i8 %151, i8 %150
  store i8 %152, i8* %148, align 1
  %153 = add nuw nsw i64 %145, 1
  %154 = icmp ult i64 %153, %98
  br i1 %154, label %144, label %155, !llvm.loop !25

155:                                              ; preds = %144, %140, %85, %84
  %156 = load i32, i32* %68, align 8
  %157 = icmp eq i32 %156, 2147483647
  br i1 %157, label %323, label %158

158:                                              ; preds = %155
  %159 = load i32, i32* %63, align 8
  %160 = icmp eq i32 %159, 2147483647
  br i1 %160, label %161, label %164

161:                                              ; preds = %158
  store i32 2147483647, i32* %63, align 8
  %162 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %162, align 8
  %163 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 3
  store i64 9223372036854775807, i64* %163, align 8
  store i32 0, i32* %65, align 8
  store i32 0, i32* %67, align 4
  br label %189

164:                                              ; preds = %158
  %165 = sext i32 %159 to i64
  %166 = sext i32 %156 to i64
  %167 = add nsw i64 %165, %166
  %168 = icmp slt i64 %167, 2147483647
  %169 = select i1 %168, i64 %167, i64 2147483647
  %170 = trunc i64 %169 to i32
  store i32 %170, i32* %63, align 8
  %171 = load i32, i32* %67, align 4
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %175

173:                                              ; preds = %164
  %174 = load i32, i32* %72, align 4
  store i32 %174, i32* %67, align 4
  br label %175

175:                                              ; preds = %173, %164
  %176 = load i64, i64* %69, align 8
  %177 = load i64, i64* %64, align 8
  %178 = add nsw i64 %177, %176
  store i64 %178, i64* %64, align 8
  %179 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 3
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 3
  %182 = load i64, i64* %181, align 8
  %183 = add nsw i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = load i32, i32* %70, align 8
  %185 = load i32, i32* %65, align 8
  %186 = and i32 %185, %184
  store i32 %186, i32* %65, align 8
  %187 = shl i64 %178, 7
  %188 = shl i64 %183, 7
  br label %189

189:                                              ; preds = %161, %175
  %190 = phi i64 [ -128, %161 ], [ %188, %175 ]
  %191 = phi i64 [ -128, %161 ], [ %187, %175 ]
  %192 = phi i32 [ 2147483647, %161 ], [ %170, %175 ]
  %193 = add nsw i32 %192, %29
  %194 = sext i32 %193 to i64
  %195 = load i32, i32* %36, align 8
  %196 = sext i32 %195 to i64
  %197 = mul nsw i64 %194, %196
  %198 = add nsw i64 %197, 256
  %199 = ashr i64 %198, 9
  %200 = add nsw i64 %199, %191
  %201 = add nsw i32 %31, %6
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %196, %202
  %204 = add nsw i64 %203, 256
  %205 = ashr i64 %204, 9
  %206 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %3, i64 0, i32 3
  %207 = add nsw i64 %205, %190
  %208 = icmp slt i64 %200, %207
  %209 = select i1 %208, i64 %200, i64 %207
  %210 = icmp sgt i64 %209, %7
  br i1 %210, label %323, label %211

211:                                              ; preds = %189
  %212 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 0
  store i32 0, i32* %212, align 8
  %213 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 1
  %214 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 4
  %215 = bitcast i64* %213 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %215, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %214, align 8
  %216 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 5
  store i32 0, i32* %216, align 4
  %217 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %218 = load %struct.SequenceHeader*, %struct.SequenceHeader** %217, align 16
  %219 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %218, i64 0, i32 27
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %222, label %262

222:                                              ; preds = %211
  %223 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 6, i32 11
  %224 = load i32, i32* %223, align 4
  %225 = icmp ne i32 %224, 0
  %226 = icmp ne i64 %7, 9223372036854775807
  %227 = and i1 %226, %225
  %228 = select i1 %227, i64 %209, i64 0
  %229 = sub nsw i64 %7, %228
  %230 = tail call i32 @av1_txfm_uvrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, %struct.RD_STATS* %5, i8 zeroext %2, i64 %229)
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %323, label %232

232:                                              ; preds = %222
  %233 = load i32, i32* %63, align 8
  %234 = icmp eq i32 %233, 2147483647
  br i1 %234, label %238, label %235

235:                                              ; preds = %232
  %236 = load i32, i32* %212, align 8
  %237 = icmp eq i32 %236, 2147483647
  br i1 %237, label %238, label %240

238:                                              ; preds = %232, %235
  store i32 2147483647, i32* %63, align 8
  %239 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %239, align 8
  store i64 9223372036854775807, i64* %206, align 8
  store i32 0, i32* %65, align 8
  store i32 0, i32* %67, align 4
  br label %267

240:                                              ; preds = %235
  %241 = sext i32 %233 to i64
  %242 = sext i32 %236 to i64
  %243 = add nsw i64 %242, %241
  %244 = icmp slt i64 %243, 2147483647
  %245 = select i1 %244, i64 %243, i64 2147483647
  %246 = trunc i64 %245 to i32
  store i32 %246, i32* %63, align 8
  %247 = load i32, i32* %67, align 4
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %251

249:                                              ; preds = %240
  %250 = load i32, i32* %216, align 4
  store i32 %250, i32* %67, align 4
  br label %251

251:                                              ; preds = %249, %240
  %252 = load i64, i64* %213, align 8
  %253 = load i64, i64* %64, align 8
  %254 = add nsw i64 %253, %252
  store i64 %254, i64* %64, align 8
  %255 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 3
  %256 = load i64, i64* %255, align 8
  %257 = load i64, i64* %206, align 8
  %258 = add nsw i64 %257, %256
  store i64 %258, i64* %206, align 8
  %259 = load i32, i32* %214, align 8
  %260 = load i32, i32* %65, align 8
  %261 = and i32 %260, %259
  store i32 %261, i32* %65, align 8
  br label %264

262:                                              ; preds = %211
  %263 = load i32, i32* %65, align 8
  br label %264

264:                                              ; preds = %262, %251
  %265 = phi i32 [ %263, %262 ], [ %261, %251 ]
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %297

267:                                              ; preds = %238, %264
  %268 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %53, i64 0, i32 28
  %269 = load i16, i16* %268, align 1
  %270 = and i16 %269, 7
  %271 = zext i16 %270 to i64
  %272 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %318

275:                                              ; preds = %267
  %276 = load i32, i32* %68, align 8
  %277 = load i32, i32* %212, align 8
  %278 = add i32 %276, %29
  %279 = add i32 %278, %277
  %280 = sext i32 %279 to i64
  %281 = load i32, i32* %36, align 8
  %282 = sext i32 %281 to i64
  %283 = mul nsw i64 %280, %282
  %284 = add nsw i64 %283, 256
  %285 = ashr i64 %284, 9
  %286 = load i64, i64* %64, align 8
  %287 = shl i64 %286, 7
  %288 = add nsw i64 %285, %287
  %289 = sext i32 %31 to i64
  %290 = mul nsw i64 %282, %289
  %291 = add nsw i64 %290, 256
  %292 = ashr i64 %291, 9
  %293 = load i64, i64* %206, align 8
  %294 = shl i64 %293, 7
  %295 = add nsw i64 %292, %294
  %296 = icmp slt i64 %288, %295
  br i1 %296, label %318, label %297

297:                                              ; preds = %264, %275
  store i32 0, i32* %68, align 8
  store i32 0, i32* %212, align 8
  store i32 %201, i32* %63, align 8
  %298 = load i64, i64* %206, align 8
  store i64 %298, i64* %64, align 8
  %299 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %4, i64 0, i32 3
  %300 = load i64, i64* %299, align 8
  store i64 %300, i64* %69, align 8
  %301 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %5, i64 0, i32 3
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %213, align 8
  %303 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %53, i64 0, i32 23
  store i8 1, i8* %303, align 8
  %304 = load i32, i32* %65, align 8
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %322, label %306

306:                                              ; preds = %297
  %307 = load i32, i32* %63, align 8
  %308 = sext i32 %307 to i64
  %309 = load i32, i32* %36, align 8
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, %308
  %312 = add nsw i64 %311, 256
  %313 = ashr i64 %312, 9
  %314 = load i64, i64* %64, align 8
  %315 = shl i64 %314, 7
  %316 = add nsw i64 %313, %315
  %317 = icmp sgt i64 %316, %7
  br i1 %317, label %323, label %322

318:                                              ; preds = %275, %267
  %319 = load i32, i32* %63, align 8
  %320 = add nsw i32 %319, %29
  store i32 %320, i32* %63, align 8
  %321 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %53, i64 0, i32 23
  store i8 0, i8* %321, align 8
  br label %322

322:                                              ; preds = %306, %297, %318
  br label %323

323:                                              ; preds = %306, %155, %222, %322, %189, %43
  %324 = phi i32 [ 0, %43 ], [ 0, %155 ], [ 0, %189 ], [ 0, %222 ], [ 1, %322 ], [ 0, %306 ]
  ret i32 %324
}

declare i32 @av1_get_tx_scale(i8 zeroext) local_unnamed_addr #2

declare i32 @av1_cost_coeffs_txb(%struct.macroblock*, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #5

declare void @av1_model_rd_curvfit(i8 zeroext, double, double, double*, double*) local_unnamed_addr #2

declare signext i16 @av1_dc_quant_QTX(i32, i32, i32) local_unnamed_addr #2

declare signext i16 @av1_ac_quant_QTX(i32, i32, i32) local_unnamed_addr #2

declare void @av1_fwd_txfm(i16*, i32*, i32, %struct.txfm_param*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @select_tx_block(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i32, i8 zeroext, i32, i8 zeroext, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, %struct.RD_STATS* nocapture, i64, i64, i32* nocapture, i8 zeroext, %struct.tx_size_rd_info_node* readonly) unnamed_addr #4 {
  %19 = alloca %struct.RD_STATS, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca [64 x float], align 16
  %24 = alloca float, align 4
  %25 = alloca %struct.txb_ctx, align 4
  %26 = alloca i32, align 4
  %27 = alloca i64, align 8
  %28 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 0
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 1
  %30 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 4
  %31 = bitcast i64* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %30, align 8
  %32 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 5
  store i32 0, i32* %32, align 4
  %33 = icmp slt i64 %14, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %18
  store i32 0, i32* %15, align 4
  br label %1126

35:                                               ; preds = %18
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %37 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %36, align 8
  %38 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %37, align 8
  %39 = sext i32 %3 to i64
  %40 = getelementptr inbounds i8, i8* %10, i64 %39
  %41 = sext i32 %2 to i64
  %42 = getelementptr inbounds i8, i8* %11, i64 %41
  %43 = zext i8 %5 to i64
  %44 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %43
  %47 = load i32, i32* %46, align 4
  %48 = load i8, i8* %40, align 1
  %49 = zext i8 %48 to i32
  %50 = and i32 %45, 255
  %51 = icmp ugt i32 %50, %49
  %52 = zext i1 %51 to i64
  %53 = load i8, i8* %42, align 1
  %54 = zext i8 %53 to i32
  %55 = and i32 %47, 255
  %56 = icmp ugt i32 %55, %54
  %57 = zext i1 %56 to i64
  %58 = icmp eq i8 %5, 0
  br i1 %58, label %89, label %59

59:                                               ; preds = %35
  %60 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 0
  %61 = load i8, i8* %60, align 8
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %62
  %66 = load i8, i8* %65, align 1
  %67 = icmp ugt i8 %64, %66
  %68 = select i1 %67, i8 %64, i8 %66
  switch i8 %68, label %85 [
    i8 -128, label %72
    i8 64, label %72
    i8 32, label %69
    i8 16, label %70
    i8 8, label %71
  ]

69:                                               ; preds = %59
  br label %72

70:                                               ; preds = %59
  br label %72

71:                                               ; preds = %59
  br label %72

72:                                               ; preds = %71, %70, %69, %59, %59
  %73 = phi i8 [ 4, %59 ], [ 4, %59 ], [ 3, %69 ], [ 2, %70 ], [ 1, %71 ]
  %74 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %43
  %75 = load i8, i8* %74, align 1
  %76 = icmp ne i8 %75, %73
  %77 = icmp ne i8 %73, 1
  %78 = and i1 %77, %76
  %79 = zext i1 %78 to i64
  %80 = shl nuw nsw i8 %73, 1
  %81 = zext i8 %80 to i64
  %82 = sub nuw nsw i64 8, %81
  %83 = or i64 %82, %79
  %84 = mul nsw i64 %83, 3
  br label %85

85:                                               ; preds = %72, %59
  %86 = phi i64 [ %84, %72 ], [ 63, %59 ]
  %87 = add nuw nsw i64 %57, %52
  %88 = add nsw i64 %87, %86
  br label %89

89:                                               ; preds = %35, %85
  %90 = phi i64 [ %88, %85 ], [ 0, %35 ]
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 0
  %92 = load i8, i8* %91, align 2, !range !12
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %103

94:                                               ; preds = %89
  %95 = lshr i64 124911, %43
  %96 = and i64 %95, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %103

98:                                               ; preds = %94
  %99 = icmp ne i8 %5, 0
  %100 = icmp slt i32 %6, 2
  %101 = and i1 %99, %100
  %102 = zext i1 %101 to i32
  br label %684

103:                                              ; preds = %89, %94
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 2
  %105 = load i8, i8* %104, align 2, !range !12
  %106 = icmp ne i8 %105, 0
  %107 = icmp eq i32 %45, %47
  %108 = or i1 %107, %106
  %109 = icmp ne i8 %5, 0
  %110 = icmp slt i32 %6, 2
  %111 = and i1 %109, %110
  %112 = zext i1 %111 to i32
  %113 = and i1 %111, %108
  br i1 %113, label %114, label %268

114:                                              ; preds = %103
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 12
  %116 = load i32, i32* %115, align 4
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %268

118:                                              ; preds = %114
  %119 = zext i8 %7 to i64
  %120 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0
  %124 = load i16*, i16** %123, align 16
  %125 = shl i32 %2, 2
  %126 = mul nsw i32 %125, %122
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %124, i64 %127
  %129 = shl nsw i32 %3, 2
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %128, i64 %130
  %132 = icmp sge i32 %47, %45
  %133 = zext i1 %132 to i32
  %134 = ashr i32 %47, %133
  %135 = icmp sge i32 %45, %47
  %136 = zext i1 %135 to i32
  %137 = ashr i32 %45, %136
  %138 = mul nsw i32 %137, %134
  %139 = bitcast i32* %26 to i8*
  %140 = bitcast i64* %27 to i8*
  %141 = sitofp i32 %138 to float
  %142 = sitofp i32 %138 to double
  %143 = sext i32 %137 to i64
  %144 = sext i32 %45 to i64
  %145 = sext i32 %134 to i64
  %146 = zext i8 %121 to i64
  %147 = sext i32 %47 to i64
  br label %148

148:                                              ; preds = %170, %118
  %149 = phi i64 [ 0, %118 ], [ %171, %170 ]
  %150 = phi float [ 0.000000e+00, %118 ], [ %194, %170 ]
  %151 = phi float [ 0.000000e+00, %118 ], [ %195, %170 ]
  %152 = phi i32 [ 0, %118 ], [ %201, %170 ]
  %153 = phi i64 [ 0, %118 ], [ %186, %170 ]
  %154 = phi i32 [ 0, %118 ], [ %184, %170 ]
  %155 = phi <2 x double> [ zeroinitializer, %118 ], [ %200, %170 ]
  %156 = mul nsw i64 %149, %146
  %157 = getelementptr inbounds i16, i16* %131, i64 %156
  br label %173

158:                                              ; preds = %170
  %159 = mul nsw i32 %47, %45
  %160 = sitofp i32 %184 to float
  %161 = sitofp i32 %159 to float
  %162 = fdiv float %160, %161
  %163 = sitofp i64 %186 to double
  %164 = sitofp i32 %159 to double
  %165 = fdiv double %163, %164
  %166 = fptrunc double %165 to float
  %167 = fmul float %162, %162
  %168 = fsub float %166, %167
  %169 = icmp sgt i32 %177, 0
  br i1 %169, label %204, label %232

170:                                              ; preds = %173
  %171 = add i64 %149, %145
  %172 = icmp slt i64 %171, %147
  br i1 %172, label %148, label %158

173:                                              ; preds = %173, %148
  %174 = phi i64 [ 0, %148 ], [ %202, %173 ]
  %175 = phi float [ %150, %148 ], [ %194, %173 ]
  %176 = phi float [ %151, %148 ], [ %195, %173 ]
  %177 = phi i32 [ %152, %148 ], [ %201, %173 ]
  %178 = phi i64 [ %153, %148 ], [ %186, %173 ]
  %179 = phi i32 [ %154, %148 ], [ %184, %173 ]
  %180 = phi <2 x double> [ %155, %148 ], [ %200, %173 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %139) #6
  store i32 -1431655766, i32* %26, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %140) #6
  store i64 -6148914691236517206, i64* %27, align 8
  %181 = load void (i16*, i32, i32, i32, i32*, i64*)*, void (i16*, i32, i32, i32, i32*, i64*)** @aom_get_blk_sse_sum, align 8
  %182 = getelementptr inbounds i16, i16* %157, i64 %174
  call void %181(i16* %182, i32 %122, i32 %137, i32 %134, i32* nonnull %26, i64* nonnull %27) #6
  %183 = load i32, i32* %26, align 4
  %184 = add nsw i32 %183, %179
  %185 = load i64, i64* %27, align 8
  %186 = add nsw i64 %185, %178
  %187 = sitofp i32 %183 to float
  %188 = fdiv float %187, %141
  %189 = sitofp i64 %185 to double
  %190 = fdiv double %189, %142
  %191 = fptrunc double %190 to float
  %192 = fmul float %188, %188
  %193 = fsub float %191, %192
  %194 = fadd float %175, %188
  %195 = fadd float %176, %193
  %196 = fmul float %193, %193
  %197 = insertelement <2 x float> undef, float %192, i32 0
  %198 = insertelement <2 x float> %197, float %196, i32 1
  %199 = fpext <2 x float> %198 to <2 x double>
  %200 = fadd <2 x double> %180, %199
  %201 = add nsw i32 %177, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %140) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %139) #6
  %202 = add i64 %174, %143
  %203 = icmp slt i64 %202, %144
  br i1 %203, label %173, label %170

204:                                              ; preds = %158
  %205 = fadd float %162, %194
  %206 = fdiv float %205, 5.000000e+00
  %207 = fmul float %168, %168
  %208 = fpext float %207 to double
  %209 = extractelement <2 x double> %200, i32 1
  %210 = fadd double %209, %208
  %211 = fadd float %195, %168
  %212 = fpext float %167 to double
  %213 = extractelement <2 x double> %200, i32 0
  %214 = fadd double %213, %212
  %215 = add nuw nsw i32 %177, 2
  %216 = sitofp i32 %215 to double
  %217 = fdiv double %214, %216
  %218 = fptrunc double %217 to float
  %219 = fmul float %206, %206
  %220 = fsub float %218, %219
  %221 = fcmp ogt float %220, 0.000000e+00
  br i1 %221, label %222, label %224

222:                                              ; preds = %204
  %223 = call float @sqrtf(float %220) #6
  br label %224

224:                                              ; preds = %222, %204
  %225 = phi float [ %223, %222 ], [ 0.000000e+00, %204 ]
  %226 = sitofp i32 %215 to float
  %227 = fdiv float %211, %226
  %228 = fdiv double %210, %216
  %229 = fptrunc double %228 to float
  %230 = fmul float %227, %227
  %231 = fsub float %229, %230
  br label %232

232:                                              ; preds = %224, %158
  %233 = phi float [ %225, %224 ], [ 0.000000e+00, %158 ]
  %234 = phi float [ %231, %224 ], [ 0.000000e+00, %158 ]
  %235 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 13
  %236 = load i16*, i16** %235, align 16
  %237 = load i16, i16* %236, align 2
  %238 = ashr i16 %237, 3
  %239 = sext i16 %238 to i32
  %240 = getelementptr inbounds i16, i16* %236, i64 1
  %241 = load i16, i16* %240, align 2
  %242 = ashr i16 %241, 3
  %243 = sext i16 %242 to i32
  %244 = sext i32 %116 to i64
  %245 = getelementptr inbounds [4 x i32], [4 x i32]* @prune_tx_split_no_split.no_split_thresh_scales, i64 0, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = sitofp i16 %238 to float
  %248 = fcmp ugt float %233, %247
  br i1 %248, label %258, label %249

249:                                              ; preds = %232
  %250 = getelementptr inbounds [4 x i32], [4 x i32]* @prune_tx_split_no_split.split_thresh_scales, i64 0, i64 %244
  %251 = load i32, i32* %250, align 4
  %252 = sitofp i32 %251 to float
  %253 = fmul float %234, %252
  %254 = mul nsw i32 %243, %243
  %255 = sitofp i32 %254 to float
  %256 = fcmp ugt float %253, %255
  br i1 %256, label %258, label %257

257:                                              ; preds = %249
  br label %258

258:                                              ; preds = %257, %249, %232
  %259 = phi i32 [ %112, %232 ], [ %112, %249 ], [ 0, %257 ]
  %260 = mul nsw i32 %246, %239
  %261 = sitofp i32 %260 to float
  %262 = fcmp ogt float %233, %261
  br i1 %262, label %263, label %268

263:                                              ; preds = %258
  %264 = mul nsw i32 %243, %243
  %265 = mul i32 %264, %246
  %266 = sitofp i32 %265 to float
  %267 = fcmp ogt float %234, %266
  br i1 %267, label %684, label %268

268:                                              ; preds = %263, %258, %114, %103
  %269 = phi i32 [ %112, %114 ], [ %112, %103 ], [ %259, %258 ], [ %259, %263 ]
  br i1 %108, label %270, label %684

270:                                              ; preds = %268
  %271 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %36, align 8
  %272 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %271, align 8
  %273 = zext i8 %7 to i64
  %274 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = getelementptr inbounds i8, i8* %8, i64 %39
  %277 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %43
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i64
  %280 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %43
  %281 = load i8, i8* %280, align 1
  %282 = add nuw nsw i64 %279, 1
  %283 = bitcast %struct.txb_ctx* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %283) #6
  %284 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %25, i64 0, i32 0
  store i32 -1431655766, i32* %284, align 4
  %285 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %25, i64 0, i32 1
  store i32 -1431655766, i32* %285, align 4
  %286 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %43
  %287 = load i32, i32* %286, align 4
  %288 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %43
  %289 = load i32, i32* %288, align 4
  %290 = sext i32 %287 to i64
  br label %291

291:                                              ; preds = %291, %270
  %292 = phi i64 [ %302, %291 ], [ 0, %270 ]
  %293 = phi i32 [ %301, %291 ], [ 0, %270 ]
  %294 = getelementptr inbounds i8, i8* %276, i64 %292
  %295 = load i8, i8* %294, align 1
  %296 = lshr i8 %295, 3
  %297 = zext i8 %296 to i64
  %298 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %297
  %299 = load i8, i8* %298, align 1
  %300 = sext i8 %299 to i32
  %301 = add nsw i32 %293, %300
  %302 = add nuw nsw i64 %292, 1
  %303 = icmp slt i64 %302, %290
  br i1 %303, label %291, label %304

304:                                              ; preds = %291
  %305 = zext i8 %281 to i64
  %306 = add nuw nsw i64 %282, %305
  %307 = getelementptr inbounds i8, i8* %9, i64 %41
  %308 = sext i32 %289 to i64
  br label %309

309:                                              ; preds = %309, %304
  %310 = phi i64 [ 0, %304 ], [ %320, %309 ]
  %311 = phi i32 [ %301, %304 ], [ %319, %309 ]
  %312 = getelementptr inbounds i8, i8* %307, i64 %310
  %313 = load i8, i8* %312, align 1
  %314 = lshr i8 %313, 3
  %315 = zext i8 %314 to i64
  %316 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %315
  %317 = load i8, i8* %316, align 1
  %318 = sext i8 %317 to i32
  %319 = add nsw i32 %311, %318
  %320 = add nuw nsw i64 %310, 1
  %321 = icmp slt i64 %320, %308
  br i1 %321, label %309, label %322

322:                                              ; preds = %309
  %323 = zext i8 %275 to i32
  %324 = lshr i64 %306, 1
  %325 = add nsw i32 %319, 32
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds [65 x i8], [65 x i8]* @get_txb_ctx.dc_sign_contexts, i64 0, i64 %326
  %328 = load i8, i8* %327, align 1
  %329 = sext i8 %328 to i32
  store i32 %329, i32* %285, align 4
  %330 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %43
  %331 = load i8, i8* %330, align 1
  %332 = icmp eq i8 %331, %7
  br i1 %332, label %511, label %333

333:                                              ; preds = %322
  %334 = icmp sgt i64 %290, 1
  %335 = select i1 %334, i64 %290, i64 1
  %336 = icmp ult i64 %335, 8
  br i1 %336, label %403, label %337

337:                                              ; preds = %333
  %338 = and i64 %335, 9223372036854775800
  %339 = add nsw i64 %338, -8
  %340 = lshr exact i64 %339, 3
  %341 = add nuw nsw i64 %340, 1
  %342 = and i64 %341, 1
  %343 = icmp eq i64 %339, 0
  br i1 %343, label %375, label %344

344:                                              ; preds = %337
  %345 = sub nuw nsw i64 %341, %342
  br label %346

346:                                              ; preds = %346, %344
  %347 = phi i64 [ 0, %344 ], [ %372, %346 ]
  %348 = phi <4 x i32> [ zeroinitializer, %344 ], [ %370, %346 ]
  %349 = phi <4 x i32> [ zeroinitializer, %344 ], [ %371, %346 ]
  %350 = phi i64 [ %345, %344 ], [ %373, %346 ]
  %351 = getelementptr inbounds i8, i8* %276, i64 %347
  %352 = bitcast i8* %351 to <4 x i8>*
  %353 = load <4 x i8>, <4 x i8>* %352, align 1
  %354 = getelementptr inbounds i8, i8* %351, i64 4
  %355 = bitcast i8* %354 to <4 x i8>*
  %356 = load <4 x i8>, <4 x i8>* %355, align 1
  %357 = sext <4 x i8> %353 to <4 x i32>
  %358 = sext <4 x i8> %356 to <4 x i32>
  %359 = or <4 x i32> %348, %357
  %360 = or <4 x i32> %349, %358
  %361 = or i64 %347, 8
  %362 = getelementptr inbounds i8, i8* %276, i64 %361
  %363 = bitcast i8* %362 to <4 x i8>*
  %364 = load <4 x i8>, <4 x i8>* %363, align 1
  %365 = getelementptr inbounds i8, i8* %362, i64 4
  %366 = bitcast i8* %365 to <4 x i8>*
  %367 = load <4 x i8>, <4 x i8>* %366, align 1
  %368 = sext <4 x i8> %364 to <4 x i32>
  %369 = sext <4 x i8> %367 to <4 x i32>
  %370 = or <4 x i32> %359, %368
  %371 = or <4 x i32> %360, %369
  %372 = add i64 %347, 16
  %373 = add i64 %350, -2
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %375, label %346, !llvm.loop !26

375:                                              ; preds = %346, %337
  %376 = phi <4 x i32> [ undef, %337 ], [ %370, %346 ]
  %377 = phi <4 x i32> [ undef, %337 ], [ %371, %346 ]
  %378 = phi i64 [ 0, %337 ], [ %372, %346 ]
  %379 = phi <4 x i32> [ zeroinitializer, %337 ], [ %370, %346 ]
  %380 = phi <4 x i32> [ zeroinitializer, %337 ], [ %371, %346 ]
  %381 = icmp eq i64 %342, 0
  br i1 %381, label %393, label %382

382:                                              ; preds = %375
  %383 = getelementptr inbounds i8, i8* %276, i64 %378
  %384 = getelementptr inbounds i8, i8* %383, i64 4
  %385 = bitcast i8* %384 to <4 x i8>*
  %386 = load <4 x i8>, <4 x i8>* %385, align 1
  %387 = sext <4 x i8> %386 to <4 x i32>
  %388 = or <4 x i32> %380, %387
  %389 = bitcast i8* %383 to <4 x i8>*
  %390 = load <4 x i8>, <4 x i8>* %389, align 1
  %391 = sext <4 x i8> %390 to <4 x i32>
  %392 = or <4 x i32> %379, %391
  br label %393

393:                                              ; preds = %375, %382
  %394 = phi <4 x i32> [ %376, %375 ], [ %392, %382 ]
  %395 = phi <4 x i32> [ %377, %375 ], [ %388, %382 ]
  %396 = or <4 x i32> %395, %394
  %397 = shufflevector <4 x i32> %396, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %398 = or <4 x i32> %396, %397
  %399 = shufflevector <4 x i32> %398, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %400 = or <4 x i32> %398, %399
  %401 = extractelement <4 x i32> %400, i32 0
  %402 = icmp eq i64 %335, %338
  br i1 %402, label %415, label %403

403:                                              ; preds = %393, %333
  %404 = phi i64 [ 0, %333 ], [ %338, %393 ]
  %405 = phi i32 [ 0, %333 ], [ %401, %393 ]
  br label %406

406:                                              ; preds = %403, %406
  %407 = phi i64 [ %413, %406 ], [ %404, %403 ]
  %408 = phi i32 [ %412, %406 ], [ %405, %403 ]
  %409 = getelementptr inbounds i8, i8* %276, i64 %407
  %410 = load i8, i8* %409, align 1
  %411 = sext i8 %410 to i32
  %412 = or i32 %408, %411
  %413 = add nuw nsw i64 %407, 1
  %414 = icmp slt i64 %413, %290
  br i1 %414, label %406, label %415, !llvm.loop !27

415:                                              ; preds = %406, %393
  %416 = phi i32 [ %401, %393 ], [ %412, %406 ]
  %417 = icmp sgt i64 %308, 1
  %418 = select i1 %417, i64 %308, i64 1
  %419 = icmp ult i64 %418, 8
  br i1 %419, label %486, label %420

420:                                              ; preds = %415
  %421 = and i64 %418, 9223372036854775800
  %422 = add nsw i64 %421, -8
  %423 = lshr exact i64 %422, 3
  %424 = add nuw nsw i64 %423, 1
  %425 = and i64 %424, 1
  %426 = icmp eq i64 %422, 0
  br i1 %426, label %458, label %427

427:                                              ; preds = %420
  %428 = sub nuw nsw i64 %424, %425
  br label %429

429:                                              ; preds = %429, %427
  %430 = phi i64 [ 0, %427 ], [ %455, %429 ]
  %431 = phi <4 x i32> [ zeroinitializer, %427 ], [ %453, %429 ]
  %432 = phi <4 x i32> [ zeroinitializer, %427 ], [ %454, %429 ]
  %433 = phi i64 [ %428, %427 ], [ %456, %429 ]
  %434 = getelementptr inbounds i8, i8* %307, i64 %430
  %435 = bitcast i8* %434 to <4 x i8>*
  %436 = load <4 x i8>, <4 x i8>* %435, align 1
  %437 = getelementptr inbounds i8, i8* %434, i64 4
  %438 = bitcast i8* %437 to <4 x i8>*
  %439 = load <4 x i8>, <4 x i8>* %438, align 1
  %440 = sext <4 x i8> %436 to <4 x i32>
  %441 = sext <4 x i8> %439 to <4 x i32>
  %442 = or <4 x i32> %431, %440
  %443 = or <4 x i32> %432, %441
  %444 = or i64 %430, 8
  %445 = getelementptr inbounds i8, i8* %307, i64 %444
  %446 = bitcast i8* %445 to <4 x i8>*
  %447 = load <4 x i8>, <4 x i8>* %446, align 1
  %448 = getelementptr inbounds i8, i8* %445, i64 4
  %449 = bitcast i8* %448 to <4 x i8>*
  %450 = load <4 x i8>, <4 x i8>* %449, align 1
  %451 = sext <4 x i8> %447 to <4 x i32>
  %452 = sext <4 x i8> %450 to <4 x i32>
  %453 = or <4 x i32> %442, %451
  %454 = or <4 x i32> %443, %452
  %455 = add i64 %430, 16
  %456 = add i64 %433, -2
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %429, !llvm.loop !28

458:                                              ; preds = %429, %420
  %459 = phi <4 x i32> [ undef, %420 ], [ %453, %429 ]
  %460 = phi <4 x i32> [ undef, %420 ], [ %454, %429 ]
  %461 = phi i64 [ 0, %420 ], [ %455, %429 ]
  %462 = phi <4 x i32> [ zeroinitializer, %420 ], [ %453, %429 ]
  %463 = phi <4 x i32> [ zeroinitializer, %420 ], [ %454, %429 ]
  %464 = icmp eq i64 %425, 0
  br i1 %464, label %476, label %465

465:                                              ; preds = %458
  %466 = getelementptr inbounds i8, i8* %307, i64 %461
  %467 = getelementptr inbounds i8, i8* %466, i64 4
  %468 = bitcast i8* %467 to <4 x i8>*
  %469 = load <4 x i8>, <4 x i8>* %468, align 1
  %470 = sext <4 x i8> %469 to <4 x i32>
  %471 = or <4 x i32> %463, %470
  %472 = bitcast i8* %466 to <4 x i8>*
  %473 = load <4 x i8>, <4 x i8>* %472, align 1
  %474 = sext <4 x i8> %473 to <4 x i32>
  %475 = or <4 x i32> %462, %474
  br label %476

476:                                              ; preds = %458, %465
  %477 = phi <4 x i32> [ %459, %458 ], [ %475, %465 ]
  %478 = phi <4 x i32> [ %460, %458 ], [ %471, %465 ]
  %479 = or <4 x i32> %478, %477
  %480 = shufflevector <4 x i32> %479, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %481 = or <4 x i32> %479, %480
  %482 = shufflevector <4 x i32> %481, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %483 = or <4 x i32> %481, %482
  %484 = extractelement <4 x i32> %483, i32 0
  %485 = icmp eq i64 %418, %421
  br i1 %485, label %498, label %486

486:                                              ; preds = %476, %415
  %487 = phi i64 [ 0, %415 ], [ %421, %476 ]
  %488 = phi i32 [ 0, %415 ], [ %484, %476 ]
  br label %489

489:                                              ; preds = %486, %489
  %490 = phi i64 [ %496, %489 ], [ %487, %486 ]
  %491 = phi i32 [ %495, %489 ], [ %488, %486 ]
  %492 = getelementptr inbounds i8, i8* %307, i64 %490
  %493 = load i8, i8* %492, align 1
  %494 = sext i8 %493 to i32
  %495 = or i32 %491, %494
  %496 = add nuw nsw i64 %490, 1
  %497 = icmp slt i64 %496, %308
  br i1 %497, label %489, label %498, !llvm.loop !29

498:                                              ; preds = %489, %476
  %499 = phi i32 [ %484, %476 ], [ %495, %489 ]
  %500 = and i32 %416, 7
  %501 = icmp ult i32 %500, 4
  %502 = select i1 %501, i32 %500, i32 4
  %503 = and i32 %499, 7
  %504 = icmp ult i32 %503, 4
  %505 = select i1 %504, i32 %503, i32 4
  %506 = zext i32 %502 to i64
  %507 = zext i32 %505 to i64
  %508 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %506, i64 %507
  %509 = load i8, i8* %508, align 1
  %510 = zext i8 %509 to i32
  br label %511

511:                                              ; preds = %498, %322
  %512 = phi i32 [ %510, %498 ], [ 0, %322 ]
  store i32 %512, i32* %284, align 4
  %513 = and i64 %324, 255
  %514 = zext i32 %512 to i64
  %515 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %513, i64 0, i32 0, i64 %514, i64 1
  %516 = load i32, i32* %515, align 4
  store i32 %516, i32* %32, align 4
  %517 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_h_log2_table, i64 0, i64 %273
  %518 = load i8, i8* %517, align 1
  %519 = zext i8 %518 to i32
  %520 = ashr i32 %2, %519
  %521 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.stride_log2_table, i64 0, i64 %273
  %522 = load i8, i8* %521, align 1
  %523 = zext i8 %522 to i32
  %524 = shl i32 %520, %523
  %525 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_w_log2_table, i64 0, i64 %273
  %526 = load i8, i8* %525, align 1
  %527 = zext i8 %526 to i32
  %528 = ashr i32 %3, %527
  %529 = add nsw i32 %528, %524
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %272, i64 0, i32 25, i64 %530
  store i8 %5, i8* %531, align 1
  %532 = zext i8 %7 to i32
  %533 = icmp eq %struct.tx_size_rd_info_node* %17, null
  br i1 %533, label %537, label %534

534:                                              ; preds = %511
  %535 = getelementptr inbounds %struct.tx_size_rd_info_node, %struct.tx_size_rd_info_node* %17, i64 0, i32 0
  %536 = load %struct.TXB_RD_INFO*, %struct.TXB_RD_INFO** %535, align 8
  br label %537

537:                                              ; preds = %534, %511
  %538 = phi %struct.TXB_RD_INFO* [ %536, %534 ], [ null, %511 ]
  call fastcc void @tx_type_rd(%struct.AV1_COMP* %0, %struct.macroblock* %1, i8 zeroext %5, i32 %2, i32 %3, i32 %4, i32 %532, %struct.txb_ctx* nonnull %25, %struct.RD_STATS* %12, i8 zeroext %16, i64 %14, %struct.TXB_RD_INFO* %538) #6
  %539 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %272, i64 0, i32 28
  %540 = load i16, i16* %539, align 1
  %541 = and i16 %540, 7
  %542 = zext i16 %541 to i64
  %543 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %542
  %544 = load i32, i32* %543, align 4
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %546, label %611

546:                                              ; preds = %537
  %547 = load i32, i32* %30, align 8
  %548 = icmp eq i32 %547, 1
  br i1 %548, label %549, label %552

549:                                              ; preds = %546
  %550 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 3
  %551 = load i64, i64* %550, align 8
  br label %573

552:                                              ; preds = %546
  %553 = load i32, i32* %28, align 8
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %556 = load i32, i32* %555, align 8
  %557 = sext i32 %556 to i64
  %558 = mul nsw i64 %557, %554
  %559 = add nsw i64 %558, 256
  %560 = ashr i64 %559, 9
  %561 = load i64, i64* %29, align 8
  %562 = shl i64 %561, 7
  %563 = add nsw i64 %560, %562
  %564 = sext i32 %516 to i64
  %565 = mul nsw i64 %557, %564
  %566 = add nsw i64 %565, 256
  %567 = ashr i64 %566, 9
  %568 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 3
  %569 = load i64, i64* %568, align 8
  %570 = shl i64 %569, 7
  %571 = add nsw i64 %567, %570
  %572 = icmp slt i64 %563, %571
  br i1 %572, label %611, label %573

573:                                              ; preds = %552, %549
  %574 = phi i64 [ %551, %549 ], [ %569, %552 ]
  store i32 %516, i32* %28, align 8
  store i64 %574, i64* %29, align 8
  %575 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %576 = load i16*, i16** %575, align 8
  %577 = sext i32 %4 to i64
  %578 = getelementptr inbounds i16, i16* %576, i64 %577
  store i16 0, i16* %578, align 2
  %579 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %580 = load i32, i32* %579, align 16
  %581 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %582 = load i8*, i8** %581, align 8
  %583 = mul nsw i32 %580, %2
  %584 = add nsw i32 %583, %3
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i8, i8* %582, i64 %585
  store i8 0, i8* %586, align 1
  %587 = lshr i64 266256, %43
  %588 = and i64 %587, 1
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %594

590:                                              ; preds = %573
  %591 = lshr i64 133136, %43
  %592 = and i64 %591, 1
  %593 = icmp eq i64 %592, 0
  br i1 %593, label %611, label %594

594:                                              ; preds = %590, %573
  %595 = sext i32 %580 to i64
  br label %596

596:                                              ; preds = %601, %594
  %597 = phi i64 [ 0, %594 ], [ %602, %601 ]
  %598 = add nsw i64 %597, %41
  %599 = mul nsw i64 %598, %595
  %600 = add nsw i64 %599, %39
  br label %604

601:                                              ; preds = %604
  %602 = add nuw nsw i64 %597, 4
  %603 = icmp slt i64 %602, %308
  br i1 %603, label %596, label %611

604:                                              ; preds = %604, %596
  %605 = phi i64 [ 0, %596 ], [ %609, %604 ]
  %606 = load i8*, i8** %581, align 8
  %607 = add nsw i64 %600, %605
  %608 = getelementptr inbounds i8, i8* %606, i64 %607
  store i8 0, i8* %608, align 1
  %609 = add nuw nsw i64 %605, 4
  %610 = icmp slt i64 %609, %290
  br i1 %610, label %604, label %601

611:                                              ; preds = %601, %590, %552, %537
  %612 = phi i32 [ 0, %552 ], [ 1, %590 ], [ 0, %537 ], [ 1, %601 ]
  store i32 %612, i32* %30, align 8
  %613 = mul nsw i32 %323, %2
  %614 = add nsw i32 %613, %3
  %615 = icmp eq i32 %612, 0
  %616 = sext i32 %614 to i64
  %617 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 %616
  %618 = load i8, i8* %617, align 1
  %619 = or i8 %618, 1
  %620 = and i8 %618, -2
  %621 = select i1 %615, i8 %620, i8 %619
  store i8 %621, i8* %617, align 1
  br i1 %111, label %624, label %622

622:                                              ; preds = %611
  %623 = load i32, i32* %28, align 8
  br label %629

624:                                              ; preds = %611
  %625 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 40, i64 %90, i64 0
  %626 = load i32, i32* %625, align 4
  %627 = load i32, i32* %28, align 8
  %628 = add nsw i32 %627, %626
  store i32 %628, i32* %28, align 8
  br label %629

629:                                              ; preds = %622, %624
  %630 = phi i32 [ %623, %622 ], [ %628, %624 ]
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %633 = load i32, i32* %632, align 8
  %634 = sext i32 %633 to i64
  %635 = mul nsw i64 %634, %631
  %636 = add nsw i64 %635, 256
  %637 = ashr i64 %636, 9
  %638 = load i64, i64* %29, align 8
  %639 = shl i64 %638, 7
  %640 = add nsw i64 %637, %639
  %641 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %642 = load i8*, i8** %641, align 8
  %643 = sext i32 %4 to i64
  %644 = getelementptr inbounds i8, i8* %642, i64 %643
  %645 = load i8, i8* %644, align 1
  %646 = zext i8 %645 to i32
  %647 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %648 = load i8*, i8** %647, align 8
  %649 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %650 = load i32, i32* %649, align 16
  %651 = mul nsw i32 %650, %2
  %652 = add nsw i32 %651, %3
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i8, i8* %648, i64 %653
  %655 = load i8, i8* %654, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %283) #6
  %656 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 7
  %657 = load i32, i32* %656, align 4
  %658 = icmp eq i32 %657, 0
  br i1 %658, label %673, label %659

659:                                              ; preds = %629
  %660 = add nsw i32 %657, 1
  %661 = zext i32 %660 to i64
  %662 = ashr i64 %640, %661
  %663 = sub nsw i64 %640, %662
  %664 = icmp sgt i64 %663, %14
  br i1 %664, label %665, label %666

665:                                              ; preds = %659
  store i32 0, i32* %15, align 4
  br label %1126

666:                                              ; preds = %659
  %667 = add nsw i32 %657, 2
  %668 = zext i32 %667 to i64
  %669 = ashr i64 %640, %668
  %670 = sub nsw i64 %640, %669
  %671 = icmp sgt i64 %670, %13
  %672 = select i1 %671, i32 0, i32 %269
  br label %673

673:                                              ; preds = %666, %629
  %674 = phi i32 [ %269, %629 ], [ %672, %666 ]
  %675 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 6
  %676 = load i32, i32* %675, align 4
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %684, label %678

678:                                              ; preds = %673
  %679 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %680 = load i16*, i16** %679, align 8
  %681 = getelementptr inbounds i16, i16* %680, i64 %643
  %682 = load i16, i16* %681, align 2
  %683 = icmp eq i16 %682, 0
  br i1 %683, label %997, label %684

684:                                              ; preds = %98, %268, %263, %673, %678
  %685 = phi i32 [ %269, %268 ], [ %674, %673 ], [ %674, %678 ], [ %259, %263 ], [ %102, %98 ]
  %686 = phi i8 [ 16, %268 ], [ %655, %673 ], [ %655, %678 ], [ 16, %263 ], [ 16, %98 ]
  %687 = phi i32 [ 0, %268 ], [ %646, %673 ], [ %646, %678 ], [ 0, %263 ], [ 0, %98 ]
  %688 = phi i64 [ 9223372036854775807, %268 ], [ %640, %673 ], [ %640, %678 ], [ 9223372036854775807, %263 ], [ 9223372036854775807, %98 ]
  %689 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 40
  %690 = load i32, i32* %689, align 16
  %691 = icmp eq i32 %690, 8
  %692 = icmp ne i32 %685, 0
  %693 = and i1 %692, %691
  br i1 %693, label %694, label %838

694:                                              ; preds = %684
  %695 = icmp eq i64 %14, 9223372036854775807
  %696 = icmp eq i64 %688, 9223372036854775807
  %697 = and i1 %695, %696
  br i1 %697, label %840, label %698

698:                                              ; preds = %694
  %699 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 5
  %700 = load i32, i32* %699, align 4
  %701 = icmp sgt i32 %700, -1
  br i1 %701, label %702, label %840

702:                                              ; preds = %698
  br i1 %58, label %834, label %703

703:                                              ; preds = %702
  %704 = getelementptr inbounds [19 x %struct.NN_CONFIG*], [19 x %struct.NN_CONFIG*]* @av1_tx_split_nnconfig_map, i64 0, i64 %43
  %705 = load %struct.NN_CONFIG*, %struct.NN_CONFIG** %704, align 8
  %706 = zext i8 %7 to i64
  %707 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %706
  %708 = load i8, i8* %707, align 1
  %709 = zext i8 %708 to i32
  %710 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0
  %711 = load i16*, i16** %710, align 16
  %712 = shl i32 %2, 2
  %713 = mul nsw i32 %712, %709
  %714 = sext i32 %713 to i64
  %715 = getelementptr inbounds i16, i16* %711, i64 %714
  %716 = shl nsw i32 %3, 2
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds i16, i16* %715, i64 %717
  %719 = bitcast [64 x float]* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %719) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %719, i8 0, i64 256, i1 false) #6
  %720 = icmp sge i32 %47, %45
  %721 = zext i1 %720 to i32
  %722 = ashr i32 %47, %721
  %723 = icmp sge i32 %45, %47
  %724 = zext i1 %723 to i32
  %725 = ashr i32 %45, %724
  %726 = mul nsw i32 %725, %722
  %727 = bitcast i32* %21 to i8*
  %728 = bitcast i64* %22 to i8*
  %729 = sitofp i32 %726 to float
  %730 = sitofp i32 %726 to double
  %731 = sext i32 %725 to i64
  %732 = sext i32 %45 to i64
  %733 = sext i32 %722 to i64
  %734 = zext i8 %708 to i64
  %735 = sext i32 %47 to i64
  br label %736

736:                                              ; preds = %767, %703
  %737 = phi i64 [ 0, %703 ], [ %768, %767 ]
  %738 = phi float [ 0.000000e+00, %703 ], [ %802, %767 ]
  %739 = phi double [ 0.000000e+00, %703 ], [ %801, %767 ]
  %740 = phi i32 [ 0, %703 ], [ %803, %767 ]
  %741 = phi i64 [ 0, %703 ], [ %783, %767 ]
  %742 = phi i32 [ 0, %703 ], [ %781, %767 ]
  %743 = phi i64 [ 2, %703 ], [ %798, %767 ]
  %744 = mul nsw i64 %737, %734
  %745 = getelementptr inbounds i16, i16* %718, i64 %744
  %746 = shl i64 %743, 32
  %747 = ashr exact i64 %746, 32
  br label %770

748:                                              ; preds = %767
  %749 = getelementptr inbounds [64 x float], [64 x float]* %23, i64 0, i64 0
  %750 = mul nsw i32 %47, %45
  %751 = sitofp i32 %781 to float
  %752 = sitofp i32 %750 to float
  %753 = fdiv float %751, %752
  store float %753, float* %749, align 16
  %754 = sitofp i64 %783 to double
  %755 = sitofp i32 %750 to double
  %756 = fdiv double %754, %755
  %757 = fptrunc double %756 to float
  %758 = fmul float %753, %753
  %759 = fsub float %757, %758
  %760 = fcmp ogt float %759, 0.000000e+00
  br i1 %760, label %761, label %763

761:                                              ; preds = %748
  %762 = call float @sqrtf(float %759) #6
  br label %763

763:                                              ; preds = %761, %748
  %764 = phi float [ %762, %761 ], [ 0.000000e+00, %748 ]
  %765 = getelementptr inbounds [64 x float], [64 x float]* %23, i64 0, i64 1
  store float %764, float* %765, align 4
  %766 = icmp sgt i32 %775, 0
  br i1 %766, label %806, label %824

767:                                              ; preds = %794
  %768 = add i64 %737, %733
  %769 = icmp slt i64 %768, %735
  br i1 %769, label %736, label %748

770:                                              ; preds = %794, %736
  %771 = phi i64 [ %747, %736 ], [ %798, %794 ]
  %772 = phi i64 [ 0, %736 ], [ %804, %794 ]
  %773 = phi float [ %738, %736 ], [ %802, %794 ]
  %774 = phi double [ %739, %736 ], [ %801, %794 ]
  %775 = phi i32 [ %740, %736 ], [ %803, %794 ]
  %776 = phi i64 [ %741, %736 ], [ %783, %794 ]
  %777 = phi i32 [ %742, %736 ], [ %781, %794 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %727) #6
  store i32 -1431655766, i32* %21, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %728) #6
  store i64 -6148914691236517206, i64* %22, align 8
  %778 = load void (i16*, i32, i32, i32, i32*, i64*)*, void (i16*, i32, i32, i32, i32*, i64*)** @aom_get_blk_sse_sum, align 8
  %779 = getelementptr inbounds i16, i16* %745, i64 %772
  call void %778(i16* %779, i32 %709, i32 %725, i32 %722, i32* nonnull %21, i64* nonnull %22) #6
  %780 = load i32, i32* %21, align 4
  %781 = add nsw i32 %780, %777
  %782 = load i64, i64* %22, align 8
  %783 = add nsw i64 %782, %776
  %784 = sitofp i32 %780 to float
  %785 = fdiv float %784, %729
  %786 = sitofp i64 %782 to double
  %787 = fdiv double %786, %730
  %788 = fptrunc double %787 to float
  %789 = fmul float %785, %785
  %790 = fsub float %788, %789
  %791 = fcmp ogt float %790, 0.000000e+00
  br i1 %791, label %792, label %794

792:                                              ; preds = %770
  %793 = call float @sqrtf(float %790) #6
  br label %794

794:                                              ; preds = %792, %770
  %795 = phi float [ %793, %792 ], [ 0.000000e+00, %770 ]
  %796 = add nsw i64 %771, 1
  %797 = getelementptr inbounds [64 x float], [64 x float]* %23, i64 0, i64 %771
  store float %785, float* %797, align 4
  %798 = add i64 %771, 2
  %799 = getelementptr inbounds [64 x float], [64 x float]* %23, i64 0, i64 %796
  store float %795, float* %799, align 4
  %800 = fpext float %789 to double
  %801 = fadd double %774, %800
  %802 = fadd float %773, %795
  %803 = add nsw i32 %775, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %728) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %727) #6
  %804 = add i64 %772, %731
  %805 = icmp slt i64 %804, %732
  br i1 %805, label %770, label %767

806:                                              ; preds = %763
  %807 = sitofp i32 %803 to double
  %808 = fdiv double %801, %807
  %809 = fptrunc double %808 to float
  %810 = fsub float %809, %758
  %811 = fcmp ogt float %810, 0.000000e+00
  br i1 %811, label %812, label %814

812:                                              ; preds = %806
  %813 = call float @sqrtf(float %810) #6
  br label %814

814:                                              ; preds = %812, %806
  %815 = phi float [ %813, %812 ], [ 0.000000e+00, %806 ]
  %816 = shl i64 %798, 32
  %817 = ashr exact i64 %816, 32
  %818 = getelementptr inbounds [64 x float], [64 x float]* %23, i64 0, i64 %817
  store float %815, float* %818, align 4
  %819 = sitofp i32 %803 to float
  %820 = fdiv float %802, %819
  %821 = add i64 %816, 4294967296
  %822 = ashr exact i64 %821, 32
  %823 = getelementptr inbounds [64 x float], [64 x float]* %23, i64 0, i64 %822
  store float %820, float* %823, align 4
  br label %824

824:                                              ; preds = %814, %763
  %825 = bitcast float* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %825) #6
  store float 0.000000e+00, float* %24, align 4
  %826 = load void (float*, %struct.NN_CONFIG*, i32, float*)*, void (float*, %struct.NN_CONFIG*, i32, float*)** @av1_nn_predict, align 8
  call void %826(float* nonnull %749, %struct.NN_CONFIG* %705, i32 1, float* nonnull %24) #6
  %827 = load float, float* %24, align 4
  %828 = fmul float %827, 1.000000e+04
  %829 = fptosi float %828 to i32
  %830 = icmp slt i32 %829, 80000
  %831 = select i1 %830, i32 %829, i32 80000
  %832 = icmp sgt i32 %831, -80000
  %833 = select i1 %832, i32 %831, i32 -80000
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %825) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %719) #6
  br label %834

834:                                              ; preds = %702, %824
  %835 = phi i32 [ %833, %824 ], [ -1, %702 ]
  %836 = sub nsw i32 0, %700
  %837 = icmp slt i32 %835, %836
  br i1 %837, label %997, label %840

838:                                              ; preds = %684
  %839 = icmp eq i32 %685, 0
  br i1 %839, label %997, label %840

840:                                              ; preds = %834, %694, %698, %838
  %841 = icmp slt i64 %688, %14
  %842 = select i1 %841, i64 %688, i64 %14
  %843 = zext i8 %7 to i64
  %844 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %843
  %845 = load i8, i8* %844, align 1
  %846 = zext i8 %845 to i32
  %847 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %848 = load i32, i32* %847, align 16
  %849 = icmp slt i32 %848, 0
  br i1 %849, label %850, label %856

850:                                              ; preds = %840
  %851 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %852 = load i32, i32* %851, align 8
  %853 = add nsw i32 %852, 3
  %854 = ashr i32 %848, %853
  %855 = add nsw i32 %854, %846
  br label %856

856:                                              ; preds = %850, %840
  %857 = phi i32 [ %855, %850 ], [ %846, %840 ]
  %858 = ashr i32 %857, 2
  %859 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %843
  %860 = load i8, i8* %859, align 1
  %861 = zext i8 %860 to i32
  %862 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %863 = load i32, i32* %862, align 8
  %864 = icmp slt i32 %863, 0
  br i1 %864, label %865, label %871

865:                                              ; preds = %856
  %866 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %867 = load i32, i32* %866, align 4
  %868 = add nsw i32 %867, 3
  %869 = ashr i32 %863, %868
  %870 = add nsw i32 %869, %861
  br label %871

871:                                              ; preds = %856, %865
  %872 = phi i32 [ %870, %865 ], [ %861, %856 ]
  %873 = ashr i32 %872, 2
  %874 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %43
  %875 = load i32, i32* %874, align 4
  %876 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %43
  %877 = load i32, i32* %876, align 4
  %878 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %43
  %879 = load i8, i8* %878, align 1
  %880 = zext i8 %879 to i64
  %881 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %880
  %882 = load i32, i32* %881, align 4
  %883 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %880
  %884 = load i32, i32* %883, align 4
  %885 = mul nsw i32 %884, %882
  %886 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 40, i64 %90, i64 1
  %887 = load i32, i32* %886, align 4
  %888 = sdiv i32 %875, %882
  %889 = sdiv i32 %877, %884
  %890 = mul nsw i32 %888, %889
  %891 = bitcast %struct.RD_STATS* %19 to i8*
  %892 = bitcast i32* %20 to i8*
  %893 = add nsw i32 %6, 1
  %894 = sext i32 %890 to i64
  %895 = icmp eq %struct.tx_size_rd_info_node* %17, null
  %896 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 0
  %897 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 5
  %898 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 1
  %899 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 3
  %900 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %19, i64 0, i32 4
  %901 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  br label %902

902:                                              ; preds = %871, %994
  %903 = phi i64 [ 0, %871 ], [ %986, %994 ]
  %904 = phi i32 [ 0, %871 ], [ %995, %994 ]
  %905 = phi i32 [ %4, %871 ], [ %978, %994 ]
  %906 = phi i32 [ 0, %871 ], [ %979, %994 ]
  %907 = phi i32 [ 1, %871 ], [ %980, %994 ]
  %908 = phi i64 [ 0, %871 ], [ %981, %994 ]
  %909 = phi i64 [ 0, %871 ], [ %982, %994 ]
  %910 = phi i64 [ 0, %871 ], [ %983, %994 ]
  %911 = phi i32 [ %887, %871 ], [ %984, %994 ]
  %912 = add nsw i32 %904, %2
  %913 = icmp slt i32 %912, %858
  br i1 %913, label %914, label %997

914:                                              ; preds = %902
  %915 = shl i64 %903, 32
  %916 = ashr exact i64 %915, 32
  br label %917

917:                                              ; preds = %914, %977
  %918 = phi i64 [ %916, %914 ], [ %986, %977 ]
  %919 = phi i32 [ 0, %914 ], [ %985, %977 ]
  %920 = phi i32 [ %905, %914 ], [ %978, %977 ]
  %921 = phi i32 [ %906, %914 ], [ %979, %977 ]
  %922 = phi i32 [ %907, %914 ], [ %980, %977 ]
  %923 = phi i64 [ %908, %914 ], [ %981, %977 ]
  %924 = phi i64 [ %909, %914 ], [ %982, %977 ]
  %925 = phi i64 [ %910, %914 ], [ %983, %977 ]
  %926 = phi i32 [ %911, %914 ], [ %984, %977 ]
  %927 = add nsw i32 %919, %3
  %928 = icmp slt i32 %927, %873
  br i1 %928, label %929, label %977

929:                                              ; preds = %917
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %891) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %891, i8 -86, i64 40, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %892) #6
  store i32 1, i32* %20, align 4
  %930 = sdiv i64 %688, %894
  %931 = sub nsw i64 %842, %924
  br i1 %895, label %935, label %932

932:                                              ; preds = %929
  %933 = getelementptr inbounds %struct.tx_size_rd_info_node, %struct.tx_size_rd_info_node* %17, i64 0, i32 1, i64 %918
  %934 = load %struct.tx_size_rd_info_node*, %struct.tx_size_rd_info_node** %933, align 8
  br label %935

935:                                              ; preds = %932, %929
  %936 = phi %struct.tx_size_rd_info_node* [ %934, %932 ], [ null, %929 ]
  call fastcc void @select_tx_block(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %912, i32 %927, i32 %920, i8 zeroext %879, i32 %893, i8 zeroext %7, i8* %8, i8* %9, i8* %10, i8* %11, %struct.RD_STATS* nonnull %19, i64 %930, i64 %931, i32* nonnull %20, i8 zeroext %16, %struct.tx_size_rd_info_node* %936) #6
  %937 = load i32, i32* %20, align 4
  %938 = icmp eq i32 %937, 0
  br i1 %938, label %988, label %939

939:                                              ; preds = %935
  %940 = icmp eq i32 %926, 2147483647
  br i1 %940, label %960, label %941

941:                                              ; preds = %939
  %942 = load i32, i32* %896, align 8
  %943 = icmp eq i32 %942, 2147483647
  br i1 %943, label %960, label %944

944:                                              ; preds = %941
  %945 = sext i32 %926 to i64
  %946 = sext i32 %942 to i64
  %947 = add nsw i64 %946, %945
  %948 = icmp slt i64 %947, 2147483647
  %949 = select i1 %948, i64 %947, i64 2147483647
  %950 = trunc i64 %949 to i32
  %951 = icmp eq i32 %921, 0
  %952 = load i32, i32* %897, align 4
  %953 = select i1 %951, i32 %952, i32 %921
  %954 = load i64, i64* %898, align 8
  %955 = add nsw i64 %954, %925
  %956 = load i64, i64* %899, align 8
  %957 = add nsw i64 %956, %923
  %958 = load i32, i32* %900, align 8
  %959 = and i32 %958, %922
  br label %960

960:                                              ; preds = %939, %941, %944
  %961 = phi i32 [ %950, %944 ], [ 2147483647, %941 ], [ 2147483647, %939 ]
  %962 = phi i64 [ %955, %944 ], [ 9223372036854775807, %941 ], [ 9223372036854775807, %939 ]
  %963 = phi i64 [ %957, %944 ], [ 9223372036854775807, %941 ], [ 9223372036854775807, %939 ]
  %964 = phi i32 [ %959, %944 ], [ 0, %941 ], [ 0, %939 ]
  %965 = phi i32 [ %953, %944 ], [ 0, %941 ], [ 0, %939 ]
  %966 = sext i32 %961 to i64
  %967 = load i32, i32* %901, align 8
  %968 = sext i32 %967 to i64
  %969 = mul nsw i64 %968, %966
  %970 = add nsw i64 %969, 256
  %971 = ashr i64 %970, 9
  %972 = shl nsw i64 %962, 7
  %973 = add nsw i64 %971, %972
  %974 = icmp sgt i64 %973, %842
  br i1 %974, label %988, label %975

975:                                              ; preds = %960
  %976 = add nsw i32 %920, %885
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %892) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %891) #6
  br label %977

977:                                              ; preds = %917, %975
  %978 = phi i32 [ %976, %975 ], [ %920, %917 ]
  %979 = phi i32 [ %965, %975 ], [ %921, %917 ]
  %980 = phi i32 [ %964, %975 ], [ %922, %917 ]
  %981 = phi i64 [ %963, %975 ], [ %923, %917 ]
  %982 = phi i64 [ %973, %975 ], [ %924, %917 ]
  %983 = phi i64 [ %962, %975 ], [ %925, %917 ]
  %984 = phi i32 [ %961, %975 ], [ %926, %917 ]
  %985 = add nsw i32 %919, %882
  %986 = add i64 %918, 1
  %987 = icmp slt i32 %985, %875
  br i1 %987, label %917, label %994

988:                                              ; preds = %935, %960
  %989 = phi i32 [ %961, %960 ], [ %926, %935 ]
  %990 = phi i64 [ %962, %960 ], [ %925, %935 ]
  %991 = phi i64 [ %963, %960 ], [ %923, %935 ]
  %992 = phi i32 [ %964, %960 ], [ %922, %935 ]
  %993 = phi i32 [ %965, %960 ], [ %921, %935 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %892) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %891) #6
  br label %997

994:                                              ; preds = %977
  %995 = add nsw i32 %904, %884
  %996 = icmp slt i32 %995, %877
  br i1 %996, label %902, label %997

997:                                              ; preds = %994, %902, %988, %834, %678, %838
  %998 = phi i8 [ %686, %838 ], [ %655, %678 ], [ %686, %834 ], [ %686, %988 ], [ %686, %902 ], [ %686, %994 ]
  %999 = phi i32 [ %687, %838 ], [ %646, %678 ], [ %687, %834 ], [ %687, %988 ], [ %687, %902 ], [ %687, %994 ]
  %1000 = phi i64 [ %688, %838 ], [ %640, %678 ], [ %688, %834 ], [ %688, %988 ], [ %688, %902 ], [ %688, %994 ]
  %1001 = phi i32 [ -1431655766, %838 ], [ -1431655766, %678 ], [ -1431655766, %834 ], [ %989, %988 ], [ %984, %994 ], [ %911, %902 ]
  %1002 = phi i64 [ -6148914691236517206, %838 ], [ -6148914691236517206, %678 ], [ -6148914691236517206, %834 ], [ %990, %988 ], [ %983, %994 ], [ %910, %902 ]
  %1003 = phi i64 [ 9223372036854775807, %838 ], [ 9223372036854775807, %678 ], [ 9223372036854775807, %834 ], [ 9223372036854775807, %988 ], [ %982, %994 ], [ %909, %902 ]
  %1004 = phi i64 [ -6148914691236517206, %838 ], [ -6148914691236517206, %678 ], [ -6148914691236517206, %834 ], [ %991, %988 ], [ %981, %994 ], [ %908, %902 ]
  %1005 = phi i32 [ -1431655766, %838 ], [ -1431655766, %678 ], [ -1431655766, %834 ], [ %992, %988 ], [ %980, %994 ], [ %907, %902 ]
  %1006 = phi i32 [ -1431655766, %838 ], [ -1431655766, %678 ], [ -1431655766, %834 ], [ %993, %988 ], [ %979, %994 ], [ %906, %902 ]
  %1007 = icmp slt i64 %1000, %1003
  br i1 %1007, label %1008, label %1118

1008:                                             ; preds = %997
  %1009 = getelementptr inbounds i8, i8* %8, i64 %39
  %1010 = getelementptr inbounds i8, i8* %9, i64 %41
  %1011 = trunc i32 %999 to i8
  %1012 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %1013 = load i8*, i8** %1012, align 8
  %1014 = sext i32 %4 to i64
  %1015 = getelementptr inbounds i8, i8* %1013, i64 %1014
  store i8 %1011, i8* %1015, align 1
  %1016 = load i8*, i8** %1012, align 8
  %1017 = getelementptr inbounds i8, i8* %1016, i64 %1014
  %1018 = load i8, i8* %1017, align 1
  %1019 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %43
  %1020 = load i32, i32* %1019, align 4
  %1021 = sext i32 %1020 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %1009, i8 %1018, i64 %1021, i1 false) #6
  %1022 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %43
  %1023 = load i32, i32* %1022, align 4
  %1024 = sext i32 %1023 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %1010, i8 %1018, i64 %1024, i1 false) #6
  %1025 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %43
  %1026 = load i8, i8* %1025, align 1
  %1027 = zext i8 %1026 to i64
  %1028 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %1027
  %1029 = load i8, i8* %1028, align 1
  %1030 = zext i8 %1029 to i32
  %1031 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %1027
  %1032 = load i8, i8* %1031, align 1
  %1033 = zext i8 %1032 to i32
  %1034 = trunc i32 %45 to i8
  %1035 = trunc i32 %47 to i8
  %1036 = icmp ugt i32 %1030, 1
  %1037 = select i1 %1036, i32 %1030, i32 1
  %1038 = zext i32 %1037 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 %1035, i64 %1038, i1 false) #6
  %1039 = icmp ugt i32 %1033, 1
  %1040 = select i1 %1039, i32 %1033, i32 1
  %1041 = zext i32 %1040 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %40, i8 %1034, i64 %1041, i1 false) #6
  %1042 = zext i8 %7 to i64
  %1043 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_h_log2_table, i64 0, i64 %1042
  %1044 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.stride_log2_table, i64 0, i64 %1042
  %1045 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_w_log2_table, i64 0, i64 %1042
  %1046 = load i8, i8* %1043, align 1
  %1047 = zext i8 %1046 to i32
  %1048 = load i8, i8* %1044, align 1
  %1049 = zext i8 %1048 to i32
  %1050 = load i8, i8* %1045, align 1
  %1051 = zext i8 %1050 to i32
  br label %1052

1052:                                             ; preds = %1106, %1008
  %1053 = phi i32 [ 0, %1008 ], [ %1107, %1106 ]
  %1054 = add nsw i32 %1053, %2
  %1055 = ashr i32 %1054, %1047
  %1056 = shl i32 %1055, %1049
  br label %1109

1057:                                             ; preds = %1106
  %1058 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 24
  store i8 %5, i8* %1058, align 1
  %1059 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %1060 = load i32, i32* %1059, align 16
  %1061 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %1062 = load i8*, i8** %1061, align 8
  %1063 = mul nsw i32 %1060, %2
  %1064 = add nsw i32 %1063, %3
  %1065 = sext i32 %1064 to i64
  %1066 = getelementptr inbounds i8, i8* %1062, i64 %1065
  store i8 %998, i8* %1066, align 1
  %1067 = lshr i64 266256, %43
  %1068 = and i64 %1067, 1
  %1069 = icmp eq i64 %1068, 0
  br i1 %1069, label %1070, label %1074

1070:                                             ; preds = %1057
  %1071 = lshr i64 133136, %43
  %1072 = and i64 %1071, 1
  %1073 = icmp eq i64 %1072, 0
  br i1 %1073, label %1091, label %1074

1074:                                             ; preds = %1070, %1057
  %1075 = sext i32 %1060 to i64
  br label %1076

1076:                                             ; preds = %1081, %1074
  %1077 = phi i64 [ 0, %1074 ], [ %1082, %1081 ]
  %1078 = add nsw i64 %1077, %41
  %1079 = mul nsw i64 %1078, %1075
  %1080 = add nsw i64 %1079, %39
  br label %1084

1081:                                             ; preds = %1084
  %1082 = add nuw nsw i64 %1077, 4
  %1083 = icmp slt i64 %1082, %1024
  br i1 %1083, label %1076, label %1091

1084:                                             ; preds = %1084, %1076
  %1085 = phi i64 [ 0, %1076 ], [ %1089, %1084 ]
  %1086 = load i8*, i8** %1061, align 8
  %1087 = add nsw i64 %1080, %1085
  %1088 = getelementptr inbounds i8, i8* %1086, i64 %1087
  store i8 %998, i8* %1088, align 1
  %1089 = add nuw nsw i64 %1085, 4
  %1090 = icmp slt i64 %1089, %1021
  br i1 %1090, label %1084, label %1081

1091:                                             ; preds = %1081, %1070
  %1092 = zext i8 %7 to i64
  %1093 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %1092
  %1094 = load i8, i8* %1093, align 1
  %1095 = zext i8 %1094 to i32
  %1096 = mul nsw i32 %1095, %2
  %1097 = add nsw i32 %1096, %3
  %1098 = load i32, i32* %30, align 8
  %1099 = icmp eq i32 %1098, 0
  %1100 = sext i32 %1097 to i64
  %1101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 %1100
  %1102 = load i8, i8* %1101, align 1
  %1103 = or i8 %1102, 1
  %1104 = and i8 %1102, -2
  %1105 = select i1 %1099, i8 %1104, i8 %1103
  store i8 %1105, i8* %1101, align 1
  br label %1126

1106:                                             ; preds = %1109
  %1107 = add nuw nsw i32 %1053, 1
  %1108 = icmp slt i32 %1107, %1023
  br i1 %1108, label %1052, label %1057

1109:                                             ; preds = %1052, %1109
  %1110 = phi i32 [ 0, %1052 ], [ %1116, %1109 ]
  %1111 = add nsw i32 %1110, %3
  %1112 = ashr i32 %1111, %1051
  %1113 = add nsw i32 %1112, %1056
  %1114 = sext i32 %1113 to i64
  %1115 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %38, i64 0, i32 25, i64 %1114
  store i8 %5, i8* %1115, align 1
  %1116 = add nuw nsw i32 %1110, 1
  %1117 = icmp slt i32 %1116, %1020
  br i1 %1117, label %1109, label %1106

1118:                                             ; preds = %997
  %1119 = bitcast %struct.RD_STATS* %12 to i8*
  store i32 %1001, i32* %28, align 8
  %1120 = getelementptr inbounds i8, i8* %1119, i64 4
  %1121 = bitcast i8* %1120 to i32*
  store i32 -1431655766, i32* %1121, align 4
  store i64 %1002, i64* %29, align 8
  %1122 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 2
  store i64 %1003, i64* %1122, align 8
  %1123 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 3
  store i64 %1004, i64* %1123, align 8
  store i32 %1005, i32* %30, align 8
  store i32 %1006, i32* %32, align 4
  %1124 = icmp eq i64 %1003, 9223372036854775807
  br i1 %1124, label %1125, label %1126

1125:                                             ; preds = %1118
  store i32 0, i32* %15, align 4
  br label %1126

1126:                                             ; preds = %665, %1118, %1125, %1091, %34
  ret void
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @tx_type_rd(%struct.AV1_COMP*, %struct.macroblock*, i8 zeroext, i32, i32, i32, i32, %struct.txb_ctx*, %struct.RD_STATS* nocapture, i8 zeroext, i64, %struct.TXB_RD_INFO*) unnamed_addr #4 {
  %13 = alloca %struct.RD_STATS, align 8
  %14 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %7, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, 8
  %17 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %7, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %16, %18
  %20 = trunc i32 %19 to i16
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %22 = load i32, i32* %21, align 16
  %23 = mul nsw i32 %22, %3
  %24 = add nsw i32 %23, %4
  %25 = icmp ne %struct.TXB_RD_INFO* %11, null
  br i1 %25, label %26, label %101

26:                                               ; preds = %12
  %27 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 7
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %101, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 5
  %32 = load i16, i16* %31, align 8
  %33 = icmp eq i16 %32, %20
  br i1 %33, label %34, label %101

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 4
  %36 = load i8, i8* %35, align 2
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %38 = load i8*, i8** %37, align 8
  %39 = sext i32 %24 to i64
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  store i8 %36, i8* %40, align 1
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %42 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %41, align 8
  %43 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %42, align 8
  %44 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %43, i64 0, i32 28
  %45 = load i16, i16* %44, align 1
  %46 = and i16 %45, 7
  %47 = zext i16 %46 to i64
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %64

51:                                               ; preds = %34
  %52 = zext i8 %2 to i64
  %53 = lshr i64 399376, %52
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %64

56:                                               ; preds = %51
  %57 = load i8*, i8** %37, align 8
  %58 = load i32, i32* %21, align 16
  %59 = mul nsw i32 %58, %3
  %60 = add nsw i32 %59, %4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %57, i64 %61
  %63 = load i8, i8* %62, align 1
  br label %64

64:                                               ; preds = %34, %51, %56
  %65 = phi i8 [ 0, %51 ], [ 0, %34 ], [ %63, %56 ]
  %66 = load i8, i8* %35, align 2
  %67 = icmp eq i8 %65, %66
  br i1 %67, label %68, label %101

68:                                               ; preds = %64
  %69 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = add nsw i32 %72, %70
  store i32 %73, i32* %71, align 8
  %74 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = add nsw i64 %77, %75
  store i64 %78, i64* %76, align 8
  %79 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 3
  %82 = load i64, i64* %81, align 8
  %83 = add nsw i64 %82, %80
  store i64 %83, i64* %81, align 8
  %84 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 3
  %85 = load i16, i16* %84, align 4
  %86 = icmp eq i16 %85, 0
  %87 = zext i1 %86 to i32
  %88 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 4
  %89 = load i32, i32* %88, align 8
  %90 = and i32 %89, %87
  store i32 %90, i32* %88, align 8
  %91 = load i16, i16* %84, align 4
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %93 = load i16*, i16** %92, align 8
  %94 = sext i32 %5 to i64
  %95 = getelementptr inbounds i16, i16* %93, i64 %94
  store i16 %91, i16* %95, align 2
  %96 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 6
  %97 = load i8, i8* %96, align 2
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 %94
  store i8 %97, i8* %100, align 1
  br label %177

101:                                              ; preds = %64, %26, %30, %12
  %102 = bitcast %struct.RD_STATS* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %102) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %102, i8 -86, i64 40, i1 false)
  %103 = trunc i32 %6 to i8
  call fastcc void @search_tx_type(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 0, i32 %5, i32 %3, i32 %4, i8 zeroext %103, i8 zeroext %2, %struct.txb_ctx* %7, i8 zeroext %9, i32 0, i64 %10, %struct.RD_STATS* nonnull %13)
  %104 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 2147483647
  br i1 %106, label %111, label %107

107:                                              ; preds = %101
  %108 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp eq i32 %109, 2147483647
  br i1 %110, label %111, label %117

111:                                              ; preds = %107, %101
  store i32 2147483647, i32* %104, align 8
  %112 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 1
  %113 = bitcast i64* %112 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %113, align 8
  %114 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 3
  store i64 9223372036854775807, i64* %114, align 8
  %115 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 4
  store i32 0, i32* %115, align 8
  %116 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 5
  store i32 0, i32* %116, align 4
  br label %146

117:                                              ; preds = %107
  %118 = sext i32 %105 to i64
  %119 = sext i32 %109 to i64
  %120 = add nsw i64 %119, %118
  %121 = icmp slt i64 %120, 2147483647
  %122 = select i1 %121, i64 %120, i64 2147483647
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %104, align 8
  %124 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 5
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %117
  %128 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 5
  %129 = load i32, i32* %128, align 4
  store i32 %129, i32* %124, align 4
  br label %130

130:                                              ; preds = %127, %117
  %131 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 1
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = add nsw i64 %134, %132
  store i64 %135, i64* %133, align 8
  %136 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 3
  %139 = load i64, i64* %138, align 8
  %140 = add nsw i64 %139, %137
  store i64 %140, i64* %138, align 8
  %141 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 4
  %142 = load i32, i32* %141, align 8
  %143 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %8, i64 0, i32 4
  %144 = load i32, i32* %143, align 8
  %145 = and i32 %144, %142
  store i32 %145, i32* %143, align 8
  br label %146

146:                                              ; preds = %111, %130
  br i1 %25, label %147, label %176

147:                                              ; preds = %146
  %148 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 7
  store i8 1, i8* %148, align 1
  %149 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 5
  store i16 %20, i16* %149, align 8
  %150 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 0
  %151 = load i32, i32* %150, align 8
  %152 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 2
  store i32 %151, i32* %152, align 8
  %153 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 1
  %154 = load i64, i64* %153, align 8
  %155 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 0
  store i64 %154, i64* %155, align 8
  %156 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 1
  store i64 %157, i64* %158, align 8
  %159 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %160 = load i16*, i16** %159, align 8
  %161 = sext i32 %5 to i64
  %162 = getelementptr inbounds i16, i16* %160, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 3
  store i16 %163, i16* %164, align 4
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %166 = load i8*, i8** %165, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 %161
  %168 = load i8, i8* %167, align 1
  %169 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 6
  store i8 %168, i8* %169, align 2
  %170 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %171 = load i8*, i8** %170, align 8
  %172 = sext i32 %24 to i64
  %173 = getelementptr inbounds i8, i8* %171, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %11, i64 0, i32 4
  store i8 %174, i8* %175, align 2
  br label %176

176:                                              ; preds = %147, %146
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %102) #6
  br label %177

177:                                              ; preds = %68, %176
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @search_tx_type(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx*, i8 zeroext, i32, i64, %struct.RD_STATS*) unnamed_addr #0 {
  %14 = alloca [256 x i32], align 16
  %15 = alloca [16 x i32], align 16
  %16 = alloca [16 x float], align 16
  %17 = alloca [16 x float], align 16
  %18 = alloca <4 x float>, align 16
  %19 = alloca [4 x float], align 16
  %20 = alloca [16 x float], align 16
  %21 = alloca [16 x float], align 16
  %22 = alloca i32, align 4
  %23 = alloca [32 x i8], align 16
  %24 = alloca [32 x i8], align 16
  %25 = alloca %struct.txb_ctx, align 4
  %26 = alloca i64, align 8
  %27 = alloca [4096 x i16], align 16
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  %30 = alloca [16384 x i32], align 32
  %31 = alloca [16 x i32], align 16
  %32 = alloca %struct.txfm_param, align 4
  %33 = alloca %struct.QUANT_PARAM, align 8
  %34 = alloca [16 x i32], align 16
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %38 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %37, align 8
  %39 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %38, align 8
  %40 = bitcast i32* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40) #6
  store i32 0, i32* %29, align 4
  %41 = bitcast [16384 x i32]* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 65536, i8* nonnull %41) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %41, i8 -86, i64 65536, i1 false)
  %42 = sext i32 %2 to i64
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 1
  %44 = bitcast i32** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds [16384 x i32], [16384 x i32]* %30, i64 0, i64 0
  %47 = icmp eq i32 %2, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %13
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %50 = load i32, i32* %49, align 16
  %51 = mul nsw i32 %50, %4
  %52 = add nsw i32 %51, %5
  %53 = sext i32 %52 to i64
  br label %54

54:                                               ; preds = %13, %48
  %55 = phi i64 [ %53, %48 ], [ 0, %13 ]
  %56 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 0
  store i32 2147483647, i32* %56, align 8
  %57 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 1
  %58 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 2
  %59 = bitcast i64* %57 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %59, align 8
  %60 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 3
  store i64 9223372036854775807, i64* %60, align 8
  %61 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 4
  store i32 0, i32* %61, align 8
  %62 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %12, i64 0, i32 5
  store i32 0, i32* %62, align 4
  %63 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %37, align 8
  %64 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %63, align 8
  %65 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %64, i64 0, i32 28
  %66 = load i16, i16* %65, align 1
  %67 = and i16 %66, 7
  %68 = zext i16 %67 to i64
  %69 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 11, i64 %68
  %70 = load i8, i8* %69, align 1
  switch i8 %70, label %71 [
    i8 0, label %72
    i8 2, label %72
  ]

71:                                               ; preds = %54
  br label %72

72:                                               ; preds = %54, %54, %71
  %73 = phi i32 [ 0, %71 ], [ 1, %54 ], [ 1, %54 ]
  %74 = or i32 %73, %10
  %75 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %39, i64 0, i32 28
  %76 = load i16, i16* %75, align 1
  %77 = trunc i16 %76 to i8
  %78 = icmp sgt i8 %77, -1
  br i1 %78, label %79, label %84

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %39, i64 0, i32 6, i64 0
  %81 = load i8, i8* %80, align 8
  %82 = icmp sgt i8 %81, 0
  %83 = zext i1 %82 to i32
  br label %84

84:                                               ; preds = %72, %79
  %85 = phi i32 [ 1, %72 ], [ %83, %79 ]
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 9
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %411, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %35, i64 0, i32 0, i32 0
  %91 = load i8, i8* %90, align 16
  %92 = and i8 %91, -3
  %93 = icmp eq i8 %92, 0
  %94 = or i32 %85, %2
  %95 = icmp eq i32 %94, 0
  %96 = and i1 %95, %93
  br i1 %96, label %97, label %411

97:                                               ; preds = %89
  %98 = zext i8 %7 to i64
  %99 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %98
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %100, %102
  br i1 %103, label %104, label %411

104:                                              ; preds = %97
  %105 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %36, i64 0, i32 0
  %106 = load i32, i32* %105, align 16
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 0
  %110 = load i32, i32* %109, align 16
  %111 = icmp slt i32 %106, %110
  br i1 %111, label %411, label %112

112:                                              ; preds = %104
  %113 = zext i8 %6 to i64
  %114 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nsw i32 %106, %116
  %118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = icmp slt i32 %117, %119
  br i1 %120, label %121, label %411

121:                                              ; preds = %112
  %122 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 2
  %123 = load i32, i32* %122, align 8
  %124 = icmp slt i32 %108, %123
  br i1 %124, label %411, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %113
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = add nsw i32 %108, %128
  %130 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 5, i32 3
  %131 = load i32, i32* %130, align 4
  %132 = icmp slt i32 %129, %131
  br i1 %132, label %133, label %411

133:                                              ; preds = %125
  %134 = bitcast [4096 x i16]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %134) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %134, i8 -86, i64 8192, i1 false) #6
  %135 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %113
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 0
  %139 = load i16*, i16** %138, align 8
  %140 = shl i32 %4, 2
  %141 = mul nsw i32 %140, %137
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i16, i16* %139, i64 %142
  %144 = shl nsw i32 %5, 2
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i16, i16* %143, i64 %145
  %147 = icmp eq i32 %100, %137
  br i1 %147, label %163, label %148

148:                                              ; preds = %133
  %149 = getelementptr inbounds [4096 x i16], [4096 x i16]* %27, i64 0, i64 0
  %150 = sext i32 %100 to i64
  %151 = shl nsw i64 %150, 1
  %152 = zext i8 %136 to i64
  br label %153

153:                                              ; preds = %153, %148
  %154 = phi i16* [ %146, %148 ], [ %160, %153 ]
  %155 = phi i32 [ 0, %148 ], [ %161, %153 ]
  %156 = phi i16* [ %149, %148 ], [ %159, %153 ]
  %157 = bitcast i16* %156 to i8*
  %158 = bitcast i16* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %157, i8* align 2 %158, i64 %151, i1 false) #6
  %159 = getelementptr inbounds i16, i16* %156, i64 %150
  %160 = getelementptr inbounds i16, i16* %154, i64 %152
  %161 = add nuw nsw i32 %155, 1
  %162 = icmp slt i32 %161, %100
  br i1 %162, label %153, label %163

163:                                              ; preds = %153, %133
  %164 = phi i16* [ %146, %133 ], [ %149, %153 ]
  %165 = bitcast i16* %164 to i8*
  %166 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 3
  %167 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %166, align 8
  %168 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %167, i64 0, i32 0, i32 3
  %169 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** @av1_get_crc32c_value, align 8
  %170 = bitcast %struct._CRC32C* %168 to i8*
  %171 = shl i32 %100, 1
  %172 = mul nsw i32 %171, %100
  %173 = sext i32 %172 to i64
  %174 = call i32 %169(i8* %170, i8* %165, i64 %173) #6
  %175 = shl i32 %174, 5
  %176 = zext i8 %7 to i32
  %177 = add i32 %175, %176
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %134) #6
  %178 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %166, align 8
  %179 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %178, i64 0, i32 5, i32 2
  %180 = load i32, i32* %179, align 8
  %181 = sext i32 %180 to i64
  br label %182

182:                                              ; preds = %186, %163
  %183 = phi i64 [ %184, %186 ], [ %181, %163 ]
  %184 = add nsw i64 %183, -1
  %185 = icmp sgt i64 %183, 0
  br i1 %185, label %186, label %190

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %178, i64 0, i32 5, i32 0, i64 %184
  %188 = load i32, i32* %187, align 4
  %189 = icmp eq i32 %188, %177
  br i1 %189, label %221, label %182

190:                                              ; preds = %182
  %191 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %178, i64 0, i32 5, i32 3
  %192 = load i32, i32* %191, align 4
  %193 = sext i32 %192 to i64
  br label %194

194:                                              ; preds = %198, %190
  %195 = phi i64 [ %196, %198 ], [ %193, %190 ]
  %196 = add nsw i64 %195, -1
  %197 = icmp sgt i64 %195, %181
  br i1 %197, label %198, label %202

198:                                              ; preds = %194
  %199 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %178, i64 0, i32 5, i32 0, i64 %196
  %200 = load i32, i32* %199, align 4
  %201 = icmp eq i32 %200, %177
  br i1 %201, label %219, label %194

202:                                              ; preds = %194
  %203 = icmp slt i32 %192, 256
  br i1 %203, label %204, label %209

204:                                              ; preds = %202
  %205 = add nsw i32 %192, %180
  %206 = srem i32 %205, 256
  %207 = add nsw i32 %192, 1
  store i32 %207, i32* %191, align 4
  %208 = sext i32 %206 to i64
  br label %212

209:                                              ; preds = %202
  %210 = add nsw i32 %180, 1
  %211 = srem i32 %210, 256
  store i32 %211, i32* %179, align 8
  br label %212

212:                                              ; preds = %209, %204
  %213 = phi i64 [ %181, %209 ], [ %208, %204 ]
  %214 = phi i32 [ %180, %209 ], [ %206, %204 ]
  %215 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %178, i64 0, i32 5, i32 0, i64 %213
  store i32 %177, i32* %215, align 4
  %216 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %178, i64 0, i32 5, i32 1, i64 %213
  %217 = bitcast %struct.TXB_RD_INFO* %216 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %217, i8 0, i64 32, i1 false) #6
  %218 = load %struct.TxbRdRecords*, %struct.TxbRdRecords** %166, align 8
  br label %223

219:                                              ; preds = %198
  %220 = trunc i64 %196 to i32
  br label %223

221:                                              ; preds = %186
  %222 = trunc i64 %184 to i32
  br label %223

223:                                              ; preds = %221, %219, %212
  %224 = phi %struct.TxbRdRecords* [ %218, %212 ], [ %178, %219 ], [ %178, %221 ]
  %225 = phi i32 [ %214, %212 ], [ %220, %219 ], [ %222, %221 ]
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226
  %228 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %8, i64 0, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = shl i32 %229, 8
  %231 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %8, i64 0, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = add nsw i32 %230, %232
  %234 = trunc i32 %233 to i16
  %235 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 5
  %236 = load i16, i16* %235, align 8
  %237 = icmp eq i16 %236, %234
  br i1 %237, label %238, label %411

238:                                              ; preds = %223
  %239 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 7
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 0
  br i1 %241, label %411, label %242

242:                                              ; preds = %238
  %243 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 4
  %244 = load i8, i8* %243, align 2
  %245 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %246 = load i8*, i8** %245, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 %55
  store i8 %244, i8* %247, align 1
  %248 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %249 = load i8, i8* %248, align 1, !range !12
  %250 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %37, align 8
  %251 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %250, align 8
  %252 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %251, i64 0, i32 28
  %253 = load i16, i16* %252, align 1
  %254 = and i16 %253, 7
  %255 = zext i16 %254 to i64
  %256 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %255
  %257 = load i32, i32* %256, align 4
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %339

259:                                              ; preds = %242
  %260 = lshr i64 399376, %98
  %261 = and i64 %260, 1
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %339

263:                                              ; preds = %259
  br i1 %47, label %264, label %273

264:                                              ; preds = %263
  %265 = load i8*, i8** %245, align 8
  %266 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %267 = load i32, i32* %266, align 16
  %268 = mul nsw i32 %267, %4
  %269 = add nsw i32 %268, %5
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %265, i64 %270
  %272 = load i8, i8* %271, align 1
  br label %339

273:                                              ; preds = %263
  %274 = trunc i16 %253 to i8
  %275 = icmp sgt i8 %274, -1
  br i1 %275, label %276, label %289

276:                                              ; preds = %273
  %277 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %251, i64 0, i32 6, i64 0
  %278 = load i8, i8* %277, align 8
  %279 = icmp slt i8 %278, 1
  br i1 %279, label %280, label %289

280:                                              ; preds = %276
  %281 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %251, i64 0, i32 3
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i64
  %284 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i64
  %287 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %286
  %288 = load i8, i8* %287, align 1
  br label %307

289:                                              ; preds = %276, %273
  %290 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %291 = load i32, i32* %290, align 8
  %292 = shl i32 %4, %291
  %293 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %294 = load i32, i32* %293, align 4
  %295 = shl i32 %5, %294
  %296 = load i8*, i8** %245, align 8
  %297 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %298 = load i32, i32* %297, align 16
  %299 = mul nsw i32 %298, %292
  %300 = add nsw i32 %299, %295
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %296, i64 %301
  %303 = load i8, i8* %302, align 1
  br i1 %275, label %304, label %312

304:                                              ; preds = %289
  %305 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %251, i64 0, i32 6, i64 0
  %306 = load i8, i8* %305, align 8
  br label %307

307:                                              ; preds = %304, %280
  %308 = phi i8 [ %278, %280 ], [ %306, %304 ]
  %309 = phi i8 [ %288, %280 ], [ %303, %304 ]
  %310 = icmp sgt i8 %308, 0
  %311 = zext i1 %310 to i32
  br label %312

312:                                              ; preds = %307, %289
  %313 = phi i8 [ %303, %289 ], [ %309, %307 ]
  %314 = phi i32 [ 1, %289 ], [ %311, %307 ]
  %315 = lshr i64 99848, %98
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %320, label %318

318:                                              ; preds = %312
  %319 = trunc i32 %314 to i8
  br label %331

320:                                              ; preds = %312
  %321 = icmp eq i8 %249, 0
  br i1 %321, label %325, label %322

322:                                              ; preds = %320
  %323 = icmp eq i32 %314, 0
  %324 = select i1 %323, i8 2, i8 1
  br label %331

325:                                              ; preds = %320
  %326 = zext i32 %314 to i64
  %327 = lshr i64 394756, %98
  %328 = and i64 %327, 1
  %329 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %326, i64 %328
  %330 = load i8, i8* %329, align 1
  br label %331

331:                                              ; preds = %325, %322, %318
  %332 = phi i8 [ %319, %318 ], [ %324, %322 ], [ %330, %325 ]
  %333 = zext i8 %332 to i64
  %334 = zext i8 %313 to i64
  %335 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %333, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = icmp eq i32 %336, 0
  %338 = select i1 %337, i8 0, i8 %313
  br label %339

339:                                              ; preds = %242, %259, %264, %331
  %340 = phi i8 [ 0, %259 ], [ 0, %242 ], [ %272, %264 ], [ %338, %331 ]
  %341 = load i8, i8* %243, align 2
  %342 = icmp eq i8 %340, %341
  br i1 %342, label %343, label %411

343:                                              ; preds = %339
  %344 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 2
  %345 = load i32, i32* %344, align 8
  store i32 %345, i32* %56, align 8
  %346 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %227, i64 0, i32 0
  %347 = load i64, i64* %346, align 8
  store i64 %347, i64* %57, align 8
  %348 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 1
  %349 = load i64, i64* %348, align 8
  store i64 %349, i64* %60, align 8
  %350 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 3
  %351 = load i16, i16* %350, align 4
  %352 = icmp eq i16 %351, 0
  %353 = zext i1 %352 to i32
  store i32 %353, i32* %61, align 8
  %354 = load i16, i16* %350, align 4
  %355 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 4
  %356 = load i16*, i16** %355, align 8
  %357 = sext i32 %3 to i64
  %358 = getelementptr inbounds i16, i16* %356, i64 %357
  store i16 %354, i16* %358, align 2
  %359 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 6
  %360 = load i8, i8* %359, align 2
  %361 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 5
  %362 = load i8*, i8** %361, align 8
  %363 = getelementptr inbounds i8, i8* %362, i64 %357
  store i8 %360, i8* %363, align 1
  %364 = load i16, i16* %350, align 4
  %365 = load i8, i8* %243, align 2
  %366 = getelementptr inbounds %struct.TxbRdRecords, %struct.TxbRdRecords* %224, i64 0, i32 5, i32 1, i64 %226, i32 9
  %367 = load i8, i8* %366, align 1
  %368 = icmp eq i8 %367, 0
  %369 = zext i1 %368 to i32
  %370 = or i32 %74, %369
  %371 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %372 = load i32, i32* %371, align 16
  %373 = load i8*, i8** %245, align 8
  %374 = mul nsw i32 %372, %4
  %375 = add nsw i32 %374, %5
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %373, i64 %376
  store i8 %365, i8* %377, align 1
  %378 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %98
  %379 = load i32, i32* %378, align 4
  %380 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %98
  %381 = load i32, i32* %380, align 4
  %382 = lshr i64 266256, %98
  %383 = and i64 %382, 1
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %385, label %389

385:                                              ; preds = %343
  %386 = lshr i64 133136, %98
  %387 = and i64 %386, 1
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %410, label %389

389:                                              ; preds = %385, %343
  %390 = sext i32 %379 to i64
  %391 = sext i32 %4 to i64
  %392 = sext i32 %372 to i64
  %393 = sext i32 %5 to i64
  %394 = sext i32 %381 to i64
  br label %395

395:                                              ; preds = %400, %389
  %396 = phi i64 [ 0, %389 ], [ %401, %400 ]
  %397 = add nsw i64 %396, %391
  %398 = mul nsw i64 %397, %392
  %399 = add nsw i64 %398, %393
  br label %403

400:                                              ; preds = %403
  %401 = add nuw nsw i64 %396, 4
  %402 = icmp slt i64 %401, %394
  br i1 %402, label %395, label %410

403:                                              ; preds = %403, %395
  %404 = phi i64 [ 0, %395 ], [ %408, %403 ]
  %405 = load i8*, i8** %245, align 8
  %406 = add nsw i64 %399, %404
  %407 = getelementptr inbounds i8, i8* %405, i64 %406
  store i8 %365, i8* %407, align 1
  %408 = add nuw nsw i64 %404, 4
  %409 = icmp slt i64 %408, %390
  br i1 %409, label %403, label %400

410:                                              ; preds = %400, %385
  call fastcc void @recon_intra(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i32 %3, i32 %4, i32 %5, i8 zeroext %6, i8 zeroext %7, %struct.txb_ctx* %8, i32 %370, i8 zeroext %365, i32 1, i32* nonnull %29, i16 zeroext %364)
  store i64 %45, i64* %44, align 8
  br label %2591

411:                                              ; preds = %339, %223, %238, %125, %121, %112, %104, %84, %89, %97
  %412 = phi i16 [ 0, %84 ], [ 0, %97 ], [ 0, %89 ], [ 0, %112 ], [ 0, %125 ], [ %234, %339 ], [ 0, %121 ], [ 0, %104 ], [ %234, %238 ], [ %234, %223 ]
  %413 = phi %struct.TXB_RD_INFO* [ null, %84 ], [ null, %97 ], [ null, %89 ], [ null, %112 ], [ null, %125 ], [ %227, %339 ], [ null, %121 ], [ null, %104 ], [ %227, %238 ], [ %227, %223 ]
  %414 = bitcast [16 x i32]* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %414) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %414, i8* align 16 bitcast ([16 x i32]* @__const.search_tx_type.txk_map to i8*), i64 64, i1 false)
  %415 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 13
  %416 = load i16*, i16** %415, align 8
  %417 = getelementptr inbounds i16, i16* %416, i64 1
  %418 = load i16, i16* %417, align 2
  %419 = ashr i16 %418, 3
  %420 = zext i8 %7 to i64
  %421 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 9
  %422 = load i32, i32* %421, align 4
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %603, label %424

424:                                              ; preds = %411
  %425 = lshr i64 258031, %420
  %426 = and i64 %425, 1
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %603, label %428

428:                                              ; preds = %424
  %429 = lshr i64 391151, %420
  %430 = and i64 %429, 1
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %603, label %432

432:                                              ; preds = %428
  %433 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %37, align 8
  %434 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %433, align 8
  %435 = load i16, i16* %416, align 2
  %436 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %420
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i64
  %439 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %438
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i32
  %442 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %438
  %443 = load i8, i8* %442, align 1
  %444 = zext i8 %443 to i32
  %445 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %446 = load i32, i32* %445, align 16
  %447 = icmp sgt i32 %446, -1
  %448 = zext i8 %6 to i64
  br i1 %447, label %464, label %449

449:                                              ; preds = %432
  %450 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %448
  %451 = load i8, i8* %450, align 1
  %452 = zext i8 %451 to i32
  %453 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %42, i32 2
  %454 = load i32, i32* %453, align 8
  %455 = add nsw i32 %454, 3
  %456 = ashr i32 %446, %455
  %457 = shl i32 %4, 2
  %458 = sub i32 %452, %457
  %459 = add i32 %456, %458
  %460 = icmp slt i32 %459, 0
  %461 = icmp sgt i32 %459, %441
  %462 = select i1 %461, i32 %441, i32 %459
  %463 = select i1 %460, i32 0, i32 %462
  br label %464

464:                                              ; preds = %449, %432
  %465 = phi i32 [ %463, %449 ], [ %441, %432 ]
  %466 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %467 = load i32, i32* %466, align 8
  %468 = icmp sgt i32 %467, -1
  %469 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %448
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  br i1 %468, label %484, label %472

472:                                              ; preds = %464
  %473 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %42, i32 1
  %474 = load i32, i32* %473, align 4
  %475 = add nsw i32 %474, 3
  %476 = ashr i32 %467, %475
  %477 = shl i32 %5, 2
  %478 = sub i32 %471, %477
  %479 = add i32 %476, %478
  %480 = icmp slt i32 %479, 0
  %481 = icmp sgt i32 %479, %444
  %482 = select i1 %481, i32 %444, i32 %479
  %483 = select i1 %480, i32 0, i32 %482
  br label %484

484:                                              ; preds = %472, %464
  %485 = phi i32 [ %483, %472 ], [ %444, %464 ]
  %486 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 0
  %487 = load i16*, i16** %486, align 8
  %488 = mul nsw i32 %471, %4
  %489 = add nsw i32 %488, %5
  %490 = shl i32 %489, 2
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i16, i16* %487, i64 %491
  %493 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %493) #6
  store i32 0, i32* %22, align 4
  %494 = load i64 (i16*, i32, i32, i32, i32*)*, i64 (i16*, i32, i32, i32, i32*)** @aom_sum_sse_2d_i16, align 8
  %495 = call i64 %494(i16* %492, i32 %471, i32 %485, i32 %465, i32* nonnull %22) #6
  %496 = icmp sgt i32 %485, 0
  %497 = icmp sgt i32 %465, 0
  %498 = and i1 %497, %496
  br i1 %498, label %499, label %522

499:                                              ; preds = %484
  %500 = mul nsw i32 %485, %465
  %501 = sitofp i32 %500 to double
  %502 = fdiv double 1.000000e+00, %501
  %503 = load i32, i32* %22, align 4
  %504 = icmp sgt i32 %503, 0
  %505 = select i1 %504, i64 128, i64 -128
  %506 = icmp slt i32 %503, 0
  %507 = sub nsw i32 0, %503
  %508 = select i1 %506, i32 %507, i32 %503
  %509 = sitofp i32 %508 to double
  %510 = fmul double %502, %509
  %511 = fptosi double %510 to i64
  %512 = mul i64 %505, %511
  %513 = shl i64 %495, 8
  %514 = uitofp i64 %513 to double
  %515 = fmul double %502, %514
  %516 = fptoui double %515 to i32
  %517 = sitofp i32 %503 to double
  %518 = fmul double %502, %517
  %519 = fmul double %518, %517
  %520 = fptoui double %519 to i64
  %521 = sub i64 %495, %520
  br label %522

522:                                              ; preds = %484, %499
  %523 = phi i32 [ %516, %499 ], [ -1, %484 ]
  %524 = phi i64 [ %512, %499 ], [ 9223372036854775807, %484 ]
  %525 = phi i64 [ %521, %499 ], [ -1, %484 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %493) #6
  %526 = sitofp i16 %419 to double
  %527 = fmul double %526, 1.800000e+00
  %528 = fmul double %527, %526
  %529 = fptoui double %528 to i64
  %530 = ashr i16 %435, 3
  %531 = sext i16 %530 to i32
  %532 = icmp slt i64 %524, 0
  %533 = sub nsw i64 0, %524
  %534 = select i1 %532, i64 %533, i64 %524
  %535 = getelementptr inbounds [19 x i16], [19 x i16]* @dc_coeff_scale, i64 0, i64 %420
  %536 = load i16, i16* %535, align 2
  %537 = zext i16 %536 to i64
  %538 = mul nsw i64 %534, %537
  %539 = shl nsw i32 %531, 12
  %540 = sext i32 %539 to i64
  %541 = icmp slt i64 %538, %540
  %542 = icmp ult i64 %525, %529
  %543 = and i1 %542, %541
  br i1 %543, label %544, label %585

544:                                              ; preds = %522
  store i32 1, i32* %61, align 8
  %545 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 4
  %546 = load i16*, i16** %545, align 8
  %547 = sext i32 %3 to i64
  %548 = getelementptr inbounds i16, i16* %546, i64 %547
  store i16 0, i16* %548, align 2
  %549 = shl i64 %495, 4
  store i64 %549, i64* %57, align 8
  store i64 %549, i64* %60, align 8
  %550 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %550) #6
  %551 = getelementptr inbounds [32 x i8], [32 x i8]* %24, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %550, i8 -86, i64 32, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %551) #6
  %552 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %42
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %551, i8 -86, i64 32, i1 false) #6
  call void @av1_get_entropy_contexts(i8 zeroext %6, %struct.macroblockd_plane* %552, i8* nonnull %550, i8* nonnull %551) #6
  %553 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %420
  %554 = load i8, i8* %553, align 1
  %555 = zext i8 %554 to i64
  %556 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %420
  %557 = load i8, i8* %556, align 1
  %558 = zext i8 %557 to i64
  %559 = add nuw nsw i64 %555, 1
  %560 = add nuw nsw i64 %559, %558
  %561 = lshr i64 %560, 1
  %562 = bitcast %struct.txb_ctx* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %562) #6
  %563 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %25, i64 0, i32 0
  store i32 -1431655766, i32* %563, align 4
  %564 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %25, i64 0, i32 1
  store i32 -1431655766, i32* %564, align 4
  %565 = icmp ne i32 %2, 0
  call fastcc void @get_txb_ctx(i8 zeroext %6, i8 zeroext %7, i32 %2, i8* nonnull %550, i8* nonnull %551, %struct.txb_ctx* nonnull %25) #6
  %566 = and i64 %561, 255
  %567 = zext i1 %565 to i64
  %568 = load i32, i32* %563, align 4
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %566, i64 %567, i32 0, i64 %569, i64 1
  %571 = load i32, i32* %570, align 4
  store i32 %571, i32* %56, align 8
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %574 = load i32, i32* %573, align 8
  %575 = sext i32 %574 to i64
  %576 = mul nsw i64 %575, %572
  %577 = add nsw i64 %576, 256
  %578 = ashr i64 %577, 9
  %579 = load i64, i64* %60, align 8
  %580 = shl i64 %579, 7
  %581 = add nsw i64 %578, %580
  store i64 %581, i64* %58, align 8
  %582 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 5
  %583 = load i8*, i8** %582, align 8
  %584 = getelementptr inbounds i8, i8* %583, i64 %547
  store i8 0, i8* %584, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %562) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %551) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %550) #6
  br label %599

585:                                              ; preds = %522
  br i1 %542, label %586, label %599

586:                                              ; preds = %585
  br i1 %47, label %598, label %587

587:                                              ; preds = %586
  %588 = icmp sgt i32 %2, 0
  br i1 %588, label %589, label %599

589:                                              ; preds = %587
  %590 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %434, i64 0, i32 28
  %591 = load i16, i16* %590, align 1
  %592 = trunc i16 %591 to i8
  %593 = icmp sgt i8 %592, -1
  br i1 %593, label %594, label %598

594:                                              ; preds = %589
  %595 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %434, i64 0, i32 6, i64 0
  %596 = load i8, i8* %595, align 8
  %597 = icmp slt i8 %596, 1
  br i1 %597, label %599, label %598

598:                                              ; preds = %594, %589, %586
  br label %599

599:                                              ; preds = %544, %585, %587, %594, %598
  %600 = phi i32 [ 0, %544 ], [ 1, %598 ], [ 0, %594 ], [ 0, %587 ], [ 0, %585 ]
  %601 = load i32, i32* %61, align 8
  %602 = icmp eq i32 %601, 1
  br i1 %602, label %2590, label %672

603:                                              ; preds = %428, %411, %424
  %604 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %420
  %605 = load i8, i8* %604, align 1
  %606 = zext i8 %605 to i64
  %607 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %606
  %608 = load i8, i8* %607, align 1
  %609 = zext i8 %608 to i32
  %610 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %606
  %611 = load i8, i8* %610, align 1
  %612 = zext i8 %611 to i32
  %613 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %614 = load i32, i32* %613, align 16
  %615 = icmp sgt i32 %614, -1
  %616 = zext i8 %6 to i64
  br i1 %615, label %632, label %617

617:                                              ; preds = %603
  %618 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %616
  %619 = load i8, i8* %618, align 1
  %620 = zext i8 %619 to i32
  %621 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %42, i32 2
  %622 = load i32, i32* %621, align 8
  %623 = add nsw i32 %622, 3
  %624 = ashr i32 %614, %623
  %625 = shl i32 %4, 2
  %626 = sub i32 %620, %625
  %627 = add i32 %624, %626
  %628 = icmp slt i32 %627, 0
  %629 = icmp sgt i32 %627, %609
  %630 = select i1 %629, i32 %609, i32 %627
  %631 = select i1 %628, i32 0, i32 %630
  br label %632

632:                                              ; preds = %603, %617
  %633 = phi i32 [ %631, %617 ], [ %609, %603 ]
  %634 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %635 = load i32, i32* %634, align 8
  %636 = icmp sgt i32 %635, -1
  %637 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %616
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i32
  br i1 %636, label %652, label %640

640:                                              ; preds = %632
  %641 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %42, i32 1
  %642 = load i32, i32* %641, align 4
  %643 = add nsw i32 %642, 3
  %644 = ashr i32 %635, %643
  %645 = shl i32 %5, 2
  %646 = sub i32 %639, %645
  %647 = add i32 %644, %646
  %648 = icmp slt i32 %647, 0
  %649 = icmp sgt i32 %647, %612
  %650 = select i1 %649, i32 %612, i32 %647
  %651 = select i1 %648, i32 0, i32 %650
  br label %652

652:                                              ; preds = %640, %632
  %653 = phi i32 [ %651, %640 ], [ %612, %632 ]
  %654 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 0
  %655 = load i16*, i16** %654, align 8
  %656 = mul nsw i32 %639, %4
  %657 = add nsw i32 %656, %5
  %658 = shl i32 %657, 2
  %659 = sext i32 %658 to i64
  %660 = getelementptr inbounds i16, i16* %655, i64 %659
  %661 = load i64 (i16*, i32, i32, i32)*, i64 (i16*, i32, i32, i32)** @aom_sum_squares_2d_i16, align 8
  %662 = call i64 %661(i16* %660, i32 %639, i32 %653, i32 %633) #6
  %663 = icmp sgt i32 %653, 0
  %664 = icmp sgt i32 %633, 0
  %665 = and i1 %664, %663
  br i1 %665, label %666, label %674

666:                                              ; preds = %652
  %667 = shl i64 %662, 8
  %668 = mul nsw i32 %653, %633
  %669 = sext i32 %668 to i64
  %670 = udiv i64 %667, %669
  %671 = trunc i64 %670 to i32
  br label %674

672:                                              ; preds = %599
  %673 = icmp eq i32 %600, 0
  br i1 %673, label %674, label %2211

674:                                              ; preds = %666, %652, %672
  %675 = phi i8 [ %470, %672 ], [ %638, %652 ], [ %638, %666 ]
  %676 = phi i64 [ %524, %672 ], [ 9223372036854775807, %652 ], [ 9223372036854775807, %666 ]
  %677 = phi i32 [ %523, %672 ], [ -1, %652 ], [ %671, %666 ]
  %678 = phi i64 [ %495, %672 ], [ %662, %652 ], [ %662, %666 ]
  %679 = getelementptr inbounds [16 x i32], [16 x i32]* %31, i64 0, i64 0
  %680 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %37, align 8
  %681 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %680, align 8
  %682 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 28
  %683 = load i16, i16* %682, align 1
  %684 = trunc i16 %683 to i8
  %685 = icmp sgt i8 %684, -1
  br i1 %685, label %688, label %686

686:                                              ; preds = %674
  %687 = and i8 %9, 1
  br label %697

688:                                              ; preds = %674
  %689 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 6, i64 0
  %690 = load i8, i8* %689, align 8
  %691 = icmp sgt i8 %690, 0
  %692 = and i8 %9, 1
  br i1 %691, label %697, label %693

693:                                              ; preds = %688
  %694 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 0
  %695 = load i32, i32* %694, align 4
  %696 = icmp eq i32 %695, 0
  br i1 %696, label %728, label %707

697:                                              ; preds = %688, %686
  %698 = phi i8 [ %687, %686 ], [ %692, %688 ]
  %699 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 1
  %700 = load i32, i32* %699, align 4
  %701 = icmp eq i32 %700, 0
  br i1 %701, label %728, label %702

702:                                              ; preds = %697
  br i1 %685, label %703, label %737

703:                                              ; preds = %702
  %704 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 6, i64 0
  %705 = load i8, i8* %704, align 8
  %706 = icmp slt i8 %705, 1
  br i1 %706, label %707, label %737

707:                                              ; preds = %693, %703
  %708 = phi i1 [ true, %703 ], [ false, %693 ]
  %709 = phi i8 [ %698, %703 ], [ %692, %693 ]
  %710 = phi i32 [ 1, %703 ], [ 0, %693 ]
  %711 = and i16 %683, 7
  %712 = zext i16 %711 to i64
  %713 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %712
  %714 = load i32, i32* %713, align 4
  %715 = icmp eq i32 %714, 0
  br i1 %715, label %716, label %737

716:                                              ; preds = %707
  %717 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 69
  %718 = load i32, i32* %717, align 8
  %719 = icmp ugt i8 %7, 2
  %720 = icmp ne i32 %718, 0
  %721 = or i1 %719, %720
  br i1 %721, label %737, label %722

722:                                              ; preds = %716
  %723 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 2
  %724 = load i8, i8* %723, align 1
  %725 = zext i8 %724 to i64
  %726 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %725
  %727 = load i8, i8* %726, align 1
  br label %737

728:                                              ; preds = %697, %693
  %729 = phi i1 [ true, %697 ], [ false, %693 ]
  %730 = phi i8 [ %698, %697 ], [ %692, %693 ]
  %731 = phi i32 [ 1, %697 ], [ 0, %693 ]
  %732 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  %733 = load i8, i8* %732, align 4
  %734 = icmp eq i8 %733, 1
  %735 = and i1 %47, %734
  %736 = select i1 %735, i8 0, i8 16
  br label %737

737:                                              ; preds = %728, %722, %716, %707, %703, %702
  %738 = phi i1 [ %729, %728 ], [ true, %702 ], [ true, %703 ], [ %708, %707 ], [ %708, %716 ], [ %708, %722 ]
  %739 = phi i8 [ %730, %728 ], [ %698, %702 ], [ %698, %703 ], [ %709, %707 ], [ %709, %716 ], [ %709, %722 ]
  %740 = phi i32 [ %731, %728 ], [ 1, %702 ], [ 1, %703 ], [ %710, %707 ], [ %710, %716 ], [ %710, %722 ]
  %741 = phi i8 [ %736, %728 ], [ 0, %702 ], [ 0, %703 ], [ 0, %707 ], [ 0, %716 ], [ %727, %722 ]
  %742 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %743 = load i8, i8* %742, align 1, !range !12
  %744 = zext i8 %743 to i32
  %745 = lshr i64 399376, %420
  %746 = and i64 %745, 1
  %747 = icmp eq i64 %746, 0
  br i1 %747, label %748, label %765

748:                                              ; preds = %737
  %749 = lshr i64 99848, %420
  %750 = and i64 %749, 1
  %751 = icmp eq i64 %750, 0
  br i1 %751, label %754, label %752

752:                                              ; preds = %748
  %753 = zext i1 %738 to i8
  br label %765

754:                                              ; preds = %748
  %755 = icmp eq i8 %743, 0
  br i1 %755, label %759, label %756

756:                                              ; preds = %754
  %757 = icmp eq i32 %740, 0
  %758 = select i1 %757, i8 2, i8 1
  br label %765

759:                                              ; preds = %754
  %760 = sext i32 %740 to i64
  %761 = lshr i64 394756, %420
  %762 = and i64 %761, 1
  %763 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %760, i64 %762
  %764 = load i8, i8* %763, align 1
  br label %765

765:                                              ; preds = %759, %756, %752, %737
  %766 = phi i8 [ %753, %752 ], [ %758, %756 ], [ %764, %759 ], [ 0, %737 ]
  %767 = icmp ne i32 %2, 0
  br i1 %767, label %768, label %841

768:                                              ; preds = %765
  %769 = and i16 %683, 7
  %770 = zext i16 %769 to i64
  %771 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %770
  %772 = load i32, i32* %771, align 4
  %773 = icmp ne i32 %772, 0
  %774 = xor i1 %747, true
  %775 = or i1 %773, %774
  br i1 %775, label %841, label %776

776:                                              ; preds = %768
  br i1 %685, label %777, label %790

777:                                              ; preds = %776
  %778 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 6, i64 0
  %779 = load i8, i8* %778, align 8
  %780 = icmp slt i8 %779, 1
  br i1 %780, label %781, label %790

781:                                              ; preds = %777
  %782 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 3
  %783 = load i8, i8* %782, align 1
  %784 = zext i8 %783 to i64
  %785 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %784
  %786 = load i8, i8* %785, align 1
  %787 = zext i8 %786 to i64
  %788 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %787
  %789 = load i8, i8* %788, align 1
  br label %809

790:                                              ; preds = %777, %776
  %791 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %792 = load i32, i32* %791, align 8
  %793 = shl i32 %4, %792
  %794 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %795 = load i32, i32* %794, align 4
  %796 = shl i32 %5, %795
  %797 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %798 = load i8*, i8** %797, align 8
  %799 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %800 = load i32, i32* %799, align 16
  %801 = mul nsw i32 %800, %793
  %802 = add nsw i32 %801, %796
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i8, i8* %798, i64 %803
  %805 = load i8, i8* %804, align 1
  br i1 %685, label %806, label %814

806:                                              ; preds = %790
  %807 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 6, i64 0
  %808 = load i8, i8* %807, align 8
  br label %809

809:                                              ; preds = %806, %781
  %810 = phi i8 [ %779, %781 ], [ %808, %806 ]
  %811 = phi i8 [ %789, %781 ], [ %805, %806 ]
  %812 = icmp sgt i8 %810, 0
  %813 = zext i1 %812 to i32
  br label %814

814:                                              ; preds = %809, %790
  %815 = phi i8 [ %805, %790 ], [ %811, %809 ]
  %816 = phi i32 [ 1, %790 ], [ %813, %809 ]
  %817 = lshr i64 99848, %420
  %818 = and i64 %817, 1
  %819 = icmp eq i64 %818, 0
  br i1 %819, label %822, label %820

820:                                              ; preds = %814
  %821 = trunc i32 %816 to i8
  br label %833

822:                                              ; preds = %814
  %823 = icmp eq i8 %743, 0
  br i1 %823, label %827, label %824

824:                                              ; preds = %822
  %825 = icmp eq i32 %816, 0
  %826 = select i1 %825, i8 2, i8 1
  br label %833

827:                                              ; preds = %822
  %828 = zext i32 %816 to i64
  %829 = lshr i64 394756, %420
  %830 = and i64 %829, 1
  %831 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %828, i64 %830
  %832 = load i8, i8* %831, align 1
  br label %833

833:                                              ; preds = %827, %824, %820
  %834 = phi i8 [ %821, %820 ], [ %826, %824 ], [ %832, %827 ]
  %835 = zext i8 %834 to i64
  %836 = zext i8 %815 to i64
  %837 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %835, i64 %836
  %838 = load i32, i32* %837, align 4
  %839 = icmp eq i32 %838, 0
  %840 = select i1 %839, i8 0, i8 %815
  br label %841

841:                                              ; preds = %833, %768, %765
  %842 = phi i8 [ %741, %765 ], [ 0, %768 ], [ %840, %833 ]
  %843 = phi i8 [ 0, %765 ], [ 0, %768 ], [ %840, %833 ]
  %844 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 19, i32 1
  %845 = load i8, i8* %844, align 1
  %846 = icmp eq i8 %845, 0
  br i1 %846, label %852, label %847

847:                                              ; preds = %841
  %848 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 19, i32 0
  %849 = load i8, i8* %848, align 2
  %850 = zext i8 %849 to i64
  %851 = getelementptr inbounds [5 x i8], [5 x i8]* @fimode_to_intradir, i64 0, i64 %850
  br label %854

852:                                              ; preds = %841
  %853 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %681, i64 0, i32 2
  br label %854

854:                                              ; preds = %852, %847
  %855 = phi i8* [ %851, %847 ], [ %853, %852 ]
  %856 = load i8, i8* %855, align 1
  %857 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 3
  %858 = load i32, i32* %857, align 4
  %859 = icmp ne i32 %858, 0
  %860 = icmp eq i8 %766, 3
  %861 = and i1 %860, %859
  %862 = zext i8 %856 to i64
  %863 = getelementptr inbounds [13 x i16], [13 x i16]* @av1_reduced_intra_tx_used_flag, i64 0, i64 %862
  %864 = zext i8 %766 to i64
  %865 = getelementptr inbounds [6 x i16], [6 x i16]* @av1_ext_tx_used_flag, i64 0, i64 %864
  %866 = select i1 %861, i16* %863, i16* %865
  %867 = load i16, i16* %866, align 2
  %868 = icmp eq i32 %858, 2
  br i1 %868, label %869, label %873

869:                                              ; preds = %854
  %870 = getelementptr inbounds [13 x i16], [13 x i16]* @av1_derived_intra_tx_used_flag, i64 0, i64 %862
  %871 = load i16, i16* %870, align 2
  %872 = and i16 %871, %867
  br label %873

873:                                              ; preds = %869, %854
  %874 = phi i16 [ %872, %869 ], [ %867, %854 ]
  %875 = and i16 %683, 7
  %876 = zext i16 %875 to i64
  %877 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %876
  %878 = load i32, i32* %877, align 4
  %879 = icmp eq i32 %878, 0
  br i1 %879, label %880, label %893

880:                                              ; preds = %873
  %881 = icmp ne i64 %746, 0
  %882 = icmp eq i16 %874, 1
  %883 = or i1 %881, %882
  br i1 %883, label %893, label %884

884:                                              ; preds = %880
  br i1 %738, label %885, label %889

885:                                              ; preds = %884
  %886 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 5
  %887 = load i8, i8* %886, align 1, !range !12
  %888 = icmp eq i8 %887, 0
  br i1 %888, label %899, label %893

889:                                              ; preds = %884
  %890 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 4
  %891 = load i8, i8* %890, align 2, !range !12
  %892 = icmp eq i8 %891, 0
  br i1 %892, label %899, label %893

893:                                              ; preds = %889, %885, %880, %873
  %894 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 1
  %895 = load i8, i8* %894, align 1, !range !12
  %896 = icmp eq i8 %895, 0
  %897 = and i16 %874, 15
  %898 = select i1 %896, i16 %897, i16 %874
  br label %906

899:                                              ; preds = %889, %885
  %900 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 19, i32 1
  %901 = load i8, i8* %900, align 1, !range !12
  %902 = icmp eq i8 %901, 0
  %903 = and i16 %874, 15
  %904 = select i1 %902, i16 %903, i16 %874
  %905 = icmp ult i8 %842, 16
  br i1 %905, label %906, label %913

906:                                              ; preds = %899, %893
  %907 = phi i16 [ %898, %893 ], [ %904, %899 ]
  %908 = phi i8 [ 0, %893 ], [ %842, %899 ]
  %909 = zext i8 %908 to i32
  %910 = shl i32 1, %909
  %911 = trunc i32 %910 to i16
  %912 = and i16 %907, %911
  br label %2198

913:                                              ; preds = %899
  %914 = icmp eq i8 %739, 0
  br i1 %914, label %917, label %915

915:                                              ; preds = %913
  %916 = and i16 %904, 3073
  br label %2198

917:                                              ; preds = %913
  %918 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %919 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %918, align 16
  %920 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %921 = load i8, i8* %920, align 16
  %922 = zext i8 %921 to i64
  %923 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %919, i64 0, i32 6, i32 0, i64 %922
  %924 = load i8, i8* %923, align 1
  %925 = zext i8 %924 to i64
  %926 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 7
  %927 = load i32, i32* %926, align 4
  %928 = icmp eq i32 %927, 0
  br i1 %928, label %970, label %929

929:                                              ; preds = %917
  %930 = add nsw i32 %927, -1
  %931 = sext i32 %930 to i64
  %932 = getelementptr inbounds [2 x [7 x i32]], [2 x [7 x i32]]* @get_tx_mask.thresh_arr, i64 0, i64 %931, i64 %925
  %933 = load i32, i32* %932, align 4
  %934 = zext i16 %904 to i32
  br label %935

935:                                              ; preds = %950, %929
  %936 = phi i64 [ 0, %929 ], [ %957, %950 ]
  %937 = phi i32 [ 0, %929 ], [ %952, %950 ]
  %938 = phi i32 [ -1, %929 ], [ %951, %950 ]
  %939 = phi i16 [ 0, %929 ], [ %956, %950 ]
  %940 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 60, i32 2, i64 %925, i64 %420, i64 %936
  %941 = load i32, i32* %940, align 4
  %942 = icmp sgt i32 %941, %938
  %943 = trunc i64 %936 to i32
  %944 = shl i32 1, %943
  br i1 %942, label %945, label %950

945:                                              ; preds = %935
  %946 = and i32 %944, %934
  %947 = icmp eq i32 %946, 0
  %948 = select i1 %947, i32 %938, i32 %941
  %949 = select i1 %947, i32 %937, i32 %943
  br label %950

950:                                              ; preds = %945, %935
  %951 = phi i32 [ %948, %945 ], [ %938, %935 ]
  %952 = phi i32 [ %949, %945 ], [ %937, %935 ]
  %953 = icmp slt i32 %941, %933
  %954 = trunc i32 %944 to i16
  %955 = select i1 %953, i16 %954, i16 0
  %956 = or i16 %955, %939
  %957 = add nuw nsw i64 %936, 1
  %958 = icmp eq i64 %957, 16
  br i1 %958, label %959, label %935

959:                                              ; preds = %950
  %960 = zext i16 %956 to i32
  %961 = shl i32 1, %952
  %962 = and i32 %961, %960
  %963 = icmp eq i32 %962, 0
  %964 = trunc i32 %961 to i16
  %965 = xor i16 %964, -1
  %966 = select i1 %963, i16 -1, i16 %965
  %967 = and i16 %966, %956
  %968 = xor i16 %967, -1
  %969 = and i16 %904, %968
  br label %970

970:                                              ; preds = %959, %917
  %971 = phi i16 [ %904, %917 ], [ %969, %959 ]
  %972 = zext i16 %971 to i32
  %973 = and i32 %972, 1
  %974 = lshr i32 %972, 1
  %975 = and i32 %974, 1
  %976 = lshr i32 %972, 2
  %977 = and i32 %976, 1
  %978 = lshr i32 %972, 3
  %979 = and i32 %978, 1
  %980 = lshr i32 %972, 4
  %981 = and i32 %980, 1
  %982 = lshr i32 %972, 5
  %983 = and i32 %982, 1
  %984 = lshr i32 %972, 6
  %985 = and i32 %984, 1
  %986 = lshr i16 %971, 7
  %987 = and i16 %986, 1
  %988 = zext i16 %987 to i32
  %989 = lshr i32 %972, 8
  %990 = and i32 %989, 1
  %991 = lshr i32 %972, 9
  %992 = and i32 %991, 1
  %993 = lshr i32 %972, 10
  %994 = and i32 %993, 1
  %995 = lshr i32 %972, 11
  %996 = and i32 %995, 1
  %997 = lshr i32 %972, 12
  %998 = and i32 %997, 1
  %999 = lshr i32 %972, 13
  %1000 = and i32 %999, 1
  %1001 = lshr i32 %972, 14
  %1002 = and i32 %1001, 1
  %1003 = lshr i16 %971, 15
  %1004 = zext i16 %1003 to i32
  %1005 = add nuw nsw i32 %973, %1004
  %1006 = add nuw nsw i32 %1005, %975
  %1007 = add nuw nsw i32 %1006, %977
  %1008 = add nuw nsw i32 %1007, %979
  %1009 = add nuw nsw i32 %1008, %981
  %1010 = add nuw nsw i32 %1009, %983
  %1011 = add nuw nsw i32 %1010, %985
  %1012 = add nuw nsw i32 %1011, %988
  %1013 = add nuw nsw i32 %1012, %990
  %1014 = add nuw nsw i32 %1013, %992
  %1015 = add nuw nsw i32 %1014, %994
  %1016 = add nuw nsw i32 %1015, %996
  %1017 = add nuw nsw i32 %1016, %998
  %1018 = add nuw nsw i32 %1017, %1000
  %1019 = add nuw nsw i32 %1018, %1002
  %1020 = icmp ugt i32 %1019, 2
  br i1 %1020, label %1021, label %1045

1021:                                             ; preds = %970
  %1022 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 8
  %1023 = load i32, i32* %1022, align 4
  %1024 = icmp eq i32 %1023, 0
  br i1 %1024, label %1045, label %1025

1025:                                             ; preds = %1021
  %1026 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 2
  %1027 = load i32, i32* %1026, align 4
  %1028 = sext i32 %1027 to i64
  %1029 = getelementptr inbounds [5 x i32], [5 x i32]* @prune_factors, i64 0, i64 %1028
  %1030 = load i32, i32* %1029, align 4
  %1031 = icmp ult i32 %1019, 8
  br i1 %1031, label %1032, label %1036

1032:                                             ; preds = %1025
  %1033 = call zeroext i16 @prune_txk_type(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %7, i32 %4, i32 %5, i8 zeroext %6, i32* nonnull %679, i16 zeroext %971, i32 %1030, %struct.txb_ctx* %8, i32 %744) #6
  %1034 = xor i16 %1033, -1
  %1035 = and i16 %971, %1034
  br label %2198

1036:                                             ; preds = %1025
  %1037 = getelementptr inbounds [5 x i32], [5 x i32]* @mul_factors, i64 0, i64 %1028
  %1038 = load i32, i32* %1037, align 4
  %1039 = mul nsw i32 %1038, %1019
  %1040 = add nsw i32 %1039, 50
  %1041 = sdiv i32 %1040, 100
  %1042 = call zeroext i16 @prune_txk_type_separ(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %7, i32 %4, i32 %5, i8 zeroext %6, i32* nonnull %679, i16 signext %971, i32 %1030, %struct.txb_ctx* %8, i32 %744, i64 %11, i32 %1041) #6
  %1043 = xor i16 %1042, -1
  %1044 = and i16 %971, %1043
  br label %2198

1045:                                             ; preds = %1021, %970
  %1046 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 2
  %1047 = load i32, i32* %1046, align 4
  %1048 = icmp sgt i32 %1047, 0
  %1049 = and i1 %738, %1048
  br i1 %1049, label %1050, label %2198

1050:                                             ; preds = %1045
  %1051 = icmp sgt i32 %1047, 3
  %1052 = select i1 %1051, i32 1, i32 5
  %1053 = icmp ugt i32 %1019, %1052
  br i1 %1053, label %1054, label %2198

1054:                                             ; preds = %1050
  %1055 = trunc i32 %1047 to i8
  %1056 = bitcast [16 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1056) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1056, i8* align 16 bitcast ([16 x i32]* @__const.prune_tx_2D.tx_type_table_2D to i8*), i64 64, i1 false) #6
  %1057 = and i8 %766, -2
  %1058 = icmp eq i8 %1057, 4
  br i1 %1058, label %1059, label %2196

1059:                                             ; preds = %1054
  %1060 = lshr i64 25063, %420
  %1061 = and i64 %1060, 1
  %1062 = icmp eq i64 %1061, 0
  br i1 %1062, label %2196, label %1063

1063:                                             ; preds = %1059
  %1064 = getelementptr inbounds [19 x %struct.NN_CONFIG*], [19 x %struct.NN_CONFIG*]* @av1_tx_type_nnconfig_map_ver, i64 0, i64 %420
  %1065 = load %struct.NN_CONFIG*, %struct.NN_CONFIG** %1064, align 8
  %1066 = getelementptr inbounds [19 x %struct.NN_CONFIG*], [19 x %struct.NN_CONFIG*]* @av1_tx_type_nnconfig_map_hor, i64 0, i64 %420
  %1067 = load %struct.NN_CONFIG*, %struct.NN_CONFIG** %1066, align 8
  %1068 = bitcast [16 x float]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1068) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1068, i8 -1, i64 64, i1 false) #6
  %1069 = bitcast [16 x float]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1069) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1069, i8 -1, i64 64, i1 false) #6
  %1070 = bitcast <4 x float>* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1070) #6
  %1071 = getelementptr inbounds <4 x float>, <4 x float>* %18, i64 0, i64 0
  %1072 = bitcast [4 x float]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1070, i8 -1, i64 16, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1072) #6
  %1073 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 0, i64 0
  %1074 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 0, i64 1
  %1075 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 0, i64 2
  %1076 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 0, i64 3
  %1077 = bitcast [16 x float]* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1072, i8 -1, i64 16, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1077) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1077, i8 -1, i64 64, i1 false) #6
  %1078 = bitcast [16 x float]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1078) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1078, i8 -1, i64 64, i1 false) #6
  %1079 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %420
  %1080 = load i32, i32* %1079, align 4
  %1081 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %420
  %1082 = load i32, i32* %1081, align 4
  %1083 = lshr i64 41187, %420
  %1084 = and i64 %1083, 1
  %1085 = icmp eq i64 %1084, 0
  %1086 = sdiv i32 %1080, 2
  %1087 = select i1 %1085, i32 %1086, i32 %1080
  %1088 = lshr i64 82275, %420
  %1089 = and i64 %1088, 1
  %1090 = icmp eq i64 %1089, 0
  %1091 = sdiv i32 %1082, 2
  %1092 = select i1 %1090, i32 %1091, i32 %1082
  %1093 = zext i8 %675 to i32
  %1094 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 0
  %1095 = load i16*, i16** %1094, align 8
  %1096 = shl i32 %4, 2
  %1097 = mul nsw i32 %1096, %1093
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds i16, i16* %1095, i64 %1098
  %1100 = shl nsw i32 %5, 2
  %1101 = sext i32 %1100 to i64
  %1102 = getelementptr inbounds i16, i16* %1099, i64 %1101
  %1103 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 0
  %1104 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 0
  %1105 = bitcast [256 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %1105) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1105, i8 -86, i64 1024, i1 false) #6
  %1106 = lshr i64 483100, %420
  %1107 = and i64 %1106, 1
  %1108 = icmp eq i64 %1107, 0
  %1109 = trunc i64 %1107 to i32
  %1110 = lshr i64 442012, %420
  %1111 = trunc i64 %1110 to i32
  %1112 = and i32 %1111, 1
  %1113 = ashr i32 %1080, %1109
  %1114 = ashr i32 %1082, %1112
  %1115 = mul i32 %1114, %1113
  %1116 = sext i32 %1115 to i64
  %1117 = shl nsw i64 %1116, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1105, i8 0, i64 %1117, i1 false) #6
  br i1 %1108, label %1118, label %1135

1118:                                             ; preds = %1063
  %1119 = zext i8 %675 to i64
  %1120 = zext i32 %1082 to i64
  %1121 = zext i32 %1080 to i64
  %1122 = and i64 %1121, 4294967288
  %1123 = add nsw i64 %1122, -8
  %1124 = lshr exact i64 %1123, 3
  %1125 = add nuw nsw i64 %1124, 1
  %1126 = lshr i64 8225, %420
  %1127 = and i64 %1126, 1
  %1128 = icmp eq i64 %1127, 0
  %1129 = and i64 %1121, 4294967288
  %1130 = and i64 %1125, 1
  %1131 = icmp eq i64 %1123, 0
  %1132 = sub nuw nsw i64 %1125, %1130
  %1133 = icmp eq i64 %1130, 0
  %1134 = icmp eq i64 %1129, %1121
  br label %1202

1135:                                             ; preds = %1063
  %1136 = sext i32 %1080 to i64
  %1137 = zext i8 %675 to i64
  %1138 = zext i32 %1082 to i64
  %1139 = icmp sgt i64 %1136, 2
  %1140 = select i1 %1139, i64 %1136, i64 2
  %1141 = add nsw i64 %1140, -1
  %1142 = lshr i64 %1141, 1
  %1143 = add nuw nsw i64 %1142, 1
  %1144 = icmp ult i64 %1143, 4
  %1145 = and i64 %1143, 9223372036854775804
  %1146 = shl nuw i64 %1145, 1
  %1147 = icmp eq i64 %1143, %1145
  br label %1148

1148:                                             ; preds = %1199, %1135
  %1149 = phi i64 [ 0, %1135 ], [ %1200, %1199 ]
  %1150 = trunc i64 %1149 to i32
  %1151 = lshr i32 %1150, %1112
  %1152 = mul nsw i32 %1151, %1113
  %1153 = sext i32 %1152 to i64
  %1154 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1153
  %1155 = mul nuw nsw i64 %1149, %1137
  %1156 = getelementptr inbounds i16, i16* %1102, i64 %1155
  br i1 %1144, label %1179, label %1157

1157:                                             ; preds = %1148, %1157
  %1158 = phi i64 [ %1176, %1157 ], [ 0, %1148 ]
  %1159 = shl i64 %1158, 1
  %1160 = getelementptr inbounds i16, i16* %1156, i64 %1159
  %1161 = bitcast i16* %1160 to <8 x i16>*
  %1162 = load <8 x i16>, <8 x i16>* %1161, align 2
  %1163 = shufflevector <8 x i16> %1162, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %1164 = shufflevector <8 x i16> %1162, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1165 = sext <4 x i16> %1163 to <4 x i32>
  %1166 = mul nsw <4 x i32> %1165, %1165
  %1167 = sext <4 x i16> %1164 to <4 x i32>
  %1168 = mul nsw <4 x i32> %1167, %1167
  %1169 = and i64 %1158, 9223372036854775804
  %1170 = getelementptr inbounds i32, i32* %1154, i64 %1169
  %1171 = bitcast i32* %1170 to <4 x i32>*
  %1172 = load <4 x i32>, <4 x i32>* %1171, align 4
  %1173 = add <4 x i32> %1172, %1166
  %1174 = add <4 x i32> %1173, %1168
  %1175 = bitcast i32* %1170 to <4 x i32>*
  store <4 x i32> %1174, <4 x i32>* %1175, align 4
  %1176 = add i64 %1158, 4
  %1177 = icmp eq i64 %1176, %1145
  br i1 %1177, label %1178, label %1157, !llvm.loop !30

1178:                                             ; preds = %1157
  br i1 %1147, label %1199, label %1179

1179:                                             ; preds = %1178, %1148
  %1180 = phi i64 [ 0, %1148 ], [ %1146, %1178 ]
  br label %1181

1181:                                             ; preds = %1179, %1181
  %1182 = phi i64 [ %1197, %1181 ], [ %1180, %1179 ]
  %1183 = getelementptr inbounds i16, i16* %1156, i64 %1182
  %1184 = load i16, i16* %1183, align 2
  %1185 = sext i16 %1184 to i32
  %1186 = mul nsw i32 %1185, %1185
  %1187 = or i64 %1182, 1
  %1188 = getelementptr inbounds i16, i16* %1156, i64 %1187
  %1189 = load i16, i16* %1188, align 2
  %1190 = sext i16 %1189 to i32
  %1191 = mul nsw i32 %1190, %1190
  %1192 = lshr exact i64 %1182, 1
  %1193 = getelementptr inbounds i32, i32* %1154, i64 %1192
  %1194 = load i32, i32* %1193, align 4
  %1195 = add i32 %1194, %1186
  %1196 = add i32 %1195, %1191
  store i32 %1196, i32* %1193, align 4
  %1197 = add nuw nsw i64 %1182, 2
  %1198 = icmp slt i64 %1197, %1136
  br i1 %1198, label %1181, label %1199, !llvm.loop !31

1199:                                             ; preds = %1181, %1178
  %1200 = add nuw nsw i64 %1149, 1
  %1201 = icmp eq i64 %1200, %1138
  br i1 %1201, label %1299, label %1148

1202:                                             ; preds = %1296, %1118
  %1203 = phi i64 [ 0, %1118 ], [ %1297, %1296 ]
  %1204 = trunc i64 %1203 to i32
  %1205 = lshr i32 %1204, %1112
  %1206 = mul nsw i32 %1205, %1113
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1207
  %1209 = mul nuw nsw i64 %1203, %1119
  %1210 = getelementptr inbounds i16, i16* %1102, i64 %1209
  br i1 %1128, label %1211, label %1283

1211:                                             ; preds = %1202
  br i1 %1131, label %1259, label %1212

1212:                                             ; preds = %1211, %1212
  %1213 = phi i64 [ %1256, %1212 ], [ 0, %1211 ]
  %1214 = phi i64 [ %1257, %1212 ], [ %1132, %1211 ]
  %1215 = getelementptr inbounds i16, i16* %1210, i64 %1213
  %1216 = bitcast i16* %1215 to <4 x i16>*
  %1217 = load <4 x i16>, <4 x i16>* %1216, align 2
  %1218 = getelementptr inbounds i16, i16* %1215, i64 4
  %1219 = bitcast i16* %1218 to <4 x i16>*
  %1220 = load <4 x i16>, <4 x i16>* %1219, align 2
  %1221 = sext <4 x i16> %1217 to <4 x i32>
  %1222 = sext <4 x i16> %1220 to <4 x i32>
  %1223 = mul nsw <4 x i32> %1221, %1221
  %1224 = mul nsw <4 x i32> %1222, %1222
  %1225 = getelementptr inbounds i32, i32* %1208, i64 %1213
  %1226 = bitcast i32* %1225 to <4 x i32>*
  %1227 = load <4 x i32>, <4 x i32>* %1226, align 4
  %1228 = getelementptr inbounds i32, i32* %1225, i64 4
  %1229 = bitcast i32* %1228 to <4 x i32>*
  %1230 = load <4 x i32>, <4 x i32>* %1229, align 4
  %1231 = add <4 x i32> %1223, %1227
  %1232 = add <4 x i32> %1224, %1230
  %1233 = bitcast i32* %1225 to <4 x i32>*
  store <4 x i32> %1231, <4 x i32>* %1233, align 4
  %1234 = bitcast i32* %1228 to <4 x i32>*
  store <4 x i32> %1232, <4 x i32>* %1234, align 4
  %1235 = or i64 %1213, 8
  %1236 = getelementptr inbounds i16, i16* %1210, i64 %1235
  %1237 = bitcast i16* %1236 to <4 x i16>*
  %1238 = load <4 x i16>, <4 x i16>* %1237, align 2
  %1239 = getelementptr inbounds i16, i16* %1236, i64 4
  %1240 = bitcast i16* %1239 to <4 x i16>*
  %1241 = load <4 x i16>, <4 x i16>* %1240, align 2
  %1242 = sext <4 x i16> %1238 to <4 x i32>
  %1243 = sext <4 x i16> %1241 to <4 x i32>
  %1244 = mul nsw <4 x i32> %1242, %1242
  %1245 = mul nsw <4 x i32> %1243, %1243
  %1246 = getelementptr inbounds i32, i32* %1208, i64 %1235
  %1247 = bitcast i32* %1246 to <4 x i32>*
  %1248 = load <4 x i32>, <4 x i32>* %1247, align 4
  %1249 = getelementptr inbounds i32, i32* %1246, i64 4
  %1250 = bitcast i32* %1249 to <4 x i32>*
  %1251 = load <4 x i32>, <4 x i32>* %1250, align 4
  %1252 = add <4 x i32> %1244, %1248
  %1253 = add <4 x i32> %1245, %1251
  %1254 = bitcast i32* %1246 to <4 x i32>*
  store <4 x i32> %1252, <4 x i32>* %1254, align 4
  %1255 = bitcast i32* %1249 to <4 x i32>*
  store <4 x i32> %1253, <4 x i32>* %1255, align 4
  %1256 = add i64 %1213, 16
  %1257 = add i64 %1214, -2
  %1258 = icmp eq i64 %1257, 0
  br i1 %1258, label %1259, label %1212, !llvm.loop !32

1259:                                             ; preds = %1212, %1211
  %1260 = phi i64 [ 0, %1211 ], [ %1256, %1212 ]
  br i1 %1133, label %1282, label %1261

1261:                                             ; preds = %1259
  %1262 = getelementptr inbounds i16, i16* %1210, i64 %1260
  %1263 = bitcast i16* %1262 to <4 x i16>*
  %1264 = load <4 x i16>, <4 x i16>* %1263, align 2
  %1265 = getelementptr inbounds i16, i16* %1262, i64 4
  %1266 = bitcast i16* %1265 to <4 x i16>*
  %1267 = load <4 x i16>, <4 x i16>* %1266, align 2
  %1268 = sext <4 x i16> %1264 to <4 x i32>
  %1269 = sext <4 x i16> %1267 to <4 x i32>
  %1270 = mul nsw <4 x i32> %1268, %1268
  %1271 = mul nsw <4 x i32> %1269, %1269
  %1272 = getelementptr inbounds i32, i32* %1208, i64 %1260
  %1273 = bitcast i32* %1272 to <4 x i32>*
  %1274 = load <4 x i32>, <4 x i32>* %1273, align 4
  %1275 = getelementptr inbounds i32, i32* %1272, i64 4
  %1276 = bitcast i32* %1275 to <4 x i32>*
  %1277 = load <4 x i32>, <4 x i32>* %1276, align 4
  %1278 = add <4 x i32> %1270, %1274
  %1279 = add <4 x i32> %1271, %1277
  %1280 = bitcast i32* %1272 to <4 x i32>*
  store <4 x i32> %1278, <4 x i32>* %1280, align 4
  %1281 = bitcast i32* %1275 to <4 x i32>*
  store <4 x i32> %1279, <4 x i32>* %1281, align 4
  br label %1282

1282:                                             ; preds = %1259, %1261
  br i1 %1134, label %1296, label %1283

1283:                                             ; preds = %1202, %1282
  %1284 = phi i64 [ 0, %1202 ], [ %1129, %1282 ]
  br label %1285

1285:                                             ; preds = %1283, %1285
  %1286 = phi i64 [ %1294, %1285 ], [ %1284, %1283 ]
  %1287 = getelementptr inbounds i16, i16* %1210, i64 %1286
  %1288 = load i16, i16* %1287, align 2
  %1289 = sext i16 %1288 to i32
  %1290 = mul nsw i32 %1289, %1289
  %1291 = getelementptr inbounds i32, i32* %1208, i64 %1286
  %1292 = load i32, i32* %1291, align 4
  %1293 = add i32 %1290, %1292
  store i32 %1293, i32* %1291, align 4
  %1294 = add nuw nsw i64 %1286, 1
  %1295 = icmp eq i64 %1294, %1121
  br i1 %1295, label %1296, label %1285, !llvm.loop !33

1296:                                             ; preds = %1285, %1282
  %1297 = add nuw nsw i64 %1203, 1
  %1298 = icmp eq i64 %1297, %1120
  br i1 %1298, label %1299, label %1202

1299:                                             ; preds = %1199, %1296
  %1300 = icmp sgt i32 %1115, 0
  br i1 %1300, label %1301, label %1383

1301:                                             ; preds = %1299
  %1302 = zext i32 %1115 to i64
  %1303 = icmp ult i32 %1115, 4
  br i1 %1303, label %1368, label %1304

1304:                                             ; preds = %1301
  %1305 = and i64 %1302, 4294967292
  %1306 = add nsw i64 %1305, -4
  %1307 = lshr exact i64 %1306, 2
  %1308 = add nuw nsw i64 %1307, 1
  %1309 = and i64 %1308, 1
  %1310 = icmp eq i64 %1306, 0
  br i1 %1310, label %1342, label %1311

1311:                                             ; preds = %1304
  %1312 = sub nuw nsw i64 %1308, %1309
  br label %1313

1313:                                             ; preds = %1313, %1311
  %1314 = phi i64 [ 0, %1311 ], [ %1339, %1313 ]
  %1315 = phi <2 x i64> [ zeroinitializer, %1311 ], [ %1337, %1313 ]
  %1316 = phi <2 x i64> [ zeroinitializer, %1311 ], [ %1338, %1313 ]
  %1317 = phi i64 [ %1312, %1311 ], [ %1340, %1313 ]
  %1318 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1314
  %1319 = bitcast i32* %1318 to <2 x i32>*
  %1320 = load <2 x i32>, <2 x i32>* %1319, align 16
  %1321 = getelementptr inbounds i32, i32* %1318, i64 2
  %1322 = bitcast i32* %1321 to <2 x i32>*
  %1323 = load <2 x i32>, <2 x i32>* %1322, align 8
  %1324 = zext <2 x i32> %1320 to <2 x i64>
  %1325 = zext <2 x i32> %1323 to <2 x i64>
  %1326 = add <2 x i64> %1315, %1324
  %1327 = add <2 x i64> %1316, %1325
  %1328 = or i64 %1314, 4
  %1329 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1328
  %1330 = bitcast i32* %1329 to <2 x i32>*
  %1331 = load <2 x i32>, <2 x i32>* %1330, align 16
  %1332 = getelementptr inbounds i32, i32* %1329, i64 2
  %1333 = bitcast i32* %1332 to <2 x i32>*
  %1334 = load <2 x i32>, <2 x i32>* %1333, align 8
  %1335 = zext <2 x i32> %1331 to <2 x i64>
  %1336 = zext <2 x i32> %1334 to <2 x i64>
  %1337 = add <2 x i64> %1326, %1335
  %1338 = add <2 x i64> %1327, %1336
  %1339 = add i64 %1314, 8
  %1340 = add i64 %1317, -2
  %1341 = icmp eq i64 %1340, 0
  br i1 %1341, label %1342, label %1313, !llvm.loop !34

1342:                                             ; preds = %1313, %1304
  %1343 = phi <2 x i64> [ undef, %1304 ], [ %1337, %1313 ]
  %1344 = phi <2 x i64> [ undef, %1304 ], [ %1338, %1313 ]
  %1345 = phi i64 [ 0, %1304 ], [ %1339, %1313 ]
  %1346 = phi <2 x i64> [ zeroinitializer, %1304 ], [ %1337, %1313 ]
  %1347 = phi <2 x i64> [ zeroinitializer, %1304 ], [ %1338, %1313 ]
  %1348 = icmp eq i64 %1309, 0
  br i1 %1348, label %1360, label %1349

1349:                                             ; preds = %1342
  %1350 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1345
  %1351 = getelementptr inbounds i32, i32* %1350, i64 2
  %1352 = bitcast i32* %1351 to <2 x i32>*
  %1353 = load <2 x i32>, <2 x i32>* %1352, align 8
  %1354 = zext <2 x i32> %1353 to <2 x i64>
  %1355 = add <2 x i64> %1347, %1354
  %1356 = bitcast i32* %1350 to <2 x i32>*
  %1357 = load <2 x i32>, <2 x i32>* %1356, align 16
  %1358 = zext <2 x i32> %1357 to <2 x i64>
  %1359 = add <2 x i64> %1346, %1358
  br label %1360

1360:                                             ; preds = %1342, %1349
  %1361 = phi <2 x i64> [ %1343, %1342 ], [ %1359, %1349 ]
  %1362 = phi <2 x i64> [ %1344, %1342 ], [ %1355, %1349 ]
  %1363 = add <2 x i64> %1362, %1361
  %1364 = shufflevector <2 x i64> %1363, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1365 = add <2 x i64> %1363, %1364
  %1366 = extractelement <2 x i64> %1365, i32 0
  %1367 = icmp eq i64 %1305, %1302
  br i1 %1367, label %1380, label %1368

1368:                                             ; preds = %1360, %1301
  %1369 = phi i64 [ 0, %1301 ], [ %1305, %1360 ]
  %1370 = phi i64 [ 0, %1301 ], [ %1366, %1360 ]
  br label %1371

1371:                                             ; preds = %1368, %1371
  %1372 = phi i64 [ %1378, %1371 ], [ %1369, %1368 ]
  %1373 = phi i64 [ %1377, %1371 ], [ %1370, %1368 ]
  %1374 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1372
  %1375 = load i32, i32* %1374, align 4
  %1376 = zext i32 %1375 to i64
  %1377 = add i64 %1373, %1376
  %1378 = add nuw nsw i64 %1372, 1
  %1379 = icmp eq i64 %1378, %1302
  br i1 %1379, label %1380, label %1371, !llvm.loop !35

1380:                                             ; preds = %1371, %1360
  %1381 = phi i64 [ %1366, %1360 ], [ %1377, %1371 ]
  %1382 = icmp eq i64 %1381, 0
  br i1 %1382, label %1383, label %1559

1383:                                             ; preds = %1380, %1299
  %1384 = sitofp i32 %1113 to float
  %1385 = fdiv float 1.000000e+00, %1384
  %1386 = add i32 %1113, -1
  %1387 = icmp sgt i32 %1386, 0
  br i1 %1387, label %1388, label %1471

1388:                                             ; preds = %1383
  %1389 = zext i32 %1386 to i64
  %1390 = icmp ult i32 %1386, 8
  br i1 %1390, label %1464, label %1391

1391:                                             ; preds = %1388
  %1392 = and i64 %1389, 4294967288
  %1393 = insertelement <4 x float> undef, float %1385, i32 0
  %1394 = shufflevector <4 x float> %1393, <4 x float> undef, <4 x i32> zeroinitializer
  %1395 = insertelement <4 x float> undef, float %1385, i32 0
  %1396 = shufflevector <4 x float> %1395, <4 x float> undef, <4 x i32> zeroinitializer
  %1397 = add nsw i64 %1392, -8
  %1398 = lshr exact i64 %1397, 3
  %1399 = add nuw nsw i64 %1398, 1
  %1400 = and i64 %1399, 7
  %1401 = icmp ult i64 %1397, 56
  br i1 %1401, label %1449, label %1402

1402:                                             ; preds = %1391
  %1403 = sub nsw i64 %1399, %1400
  br label %1404

1404:                                             ; preds = %1404, %1402
  %1405 = phi i64 [ 0, %1402 ], [ %1446, %1404 ]
  %1406 = phi i64 [ %1403, %1402 ], [ %1447, %1404 ]
  %1407 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1405
  %1408 = bitcast float* %1407 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1408, align 16
  %1409 = getelementptr inbounds float, float* %1407, i64 4
  %1410 = bitcast float* %1409 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1410, align 16
  %1411 = or i64 %1405, 8
  %1412 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1411
  %1413 = bitcast float* %1412 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1413, align 16
  %1414 = getelementptr inbounds float, float* %1412, i64 4
  %1415 = bitcast float* %1414 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1415, align 16
  %1416 = or i64 %1405, 16
  %1417 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1416
  %1418 = bitcast float* %1417 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1418, align 16
  %1419 = getelementptr inbounds float, float* %1417, i64 4
  %1420 = bitcast float* %1419 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1420, align 16
  %1421 = or i64 %1405, 24
  %1422 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1421
  %1423 = bitcast float* %1422 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1423, align 16
  %1424 = getelementptr inbounds float, float* %1422, i64 4
  %1425 = bitcast float* %1424 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1425, align 16
  %1426 = or i64 %1405, 32
  %1427 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1426
  %1428 = bitcast float* %1427 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1428, align 16
  %1429 = getelementptr inbounds float, float* %1427, i64 4
  %1430 = bitcast float* %1429 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1430, align 16
  %1431 = or i64 %1405, 40
  %1432 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1431
  %1433 = bitcast float* %1432 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1433, align 16
  %1434 = getelementptr inbounds float, float* %1432, i64 4
  %1435 = bitcast float* %1434 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1435, align 16
  %1436 = or i64 %1405, 48
  %1437 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1436
  %1438 = bitcast float* %1437 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1438, align 16
  %1439 = getelementptr inbounds float, float* %1437, i64 4
  %1440 = bitcast float* %1439 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1440, align 16
  %1441 = or i64 %1405, 56
  %1442 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1441
  %1443 = bitcast float* %1442 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1443, align 16
  %1444 = getelementptr inbounds float, float* %1442, i64 4
  %1445 = bitcast float* %1444 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1445, align 16
  %1446 = add i64 %1405, 64
  %1447 = add i64 %1406, -8
  %1448 = icmp eq i64 %1447, 0
  br i1 %1448, label %1449, label %1404, !llvm.loop !36

1449:                                             ; preds = %1404, %1391
  %1450 = phi i64 [ 0, %1391 ], [ %1446, %1404 ]
  %1451 = icmp eq i64 %1400, 0
  br i1 %1451, label %1462, label %1452

1452:                                             ; preds = %1449, %1452
  %1453 = phi i64 [ %1459, %1452 ], [ %1450, %1449 ]
  %1454 = phi i64 [ %1460, %1452 ], [ %1400, %1449 ]
  %1455 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1453
  %1456 = bitcast float* %1455 to <4 x float>*
  store <4 x float> %1394, <4 x float>* %1456, align 16
  %1457 = getelementptr inbounds float, float* %1455, i64 4
  %1458 = bitcast float* %1457 to <4 x float>*
  store <4 x float> %1396, <4 x float>* %1458, align 16
  %1459 = add i64 %1453, 8
  %1460 = add i64 %1454, -1
  %1461 = icmp eq i64 %1460, 0
  br i1 %1461, label %1462, label %1452, !llvm.loop !37

1462:                                             ; preds = %1452, %1449
  %1463 = icmp eq i64 %1392, %1389
  br i1 %1463, label %1471, label %1464

1464:                                             ; preds = %1462, %1388
  %1465 = phi i64 [ 0, %1388 ], [ %1392, %1462 ]
  br label %1466

1466:                                             ; preds = %1464, %1466
  %1467 = phi i64 [ %1469, %1466 ], [ %1465, %1464 ]
  %1468 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1467
  store float %1385, float* %1468, align 4
  %1469 = add nuw nsw i64 %1467, 1
  %1470 = icmp eq i64 %1469, %1389
  br i1 %1470, label %1471, label %1466, !llvm.loop !39

1471:                                             ; preds = %1466, %1462, %1383
  %1472 = sitofp i32 %1114 to float
  %1473 = fdiv float 1.000000e+00, %1472
  %1474 = add i32 %1114, -1
  %1475 = icmp sgt i32 %1474, 0
  br i1 %1475, label %1476, label %1868

1476:                                             ; preds = %1471
  %1477 = zext i32 %1474 to i64
  %1478 = icmp ult i32 %1474, 8
  br i1 %1478, label %1552, label %1479

1479:                                             ; preds = %1476
  %1480 = and i64 %1477, 4294967288
  %1481 = insertelement <4 x float> undef, float %1473, i32 0
  %1482 = shufflevector <4 x float> %1481, <4 x float> undef, <4 x i32> zeroinitializer
  %1483 = insertelement <4 x float> undef, float %1473, i32 0
  %1484 = shufflevector <4 x float> %1483, <4 x float> undef, <4 x i32> zeroinitializer
  %1485 = add nsw i64 %1480, -8
  %1486 = lshr exact i64 %1485, 3
  %1487 = add nuw nsw i64 %1486, 1
  %1488 = and i64 %1487, 7
  %1489 = icmp ult i64 %1485, 56
  br i1 %1489, label %1537, label %1490

1490:                                             ; preds = %1479
  %1491 = sub nsw i64 %1487, %1488
  br label %1492

1492:                                             ; preds = %1492, %1490
  %1493 = phi i64 [ 0, %1490 ], [ %1534, %1492 ]
  %1494 = phi i64 [ %1491, %1490 ], [ %1535, %1492 ]
  %1495 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1493
  %1496 = bitcast float* %1495 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1496, align 16
  %1497 = getelementptr inbounds float, float* %1495, i64 4
  %1498 = bitcast float* %1497 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1498, align 16
  %1499 = or i64 %1493, 8
  %1500 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1499
  %1501 = bitcast float* %1500 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1501, align 16
  %1502 = getelementptr inbounds float, float* %1500, i64 4
  %1503 = bitcast float* %1502 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1503, align 16
  %1504 = or i64 %1493, 16
  %1505 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1504
  %1506 = bitcast float* %1505 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1506, align 16
  %1507 = getelementptr inbounds float, float* %1505, i64 4
  %1508 = bitcast float* %1507 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1508, align 16
  %1509 = or i64 %1493, 24
  %1510 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1509
  %1511 = bitcast float* %1510 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1511, align 16
  %1512 = getelementptr inbounds float, float* %1510, i64 4
  %1513 = bitcast float* %1512 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1513, align 16
  %1514 = or i64 %1493, 32
  %1515 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1514
  %1516 = bitcast float* %1515 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1516, align 16
  %1517 = getelementptr inbounds float, float* %1515, i64 4
  %1518 = bitcast float* %1517 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1518, align 16
  %1519 = or i64 %1493, 40
  %1520 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1519
  %1521 = bitcast float* %1520 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1521, align 16
  %1522 = getelementptr inbounds float, float* %1520, i64 4
  %1523 = bitcast float* %1522 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1523, align 16
  %1524 = or i64 %1493, 48
  %1525 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1524
  %1526 = bitcast float* %1525 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1526, align 16
  %1527 = getelementptr inbounds float, float* %1525, i64 4
  %1528 = bitcast float* %1527 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1528, align 16
  %1529 = or i64 %1493, 56
  %1530 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1529
  %1531 = bitcast float* %1530 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1531, align 16
  %1532 = getelementptr inbounds float, float* %1530, i64 4
  %1533 = bitcast float* %1532 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1533, align 16
  %1534 = add i64 %1493, 64
  %1535 = add i64 %1494, -8
  %1536 = icmp eq i64 %1535, 0
  br i1 %1536, label %1537, label %1492, !llvm.loop !40

1537:                                             ; preds = %1492, %1479
  %1538 = phi i64 [ 0, %1479 ], [ %1534, %1492 ]
  %1539 = icmp eq i64 %1488, 0
  br i1 %1539, label %1550, label %1540

1540:                                             ; preds = %1537, %1540
  %1541 = phi i64 [ %1547, %1540 ], [ %1538, %1537 ]
  %1542 = phi i64 [ %1548, %1540 ], [ %1488, %1537 ]
  %1543 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1541
  %1544 = bitcast float* %1543 to <4 x float>*
  store <4 x float> %1482, <4 x float>* %1544, align 16
  %1545 = getelementptr inbounds float, float* %1543, i64 4
  %1546 = bitcast float* %1545 to <4 x float>*
  store <4 x float> %1484, <4 x float>* %1546, align 16
  %1547 = add i64 %1541, 8
  %1548 = add i64 %1542, -1
  %1549 = icmp eq i64 %1548, 0
  br i1 %1549, label %1550, label %1540, !llvm.loop !41

1550:                                             ; preds = %1540, %1537
  %1551 = icmp eq i64 %1480, %1477
  br i1 %1551, label %1868, label %1552

1552:                                             ; preds = %1550, %1476
  %1553 = phi i64 [ 0, %1476 ], [ %1480, %1550 ]
  br label %1554

1554:                                             ; preds = %1552, %1554
  %1555 = phi i64 [ %1557, %1554 ], [ %1553, %1552 ]
  %1556 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1555
  store float %1473, float* %1556, align 4
  %1557 = add nuw nsw i64 %1555, 1
  %1558 = icmp eq i64 %1557, %1477
  br i1 %1558, label %1868, label %1554, !llvm.loop !42

1559:                                             ; preds = %1380
  %1560 = uitofp i64 %1381 to float
  %1561 = fdiv float 1.000000e+00, %1560
  %1562 = add i32 %1113, -1
  %1563 = sext i32 %1562 to i64
  %1564 = shl nsw i64 %1563, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1068, i8 0, i64 %1564, i1 false) #6
  %1565 = add i32 %1114, -1
  %1566 = sext i32 %1565 to i64
  %1567 = shl nsw i64 %1566, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1069, i8 0, i64 %1567, i1 false) #6
  %1568 = icmp sgt i32 %1565, 0
  br i1 %1568, label %1569, label %1586

1569:                                             ; preds = %1559
  %1570 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 0
  %1571 = icmp sgt i32 %1562, 0
  %1572 = zext i32 %1565 to i64
  %1573 = zext i32 %1562 to i64
  %1574 = and i64 %1573, 1
  %1575 = icmp eq i32 %1562, 1
  %1576 = sub nsw i64 %1573, %1574
  %1577 = icmp eq i64 %1574, 0
  br label %1578

1578:                                             ; preds = %1712, %1569
  %1579 = phi i64 [ 0, %1569 ], [ %1716, %1712 ]
  %1580 = phi i32* [ %1570, %1569 ], [ %1720, %1712 ]
  %1581 = load i32, i32* %1580, align 4
  %1582 = uitofp i32 %1581 to float
  %1583 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1579
  %1584 = load float, float* %1583, align 4
  br i1 %1571, label %1585, label %1712

1585:                                             ; preds = %1578
  br i1 %1575, label %1694, label %1671

1586:                                             ; preds = %1712, %1559
  %1587 = phi i64 [ 0, %1559 ], [ %1719, %1712 ]
  %1588 = icmp sgt i32 %1562, 0
  br i1 %1588, label %1589, label %1792

1589:                                             ; preds = %1586
  %1590 = zext i32 %1562 to i64
  %1591 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1587
  %1592 = icmp ult i32 %1562, 8
  br i1 %1592, label %1593, label %1595

1593:                                             ; preds = %1669, %1589
  %1594 = phi i64 [ 0, %1589 ], [ %1596, %1669 ]
  br label %1722

1595:                                             ; preds = %1589
  %1596 = and i64 %1590, 4294967288
  %1597 = add nsw i64 %1596, -8
  %1598 = lshr exact i64 %1597, 3
  %1599 = add nuw nsw i64 %1598, 1
  %1600 = and i64 %1599, 1
  %1601 = icmp eq i64 %1597, 0
  br i1 %1601, label %1647, label %1602

1602:                                             ; preds = %1595
  %1603 = sub nuw nsw i64 %1599, %1600
  br label %1604

1604:                                             ; preds = %1604, %1602
  %1605 = phi i64 [ 0, %1602 ], [ %1644, %1604 ]
  %1606 = phi i64 [ %1603, %1602 ], [ %1645, %1604 ]
  %1607 = getelementptr inbounds i32, i32* %1591, i64 %1605
  %1608 = bitcast i32* %1607 to <4 x i32>*
  %1609 = load <4 x i32>, <4 x i32>* %1608, align 4
  %1610 = getelementptr inbounds i32, i32* %1607, i64 4
  %1611 = bitcast i32* %1610 to <4 x i32>*
  %1612 = load <4 x i32>, <4 x i32>* %1611, align 4
  %1613 = uitofp <4 x i32> %1609 to <4 x float>
  %1614 = uitofp <4 x i32> %1612 to <4 x float>
  %1615 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1605
  %1616 = bitcast float* %1615 to <4 x float>*
  %1617 = load <4 x float>, <4 x float>* %1616, align 16
  %1618 = getelementptr inbounds float, float* %1615, i64 4
  %1619 = bitcast float* %1618 to <4 x float>*
  %1620 = load <4 x float>, <4 x float>* %1619, align 16
  %1621 = fadd <4 x float> %1617, %1613
  %1622 = fadd <4 x float> %1620, %1614
  %1623 = bitcast float* %1615 to <4 x float>*
  store <4 x float> %1621, <4 x float>* %1623, align 16
  %1624 = bitcast float* %1618 to <4 x float>*
  store <4 x float> %1622, <4 x float>* %1624, align 16
  %1625 = or i64 %1605, 8
  %1626 = getelementptr inbounds i32, i32* %1591, i64 %1625
  %1627 = bitcast i32* %1626 to <4 x i32>*
  %1628 = load <4 x i32>, <4 x i32>* %1627, align 4
  %1629 = getelementptr inbounds i32, i32* %1626, i64 4
  %1630 = bitcast i32* %1629 to <4 x i32>*
  %1631 = load <4 x i32>, <4 x i32>* %1630, align 4
  %1632 = uitofp <4 x i32> %1628 to <4 x float>
  %1633 = uitofp <4 x i32> %1631 to <4 x float>
  %1634 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1625
  %1635 = bitcast float* %1634 to <4 x float>*
  %1636 = load <4 x float>, <4 x float>* %1635, align 16
  %1637 = getelementptr inbounds float, float* %1634, i64 4
  %1638 = bitcast float* %1637 to <4 x float>*
  %1639 = load <4 x float>, <4 x float>* %1638, align 16
  %1640 = fadd <4 x float> %1636, %1632
  %1641 = fadd <4 x float> %1639, %1633
  %1642 = bitcast float* %1634 to <4 x float>*
  store <4 x float> %1640, <4 x float>* %1642, align 16
  %1643 = bitcast float* %1637 to <4 x float>*
  store <4 x float> %1641, <4 x float>* %1643, align 16
  %1644 = add i64 %1605, 16
  %1645 = add i64 %1606, -2
  %1646 = icmp eq i64 %1645, 0
  br i1 %1646, label %1647, label %1604, !llvm.loop !43

1647:                                             ; preds = %1604, %1595
  %1648 = phi i64 [ 0, %1595 ], [ %1644, %1604 ]
  %1649 = icmp eq i64 %1600, 0
  br i1 %1649, label %1669, label %1650

1650:                                             ; preds = %1647
  %1651 = getelementptr inbounds i32, i32* %1591, i64 %1648
  %1652 = bitcast i32* %1651 to <4 x i32>*
  %1653 = load <4 x i32>, <4 x i32>* %1652, align 4
  %1654 = getelementptr inbounds i32, i32* %1651, i64 4
  %1655 = bitcast i32* %1654 to <4 x i32>*
  %1656 = load <4 x i32>, <4 x i32>* %1655, align 4
  %1657 = uitofp <4 x i32> %1653 to <4 x float>
  %1658 = uitofp <4 x i32> %1656 to <4 x float>
  %1659 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1648
  %1660 = bitcast float* %1659 to <4 x float>*
  %1661 = load <4 x float>, <4 x float>* %1660, align 16
  %1662 = getelementptr inbounds float, float* %1659, i64 4
  %1663 = bitcast float* %1662 to <4 x float>*
  %1664 = load <4 x float>, <4 x float>* %1663, align 16
  %1665 = fadd <4 x float> %1661, %1657
  %1666 = fadd <4 x float> %1664, %1658
  %1667 = bitcast float* %1659 to <4 x float>*
  store <4 x float> %1665, <4 x float>* %1667, align 16
  %1668 = bitcast float* %1662 to <4 x float>*
  store <4 x float> %1666, <4 x float>* %1668, align 16
  br label %1669

1669:                                             ; preds = %1647, %1650
  %1670 = icmp eq i64 %1596, %1590
  br i1 %1670, label %1732, label %1593

1671:                                             ; preds = %1585, %1671
  %1672 = phi float [ %1687, %1671 ], [ %1584, %1585 ]
  %1673 = phi i64 [ %1688, %1671 ], [ 0, %1585 ]
  %1674 = phi float [ %1691, %1671 ], [ %1582, %1585 ]
  %1675 = phi i64 [ %1692, %1671 ], [ %1576, %1585 ]
  %1676 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1673
  %1677 = load float, float* %1676, align 8
  %1678 = fadd float %1674, %1677
  store float %1678, float* %1676, align 8
  %1679 = fadd float %1672, %1674
  %1680 = or i64 %1673, 1
  %1681 = getelementptr inbounds i32, i32* %1580, i64 %1680
  %1682 = load i32, i32* %1681, align 4
  %1683 = uitofp i32 %1682 to float
  %1684 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1680
  %1685 = load float, float* %1684, align 4
  %1686 = fadd float %1685, %1683
  store float %1686, float* %1684, align 4
  %1687 = fadd float %1679, %1683
  %1688 = add nuw nsw i64 %1673, 2
  %1689 = getelementptr inbounds i32, i32* %1580, i64 %1688
  %1690 = load i32, i32* %1689, align 4
  %1691 = uitofp i32 %1690 to float
  %1692 = add i64 %1675, -2
  %1693 = icmp eq i64 %1692, 0
  br i1 %1693, label %1694, label %1671

1694:                                             ; preds = %1671, %1585
  %1695 = phi float [ undef, %1585 ], [ %1687, %1671 ]
  %1696 = phi float [ undef, %1585 ], [ %1691, %1671 ]
  %1697 = phi float [ %1584, %1585 ], [ %1687, %1671 ]
  %1698 = phi i64 [ 0, %1585 ], [ %1688, %1671 ]
  %1699 = phi float [ %1582, %1585 ], [ %1691, %1671 ]
  br i1 %1577, label %1709, label %1700

1700:                                             ; preds = %1694
  %1701 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1698
  %1702 = load float, float* %1701, align 4
  %1703 = fadd float %1699, %1702
  store float %1703, float* %1701, align 4
  %1704 = add nuw nsw i64 %1698, 1
  %1705 = getelementptr inbounds i32, i32* %1580, i64 %1704
  %1706 = load i32, i32* %1705, align 4
  %1707 = uitofp i32 %1706 to float
  %1708 = fadd float %1697, %1699
  br label %1709

1709:                                             ; preds = %1694, %1700
  %1710 = phi float [ %1695, %1694 ], [ %1708, %1700 ]
  %1711 = phi float [ %1696, %1694 ], [ %1707, %1700 ]
  store float %1710, float* %1583, align 4
  br label %1712

1712:                                             ; preds = %1709, %1578
  %1713 = phi float [ %1710, %1709 ], [ %1584, %1578 ]
  %1714 = phi float [ %1711, %1709 ], [ %1582, %1578 ]
  %1715 = fadd float %1713, %1714
  store float %1715, float* %1583, align 4
  %1716 = add nuw nsw i64 %1579, 1
  %1717 = trunc i64 %1716 to i32
  %1718 = mul nsw i32 %1113, %1717
  %1719 = sext i32 %1718 to i64
  %1720 = getelementptr inbounds [256 x i32], [256 x i32]* %14, i64 0, i64 %1719
  %1721 = icmp eq i64 %1716, %1572
  br i1 %1721, label %1586, label %1578

1722:                                             ; preds = %1593, %1722
  %1723 = phi i64 [ %1730, %1722 ], [ %1594, %1593 ]
  %1724 = getelementptr inbounds i32, i32* %1591, i64 %1723
  %1725 = load i32, i32* %1724, align 4
  %1726 = uitofp i32 %1725 to float
  %1727 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1723
  %1728 = load float, float* %1727, align 4
  %1729 = fadd float %1728, %1726
  store float %1729, float* %1727, align 4
  %1730 = add nuw nsw i64 %1723, 1
  %1731 = icmp eq i64 %1730, %1590
  br i1 %1731, label %1732, label %1722, !llvm.loop !44

1732:                                             ; preds = %1722, %1669
  %1733 = icmp ult i32 %1562, 8
  br i1 %1733, label %1734, label %1736

1734:                                             ; preds = %1790, %1732
  %1735 = phi i64 [ 0, %1732 ], [ %1737, %1790 ]
  br label %1854

1736:                                             ; preds = %1732
  %1737 = and i64 %1590, 4294967288
  %1738 = insertelement <4 x float> undef, float %1561, i32 0
  %1739 = shufflevector <4 x float> %1738, <4 x float> undef, <4 x i32> zeroinitializer
  %1740 = insertelement <4 x float> undef, float %1561, i32 0
  %1741 = shufflevector <4 x float> %1740, <4 x float> undef, <4 x i32> zeroinitializer
  %1742 = add nsw i64 %1737, -8
  %1743 = lshr exact i64 %1742, 3
  %1744 = add nuw nsw i64 %1743, 1
  %1745 = and i64 %1744, 1
  %1746 = icmp eq i64 %1742, 0
  br i1 %1746, label %1776, label %1747

1747:                                             ; preds = %1736
  %1748 = sub nuw nsw i64 %1744, %1745
  br label %1749

1749:                                             ; preds = %1749, %1747
  %1750 = phi i64 [ 0, %1747 ], [ %1773, %1749 ]
  %1751 = phi i64 [ %1748, %1747 ], [ %1774, %1749 ]
  %1752 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1750
  %1753 = bitcast float* %1752 to <4 x float>*
  %1754 = load <4 x float>, <4 x float>* %1753, align 16
  %1755 = getelementptr inbounds float, float* %1752, i64 4
  %1756 = bitcast float* %1755 to <4 x float>*
  %1757 = load <4 x float>, <4 x float>* %1756, align 16
  %1758 = fmul <4 x float> %1739, %1754
  %1759 = fmul <4 x float> %1741, %1757
  %1760 = bitcast float* %1752 to <4 x float>*
  store <4 x float> %1758, <4 x float>* %1760, align 16
  %1761 = bitcast float* %1755 to <4 x float>*
  store <4 x float> %1759, <4 x float>* %1761, align 16
  %1762 = or i64 %1750, 8
  %1763 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1762
  %1764 = bitcast float* %1763 to <4 x float>*
  %1765 = load <4 x float>, <4 x float>* %1764, align 16
  %1766 = getelementptr inbounds float, float* %1763, i64 4
  %1767 = bitcast float* %1766 to <4 x float>*
  %1768 = load <4 x float>, <4 x float>* %1767, align 16
  %1769 = fmul <4 x float> %1739, %1765
  %1770 = fmul <4 x float> %1741, %1768
  %1771 = bitcast float* %1763 to <4 x float>*
  store <4 x float> %1769, <4 x float>* %1771, align 16
  %1772 = bitcast float* %1766 to <4 x float>*
  store <4 x float> %1770, <4 x float>* %1772, align 16
  %1773 = add i64 %1750, 16
  %1774 = add i64 %1751, -2
  %1775 = icmp eq i64 %1774, 0
  br i1 %1775, label %1776, label %1749, !llvm.loop !45

1776:                                             ; preds = %1749, %1736
  %1777 = phi i64 [ 0, %1736 ], [ %1773, %1749 ]
  %1778 = icmp eq i64 %1745, 0
  br i1 %1778, label %1790, label %1779

1779:                                             ; preds = %1776
  %1780 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1777
  %1781 = bitcast float* %1780 to <4 x float>*
  %1782 = load <4 x float>, <4 x float>* %1781, align 16
  %1783 = getelementptr inbounds float, float* %1780, i64 4
  %1784 = bitcast float* %1783 to <4 x float>*
  %1785 = load <4 x float>, <4 x float>* %1784, align 16
  %1786 = fmul <4 x float> %1739, %1782
  %1787 = fmul <4 x float> %1741, %1785
  %1788 = bitcast float* %1780 to <4 x float>*
  store <4 x float> %1786, <4 x float>* %1788, align 16
  %1789 = bitcast float* %1783 to <4 x float>*
  store <4 x float> %1787, <4 x float>* %1789, align 16
  br label %1790

1790:                                             ; preds = %1776, %1779
  %1791 = icmp eq i64 %1737, %1590
  br i1 %1791, label %1792, label %1734

1792:                                             ; preds = %1854, %1790, %1586
  br i1 %1568, label %1793, label %1868

1793:                                             ; preds = %1792
  %1794 = zext i32 %1565 to i64
  %1795 = icmp ult i32 %1565, 8
  br i1 %1795, label %1796, label %1798

1796:                                             ; preds = %1852, %1793
  %1797 = phi i64 [ 0, %1793 ], [ %1799, %1852 ]
  br label %1861

1798:                                             ; preds = %1793
  %1799 = and i64 %1794, 4294967288
  %1800 = insertelement <4 x float> undef, float %1561, i32 0
  %1801 = shufflevector <4 x float> %1800, <4 x float> undef, <4 x i32> zeroinitializer
  %1802 = insertelement <4 x float> undef, float %1561, i32 0
  %1803 = shufflevector <4 x float> %1802, <4 x float> undef, <4 x i32> zeroinitializer
  %1804 = add nsw i64 %1799, -8
  %1805 = lshr exact i64 %1804, 3
  %1806 = add nuw nsw i64 %1805, 1
  %1807 = and i64 %1806, 1
  %1808 = icmp eq i64 %1804, 0
  br i1 %1808, label %1838, label %1809

1809:                                             ; preds = %1798
  %1810 = sub nuw nsw i64 %1806, %1807
  br label %1811

1811:                                             ; preds = %1811, %1809
  %1812 = phi i64 [ 0, %1809 ], [ %1835, %1811 ]
  %1813 = phi i64 [ %1810, %1809 ], [ %1836, %1811 ]
  %1814 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1812
  %1815 = bitcast float* %1814 to <4 x float>*
  %1816 = load <4 x float>, <4 x float>* %1815, align 16
  %1817 = getelementptr inbounds float, float* %1814, i64 4
  %1818 = bitcast float* %1817 to <4 x float>*
  %1819 = load <4 x float>, <4 x float>* %1818, align 16
  %1820 = fmul <4 x float> %1801, %1816
  %1821 = fmul <4 x float> %1803, %1819
  %1822 = bitcast float* %1814 to <4 x float>*
  store <4 x float> %1820, <4 x float>* %1822, align 16
  %1823 = bitcast float* %1817 to <4 x float>*
  store <4 x float> %1821, <4 x float>* %1823, align 16
  %1824 = or i64 %1812, 8
  %1825 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1824
  %1826 = bitcast float* %1825 to <4 x float>*
  %1827 = load <4 x float>, <4 x float>* %1826, align 16
  %1828 = getelementptr inbounds float, float* %1825, i64 4
  %1829 = bitcast float* %1828 to <4 x float>*
  %1830 = load <4 x float>, <4 x float>* %1829, align 16
  %1831 = fmul <4 x float> %1801, %1827
  %1832 = fmul <4 x float> %1803, %1830
  %1833 = bitcast float* %1825 to <4 x float>*
  store <4 x float> %1831, <4 x float>* %1833, align 16
  %1834 = bitcast float* %1828 to <4 x float>*
  store <4 x float> %1832, <4 x float>* %1834, align 16
  %1835 = add i64 %1812, 16
  %1836 = add i64 %1813, -2
  %1837 = icmp eq i64 %1836, 0
  br i1 %1837, label %1838, label %1811, !llvm.loop !46

1838:                                             ; preds = %1811, %1798
  %1839 = phi i64 [ 0, %1798 ], [ %1835, %1811 ]
  %1840 = icmp eq i64 %1807, 0
  br i1 %1840, label %1852, label %1841

1841:                                             ; preds = %1838
  %1842 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1839
  %1843 = bitcast float* %1842 to <4 x float>*
  %1844 = load <4 x float>, <4 x float>* %1843, align 16
  %1845 = getelementptr inbounds float, float* %1842, i64 4
  %1846 = bitcast float* %1845 to <4 x float>*
  %1847 = load <4 x float>, <4 x float>* %1846, align 16
  %1848 = fmul <4 x float> %1801, %1844
  %1849 = fmul <4 x float> %1803, %1847
  %1850 = bitcast float* %1842 to <4 x float>*
  store <4 x float> %1848, <4 x float>* %1850, align 16
  %1851 = bitcast float* %1845 to <4 x float>*
  store <4 x float> %1849, <4 x float>* %1851, align 16
  br label %1852

1852:                                             ; preds = %1838, %1841
  %1853 = icmp eq i64 %1799, %1794
  br i1 %1853, label %1868, label %1796

1854:                                             ; preds = %1734, %1854
  %1855 = phi i64 [ %1859, %1854 ], [ %1735, %1734 ]
  %1856 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1855
  %1857 = load float, float* %1856, align 4
  %1858 = fmul float %1561, %1857
  store float %1858, float* %1856, align 4
  %1859 = add nuw nsw i64 %1855, 1
  %1860 = icmp eq i64 %1859, %1590
  br i1 %1860, label %1792, label %1854, !llvm.loop !47

1861:                                             ; preds = %1796, %1861
  %1862 = phi i64 [ %1866, %1861 ], [ %1797, %1796 ]
  %1863 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1862
  %1864 = load float, float* %1863, align 4
  %1865 = fmul float %1561, %1864
  store float %1865, float* %1863, align 4
  %1866 = add nuw nsw i64 %1862, 1
  %1867 = icmp eq i64 %1866, %1794
  br i1 %1867, label %1868, label %1861, !llvm.loop !48

1868:                                             ; preds = %1861, %1554, %1852, %1550, %1792, %1471
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %1105) #6
  %1869 = load void (i16*, i32, i32, i32, float*, float*)*, void (i16*, i32, i32, i32, float*, float*)** @av1_get_horver_correlation_full, align 8
  %1870 = add nsw i32 %1087, -1
  %1871 = sext i32 %1870 to i64
  %1872 = getelementptr inbounds [16 x float], [16 x float]* %16, i64 0, i64 %1871
  %1873 = add nsw i32 %1092, -1
  %1874 = sext i32 %1873 to i64
  %1875 = getelementptr inbounds [16 x float], [16 x float]* %17, i64 0, i64 %1874
  call void %1869(i16* %1102, i32 %1093, i32 %1080, i32 %1082, float* %1872, float* %1875) #6
  %1876 = load void (float*, %struct.NN_CONFIG*, i32, float*)*, void (float*, %struct.NN_CONFIG*, i32, float*)** @av1_nn_predict, align 8
  call void %1876(float* nonnull %1103, %struct.NN_CONFIG* %1067, i32 1, float* nonnull %1071) #6
  %1877 = load void (float*, %struct.NN_CONFIG*, i32, float*)*, void (float*, %struct.NN_CONFIG*, i32, float*)** @av1_nn_predict, align 8
  call void %1877(float* nonnull %1104, %struct.NN_CONFIG* %1065, i32 1, float* nonnull %1073) #6
  %1878 = load <4 x float>, <4 x float>* %18, align 16
  %1879 = getelementptr inbounds [16 x float], [16 x float]* %20, i64 0, i64 0
  %1880 = load float, float* %1073, align 16
  %1881 = insertelement <4 x float> undef, float %1880, i32 0
  %1882 = shufflevector <4 x float> %1881, <4 x float> undef, <4 x i32> zeroinitializer
  %1883 = fmul <4 x float> %1878, %1882
  %1884 = bitcast [16 x float]* %20 to <4 x float>*
  store <4 x float> %1883, <4 x float>* %1884, align 16
  %1885 = getelementptr inbounds [16 x float], [16 x float]* %20, i64 0, i64 4
  %1886 = load float, float* %1074, align 4
  %1887 = insertelement <4 x float> undef, float %1886, i32 0
  %1888 = shufflevector <4 x float> %1887, <4 x float> undef, <4 x i32> zeroinitializer
  %1889 = fmul <4 x float> %1878, %1888
  %1890 = bitcast float* %1885 to <4 x float>*
  store <4 x float> %1889, <4 x float>* %1890, align 16
  %1891 = getelementptr inbounds [16 x float], [16 x float]* %20, i64 0, i64 8
  %1892 = load float, float* %1075, align 8
  %1893 = insertelement <4 x float> undef, float %1892, i32 0
  %1894 = shufflevector <4 x float> %1893, <4 x float> undef, <4 x i32> zeroinitializer
  %1895 = fmul <4 x float> %1878, %1894
  %1896 = bitcast float* %1891 to <4 x float>*
  store <4 x float> %1895, <4 x float>* %1896, align 16
  %1897 = getelementptr inbounds [16 x float], [16 x float]* %20, i64 0, i64 12
  %1898 = load float, float* %1076, align 4
  %1899 = insertelement <4 x float> undef, float %1898, i32 0
  %1900 = shufflevector <4 x float> %1899, <4 x float> undef, <4 x i32> zeroinitializer
  %1901 = fmul <4 x float> %1878, %1900
  %1902 = bitcast float* %1897 to <4 x float>*
  store <4 x float> %1901, <4 x float>* %1902, align 16
  %1903 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 0
  call void @av1_nn_softmax(float* nonnull %1879, float* nonnull %1903, i32 16) #6
  switch i8 %766, label %1916 [
    i8 5, label %1904
    i8 4, label %1910
  ]

1904:                                             ; preds = %1868
  %1905 = and i32 %1047, 255
  %1906 = zext i32 %1905 to i64
  %1907 = add nsw i64 %1906, -1
  %1908 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @get_adaptive_thresholds.prune_aggr_table, i64 0, i64 %1907, i64 0
  %1909 = load i32, i32* %1908, align 8
  br label %1916

1910:                                             ; preds = %1868
  %1911 = and i32 %1047, 255
  %1912 = zext i32 %1911 to i64
  %1913 = add nsw i64 %1912, -1
  %1914 = getelementptr inbounds [5 x [2 x i32]], [5 x [2 x i32]]* @get_adaptive_thresholds.prune_aggr_table, i64 0, i64 %1913, i64 1
  %1915 = load i32, i32* %1914, align 4
  br label %1916

1916:                                             ; preds = %1910, %1904, %1868
  %1917 = phi i32 [ %1909, %1904 ], [ %1915, %1910 ], [ 0, %1868 ]
  %1918 = getelementptr inbounds [19 x float*], [19 x float*]* @prune_2D_adaptive_thresholds, i64 0, i64 %420
  %1919 = load float*, float** %1918, align 8
  %1920 = sext i32 %1917 to i64
  %1921 = getelementptr inbounds float, float* %1919, i64 %1920
  %1922 = load float, float* %1921, align 4
  br label %1928

1923:                                             ; preds = %1928
  %1924 = zext i16 %1951 to i32
  %1925 = shl i32 1, %1944
  %1926 = and i32 %1925, %1924
  %1927 = icmp eq i32 %1926, 0
  br i1 %1927, label %1955, label %1965

1928:                                             ; preds = %1928, %1916
  %1929 = phi i64 [ 0, %1916 ], [ %1953, %1928 ]
  %1930 = phi float [ 0.000000e+00, %1916 ], [ %1952, %1928 ]
  %1931 = phi i16 [ 0, %1916 ], [ %1951, %1928 ]
  %1932 = phi float [ 0.000000e+00, %1916 ], [ %1945, %1928 ]
  %1933 = phi i32 [ 0, %1916 ], [ %1944, %1928 ]
  %1934 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %1929
  %1935 = load i32, i32* %1934, align 4
  %1936 = shl i32 1, %1935
  %1937 = and i32 %1936, %972
  %1938 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1929
  %1939 = load float, float* %1938, align 4
  %1940 = fcmp ogt float %1939, %1932
  %1941 = icmp ne i32 %1937, 0
  %1942 = and i1 %1940, %1941
  %1943 = trunc i64 %1929 to i32
  %1944 = select i1 %1942, i32 %1943, i32 %1933
  %1945 = select i1 %1942, float %1939, float %1932
  %1946 = fcmp oge float %1939, %1922
  %1947 = and i1 %1946, %1941
  %1948 = trunc i32 %1936 to i16
  %1949 = fadd float %1930, %1939
  %1950 = select i1 %1947, i16 %1948, i16 0
  %1951 = or i16 %1950, %1931
  %1952 = select i1 %1947, float %1949, float %1930
  %1953 = add nuw nsw i64 %1929, 1
  %1954 = icmp eq i64 %1953, 16
  br i1 %1954, label %1923, label %1928

1955:                                             ; preds = %1923
  %1956 = sext i32 %1944 to i64
  %1957 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %1956
  %1958 = load i32, i32* %1957, align 4
  %1959 = shl i32 1, %1958
  %1960 = trunc i32 %1959 to i16
  %1961 = or i16 %1951, %1960
  %1962 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1956
  %1963 = load float, float* %1962, align 4
  %1964 = fadd float %1952, %1963
  br label %1965

1965:                                             ; preds = %1955, %1923
  %1966 = phi i16 [ %1951, %1923 ], [ %1961, %1955 ]
  %1967 = phi float [ %1952, %1923 ], [ %1964, %1955 ]
  br label %1968

1968:                                             ; preds = %2053, %1965
  %1969 = phi i64 [ %2056, %2053 ], [ 0, %1965 ]
  %1970 = phi i64 [ %2054, %2053 ], [ 1, %1965 ]
  %1971 = add i64 %1969, 1
  %1972 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1970
  %1973 = load float, float* %1972, align 4
  br label %1974

1974:                                             ; preds = %2050, %1968
  %1975 = phi i64 [ 0, %1968 ], [ %2051, %2050 ]
  %1976 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1975
  %1977 = load float, float* %1976, align 4
  %1978 = fcmp olt float %1977, %1973
  br i1 %1978, label %1979, label %2050

1979:                                             ; preds = %1974
  %1980 = and i64 %1975, 4294967295
  %1981 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1980
  %1982 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %1970
  %1983 = load i32, i32* %1982, align 4
  %1984 = icmp ugt i64 %1970, %1980
  br i1 %1984, label %1985, label %2048

1985:                                             ; preds = %1979
  %1986 = shl i64 %1975, 32
  %1987 = ashr exact i64 %1986, 32
  %1988 = sub i64 %1971, %1975
  %1989 = sub i64 %1969, %1975
  %1990 = and i64 %1988, 3
  %1991 = icmp eq i64 %1990, 0
  br i1 %1991, label %2006, label %1992

1992:                                             ; preds = %1985, %1992
  %1993 = phi i64 [ %1995, %1992 ], [ %1970, %1985 ]
  %1994 = phi i64 [ %2004, %1992 ], [ %1990, %1985 ]
  %1995 = add nsw i64 %1993, -1
  %1996 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1995
  %1997 = bitcast float* %1996 to i32*
  %1998 = load i32, i32* %1997, align 4
  %1999 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %1993
  %2000 = bitcast float* %1999 to i32*
  store i32 %1998, i32* %2000, align 4
  %2001 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %1995
  %2002 = load i32, i32* %2001, align 4
  %2003 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %1993
  store i32 %2002, i32* %2003, align 4
  %2004 = add i64 %1994, -1
  %2005 = icmp eq i64 %2004, 0
  br i1 %2005, label %2006, label %1992, !llvm.loop !49

2006:                                             ; preds = %1992, %1985
  %2007 = phi i64 [ %1970, %1985 ], [ %1995, %1992 ]
  %2008 = icmp ult i64 %1989, 3
  br i1 %2008, label %2048, label %2009

2009:                                             ; preds = %2006, %2009
  %2010 = phi i64 [ %2038, %2009 ], [ %2007, %2006 ]
  %2011 = add nsw i64 %2010, -1
  %2012 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2011
  %2013 = bitcast float* %2012 to i32*
  %2014 = load i32, i32* %2013, align 4
  %2015 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2010
  %2016 = bitcast float* %2015 to i32*
  store i32 %2014, i32* %2016, align 4
  %2017 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2011
  %2018 = load i32, i32* %2017, align 4
  %2019 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2010
  store i32 %2018, i32* %2019, align 4
  %2020 = add nsw i64 %2010, -2
  %2021 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2020
  %2022 = bitcast float* %2021 to i32*
  %2023 = load i32, i32* %2022, align 4
  %2024 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2011
  %2025 = bitcast float* %2024 to i32*
  store i32 %2023, i32* %2025, align 4
  %2026 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2020
  %2027 = load i32, i32* %2026, align 4
  %2028 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2011
  store i32 %2027, i32* %2028, align 4
  %2029 = add nsw i64 %2010, -3
  %2030 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2029
  %2031 = bitcast float* %2030 to i32*
  %2032 = load i32, i32* %2031, align 4
  %2033 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2020
  %2034 = bitcast float* %2033 to i32*
  store i32 %2032, i32* %2034, align 4
  %2035 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2029
  %2036 = load i32, i32* %2035, align 4
  %2037 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2020
  store i32 %2036, i32* %2037, align 4
  %2038 = add nsw i64 %2010, -4
  %2039 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2038
  %2040 = bitcast float* %2039 to i32*
  %2041 = load i32, i32* %2040, align 4
  %2042 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2029
  %2043 = bitcast float* %2042 to i32*
  store i32 %2041, i32* %2043, align 4
  %2044 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2038
  %2045 = load i32, i32* %2044, align 4
  %2046 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2029
  store i32 %2045, i32* %2046, align 4
  %2047 = icmp sgt i64 %2038, %1987
  br i1 %2047, label %2009, label %2048

2048:                                             ; preds = %2006, %2009, %1979
  store float %1973, float* %1981, align 4
  %2049 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %1980
  store i32 %1983, i32* %2049, align 4
  br label %2053

2050:                                             ; preds = %1974
  %2051 = add nuw nsw i64 %1975, 1
  %2052 = icmp eq i64 %2051, %1970
  br i1 %2052, label %2053, label %1974

2053:                                             ; preds = %2050, %2048
  %2054 = add nuw nsw i64 %1970, 1
  %2055 = icmp eq i64 %2054, 16
  %2056 = add i64 %1969, 1
  br i1 %2055, label %2057, label %1968

2057:                                             ; preds = %2053
  %2058 = icmp ugt i8 %1055, 3
  br i1 %2058, label %2059, label %2194

2059:                                             ; preds = %2057
  %2060 = fdiv float 1.000000e+02, %1967
  %2061 = zext i16 %1966 to i32
  br label %2062

2062:                                             ; preds = %2083, %2059
  %2063 = phi i64 [ 0, %2059 ], [ %2087, %2083 ]
  %2064 = phi i32 [ 0, %2059 ], [ %2086, %2083 ]
  %2065 = phi i32 [ 0, %2059 ], [ %2088, %2083 ]
  %2066 = phi float [ 0.000000e+00, %2059 ], [ %2085, %2083 ]
  %2067 = phi float [ 0.000000e+00, %2059 ], [ %2084, %2083 ]
  %2068 = fcmp ogt float %2066, 3.000000e+01
  %2069 = icmp sgt i32 %2064, 1
  %2070 = and i1 %2069, %2068
  br i1 %2070, label %2090, label %2071

2071:                                             ; preds = %2062
  %2072 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2063
  %2073 = load i32, i32* %2072, align 4
  %2074 = shl i32 1, %2073
  %2075 = and i32 %2074, %2061
  %2076 = icmp eq i32 %2075, 0
  br i1 %2076, label %2083, label %2077

2077:                                             ; preds = %2071
  %2078 = getelementptr inbounds [16 x float], [16 x float]* %21, i64 0, i64 %2063
  %2079 = load float, float* %2078, align 4
  %2080 = fadd float %2067, %2079
  %2081 = fmul float %2060, %2080
  %2082 = add nsw i32 %2064, 1
  br label %2083

2083:                                             ; preds = %2077, %2071
  %2084 = phi float [ %2080, %2077 ], [ %2067, %2071 ]
  %2085 = phi float [ %2081, %2077 ], [ %2066, %2071 ]
  %2086 = phi i32 [ %2082, %2077 ], [ %2064, %2071 ]
  %2087 = add nuw nsw i64 %2063, 1
  %2088 = add nuw nsw i32 %2065, 1
  %2089 = icmp eq i64 %2087, 16
  br i1 %2089, label %2092, label %2062

2090:                                             ; preds = %2062
  %2091 = trunc i64 %2063 to i32
  br label %2092

2092:                                             ; preds = %2083, %2090
  %2093 = phi i32 [ %2091, %2090 ], [ %2088, %2083 ]
  %2094 = icmp ult i32 %2093, 16
  br i1 %2094, label %2095, label %2194

2095:                                             ; preds = %2092
  %2096 = zext i32 %2093 to i64
  %2097 = sub nsw i64 16, %2096
  %2098 = icmp ult i64 %2097, 4
  br i1 %2098, label %2180, label %2099

2099:                                             ; preds = %2095
  %2100 = and i64 %2097, -4
  %2101 = add nsw i64 %2100, %2096
  %2102 = insertelement <2 x i16> <i16 undef, i16 -1>, i16 %1966, i32 0
  %2103 = add nsw i64 %2100, -4
  %2104 = lshr exact i64 %2103, 2
  %2105 = add nuw nsw i64 %2104, 1
  %2106 = and i64 %2105, 1
  %2107 = icmp eq i64 %2103, 0
  br i1 %2107, label %2149, label %2108

2108:                                             ; preds = %2099
  %2109 = sub nuw nsw i64 %2105, %2106
  br label %2110

2110:                                             ; preds = %2110, %2108
  %2111 = phi i64 [ 0, %2108 ], [ %2146, %2110 ]
  %2112 = phi <2 x i16> [ %2102, %2108 ], [ %2144, %2110 ]
  %2113 = phi <2 x i16> [ <i16 -1, i16 -1>, %2108 ], [ %2145, %2110 ]
  %2114 = phi i64 [ %2109, %2108 ], [ %2147, %2110 ]
  %2115 = add i64 %2111, %2096
  %2116 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2115
  %2117 = bitcast i32* %2116 to <2 x i32>*
  %2118 = load <2 x i32>, <2 x i32>* %2117, align 4
  %2119 = getelementptr inbounds i32, i32* %2116, i64 2
  %2120 = bitcast i32* %2119 to <2 x i32>*
  %2121 = load <2 x i32>, <2 x i32>* %2120, align 4
  %2122 = shl <2 x i32> <i32 1, i32 1>, %2118
  %2123 = shl <2 x i32> <i32 1, i32 1>, %2121
  %2124 = trunc <2 x i32> %2122 to <2 x i16>
  %2125 = trunc <2 x i32> %2123 to <2 x i16>
  %2126 = xor <2 x i16> %2124, <i16 -1, i16 -1>
  %2127 = xor <2 x i16> %2125, <i16 -1, i16 -1>
  %2128 = and <2 x i16> %2112, %2126
  %2129 = and <2 x i16> %2113, %2127
  %2130 = or i64 %2111, 4
  %2131 = add i64 %2130, %2096
  %2132 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2131
  %2133 = bitcast i32* %2132 to <2 x i32>*
  %2134 = load <2 x i32>, <2 x i32>* %2133, align 4
  %2135 = getelementptr inbounds i32, i32* %2132, i64 2
  %2136 = bitcast i32* %2135 to <2 x i32>*
  %2137 = load <2 x i32>, <2 x i32>* %2136, align 4
  %2138 = shl <2 x i32> <i32 1, i32 1>, %2134
  %2139 = shl <2 x i32> <i32 1, i32 1>, %2137
  %2140 = trunc <2 x i32> %2138 to <2 x i16>
  %2141 = trunc <2 x i32> %2139 to <2 x i16>
  %2142 = xor <2 x i16> %2140, <i16 -1, i16 -1>
  %2143 = xor <2 x i16> %2141, <i16 -1, i16 -1>
  %2144 = and <2 x i16> %2128, %2142
  %2145 = and <2 x i16> %2129, %2143
  %2146 = add i64 %2111, 8
  %2147 = add i64 %2114, -2
  %2148 = icmp eq i64 %2147, 0
  br i1 %2148, label %2149, label %2110, !llvm.loop !50

2149:                                             ; preds = %2110, %2099
  %2150 = phi <2 x i16> [ undef, %2099 ], [ %2144, %2110 ]
  %2151 = phi <2 x i16> [ undef, %2099 ], [ %2145, %2110 ]
  %2152 = phi i64 [ 0, %2099 ], [ %2146, %2110 ]
  %2153 = phi <2 x i16> [ %2102, %2099 ], [ %2144, %2110 ]
  %2154 = phi <2 x i16> [ <i16 -1, i16 -1>, %2099 ], [ %2145, %2110 ]
  %2155 = icmp eq i64 %2106, 0
  br i1 %2155, label %2172, label %2156

2156:                                             ; preds = %2149
  %2157 = add i64 %2152, %2096
  %2158 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2157
  %2159 = getelementptr inbounds i32, i32* %2158, i64 2
  %2160 = bitcast i32* %2159 to <2 x i32>*
  %2161 = load <2 x i32>, <2 x i32>* %2160, align 4
  %2162 = shl <2 x i32> <i32 1, i32 1>, %2161
  %2163 = trunc <2 x i32> %2162 to <2 x i16>
  %2164 = xor <2 x i16> %2163, <i16 -1, i16 -1>
  %2165 = and <2 x i16> %2154, %2164
  %2166 = bitcast i32* %2158 to <2 x i32>*
  %2167 = load <2 x i32>, <2 x i32>* %2166, align 4
  %2168 = shl <2 x i32> <i32 1, i32 1>, %2167
  %2169 = trunc <2 x i32> %2168 to <2 x i16>
  %2170 = xor <2 x i16> %2169, <i16 -1, i16 -1>
  %2171 = and <2 x i16> %2153, %2170
  br label %2172

2172:                                             ; preds = %2149, %2156
  %2173 = phi <2 x i16> [ %2150, %2149 ], [ %2171, %2156 ]
  %2174 = phi <2 x i16> [ %2151, %2149 ], [ %2165, %2156 ]
  %2175 = and <2 x i16> %2174, %2173
  %2176 = shufflevector <2 x i16> %2175, <2 x i16> undef, <2 x i32> <i32 1, i32 undef>
  %2177 = and <2 x i16> %2175, %2176
  %2178 = extractelement <2 x i16> %2177, i32 0
  %2179 = icmp eq i64 %2097, %2100
  br i1 %2179, label %2194, label %2180

2180:                                             ; preds = %2172, %2095
  %2181 = phi i64 [ %2096, %2095 ], [ %2101, %2172 ]
  %2182 = phi i16 [ %1966, %2095 ], [ %2178, %2172 ]
  br label %2183

2183:                                             ; preds = %2180, %2183
  %2184 = phi i64 [ %2192, %2183 ], [ %2181, %2180 ]
  %2185 = phi i16 [ %2191, %2183 ], [ %2182, %2180 ]
  %2186 = getelementptr inbounds [16 x i32], [16 x i32]* %15, i64 0, i64 %2184
  %2187 = load i32, i32* %2186, align 4
  %2188 = shl i32 1, %2187
  %2189 = trunc i32 %2188 to i16
  %2190 = xor i16 %2189, -1
  %2191 = and i16 %2185, %2190
  %2192 = add nuw nsw i64 %2184, 1
  %2193 = icmp eq i64 %2192, 16
  br i1 %2193, label %2194, label %2183, !llvm.loop !51

2194:                                             ; preds = %2183, %2172, %2092, %2057
  %2195 = phi i16 [ %1966, %2057 ], [ %1966, %2092 ], [ %2178, %2172 ], [ %2191, %2183 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %414, i8* nonnull align 16 %1056, i64 64, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1078) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1077) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1072) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1070) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1069) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1068) #6
  br label %2196

2196:                                             ; preds = %2194, %1059, %1054
  %2197 = phi i16 [ %971, %1059 ], [ %2195, %2194 ], [ %971, %1054 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1056) #6
  br label %2198

2198:                                             ; preds = %2196, %1050, %1045, %1036, %1032, %915, %906
  %2199 = phi i8 [ %908, %906 ], [ %842, %2196 ], [ %842, %1050 ], [ %842, %1045 ], [ %842, %915 ], [ %842, %1036 ], [ %842, %1032 ]
  %2200 = phi i16 [ %912, %906 ], [ %2197, %2196 ], [ %971, %1050 ], [ %971, %1045 ], [ %916, %915 ], [ %1044, %1036 ], [ %1035, %1032 ]
  %2201 = icmp eq i16 %2200, 0
  br i1 %2201, label %2202, label %2207

2202:                                             ; preds = %2198
  %2203 = select i1 %767, i8 %843, i8 0
  %2204 = zext i8 %2203 to i32
  %2205 = shl i32 1, %2204
  %2206 = trunc i32 %2205 to i16
  br label %2207

2207:                                             ; preds = %2198, %2202
  %2208 = phi i16 [ %2206, %2202 ], [ %2200, %2198 ]
  %2209 = phi i8 [ %2203, %2202 ], [ %2199, %2198 ]
  %2210 = zext i16 %2208 to i32
  br label %2211

2211:                                             ; preds = %672, %2207
  %2212 = phi i1 [ true, %2207 ], [ false, %672 ]
  %2213 = phi i64 [ %676, %2207 ], [ %524, %672 ]
  %2214 = phi i32 [ %677, %2207 ], [ %523, %672 ]
  %2215 = phi i64 [ %678, %2207 ], [ %495, %672 ]
  %2216 = phi i8 [ %2209, %2207 ], [ 16, %672 ]
  %2217 = phi i32 [ %2210, %2207 ], [ 1, %672 ]
  %2218 = shl nsw i64 %2215, 4
  %2219 = zext i32 %2214 to i64
  %2220 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 0
  %2221 = load i32, i32* %2220, align 4
  %2222 = zext i32 %2221 to i64
  %2223 = sext i16 %419 to i64
  %2224 = mul nsw i64 %2223, %2223
  %2225 = mul nsw i64 %2224, %2222
  %2226 = icmp uge i64 %2225, %2219
  %2227 = xor i1 %2226, true
  %2228 = zext i1 %2227 to i32
  %2229 = or i32 %74, %2228
  %2230 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 6
  %2231 = load i32, i32* %2230, align 4
  %2232 = icmp eq i32 %2231, 0
  br i1 %2232, label %2254, label %2233

2233:                                             ; preds = %2211
  %2234 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 4
  %2235 = load i32, i32* %2234, align 4
  %2236 = icmp ult i32 %2214, %2235
  br i1 %2236, label %2254, label %2237

2237:                                             ; preds = %2233
  %2238 = lshr i64 124911, %420
  %2239 = and i64 %2238, 1
  %2240 = icmp eq i64 %2239, 0
  br i1 %2240, label %2254, label %2241

2241:                                             ; preds = %2237
  %2242 = zext i1 %2212 to i32
  %2243 = icmp eq i32 %2231, 1
  %2244 = and i1 %2212, %2243
  br i1 %2244, label %2245, label %2254

2245:                                             ; preds = %2241
  %2246 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  %2247 = load i8, i8* %2246, align 4
  %2248 = icmp eq i8 %2247, 1
  br i1 %2248, label %2254, label %2249

2249:                                             ; preds = %2245
  %2250 = icmp ugt i8 %2216, 15
  %2251 = icmp ne i32 %2217, 1
  %2252 = and i1 %2251, %2250
  %2253 = zext i1 %2252 to i32
  br label %2254

2254:                                             ; preds = %2245, %2233, %2237, %2211, %2241, %2249
  %2255 = phi i32 [ %2242, %2245 ], [ %2253, %2249 ], [ %2242, %2241 ], [ 0, %2211 ], [ 0, %2237 ], [ 0, %2233 ]
  %2256 = phi i32 [ 0, %2245 ], [ %2253, %2249 ], [ 0, %2241 ], [ 0, %2211 ], [ 0, %2237 ], [ 0, %2233 ]
  %2257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 4
  %2258 = load i16*, i16** %2257, align 8
  %2259 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %32, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2259) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %2259, i8 -86, i64 24, i1 false)
  %2260 = bitcast %struct.QUANT_PARAM* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %2260) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2260, i8 -86, i64 40, i1 false)
  %2261 = bitcast [16 x i32]* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %2261) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2261, i8 0, i64 64, i1 false)
  call void @av1_setup_xform(%struct.AV1Common* %35, %struct.macroblock* %1, i8 zeroext %7, i8 zeroext 0, %struct.txfm_param* nonnull %32) #6
  %2262 = icmp ne i32 %2229, 0
  %2263 = xor i1 %2262, true
  %2264 = zext i1 %2263 to i32
  %2265 = zext i1 %2262 to i32
  %2266 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 4
  %2267 = load i32, i32* %2266, align 4
  call void @av1_setup_quant(i8 zeroext %7, i32 %2264, i32 %2265, i32 %2267, %struct.QUANT_PARAM* nonnull %33) #6
  %2268 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  %2269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %2270 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i32 3, i64 1
  %2271 = shl i32 %3, 4
  %2272 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 3
  %2273 = sext i32 %2271 to i64
  %2274 = getelementptr inbounds [20 x i32], [20 x i32]* @tx_size_2d, i64 0, i64 %420
  %2275 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 40
  %2276 = getelementptr inbounds [19 x i32], [19 x i32]* @sqrt_tx_pixels_2d, i64 0, i64 %420
  %2277 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %33, i64 0, i32 5
  %2278 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %2279 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %2280 = sext i32 %3 to i64
  %2281 = getelementptr inbounds i16, i16* %2258, i64 %2280
  %2282 = icmp eq i32 %2255, 0
  %2283 = bitcast i64* %26 to i8*
  %2284 = icmp eq i8 %7, 4
  %2285 = bitcast i64* %28 to i8*
  %2286 = bitcast %struct.RD_STATS* %12 to i8*
  %2287 = getelementptr inbounds i8, i8* %2286, i64 4
  %2288 = bitcast i8* %2287 to i32*
  %2289 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %42, i32 5
  %2290 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 7
  %2291 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 9, i32 5, i32 6
  br label %2292

2292:                                             ; preds = %2505, %2254
  %2293 = phi i64 [ 0, %2254 ], [ %2511, %2505 ]
  %2294 = phi i8 [ 0, %2254 ], [ %2510, %2505 ]
  %2295 = phi i32* [ %46, %2254 ], [ %2509, %2505 ]
  %2296 = phi i8 [ 0, %2254 ], [ %2508, %2505 ]
  %2297 = phi i16 [ 0, %2254 ], [ %2507, %2505 ]
  %2298 = phi i64 [ 9223372036854775807, %2254 ], [ %2506, %2505 ]
  %2299 = getelementptr inbounds [16 x i32], [16 x i32]* %31, i64 0, i64 %2293
  %2300 = load i32, i32* %2299, align 4
  %2301 = trunc i32 %2300 to i8
  %2302 = and i32 %2300, 255
  %2303 = shl i32 1, %2302
  %2304 = and i32 %2303, %2217
  %2305 = icmp eq i32 %2304, 0
  br i1 %2305, label %2505, label %2306

2306:                                             ; preds = %2292
  store i8 %2301, i8* %2259, align 4
  %2307 = load i16, i16* %75, align 1
  %2308 = and i16 %2307, 7
  %2309 = zext i16 %2308 to i32
  %2310 = call zeroext i1 @av1_use_qmatrix(%struct.CommonQuantParams* %2268, %struct.macroblockd* %36, i32 %2309) #6
  br i1 %2310, label %2311, label %2312

2311:                                             ; preds = %2306
  call void @av1_setup_qmatrix(%struct.CommonQuantParams* %2268, %struct.macroblockd* %36, i32 %2, i8 zeroext %7, i8 zeroext %2301, %struct.QUANT_PARAM* nonnull %33) #6
  br label %2312

2312:                                             ; preds = %2311, %2306
  br i1 %47, label %2313, label %2316

2313:                                             ; preds = %2312
  %2314 = load i8*, i8** %2269, align 8
  %2315 = getelementptr inbounds i8, i8* %2314, i64 %55
  store i8 %2301, i8* %2315, align 1
  br label %2316

2316:                                             ; preds = %2313, %2312
  br i1 %2212, label %2317, label %2318

2317:                                             ; preds = %2316
  call void @av1_xform(%struct.macroblock* %1, i32 %2, i32 %3, i32 %4, i32 %5, i8 zeroext %6, %struct.txfm_param* nonnull %32) #6
  br label %2319

2318:                                             ; preds = %2316
  call void @av1_xform_dc_only(%struct.macroblock* %1, i32 %2, i32 %3, %struct.txfm_param* nonnull %32, i64 %2213) #6
  br label %2319

2319:                                             ; preds = %2318, %2317
  %2320 = load i32, i32* %2266, align 4
  %2321 = load i32, i32* %2270, align 4
  %2322 = icmp eq i32 %2321, -1
  %2323 = or i1 %2262, %2322
  br i1 %2323, label %2362, label %2324

2324:                                             ; preds = %2319
  %2325 = load i32*, i32** %2272, align 8
  %2326 = getelementptr inbounds i32, i32* %2325, i64 %2273
  switch i8 %7, label %2328 [
    i8 4, label %2330
    i8 12, label %2330
    i8 11, label %2330
    i8 17, label %2327
    i8 18, label %2327
  ]

2327:                                             ; preds = %2324, %2324
  br label %2330

2328:                                             ; preds = %2324
  %2329 = load i32, i32* %2274, align 4
  br label %2330

2330:                                             ; preds = %2328, %2327, %2324, %2324, %2324
  %2331 = phi i32 [ 512, %2327 ], [ %2329, %2328 ], [ 1024, %2324 ], [ 1024, %2324 ], [ 1024, %2324 ]
  %2332 = call i32 @av1_get_tx_scale(i8 zeroext %7) #6
  %2333 = sub nsw i32 1, %2332
  br i1 %2212, label %2339, label %2334

2334:                                             ; preds = %2330
  %2335 = load i32, i32* %2326, align 4
  %2336 = icmp slt i32 %2335, 0
  %2337 = sub nsw i32 0, %2335
  %2338 = select i1 %2336, i32 %2337, i32 %2335
  br label %2342

2339:                                             ; preds = %2330
  %2340 = load i32 (i32*, i32)*, i32 (i32*, i32)** @aom_satd, align 8
  %2341 = call i32 %2340(i32* %2326, i32 %2331) #6
  br label %2342

2342:                                             ; preds = %2339, %2334
  %2343 = phi i32 [ %2338, %2334 ], [ %2341, %2339 ]
  %2344 = icmp sgt i32 %2332, 1
  %2345 = add i32 %2332, -1
  %2346 = shl i32 %2343, %2345
  %2347 = ashr i32 %2343, %2333
  %2348 = select i1 %2344, i32 %2346, i32 %2347
  %2349 = load i32, i32* %2275, align 16
  %2350 = add nsw i32 %2349, -8
  %2351 = ashr i32 %2348, %2350
  %2352 = sext i32 %2351 to i64
  %2353 = zext i32 %2321 to i64
  %2354 = mul nsw i64 %2353, %2223
  %2355 = load i32, i32* %2276, align 4
  %2356 = sext i32 %2355 to i64
  %2357 = mul i64 %2354, %2356
  %2358 = icmp ult i64 %2357, %2352
  %2359 = zext i1 %2358 to i32
  %2360 = xor i1 %2358, true
  %2361 = zext i1 %2360 to i32
  call void @av1_setup_quant(i8 zeroext %7, i32 %2361, i32 %2359, i32 %2320, %struct.QUANT_PARAM* nonnull %33) #6
  br label %2362

2362:                                             ; preds = %2319, %2342
  %2363 = phi i32 [ %2359, %2342 ], [ %2229, %2319 ]
  %2364 = zext i32 %2302 to i64
  %2365 = getelementptr inbounds [16 x i32], [16 x i32]* %34, i64 0, i64 %2364
  store i32 %2363, i32* %2365, align 4
  call void @av1_quant(%struct.macroblock* %1, i32 %2, i32 %3, %struct.txfm_param* nonnull %32, %struct.QUANT_PARAM* nonnull %33) #6
  %2366 = load i32, i32* %2277, align 4
  %2367 = icmp eq i32 %2366, 0
  br i1 %2367, label %2371, label %2368

2368:                                             ; preds = %2362
  %2369 = call i32 @av1_optimize_b(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %7, i8 zeroext %2301, %struct.txb_ctx* %8, i32* nonnull %29) #6
  %2370 = load i32, i32* %29, align 4
  br label %2375

2371:                                             ; preds = %2362
  %2372 = load i8, i8* %2278, align 1, !range !12
  %2373 = zext i8 %2372 to i32
  %2374 = call i32 @av1_cost_coeffs_txb(%struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %7, i8 zeroext %2301, %struct.txb_ctx* %8, i32 %2373) #6
  store i32 %2374, i32* %29, align 4
  br label %2375

2375:                                             ; preds = %2371, %2368
  %2376 = phi i32 [ %2374, %2371 ], [ %2370, %2368 ]
  %2377 = sext i32 %2376 to i64
  %2378 = load i32, i32* %2279, align 8
  %2379 = sext i32 %2378 to i64
  %2380 = mul nsw i64 %2379, %2377
  %2381 = add nsw i64 %2380, 256
  %2382 = ashr i64 %2381, 9
  %2383 = icmp sgt i64 %2382, %2298
  br i1 %2383, label %2505, label %2384

2384:                                             ; preds = %2375
  %2385 = load i16, i16* %2281, align 2
  %2386 = icmp eq i16 %2385, 0
  br i1 %2386, label %2466, label %2387

2387:                                             ; preds = %2384
  br i1 %2212, label %2390, label %2388

2388:                                             ; preds = %2387
  %2389 = call fastcc i64 @dist_block_px_domain(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i8 zeroext %6, i32 %3, i32 %4, i32 %5, i8 zeroext %7)
  br label %2466

2390:                                             ; preds = %2387
  br i1 %2282, label %2418, label %2391

2391:                                             ; preds = %2390
  switch i8 %7, label %2393 [
    i8 4, label %2396
    i8 12, label %2396
    i8 11, label %2396
    i8 17, label %2392
    i8 18, label %2392
  ]

2392:                                             ; preds = %2391, %2391
  br label %2396

2393:                                             ; preds = %2391
  %2394 = load i32, i32* %2274, align 4
  %2395 = sext i32 %2394 to i64
  br label %2396

2396:                                             ; preds = %2391, %2391, %2391, %2392, %2393
  %2397 = phi i64 [ 512, %2392 ], [ %2395, %2393 ], [ 1024, %2391 ], [ 1024, %2391 ], [ 1024, %2391 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2283) #6
  store i64 -6148914691236517206, i64* %26, align 8
  %2398 = call i32 @av1_get_tx_scale(i8 zeroext %7) #6
  %2399 = shl i32 %2398, 1
  %2400 = sub i32 2, %2399
  %2401 = load i32*, i32** %2272, align 8
  %2402 = getelementptr inbounds i32, i32* %2401, i64 %2273
  %2403 = load i32*, i32** %43, align 8
  %2404 = getelementptr inbounds i32, i32* %2403, i64 %2273
  %2405 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @av1_block_error, align 8
  %2406 = call i64 %2405(i32* %2402, i32* %2404, i64 %2397, i64* nonnull %26) #6
  %2407 = icmp slt i32 %2400, 0
  %2408 = add i32 %2399, -2
  %2409 = zext i32 %2408 to i64
  %2410 = shl i64 %2406, %2409
  %2411 = zext i32 %2400 to i64
  %2412 = ashr i64 %2406, %2411
  %2413 = select i1 %2407, i64 %2410, i64 %2412
  %2414 = load i64, i64* %26, align 8
  %2415 = shl i64 %2414, %2409
  %2416 = ashr i64 %2414, %2411
  %2417 = select i1 %2407, i64 %2415, i64 %2416
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2283) #6
  br label %2466

2418:                                             ; preds = %2390
  %2419 = load i32, i32* %2274, align 4
  %2420 = sext i32 %2419 to i64
  %2421 = shl nsw i64 %2420, 14
  %2422 = icmp sge i64 %2218, %2421
  %2423 = or i1 %2284, %2422
  br i1 %2423, label %2424, label %2450

2424:                                             ; preds = %2418
  switch i8 %7, label %2426 [
    i8 4, label %2427
    i8 12, label %2427
    i8 11, label %2427
    i8 17, label %2425
    i8 18, label %2425
  ]

2425:                                             ; preds = %2424, %2424
  br label %2427

2426:                                             ; preds = %2424
  br label %2427

2427:                                             ; preds = %2424, %2424, %2424, %2425, %2426
  %2428 = phi i64 [ 512, %2425 ], [ %2420, %2426 ], [ 1024, %2424 ], [ 1024, %2424 ], [ 1024, %2424 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2285) #6
  store i64 -6148914691236517206, i64* %28, align 8
  %2429 = call i32 @av1_get_tx_scale(i8 zeroext %7) #6
  %2430 = shl i32 %2429, 1
  %2431 = sub i32 2, %2430
  %2432 = load i32*, i32** %2272, align 8
  %2433 = getelementptr inbounds i32, i32* %2432, i64 %2273
  %2434 = load i32*, i32** %43, align 8
  %2435 = getelementptr inbounds i32, i32* %2434, i64 %2273
  %2436 = load i64 (i32*, i32*, i64, i64*)*, i64 (i32*, i32*, i64, i64*)** @av1_block_error, align 8
  %2437 = call i64 %2436(i32* %2433, i32* %2435, i64 %2428, i64* nonnull %28) #6
  %2438 = icmp slt i32 %2431, 0
  %2439 = add i32 %2430, -2
  %2440 = zext i32 %2439 to i64
  %2441 = shl i64 %2437, %2440
  %2442 = zext i32 %2431 to i64
  %2443 = ashr i64 %2437, %2442
  %2444 = select i1 %2438, i64 %2441, i64 %2443
  %2445 = load i64, i64* %28, align 8
  %2446 = shl i64 %2445, %2440
  %2447 = ashr i64 %2445, %2442
  %2448 = select i1 %2438, i64 %2446, i64 %2447
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2285) #6
  %2449 = sub nsw i64 %2218, %2448
  br label %2450

2450:                                             ; preds = %2418, %2427
  %2451 = phi i64 [ %2444, %2427 ], [ 9223372036854775807, %2418 ]
  %2452 = phi i64 [ %2448, %2427 ], [ 9223372036854775807, %2418 ]
  %2453 = phi i64 [ %2449, %2427 ], [ 9223372036854775807, %2418 ]
  %2454 = and i1 %2284, %2422
  %2455 = xor i1 %2454, true
  %2456 = shl nsw i64 %2453, 1
  %2457 = icmp slt i64 %2456, %2452
  %2458 = or i1 %2457, %2455
  br i1 %2458, label %2459, label %2464

2459:                                             ; preds = %2450
  %2460 = call fastcc i64 @dist_block_px_domain(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i8 zeroext %6, i32 %3, i32 %4, i32 %5, i8 zeroext %7)
  %2461 = icmp slt i64 %2460, %2451
  %2462 = and i1 %2422, %2461
  %2463 = select i1 %2462, i64 %2451, i64 %2460
  br label %2466

2464:                                             ; preds = %2450
  %2465 = add nsw i64 %2453, %2451
  br label %2466

2466:                                             ; preds = %2464, %2459, %2384, %2388, %2396
  %2467 = phi i64 [ %2413, %2396 ], [ %2389, %2388 ], [ %2218, %2384 ], [ %2463, %2459 ], [ %2465, %2464 ]
  %2468 = phi i64 [ %2417, %2396 ], [ %2218, %2388 ], [ %2218, %2384 ], [ %2218, %2459 ], [ %2218, %2464 ]
  %2469 = load i32, i32* %29, align 4
  %2470 = sext i32 %2469 to i64
  %2471 = load i32, i32* %2279, align 8
  %2472 = sext i32 %2471 to i64
  %2473 = mul nsw i64 %2472, %2470
  %2474 = add nsw i64 %2473, 256
  %2475 = ashr i64 %2474, 9
  %2476 = shl nsw i64 %2467, 7
  %2477 = add nsw i64 %2475, %2476
  %2478 = icmp slt i64 %2477, %2298
  br i1 %2478, label %2479, label %2487

2479:                                             ; preds = %2466
  store i32 %2469, i32* %56, align 8
  store i32 -1431655766, i32* %2288, align 4
  store i64 %2467, i64* %57, align 8
  store i64 9223372036854775807, i64* %58, align 8
  store i64 %2468, i64* %60, align 8
  store i32 0, i32* %61, align 8
  store i32 0, i32* %62, align 4
  %2480 = load i8*, i8** %2289, align 8
  %2481 = getelementptr inbounds i8, i8* %2480, i64 %2280
  %2482 = load i8, i8* %2481, align 1
  %2483 = load i16*, i16** %2257, align 8
  %2484 = getelementptr inbounds i16, i16* %2483, i64 %2280
  %2485 = load i16, i16* %2484, align 2
  %2486 = load i32*, i32** %43, align 8
  store i32* %2295, i32** %43, align 8
  br label %2487

2487:                                             ; preds = %2479, %2466
  %2488 = phi i64 [ %2477, %2479 ], [ %2298, %2466 ]
  %2489 = phi i16 [ %2485, %2479 ], [ %2297, %2466 ]
  %2490 = phi i8 [ %2301, %2479 ], [ %2296, %2466 ]
  %2491 = phi i32* [ %2486, %2479 ], [ %2295, %2466 ]
  %2492 = phi i8 [ %2482, %2479 ], [ %2294, %2466 ]
  %2493 = load i32, i32* %2290, align 4
  %2494 = icmp eq i32 %2493, 0
  br i1 %2494, label %2500, label %2495

2495:                                             ; preds = %2487
  %2496 = zext i32 %2493 to i64
  %2497 = ashr i64 %2488, %2496
  %2498 = sub nsw i64 %2488, %2497
  %2499 = icmp sgt i64 %2498, %11
  br i1 %2499, label %2513, label %2500

2500:                                             ; preds = %2487, %2495
  %2501 = load i32, i32* %2291, align 4
  %2502 = icmp eq i32 %2501, 0
  %2503 = icmp ne i16 %2489, 0
  %2504 = or i1 %2503, %2502
  br i1 %2504, label %2505, label %2513

2505:                                             ; preds = %2500, %2292, %2375
  %2506 = phi i64 [ %2298, %2375 ], [ %2298, %2292 ], [ %2488, %2500 ]
  %2507 = phi i16 [ %2297, %2375 ], [ %2297, %2292 ], [ %2489, %2500 ]
  %2508 = phi i8 [ %2296, %2375 ], [ %2296, %2292 ], [ %2490, %2500 ]
  %2509 = phi i32* [ %2295, %2375 ], [ %2295, %2292 ], [ %2491, %2500 ]
  %2510 = phi i8 [ %2294, %2375 ], [ %2294, %2292 ], [ %2492, %2500 ]
  %2511 = add nuw nsw i64 %2293, 1
  %2512 = icmp eq i64 %2511, 16
  br i1 %2512, label %2513, label %2292

2513:                                             ; preds = %2505, %2495, %2500
  %2514 = phi i16 [ %2507, %2505 ], [ 0, %2500 ], [ %2489, %2495 ]
  %2515 = phi i8 [ %2508, %2505 ], [ %2490, %2500 ], [ %2490, %2495 ]
  %2516 = phi i32* [ %2509, %2505 ], [ %2491, %2500 ], [ %2491, %2495 ]
  %2517 = phi i8 [ %2510, %2505 ], [ %2492, %2500 ], [ %2492, %2495 ]
  %2518 = icmp eq i16 %2514, 0
  %2519 = zext i1 %2518 to i32
  store i32 %2519, i32* %61, align 8
  br i1 %47, label %2520, label %2560

2520:                                             ; preds = %2513
  %2521 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %2522 = load i32, i32* %2521, align 16
  %2523 = load i8*, i8** %2269, align 8
  %2524 = mul nsw i32 %2522, %4
  %2525 = add nsw i32 %2524, %5
  %2526 = sext i32 %2525 to i64
  %2527 = getelementptr inbounds i8, i8* %2523, i64 %2526
  store i8 %2515, i8* %2527, align 1
  %2528 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %420
  %2529 = load i32, i32* %2528, align 4
  %2530 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %420
  %2531 = load i32, i32* %2530, align 4
  %2532 = lshr i64 266256, %420
  %2533 = and i64 %2532, 1
  %2534 = icmp eq i64 %2533, 0
  br i1 %2534, label %2535, label %2539

2535:                                             ; preds = %2520
  %2536 = lshr i64 133136, %420
  %2537 = and i64 %2536, 1
  %2538 = icmp eq i64 %2537, 0
  br i1 %2538, label %2560, label %2539

2539:                                             ; preds = %2535, %2520
  %2540 = sext i32 %2529 to i64
  %2541 = sext i32 %4 to i64
  %2542 = sext i32 %2522 to i64
  %2543 = sext i32 %5 to i64
  %2544 = sext i32 %2531 to i64
  br label %2545

2545:                                             ; preds = %2550, %2539
  %2546 = phi i64 [ 0, %2539 ], [ %2551, %2550 ]
  %2547 = add nsw i64 %2546, %2541
  %2548 = mul nsw i64 %2547, %2542
  %2549 = add nsw i64 %2548, %2543
  br label %2553

2550:                                             ; preds = %2553
  %2551 = add nuw nsw i64 %2546, 4
  %2552 = icmp slt i64 %2551, %2544
  br i1 %2552, label %2545, label %2560

2553:                                             ; preds = %2553, %2545
  %2554 = phi i64 [ 0, %2545 ], [ %2558, %2553 ]
  %2555 = load i8*, i8** %2269, align 8
  %2556 = add nsw i64 %2549, %2554
  %2557 = getelementptr inbounds i8, i8* %2555, i64 %2556
  store i8 %2515, i8* %2557, align 1
  %2558 = add nuw nsw i64 %2554, 4
  %2559 = icmp slt i64 %2558, %2540
  br i1 %2559, label %2553, label %2550

2560:                                             ; preds = %2550, %2535, %2513
  %2561 = load i8*, i8** %2289, align 8
  %2562 = getelementptr inbounds i8, i8* %2561, i64 %2280
  store i8 %2517, i8* %2562, align 1
  %2563 = load i16*, i16** %2257, align 8
  %2564 = getelementptr inbounds i16, i16* %2563, i64 %2280
  store i16 %2514, i16* %2564, align 2
  %2565 = zext i8 %2515 to i64
  %2566 = getelementptr inbounds [16 x i32], [16 x i32]* %34, i64 0, i64 %2565
  %2567 = load i32, i32* %2566, align 4
  store i32* %2516, i32** %43, align 8
  %2568 = icmp eq i32 %2256, 0
  %2569 = or i1 %2568, %2518
  br i1 %2569, label %2572, label %2570

2570:                                             ; preds = %2560
  %2571 = call fastcc i64 @dist_block_px_domain(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i8 zeroext %6, i32 %3, i32 %4, i32 %5, i8 zeroext %7)
  store i64 %2571, i64* %57, align 8
  store i64 %2218, i64* %60, align 8
  br label %2572

2572:                                             ; preds = %2560, %2570
  %2573 = icmp eq %struct.TXB_RD_INFO* %413, null
  br i1 %2573, label %2589, label %2574

2574:                                             ; preds = %2572
  %2575 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 7
  store i8 1, i8* %2575, align 1
  %2576 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 5
  store i16 %412, i16* %2576, align 8
  %2577 = load i32, i32* %56, align 8
  %2578 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 2
  store i32 %2577, i32* %2578, align 8
  %2579 = load i64, i64* %57, align 8
  %2580 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 0
  store i64 %2579, i64* %2580, align 8
  %2581 = load i64, i64* %60, align 8
  %2582 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 1
  store i64 %2581, i64* %2582, align 8
  %2583 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 3
  store i16 %2514, i16* %2583, align 4
  %2584 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 6
  store i8 %2517, i8* %2584, align 2
  %2585 = zext i1 %2226 to i8
  %2586 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 9
  store i8 %2585, i8* %2586, align 1
  br i1 %47, label %2587, label %2589

2587:                                             ; preds = %2574
  %2588 = getelementptr inbounds %struct.TXB_RD_INFO, %struct.TXB_RD_INFO* %413, i64 0, i32 4
  store i8 %2515, i8* %2588, align 2
  br label %2589

2589:                                             ; preds = %2572, %2574, %2587
  call fastcc void @recon_intra(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i32 %3, i32 %4, i32 %5, i8 zeroext %6, i8 zeroext %7, %struct.txb_ctx* %8, i32 %2567, i8 zeroext %2515, i32 0, i32* nonnull %29, i16 zeroext %2514)
  store i64 %45, i64* %44, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %2261) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %2260) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2259) #6
  br label %2590

2590:                                             ; preds = %599, %2589
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %414) #6
  br label %2591

2591:                                             ; preds = %410, %2590
  call void @llvm.lifetime.end.p0i8(i64 65536, i8* nonnull %41) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @recon_intra(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx*, i32, i8 zeroext, i32, i32*, i16 zeroext) unnamed_addr #4 {
  %15 = alloca %struct.txfm_param, align 4
  %16 = alloca %struct.QUANT_PARAM, align 8
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %20 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %21 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %20, align 8
  %22 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %21, i64 0, i32 28
  %23 = load i16, i16* %22, align 1
  %24 = trunc i16 %23 to i8
  %25 = icmp sgt i8 %24, -1
  br i1 %25, label %26, label %262

26:                                               ; preds = %14
  %27 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %21, i64 0, i32 6, i64 0
  %28 = load i8, i8* %27, align 8
  %29 = icmp sgt i8 %28, 0
  %30 = icmp eq i16 %13, 0
  %31 = or i1 %30, %29
  br i1 %31, label %262, label %32

32:                                               ; preds = %26
  %33 = zext i8 %7 to i64
  %34 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, %4
  %37 = zext i8 %6 to i64
  %38 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp slt i32 %36, %40
  br i1 %41, label %50, label %42

42:                                               ; preds = %32
  %43 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %33
  %44 = load i32, i32* %43, align 4
  %45 = add nsw i32 %44, %5
  %46 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %37
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = icmp slt i32 %45, %48
  br i1 %49, label %50, label %262

50:                                               ; preds = %42, %32
  %51 = icmp eq i32 %11, 0
  br i1 %51, label %68, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds %struct.txfm_param, %struct.txfm_param* %15, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %53) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %53, i8 -86, i64 24, i1 false)
  %54 = bitcast %struct.QUANT_PARAM* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %54) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 40, i1 false)
  call void @av1_setup_xform(%struct.AV1Common* %17, %struct.macroblock* %1, i8 zeroext %7, i8 zeroext %10, %struct.txfm_param* nonnull %15) #6
  %55 = icmp ne i32 %9, 0
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = zext i1 %55 to i32
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 4
  %60 = load i32, i32* %59, align 4
  call void @av1_setup_quant(i8 zeroext %7, i32 %57, i32 %58, i32 %60, %struct.QUANT_PARAM* nonnull %16) #6
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  call void @av1_setup_qmatrix(%struct.CommonQuantParams* %61, %struct.macroblockd* %18, i32 %2, i8 zeroext %7, i8 zeroext %10, %struct.QUANT_PARAM* nonnull %16) #6
  call void @av1_xform_quant(%struct.macroblock* %1, i32 %2, i32 %3, i32 %4, i32 %5, i8 zeroext %6, %struct.txfm_param* nonnull %15, %struct.QUANT_PARAM* nonnull %16) #6
  %62 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %16, i64 0, i32 5
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %52
  %66 = call i32 @av1_optimize_b(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %2, i32 %3, i8 zeroext %7, i8 zeroext %10, %struct.txb_ctx* %8, i32* %12) #6
  br label %67

67:                                               ; preds = %52, %65
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %54) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %53) #6
  br label %68

68:                                               ; preds = %50, %67
  %69 = sext i32 %2 to i64
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %69, i32 4
  %71 = load i16*, i16** %70, align 8
  %72 = sext i32 %3 to i64
  %73 = getelementptr inbounds i16, i16* %71, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %77 = load i8, i8* %76, align 1, !range !12
  %78 = zext i8 %77 to i32
  %79 = icmp eq i16 %74, 0
  br i1 %79, label %214, label %80

80:                                               ; preds = %68
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %69, i32 1
  %82 = load i32*, i32** %81, align 8
  %83 = shl i32 %3, 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %82, i64 %84
  %86 = icmp eq i32 %2, 0
  %87 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %19, align 8
  %88 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %87, align 8
  %89 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %88, i64 0, i32 28
  %90 = load i16, i16* %89, align 1
  %91 = and i16 %90, 7
  %92 = zext i16 %91 to i64
  %93 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %202

96:                                               ; preds = %80
  br i1 %86, label %97, label %100

97:                                               ; preds = %96
  %98 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %88, i64 0, i32 24
  %99 = load i8, i8* %98, align 1
  br label %118

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %88, i64 0, i32 0
  %102 = load i8, i8* %101, align 8
  %103 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %69, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %69, i32 2
  %106 = load i32, i32* %105, align 8
  %107 = zext i8 %102 to i64
  %108 = sext i32 %104 to i64
  %109 = sext i32 %106 to i64
  %110 = getelementptr inbounds [22 x [2 x [2 x i8]]], [22 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %107, i64 %108, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [22 x i8], [22 x i8]* @max_txsize_rect_lookup, i64 0, i64 %112
  %114 = load i8, i8* %113, align 1
  switch i8 %114, label %117 [
    i8 4, label %118
    i8 12, label %118
    i8 11, label %118
    i8 18, label %115
    i8 17, label %116
  ]

115:                                              ; preds = %100
  br label %118

116:                                              ; preds = %100
  br label %118

117:                                              ; preds = %100
  br label %118

118:                                              ; preds = %117, %116, %115, %100, %100, %100, %97
  %119 = phi i8 [ 3, %100 ], [ 3, %100 ], [ 3, %100 ], [ 10, %115 ], [ 9, %116 ], [ %114, %117 ], [ %99, %97 ]
  %120 = zext i8 %119 to i64
  %121 = lshr i64 399376, %120
  %122 = and i64 %121, 1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %202

124:                                              ; preds = %118
  br i1 %86, label %125, label %135

125:                                              ; preds = %124
  %126 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %127 = load i8*, i8** %126, align 8
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %129 = load i32, i32* %128, align 16
  %130 = mul nsw i32 %129, %4
  %131 = add nsw i32 %130, %5
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %127, i64 %132
  %134 = load i8, i8* %133, align 1
  br label %202

135:                                              ; preds = %124
  %136 = trunc i16 %90 to i8
  %137 = icmp sgt i8 %136, -1
  br i1 %137, label %138, label %151

138:                                              ; preds = %135
  %139 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %88, i64 0, i32 6, i64 0
  %140 = load i8, i8* %139, align 8
  %141 = icmp slt i8 %140, 1
  br i1 %141, label %142, label %151

142:                                              ; preds = %138
  %143 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %88, i64 0, i32 3
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i64
  %149 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  br label %170

151:                                              ; preds = %138, %135
  %152 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %153 = load i32, i32* %152, align 8
  %154 = shl i32 %4, %153
  %155 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %156 = load i32, i32* %155, align 4
  %157 = shl i32 %5, %156
  %158 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %159 = load i8*, i8** %158, align 8
  %160 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %161 = load i32, i32* %160, align 16
  %162 = mul nsw i32 %161, %154
  %163 = add nsw i32 %162, %157
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %159, i64 %164
  %166 = load i8, i8* %165, align 1
  br i1 %137, label %167, label %175

167:                                              ; preds = %151
  %168 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %88, i64 0, i32 6, i64 0
  %169 = load i8, i8* %168, align 8
  br label %170

170:                                              ; preds = %167, %142
  %171 = phi i8 [ %140, %142 ], [ %169, %167 ]
  %172 = phi i8 [ %150, %142 ], [ %166, %167 ]
  %173 = icmp sgt i8 %171, 0
  %174 = zext i1 %173 to i32
  br label %175

175:                                              ; preds = %170, %151
  %176 = phi i8 [ %166, %151 ], [ %172, %170 ]
  %177 = phi i32 [ 1, %151 ], [ %174, %170 ]
  %178 = lshr i64 99848, %120
  %179 = and i64 %178, 1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %183, label %181

181:                                              ; preds = %175
  %182 = trunc i32 %177 to i8
  br label %194

183:                                              ; preds = %175
  %184 = icmp eq i8 %77, 0
  br i1 %184, label %188, label %185

185:                                              ; preds = %183
  %186 = icmp eq i32 %177, 0
  %187 = select i1 %186, i8 2, i8 1
  br label %194

188:                                              ; preds = %183
  %189 = zext i32 %177 to i64
  %190 = lshr i64 394756, %120
  %191 = and i64 %190, 1
  %192 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %189, i64 %191
  %193 = load i8, i8* %192, align 1
  br label %194

194:                                              ; preds = %188, %185, %181
  %195 = phi i8 [ %182, %181 ], [ %187, %185 ], [ %193, %188 ]
  %196 = zext i8 %195 to i64
  %197 = zext i8 %176 to i64
  %198 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %196, i64 %197
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 0
  %201 = select i1 %200, i8 0, i8 %176
  br label %202

202:                                              ; preds = %194, %125, %118, %80
  %203 = phi i8 [ %119, %118 ], [ %119, %125 ], [ %119, %194 ], [ 0, %80 ]
  %204 = phi i8 [ 0, %118 ], [ %134, %125 ], [ %201, %194 ], [ 0, %80 ]
  %205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %69, i32 3, i32 4
  %206 = load i32, i32* %205, align 8
  %207 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %69, i32 3, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = mul nsw i32 %206, %4
  %210 = add nsw i32 %209, %5
  %211 = shl i32 %210, 2
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %208, i64 %212
  call void @av1_inverse_transform_block(%struct.macroblockd* %18, i32* %85, i32 %2, i8 zeroext %204, i8 zeroext %203, i8* %213, i32 %206, i32 %75, i32 %78) #6
  br label %214

214:                                              ; preds = %68, %202
  %215 = icmp eq i32 %2, 0
  br i1 %215, label %216, label %262

216:                                              ; preds = %214
  %217 = load i16*, i16** %70, align 8
  %218 = getelementptr inbounds i16, i16* %217, i64 %72
  %219 = load i16, i16* %218, align 2
  %220 = icmp ne i16 %219, 0
  %221 = icmp eq i8 %10, 0
  %222 = or i1 %221, %220
  br i1 %222, label %262, label %223

223:                                              ; preds = %216
  %224 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %225 = load i32, i32* %224, align 16
  %226 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %227 = load i8*, i8** %226, align 8
  %228 = mul nsw i32 %225, %4
  %229 = add nsw i32 %228, %5
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i8, i8* %227, i64 %230
  store i8 0, i8* %231, align 1
  %232 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %33
  %233 = load i32, i32* %232, align 4
  %234 = lshr i64 266256, %33
  %235 = and i64 %234, 1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %241

237:                                              ; preds = %223
  %238 = lshr i64 133136, %33
  %239 = and i64 %238, 1
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %262, label %241

241:                                              ; preds = %237, %223
  %242 = sext i32 %233 to i64
  %243 = sext i32 %4 to i64
  %244 = sext i32 %225 to i64
  %245 = sext i32 %5 to i64
  %246 = sext i32 %35 to i64
  br label %247

247:                                              ; preds = %252, %241
  %248 = phi i64 [ 0, %241 ], [ %253, %252 ]
  %249 = add nsw i64 %248, %243
  %250 = mul nsw i64 %249, %244
  %251 = add nsw i64 %250, %245
  br label %255

252:                                              ; preds = %255
  %253 = add nuw nsw i64 %248, 4
  %254 = icmp slt i64 %253, %246
  br i1 %254, label %247, label %262

255:                                              ; preds = %255, %247
  %256 = phi i64 [ 0, %247 ], [ %260, %255 ]
  %257 = load i8*, i8** %226, align 8
  %258 = add nsw i64 %251, %256
  %259 = getelementptr inbounds i8, i8* %257, i64 %258
  store i8 0, i8* %259, align 1
  %260 = add nuw nsw i64 %256, 4
  %261 = icmp slt i64 %260, %242
  br i1 %261, label %255, label %252

262:                                              ; preds = %252, %14, %237, %216, %26, %214, %42
  ret void
}

declare zeroext i1 @av1_use_qmatrix(%struct.CommonQuantParams*, %struct.macroblockd*, i32) local_unnamed_addr #2

declare void @av1_setup_qmatrix(%struct.CommonQuantParams*, %struct.macroblockd*, i32, i8 zeroext, i8 zeroext, %struct.QUANT_PARAM*) local_unnamed_addr #2

declare void @av1_xform_dc_only(%struct.macroblock*, i32, i32, %struct.txfm_param*, i64) local_unnamed_addr #2

declare i32 @av1_optimize_b(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, i8 zeroext, %struct.txb_ctx*, i32*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i64 @dist_block_px_domain(%struct.AV1_COMP* nocapture readonly, %struct.macroblock*, i32, i8 zeroext, i32, i32, i32, i8 zeroext) unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca [4096 x i16], align 16
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %12, i32 4
  %14 = load i16*, i16** %13, align 8
  %15 = sext i32 %4 to i64
  %16 = getelementptr inbounds i16, i16* %14, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = zext i8 %7 to i64
  %19 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %21
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %12, i32 6, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %12, i32 3, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = mul nsw i32 %29, %5
  %33 = add nsw i32 %32, %6
  %34 = shl i32 %33, 2
  %35 = mul nsw i32 %31, %5
  %36 = add nsw i32 %35, %6
  %37 = shl i32 %36, 2
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %12, i32 6, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = sext i32 %34 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %12, i32 3, i32 0
  %43 = load i8*, i8** %42, align 16
  %44 = sext i32 %37 to i64
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 %12, i32 1
  %47 = load i32*, i32** %46, align 8
  %48 = shl i32 %4, 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %47, i64 %49
  %51 = bitcast [4096 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %51) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 8192, i1 false)
  %52 = load void (i8*, i64, i8*, i64, i32, i32)*, void (i8*, i64, i8*, i64, i32, i32)** @aom_convolve_copy, align 8
  %53 = sext i32 %31 to i64
  call void %52(i8* %45, i64 %53, i8* nonnull %51, i64 64, i32 %24, i32 %27) #6
  %54 = icmp eq i32 %2, 0
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 9
  %56 = load i8, i8* %55, align 1, !range !12
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %59 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %58, align 8
  %60 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %59, align 8
  %61 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %60, i64 0, i32 28
  %62 = load i16, i16* %61, align 1
  %63 = and i16 %62, 7
  %64 = zext i16 %63 to i64
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 42, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %150

68:                                               ; preds = %8
  %69 = lshr i64 399376, %18
  %70 = and i64 %69, 1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %150

72:                                               ; preds = %68
  br i1 %54, label %73, label %83

73:                                               ; preds = %72
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %77 = load i32, i32* %76, align 16
  %78 = mul nsw i32 %77, %5
  %79 = add nsw i32 %78, %6
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %75, i64 %80
  %82 = load i8, i8* %81, align 1
  br label %150

83:                                               ; preds = %72
  %84 = trunc i16 %62 to i8
  %85 = icmp sgt i8 %84, -1
  br i1 %85, label %86, label %99

86:                                               ; preds = %83
  %87 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %60, i64 0, i32 6, i64 0
  %88 = load i8, i8* %87, align 8
  %89 = icmp slt i8 %88, 1
  br i1 %89, label %90, label %99

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %60, i64 0, i32 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds [16 x i8], [16 x i8]* @get_uv_mode.uv2y, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i64
  %97 = getelementptr inbounds [13 x i8], [13 x i8]* @intra_mode_to_tx_type._intra_mode_to_tx_type, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1
  br label %118

99:                                               ; preds = %86, %83
  %100 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 2
  %101 = load i32, i32* %100, align 8
  %102 = shl i32 %5, %101
  %103 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = shl i32 %6, %104
  %106 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %109 = load i32, i32* %108, align 16
  %110 = mul nsw i32 %109, %102
  %111 = add nsw i32 %110, %105
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  %114 = load i8, i8* %113, align 1
  br i1 %85, label %115, label %123

115:                                              ; preds = %99
  %116 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %60, i64 0, i32 6, i64 0
  %117 = load i8, i8* %116, align 8
  br label %118

118:                                              ; preds = %115, %90
  %119 = phi i8 [ %88, %90 ], [ %117, %115 ]
  %120 = phi i8 [ %98, %90 ], [ %114, %115 ]
  %121 = icmp sgt i8 %119, 0
  %122 = zext i1 %121 to i32
  br label %123

123:                                              ; preds = %118, %99
  %124 = phi i8 [ %114, %99 ], [ %120, %118 ]
  %125 = phi i32 [ 1, %99 ], [ %122, %118 ]
  %126 = lshr i64 99848, %18
  %127 = and i64 %126, 1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %131, label %129

129:                                              ; preds = %123
  %130 = trunc i32 %125 to i8
  br label %142

131:                                              ; preds = %123
  %132 = icmp eq i8 %56, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %131
  %134 = icmp eq i32 %125, 0
  %135 = select i1 %134, i8 2, i8 1
  br label %142

136:                                              ; preds = %131
  %137 = zext i32 %125 to i64
  %138 = lshr i64 394756, %18
  %139 = and i64 %138, 1
  %140 = getelementptr inbounds [2 x [2 x i8]], [2 x [2 x i8]]* @av1_ext_tx_set_lookup, i64 0, i64 %137, i64 %139
  %141 = load i8, i8* %140, align 1
  br label %142

142:                                              ; preds = %136, %133, %129
  %143 = phi i8 [ %130, %129 ], [ %135, %133 ], [ %141, %136 ]
  %144 = zext i8 %143 to i64
  %145 = zext i8 %124 to i64
  %146 = getelementptr inbounds [6 x [16 x i32]], [6 x [16 x i32]]* bitcast (<{ <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32] }>* @av1_ext_tx_used to [6 x [16 x i32]]*), i64 0, i64 %144, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 0
  %149 = select i1 %148, i8 0, i8 %124
  br label %150

150:                                              ; preds = %8, %68, %73, %142
  %151 = phi i8 [ 0, %68 ], [ 0, %8 ], [ %82, %73 ], [ %149, %142 ]
  %152 = zext i16 %17 to i32
  call void @av1_inverse_transform_block(%struct.macroblockd* %11, i32* %50, i32 %2, i8 zeroext %151, i8 zeroext %7, i8* nonnull %51, i32 64, i32 %152, i32 %57) #6
  %153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %154 = load i32, i32* %153, align 16
  %155 = icmp sgt i32 %154, -1
  br i1 %155, label %172, label %156

156:                                              ; preds = %150
  %157 = zext i8 %3 to i64
  %158 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %12, i32 2
  %162 = load i32, i32* %161, align 8
  %163 = add nsw i32 %162, 3
  %164 = ashr i32 %154, %163
  %165 = shl i32 %5, 2
  %166 = sub i32 %160, %165
  %167 = add i32 %164, %166
  %168 = icmp slt i32 %167, 0
  %169 = icmp sgt i32 %167, %27
  %170 = select i1 %169, i32 %27, i32 %167
  %171 = select i1 %168, i32 0, i32 %170
  br label %172

172:                                              ; preds = %156, %150
  %173 = phi i32 [ %171, %156 ], [ %27, %150 ]
  %174 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %175 = load i32, i32* %174, align 8
  %176 = icmp sgt i32 %175, -1
  br i1 %176, label %193, label %177

177:                                              ; preds = %172
  %178 = zext i8 %3 to i64
  %179 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %178
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 %12, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = add nsw i32 %183, 3
  %185 = ashr i32 %175, %184
  %186 = shl i32 %6, 2
  %187 = sub i32 %181, %186
  %188 = add i32 %185, %187
  %189 = icmp slt i32 %188, 0
  %190 = icmp sgt i32 %188, %24
  %191 = select i1 %190, i32 %24, i32 %188
  %192 = select i1 %189, i32 0, i32 %191
  br label %193

193:                                              ; preds = %177, %172
  %194 = phi i32 [ %192, %177 ], [ %24, %172 ]
  %195 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %195) #6
  store i32 -1431655766, i32* %9, align 4
  %196 = icmp eq i32 %173, %27
  %197 = icmp eq i32 %194, %24
  %198 = and i1 %196, %197
  br i1 %198, label %199, label %206

199:                                              ; preds = %193
  %200 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %201 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %200, align 16
  %202 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %201, i64 0, i32 21, i64 %21, i32 3
  %203 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %202, align 8
  %204 = call i32 %203(i8* %41, i32 %29, i8* nonnull %51, i32 64, i32* nonnull %9) #6
  %205 = load i32, i32* %9, align 4
  br label %208

206:                                              ; preds = %193
  %207 = call i32 @aom_sse_odd_size(i8* %41, i32 %29, i8* nonnull %51, i32 64, i32 %194, i32 %173) #6
  store i32 %207, i32* %9, align 4
  br label %208

208:                                              ; preds = %199, %206
  %209 = phi i32 [ %205, %199 ], [ %207, %206 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %195) #6
  %210 = shl i32 %209, 4
  %211 = zext i32 %210 to i64
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %51) #6
  ret i64 %211
}

declare void @av1_inverse_transform_block(%struct.macroblockd*, i32*, i32, i8 zeroext, i8 zeroext, i8*, i32, i32, i32) local_unnamed_addr #2

declare void @av1_nn_softmax(float*, float*, i32) local_unnamed_addr #2

declare i32 @aom_sse_odd_size(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @tx_block_yrd(%struct.AV1_COMP*, %struct.macroblock*, i32, i32, i32, i8 zeroext, i8 zeroext, i32, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i64, %struct.RD_STATS*) unnamed_addr #4 {
  %15 = alloca %struct.RD_STATS, align 8
  %16 = alloca %struct.txb_ctx, align 4
  %17 = alloca %struct.RD_STATS, align 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 6
  %19 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %18, align 8
  %20 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %19, align 8
  %21 = zext i8 %6 to i64
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 20
  %26 = load i32, i32* %25, align 16
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %14
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, 3
  %32 = ashr i32 %26, %31
  %33 = add nsw i32 %32, %24
  br label %34

34:                                               ; preds = %14, %28
  %35 = phi i32 [ %33, %28 ], [ %24, %14 ]
  %36 = ashr i32 %35, 2
  %37 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %21
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 18
  %41 = load i32, i32* %40, align 8
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = add nsw i32 %45, 3
  %47 = ashr i32 %41, %46
  %48 = add nsw i32 %47, %39
  br label %49

49:                                               ; preds = %34, %43
  %50 = phi i32 [ %48, %43 ], [ %39, %34 ]
  %51 = ashr i32 %50, 2
  %52 = icmp sgt i32 %36, %2
  %53 = icmp sgt i32 %51, %3
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %624

55:                                               ; preds = %49
  %56 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_h_log2_table, i64 0, i64 %21
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = ashr i32 %2, %58
  %60 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.stride_log2_table, i64 0, i64 %21
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = shl i32 %59, %62
  %64 = getelementptr inbounds [22 x i8], [22 x i8]* @av1_get_txb_size_index.tw_w_log2_table, i64 0, i64 %21
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = ashr i32 %3, %66
  %68 = add nsw i32 %67, %63
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 25, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = sext i32 %3 to i64
  %73 = getelementptr inbounds i8, i8* %10, i64 %72
  %74 = sext i32 %2 to i64
  %75 = getelementptr inbounds i8, i8* %11, i64 %74
  %76 = zext i8 %5 to i64
  %77 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %76
  %80 = load i32, i32* %79, align 4
  %81 = load i8, i8* %73, align 1
  %82 = zext i8 %81 to i32
  %83 = and i32 %78, 255
  %84 = icmp ugt i32 %83, %82
  %85 = zext i1 %84 to i64
  %86 = load i8, i8* %75, align 1
  %87 = zext i8 %86 to i32
  %88 = and i32 %80, 255
  %89 = icmp ugt i32 %88, %87
  %90 = zext i1 %89 to i64
  %91 = icmp eq i8 %5, 0
  br i1 %91, label %122, label %92

92:                                               ; preds = %55
  %93 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %20, i64 0, i32 0
  %94 = load i8, i8* %93, align 8
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_wide, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds [22 x i8], [22 x i8]* @block_size_high, i64 0, i64 %95
  %99 = load i8, i8* %98, align 1
  %100 = icmp ugt i8 %97, %99
  %101 = select i1 %100, i8 %97, i8 %99
  switch i8 %101, label %118 [
    i8 -128, label %105
    i8 64, label %105
    i8 32, label %102
    i8 16, label %103
    i8 8, label %104
  ]

102:                                              ; preds = %92
  br label %105

103:                                              ; preds = %92
  br label %105

104:                                              ; preds = %92
  br label %105

105:                                              ; preds = %104, %103, %102, %92, %92
  %106 = phi i8 [ 4, %92 ], [ 4, %92 ], [ 3, %102 ], [ 2, %103 ], [ 1, %104 ]
  %107 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %76
  %108 = load i8, i8* %107, align 1
  %109 = icmp ne i8 %108, %106
  %110 = icmp ne i8 %106, 1
  %111 = and i1 %110, %109
  %112 = zext i1 %111 to i64
  %113 = shl nuw nsw i8 %106, 1
  %114 = zext i8 %113 to i64
  %115 = sub nuw nsw i64 8, %114
  %116 = or i64 %115, %112
  %117 = mul nsw i64 %116, 3
  br label %118

118:                                              ; preds = %105, %92
  %119 = phi i64 [ %117, %105 ], [ 63, %92 ]
  %120 = add nuw nsw i64 %90, %85
  %121 = add nsw i64 %120, %119
  br label %122

122:                                              ; preds = %55, %118
  %123 = phi i64 [ %121, %118 ], [ 0, %55 ]
  %124 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 0
  store i32 0, i32* %124, align 8
  %125 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 1
  %126 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 4
  %127 = bitcast i64* %125 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %127, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %126, align 8
  %128 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 5
  store i32 0, i32* %128, align 4
  %129 = icmp eq i8 %71, %5
  br i1 %129, label %130, label %517

130:                                              ; preds = %122
  %131 = getelementptr inbounds i8, i8* %8, i64 %72
  %132 = getelementptr inbounds [19 x i8], [19 x i8]* @choose_largest_tx_size.tx_size_max_square, i64 0, i64 %76
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i64
  %135 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_sqr_up_map, i64 0, i64 %76
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i64
  %138 = add nuw nsw i64 %134, 1
  %139 = add nuw nsw i64 %138, %137
  %140 = bitcast %struct.txb_ctx* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %140) #6
  %141 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %16, i64 0, i32 0
  store i32 -1431655766, i32* %141, align 4
  %142 = getelementptr inbounds %struct.txb_ctx, %struct.txb_ctx* %16, i64 0, i32 1
  store i32 -1431655766, i32* %142, align 4
  %143 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %76
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %76
  %146 = load i32, i32* %145, align 4
  %147 = sext i32 %144 to i64
  br label %148

148:                                              ; preds = %148, %130
  %149 = phi i64 [ %159, %148 ], [ 0, %130 ]
  %150 = phi i32 [ %158, %148 ], [ 0, %130 ]
  %151 = getelementptr inbounds i8, i8* %131, i64 %149
  %152 = load i8, i8* %151, align 1
  %153 = lshr i8 %152, 3
  %154 = zext i8 %153 to i64
  %155 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = sext i8 %156 to i32
  %158 = add nsw i32 %150, %157
  %159 = add nuw nsw i64 %149, 1
  %160 = icmp slt i64 %159, %147
  br i1 %160, label %148, label %161

161:                                              ; preds = %148
  %162 = getelementptr inbounds i8, i8* %9, i64 %74
  %163 = lshr i64 %139, 1
  %164 = sext i32 %146 to i64
  br label %165

165:                                              ; preds = %165, %161
  %166 = phi i64 [ 0, %161 ], [ %176, %165 ]
  %167 = phi i32 [ %158, %161 ], [ %175, %165 ]
  %168 = getelementptr inbounds i8, i8* %162, i64 %166
  %169 = load i8, i8* %168, align 1
  %170 = lshr i8 %169, 3
  %171 = zext i8 %170 to i64
  %172 = getelementptr inbounds [3 x i8], [3 x i8]* @get_txb_ctx.signs, i64 0, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  %175 = add nsw i32 %167, %174
  %176 = add nuw nsw i64 %166, 1
  %177 = icmp slt i64 %176, %164
  br i1 %177, label %165, label %178

178:                                              ; preds = %165
  %179 = add nsw i32 %175, 32
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds [65 x i8], [65 x i8]* @get_txb_ctx.dc_sign_contexts, i64 0, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  store i32 %183, i32* %142, align 4
  %184 = getelementptr inbounds [19 x i8], [19 x i8]* @txsize_to_bsize, i64 0, i64 %76
  %185 = load i8, i8* %184, align 1
  %186 = icmp eq i8 %185, %6
  br i1 %186, label %365, label %187

187:                                              ; preds = %178
  %188 = icmp sgt i64 %147, 1
  %189 = select i1 %188, i64 %147, i64 1
  %190 = icmp ult i64 %189, 8
  br i1 %190, label %257, label %191

191:                                              ; preds = %187
  %192 = and i64 %189, 9223372036854775800
  %193 = add nsw i64 %192, -8
  %194 = lshr exact i64 %193, 3
  %195 = add nuw nsw i64 %194, 1
  %196 = and i64 %195, 1
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %229, label %198

198:                                              ; preds = %191
  %199 = sub nuw nsw i64 %195, %196
  br label %200

200:                                              ; preds = %200, %198
  %201 = phi i64 [ 0, %198 ], [ %226, %200 ]
  %202 = phi <4 x i32> [ zeroinitializer, %198 ], [ %224, %200 ]
  %203 = phi <4 x i32> [ zeroinitializer, %198 ], [ %225, %200 ]
  %204 = phi i64 [ %199, %198 ], [ %227, %200 ]
  %205 = getelementptr inbounds i8, i8* %131, i64 %201
  %206 = bitcast i8* %205 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = getelementptr inbounds i8, i8* %205, i64 4
  %209 = bitcast i8* %208 to <4 x i8>*
  %210 = load <4 x i8>, <4 x i8>* %209, align 1
  %211 = sext <4 x i8> %207 to <4 x i32>
  %212 = sext <4 x i8> %210 to <4 x i32>
  %213 = or <4 x i32> %202, %211
  %214 = or <4 x i32> %203, %212
  %215 = or i64 %201, 8
  %216 = getelementptr inbounds i8, i8* %131, i64 %215
  %217 = bitcast i8* %216 to <4 x i8>*
  %218 = load <4 x i8>, <4 x i8>* %217, align 1
  %219 = getelementptr inbounds i8, i8* %216, i64 4
  %220 = bitcast i8* %219 to <4 x i8>*
  %221 = load <4 x i8>, <4 x i8>* %220, align 1
  %222 = sext <4 x i8> %218 to <4 x i32>
  %223 = sext <4 x i8> %221 to <4 x i32>
  %224 = or <4 x i32> %213, %222
  %225 = or <4 x i32> %214, %223
  %226 = add i64 %201, 16
  %227 = add i64 %204, -2
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %200, !llvm.loop !52

229:                                              ; preds = %200, %191
  %230 = phi <4 x i32> [ undef, %191 ], [ %224, %200 ]
  %231 = phi <4 x i32> [ undef, %191 ], [ %225, %200 ]
  %232 = phi i64 [ 0, %191 ], [ %226, %200 ]
  %233 = phi <4 x i32> [ zeroinitializer, %191 ], [ %224, %200 ]
  %234 = phi <4 x i32> [ zeroinitializer, %191 ], [ %225, %200 ]
  %235 = icmp eq i64 %196, 0
  br i1 %235, label %247, label %236

236:                                              ; preds = %229
  %237 = getelementptr inbounds i8, i8* %131, i64 %232
  %238 = getelementptr inbounds i8, i8* %237, i64 4
  %239 = bitcast i8* %238 to <4 x i8>*
  %240 = load <4 x i8>, <4 x i8>* %239, align 1
  %241 = sext <4 x i8> %240 to <4 x i32>
  %242 = or <4 x i32> %234, %241
  %243 = bitcast i8* %237 to <4 x i8>*
  %244 = load <4 x i8>, <4 x i8>* %243, align 1
  %245 = sext <4 x i8> %244 to <4 x i32>
  %246 = or <4 x i32> %233, %245
  br label %247

247:                                              ; preds = %229, %236
  %248 = phi <4 x i32> [ %230, %229 ], [ %246, %236 ]
  %249 = phi <4 x i32> [ %231, %229 ], [ %242, %236 ]
  %250 = or <4 x i32> %249, %248
  %251 = shufflevector <4 x i32> %250, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %252 = or <4 x i32> %250, %251
  %253 = shufflevector <4 x i32> %252, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %254 = or <4 x i32> %252, %253
  %255 = extractelement <4 x i32> %254, i32 0
  %256 = icmp eq i64 %189, %192
  br i1 %256, label %269, label %257

257:                                              ; preds = %247, %187
  %258 = phi i64 [ 0, %187 ], [ %192, %247 ]
  %259 = phi i32 [ 0, %187 ], [ %255, %247 ]
  br label %260

260:                                              ; preds = %257, %260
  %261 = phi i64 [ %267, %260 ], [ %258, %257 ]
  %262 = phi i32 [ %266, %260 ], [ %259, %257 ]
  %263 = getelementptr inbounds i8, i8* %131, i64 %261
  %264 = load i8, i8* %263, align 1
  %265 = sext i8 %264 to i32
  %266 = or i32 %262, %265
  %267 = add nuw nsw i64 %261, 1
  %268 = icmp slt i64 %267, %147
  br i1 %268, label %260, label %269, !llvm.loop !53

269:                                              ; preds = %260, %247
  %270 = phi i32 [ %255, %247 ], [ %266, %260 ]
  %271 = and i32 %270, 7
  %272 = icmp sgt i64 %164, 1
  %273 = select i1 %272, i64 %164, i64 1
  %274 = icmp ult i64 %273, 8
  br i1 %274, label %341, label %275

275:                                              ; preds = %269
  %276 = and i64 %273, 9223372036854775800
  %277 = add nsw i64 %276, -8
  %278 = lshr exact i64 %277, 3
  %279 = add nuw nsw i64 %278, 1
  %280 = and i64 %279, 1
  %281 = icmp eq i64 %277, 0
  br i1 %281, label %313, label %282

282:                                              ; preds = %275
  %283 = sub nuw nsw i64 %279, %280
  br label %284

284:                                              ; preds = %284, %282
  %285 = phi i64 [ 0, %282 ], [ %310, %284 ]
  %286 = phi <4 x i32> [ zeroinitializer, %282 ], [ %308, %284 ]
  %287 = phi <4 x i32> [ zeroinitializer, %282 ], [ %309, %284 ]
  %288 = phi i64 [ %283, %282 ], [ %311, %284 ]
  %289 = getelementptr inbounds i8, i8* %162, i64 %285
  %290 = bitcast i8* %289 to <4 x i8>*
  %291 = load <4 x i8>, <4 x i8>* %290, align 1
  %292 = getelementptr inbounds i8, i8* %289, i64 4
  %293 = bitcast i8* %292 to <4 x i8>*
  %294 = load <4 x i8>, <4 x i8>* %293, align 1
  %295 = sext <4 x i8> %291 to <4 x i32>
  %296 = sext <4 x i8> %294 to <4 x i32>
  %297 = or <4 x i32> %286, %295
  %298 = or <4 x i32> %287, %296
  %299 = or i64 %285, 8
  %300 = getelementptr inbounds i8, i8* %162, i64 %299
  %301 = bitcast i8* %300 to <4 x i8>*
  %302 = load <4 x i8>, <4 x i8>* %301, align 1
  %303 = getelementptr inbounds i8, i8* %300, i64 4
  %304 = bitcast i8* %303 to <4 x i8>*
  %305 = load <4 x i8>, <4 x i8>* %304, align 1
  %306 = sext <4 x i8> %302 to <4 x i32>
  %307 = sext <4 x i8> %305 to <4 x i32>
  %308 = or <4 x i32> %297, %306
  %309 = or <4 x i32> %298, %307
  %310 = add i64 %285, 16
  %311 = add i64 %288, -2
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %284, !llvm.loop !54

313:                                              ; preds = %284, %275
  %314 = phi <4 x i32> [ undef, %275 ], [ %308, %284 ]
  %315 = phi <4 x i32> [ undef, %275 ], [ %309, %284 ]
  %316 = phi i64 [ 0, %275 ], [ %310, %284 ]
  %317 = phi <4 x i32> [ zeroinitializer, %275 ], [ %308, %284 ]
  %318 = phi <4 x i32> [ zeroinitializer, %275 ], [ %309, %284 ]
  %319 = icmp eq i64 %280, 0
  br i1 %319, label %331, label %320

320:                                              ; preds = %313
  %321 = getelementptr inbounds i8, i8* %162, i64 %316
  %322 = getelementptr inbounds i8, i8* %321, i64 4
  %323 = bitcast i8* %322 to <4 x i8>*
  %324 = load <4 x i8>, <4 x i8>* %323, align 1
  %325 = sext <4 x i8> %324 to <4 x i32>
  %326 = or <4 x i32> %318, %325
  %327 = bitcast i8* %321 to <4 x i8>*
  %328 = load <4 x i8>, <4 x i8>* %327, align 1
  %329 = sext <4 x i8> %328 to <4 x i32>
  %330 = or <4 x i32> %317, %329
  br label %331

331:                                              ; preds = %313, %320
  %332 = phi <4 x i32> [ %314, %313 ], [ %330, %320 ]
  %333 = phi <4 x i32> [ %315, %313 ], [ %326, %320 ]
  %334 = or <4 x i32> %333, %332
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %336 = or <4 x i32> %334, %335
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %338 = or <4 x i32> %336, %337
  %339 = extractelement <4 x i32> %338, i32 0
  %340 = icmp eq i64 %273, %276
  br i1 %340, label %353, label %341

341:                                              ; preds = %331, %269
  %342 = phi i64 [ 0, %269 ], [ %276, %331 ]
  %343 = phi i32 [ 0, %269 ], [ %339, %331 ]
  br label %344

344:                                              ; preds = %341, %344
  %345 = phi i64 [ %351, %344 ], [ %342, %341 ]
  %346 = phi i32 [ %350, %344 ], [ %343, %341 ]
  %347 = getelementptr inbounds i8, i8* %162, i64 %345
  %348 = load i8, i8* %347, align 1
  %349 = sext i8 %348 to i32
  %350 = or i32 %346, %349
  %351 = add nuw nsw i64 %345, 1
  %352 = icmp slt i64 %351, %164
  br i1 %352, label %344, label %353, !llvm.loop !55

353:                                              ; preds = %344, %331
  %354 = phi i32 [ %339, %331 ], [ %350, %344 ]
  %355 = icmp ult i32 %271, 4
  %356 = select i1 %355, i32 %271, i32 4
  %357 = and i32 %354, 7
  %358 = icmp ult i32 %357, 4
  %359 = select i1 %358, i32 %357, i32 4
  %360 = zext i32 %356 to i64
  %361 = zext i32 %359 to i64
  %362 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @get_txb_ctx.skip_contexts, i64 0, i64 %360, i64 %361
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i32
  br label %365

365:                                              ; preds = %178, %353
  %366 = phi i32 [ %364, %353 ], [ 0, %178 ]
  store i32 %366, i32* %141, align 4
  %367 = and i64 %163, 255
  %368 = zext i32 %366 to i64
  %369 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i32 0, i64 %367, i64 0, i32 0, i64 %368, i64 1
  %370 = load i32, i32* %369, align 4
  store i32 %370, i32* %128, align 4
  %371 = bitcast %struct.RD_STATS* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %371) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %371, i8 -86, i64 40, i1 false) #6
  call fastcc void @search_tx_type(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 0, i32 %4, i32 %2, i32 %3, i8 zeroext %6, i8 zeroext %5, %struct.txb_ctx* nonnull %16, i8 zeroext 0, i32 0, i64 %12, %struct.RD_STATS* nonnull %15) #6
  %372 = load i32, i32* %124, align 8
  %373 = icmp eq i32 %372, 2147483647
  br i1 %373, label %378, label %374

374:                                              ; preds = %365
  %375 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %15, i64 0, i32 0
  %376 = load i32, i32* %375, align 8
  %377 = icmp eq i32 %376, 2147483647
  br i1 %377, label %378, label %381

378:                                              ; preds = %374, %365
  store i32 2147483647, i32* %124, align 8
  %379 = bitcast i64* %125 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %379, align 8
  %380 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  store i64 9223372036854775807, i64* %380, align 8
  store i32 0, i32* %126, align 8
  store i32 0, i32* %128, align 4
  br label %411

381:                                              ; preds = %374
  %382 = sext i32 %372 to i64
  %383 = sext i32 %376 to i64
  %384 = add nsw i64 %383, %382
  %385 = icmp slt i64 %384, 2147483647
  %386 = select i1 %385, i64 %384, i64 2147483647
  %387 = trunc i64 %386 to i32
  store i32 %387, i32* %124, align 8
  %388 = load i32, i32* %128, align 4
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %393

390:                                              ; preds = %381
  %391 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %15, i64 0, i32 5
  %392 = load i32, i32* %391, align 4
  store i32 %392, i32* %128, align 4
  br label %393

393:                                              ; preds = %390, %381
  %394 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %15, i64 0, i32 1
  %395 = load i64, i64* %394, align 8
  %396 = load i64, i64* %125, align 8
  %397 = add nsw i64 %396, %395
  store i64 %397, i64* %125, align 8
  %398 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %15, i64 0, i32 3
  %399 = load i64, i64* %398, align 8
  %400 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  %401 = load i64, i64* %400, align 8
  %402 = add nsw i64 %401, %399
  store i64 %402, i64* %400, align 8
  %403 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %15, i64 0, i32 4
  %404 = load i32, i32* %403, align 8
  %405 = load i32, i32* %126, align 8
  %406 = and i32 %405, %404
  store i32 %406, i32* %126, align 8
  %407 = shl i64 %386, 32
  %408 = ashr exact i64 %407, 32
  %409 = shl i64 %397, 7
  %410 = icmp eq i32 %406, 1
  br label %411

411:                                              ; preds = %378, %393
  %412 = phi i1 [ false, %378 ], [ %410, %393 ]
  %413 = phi i64 [ 9223372036854775807, %378 ], [ %402, %393 ]
  %414 = phi i64 [ -128, %378 ], [ %409, %393 ]
  %415 = phi i64 [ 2147483647, %378 ], [ %408, %393 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %371) #6
  %416 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %21
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i32
  %419 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %420 = load i32, i32* %419, align 8
  %421 = sext i32 %420 to i64
  %422 = mul nsw i64 %415, %421
  %423 = add nsw i64 %422, 256
  %424 = ashr i64 %423, 9
  %425 = add nsw i64 %424, %414
  %426 = sext i32 %370 to i64
  %427 = mul nsw i64 %421, %426
  %428 = add nsw i64 %427, 256
  %429 = ashr i64 %428, 9
  %430 = shl i64 %413, 7
  %431 = add nsw i64 %429, %430
  %432 = icmp sge i64 %425, %431
  %433 = or i1 %432, %412
  br i1 %433, label %434, label %480

434:                                              ; preds = %411
  store i32 %370, i32* %124, align 8
  store i64 %413, i64* %125, align 8
  store i32 1, i32* %126, align 8
  %435 = mul nsw i32 %418, %2
  %436 = add nsw i32 %435, %3
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 %437
  %439 = load i8, i8* %438, align 1
  %440 = or i8 %439, 1
  store i8 %440, i8* %438, align 1
  %441 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4
  %442 = load i16*, i16** %441, align 16
  %443 = sext i32 %4 to i64
  %444 = getelementptr inbounds i16, i16* %442, i64 %443
  store i16 0, i16* %444, align 2
  %445 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %446 = load i8*, i8** %445, align 8
  %447 = getelementptr inbounds i8, i8* %446, i64 %443
  store i8 0, i8* %447, align 1
  %448 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 16
  %449 = load i32, i32* %448, align 16
  %450 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 15
  %451 = load i8*, i8** %450, align 8
  %452 = mul nsw i32 %449, %2
  %453 = add nsw i32 %452, %3
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds i8, i8* %451, i64 %454
  store i8 0, i8* %455, align 1
  %456 = lshr i64 266256, %76
  %457 = and i64 %456, 1
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %459, label %463

459:                                              ; preds = %434
  %460 = lshr i64 133136, %76
  %461 = and i64 %460, 1
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %487, label %463

463:                                              ; preds = %459, %434
  %464 = sext i32 %449 to i64
  br label %465

465:                                              ; preds = %470, %463
  %466 = phi i64 [ 0, %463 ], [ %471, %470 ]
  %467 = add nsw i64 %466, %74
  %468 = mul nsw i64 %467, %464
  %469 = add nsw i64 %468, %72
  br label %473

470:                                              ; preds = %473
  %471 = add nuw nsw i64 %466, 4
  %472 = icmp slt i64 %471, %164
  br i1 %472, label %465, label %487

473:                                              ; preds = %473, %465
  %474 = phi i64 [ 0, %465 ], [ %478, %473 ]
  %475 = load i8*, i8** %450, align 8
  %476 = add nsw i64 %469, %474
  %477 = getelementptr inbounds i8, i8* %475, i64 %476
  store i8 0, i8* %477, align 1
  %478 = add nuw nsw i64 %474, 4
  %479 = icmp slt i64 %478, %147
  br i1 %479, label %473, label %470

480:                                              ; preds = %411
  store i32 0, i32* %126, align 8
  %481 = mul nsw i32 %418, %2
  %482 = add nsw i32 %481, %3
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i32 1, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = and i8 %485, -2
  store i8 %486, i8* %484, align 1
  br label %487

487:                                              ; preds = %470, %459, %480
  %488 = icmp ne i8 %5, 0
  %489 = icmp slt i32 %7, 2
  %490 = and i1 %488, %489
  br i1 %490, label %491, label %496

491:                                              ; preds = %487
  %492 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 40, i64 %123, i64 0
  %493 = load i32, i32* %492, align 4
  %494 = load i32, i32* %124, align 8
  %495 = add nsw i32 %494, %493
  store i32 %495, i32* %124, align 8
  br label %496

496:                                              ; preds = %491, %487
  %497 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 5
  %498 = load i8*, i8** %497, align 8
  %499 = sext i32 %4 to i64
  %500 = getelementptr inbounds i8, i8* %498, i64 %499
  %501 = load i8, i8* %500, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %131, i8 %501, i64 %147, i1 false) #6
  call void @llvm.memset.p0i8.i64(i8* align 1 %162, i8 %501, i64 %164, i1 false) #6
  %502 = zext i8 %185 to i64
  %503 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_high, i64 0, i64 %502
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  %506 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %502
  %507 = load i8, i8* %506, align 1
  %508 = zext i8 %507 to i32
  %509 = trunc i32 %78 to i8
  %510 = trunc i32 %80 to i8
  %511 = icmp ugt i32 %505, 1
  %512 = select i1 %511, i32 %505, i32 1
  %513 = zext i32 %512 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %75, i8 %510, i64 %513, i1 false) #6
  %514 = icmp ugt i32 %508, 1
  %515 = select i1 %514, i32 %508, i32 1
  %516 = zext i32 %515 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %73, i8 %509, i64 %516, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %140) #6
  br label %624

517:                                              ; preds = %122
  %518 = getelementptr inbounds [19 x i8], [19 x i8]* @sub_tx_size_map, i64 0, i64 %76
  %519 = load i8, i8* %518, align 1
  %520 = zext i8 %519 to i64
  %521 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %520
  %522 = load i32, i32* %521, align 4
  %523 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %520
  %524 = load i32, i32* %523, align 4
  %525 = mul nsw i32 %524, %522
  %526 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_unit, i64 0, i64 %76
  %527 = load i32, i32* %526, align 4
  %528 = sub nsw i32 %36, %2
  %529 = icmp slt i32 %527, %528
  %530 = select i1 %529, i32 %527, i32 %528
  %531 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_unit, i64 0, i64 %76
  %532 = load i32, i32* %531, align 4
  %533 = sub nsw i32 %51, %3
  %534 = icmp slt i32 %532, %533
  %535 = select i1 %534, i32 %532, i32 %533
  %536 = bitcast %struct.RD_STATS* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %536) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %536, i8 -86, i64 40, i1 false)
  %537 = icmp sgt i32 %530, 0
  br i1 %537, label %538, label %614

538:                                              ; preds = %517
  %539 = icmp sgt i32 %535, 0
  %540 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 0
  %541 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 1
  %542 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 4
  %543 = bitcast i64* %541 to i8*
  %544 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 5
  %545 = add nsw i32 %7, 1
  %546 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %17, i64 0, i32 3
  %547 = getelementptr inbounds %struct.RD_STATS, %struct.RD_STATS* %13, i64 0, i32 3
  %548 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %549 = bitcast i64* %125 to <2 x i64>*
  br label %550

550:                                              ; preds = %538, %606
  %551 = phi i32 [ 0, %538 ], [ %607, %606 ]
  %552 = phi i32 [ %4, %538 ], [ %609, %606 ]
  %553 = phi i32 [ 0, %538 ], [ %610, %606 ]
  %554 = phi i64 [ 0, %538 ], [ %608, %606 ]
  %555 = add nsw i32 %553, %2
  br i1 %539, label %556, label %606

556:                                              ; preds = %550, %591
  %557 = phi i32 [ %603, %591 ], [ %552, %550 ]
  %558 = phi i32 [ %604, %591 ], [ 0, %550 ]
  %559 = phi i64 [ %602, %591 ], [ %554, %550 ]
  %560 = add nsw i32 %558, %3
  store i32 0, i32* %540, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %543, i8 0, i64 24, i1 false) #6
  store i32 1, i32* %542, align 8
  store i32 0, i32* %544, align 4
  %561 = sub nsw i64 %12, %559
  call fastcc void @tx_block_yrd(%struct.AV1_COMP* %0, %struct.macroblock* %1, i32 %555, i32 %560, i32 %557, i8 zeroext %519, i8 zeroext %6, i32 %545, i8* %8, i8* %9, i8* %10, i8* %11, i64 %561, %struct.RD_STATS* nonnull %17)
  %562 = load i32, i32* %540, align 8
  %563 = icmp eq i32 %562, 2147483647
  br i1 %563, label %612, label %564

564:                                              ; preds = %556
  %565 = load i32, i32* %124, align 8
  %566 = icmp eq i32 %565, 2147483647
  br i1 %566, label %567, label %570

567:                                              ; preds = %564
  store i32 2147483647, i32* %124, align 8
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %549, align 8
  store i64 9223372036854775807, i64* %547, align 8
  store i32 0, i32* %126, align 8
  store i32 0, i32* %128, align 4
  %568 = load i64, i64* %541, align 8
  %569 = sext i32 %562 to i64
  br label %591

570:                                              ; preds = %564
  %571 = sext i32 %565 to i64
  %572 = sext i32 %562 to i64
  %573 = add nsw i64 %571, %572
  %574 = icmp slt i64 %573, 2147483647
  %575 = select i1 %574, i64 %573, i64 2147483647
  %576 = trunc i64 %575 to i32
  store i32 %576, i32* %124, align 8
  %577 = load i32, i32* %128, align 4
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %579, label %581

579:                                              ; preds = %570
  %580 = load i32, i32* %544, align 4
  store i32 %580, i32* %128, align 4
  br label %581

581:                                              ; preds = %579, %570
  %582 = load i64, i64* %541, align 8
  %583 = load i64, i64* %125, align 8
  %584 = add nsw i64 %583, %582
  store i64 %584, i64* %125, align 8
  %585 = load i64, i64* %546, align 8
  %586 = load i64, i64* %547, align 8
  %587 = add nsw i64 %586, %585
  store i64 %587, i64* %547, align 8
  %588 = load i32, i32* %542, align 8
  %589 = load i32, i32* %126, align 8
  %590 = and i32 %589, %588
  store i32 %590, i32* %126, align 8
  br label %591

591:                                              ; preds = %581, %567
  %592 = phi i64 [ %572, %581 ], [ %569, %567 ]
  %593 = phi i32 [ %576, %581 ], [ 2147483647, %567 ]
  %594 = phi i64 [ %582, %581 ], [ %568, %567 ]
  %595 = load i32, i32* %548, align 8
  %596 = sext i32 %595 to i64
  %597 = mul nsw i64 %592, %596
  %598 = add nsw i64 %597, 256
  %599 = ashr i64 %598, 9
  %600 = shl i64 %594, 7
  %601 = add i64 %600, %559
  %602 = add i64 %601, %599
  %603 = add nsw i32 %557, %525
  %604 = add nsw i32 %558, %522
  %605 = icmp slt i32 %604, %535
  br i1 %605, label %556, label %606

606:                                              ; preds = %591, %550
  %607 = phi i32 [ %551, %550 ], [ %593, %591 ]
  %608 = phi i64 [ %554, %550 ], [ %602, %591 ]
  %609 = phi i32 [ %552, %550 ], [ %603, %591 ]
  %610 = add nsw i32 %553, %524
  %611 = icmp slt i32 %610, %530
  br i1 %611, label %550, label %614

612:                                              ; preds = %556
  store i32 2147483647, i32* %124, align 8
  %613 = bitcast i64* %125 to <2 x i64>*
  store <2 x i64> <i64 9223372036854775807, i64 9223372036854775807>, <2 x i64>* %613, align 8
  store i64 9223372036854775807, i64* %547, align 8
  store i32 0, i32* %126, align 8
  store i32 0, i32* %128, align 4
  br label %623

614:                                              ; preds = %606, %517
  %615 = phi i32 [ 0, %517 ], [ %607, %606 ]
  %616 = icmp ne i8 %5, 0
  %617 = icmp slt i32 %7, 2
  %618 = and i1 %616, %617
  br i1 %618, label %619, label %623

619:                                              ; preds = %614
  %620 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 20, i32 40, i64 %123, i64 1
  %621 = load i32, i32* %620, align 4
  %622 = add nsw i32 %615, %621
  store i32 %622, i32* %124, align 8
  br label %623

623:                                              ; preds = %612, %614, %619
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %536) #6
  ret void

624:                                              ; preds = %496, %49
  ret void
}

declare void @av1_predict_intra_block_facade(%struct.AV1Common*, %struct.macroblockd*, i32, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @av1_subtract_txb(%struct.macroblock*, i32, i8 zeroext, i32, i32, i8 zeroext) local_unnamed_addr #2

declare void @cfl_store_tx(%struct.macroblockd*, i32, i32, i8 zeroext, i8 zeroext) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
!12 = !{i8 0, i8 2}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !5, !3}
!18 = distinct !{!18, !5, !3}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !5, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !5, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !5, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !5, !3}
!34 = distinct !{!34, !3}
!35 = distinct !{!35, !5, !3}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !38}
!38 = !{!"llvm.loop.unroll.disable"}
!39 = distinct !{!39, !5, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !38}
!42 = distinct !{!42, !5, !3}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !5, !3}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !5, !3}
!48 = distinct !{!48, !5, !3}
!49 = distinct !{!49, !38}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !5, !3}
!52 = distinct !{!52, !3}
!53 = distinct !{!53, !5, !3}
!54 = distinct !{!54, !3}
!55 = distinct !{!55, !5, !3}
