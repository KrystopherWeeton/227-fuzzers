; ModuleID = '../../third_party/dawn/third_party/tint/src/sem/sampler_type.cc'
source_filename = "../../third_party/dawn/third_party/tint/src/sem/sampler_type.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.tint::TypeInfo" = type { %"struct.tint::TypeInfo"*, i8* }
%"class.tint::sem::Sampler" = type <{ %"class.tint::Castable", i32, [4 x i8] }>
%"class.tint::Castable" = type { %"class.tint::sem::Type" }
%"class.tint::sem::Type" = type { %"class.tint::Castable.0" }
%"class.tint::Castable.0" = type { %"class.tint::sem::Node" }
%"class.tint::sem::Node" = type { %"class.tint::Castable.1" }
%"class.tint::Castable.1" = type { %"class.tint::CastableBase" }
%"class.tint::CastableBase" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.tint::SymbolTable" = type { i32, [4 x i8], %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.21", %"class.tint::ProgramID", [4 x i8] }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.18", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { float }
%"class.std::__1::unordered_map.21" = type { %"class.std::__1::__hash_table.22" }
%"class.std::__1::__hash_table.22" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.33", %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.41", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base.26"** }
%"struct.std::__1::__hash_node_base.26" = type { %"struct.std::__1::__hash_node_base.26"* }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.std::__1::__bucket_list_deallocator.28" }
%"class.std::__1::__bucket_list_deallocator.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::__hash_node_base.26" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.tint::ProgramID" = type { i32 }

$_ZNK4tint8CastableINS_3sem7SamplerENS1_4TypeEE8TypeInfoEv = comdat any

@_ZN4tint6detail10TypeInfoOfINS_3sem4TypeEE4infoE = external global %"struct.tint::TypeInfo", align 8
@.str = private unnamed_addr constant [19 x i8] c"tint::sem::Sampler\00", align 1
@_ZN4tint6detail10TypeInfoOfINS_3sem7SamplerEE4infoE = hidden constant %"struct.tint::TypeInfo" { %"struct.tint::TypeInfo"* @_ZN4tint6detail10TypeInfoOfINS_3sem4TypeEE4infoE, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0) }, align 8
@_ZTVN4tint3sem7SamplerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.tint::sem::Sampler"*)* @_ZN4tint3sem7SamplerD2Ev to i8*), i8* bitcast (void (%"class.tint::sem::Sampler"*)* @_ZN4tint3sem7SamplerD0Ev to i8*), i8* bitcast (%"struct.tint::TypeInfo"* (%"class.tint::Castable"*)* @_ZNK4tint8CastableINS_3sem7SamplerENS1_4TypeEE8TypeInfoEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.tint::sem::Sampler"*)* @_ZNK4tint3sem7Sampler9type_nameEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.tint::sem::Sampler"*, %"class.tint::SymbolTable"*)* @_ZNK4tint3sem7Sampler12FriendlyNameERKNS_11SymbolTableE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"__sampler_\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"sampler\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"comparison\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"sampler_comparison\00", align 1

@_ZN4tint3sem7SamplerC1ENS_3ast11SamplerKindE = hidden unnamed_addr alias void (%"class.tint::sem::Sampler"*, i32), void (%"class.tint::sem::Sampler"*, i32)* @_ZN4tint3sem7SamplerC2ENS_3ast11SamplerKindE
@_ZN4tint3sem7SamplerC1EOS1_ = hidden unnamed_addr alias void (%"class.tint::sem::Sampler"*, %"class.tint::sem::Sampler"*), void (%"class.tint::sem::Sampler"*, %"class.tint::sem::Sampler"*)* @_ZN4tint3sem7SamplerC2EOS1_
@_ZN4tint3sem7SamplerD1Ev = hidden unnamed_addr alias void (%"class.tint::sem::Sampler"*), void (%"class.tint::sem::Sampler"*)* @_ZN4tint3sem7SamplerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7SamplerC2ENS_3ast11SamplerKindE(%"class.tint::sem::Sampler"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeC2Ev(%"class.tint::sem::Type"* %3) #5
  %4 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4tint3sem7SamplerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 1
  store i32 %1, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7SamplerC2EOS1_(%"class.tint::sem::Sampler"*, %"class.tint::sem::Sampler"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeC2EOS1_(%"class.tint::sem::Type"* %3, %"class.tint::sem::Type"* dereferenceable(8) %4) #5
  %5 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4tint3sem7SamplerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  store i32 %8, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7SamplerD2Ev(%"class.tint::sem::Sampler"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeD2Ev(%"class.tint::sem::Type"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4tint3sem7SamplerD0Ev(%"class.tint::sem::Sampler"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4tint3sem4TypeD2Ev(%"class.tint::sem::Type"* %2) #5
  %3 = bitcast %"class.tint::sem::Sampler"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4tint3sem7Sampler9type_nameEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.tint::sem::Sampler"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  store i8 10, i8* %6, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10, i1 false) #5
  %7 = getelementptr inbounds i8, i8* %4, i64 10
  store i8 0, i8* %7, align 2
  %8 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0)
  %12 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %11) #5, !noalias !2
  %13 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %14 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false) #5
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #5, !noalias !2
  %15 = load i8, i8* %6, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @_ZdlPv(i8* %19) #6
  br label %20

20:                                               ; preds = %2, %17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4tint3sem7Sampler12FriendlyNameERKNS_11SymbolTableE(%"class.std::__1::basic_string"* noalias sret, %"class.tint::sem::Sampler"* nocapture readonly, %"class.tint::SymbolTable"* nocapture readnone dereferenceable(96)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.tint::sem::Sampler", %"class.tint::sem::Sampler"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = select i1 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0)
  %8 = select i1 %6, i64 7, i64 18
  %9 = trunc i64 %8 to i8
  %10 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  store i8 %9, i8* %11, align 1
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 1 %7, i64 %8, i1 false) #5
  %13 = getelementptr inbounds i8, i8* %12, i64 %8
  store i8 0, i8* %13, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.tint::TypeInfo"* @_ZNK4tint8CastableINS_3sem7SamplerENS1_4TypeEE8TypeInfoEv(%"class.tint::Castable"*) unnamed_addr #0 comdat align 2 {
  ret %"struct.tint::TypeInfo"* @_ZN4tint6detail10TypeInfoOfINS_3sem7SamplerEE4infoE
}

declare void @_ZN4tint3sem4TypeC2Ev(%"class.tint::sem::Type"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4tint3sem4TypeD2Ev(%"class.tint::sem::Type"*) unnamed_addr #4

declare void @_ZN4tint3sem4TypeC2EOS1_(%"class.tint::sem::Type"*, %"class.tint::sem::Type"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
