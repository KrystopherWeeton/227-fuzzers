; ModuleID = '../../third_party/skia/src/gpu/vk/GrVkImage.cpp'
source_filename = "../../third_party/skia/src/gpu/vk/GrVkImage.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrVkImage = type { i32 (...)**, %struct.GrVkImageInfo, i32, %class.sk_sp, i8, %"class.GrVkImage::Resource"* }
%struct.GrVkImageInfo = type <{ %struct.VkImage_T*, %struct.GrVkAlloc, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8], %struct.GrVkYcbcrConversionInfo, i32, [4 x i8] }>
%struct.VkImage_T = type opaque
%struct.GrVkAlloc = type <{ %struct.VkDeviceMemory_T*, i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%struct.VkDeviceMemory_T = type opaque
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.sk_sp = type { %class.GrBackendSurfaceMutableStateImpl* }
%class.GrBackendSurfaceMutableStateImpl = type { %class.SkRefCnt.base, %class.GrBackendSurfaceMutableState, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.GrBackendSurfaceMutableState = type <{ %union.anon, i32, i8, [3 x i8] }>
%union.anon = type { %class.GrVkSharedImageInfo }
%class.GrVkSharedImageInfo = type { %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i32 }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i32 }
%"class.GrVkImage::Resource" = type <{ %class.GrTextureResource, %class.GrVkGpu*, %struct.VkImage_T*, %struct.GrVkAlloc, i32, [4 x i8] }>
%class.GrTextureResource = type { %class.GrManagedResource.base, %class.sk_sp.10 }
%class.GrManagedResource.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.10 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt, void (i8*)*, i8* }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.GrVkGpu = type { %class.GrGpu, %class.sk_sp.204, %class.sk_sp.348, %class.sk_sp.349, i8, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %class.GrVkResourceProvider, %class.GrStagingBufferManager, %class.GrVkMSAALoadManager, %class.GrVkCommandPool*, %class.GrVkPrimaryCommandBuffer*, %class.SkSTArray.423, %class.SkSTArray.423, %class.SkTArray.426, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceMemoryProperties, i8, i8, %"class.std::__1::unique_ptr.433" }
%class.GrGpu = type { %class.SkRefCnt.base, %"class.GrGpu::Stats", %class.sk_sp.11, %"class.std::__1::unique_ptr", i32, %class.GrDirectContext*, %class.SkSTArray, i8, i32 }
%"class.GrGpu::Stats" = type { i8 }
%class.sk_sp.11 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.12, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.12 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Compiler"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.53", %"class.std::__1::shared_ptr.53", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.55", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.61" }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13", %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.25", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.27" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.SkSL::Type::Field"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.52"* }
%"class.std::__1::vector.52" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr.53" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr.53", %"class.std::__1::vector.439", i8, %"class.std::__1::vector.447", %"class.std::__1::forward_list", %class.SkTHashMap.460, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.439" = type { %"class.std::__1::__vector_base.440" }
%"class.std::__1::__vector_base.440" = type { %"class.std::__1::unique_ptr.441"*, %"class.std::__1::unique_ptr.441"*, %"class.std::__1::__compressed_pair.442" }
%"class.std::__1::unique_ptr.441" = type { %"class.std::__1::__compressed_pair.481" }
%"class.std::__1::__compressed_pair.481" = type { %"struct.std::__1::__compressed_pair_elem.482" }
%"struct.std::__1::__compressed_pair_elem.482" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.std::__1::unique_ptr.441"* }
%"class.std::__1::vector.447" = type { %"class.std::__1::__vector_base.448" }
%"class.std::__1::__vector_base.448" = type { %"class.std::__1::unique_ptr.449"*, %"class.std::__1::unique_ptr.449"*, %"class.std::__1::__compressed_pair.450" }
%"class.std::__1::unique_ptr.449" = type { %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.487" }
%"struct.std::__1::__compressed_pair_elem.487" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.451" }
%"struct.std::__1::__compressed_pair_elem.451" = type { %"class.std::__1::unique_ptr.449"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.455" }
%"class.std::__1::__compressed_pair.455" = type { %"struct.std::__1::__compressed_pair_elem.456" }
%"struct.std::__1::__compressed_pair_elem.456" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap.460 = type { %class.SkTHashTable.461 }
%class.SkTHashTable.461 = type { i32, i32, %class.SkAutoTArray.462 }
%class.SkAutoTArray.462 = type { %"class.std::__1::unique_ptr.463" }
%"class.std::__1::unique_ptr.463" = type { %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair.491" }
%"struct.std::__1::pair.491" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr.53", %"class.std::__1::shared_ptr.54" }
%"class.std::__1::shared_ptr.54" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type opaque
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.33", %"class.std::__1::__compressed_pair.42", %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.49", [4 x i8] }>
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35", %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i64 }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { float }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.18 }
%union.anon.18 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { i64*, i64*, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i64* }
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.123", %"class.std::__1::unique_ptr.129", %class.sk_sp.135, %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.178", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.185", %"class.std::__1::unique_ptr.191", %"class.std::__1::unique_ptr.197" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.72", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.117" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.71 }
%class.sk_sp.71 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap, %class.SkTHashMap.82, %class.SkTArray.91, %class.SkTArray.93, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.75"*, i64 }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.93, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.94 }
%class.sk_sp.94 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.76" }
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.82 = type { %class.SkTHashTable.83 }
%class.SkTHashTable.83 = type { i32, i32, %class.SkAutoTArray.84 }
%class.SkAutoTArray.84 = type { %"class.std::__1::unique_ptr.85" }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.474" }
%"struct.std::__1::pair.474" = type { i32, %class.SkTArray.475* }
%class.SkTArray.475 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.91 = type { %"class.std::__1::unique_ptr.92"*, i64 }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.476" }
%"class.std::__1::__compressed_pair.476" = type { %"struct.std::__1::__compressed_pair_elem.477" }
%"struct.std::__1::__compressed_pair_elem.477" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.475, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.93 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104" }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.107 }
%class.SkFibBlockSizes.107 = type { i32 }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.135 = type { %class.GrGpu* }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.150, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.166, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.139, [4 x i8] }>
%union.anon.139 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.140, i8* }
%class.sk_sp.140 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.141, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.141 = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.142 }
%class.SkTHashTable.142 = type { i32, i32, %class.SkAutoTArray.143 }
%class.SkAutoTArray.143 = type { %"class.std::__1::unique_ptr.144" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.150 = type { %class.SkTHashTable.151 }
%class.SkTHashTable.151 = type { i32, i32, %class.SkAutoTArray.152 }
%class.SkAutoTArray.152 = type { %"class.std::__1::unique_ptr.153" }
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.159, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.159 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.160" }
%"struct.std::__1::atomic.160" = type { %"struct.std::__1::__atomic_base.161" }
%"struct.std::__1::__atomic_base.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.165, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.165 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.10 }
%struct.SkISize = type { i32, i32 }
%class.SkTHashMap.166 = type { %class.SkTHashTable.167 }
%class.SkTHashTable.167 = type { i32, i32, %class.SkAutoTArray.168 }
%class.SkAutoTArray.168 = type { %"class.std::__1::unique_ptr.169" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.11, %class.sk_sp.181, %class.sk_sp.181 }
%class.sk_sp.181 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.185" = type { %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.203 }
%class.SkAlignedSTStorage = type { [64 x i8] }
%class.SkTArray.203 = type { %"struct.GrGpu::SubmittedProc"*, i64 }
%"struct.GrGpu::SubmittedProc" = type { void (i8*, i1)*, i8* }
%class.sk_sp.204 = type { %struct.GrVkInterface* }
%struct.GrVkInterface = type { %class.SkRefCnt.base, %"struct.GrVkInterface::Functions" }
%"struct.GrVkInterface::Functions" = type { %"class.GrVkInterface::VkPtr", %"class.GrVkInterface::VkPtr.205", %"class.GrVkInterface::VkPtr.206", %"class.GrVkInterface::VkPtr.207", %"class.GrVkInterface::VkPtr.208", %"class.GrVkInterface::VkPtr.209", %"class.GrVkInterface::VkPtr.210", %"class.GrVkInterface::VkPtr.211", %"class.GrVkInterface::VkPtr.212", %"class.GrVkInterface::VkPtr.213", %"class.GrVkInterface::VkPtr.214", %"class.GrVkInterface::VkPtr.215", %"class.GrVkInterface::VkPtr.216", %"class.GrVkInterface::VkPtr.217", %"class.GrVkInterface::VkPtr.218", %"class.GrVkInterface::VkPtr.219", %"class.GrVkInterface::VkPtr.220", %"class.GrVkInterface::VkPtr.221", %"class.GrVkInterface::VkPtr.222", %"class.GrVkInterface::VkPtr.223", %"class.GrVkInterface::VkPtr.224", %"class.GrVkInterface::VkPtr.225", %"class.GrVkInterface::VkPtr.226", %"class.GrVkInterface::VkPtr.227", %"class.GrVkInterface::VkPtr.227", %"class.GrVkInterface::VkPtr.228", %"class.GrVkInterface::VkPtr.229", %"class.GrVkInterface::VkPtr.230", %"class.GrVkInterface::VkPtr.231", %"class.GrVkInterface::VkPtr.232", %"class.GrVkInterface::VkPtr.233", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.235", %"class.GrVkInterface::VkPtr.236", %"class.GrVkInterface::VkPtr.237", %"class.GrVkInterface::VkPtr.238", %"class.GrVkInterface::VkPtr.239", %"class.GrVkInterface::VkPtr.240", %"class.GrVkInterface::VkPtr.241", %"class.GrVkInterface::VkPtr.242", %"class.GrVkInterface::VkPtr.243", %"class.GrVkInterface::VkPtr.244", %"class.GrVkInterface::VkPtr.245", %"class.GrVkInterface::VkPtr.245", %"class.GrVkInterface::VkPtr.245", %"class.GrVkInterface::VkPtr.246", %"class.GrVkInterface::VkPtr.247", %"class.GrVkInterface::VkPtr.248", %"class.GrVkInterface::VkPtr.249", %"class.GrVkInterface::VkPtr.250", %"class.GrVkInterface::VkPtr.251", %"class.GrVkInterface::VkPtr.252", %"class.GrVkInterface::VkPtr.253", %"class.GrVkInterface::VkPtr.254", %"class.GrVkInterface::VkPtr.255", %"class.GrVkInterface::VkPtr.256", %"class.GrVkInterface::VkPtr.257", %"class.GrVkInterface::VkPtr.258", %"class.GrVkInterface::VkPtr.259", %"class.GrVkInterface::VkPtr.260", %"class.GrVkInterface::VkPtr.261", %"class.GrVkInterface::VkPtr.262", %"class.GrVkInterface::VkPtr.263", %"class.GrVkInterface::VkPtr.264", %"class.GrVkInterface::VkPtr.265", %"class.GrVkInterface::VkPtr.266", %"class.GrVkInterface::VkPtr.267", %"class.GrVkInterface::VkPtr.268", %"class.GrVkInterface::VkPtr.269", %"class.GrVkInterface::VkPtr.270", %"class.GrVkInterface::VkPtr.271", %"class.GrVkInterface::VkPtr.272", %"class.GrVkInterface::VkPtr.273", %"class.GrVkInterface::VkPtr.274", %"class.GrVkInterface::VkPtr.275", %"class.GrVkInterface::VkPtr.276", %"class.GrVkInterface::VkPtr.277", %"class.GrVkInterface::VkPtr.278", %"class.GrVkInterface::VkPtr.279", %"class.GrVkInterface::VkPtr.280", %"class.GrVkInterface::VkPtr.281", %"class.GrVkInterface::VkPtr.282", %"class.GrVkInterface::VkPtr.283", %"class.GrVkInterface::VkPtr.284", %"class.GrVkInterface::VkPtr.285", %"class.GrVkInterface::VkPtr.286", %"class.GrVkInterface::VkPtr.287", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.289", %"class.GrVkInterface::VkPtr.290", %"class.GrVkInterface::VkPtr.291", %"class.GrVkInterface::VkPtr.292", %"class.GrVkInterface::VkPtr.293", %"class.GrVkInterface::VkPtr.294", %"class.GrVkInterface::VkPtr.295", %"class.GrVkInterface::VkPtr.296", %"class.GrVkInterface::VkPtr.297", %"class.GrVkInterface::VkPtr.298", %"class.GrVkInterface::VkPtr.299", %"class.GrVkInterface::VkPtr.299", %"class.GrVkInterface::VkPtr.299", %"class.GrVkInterface::VkPtr.300", %"class.GrVkInterface::VkPtr.301", %"class.GrVkInterface::VkPtr.302", %"class.GrVkInterface::VkPtr.303", %"class.GrVkInterface::VkPtr.304", %"class.GrVkInterface::VkPtr.305", %"class.GrVkInterface::VkPtr.305", %"class.GrVkInterface::VkPtr.306", %"class.GrVkInterface::VkPtr.307", %"class.GrVkInterface::VkPtr.308", %"class.GrVkInterface::VkPtr.309", %"class.GrVkInterface::VkPtr.310", %"class.GrVkInterface::VkPtr.311", %"class.GrVkInterface::VkPtr.312", %"class.GrVkInterface::VkPtr.313", %"class.GrVkInterface::VkPtr.314", %"class.GrVkInterface::VkPtr.315", %"class.GrVkInterface::VkPtr.316", %"class.GrVkInterface::VkPtr.317", %"class.GrVkInterface::VkPtr.318", %"class.GrVkInterface::VkPtr.319", %"class.GrVkInterface::VkPtr.319", %"class.GrVkInterface::VkPtr.320", %"class.GrVkInterface::VkPtr.321", %"class.GrVkInterface::VkPtr.322", %"class.GrVkInterface::VkPtr.323", %"class.GrVkInterface::VkPtr.322", %"class.GrVkInterface::VkPtr.324", %"class.GrVkInterface::VkPtr.325", %"class.GrVkInterface::VkPtr.326", %"class.GrVkInterface::VkPtr.327", %"class.GrVkInterface::VkPtr.328", %"class.GrVkInterface::VkPtr.329", %"class.GrVkInterface::VkPtr.330", %"class.GrVkInterface::VkPtr.331", %"class.GrVkInterface::VkPtr.332", %"class.GrVkInterface::VkPtr.333", %"class.GrVkInterface::VkPtr.334", %"class.GrVkInterface::VkPtr.335", %"class.GrVkInterface::VkPtr.336", %"class.GrVkInterface::VkPtr.337", %"class.GrVkInterface::VkPtr.338", %"class.GrVkInterface::VkPtr.339", %"class.GrVkInterface::VkPtr.340", %"class.GrVkInterface::VkPtr.341", %"class.GrVkInterface::VkPtr.342", %"class.GrVkInterface::VkPtr.343", %"class.GrVkInterface::VkPtr.344", %"class.GrVkInterface::VkPtr.345", %"class.GrVkInterface::VkPtr.346", %"class.GrVkInterface::VkPtr.347" }
%"class.GrVkInterface::VkPtr" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkInstance_T = type opaque
%"class.GrVkInterface::VkPtr.205" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.206" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.GrVkInterface::VkPtr.207" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)* }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.208" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.209" = type { i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)* }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.210" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%"class.GrVkInterface::VkPtr.211" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.212" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%"class.GrVkInterface::VkPtr.213" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%"class.GrVkInterface::VkPtr.214" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.215" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.GrVkInterface::VkPtr.216" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.GrVkInterface::VkPtr.217" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.GrVkInterface::VkPtr.218" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.GrVkInterface::VkPtr.219" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%"class.GrVkInterface::VkPtr.220" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkCommandBuffer_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkFence_T = type opaque
%"class.GrVkInterface::VkPtr.221" = type { i32 (%struct.VkQueue_T*)* }
%"class.GrVkInterface::VkPtr.222" = type { i32 (%struct.VkDevice_T*)* }
%"class.GrVkInterface::VkPtr.223" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%"class.GrVkInterface::VkPtr.224" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.225" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.GrVkInterface::VkPtr.226" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.GrVkInterface::VkPtr.227" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.GrVkInterface::VkPtr.228" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)* }
%"class.GrVkInterface::VkPtr.229" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkBuffer_T = type opaque
%"class.GrVkInterface::VkPtr.230" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%"class.GrVkInterface::VkPtr.231" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.GrVkInterface::VkPtr.232" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.GrVkInterface::VkPtr.233" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)* }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%"class.GrVkInterface::VkPtr.234" = type { void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)* }
%"class.GrVkInterface::VkPtr.235" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)* }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.236" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.237" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.238" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.GrVkInterface::VkPtr.239" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.GrVkInterface::VkPtr.240" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.GrVkInterface::VkPtr.241" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.242" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.243" = type { i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)* }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%"class.GrVkInterface::VkPtr.244" = type { void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.245" = type { i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* }
%"class.GrVkInterface::VkPtr.246" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)* }
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%"class.GrVkInterface::VkPtr.247" = type { void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.248" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)* }
%"class.GrVkInterface::VkPtr.249" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.GrVkInterface::VkPtr.250" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.251" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%"class.GrVkInterface::VkPtr.252" = type { void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.253" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.GrVkInterface::VkPtr.254" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.255" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.GrVkInterface::VkPtr.256" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.GrVkInterface::VkPtr.257" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.258" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%"class.GrVkInterface::VkPtr.259" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.260" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)* }
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%"class.GrVkInterface::VkPtr.261" = type { void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.262" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)* }
%"class.GrVkInterface::VkPtr.263" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)* }
%"class.GrVkInterface::VkPtr.264" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkRenderPass_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.GrVkInterface::VkPtr.265" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%"class.GrVkInterface::VkPtr.266" = type { void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.267" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)* }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkPushConstantRange = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.268" = type { void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.269" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSampler_T = type opaque
%"class.GrVkInterface::VkPtr.270" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.271" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%"class.GrVkInterface::VkPtr.272" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.273" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorPool_T = type opaque
%"class.GrVkInterface::VkPtr.274" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.275" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.276" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorSet_T = type opaque
%"class.GrVkInterface::VkPtr.277" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.GrVkInterface::VkPtr.278" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.279" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%"class.GrVkInterface::VkPtr.280" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.281" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.282" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.283" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)* }
%"class.GrVkInterface::VkPtr.284" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%"class.GrVkInterface::VkPtr.285" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.286" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.287" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%"class.GrVkInterface::VkPtr.288" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.289" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.290" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.291" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.292" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)* }
%"class.GrVkInterface::VkPtr.293" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)* }
%"class.GrVkInterface::VkPtr.294" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)* }
%"class.GrVkInterface::VkPtr.295" = type { void (%struct.VkCommandBuffer_T*, float)* }
%"class.GrVkInterface::VkPtr.296" = type { void (%struct.VkCommandBuffer_T*, float, float, float)* }
%"class.GrVkInterface::VkPtr.297" = type { void (%struct.VkCommandBuffer_T*, float*)* }
%"class.GrVkInterface::VkPtr.298" = type { void (%struct.VkCommandBuffer_T*, float, float)* }
%"class.GrVkInterface::VkPtr.299" = type { void (%struct.VkCommandBuffer_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.300" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)* }
%"class.GrVkInterface::VkPtr.301" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)* }
%"class.GrVkInterface::VkPtr.302" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)* }
%"class.GrVkInterface::VkPtr.303" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.304" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.305" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* }
%"class.GrVkInterface::VkPtr.306" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.307" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)* }
%"class.GrVkInterface::VkPtr.308" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.GrVkInterface::VkPtr.309" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)* }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.310" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)* }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%"class.GrVkInterface::VkPtr.311" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.312" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)* }
%"class.GrVkInterface::VkPtr.313" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)* }
%"class.GrVkInterface::VkPtr.314" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.315" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)* }
%union.VkClearColorValue = type { [4 x float] }
%"class.GrVkInterface::VkPtr.316" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)* }
%struct.VkClearDepthStencilValue = type { float, i32 }
%"class.GrVkInterface::VkPtr.317" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)* }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%"class.GrVkInterface::VkPtr.318" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)* }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.319" = type { void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* }
%"class.GrVkInterface::VkPtr.320" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%"class.GrVkInterface::VkPtr.321" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%"class.GrVkInterface::VkPtr.323" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.322" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.324" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.325" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.326" = type { void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)* }
%"class.GrVkInterface::VkPtr.327" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%"class.GrVkInterface::VkPtr.328" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.329" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.330" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.331" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%"class.GrVkInterface::VkPtr.332" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.GrVkInterface::VkPtr.333" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.GrVkInterface::VkPtr.334" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%"class.GrVkInterface::VkPtr.335" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)* }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%"class.GrVkInterface::VkPtr.336" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.GrVkInterface::VkPtr.337" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)* }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%"class.GrVkInterface::VkPtr.338" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.GrVkInterface::VkPtr.339" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%"class.GrVkInterface::VkPtr.340" = type { void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%"class.GrVkInterface::VkPtr.341" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.342" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.343" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.344" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)* }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.345" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)* }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.346" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)* }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%struct.VkSamplerYcbcrConversion_T = type opaque
%"class.GrVkInterface::VkPtr.347" = type { void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)* }
%class.sk_sp.348 = type { %class.GrVkMemoryAllocator* }
%class.GrVkMemoryAllocator = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.349 = type { %class.GrVkCaps* }
%class.GrVkCaps = type <{ %class.GrCaps.base, i8, [22 x %"struct.GrVkCaps::FormatInfo"], [31 x i32], i32, %class.SkSTArray.357, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, [2 x i8], i32, [4 x i8] }>
%class.GrCaps.base = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.12, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8 }>
%"struct.GrVkCaps::FormatInfo" = type <{ i16, i16, [4 x i8], %class.SkTDArray.350, %"class.std::__1::unique_ptr.351", i32, [4 x i8] }>
%class.SkTDArray.350 = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.351" = type { %"class.std::__1::__compressed_pair.352" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.353" }
%"struct.std::__1::__compressed_pair_elem.353" = type { %"struct.GrVkCaps::ColorTypeInfo"* }
%"struct.GrVkCaps::ColorTypeInfo" = type { i32, i32, i32, %class.GrSwizzle, %class.GrSwizzle }
%class.GrSwizzle = type { i16 }
%class.SkSTArray.357 = type { %class.SkAlignedSTStorage.358, %class.SkTArray.359 }
%class.SkAlignedSTStorage.358 = type { [48 x i8] }
%class.SkTArray.359 = type { %struct.GrVkYcbcrConversionInfo*, i64 }
%struct.VkPhysicalDevice_T = type opaque
%struct.VkDevice_T = type opaque
%struct.VkQueue_T = type opaque
%class.GrVkResourceProvider = type { %class.GrVkGpu*, %struct.VkPipelineCache_T*, %class.SkTArray.360, %class.SkSTArray.362, %class.SkTArray.368, %class.SkSTArray.369, %class.SkMutex, %class.SkSTArray.369, %class.SkTDynamicHash.372, %class.SkTDynamicHash.381, %class.sk_sp.390, %class.SkSTArray.399, %class.GrResourceHandle, %class.GrResourceHandle }
%class.SkTArray.360 = type { %"struct.GrVkResourceProvider::MSAALoadPipeline"*, i64 }
%"struct.GrVkResourceProvider::MSAALoadPipeline" = type { %class.sk_sp.361, %class.GrVkRenderPass* }
%class.sk_sp.361 = type { %class.GrVkPipeline* }
%class.GrVkPipeline = type opaque
%class.GrVkRenderPass = type <{ %class.GrVkManagedResource, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor", i32, i32, %struct.VkExtent2D, i32, i32, i32, [4 x i8] }>
%class.GrVkManagedResource = type { %class.GrManagedResource.base, %class.GrVkGpu* }
%"struct.GrVkRenderPass::AttachmentsDescriptor" = type { %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", i32 }
%"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc" = type { i32, i32, %"struct.GrVkRenderPass::LoadStoreOps" }
%"struct.GrVkRenderPass::LoadStoreOps" = type { i32, i32 }
%class.SkSTArray.362 = type { %class.SkAlignedSTStorage.363, %class.SkTArray.364 }
%class.SkAlignedSTStorage.363 = type { [224 x i8] }
%class.SkTArray.364 = type { %"class.GrVkResourceProvider::CompatibleRenderPassSet"*, i64 }
%"class.GrVkResourceProvider::CompatibleRenderPassSet" = type <{ %class.SkSTArray.365, i32, [4 x i8] }>
%class.SkSTArray.365 = type { %class.SkAlignedSTStorage.366, %class.SkTArray.367 }
%class.SkAlignedSTStorage.366 = type { [32 x i8] }
%class.SkTArray.367 = type { %class.GrVkRenderPass**, i64 }
%class.SkTArray.368 = type { %class.GrVkRenderPass**, i64 }
%class.SkSTArray.369 = type { %class.SkAlignedSTStorage.370, %class.SkTArray.371 }
%class.SkAlignedSTStorage.370 = type { [32 x i8] }
%class.SkTArray.371 = type { %class.GrVkCommandPool**, i64 }
%class.SkTDynamicHash.372 = type { %class.SkTHashTable.373 }
%class.SkTHashTable.373 = type { i32, i32, %class.SkAutoTArray.374 }
%class.SkAutoTArray.374 = type { %"class.std::__1::unique_ptr.375" }
%"class.std::__1::unique_ptr.375" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.381 = type { %class.SkTHashTable.382 }
%class.SkTHashTable.382 = type { i32, i32, %class.SkAutoTArray.383 }
%class.SkAutoTArray.383 = type { %"class.std::__1::unique_ptr.384" }
%"class.std::__1::unique_ptr.384" = type { %"class.std::__1::__compressed_pair.385" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot" = type opaque
%class.sk_sp.390 = type { %"class.GrVkResourceProvider::PipelineStateCache"* }
%"class.GrVkResourceProvider::PipelineStateCache" = type { %class.GrThreadSafePipelineBuilder.base, %class.SkLRUCache, %class.GrVkGpu* }
%class.GrThreadSafePipelineBuilder.base = type { %class.SkRefCnt.base, %"class.GrThreadSafePipelineBuilder::Stats" }
%"class.GrThreadSafePipelineBuilder::Stats" = type { i8 }
%class.SkLRUCache = type { i32, %class.SkTHashTable.391, %class.SkTInternalLList }
%class.SkTHashTable.391 = type { i32, i32, %class.SkAutoTArray.392 }
%class.SkAutoTArray.392 = type { %"class.std::__1::unique_ptr.393" }
%"class.std::__1::unique_ptr.393" = type { %"class.std::__1::__compressed_pair.394" }
%"class.std::__1::__compressed_pair.394" = type { %"struct.std::__1::__compressed_pair_elem.395" }
%"struct.std::__1::__compressed_pair_elem.395" = type { %"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot"* }
%"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot" = type opaque
%class.SkTInternalLList = type { %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"*, %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"* }
%"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry" = type opaque
%class.SkSTArray.399 = type { %class.SkAlignedSTStorage.400, %class.SkTArray.401 }
%class.SkAlignedSTStorage.400 = type { [32 x i8] }
%class.SkTArray.401 = type { %"class.std::__1::unique_ptr.402"*, i64 }
%"class.std::__1::unique_ptr.402" = type { %"class.std::__1::__compressed_pair.403" }
%"class.std::__1::__compressed_pair.403" = type { %"struct.std::__1::__compressed_pair_elem.404" }
%"struct.std::__1::__compressed_pair_elem.404" = type { %class.GrVkDescriptorSetManager* }
%class.GrVkDescriptorSetManager = type { %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %class.SkTArray.405, %class.SkSTArray.406, %class.SkSTArray.409 }
%"struct.GrVkDescriptorSetManager::DescriptorPoolManager" = type { %struct.VkDescriptorSetLayout_T*, i32, i32, i32, i32, %class.GrVkDescriptorPool* }
%class.GrVkDescriptorPool = type { %class.GrVkManagedResource, i32, i32, %struct.VkDescriptorPool_T* }
%class.SkTArray.405 = type { %class.GrVkDescriptorSet**, i64 }
%class.GrVkDescriptorSet = type <{ %class.GrVkRecycledResource, %struct.VkDescriptorSet_T*, %class.GrVkDescriptorPool*, %class.GrResourceHandle, [4 x i8] }>
%class.GrVkRecycledResource = type { %class.GrRecycledResource.base, %class.GrVkGpu* }
%class.GrRecycledResource.base = type { %class.GrManagedResource.base }
%class.SkSTArray.406 = type { %class.SkAlignedSTStorage.407, %class.SkTArray.408 }
%class.SkAlignedSTStorage.407 = type { [16 x i8] }
%class.SkTArray.408 = type { i32*, i64 }
%class.SkSTArray.409 = type { %class.SkAlignedSTStorage.410, %class.SkTArray.411 }
%class.SkAlignedSTStorage.410 = type { [32 x i8] }
%class.SkTArray.411 = type { %class.GrVkSampler**, i64 }
%class.GrVkSampler = type <{ %class.GrVkManagedResource, %struct.VkSampler_T*, %class.GrVkSamplerYcbcrConversion*, %"struct.GrVkSampler::Key", i32, [4 x i8] }>
%class.GrVkSamplerYcbcrConversion = type { %class.GrVkManagedResource, %struct.VkSamplerYcbcrConversion_T*, %"struct.GrVkSamplerYcbcrConversion::Key" }
%"struct.GrVkSamplerYcbcrConversion::Key" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.GrVkSampler::Key" = type { i8, [7 x i8], %"struct.GrVkSamplerYcbcrConversion::Key" }
%class.GrResourceHandle = type { i32 }
%class.GrStagingBufferManager = type { %"class.std::__1::vector.415", %class.GrGpu* }
%"class.std::__1::vector.415" = type { %"class.std::__1::__vector_base.416" }
%"class.std::__1::__vector_base.416" = type { %"struct.GrStagingBufferManager::StagingBuffer"*, %"struct.GrStagingBufferManager::StagingBuffer"*, %"class.std::__1::__compressed_pair.418" }
%"struct.GrStagingBufferManager::StagingBuffer" = type { %class.sk_sp.417, i8*, i64 }
%class.sk_sp.417 = type { %class.GrGpuBuffer* }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.419" }
%"struct.std::__1::__compressed_pair_elem.419" = type { %"struct.GrStagingBufferManager::StagingBuffer"* }
%class.GrVkMSAALoadManager = type { %struct.VkShaderModule_T*, %struct.VkShaderModule_T*, [2 x %struct.VkPipelineShaderStageCreateInfo], %struct.VkPipelineLayout_T* }
%class.GrVkCommandPool = type opaque
%class.GrVkPrimaryCommandBuffer = type opaque
%class.SkSTArray.423 = type { %class.SkAlignedSTStorage.424, %class.SkTArray.425 }
%class.SkAlignedSTStorage.424 = type { [8 x i8] }
%class.SkTArray.425 = type { %"class.GrVkSemaphore::Resource"**, i64 }
%"class.GrVkSemaphore::Resource" = type <{ %class.GrVkManagedResource, %struct.VkSemaphore_T*, i8, i8, i8, [5 x i8] }>
%class.SkTArray.426 = type { %"class.std::__1::unique_ptr.427"*, i64 }
%"class.std::__1::unique_ptr.427" = type { %"class.std::__1::__compressed_pair.428" }
%"class.std::__1::__compressed_pair.428" = type { %"struct.std::__1::__compressed_pair_elem.429" }
%"struct.std::__1::__compressed_pair_elem.429" = type { %"class.SkDrawable::GpuDrawHandler"* }
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.std::__1::unique_ptr.433" = type { %"class.std::__1::__compressed_pair.434" }
%"class.std::__1::__compressed_pair.434" = type { %"struct.std::__1::__compressed_pair_elem.435" }
%"struct.std::__1::__compressed_pair_elem.435" = type { %class.GrVkOpsRenderPass* }
%class.GrVkOpsRenderPass = type opaque
%class.GrManagedResource = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"struct.GrVkImage::ImageDesc" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.GrVkImage::BorrowedResource" = type { %"class.GrVkImage::Resource.base", [4 x i8] }
%"class.GrVkImage::Resource.base" = type <{ %class.GrTextureResource, %class.GrVkGpu*, %struct.VkImage_T*, %struct.GrVkAlloc, i32 }>

$_ZN9GrVkImage8ResourceD0Ev = comdat any

$_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv = comdat any

$_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv = comdat any

$_ZN9GrVkImage16BorrowedResourceD0Ev = comdat any

$_ZN17GrTextureResourceD2Ev = comdat any

$_ZN17GrTextureResourceD0Ev = comdat any

$_ZTV17GrTextureResource = comdat any

@_ZTV9GrVkImage = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrVkImage*)* @_ZN9GrVkImageD2Ev to i8*), i8* bitcast (void (%class.GrVkImage*)* @_ZN9GrVkImageD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [48 x i8] c"../../third_party/skia/src/gpu/vk/GrVkImage.cpp\00", align 1
@.str.1 = private unnamed_addr constant [93 x i8] c"Failed vulkan call. Error: %d,CreateImage(gpu->device(), &imageCreateInfo, nullptr, &image)\0A\00", align 1
@_ZTVN9GrVkImage8ResourceE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrTextureResource*)* @_ZN17GrTextureResourceD2Ev to i8*), i8* bitcast (void (%"class.GrVkImage::Resource"*)* @_ZN9GrVkImage8ResourceD0Ev to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv to i8*), i8* bitcast (void (%"class.GrVkImage::Resource"*)* @_ZNK9GrVkImage8Resource11freeGPUDataEv to i8*)] }, align 8
@_ZTVN9GrVkImage16BorrowedResourceE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrTextureResource*)* @_ZN17GrTextureResourceD2Ev to i8*), i8* bitcast (void (%"class.GrVkImage::BorrowedResource"*)* @_ZN9GrVkImage16BorrowedResourceD0Ev to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv to i8*), i8* bitcast (void (%"class.GrVkImage::BorrowedResource"*)* @_ZNK9GrVkImage16BorrowedResource11freeGPUDataEv to i8*)] }, align 8
@_ZTV17GrTextureResource = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrTextureResource*)* @_ZN17GrTextureResourceD2Ev to i8*), i8* bitcast (void (%class.GrTextureResource*)* @_ZN17GrTextureResourceD0Ev to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@switch.table._ZN9GrVkImage21LayoutToSrcAccessMaskE13VkImageLayout = private unnamed_addr constant [8 x i32] [i32 21760, i32 256, i32 1024, i32 0, i32 0, i32 0, i32 4096, i32 16384], align 4
@switch.table._ZN9GrVkImage27setImageLayoutAndQueueIndexEPK7GrVkGpu13VkImageLayoutjjbj = private unnamed_addr constant [4 x i32] [i32 4, i32 1, i32 6, i32 6], align 4

@_ZN9GrVkImageC1EPK7GrVkGpuRK13GrVkImageInfo5sk_spI32GrBackendSurfaceMutableStateImplE24GrBackendObjectOwnershipb = hidden unnamed_addr alias void (%class.GrVkImage*, %class.GrVkGpu*, %struct.GrVkImageInfo*, %class.sk_sp*, i1, i1), void (%class.GrVkImage*, %class.GrVkGpu*, %struct.GrVkImageInfo*, %class.sk_sp*, i1, i1)* @_ZN9GrVkImageC2EPK7GrVkGpuRK13GrVkImageInfo5sk_spI32GrBackendSurfaceMutableStateImplE24GrBackendObjectOwnershipb
@_ZN9GrVkImageD1Ev = hidden unnamed_addr alias void (%class.GrVkImage*), void (%class.GrVkImage*)* @_ZN9GrVkImageD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImageC2EPK7GrVkGpuRK13GrVkImageInfo5sk_spI32GrBackendSurfaceMutableStateImplE24GrBackendObjectOwnershipb(%class.GrVkImage* nocapture, %class.GrVkGpu*, %struct.GrVkImageInfo* nocapture readonly dereferenceable(144), %class.sk_sp* nocapture, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV9GrVkImage, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 1
  %9 = bitcast %struct.GrVkImageInfo* %8 to i8*
  %10 = bitcast %struct.GrVkImageInfo* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 144, i1 false)
  %11 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 2
  %12 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 8
  %13 = load i32, i32* %12, align 8
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 3
  %15 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %16 = bitcast %class.sk_sp* %3 to i64*
  %17 = load i64, i64* %16, align 8
  store %class.GrBackendSurfaceMutableStateImpl* null, %class.GrBackendSurfaceMutableStateImpl** %15, align 8
  %18 = bitcast %class.sk_sp* %14 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 4
  %20 = xor i1 %4, true
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 8
  br i1 %5, label %22, label %24

22:                                               ; preds = %6
  %23 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 5
  store %"class.GrVkImage::Resource"* null, %"class.GrVkImage::Resource"** %23, align 8
  br label %50

24:                                               ; preds = %6
  %25 = tail call i8* @_Znwm(i64 96) #8
  %26 = bitcast %struct.GrVkImageInfo* %2 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 1
  %29 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = bitcast i8* %25 to i32 (...)***
  %32 = getelementptr inbounds i8, i8* %25, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 1, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %25, i64 16
  %35 = bitcast i8* %34 to %class.GrRefCntedCallback**
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %35, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN9GrVkImage8ResourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %36 = getelementptr inbounds i8, i8* %25, i64 24
  %37 = bitcast i8* %36 to %class.GrVkGpu**
  store %class.GrVkGpu* %1, %class.GrVkGpu** %37, align 8
  %38 = getelementptr inbounds i8, i8* %25, i64 32
  %39 = bitcast i8* %38 to i64*
  store i64 %27, i64* %39, align 8
  %40 = getelementptr inbounds i8, i8* %25, i64 40
  %41 = bitcast %struct.GrVkAlloc* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 48, i1 false) #9
  %42 = getelementptr inbounds i8, i8* %25, i64 88
  %43 = bitcast i8* %42 to i32*
  store i32 %30, i32* %43, align 8
  br i1 %4, label %47, label %44

44:                                               ; preds = %24
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN9GrVkImage16BorrowedResourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %31, align 8
  %45 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 5
  %46 = bitcast %"class.GrVkImage::Resource"** %45 to i8**
  store i8* %25, i8** %46, align 8
  br label %50

47:                                               ; preds = %24
  %48 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 5
  %49 = bitcast %"class.GrVkImage::Resource"** %48 to i8**
  store i8* %25, i8** %49, align 8
  br label %50

50:                                               ; preds = %44, %47, %22
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN9GrVkImage29LayoutToPipelineSrcStageFlagsE13VkImageLayout(i32) local_unnamed_addr #3 align 2 {
  %2 = icmp eq i32 %0, 1
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = or i32 %0, 1
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %15, label %6

6:                                                ; preds = %3
  %7 = icmp eq i32 %0, 2
  br i1 %7, label %15, label %8

8:                                                ; preds = %6
  %9 = add i32 %0, -3
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %15, label %11

11:                                               ; preds = %8
  switch i32 %0, label %14 [
    i32 5, label %15
    i32 8, label %12
    i32 1000001002, label %13
  ]

12:                                               ; preds = %11
  br label %15

13:                                               ; preds = %11
  br label %15

14:                                               ; preds = %11
  br label %15

15:                                               ; preds = %11, %8, %6, %3, %1, %14, %13, %12
  %16 = phi i32 [ 16384, %12 ], [ 1024, %13 ], [ 1, %14 ], [ 65536, %1 ], [ 4096, %3 ], [ 1024, %6 ], [ 512, %8 ], [ 128, %11 ]
  ret i32 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN9GrVkImage21LayoutToSrcAccessMaskE13VkImageLayout(i32) local_unnamed_addr #3 align 2 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 8
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table._ZN9GrVkImage21LayoutToSrcAccessMaskE13VkImageLayout, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7

8:                                                ; preds = %1
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z25vk_format_to_aspect_flags8VkFormat(i32) local_unnamed_addr #3 {
  %2 = add i32 %0, -127
  %3 = icmp ult i32 %2, 4
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN9GrVkImage27setImageLayoutAndQueueIndexEPK7GrVkGpu13VkImageLayoutjjbj, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7

8:                                                ; preds = %1
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImage27setImageLayoutAndQueueIndexEPK7GrVkGpu13VkImageLayoutjjbj(%class.GrVkImage* nocapture readonly, %class.GrVkGpu*, i32, i32, i32, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %struct.VkImageMemoryBarrier, align 8
  %9 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 3, i32 0
  %10 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %9, align 8
  %11 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %10, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 seq_cst, align 4
  %13 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %9, align 8
  %14 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %13, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 seq_cst, align 4
  %16 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 1
  %17 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 1, i32 12
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %31

20:                                               ; preds = %7
  %21 = icmp eq i32 %6, -1
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 8
  %24 = load i32, i32* %23, align 8
  br label %25

25:                                               ; preds = %22, %20
  %26 = phi i32 [ %24, %22 ], [ %6, %20 ]
  %27 = icmp eq i32 %15, -1
  br i1 %27, label %28, label %31

28:                                               ; preds = %25
  %29 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 8
  %30 = load i32, i32* %29, align 8
  br label %31

31:                                               ; preds = %25, %28, %7
  %32 = phi i32 [ %30, %28 ], [ %15, %25 ], [ %15, %7 ]
  %33 = phi i32 [ %26, %28 ], [ %26, %25 ], [ %6, %7 ]
  %34 = icmp eq i32 %12, %2
  %35 = icmp eq i32 %32, %33
  %36 = and i1 %34, %35
  %37 = add i32 %12, -4
  %38 = icmp ult i32 %37, 3
  %39 = and i1 %38, %36
  br i1 %39, label %95, label %40

40:                                               ; preds = %31
  switch i32 %12, label %44 [
    i32 1, label %55
    i32 8, label %51
    i32 2, label %41
    i32 3, label %42
    i32 7, label %43
  ]

41:                                               ; preds = %40
  br label %55

42:                                               ; preds = %40
  br label %55

43:                                               ; preds = %40
  br label %55

44:                                               ; preds = %40
  %45 = or i32 %12, 1
  %46 = icmp eq i32 %45, 7
  br i1 %46, label %55, label %47

47:                                               ; preds = %44
  %48 = add i32 %12, -3
  %49 = icmp ult i32 %48, 2
  br i1 %49, label %55, label %50

50:                                               ; preds = %47
  switch i32 %12, label %54 [
    i32 5, label %55
    i32 8, label %51
    i32 1000001002, label %53
  ]

51:                                               ; preds = %40, %50
  %52 = phi i32 [ 0, %50 ], [ 16384, %40 ]
  br label %55

53:                                               ; preds = %50
  br label %55

54:                                               ; preds = %50
  br label %55

55:                                               ; preds = %42, %41, %43, %40, %44, %47, %50, %51, %53, %54
  %56 = phi i32 [ %52, %51 ], [ 0, %53 ], [ 0, %54 ], [ 0, %44 ], [ 0, %47 ], [ 0, %50 ], [ 21760, %40 ], [ 4096, %43 ], [ 256, %41 ], [ 1024, %42 ]
  %57 = phi i32 [ 16384, %51 ], [ 1024, %53 ], [ 1, %54 ], [ 4096, %44 ], [ 512, %47 ], [ 128, %50 ], [ 65536, %40 ], [ 4096, %43 ], [ 1024, %41 ], [ 512, %42 ]
  %58 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 1, i32 4
  %59 = load i32, i32* %58, align 8
  %60 = add i32 %59, -127
  %61 = icmp ult i32 %60, 4
  br i1 %61, label %62, label %66

62:                                               ; preds = %55
  %63 = sext i32 %60 to i64
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN9GrVkImage27setImageLayoutAndQueueIndexEPK7GrVkGpu13VkImageLayoutjjbj, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  br label %66

66:                                               ; preds = %55, %62
  %67 = phi i32 [ %65, %62 ], [ 1, %55 ]
  %68 = bitcast %struct.VkImageMemoryBarrier* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %68) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %68, i8 -86, i64 72, i1 false)
  %69 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 0
  store i32 45, i32* %69, align 8
  %70 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 1
  store i8* null, i8** %70, align 8
  %71 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 2
  store i32 %56, i32* %71, align 8
  %72 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 3
  store i32 %3, i32* %72, align 4
  %73 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 4
  store i32 %12, i32* %73, align 8
  %74 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 5
  store i32 %2, i32* %74, align 4
  %75 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 6
  store i32 %32, i32* %75, align 8
  %76 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 7
  store i32 %33, i32* %76, align 4
  %77 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 8
  %78 = bitcast %struct.GrVkImageInfo* %16 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %struct.VkImage_T** %77 to i64*
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 9, i32 0
  store i32 %67, i32* %81, align 8
  %82 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 9, i32 1
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 9, i32 2
  %84 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 1, i32 7
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %83, align 8
  %86 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 9, i32 3
  store i32 0, i32* %86, align 4
  %87 = getelementptr inbounds %struct.VkImageMemoryBarrier, %struct.VkImageMemoryBarrier* %8, i64 0, i32 9, i32 4
  store i32 1, i32* %87, align 8
  %88 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 5
  %89 = bitcast %"class.GrVkImage::Resource"** %88 to %class.GrManagedResource**
  %90 = load %class.GrManagedResource*, %class.GrManagedResource** %89, align 8
  call void @_ZNK7GrVkGpu21addImageMemoryBarrierEPK17GrManagedResourcejjbP20VkImageMemoryBarrier(%class.GrVkGpu* %1, %class.GrManagedResource* %90, i32 %57, i32 %4, i1 zeroext %5, %struct.VkImageMemoryBarrier* nonnull %8) #9
  %91 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %9, align 8
  %92 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %91, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 %2, i32* %92 seq_cst, align 4
  %93 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %9, align 8
  %94 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %93, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 %33, i32* %94 seq_cst, align 4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %68) #9
  br label %95

95:                                               ; preds = %31, %66
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK7GrVkGpu21addImageMemoryBarrierEPK17GrManagedResourcejjbP20VkImageMemoryBarrier(%class.GrVkGpu*, %class.GrManagedResource*, i32, i32, i1 zeroext, %struct.VkImageMemoryBarrier*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9GrVkImage13InitImageInfoEP7GrVkGpuRKNS_9ImageDescEP13GrVkImageInfo(%class.GrVkGpu*, %"struct.GrVkImage::ImageDesc"* nocapture readonly dereferenceable(40), %struct.GrVkImageInfo* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkImage_T*, align 8
  %5 = alloca %struct.GrVkAlloc, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.VkImageCreateInfo, align 8
  %8 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %126, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %126, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 9
  %17 = load i8, i8* %16, align 4, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 3, i32 0
  %21 = load %class.GrVkCaps*, %class.GrVkCaps** %20, align 8
  %22 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %21, i64 0, i32 20
  %23 = load i8, i8* %22, align 2, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %126, label %25

25:                                               ; preds = %19, %15
  %26 = bitcast %struct.VkImage_T** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #9
  store %struct.VkImage_T* null, %struct.VkImage_T** %4, align 8
  %27 = bitcast %struct.GrVkAlloc* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %27) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 48, i1 false)
  %28 = getelementptr inbounds %struct.GrVkAlloc, %struct.GrVkAlloc* %5, i64 0, i32 5
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %struct.GrVkAlloc, %struct.GrVkAlloc* %5, i64 0, i32 6
  store i8 0, i8* %29, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 28, i1 false) #9
  %30 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 6
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 1
  %33 = select i1 %32, i32 8, i32 0
  %34 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #9
  store i32 -1431655766, i32* %6, align 4
  %35 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 5
  %36 = load i32, i32* %35, align 4
  %37 = call zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32 %36, i32* nonnull %6) #9
  br i1 %37, label %38, label %124

38:                                               ; preds = %25
  %39 = load i8, i8* %16, align 4, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %38
  %42 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 20
  %43 = load i8, i8* %42, align 1, !range !2
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %41, %38
  br label %46

46:                                               ; preds = %41, %45
  %47 = phi i32 [ 2048, %45 ], [ 0, %41 ]
  %48 = bitcast %struct.VkImageCreateInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %48) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 88, i1 false)
  %49 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 0
  store i32 14, i32* %49, align 8
  %50 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 1
  store i8* null, i8** %50, align 8
  %51 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 2
  store i32 %47, i32* %51, align 8
  %52 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 3
  %53 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 1
  %54 = bitcast %"struct.GrVkImage::ImageDesc"* %1 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4
  %56 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %56, align 4
  %57 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 5, i32 2
  store i32 1, i32* %57, align 4
  %58 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 6
  %59 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 4
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %58, align 8
  %61 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 7
  store i32 1, i32* %61, align 4
  %62 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 8
  %63 = load i32, i32* %6, align 4
  store i32 %63, i32* %62, align 8
  %64 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 9
  %65 = load i32, i32* %30, align 4
  store i32 %65, i32* %64, align 4
  %66 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 10
  %67 = getelementptr inbounds %"struct.GrVkImage::ImageDesc", %"struct.GrVkImage::ImageDesc"* %1, i64 0, i32 7
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %66, align 8
  %69 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 11
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 12
  store i32 0, i32* %70, align 8
  %71 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 13
  store i32* null, i32** %71, align 8
  %72 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %7, i64 0, i32 14
  store i32 %33, i32* %72, align 8
  %73 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %74 = load %struct.GrVkInterface*, %struct.GrVkInterface** %73, align 8
  %75 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %74, i64 0, i32 1, i32 52, i32 0
  %76 = load i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %75, align 8
  %77 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %78 = load %struct.VkDevice_T*, %struct.VkDevice_T** %77, align 8
  %79 = call i32 %76(%struct.VkDevice_T* %78, %struct.VkImageCreateInfo* nonnull %7, %struct.VkAllocationCallbacks* null, %struct.VkImage_T** nonnull %4) #9
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %90, label %81

81:                                               ; preds = %46
  %82 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %83 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %82, align 8
  %84 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %83, i64 8
  %85 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %84, align 8
  %86 = call zeroext i1 %85(%class.GrVkGpu* %0) #9
  br i1 %86, label %88, label %87

87:                                               ; preds = %81
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.1, i64 0, i64 0), i32 %79) #9
  br label %88

88:                                               ; preds = %87, %81
  %89 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %79) #9
  br label %122

90:                                               ; preds = %46
  %91 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #9
  %92 = load %struct.VkImage_T*, %struct.VkImage_T** %4, align 8
  %93 = call zeroext i1 @_ZN10GrVkMemory23AllocAndBindImageMemoryEP7GrVkGpuP9VkImage_TbP9GrVkAlloc(%class.GrVkGpu* %0, %struct.VkImage_T* %92, i1 zeroext %32, %struct.GrVkAlloc* nonnull %5) #9
  br i1 %93, label %100, label %94

94:                                               ; preds = %90
  %95 = load %struct.GrVkInterface*, %struct.GrVkInterface** %73, align 8
  %96 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %95, i64 0, i32 1, i32 53, i32 0
  %97 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %96, align 8
  %98 = load %struct.VkDevice_T*, %struct.VkDevice_T** %77, align 8
  %99 = load %struct.VkImage_T*, %struct.VkImage_T** %4, align 8
  call void %97(%struct.VkDevice_T* %98, %struct.VkImage_T* %99, %struct.VkAllocationCallbacks* null) #9
  br label %122

100:                                              ; preds = %90
  %101 = bitcast %struct.VkImage_T** %4 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %struct.GrVkImageInfo* %2 to i64*
  store i64 %102, i64* %103, align 8
  %104 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 1
  %105 = bitcast %struct.GrVkAlloc* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* nonnull align 8 %27, i64 41, i1 false)
  %106 = load i32, i32* %30, align 4
  %107 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 2
  store i32 %106, i32* %107, align 8
  %108 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 3
  store i32 %33, i32* %108, align 4
  %109 = load i32, i32* %53, align 4
  %110 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 4
  store i32 %109, i32* %110, align 8
  %111 = load i32, i32* %67, align 4
  %112 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 5
  store i32 %111, i32* %112, align 4
  %113 = load i32, i32* %35, align 4
  %114 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 6
  store i32 %113, i32* %114, align 8
  %115 = load i32, i32* %59, align 4
  %116 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 7
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 8
  store i32 -1, i32* %117, align 8
  %118 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 9
  %119 = lshr exact i32 %47, 11
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %118, align 4
  %121 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %2, i64 0, i32 12
  store i32 0, i32* %121, align 8
  br label %122

122:                                              ; preds = %88, %100, %94
  %123 = phi i1 [ true, %100 ], [ false, %94 ], [ false, %88 ]
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %48) #9
  br label %124

124:                                              ; preds = %25, %122
  %125 = phi i1 [ %123, %122 ], [ false, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %27) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #9
  br label %126

126:                                              ; preds = %19, %3, %11, %124
  %127 = phi i1 [ %125, %124 ], [ false, %11 ], [ false, %3 ], [ false, %19 ]
  ret i1 %127
}

declare zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32, i32*) local_unnamed_addr #4

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #4

declare zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu*, i32) local_unnamed_addr #4

declare zeroext i1 @_ZN10GrVkMemory23AllocAndBindImageMemoryEP7GrVkGpuP9VkImage_TbP9GrVkAlloc(%class.GrVkGpu*, %struct.VkImage_T*, i1 zeroext, %struct.GrVkAlloc*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImage16DestroyImageInfoEPK7GrVkGpuP13GrVkImageInfo(%class.GrVkGpu*, %struct.GrVkImageInfo*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %4 = load %struct.GrVkInterface*, %struct.GrVkInterface** %3, align 8
  %5 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %4, i64 0, i32 1, i32 53, i32 0
  %6 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %5, align 8
  %7 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %8 = load %struct.VkDevice_T*, %struct.VkDevice_T** %7, align 8
  %9 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %1, i64 0, i32 0
  %10 = load %struct.VkImage_T*, %struct.VkImage_T** %9, align 8
  tail call void %6(%struct.VkDevice_T* %8, %struct.VkImage_T* %10, %struct.VkAllocationCallbacks* null) #9
  %11 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  %14 = getelementptr inbounds %struct.GrVkImageInfo, %struct.GrVkImageInfo* %1, i64 0, i32 1
  tail call void @_ZN10GrVkMemory15FreeImageMemoryEPK7GrVkGpubRK9GrVkAlloc(%class.GrVkGpu* %0, i1 zeroext %13, %struct.GrVkAlloc* dereferenceable(48) %14) #9
  ret void
}

declare void @_ZN10GrVkMemory15FreeImageMemoryEPK7GrVkGpubRK9GrVkAlloc(%class.GrVkGpu*, i1 zeroext, %struct.GrVkAlloc* dereferenceable(48)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImageD2Ev(%class.GrVkImage* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV9GrVkImage, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 3, i32 0
  %4 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %3, align 8
  %5 = icmp eq %class.GrBackendSurfaceMutableStateImpl* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.GrBackendSurfaceMutableStateImpl* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.GrBackendSurfaceMutableStateImpl* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #9
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImageD0Ev(%class.GrVkImage*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV9GrVkImage, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 3, i32 0
  %4 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %3, align 8
  %5 = icmp eq %class.GrBackendSurfaceMutableStateImpl* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.GrBackendSurfaceMutableStateImpl* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.GrBackendSurfaceMutableStateImpl* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #9
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %class.GrVkImage* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImage17prepareForPresentEP7GrVkGpu(%class.GrVkImage* nocapture readonly, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 3, i32 0
  %4 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %3, align 8
  %5 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load atomic i32, i32* %5 seq_cst, align 4
  %7 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 3
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %1, i64 0, i32 3, i32 0
  %13 = load %class.GrVkCaps*, %class.GrVkCaps** %12, align 8
  %14 = getelementptr inbounds %class.GrVkCaps, %class.GrVkCaps* %13, i64 0, i32 9
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, i32 %6, i32 1000001002
  br label %18

18:                                               ; preds = %11, %2
  %19 = phi i32 [ %6, %2 ], [ %17, %11 ]
  tail call void @_ZN9GrVkImage27setImageLayoutAndQueueIndexEPK7GrVkGpu13VkImageLayoutjjbj(%class.GrVkImage* %0, %class.GrVkGpu* %1, i32 %19, i32 0, i32 8192, i1 zeroext false, i32 %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImage18prepareForExternalEP7GrVkGpu(%class.GrVkImage* nocapture readonly, %class.GrVkGpu*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 3, i32 0
  %4 = load %class.GrBackendSurfaceMutableStateImpl*, %class.GrBackendSurfaceMutableStateImpl** %3, align 8
  %5 = getelementptr inbounds %class.GrBackendSurfaceMutableStateImpl, %class.GrBackendSurfaceMutableStateImpl* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load atomic i32, i32* %5 seq_cst, align 4
  %7 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  tail call void @_ZN9GrVkImage27setImageLayoutAndQueueIndexEPK7GrVkGpu13VkImageLayoutjjbj(%class.GrVkImage* %0, %class.GrVkGpu* %1, i32 %6, i32 0, i32 8192, i1 zeroext false, i32 %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImage12releaseImageEv(%class.GrVkImage* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 5
  %3 = load %"class.GrVkImage::Resource"*, %"class.GrVkImage::Resource"** %2, align 8
  %4 = icmp eq %"class.GrVkImage::Resource"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.GrVkImage::Resource"* %3 to %class.GrManagedResource*
  %7 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = bitcast %"class.GrVkImage::Resource"* %3 to void (%class.GrManagedResource*)***
  %12 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %11, align 8
  %13 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %12, i64 4
  %14 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %13, align 8
  tail call void %14(%class.GrManagedResource* nonnull %6) #9
  %15 = load void (%class.GrManagedResource*)**, void (%class.GrManagedResource*)*** %11, align 8
  %16 = getelementptr inbounds void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %15, i64 1
  %17 = load void (%class.GrManagedResource*)*, void (%class.GrManagedResource*)** %16, align 8
  tail call void %17(%class.GrManagedResource* nonnull %6) #9
  br label %18

18:                                               ; preds = %5, %10
  store %"class.GrVkImage::Resource"* null, %"class.GrVkImage::Resource"** %2, align 8
  br label %19

19:                                               ; preds = %1, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrVkImage18setResourceReleaseE5sk_spI18GrRefCntedCallbackE(%class.GrVkImage* nocapture readonly, %class.sk_sp.10* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkImage, %class.GrVkImage* %0, i64 0, i32 5
  %4 = bitcast %"class.GrVkImage::Resource"** %3 to %class.GrTextureResource**
  %5 = load %class.GrTextureResource*, %class.GrTextureResource** %4, align 8
  %6 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %1, i64 0, i32 0
  %7 = bitcast %class.sk_sp.10* %1 to i64*
  %8 = load i64, i64* %7, align 8
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %6, align 8
  %9 = getelementptr inbounds %class.GrTextureResource, %class.GrTextureResource* %5, i64 0, i32 1
  %10 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %9, i64 0, i32 0
  %11 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %10, align 8
  %12 = bitcast %class.sk_sp.10* %9 to i64*
  store i64 %8, i64* %12, align 8
  %13 = icmp eq %class.GrRefCntedCallback* %11, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %11, i64 0, i32 0
  %16 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %27

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %15, i64 2
  %21 = bitcast %class.SkNVRefCnt* %20 to void (i8*)**
  %22 = load void (i8*)*, void (i8*)** %21, align 8
  %23 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %15, i64 4
  %24 = bitcast %class.SkNVRefCnt* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void %22(i8* %25) #9
  %26 = bitcast %class.GrRefCntedCallback* %11 to i8*
  tail call void @_ZdlPv(i8* %26) #8
  br label %27

27:                                               ; preds = %19, %14, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9GrVkImage8Resource11freeGPUDataEv(%"class.GrVkImage::Resource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 0, i32 1, i32 0
  %3 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %2, align 8
  %4 = icmp eq %class.GrRefCntedCallback* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %2, align 8
  %6 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %6, i64 2
  %12 = bitcast %class.SkNVRefCnt* %11 to void (i8*)**
  %13 = load void (i8*)*, void (i8*)** %12, align 8
  %14 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %6, i64 4
  %15 = bitcast %class.SkNVRefCnt* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void %13(i8* %16) #9
  %17 = bitcast %class.GrRefCntedCallback* %3 to i8*
  tail call void @_ZdlPv(i8* %17) #8
  br label %18

18:                                               ; preds = %1, %5, %10
  %19 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 1
  %20 = load %class.GrVkGpu*, %class.GrVkGpu** %19, align 8
  %21 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %20, i64 0, i32 1, i32 0
  %22 = load %struct.GrVkInterface*, %struct.GrVkInterface** %21, align 8
  %23 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %22, i64 0, i32 1, i32 53, i32 0
  %24 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %23, align 8
  %25 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %20, i64 0, i32 6
  %26 = load %struct.VkDevice_T*, %struct.VkDevice_T** %25, align 8
  %27 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 2
  %28 = load %struct.VkImage_T*, %struct.VkImage_T** %27, align 8
  tail call void %24(%struct.VkDevice_T* %26, %struct.VkImage_T* %28, %struct.VkAllocationCallbacks* null) #9
  %29 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  %32 = load %class.GrVkGpu*, %class.GrVkGpu** %19, align 8
  %33 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 3
  tail call void @_ZN10GrVkMemory15FreeImageMemoryEPK7GrVkGpubRK9GrVkAlloc(%class.GrVkGpu* %32, i1 zeroext %31, %struct.GrVkAlloc* dereferenceable(48) %33) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9GrVkImage16BorrowedResource11freeGPUDataEv(%"class.GrVkImage::BorrowedResource"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.GrVkImage::BorrowedResource", %"class.GrVkImage::BorrowedResource"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %3 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %2, align 8
  %4 = icmp eq %class.GrRefCntedCallback* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  store %class.GrRefCntedCallback* null, %class.GrRefCntedCallback** %2, align 8
  %6 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %6, i64 2
  %12 = bitcast %class.SkNVRefCnt* %11 to void (i8*)**
  %13 = load void (i8*)*, void (i8*)** %12, align 8
  %14 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %6, i64 4
  %15 = bitcast %class.SkNVRefCnt* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void %13(i8* %16) #9
  %17 = bitcast %class.GrRefCntedCallback* %3 to i8*
  tail call void @_ZdlPv(i8* %17) #8
  br label %18

18:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrVkImage8ResourceD0Ev(%"class.GrVkImage::Resource"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV17GrTextureResource, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.GrVkImage::Resource", %"class.GrVkImage::Resource"* %0, i64 0, i32 0, i32 1, i32 0
  %4 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %3, align 8
  %5 = icmp eq %class.GrRefCntedCallback* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0
  %8 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %19

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %7, i64 2
  %13 = bitcast %class.SkNVRefCnt* %12 to void (i8*)**
  %14 = load void (i8*)*, void (i8*)** %13, align 8
  %15 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %7, i64 4
  %16 = bitcast %class.SkNVRefCnt* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void %14(i8* %17) #9
  %18 = bitcast %class.GrRefCntedCallback* %4 to i8*
  tail call void @_ZdlPv(i8* %18) #8
  br label %19

19:                                               ; preds = %1, %6, %11
  %20 = bitcast %"class.GrVkImage::Resource"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv(%class.GrManagedResource*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv(%class.GrManagedResource*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrVkImage16BorrowedResourceD0Ev(%"class.GrVkImage::BorrowedResource"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.GrVkImage::BorrowedResource", %"class.GrVkImage::BorrowedResource"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV17GrTextureResource, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.GrVkImage::BorrowedResource", %"class.GrVkImage::BorrowedResource"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %3, align 8
  %5 = icmp eq %class.GrRefCntedCallback* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0
  %8 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %19

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %7, i64 2
  %13 = bitcast %class.SkNVRefCnt* %12 to void (i8*)**
  %14 = load void (i8*)*, void (i8*)** %13, align 8
  %15 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %7, i64 4
  %16 = bitcast %class.SkNVRefCnt* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void %14(i8* %17) #9
  %18 = bitcast %class.GrRefCntedCallback* %4 to i8*
  tail call void @_ZdlPv(i8* %18) #8
  br label %19

19:                                               ; preds = %1, %6, %11
  %20 = bitcast %"class.GrVkImage::BorrowedResource"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17GrTextureResourceD2Ev(%class.GrTextureResource*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrTextureResource, %class.GrTextureResource* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV17GrTextureResource, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrTextureResource, %class.GrTextureResource* %0, i64 0, i32 1, i32 0
  %4 = load %class.GrRefCntedCallback*, %class.GrRefCntedCallback** %3, align 8
  %5 = icmp eq %class.GrRefCntedCallback* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0
  %8 = getelementptr inbounds %class.GrRefCntedCallback, %class.GrRefCntedCallback* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %19

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %7, i64 2
  %13 = bitcast %class.SkNVRefCnt* %12 to void (i8*)**
  %14 = load void (i8*)*, void (i8*)** %13, align 8
  %15 = getelementptr inbounds %class.SkNVRefCnt, %class.SkNVRefCnt* %7, i64 4
  %16 = bitcast %class.SkNVRefCnt* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  tail call void %14(i8* %17) #9
  %18 = bitcast %class.GrRefCntedCallback* %4 to i8*
  tail call void @_ZdlPv(i8* %18) #8
  br label %19

19:                                               ; preds = %1, %6, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17GrTextureResourceD0Ev(%class.GrTextureResource*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
