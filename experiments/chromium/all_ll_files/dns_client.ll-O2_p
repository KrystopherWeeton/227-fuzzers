; ModuleID = '../../net/dns/dns_client.cc'
source_filename = "../../net/dns/dns_client.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair.16" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.net::IPEndPoint"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.23 }
%union.anon.23 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.34", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.48", %"class.std::__1::__compressed_pair.50", [4 x i8] }>
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36", %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i64 }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { float }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"*, %"class.std::__1::__compressed_pair.55" }
%"struct.net::DnsOverHttpsServerConfig" = type <{ %"class.std::__1::basic_string", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.net::DnsOverHttpsServerConfig"* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::basic_string"* }
%"class.net::DnsClient" = type { i32 (...)** }
%"class.net::NetLog" = type { i32 (...)**, %"class.base::Lock", i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.4" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::NetLog::ThreadSafeObserver"**, %"class.net::NetLog::ThreadSafeObserver"**, %"class.std::__1::__compressed_pair.1" }
%"class.net::NetLog::ThreadSafeObserver" = type { i32 (...)**, i32, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.net::NetLog::ThreadSafeObserver"** }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.net::NetLog::ThreadSafeCaptureModeObserver"**, %"class.std::__1::__compressed_pair.6" }
%"class.net::NetLog::ThreadSafeCaptureModeObserver" = type { i32 (...)**, %"class.net::NetLog"* }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.net::NetLog::ThreadSafeCaptureModeObserver"** }
%"class.base::RepeatingCallback.125" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.103 }
%class.scoped_refptr.103 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.104" }
%"struct.std::__1::__atomic_base.104" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.net::ClientSocketFactory" = type { i32 (...)** }
%"struct.net::DnsConfigOverrides" = type <{ %"class.absl::optional.60", %"class.absl::optional.65", %"class.absl::optional.70", [2 x i8], %"class.absl::optional.75", [4 x i8], %"class.absl::optional.80", %"class.absl::optional.75", %"class.absl::optional.75", %"class.absl::optional.70", %"class.absl::optional.70", [4 x i8], %"class.absl::optional.85", %"class.absl::optional.90", %"class.absl::optional.70", [6 x i8], %"class.absl::optional.65", i8, [7 x i8] }>
%"class.absl::optional.60" = type { %"class.absl::optional_internal::optional_data.61" }
%"class.absl::optional_internal::optional_data.61" = type { %"class.absl::optional_internal::optional_data_base.62" }
%"class.absl::optional_internal::optional_data_base.62" = type { %"class.absl::optional_internal::optional_data_dtor_base.63" }
%"class.absl::optional_internal::optional_data_dtor_base.63" = type { i8, %union.anon.64 }
%union.anon.64 = type { %"class.std::__1::vector.14" }
%"class.absl::optional.80" = type { %"class.absl::optional_internal::optional_data.81" }
%"class.absl::optional_internal::optional_data.81" = type { %"class.absl::optional_internal::optional_data_base.82" }
%"class.absl::optional_internal::optional_data_base.82" = type { %"class.absl::optional_internal::optional_data_dtor_base.83" }
%"class.absl::optional_internal::optional_data_dtor_base.83" = type { i8, %union.anon.84 }
%union.anon.84 = type { %"class.base::TimeDelta" }
%"class.absl::optional.75" = type { %"class.absl::optional_internal::optional_data.76" }
%"class.absl::optional_internal::optional_data.76" = type { %"class.absl::optional_internal::optional_data_base.77" }
%"class.absl::optional_internal::optional_data_base.77" = type { %"class.absl::optional_internal::optional_data_dtor_base.78" }
%"class.absl::optional_internal::optional_data_dtor_base.78" = type { i8, %union.anon.79 }
%union.anon.79 = type { i32 }
%"class.absl::optional.85" = type { %"class.absl::optional_internal::optional_data.86" }
%"class.absl::optional_internal::optional_data.86" = type { %"class.absl::optional_internal::optional_data_base.87" }
%"class.absl::optional_internal::optional_data_base.87" = type { %"class.absl::optional_internal::optional_data_dtor_base.88" }
%"class.absl::optional_internal::optional_data_dtor_base.88" = type { i8, %union.anon.89 }
%union.anon.89 = type { %"class.std::__1::vector.53" }
%"class.absl::optional.90" = type { %"class.absl::optional_internal::optional_data.91" }
%"class.absl::optional_internal::optional_data.91" = type { %"class.absl::optional_internal::optional_data_base.92" }
%"class.absl::optional_internal::optional_data_base.92" = type { %"class.absl::optional_internal::optional_data_dtor_base.93" }
%"class.absl::optional_internal::optional_data_dtor_base.93" = type { i8, %union.anon.94 }
%union.anon.94 = type { i32 }
%"class.absl::optional.70" = type { %"class.absl::optional_internal::optional_data.71" }
%"class.absl::optional_internal::optional_data.71" = type { %"class.absl::optional_internal::optional_data_base.72" }
%"class.absl::optional_internal::optional_data_base.72" = type { %"class.absl::optional_internal::optional_data_dtor_base.73" }
%"class.absl::optional_internal::optional_data_dtor_base.73" = type { i8, %union.anon.74 }
%union.anon.74 = type { i8 }
%"class.absl::optional.65" = type { %"class.absl::optional_internal::optional_data.66" }
%"class.absl::optional_internal::optional_data.66" = type { %"class.absl::optional_internal::optional_data_base.67" }
%"class.absl::optional_internal::optional_data_base.67" = type { %"class.absl::optional_internal::optional_data_dtor_base.68" }
%"class.absl::optional_internal::optional_data_dtor_base.68" = type { i8, %union.anon.69 }
%union.anon.69 = type { %"class.std::__1::vector.27" }
%"class.net::AddressSorter" = type { i32 (...)** }
%"class.net::(anonymous namespace)::DnsClientImpl" = type { %"class.net::DnsClient", i8, i8, i32, %"class.absl::optional", %"struct.net::DnsConfigOverrides", %class.scoped_refptr, %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.119", %"class.net::NetLog"*, %"class.net::ClientSocketFactory"*, %"class.base::RepeatingCallback.125" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.net::DnsConfig" }
%"struct.net::DnsConfig" = type { %"class.std::__1::vector.14", i8, %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, i32, %"class.base::TimeDelta", i32, i32, i8, i8, %"class.std::__1::vector.53", i32, i8, %"class.std::__1::vector.27" }
%class.scoped_refptr = type { %"class.net::DnsSession"* }
%"class.net::DnsSession" = type { %"class.base::RefCounted", %"struct.net::DnsConfig", %"class.std::__1::unique_ptr.95", %"class.net::DnsUdpTracker", %"class.base::RepeatingCallback", %"class.net::NetLog"*, %"class.base::WeakPtrFactory" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.net::DnsSocketAllocator"* }
%"class.net::DnsSocketAllocator" = type { %"class.net::ClientSocketFactory"*, %"class.net::NetLog"*, %"class.std::__1::vector.14" }
%"class.net::DnsUdpTracker" = type { i8, %"class.base::circular_deque", %"class.base::circular_deque.101", %"class.base::circular_deque.101", %"class.base::TickClock"* }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.net::DnsUdpTracker::QueryData"*, i64 }
%"struct.net::DnsUdpTracker::QueryData" = type opaque
%"class.base::circular_deque.101" = type { %"class.base::internal::VectorBuffer.102", i64, i64 }
%"class.base::internal::VectorBuffer.102" = type { %"class.base::TimeTicks"*, i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type { i32 (...)** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.105 }
%class.scoped_refptr.105 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.106", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.106" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.107" }
%"struct.std::__1::atomic.107" = type { %"struct.std::__1::__atomic_base.108" }
%"struct.std::__1::__atomic_base.108" = type { %"struct.std::__1::__atomic_base.109" }
%"struct.std::__1::__atomic_base.109" = type { %"struct.std::__1::__cxx_atomic_impl.110" }
%"struct.std::__1::__cxx_atomic_impl.110" = type { %"struct.std::__1::__cxx_atomic_base_impl.111" }
%"struct.std::__1::__cxx_atomic_base_impl.111" = type { i8 }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.net::DnsTransactionFactory"* }
%"class.net::DnsTransactionFactory" = type { i32 (...)**, %"class.base::WeakPtrFactory.115" }
%"class.base::WeakPtrFactory.115" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.std::__1::unique_ptr.119" = type { %"class.std::__1::__compressed_pair.120" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { %"class.net::AddressSorter"* }
%"class.net::ResolveContext" = type { %"class.base::CheckedObserver", %"class.net::URLRequestContext"*, %"class.std::__1::unique_ptr.130", %"class.base::TimeDelta", %"class.base::ObserverList", %"class.base::WeakPtr.144", i32, %"class.base::TimeDelta", %"class.std::__1::vector.145", %"class.std::__1::vector.145", %"class.net::IsolationInfo" }
%"class.base::CheckedObserver" = type { i32 (...)**, %"class.base::WeakPtrFactory.129" }
%"class.base::WeakPtrFactory.129" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.net::URLRequestContext" = type opaque
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.net::HostCache"* }
%"class.net::HostCache" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector.136", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector.136" = type { %"class.std::__1::__vector_base.137" }
%"class.std::__1::__vector_base.137" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.139" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.138 }
%class.scoped_refptr.138 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::WeakPtr.144" = type { %"class.base::internal::WeakPtrBase" }
%"class.std::__1::vector.145" = type { %"class.std::__1::__vector_base.146" }
%"class.std::__1::__vector_base.146" = type { %"struct.net::ResolveContext::ServerStats"*, %"struct.net::ResolveContext::ServerStats"*, %"class.std::__1::__compressed_pair.164" }
%"struct.net::ResolveContext::ServerStats" = type { i32, i8, %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.std::__1::unique_ptr.147" }
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.base::SampleVector"* }
%"class.base::SampleVector" = type { %"class.base::SampleVectorBase", %"class.std::__1::vector.154" }
%"class.base::SampleVectorBase" = type { %"class.base::HistogramSamples", %"struct.std::__1::atomic.150", %"class.base::BucketRanges"* }
%"class.base::HistogramSamples" = type { i32 (...)**, %"struct.base::HistogramSamples::Metadata"* }
%"struct.base::HistogramSamples::Metadata" = type { i64, i64, i32, %"union.base::HistogramSamples::AtomicSingleSample" }
%"union.base::HistogramSamples::AtomicSingleSample" = type { i32 }
%"struct.std::__1::atomic.150" = type { %"struct.std::__1::__atomic_base.151" }
%"struct.std::__1::__atomic_base.151" = type { %"struct.std::__1::__cxx_atomic_impl.152" }
%"struct.std::__1::__cxx_atomic_impl.152" = type { %"struct.std::__1::__cxx_atomic_base_impl.153" }
%"struct.std::__1::__cxx_atomic_base_impl.153" = type { i32* }
%"class.base::BucketRanges" = type { %"class.std::__1::vector.154", i32, %"struct.std::__1::atomic" }
%"class.std::__1::vector.154" = type { %"class.std::__1::__vector_base.155" }
%"class.std::__1::__vector_base.155" = type { i32*, i32*, %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { i32* }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.net::ResolveContext::ServerStats"* }
%"class.net::IsolationInfo" = type { i32, %"class.absl::optional.169", %"class.absl::optional.169", %"class.net::NetworkIsolationKey", %"class.net::SiteForCookies", i8, %"class.absl::optional.184" }
%"class.absl::optional.169" = type { %"class.absl::optional_internal::optional_data.170" }
%"class.absl::optional_internal::optional_data.170" = type { %"class.absl::optional_internal::optional_data_base.171" }
%"class.absl::optional_internal::optional_data_base.171" = type { %"class.absl::optional_internal::optional_data_dtor_base.172" }
%"class.absl::optional_internal::optional_data_dtor_base.172" = type { i8, %union.anon.173 }
%union.anon.173 = type { %"class.url::Origin" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.174" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.174" = type { %"class.absl::optional_internal::optional_data.175" }
%"class.absl::optional_internal::optional_data.175" = type { %"class.absl::optional_internal::optional_data_base.176" }
%"class.absl::optional_internal::optional_data_base.176" = type { %"class.absl::optional_internal::optional_data_dtor_base.177" }
%"class.absl::optional_internal::optional_data_dtor_base.177" = type { i8, %union.anon.178 }
%union.anon.178 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.net::NetworkIsolationKey" = type { i8, %"class.absl::optional.179", %"class.absl::optional.179" }
%"class.absl::optional.179" = type { %"class.absl::optional_internal::optional_data.180" }
%"class.absl::optional_internal::optional_data.180" = type { %"class.absl::optional_internal::optional_data_base.181" }
%"class.absl::optional_internal::optional_data_base.181" = type { %"class.absl::optional_internal::optional_data_dtor_base.182" }
%"class.absl::optional_internal::optional_data_dtor_base.182" = type { i8, %union.anon.183 }
%union.anon.183 = type { %"class.net::SchemefulSite" }
%"class.net::SchemefulSite" = type { %"class.url::Origin" }
%"class.net::SiteForCookies" = type <{ %"class.net::SchemefulSite", i8, [7 x i8] }>
%"class.absl::optional.184" = type { %"class.absl::optional_internal::optional_data.185" }
%"class.absl::optional_internal::optional_data.185" = type { %"class.absl::optional_internal::optional_data_base.186" }
%"class.absl::optional_internal::optional_data_base.186" = type { %"class.absl::optional_internal::optional_data_dtor_base.187" }
%"class.absl::optional_internal::optional_data_dtor_base.187" = type { i8, %union.anon.188 }
%union.anon.188 = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.189", %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.209" }
%"union.absl::variant_internal::DestructibleUnionImpl.209" = type { %"union.absl::variant_internal::DestructibleUnionImpl.210" }
%"union.absl::variant_internal::DestructibleUnionImpl.210" = type { %"union.absl::variant_internal::DestructibleUnionImpl.211" }
%"union.absl::variant_internal::DestructibleUnionImpl.211" = type { %"union.absl::variant_internal::DestructibleUnionImpl.212" }
%"union.absl::variant_internal::DestructibleUnionImpl.212" = type { %"class.std::__1::basic_string" }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.203", [4 x i8] }>
%"struct.std::__1::atomic.203" = type { %"struct.std::__1::__atomic_base.204" }
%"struct.std::__1::__atomic_base.204" = type { %"struct.std::__1::__atomic_base.205" }
%"struct.std::__1::__atomic_base.205" = type { %"struct.std::__1::__cxx_atomic_impl.206" }
%"struct.std::__1::__cxx_atomic_impl.206" = type { %"struct.std::__1::__cxx_atomic_base_impl.207" }
%"struct.std::__1::__cxx_atomic_base_impl.207" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN4base8internal7InvokerINS0_9BindStateIPFiiiEJEEES3_E3RunEPNS0_13BindStateBaseEii = comdat any

$_ZN4base8internal9BindStateIPFiiiEJEE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZNSt3__111make_uniqueIN3net18DnsSocketAllocatorEJRPNS1_19ClientSocketFactoryERNS_6vectorINS1_10IPEndPointENS_9allocatorIS7_EEEERPNS1_6NetLogEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_ = comdat any

@_ZTVN3net12_GLOBAL__N_113DnsClientImplE = internal unnamed_addr constant { [23 x i8*] } { [23 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImplD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImplD0Ev to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl27CanUseSecureDnsTransactionsEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl29CanUseInsecureDnsTransactionsEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl37CanQueryAdditionalTypesViaInsecureDnsEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*, i1, i1)* @_ZN3net12_GLOBAL__N_113DnsClientImpl18SetInsecureEnabledEbb to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*, %"class.net::ResolveContext"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl38FallbackFromSecureTransactionPreferredEPNS_14ResolveContextE to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl40FallbackFromInsecureTransactionPreferredEv to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*, %"class.absl::optional"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl15SetSystemConfigEN4absl8optionalINS_9DnsConfigEEE to i8*), i8* bitcast (i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*, %"struct.net::DnsConfigOverrides"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl18SetConfigOverridesENS_18DnsConfigOverridesE to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl21ReplaceCurrentSessionEv to i8*), i8* bitcast (%"class.net::DnsSession"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl17GetCurrentSessionEv to i8*), i8* bitcast (%"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl18GetEffectiveConfigEv to i8*), i8* bitcast (%"class.std::__1::unordered_map"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl8GetHostsEv to i8*), i8* bitcast (%"class.net::DnsTransactionFactory"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl21GetTransactionFactoryEv to i8*), i8* bitcast (%"class.net::AddressSorter"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl16GetAddressSorterEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl33IncrementInsecureFallbackFailuresEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl29ClearInsecureFallbackFailuresEv to i8*), i8* bitcast (void (%"class.absl::optional"*, %"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl25GetSystemConfigForTestingEv to i8*), i8* bitcast (void (%"struct.net::DnsConfigOverrides"*, %"class.net::(anonymous namespace)::DnsClientImpl"*)* @_ZNK3net12_GLOBAL__N_113DnsClientImpl28GetConfigOverridesForTestingEv to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::DnsClientImpl"*, %"class.net::DnsTransactionFactory"*)* @_ZN3net12_GLOBAL__N_113DnsClientImpl31SetTransactionFactoryForTestingENSt3__110unique_ptrINS_21DnsTransactionFactoryENS2_14default_deleteIS4_EEEE to i8*)] }, align 8
@__const._ZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEv.new_effective_config = private unnamed_addr constant { { { { i8, [7 x i8], { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } } } } } { { { { i8, [7 x i8], { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } } } } { { { i8, [7 x i8], { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } } } { { i8, [7 x i8], { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } { %"class.std::__1::vector.14" { %"class.std::__1::__vector_base.15" { %"class.net::IPEndPoint"* inttoptr (i64 -6148914691236517206 to %"class.net::IPEndPoint"*), %"class.net::IPEndPoint"* inttoptr (i64 -6148914691236517206 to %"class.net::IPEndPoint"*), %"class.std::__1::__compressed_pair.16" { %"struct.std::__1::__compressed_pair_elem.17" { %"class.net::IPEndPoint"* inttoptr (i64 -6148914691236517206 to %"class.net::IPEndPoint"*) } } } }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.21" { %"struct.std::__1::__compressed_pair_elem.22" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon.23 { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"class.std::__1::vector.27" { %"class.std::__1::__vector_base.28" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::__compressed_pair.29" { %"struct.std::__1::__compressed_pair_elem.30" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*) } } } }, %"class.std::__1::unordered_map" { %"class.std::__1::__hash_table" <{ %"class.std::__1::unique_ptr.34" { %"class.std::__1::__compressed_pair.35" { %"struct.std::__1::__compressed_pair_elem.36" { %"struct.std::__1::__hash_node_base"** inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base"**) }, %"struct.std::__1::__compressed_pair_elem.37" { %"class.std::__1::__bucket_list_deallocator" { %"class.std::__1::__compressed_pair.38" { %"struct.std::__1::__compressed_pair_elem.39" { i64 -6148914691236517206 } } } } } }, %"class.std::__1::__compressed_pair.43" { %"struct.std::__1::__compressed_pair_elem.44" { %"struct.std::__1::__hash_node_base" { %"struct.std::__1::__hash_node_base"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base"*) } } }, %"class.std::__1::__compressed_pair.48" { %"struct.std::__1::__compressed_pair_elem.39" { i64 -6148914691236517206 } }, %"class.std::__1::__compressed_pair.50" { %"struct.std::__1::__compressed_pair_elem.51" { float 0xFFFFFFFFE0000000 } }, [4 x i8] c"\AA\AA\AA\AA" }> }, i8 -86, i8 -86, [2 x i8] c"\AA\AA", i32 -1431655766, %"class.base::TimeDelta" { i64 -6148914691236517206 }, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"class.std::__1::vector.53" { %"class.std::__1::__vector_base.54" { %"struct.net::DnsOverHttpsServerConfig"* inttoptr (i64 -6148914691236517206 to %"struct.net::DnsOverHttpsServerConfig"*), %"struct.net::DnsOverHttpsServerConfig"* inttoptr (i64 -6148914691236517206 to %"struct.net::DnsOverHttpsServerConfig"*), %"class.std::__1::__compressed_pair.55" { %"struct.std::__1::__compressed_pair_elem.56" { %"struct.net::DnsOverHttpsServerConfig"* inttoptr (i64 -6148914691236517206 to %"struct.net::DnsOverHttpsServerConfig"*) } } } }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", %"class.std::__1::vector.27" { %"class.std::__1::__vector_base.28" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::__compressed_pair.29" { %"struct.std::__1::__compressed_pair_elem.30" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*) } } } } } } } } } }, align 8
@__const._ZNK3net12_GLOBAL__N_113DnsClientImpl20BuildEffectiveConfigEv.config = private unnamed_addr constant { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } { %"class.std::__1::vector.14" { %"class.std::__1::__vector_base.15" { %"class.net::IPEndPoint"* inttoptr (i64 -6148914691236517206 to %"class.net::IPEndPoint"*), %"class.net::IPEndPoint"* inttoptr (i64 -6148914691236517206 to %"class.net::IPEndPoint"*), %"class.std::__1::__compressed_pair.16" { %"struct.std::__1::__compressed_pair_elem.17" { %"class.net::IPEndPoint"* inttoptr (i64 -6148914691236517206 to %"class.net::IPEndPoint"*) } } } }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.21" { %"struct.std::__1::__compressed_pair_elem.22" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon.23 { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"class.std::__1::vector.27" { %"class.std::__1::__vector_base.28" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::__compressed_pair.29" { %"struct.std::__1::__compressed_pair_elem.30" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*) } } } }, %"class.std::__1::unordered_map" { %"class.std::__1::__hash_table" <{ %"class.std::__1::unique_ptr.34" { %"class.std::__1::__compressed_pair.35" { %"struct.std::__1::__compressed_pair_elem.36" { %"struct.std::__1::__hash_node_base"** inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base"**) }, %"struct.std::__1::__compressed_pair_elem.37" { %"class.std::__1::__bucket_list_deallocator" { %"class.std::__1::__compressed_pair.38" { %"struct.std::__1::__compressed_pair_elem.39" { i64 -6148914691236517206 } } } } } }, %"class.std::__1::__compressed_pair.43" { %"struct.std::__1::__compressed_pair_elem.44" { %"struct.std::__1::__hash_node_base" { %"struct.std::__1::__hash_node_base"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__hash_node_base"*) } } }, %"class.std::__1::__compressed_pair.48" { %"struct.std::__1::__compressed_pair_elem.39" { i64 -6148914691236517206 } }, %"class.std::__1::__compressed_pair.50" { %"struct.std::__1::__compressed_pair_elem.51" { float 0xFFFFFFFFE0000000 } }, [4 x i8] c"\AA\AA\AA\AA" }> }, i8 -86, i8 -86, [2 x i8] c"\AA\AA", i32 -1431655766, %"class.base::TimeDelta" { i64 -6148914691236517206 }, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"class.std::__1::vector.53" { %"class.std::__1::__vector_base.54" { %"struct.net::DnsOverHttpsServerConfig"* inttoptr (i64 -6148914691236517206 to %"struct.net::DnsOverHttpsServerConfig"*), %"struct.net::DnsOverHttpsServerConfig"* inttoptr (i64 -6148914691236517206 to %"struct.net::DnsOverHttpsServerConfig"*), %"class.std::__1::__compressed_pair.55" { %"struct.std::__1::__compressed_pair_elem.56" { %"struct.net::DnsOverHttpsServerConfig"* inttoptr (i64 -6148914691236517206 to %"struct.net::DnsOverHttpsServerConfig"*) } } } }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", %"class.std::__1::vector.27" { %"class.std::__1::__vector_base.28" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*), %"class.std::__1::__compressed_pair.29" { %"struct.std::__1::__compressed_pair_elem.30" { %"class.std::__1::basic_string"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::basic_string"*) } } } } }, align 8
@.str = private unnamed_addr constant [42 x i8] c"Net.DNS.UpgradeConfig.DotUpgradeSucceeded\00", align 1
@.str.1 = private unnamed_addr constant [50 x i8] c"Net.DNS.UpgradeConfig.HasPublicInsecureNameserver\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Net.DNS.UpgradeConfig.InsecureUpgradeSucceeded\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"Net.DNS.UpgradeConfig.Ineligible.DohSpecified\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"Net.DNS.UpgradeConfig.Ineligible.UnhandledOptions\00", align 1
@_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_1.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_2.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_3.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::DnsClient"* @_ZN3net9DnsClient12CreateClientEPNS_6NetLogE(%"class.net::NetLog"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::RepeatingCallback.125", align 8
  %3 = ptrtoint %"class.net::NetLog"* %0 to i64
  %4 = tail call %"class.net::ClientSocketFactory"* @_ZN3net19ClientSocketFactory17GetDefaultFactoryEv() #12
  %5 = ptrtoint %"class.net::ClientSocketFactory"* %4 to i64
  %6 = bitcast %"class.base::RepeatingCallback.125"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = tail call i8* @_Znwm(i64 48) #13, !noalias !2
  %8 = bitcast i8* %7 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %8, void ()* bitcast (i32 (%"class.base::internal::BindStateBase"*, i32, i32)* @_ZN4base8internal7InvokerINS0_9BindStateIPFiiiEJEEES3_E3RunEPNS0_13BindStateBaseEii to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIPFiiiEJEE7DestroyEPKNS0_13BindStateBaseE) #12, !noalias !2
  %9 = getelementptr inbounds i8, i8* %7, i64 32
  %10 = bitcast i8* %9 to i64*
  store i64 ptrtoint (i32 (i32, i32)* @_ZN4base7RandIntEii to i64), i64* %10, align 8, !noalias !2
  %11 = bitcast %"class.base::RepeatingCallback.125"* %2 to i8**
  store i8* %7, i8** %11, align 8, !alias.scope !2
  %12 = tail call i8* @_Znwm(i64 488) #13
  %13 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN3net12_GLOBAL__N_113DnsClientImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 8
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds i8, i8* %12, i64 9
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %12, i64 12
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %12, i64 16
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %12, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 208, i1 false) #12
  %20 = getelementptr inbounds i8, i8* %12, i64 232
  %21 = bitcast i8* %20 to %"struct.net::DnsConfigOverrides"*
  tail call void @_ZN3net18DnsConfigOverridesC1Ev(%"struct.net::DnsConfigOverrides"* %21) #12
  %22 = getelementptr inbounds i8, i8* %12, i64 440
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false) #12
  %23 = tail call %"class.net::AddressSorter"* @_ZN3net13AddressSorter19CreateAddressSorterEv() #12
  %24 = getelementptr inbounds i8, i8* %12, i64 456
  %25 = bitcast i8* %24 to %"class.net::AddressSorter"**
  store %"class.net::AddressSorter"* %23, %"class.net::AddressSorter"** %25, align 8
  %26 = getelementptr inbounds i8, i8* %12, i64 464
  %27 = bitcast i8* %26 to i64*
  store i64 %3, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %12, i64 472
  %29 = bitcast i8* %28 to i64*
  store i64 %5, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %12, i64 480
  %31 = bitcast i8* %30 to %"class.base::internal::CallbackBaseCopyable"*
  %32 = getelementptr inbounds %"class.base::RepeatingCallback.125", %"class.base::RepeatingCallback.125"* %2, i64 0, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %31, %"class.base::internal::CallbackBaseCopyable"* nonnull dereferenceable(8) %32) #12
  %33 = getelementptr inbounds %"class.base::RepeatingCallback.125", %"class.base::RepeatingCallback.125"* %2, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %33) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %34 = bitcast i8* %12 to %"class.net::DnsClient"*
  ret %"class.net::DnsClient"* %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.net::ClientSocketFactory"* @_ZN3net19ClientSocketFactory17GetDefaultFactoryEv() local_unnamed_addr #2

declare i32 @_ZN4base7RandIntEii(i32, i32) #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::DnsClient"* @_ZN3net9DnsClient22CreateClientForTestingEPNS_6NetLogEPNS_19ClientSocketFactoryERKN4base17RepeatingCallbackIFiiiEEE(%"class.net::NetLog"*, %"class.net::ClientSocketFactory"*, %"class.base::RepeatingCallback.125"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.net::NetLog"* %0 to i64
  %5 = ptrtoint %"class.net::ClientSocketFactory"* %1 to i64
  %6 = tail call i8* @_Znwm(i64 488) #13
  %7 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN3net12_GLOBAL__N_113DnsClientImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %6, i64 8
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 9
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds i8, i8* %6, i64 12
  %11 = bitcast i8* %10 to i32*
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %6, i64 16
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds i8, i8* %6, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 208, i1 false) #12
  %14 = getelementptr inbounds i8, i8* %6, i64 232
  %15 = bitcast i8* %14 to %"struct.net::DnsConfigOverrides"*
  tail call void @_ZN3net18DnsConfigOverridesC1Ev(%"struct.net::DnsConfigOverrides"* %15) #12
  %16 = getelementptr inbounds i8, i8* %6, i64 440
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #12
  %17 = tail call %"class.net::AddressSorter"* @_ZN3net13AddressSorter19CreateAddressSorterEv() #12
  %18 = getelementptr inbounds i8, i8* %6, i64 456
  %19 = bitcast i8* %18 to %"class.net::AddressSorter"**
  store %"class.net::AddressSorter"* %17, %"class.net::AddressSorter"** %19, align 8
  %20 = getelementptr inbounds i8, i8* %6, i64 464
  %21 = bitcast i8* %20 to i64*
  store i64 %4, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %6, i64 472
  %23 = bitcast i8* %22 to i64*
  store i64 %5, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %6, i64 480
  %25 = bitcast i8* %24 to %"class.base::internal::CallbackBaseCopyable"*
  %26 = getelementptr inbounds %"class.base::RepeatingCallback.125", %"class.base::RepeatingCallback.125"* %2, i64 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %25, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %26) #12
  %27 = bitcast i8* %6 to %"class.net::DnsClient"*
  ret %"class.net::DnsClient"* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN4base8internal7InvokerINS0_9BindStateIPFiiiEJEEES3_E3RunEPNS0_13BindStateBaseEii(%"class.base::internal::BindStateBase"*, i32, i32) #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = bitcast %"class.base::internal::BindStateBase"* %4 to i32 (i32, i32)**
  %6 = load i32 (i32, i32)*, i32 (i32, i32)** %5, align 8
  %7 = tail call i32 %6(i32 %1, i32 %2) #12
  ret i32 %7
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIPFiiiEJEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #13
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare void @_ZN3net18DnsConfigOverridesC1Ev(%"struct.net::DnsConfigOverrides"*) unnamed_addr #2

declare %"class.net::AddressSorter"* @_ZN3net13AddressSorter19CreateAddressSorterEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImplD2Ev(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [23 x i8*] }, { [23 x i8*] }* @_ZTVN3net12_GLOBAL__N_113DnsClientImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 11, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #12
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %5 = load %"class.net::AddressSorter"*, %"class.net::AddressSorter"** %4, align 8
  store %"class.net::AddressSorter"* null, %"class.net::AddressSorter"** %4, align 8
  %6 = icmp eq %"class.net::AddressSorter"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.net::AddressSorter"* %5 to void (%"class.net::AddressSorter"*)***
  %9 = load void (%"class.net::AddressSorter"*)**, void (%"class.net::AddressSorter"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::AddressSorter"*)*, void (%"class.net::AddressSorter"*)** %9, i64 1
  %11 = load void (%"class.net::AddressSorter"*)*, void (%"class.net::AddressSorter"*)** %10, align 8
  tail call void %11(%"class.net::AddressSorter"* nonnull %5) #12
  br label %12

12:                                               ; preds = %1, %7
  %13 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %14 = load %"class.net::DnsTransactionFactory"*, %"class.net::DnsTransactionFactory"** %13, align 8
  store %"class.net::DnsTransactionFactory"* null, %"class.net::DnsTransactionFactory"** %13, align 8
  %15 = icmp eq %"class.net::DnsTransactionFactory"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = bitcast %"class.net::DnsTransactionFactory"* %14 to void (%"class.net::DnsTransactionFactory"*)***
  %18 = load void (%"class.net::DnsTransactionFactory"*)**, void (%"class.net::DnsTransactionFactory"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %18, i64 1
  %20 = load void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %19, align 8
  tail call void %20(%"class.net::DnsTransactionFactory"* nonnull %14) #12
  br label %21

21:                                               ; preds = %12, %16
  %22 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6, i32 0
  %23 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %22, align 8
  %24 = icmp eq %"class.net::DnsSession"* %23, null
  br i1 %24, label %32, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %23, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %26) #12
  %27 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %23, i64 0, i32 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  tail call void @_ZN3net10DnsSessionD1Ev(%"class.net::DnsSession"* nonnull %23) #12
  %31 = bitcast %"class.net::DnsSession"* %23 to i8*
  tail call void @_ZdlPv(i8* %31) #13
  br label %32

32:                                               ; preds = %21, %25, %30
  %33 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 5
  tail call void @_ZN3net18DnsConfigOverridesD1Ev(%"struct.net::DnsConfigOverrides"* %33) #12
  %34 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %35 = load i8, i8* %34, align 8, !range !7
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* %38) #12
  store i8 0, i8* %34, align 8
  br label %39

39:                                               ; preds = %32, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImplD0Ev(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  tail call void @_ZN3net12_GLOBAL__N_113DnsClientImplD2Ev(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  %2 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_113DnsClientImpl27CanUseSecureDnsTransactionsEv(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)***
  %3 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %2, align 8
  %4 = getelementptr inbounds %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %3, i64 12
  %5 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %4, align 8
  %6 = tail call %"struct.net::DnsConfig"* %5(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  %7 = icmp eq %"struct.net::DnsConfig"* %6, null
  br i1 %7, label %16, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 13
  %10 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 13, i32 0, i32 1
  %11 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.53"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp ne i64 %12, %14
  br label %16

16:                                               ; preds = %1, %8
  %17 = phi i1 [ false, %1 ], [ %15, %8 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_113DnsClientImpl29CanUseInsecureDnsTransactionsEv(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)***
  %3 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %2, align 8
  %4 = getelementptr inbounds %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %3, i64 12
  %5 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %4, align 8
  %6 = tail call %"struct.net::DnsConfig"* %5(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  %7 = icmp eq %"struct.net::DnsConfig"* %6, null
  br i1 %7, label %27, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.net::IPEndPoint"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.net::DnsConfig"* %6 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %27, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 1
  %17 = load i8, i8* %16, align 8, !range !7
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 5
  %21 = load i8, i8* %20, align 8, !range !7
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 1
  %25 = load i8, i8* %24, align 8, !range !7
  %26 = icmp eq i8 %25, 0
  br label %27

27:                                               ; preds = %19, %15, %8, %1, %23
  %28 = phi i1 [ false, %19 ], [ false, %15 ], [ false, %8 ], [ false, %1 ], [ %26, %23 ]
  ret i1 %28
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_113DnsClientImpl37CanQueryAdditionalTypesViaInsecureDnsEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1, !range !7
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImpl18SetInsecureEnabledEbb(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture, i1 zeroext, i1 zeroext) unnamed_addr #7 align 2 {
  %4 = zext i1 %1 to i8
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 1
  store i8 %4, i8* %6, align 8
  %7 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 2
  store i8 %5, i8* %7, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_113DnsClientImpl38FallbackFromSecureTransactionPreferredEPNS_14ResolveContextE(%"class.net::(anonymous namespace)::DnsClientImpl"*, %"class.net::ResolveContext"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)***
  %4 = load i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %4, i64 2
  %6 = load i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6, i32 0
  %10 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %9, align 8
  %11 = tail call i64 @_ZNK3net14ResolveContext22NumAvailableDohServersEPKNS_10DnsSessionE(%"class.net::ResolveContext"* %1, %"class.net::DnsSession"* %10) #12
  %12 = icmp eq i64 %11, 0
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi i1 [ %12, %8 ], [ true, %2 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZNK3net12_GLOBAL__N_113DnsClientImpl40FallbackFromInsecureTransactionPreferredEv(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)***
  %3 = load i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %3, i64 3
  %5 = load i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, i1 (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 15
  br label %11

11:                                               ; preds = %7, %1
  %12 = phi i1 [ true, %1 ], [ %10, %7 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN3net12_GLOBAL__N_113DnsClientImpl15SetSystemConfigEN4absl8optionalINS_9DnsConfigEEE(%"class.net::(anonymous namespace)::DnsClientImpl"*, %"class.absl::optional"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !7
  %5 = icmp ne i8 %4, 0
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !7
  %8 = icmp ne i8 %7, 0
  %9 = xor i1 %5, %8
  %10 = xor i1 %5, true
  %11 = or i1 %9, %10
  br i1 %11, label %21, label %12

12:                                               ; preds = %2
  %13 = icmp eq i8 %7, 0
  br i1 %13, label %14, label %15, !prof !8

14:                                               ; preds = %12
  tail call void @llvm.trap() #12
  unreachable

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = tail call zeroext i1 @_ZNK3net9DnsConfigeqERKS0_(%"struct.net::DnsConfig"* %16, %"struct.net::DnsConfig"* dereferenceable(208) %17) #12
  br i1 %18, label %40, label %19

19:                                               ; preds = %15
  %20 = load i8, i8* %3, align 8, !range !7
  br label %22

21:                                               ; preds = %2
  br i1 %9, label %22, label %40

22:                                               ; preds = %19, %21
  %23 = phi i8 [ %20, %19 ], [ %4, %21 ]
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %33, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %27 = load i8, i8* %6, align 8, !range !7
  %28 = icmp eq i8 %27, 0
  %29 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %28, label %32, label %30

30:                                               ; preds = %25
  %31 = tail call dereferenceable(208) %"struct.net::DnsConfig"* @_ZN3net9DnsConfigaSEOS0_(%"struct.net::DnsConfig"* %29, %"struct.net::DnsConfig"* dereferenceable(208) %26) #12
  br label %38

32:                                               ; preds = %25
  tail call void @_ZN3net9DnsConfigC1EOS0_(%"struct.net::DnsConfig"* %29, %"struct.net::DnsConfig"* dereferenceable(208) %26) #12
  store i8 1, i8* %6, align 8
  br label %38

33:                                               ; preds = %22
  %34 = load i8, i8* %6, align 8, !range !7
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* %37) #12
  store i8 0, i8* %6, align 8
  br label %38

38:                                               ; preds = %30, %32, %33, %36
  %39 = tail call fastcc zeroext i1 @_ZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEv(%"class.net::(anonymous namespace)::DnsClientImpl"* %0)
  br label %40

40:                                               ; preds = %21, %15, %38
  %41 = phi i1 [ %39, %38 ], [ false, %21 ], [ false, %15 ]
  ret i1 %41
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN3net12_GLOBAL__N_113DnsClientImpl18SetConfigOverridesENS_18DnsConfigOverridesE(%"class.net::(anonymous namespace)::DnsClientImpl"*, %"struct.net::DnsConfigOverrides"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 5
  %4 = tail call zeroext i1 @_ZNK3net18DnsConfigOverrideseqERKS0_(%"struct.net::DnsConfigOverrides"* %1, %"struct.net::DnsConfigOverrides"* dereferenceable(208) %3) #12
  br i1 %4, label %8, label %5

5:                                                ; preds = %2
  %6 = tail call dereferenceable(208) %"struct.net::DnsConfigOverrides"* @_ZN3net18DnsConfigOverridesaSEOS0_(%"struct.net::DnsConfigOverrides"* %3, %"struct.net::DnsConfigOverrides"* dereferenceable(208) %1) #12
  %7 = tail call fastcc zeroext i1 @_ZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEv(%"class.net::(anonymous namespace)::DnsClientImpl"* %0)
  br label %8

8:                                                ; preds = %2, %5
  %9 = phi i1 [ %7, %5 ], [ false, %2 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImpl21ReplaceCurrentSessionEv(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::optional", align 8
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6, i32 0
  %4 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %3, align 8
  %5 = icmp eq %"class.net::DnsSession"* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %8, align 8
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net9DnsConfigC1ERKS0_(%"struct.net::DnsConfig"* %9, %"struct.net::DnsConfig"* dereferenceable(208) %7) #12
  call fastcc void @_ZN3net12_GLOBAL__N_113DnsClientImpl13UpdateSessionEN4absl8optionalINS_9DnsConfigEEE(%"class.net::(anonymous namespace)::DnsClientImpl"* %0, %"class.absl::optional"* nonnull %2)
  %10 = load i8, i8* %8, align 8, !range !7
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %6
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* %9) #12
  store i8 0, i8* %8, align 8
  br label %13

13:                                               ; preds = %1, %12, %6
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal %"class.net::DnsSession"* @_ZN3net12_GLOBAL__N_113DnsClientImpl17GetCurrentSessionEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6, i32 0
  %3 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %2, align 8
  ret %"class.net::DnsSession"* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal %"struct.net::DnsConfig"* @_ZNK3net12_GLOBAL__N_113DnsClientImpl18GetEffectiveConfigEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6, i32 0
  %3 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %2, align 8
  %4 = icmp eq %"class.net::DnsSession"* %3, null
  %5 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %3, i64 0, i32 1
  %6 = select i1 %4, %"struct.net::DnsConfig"* null, %"struct.net::DnsConfig"* %5
  ret %"struct.net::DnsConfig"* %6
}

; Function Attrs: nounwind ssp uwtable
define internal %"class.std::__1::unordered_map"* @_ZNK3net12_GLOBAL__N_113DnsClientImpl8GetHostsEv(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)***
  %3 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %2, align 8
  %4 = getelementptr inbounds %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %3, i64 12
  %5 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %4, align 8
  %6 = tail call %"struct.net::DnsConfig"* %5(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  %7 = icmp eq %"struct.net::DnsConfig"* %6, null
  %8 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 4
  %9 = select i1 %7, %"class.std::__1::unordered_map"* null, %"class.std::__1::unordered_map"* %8
  ret %"class.std::__1::unordered_map"* %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal %"class.net::DnsTransactionFactory"* @_ZN3net12_GLOBAL__N_113DnsClientImpl21GetTransactionFactoryEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6, i32 0
  %3 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %2, align 8
  %4 = icmp eq %"class.net::DnsSession"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %7 = load %"class.net::DnsTransactionFactory"*, %"class.net::DnsTransactionFactory"** %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi %"class.net::DnsTransactionFactory"* [ %7, %5 ], [ null, %1 ]
  ret %"class.net::DnsTransactionFactory"* %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal %"class.net::AddressSorter"* @_ZN3net12_GLOBAL__N_113DnsClientImpl16GetAddressSorterEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %3 = load %"class.net::AddressSorter"*, %"class.net::AddressSorter"** %2, align 8
  ret %"class.net::AddressSorter"* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImpl33IncrementInsecureFallbackFailuresEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* %2, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImpl29ClearInsecureFallbackFailuresEv(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture) unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 3
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK3net12_GLOBAL__N_113DnsClientImpl25GetSystemConfigForTestingEv(%"class.absl::optional"* noalias sret, %"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 216, i1 false) #12
  %5 = load i8, i8* %4, align 8, !range !7
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3net9DnsConfigC1ERKS0_(%"struct.net::DnsConfig"* %9, %"struct.net::DnsConfig"* dereferenceable(208) %8) #12
  store i8 1, i8* %3, align 8
  br label %10

10:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK3net12_GLOBAL__N_113DnsClientImpl28GetConfigOverridesForTestingEv(%"struct.net::DnsConfigOverrides"* noalias sret, %"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %1, i64 0, i32 5
  tail call void @_ZN3net18DnsConfigOverridesC1ERKS0_(%"struct.net::DnsConfigOverrides"* %0, %"struct.net::DnsConfigOverrides"* dereferenceable(208) %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_113DnsClientImpl31SetTransactionFactoryForTestingENSt3__110unique_ptrINS_21DnsTransactionFactoryENS2_14default_deleteIS4_EEEE(%"class.net::(anonymous namespace)::DnsClientImpl"* nocapture, %"class.net::DnsTransactionFactory"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.net::DnsTransactionFactory"* %1 to i64
  %4 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 7
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.112"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.net::DnsTransactionFactory"*, %"class.net::DnsTransactionFactory"** %5, align 8
  %7 = bitcast %"class.std::__1::unique_ptr.112"* %4 to i64*
  store i64 %3, i64* %7, align 8
  %8 = icmp eq %"class.net::DnsTransactionFactory"* %6, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.net::DnsTransactionFactory"* %6 to void (%"class.net::DnsTransactionFactory"*)***
  %11 = load void (%"class.net::DnsTransactionFactory"*)**, void (%"class.net::DnsTransactionFactory"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %11, i64 1
  %13 = load void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %12, align 8
  tail call void %13(%"class.net::DnsTransactionFactory"* nonnull %6) #12
  br label %14

14:                                               ; preds = %9, %2
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net18DnsConfigOverridesD1Ev(%"struct.net::DnsConfigOverrides"*) unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net10DnsSessionD1Ev(%"class.net::DnsSession"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"*) unnamed_addr #3

declare i64 @_ZNK3net14ResolveContext22NumAvailableDohServersEPKNS_10DnsSessionE(%"class.net::ResolveContext"*, %"class.net::DnsSession"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEv(%"class.net::(anonymous namespace)::DnsClientImpl"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::Value", align 8
  %3 = alloca %"struct.net::NetLogSource", align 8
  %4 = alloca %"class.std::__1::vector.53", align 8
  %5 = alloca %"class.std::__1::vector.53", align 8
  %6 = alloca %"struct.net::DnsConfig", align 8
  %7 = alloca %"struct.net::DnsConfig", align 8
  %8 = alloca %"struct.net::DnsConfig", align 8
  %9 = alloca %"struct.net::DnsConfig", align 8
  %10 = alloca %"class.absl::optional", align 8
  %11 = alloca %"class.absl::optional", align 8
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %12) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 getelementptr inbounds ({ { { { i8, [7 x i8], { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } } } } }, { { { { i8, [7 x i8], { { %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" } } } } } }* @__const._ZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEv.new_effective_config, i64 0, i32 0, i32 0, i32 0, i32 0), i64 216, i1 false)
  %13 = bitcast %"struct.net::DnsConfig"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %13) #12, !noalias !9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 bitcast ({ %"class.std::__1::vector.14", i8, [7 x i8], %"class.std::__1::basic_string", %"class.std::__1::vector.27", %"class.std::__1::unordered_map", i8, i8, [2 x i8], i32, %"class.base::TimeDelta", i32, i32, i8, i8, [6 x i8], %"class.std::__1::vector.53", i32, i8, [3 x i8], %"class.std::__1::vector.27" }* @__const._ZNK3net12_GLOBAL__N_113DnsClientImpl20BuildEffectiveConfigEv.config to i8*), i64 208, i1 false) #12, !noalias !9
  call void @_ZN3net9DnsConfigC1Ev(%"struct.net::DnsConfig"* nonnull %6) #12, !noalias !9
  %14 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 5
  %15 = call zeroext i1 @_ZNK3net18DnsConfigOverrides19OverridesEverythingEv(%"struct.net::DnsConfigOverrides"* %14) #12, !noalias !9
  br i1 %15, label %16, label %20

16:                                               ; preds = %1
  %17 = bitcast %"struct.net::DnsConfig"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %17) #12, !noalias !9
  %18 = bitcast %"struct.net::DnsConfig"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %18) #12, !noalias !9
  call void @_ZN3net9DnsConfigC1Ev(%"struct.net::DnsConfig"* nonnull %8) #12
  call void @_ZNK3net18DnsConfigOverrides14ApplyOverridesERKNS_9DnsConfigE(%"struct.net::DnsConfig"* nonnull sret %7, %"struct.net::DnsConfigOverrides"* %14, %"struct.net::DnsConfig"* nonnull dereferenceable(208) %8) #12
  %19 = call dereferenceable(208) %"struct.net::DnsConfig"* @_ZN3net9DnsConfigaSEOS0_(%"struct.net::DnsConfig"* nonnull %6, %"struct.net::DnsConfig"* nonnull dereferenceable(208) %7) #12
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* nonnull %7) #12
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %18) #12, !noalias !9
  br label %31

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !7, !noalias !9
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %20
  store i8 0, i8* %12, align 8, !alias.scope !9
  %25 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = bitcast %union.anon* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 208, i1 false) #12, !alias.scope !9
  br label %235

27:                                               ; preds = %20
  %28 = bitcast %"struct.net::DnsConfig"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %28) #12, !noalias !9
  %29 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZNK3net18DnsConfigOverrides14ApplyOverridesERKNS_9DnsConfigE(%"struct.net::DnsConfig"* nonnull sret %9, %"struct.net::DnsConfigOverrides"* %14, %"struct.net::DnsConfig"* dereferenceable(208) %29) #12
  %30 = call dereferenceable(208) %"struct.net::DnsConfig"* @_ZN3net9DnsConfigaSEOS0_(%"struct.net::DnsConfig"* nonnull %6, %"struct.net::DnsConfig"* nonnull dereferenceable(208) %9) #12
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* nonnull %9) #12
  br label %31

31:                                               ; preds = %27, %16
  %32 = phi i8* [ %28, %27 ], [ %17, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %32) #12, !noalias !9
  %33 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 13
  %34 = getelementptr inbounds %"class.std::__1::vector.53", %"class.std::__1::vector.53"* %33, i64 0, i32 0, i32 0
  %35 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %34, align 8, !noalias !9
  %36 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 13, i32 0, i32 1
  %37 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %36, align 8, !noalias !9
  %38 = icmp ne %"struct.net::DnsOverHttpsServerConfig"* %35, %37
  %39 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 5
  %40 = load i8, i8* %39, align 8, !range !7, !noalias !9
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %184

42:                                               ; preds = %31
  %43 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 15
  %44 = load i8, i8* %43, align 4, !range !7, !noalias !9
  %45 = icmp eq i8 %44, 0
  %46 = or i1 %38, %45
  br i1 %46, label %184, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 14
  %49 = load i32, i32* %48, align 8, !noalias !9
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %184

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 2
  %53 = bitcast %"class.std::__1::basic_string"* %52 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1, !noalias !9
  %56 = icmp slt i8 %55, 0
  %57 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %58 = load i64, i64* %57, align 8, !noalias !9
  %59 = zext i8 %55 to i64
  %60 = select i1 %56, i64 %58, i64 %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %109, label %62

62:                                               ; preds = %51
  %63 = bitcast %"class.std::__1::vector.53"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #12, !noalias !9
  %64 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 16
  call void @_ZN3net35GetDohUpgradeServersFromDotHostnameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIS6_NS4_IS6_EEEE(%"class.std::__1::vector.53"* nonnull sret %4, %"class.std::__1::basic_string"* dereferenceable(24) %52, %"class.std::__1::vector.27"* dereferenceable(24) %64) #12
  %65 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %34, align 8, !noalias !9
  %66 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %65, null
  br i1 %66, label %89, label %67

67:                                               ; preds = %62
  %68 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %65 to i8*
  %69 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %36, align 8, !noalias !9
  %70 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %69, %65
  br i1 %70, label %86, label %71

71:                                               ; preds = %67, %81
  %72 = phi %"struct.net::DnsOverHttpsServerConfig"* [ %73, %81 ], [ %69, %67 ]
  %73 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %72, i64 -1
  %74 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %73 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  call void @_ZdlPv(i8* %80) #13
  br label %81

81:                                               ; preds = %78, %71
  %82 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %73, %65
  br i1 %82, label %83, label %71

83:                                               ; preds = %81
  %84 = bitcast %"class.std::__1::vector.53"* %33 to i8**
  %85 = load i8*, i8** %84, align 8, !noalias !9
  br label %86

86:                                               ; preds = %83, %67
  %87 = phi i8* [ %85, %83 ], [ %68, %67 ]
  store %"struct.net::DnsOverHttpsServerConfig"* %65, %"struct.net::DnsOverHttpsServerConfig"** %36, align 8, !noalias !9
  call void @_ZdlPv(i8* %87) #13
  %88 = bitcast %"class.std::__1::vector.53"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 24, i1 false) #12, !noalias !9
  br label %89

89:                                               ; preds = %86, %62
  %90 = bitcast %"class.std::__1::vector.53"* %4 to i64*
  %91 = load i64, i64* %90, align 8, !noalias !9
  %92 = bitcast %"class.std::__1::vector.53"* %33 to i64*
  store i64 %91, i64* %92, align 8, !noalias !9
  %93 = getelementptr inbounds %"class.std::__1::vector.53", %"class.std::__1::vector.53"* %4, i64 0, i32 0, i32 1
  %94 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !noalias !9
  %96 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %36 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %96, align 8, !noalias !9
  %97 = inttoptr i64 %91 to %"struct.net::DnsOverHttpsServerConfig"*
  %98 = extractelement <2 x i64> %95, i32 0
  %99 = inttoptr i64 %98 to %"struct.net::DnsOverHttpsServerConfig"*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #12, !noalias !9
  %100 = icmp ne %"struct.net::DnsOverHttpsServerConfig"* %97, %99
  %101 = load atomic i64, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %102 = inttoptr i64 %101 to %"class.base::HistogramBase"*
  %103 = icmp eq i64 %101, 0
  br i1 %103, label %104, label %107

104:                                              ; preds = %89
  %105 = call %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i32 1) #12
  %106 = ptrtoint %"class.base::HistogramBase"* %105 to i64
  store atomic i64 %106, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %107

107:                                              ; preds = %104, %89
  %108 = phi %"class.base::HistogramBase"* [ %102, %89 ], [ %105, %104 ]
  call void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"* %108, i1 zeroext %100) #12
  br label %203

109:                                              ; preds = %51
  %110 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0
  %111 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 0
  %112 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %111, align 8, !noalias !9
  %113 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 1
  %114 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %113, align 8, !noalias !9
  %115 = icmp eq %"class.net::IPEndPoint"* %112, %114
  br i1 %115, label %127, label %116

116:                                              ; preds = %109, %116
  %117 = phi i8 [ %121, %116 ], [ 1, %109 ]
  %118 = phi %"class.net::IPEndPoint"* [ %122, %116 ], [ %112, %109 ]
  %119 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %118, i64 0, i32 0
  %120 = call zeroext i1 @_ZNK3net9IPAddress18IsPubliclyRoutableEv(%"class.net::IPAddress"* %119) #12
  %121 = select i1 %120, i8 0, i8 %117
  %122 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %118, i64 1
  %123 = icmp eq %"class.net::IPEndPoint"* %122, %114
  %124 = or i1 %120, %123
  br i1 %124, label %125, label %116

125:                                              ; preds = %116
  %126 = and i8 %121, 1
  br label %127

127:                                              ; preds = %125, %109
  %128 = phi i8 [ 1, %109 ], [ %126, %125 ]
  %129 = load atomic i64, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %130 = inttoptr i64 %129 to %"class.base::HistogramBase"*
  %131 = icmp eq i64 %129, 0
  br i1 %131, label %132, label %135

132:                                              ; preds = %127
  %133 = call %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1, i64 0, i64 0), i32 1) #12
  %134 = ptrtoint %"class.base::HistogramBase"* %133 to i64
  store atomic i64 %134, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %135

135:                                              ; preds = %132, %127
  %136 = phi %"class.base::HistogramBase"* [ %130, %127 ], [ %133, %132 ]
  %137 = icmp eq i8 %128, 0
  call void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"* %136, i1 zeroext %137) #12
  %138 = bitcast %"class.std::__1::vector.53"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %138) #12, !noalias !9
  %139 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 16
  call void @_ZN3net35GetDohUpgradeServersFromNameserversERKNSt3__16vectorINS_10IPEndPointENS0_9allocatorIS2_EEEERKNS1_INS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEENS3_ISC_EEEE(%"class.std::__1::vector.53"* nonnull sret %5, %"class.std::__1::vector.14"* nonnull dereferenceable(24) %110, %"class.std::__1::vector.27"* dereferenceable(24) %139) #12
  %140 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %34, align 8, !noalias !9
  %141 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %140, null
  br i1 %141, label %164, label %142

142:                                              ; preds = %135
  %143 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %140 to i8*
  %144 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %36, align 8, !noalias !9
  %145 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %144, %140
  br i1 %145, label %161, label %146

146:                                              ; preds = %142, %156
  %147 = phi %"struct.net::DnsOverHttpsServerConfig"* [ %148, %156 ], [ %144, %142 ]
  %148 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %147, i64 -1
  %149 = bitcast %"struct.net::DnsOverHttpsServerConfig"* %148 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %150 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %149, i64 0, i32 1, i32 0
  %151 = load i8, i8* %150, align 1
  %152 = icmp slt i8 %151, 0
  br i1 %152, label %153, label %156

153:                                              ; preds = %146
  %154 = getelementptr inbounds %"struct.net::DnsOverHttpsServerConfig", %"struct.net::DnsOverHttpsServerConfig"* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  call void @_ZdlPv(i8* %155) #13
  br label %156

156:                                              ; preds = %153, %146
  %157 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %148, %140
  br i1 %157, label %158, label %146

158:                                              ; preds = %156
  %159 = bitcast %"class.std::__1::vector.53"* %33 to i8**
  %160 = load i8*, i8** %159, align 8, !noalias !9
  br label %161

161:                                              ; preds = %158, %142
  %162 = phi i8* [ %160, %158 ], [ %143, %142 ]
  store %"struct.net::DnsOverHttpsServerConfig"* %140, %"struct.net::DnsOverHttpsServerConfig"** %36, align 8, !noalias !9
  call void @_ZdlPv(i8* %162) #13
  %163 = bitcast %"class.std::__1::vector.53"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %163, i8 0, i64 24, i1 false) #12, !noalias !9
  br label %164

164:                                              ; preds = %161, %135
  %165 = bitcast %"class.std::__1::vector.53"* %5 to i64*
  %166 = load i64, i64* %165, align 8, !noalias !9
  %167 = bitcast %"class.std::__1::vector.53"* %33 to i64*
  store i64 %166, i64* %167, align 8, !noalias !9
  %168 = getelementptr inbounds %"class.std::__1::vector.53", %"class.std::__1::vector.53"* %5, i64 0, i32 0, i32 1
  %169 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %168 to <2 x i64>*
  %170 = load <2 x i64>, <2 x i64>* %169, align 8, !noalias !9
  %171 = bitcast %"struct.net::DnsOverHttpsServerConfig"** %36 to <2 x i64>*
  store <2 x i64> %170, <2 x i64>* %171, align 8, !noalias !9
  %172 = inttoptr i64 %166 to %"struct.net::DnsOverHttpsServerConfig"*
  %173 = extractelement <2 x i64> %170, i32 0
  %174 = inttoptr i64 %173 to %"struct.net::DnsOverHttpsServerConfig"*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %138) #12, !noalias !9
  %175 = icmp ne %"struct.net::DnsOverHttpsServerConfig"* %172, %174
  %176 = load atomic i64, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_1.0.0.0.0.0 acquire, align 8
  %177 = inttoptr i64 %176 to %"class.base::HistogramBase"*
  %178 = icmp eq i64 %176, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %164
  %180 = call %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 1) #12
  %181 = ptrtoint %"class.base::HistogramBase"* %180 to i64
  store atomic i64 %181, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_1.0.0.0.0.0 release, align 8
  br label %182

182:                                              ; preds = %179, %164
  %183 = phi %"class.base::HistogramBase"* [ %177, %164 ], [ %180, %179 ]
  call void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"* %183, i1 zeroext %175) #12
  br label %203

184:                                              ; preds = %47, %42, %31
  %185 = load atomic i64, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_2.0.0.0.0.0 acquire, align 8
  %186 = inttoptr i64 %185 to %"class.base::HistogramBase"*
  %187 = icmp eq i64 %185, 0
  br i1 %187, label %188, label %191

188:                                              ; preds = %184
  %189 = call %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0), i32 1) #12
  %190 = ptrtoint %"class.base::HistogramBase"* %189 to i64
  store atomic i64 %190, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_2.0.0.0.0.0 release, align 8
  br label %191

191:                                              ; preds = %188, %184
  %192 = phi %"class.base::HistogramBase"* [ %186, %184 ], [ %189, %188 ]
  call void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"* %192, i1 zeroext %38) #12
  %193 = load atomic i64, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_3.0.0.0.0.0 acquire, align 8
  %194 = inttoptr i64 %193 to %"class.base::HistogramBase"*
  %195 = icmp eq i64 %193, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %191
  %197 = call %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0), i32 1) #12
  %198 = ptrtoint %"class.base::HistogramBase"* %197 to i64
  store atomic i64 %198, i64* @_ZZN3net12_GLOBAL__N_125UpdateConfigForDohUpgradeEPNS_9DnsConfigEE24atomic_histogram_pointer_3.0.0.0.0.0 release, align 8
  br label %199

199:                                              ; preds = %196, %191
  %200 = phi %"class.base::HistogramBase"* [ %194, %191 ], [ %197, %196 ]
  %201 = load i8, i8* %39, align 8, !range !7, !noalias !9
  %202 = icmp ne i8 %201, 0
  call void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"* %200, i1 zeroext %202) #12
  br label %203

203:                                              ; preds = %199, %182, %107
  %204 = load i8, i8* %39, align 8, !range !7, !noalias !9
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %209

206:                                              ; preds = %203
  %207 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 1
  %208 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %207, align 8, !noalias !9
  br label %220

209:                                              ; preds = %203
  %210 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 0
  %211 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %210, align 8, !noalias !9
  %212 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 1
  %213 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %212, align 8, !noalias !9
  %214 = icmp eq %"class.net::IPEndPoint"* %213, %211
  br i1 %214, label %219, label %215

215:                                              ; preds = %209, %215
  %216 = phi %"class.net::IPEndPoint"* [ %217, %215 ], [ %213, %209 ]
  %217 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %216, i64 -1
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %217) #12
  %218 = icmp eq %"class.net::IPEndPoint"* %217, %211
  br i1 %218, label %219, label %215

219:                                              ; preds = %215, %209
  store %"class.net::IPEndPoint"* %211, %"class.net::IPEndPoint"** %212, align 8, !noalias !9
  br label %220

220:                                              ; preds = %219, %206
  %221 = phi %"class.net::IPEndPoint"* [ %208, %206 ], [ %211, %219 ]
  %222 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 0, i32 0, i32 0
  %223 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %222, align 8, !noalias !9
  %224 = icmp eq %"class.net::IPEndPoint"* %223, %221
  br i1 %224, label %225, label %233

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %6, i64 0, i32 13, i32 0, i32 0
  %227 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %226, align 8, !noalias !9
  %228 = load %"struct.net::DnsOverHttpsServerConfig"*, %"struct.net::DnsOverHttpsServerConfig"** %36, align 8, !noalias !9
  %229 = icmp eq %"struct.net::DnsOverHttpsServerConfig"* %227, %228
  br i1 %229, label %230, label %233

230:                                              ; preds = %225
  store i8 0, i8* %12, align 8, !alias.scope !9
  %231 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1
  %232 = bitcast %union.anon* %231 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %232, i8 0, i64 208, i1 false) #12, !alias.scope !9
  br label %235

233:                                              ; preds = %225, %220
  store i8 1, i8* %12, align 8, !alias.scope !9
  %234 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net9DnsConfigC1EOS0_(%"struct.net::DnsConfig"* %234, %"struct.net::DnsConfig"* nonnull dereferenceable(208) %6) #12
  br label %235

235:                                              ; preds = %24, %230, %233
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %13) #12, !noalias !9
  %236 = bitcast %"class.net::(anonymous namespace)::DnsClientImpl"* %0 to %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)***
  %237 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %236, align 8
  %238 = getelementptr inbounds %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %237, i64 12
  %239 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %238, align 8
  %240 = call %"struct.net::DnsConfig"* %239(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12
  %241 = load i8, i8* %12, align 8, !range !7
  %242 = icmp eq i8 %241, 0
  %243 = icmp eq %"struct.net::DnsConfig"* %240, null
  %244 = and i1 %243, %242
  br i1 %244, label %292, label %245

245:                                              ; preds = %235
  %246 = or i1 %243, %242
  br i1 %246, label %252, label %247

247:                                              ; preds = %245
  %248 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %249 = call zeroext i1 @_ZNK3net9DnsConfigeqERKS0_(%"struct.net::DnsConfig"* %248, %"struct.net::DnsConfig"* nonnull dereferenceable(208) %240) #12
  br i1 %249, label %286, label %250

250:                                              ; preds = %247
  %251 = load i8, i8* %12, align 8, !range !7
  br label %252

252:                                              ; preds = %250, %245
  %253 = phi i8 [ %251, %250 ], [ %241, %245 ]
  %254 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 3
  store i32 0, i32* %254, align 4
  %255 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %255, i8 0, i64 216, i1 false) #12
  %256 = icmp eq i8 %253, 0
  br i1 %256, label %260, label %257

257:                                              ; preds = %252
  %258 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %259 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net9DnsConfigC1EOS0_(%"struct.net::DnsConfig"* %259, %"struct.net::DnsConfig"* dereferenceable(208) %258) #12
  store i8 1, i8* %255, align 8
  br label %260

260:                                              ; preds = %252, %257
  call fastcc void @_ZN3net12_GLOBAL__N_113DnsClientImpl13UpdateSessionEN4absl8optionalINS_9DnsConfigEEE(%"class.net::(anonymous namespace)::DnsClientImpl"* %0, %"class.absl::optional"* nonnull %11)
  %261 = load i8, i8* %255, align 8, !range !7
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %265, label %263

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* %264) #12
  store i8 0, i8* %255, align 8
  br label %265

265:                                              ; preds = %260, %263
  %266 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 9
  %267 = load %"class.net::NetLog"*, %"class.net::NetLog"** %266, align 8
  %268 = icmp eq %"class.net::NetLog"* %267, null
  br i1 %268, label %286, label %269

269:                                              ; preds = %265
  %270 = bitcast %"struct.net::NetLogSource"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %270) #12
  %271 = call i32 @_ZN3net6NetLog6NextIDEv(%"class.net::NetLog"* nonnull %267) #12
  call void @_ZN3net12NetLogSourceC1ENS_16NetLogSourceTypeEj(%"struct.net::NetLogSource"* nonnull %3, i32 0, i32 %271) #12
  %272 = getelementptr inbounds %"class.net::NetLog", %"class.net::NetLog"* %267, i64 0, i32 3
  %273 = load atomic i32, i32* %272 monotonic, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %285, label %275, !prof !12

275:                                              ; preds = %269
  %276 = bitcast %"class.base::Value"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %276) #12
  %277 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)**, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*** %236, align 8, !noalias !13
  %278 = getelementptr inbounds %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %277, i64 12
  %279 = load %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)*, %"struct.net::DnsConfig"* (%"class.net::(anonymous namespace)::DnsClientImpl"*)** %278, align 8, !noalias !13
  %280 = call %"struct.net::DnsConfig"* %279(%"class.net::(anonymous namespace)::DnsClientImpl"* %0) #12, !noalias !13
  %281 = icmp eq %"struct.net::DnsConfig"* %280, null
  br i1 %281, label %282, label %283

282:                                              ; preds = %275
  call void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"* nonnull %2, i8 zeroext 6) #12
  br label %284

283:                                              ; preds = %275
  call void @_ZNK3net9DnsConfig7ToValueEv(%"class.base::Value"* nonnull sret %2, %"struct.net::DnsConfig"* nonnull %280) #12
  br label %284

284:                                              ; preds = %283, %282
  call void @_ZN3net6NetLog30AddEntryWithMaterializedParamsENS_15NetLogEventTypeERKNS_12NetLogSourceENS_16NetLogEventPhaseEON4base5ValueE(%"class.net::NetLog"* nonnull %267, i32 362, %"struct.net::NetLogSource"* nonnull dereferenceable(16) %3, i32 0, %"class.base::Value"* nonnull dereferenceable(32) %2) #12
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %2) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %276) #12
  br label %285

285:                                              ; preds = %269, %284
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %270) #12
  br label %286

286:                                              ; preds = %285, %265, %247
  %287 = phi i1 [ true, %285 ], [ true, %265 ], [ false, %247 ]
  %288 = load i8, i8* %12, align 8
  %289 = icmp eq i8 %288, 0
  br i1 %289, label %292, label %290

290:                                              ; preds = %286
  %291 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN3net9DnsConfigD1Ev(%"struct.net::DnsConfig"* %291) #12
  store i8 0, i8* %12, align 8
  br label %292

292:                                              ; preds = %235, %286, %290
  %293 = phi i1 [ %287, %286 ], [ %287, %290 ], [ false, %235 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %12) #12
  ret i1 %293
}

declare zeroext i1 @_ZNK3net9DnsConfigeqERKS0_(%"struct.net::DnsConfig"*, %"struct.net::DnsConfig"* dereferenceable(208)) local_unnamed_addr #2

declare dereferenceable(208) %"struct.net::DnsConfig"* @_ZN3net9DnsConfigaSEOS0_(%"struct.net::DnsConfig"*, %"struct.net::DnsConfig"* dereferenceable(208)) local_unnamed_addr #2

declare void @_ZN3net9DnsConfigC1EOS0_(%"struct.net::DnsConfig"*, %"struct.net::DnsConfig"* dereferenceable(208)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3net12_GLOBAL__N_113DnsClientImpl13UpdateSessionEN4absl8optionalINS_9DnsConfigEEE(%"class.net::(anonymous namespace)::DnsClientImpl"*, %"class.absl::optional"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.112"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.net::DnsTransactionFactory"*, %"class.net::DnsTransactionFactory"** %4, align 8
  store %"class.net::DnsTransactionFactory"* null, %"class.net::DnsTransactionFactory"** %4, align 8
  %6 = icmp eq %"class.net::DnsTransactionFactory"* %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.net::DnsTransactionFactory"* %5 to void (%"class.net::DnsTransactionFactory"*)***
  %9 = load void (%"class.net::DnsTransactionFactory"*)**, void (%"class.net::DnsTransactionFactory"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %9, i64 1
  %11 = load void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %10, align 8
  tail call void %11(%"class.net::DnsTransactionFactory"* nonnull %5) #12
  br label %12

12:                                               ; preds = %2, %7
  %13 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 6
  %14 = bitcast %class.scoped_refptr* %13 to i64*
  %15 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %13, i64 0, i32 0
  %16 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %15, align 8
  store i64 0, i64* %14, align 8
  %17 = icmp eq %"class.net::DnsSession"* %16, null
  br i1 %17, label %25, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %16, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %19) #12
  %20 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %16, i64 0, i32 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  tail call void @_ZN3net10DnsSessionD1Ev(%"class.net::DnsSession"* nonnull %16) #12
  %24 = bitcast %"class.net::DnsSession"* %16 to i8*
  tail call void @_ZdlPv(i8* %24) #13
  br label %25

25:                                               ; preds = %12, %18, %23
  %26 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8, i8* %26, align 8, !range !7
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 10
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %32 = getelementptr inbounds %"struct.net::DnsConfig", %"struct.net::DnsConfig"* %31, i64 0, i32 0
  %33 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 9
  %34 = tail call %"class.net::DnsSocketAllocator"* @_ZNSt3__111make_uniqueIN3net18DnsSocketAllocatorEJRPNS1_19ClientSocketFactoryERNS_6vectorINS1_10IPEndPointENS_9allocatorIS7_EEEERPNS1_6NetLogEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_(%"class.net::ClientSocketFactory"** dereferenceable(8) %30, %"class.std::__1::vector.14"* dereferenceable(24) %32, %"class.net::NetLog"** dereferenceable(8) %33)
  %35 = tail call i8* @_Znwm(i64 368) #13
  %36 = load i8, i8* %26, align 8, !range !7
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %29
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #14
  unreachable

39:                                               ; preds = %29
  %40 = bitcast i8* %35 to %"class.net::DnsSession"*
  %41 = getelementptr inbounds %"class.net::(anonymous namespace)::DnsClientImpl", %"class.net::(anonymous namespace)::DnsClientImpl"* %0, i64 0, i32 11
  %42 = load %"class.net::NetLog"*, %"class.net::NetLog"** %33, align 8
  tail call void @_ZN3net10DnsSessionC1ERKNS_9DnsConfigENSt3__110unique_ptrINS_18DnsSocketAllocatorENS4_14default_deleteIS6_EEEERKN4base17RepeatingCallbackIFiiiEEEPNS_6NetLogE(%"class.net::DnsSession"* nonnull %40, %"struct.net::DnsConfig"* dereferenceable(208) %31, %"class.net::DnsSocketAllocator"* %34, %"class.base::RepeatingCallback.125"* dereferenceable(8) %41, %"class.net::NetLog"* %42) #12
  %43 = bitcast i8* %35 to %"class.base::subtle::RefCountedBase"*
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* nonnull %43) #12
  %44 = ptrtoint i8* %35 to i64
  %45 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %15, align 8
  store i64 %44, i64* %14, align 8
  %46 = icmp eq %"class.net::DnsSession"* %45, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %45, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %48) #12
  %49 = getelementptr inbounds %"class.net::DnsSession", %"class.net::DnsSession"* %45, i64 0, i32 0, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  tail call void @_ZN3net10DnsSessionD1Ev(%"class.net::DnsSession"* nonnull %45) #12
  %53 = bitcast %"class.net::DnsSession"* %45 to i8*
  tail call void @_ZdlPv(i8* %53) #13
  br label %54

54:                                               ; preds = %39, %47, %52
  %55 = load %"class.net::DnsSession"*, %"class.net::DnsSession"** %15, align 8
  %56 = tail call %"class.net::DnsTransactionFactory"* @_ZN3net21DnsTransactionFactory13CreateFactoryEPNS_10DnsSessionE(%"class.net::DnsSession"* %55) #12
  %57 = ptrtoint %"class.net::DnsTransactionFactory"* %56 to i64
  %58 = load %"class.net::DnsTransactionFactory"*, %"class.net::DnsTransactionFactory"** %4, align 8
  %59 = bitcast %"class.std::__1::unique_ptr.112"* %3 to i64*
  store i64 %57, i64* %59, align 8
  %60 = icmp eq %"class.net::DnsTransactionFactory"* %58, null
  br i1 %60, label %66, label %61

61:                                               ; preds = %54
  %62 = bitcast %"class.net::DnsTransactionFactory"* %58 to void (%"class.net::DnsTransactionFactory"*)***
  %63 = load void (%"class.net::DnsTransactionFactory"*)**, void (%"class.net::DnsTransactionFactory"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %63, i64 1
  %65 = load void (%"class.net::DnsTransactionFactory"*)*, void (%"class.net::DnsTransactionFactory"*)** %64, align 8
  tail call void %65(%"class.net::DnsTransactionFactory"* nonnull %58) #12
  br label %66

66:                                               ; preds = %25, %61, %54
  ret void
}

declare void @_ZN3net9DnsConfigC1Ev(%"struct.net::DnsConfig"*) unnamed_addr #2

declare zeroext i1 @_ZNK3net18DnsConfigOverrides19OverridesEverythingEv(%"struct.net::DnsConfigOverrides"*) local_unnamed_addr #2

declare void @_ZNK3net18DnsConfigOverrides14ApplyOverridesERKNS_9DnsConfigE(%"struct.net::DnsConfig"* sret, %"struct.net::DnsConfigOverrides"*, %"struct.net::DnsConfig"* dereferenceable(208)) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #10

declare void @_ZN3net35GetDohUpgradeServersFromDotHostnameERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIS6_NS4_IS6_EEEE(%"class.std::__1::vector.53"* sret, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector.27"* dereferenceable(24)) local_unnamed_addr #2

declare %"class.base::HistogramBase"* @_ZN4base16BooleanHistogram10FactoryGetEPKci(i8*, i32) local_unnamed_addr #2

declare void @_ZN4base13HistogramBase10AddBooleanEb(%"class.base::HistogramBase"*, i1 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZNK3net9IPAddress18IsPubliclyRoutableEv(%"class.net::IPAddress"*) local_unnamed_addr #2

declare void @_ZN3net35GetDohUpgradeServersFromNameserversERKNSt3__16vectorINS_10IPEndPointENS0_9allocatorIS2_EEEERKNS1_INS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEENS3_ISC_EEEE(%"class.std::__1::vector.53"* sret, %"class.std::__1::vector.14"* dereferenceable(24), %"class.std::__1::vector.27"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.net::DnsSocketAllocator"* @_ZNSt3__111make_uniqueIN3net18DnsSocketAllocatorEJRPNS1_19ClientSocketFactoryERNS_6vectorINS1_10IPEndPointENS_9allocatorIS7_EEEERPNS1_6NetLogEEEENS_11__unique_ifIT_E15__unique_singleEDpOT0_(%"class.net::ClientSocketFactory"** dereferenceable(8), %"class.std::__1::vector.14"* dereferenceable(24), %"class.net::NetLog"** dereferenceable(8)) local_unnamed_addr #11 comdat {
  %4 = alloca %"class.std::__1::vector.14", align 8
  %5 = tail call i8* @_Znwm(i64 40) #13
  %6 = bitcast i8* %5 to %"class.net::DnsSocketAllocator"*
  %7 = load %"class.net::ClientSocketFactory"*, %"class.net::ClientSocketFactory"** %0, align 8
  %8 = bitcast %"class.std::__1::vector.14"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #12
  %9 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %1, i64 0, i32 0, i32 1
  %10 = bitcast %"class.net::IPEndPoint"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.14"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 20
  %16 = icmp eq i64 %14, 0
  %17 = inttoptr i64 %13 to %"class.net::IPEndPoint"*
  %18 = inttoptr i64 %11 to %"class.net::IPEndPoint"*
  br i1 %16, label %44, label %19

19:                                               ; preds = %3
  %20 = icmp ugt i64 %15, 922337203685477580
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast %"class.std::__1::vector.14"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %22) #14
  unreachable

23:                                               ; preds = %19
  %24 = tail call i8* @_Znwm(i64 %14) #13
  %25 = bitcast i8* %24 to %"class.net::IPEndPoint"*
  %26 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %4, i64 0, i32 0, i32 1
  %27 = bitcast %"class.net::IPEndPoint"** %26 to i8**
  store i8* %24, i8** %27, align 8
  %28 = bitcast %"class.std::__1::vector.14"* %4 to i8**
  store i8* %24, i8** %28, align 8
  %29 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %25, i64 %15
  %30 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.net::IPEndPoint"* %29, %"class.net::IPEndPoint"** %30, align 8
  %31 = bitcast %"class.net::IPEndPoint"** %26 to i64*
  %32 = ptrtoint i8* %24 to i64
  %33 = icmp eq %"class.net::IPEndPoint"* %17, %18
  br i1 %33, label %42, label %34

34:                                               ; preds = %23, %34
  %35 = phi %"class.net::IPEndPoint"* [ %38, %34 ], [ %25, %23 ]
  %36 = phi %"class.net::IPEndPoint"* [ %37, %34 ], [ %17, %23 ]
  tail call void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"* %35, %"class.net::IPEndPoint"* dereferenceable(20) %36) #12
  %37 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %36, i64 1
  %38 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %35, i64 1
  %39 = icmp eq %"class.net::IPEndPoint"* %37, %18
  br i1 %39, label %40, label %34

40:                                               ; preds = %34
  %41 = ptrtoint %"class.net::IPEndPoint"* %38 to i64
  br label %42

42:                                               ; preds = %40, %23
  %43 = phi i64 [ %32, %23 ], [ %41, %40 ]
  store i64 %43, i64* %31, align 8
  br label %44

44:                                               ; preds = %3, %42
  %45 = load %"class.net::NetLog"*, %"class.net::NetLog"** %2, align 8
  call void @_ZN3net18DnsSocketAllocatorC1EPNS_19ClientSocketFactoryENSt3__16vectorINS_10IPEndPointENS3_9allocatorIS5_EEEEPNS_6NetLogE(%"class.net::DnsSocketAllocator"* nonnull %6, %"class.net::ClientSocketFactory"* %7, %"class.std::__1::vector.14"* nonnull %4, %"class.net::NetLog"* %45) #12
  %46 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %4, i64 0, i32 0, i32 0
  %47 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %46, align 8
  %48 = icmp eq %"class.net::IPEndPoint"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.std::__1::vector.14", %"class.std::__1::vector.14"* %4, i64 0, i32 0, i32 1
  %51 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %50, align 8
  %52 = icmp eq %"class.net::IPEndPoint"* %51, %47
  br i1 %52, label %59, label %53

53:                                               ; preds = %49, %53
  %54 = phi %"class.net::IPEndPoint"* [ %55, %53 ], [ %51, %49 ]
  %55 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %54, i64 -1
  call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %55) #12
  %56 = icmp eq %"class.net::IPEndPoint"* %55, %47
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %46, align 8
  br label %59

59:                                               ; preds = %57, %49
  %60 = phi %"class.net::IPEndPoint"* [ %58, %57 ], [ %47, %49 ]
  store %"class.net::IPEndPoint"* %47, %"class.net::IPEndPoint"** %50, align 8
  %61 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %60, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @_ZdlPv(i8* %61) #13
  br label %62

62:                                               ; preds = %44, %59
  ret %"class.net::DnsSocketAllocator"* %6
}

declare void @_ZN3net10DnsSessionC1ERKNS_9DnsConfigENSt3__110unique_ptrINS_18DnsSocketAllocatorENS4_14default_deleteIS6_EEEERKN4base17RepeatingCallbackIFiiiEEEPNS_6NetLogE(%"class.net::DnsSession"*, %"struct.net::DnsConfig"* dereferenceable(208), %"class.net::DnsSocketAllocator"*, %"class.base::RepeatingCallback.125"* dereferenceable(8), %"class.net::NetLog"*) unnamed_addr #2

declare %"class.net::DnsTransactionFactory"* @_ZN3net21DnsTransactionFactory13CreateFactoryEPNS_10DnsSessionE(%"class.net::DnsSession"*) local_unnamed_addr #2

declare void @_ZN3net18DnsSocketAllocatorC1EPNS_19ClientSocketFactoryENSt3__16vectorINS_10IPEndPointENS3_9allocatorIS5_EEEEPNS_6NetLogE(%"class.net::DnsSocketAllocator"*, %"class.net::ClientSocketFactory"*, %"class.std::__1::vector.14"*, %"class.net::NetLog"*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

declare void @_ZN3net10IPEndPointC1ERKS0_(%"class.net::IPEndPoint"*, %"class.net::IPEndPoint"* dereferenceable(20)) unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

declare i32 @_ZN3net6NetLog6NextIDEv(%"class.net::NetLog"*) local_unnamed_addr #2

declare void @_ZN3net12NetLogSourceC1ENS_16NetLogSourceTypeEj(%"struct.net::NetLogSource"*, i32, i32) unnamed_addr #2

declare void @_ZN3net6NetLog30AddEntryWithMaterializedParamsENS_15NetLogEventTypeERKNS_12NetLogSourceENS_16NetLogEventPhaseEON4base5ValueE(%"class.net::NetLog"*, i32, %"struct.net::NetLogSource"* dereferenceable(16), i32, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #3

declare void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"*, i8 zeroext) unnamed_addr #2

declare void @_ZNK3net9DnsConfig7ToValueEv(%"class.base::Value"* sret, %"struct.net::DnsConfig"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK3net18DnsConfigOverrideseqERKS0_(%"struct.net::DnsConfigOverrides"*, %"struct.net::DnsConfigOverrides"* dereferenceable(208)) local_unnamed_addr #2

declare dereferenceable(208) %"struct.net::DnsConfigOverrides"* @_ZN3net18DnsConfigOverridesaSEOS0_(%"struct.net::DnsConfigOverrides"*, %"struct.net::DnsConfigOverrides"* dereferenceable(208)) local_unnamed_addr #2

declare void @_ZN3net9DnsConfigC1ERKS0_(%"struct.net::DnsConfig"*, %"struct.net::DnsConfig"* dereferenceable(208)) unnamed_addr #2

declare void @_ZN3net18DnsConfigOverridesC1ERKS0_(%"struct.net::DnsConfigOverrides"*, %"struct.net::DnsConfigOverrides"* dereferenceable(208)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFiiiEJEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEPFiiiEJEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base13BindRepeatingIPFiiiEJEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOS6_DpOS7_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13BindRepeatingIPFiiiEJEEENS_17RepeatingCallbackINS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOS6_DpOS7_"}
!7 = !{i8 0, i8 2}
!8 = !{!"branch_weights", i32 1, i32 2000}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK3net12_GLOBAL__N_113DnsClientImpl20BuildEffectiveConfigEv: argument 0"}
!11 = distinct !{!11, !"_ZNK3net12_GLOBAL__N_113DnsClientImpl20BuildEffectiveConfigEv"}
!12 = !{!"branch_weights", i32 2000, i32 1}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEvENKUlvE_clEv: argument 0"}
!15 = distinct !{!15, !"_ZZN3net12_GLOBAL__N_113DnsClientImpl15UpdateDnsConfigEvENKUlvE_clEv"}
