; ModuleID = '../../third_party/libwebp/src/dsp/lossless_sse2.c'
source_filename = "../../third_party/libwebp/src/dsp/lossless_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8LMultipliers = type { i8, i8, i8 }

@VP8LPredictors = external local_unnamed_addr global [16 x i32 (i32, i32*)*], align 16
@VP8LPredictorsAdd = external local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*], align 16
@VP8LAddGreenToBlueAndRed = external local_unnamed_addr global void (i32*, i32, i32*)*, align 8
@VP8LTransformColorInverse = external local_unnamed_addr global void (%struct.VP8LMultipliers*, i32*, i32, i32*)*, align 8
@VP8LConvertBGRAToRGB = external local_unnamed_addr global void (i32*, i32, i8*)*, align 8
@VP8LConvertBGRAToRGBA = external local_unnamed_addr global void (i32*, i32, i8*)*, align 8
@VP8LConvertBGRAToRGBA4444 = external local_unnamed_addr global void (i32*, i32, i8*)*, align 8
@VP8LConvertBGRAToRGB565 = external local_unnamed_addr global void (i32*, i32, i8*)*, align 8
@VP8LConvertBGRAToBGR = external local_unnamed_addr global void (i32*, i32, i8*)*, align 8
@VP8LPredictorsAdd_C = external local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8LDspInitSSE2() local_unnamed_addr #0 {
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @Predictor5_SSE2, i32 (i32, i32*)* @Predictor6_SSE2>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 5) to <2 x i32 (i32, i32*)*>*), align 8
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @Predictor7_SSE2, i32 (i32, i32*)* @Predictor8_SSE2>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 7) to <2 x i32 (i32, i32*)*>*), align 8
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @Predictor9_SSE2, i32 (i32, i32*)* @Predictor10_SSE2>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 9) to <2 x i32 (i32, i32*)*>*), align 8
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @Predictor11_SSE2, i32 (i32, i32*)* @Predictor12_SSE2>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 11) to <2 x i32 (i32, i32*)*>*), align 8
  store i32 (i32, i32*)* @Predictor13_SSE2, i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 13), align 8
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd0_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd1_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast ([16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd2_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd3_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 2) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd4_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd5_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 4) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd6_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd7_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 6) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd8_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd9_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 8) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd10_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd11_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 10) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd12_SSE2, void (i32*, i32*, i32, i32*)* @PredictorAdd13_SSE2>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 12) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store void (i32*, i32, i32*)* @AddGreenToBlueAndRed_SSE2, void (i32*, i32, i32*)** @VP8LAddGreenToBlueAndRed, align 8
  store void (%struct.VP8LMultipliers*, i32*, i32, i32*)* @TransformColorInverse_SSE2, void (%struct.VP8LMultipliers*, i32*, i32, i32*)** @VP8LTransformColorInverse, align 8
  store void (i32*, i32, i8*)* @ConvertBGRAToRGB_SSE2, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGB, align 8
  store void (i32*, i32, i8*)* @ConvertBGRAToRGBA_SSE2, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA, align 8
  store void (i32*, i32, i8*)* @ConvertBGRAToRGBA4444_SSE2, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA4444, align 8
  store void (i32*, i32, i8*)* @ConvertBGRAToRGB565_SSE2, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGB565, align 8
  store void (i32*, i32, i8*)* @ConvertBGRAToBGR_SSE2, void (i32*, i32, i8*)** @VP8LConvertBGRAToBGR, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor5_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %0, i32 0
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %5, i32 0
  %10 = bitcast <4 x i32> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = bitcast <16 x i8> %11 to <8 x i16>
  %13 = bitcast <16 x i8> %8 to <8 x i16>
  %14 = add <8 x i16> %12, %13
  %15 = lshr <8 x i16> %14, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %3, i32 0
  %17 = bitcast <4 x i32> %16 to <16 x i8>
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = bitcast <16 x i8> %18 to <8 x i16>
  %20 = add <8 x i16> %15, %19
  %21 = lshr <8 x i16> %20, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %22 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %21, <8 x i16> undef) #7
  %23 = bitcast <16 x i8> %22 to <4 x i32>
  %24 = extractelement <4 x i32> %23, i32 0
  ret i32 %24
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor6_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  %5 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %0, i32 0
  %6 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %4, i32 0
  %7 = bitcast <4 x i32> %5 to <16 x i8>
  %8 = bitcast <4 x i32> %6 to <16 x i8>
  %9 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %7, <16 x i8> %8) #7
  %10 = xor <4 x i32> %6, %5
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = and <16 x i8> %11, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %13 = sub <16 x i8> %9, %12
  %14 = bitcast <16 x i8> %13 to <4 x i32>
  %15 = extractelement <4 x i32> %14, i32 0
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor7_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %0, i32 0
  %5 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %3, i32 0
  %6 = bitcast <4 x i32> %4 to <16 x i8>
  %7 = bitcast <4 x i32> %5 to <16 x i8>
  %8 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %6, <16 x i8> %7) #7
  %9 = xor <4 x i32> %5, %4
  %10 = bitcast <4 x i32> %9 to <16 x i8>
  %11 = and <16 x i8> %10, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %12 = sub <16 x i8> %8, %11
  %13 = bitcast <16 x i8> %12 to <4 x i32>
  %14 = extractelement <4 x i32> %13, i32 0
  ret i32 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor8_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %4, i32 0
  %7 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %5, i32 0
  %8 = bitcast <4 x i32> %6 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %8, <16 x i8> %9) #7
  %11 = xor <4 x i32> %7, %6
  %12 = bitcast <4 x i32> %11 to <16 x i8>
  %13 = and <16 x i8> %12, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %14 = sub <16 x i8> %10, %13
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = extractelement <4 x i32> %15, i32 0
  ret i32 %16
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor9_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %3, i32 0
  %7 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %5, i32 0
  %8 = bitcast <4 x i32> %6 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %8, <16 x i8> %9) #7
  %11 = xor <4 x i32> %7, %6
  %12 = bitcast <4 x i32> %11 to <16 x i8>
  %13 = and <16 x i8> %12, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %14 = sub <16 x i8> %10, %13
  %15 = bitcast <16 x i8> %14 to <4 x i32>
  %16 = extractelement <4 x i32> %15, i32 0
  ret i32 %16
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor10_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = getelementptr inbounds i32, i32* %1, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %0, i32 0
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  %10 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %11 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %4, i32 0
  %12 = bitcast <4 x i32> %11 to <16 x i8>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = bitcast <16 x i8> %13 to <8 x i16>
  %15 = bitcast <16 x i8> %10 to <8 x i16>
  %16 = add <8 x i16> %14, %15
  %17 = lshr <8 x i16> %16, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %5, i32 0
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %7, i32 0
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = bitcast <16 x i8> %23 to <8 x i16>
  %25 = bitcast <16 x i8> %20 to <8 x i16>
  %26 = add <8 x i16> %24, %25
  %27 = lshr <8 x i16> %26, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %28 = add nuw <8 x i16> %27, %17
  %29 = lshr <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %29, <8 x i16> undef) #7
  %31 = bitcast <16 x i8> %30 to <4 x i32>
  %32 = extractelement <4 x i32> %31, i32 0
  ret i32 %32
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor11_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %3, i32 0
  %7 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %0, i32 0
  %8 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %5, i32 0
  %9 = bitcast <4 x i32> %6 to <16 x i8>
  %10 = bitcast <4 x i32> %8 to <16 x i8>
  %11 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %9, <16 x i8> %10) #7
  %12 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %10, <16 x i8> %9) #7
  %13 = bitcast <4 x i32> %7 to <16 x i8>
  %14 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %13, <16 x i8> %10) #7
  %15 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %10, <16 x i8> %13) #7
  %16 = or <16 x i8> %12, %11
  %17 = or <16 x i8> %15, %14
  %18 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = bitcast <16 x i8> %19 to <8 x i16>
  %21 = bitcast <16 x i8> %18 to <8 x i16>
  %22 = sub <8 x i16> %20, %21
  %23 = bitcast <8 x i16> %22 to <4 x i32>
  %24 = extractelement <4 x i32> %23, i32 0
  %25 = shl i32 %24, 16
  %26 = ashr exact i32 %25, 16
  %27 = extractelement <8 x i16> %22, i32 1
  %28 = sext i16 %27 to i32
  %29 = extractelement <8 x i16> %22, i32 2
  %30 = sext i16 %29 to i32
  %31 = extractelement <8 x i16> %22, i32 3
  %32 = sext i16 %31 to i32
  %33 = add nsw i32 %30, %28
  %34 = add nsw i32 %33, %32
  %35 = add nsw i32 %34, %26
  %36 = icmp slt i32 %35, 1
  %37 = select i1 %36, i32 %3, i32 %0
  ret i32 %37
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor12_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = insertelement <4 x i32> undef, i32 %0, i32 0
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9 = insertelement <4 x i32> undef, i32 %3, i32 0
  %10 = bitcast <4 x i32> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = insertelement <4 x i32> undef, i32 %5, i32 0
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i8> %8 to <8 x i16>
  %16 = bitcast <16 x i8> %11 to <8 x i16>
  %17 = add <8 x i16> %16, %15
  %18 = bitcast <16 x i8> %14 to <8 x i16>
  %19 = sub <8 x i16> %17, %18
  %20 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %19, <8 x i16> undef) #7
  %21 = bitcast <16 x i8> %20 to <4 x i32>
  %22 = extractelement <4 x i32> %21, i32 0
  ret i32 %22
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Predictor13_SSE2(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %0, i32 0
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %3, i32 0
  %10 = bitcast <4 x i32> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %5, i32 0
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %11 to <8 x i16>
  %16 = bitcast <16 x i8> %8 to <8 x i16>
  %17 = add <8 x i16> %15, %16
  %18 = lshr <8 x i16> %17, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19 = bitcast <16 x i8> %14 to <8 x i16>
  %20 = sub <8 x i16> %18, %19
  %21 = icmp slt <8 x i16> %18, %19
  %22 = zext <8 x i1> %21 to <8 x i16>
  %23 = add <8 x i16> %20, %22
  %24 = ashr <8 x i16> %23, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %25 = add <8 x i16> %24, %18
  %26 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %25, <8 x i16> undef) #7
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = extractelement <4 x i32> %27, i32 0
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd0_SSE2(i32*, i32* nocapture readnone, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %22, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %19, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %17, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = add <16 x i8> %13, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %15 = getelementptr inbounds i32, i32* %3, i64 %9
  %16 = bitcast i32* %15 to <16 x i8>*
  store <16 x i8> %14, <16 x i8>* %16, align 1
  %17 = add nuw nsw i64 %10, 4
  %18 = icmp sgt i64 %17, %7
  %19 = add nuw nsw i64 %9, 4
  br i1 %18, label %20, label %8

20:                                               ; preds = %8
  %21 = and i32 %2, -4
  br label %22

22:                                               ; preds = %20, %4
  %23 = phi i32 [ 0, %4 ], [ %21, %20 ]
  %24 = icmp eq i32 %23, %2
  br i1 %24, label %31, label %25

25:                                               ; preds = %22
  %26 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 0), align 16
  %27 = zext i32 %23 to i64
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = sub nsw i32 %2, %23
  %30 = getelementptr inbounds i32, i32* %3, i64 %27
  tail call void %26(i32* %28, i32* null, i32 %29, i32* %30) #7
  br label %31

31:                                               ; preds = %22, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd1_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %34, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %3, i64 -1
  %8 = load i32, i32* %7, align 4
  %9 = insertelement <4 x i32> undef, i32 %8, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = sext i32 %2 to i64
  br label %12

12:                                               ; preds = %6, %12
  %13 = phi i64 [ 0, %6 ], [ %31, %12 ]
  %14 = phi i64 [ 4, %6 ], [ %29, %12 ]
  %15 = phi <4 x i32> [ %10, %6 ], [ %28, %12 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %13
  %17 = bitcast i32* %16 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  %19 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %18, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %20 = add <16 x i8> %19, %18
  %21 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %20, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %22 = bitcast <4 x i32> %15 to <16 x i8>
  %23 = add <16 x i8> %20, %22
  %24 = add <16 x i8> %23, %21
  %25 = getelementptr inbounds i32, i32* %3, i64 %13
  %26 = bitcast i32* %25 to <16 x i8>*
  store <16 x i8> %24, <16 x i8>* %26, align 1
  %27 = bitcast <16 x i8> %24 to <4 x i32>
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %29 = add nuw nsw i64 %14, 4
  %30 = icmp sgt i64 %29, %11
  %31 = add nuw nsw i64 %13, 4
  br i1 %30, label %32, label %12

32:                                               ; preds = %12
  %33 = and i32 %2, -4
  br label %34

34:                                               ; preds = %32, %4
  %35 = phi i32 [ 0, %4 ], [ %33, %32 ]
  %36 = icmp eq i32 %35, %2
  br i1 %36, label %44, label %37

37:                                               ; preds = %34
  %38 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 1), align 8
  %39 = zext i32 %35 to i64
  %40 = getelementptr inbounds i32, i32* %0, i64 %39
  %41 = getelementptr inbounds i32, i32* %1, i64 %39
  %42 = sub nsw i32 %2, %35
  %43 = getelementptr inbounds i32, i32* %3, i64 %39
  tail call void %38(i32* %40, i32* %41, i32 %42, i32* %43) #7
  br label %44

44:                                               ; preds = %34, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd2_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %25, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %22, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %20, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = getelementptr inbounds i32, i32* %1, i64 %9
  %15 = bitcast i32* %14 to <16 x i8>*
  %16 = load <16 x i8>, <16 x i8>* %15, align 1
  %17 = add <16 x i8> %16, %13
  %18 = getelementptr inbounds i32, i32* %3, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  store <16 x i8> %17, <16 x i8>* %19, align 1
  %20 = add nuw nsw i64 %10, 4
  %21 = icmp sgt i64 %20, %7
  %22 = add nuw nsw i64 %9, 4
  br i1 %21, label %23, label %8

23:                                               ; preds = %8
  %24 = and i32 %2, -4
  br label %25

25:                                               ; preds = %23, %4
  %26 = phi i32 [ 0, %4 ], [ %24, %23 ]
  %27 = icmp eq i32 %26, %2
  br i1 %27, label %35, label %28

28:                                               ; preds = %25
  %29 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 2), align 16
  %30 = zext i32 %26 to i64
  %31 = getelementptr inbounds i32, i32* %0, i64 %30
  %32 = getelementptr inbounds i32, i32* %1, i64 %30
  %33 = sub nsw i32 %2, %26
  %34 = getelementptr inbounds i32, i32* %3, i64 %30
  tail call void %29(i32* %31, i32* %32, i32 %33, i32* %34) #7
  br label %35

35:                                               ; preds = %25, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd3_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %26, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %23, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %21, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = or i64 %9, 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %14
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = add <16 x i8> %17, %13
  %19 = getelementptr inbounds i32, i32* %3, i64 %9
  %20 = bitcast i32* %19 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %20, align 1
  %21 = add nuw nsw i64 %10, 4
  %22 = icmp sgt i64 %21, %7
  %23 = add nuw nsw i64 %9, 4
  br i1 %22, label %24, label %8

24:                                               ; preds = %8
  %25 = and i32 %2, -4
  br label %26

26:                                               ; preds = %24, %4
  %27 = phi i32 [ 0, %4 ], [ %25, %24 ]
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %36, label %29

29:                                               ; preds = %26
  %30 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 3), align 8
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = getelementptr inbounds i32, i32* %1, i64 %31
  %34 = sub nsw i32 %2, %27
  %35 = getelementptr inbounds i32, i32* %3, i64 %31
  tail call void %30(i32* %32, i32* %33, i32 %34, i32* %35) #7
  br label %36

36:                                               ; preds = %26, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd4_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %26, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %23, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %21, %8 ]
  %11 = getelementptr inbounds i32, i32* %0, i64 %9
  %12 = bitcast i32* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = add nsw i64 %9, -1
  %15 = getelementptr inbounds i32, i32* %1, i64 %14
  %16 = bitcast i32* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = add <16 x i8> %17, %13
  %19 = getelementptr inbounds i32, i32* %3, i64 %9
  %20 = bitcast i32* %19 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %20, align 1
  %21 = add nuw nsw i64 %10, 4
  %22 = icmp sgt i64 %21, %7
  %23 = add nuw nsw i64 %9, 4
  br i1 %22, label %24, label %8

24:                                               ; preds = %8
  %25 = and i32 %2, -4
  br label %26

26:                                               ; preds = %24, %4
  %27 = phi i32 [ 0, %4 ], [ %25, %24 ]
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %36, label %29

29:                                               ; preds = %26
  %30 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 4), align 16
  %31 = zext i32 %27 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = getelementptr inbounds i32, i32* %1, i64 %31
  %34 = sub nsw i32 %2, %27
  %35 = getelementptr inbounds i32, i32* %3, i64 %31
  tail call void %30(i32* %32, i32* %33, i32 %34, i32* %35) #7
  br label %36

36:                                               ; preds = %26, %29
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @PredictorAdd5_SSE2(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %50

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %46, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %48, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %13, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %11, i32 0
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %16, i32 0
  %21 = bitcast <4 x i32> %20 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = bitcast <16 x i8> %22 to <8 x i16>
  %24 = bitcast <16 x i8> %19 to <8 x i16>
  %25 = add <8 x i16> %23, %24
  %26 = lshr <8 x i16> %25, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %27 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %14, i32 0
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = bitcast <16 x i8> %29 to <8 x i16>
  %31 = add <8 x i16> %26, %30
  %32 = lshr <8 x i16> %31, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %33 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %32, <8 x i16> undef) #7
  %34 = bitcast <16 x i8> %33 to <4 x i32>
  %35 = extractelement <4 x i32> %34, i32 0
  %36 = getelementptr inbounds i32, i32* %0, i64 %12
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, -16711936
  %39 = and i32 %35, -16711936
  %40 = add i32 %39, %38
  %41 = and i32 %37, 16711935
  %42 = and i32 %35, 16711935
  %43 = add nuw nsw i32 %42, %41
  %44 = and i32 %40, -16711936
  %45 = and i32 %43, 16711935
  %46 = or i32 %44, %45
  %47 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %46, i32* %47, align 4
  %48 = add nuw nsw i64 %12, 1
  %49 = icmp eq i64 %48, %7
  br i1 %49, label %50, label %10

50:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @PredictorAdd6_SSE2(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %41

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %1, i64 -1
  %8 = zext i32 %2 to i64
  %9 = getelementptr inbounds i32, i32* %3, i64 -1
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %11, %6
  %12 = phi i32 [ %10, %6 ], [ %37, %11 ]
  %13 = phi i64 [ 0, %6 ], [ %39, %11 ]
  %14 = getelementptr inbounds i32, i32* %7, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %12, i32 0
  %17 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %18 = bitcast <4 x i32> %16 to <16 x i8>
  %19 = bitcast <4 x i32> %17 to <16 x i8>
  %20 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %18, <16 x i8> %19) #7
  %21 = xor <4 x i32> %17, %16
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = and <16 x i8> %22, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %24 = sub <16 x i8> %20, %23
  %25 = bitcast <16 x i8> %24 to <4 x i32>
  %26 = extractelement <4 x i32> %25, i32 0
  %27 = getelementptr inbounds i32, i32* %0, i64 %13
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, -16711936
  %30 = and i32 %26, -16711936
  %31 = add i32 %30, %29
  %32 = and i32 %28, 16711935
  %33 = and i32 %26, 16711935
  %34 = add nuw nsw i32 %33, %32
  %35 = and i32 %31, -16711936
  %36 = and i32 %34, 16711935
  %37 = or i32 %35, %36
  %38 = getelementptr inbounds i32, i32* %3, i64 %13
  store i32 %37, i32* %38, align 4
  %39 = add nuw nsw i64 %13, 1
  %40 = icmp eq i64 %39, %8
  br i1 %40, label %41, label %11

41:                                               ; preds = %11, %4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @PredictorAdd7_SSE2(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %40

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %36, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %38, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %11, i32 0
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %14, i32 0
  %17 = bitcast <4 x i32> %15 to <16 x i8>
  %18 = bitcast <4 x i32> %16 to <16 x i8>
  %19 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %17, <16 x i8> %18) #7
  %20 = xor <4 x i32> %16, %15
  %21 = bitcast <4 x i32> %20 to <16 x i8>
  %22 = and <16 x i8> %21, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %23 = sub <16 x i8> %19, %22
  %24 = bitcast <16 x i8> %23 to <4 x i32>
  %25 = extractelement <4 x i32> %24, i32 0
  %26 = getelementptr inbounds i32, i32* %0, i64 %12
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, -16711936
  %29 = and i32 %25, -16711936
  %30 = add i32 %29, %28
  %31 = and i32 %27, 16711935
  %32 = and i32 %25, 16711935
  %33 = add nuw nsw i32 %32, %31
  %34 = and i32 %30, -16711936
  %35 = and i32 %33, 16711935
  %36 = or i32 %34, %35
  %37 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %36, i32* %37, align 4
  %38 = add nuw nsw i64 %12, 1
  %39 = icmp eq i64 %38, %7
  br i1 %39, label %40, label %10

40:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd8_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %36, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %33, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %31, %8 ]
  %11 = add nsw i64 %9, -1
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %9
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = bitcast <2 x i64> %17 to <16 x i8>
  %22 = bitcast <2 x i64> %14 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %21, <16 x i8> %22) #7
  %24 = xor <2 x i64> %17, %14
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = and <16 x i8> %25, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %27 = add <16 x i8> %23, %20
  %28 = sub <16 x i8> %27, %26
  %29 = getelementptr inbounds i32, i32* %3, i64 %9
  %30 = bitcast i32* %29 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %30, align 1
  %31 = add nuw nsw i64 %10, 4
  %32 = icmp sgt i64 %31, %7
  %33 = add nuw nsw i64 %9, 4
  br i1 %32, label %34, label %8

34:                                               ; preds = %8
  %35 = and i32 %2, -4
  br label %36

36:                                               ; preds = %34, %4
  %37 = phi i32 [ 0, %4 ], [ %35, %34 ]
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 8), align 16
  %41 = zext i32 %37 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = getelementptr inbounds i32, i32* %1, i64 %41
  %44 = sub nsw i32 %2, %37
  %45 = getelementptr inbounds i32, i32* %3, i64 %41
  tail call void %40(i32* %42, i32* %43, i32 %44, i32* %45) #7
  br label %46

46:                                               ; preds = %36, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd9_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %36, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  br label %8

8:                                                ; preds = %6, %8
  %9 = phi i64 [ 0, %6 ], [ %33, %8 ]
  %10 = phi i64 [ 4, %6 ], [ %31, %8 ]
  %11 = or i64 %9, 1
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = bitcast i32* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = getelementptr inbounds i32, i32* %1, i64 %9
  %16 = bitcast i32* %15 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 1
  %18 = getelementptr inbounds i32, i32* %0, i64 %9
  %19 = bitcast i32* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = bitcast <2 x i64> %17 to <16 x i8>
  %22 = bitcast <2 x i64> %14 to <16 x i8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %21, <16 x i8> %22) #7
  %24 = xor <2 x i64> %17, %14
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  %26 = and <16 x i8> %25, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %27 = add <16 x i8> %23, %20
  %28 = sub <16 x i8> %27, %26
  %29 = getelementptr inbounds i32, i32* %3, i64 %9
  %30 = bitcast i32* %29 to <16 x i8>*
  store <16 x i8> %28, <16 x i8>* %30, align 1
  %31 = add nuw nsw i64 %10, 4
  %32 = icmp sgt i64 %31, %7
  %33 = add nuw nsw i64 %9, 4
  br i1 %32, label %34, label %8

34:                                               ; preds = %8
  %35 = and i32 %2, -4
  br label %36

36:                                               ; preds = %34, %4
  %37 = phi i32 [ 0, %4 ], [ %35, %34 ]
  %38 = icmp eq i32 %37, %2
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 9), align 8
  %41 = zext i32 %37 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = getelementptr inbounds i32, i32* %1, i64 %41
  %44 = sub nsw i32 %2, %37
  %45 = getelementptr inbounds i32, i32* %3, i64 %41
  tail call void %40(i32* %42, i32* %43, i32 %44, i32* %45) #7
  br label %46

46:                                               ; preds = %36, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd10_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %105, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %3, i64 -1
  %8 = load i32, i32* %7, align 4
  %9 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %8, i32 0
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = sext i32 %2 to i64
  br label %12

12:                                               ; preds = %6, %12
  %13 = phi i64 [ 0, %6 ], [ %102, %12 ]
  %14 = phi i64 [ 4, %6 ], [ %100, %12 ]
  %15 = phi <2 x i64> [ %10, %6 ], [ %95, %12 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %13
  %17 = bitcast i32* %16 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  %19 = add nsw i64 %13, -1
  %20 = getelementptr inbounds i32, i32* %1, i64 %19
  %21 = bitcast i32* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 1
  %23 = getelementptr inbounds i32, i32* %1, i64 %13
  %24 = bitcast i32* %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 1
  %26 = or i64 %13, 1
  %27 = getelementptr inbounds i32, i32* %1, i64 %26
  %28 = bitcast i32* %27 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 1
  %30 = bitcast <2 x i64> %25 to <16 x i8>
  %31 = bitcast <2 x i64> %29 to <16 x i8>
  %32 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %30, <16 x i8> %31) #7
  %33 = xor <2 x i64> %29, %25
  %34 = bitcast <2 x i64> %33 to <16 x i8>
  %35 = and <16 x i8> %34, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %36 = sub <16 x i8> %32, %35
  %37 = bitcast <2 x i64> %15 to <16 x i8>
  %38 = bitcast <2 x i64> %22 to <16 x i8>
  %39 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %37, <16 x i8> %38) #7
  %40 = xor <2 x i64> %22, %15
  %41 = bitcast <2 x i64> %40 to <16 x i8>
  %42 = and <16 x i8> %41, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %43 = sub <16 x i8> %39, %42
  %44 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %36, <16 x i8> %43) #7
  %45 = xor <16 x i8> %36, %43
  %46 = and <16 x i8> %45, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %47 = sub <16 x i8> %44, %46
  %48 = add <16 x i8> %47, %18
  %49 = bitcast <16 x i8> %48 to <4 x i32>
  %50 = extractelement <4 x i32> %49, i32 0
  %51 = getelementptr inbounds i32, i32* %3, i64 %13
  store i32 %50, i32* %51, align 4
  %52 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %53 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %54 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %55 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %48, <16 x i8> %53) #7
  %56 = xor <16 x i8> %48, %53
  %57 = and <16 x i8> %56, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %58 = sub <16 x i8> %55, %57
  %59 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %52, <16 x i8> %58) #7
  %60 = xor <16 x i8> %58, %52
  %61 = and <16 x i8> %60, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %62 = sub <16 x i8> %59, %61
  %63 = add <16 x i8> %62, %54
  %64 = bitcast <16 x i8> %63 to <4 x i32>
  %65 = extractelement <4 x i32> %64, i32 0
  %66 = getelementptr inbounds i32, i32* %3, i64 %26
  store i32 %65, i32* %66, align 4
  %67 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %68 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %69 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %70 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %63, <16 x i8> %68) #7
  %71 = xor <16 x i8> %63, %68
  %72 = and <16 x i8> %71, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %73 = sub <16 x i8> %70, %72
  %74 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %67, <16 x i8> %73) #7
  %75 = xor <16 x i8> %73, %67
  %76 = and <16 x i8> %75, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %77 = sub <16 x i8> %74, %76
  %78 = add <16 x i8> %77, %69
  %79 = bitcast <16 x i8> %78 to <4 x i32>
  %80 = extractelement <4 x i32> %79, i32 0
  %81 = or i64 %13, 2
  %82 = getelementptr inbounds i32, i32* %3, i64 %81
  store i32 %80, i32* %82, align 4
  %83 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %84 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %85 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %86 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %78, <16 x i8> %84) #7
  %87 = xor <16 x i8> %78, %84
  %88 = and <16 x i8> %87, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %89 = sub <16 x i8> %86, %88
  %90 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %83, <16 x i8> %89) #7
  %91 = xor <16 x i8> %89, %83
  %92 = and <16 x i8> %91, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %93 = sub <16 x i8> %90, %92
  %94 = add <16 x i8> %93, %85
  %95 = bitcast <16 x i8> %94 to <2 x i64>
  %96 = bitcast <16 x i8> %94 to <4 x i32>
  %97 = extractelement <4 x i32> %96, i32 0
  %98 = or i64 %13, 3
  %99 = getelementptr inbounds i32, i32* %3, i64 %98
  store i32 %97, i32* %99, align 4
  %100 = add nuw nsw i64 %14, 4
  %101 = icmp sgt i64 %100, %11
  %102 = add nuw nsw i64 %13, 4
  br i1 %101, label %103, label %12

103:                                              ; preds = %12
  %104 = and i32 %2, -4
  br label %105

105:                                              ; preds = %103, %4
  %106 = phi i32 [ 0, %4 ], [ %104, %103 ]
  %107 = icmp eq i32 %106, %2
  br i1 %107, label %115, label %108

108:                                              ; preds = %105
  %109 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 10), align 16
  %110 = zext i32 %106 to i64
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = getelementptr inbounds i32, i32* %1, i64 %110
  %113 = sub nsw i32 %2, %106
  %114 = getelementptr inbounds i32, i32* %3, i64 %110
  tail call void %109(i32* %111, i32* %112, i32 %113, i32* %114) #7
  br label %115

115:                                              ; preds = %105, %108
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd11_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %152, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %3, i64 -1
  %8 = load i32, i32* %7, align 4
  %9 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %8, i32 0
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = sext i32 %2 to i64
  br label %12

12:                                               ; preds = %6, %12
  %13 = phi i64 [ 0, %6 ], [ %149, %12 ]
  %14 = phi i64 [ 4, %6 ], [ %147, %12 ]
  %15 = phi <2 x i64> [ %10, %6 ], [ %142, %12 ]
  %16 = getelementptr inbounds i32, i32* %1, i64 %13
  %17 = bitcast i32* %16 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 1
  %19 = add nsw i64 %13, -1
  %20 = getelementptr inbounds i32, i32* %1, i64 %19
  %21 = bitcast i32* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 1
  %23 = getelementptr inbounds i32, i32* %0, i64 %13
  %24 = bitcast i32* %23 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = bitcast <2 x i64> %18 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %28 = bitcast <2 x i64> %22 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> %26, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %30 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %31 = shufflevector <4 x i32> %28, <4 x i32> %26, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %32 = bitcast <4 x i32> %27 to <16 x i8>
  %33 = bitcast <4 x i32> %29 to <16 x i8>
  %34 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %32, <16 x i8> %33) #7
  %35 = bitcast <4 x i32> %30 to <16 x i8>
  %36 = bitcast <4 x i32> %31 to <16 x i8>
  %37 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %35, <16 x i8> %36) #7
  %38 = bitcast <2 x i64> %34 to <4 x i32>
  %39 = bitcast <2 x i64> %37 to <4 x i32>
  %40 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %38, <4 x i32> %39) #7
  %41 = bitcast <2 x i64> %15 to <4 x i32>
  %42 = shufflevector <4 x i32> %41, <4 x i32> %26, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %43 = bitcast <4 x i32> %42 to <16 x i8>
  %44 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %43, <16 x i8> %33) #7
  %45 = bitcast <2 x i64> %44 to <4 x i32>
  %46 = bitcast <8 x i16> %40 to <4 x i32>
  %47 = icmp sgt <4 x i32> %45, %46
  %48 = sext <4 x i1> %47 to <4 x i32>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = and <2 x i64> %15, %49
  %51 = xor <2 x i64> %49, <i64 -1, i64 -1>
  %52 = and <2 x i64> %18, %51
  %53 = or <2 x i64> %52, %50
  %54 = bitcast <2 x i64> %53 to <16 x i8>
  %55 = add <16 x i8> %25, %54
  %56 = bitcast <16 x i8> %55 to <2 x i64>
  %57 = bitcast <16 x i8> %55 to <4 x i32>
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = getelementptr inbounds i32, i32* %3, i64 %13
  store i32 %58, i32* %59, align 4
  %60 = bitcast <2 x i64> %18 to <16 x i8>
  %61 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  %63 = bitcast <2 x i64> %22 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %65 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %66 = bitcast <8 x i16> %40 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %68 = bitcast <16 x i8> %61 to <4 x i32>
  %69 = shufflevector <4 x i32> %57, <4 x i32> %68, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %70 = bitcast <16 x i8> %64 to <4 x i32>
  %71 = shufflevector <4 x i32> %70, <4 x i32> %68, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %72 = bitcast <4 x i32> %69 to <16 x i8>
  %73 = bitcast <4 x i32> %71 to <16 x i8>
  %74 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %72, <16 x i8> %73) #7
  %75 = bitcast <2 x i64> %74 to <4 x i32>
  %76 = bitcast <16 x i8> %67 to <4 x i32>
  %77 = icmp sgt <4 x i32> %75, %76
  %78 = sext <4 x i1> %77 to <4 x i32>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = and <2 x i64> %56, %79
  %81 = xor <2 x i64> %79, <i64 -1, i64 -1>
  %82 = and <2 x i64> %81, %62
  %83 = or <2 x i64> %80, %82
  %84 = bitcast <2 x i64> %83 to <16 x i8>
  %85 = add <16 x i8> %65, %84
  %86 = bitcast <16 x i8> %85 to <2 x i64>
  %87 = bitcast <16 x i8> %85 to <4 x i32>
  %88 = extractelement <4 x i32> %87, i32 0
  %89 = or i64 %13, 1
  %90 = getelementptr inbounds i32, i32* %3, i64 %89
  store i32 %88, i32* %90, align 4
  %91 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %92 = bitcast <16 x i8> %91 to <2 x i64>
  %93 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %94 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %95 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %96 = bitcast <16 x i8> %91 to <4 x i32>
  %97 = shufflevector <4 x i32> %87, <4 x i32> %96, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %98 = bitcast <16 x i8> %93 to <4 x i32>
  %99 = shufflevector <4 x i32> %98, <4 x i32> %96, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %100 = bitcast <4 x i32> %97 to <16 x i8>
  %101 = bitcast <4 x i32> %99 to <16 x i8>
  %102 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %100, <16 x i8> %101) #7
  %103 = bitcast <2 x i64> %102 to <4 x i32>
  %104 = bitcast <16 x i8> %95 to <4 x i32>
  %105 = icmp sgt <4 x i32> %103, %104
  %106 = sext <4 x i1> %105 to <4 x i32>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = and <2 x i64> %86, %107
  %109 = xor <2 x i64> %107, <i64 -1, i64 -1>
  %110 = and <2 x i64> %109, %92
  %111 = or <2 x i64> %108, %110
  %112 = bitcast <2 x i64> %111 to <16 x i8>
  %113 = add <16 x i8> %94, %112
  %114 = bitcast <16 x i8> %113 to <2 x i64>
  %115 = bitcast <16 x i8> %113 to <4 x i32>
  %116 = extractelement <4 x i32> %115, i32 0
  %117 = or i64 %13, 2
  %118 = getelementptr inbounds i32, i32* %3, i64 %117
  store i32 %116, i32* %118, align 4
  %119 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %120 = bitcast <16 x i8> %119 to <2 x i64>
  %121 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %122 = shufflevector <16 x i8> %94, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %123 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %124 = bitcast <16 x i8> %119 to <4 x i32>
  %125 = shufflevector <4 x i32> %115, <4 x i32> %124, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %126 = bitcast <16 x i8> %121 to <4 x i32>
  %127 = shufflevector <4 x i32> %126, <4 x i32> %124, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %128 = bitcast <4 x i32> %125 to <16 x i8>
  %129 = bitcast <4 x i32> %127 to <16 x i8>
  %130 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %128, <16 x i8> %129) #7
  %131 = bitcast <2 x i64> %130 to <4 x i32>
  %132 = bitcast <16 x i8> %123 to <4 x i32>
  %133 = icmp sgt <4 x i32> %131, %132
  %134 = sext <4 x i1> %133 to <4 x i32>
  %135 = bitcast <4 x i32> %134 to <2 x i64>
  %136 = and <2 x i64> %114, %135
  %137 = xor <2 x i64> %135, <i64 -1, i64 -1>
  %138 = and <2 x i64> %137, %120
  %139 = or <2 x i64> %136, %138
  %140 = bitcast <2 x i64> %139 to <16 x i8>
  %141 = add <16 x i8> %122, %140
  %142 = bitcast <16 x i8> %141 to <2 x i64>
  %143 = bitcast <16 x i8> %141 to <4 x i32>
  %144 = extractelement <4 x i32> %143, i32 0
  %145 = or i64 %13, 3
  %146 = getelementptr inbounds i32, i32* %3, i64 %145
  store i32 %144, i32* %146, align 4
  %147 = add nuw nsw i64 %14, 4
  %148 = icmp sgt i64 %147, %11
  %149 = add nuw nsw i64 %13, 4
  br i1 %148, label %150, label %12

150:                                              ; preds = %12
  %151 = and i32 %2, -4
  br label %152

152:                                              ; preds = %150, %4
  %153 = phi i32 [ 0, %4 ], [ %151, %150 ]
  %154 = icmp eq i32 %153, %2
  br i1 %154, label %162, label %155

155:                                              ; preds = %152
  %156 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 11), align 8
  %157 = zext i32 %153 to i64
  %158 = getelementptr inbounds i32, i32* %0, i64 %157
  %159 = getelementptr inbounds i32, i32* %1, i64 %157
  %160 = sub nsw i32 %2, %153
  %161 = getelementptr inbounds i32, i32* %3, i64 %157
  tail call void %156(i32* %158, i32* %159, i32 %160, i32* %161) #7
  br label %162

162:                                              ; preds = %152, %155
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @PredictorAdd12_SSE2(i32*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %86, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %3, i64 -1
  %8 = load i32, i32* %7, align 4
  %9 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %8, i32 0
  %10 = bitcast <4 x i32> %9 to <16 x i8>
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = sext i32 %2 to i64
  br label %13

13:                                               ; preds = %6, %13
  %14 = phi i64 [ 0, %6 ], [ %83, %13 ]
  %15 = phi i64 [ 4, %6 ], [ %81, %13 ]
  %16 = phi <16 x i8> [ %11, %6 ], [ %80, %13 ]
  %17 = getelementptr inbounds i32, i32* %0, i64 %14
  %18 = bitcast i32* %17 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 1
  %20 = getelementptr inbounds i32, i32* %1, i64 %14
  %21 = bitcast i32* %20 to <16 x i8>*
  %22 = load <16 x i8>, <16 x i8>* %21, align 1
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = add nsw i64 %14, -1
  %26 = getelementptr inbounds i32, i32* %1, i64 %25
  %27 = bitcast i32* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %28, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %23 to <8 x i16>
  %32 = bitcast <16 x i8> %29 to <8 x i16>
  %33 = sub <8 x i16> %31, %32
  %34 = bitcast <16 x i8> %24 to <8 x i16>
  %35 = bitcast <16 x i8> %30 to <8 x i16>
  %36 = sub <8 x i16> %34, %35
  %37 = bitcast <16 x i8> %16 to <8 x i16>
  %38 = add <8 x i16> %33, %37
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> %38) #7
  %40 = add <16 x i8> %39, %19
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = extractelement <4 x i32> %41, i32 0
  %43 = getelementptr inbounds i32, i32* %3, i64 %14
  store i32 %42, i32* %43, align 4
  %44 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = bitcast <8 x i16> %33 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %47 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %48 = bitcast <16 x i8> %44 to <8 x i16>
  %49 = bitcast <16 x i8> %46 to <8 x i16>
  %50 = add <8 x i16> %49, %48
  %51 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %50, <8 x i16> %50) #7
  %52 = add <16 x i8> %51, %47
  %53 = bitcast <16 x i8> %52 to <4 x i32>
  %54 = extractelement <4 x i32> %53, i32 0
  %55 = or i64 %14, 1
  %56 = getelementptr inbounds i32, i32* %3, i64 %55
  store i32 %54, i32* %56, align 4
  %57 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %59 = bitcast <16 x i8> %57 to <8 x i16>
  %60 = add <8 x i16> %36, %59
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %60) #7
  %62 = add <16 x i8> %61, %58
  %63 = bitcast <16 x i8> %62 to <4 x i32>
  %64 = extractelement <4 x i32> %63, i32 0
  %65 = or i64 %14, 2
  %66 = getelementptr inbounds i32, i32* %3, i64 %65
  store i32 %64, i32* %66, align 4
  %67 = shufflevector <16 x i8> %62, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %68 = bitcast <8 x i16> %36 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %70 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %71 = bitcast <16 x i8> %67 to <8 x i16>
  %72 = bitcast <16 x i8> %69 to <8 x i16>
  %73 = add <8 x i16> %71, %72
  %74 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %73, <8 x i16> %73) #7
  %75 = add <16 x i8> %74, %70
  %76 = bitcast <16 x i8> %75 to <4 x i32>
  %77 = extractelement <4 x i32> %76, i32 0
  %78 = or i64 %14, 3
  %79 = getelementptr inbounds i32, i32* %3, i64 %78
  store i32 %77, i32* %79, align 4
  %80 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = add nuw nsw i64 %15, 4
  %82 = icmp sgt i64 %81, %12
  %83 = add nuw nsw i64 %14, 4
  br i1 %82, label %84, label %13

84:                                               ; preds = %13
  %85 = and i32 %2, -4
  br label %86

86:                                               ; preds = %84, %4
  %87 = phi i32 [ 0, %4 ], [ %85, %84 ]
  %88 = icmp eq i32 %87, %2
  br i1 %88, label %96, label %89

89:                                               ; preds = %86
  %90 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 12), align 16
  %91 = zext i32 %87 to i64
  %92 = getelementptr inbounds i32, i32* %0, i64 %91
  %93 = getelementptr inbounds i32, i32* %1, i64 %91
  %94 = sub nsw i32 %2, %87
  %95 = getelementptr inbounds i32, i32* %3, i64 %91
  tail call void %90(i32* %92, i32* %93, i32 %94, i32* %95) #7
  br label %96

96:                                               ; preds = %86, %89
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @PredictorAdd13_SSE2(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %54

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %50, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %52, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %13, i64 -1
  %16 = load i32, i32* %15, align 4
  %17 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %11, i32 0
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %14, i32 0
  %21 = bitcast <4 x i32> %20 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %16, i32 0
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = bitcast <16 x i8> %22 to <8 x i16>
  %27 = bitcast <16 x i8> %19 to <8 x i16>
  %28 = add <8 x i16> %26, %27
  %29 = lshr <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = bitcast <16 x i8> %25 to <8 x i16>
  %31 = sub <8 x i16> %29, %30
  %32 = icmp slt <8 x i16> %29, %30
  %33 = zext <8 x i1> %32 to <8 x i16>
  %34 = add <8 x i16> %31, %33
  %35 = ashr <8 x i16> %34, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = add <8 x i16> %35, %29
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %36, <8 x i16> undef) #7
  %38 = bitcast <16 x i8> %37 to <4 x i32>
  %39 = extractelement <4 x i32> %38, i32 0
  %40 = getelementptr inbounds i32, i32* %0, i64 %12
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, -16711936
  %43 = and i32 %39, -16711936
  %44 = add i32 %43, %42
  %45 = and i32 %41, 16711935
  %46 = and i32 %39, 16711935
  %47 = add nuw nsw i32 %46, %45
  %48 = and i32 %44, -16711936
  %49 = and i32 %47, 16711935
  %50 = or i32 %48, %49
  %51 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %50, i32* %51, align 4
  %52 = add nuw nsw i64 %12, 1
  %53 = icmp eq i64 %52, %7
  br i1 %53, label %54, label %10

54:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @AddGreenToBlueAndRed_SSE2(i32*, i32, i32*) #2 {
  %4 = icmp slt i32 %1, 4
  br i1 %4, label %27, label %5

5:                                                ; preds = %3
  %6 = sext i32 %1 to i64
  br label %7

7:                                                ; preds = %5, %7
  %8 = phi i64 [ 0, %5 ], [ %24, %7 ]
  %9 = phi i64 [ 4, %5 ], [ %22, %7 ]
  %10 = getelementptr inbounds i32, i32* %0, i64 %8
  %11 = bitcast i32* %10 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 1
  %13 = bitcast <2 x i64> %12 to <8 x i16>
  %14 = lshr <8 x i16> %13, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %15 = shufflevector <8 x i16> %14, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 undef, i32 6, i32 undef>
  %16 = shufflevector <8 x i16> %15, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 6, i32 6>
  %17 = bitcast <2 x i64> %12 to <16 x i8>
  %18 = bitcast <8 x i16> %16 to <16 x i8>
  %19 = add <16 x i8> %18, %17
  %20 = getelementptr inbounds i32, i32* %2, i64 %8
  %21 = bitcast i32* %20 to <16 x i8>*
  store <16 x i8> %19, <16 x i8>* %21, align 1
  %22 = add nuw nsw i64 %9, 4
  %23 = icmp sgt i64 %22, %6
  %24 = add nuw nsw i64 %8, 4
  br i1 %23, label %25, label %7

25:                                               ; preds = %7
  %26 = and i32 %1, -4
  br label %27

27:                                               ; preds = %25, %3
  %28 = phi i32 [ 0, %3 ], [ %26, %25 ]
  %29 = icmp eq i32 %28, %1
  br i1 %29, label %35, label %30

30:                                               ; preds = %27
  %31 = zext i32 %28 to i64
  %32 = getelementptr inbounds i32, i32* %0, i64 %31
  %33 = sub nsw i32 %1, %28
  %34 = getelementptr inbounds i32, i32* %2, i64 %31
  tail call void @VP8LAddGreenToBlueAndRed_C(i32* %32, i32 %33, i32* %34) #7
  br label %35

35:                                               ; preds = %27, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @TransformColorInverse_SSE2(%struct.VP8LMultipliers*, i32*, i32, i32*) #2 {
  %5 = icmp slt i32 %2, 4
  br i1 %5, label %68, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 2
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i16
  %10 = shl nuw i16 %9, 8
  %11 = ashr exact i16 %10, 5
  %12 = zext i16 %11 to i32
  %13 = shl nuw i32 %12, 16
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> zeroinitializer
  %16 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i16
  %19 = shl nuw i16 %18, 8
  %20 = ashr exact i16 %19, 5
  %21 = zext i16 %20 to i32
  %22 = shl nuw i32 %21, 16
  %23 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  %26 = shl nuw i16 %25, 8
  %27 = ashr exact i16 %26, 5
  %28 = zext i16 %27 to i32
  %29 = or i32 %22, %28
  %30 = insertelement <4 x i32> undef, i32 %29, i32 0
  %31 = shufflevector <4 x i32> %30, <4 x i32> undef, <4 x i32> zeroinitializer
  %32 = bitcast <4 x i32> %31 to <8 x i16>
  %33 = bitcast <4 x i32> %15 to <8 x i16>
  %34 = sext i32 %2 to i64
  br label %35

35:                                               ; preds = %6, %35
  %36 = phi i64 [ 0, %6 ], [ %65, %35 ]
  %37 = phi i64 [ 4, %6 ], [ %63, %35 ]
  %38 = getelementptr inbounds i32, i32* %1, i64 %36
  %39 = bitcast i32* %38 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 1
  %41 = and <2 x i64> %40, <i64 -71777214294589696, i64 -71777214294589696>
  %42 = bitcast <2 x i64> %41 to <8 x i16>
  %43 = shufflevector <8 x i16> %42, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 undef, i32 6, i32 undef>
  %44 = shufflevector <8 x i16> %43, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 4, i32 6, i32 6>
  %45 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %44, <8 x i16> %32) #7
  %46 = bitcast <2 x i64> %40 to <16 x i8>
  %47 = bitcast <8 x i16> %45 to <16 x i8>
  %48 = add <16 x i8> %47, %46
  %49 = bitcast <16 x i8> %48 to <8 x i16>
  %50 = shl <8 x i16> %49, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %51 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %50, <8 x i16> %33) #7
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = lshr <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %54 = bitcast <4 x i32> %53 to <16 x i8>
  %55 = bitcast <8 x i16> %50 to <16 x i8>
  %56 = add <16 x i8> %55, %54
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = lshr <8 x i16> %57, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = bitcast <8 x i16> %58 to <2 x i64>
  %60 = or <2 x i64> %41, %59
  %61 = getelementptr inbounds i32, i32* %3, i64 %36
  %62 = bitcast i32* %61 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 1
  %63 = add nuw nsw i64 %37, 4
  %64 = icmp sgt i64 %63, %34
  %65 = add nuw nsw i64 %36, 4
  br i1 %64, label %66, label %35

66:                                               ; preds = %35
  %67 = and i32 %2, -4
  br label %68

68:                                               ; preds = %66, %4
  %69 = phi i32 [ 0, %4 ], [ %67, %66 ]
  %70 = icmp eq i32 %69, %2
  br i1 %70, label %76, label %71

71:                                               ; preds = %68
  %72 = zext i32 %69 to i64
  %73 = getelementptr inbounds i32, i32* %1, i64 %72
  %74 = sub nsw i32 %2, %69
  %75 = getelementptr inbounds i32, i32* %3, i64 %72
  tail call void @VP8LTransformColorInverse_C(%struct.VP8LMultipliers* %0, i32* %73, i32 %74, i32* %75) #7
  br label %76

76:                                               ; preds = %68, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ConvertBGRAToRGB_SSE2(i32*, i32, i8*) #2 {
  %4 = bitcast i32* %0 to <2 x i64>*
  %5 = bitcast i8* %2 to <2 x i64>*
  %6 = icmp sgt i32 %1, 31
  br i1 %6, label %7, label %209

7:                                                ; preds = %3, %7
  %8 = phi <2 x i64>* [ %204, %7 ], [ %5, %3 ]
  %9 = phi <2 x i64>* [ %203, %7 ], [ %4, %3 ]
  %10 = phi i32 [ %205, %7 ], [ %1, %3 ]
  %11 = bitcast <2 x i64>* %9 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 1
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 1
  %14 = bitcast <2 x i64>* %13 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 2
  %17 = bitcast <2 x i64>* %16 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 3
  %20 = bitcast <2 x i64>* %19 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 4
  %23 = bitcast <2 x i64>* %22 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 1
  %25 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 5
  %26 = bitcast <2 x i64>* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1
  %28 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 6
  %29 = bitcast <2 x i64>* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 7
  %32 = bitcast <2 x i64>* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1
  %34 = shufflevector <16 x i8> %12, <16 x i8> %15, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %12, <16 x i8> %15, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = shufflevector <16 x i8> %18, <16 x i8> %21, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %18, <16 x i8> %21, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = shufflevector <16 x i8> %34, <16 x i8> %35, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %34, <16 x i8> %35, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = shufflevector <16 x i8> %36, <16 x i8> %37, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %36, <16 x i8> %37, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %42 = shufflevector <16 x i8> %38, <16 x i8> %39, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = bitcast <16 x i8> %42 to <2 x i64>
  %44 = shufflevector <16 x i8> %38, <16 x i8> %39, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <2 x i64>
  %46 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = bitcast <16 x i8> %46 to <2 x i64>
  %48 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast <16 x i8> %48 to <2 x i64>
  %50 = shufflevector <2 x i64> %45, <2 x i64> %49, <2 x i32> <i32 0, i32 2>
  %51 = shufflevector <2 x i64> %43, <2 x i64> %47, <2 x i32> <i32 1, i32 3>
  %52 = shufflevector <2 x i64> %43, <2 x i64> %47, <2 x i32> <i32 0, i32 2>
  %53 = shufflevector <16 x i8> %24, <16 x i8> %27, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = shufflevector <16 x i8> %24, <16 x i8> %27, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = shufflevector <16 x i8> %30, <16 x i8> %33, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %30, <16 x i8> %33, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %57 = shufflevector <16 x i8> %53, <16 x i8> %54, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = shufflevector <16 x i8> %53, <16 x i8> %54, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %59 = shufflevector <16 x i8> %55, <16 x i8> %56, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = shufflevector <16 x i8> %55, <16 x i8> %56, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %61 = shufflevector <16 x i8> %57, <16 x i8> %58, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  %63 = shufflevector <16 x i8> %57, <16 x i8> %58, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %64 = bitcast <16 x i8> %63 to <2 x i64>
  %65 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  %67 = shufflevector <16 x i8> %59, <16 x i8> %60, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = bitcast <16 x i8> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %64, <2 x i64> %68, <2 x i32> <i32 0, i32 2>
  %70 = shufflevector <2 x i64> %62, <2 x i64> %66, <2 x i32> <i32 1, i32 3>
  %71 = shufflevector <2 x i64> %62, <2 x i64> %66, <2 x i32> <i32 0, i32 2>
  %72 = bitcast <2 x i64> %50 to <8 x i16>
  %73 = bitcast <2 x i64> %69 to <8 x i16>
  %74 = and <8 x i16> %72, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %75 = and <8 x i16> %73, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %76 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %74, <8 x i16> %75) #7
  %77 = bitcast <2 x i64> %51 to <8 x i16>
  %78 = bitcast <2 x i64> %70 to <8 x i16>
  %79 = and <8 x i16> %77, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %80 = and <8 x i16> %78, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %81 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %79, <8 x i16> %80) #7
  %82 = bitcast <2 x i64> %52 to <8 x i16>
  %83 = bitcast <2 x i64> %71 to <8 x i16>
  %84 = and <8 x i16> %82, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %85 = and <8 x i16> %83, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %86 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> %85) #7
  %87 = lshr <8 x i16> %72, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = lshr <8 x i16> %73, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> %88) #7
  %90 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %91 = lshr <8 x i16> %78, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %92 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %90, <8 x i16> %91) #7
  %93 = lshr <8 x i16> %82, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %94 = lshr <8 x i16> %83, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %95 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %93, <8 x i16> %94) #7
  %96 = bitcast <16 x i8> %76 to <8 x i16>
  %97 = and <8 x i16> %96, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %98 = bitcast <16 x i8> %81 to <8 x i16>
  %99 = and <8 x i16> %98, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %100 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %97, <8 x i16> %99) #7
  %101 = bitcast <16 x i8> %86 to <8 x i16>
  %102 = and <8 x i16> %101, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %103 = bitcast <16 x i8> %89 to <8 x i16>
  %104 = and <8 x i16> %103, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %105 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %102, <8 x i16> %104) #7
  %106 = bitcast <16 x i8> %92 to <8 x i16>
  %107 = and <8 x i16> %106, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %108 = bitcast <16 x i8> %95 to <8 x i16>
  %109 = and <8 x i16> %108, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %110 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %107, <8 x i16> %109) #7
  %111 = lshr <8 x i16> %96, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %112 = lshr <8 x i16> %98, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %113 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %111, <8 x i16> %112) #7
  %114 = lshr <8 x i16> %101, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = lshr <8 x i16> %103, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %116 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %114, <8 x i16> %115) #7
  %117 = lshr <8 x i16> %106, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %118 = lshr <8 x i16> %108, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %119 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %117, <8 x i16> %118) #7
  %120 = bitcast <16 x i8> %100 to <8 x i16>
  %121 = bitcast <16 x i8> %105 to <8 x i16>
  %122 = and <8 x i16> %120, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %123 = and <8 x i16> %121, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> %123) #7
  %125 = bitcast <16 x i8> %110 to <8 x i16>
  %126 = bitcast <16 x i8> %113 to <8 x i16>
  %127 = and <8 x i16> %125, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %128 = and <8 x i16> %126, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %127, <8 x i16> %128) #7
  %130 = bitcast <16 x i8> %116 to <8 x i16>
  %131 = and <8 x i16> %130, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %132 = bitcast <16 x i8> %119 to <8 x i16>
  %133 = and <8 x i16> %132, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %134 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %131, <8 x i16> %133) #7
  %135 = lshr <8 x i16> %120, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = lshr <8 x i16> %121, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %137 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> %136) #7
  %138 = lshr <8 x i16> %125, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %139 = lshr <8 x i16> %126, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %140 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %138, <8 x i16> %139) #7
  %141 = lshr <8 x i16> %130, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %142 = lshr <8 x i16> %132, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %143 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %141, <8 x i16> %142) #7
  %144 = bitcast <16 x i8> %124 to <8 x i16>
  %145 = and <8 x i16> %144, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %146 = bitcast <16 x i8> %129 to <8 x i16>
  %147 = and <8 x i16> %146, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %148 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %145, <8 x i16> %147) #7
  %149 = bitcast <16 x i8> %134 to <8 x i16>
  %150 = and <8 x i16> %149, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %151 = bitcast <16 x i8> %137 to <8 x i16>
  %152 = and <8 x i16> %151, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %153 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %150, <8 x i16> %152) #7
  %154 = bitcast <16 x i8> %140 to <8 x i16>
  %155 = and <8 x i16> %154, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %156 = bitcast <16 x i8> %143 to <8 x i16>
  %157 = and <8 x i16> %156, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %158 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %155, <8 x i16> %157) #7
  %159 = lshr <8 x i16> %144, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %160 = lshr <8 x i16> %146, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %161 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %159, <8 x i16> %160) #7
  %162 = lshr <8 x i16> %149, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %163 = lshr <8 x i16> %151, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %164 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %162, <8 x i16> %163) #7
  %165 = lshr <8 x i16> %154, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %166 = lshr <8 x i16> %156, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %167 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %165, <8 x i16> %166) #7
  %168 = bitcast <16 x i8> %148 to <8 x i16>
  %169 = and <8 x i16> %168, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %170 = bitcast <16 x i8> %153 to <8 x i16>
  %171 = and <8 x i16> %170, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %172 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %169, <8 x i16> %171) #7
  %173 = bitcast <16 x i8> %158 to <8 x i16>
  %174 = and <8 x i16> %173, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %175 = bitcast <16 x i8> %161 to <8 x i16>
  %176 = and <8 x i16> %175, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %177 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %174, <8 x i16> %176) #7
  %178 = bitcast <16 x i8> %164 to <8 x i16>
  %179 = and <8 x i16> %178, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %180 = bitcast <16 x i8> %167 to <8 x i16>
  %181 = and <8 x i16> %180, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %182 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %181) #7
  %183 = lshr <8 x i16> %168, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %184 = lshr <8 x i16> %170, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %185 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %183, <8 x i16> %184) #7
  %186 = lshr <8 x i16> %173, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %187 = lshr <8 x i16> %175, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %188 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %186, <8 x i16> %187) #7
  %189 = lshr <8 x i16> %178, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %190 = lshr <8 x i16> %180, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %191 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %189, <8 x i16> %190) #7
  %192 = bitcast <2 x i64>* %8 to <16 x i8>*
  store <16 x i8> %172, <16 x i8>* %192, align 1
  %193 = getelementptr inbounds <2 x i64>, <2 x i64>* %8, i64 1
  %194 = bitcast <2 x i64>* %193 to <16 x i8>*
  store <16 x i8> %177, <16 x i8>* %194, align 1
  %195 = getelementptr inbounds <2 x i64>, <2 x i64>* %8, i64 2
  %196 = bitcast <2 x i64>* %195 to <16 x i8>*
  store <16 x i8> %182, <16 x i8>* %196, align 1
  %197 = getelementptr inbounds <2 x i64>, <2 x i64>* %8, i64 3
  %198 = bitcast <2 x i64>* %197 to <16 x i8>*
  store <16 x i8> %185, <16 x i8>* %198, align 1
  %199 = getelementptr inbounds <2 x i64>, <2 x i64>* %8, i64 4
  %200 = bitcast <2 x i64>* %199 to <16 x i8>*
  store <16 x i8> %188, <16 x i8>* %200, align 1
  %201 = getelementptr inbounds <2 x i64>, <2 x i64>* %8, i64 5
  %202 = bitcast <2 x i64>* %201 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %202, align 1
  %203 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 8
  %204 = getelementptr inbounds <2 x i64>, <2 x i64>* %8, i64 6
  %205 = add nsw i32 %10, -32
  %206 = icmp sgt i32 %205, 31
  br i1 %206, label %7, label %207

207:                                              ; preds = %7
  %208 = and i32 %1, 31
  br label %209

209:                                              ; preds = %207, %3
  %210 = phi i32 [ %1, %3 ], [ %208, %207 ]
  %211 = phi <2 x i64>* [ %4, %3 ], [ %203, %207 ]
  %212 = phi <2 x i64>* [ %5, %3 ], [ %204, %207 ]
  %213 = icmp sgt i32 %210, 0
  br i1 %213, label %214, label %217

214:                                              ; preds = %209
  %215 = bitcast <2 x i64>* %211 to i32*
  %216 = bitcast <2 x i64>* %212 to i8*
  tail call void @VP8LConvertBGRAToRGB_C(i32* %215, i32 %210, i8* %216) #7
  br label %217

217:                                              ; preds = %214, %209
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ConvertBGRAToRGBA_SSE2(i32*, i32, i8*) #2 {
  %4 = bitcast i32* %0 to <2 x i64>*
  %5 = bitcast i8* %2 to <2 x i64>*
  %6 = icmp sgt i32 %1, 7
  br i1 %6, label %7, label %35

7:                                                ; preds = %3, %7
  %8 = phi i32 [ %31, %7 ], [ %1, %3 ]
  %9 = phi <2 x i64>* [ %13, %7 ], [ %4, %3 ]
  %10 = phi <2 x i64>* [ %30, %7 ], [ %5, %3 ]
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 1
  %12 = load <2 x i64>, <2 x i64>* %9, align 1
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 2
  %14 = load <2 x i64>, <2 x i64>* %11, align 1
  %15 = and <2 x i64> %12, <i64 -71777214294589696, i64 -71777214294589696>
  %16 = and <2 x i64> %14, <i64 -71777214294589696, i64 -71777214294589696>
  %17 = bitcast <2 x i64> %12 to <8 x i16>
  %18 = and <8 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %20 = bitcast <2 x i64> %14 to <8 x i16>
  %21 = and <8 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 4, i32 5, i32 6, i32 7>
  %23 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %24 = bitcast <8 x i16> %23 to <2 x i64>
  %25 = shufflevector <8 x i16> %22, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %26 = bitcast <8 x i16> %25 to <2 x i64>
  %27 = or <2 x i64> %15, %24
  %28 = or <2 x i64> %16, %26
  %29 = getelementptr inbounds <2 x i64>, <2 x i64>* %10, i64 1
  store <2 x i64> %27, <2 x i64>* %10, align 1
  %30 = getelementptr inbounds <2 x i64>, <2 x i64>* %10, i64 2
  store <2 x i64> %28, <2 x i64>* %29, align 1
  %31 = add nsw i32 %8, -8
  %32 = icmp sgt i32 %31, 7
  br i1 %32, label %7, label %33

33:                                               ; preds = %7
  %34 = and i32 %1, 7
  br label %35

35:                                               ; preds = %33, %3
  %36 = phi <2 x i64>* [ %5, %3 ], [ %30, %33 ]
  %37 = phi <2 x i64>* [ %4, %3 ], [ %13, %33 ]
  %38 = phi i32 [ %1, %3 ], [ %34, %33 ]
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = bitcast <2 x i64>* %37 to i32*
  %42 = bitcast <2 x i64>* %36 to i8*
  tail call void @VP8LConvertBGRAToRGBA_C(i32* %41, i32 %38, i8* %42) #7
  br label %43

43:                                               ; preds = %40, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ConvertBGRAToRGBA4444_SSE2(i32*, i32, i8*) #2 {
  %4 = bitcast i32* %0 to <2 x i64>*
  %5 = bitcast i8* %2 to <2 x i64>*
  %6 = icmp sgt i32 %1, 7
  br i1 %6, label %7, label %42

7:                                                ; preds = %3, %7
  %8 = phi i32 [ %38, %7 ], [ %1, %3 ]
  %9 = phi <2 x i64>* [ %14, %7 ], [ %4, %3 ]
  %10 = phi <2 x i64>* [ %36, %7 ], [ %5, %3 ]
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 1
  %12 = bitcast <2 x i64>* %9 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 2
  %15 = bitcast <2 x i64>* %11 to <16 x i8>*
  %16 = load <16 x i8>, <16 x i8>* %15, align 1
  %17 = shufflevector <16 x i8> %13, <16 x i8> %16, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = shufflevector <16 x i8> %13, <16 x i8> %16, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %19 = shufflevector <16 x i8> %17, <16 x i8> %18, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %17, <16 x i8> %18, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %19, <16 x i8> %20, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = bitcast <16 x i8> %21 to <2 x i64>
  %23 = shufflevector <16 x i8> %19, <16 x i8> %20, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = shufflevector <2 x i64> %22, <2 x i64> %24, <2 x i32> <i32 1, i32 3>
  %26 = shufflevector <2 x i64> %24, <2 x i64> %22, <2 x i32> <i32 0, i32 2>
  %27 = bitcast <2 x i64> %25 to <8 x i16>
  %28 = lshr <8 x i16> %27, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %29 = bitcast <8 x i16> %28 to <2 x i64>
  %30 = and <2 x i64> %26, <i64 -1085102592571150096, i64 -1085102592571150096>
  %31 = and <2 x i64> %29, <i64 1085102592571150095, i64 1085102592571150095>
  %32 = or <2 x i64> %31, %30
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = shufflevector <16 x i8> %33, <16 x i8> %34, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = getelementptr inbounds <2 x i64>, <2 x i64>* %10, i64 1
  %37 = bitcast <2 x i64>* %10 to <16 x i8>*
  store <16 x i8> %35, <16 x i8>* %37, align 1
  %38 = add nsw i32 %8, -8
  %39 = icmp sgt i32 %38, 7
  br i1 %39, label %7, label %40

40:                                               ; preds = %7
  %41 = and i32 %1, 7
  br label %42

42:                                               ; preds = %40, %3
  %43 = phi <2 x i64>* [ %5, %3 ], [ %36, %40 ]
  %44 = phi <2 x i64>* [ %4, %3 ], [ %14, %40 ]
  %45 = phi i32 [ %1, %3 ], [ %41, %40 ]
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %42
  %48 = bitcast <2 x i64>* %44 to i32*
  %49 = bitcast <2 x i64>* %43 to i8*
  tail call void @VP8LConvertBGRAToRGBA4444_C(i32* %48, i32 %45, i8* %49) #7
  br label %50

50:                                               ; preds = %47, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ConvertBGRAToRGB565_SSE2(i32*, i32, i8*) #2 {
  %4 = bitcast i32* %0 to <2 x i64>*
  %5 = bitcast i8* %2 to <2 x i64>*
  %6 = icmp sgt i32 %1, 7
  br i1 %6, label %7, label %51

7:                                                ; preds = %3, %7
  %8 = phi i32 [ %47, %7 ], [ %1, %3 ]
  %9 = phi <2 x i64>* [ %14, %7 ], [ %4, %3 ]
  %10 = phi <2 x i64>* [ %45, %7 ], [ %5, %3 ]
  %11 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 1
  %12 = bitcast <2 x i64>* %9 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = getelementptr inbounds <2 x i64>, <2 x i64>* %9, i64 2
  %15 = bitcast <2 x i64>* %11 to <16 x i8>*
  %16 = load <16 x i8>, <16 x i8>* %15, align 1
  %17 = shufflevector <16 x i8> %13, <16 x i8> %16, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = shufflevector <16 x i8> %13, <16 x i8> %16, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %19 = shufflevector <16 x i8> %17, <16 x i8> %18, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %17, <16 x i8> %18, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %19, <16 x i8> %20, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = bitcast <16 x i8> %21 to <2 x i64>
  %23 = shufflevector <16 x i8> %19, <16 x i8> %20, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  %25 = shufflevector <2 x i64> %22, <2 x i64> %24, <2 x i32> <i32 1, i32 3>
  %26 = shufflevector <2 x i64> %24, <2 x i64> %22, <2 x i32> <i32 0, i32 2>
  %27 = and <2 x i64> %26, <i64 -506381209866536712, i64 -506381209866536712>
  %28 = bitcast <2 x i64> %25 to <8 x i16>
  %29 = lshr <8 x i16> %28, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %30 = bitcast <8 x i16> %29 to <2 x i64>
  %31 = and <2 x i64> %30, <i64 506381209866536711, i64 undef>
  %32 = shl <8 x i16> %28, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %33 = bitcast <8 x i16> %32 to <2 x i64>
  %34 = and <2 x i64> %33, <i64 -2242545357980376864, i64 undef>
  %35 = bitcast <2 x i64> %27 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %37 = or <2 x i64> %31, %27
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = lshr <8 x i16> %38, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %40 = bitcast <8 x i16> %39 to <2 x i64>
  %41 = or <2 x i64> %34, %40
  %42 = bitcast <2 x i64> %37 to <16 x i8>
  %43 = bitcast <2 x i64> %41 to <16 x i8>
  %44 = shufflevector <16 x i8> %42, <16 x i8> %43, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = getelementptr inbounds <2 x i64>, <2 x i64>* %10, i64 1
  %46 = bitcast <2 x i64>* %10 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %46, align 1
  %47 = add nsw i32 %8, -8
  %48 = icmp sgt i32 %47, 7
  br i1 %48, label %7, label %49

49:                                               ; preds = %7
  %50 = and i32 %1, 7
  br label %51

51:                                               ; preds = %49, %3
  %52 = phi <2 x i64>* [ %5, %3 ], [ %45, %49 ]
  %53 = phi <2 x i64>* [ %4, %3 ], [ %14, %49 ]
  %54 = phi i32 [ %1, %3 ], [ %50, %49 ]
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %51
  %57 = bitcast <2 x i64>* %53 to i32*
  %58 = bitcast <2 x i64>* %52 to i8*
  tail call void @VP8LConvertBGRAToRGB565_C(i32* %57, i32 %54, i8* %58) #7
  br label %59

59:                                               ; preds = %56, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ConvertBGRAToBGR_SSE2(i32*, i32, i8*) #2 {
  %4 = bitcast i32* %0 to <2 x i64>*
  %5 = mul nsw i32 %1, 3
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* %2, i64 %6
  %8 = icmp slt i32 %5, 26
  br i1 %8, label %46, label %9

9:                                                ; preds = %3, %9
  %10 = phi i32 [ %43, %9 ], [ %1, %3 ]
  %11 = phi i8* [ %42, %9 ], [ %2, %3 ]
  %12 = phi <2 x i64>* [ %15, %9 ], [ %4, %3 ]
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %12, i64 1
  %14 = load <2 x i64>, <2 x i64>* %12, align 1
  %15 = getelementptr inbounds <2 x i64>, <2 x i64>* %12, i64 2
  %16 = load <2 x i64>, <2 x i64>* %13, align 1
  %17 = and <2 x i64> %14, <i64 16777215, i64 16777215>
  %18 = and <2 x i64> %16, <i64 16777215, i64 16777215>
  %19 = lshr <2 x i64> %14, <i64 8, i64 8>
  %20 = and <2 x i64> %19, <i64 281474959933440, i64 281474959933440>
  %21 = lshr <2 x i64> %16, <i64 8, i64 8>
  %22 = and <2 x i64> %21, <i64 281474959933440, i64 281474959933440>
  %23 = or <2 x i64> %20, %17
  %24 = or <2 x i64> %22, %18
  %25 = bitcast <2 x i64> %23 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = bitcast <16 x i8> %26 to <2 x i64>
  %28 = bitcast <2 x i64> %24 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %30 = bitcast <16 x i8> %29 to <2 x i64>
  %31 = extractelement <2 x i64> %23, i32 0
  %32 = bitcast i8* %11 to i64*
  store i64 %31, i64* %32, align 1
  %33 = getelementptr inbounds i8, i8* %11, i64 6
  %34 = extractelement <2 x i64> %27, i32 0
  %35 = bitcast i8* %33 to i64*
  store i64 %34, i64* %35, align 1
  %36 = getelementptr inbounds i8, i8* %11, i64 12
  %37 = extractelement <2 x i64> %24, i32 0
  %38 = bitcast i8* %36 to i64*
  store i64 %37, i64* %38, align 1
  %39 = getelementptr inbounds i8, i8* %11, i64 18
  %40 = extractelement <2 x i64> %30, i32 0
  %41 = bitcast i8* %39 to i64*
  store i64 %40, i64* %41, align 1
  %42 = getelementptr inbounds i8, i8* %11, i64 24
  %43 = add nsw i32 %10, -8
  %44 = getelementptr inbounds i8, i8* %11, i64 50
  %45 = icmp ugt i8* %44, %7
  br i1 %45, label %46, label %9

46:                                               ; preds = %9, %3
  %47 = phi <2 x i64>* [ %4, %3 ], [ %15, %9 ]
  %48 = phi i8* [ %2, %3 ], [ %42, %9 ]
  %49 = phi i32 [ %1, %3 ], [ %43, %9 ]
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = bitcast <2 x i64>* %47 to i32*
  tail call void @VP8LConvertBGRAToBGR_C(i32* %52, i32 %49, i8* %48) #7
  br label %53

53:                                               ; preds = %51, %46
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #5

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

declare void @VP8LAddGreenToBlueAndRed_C(i32*, i32, i32*) local_unnamed_addr #6

declare void @VP8LTransformColorInverse_C(%struct.VP8LMultipliers*, i32*, i32, i32*) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #4

declare void @VP8LConvertBGRAToRGB_C(i32*, i32, i8*) local_unnamed_addr #6

declare void @VP8LConvertBGRAToRGBA_C(i32*, i32, i8*) local_unnamed_addr #6

declare void @VP8LConvertBGRAToRGBA4444_C(i32*, i32, i8*) local_unnamed_addr #6

declare void @VP8LConvertBGRAToRGB565_C(i32*, i32, i8*) local_unnamed_addr #6

declare void @VP8LConvertBGRAToBGR_C(i32*, i32, i8*) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
