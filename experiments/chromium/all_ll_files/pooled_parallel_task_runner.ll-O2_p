; ModuleID = '../../base/task/thread_pool/pooled_parallel_task_runner.cc'
source_filename = "../../base/task/thread_pool/pooled_parallel_task_runner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::PooledParallelTaskRunner" = type { %"class.base::TaskRunner.base", %"class.base::TaskTraits", %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::CheckedLock", %"class.base::internal::flat_tree" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"**, %"class.std::__1::__compressed_pair.16" }
%"class.base::internal::Sequence" = type { %"class.base::internal::TaskSource.base", %"class.base::SequenceToken", %"class.std::__1::queue", %"struct.std::__1::atomic.8", i8, %"class.base::internal::SequenceLocalStorageMap" }
%"class.base::internal::TaskSource.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1", %"class.base::TaskTraits", %"struct.std::__1::atomic.2", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32 }>
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.base::HeapHandle" = type { i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::SequenceToken" = type { i32 }
%"class.std::__1::queue" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.base::internal::Task"*, i64 }
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.7", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.6", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.6" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::array.7" = type { [4 x i8*] }
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { %"class.base::TimeTicks" }
%"class.base::internal::SequenceLocalStorageMap" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree.12" }
%"class.base::internal::flat_tree.12" = type { %"class.std::__1::vector.13" }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.base::internal::Sequence"** }
%"class.base::internal::PooledTaskRunnerDelegate" = type { i32 (...)** }
%"struct.base::PendingTask" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.7", i32, [4 x i8], i8*, i32, i8, [3 x i8] }>
%"struct.std::__1::__split_buffer" = type { %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"**, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.std::__1::allocator.19"* }
%"class.std::__1::allocator.19" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIPN4base8internal8SequenceENS_9allocatorIS4_EEE7emplaceIJS4_EEENS_11__wrap_iterIPS4_EENS9_IPKS4_EEDpOT_ = comdat any

$_ZNSt3__114__split_bufferIPN4base8internal8SequenceERNS_9allocatorIS4_EEE12emplace_backIJS4_EEEvDpOT_ = comdat any

@_ZTVN4base8internal24PooledParallelTaskRunnerE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.base::internal::PooledParallelTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)* @_ZN4base8internal24PooledParallelTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE to i8*), i8* bitcast (void (%"class.base::internal::PooledParallelTaskRunner"*)* @_ZN4base8internal24PooledParallelTaskRunnerD2Ev to i8*), i8* bitcast (void (%"class.base::internal::PooledParallelTaskRunner"*)* @_ZN4base8internal24PooledParallelTaskRunnerD0Ev to i8*), i8* bitcast (void (%"class.base::TaskRunner"*)* @_ZNK4base10TaskRunner10OnDestructEv to i8*)] }, align 8

@_ZN4base8internal24PooledParallelTaskRunnerC1ERKNS_10TaskTraitsEPNS0_24PooledTaskRunnerDelegateE = hidden unnamed_addr alias void (%"class.base::internal::PooledParallelTaskRunner"*, %"class.base::TaskTraits"*, %"class.base::internal::PooledTaskRunnerDelegate"*), void (%"class.base::internal::PooledParallelTaskRunner"*, %"class.base::TaskTraits"*, %"class.base::internal::PooledTaskRunnerDelegate"*)* @_ZN4base8internal24PooledParallelTaskRunnerC2ERKNS_10TaskTraitsEPNS0_24PooledTaskRunnerDelegateE
@_ZN4base8internal24PooledParallelTaskRunnerD1Ev = hidden unnamed_addr alias void (%"class.base::internal::PooledParallelTaskRunner"*), void (%"class.base::internal::PooledParallelTaskRunner"*)* @_ZN4base8internal24PooledParallelTaskRunnerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal24PooledParallelTaskRunnerC2ERKNS_10TaskTraitsEPNS0_24PooledTaskRunnerDelegateE(%"class.base::internal::PooledParallelTaskRunner"*, %"class.base::TaskTraits"* nocapture readonly dereferenceable(15), %"class.base::internal::PooledTaskRunnerDelegate"*) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.base::internal::PooledParallelTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerC2Ev(%"class.base::TaskRunner"* %4) #8
  %5 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base8internal24PooledParallelTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 9, i1 false) #8
  %8 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 1, i32 1
  %9 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %9, i64 6, i1 false) #8
  %10 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 2
  store %"class.base::internal::PooledTaskRunnerDelegate"* %2, %"class.base::internal::PooledTaskRunnerDelegate"** %10, align 8
  %11 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 3, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %11) #8
  %12 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4
  %13 = bitcast %"class.base::internal::flat_tree"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #8
  ret void
}

declare void @_ZN4base10TaskRunnerC2Ev(%"class.base::TaskRunner"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal24PooledParallelTaskRunnerD2Ev(%"class.base::internal::PooledParallelTaskRunner"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base8internal24PooledParallelTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %3, align 8
  %5 = icmp eq %"class.base::internal::Sequence"** %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.base::internal::Sequence"** %4 to i64
  %8 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %9 = bitcast %"class.base::internal::Sequence"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.base::internal::Sequence"** %4 to i8*
  tail call void @_ZdlPv(i8* %10) #9
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 3, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %12) #8
  %13 = bitcast %"class.base::internal::PooledParallelTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"* %13) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal24PooledParallelTaskRunnerD0Ev(%"class.base::internal::PooledParallelTaskRunner"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN4base8internal24PooledParallelTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %3, align 8
  %5 = icmp eq %"class.base::internal::Sequence"** %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.base::internal::Sequence"** %4 to i64
  %8 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %9 = bitcast %"class.base::internal::Sequence"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.base::internal::Sequence"** %4 to i8*
  tail call void @_ZdlPv(i8* %10) #9
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 3, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %12) #8
  %13 = bitcast %"class.base::internal::PooledParallelTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"* %13) #8
  %14 = bitcast %"class.base::internal::PooledParallelTaskRunner"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal24PooledParallelTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::internal::PooledParallelTaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"* nocapture, i64) unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::internal::Sequence"*, align 8
  %6 = alloca %"struct.base::internal::Task", align 8
  %7 = alloca %"class.base::OnceCallback", align 8
  %8 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 2
  %9 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %8, align 8
  %10 = tail call zeroext i1 @_ZN4base8internal24PooledTaskRunnerDelegate22MatchesCurrentDelegateEPS1_(%"class.base::internal::PooledTaskRunnerDelegate"* %9) #8
  br i1 %10, label %11, label %77

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 1
  %13 = tail call i8* @_Znwm(i64 168) #9
  %14 = bitcast i8* %13 to %"class.base::internal::Sequence"*
  %15 = bitcast %"class.base::internal::PooledParallelTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base8internal8SequenceC1ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::Sequence"* nonnull %14, %"class.base::TaskTraits"* dereferenceable(15) %12, %"class.base::TaskRunner"* %15, i32 0) #8
  %16 = getelementptr inbounds i8, i8* %13, i64 8
  %17 = bitcast i8* %16 to i32*
  %18 = atomicrmw add i32* %17, i32 1 monotonic
  %19 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 3
  %20 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %20) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %25, label %23, !prof !2

23:                                               ; preds = %11
  %24 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %19, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %24) #8
  br label %25

25:                                               ; preds = %11, %23
  %26 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4
  %27 = bitcast %"class.base::internal::Sequence"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #8
  %28 = bitcast %"class.base::internal::Sequence"** %5 to i8**
  store i8* %13, i8** %28, align 8
  %29 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %26, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %29, align 8
  %31 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %32 = bitcast %"class.base::internal::Sequence"*** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = ptrtoint %"class.base::internal::Sequence"** %30 to i64
  %35 = sub i64 %33, %34
  %36 = icmp eq i64 %35, 0
  %37 = inttoptr i64 %33 to %"class.base::internal::Sequence"**
  br i1 %36, label %53, label %38

38:                                               ; preds = %25
  %39 = ashr exact i64 %35, 3
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi %"class.base::internal::Sequence"** [ %30, %38 ], [ %51, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %50, %40 ]
  %43 = lshr i64 %42, 1
  %44 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %41, i64 %43
  %45 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %44, align 8
  %46 = icmp ult %"class.base::internal::Sequence"* %45, %14
  %47 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %44, i64 1
  %48 = xor i64 %43, -1
  %49 = add i64 %42, %48
  %50 = select i1 %46, i64 %49, i64 %43
  %51 = select i1 %46, %"class.base::internal::Sequence"** %47, %"class.base::internal::Sequence"** %41
  %52 = icmp eq i64 %50, 0
  br i1 %52, label %53, label %40

53:                                               ; preds = %40, %25
  %54 = phi %"class.base::internal::Sequence"** [ %30, %25 ], [ %51, %40 ]
  %55 = icmp eq %"class.base::internal::Sequence"** %54, %37
  br i1 %55, label %59, label %56

56:                                               ; preds = %53
  %57 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %54, align 8
  %58 = icmp ugt %"class.base::internal::Sequence"* %57, %14
  br i1 %58, label %59, label %62

59:                                               ; preds = %56, %53
  %60 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %26, i64 0, i32 0
  %61 = call %"class.base::internal::Sequence"** @_ZNSt3__16vectorIPN4base8internal8SequenceENS_9allocatorIS4_EEE7emplaceIJS4_EEENS_11__wrap_iterIPS4_EENS9_IPKS4_EEDpOT_(%"class.std::__1::vector"* %60, %"class.base::internal::Sequence"** %54, %"class.base::internal::Sequence"** nonnull dereferenceable(8) %5) #8
  br label %62

62:                                               ; preds = %59, %56
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #8
  %63 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %20) #8
  %64 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %8, align 8
  %65 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.base::OnceCallback"* %7 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %65, align 8
  %69 = call i64 @_ZN4base9TimeTicks3NowEv() #8
  call void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"* nonnull %6, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %7, i64 %69, i64 %3) #8
  %70 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %64 to i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)***
  %71 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)**, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)*** %70, align 8
  %72 = getelementptr inbounds i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)** %71, i64 3
  %73 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"struct.base::internal::Task"*, %"class.base::internal::Sequence"*)** %72, align 8
  %74 = call zeroext i1 %73(%"class.base::internal::PooledTaskRunnerDelegate"* %64, %"struct.base::internal::Task"* nonnull %6, %"class.base::internal::Sequence"* nonnull %14) #8
  %75 = bitcast %"struct.base::internal::Task"* %6 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %75) #8
  %76 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %7, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %76) #8
  br label %77

77:                                               ; preds = %4, %62
  %78 = phi i1 [ %74, %62 ], [ false, %4 ]
  ret i1 %78
}

declare zeroext i1 @_ZN4base8internal24PooledTaskRunnerDelegate22MatchesCurrentDelegateEPS1_(%"class.base::internal::PooledTaskRunnerDelegate"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, i64, i64) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal24PooledParallelTaskRunner18UnregisterSequenceEPNS0_8SequenceE(%"class.base::internal::PooledParallelTaskRunner"*, %"class.base::internal::Sequence"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !2

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #8
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %11 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::PooledParallelTaskRunner", %"class.base::internal::PooledParallelTaskRunner"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %13 = bitcast %"class.base::internal::Sequence"*** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = ptrtoint %"class.base::internal::Sequence"** %11 to i64
  %16 = sub i64 %14, %15
  %17 = icmp eq i64 %16, 0
  %18 = inttoptr i64 %14 to %"class.base::internal::Sequence"**
  br i1 %17, label %36, label %19

19:                                               ; preds = %9
  %20 = ashr exact i64 %16, 3
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi %"class.base::internal::Sequence"** [ %11, %19 ], [ %32, %21 ]
  %23 = phi i64 [ %20, %19 ], [ %31, %21 ]
  %24 = lshr i64 %23, 1
  %25 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %22, i64 %24
  %26 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %25, align 8
  %27 = icmp ult %"class.base::internal::Sequence"* %26, %1
  %28 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %25, i64 1
  %29 = xor i64 %24, -1
  %30 = add i64 %23, %29
  %31 = select i1 %27, i64 %30, i64 %24
  %32 = select i1 %27, %"class.base::internal::Sequence"** %28, %"class.base::internal::Sequence"** %22
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %34, label %21

34:                                               ; preds = %21
  %35 = ptrtoint %"class.base::internal::Sequence"** %32 to i64
  br label %36

36:                                               ; preds = %34, %9
  %37 = phi i64 [ %35, %34 ], [ %15, %9 ]
  %38 = phi %"class.base::internal::Sequence"** [ %32, %34 ], [ %11, %9 ]
  %39 = icmp eq %"class.base::internal::Sequence"** %38, %18
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %38, align 8
  %42 = icmp ugt %"class.base::internal::Sequence"* %41, %1
  br i1 %42, label %46, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %38, i64 1
  %45 = ptrtoint %"class.base::internal::Sequence"** %44 to i64
  br label %46

46:                                               ; preds = %43, %40, %36
  %47 = phi i64 [ %45, %43 ], [ %37, %36 ], [ %37, %40 ]
  %48 = inttoptr i64 %47 to %"class.base::internal::Sequence"**
  %49 = icmp eq %"class.base::internal::Sequence"** %38, %48
  br i1 %49, label %59, label %50

50:                                               ; preds = %46
  %51 = sub i64 %14, %47
  %52 = ashr exact i64 %51, 3
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %57, label %54

54:                                               ; preds = %50
  %55 = bitcast %"class.base::internal::Sequence"** %38 to i8*
  %56 = inttoptr i64 %47 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 %51, i1 false) #8
  br label %57

57:                                               ; preds = %54, %50
  %58 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %38, i64 %52
  store %"class.base::internal::Sequence"** %58, %"class.base::internal::Sequence"*** %12, align 8
  br label %59

59:                                               ; preds = %46, %57
  %60 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #8
  ret void
}

declare void @_ZNK4base10TaskRunner10OnDestructEv(%"class.base::TaskRunner"*) unnamed_addr #1

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN4base8internal8SequenceC1ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::Sequence"*, %"class.base::TaskTraits"* dereferenceable(15), %"class.base::TaskRunner"*, i32) unnamed_addr #1

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.base::internal::Sequence"** @_ZNSt3__16vectorIPN4base8internal8SequenceENS_9allocatorIS4_EEE7emplaceIJS4_EEENS_11__wrap_iterIPS4_EENS9_IPKS4_EEDpOT_(%"class.std::__1::vector"*, %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.base::internal::Sequence"** %1 to i64
  %5 = alloca %"struct.std::__1::__split_buffer", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %9, align 8
  %11 = icmp ult %"class.base::internal::Sequence"** %8, %10
  %12 = ptrtoint %"class.base::internal::Sequence"** %8 to i64
  %13 = ptrtoint %"class.base::internal::Sequence"** %10 to i64
  br i1 %11, label %14, label %163

14:                                               ; preds = %3
  %15 = icmp eq %"class.base::internal::Sequence"** %8, %1
  %16 = bitcast %"class.base::internal::Sequence"** %2 to i64*
  %17 = load i64, i64* %16, align 8
  br i1 %15, label %18, label %23

18:                                               ; preds = %14
  %19 = bitcast %"class.base::internal::Sequence"** %1 to i64*
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %1, i64 1
  %21 = ptrtoint %"class.base::internal::Sequence"** %20 to i64
  %22 = bitcast %"class.base::internal::Sequence"*** %7 to i64*
  store i64 %21, i64* %22, align 8
  br label %319

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %1, i64 1
  %25 = ptrtoint %"class.base::internal::Sequence"** %24 to i64
  %26 = sub i64 %12, %25
  %27 = ashr exact i64 %26, 3
  %28 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %1, i64 %27
  %29 = bitcast %"class.base::internal::Sequence"*** %7 to i64*
  %30 = icmp ult %"class.base::internal::Sequence"** %28, %8
  br i1 %30, label %31, label %144

31:                                               ; preds = %23
  %32 = sub nsw i64 0, %27
  %33 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %32
  %34 = bitcast %"class.base::internal::Sequence"** %33 to i8*
  %35 = xor i64 %4, -1
  %36 = getelementptr i8, i8* %34, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 4
  br i1 %40, label %41, label %44

41:                                               ; preds = %139, %44, %31
  %42 = phi %"class.base::internal::Sequence"** [ %8, %44 ], [ %8, %31 ], [ %62, %139 ]
  %43 = phi %"class.base::internal::Sequence"** [ %28, %44 ], [ %28, %31 ], [ %63, %139 ]
  br label %152

44:                                               ; preds = %31
  %45 = sub nsw i64 0, %27
  %46 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %45
  %47 = bitcast %"class.base::internal::Sequence"** %46 to i8*
  %48 = xor i64 %4, -1
  %49 = getelementptr i8, i8* %47, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = lshr i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %52
  %54 = add nsw i64 %27, %51
  %55 = add nsw i64 %54, 1
  %56 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %1, i64 %55
  %57 = icmp ult %"class.base::internal::Sequence"** %8, %56
  %58 = icmp ult %"class.base::internal::Sequence"** %28, %53
  %59 = and i1 %57, %58
  br i1 %59, label %41, label %60

60:                                               ; preds = %44
  %61 = and i64 %39, 4611686018427387900
  %62 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %61
  %63 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %28, i64 %61
  %64 = add nsw i64 %61, -4
  %65 = lshr exact i64 %64, 2
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 3
  %68 = icmp ult i64 %64, 12
  br i1 %68, label %120, label %69

69:                                               ; preds = %60
  %70 = sub nsw i64 %66, %67
  br label %71

71:                                               ; preds = %71, %69
  %72 = phi i64 [ 0, %69 ], [ %117, %71 ]
  %73 = phi i64 [ %70, %69 ], [ %118, %71 ]
  %74 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %72
  %75 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %28, i64 %72
  %76 = bitcast %"class.base::internal::Sequence"** %75 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !alias.scope !3
  %78 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %75, i64 2
  %79 = bitcast %"class.base::internal::Sequence"** %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !3
  %81 = bitcast %"class.base::internal::Sequence"** %74 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 8, !alias.scope !6, !noalias !3
  %82 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %74, i64 2
  %83 = bitcast %"class.base::internal::Sequence"** %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !6, !noalias !3
  %84 = or i64 %72, 4
  %85 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %84
  %86 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %28, i64 %84
  %87 = bitcast %"class.base::internal::Sequence"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !3
  %89 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %86, i64 2
  %90 = bitcast %"class.base::internal::Sequence"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !3
  %92 = bitcast %"class.base::internal::Sequence"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !6, !noalias !3
  %93 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %85, i64 2
  %94 = bitcast %"class.base::internal::Sequence"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !6, !noalias !3
  %95 = or i64 %72, 8
  %96 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %95
  %97 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %28, i64 %95
  %98 = bitcast %"class.base::internal::Sequence"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !3
  %100 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %97, i64 2
  %101 = bitcast %"class.base::internal::Sequence"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !3
  %103 = bitcast %"class.base::internal::Sequence"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !6, !noalias !3
  %104 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %96, i64 2
  %105 = bitcast %"class.base::internal::Sequence"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !6, !noalias !3
  %106 = or i64 %72, 12
  %107 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %106
  %108 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %28, i64 %106
  %109 = bitcast %"class.base::internal::Sequence"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !3
  %111 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %108, i64 2
  %112 = bitcast %"class.base::internal::Sequence"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !3
  %114 = bitcast %"class.base::internal::Sequence"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !6, !noalias !3
  %115 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %107, i64 2
  %116 = bitcast %"class.base::internal::Sequence"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !6, !noalias !3
  %117 = add i64 %72, 16
  %118 = add i64 %73, -4
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %71, !llvm.loop !8

120:                                              ; preds = %71, %60
  %121 = phi i64 [ 0, %60 ], [ %117, %71 ]
  %122 = icmp eq i64 %67, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %120, %123
  %124 = phi i64 [ %136, %123 ], [ %121, %120 ]
  %125 = phi i64 [ %137, %123 ], [ %67, %120 ]
  %126 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %124
  %127 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %28, i64 %124
  %128 = bitcast %"class.base::internal::Sequence"** %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 8, !alias.scope !3
  %130 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %127, i64 2
  %131 = bitcast %"class.base::internal::Sequence"** %130 to <2 x i64>*
  %132 = load <2 x i64>, <2 x i64>* %131, align 8, !alias.scope !3
  %133 = bitcast %"class.base::internal::Sequence"** %126 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %133, align 8, !alias.scope !6, !noalias !3
  %134 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %126, i64 2
  %135 = bitcast %"class.base::internal::Sequence"** %134 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %135, align 8, !alias.scope !6, !noalias !3
  %136 = add i64 %124, 4
  %137 = add i64 %125, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %123, !llvm.loop !10

139:                                              ; preds = %123, %120
  %140 = icmp eq i64 %39, %61
  br i1 %140, label %141, label %41

141:                                              ; preds = %152, %139
  %142 = phi %"class.base::internal::Sequence"** [ %62, %139 ], [ %159, %152 ]
  %143 = ptrtoint %"class.base::internal::Sequence"** %142 to i64
  br label %144

144:                                              ; preds = %141, %23
  %145 = phi i64 [ %143, %141 ], [ %12, %23 ]
  store i64 %145, i64* %29, align 8
  %146 = icmp eq i64 %26, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %144
  %148 = sub nsw i64 0, %27
  %149 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %8, i64 %148
  %150 = bitcast %"class.base::internal::Sequence"** %149 to i8*
  %151 = bitcast %"class.base::internal::Sequence"** %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 %26, i1 false) #8
  br label %161

152:                                              ; preds = %41, %152
  %153 = phi %"class.base::internal::Sequence"** [ %159, %152 ], [ %42, %41 ]
  %154 = phi %"class.base::internal::Sequence"** [ %158, %152 ], [ %43, %41 ]
  %155 = bitcast %"class.base::internal::Sequence"** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.base::internal::Sequence"** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %154, i64 1
  %159 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %153, i64 1
  %160 = icmp ult %"class.base::internal::Sequence"** %158, %8
  br i1 %160, label %152, label %141, !llvm.loop !12

161:                                              ; preds = %144, %147
  %162 = bitcast %"class.base::internal::Sequence"** %1 to i64*
  store i64 %17, i64* %162, align 8
  br label %319

163:                                              ; preds = %3
  %164 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %165 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %165) #8
  %166 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 0
  %167 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 1
  %168 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 2
  %169 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 0, i32 0
  %170 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i64 0, i32 3, i32 1, i32 0
  %171 = bitcast %"class.base::internal::Sequence"*** %7 to i64*
  %172 = bitcast %"class.std::__1::vector"* %0 to i64*
  %173 = bitcast %"struct.std::__1::__split_buffer"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 40, i1 false)
  %174 = load i64, i64* %172, align 8
  %175 = sub i64 %12, %174
  %176 = ashr exact i64 %175, 3
  %177 = add nsw i64 %176, 1
  %178 = icmp ugt i64 %177, 2305843009213693951
  br i1 %178, label %179, label %181

179:                                              ; preds = %163
  %180 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %180) #10
  unreachable

181:                                              ; preds = %163
  %182 = bitcast %"class.base::internal::Sequence"*** %9 to i64*
  %183 = sub i64 %13, %174
  %184 = ashr exact i64 %183, 3
  %185 = icmp ult i64 %184, 1152921504606846975
  br i1 %185, label %190, label %186

186:                                              ; preds = %181
  %187 = sub i64 %4, %174
  %188 = ashr exact i64 %187, 3
  store %"class.base::internal::Sequence"** null, %"class.base::internal::Sequence"*** %169, align 8
  %189 = bitcast %"class.std::__1::allocator.19"** %170 to %"class.std::__1::__compressed_pair.16"**
  store %"class.std::__1::__compressed_pair.16"* %164, %"class.std::__1::__compressed_pair.16"** %189, align 8
  br label %201

190:                                              ; preds = %181
  %191 = ashr exact i64 %183, 2
  %192 = icmp ult i64 %191, %177
  %193 = select i1 %192, i64 %177, i64 %191
  %194 = sub i64 %4, %174
  %195 = ashr exact i64 %194, 3
  store %"class.base::internal::Sequence"** null, %"class.base::internal::Sequence"*** %169, align 8
  %196 = bitcast %"class.std::__1::allocator.19"** %170 to %"class.std::__1::__compressed_pair.16"**
  store %"class.std::__1::__compressed_pair.16"* %164, %"class.std::__1::__compressed_pair.16"** %196, align 8
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %207, label %198

198:                                              ; preds = %190
  %199 = icmp ugt i64 %193, 2305843009213693951
  br i1 %199, label %200, label %201

200:                                              ; preds = %198
  tail call void @abort() #10
  unreachable

201:                                              ; preds = %186, %198
  %202 = phi i64 [ 2305843009213693951, %186 ], [ %193, %198 ]
  %203 = phi i64 [ %188, %186 ], [ %195, %198 ]
  %204 = shl i64 %202, 3
  %205 = tail call i8* @_Znwm(i64 %204) #9
  %206 = bitcast i8* %205 to %"class.base::internal::Sequence"**
  br label %207

207:                                              ; preds = %190, %201
  %208 = phi i64 [ %203, %201 ], [ %195, %190 ]
  %209 = phi i64 [ %202, %201 ], [ 0, %190 ]
  %210 = phi %"class.base::internal::Sequence"** [ %206, %201 ], [ null, %190 ]
  store %"class.base::internal::Sequence"** %210, %"class.base::internal::Sequence"*** %166, align 8
  %211 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %210, i64 %208
  store %"class.base::internal::Sequence"** %211, %"class.base::internal::Sequence"*** %168, align 8
  store %"class.base::internal::Sequence"** %211, %"class.base::internal::Sequence"*** %167, align 8
  %212 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %210, i64 %209
  store %"class.base::internal::Sequence"** %212, %"class.base::internal::Sequence"*** %169, align 8
  call void @_ZNSt3__114__split_bufferIPN4base8internal8SequenceERNS_9allocatorIS4_EEE12emplace_backIJS4_EEEvDpOT_(%"struct.std::__1::__split_buffer"* nonnull %5, %"class.base::internal::Sequence"** dereferenceable(8) %2)
  %213 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %167, align 8
  %214 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %6, align 8
  %215 = ptrtoint %"class.base::internal::Sequence"** %214 to i64
  %216 = sub i64 %4, %215
  %217 = ashr exact i64 %216, 3
  %218 = sub nsw i64 0, %217
  %219 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %213, i64 %218
  store %"class.base::internal::Sequence"** %219, %"class.base::internal::Sequence"*** %167, align 8
  %220 = icmp sgt i64 %216, 0
  br i1 %220, label %221, label %224

221:                                              ; preds = %207
  %222 = bitcast %"class.base::internal::Sequence"** %219 to i8*
  %223 = bitcast %"class.base::internal::Sequence"** %214 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %222, i8* align 8 %223, i64 %216, i1 false) #8
  br label %224

224:                                              ; preds = %221, %207
  %225 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %7, align 8
  %226 = icmp eq %"class.base::internal::Sequence"** %225, %1
  br i1 %226, label %227, label %231

227:                                              ; preds = %224
  %228 = ptrtoint %"class.base::internal::Sequence"** %225 to i64
  %229 = bitcast %"class.base::internal::Sequence"*** %168 to i64*
  %230 = load i64, i64* %229, align 8
  br label %293

231:                                              ; preds = %224
  %232 = bitcast %"class.base::internal::Sequence"*** %168 to i64**
  %233 = load i64*, i64** %232, align 8
  %234 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %225, i64 -1
  %235 = ptrtoint %"class.base::internal::Sequence"** %234 to i64
  %236 = sub i64 %235, %4
  %237 = lshr i64 %236, 3
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 3
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %255, label %241

241:                                              ; preds = %231, %241
  %242 = phi i64* [ %250, %241 ], [ %233, %231 ]
  %243 = phi %"class.base::internal::Sequence"** [ %247, %241 ], [ %1, %231 ]
  %244 = phi i64 [ %251, %241 ], [ %239, %231 ]
  %245 = bitcast %"class.base::internal::Sequence"** %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %242, align 8
  %247 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %243, i64 1
  %248 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %168, align 8
  %249 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %248, i64 1
  store %"class.base::internal::Sequence"** %249, %"class.base::internal::Sequence"*** %168, align 8
  %250 = bitcast %"class.base::internal::Sequence"** %249 to i64*
  %251 = add i64 %244, -1
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %253, label %241, !llvm.loop !13

253:                                              ; preds = %241
  %254 = bitcast %"class.base::internal::Sequence"** %249 to i64*
  br label %255

255:                                              ; preds = %231, %253
  %256 = phi %"class.base::internal::Sequence"** [ undef, %231 ], [ %249, %253 ]
  %257 = phi i64* [ %233, %231 ], [ %254, %253 ]
  %258 = phi %"class.base::internal::Sequence"** [ %1, %231 ], [ %247, %253 ]
  %259 = icmp ult i64 %236, 24
  br i1 %259, label %288, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64* [ %287, %260 ], [ %257, %255 ]
  %262 = phi %"class.base::internal::Sequence"** [ %283, %260 ], [ %258, %255 ]
  %263 = bitcast %"class.base::internal::Sequence"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  store i64 %264, i64* %261, align 8
  %265 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %262, i64 1
  %266 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %168, align 8
  %267 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %266, i64 1
  store %"class.base::internal::Sequence"** %267, %"class.base::internal::Sequence"*** %168, align 8
  %268 = bitcast %"class.base::internal::Sequence"** %267 to i64*
  %269 = bitcast %"class.base::internal::Sequence"** %265 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %268, align 8
  %271 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %262, i64 2
  %272 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %168, align 8
  %273 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %272, i64 1
  store %"class.base::internal::Sequence"** %273, %"class.base::internal::Sequence"*** %168, align 8
  %274 = bitcast %"class.base::internal::Sequence"** %273 to i64*
  %275 = bitcast %"class.base::internal::Sequence"** %271 to i64*
  %276 = load i64, i64* %275, align 8
  store i64 %276, i64* %274, align 8
  %277 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %262, i64 3
  %278 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %168, align 8
  %279 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %278, i64 1
  store %"class.base::internal::Sequence"** %279, %"class.base::internal::Sequence"*** %168, align 8
  %280 = bitcast %"class.base::internal::Sequence"** %279 to i64*
  %281 = bitcast %"class.base::internal::Sequence"** %277 to i64*
  %282 = load i64, i64* %281, align 8
  store i64 %282, i64* %280, align 8
  %283 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %262, i64 4
  %284 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %168, align 8
  %285 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %284, i64 1
  store %"class.base::internal::Sequence"** %285, %"class.base::internal::Sequence"*** %168, align 8
  %286 = icmp eq %"class.base::internal::Sequence"** %283, %225
  %287 = bitcast %"class.base::internal::Sequence"** %285 to i64*
  br i1 %286, label %288, label %260

288:                                              ; preds = %260, %255
  %289 = phi %"class.base::internal::Sequence"** [ %256, %255 ], [ %285, %260 ]
  %290 = ptrtoint %"class.base::internal::Sequence"** %289 to i64
  %291 = load i64, i64* %171, align 8
  %292 = bitcast %"class.base::internal::Sequence"*** %168 to i64*
  br label %293

293:                                              ; preds = %227, %288
  %294 = phi i64* [ %229, %227 ], [ %292, %288 ]
  %295 = phi i64 [ %230, %227 ], [ %290, %288 ]
  %296 = phi i64 [ %228, %227 ], [ %291, %288 ]
  %297 = load i64, i64* %172, align 8
  %298 = bitcast %"class.base::internal::Sequence"*** %167 to i64*
  %299 = load i64, i64* %298, align 8
  store i64 %299, i64* %172, align 8
  store i64 %297, i64* %298, align 8
  store i64 %295, i64* %171, align 8
  store i64 %296, i64* %294, align 8
  %300 = load i64, i64* %182, align 8
  %301 = bitcast %"class.base::internal::Sequence"*** %169 to i64*
  %302 = load i64, i64* %301, align 8
  store i64 %302, i64* %182, align 8
  store i64 %300, i64* %301, align 8
  %303 = bitcast %"struct.std::__1::__split_buffer"* %5 to i64*
  store i64 %297, i64* %303, align 8
  %304 = inttoptr i64 %297 to %"class.base::internal::Sequence"**
  %305 = inttoptr i64 %296 to %"class.base::internal::Sequence"**
  %306 = icmp eq %"class.base::internal::Sequence"** %305, %304
  br i1 %306, label %314, label %307

307:                                              ; preds = %293
  %308 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %305, i64 -1
  %309 = ptrtoint %"class.base::internal::Sequence"** %308 to i64
  %310 = sub i64 %309, %297
  %311 = lshr i64 %310, 3
  %312 = xor i64 %311, -1
  %313 = getelementptr %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %305, i64 %312
  store %"class.base::internal::Sequence"** %313, %"class.base::internal::Sequence"*** %168, align 8
  br label %314

314:                                              ; preds = %307, %293
  %315 = icmp eq i64 %297, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %314
  %317 = inttoptr i64 %297 to i8*
  call void @_ZdlPv(i8* %317) #9
  br label %318

318:                                              ; preds = %314, %316
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %165) #8
  br label %319

319:                                              ; preds = %18, %161, %318
  %320 = phi %"class.base::internal::Sequence"** [ %1, %18 ], [ %1, %161 ], [ %213, %318 ]
  ret %"class.base::internal::Sequence"** %320
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4base8internal8SequenceERNS_9allocatorIS4_EEE12emplace_backIJS4_EEEvDpOT_(%"struct.std::__1::__split_buffer"*, %"class.base::internal::Sequence"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %5, align 8
  %7 = icmp eq %"class.base::internal::Sequence"** %4, %6
  %8 = ptrtoint %"class.base::internal::Sequence"** %6 to i64
  %9 = bitcast %"class.base::internal::Sequence"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %13, align 8
  %15 = icmp ugt %"class.base::internal::Sequence"** %12, %14
  %16 = ptrtoint %"class.base::internal::Sequence"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.base::internal::Sequence"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %12, i64 %22
  %24 = ptrtoint %"class.base::internal::Sequence"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.base::internal::Sequence"** %23 to i8*
  %30 = bitcast %"class.base::internal::Sequence"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #8
  %31 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.base::internal::Sequence"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %23, i64 %26
  store %"class.base::internal::Sequence"** %34, %"class.base::internal::Sequence"*** %3, align 8
  %35 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %33, i64 %22
  store %"class.base::internal::Sequence"** %35, %"class.base::internal::Sequence"*** %11, align 8
  %36 = bitcast %"class.base::internal::Sequence"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.base::internal::Sequence"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #10
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #9
  %50 = bitcast i8* %49 to %"class.base::internal::Sequence"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %50, i64 %47
  %53 = ptrtoint %"class.base::internal::Sequence"** %52 to i64
  %54 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %50, i64 %43
  %55 = ptrtoint %"class.base::internal::Sequence"** %54 to i64
  %56 = ptrtoint %"class.base::internal::Sequence"** %12 to i64
  %57 = ptrtoint %"class.base::internal::Sequence"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.base::internal::Sequence"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.base::internal::Sequence"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.base::internal::Sequence"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %69, i64 1
  %77 = ptrtoint %"class.base::internal::Sequence"** %76 to i64
  %78 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !14

81:                                               ; preds = %68
  %82 = ptrtoint %"class.base::internal::Sequence"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.base::internal::Sequence"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.base::internal::Sequence"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.base::internal::Sequence"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.base::internal::Sequence"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.base::internal::Sequence"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 1
  %96 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 1
  %97 = bitcast %"class.base::internal::Sequence"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.base::internal::Sequence"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 2
  %101 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 2
  %102 = bitcast %"class.base::internal::Sequence"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.base::internal::Sequence"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 3
  %106 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 3
  %107 = bitcast %"class.base::internal::Sequence"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.base::internal::Sequence"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 4
  %111 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 4
  %112 = bitcast %"class.base::internal::Sequence"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.base::internal::Sequence"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 5
  %116 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 5
  %117 = bitcast %"class.base::internal::Sequence"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.base::internal::Sequence"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 6
  %121 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 6
  %122 = bitcast %"class.base::internal::Sequence"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.base::internal::Sequence"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 7
  %126 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 7
  %127 = bitcast %"class.base::internal::Sequence"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.base::internal::Sequence"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %89, i64 8
  %131 = ptrtoint %"class.base::internal::Sequence"** %130 to i64
  %132 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %91, i64 8
  %133 = icmp eq %"class.base::internal::Sequence"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.base::internal::Sequence"** %60 to i64
  %136 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.base::internal::Sequence"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.base::internal::Sequence"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.base::internal::Sequence"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.base::internal::Sequence"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.base::internal::Sequence"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #9
  %146 = bitcast %"class.base::internal::Sequence"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.base::internal::Sequence"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.base::internal::Sequence"**, %"class.base::internal::Sequence"*** %3, align 8
  %153 = getelementptr inbounds %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %152, i64 1
  store %"class.base::internal::Sequence"** %153, %"class.base::internal::Sequence"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
