; ModuleID = '../../third_party/lzma_sdk/LzFind.c'
source_filename = "../../third_party/lzma_sdk/LzFind.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._CMatchFinder = type { i8*, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i32*, i32*, i32, i32, i8*, %struct.ISeqInStream*, i32, i32, i32, i32, i64, i32, i32, i32, i32, [256 x i32], i64 }
%struct.ISeqInStream = type { i32 (i8*, i8*, i64*)* }
%struct.ISzAlloc = type { i8* (i8*, i64)*, void (i8*, i8*)* }
%struct._IMatchFinder = type { void (i8*)*, i32 (i8*)*, i8* (i8*)*, i32 (i8*, i32*)*, void (i8*, i32)* }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @MatchFinder_GetPointerToCurrentPos(%struct._CMatchFinder* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @MatchFinder_GetNumAvailableBytes(%struct._CMatchFinder* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = sub i32 %3, %5
  ret i32 %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MatchFinder_ReduceOffsets(%struct._CMatchFinder* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = sub i32 %4, %1
  store i32 %5, i32* %3, align 4
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = sub i32 %7, %1
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = sub i32 %10, %1
  store i32 %11, i32* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MatchFinder_MoveBlock(%struct._CMatchFinder* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 19
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = sub nsw i64 0, %8
  %10 = getelementptr inbounds i8, i8* %5, i64 %9
  %11 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = sub i32 %12, %14
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, %8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %10, i64 %17, i1 false)
  %18 = load i8*, i8** %2, align 8
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  store i8* %21, i8** %4, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @MatchFinder_NeedMove(%struct._CMatchFinder* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %21

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 18
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = bitcast %struct._CMatchFinder* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = ptrtoint i8* %11 to i64
  %15 = sub i64 %14, %13
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = icmp ule i64 %15, %18
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %1, %5
  %22 = phi i32 [ %20, %5 ], [ 0, %1 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MatchFinder_ReadIfRequired(%struct._CMatchFinder* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %15

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = sub i32 %9, %11
  %13 = icmp ult i32 %7, %12
  br i1 %13, label %15, label %14

14:                                               ; preds = %5
  tail call fastcc void @MatchFinder_ReadBlock(%struct._CMatchFinder* %0)
  br label %15

15:                                               ; preds = %5, %1, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @MatchFinder_ReadBlock(%struct._CMatchFinder* nocapture) unnamed_addr #2 {
  %2 = alloca i64, align 8
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %79

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 26
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %79

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %25

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %18 = bitcast i64* %2 to i8*
  %19 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %20 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 18
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 17
  %22 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %23 = load i32, i32* %16, align 8
  %24 = load i32, i32* %17, align 8
  br label %43

25:                                               ; preds = %10
  %26 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = xor i32 %27, -1
  %31 = add i32 %29, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 22
  %34 = load i64, i64* %33, align 8
  %35 = icmp ult i64 %34, %32
  %36 = trunc i64 %34 to i32
  %37 = select i1 %35, i32 %36, i32 %31
  %38 = zext i32 %37 to i64
  %39 = sub i64 %34, %38
  store i64 %39, i64* %33, align 8
  %40 = add i32 %37, %27
  store i32 %40, i32* %26, align 8
  %41 = icmp eq i64 %39, 0
  br i1 %41, label %42, label %79

42:                                               ; preds = %25
  store i8 1, i8* %3, align 8
  br label %79

43:                                               ; preds = %14, %69
  %44 = phi i32 [ %24, %14 ], [ %73, %69 ]
  %45 = phi i32 [ %23, %14 ], [ %72, %69 ]
  %46 = load i8*, i8** %15, align 8
  %47 = sub i32 %45, %44
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #6
  %50 = load i8*, i8** %19, align 8
  %51 = load i32, i32* %20, align 8
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = ptrtoint i8* %53 to i64
  %55 = ptrtoint i8* %49 to i64
  %56 = sub i64 %54, %55
  store i64 %56, i64* %2, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %77, label %58

58:                                               ; preds = %43
  %59 = load %struct.ISeqInStream*, %struct.ISeqInStream** %21, align 8
  %60 = getelementptr inbounds %struct.ISeqInStream, %struct.ISeqInStream* %59, i64 0, i32 0
  %61 = load i32 (i8*, i8*, i64*)*, i32 (i8*, i8*, i64*)** %60, align 8
  %62 = bitcast %struct.ISeqInStream* %59 to i8*
  %63 = call i32 %61(i8* %62, i8* %49, i64* nonnull %2) #6
  store i32 %63, i32* %7, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %78

65:                                               ; preds = %58
  %66 = load i64, i64* %2, align 8
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  store i8 1, i8* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br label %79

69:                                               ; preds = %65
  %70 = trunc i64 %66 to i32
  %71 = load i32, i32* %16, align 8
  %72 = add i32 %71, %70
  store i32 %72, i32* %16, align 8
  %73 = load i32, i32* %17, align 8
  %74 = sub i32 %72, %73
  %75 = load i32, i32* %22, align 8
  %76 = icmp ugt i32 %74, %75
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br i1 %76, label %79, label %43

77:                                               ; preds = %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br label %79

78:                                               ; preds = %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #6
  br label %79

79:                                               ; preds = %69, %78, %77, %68, %25, %42, %6, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @MatchFinder_Construct(%struct._CMatchFinder* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  store i8* null, i8** %2, align 8
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  store i32* null, i32** %4, align 8
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  store i32 32, i32* %5, align 4
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 8
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 21
  store i32 4, i32* %7, align 4
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 9
  store i8 0, i8* %8, align 2
  br label %9

9:                                                ; preds = %9, %1
  %10 = phi i64 [ 0, %1 ], [ %54, %9 ]
  %11 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1 ], [ %55, %9 ]
  %12 = lshr <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %13 = and <4 x i32> %11, <i32 1, i32 1, i32 1, i32 1>
  %14 = sub nsw <4 x i32> zeroinitializer, %13
  %15 = and <4 x i32> %14, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %16 = xor <4 x i32> %15, %12
  %17 = lshr <4 x i32> %16, <i32 1, i32 1, i32 1, i32 1>
  %18 = and <4 x i32> %12, <i32 1, i32 1, i32 1, i32 1>
  %19 = sub nsw <4 x i32> zeroinitializer, %18
  %20 = and <4 x i32> %19, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %21 = xor <4 x i32> %20, %17
  %22 = lshr <4 x i32> %21, <i32 1, i32 1, i32 1, i32 1>
  %23 = and <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  %24 = sub nsw <4 x i32> zeroinitializer, %23
  %25 = and <4 x i32> %24, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %26 = xor <4 x i32> %25, %22
  %27 = lshr <4 x i32> %26, <i32 1, i32 1, i32 1, i32 1>
  %28 = and <4 x i32> %22, <i32 1, i32 1, i32 1, i32 1>
  %29 = sub nsw <4 x i32> zeroinitializer, %28
  %30 = and <4 x i32> %29, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %31 = xor <4 x i32> %30, %27
  %32 = lshr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = and <4 x i32> %27, <i32 1, i32 1, i32 1, i32 1>
  %34 = sub nsw <4 x i32> zeroinitializer, %33
  %35 = and <4 x i32> %34, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %36 = xor <4 x i32> %35, %32
  %37 = lshr <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %38 = and <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %39 = sub nsw <4 x i32> zeroinitializer, %38
  %40 = and <4 x i32> %39, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %41 = xor <4 x i32> %40, %37
  %42 = lshr <4 x i32> %41, <i32 1, i32 1, i32 1, i32 1>
  %43 = and <4 x i32> %37, <i32 1, i32 1, i32 1, i32 1>
  %44 = sub nsw <4 x i32> zeroinitializer, %43
  %45 = and <4 x i32> %44, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %46 = xor <4 x i32> %45, %42
  %47 = lshr <4 x i32> %46, <i32 1, i32 1, i32 1, i32 1>
  %48 = and <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  %49 = sub nsw <4 x i32> zeroinitializer, %48
  %50 = and <4 x i32> %49, <i32 -306674912, i32 -306674912, i32 -306674912, i32 -306674912>
  %51 = xor <4 x i32> %50, %47
  %52 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %10
  %53 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %53, align 4
  %54 = add i64 %10, 4
  %55 = add <4 x i32> %11, <i32 4, i32 4, i32 4, i32 4>
  %56 = icmp eq i64 %54, 256
  br i1 %56, label %57, label %9, !llvm.loop !2

57:                                               ; preds = %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @MatchFinder_Free(%struct._CMatchFinder* nocapture, %struct.ISzAlloc*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %7 = bitcast i32** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void %4(i8* %5, i8* %8) #6
  store i32* null, i32** %6, align 8
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %2
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %14 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %15 = load i8*, i8** %14, align 8
  tail call void %13(i8* %5, i8* %15) #6
  store i8* null, i8** %14, align 8
  br label %16

16:                                               ; preds = %2, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @MatchFinder_Create(%struct._CMatchFinder*, i32, i32, i32, i32, %struct.ISzAlloc*) local_unnamed_addr #2 {
  %7 = icmp ugt i32 %1, -536870912
  br i1 %7, label %8, label %22

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 1
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = bitcast %struct.ISzAlloc* %5 to i8*
  %12 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %13 = bitcast i32** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void %10(i8* %11, i8* %14) #6
  store i32* null, i32** %12, align 8
  %15 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %154

18:                                               ; preds = %8
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %20 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %21 = load i8*, i8** %20, align 8
  tail call void %19(i8* %11, i8* %21) #6
  store i8* null, i8** %20, align 8
  br label %154

22:                                               ; preds = %6
  %23 = icmp ugt i32 %1, -1073741825
  %24 = icmp slt i32 %1, 0
  %25 = select i1 %24, i32 2, i32 1
  %26 = select i1 %23, i32 3, i32 %25
  %27 = lshr i32 %1, %26
  %28 = add i32 %4, %3
  %29 = add i32 %28, %2
  %30 = lshr i32 %29, 1
  %31 = add nuw i32 %1, 1
  %32 = add i32 %31, %2
  %33 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 19
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  store i32 %28, i32* %34, align 8
  %35 = add i32 %32, 524288
  %36 = add i32 %35, %28
  %37 = add i32 %36, %30
  %38 = add i32 %37, %27
  %39 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %22
  %43 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 18
  store i32 %38, i32* %43, align 8
  br label %66

44:                                               ; preds = %22
  %45 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, null
  br i1 %47, label %52, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 18
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, %38
  br i1 %51, label %66, label %52

52:                                               ; preds = %44, %48
  %53 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 1
  %54 = load void (i8*, i8*)*, void (i8*, i8*)** %53, align 8
  %55 = bitcast %struct.ISzAlloc* %5 to i8*
  tail call void %54(i8* %55, i8* %46) #6
  store i8* null, i8** %45, align 8
  %56 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 18
  store i32 %38, i32* %56, align 8
  %57 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 0
  %58 = load i8* (i8*, i64)*, i8* (i8*, i64)** %57, align 8
  %59 = zext i32 %38 to i64
  %60 = tail call i8* %58(i8* %55, i64 %59) #6
  store i8* %60, i8** %45, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %62, label %66

62:                                               ; preds = %52
  %63 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %64 = bitcast i32** %63 to i8**
  %65 = load i8*, i8** %64, align 8
  br label %142

66:                                               ; preds = %48, %42, %52
  %67 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 11
  store i32 %3, i32* %67, align 4
  %68 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 24
  store i32 0, i32* %68, align 4
  %69 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 21
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 2
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  store i32 65535, i32* %73, align 8
  br label %102

74:                                               ; preds = %66
  %75 = add i32 %1, -1
  %76 = lshr i32 %75, 1
  %77 = or i32 %76, %75
  %78 = lshr i32 %77, 2
  %79 = or i32 %78, %77
  %80 = lshr i32 %79, 4
  %81 = or i32 %80, %79
  %82 = lshr i32 %81, 8
  %83 = or i32 %82, %81
  %84 = lshr i32 %83, 1
  %85 = or i32 %84, 65535
  %86 = icmp ugt i32 %85, 16777216
  br i1 %86, label %87, label %91

87:                                               ; preds = %74
  %88 = icmp eq i32 %70, 3
  %89 = lshr i32 %85, 1
  %90 = select i1 %88, i32 16777215, i32 %89
  br label %91

91:                                               ; preds = %87, %74
  %92 = phi i32 [ %85, %74 ], [ %90, %87 ]
  %93 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  store i32 %92, i32* %93, align 8
  %94 = add nuw i32 %92, 1
  %95 = icmp ugt i32 %70, 2
  br i1 %95, label %96, label %102

96:                                               ; preds = %91
  store i32 1024, i32* %68, align 4
  %97 = icmp eq i32 %70, 3
  br i1 %97, label %102, label %98

98:                                               ; preds = %96
  %99 = icmp ugt i32 %70, 4
  %100 = select i1 %99, i32 1115136, i32 66560
  store i32 %100, i32* %68, align 4
  %101 = select i1 %99, i32 1115136, i32 66560
  br label %102

102:                                              ; preds = %98, %96, %91, %72
  %103 = phi i32 [ 1024, %96 ], [ 0, %91 ], [ 0, %72 ], [ %101, %98 ]
  %104 = phi i32 [ %94, %96 ], [ %94, %91 ], [ 65536, %72 ], [ %94, %98 ]
  %105 = add nuw i32 %103, %104
  %106 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 23
  store i32 %1, i32* %106, align 8
  %107 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 25
  store i32 %105, i32* %107, align 8
  %108 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  store i32 %31, i32* %108, align 4
  %109 = zext i32 %31 to i64
  %110 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 8
  %111 = load i8, i8* %110, align 1
  %112 = icmp ne i8 %111, 0
  %113 = zext i1 %112 to i64
  %114 = shl nuw nsw i64 %109, %113
  %115 = zext i32 %105 to i64
  %116 = add nuw nsw i64 %114, %115
  %117 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %118 = load i32*, i32** %117, align 8
  %119 = icmp eq i32* %118, null
  %120 = bitcast i32* %118 to i8*
  br i1 %119, label %125, label %121

121:                                              ; preds = %102
  %122 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 28
  %123 = load i64, i64* %122, align 8
  %124 = icmp eq i64 %123, %116
  br i1 %124, label %154, label %125

125:                                              ; preds = %102, %121
  %126 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 1
  %127 = load void (i8*, i8*)*, void (i8*, i8*)** %126, align 8
  %128 = bitcast %struct.ISzAlloc* %5 to i8*
  %129 = bitcast i32** %117 to i8**
  tail call void %127(i8* %128, i8* %120) #6
  store i32* null, i32** %117, align 8
  %130 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 28
  store i64 %116, i64* %130, align 8
  %131 = shl nuw nsw i64 %116, 2
  %132 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 0
  %133 = load i8* (i8*, i64)*, i8* (i8*, i64)** %132, align 8
  %134 = tail call i8* %133(i8* %128, i64 %131) #6
  store i8* %134, i8** %129, align 8
  %135 = icmp eq i8* %134, null
  br i1 %135, label %142, label %136

136:                                              ; preds = %125
  %137 = bitcast i8* %134 to i32*
  %138 = load i32, i32* %107, align 8
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds i32, i32* %137, i64 %139
  %141 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  store i32* %140, i32** %141, align 8
  br label %154

142:                                              ; preds = %62, %125
  %143 = phi i8* [ %55, %62 ], [ %128, %125 ]
  %144 = phi i8* [ %65, %62 ], [ null, %125 ]
  %145 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %5, i64 0, i32 1
  %146 = load void (i8*, i8*)*, void (i8*, i8*)** %145, align 8
  %147 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  tail call void %146(i8* %143, i8* %144) #6
  store i32* null, i32** %147, align 8
  %148 = load i8, i8* %39, align 1
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %142
  %151 = load void (i8*, i8*)*, void (i8*, i8*)** %145, align 8
  %152 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %153 = load i8*, i8** %152, align 8
  tail call void %151(i8* %143, i8* %153) #6
  store i8* null, i8** %152, align 8
  br label %154

154:                                              ; preds = %121, %136, %150, %142, %18, %8
  %155 = phi i32 [ 0, %8 ], [ 0, %18 ], [ 0, %142 ], [ 0, %150 ], [ 1, %136 ], [ 1, %121 ]
  ret i32 %155
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MatchFinder_Init_2(%struct._CMatchFinder* nocapture, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 25
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %8 = bitcast i32** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %10 = zext i32 %4 to i64
  %11 = shl nuw nsw i64 %10, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 %11, i1 false)
  br label %12

12:                                               ; preds = %6, %2
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %struct._CMatchFinder* %0 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  store i32 %19, i32* %20, align 8
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  store i32 %19, i32* %21, align 8
  %22 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 26
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 7
  store i8 0, i8* %23, align 8
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %12
  tail call fastcc void @MatchFinder_ReadBlock(%struct._CMatchFinder* %0)
  %26 = load i32, i32* %21, align 8
  %27 = load i32, i32* %18, align 4
  %28 = load i32, i32* %13, align 8
  %29 = load i32, i32* %20, align 8
  br label %30

30:                                               ; preds = %12, %25
  %31 = phi i32 [ %19, %12 ], [ %29, %25 ]
  %32 = phi i32 [ 0, %12 ], [ %28, %25 ]
  %33 = phi i32 [ %19, %12 ], [ %27, %25 ]
  %34 = phi i32 [ %19, %12 ], [ %26, %25 ]
  %35 = xor i32 %34, -1
  %36 = sub i32 %33, %32
  %37 = icmp ult i32 %36, %35
  %38 = select i1 %37, i32 %36, i32 %35
  %39 = sub i32 %31, %34
  %40 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %41 = load i32, i32* %40, align 8
  %42 = icmp ugt i32 %39, %41
  %43 = sub i32 %39, %41
  %44 = icmp ne i32 %39, 0
  %45 = zext i1 %44 to i32
  %46 = select i1 %42, i32 %43, i32 %45
  %47 = icmp ult i32 %46, %38
  %48 = select i1 %47, i32 %46, i32 %38
  %49 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 11
  %50 = load i32, i32* %49, align 4
  %51 = icmp ugt i32 %39, %50
  %52 = select i1 %51, i32 %50, i32 %39
  %53 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  store i32 %52, i32* %53, align 4
  %54 = add i32 %48, %34
  %55 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  store i32 %54, i32* %55, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MatchFinder_Init(%struct._CMatchFinder* nocapture) #2 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 25
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %7 = bitcast i32** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = zext i32 %3 to i64
  %10 = shl nuw nsw i64 %9, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 %10, i1 false) #6
  br label %11

11:                                               ; preds = %1, %5
  %12 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %struct._CMatchFinder* %0 to i64*
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  store i32 %18, i32* %19, align 8
  %20 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 26
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 7
  store i8 0, i8* %22, align 8
  tail call fastcc void @MatchFinder_ReadBlock(%struct._CMatchFinder* %0) #6
  %23 = load i32, i32* %20, align 8
  %24 = load i32, i32* %17, align 4
  %25 = load i32, i32* %12, align 8
  %26 = load i32, i32* %19, align 8
  %27 = xor i32 %23, -1
  %28 = sub i32 %24, %25
  %29 = icmp ult i32 %28, %27
  %30 = select i1 %29, i32 %28, i32 %27
  %31 = sub i32 %26, %23
  %32 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %33 = load i32, i32* %32, align 8
  %34 = icmp ugt i32 %31, %33
  %35 = sub i32 %31, %33
  %36 = icmp ne i32 %31, 0
  %37 = zext i1 %36 to i32
  %38 = select i1 %34, i32 %35, i32 %37
  %39 = icmp ult i32 %38, %30
  %40 = select i1 %39, i32 %38, i32 %30
  %41 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 11
  %42 = load i32, i32* %41, align 4
  %43 = icmp ugt i32 %31, %42
  %44 = select i1 %43, i32 %42, i32 %31
  %45 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  store i32 %44, i32* %45, align 4
  %46 = add i32 %40, %23
  %47 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  store i32 %46, i32* %47, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MatchFinder_Normalize3(i32, i32* nocapture, i64) local_unnamed_addr #1 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %72, label %5

5:                                                ; preds = %3
  %6 = icmp ult i64 %2, 8
  br i1 %6, label %63, label %7

7:                                                ; preds = %5
  %8 = and i64 %2, -8
  %9 = insertelement <4 x i32> undef, i32 %0, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x i32> undef, i32 %0, i32 0
  %12 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> zeroinitializer
  %13 = add i64 %8, -8
  %14 = lshr exact i64 %13, 3
  %15 = add nuw nsw i64 %14, 1
  %16 = and i64 %15, 1
  %17 = icmp eq i64 %13, 0
  br i1 %17, label %47, label %18

18:                                               ; preds = %7
  %19 = sub nuw nsw i64 %15, %16
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %44, %20 ]
  %22 = phi i64 [ %19, %18 ], [ %45, %20 ]
  %23 = getelementptr inbounds i32, i32* %1, i64 %21
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4
  %26 = getelementptr inbounds i32, i32* %23, i64 4
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %25, <4 x i32> %10)
  %30 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %28, <4 x i32> %12)
  %31 = bitcast i32* %23 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %31, align 4
  %32 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> %30, <4 x i32>* %32, align 4
  %33 = or i64 %21, 8
  %34 = getelementptr inbounds i32, i32* %1, i64 %33
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr inbounds i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %36, <4 x i32> %10)
  %41 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %39, <4 x i32> %12)
  %42 = bitcast i32* %34 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %42, align 4
  %43 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4
  %44 = add i64 %21, 16
  %45 = add i64 %22, -2
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %20, !llvm.loop !4

47:                                               ; preds = %20, %7
  %48 = phi i64 [ 0, %7 ], [ %44, %20 ]
  %49 = icmp eq i64 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds i32, i32* %1, i64 %48
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = getelementptr inbounds i32, i32* %51, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %53, <4 x i32> %10)
  %58 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %56, <4 x i32> %12)
  %59 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %59, align 4
  %60 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %60, align 4
  br label %61

61:                                               ; preds = %47, %50
  %62 = icmp eq i64 %8, %2
  br i1 %62, label %72, label %63

63:                                               ; preds = %61, %5
  %64 = phi i64 [ 0, %5 ], [ %8, %61 ]
  br label %65

65:                                               ; preds = %63, %65
  %66 = phi i64 [ %70, %65 ], [ %64, %63 ]
  %67 = getelementptr inbounds i32, i32* %1, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = tail call i32 @llvm.usub.sat.i32(i32 %68, i32 %0)
  store i32 %69, i32* %67, align 4
  %70 = add nuw i64 %66, 1
  %71 = icmp eq i64 %70, %2
  br i1 %71, label %72, label %65, !llvm.loop !5

72:                                               ; preds = %65, %61, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32* @GetMatchesSpec1(i32, i32, i32, i8* nocapture readonly, i32* nocapture, i32, i32, i32, i32*, i32) local_unnamed_addr #1 {
  %11 = shl i32 %5, 1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32* %4, i64 %12
  %14 = getelementptr inbounds i32, i32* %13, i64 1
  %15 = sub i32 %2, %1
  %16 = icmp ne i32 %7, 0
  %17 = icmp ult i32 %15, %6
  %18 = and i1 %16, %17
  br i1 %18, label %23, label %19

19:                                               ; preds = %98, %10
  %20 = phi i32* [ %8, %10 ], [ %86, %98 ]
  %21 = phi i32* [ %14, %10 ], [ %100, %98 ]
  %22 = phi i32* [ %13, %10 ], [ %101, %98 ]
  store i32 0, i32* %22, align 4
  br label %109

23:                                               ; preds = %10, %98
  %24 = phi i32 [ %33, %98 ], [ %7, %10 ]
  %25 = phi i32 [ %105, %98 ], [ %15, %10 ]
  %26 = phi i32 [ %103, %98 ], [ 0, %10 ]
  %27 = phi i32 [ %102, %98 ], [ 0, %10 ]
  %28 = phi i32* [ %101, %98 ], [ %13, %10 ]
  %29 = phi i32* [ %100, %98 ], [ %14, %10 ]
  %30 = phi i32 [ %87, %98 ], [ %9, %10 ]
  %31 = phi i32* [ %86, %98 ], [ %8, %10 ]
  %32 = phi i32 [ %104, %98 ], [ %1, %10 ]
  %33 = add i32 %24, -1
  %34 = sub i32 %5, %25
  %35 = icmp ugt i32 %25, %5
  %36 = select i1 %35, i32 %6, i32 0
  %37 = add i32 %34, %36
  %38 = shl i32 %37, 1
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %4, i64 %39
  %41 = zext i32 %25 to i64
  %42 = sub nsw i64 0, %41
  %43 = getelementptr inbounds i8, i8* %3, i64 %42
  %44 = icmp ult i32 %27, %26
  %45 = select i1 %44, i32 %27, i32 %26
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %3, i64 %46
  %50 = load i8, i8* %49, align 1
  %51 = icmp eq i8 %48, %50
  br i1 %51, label %52, label %85

52:                                               ; preds = %23
  %53 = add i32 %45, 1
  %54 = icmp eq i32 %53, %0
  br i1 %54, label %73, label %55

55:                                               ; preds = %52
  %56 = zext i32 %53 to i64
  %57 = getelementptr inbounds i8, i8* %43, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %3, i64 %56
  %60 = load i8, i8* %59, align 1
  %61 = icmp eq i8 %58, %60
  br i1 %61, label %62, label %73

62:                                               ; preds = %55, %66
  %63 = phi i32 [ %64, %66 ], [ %53, %55 ]
  %64 = add i32 %63, 1
  %65 = icmp eq i32 %64, %0
  br i1 %65, label %73, label %66

66:                                               ; preds = %62
  %67 = zext i32 %64 to i64
  %68 = getelementptr inbounds i8, i8* %43, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %3, i64 %67
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %69, %71
  br i1 %72, label %62, label %73

73:                                               ; preds = %66, %62, %52, %55
  %74 = phi i32 [ %53, %55 ], [ %0, %52 ], [ %64, %66 ], [ %0, %62 ]
  %75 = icmp ult i32 %30, %74
  br i1 %75, label %76, label %85

76:                                               ; preds = %73
  %77 = getelementptr inbounds i32, i32* %31, i64 1
  store i32 %74, i32* %31, align 4
  %78 = add i32 %25, -1
  %79 = getelementptr inbounds i32, i32* %31, i64 2
  store i32 %78, i32* %77, align 4
  %80 = icmp eq i32 %74, %0
  br i1 %80, label %81, label %85

81:                                               ; preds = %76
  %82 = load i32, i32* %40, align 4
  store i32 %82, i32* %28, align 4
  %83 = getelementptr inbounds i32, i32* %40, i64 1
  %84 = load i32, i32* %83, align 4
  br label %109

85:                                               ; preds = %73, %76, %23
  %86 = phi i32* [ %79, %76 ], [ %31, %73 ], [ %31, %23 ]
  %87 = phi i32 [ %74, %76 ], [ %30, %73 ], [ %30, %23 ]
  %88 = phi i32 [ %74, %76 ], [ %74, %73 ], [ %45, %23 ]
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %43, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %3, i64 %89
  %93 = load i8, i8* %92, align 1
  %94 = icmp ult i8 %91, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %85
  store i32 %32, i32* %28, align 4
  %96 = getelementptr inbounds i32, i32* %40, i64 1
  br label %98

97:                                               ; preds = %85
  store i32 %32, i32* %29, align 4
  br label %98

98:                                               ; preds = %95, %97
  %99 = phi i32* [ %96, %95 ], [ %40, %97 ]
  %100 = phi i32* [ %29, %95 ], [ %40, %97 ]
  %101 = phi i32* [ %96, %95 ], [ %28, %97 ]
  %102 = phi i32 [ %27, %95 ], [ %88, %97 ]
  %103 = phi i32 [ %88, %95 ], [ %26, %97 ]
  %104 = load i32, i32* %99, align 4
  %105 = sub i32 %2, %104
  %106 = icmp ne i32 %33, 0
  %107 = icmp ult i32 %105, %6
  %108 = and i1 %106, %107
  br i1 %108, label %23, label %19

109:                                              ; preds = %81, %19
  %110 = phi i32* [ %21, %19 ], [ %29, %81 ]
  %111 = phi i32 [ 0, %19 ], [ %84, %81 ]
  %112 = phi i32* [ %20, %19 ], [ %79, %81 ]
  store i32 %111, i32* %110, align 4
  ret i32* %112
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Bt3Zip_MatchFinder_GetMatches(%struct._CMatchFinder*, i32*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %171

19:                                               ; preds = %6
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %171

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %22, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = or i32 %28, %25
  %30 = getelementptr inbounds i8, i8* %22, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 65535
  %36 = xor i32 %29, %35
  %37 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %38 = load i32*, i32** %37, align 8
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds i32, i32* %38, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  store i32 %43, i32* %40, align 4
  %44 = load i32, i32* %42, align 8
  %45 = load i8*, i8** %21, align 8
  %46 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %47 = load i32*, i32** %46, align 8
  %48 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %53 = load i32, i32* %52, align 4
  %54 = shl i32 %49, 1
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %47, i64 %55
  %57 = getelementptr inbounds i32, i32* %56, i64 1
  %58 = sub i32 %44, %41
  %59 = icmp ne i32 %53, 0
  %60 = icmp ult i32 %58, %51
  %61 = and i1 %60, %59
  br i1 %61, label %66, label %62

62:                                               ; preds = %141, %20
  %63 = phi i32* [ %1, %20 ], [ %129, %141 ]
  %64 = phi i32* [ %57, %20 ], [ %143, %141 ]
  %65 = phi i32* [ %56, %20 ], [ %144, %141 ]
  store i32 0, i32* %65, align 4
  br label %152

66:                                               ; preds = %20, %141
  %67 = phi i32 [ %76, %141 ], [ %53, %20 ]
  %68 = phi i32 [ %148, %141 ], [ %58, %20 ]
  %69 = phi i32 [ %146, %141 ], [ 0, %20 ]
  %70 = phi i32 [ %145, %141 ], [ 0, %20 ]
  %71 = phi i32* [ %144, %141 ], [ %56, %20 ]
  %72 = phi i32* [ %143, %141 ], [ %57, %20 ]
  %73 = phi i32 [ %130, %141 ], [ 2, %20 ]
  %74 = phi i32* [ %129, %141 ], [ %1, %20 ]
  %75 = phi i32 [ %147, %141 ], [ %41, %20 ]
  %76 = add i32 %67, -1
  %77 = sub i32 %49, %68
  %78 = icmp ult i32 %49, %68
  %79 = select i1 %78, i32 %51, i32 0
  %80 = add i32 %77, %79
  %81 = shl i32 %80, 1
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %47, i64 %82
  %84 = zext i32 %68 to i64
  %85 = sub nsw i64 0, %84
  %86 = getelementptr inbounds i8, i8* %45, i64 %85
  %87 = icmp ult i32 %70, %69
  %88 = select i1 %87, i32 %70, i32 %69
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %45, i64 %89
  %93 = load i8, i8* %92, align 1
  %94 = icmp eq i8 %91, %93
  br i1 %94, label %95, label %128

95:                                               ; preds = %66
  %96 = add i32 %88, 1
  %97 = icmp eq i32 %96, %4
  br i1 %97, label %116, label %98

98:                                               ; preds = %95
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds i8, i8* %86, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = getelementptr inbounds i8, i8* %45, i64 %99
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %101, %103
  br i1 %104, label %105, label %116

105:                                              ; preds = %98, %109
  %106 = phi i32 [ %107, %109 ], [ %96, %98 ]
  %107 = add i32 %106, 1
  %108 = icmp eq i32 %107, %4
  br i1 %108, label %116, label %109

109:                                              ; preds = %105
  %110 = zext i32 %107 to i64
  %111 = getelementptr inbounds i8, i8* %86, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds i8, i8* %45, i64 %110
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %112, %114
  br i1 %115, label %105, label %116

116:                                              ; preds = %109, %105, %98, %95
  %117 = phi i32 [ %96, %98 ], [ %4, %95 ], [ %4, %105 ], [ %107, %109 ]
  %118 = icmp ult i32 %73, %117
  br i1 %118, label %119, label %128

119:                                              ; preds = %116
  %120 = getelementptr inbounds i32, i32* %74, i64 1
  store i32 %117, i32* %74, align 4
  %121 = add i32 %68, -1
  %122 = getelementptr inbounds i32, i32* %74, i64 2
  store i32 %121, i32* %120, align 4
  %123 = icmp eq i32 %117, %4
  br i1 %123, label %124, label %128

124:                                              ; preds = %119
  %125 = load i32, i32* %83, align 4
  store i32 %125, i32* %71, align 4
  %126 = getelementptr inbounds i32, i32* %83, i64 1
  %127 = load i32, i32* %126, align 4
  br label %152

128:                                              ; preds = %119, %116, %66
  %129 = phi i32* [ %122, %119 ], [ %74, %116 ], [ %74, %66 ]
  %130 = phi i32 [ %117, %119 ], [ %73, %116 ], [ %73, %66 ]
  %131 = phi i32 [ %117, %119 ], [ %117, %116 ], [ %88, %66 ]
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %86, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = getelementptr inbounds i8, i8* %45, i64 %132
  %136 = load i8, i8* %135, align 1
  %137 = icmp ult i8 %134, %136
  br i1 %137, label %138, label %140

138:                                              ; preds = %128
  store i32 %75, i32* %71, align 4
  %139 = getelementptr inbounds i32, i32* %83, i64 1
  br label %141

140:                                              ; preds = %128
  store i32 %75, i32* %72, align 4
  br label %141

141:                                              ; preds = %140, %138
  %142 = phi i32* [ %139, %138 ], [ %83, %140 ]
  %143 = phi i32* [ %72, %138 ], [ %83, %140 ]
  %144 = phi i32* [ %139, %138 ], [ %71, %140 ]
  %145 = phi i32 [ %70, %138 ], [ %131, %140 ]
  %146 = phi i32 [ %131, %138 ], [ %69, %140 ]
  %147 = load i32, i32* %142, align 4
  %148 = sub i32 %44, %147
  %149 = icmp ne i32 %76, 0
  %150 = icmp ult i32 %148, %51
  %151 = and i1 %149, %150
  br i1 %151, label %66, label %62

152:                                              ; preds = %62, %124
  %153 = phi i32* [ %64, %62 ], [ %72, %124 ]
  %154 = phi i32 [ 0, %62 ], [ %127, %124 ]
  %155 = phi i32* [ %63, %62 ], [ %122, %124 ]
  store i32 %154, i32* %153, align 4
  %156 = ptrtoint i32* %155 to i64
  %157 = ptrtoint i32* %1 to i64
  %158 = sub i64 %156, %157
  %159 = lshr exact i64 %158, 2
  %160 = trunc i64 %159 to i32
  %161 = load i32, i32* %48, align 8
  %162 = add i32 %161, 1
  store i32 %162, i32* %48, align 8
  %163 = load i8*, i8** %21, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 1
  store i8* %164, i8** %21, align 8
  %165 = load i32, i32* %42, align 8
  %166 = add i32 %165, 1
  store i32 %166, i32* %42, align 8
  %167 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %166, %168
  br i1 %169, label %170, label %171

170:                                              ; preds = %152
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %171

171:                                              ; preds = %19, %6, %152, %170
  %172 = phi i32 [ %160, %170 ], [ %160, %152 ], [ 0, %6 ], [ 0, %19 ]
  ret i32 %172
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder*) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, -1
  br i1 %4, label %5, label %93

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 23
  %7 = load i32, i32* %6, align 8
  %8 = sub i32 -2, %7
  %9 = and i32 %8, -1024
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %11 = load i32*, i32** %10, align 8
  %12 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 28
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %84, label %15

15:                                               ; preds = %5
  %16 = icmp ult i64 %13, 8
  br i1 %16, label %73, label %17

17:                                               ; preds = %15
  %18 = and i64 %13, -8
  %19 = insertelement <4 x i32> undef, i32 %9, i32 0
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x i32> undef, i32 %9, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = add i64 %18, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %57, label %28

28:                                               ; preds = %17
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %54, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %55, %30 ]
  %33 = getelementptr inbounds i32, i32* %11, i64 %31
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = getelementptr inbounds i32, i32* %33, i64 4
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %35, <4 x i32> %20)
  %40 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %38, <4 x i32> %22)
  %41 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %41, align 4
  %42 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %42, align 4
  %43 = or i64 %31, 8
  %44 = getelementptr inbounds i32, i32* %11, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %46, <4 x i32> %20)
  %51 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %49, <4 x i32> %22)
  %52 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %52, align 4
  %53 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %53, align 4
  %54 = add i64 %31, 16
  %55 = add i64 %32, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %30, !llvm.loop !7

57:                                               ; preds = %30, %17
  %58 = phi i64 [ 0, %17 ], [ %54, %30 ]
  %59 = icmp eq i64 %26, 0
  br i1 %59, label %71, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds i32, i32* %11, i64 %58
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = getelementptr inbounds i32, i32* %61, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4
  %67 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %63, <4 x i32> %20)
  %68 = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %66, <4 x i32> %22)
  %69 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %69, align 4
  %70 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %70, align 4
  br label %71

71:                                               ; preds = %57, %60
  %72 = icmp eq i64 %13, %18
  br i1 %72, label %82, label %73

73:                                               ; preds = %71, %15
  %74 = phi i64 [ 0, %15 ], [ %18, %71 ]
  br label %75

75:                                               ; preds = %73, %75
  %76 = phi i64 [ %80, %75 ], [ %74, %73 ]
  %77 = getelementptr inbounds i32, i32* %11, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = tail call i32 @llvm.usub.sat.i32(i32 %78, i32 %9) #6
  store i32 %79, i32* %77, align 4
  %80 = add nuw i64 %76, 1
  %81 = icmp eq i64 %80, %13
  br i1 %81, label %82, label %75, !llvm.loop !8

82:                                               ; preds = %75, %71
  %83 = load i32, i32* %2, align 8
  br label %84

84:                                               ; preds = %5, %82
  %85 = phi i32 [ %83, %82 ], [ -1, %5 ]
  %86 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %87 = load i32, i32* %86, align 4
  %88 = sub i32 %87, %9
  store i32 %88, i32* %86, align 4
  %89 = sub i32 %85, %9
  store i32 %89, i32* %2, align 8
  %90 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = sub i32 %91, %9
  store i32 %92, i32* %90, align 8
  br label %93

93:                                               ; preds = %84, %1
  %94 = phi i32 [ %89, %84 ], [ %3, %1 ]
  %95 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 7
  %96 = load i8, i8* %95, align 8
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %136

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %100 = load i32, i32* %99, align 8
  %101 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %102 = load i32, i32* %101, align 8
  %103 = sub i32 %102, %94
  %104 = icmp eq i32 %100, %103
  br i1 %104, label %105, label %136

105:                                              ; preds = %98
  %106 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 10
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %109, label %135

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 16
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 18
  %113 = load i32, i32* %112, align 8
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  %116 = bitcast %struct._CMatchFinder* %0 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = ptrtoint i8* %115 to i64
  %119 = sub i64 %118, %117
  %120 = zext i32 %100 to i64
  %121 = icmp ugt i64 %119, %120
  br i1 %121, label %135, label %122

122:                                              ; preds = %109
  %123 = inttoptr i64 %117 to i8*
  %124 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %125 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 19
  %126 = load i32, i32* %125, align 4
  %127 = zext i32 %126 to i64
  %128 = sub nsw i64 0, %127
  %129 = getelementptr inbounds i8, i8* %123, i64 %128
  %130 = add nuw nsw i64 %127, %120
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %129, i64 %130, i1 false) #6
  %131 = load i8*, i8** %110, align 8
  %132 = load i32, i32* %125, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %131, i64 %133
  store i8* %134, i8** %124, align 8
  br label %135

135:                                              ; preds = %105, %109, %122
  tail call fastcc void @MatchFinder_ReadBlock(%struct._CMatchFinder* %0) #6
  br label %136

136:                                              ; preds = %93, %135, %98
  %137 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %138 = load i32, i32* %137, align 8
  %139 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %138, %140
  br i1 %141, label %142, label %143

142:                                              ; preds = %136
  store i32 0, i32* %137, align 8
  br label %143

143:                                              ; preds = %142, %136
  %144 = phi i32 [ 0, %142 ], [ %138, %136 ]
  %145 = load i32, i32* %2, align 8
  %146 = xor i32 %145, -1
  %147 = sub i32 %140, %144
  %148 = icmp ult i32 %147, %146
  %149 = select i1 %148, i32 %147, i32 %146
  %150 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 3
  %151 = load i32, i32* %150, align 8
  %152 = sub i32 %151, %145
  %153 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 20
  %154 = load i32, i32* %153, align 8
  %155 = icmp ugt i32 %152, %154
  %156 = sub i32 %152, %154
  %157 = icmp ne i32 %152, 0
  %158 = zext i1 %157 to i32
  %159 = select i1 %155, i32 %156, i32 %158
  %160 = icmp ult i32 %159, %149
  %161 = select i1 %160, i32 %159, i32 %149
  %162 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 11
  %163 = load i32, i32* %162, align 4
  %164 = icmp ugt i32 %152, %163
  %165 = select i1 %164, i32 %163, i32 %152
  %166 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  store i32 %165, i32* %166, align 4
  %167 = add i32 %161, %145
  %168 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  store i32 %167, i32* %168, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Hc3Zip_MatchFinder_GetMatches(%struct._CMatchFinder*, i32*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %133

19:                                               ; preds = %6
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %133

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %22, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = or i32 %28, %25
  %30 = getelementptr inbounds i8, i8* %22, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = and i32 %34, 65535
  %36 = xor i32 %29, %35
  %37 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %38 = load i32*, i32** %37, align 8
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds i32, i32* %38, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  store i32 %43, i32* %40, align 4
  %44 = load i32, i32* %42, align 8
  %45 = load i8*, i8** %21, align 8
  %46 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %47 = load i32*, i32** %46, align 8
  %48 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %49 to i64
  %55 = getelementptr inbounds i32, i32* %47, i64 %54
  store i32 %41, i32* %55, align 4
  %56 = sub i32 %44, %41
  %57 = icmp ne i32 %53, 0
  %58 = icmp ult i32 %56, %51
  %59 = and i1 %58, %57
  br i1 %59, label %60, label %116

60:                                               ; preds = %20
  %61 = add i32 %4, -1
  %62 = zext i32 %61 to i64
  br label %63

63:                                               ; preds = %109, %60
  %64 = phi i32 [ %68, %109 ], [ %53, %60 ]
  %65 = phi i32 [ %112, %109 ], [ %56, %60 ]
  %66 = phi i32 [ %111, %109 ], [ 2, %60 ]
  %67 = phi i32* [ %110, %109 ], [ %1, %60 ]
  %68 = add i32 %64, -1
  %69 = zext i32 %65 to i64
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds i8, i8* %45, i64 %70
  %72 = sub i32 %49, %65
  %73 = icmp ult i32 %49, %65
  %74 = select i1 %73, i32 %51, i32 0
  %75 = add i32 %72, %74
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %47, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %66 to i64
  %80 = getelementptr inbounds i8, i8* %71, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %45, i64 %79
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %81, %83
  br i1 %84, label %85, label %109

85:                                               ; preds = %63
  %86 = load i8, i8* %71, align 1
  %87 = load i8, i8* %45, align 1
  %88 = icmp eq i8 %86, %87
  br i1 %88, label %89, label %109

89:                                               ; preds = %85, %94
  %90 = phi i64 [ %101, %94 ], [ 0, %85 ]
  %91 = trunc i64 %90 to i32
  %92 = add i32 %91, 1
  %93 = icmp eq i64 %90, %62
  br i1 %93, label %102, label %94

94:                                               ; preds = %89
  %95 = zext i32 %92 to i64
  %96 = getelementptr inbounds i8, i8* %71, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = getelementptr inbounds i8, i8* %45, i64 %95
  %99 = load i8, i8* %98, align 1
  %100 = icmp eq i8 %97, %99
  %101 = add nuw nsw i64 %90, 1
  br i1 %100, label %89, label %102

102:                                              ; preds = %94, %89
  %103 = icmp ult i32 %66, %92
  br i1 %103, label %104, label %109

104:                                              ; preds = %102
  %105 = icmp eq i32 %92, %4
  %106 = getelementptr inbounds i32, i32* %67, i64 1
  store i32 %92, i32* %67, align 4
  %107 = add i32 %65, -1
  %108 = getelementptr inbounds i32, i32* %67, i64 2
  store i32 %107, i32* %106, align 4
  br i1 %105, label %116, label %109

109:                                              ; preds = %104, %102, %85, %63
  %110 = phi i32* [ %67, %85 ], [ %67, %63 ], [ %108, %104 ], [ %67, %102 ]
  %111 = phi i32 [ %66, %85 ], [ %66, %63 ], [ %92, %104 ], [ %66, %102 ]
  %112 = sub i32 %44, %78
  %113 = icmp ne i32 %68, 0
  %114 = icmp ult i32 %112, %51
  %115 = and i1 %113, %114
  br i1 %115, label %63, label %116

116:                                              ; preds = %104, %109, %20
  %117 = phi i32* [ %1, %20 ], [ %110, %109 ], [ %108, %104 ]
  %118 = ptrtoint i32* %117 to i64
  %119 = ptrtoint i32* %1 to i64
  %120 = sub i64 %118, %119
  %121 = lshr exact i64 %120, 2
  %122 = trunc i64 %121 to i32
  %123 = load i32, i32* %48, align 8
  %124 = add i32 %123, 1
  store i32 %124, i32* %48, align 8
  %125 = load i8*, i8** %21, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  store i8* %126, i8** %21, align 8
  %127 = load i32, i32* %42, align 8
  %128 = add i32 %127, 1
  store i32 %128, i32* %42, align 8
  %129 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %128, %130
  br i1 %131, label %132, label %133

132:                                              ; preds = %116
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %133

133:                                              ; preds = %19, %6, %116, %132
  %134 = phi i32 [ %122, %132 ], [ %122, %116 ], [ 0, %6 ], [ 0, %19 ]
  ret i32 %134
}

; Function Attrs: nounwind ssp uwtable
define hidden void @Bt3Zip_MatchFinder_Skip(%struct._CMatchFinder*, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %11 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  br label %12

12:                                               ; preds = %137, %2
  %13 = phi i32 [ %1, %2 ], [ %138, %137 ]
  %14 = load i32, i32* %3, align 4
  %15 = icmp ult i32 %14, 3
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %8, align 8
  %18 = add i32 %17, 1
  store i32 %18, i32* %8, align 8
  %19 = load i8*, i8** %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %4, align 8
  %21 = load i32, i32* %6, align 8
  %22 = add i32 %21, 1
  store i32 %22, i32* %6, align 8
  %23 = load i32, i32* %11, align 4
  %24 = icmp eq i32 %22, %23
  br i1 %24, label %25, label %137

25:                                               ; preds = %16
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %137

26:                                               ; preds = %12
  %27 = load i8*, i8** %4, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 2
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = load i8, i8* %27, align 1
  %32 = zext i8 %31 to i32
  %33 = shl nuw nsw i32 %32, 8
  %34 = or i32 %33, %30
  %35 = getelementptr inbounds i8, i8* %27, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 65535
  %41 = xor i32 %34, %40
  %42 = load i32*, i32** %5, align 8
  %43 = zext i32 %41 to i64
  %44 = getelementptr inbounds i32, i32* %42, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = load i32, i32* %6, align 8
  store i32 %46, i32* %44, align 4
  %47 = load i32, i32* %6, align 8
  %48 = load i8*, i8** %4, align 8
  %49 = load i32*, i32** %7, align 8
  %50 = load i32, i32* %8, align 8
  %51 = load i32, i32* %9, align 4
  %52 = load i32, i32* %10, align 4
  %53 = shl i32 %50, 1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %49, i64 %54
  %56 = getelementptr inbounds i32, i32* %55, i64 1
  %57 = sub i32 %47, %45
  %58 = icmp ne i32 %52, 0
  %59 = icmp ult i32 %57, %51
  %60 = and i1 %59, %58
  br i1 %60, label %64, label %61

61:                                               ; preds = %114, %26
  %62 = phi i32* [ %56, %26 ], [ %116, %114 ]
  %63 = phi i32* [ %55, %26 ], [ %117, %114 ]
  store i32 0, i32* %63, align 4
  br label %125

64:                                               ; preds = %26, %114
  %65 = phi i32 [ %72, %114 ], [ %52, %26 ]
  %66 = phi i32 [ %121, %114 ], [ %57, %26 ]
  %67 = phi i32 [ %119, %114 ], [ 0, %26 ]
  %68 = phi i32 [ %118, %114 ], [ 0, %26 ]
  %69 = phi i32* [ %117, %114 ], [ %55, %26 ]
  %70 = phi i32* [ %116, %114 ], [ %56, %26 ]
  %71 = phi i32 [ %120, %114 ], [ %45, %26 ]
  %72 = add i32 %65, -1
  %73 = sub i32 %50, %66
  %74 = icmp ult i32 %50, %66
  %75 = select i1 %74, i32 %51, i32 0
  %76 = add i32 %73, %75
  %77 = shl i32 %76, 1
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %49, i64 %78
  %80 = zext i32 %66 to i64
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, i8* %48, i64 %81
  %83 = icmp ult i32 %68, %67
  %84 = select i1 %83, i32 %68, i32 %67
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %82, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %48, i64 %85
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %87, %89
  br i1 %90, label %91, label %106

91:                                               ; preds = %64, %95
  %92 = phi i32 [ %93, %95 ], [ %84, %64 ]
  %93 = add i32 %92, 1
  %94 = icmp eq i32 %93, %14
  br i1 %94, label %102, label %95

95:                                               ; preds = %91
  %96 = zext i32 %93 to i64
  %97 = getelementptr inbounds i8, i8* %82, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = getelementptr inbounds i8, i8* %48, i64 %96
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %98, %100
  br i1 %101, label %91, label %106

102:                                              ; preds = %91
  %103 = load i32, i32* %79, align 4
  store i32 %103, i32* %69, align 4
  %104 = getelementptr inbounds i32, i32* %79, i64 1
  %105 = load i32, i32* %104, align 4
  br label %125

106:                                              ; preds = %95, %64
  %107 = phi i8 [ %89, %64 ], [ %100, %95 ]
  %108 = phi i8 [ %87, %64 ], [ %98, %95 ]
  %109 = phi i32 [ %84, %64 ], [ %93, %95 ]
  %110 = icmp ult i8 %108, %107
  br i1 %110, label %111, label %113

111:                                              ; preds = %106
  store i32 %71, i32* %69, align 4
  %112 = getelementptr inbounds i32, i32* %79, i64 1
  br label %114

113:                                              ; preds = %106
  store i32 %71, i32* %70, align 4
  br label %114

114:                                              ; preds = %113, %111
  %115 = phi i32* [ %112, %111 ], [ %79, %113 ]
  %116 = phi i32* [ %70, %111 ], [ %79, %113 ]
  %117 = phi i32* [ %112, %111 ], [ %69, %113 ]
  %118 = phi i32 [ %68, %111 ], [ %109, %113 ]
  %119 = phi i32 [ %109, %111 ], [ %67, %113 ]
  %120 = load i32, i32* %115, align 4
  %121 = sub i32 %47, %120
  %122 = icmp ne i32 %72, 0
  %123 = icmp ult i32 %121, %51
  %124 = and i1 %122, %123
  br i1 %124, label %64, label %61

125:                                              ; preds = %61, %102
  %126 = phi i32* [ %62, %61 ], [ %70, %102 ]
  %127 = phi i32 [ 0, %61 ], [ %105, %102 ]
  store i32 %127, i32* %126, align 4
  %128 = load i32, i32* %8, align 8
  %129 = add i32 %128, 1
  store i32 %129, i32* %8, align 8
  %130 = load i8*, i8** %4, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 1
  store i8* %131, i8** %4, align 8
  %132 = load i32, i32* %6, align 8
  %133 = add i32 %132, 1
  store i32 %133, i32* %6, align 8
  %134 = load i32, i32* %11, align 4
  %135 = icmp eq i32 %133, %134
  br i1 %135, label %136, label %137

136:                                              ; preds = %125
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %137

137:                                              ; preds = %25, %16, %125, %136
  %138 = add i32 %13, -1
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %12

140:                                              ; preds = %137
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @Hc3Zip_MatchFinder_Skip(%struct._CMatchFinder*, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  br label %10

10:                                               ; preds = %58, %2
  %11 = phi i32 [ %1, %2 ], [ %59, %58 ]
  %12 = load i32, i32* %3, align 4
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %8, align 8
  %16 = add i32 %15, 1
  store i32 %16, i32* %8, align 8
  %17 = load i8*, i8** %4, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %18, i8** %4, align 8
  %19 = load i32, i32* %6, align 8
  %20 = add i32 %19, 1
  store i32 %20, i32* %6, align 8
  %21 = load i32, i32* %9, align 4
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %23, label %58

23:                                               ; preds = %14
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %58

24:                                               ; preds = %10
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = load i8, i8* %25, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 8
  %32 = or i32 %31, %28
  %33 = getelementptr inbounds i8, i8* %25, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 65535
  %39 = xor i32 %32, %38
  %40 = load i32*, i32** %5, align 8
  %41 = zext i32 %39 to i64
  %42 = getelementptr inbounds i32, i32* %40, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = load i32, i32* %6, align 8
  store i32 %44, i32* %42, align 4
  %45 = load i32*, i32** %7, align 8
  %46 = load i32, i32* %8, align 8
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %45, i64 %47
  store i32 %43, i32* %48, align 4
  %49 = load i32, i32* %8, align 8
  %50 = add i32 %49, 1
  store i32 %50, i32* %8, align 8
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %52, i8** %4, align 8
  %53 = load i32, i32* %6, align 8
  %54 = add i32 %53, 1
  store i32 %54, i32* %6, align 8
  %55 = load i32, i32* %9, align 4
  %56 = icmp eq i32 %54, %55
  br i1 %56, label %57, label %58

57:                                               ; preds = %24
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %58

58:                                               ; preds = %23, %14, %24, %57
  %59 = add i32 %11, -1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %10

61:                                               ; preds = %58
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MatchFinder_CreateVTable(%struct._CMatchFinder* nocapture readonly, %struct._IMatchFinder* nocapture) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 0
  store void (i8*)* bitcast (void (%struct._CMatchFinder*)* @MatchFinder_Init to void (i8*)*), void (i8*)** %3, align 8
  %4 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 1
  store i32 (i8*)* bitcast (i32 (%struct._CMatchFinder*)* @MatchFinder_GetNumAvailableBytes to i32 (i8*)*), i32 (i8*)** %4, align 8
  %5 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 2
  store i8* (i8*)* bitcast (i8* (%struct._CMatchFinder*)* @MatchFinder_GetPointerToCurrentPos to i8* (i8*)*), i8* (i8*)** %5, align 8
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 8
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 3
  store i32 (i8*, i32*)* bitcast (i32 (%struct._CMatchFinder*, i32*)* @Hc4_MatchFinder_GetMatches to i32 (i8*, i32*)*), i32 (i8*, i32*)** %10, align 8
  br label %22

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 21
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 3
  store i32 (i8*, i32*)* bitcast (i32 (%struct._CMatchFinder*, i32*)* @Bt2_MatchFinder_GetMatches to i32 (i8*, i32*)*), i32 (i8*, i32*)** %16, align 8
  br label %22

17:                                               ; preds = %11
  %18 = icmp eq i32 %13, 3
  %19 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 3
  br i1 %18, label %20, label %21

20:                                               ; preds = %17
  store i32 (i8*, i32*)* bitcast (i32 (%struct._CMatchFinder*, i32*)* @Bt3_MatchFinder_GetMatches to i32 (i8*, i32*)*), i32 (i8*, i32*)** %19, align 8
  br label %22

21:                                               ; preds = %17
  store i32 (i8*, i32*)* bitcast (i32 (%struct._CMatchFinder*, i32*)* @Bt4_MatchFinder_GetMatches to i32 (i8*, i32*)*), i32 (i8*, i32*)** %19, align 8
  br label %22

22:                                               ; preds = %15, %21, %20, %9
  %23 = phi void (i8*, i32)* [ bitcast (void (%struct._CMatchFinder*, i32)* @Bt2_MatchFinder_Skip to void (i8*, i32)*), %15 ], [ bitcast (void (%struct._CMatchFinder*, i32)* @Bt4_MatchFinder_Skip to void (i8*, i32)*), %21 ], [ bitcast (void (%struct._CMatchFinder*, i32)* @Bt3_MatchFinder_Skip to void (i8*, i32)*), %20 ], [ bitcast (void (%struct._CMatchFinder*, i32)* @Hc4_MatchFinder_Skip to void (i8*, i32)*), %9 ]
  %24 = getelementptr inbounds %struct._IMatchFinder, %struct._IMatchFinder* %1, i64 0, i32 4
  store void (i8*, i32)* %23, void (i8*, i32)** %24, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Hc4_MatchFinder_GetMatches(%struct._CMatchFinder*, i32*) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 4
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %242

19:                                               ; preds = %6
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %242

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %22, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = xor i32 %26, %29
  %31 = and i32 %30, 1023
  %32 = getelementptr inbounds i8, i8* %22, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = xor i32 %35, %30
  %37 = and i32 %36, 65535
  %38 = getelementptr inbounds i8, i8* %22, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = shl i32 %42, 5
  %44 = xor i32 %36, %43
  %45 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %44, %46
  %48 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = zext i32 %31 to i64
  %53 = getelementptr inbounds i32, i32* %49, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 %51, %54
  %56 = add nuw nsw i32 %37, 1024
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %49, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 %51, %59
  %61 = add i32 %47, 66560
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %49, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %51, i32* %53, align 4
  store i32 %51, i32* %58, align 4
  store i32 %51, i32* %63, align 4
  %65 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %66 = load i32, i32* %65, align 4
  %67 = icmp ult i32 %55, %66
  br i1 %67, label %68, label %78

68:                                               ; preds = %20
  %69 = zext i32 %55 to i64
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds i8, i8* %22, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = load i8, i8* %22, align 1
  %74 = icmp eq i8 %72, %73
  br i1 %74, label %75, label %78

75:                                               ; preds = %68
  store i32 2, i32* %1, align 4
  %76 = add i32 %55, -1
  %77 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %76, i32* %77, align 4
  br label %78

78:                                               ; preds = %75, %68, %20
  %79 = phi i32 [ 2, %75 ], [ 0, %68 ], [ 0, %20 ]
  %80 = icmp eq i32 %55, %60
  br i1 %80, label %97, label %81

81:                                               ; preds = %78
  %82 = load i32, i32* %65, align 4
  %83 = icmp ult i32 %60, %82
  br i1 %83, label %84, label %97

84:                                               ; preds = %81
  %85 = zext i32 %60 to i64
  %86 = sub nsw i64 0, %85
  %87 = getelementptr inbounds i8, i8* %22, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = load i8, i8* %22, align 1
  %90 = icmp eq i8 %88, %89
  br i1 %90, label %91, label %97

91:                                               ; preds = %84
  %92 = add i32 %60, -1
  %93 = or i32 %79, 1
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %1, i64 %94
  store i32 %92, i32* %95, align 4
  %96 = add nuw nsw i32 %79, 2
  br label %102

97:                                               ; preds = %78, %84, %81
  %98 = icmp eq i32 %79, 0
  br i1 %98, label %147, label %99

99:                                               ; preds = %97
  %100 = zext i32 %55 to i64
  %101 = sub nsw i64 0, %100
  br label %102

102:                                              ; preds = %99, %91
  %103 = phi i64 [ %101, %99 ], [ %86, %91 ]
  %104 = phi i32 [ %79, %99 ], [ %96, %91 ]
  %105 = phi i32 [ %79, %99 ], [ 3, %91 ]
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %22, i64 %106
  %108 = zext i32 %4 to i64
  %109 = getelementptr inbounds i8, i8* %22, i64 %108
  %110 = icmp eq i32 %105, %4
  br i1 %110, label %120, label %111

111:                                              ; preds = %102, %117
  %112 = phi i8* [ %118, %117 ], [ %107, %102 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 %103
  %114 = load i8, i8* %113, align 1
  %115 = load i8, i8* %112, align 1
  %116 = icmp eq i8 %114, %115
  br i1 %116, label %117, label %120

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %112, i64 1
  %119 = icmp eq i8* %118, %109
  br i1 %119, label %120, label %111

120:                                              ; preds = %117, %111, %102
  %121 = phi i8* [ %107, %102 ], [ %112, %111 ], [ %109, %117 ]
  %122 = ptrtoint i8* %121 to i64
  %123 = ptrtoint i8* %22 to i64
  %124 = sub i64 %122, %123
  %125 = trunc i64 %124 to i32
  %126 = add nsw i32 %104, -2
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %1, i64 %127
  store i32 %125, i32* %128, align 4
  %129 = icmp eq i32 %4, %125
  br i1 %129, label %130, label %147

130:                                              ; preds = %120
  %131 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %132 = load i32*, i32** %131, align 8
  %133 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %134 = load i32, i32* %133, align 8
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i32, i32* %132, i64 %135
  store i32 %64, i32* %136, align 4
  %137 = load i32, i32* %133, align 8
  %138 = add i32 %137, 1
  store i32 %138, i32* %133, align 8
  %139 = load i8*, i8** %21, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  store i8* %140, i8** %21, align 8
  %141 = load i32, i32* %50, align 8
  %142 = add i32 %141, 1
  store i32 %142, i32* %50, align 8
  %143 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %142, %144
  br i1 %145, label %146, label %242

146:                                              ; preds = %130
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %242

147:                                              ; preds = %97, %120
  %148 = phi i32 [ %104, %120 ], [ 0, %97 ]
  %149 = phi i32 [ %125, %120 ], [ 0, %97 ]
  %150 = load i32, i32* %50, align 8
  %151 = load i8*, i8** %21, align 8
  %152 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %153 = load i32*, i32** %152, align 8
  %154 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %155 = load i32, i32* %154, align 8
  %156 = load i32, i32* %65, align 4
  %157 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %158 = load i32, i32* %157, align 4
  %159 = zext i32 %148 to i64
  %160 = getelementptr inbounds i32, i32* %1, i64 %159
  %161 = zext i32 %155 to i64
  %162 = getelementptr inbounds i32, i32* %153, i64 %161
  store i32 %64, i32* %162, align 4
  %163 = sub i32 %150, %64
  %164 = icmp ne i32 %158, 0
  %165 = icmp ult i32 %163, %156
  %166 = and i1 %165, %164
  br i1 %166, label %167, label %225

167:                                              ; preds = %147
  %168 = icmp ugt i32 %149, 3
  %169 = select i1 %168, i32 %149, i32 3
  %170 = add i32 %4, -1
  %171 = zext i32 %170 to i64
  br label %172

172:                                              ; preds = %218, %167
  %173 = phi i32 [ %177, %218 ], [ %158, %167 ]
  %174 = phi i32 [ %221, %218 ], [ %163, %167 ]
  %175 = phi i32 [ %220, %218 ], [ %169, %167 ]
  %176 = phi i32* [ %219, %218 ], [ %160, %167 ]
  %177 = add i32 %173, -1
  %178 = zext i32 %174 to i64
  %179 = sub nsw i64 0, %178
  %180 = getelementptr inbounds i8, i8* %151, i64 %179
  %181 = sub i32 %155, %174
  %182 = icmp ult i32 %155, %174
  %183 = select i1 %182, i32 %156, i32 0
  %184 = add i32 %181, %183
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %153, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %175 to i64
  %189 = getelementptr inbounds i8, i8* %180, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = getelementptr inbounds i8, i8* %151, i64 %188
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %190, %192
  br i1 %193, label %194, label %218

194:                                              ; preds = %172
  %195 = load i8, i8* %180, align 1
  %196 = load i8, i8* %151, align 1
  %197 = icmp eq i8 %195, %196
  br i1 %197, label %198, label %218

198:                                              ; preds = %194, %203
  %199 = phi i64 [ %210, %203 ], [ 0, %194 ]
  %200 = trunc i64 %199 to i32
  %201 = add i32 %200, 1
  %202 = icmp eq i64 %199, %171
  br i1 %202, label %211, label %203

203:                                              ; preds = %198
  %204 = zext i32 %201 to i64
  %205 = getelementptr inbounds i8, i8* %180, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = getelementptr inbounds i8, i8* %151, i64 %204
  %208 = load i8, i8* %207, align 1
  %209 = icmp eq i8 %206, %208
  %210 = add nuw nsw i64 %199, 1
  br i1 %209, label %198, label %211

211:                                              ; preds = %203, %198
  %212 = icmp ult i32 %175, %201
  br i1 %212, label %213, label %218

213:                                              ; preds = %211
  %214 = icmp eq i32 %201, %4
  %215 = getelementptr inbounds i32, i32* %176, i64 1
  store i32 %201, i32* %176, align 4
  %216 = add i32 %174, -1
  %217 = getelementptr inbounds i32, i32* %176, i64 2
  store i32 %216, i32* %215, align 4
  br i1 %214, label %225, label %218

218:                                              ; preds = %213, %211, %194, %172
  %219 = phi i32* [ %176, %194 ], [ %176, %172 ], [ %217, %213 ], [ %176, %211 ]
  %220 = phi i32 [ %175, %194 ], [ %175, %172 ], [ %201, %213 ], [ %175, %211 ]
  %221 = sub i32 %150, %187
  %222 = icmp ne i32 %177, 0
  %223 = icmp ult i32 %221, %156
  %224 = and i1 %222, %223
  br i1 %224, label %172, label %225

225:                                              ; preds = %213, %218, %147
  %226 = phi i32* [ %160, %147 ], [ %219, %218 ], [ %217, %213 ]
  %227 = ptrtoint i32* %226 to i64
  %228 = ptrtoint i32* %1 to i64
  %229 = sub i64 %227, %228
  %230 = lshr exact i64 %229, 2
  %231 = trunc i64 %230 to i32
  %232 = load i32, i32* %154, align 8
  %233 = add i32 %232, 1
  store i32 %233, i32* %154, align 8
  %234 = load i8*, i8** %21, align 8
  %235 = getelementptr inbounds i8, i8* %234, i64 1
  store i8* %235, i8** %21, align 8
  %236 = load i32, i32* %50, align 8
  %237 = add i32 %236, 1
  store i32 %237, i32* %50, align 8
  %238 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %239 = load i32, i32* %238, align 4
  %240 = icmp eq i32 %237, %239
  br i1 %240, label %241, label %242

241:                                              ; preds = %225
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %242

242:                                              ; preds = %19, %6, %225, %241, %130, %146
  %243 = phi i32 [ %104, %146 ], [ %104, %130 ], [ %231, %241 ], [ %231, %225 ], [ 0, %6 ], [ 0, %19 ]
  ret i32 %243
}

; Function Attrs: nounwind ssp uwtable
define internal void @Hc4_MatchFinder_Skip(%struct._CMatchFinder*, i32) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  br label %11

11:                                               ; preds = %75, %2
  %12 = phi i32 [ %1, %2 ], [ %76, %75 ]
  %13 = load i32, i32* %3, align 4
  %14 = icmp ult i32 %13, 4
  br i1 %14, label %15, label %25

15:                                               ; preds = %11
  %16 = load i32, i32* %9, align 8
  %17 = add i32 %16, 1
  store i32 %17, i32* %9, align 8
  %18 = load i8*, i8** %4, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8* %19, i8** %4, align 8
  %20 = load i32, i32* %7, align 8
  %21 = add i32 %20, 1
  store i32 %21, i32* %7, align 8
  %22 = load i32, i32* %10, align 4
  %23 = icmp eq i32 %21, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %15
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %75

25:                                               ; preds = %11
  %26 = load i8*, i8** %4, align 8
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %26, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = xor i32 %30, %33
  %35 = and i32 %34, 1023
  %36 = getelementptr inbounds i8, i8* %26, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl nuw nsw i32 %38, 8
  %40 = xor i32 %39, %34
  %41 = and i32 %40, 65535
  %42 = getelementptr inbounds i8, i8* %26, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = shl i32 %46, 5
  %48 = xor i32 %40, %47
  %49 = load i32, i32* %5, align 8
  %50 = and i32 %48, %49
  %51 = load i32*, i32** %6, align 8
  %52 = add i32 %50, 66560
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %51, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* %7, align 8
  store i32 %56, i32* %54, align 4
  %57 = add nuw nsw i32 %41, 1024
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %51, i64 %58
  store i32 %56, i32* %59, align 4
  %60 = zext i32 %35 to i64
  %61 = getelementptr inbounds i32, i32* %51, i64 %60
  store i32 %56, i32* %61, align 4
  %62 = load i32*, i32** %8, align 8
  %63 = load i32, i32* %9, align 8
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %62, i64 %64
  store i32 %55, i32* %65, align 4
  %66 = load i32, i32* %9, align 8
  %67 = add i32 %66, 1
  store i32 %67, i32* %9, align 8
  %68 = load i8*, i8** %4, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  store i8* %69, i8** %4, align 8
  %70 = load i32, i32* %7, align 8
  %71 = add i32 %70, 1
  store i32 %71, i32* %7, align 8
  %72 = load i32, i32* %10, align 4
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %74, label %75

74:                                               ; preds = %25
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %75

75:                                               ; preds = %24, %15, %25, %74
  %76 = add i32 %12, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %11

78:                                               ; preds = %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Bt2_MatchFinder_GetMatches(%struct._CMatchFinder*, i32*) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 2
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %163

19:                                               ; preds = %6
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %163

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds i8, i8* %22, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = shl nuw nsw i64 %27, 8
  %29 = or i64 %28, %24
  %30 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %31 = load i32*, i32** %30, align 8
  %32 = getelementptr inbounds i32, i32* %31, i64 %29
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  store i32 %35, i32* %32, align 4
  %36 = load i32, i32* %34, align 8
  %37 = load i8*, i8** %21, align 8
  %38 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %39 = load i32*, i32** %38, align 8
  %40 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %45 = load i32, i32* %44, align 4
  %46 = shl i32 %41, 1
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %39, i64 %47
  %49 = getelementptr inbounds i32, i32* %48, i64 1
  %50 = sub i32 %36, %33
  %51 = icmp ne i32 %45, 0
  %52 = icmp ult i32 %50, %43
  %53 = and i1 %52, %51
  br i1 %53, label %58, label %54

54:                                               ; preds = %133, %20
  %55 = phi i32* [ %1, %20 ], [ %121, %133 ]
  %56 = phi i32* [ %49, %20 ], [ %135, %133 ]
  %57 = phi i32* [ %48, %20 ], [ %136, %133 ]
  store i32 0, i32* %57, align 4
  br label %144

58:                                               ; preds = %20, %133
  %59 = phi i32 [ %68, %133 ], [ %45, %20 ]
  %60 = phi i32 [ %140, %133 ], [ %50, %20 ]
  %61 = phi i32 [ %138, %133 ], [ 0, %20 ]
  %62 = phi i32 [ %137, %133 ], [ 0, %20 ]
  %63 = phi i32* [ %136, %133 ], [ %48, %20 ]
  %64 = phi i32* [ %135, %133 ], [ %49, %20 ]
  %65 = phi i32 [ %122, %133 ], [ 1, %20 ]
  %66 = phi i32* [ %121, %133 ], [ %1, %20 ]
  %67 = phi i32 [ %139, %133 ], [ %33, %20 ]
  %68 = add i32 %59, -1
  %69 = sub i32 %41, %60
  %70 = icmp ult i32 %41, %60
  %71 = select i1 %70, i32 %43, i32 0
  %72 = add i32 %69, %71
  %73 = shl i32 %72, 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %39, i64 %74
  %76 = zext i32 %60 to i64
  %77 = sub nsw i64 0, %76
  %78 = getelementptr inbounds i8, i8* %37, i64 %77
  %79 = icmp ult i32 %62, %61
  %80 = select i1 %79, i32 %62, i32 %61
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %78, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds i8, i8* %37, i64 %81
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %83, %85
  br i1 %86, label %87, label %120

87:                                               ; preds = %58
  %88 = add i32 %80, 1
  %89 = icmp eq i32 %88, %4
  br i1 %89, label %108, label %90

90:                                               ; preds = %87
  %91 = zext i32 %88 to i64
  %92 = getelementptr inbounds i8, i8* %78, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %37, i64 %91
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %93, %95
  br i1 %96, label %97, label %108

97:                                               ; preds = %90, %101
  %98 = phi i32 [ %99, %101 ], [ %88, %90 ]
  %99 = add i32 %98, 1
  %100 = icmp eq i32 %99, %4
  br i1 %100, label %108, label %101

101:                                              ; preds = %97
  %102 = zext i32 %99 to i64
  %103 = getelementptr inbounds i8, i8* %78, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds i8, i8* %37, i64 %102
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %104, %106
  br i1 %107, label %97, label %108

108:                                              ; preds = %101, %97, %90, %87
  %109 = phi i32 [ %88, %90 ], [ %4, %87 ], [ %4, %97 ], [ %99, %101 ]
  %110 = icmp ult i32 %65, %109
  br i1 %110, label %111, label %120

111:                                              ; preds = %108
  %112 = getelementptr inbounds i32, i32* %66, i64 1
  store i32 %109, i32* %66, align 4
  %113 = add i32 %60, -1
  %114 = getelementptr inbounds i32, i32* %66, i64 2
  store i32 %113, i32* %112, align 4
  %115 = icmp eq i32 %109, %4
  br i1 %115, label %116, label %120

116:                                              ; preds = %111
  %117 = load i32, i32* %75, align 4
  store i32 %117, i32* %63, align 4
  %118 = getelementptr inbounds i32, i32* %75, i64 1
  %119 = load i32, i32* %118, align 4
  br label %144

120:                                              ; preds = %111, %108, %58
  %121 = phi i32* [ %114, %111 ], [ %66, %108 ], [ %66, %58 ]
  %122 = phi i32 [ %109, %111 ], [ %65, %108 ], [ %65, %58 ]
  %123 = phi i32 [ %109, %111 ], [ %109, %108 ], [ %80, %58 ]
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %78, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds i8, i8* %37, i64 %124
  %128 = load i8, i8* %127, align 1
  %129 = icmp ult i8 %126, %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %120
  store i32 %67, i32* %63, align 4
  %131 = getelementptr inbounds i32, i32* %75, i64 1
  br label %133

132:                                              ; preds = %120
  store i32 %67, i32* %64, align 4
  br label %133

133:                                              ; preds = %132, %130
  %134 = phi i32* [ %131, %130 ], [ %75, %132 ]
  %135 = phi i32* [ %64, %130 ], [ %75, %132 ]
  %136 = phi i32* [ %131, %130 ], [ %63, %132 ]
  %137 = phi i32 [ %62, %130 ], [ %123, %132 ]
  %138 = phi i32 [ %123, %130 ], [ %61, %132 ]
  %139 = load i32, i32* %134, align 4
  %140 = sub i32 %36, %139
  %141 = icmp ne i32 %68, 0
  %142 = icmp ult i32 %140, %43
  %143 = and i1 %141, %142
  br i1 %143, label %58, label %54

144:                                              ; preds = %54, %116
  %145 = phi i32* [ %56, %54 ], [ %64, %116 ]
  %146 = phi i32 [ 0, %54 ], [ %119, %116 ]
  %147 = phi i32* [ %55, %54 ], [ %114, %116 ]
  store i32 %146, i32* %145, align 4
  %148 = ptrtoint i32* %147 to i64
  %149 = ptrtoint i32* %1 to i64
  %150 = sub i64 %148, %149
  %151 = lshr exact i64 %150, 2
  %152 = trunc i64 %151 to i32
  %153 = load i32, i32* %40, align 8
  %154 = add i32 %153, 1
  store i32 %154, i32* %40, align 8
  %155 = load i8*, i8** %21, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 1
  store i8* %156, i8** %21, align 8
  %157 = load i32, i32* %34, align 8
  %158 = add i32 %157, 1
  store i32 %158, i32* %34, align 8
  %159 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %160 = load i32, i32* %159, align 4
  %161 = icmp eq i32 %158, %160
  br i1 %161, label %162, label %163

162:                                              ; preds = %144
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %163

163:                                              ; preds = %19, %6, %144, %162
  %164 = phi i32 [ %152, %162 ], [ %152, %144 ], [ 0, %6 ], [ 0, %19 ]
  ret i32 %164
}

; Function Attrs: nounwind ssp uwtable
define internal void @Bt2_MatchFinder_Skip(%struct._CMatchFinder*, i32) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %11 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  br label %12

12:                                               ; preds = %129, %2
  %13 = phi i32 [ %1, %2 ], [ %130, %129 ]
  %14 = load i32, i32* %3, align 4
  %15 = icmp ult i32 %14, 2
  br i1 %15, label %16, label %26

16:                                               ; preds = %12
  %17 = load i32, i32* %8, align 8
  %18 = add i32 %17, 1
  store i32 %18, i32* %8, align 8
  %19 = load i8*, i8** %4, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %4, align 8
  %21 = load i32, i32* %6, align 8
  %22 = add i32 %21, 1
  store i32 %22, i32* %6, align 8
  %23 = load i32, i32* %11, align 4
  %24 = icmp eq i32 %22, %23
  br i1 %24, label %25, label %129

25:                                               ; preds = %16
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %129

26:                                               ; preds = %12
  %27 = load i8*, i8** %4, align 8
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = shl nuw nsw i64 %32, 8
  %34 = or i64 %33, %29
  %35 = load i32*, i32** %5, align 8
  %36 = getelementptr inbounds i32, i32* %35, i64 %34
  %37 = load i32, i32* %36, align 4
  %38 = load i32, i32* %6, align 8
  store i32 %38, i32* %36, align 4
  %39 = load i32, i32* %6, align 8
  %40 = load i8*, i8** %4, align 8
  %41 = load i32*, i32** %7, align 8
  %42 = load i32, i32* %8, align 8
  %43 = load i32, i32* %9, align 4
  %44 = load i32, i32* %10, align 4
  %45 = shl i32 %42, 1
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %41, i64 %46
  %48 = getelementptr inbounds i32, i32* %47, i64 1
  %49 = sub i32 %39, %37
  %50 = icmp ne i32 %44, 0
  %51 = icmp ult i32 %49, %43
  %52 = and i1 %51, %50
  br i1 %52, label %56, label %53

53:                                               ; preds = %106, %26
  %54 = phi i32* [ %48, %26 ], [ %108, %106 ]
  %55 = phi i32* [ %47, %26 ], [ %109, %106 ]
  store i32 0, i32* %55, align 4
  br label %117

56:                                               ; preds = %26, %106
  %57 = phi i32 [ %64, %106 ], [ %44, %26 ]
  %58 = phi i32 [ %113, %106 ], [ %49, %26 ]
  %59 = phi i32 [ %111, %106 ], [ 0, %26 ]
  %60 = phi i32 [ %110, %106 ], [ 0, %26 ]
  %61 = phi i32* [ %109, %106 ], [ %47, %26 ]
  %62 = phi i32* [ %108, %106 ], [ %48, %26 ]
  %63 = phi i32 [ %112, %106 ], [ %37, %26 ]
  %64 = add i32 %57, -1
  %65 = sub i32 %42, %58
  %66 = icmp ult i32 %42, %58
  %67 = select i1 %66, i32 %43, i32 0
  %68 = add i32 %65, %67
  %69 = shl i32 %68, 1
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i32, i32* %41, i64 %70
  %72 = zext i32 %58 to i64
  %73 = sub nsw i64 0, %72
  %74 = getelementptr inbounds i8, i8* %40, i64 %73
  %75 = icmp ult i32 %60, %59
  %76 = select i1 %75, i32 %60, i32 %59
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %74, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %40, i64 %77
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %79, %81
  br i1 %82, label %83, label %98

83:                                               ; preds = %56, %87
  %84 = phi i32 [ %85, %87 ], [ %76, %56 ]
  %85 = add i32 %84, 1
  %86 = icmp eq i32 %85, %14
  br i1 %86, label %94, label %87

87:                                               ; preds = %83
  %88 = zext i32 %85 to i64
  %89 = getelementptr inbounds i8, i8* %74, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds i8, i8* %40, i64 %88
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %90, %92
  br i1 %93, label %83, label %98

94:                                               ; preds = %83
  %95 = load i32, i32* %71, align 4
  store i32 %95, i32* %61, align 4
  %96 = getelementptr inbounds i32, i32* %71, i64 1
  %97 = load i32, i32* %96, align 4
  br label %117

98:                                               ; preds = %87, %56
  %99 = phi i8 [ %81, %56 ], [ %92, %87 ]
  %100 = phi i8 [ %79, %56 ], [ %90, %87 ]
  %101 = phi i32 [ %76, %56 ], [ %85, %87 ]
  %102 = icmp ult i8 %100, %99
  br i1 %102, label %103, label %105

103:                                              ; preds = %98
  store i32 %63, i32* %61, align 4
  %104 = getelementptr inbounds i32, i32* %71, i64 1
  br label %106

105:                                              ; preds = %98
  store i32 %63, i32* %62, align 4
  br label %106

106:                                              ; preds = %105, %103
  %107 = phi i32* [ %104, %103 ], [ %71, %105 ]
  %108 = phi i32* [ %62, %103 ], [ %71, %105 ]
  %109 = phi i32* [ %104, %103 ], [ %61, %105 ]
  %110 = phi i32 [ %60, %103 ], [ %101, %105 ]
  %111 = phi i32 [ %101, %103 ], [ %59, %105 ]
  %112 = load i32, i32* %107, align 4
  %113 = sub i32 %39, %112
  %114 = icmp ne i32 %64, 0
  %115 = icmp ult i32 %113, %43
  %116 = and i1 %114, %115
  br i1 %116, label %56, label %53

117:                                              ; preds = %53, %94
  %118 = phi i32* [ %54, %53 ], [ %62, %94 ]
  %119 = phi i32 [ 0, %53 ], [ %97, %94 ]
  store i32 %119, i32* %118, align 4
  %120 = load i32, i32* %8, align 8
  %121 = add i32 %120, 1
  store i32 %121, i32* %8, align 8
  %122 = load i8*, i8** %4, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %4, align 8
  %124 = load i32, i32* %6, align 8
  %125 = add i32 %124, 1
  store i32 %125, i32* %6, align 8
  %126 = load i32, i32* %11, align 4
  %127 = icmp eq i32 %125, %126
  br i1 %127, label %128, label %129

128:                                              ; preds = %117
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %129

129:                                              ; preds = %25, %16, %117, %128
  %130 = add i32 %13, -1
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %12

132:                                              ; preds = %129
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Bt3_MatchFinder_GetMatches(%struct._CMatchFinder*, i32*) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %310

19:                                               ; preds = %6
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %310

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %22, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = xor i32 %26, %29
  %31 = and i32 %30, 1023
  %32 = getelementptr inbounds i8, i8* %22, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = xor i32 %35, %30
  %37 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  %38 = load i32, i32* %37, align 8
  %39 = and i32 %36, %38
  %40 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = zext i32 %31 to i64
  %45 = getelementptr inbounds i32, i32* %41, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = sub i32 %43, %46
  %48 = add i32 %39, 1024
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %41, i64 %49
  %51 = load i32, i32* %50, align 4
  store i32 %43, i32* %45, align 4
  store i32 %43, i32* %50, align 4
  %52 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %53 = load i32, i32* %52, align 4
  %54 = icmp ult i32 %47, %53
  br i1 %54, label %55, label %180

55:                                               ; preds = %20
  %56 = zext i32 %47 to i64
  %57 = sub nsw i64 0, %56
  %58 = getelementptr inbounds i8, i8* %22, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = load i8, i8* %22, align 1
  %61 = icmp eq i8 %59, %60
  br i1 %61, label %62, label %180

62:                                               ; preds = %55
  %63 = zext i32 %4 to i64
  %64 = getelementptr inbounds i8, i8* %22, i64 %63
  br label %65

65:                                               ; preds = %62, %71
  %66 = phi i8* [ %72, %71 ], [ %32, %62 ]
  %67 = getelementptr inbounds i8, i8* %66, i64 %57
  %68 = load i8, i8* %67, align 1
  %69 = load i8, i8* %66, align 1
  %70 = icmp eq i8 %68, %69
  br i1 %70, label %71, label %74

71:                                               ; preds = %65
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  %73 = icmp eq i8* %72, %64
  br i1 %73, label %74, label %65

74:                                               ; preds = %71, %65
  %75 = phi i8* [ %64, %71 ], [ %66, %65 ]
  %76 = ptrtoint i8* %75 to i64
  %77 = ptrtoint i8* %22 to i64
  %78 = sub i64 %76, %77
  %79 = trunc i64 %78 to i32
  store i32 %79, i32* %1, align 4
  %80 = add i32 %47, -1
  %81 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %80, i32* %81, align 4
  %82 = icmp eq i32 %4, %79
  br i1 %82, label %85, label %83

83:                                               ; preds = %74
  %84 = load i32, i32* %52, align 4
  br label %180

85:                                               ; preds = %74
  %86 = load i32, i32* %42, align 8
  %87 = load i8*, i8** %21, align 8
  %88 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %89 = load i32*, i32** %88, align 8
  %90 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %91 = load i32, i32* %90, align 8
  %92 = load i32, i32* %52, align 4
  %93 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %94 = load i32, i32* %93, align 4
  %95 = shl i32 %91, 1
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %89, i64 %96
  %98 = getelementptr inbounds i32, i32* %97, i64 1
  %99 = sub i32 %86, %51
  %100 = icmp ne i32 %94, 0
  %101 = icmp ult i32 %99, %92
  %102 = and i1 %101, %100
  br i1 %102, label %106, label %103

103:                                              ; preds = %156, %85
  %104 = phi i32* [ %98, %85 ], [ %158, %156 ]
  %105 = phi i32* [ %97, %85 ], [ %159, %156 ]
  store i32 0, i32* %105, align 4
  br label %167

106:                                              ; preds = %85, %156
  %107 = phi i32 [ %114, %156 ], [ %94, %85 ]
  %108 = phi i32 [ %163, %156 ], [ %99, %85 ]
  %109 = phi i32 [ %161, %156 ], [ 0, %85 ]
  %110 = phi i32 [ %160, %156 ], [ 0, %85 ]
  %111 = phi i32* [ %159, %156 ], [ %97, %85 ]
  %112 = phi i32* [ %158, %156 ], [ %98, %85 ]
  %113 = phi i32 [ %162, %156 ], [ %51, %85 ]
  %114 = add i32 %107, -1
  %115 = sub i32 %91, %108
  %116 = icmp ult i32 %91, %108
  %117 = select i1 %116, i32 %92, i32 0
  %118 = add i32 %115, %117
  %119 = shl i32 %118, 1
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %89, i64 %120
  %122 = zext i32 %108 to i64
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i8, i8* %87, i64 %123
  %125 = icmp ult i32 %110, %109
  %126 = select i1 %125, i32 %110, i32 %109
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %124, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = getelementptr inbounds i8, i8* %87, i64 %127
  %131 = load i8, i8* %130, align 1
  %132 = icmp eq i8 %129, %131
  br i1 %132, label %133, label %148

133:                                              ; preds = %106, %137
  %134 = phi i32 [ %135, %137 ], [ %126, %106 ]
  %135 = add i32 %134, 1
  %136 = icmp eq i32 %135, %4
  br i1 %136, label %144, label %137

137:                                              ; preds = %133
  %138 = zext i32 %135 to i64
  %139 = getelementptr inbounds i8, i8* %124, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = getelementptr inbounds i8, i8* %87, i64 %138
  %142 = load i8, i8* %141, align 1
  %143 = icmp eq i8 %140, %142
  br i1 %143, label %133, label %148

144:                                              ; preds = %133
  %145 = load i32, i32* %121, align 4
  store i32 %145, i32* %111, align 4
  %146 = getelementptr inbounds i32, i32* %121, i64 1
  %147 = load i32, i32* %146, align 4
  br label %167

148:                                              ; preds = %137, %106
  %149 = phi i8 [ %131, %106 ], [ %142, %137 ]
  %150 = phi i8 [ %129, %106 ], [ %140, %137 ]
  %151 = phi i32 [ %126, %106 ], [ %135, %137 ]
  %152 = icmp ult i8 %150, %149
  br i1 %152, label %153, label %155

153:                                              ; preds = %148
  store i32 %113, i32* %111, align 4
  %154 = getelementptr inbounds i32, i32* %121, i64 1
  br label %156

155:                                              ; preds = %148
  store i32 %113, i32* %112, align 4
  br label %156

156:                                              ; preds = %155, %153
  %157 = phi i32* [ %154, %153 ], [ %121, %155 ]
  %158 = phi i32* [ %112, %153 ], [ %121, %155 ]
  %159 = phi i32* [ %154, %153 ], [ %111, %155 ]
  %160 = phi i32 [ %110, %153 ], [ %151, %155 ]
  %161 = phi i32 [ %151, %153 ], [ %109, %155 ]
  %162 = load i32, i32* %157, align 4
  %163 = sub i32 %86, %162
  %164 = icmp ne i32 %114, 0
  %165 = icmp ult i32 %163, %92
  %166 = and i1 %164, %165
  br i1 %166, label %106, label %103

167:                                              ; preds = %103, %144
  %168 = phi i32* [ %104, %103 ], [ %112, %144 ]
  %169 = phi i32 [ 0, %103 ], [ %147, %144 ]
  store i32 %169, i32* %168, align 4
  %170 = load i32, i32* %90, align 8
  %171 = add i32 %170, 1
  store i32 %171, i32* %90, align 8
  %172 = load i8*, i8** %21, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 1
  store i8* %173, i8** %21, align 8
  %174 = load i32, i32* %42, align 8
  %175 = add i32 %174, 1
  store i32 %175, i32* %42, align 8
  %176 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %177 = load i32, i32* %176, align 4
  %178 = icmp eq i32 %175, %177
  br i1 %178, label %179, label %310

179:                                              ; preds = %167
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %310

180:                                              ; preds = %83, %55, %20
  %181 = phi i32 [ %84, %83 ], [ %53, %55 ], [ %53, %20 ]
  %182 = phi i32 [ %79, %83 ], [ 2, %55 ], [ 2, %20 ]
  %183 = phi i64 [ 2, %83 ], [ 0, %55 ], [ 0, %20 ]
  %184 = load i32, i32* %42, align 8
  %185 = load i8*, i8** %21, align 8
  %186 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %187 = load i32*, i32** %186, align 8
  %188 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %189 = load i32, i32* %188, align 8
  %190 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds i32, i32* %1, i64 %183
  %193 = shl i32 %189, 1
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds i32, i32* %187, i64 %194
  %196 = getelementptr inbounds i32, i32* %195, i64 1
  %197 = sub i32 %184, %51
  %198 = icmp ne i32 %191, 0
  %199 = icmp ult i32 %197, %181
  %200 = and i1 %199, %198
  br i1 %200, label %205, label %201

201:                                              ; preds = %280, %180
  %202 = phi i32* [ %192, %180 ], [ %268, %280 ]
  %203 = phi i32* [ %196, %180 ], [ %282, %280 ]
  %204 = phi i32* [ %195, %180 ], [ %283, %280 ]
  store i32 0, i32* %204, align 4
  br label %291

205:                                              ; preds = %180, %280
  %206 = phi i32 [ %215, %280 ], [ %191, %180 ]
  %207 = phi i32 [ %287, %280 ], [ %197, %180 ]
  %208 = phi i32 [ %285, %280 ], [ 0, %180 ]
  %209 = phi i32 [ %284, %280 ], [ 0, %180 ]
  %210 = phi i32* [ %283, %280 ], [ %195, %180 ]
  %211 = phi i32* [ %282, %280 ], [ %196, %180 ]
  %212 = phi i32 [ %269, %280 ], [ %182, %180 ]
  %213 = phi i32* [ %268, %280 ], [ %192, %180 ]
  %214 = phi i32 [ %286, %280 ], [ %51, %180 ]
  %215 = add i32 %206, -1
  %216 = sub i32 %189, %207
  %217 = icmp ult i32 %189, %207
  %218 = select i1 %217, i32 %181, i32 0
  %219 = add i32 %216, %218
  %220 = shl i32 %219, 1
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i32, i32* %187, i64 %221
  %223 = zext i32 %207 to i64
  %224 = sub nsw i64 0, %223
  %225 = getelementptr inbounds i8, i8* %185, i64 %224
  %226 = icmp ult i32 %209, %208
  %227 = select i1 %226, i32 %209, i32 %208
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %225, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = getelementptr inbounds i8, i8* %185, i64 %228
  %232 = load i8, i8* %231, align 1
  %233 = icmp eq i8 %230, %232
  br i1 %233, label %234, label %267

234:                                              ; preds = %205
  %235 = add i32 %227, 1
  %236 = icmp eq i32 %235, %4
  br i1 %236, label %255, label %237

237:                                              ; preds = %234
  %238 = zext i32 %235 to i64
  %239 = getelementptr inbounds i8, i8* %225, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = getelementptr inbounds i8, i8* %185, i64 %238
  %242 = load i8, i8* %241, align 1
  %243 = icmp eq i8 %240, %242
  br i1 %243, label %244, label %255

244:                                              ; preds = %237, %248
  %245 = phi i32 [ %246, %248 ], [ %235, %237 ]
  %246 = add i32 %245, 1
  %247 = icmp eq i32 %246, %4
  br i1 %247, label %255, label %248

248:                                              ; preds = %244
  %249 = zext i32 %246 to i64
  %250 = getelementptr inbounds i8, i8* %225, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = getelementptr inbounds i8, i8* %185, i64 %249
  %253 = load i8, i8* %252, align 1
  %254 = icmp eq i8 %251, %253
  br i1 %254, label %244, label %255

255:                                              ; preds = %248, %244, %237, %234
  %256 = phi i32 [ %235, %237 ], [ %4, %234 ], [ %4, %244 ], [ %246, %248 ]
  %257 = icmp ult i32 %212, %256
  br i1 %257, label %258, label %267

258:                                              ; preds = %255
  %259 = getelementptr inbounds i32, i32* %213, i64 1
  store i32 %256, i32* %213, align 4
  %260 = add i32 %207, -1
  %261 = getelementptr inbounds i32, i32* %213, i64 2
  store i32 %260, i32* %259, align 4
  %262 = icmp eq i32 %256, %4
  br i1 %262, label %263, label %267

263:                                              ; preds = %258
  %264 = load i32, i32* %222, align 4
  store i32 %264, i32* %210, align 4
  %265 = getelementptr inbounds i32, i32* %222, i64 1
  %266 = load i32, i32* %265, align 4
  br label %291

267:                                              ; preds = %258, %255, %205
  %268 = phi i32* [ %261, %258 ], [ %213, %255 ], [ %213, %205 ]
  %269 = phi i32 [ %256, %258 ], [ %212, %255 ], [ %212, %205 ]
  %270 = phi i32 [ %256, %258 ], [ %256, %255 ], [ %227, %205 ]
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %225, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = getelementptr inbounds i8, i8* %185, i64 %271
  %275 = load i8, i8* %274, align 1
  %276 = icmp ult i8 %273, %275
  br i1 %276, label %277, label %279

277:                                              ; preds = %267
  store i32 %214, i32* %210, align 4
  %278 = getelementptr inbounds i32, i32* %222, i64 1
  br label %280

279:                                              ; preds = %267
  store i32 %214, i32* %211, align 4
  br label %280

280:                                              ; preds = %279, %277
  %281 = phi i32* [ %278, %277 ], [ %222, %279 ]
  %282 = phi i32* [ %211, %277 ], [ %222, %279 ]
  %283 = phi i32* [ %278, %277 ], [ %210, %279 ]
  %284 = phi i32 [ %209, %277 ], [ %270, %279 ]
  %285 = phi i32 [ %270, %277 ], [ %208, %279 ]
  %286 = load i32, i32* %281, align 4
  %287 = sub i32 %184, %286
  %288 = icmp ne i32 %215, 0
  %289 = icmp ult i32 %287, %181
  %290 = and i1 %288, %289
  br i1 %290, label %205, label %201

291:                                              ; preds = %201, %263
  %292 = phi i32* [ %203, %201 ], [ %211, %263 ]
  %293 = phi i32 [ 0, %201 ], [ %266, %263 ]
  %294 = phi i32* [ %202, %201 ], [ %261, %263 ]
  store i32 %293, i32* %292, align 4
  %295 = ptrtoint i32* %294 to i64
  %296 = ptrtoint i32* %1 to i64
  %297 = sub i64 %295, %296
  %298 = lshr exact i64 %297, 2
  %299 = trunc i64 %298 to i32
  %300 = load i32, i32* %188, align 8
  %301 = add i32 %300, 1
  store i32 %301, i32* %188, align 8
  %302 = load i8*, i8** %21, align 8
  %303 = getelementptr inbounds i8, i8* %302, i64 1
  store i8* %303, i8** %21, align 8
  %304 = load i32, i32* %42, align 8
  %305 = add i32 %304, 1
  store i32 %305, i32* %42, align 8
  %306 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %307 = load i32, i32* %306, align 4
  %308 = icmp eq i32 %305, %307
  br i1 %308, label %309, label %310

309:                                              ; preds = %291
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %310

310:                                              ; preds = %19, %6, %291, %309, %167, %179
  %311 = phi i32 [ 2, %179 ], [ 2, %167 ], [ %299, %309 ], [ %299, %291 ], [ 0, %6 ], [ 0, %19 ]
  ret i32 %311
}

; Function Attrs: nounwind ssp uwtable
define internal void @Bt3_MatchFinder_Skip(%struct._CMatchFinder*, i32) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %11 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %12 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  br label %13

13:                                               ; preds = %143, %2
  %14 = phi i32 [ %1, %2 ], [ %144, %143 ]
  %15 = load i32, i32* %3, align 4
  %16 = icmp ult i32 %15, 3
  br i1 %16, label %17, label %27

17:                                               ; preds = %13
  %18 = load i32, i32* %9, align 8
  %19 = add i32 %18, 1
  store i32 %19, i32* %9, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %4, align 8
  %22 = load i32, i32* %7, align 8
  %23 = add i32 %22, 1
  store i32 %23, i32* %7, align 8
  %24 = load i32, i32* %12, align 4
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %143

26:                                               ; preds = %17
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %143

27:                                               ; preds = %13
  %28 = load i8*, i8** %4, align 8
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i8, i8* %28, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = xor i32 %32, %35
  %37 = and i32 %36, 1023
  %38 = getelementptr inbounds i8, i8* %28, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = xor i32 %41, %36
  %43 = load i32, i32* %5, align 8
  %44 = and i32 %42, %43
  %45 = load i32*, i32** %6, align 8
  %46 = add i32 %44, 1024
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %45, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = load i32, i32* %7, align 8
  store i32 %50, i32* %48, align 4
  %51 = zext i32 %37 to i64
  %52 = getelementptr inbounds i32, i32* %45, i64 %51
  store i32 %50, i32* %52, align 4
  %53 = load i32, i32* %7, align 8
  %54 = load i8*, i8** %4, align 8
  %55 = load i32*, i32** %8, align 8
  %56 = load i32, i32* %9, align 8
  %57 = load i32, i32* %10, align 4
  %58 = load i32, i32* %11, align 4
  %59 = shl i32 %56, 1
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %55, i64 %60
  %62 = getelementptr inbounds i32, i32* %61, i64 1
  %63 = sub i32 %53, %49
  %64 = icmp ne i32 %58, 0
  %65 = icmp ult i32 %63, %57
  %66 = and i1 %65, %64
  br i1 %66, label %70, label %67

67:                                               ; preds = %120, %27
  %68 = phi i32* [ %62, %27 ], [ %122, %120 ]
  %69 = phi i32* [ %61, %27 ], [ %123, %120 ]
  store i32 0, i32* %69, align 4
  br label %131

70:                                               ; preds = %27, %120
  %71 = phi i32 [ %78, %120 ], [ %58, %27 ]
  %72 = phi i32 [ %127, %120 ], [ %63, %27 ]
  %73 = phi i32 [ %125, %120 ], [ 0, %27 ]
  %74 = phi i32 [ %124, %120 ], [ 0, %27 ]
  %75 = phi i32* [ %123, %120 ], [ %61, %27 ]
  %76 = phi i32* [ %122, %120 ], [ %62, %27 ]
  %77 = phi i32 [ %126, %120 ], [ %49, %27 ]
  %78 = add i32 %71, -1
  %79 = sub i32 %56, %72
  %80 = icmp ult i32 %56, %72
  %81 = select i1 %80, i32 %57, i32 0
  %82 = add i32 %79, %81
  %83 = shl i32 %82, 1
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %55, i64 %84
  %86 = zext i32 %72 to i64
  %87 = sub nsw i64 0, %86
  %88 = getelementptr inbounds i8, i8* %54, i64 %87
  %89 = icmp ult i32 %74, %73
  %90 = select i1 %89, i32 %74, i32 %73
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %88, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %54, i64 %91
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %93, %95
  br i1 %96, label %97, label %112

97:                                               ; preds = %70, %101
  %98 = phi i32 [ %99, %101 ], [ %90, %70 ]
  %99 = add i32 %98, 1
  %100 = icmp eq i32 %99, %15
  br i1 %100, label %108, label %101

101:                                              ; preds = %97
  %102 = zext i32 %99 to i64
  %103 = getelementptr inbounds i8, i8* %88, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds i8, i8* %54, i64 %102
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %104, %106
  br i1 %107, label %97, label %112

108:                                              ; preds = %97
  %109 = load i32, i32* %85, align 4
  store i32 %109, i32* %75, align 4
  %110 = getelementptr inbounds i32, i32* %85, i64 1
  %111 = load i32, i32* %110, align 4
  br label %131

112:                                              ; preds = %101, %70
  %113 = phi i8 [ %95, %70 ], [ %106, %101 ]
  %114 = phi i8 [ %93, %70 ], [ %104, %101 ]
  %115 = phi i32 [ %90, %70 ], [ %99, %101 ]
  %116 = icmp ult i8 %114, %113
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  store i32 %77, i32* %75, align 4
  %118 = getelementptr inbounds i32, i32* %85, i64 1
  br label %120

119:                                              ; preds = %112
  store i32 %77, i32* %76, align 4
  br label %120

120:                                              ; preds = %119, %117
  %121 = phi i32* [ %118, %117 ], [ %85, %119 ]
  %122 = phi i32* [ %76, %117 ], [ %85, %119 ]
  %123 = phi i32* [ %118, %117 ], [ %75, %119 ]
  %124 = phi i32 [ %74, %117 ], [ %115, %119 ]
  %125 = phi i32 [ %115, %117 ], [ %73, %119 ]
  %126 = load i32, i32* %121, align 4
  %127 = sub i32 %53, %126
  %128 = icmp ne i32 %78, 0
  %129 = icmp ult i32 %127, %57
  %130 = and i1 %128, %129
  br i1 %130, label %70, label %67

131:                                              ; preds = %67, %108
  %132 = phi i32* [ %68, %67 ], [ %76, %108 ]
  %133 = phi i32 [ 0, %67 ], [ %111, %108 ]
  store i32 %133, i32* %132, align 4
  %134 = load i32, i32* %9, align 8
  %135 = add i32 %134, 1
  store i32 %135, i32* %9, align 8
  %136 = load i8*, i8** %4, align 8
  %137 = getelementptr inbounds i8, i8* %136, i64 1
  store i8* %137, i8** %4, align 8
  %138 = load i32, i32* %7, align 8
  %139 = add i32 %138, 1
  store i32 %139, i32* %7, align 8
  %140 = load i32, i32* %12, align 4
  %141 = icmp eq i32 %139, %140
  br i1 %141, label %142, label %143

142:                                              ; preds = %131
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %143

143:                                              ; preds = %26, %17, %131, %142
  %144 = add i32 %14, -1
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %13

146:                                              ; preds = %143
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Bt4_MatchFinder_GetMatches(%struct._CMatchFinder*, i32*) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 4
  br i1 %5, label %6, label %20

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %12, i8** %10, align 8
  %13 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, 1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %359

19:                                               ; preds = %6
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %359

20:                                               ; preds = %2
  %21 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %24
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %22, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = xor i32 %26, %29
  %31 = and i32 %30, 1023
  %32 = getelementptr inbounds i8, i8* %22, i64 2
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 8
  %36 = xor i32 %35, %30
  %37 = and i32 %36, 65535
  %38 = getelementptr inbounds i8, i8* %22, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = shl i32 %42, 5
  %44 = xor i32 %36, %43
  %45 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %44, %46
  %48 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = zext i32 %31 to i64
  %53 = getelementptr inbounds i32, i32* %49, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sub i32 %51, %54
  %56 = add nuw nsw i32 %37, 1024
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %49, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 %51, %59
  %61 = add i32 %47, 66560
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %49, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %51, i32* %53, align 4
  store i32 %51, i32* %58, align 4
  store i32 %51, i32* %63, align 4
  %65 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %66 = load i32, i32* %65, align 4
  %67 = icmp ult i32 %55, %66
  br i1 %67, label %68, label %78

68:                                               ; preds = %20
  %69 = zext i32 %55 to i64
  %70 = sub nsw i64 0, %69
  %71 = getelementptr inbounds i8, i8* %22, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = load i8, i8* %22, align 1
  %74 = icmp eq i8 %72, %73
  br i1 %74, label %75, label %78

75:                                               ; preds = %68
  store i32 2, i32* %1, align 4
  %76 = add i32 %55, -1
  %77 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %76, i32* %77, align 4
  br label %78

78:                                               ; preds = %75, %68, %20
  %79 = phi i32 [ 2, %75 ], [ 0, %68 ], [ 0, %20 ]
  %80 = icmp eq i32 %55, %60
  br i1 %80, label %97, label %81

81:                                               ; preds = %78
  %82 = load i32, i32* %65, align 4
  %83 = icmp ult i32 %60, %82
  br i1 %83, label %84, label %97

84:                                               ; preds = %81
  %85 = zext i32 %60 to i64
  %86 = sub nsw i64 0, %85
  %87 = getelementptr inbounds i8, i8* %22, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = load i8, i8* %22, align 1
  %90 = icmp eq i8 %88, %89
  br i1 %90, label %91, label %97

91:                                               ; preds = %84
  %92 = add i32 %60, -1
  %93 = or i32 %79, 1
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %1, i64 %94
  store i32 %92, i32* %95, align 4
  %96 = add nuw nsw i32 %79, 2
  br label %102

97:                                               ; preds = %78, %84, %81
  %98 = icmp eq i32 %79, 0
  br i1 %98, label %225, label %99

99:                                               ; preds = %97
  %100 = zext i32 %55 to i64
  %101 = sub nsw i64 0, %100
  br label %102

102:                                              ; preds = %99, %91
  %103 = phi i64 [ %101, %99 ], [ %86, %91 ]
  %104 = phi i32 [ %79, %99 ], [ %96, %91 ]
  %105 = phi i32 [ %79, %99 ], [ 3, %91 ]
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %22, i64 %106
  %108 = zext i32 %4 to i64
  %109 = getelementptr inbounds i8, i8* %22, i64 %108
  %110 = icmp eq i32 %105, %4
  br i1 %110, label %120, label %111

111:                                              ; preds = %102, %117
  %112 = phi i8* [ %118, %117 ], [ %107, %102 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 %103
  %114 = load i8, i8* %113, align 1
  %115 = load i8, i8* %112, align 1
  %116 = icmp eq i8 %114, %115
  br i1 %116, label %117, label %120

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %112, i64 1
  %119 = icmp eq i8* %118, %109
  br i1 %119, label %120, label %111

120:                                              ; preds = %117, %111, %102
  %121 = phi i8* [ %107, %102 ], [ %112, %111 ], [ %109, %117 ]
  %122 = ptrtoint i8* %121 to i64
  %123 = ptrtoint i8* %22 to i64
  %124 = sub i64 %122, %123
  %125 = trunc i64 %124 to i32
  %126 = add nsw i32 %104, -2
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %1, i64 %127
  store i32 %125, i32* %128, align 4
  %129 = icmp eq i32 %4, %125
  br i1 %129, label %130, label %225

130:                                              ; preds = %120
  %131 = load i32, i32* %50, align 8
  %132 = load i8*, i8** %21, align 8
  %133 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %134 = load i32*, i32** %133, align 8
  %135 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %136 = load i32, i32* %135, align 8
  %137 = load i32, i32* %65, align 4
  %138 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %139 = load i32, i32* %138, align 4
  %140 = shl i32 %136, 1
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %134, i64 %141
  %143 = getelementptr inbounds i32, i32* %142, i64 1
  %144 = sub i32 %131, %64
  %145 = icmp ne i32 %139, 0
  %146 = icmp ult i32 %144, %137
  %147 = and i1 %146, %145
  br i1 %147, label %151, label %148

148:                                              ; preds = %201, %130
  %149 = phi i32* [ %143, %130 ], [ %203, %201 ]
  %150 = phi i32* [ %142, %130 ], [ %204, %201 ]
  store i32 0, i32* %150, align 4
  br label %212

151:                                              ; preds = %130, %201
  %152 = phi i32 [ %159, %201 ], [ %139, %130 ]
  %153 = phi i32 [ %208, %201 ], [ %144, %130 ]
  %154 = phi i32 [ %206, %201 ], [ 0, %130 ]
  %155 = phi i32 [ %205, %201 ], [ 0, %130 ]
  %156 = phi i32* [ %204, %201 ], [ %142, %130 ]
  %157 = phi i32* [ %203, %201 ], [ %143, %130 ]
  %158 = phi i32 [ %207, %201 ], [ %64, %130 ]
  %159 = add i32 %152, -1
  %160 = sub i32 %136, %153
  %161 = icmp ult i32 %136, %153
  %162 = select i1 %161, i32 %137, i32 0
  %163 = add i32 %160, %162
  %164 = shl i32 %163, 1
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i32, i32* %134, i64 %165
  %167 = zext i32 %153 to i64
  %168 = sub nsw i64 0, %167
  %169 = getelementptr inbounds i8, i8* %132, i64 %168
  %170 = icmp ult i32 %155, %154
  %171 = select i1 %170, i32 %155, i32 %154
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %169, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = getelementptr inbounds i8, i8* %132, i64 %172
  %176 = load i8, i8* %175, align 1
  %177 = icmp eq i8 %174, %176
  br i1 %177, label %178, label %193

178:                                              ; preds = %151, %182
  %179 = phi i32 [ %180, %182 ], [ %171, %151 ]
  %180 = add i32 %179, 1
  %181 = icmp eq i32 %180, %4
  br i1 %181, label %189, label %182

182:                                              ; preds = %178
  %183 = zext i32 %180 to i64
  %184 = getelementptr inbounds i8, i8* %169, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = getelementptr inbounds i8, i8* %132, i64 %183
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %185, %187
  br i1 %188, label %178, label %193

189:                                              ; preds = %178
  %190 = load i32, i32* %166, align 4
  store i32 %190, i32* %156, align 4
  %191 = getelementptr inbounds i32, i32* %166, i64 1
  %192 = load i32, i32* %191, align 4
  br label %212

193:                                              ; preds = %182, %151
  %194 = phi i8 [ %176, %151 ], [ %187, %182 ]
  %195 = phi i8 [ %174, %151 ], [ %185, %182 ]
  %196 = phi i32 [ %171, %151 ], [ %180, %182 ]
  %197 = icmp ult i8 %195, %194
  br i1 %197, label %198, label %200

198:                                              ; preds = %193
  store i32 %158, i32* %156, align 4
  %199 = getelementptr inbounds i32, i32* %166, i64 1
  br label %201

200:                                              ; preds = %193
  store i32 %158, i32* %157, align 4
  br label %201

201:                                              ; preds = %200, %198
  %202 = phi i32* [ %199, %198 ], [ %166, %200 ]
  %203 = phi i32* [ %157, %198 ], [ %166, %200 ]
  %204 = phi i32* [ %199, %198 ], [ %156, %200 ]
  %205 = phi i32 [ %155, %198 ], [ %196, %200 ]
  %206 = phi i32 [ %196, %198 ], [ %154, %200 ]
  %207 = load i32, i32* %202, align 4
  %208 = sub i32 %131, %207
  %209 = icmp ne i32 %159, 0
  %210 = icmp ult i32 %208, %137
  %211 = and i1 %209, %210
  br i1 %211, label %151, label %148

212:                                              ; preds = %148, %189
  %213 = phi i32* [ %149, %148 ], [ %157, %189 ]
  %214 = phi i32 [ 0, %148 ], [ %192, %189 ]
  store i32 %214, i32* %213, align 4
  %215 = load i32, i32* %135, align 8
  %216 = add i32 %215, 1
  store i32 %216, i32* %135, align 8
  %217 = load i8*, i8** %21, align 8
  %218 = getelementptr inbounds i8, i8* %217, i64 1
  store i8* %218, i8** %21, align 8
  %219 = load i32, i32* %50, align 8
  %220 = add i32 %219, 1
  store i32 %220, i32* %50, align 8
  %221 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %222 = load i32, i32* %221, align 4
  %223 = icmp eq i32 %220, %222
  br i1 %223, label %224, label %359

224:                                              ; preds = %212
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %359

225:                                              ; preds = %97, %120
  %226 = phi i32 [ %104, %120 ], [ 0, %97 ]
  %227 = phi i32 [ %125, %120 ], [ 0, %97 ]
  %228 = load i32, i32* %50, align 8
  %229 = load i8*, i8** %21, align 8
  %230 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %231 = load i32*, i32** %230, align 8
  %232 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %233 = load i32, i32* %232, align 8
  %234 = load i32, i32* %65, align 4
  %235 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %236 = load i32, i32* %235, align 4
  %237 = zext i32 %226 to i64
  %238 = getelementptr inbounds i32, i32* %1, i64 %237
  %239 = shl i32 %233, 1
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i32, i32* %231, i64 %240
  %242 = getelementptr inbounds i32, i32* %241, i64 1
  %243 = sub i32 %228, %64
  %244 = icmp ne i32 %236, 0
  %245 = icmp ult i32 %243, %234
  %246 = and i1 %245, %244
  br i1 %246, label %247, label %250

247:                                              ; preds = %225
  %248 = icmp ugt i32 %227, 3
  %249 = select i1 %248, i32 %227, i32 3
  br label %254

250:                                              ; preds = %329, %225
  %251 = phi i32* [ %238, %225 ], [ %317, %329 ]
  %252 = phi i32* [ %242, %225 ], [ %331, %329 ]
  %253 = phi i32* [ %241, %225 ], [ %332, %329 ]
  store i32 0, i32* %253, align 4
  br label %340

254:                                              ; preds = %247, %329
  %255 = phi i32 [ %264, %329 ], [ %236, %247 ]
  %256 = phi i32 [ %336, %329 ], [ %243, %247 ]
  %257 = phi i32 [ %334, %329 ], [ 0, %247 ]
  %258 = phi i32 [ %333, %329 ], [ 0, %247 ]
  %259 = phi i32* [ %332, %329 ], [ %241, %247 ]
  %260 = phi i32* [ %331, %329 ], [ %242, %247 ]
  %261 = phi i32 [ %318, %329 ], [ %249, %247 ]
  %262 = phi i32* [ %317, %329 ], [ %238, %247 ]
  %263 = phi i32 [ %335, %329 ], [ %64, %247 ]
  %264 = add i32 %255, -1
  %265 = sub i32 %233, %256
  %266 = icmp ult i32 %233, %256
  %267 = select i1 %266, i32 %234, i32 0
  %268 = add i32 %265, %267
  %269 = shl i32 %268, 1
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i32, i32* %231, i64 %270
  %272 = zext i32 %256 to i64
  %273 = sub nsw i64 0, %272
  %274 = getelementptr inbounds i8, i8* %229, i64 %273
  %275 = icmp ult i32 %258, %257
  %276 = select i1 %275, i32 %258, i32 %257
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %274, i64 %277
  %279 = load i8, i8* %278, align 1
  %280 = getelementptr inbounds i8, i8* %229, i64 %277
  %281 = load i8, i8* %280, align 1
  %282 = icmp eq i8 %279, %281
  br i1 %282, label %283, label %316

283:                                              ; preds = %254
  %284 = add i32 %276, 1
  %285 = icmp eq i32 %284, %4
  br i1 %285, label %304, label %286

286:                                              ; preds = %283
  %287 = zext i32 %284 to i64
  %288 = getelementptr inbounds i8, i8* %274, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = getelementptr inbounds i8, i8* %229, i64 %287
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %289, %291
  br i1 %292, label %293, label %304

293:                                              ; preds = %286, %297
  %294 = phi i32 [ %295, %297 ], [ %284, %286 ]
  %295 = add i32 %294, 1
  %296 = icmp eq i32 %295, %4
  br i1 %296, label %304, label %297

297:                                              ; preds = %293
  %298 = zext i32 %295 to i64
  %299 = getelementptr inbounds i8, i8* %274, i64 %298
  %300 = load i8, i8* %299, align 1
  %301 = getelementptr inbounds i8, i8* %229, i64 %298
  %302 = load i8, i8* %301, align 1
  %303 = icmp eq i8 %300, %302
  br i1 %303, label %293, label %304

304:                                              ; preds = %297, %293, %286, %283
  %305 = phi i32 [ %284, %286 ], [ %4, %283 ], [ %4, %293 ], [ %295, %297 ]
  %306 = icmp ult i32 %261, %305
  br i1 %306, label %307, label %316

307:                                              ; preds = %304
  %308 = getelementptr inbounds i32, i32* %262, i64 1
  store i32 %305, i32* %262, align 4
  %309 = add i32 %256, -1
  %310 = getelementptr inbounds i32, i32* %262, i64 2
  store i32 %309, i32* %308, align 4
  %311 = icmp eq i32 %305, %4
  br i1 %311, label %312, label %316

312:                                              ; preds = %307
  %313 = load i32, i32* %271, align 4
  store i32 %313, i32* %259, align 4
  %314 = getelementptr inbounds i32, i32* %271, i64 1
  %315 = load i32, i32* %314, align 4
  br label %340

316:                                              ; preds = %307, %304, %254
  %317 = phi i32* [ %310, %307 ], [ %262, %304 ], [ %262, %254 ]
  %318 = phi i32 [ %305, %307 ], [ %261, %304 ], [ %261, %254 ]
  %319 = phi i32 [ %305, %307 ], [ %305, %304 ], [ %276, %254 ]
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds i8, i8* %274, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = getelementptr inbounds i8, i8* %229, i64 %320
  %324 = load i8, i8* %323, align 1
  %325 = icmp ult i8 %322, %324
  br i1 %325, label %326, label %328

326:                                              ; preds = %316
  store i32 %263, i32* %259, align 4
  %327 = getelementptr inbounds i32, i32* %271, i64 1
  br label %329

328:                                              ; preds = %316
  store i32 %263, i32* %260, align 4
  br label %329

329:                                              ; preds = %328, %326
  %330 = phi i32* [ %327, %326 ], [ %271, %328 ]
  %331 = phi i32* [ %260, %326 ], [ %271, %328 ]
  %332 = phi i32* [ %327, %326 ], [ %259, %328 ]
  %333 = phi i32 [ %258, %326 ], [ %319, %328 ]
  %334 = phi i32 [ %319, %326 ], [ %257, %328 ]
  %335 = load i32, i32* %330, align 4
  %336 = sub i32 %228, %335
  %337 = icmp ne i32 %264, 0
  %338 = icmp ult i32 %336, %234
  %339 = and i1 %337, %338
  br i1 %339, label %254, label %250

340:                                              ; preds = %250, %312
  %341 = phi i32* [ %252, %250 ], [ %260, %312 ]
  %342 = phi i32 [ 0, %250 ], [ %315, %312 ]
  %343 = phi i32* [ %251, %250 ], [ %310, %312 ]
  store i32 %342, i32* %341, align 4
  %344 = ptrtoint i32* %343 to i64
  %345 = ptrtoint i32* %1 to i64
  %346 = sub i64 %344, %345
  %347 = lshr exact i64 %346, 2
  %348 = trunc i64 %347 to i32
  %349 = load i32, i32* %232, align 8
  %350 = add i32 %349, 1
  store i32 %350, i32* %232, align 8
  %351 = load i8*, i8** %21, align 8
  %352 = getelementptr inbounds i8, i8* %351, i64 1
  store i8* %352, i8** %21, align 8
  %353 = load i32, i32* %50, align 8
  %354 = add i32 %353, 1
  store i32 %354, i32* %50, align 8
  %355 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  %356 = load i32, i32* %355, align 4
  %357 = icmp eq i32 %354, %356
  br i1 %357, label %358, label %359

358:                                              ; preds = %340
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %359

359:                                              ; preds = %19, %6, %340, %358, %212, %224
  %360 = phi i32 [ %104, %224 ], [ %104, %212 ], [ %348, %358 ], [ %348, %340 ], [ 0, %6 ], [ 0, %19 ]
  ret i32 %360
}

; Function Attrs: nounwind ssp uwtable
define internal void @Bt4_MatchFinder_Skip(%struct._CMatchFinder*, i32) #2 {
  %3 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 4
  %4 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 14
  %6 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 12
  %7 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 13
  %9 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 5
  %10 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 6
  %11 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 15
  %12 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 2
  br label %13

13:                                               ; preds = %154, %2
  %14 = phi i32 [ %1, %2 ], [ %155, %154 ]
  %15 = load i32, i32* %3, align 4
  %16 = icmp ult i32 %15, 4
  br i1 %16, label %17, label %27

17:                                               ; preds = %13
  %18 = load i32, i32* %9, align 8
  %19 = add i32 %18, 1
  store i32 %19, i32* %9, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  store i8* %21, i8** %4, align 8
  %22 = load i32, i32* %7, align 8
  %23 = add i32 %22, 1
  store i32 %23, i32* %7, align 8
  %24 = load i32, i32* %12, align 4
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %154

26:                                               ; preds = %17
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0) #6
  br label %154

27:                                               ; preds = %13
  %28 = load i8*, i8** %4, align 8
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i8, i8* %28, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = xor i32 %32, %35
  %37 = and i32 %36, 1023
  %38 = getelementptr inbounds i8, i8* %28, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = xor i32 %41, %36
  %43 = and i32 %42, 65535
  %44 = getelementptr inbounds i8, i8* %28, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds %struct._CMatchFinder, %struct._CMatchFinder* %0, i64 0, i32 27, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = shl i32 %48, 5
  %50 = xor i32 %42, %49
  %51 = load i32, i32* %5, align 8
  %52 = and i32 %50, %51
  %53 = load i32*, i32** %6, align 8
  %54 = add i32 %52, 66560
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %53, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = load i32, i32* %7, align 8
  store i32 %58, i32* %56, align 4
  %59 = add nuw nsw i32 %43, 1024
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %53, i64 %60
  store i32 %58, i32* %61, align 4
  %62 = zext i32 %37 to i64
  %63 = getelementptr inbounds i32, i32* %53, i64 %62
  store i32 %58, i32* %63, align 4
  %64 = load i32, i32* %7, align 8
  %65 = load i8*, i8** %4, align 8
  %66 = load i32*, i32** %8, align 8
  %67 = load i32, i32* %9, align 8
  %68 = load i32, i32* %10, align 4
  %69 = load i32, i32* %11, align 4
  %70 = shl i32 %67, 1
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %66, i64 %71
  %73 = getelementptr inbounds i32, i32* %72, i64 1
  %74 = sub i32 %64, %57
  %75 = icmp ne i32 %69, 0
  %76 = icmp ult i32 %74, %68
  %77 = and i1 %76, %75
  br i1 %77, label %81, label %78

78:                                               ; preds = %131, %27
  %79 = phi i32* [ %73, %27 ], [ %133, %131 ]
  %80 = phi i32* [ %72, %27 ], [ %134, %131 ]
  store i32 0, i32* %80, align 4
  br label %142

81:                                               ; preds = %27, %131
  %82 = phi i32 [ %89, %131 ], [ %69, %27 ]
  %83 = phi i32 [ %138, %131 ], [ %74, %27 ]
  %84 = phi i32 [ %136, %131 ], [ 0, %27 ]
  %85 = phi i32 [ %135, %131 ], [ 0, %27 ]
  %86 = phi i32* [ %134, %131 ], [ %72, %27 ]
  %87 = phi i32* [ %133, %131 ], [ %73, %27 ]
  %88 = phi i32 [ %137, %131 ], [ %57, %27 ]
  %89 = add i32 %82, -1
  %90 = sub i32 %67, %83
  %91 = icmp ult i32 %67, %83
  %92 = select i1 %91, i32 %68, i32 0
  %93 = add i32 %90, %92
  %94 = shl i32 %93, 1
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i32, i32* %66, i64 %95
  %97 = zext i32 %83 to i64
  %98 = sub nsw i64 0, %97
  %99 = getelementptr inbounds i8, i8* %65, i64 %98
  %100 = icmp ult i32 %85, %84
  %101 = select i1 %100, i32 %85, i32 %84
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %99, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = getelementptr inbounds i8, i8* %65, i64 %102
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %104, %106
  br i1 %107, label %108, label %123

108:                                              ; preds = %81, %112
  %109 = phi i32 [ %110, %112 ], [ %101, %81 ]
  %110 = add i32 %109, 1
  %111 = icmp eq i32 %110, %15
  br i1 %111, label %119, label %112

112:                                              ; preds = %108
  %113 = zext i32 %110 to i64
  %114 = getelementptr inbounds i8, i8* %99, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = getelementptr inbounds i8, i8* %65, i64 %113
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %115, %117
  br i1 %118, label %108, label %123

119:                                              ; preds = %108
  %120 = load i32, i32* %96, align 4
  store i32 %120, i32* %86, align 4
  %121 = getelementptr inbounds i32, i32* %96, i64 1
  %122 = load i32, i32* %121, align 4
  br label %142

123:                                              ; preds = %112, %81
  %124 = phi i8 [ %106, %81 ], [ %117, %112 ]
  %125 = phi i8 [ %104, %81 ], [ %115, %112 ]
  %126 = phi i32 [ %101, %81 ], [ %110, %112 ]
  %127 = icmp ult i8 %125, %124
  br i1 %127, label %128, label %130

128:                                              ; preds = %123
  store i32 %88, i32* %86, align 4
  %129 = getelementptr inbounds i32, i32* %96, i64 1
  br label %131

130:                                              ; preds = %123
  store i32 %88, i32* %87, align 4
  br label %131

131:                                              ; preds = %130, %128
  %132 = phi i32* [ %129, %128 ], [ %96, %130 ]
  %133 = phi i32* [ %87, %128 ], [ %96, %130 ]
  %134 = phi i32* [ %129, %128 ], [ %86, %130 ]
  %135 = phi i32 [ %85, %128 ], [ %126, %130 ]
  %136 = phi i32 [ %126, %128 ], [ %84, %130 ]
  %137 = load i32, i32* %132, align 4
  %138 = sub i32 %64, %137
  %139 = icmp ne i32 %89, 0
  %140 = icmp ult i32 %138, %68
  %141 = and i1 %139, %140
  br i1 %141, label %81, label %78

142:                                              ; preds = %78, %119
  %143 = phi i32* [ %79, %78 ], [ %87, %119 ]
  %144 = phi i32 [ 0, %78 ], [ %122, %119 ]
  store i32 %144, i32* %143, align 4
  %145 = load i32, i32* %9, align 8
  %146 = add i32 %145, 1
  store i32 %146, i32* %9, align 8
  %147 = load i8*, i8** %4, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %148, i8** %4, align 8
  %149 = load i32, i32* %7, align 8
  %150 = add i32 %149, 1
  store i32 %150, i32* %7, align 8
  %151 = load i32, i32* %12, align 4
  %152 = icmp eq i32 %150, %151
  br i1 %152, label %153, label %154

153:                                              ; preds = %142
  tail call fastcc void @MatchFinder_CheckLimits(%struct._CMatchFinder* %0)
  br label %154

154:                                              ; preds = %26, %17, %142, %153
  %155 = add i32 %14, -1
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %13

157:                                              ; preds = %154
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.usub.sat.v4i32(<4 x i32>, <4 x i32>) #5

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !6, !3}
