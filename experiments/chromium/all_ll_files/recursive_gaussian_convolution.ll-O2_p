; ModuleID = '../../skia/ext/recursive_gaussian_convolution.cc'
source_filename = "../../skia/ext/recursive_gaussian_convolution.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.skia::RecursiveFilter" = type { i32, float, [4 x float] }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN4skia15RecursiveFilterC1EfNS0_5OrderE = hidden unnamed_addr alias void (%"class.skia::RecursiveFilter"*, float, i32), void (%"class.skia::RecursiveFilter"*, float, i32)* @_ZN4skia15RecursiveFilterC2EfNS0_5OrderE

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZN4skia15RecursiveFilter10qFromSigmaEf(float) local_unnamed_addr #0 align 2 {
  %2 = fcmp ugt float %0, 2.500000e+00
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = fmul float %0, 0x3FD135D240000000
  %5 = fsub float 1.000000e+00, %4
  %6 = tail call float @sqrtf(float %5) #8
  %7 = fmul float %6, 0x4010950880000000
  %8 = fsub float 0x400FC5C140000000, %7
  br label %12

9:                                                ; preds = %1
  %10 = fmul float %0, 0x3FEF9667C0000000
  %11 = fadd float %10, 0xBFEED35A80000000
  br label %12

12:                                               ; preds = %9, %3
  %13 = phi float [ %8, %3 ], [ %11, %9 ]
  ret float %13
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4skia15RecursiveFilter19computeCoefficientsEfPf(float, float* nocapture) local_unnamed_addr #1 align 2 {
  %3 = fmul float %0, 0x40038D9400000000
  %4 = fadd float %3, 0x3FF9408320000000
  %5 = fmul float %0, 0x3FF6D97F60000000
  %6 = fmul float %5, %0
  %7 = fadd float %4, %6
  %8 = fmul float %0, 0x3FDB056820000000
  %9 = fmul float %8, %0
  %10 = fmul float %9, %0
  %11 = fadd float %7, %10
  %12 = fmul float %0, 0x400387C840000000
  %13 = fmul float %0, 0x4006D97A20000000
  %14 = fmul float %13, %0
  %15 = fadd float %12, %14
  %16 = fmul float %0, 0x3FF44408E0000000
  %17 = fmul float %16, %0
  %18 = fmul float %17, %0
  %19 = fadd float %15, %18
  %20 = fmul float %0, 0xBFF6D97F60000000
  %21 = fmul float %20, %0
  %22 = fsub float %21, %18
  %23 = fadd float %19, %22
  %24 = fadd float %10, %23
  %25 = fdiv float %24, %11
  %26 = insertelement <4 x float> <float 1.000000e+00, float undef, float undef, float undef>, float %19, i32 1
  %27 = insertelement <4 x float> %26, float %22, i32 2
  %28 = insertelement <4 x float> %27, float %10, i32 3
  %29 = insertelement <2 x float> undef, float %25, i32 0
  %30 = insertelement <2 x float> %29, float %11, i32 1
  %31 = shufflevector <2 x float> %30, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %32 = fsub <4 x float> %28, %31
  %33 = fdiv <4 x float> %28, %31
  %34 = shufflevector <4 x float> %32, <4 x float> %33, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %35 = bitcast float* %1 to <4 x float>*
  store <4 x float> %34, <4 x float>* %35, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN4skia15RecursiveFilterC2EfNS0_5OrderE(%"class.skia::RecursiveFilter"* nocapture, float, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %0, i64 0, i32 0
  store i32 %2, i32* %4, align 4
  %5 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %0, i64 0, i32 1
  %6 = fcmp ugt float %1, 2.500000e+00
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = fmul float %1, 0x3FD135D240000000
  %9 = fsub float 1.000000e+00, %8
  %10 = tail call float @sqrtf(float %9) #8
  %11 = fmul float %10, 0x4010950880000000
  %12 = fsub float 0x400FC5C140000000, %11
  br label %16

13:                                               ; preds = %3
  %14 = fmul float %1, 0x3FEF9667C0000000
  %15 = fadd float %14, 0xBFEED35A80000000
  br label %16

16:                                               ; preds = %7, %13
  %17 = phi float [ %12, %7 ], [ %15, %13 ]
  store float %17, float* %5, align 4
  %18 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %0, i64 0, i32 2, i64 0
  %19 = fmul float %17, 0x40038D9400000000
  %20 = fadd float %19, 0x3FF9408320000000
  %21 = fmul float %17, 0x3FF6D97F60000000
  %22 = fmul float %17, %21
  %23 = fadd float %20, %22
  %24 = fmul float %17, 0x3FDB056820000000
  %25 = fmul float %17, %24
  %26 = fmul float %17, %25
  %27 = fadd float %23, %26
  %28 = fmul float %17, 0x400387C840000000
  %29 = fmul float %17, 0x4006D97A20000000
  %30 = fmul float %17, %29
  %31 = fadd float %28, %30
  %32 = fmul float %17, 0x3FF44408E0000000
  %33 = fmul float %17, %32
  %34 = fmul float %17, %33
  %35 = fadd float %31, %34
  %36 = fmul float %17, 0xBFF6D97F60000000
  %37 = fmul float %17, %36
  %38 = fsub float %37, %34
  %39 = fadd float %35, %38
  %40 = fadd float %26, %39
  %41 = fdiv float %40, %27
  %42 = insertelement <4 x float> <float 1.000000e+00, float undef, float undef, float undef>, float %35, i32 1
  %43 = insertelement <4 x float> %42, float %38, i32 2
  %44 = insertelement <4 x float> %43, float %26, i32 3
  %45 = insertelement <2 x float> undef, float %41, i32 0
  %46 = insertelement <2 x float> %45, float %27, i32 1
  %47 = shufflevector <2 x float> %46, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  %48 = fsub <4 x float> %44, %47
  %49 = fdiv <4 x float> %44, %47
  %50 = shufflevector <4 x float> %48, <4 x float> %49, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %51 = bitcast float* %18 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN4skia31SingleChannelRecursiveGaussianXEPKhiiiRKNS_15RecursiveFilterERK7SkISizePhiiib(i8* nocapture readonly, i32, i32, i32, %"class.skia::RecursiveFilter"* readonly dereferenceable(24), %struct.SkISize* nocapture readonly dereferenceable(8), i8* nocapture, i32, i32, i32, i1 zeroext) local_unnamed_addr #3 {
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %6, i64 %18
  %20 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %4, i64 0, i32 2, i64 0
  %21 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %4, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = tail call fastcc zeroext i8 @_ZN4skia12_GLOBAL__N_128SingleChannelRecursiveFilterEPKhiiiiPhiiPKfNS_15RecursiveFilter5OrderEb(i8* %13, i32 %3, i32 %1, i32 %15, i32 %17, i8* %19, i32 %9, i32 %7, float* %20, i32 %22, i1 zeroext %10)
  ret i8 %23
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i8 @_ZN4skia12_GLOBAL__N_128SingleChannelRecursiveFilterEPKhiiiiPhiiPKfNS_15RecursiveFilter5OrderEb(i8* nocapture readonly, i32, i32, i32, i32, i8* nocapture, i32, i32, float* readonly, i32, i1 zeroext) unnamed_addr #3 {
  %12 = alloca %"class.std::__1::vector", align 8
  %13 = alloca %"class.std::__1::vector", align 8
  %14 = alloca %"class.std::__1::vector", align 8
  %15 = alloca %"class.std::__1::vector", align 8
  %16 = alloca %"class.std::__1::vector", align 8
  %17 = alloca %"class.std::__1::vector", align 8
  br i1 %10, label %18, label %747

18:                                               ; preds = %11
  switch i32 %9, label %1473 [
    i32 0, label %19
    i32 1, label %253
    i32 2, label %497
  ]

19:                                               ; preds = %18
  %20 = add nsw i32 %3, 6
  %21 = bitcast %"class.std::__1::vector"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #8
  %22 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = sext i32 %20 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 24, i1 false) #8
  %26 = icmp eq i32 %20, 0
  br i1 %26, label %46, label %27

27:                                               ; preds = %19
  %28 = icmp slt i32 %20, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %27
  %30 = bitcast %"class.std::__1::vector"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %30) #9
  unreachable

31:                                               ; preds = %27
  %32 = shl nsw i64 %25, 2
  %33 = tail call i8* @_Znwm(i64 %32) #10
  %34 = bitcast i8* %33 to float*
  %35 = bitcast %"class.std::__1::vector"* %17 to i8**
  store i8* %33, i8** %35, align 8
  %36 = getelementptr inbounds float, float* %34, i64 %25
  store float* %36, float** %24, align 8
  %37 = bitcast float** %23 to i64*
  %38 = ptrtoint i8* %33 to i64
  %39 = add nsw i64 %25, -1
  %40 = getelementptr float, float* %34, i64 %39
  %41 = ptrtoint float* %40 to i64
  %42 = sub i64 4, %38
  %43 = add i64 %42, %41
  %44 = and i64 %43, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %33, i8 0, i64 %44, i1 false) #8
  %45 = ptrtoint float* %36 to i64
  store i64 %45, i64* %37, align 8
  br label %46

46:                                               ; preds = %31, %19
  %47 = phi i8* [ null, %19 ], [ %33, %31 ]
  %48 = phi float* [ null, %19 ], [ %34, %31 ]
  %49 = icmp sgt i32 %4, 0
  br i1 %49, label %50, label %69

50:                                               ; preds = %46
  %51 = getelementptr inbounds float, float* %8, i64 1
  %52 = getelementptr inbounds float, float* %8, i64 2
  %53 = getelementptr inbounds float, float* %8, i64 3
  %54 = add nsw i32 %3, -1
  %55 = icmp sgt i32 %54, 1
  %56 = sext i32 %1 to i64
  %57 = sext i32 %2 to i64
  %58 = sext i32 %7 to i64
  %59 = add nsw i32 %3, 2
  %60 = zext i32 %59 to i64
  %61 = sext i32 %3 to i64
  %62 = sext i32 %54 to i64
  %63 = mul nsw i32 %54, %6
  %64 = bitcast float* %8 to <2 x float>*
  %65 = bitcast float* %52 to <2 x float>*
  br label %77

66:                                               ; preds = %244
  %67 = load float*, float** %22, align 8
  %68 = bitcast float* %67 to i8*
  br label %69

69:                                               ; preds = %66, %46
  %70 = phi i8* [ %47, %46 ], [ %68, %66 ]
  %71 = phi float* [ %48, %46 ], [ %67, %66 ]
  %72 = phi i8 [ 0, %46 ], [ %245, %66 ]
  %73 = icmp eq float* %71, null
  br i1 %73, label %252, label %74

74:                                               ; preds = %69
  %75 = ptrtoint float* %71 to i64
  %76 = bitcast float** %23 to i64*
  store i64 %75, i64* %76, align 8
  tail call void @_ZdlPv(i8* %70) #10
  br label %252

77:                                               ; preds = %248, %50
  %78 = phi float* [ %48, %50 ], [ %251, %248 ]
  %79 = phi i8* [ %0, %50 ], [ %250, %248 ]
  %80 = phi i32 [ 0, %50 ], [ %246, %248 ]
  %81 = phi i8* [ %5, %50 ], [ %249, %248 ]
  %82 = phi i8 [ 0, %50 ], [ %245, %248 ]
  %83 = load i8, i8* %79, align 1
  %84 = uitofp i8 %83 to float
  %85 = getelementptr inbounds float, float* %78, i64 2
  store float %84, float* %85, align 4
  %86 = getelementptr inbounds float, float* %78, i64 1
  store float %84, float* %86, align 4
  %87 = load float*, float** %22, align 8
  store float %84, float* %87, align 4
  %88 = load i8, i8* %79, align 1
  %89 = uitofp i8 %88 to float
  %90 = load float, float* %8, align 4
  %91 = fmul float %90, %89
  %92 = load float, float* %51, align 4
  %93 = load float*, float** %22, align 8
  %94 = getelementptr inbounds float, float* %93, i64 2
  %95 = load float, float* %94, align 4
  %96 = fmul float %92, %95
  %97 = fadd float %91, %96
  %98 = load float, float* %52, align 4
  %99 = getelementptr inbounds float, float* %93, i64 1
  %100 = load float, float* %99, align 4
  %101 = fmul float %98, %100
  %102 = fadd float %97, %101
  %103 = load float, float* %53, align 4
  %104 = load float, float* %93, align 4
  %105 = fmul float %103, %104
  %106 = fadd float %102, %105
  %107 = getelementptr inbounds float, float* %93, i64 3
  store float %106, float* %107, align 4
  %108 = getelementptr inbounds i8, i8* %79, i64 %56
  %109 = load i8, i8* %108, align 1
  %110 = uitofp i8 %109 to float
  br i1 %55, label %111, label %153

111:                                              ; preds = %77, %137
  %112 = phi float [ %146, %137 ], [ %100, %77 ]
  %113 = phi float [ %144, %137 ], [ %95, %77 ]
  %114 = phi float [ %142, %137 ], [ %106, %77 ]
  %115 = phi float* [ %140, %137 ], [ %93, %77 ]
  %116 = phi i64 [ %132, %137 ], [ 4, %77 ]
  %117 = phi i64 [ %119, %137 ], [ %56, %77 ]
  %118 = phi float [ %135, %137 ], [ %110, %77 ]
  %119 = add i64 %117, %56
  %120 = load float, float* %8, align 4
  %121 = fmul float %118, %120
  %122 = load float, float* %51, align 4
  %123 = fmul float %114, %122
  %124 = fadd float %121, %123
  %125 = load float, float* %52, align 4
  %126 = fmul float %113, %125
  %127 = fadd float %124, %126
  %128 = load float, float* %53, align 4
  %129 = fmul float %112, %128
  %130 = fadd float %127, %129
  %131 = getelementptr inbounds float, float* %115, i64 %116
  store float %130, float* %131, align 4
  %132 = add nuw nsw i64 %116, 1
  %133 = getelementptr inbounds i8, i8* %79, i64 %119
  %134 = load i8, i8* %133, align 1
  %135 = uitofp i8 %134 to float
  %136 = icmp eq i64 %132, %60
  br i1 %136, label %147, label %137

137:                                              ; preds = %111
  %138 = add nsw i64 %116, -2
  %139 = add nsw i64 %116, -1
  %140 = load float*, float** %22, align 8
  %141 = getelementptr inbounds float, float* %140, i64 %116
  %142 = load float, float* %141, align 4
  %143 = getelementptr inbounds float, float* %140, i64 %139
  %144 = load float, float* %143, align 4
  %145 = getelementptr inbounds float, float* %140, i64 %138
  %146 = load float, float* %145, align 4
  br label %111

147:                                              ; preds = %111
  %148 = load float*, float** %22, align 8
  %149 = getelementptr inbounds float, float* %148, i64 %61
  %150 = load float, float* %149, align 4
  %151 = getelementptr inbounds float, float* %148, i64 %62
  %152 = load float, float* %151, align 4
  br label %153

153:                                              ; preds = %77, %147
  %154 = phi float [ %152, %147 ], [ %100, %77 ]
  %155 = phi float [ %150, %147 ], [ %95, %77 ]
  %156 = phi float* [ %148, %147 ], [ %93, %77 ]
  %157 = phi i32 [ %59, %147 ], [ 4, %77 ]
  %158 = phi i32 [ %54, %147 ], [ 1, %77 ]
  %159 = phi float [ %135, %147 ], [ %110, %77 ]
  %160 = load float, float* %8, align 4
  %161 = fmul float %159, %160
  %162 = load float, float* %51, align 4
  %163 = add nsw i32 %157, -1
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds float, float* %156, i64 %164
  %166 = load float, float* %165, align 4
  %167 = fmul float %162, %166
  %168 = fadd float %161, %167
  %169 = load float, float* %52, align 4
  %170 = fmul float %155, %169
  %171 = fadd float %168, %170
  %172 = load float, float* %53, align 4
  %173 = fmul float %154, %172
  %174 = fadd float %171, %173
  %175 = zext i32 %157 to i64
  %176 = getelementptr inbounds float, float* %156, i64 %175
  store float %174, float* %176, align 4
  %177 = load float*, float** %22, align 8
  %178 = getelementptr inbounds float, float* %177, i64 %175
  %179 = bitcast float* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = add nuw nsw i32 %157, 1
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds float, float* %177, i64 %182
  %184 = bitcast float* %183 to i32*
  store i32 %180, i32* %184, align 4
  %185 = load float*, float** %22, align 8
  %186 = getelementptr inbounds float, float* %185, i64 %175
  %187 = bitcast float* %186 to i32*
  %188 = load i32, i32* %187, align 4
  %189 = add nuw nsw i32 %157, 2
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %185, i64 %190
  %192 = bitcast float* %191 to i32*
  store i32 %188, i32* %192, align 4
  %193 = load float*, float** %22, align 8
  %194 = getelementptr inbounds float, float* %193, i64 %175
  %195 = bitcast float* %194 to i32*
  %196 = load i32, i32* %195, align 4
  %197 = add nuw nsw i32 %157, 3
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds float, float* %193, i64 %198
  %200 = bitcast float* %199 to i32*
  store i32 %196, i32* %200, align 4
  %201 = icmp sgt i32 %158, -1
  br i1 %201, label %202, label %244

202:                                              ; preds = %153
  %203 = sext i32 %157 to i64
  br label %204

204:                                              ; preds = %204, %202
  %205 = phi i64 [ %203, %202 ], [ %242, %204 ]
  %206 = phi i32 [ %63, %202 ], [ %240, %204 ]
  %207 = phi i32 [ %158, %202 ], [ %241, %204 ]
  %208 = phi i8 [ %82, %202 ], [ %239, %204 ]
  %209 = load float*, float** %22, align 8
  %210 = getelementptr inbounds float, float* %209, i64 %205
  %211 = load <2 x float>, <2 x float>* %64, align 4
  %212 = bitcast float* %210 to <2 x float>*
  %213 = load <2 x float>, <2 x float>* %212, align 4
  %214 = fmul <2 x float> %213, %211
  %215 = extractelement <2 x float> %214, i32 0
  %216 = extractelement <2 x float> %214, i32 1
  %217 = fadd float %215, %216
  %218 = add nsw i64 %205, 2
  %219 = getelementptr inbounds float, float* %209, i64 %218
  %220 = load <2 x float>, <2 x float>* %65, align 4
  %221 = bitcast float* %219 to <2 x float>*
  %222 = load <2 x float>, <2 x float>* %221, align 4
  %223 = fmul <2 x float> %220, %222
  %224 = extractelement <2 x float> %223, i32 0
  %225 = fadd float %217, %224
  %226 = extractelement <2 x float> %223, i32 1
  %227 = fadd float %225, %226
  store float %227, float* %210, align 4
  %228 = fadd float %227, 5.000000e-01
  %229 = fptosi float %228 to i32
  %230 = icmp slt i32 %229, 0
  %231 = sub nsw i32 0, %229
  %232 = select i1 %230, i32 %231, i32 %229
  %233 = icmp slt i32 %232, 256
  %234 = trunc i32 %232 to i8
  %235 = select i1 %233, i8 %234, i8 -1
  %236 = sext i32 %206 to i64
  %237 = getelementptr inbounds i8, i8* %81, i64 %236
  store i8 %235, i8* %237, align 1
  %238 = icmp ult i8 %208, %235
  %239 = select i1 %238, i8 %235, i8 %208
  %240 = sub nsw i32 %206, %6
  %241 = add nsw i32 %207, -1
  %242 = add nsw i64 %205, -1
  %243 = icmp sgt i32 %207, 0
  br i1 %243, label %204, label %244

244:                                              ; preds = %204, %153
  %245 = phi i8 [ %82, %153 ], [ %239, %204 ]
  %246 = add nuw nsw i32 %80, 1
  %247 = icmp eq i32 %246, %4
  br i1 %247, label %66, label %248

248:                                              ; preds = %244
  %249 = getelementptr inbounds i8, i8* %81, i64 %58
  %250 = getelementptr inbounds i8, i8* %79, i64 %57
  %251 = load float*, float** %22, align 8
  br label %77

252:                                              ; preds = %69, %74
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #8
  br label %1473

253:                                              ; preds = %18
  %254 = add nsw i32 %3, 6
  %255 = bitcast %"class.std::__1::vector"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %255) #8
  %256 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %257 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 1
  %258 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  %259 = sext i32 %254 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %255, i8 0, i64 24, i1 false) #8
  %260 = icmp eq i32 %254, 0
  br i1 %260, label %280, label %261

261:                                              ; preds = %253
  %262 = icmp slt i32 %254, 0
  br i1 %262, label %263, label %265

263:                                              ; preds = %261
  %264 = bitcast %"class.std::__1::vector"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %264) #9
  unreachable

265:                                              ; preds = %261
  %266 = shl nsw i64 %259, 2
  %267 = tail call i8* @_Znwm(i64 %266) #10
  %268 = bitcast i8* %267 to float*
  %269 = bitcast %"class.std::__1::vector"* %16 to i8**
  store i8* %267, i8** %269, align 8
  %270 = getelementptr inbounds float, float* %268, i64 %259
  store float* %270, float** %258, align 8
  %271 = bitcast float** %257 to i64*
  %272 = ptrtoint i8* %267 to i64
  %273 = add nsw i64 %259, -1
  %274 = getelementptr float, float* %268, i64 %273
  %275 = ptrtoint float* %274 to i64
  %276 = sub i64 4, %272
  %277 = add i64 %276, %275
  %278 = and i64 %277, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %267, i8 0, i64 %278, i1 false) #8
  %279 = ptrtoint float* %270 to i64
  store i64 %279, i64* %271, align 8
  br label %280

280:                                              ; preds = %265, %253
  %281 = phi float* [ null, %253 ], [ %268, %265 ]
  %282 = icmp sgt i32 %4, 0
  br i1 %282, label %283, label %299

283:                                              ; preds = %280
  %284 = sext i32 %1 to i64
  %285 = getelementptr inbounds float, float* %8, i64 1
  %286 = getelementptr inbounds float, float* %8, i64 2
  %287 = getelementptr inbounds float, float* %8, i64 3
  %288 = add nsw i32 %3, -1
  %289 = icmp sgt i32 %288, 1
  %290 = sext i32 %2 to i64
  %291 = sext i32 %7 to i64
  %292 = add nsw i32 %3, 2
  %293 = zext i32 %292 to i64
  %294 = sext i32 %3 to i64
  %295 = sext i32 %288 to i64
  %296 = mul nsw i32 %288, %6
  %297 = bitcast float* %8 to <2 x float>*
  %298 = bitcast float* %286 to <2 x float>*
  br label %307

299:                                              ; preds = %489, %280
  %300 = phi i8 [ 0, %280 ], [ %490, %489 ]
  %301 = phi float* [ %281, %280 ], [ %494, %489 ]
  %302 = icmp eq float* %301, null
  br i1 %302, label %496, label %303

303:                                              ; preds = %299
  %304 = ptrtoint float* %301 to i64
  %305 = bitcast float** %257 to i64*
  store i64 %304, i64* %305, align 8
  %306 = bitcast float* %301 to i8*
  tail call void @_ZdlPv(i8* %306) #10
  br label %496

307:                                              ; preds = %489, %283
  %308 = phi float* [ %281, %283 ], [ %494, %489 ]
  %309 = phi i8* [ %0, %283 ], [ %492, %489 ]
  %310 = phi i32 [ 0, %283 ], [ %491, %489 ]
  %311 = phi i8* [ %5, %283 ], [ %493, %489 ]
  %312 = phi i8 [ 0, %283 ], [ %490, %489 ]
  %313 = getelementptr inbounds float, float* %308, i64 2
  store float 0.000000e+00, float* %313, align 4
  %314 = getelementptr inbounds float, float* %308, i64 1
  store float 0.000000e+00, float* %314, align 4
  %315 = load float*, float** %256, align 8
  store float 0.000000e+00, float* %315, align 4
  %316 = load i8, i8* %309, align 1
  %317 = uitofp i8 %316 to float
  %318 = getelementptr inbounds i8, i8* %309, i64 %284
  %319 = load i8, i8* %318, align 1
  %320 = uitofp i8 %319 to float
  %321 = load float, float* %8, align 4
  %322 = fmul float %321, 5.000000e-01
  %323 = fsub float %320, %317
  %324 = fmul float %323, %322
  %325 = load float, float* %285, align 4
  %326 = load float*, float** %256, align 8
  %327 = getelementptr inbounds float, float* %326, i64 2
  %328 = load float, float* %327, align 4
  %329 = fmul float %325, %328
  %330 = fadd float %324, %329
  %331 = load float, float* %286, align 4
  %332 = getelementptr inbounds float, float* %326, i64 1
  %333 = load float, float* %332, align 4
  %334 = fmul float %331, %333
  %335 = fadd float %330, %334
  %336 = load float, float* %287, align 4
  %337 = load float, float* %326, align 4
  %338 = fmul float %336, %337
  %339 = fadd float %335, %338
  %340 = getelementptr inbounds float, float* %326, i64 3
  store float %339, float* %340, align 4
  %341 = load i8, i8* %309, align 1
  %342 = uitofp i8 %341 to float
  br i1 %289, label %343, label %392

343:                                              ; preds = %307, %374
  %344 = phi float [ %383, %374 ], [ %333, %307 ]
  %345 = phi float [ %381, %374 ], [ %328, %307 ]
  %346 = phi float [ %379, %374 ], [ %339, %307 ]
  %347 = phi float* [ %377, %374 ], [ %326, %307 ]
  %348 = phi i64 [ %369, %374 ], [ 4, %307 ]
  %349 = phi i64 [ %351, %374 ], [ %284, %307 ]
  %350 = phi float [ %372, %374 ], [ %342, %307 ]
  %351 = add i64 %349, %284
  %352 = getelementptr inbounds i8, i8* %309, i64 %351
  %353 = load i8, i8* %352, align 1
  %354 = uitofp i8 %353 to float
  %355 = load float, float* %8, align 4
  %356 = fmul float %355, 5.000000e-01
  %357 = fsub float %354, %350
  %358 = fmul float %357, %356
  %359 = load float, float* %285, align 4
  %360 = fmul float %346, %359
  %361 = fadd float %358, %360
  %362 = load float, float* %286, align 4
  %363 = fmul float %345, %362
  %364 = fadd float %361, %363
  %365 = load float, float* %287, align 4
  %366 = fmul float %344, %365
  %367 = fadd float %364, %366
  %368 = getelementptr inbounds float, float* %347, i64 %348
  store float %367, float* %368, align 4
  %369 = add nuw nsw i64 %348, 1
  %370 = getelementptr inbounds i8, i8* %309, i64 %349
  %371 = load i8, i8* %370, align 1
  %372 = uitofp i8 %371 to float
  %373 = icmp eq i64 %369, %293
  br i1 %373, label %384, label %374

374:                                              ; preds = %343
  %375 = add nsw i64 %348, -2
  %376 = add nsw i64 %348, -1
  %377 = load float*, float** %256, align 8
  %378 = getelementptr inbounds float, float* %377, i64 %348
  %379 = load float, float* %378, align 4
  %380 = getelementptr inbounds float, float* %377, i64 %376
  %381 = load float, float* %380, align 4
  %382 = getelementptr inbounds float, float* %377, i64 %375
  %383 = load float, float* %382, align 4
  br label %343

384:                                              ; preds = %343
  %385 = shl i64 %351, 32
  %386 = ashr exact i64 %385, 32
  %387 = load float*, float** %256, align 8
  %388 = getelementptr inbounds float, float* %387, i64 %294
  %389 = load float, float* %388, align 4
  %390 = getelementptr inbounds float, float* %387, i64 %295
  %391 = load float, float* %390, align 4
  br label %392

392:                                              ; preds = %307, %384
  %393 = phi float [ %391, %384 ], [ %333, %307 ]
  %394 = phi float [ %389, %384 ], [ %328, %307 ]
  %395 = phi float* [ %387, %384 ], [ %326, %307 ]
  %396 = phi i64 [ %386, %384 ], [ %284, %307 ]
  %397 = phi i32 [ %292, %384 ], [ 4, %307 ]
  %398 = phi i32 [ %288, %384 ], [ 1, %307 ]
  %399 = phi float [ %372, %384 ], [ %342, %307 ]
  %400 = getelementptr inbounds i8, i8* %309, i64 %396
  %401 = load i8, i8* %400, align 1
  %402 = uitofp i8 %401 to float
  %403 = load float, float* %8, align 4
  %404 = fmul float %403, 5.000000e-01
  %405 = fsub float %402, %399
  %406 = fmul float %405, %404
  %407 = load float, float* %285, align 4
  %408 = add nsw i32 %397, -1
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds float, float* %395, i64 %409
  %411 = load float, float* %410, align 4
  %412 = fmul float %407, %411
  %413 = fadd float %406, %412
  %414 = load float, float* %286, align 4
  %415 = fmul float %394, %414
  %416 = fadd float %413, %415
  %417 = load float, float* %287, align 4
  %418 = fmul float %393, %417
  %419 = fadd float %416, %418
  %420 = zext i32 %397 to i64
  %421 = getelementptr inbounds float, float* %395, i64 %420
  store float %419, float* %421, align 4
  %422 = load float*, float** %256, align 8
  %423 = getelementptr inbounds float, float* %422, i64 %420
  %424 = bitcast float* %423 to i32*
  %425 = load i32, i32* %424, align 4
  %426 = add nuw nsw i32 %397, 1
  %427 = zext i32 %426 to i64
  %428 = getelementptr inbounds float, float* %422, i64 %427
  %429 = bitcast float* %428 to i32*
  store i32 %425, i32* %429, align 4
  %430 = load float*, float** %256, align 8
  %431 = getelementptr inbounds float, float* %430, i64 %420
  %432 = bitcast float* %431 to i32*
  %433 = load i32, i32* %432, align 4
  %434 = add nuw nsw i32 %397, 2
  %435 = zext i32 %434 to i64
  %436 = getelementptr inbounds float, float* %430, i64 %435
  %437 = bitcast float* %436 to i32*
  store i32 %433, i32* %437, align 4
  %438 = load float*, float** %256, align 8
  %439 = getelementptr inbounds float, float* %438, i64 %420
  %440 = bitcast float* %439 to i32*
  %441 = load i32, i32* %440, align 4
  %442 = add nuw nsw i32 %397, 3
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds float, float* %438, i64 %443
  %445 = bitcast float* %444 to i32*
  store i32 %441, i32* %445, align 4
  %446 = icmp sgt i32 %398, -1
  br i1 %446, label %447, label %489

447:                                              ; preds = %392
  %448 = sext i32 %397 to i64
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ %448, %447 ], [ %487, %449 ]
  %451 = phi i32 [ %296, %447 ], [ %485, %449 ]
  %452 = phi i32 [ %398, %447 ], [ %486, %449 ]
  %453 = phi i8 [ %312, %447 ], [ %484, %449 ]
  %454 = load float*, float** %256, align 8
  %455 = getelementptr inbounds float, float* %454, i64 %450
  %456 = load <2 x float>, <2 x float>* %297, align 4
  %457 = bitcast float* %455 to <2 x float>*
  %458 = load <2 x float>, <2 x float>* %457, align 4
  %459 = fmul <2 x float> %458, %456
  %460 = extractelement <2 x float> %459, i32 0
  %461 = extractelement <2 x float> %459, i32 1
  %462 = fadd float %460, %461
  %463 = add nsw i64 %450, 2
  %464 = getelementptr inbounds float, float* %454, i64 %463
  %465 = load <2 x float>, <2 x float>* %298, align 4
  %466 = bitcast float* %464 to <2 x float>*
  %467 = load <2 x float>, <2 x float>* %466, align 4
  %468 = fmul <2 x float> %465, %467
  %469 = extractelement <2 x float> %468, i32 0
  %470 = fadd float %462, %469
  %471 = extractelement <2 x float> %468, i32 1
  %472 = fadd float %470, %471
  store float %472, float* %455, align 4
  %473 = fadd float %472, 5.000000e-01
  %474 = fptosi float %473 to i32
  %475 = icmp slt i32 %474, 0
  %476 = sub nsw i32 0, %474
  %477 = select i1 %475, i32 %476, i32 %474
  %478 = icmp slt i32 %477, 256
  %479 = trunc i32 %477 to i8
  %480 = select i1 %478, i8 %479, i8 -1
  %481 = sext i32 %451 to i64
  %482 = getelementptr inbounds i8, i8* %311, i64 %481
  store i8 %480, i8* %482, align 1
  %483 = icmp ult i8 %453, %480
  %484 = select i1 %483, i8 %480, i8 %453
  %485 = sub nsw i32 %451, %6
  %486 = add nsw i32 %452, -1
  %487 = add nsw i64 %450, -1
  %488 = icmp sgt i32 %452, 0
  br i1 %488, label %449, label %489

489:                                              ; preds = %449, %392
  %490 = phi i8 [ %312, %392 ], [ %484, %449 ]
  %491 = add nuw nsw i32 %310, 1
  %492 = getelementptr inbounds i8, i8* %309, i64 %290
  %493 = getelementptr inbounds i8, i8* %311, i64 %291
  %494 = load float*, float** %256, align 8
  %495 = icmp eq i32 %491, %4
  br i1 %495, label %299, label %307

496:                                              ; preds = %299, %303
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %255) #8
  br label %1473

497:                                              ; preds = %18
  %498 = add nsw i32 %3, 6
  %499 = bitcast %"class.std::__1::vector"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %499) #8
  %500 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %501 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 1
  %502 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %503 = sext i32 %498 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %499, i8 0, i64 24, i1 false) #8
  %504 = icmp eq i32 %498, 0
  br i1 %504, label %524, label %505

505:                                              ; preds = %497
  %506 = icmp slt i32 %498, 0
  br i1 %506, label %507, label %509

507:                                              ; preds = %505
  %508 = bitcast %"class.std::__1::vector"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %508) #9
  unreachable

509:                                              ; preds = %505
  %510 = shl nsw i64 %503, 2
  %511 = tail call i8* @_Znwm(i64 %510) #10
  %512 = bitcast i8* %511 to float*
  %513 = bitcast %"class.std::__1::vector"* %15 to i8**
  store i8* %511, i8** %513, align 8
  %514 = getelementptr inbounds float, float* %512, i64 %503
  store float* %514, float** %502, align 8
  %515 = bitcast float** %501 to i64*
  %516 = ptrtoint i8* %511 to i64
  %517 = add nsw i64 %503, -1
  %518 = getelementptr float, float* %512, i64 %517
  %519 = ptrtoint float* %518 to i64
  %520 = sub i64 4, %516
  %521 = add i64 %520, %519
  %522 = and i64 %521, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %511, i8 0, i64 %522, i1 false) #8
  %523 = ptrtoint float* %514 to i64
  store i64 %523, i64* %515, align 8
  br label %524

524:                                              ; preds = %509, %497
  %525 = phi float* [ null, %497 ], [ %512, %509 ]
  %526 = icmp sgt i32 %4, 0
  br i1 %526, label %527, label %543

527:                                              ; preds = %524
  %528 = getelementptr inbounds float, float* %8, i64 1
  %529 = getelementptr inbounds float, float* %8, i64 2
  %530 = getelementptr inbounds float, float* %8, i64 3
  %531 = add nsw i32 %3, -1
  %532 = icmp sgt i32 %531, 1
  %533 = sext i32 %1 to i64
  %534 = sext i32 %2 to i64
  %535 = sext i32 %7 to i64
  %536 = add nsw i32 %3, 2
  %537 = zext i32 %536 to i64
  %538 = sext i32 %3 to i64
  %539 = sext i32 %531 to i64
  %540 = mul nsw i32 %531, %6
  %541 = bitcast float* %8 to <2 x float>*
  %542 = bitcast float* %529 to <2 x float>*
  br label %551

543:                                              ; preds = %739, %524
  %544 = phi i8 [ 0, %524 ], [ %741, %739 ]
  %545 = phi float* [ %525, %524 ], [ %740, %739 ]
  %546 = icmp eq float* %545, null
  br i1 %546, label %746, label %547

547:                                              ; preds = %543
  %548 = ptrtoint float* %545 to i64
  %549 = bitcast float** %501 to i64*
  store i64 %548, i64* %549, align 8
  %550 = bitcast float* %545 to i8*
  tail call void @_ZdlPv(i8* %550) #10
  br label %746

551:                                              ; preds = %739, %527
  %552 = phi float* [ %525, %527 ], [ %740, %739 ]
  %553 = phi i8* [ %0, %527 ], [ %743, %739 ]
  %554 = phi i32 [ 0, %527 ], [ %742, %739 ]
  %555 = phi i8* [ %5, %527 ], [ %744, %739 ]
  %556 = phi i8 [ 0, %527 ], [ %741, %739 ]
  %557 = getelementptr inbounds float, float* %552, i64 2
  store float 0.000000e+00, float* %557, align 4
  %558 = getelementptr inbounds float, float* %552, i64 1
  store float 0.000000e+00, float* %558, align 4
  %559 = load float*, float** %500, align 8
  store float 0.000000e+00, float* %559, align 4
  %560 = load i8, i8* %553, align 1
  %561 = uitofp i8 %560 to float
  %562 = load float, float* %8, align 4
  %563 = fsub float %561, %561
  %564 = fmul float %562, %563
  %565 = load float, float* %528, align 4
  %566 = load float*, float** %500, align 8
  %567 = getelementptr inbounds float, float* %566, i64 2
  %568 = load float, float* %567, align 4
  %569 = fmul float %565, %568
  %570 = fadd float %564, %569
  %571 = load float, float* %529, align 4
  %572 = getelementptr inbounds float, float* %566, i64 1
  %573 = load float, float* %572, align 4
  %574 = fmul float %571, %573
  %575 = fadd float %570, %574
  %576 = load float, float* %530, align 4
  %577 = load float, float* %566, align 4
  %578 = fmul float %576, %577
  %579 = fadd float %575, %578
  %580 = getelementptr inbounds float, float* %566, i64 3
  store float %579, float* %580, align 4
  %581 = load i8, i8* %553, align 1
  %582 = uitofp i8 %581 to float
  %583 = getelementptr inbounds i8, i8* %553, i64 %533
  %584 = load i8, i8* %583, align 1
  %585 = uitofp i8 %584 to float
  br i1 %532, label %586, label %633

586:                                              ; preds = %551, %617
  %587 = phi float [ %626, %617 ], [ %573, %551 ]
  %588 = phi float [ %624, %617 ], [ %568, %551 ]
  %589 = phi float [ %622, %617 ], [ %579, %551 ]
  %590 = phi float* [ %620, %617 ], [ %566, %551 ]
  %591 = phi i64 [ %609, %617 ], [ 4, %551 ]
  %592 = phi i64 [ %595, %617 ], [ %533, %551 ]
  %593 = phi float [ %615, %617 ], [ %585, %551 ]
  %594 = phi float [ %612, %617 ], [ %582, %551 ]
  %595 = add i64 %592, %533
  %596 = load float, float* %8, align 4
  %597 = fsub float %593, %594
  %598 = fmul float %597, %596
  %599 = load float, float* %528, align 4
  %600 = fmul float %589, %599
  %601 = fadd float %598, %600
  %602 = load float, float* %529, align 4
  %603 = fmul float %588, %602
  %604 = fadd float %601, %603
  %605 = load float, float* %530, align 4
  %606 = fmul float %587, %605
  %607 = fadd float %604, %606
  %608 = getelementptr inbounds float, float* %590, i64 %591
  store float %607, float* %608, align 4
  %609 = add nuw nsw i64 %591, 1
  %610 = getelementptr inbounds i8, i8* %553, i64 %592
  %611 = load i8, i8* %610, align 1
  %612 = uitofp i8 %611 to float
  %613 = getelementptr inbounds i8, i8* %553, i64 %595
  %614 = load i8, i8* %613, align 1
  %615 = uitofp i8 %614 to float
  %616 = icmp eq i64 %609, %537
  br i1 %616, label %627, label %617

617:                                              ; preds = %586
  %618 = add nsw i64 %591, -2
  %619 = add nsw i64 %591, -1
  %620 = load float*, float** %500, align 8
  %621 = getelementptr inbounds float, float* %620, i64 %591
  %622 = load float, float* %621, align 4
  %623 = getelementptr inbounds float, float* %620, i64 %619
  %624 = load float, float* %623, align 4
  %625 = getelementptr inbounds float, float* %620, i64 %618
  %626 = load float, float* %625, align 4
  br label %586

627:                                              ; preds = %586
  %628 = load float*, float** %500, align 8
  %629 = getelementptr inbounds float, float* %628, i64 %538
  %630 = load float, float* %629, align 4
  %631 = getelementptr inbounds float, float* %628, i64 %539
  %632 = load float, float* %631, align 4
  br label %633

633:                                              ; preds = %551, %627
  %634 = phi float [ %632, %627 ], [ %573, %551 ]
  %635 = phi float [ %630, %627 ], [ %568, %551 ]
  %636 = phi float* [ %628, %627 ], [ %566, %551 ]
  %637 = phi i32 [ %536, %627 ], [ 4, %551 ]
  %638 = phi i32 [ %531, %627 ], [ 1, %551 ]
  %639 = phi float [ %612, %627 ], [ %582, %551 ]
  %640 = phi float [ %615, %627 ], [ %585, %551 ]
  %641 = load float, float* %8, align 4
  %642 = fsub float %640, %639
  %643 = fmul float %642, %641
  %644 = load float, float* %528, align 4
  %645 = add nsw i32 %637, -1
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds float, float* %636, i64 %646
  %648 = load float, float* %647, align 4
  %649 = fmul float %644, %648
  %650 = fadd float %643, %649
  %651 = load float, float* %529, align 4
  %652 = fmul float %635, %651
  %653 = fadd float %650, %652
  %654 = load float, float* %530, align 4
  %655 = fmul float %634, %654
  %656 = fadd float %653, %655
  %657 = zext i32 %637 to i64
  %658 = getelementptr inbounds float, float* %636, i64 %657
  store float %656, float* %658, align 4
  %659 = load float*, float** %500, align 8
  %660 = getelementptr inbounds float, float* %659, i64 %657
  %661 = bitcast float* %660 to i32*
  %662 = load i32, i32* %661, align 4
  %663 = add nuw nsw i32 %637, 1
  %664 = zext i32 %663 to i64
  %665 = getelementptr inbounds float, float* %659, i64 %664
  %666 = bitcast float* %665 to i32*
  store i32 %662, i32* %666, align 4
  %667 = load float*, float** %500, align 8
  %668 = getelementptr inbounds float, float* %667, i64 %657
  %669 = bitcast float* %668 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = add nuw nsw i32 %637, 2
  %672 = zext i32 %671 to i64
  %673 = getelementptr inbounds float, float* %667, i64 %672
  %674 = bitcast float* %673 to i32*
  store i32 %670, i32* %674, align 4
  %675 = load float*, float** %500, align 8
  %676 = getelementptr inbounds float, float* %675, i64 %657
  %677 = bitcast float* %676 to i32*
  %678 = load i32, i32* %677, align 4
  %679 = add nuw nsw i32 %637, 3
  %680 = zext i32 %679 to i64
  %681 = getelementptr inbounds float, float* %675, i64 %680
  %682 = bitcast float* %681 to i32*
  store i32 %678, i32* %682, align 4
  %683 = load float*, float** %500, align 8
  %684 = icmp sgt i32 %638, -1
  br i1 %684, label %685, label %739

685:                                              ; preds = %633
  %686 = getelementptr inbounds float, float* %683, i64 %664
  %687 = load float, float* %686, align 4
  %688 = sext i32 %637 to i64
  br label %689

689:                                              ; preds = %732, %685
  %690 = phi float* [ %683, %685 ], [ %736, %732 ]
  %691 = phi i64 [ %688, %685 ], [ %733, %732 ]
  %692 = phi i32 [ %540, %685 ], [ %735, %732 ]
  %693 = phi float [ %687, %685 ], [ %697, %732 ]
  %694 = phi i32 [ %638, %685 ], [ %734, %732 ]
  %695 = phi i8 [ %556, %685 ], [ %730, %732 ]
  %696 = getelementptr inbounds float, float* %690, i64 %691
  %697 = load float, float* %696, align 4
  %698 = fsub float %693, %697
  %699 = load <2 x float>, <2 x float>* %541, align 4
  %700 = add nsw i64 %691, 1
  %701 = getelementptr inbounds float, float* %690, i64 %700
  %702 = load float, float* %701, align 4
  %703 = insertelement <2 x float> undef, float %698, i32 0
  %704 = insertelement <2 x float> %703, float %702, i32 1
  %705 = fmul <2 x float> %704, %699
  %706 = extractelement <2 x float> %705, i32 0
  %707 = extractelement <2 x float> %705, i32 1
  %708 = fadd float %706, %707
  %709 = add nsw i64 %691, 2
  %710 = getelementptr inbounds float, float* %690, i64 %709
  %711 = load <2 x float>, <2 x float>* %542, align 4
  %712 = bitcast float* %710 to <2 x float>*
  %713 = load <2 x float>, <2 x float>* %712, align 4
  %714 = fmul <2 x float> %711, %713
  %715 = extractelement <2 x float> %714, i32 0
  %716 = fadd float %708, %715
  %717 = extractelement <2 x float> %714, i32 1
  %718 = fadd float %716, %717
  store float %718, float* %696, align 4
  %719 = fadd float %718, 5.000000e-01
  %720 = fptosi float %719 to i32
  %721 = icmp slt i32 %720, 0
  %722 = sub nsw i32 0, %720
  %723 = select i1 %721, i32 %722, i32 %720
  %724 = icmp slt i32 %723, 256
  %725 = trunc i32 %723 to i8
  %726 = select i1 %724, i8 %725, i8 -1
  %727 = sext i32 %692 to i64
  %728 = getelementptr inbounds i8, i8* %555, i64 %727
  store i8 %726, i8* %728, align 1
  %729 = icmp ult i8 %695, %726
  %730 = select i1 %729, i8 %726, i8 %695
  %731 = icmp sgt i32 %694, 0
  br i1 %731, label %732, label %737

732:                                              ; preds = %689
  %733 = add nsw i64 %691, -1
  %734 = add nsw i32 %694, -1
  %735 = sub nsw i32 %692, %6
  %736 = load float*, float** %500, align 8
  br label %689

737:                                              ; preds = %689
  %738 = load float*, float** %500, align 8
  br label %739

739:                                              ; preds = %737, %633
  %740 = phi float* [ %683, %633 ], [ %738, %737 ]
  %741 = phi i8 [ %556, %633 ], [ %730, %737 ]
  %742 = add nuw nsw i32 %554, 1
  %743 = getelementptr inbounds i8, i8* %553, i64 %534
  %744 = getelementptr inbounds i8, i8* %555, i64 %535
  %745 = icmp eq i32 %742, %4
  br i1 %745, label %543, label %551

746:                                              ; preds = %543, %547
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %499) #8
  br label %1473

747:                                              ; preds = %11
  switch i32 %9, label %1473 [
    i32 0, label %748
    i32 1, label %981
    i32 2, label %1224
  ]

748:                                              ; preds = %747
  %749 = add nsw i32 %3, 6
  %750 = bitcast %"class.std::__1::vector"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %750) #8
  %751 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 0
  %752 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 1
  %753 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %754 = sext i32 %749 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %750, i8 0, i64 24, i1 false) #8
  %755 = icmp eq i32 %749, 0
  br i1 %755, label %775, label %756

756:                                              ; preds = %748
  %757 = icmp slt i32 %749, 0
  br i1 %757, label %758, label %760

758:                                              ; preds = %756
  %759 = bitcast %"class.std::__1::vector"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %759) #9
  unreachable

760:                                              ; preds = %756
  %761 = shl nsw i64 %754, 2
  %762 = tail call i8* @_Znwm(i64 %761) #10
  %763 = bitcast i8* %762 to float*
  %764 = bitcast %"class.std::__1::vector"* %14 to i8**
  store i8* %762, i8** %764, align 8
  %765 = getelementptr inbounds float, float* %763, i64 %754
  store float* %765, float** %753, align 8
  %766 = bitcast float** %752 to i64*
  %767 = ptrtoint i8* %762 to i64
  %768 = add nsw i64 %754, -1
  %769 = getelementptr float, float* %763, i64 %768
  %770 = ptrtoint float* %769 to i64
  %771 = sub i64 4, %767
  %772 = add i64 %771, %770
  %773 = and i64 %772, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %762, i8 0, i64 %773, i1 false) #8
  %774 = ptrtoint float* %765 to i64
  store i64 %774, i64* %766, align 8
  br label %775

775:                                              ; preds = %760, %748
  %776 = phi i8* [ null, %748 ], [ %762, %760 ]
  %777 = phi float* [ null, %748 ], [ %763, %760 ]
  %778 = icmp sgt i32 %4, 0
  br i1 %778, label %779, label %798

779:                                              ; preds = %775
  %780 = getelementptr inbounds float, float* %8, i64 1
  %781 = getelementptr inbounds float, float* %8, i64 2
  %782 = getelementptr inbounds float, float* %8, i64 3
  %783 = add nsw i32 %3, -1
  %784 = icmp sgt i32 %783, 1
  %785 = sext i32 %1 to i64
  %786 = sext i32 %2 to i64
  %787 = sext i32 %7 to i64
  %788 = add nsw i32 %3, 2
  %789 = zext i32 %788 to i64
  %790 = sext i32 %3 to i64
  %791 = sext i32 %783 to i64
  %792 = mul nsw i32 %783, %6
  %793 = bitcast float* %8 to <2 x float>*
  %794 = bitcast float* %781 to <2 x float>*
  br label %806

795:                                              ; preds = %972
  %796 = load float*, float** %751, align 8
  %797 = bitcast float* %796 to i8*
  br label %798

798:                                              ; preds = %795, %775
  %799 = phi i8* [ %776, %775 ], [ %797, %795 ]
  %800 = phi float* [ %777, %775 ], [ %796, %795 ]
  %801 = phi i8 [ 0, %775 ], [ %973, %795 ]
  %802 = icmp eq float* %800, null
  br i1 %802, label %980, label %803

803:                                              ; preds = %798
  %804 = ptrtoint float* %800 to i64
  %805 = bitcast float** %752 to i64*
  store i64 %804, i64* %805, align 8
  tail call void @_ZdlPv(i8* %799) #10
  br label %980

806:                                              ; preds = %976, %779
  %807 = phi float* [ %777, %779 ], [ %979, %976 ]
  %808 = phi i8* [ %0, %779 ], [ %978, %976 ]
  %809 = phi i32 [ 0, %779 ], [ %974, %976 ]
  %810 = phi i8* [ %5, %779 ], [ %977, %976 ]
  %811 = phi i8 [ 0, %779 ], [ %973, %976 ]
  %812 = load i8, i8* %808, align 1
  %813 = uitofp i8 %812 to float
  %814 = getelementptr inbounds float, float* %807, i64 2
  store float %813, float* %814, align 4
  %815 = getelementptr inbounds float, float* %807, i64 1
  store float %813, float* %815, align 4
  %816 = load float*, float** %751, align 8
  store float %813, float* %816, align 4
  %817 = load i8, i8* %808, align 1
  %818 = uitofp i8 %817 to float
  %819 = load float, float* %8, align 4
  %820 = fmul float %819, %818
  %821 = load float, float* %780, align 4
  %822 = load float*, float** %751, align 8
  %823 = getelementptr inbounds float, float* %822, i64 2
  %824 = load float, float* %823, align 4
  %825 = fmul float %821, %824
  %826 = fadd float %820, %825
  %827 = load float, float* %781, align 4
  %828 = getelementptr inbounds float, float* %822, i64 1
  %829 = load float, float* %828, align 4
  %830 = fmul float %827, %829
  %831 = fadd float %826, %830
  %832 = load float, float* %782, align 4
  %833 = load float, float* %822, align 4
  %834 = fmul float %832, %833
  %835 = fadd float %831, %834
  %836 = getelementptr inbounds float, float* %822, i64 3
  store float %835, float* %836, align 4
  %837 = getelementptr inbounds i8, i8* %808, i64 %785
  %838 = load i8, i8* %837, align 1
  %839 = uitofp i8 %838 to float
  br i1 %784, label %840, label %882

840:                                              ; preds = %806, %866
  %841 = phi float [ %875, %866 ], [ %829, %806 ]
  %842 = phi float [ %873, %866 ], [ %824, %806 ]
  %843 = phi float [ %871, %866 ], [ %835, %806 ]
  %844 = phi float* [ %869, %866 ], [ %822, %806 ]
  %845 = phi i64 [ %861, %866 ], [ 4, %806 ]
  %846 = phi i64 [ %848, %866 ], [ %785, %806 ]
  %847 = phi float [ %864, %866 ], [ %839, %806 ]
  %848 = add i64 %846, %785
  %849 = load float, float* %8, align 4
  %850 = fmul float %847, %849
  %851 = load float, float* %780, align 4
  %852 = fmul float %843, %851
  %853 = fadd float %850, %852
  %854 = load float, float* %781, align 4
  %855 = fmul float %842, %854
  %856 = fadd float %853, %855
  %857 = load float, float* %782, align 4
  %858 = fmul float %841, %857
  %859 = fadd float %856, %858
  %860 = getelementptr inbounds float, float* %844, i64 %845
  store float %859, float* %860, align 4
  %861 = add nuw nsw i64 %845, 1
  %862 = getelementptr inbounds i8, i8* %808, i64 %848
  %863 = load i8, i8* %862, align 1
  %864 = uitofp i8 %863 to float
  %865 = icmp eq i64 %861, %789
  br i1 %865, label %876, label %866

866:                                              ; preds = %840
  %867 = add nsw i64 %845, -2
  %868 = add nsw i64 %845, -1
  %869 = load float*, float** %751, align 8
  %870 = getelementptr inbounds float, float* %869, i64 %845
  %871 = load float, float* %870, align 4
  %872 = getelementptr inbounds float, float* %869, i64 %868
  %873 = load float, float* %872, align 4
  %874 = getelementptr inbounds float, float* %869, i64 %867
  %875 = load float, float* %874, align 4
  br label %840

876:                                              ; preds = %840
  %877 = load float*, float** %751, align 8
  %878 = getelementptr inbounds float, float* %877, i64 %790
  %879 = load float, float* %878, align 4
  %880 = getelementptr inbounds float, float* %877, i64 %791
  %881 = load float, float* %880, align 4
  br label %882

882:                                              ; preds = %806, %876
  %883 = phi float [ %881, %876 ], [ %829, %806 ]
  %884 = phi float [ %879, %876 ], [ %824, %806 ]
  %885 = phi float* [ %877, %876 ], [ %822, %806 ]
  %886 = phi i32 [ %788, %876 ], [ 4, %806 ]
  %887 = phi i32 [ %783, %876 ], [ 1, %806 ]
  %888 = phi float [ %864, %876 ], [ %839, %806 ]
  %889 = load float, float* %8, align 4
  %890 = fmul float %888, %889
  %891 = load float, float* %780, align 4
  %892 = add nsw i32 %886, -1
  %893 = sext i32 %892 to i64
  %894 = getelementptr inbounds float, float* %885, i64 %893
  %895 = load float, float* %894, align 4
  %896 = fmul float %891, %895
  %897 = fadd float %890, %896
  %898 = load float, float* %781, align 4
  %899 = fmul float %884, %898
  %900 = fadd float %897, %899
  %901 = load float, float* %782, align 4
  %902 = fmul float %883, %901
  %903 = fadd float %900, %902
  %904 = zext i32 %886 to i64
  %905 = getelementptr inbounds float, float* %885, i64 %904
  store float %903, float* %905, align 4
  %906 = load float*, float** %751, align 8
  %907 = getelementptr inbounds float, float* %906, i64 %904
  %908 = bitcast float* %907 to i32*
  %909 = load i32, i32* %908, align 4
  %910 = add nuw nsw i32 %886, 1
  %911 = zext i32 %910 to i64
  %912 = getelementptr inbounds float, float* %906, i64 %911
  %913 = bitcast float* %912 to i32*
  store i32 %909, i32* %913, align 4
  %914 = load float*, float** %751, align 8
  %915 = getelementptr inbounds float, float* %914, i64 %904
  %916 = bitcast float* %915 to i32*
  %917 = load i32, i32* %916, align 4
  %918 = add nuw nsw i32 %886, 2
  %919 = zext i32 %918 to i64
  %920 = getelementptr inbounds float, float* %914, i64 %919
  %921 = bitcast float* %920 to i32*
  store i32 %917, i32* %921, align 4
  %922 = load float*, float** %751, align 8
  %923 = getelementptr inbounds float, float* %922, i64 %904
  %924 = bitcast float* %923 to i32*
  %925 = load i32, i32* %924, align 4
  %926 = add nuw nsw i32 %886, 3
  %927 = zext i32 %926 to i64
  %928 = getelementptr inbounds float, float* %922, i64 %927
  %929 = bitcast float* %928 to i32*
  store i32 %925, i32* %929, align 4
  %930 = icmp sgt i32 %887, -1
  br i1 %930, label %931, label %972

931:                                              ; preds = %882
  %932 = sext i32 %886 to i64
  br label %933

933:                                              ; preds = %933, %931
  %934 = phi i64 [ %932, %931 ], [ %970, %933 ]
  %935 = phi i32 [ %792, %931 ], [ %968, %933 ]
  %936 = phi i32 [ %887, %931 ], [ %969, %933 ]
  %937 = phi i8 [ %811, %931 ], [ %967, %933 ]
  %938 = load float*, float** %751, align 8
  %939 = getelementptr inbounds float, float* %938, i64 %934
  %940 = load <2 x float>, <2 x float>* %793, align 4
  %941 = bitcast float* %939 to <2 x float>*
  %942 = load <2 x float>, <2 x float>* %941, align 4
  %943 = fmul <2 x float> %942, %940
  %944 = extractelement <2 x float> %943, i32 0
  %945 = extractelement <2 x float> %943, i32 1
  %946 = fadd float %944, %945
  %947 = add nsw i64 %934, 2
  %948 = getelementptr inbounds float, float* %938, i64 %947
  %949 = load <2 x float>, <2 x float>* %794, align 4
  %950 = bitcast float* %948 to <2 x float>*
  %951 = load <2 x float>, <2 x float>* %950, align 4
  %952 = fmul <2 x float> %949, %951
  %953 = extractelement <2 x float> %952, i32 0
  %954 = fadd float %946, %953
  %955 = extractelement <2 x float> %952, i32 1
  %956 = fadd float %954, %955
  store float %956, float* %939, align 4
  %957 = fadd float %956, 5.000000e-01
  %958 = fptosi float %957 to i32
  %959 = icmp slt i32 %958, 0
  %960 = icmp slt i32 %958, 256
  %961 = trunc i32 %958 to i8
  %962 = select i1 %960, i8 %961, i8 -1
  %963 = select i1 %959, i8 0, i8 %962
  %964 = sext i32 %935 to i64
  %965 = getelementptr inbounds i8, i8* %810, i64 %964
  store i8 %963, i8* %965, align 1
  %966 = icmp ult i8 %937, %963
  %967 = select i1 %966, i8 %963, i8 %937
  %968 = sub nsw i32 %935, %6
  %969 = add nsw i32 %936, -1
  %970 = add nsw i64 %934, -1
  %971 = icmp sgt i32 %936, 0
  br i1 %971, label %933, label %972

972:                                              ; preds = %933, %882
  %973 = phi i8 [ %811, %882 ], [ %967, %933 ]
  %974 = add nuw nsw i32 %809, 1
  %975 = icmp eq i32 %974, %4
  br i1 %975, label %795, label %976

976:                                              ; preds = %972
  %977 = getelementptr inbounds i8, i8* %810, i64 %787
  %978 = getelementptr inbounds i8, i8* %808, i64 %786
  %979 = load float*, float** %751, align 8
  br label %806

980:                                              ; preds = %798, %803
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %750) #8
  br label %1473

981:                                              ; preds = %747
  %982 = add nsw i32 %3, 6
  %983 = bitcast %"class.std::__1::vector"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %983) #8
  %984 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 0
  %985 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 1
  %986 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %987 = sext i32 %982 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %983, i8 0, i64 24, i1 false) #8
  %988 = icmp eq i32 %982, 0
  br i1 %988, label %1008, label %989

989:                                              ; preds = %981
  %990 = icmp slt i32 %982, 0
  br i1 %990, label %991, label %993

991:                                              ; preds = %989
  %992 = bitcast %"class.std::__1::vector"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %992) #9
  unreachable

993:                                              ; preds = %989
  %994 = shl nsw i64 %987, 2
  %995 = tail call i8* @_Znwm(i64 %994) #10
  %996 = bitcast i8* %995 to float*
  %997 = bitcast %"class.std::__1::vector"* %13 to i8**
  store i8* %995, i8** %997, align 8
  %998 = getelementptr inbounds float, float* %996, i64 %987
  store float* %998, float** %986, align 8
  %999 = bitcast float** %985 to i64*
  %1000 = ptrtoint i8* %995 to i64
  %1001 = add nsw i64 %987, -1
  %1002 = getelementptr float, float* %996, i64 %1001
  %1003 = ptrtoint float* %1002 to i64
  %1004 = sub i64 4, %1000
  %1005 = add i64 %1004, %1003
  %1006 = and i64 %1005, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %995, i8 0, i64 %1006, i1 false) #8
  %1007 = ptrtoint float* %998 to i64
  store i64 %1007, i64* %999, align 8
  br label %1008

1008:                                             ; preds = %993, %981
  %1009 = phi float* [ null, %981 ], [ %996, %993 ]
  %1010 = icmp sgt i32 %4, 0
  br i1 %1010, label %1011, label %1027

1011:                                             ; preds = %1008
  %1012 = sext i32 %1 to i64
  %1013 = getelementptr inbounds float, float* %8, i64 1
  %1014 = getelementptr inbounds float, float* %8, i64 2
  %1015 = getelementptr inbounds float, float* %8, i64 3
  %1016 = add nsw i32 %3, -1
  %1017 = icmp sgt i32 %1016, 1
  %1018 = sext i32 %2 to i64
  %1019 = sext i32 %7 to i64
  %1020 = add nsw i32 %3, 2
  %1021 = zext i32 %1020 to i64
  %1022 = sext i32 %3 to i64
  %1023 = sext i32 %1016 to i64
  %1024 = mul nsw i32 %1016, %6
  %1025 = bitcast float* %8 to <2 x float>*
  %1026 = bitcast float* %1014 to <2 x float>*
  br label %1035

1027:                                             ; preds = %1216, %1008
  %1028 = phi i8 [ 0, %1008 ], [ %1217, %1216 ]
  %1029 = phi float* [ %1009, %1008 ], [ %1221, %1216 ]
  %1030 = icmp eq float* %1029, null
  br i1 %1030, label %1223, label %1031

1031:                                             ; preds = %1027
  %1032 = ptrtoint float* %1029 to i64
  %1033 = bitcast float** %985 to i64*
  store i64 %1032, i64* %1033, align 8
  %1034 = bitcast float* %1029 to i8*
  tail call void @_ZdlPv(i8* %1034) #10
  br label %1223

1035:                                             ; preds = %1216, %1011
  %1036 = phi float* [ %1009, %1011 ], [ %1221, %1216 ]
  %1037 = phi i8* [ %0, %1011 ], [ %1219, %1216 ]
  %1038 = phi i32 [ 0, %1011 ], [ %1218, %1216 ]
  %1039 = phi i8* [ %5, %1011 ], [ %1220, %1216 ]
  %1040 = phi i8 [ 0, %1011 ], [ %1217, %1216 ]
  %1041 = getelementptr inbounds float, float* %1036, i64 2
  store float 0.000000e+00, float* %1041, align 4
  %1042 = getelementptr inbounds float, float* %1036, i64 1
  store float 0.000000e+00, float* %1042, align 4
  %1043 = load float*, float** %984, align 8
  store float 0.000000e+00, float* %1043, align 4
  %1044 = load i8, i8* %1037, align 1
  %1045 = uitofp i8 %1044 to float
  %1046 = getelementptr inbounds i8, i8* %1037, i64 %1012
  %1047 = load i8, i8* %1046, align 1
  %1048 = uitofp i8 %1047 to float
  %1049 = load float, float* %8, align 4
  %1050 = fmul float %1049, 5.000000e-01
  %1051 = fsub float %1048, %1045
  %1052 = fmul float %1051, %1050
  %1053 = load float, float* %1013, align 4
  %1054 = load float*, float** %984, align 8
  %1055 = getelementptr inbounds float, float* %1054, i64 2
  %1056 = load float, float* %1055, align 4
  %1057 = fmul float %1053, %1056
  %1058 = fadd float %1052, %1057
  %1059 = load float, float* %1014, align 4
  %1060 = getelementptr inbounds float, float* %1054, i64 1
  %1061 = load float, float* %1060, align 4
  %1062 = fmul float %1059, %1061
  %1063 = fadd float %1058, %1062
  %1064 = load float, float* %1015, align 4
  %1065 = load float, float* %1054, align 4
  %1066 = fmul float %1064, %1065
  %1067 = fadd float %1063, %1066
  %1068 = getelementptr inbounds float, float* %1054, i64 3
  store float %1067, float* %1068, align 4
  %1069 = load i8, i8* %1037, align 1
  %1070 = uitofp i8 %1069 to float
  br i1 %1017, label %1071, label %1120

1071:                                             ; preds = %1035, %1102
  %1072 = phi float [ %1111, %1102 ], [ %1061, %1035 ]
  %1073 = phi float [ %1109, %1102 ], [ %1056, %1035 ]
  %1074 = phi float [ %1107, %1102 ], [ %1067, %1035 ]
  %1075 = phi float* [ %1105, %1102 ], [ %1054, %1035 ]
  %1076 = phi i64 [ %1097, %1102 ], [ 4, %1035 ]
  %1077 = phi i64 [ %1079, %1102 ], [ %1012, %1035 ]
  %1078 = phi float [ %1100, %1102 ], [ %1070, %1035 ]
  %1079 = add i64 %1077, %1012
  %1080 = getelementptr inbounds i8, i8* %1037, i64 %1079
  %1081 = load i8, i8* %1080, align 1
  %1082 = uitofp i8 %1081 to float
  %1083 = load float, float* %8, align 4
  %1084 = fmul float %1083, 5.000000e-01
  %1085 = fsub float %1082, %1078
  %1086 = fmul float %1085, %1084
  %1087 = load float, float* %1013, align 4
  %1088 = fmul float %1074, %1087
  %1089 = fadd float %1086, %1088
  %1090 = load float, float* %1014, align 4
  %1091 = fmul float %1073, %1090
  %1092 = fadd float %1089, %1091
  %1093 = load float, float* %1015, align 4
  %1094 = fmul float %1072, %1093
  %1095 = fadd float %1092, %1094
  %1096 = getelementptr inbounds float, float* %1075, i64 %1076
  store float %1095, float* %1096, align 4
  %1097 = add nuw nsw i64 %1076, 1
  %1098 = getelementptr inbounds i8, i8* %1037, i64 %1077
  %1099 = load i8, i8* %1098, align 1
  %1100 = uitofp i8 %1099 to float
  %1101 = icmp eq i64 %1097, %1021
  br i1 %1101, label %1112, label %1102

1102:                                             ; preds = %1071
  %1103 = add nsw i64 %1076, -2
  %1104 = add nsw i64 %1076, -1
  %1105 = load float*, float** %984, align 8
  %1106 = getelementptr inbounds float, float* %1105, i64 %1076
  %1107 = load float, float* %1106, align 4
  %1108 = getelementptr inbounds float, float* %1105, i64 %1104
  %1109 = load float, float* %1108, align 4
  %1110 = getelementptr inbounds float, float* %1105, i64 %1103
  %1111 = load float, float* %1110, align 4
  br label %1071

1112:                                             ; preds = %1071
  %1113 = shl i64 %1079, 32
  %1114 = ashr exact i64 %1113, 32
  %1115 = load float*, float** %984, align 8
  %1116 = getelementptr inbounds float, float* %1115, i64 %1022
  %1117 = load float, float* %1116, align 4
  %1118 = getelementptr inbounds float, float* %1115, i64 %1023
  %1119 = load float, float* %1118, align 4
  br label %1120

1120:                                             ; preds = %1035, %1112
  %1121 = phi float [ %1119, %1112 ], [ %1061, %1035 ]
  %1122 = phi float [ %1117, %1112 ], [ %1056, %1035 ]
  %1123 = phi float* [ %1115, %1112 ], [ %1054, %1035 ]
  %1124 = phi i64 [ %1114, %1112 ], [ %1012, %1035 ]
  %1125 = phi i32 [ %1020, %1112 ], [ 4, %1035 ]
  %1126 = phi i32 [ %1016, %1112 ], [ 1, %1035 ]
  %1127 = phi float [ %1100, %1112 ], [ %1070, %1035 ]
  %1128 = getelementptr inbounds i8, i8* %1037, i64 %1124
  %1129 = load i8, i8* %1128, align 1
  %1130 = uitofp i8 %1129 to float
  %1131 = load float, float* %8, align 4
  %1132 = fmul float %1131, 5.000000e-01
  %1133 = fsub float %1130, %1127
  %1134 = fmul float %1133, %1132
  %1135 = load float, float* %1013, align 4
  %1136 = add nsw i32 %1125, -1
  %1137 = sext i32 %1136 to i64
  %1138 = getelementptr inbounds float, float* %1123, i64 %1137
  %1139 = load float, float* %1138, align 4
  %1140 = fmul float %1135, %1139
  %1141 = fadd float %1134, %1140
  %1142 = load float, float* %1014, align 4
  %1143 = fmul float %1122, %1142
  %1144 = fadd float %1141, %1143
  %1145 = load float, float* %1015, align 4
  %1146 = fmul float %1121, %1145
  %1147 = fadd float %1144, %1146
  %1148 = zext i32 %1125 to i64
  %1149 = getelementptr inbounds float, float* %1123, i64 %1148
  store float %1147, float* %1149, align 4
  %1150 = load float*, float** %984, align 8
  %1151 = getelementptr inbounds float, float* %1150, i64 %1148
  %1152 = bitcast float* %1151 to i32*
  %1153 = load i32, i32* %1152, align 4
  %1154 = add nuw nsw i32 %1125, 1
  %1155 = zext i32 %1154 to i64
  %1156 = getelementptr inbounds float, float* %1150, i64 %1155
  %1157 = bitcast float* %1156 to i32*
  store i32 %1153, i32* %1157, align 4
  %1158 = load float*, float** %984, align 8
  %1159 = getelementptr inbounds float, float* %1158, i64 %1148
  %1160 = bitcast float* %1159 to i32*
  %1161 = load i32, i32* %1160, align 4
  %1162 = add nuw nsw i32 %1125, 2
  %1163 = zext i32 %1162 to i64
  %1164 = getelementptr inbounds float, float* %1158, i64 %1163
  %1165 = bitcast float* %1164 to i32*
  store i32 %1161, i32* %1165, align 4
  %1166 = load float*, float** %984, align 8
  %1167 = getelementptr inbounds float, float* %1166, i64 %1148
  %1168 = bitcast float* %1167 to i32*
  %1169 = load i32, i32* %1168, align 4
  %1170 = add nuw nsw i32 %1125, 3
  %1171 = zext i32 %1170 to i64
  %1172 = getelementptr inbounds float, float* %1166, i64 %1171
  %1173 = bitcast float* %1172 to i32*
  store i32 %1169, i32* %1173, align 4
  %1174 = icmp sgt i32 %1126, -1
  br i1 %1174, label %1175, label %1216

1175:                                             ; preds = %1120
  %1176 = sext i32 %1125 to i64
  br label %1177

1177:                                             ; preds = %1177, %1175
  %1178 = phi i64 [ %1176, %1175 ], [ %1214, %1177 ]
  %1179 = phi i32 [ %1024, %1175 ], [ %1212, %1177 ]
  %1180 = phi i32 [ %1126, %1175 ], [ %1213, %1177 ]
  %1181 = phi i8 [ %1040, %1175 ], [ %1211, %1177 ]
  %1182 = load float*, float** %984, align 8
  %1183 = getelementptr inbounds float, float* %1182, i64 %1178
  %1184 = load <2 x float>, <2 x float>* %1025, align 4
  %1185 = bitcast float* %1183 to <2 x float>*
  %1186 = load <2 x float>, <2 x float>* %1185, align 4
  %1187 = fmul <2 x float> %1186, %1184
  %1188 = extractelement <2 x float> %1187, i32 0
  %1189 = extractelement <2 x float> %1187, i32 1
  %1190 = fadd float %1188, %1189
  %1191 = add nsw i64 %1178, 2
  %1192 = getelementptr inbounds float, float* %1182, i64 %1191
  %1193 = load <2 x float>, <2 x float>* %1026, align 4
  %1194 = bitcast float* %1192 to <2 x float>*
  %1195 = load <2 x float>, <2 x float>* %1194, align 4
  %1196 = fmul <2 x float> %1193, %1195
  %1197 = extractelement <2 x float> %1196, i32 0
  %1198 = fadd float %1190, %1197
  %1199 = extractelement <2 x float> %1196, i32 1
  %1200 = fadd float %1198, %1199
  store float %1200, float* %1183, align 4
  %1201 = fadd float %1200, 5.000000e-01
  %1202 = fptosi float %1201 to i32
  %1203 = icmp slt i32 %1202, 0
  %1204 = icmp slt i32 %1202, 256
  %1205 = trunc i32 %1202 to i8
  %1206 = select i1 %1204, i8 %1205, i8 -1
  %1207 = select i1 %1203, i8 0, i8 %1206
  %1208 = sext i32 %1179 to i64
  %1209 = getelementptr inbounds i8, i8* %1039, i64 %1208
  store i8 %1207, i8* %1209, align 1
  %1210 = icmp ult i8 %1181, %1207
  %1211 = select i1 %1210, i8 %1207, i8 %1181
  %1212 = sub nsw i32 %1179, %6
  %1213 = add nsw i32 %1180, -1
  %1214 = add nsw i64 %1178, -1
  %1215 = icmp sgt i32 %1180, 0
  br i1 %1215, label %1177, label %1216

1216:                                             ; preds = %1177, %1120
  %1217 = phi i8 [ %1040, %1120 ], [ %1211, %1177 ]
  %1218 = add nuw nsw i32 %1038, 1
  %1219 = getelementptr inbounds i8, i8* %1037, i64 %1018
  %1220 = getelementptr inbounds i8, i8* %1039, i64 %1019
  %1221 = load float*, float** %984, align 8
  %1222 = icmp eq i32 %1218, %4
  br i1 %1222, label %1027, label %1035

1223:                                             ; preds = %1027, %1031
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %983) #8
  br label %1473

1224:                                             ; preds = %747
  %1225 = add nsw i32 %3, 6
  %1226 = bitcast %"class.std::__1::vector"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1226) #8
  %1227 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %1228 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %1229 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  %1230 = sext i32 %1225 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1226, i8 0, i64 24, i1 false) #8
  %1231 = icmp eq i32 %1225, 0
  br i1 %1231, label %1251, label %1232

1232:                                             ; preds = %1224
  %1233 = icmp slt i32 %1225, 0
  br i1 %1233, label %1234, label %1236

1234:                                             ; preds = %1232
  %1235 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1235) #9
  unreachable

1236:                                             ; preds = %1232
  %1237 = shl nsw i64 %1230, 2
  %1238 = tail call i8* @_Znwm(i64 %1237) #10
  %1239 = bitcast i8* %1238 to float*
  %1240 = bitcast %"class.std::__1::vector"* %12 to i8**
  store i8* %1238, i8** %1240, align 8
  %1241 = getelementptr inbounds float, float* %1239, i64 %1230
  store float* %1241, float** %1229, align 8
  %1242 = bitcast float** %1228 to i64*
  %1243 = ptrtoint i8* %1238 to i64
  %1244 = add nsw i64 %1230, -1
  %1245 = getelementptr float, float* %1239, i64 %1244
  %1246 = ptrtoint float* %1245 to i64
  %1247 = sub i64 4, %1243
  %1248 = add i64 %1247, %1246
  %1249 = and i64 %1248, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1238, i8 0, i64 %1249, i1 false) #8
  %1250 = ptrtoint float* %1241 to i64
  store i64 %1250, i64* %1242, align 8
  br label %1251

1251:                                             ; preds = %1236, %1224
  %1252 = phi float* [ null, %1224 ], [ %1239, %1236 ]
  %1253 = icmp sgt i32 %4, 0
  br i1 %1253, label %1254, label %1270

1254:                                             ; preds = %1251
  %1255 = getelementptr inbounds float, float* %8, i64 1
  %1256 = getelementptr inbounds float, float* %8, i64 2
  %1257 = getelementptr inbounds float, float* %8, i64 3
  %1258 = add nsw i32 %3, -1
  %1259 = icmp sgt i32 %1258, 1
  %1260 = sext i32 %1 to i64
  %1261 = sext i32 %2 to i64
  %1262 = sext i32 %7 to i64
  %1263 = add nsw i32 %3, 2
  %1264 = zext i32 %1263 to i64
  %1265 = sext i32 %3 to i64
  %1266 = sext i32 %1258 to i64
  %1267 = mul nsw i32 %1258, %6
  %1268 = bitcast float* %8 to <2 x float>*
  %1269 = bitcast float* %1256 to <2 x float>*
  br label %1278

1270:                                             ; preds = %1465, %1251
  %1271 = phi i8 [ 0, %1251 ], [ %1467, %1465 ]
  %1272 = phi float* [ %1252, %1251 ], [ %1466, %1465 ]
  %1273 = icmp eq float* %1272, null
  br i1 %1273, label %1472, label %1274

1274:                                             ; preds = %1270
  %1275 = ptrtoint float* %1272 to i64
  %1276 = bitcast float** %1228 to i64*
  store i64 %1275, i64* %1276, align 8
  %1277 = bitcast float* %1272 to i8*
  tail call void @_ZdlPv(i8* %1277) #10
  br label %1472

1278:                                             ; preds = %1465, %1254
  %1279 = phi float* [ %1252, %1254 ], [ %1466, %1465 ]
  %1280 = phi i8* [ %0, %1254 ], [ %1469, %1465 ]
  %1281 = phi i32 [ 0, %1254 ], [ %1468, %1465 ]
  %1282 = phi i8* [ %5, %1254 ], [ %1470, %1465 ]
  %1283 = phi i8 [ 0, %1254 ], [ %1467, %1465 ]
  %1284 = getelementptr inbounds float, float* %1279, i64 2
  store float 0.000000e+00, float* %1284, align 4
  %1285 = getelementptr inbounds float, float* %1279, i64 1
  store float 0.000000e+00, float* %1285, align 4
  %1286 = load float*, float** %1227, align 8
  store float 0.000000e+00, float* %1286, align 4
  %1287 = load i8, i8* %1280, align 1
  %1288 = uitofp i8 %1287 to float
  %1289 = load float, float* %8, align 4
  %1290 = fsub float %1288, %1288
  %1291 = fmul float %1289, %1290
  %1292 = load float, float* %1255, align 4
  %1293 = load float*, float** %1227, align 8
  %1294 = getelementptr inbounds float, float* %1293, i64 2
  %1295 = load float, float* %1294, align 4
  %1296 = fmul float %1292, %1295
  %1297 = fadd float %1291, %1296
  %1298 = load float, float* %1256, align 4
  %1299 = getelementptr inbounds float, float* %1293, i64 1
  %1300 = load float, float* %1299, align 4
  %1301 = fmul float %1298, %1300
  %1302 = fadd float %1297, %1301
  %1303 = load float, float* %1257, align 4
  %1304 = load float, float* %1293, align 4
  %1305 = fmul float %1303, %1304
  %1306 = fadd float %1302, %1305
  %1307 = getelementptr inbounds float, float* %1293, i64 3
  store float %1306, float* %1307, align 4
  %1308 = load i8, i8* %1280, align 1
  %1309 = uitofp i8 %1308 to float
  %1310 = getelementptr inbounds i8, i8* %1280, i64 %1260
  %1311 = load i8, i8* %1310, align 1
  %1312 = uitofp i8 %1311 to float
  br i1 %1259, label %1313, label %1360

1313:                                             ; preds = %1278, %1344
  %1314 = phi float [ %1353, %1344 ], [ %1300, %1278 ]
  %1315 = phi float [ %1351, %1344 ], [ %1295, %1278 ]
  %1316 = phi float [ %1349, %1344 ], [ %1306, %1278 ]
  %1317 = phi float* [ %1347, %1344 ], [ %1293, %1278 ]
  %1318 = phi i64 [ %1336, %1344 ], [ 4, %1278 ]
  %1319 = phi i64 [ %1322, %1344 ], [ %1260, %1278 ]
  %1320 = phi float [ %1342, %1344 ], [ %1312, %1278 ]
  %1321 = phi float [ %1339, %1344 ], [ %1309, %1278 ]
  %1322 = add i64 %1319, %1260
  %1323 = load float, float* %8, align 4
  %1324 = fsub float %1320, %1321
  %1325 = fmul float %1324, %1323
  %1326 = load float, float* %1255, align 4
  %1327 = fmul float %1316, %1326
  %1328 = fadd float %1325, %1327
  %1329 = load float, float* %1256, align 4
  %1330 = fmul float %1315, %1329
  %1331 = fadd float %1328, %1330
  %1332 = load float, float* %1257, align 4
  %1333 = fmul float %1314, %1332
  %1334 = fadd float %1331, %1333
  %1335 = getelementptr inbounds float, float* %1317, i64 %1318
  store float %1334, float* %1335, align 4
  %1336 = add nuw nsw i64 %1318, 1
  %1337 = getelementptr inbounds i8, i8* %1280, i64 %1319
  %1338 = load i8, i8* %1337, align 1
  %1339 = uitofp i8 %1338 to float
  %1340 = getelementptr inbounds i8, i8* %1280, i64 %1322
  %1341 = load i8, i8* %1340, align 1
  %1342 = uitofp i8 %1341 to float
  %1343 = icmp eq i64 %1336, %1264
  br i1 %1343, label %1354, label %1344

1344:                                             ; preds = %1313
  %1345 = add nsw i64 %1318, -2
  %1346 = add nsw i64 %1318, -1
  %1347 = load float*, float** %1227, align 8
  %1348 = getelementptr inbounds float, float* %1347, i64 %1318
  %1349 = load float, float* %1348, align 4
  %1350 = getelementptr inbounds float, float* %1347, i64 %1346
  %1351 = load float, float* %1350, align 4
  %1352 = getelementptr inbounds float, float* %1347, i64 %1345
  %1353 = load float, float* %1352, align 4
  br label %1313

1354:                                             ; preds = %1313
  %1355 = load float*, float** %1227, align 8
  %1356 = getelementptr inbounds float, float* %1355, i64 %1265
  %1357 = load float, float* %1356, align 4
  %1358 = getelementptr inbounds float, float* %1355, i64 %1266
  %1359 = load float, float* %1358, align 4
  br label %1360

1360:                                             ; preds = %1278, %1354
  %1361 = phi float [ %1359, %1354 ], [ %1300, %1278 ]
  %1362 = phi float [ %1357, %1354 ], [ %1295, %1278 ]
  %1363 = phi float* [ %1355, %1354 ], [ %1293, %1278 ]
  %1364 = phi i32 [ %1263, %1354 ], [ 4, %1278 ]
  %1365 = phi i32 [ %1258, %1354 ], [ 1, %1278 ]
  %1366 = phi float [ %1339, %1354 ], [ %1309, %1278 ]
  %1367 = phi float [ %1342, %1354 ], [ %1312, %1278 ]
  %1368 = load float, float* %8, align 4
  %1369 = fsub float %1367, %1366
  %1370 = fmul float %1369, %1368
  %1371 = load float, float* %1255, align 4
  %1372 = add nsw i32 %1364, -1
  %1373 = sext i32 %1372 to i64
  %1374 = getelementptr inbounds float, float* %1363, i64 %1373
  %1375 = load float, float* %1374, align 4
  %1376 = fmul float %1371, %1375
  %1377 = fadd float %1370, %1376
  %1378 = load float, float* %1256, align 4
  %1379 = fmul float %1362, %1378
  %1380 = fadd float %1377, %1379
  %1381 = load float, float* %1257, align 4
  %1382 = fmul float %1361, %1381
  %1383 = fadd float %1380, %1382
  %1384 = zext i32 %1364 to i64
  %1385 = getelementptr inbounds float, float* %1363, i64 %1384
  store float %1383, float* %1385, align 4
  %1386 = load float*, float** %1227, align 8
  %1387 = getelementptr inbounds float, float* %1386, i64 %1384
  %1388 = bitcast float* %1387 to i32*
  %1389 = load i32, i32* %1388, align 4
  %1390 = add nuw nsw i32 %1364, 1
  %1391 = zext i32 %1390 to i64
  %1392 = getelementptr inbounds float, float* %1386, i64 %1391
  %1393 = bitcast float* %1392 to i32*
  store i32 %1389, i32* %1393, align 4
  %1394 = load float*, float** %1227, align 8
  %1395 = getelementptr inbounds float, float* %1394, i64 %1384
  %1396 = bitcast float* %1395 to i32*
  %1397 = load i32, i32* %1396, align 4
  %1398 = add nuw nsw i32 %1364, 2
  %1399 = zext i32 %1398 to i64
  %1400 = getelementptr inbounds float, float* %1394, i64 %1399
  %1401 = bitcast float* %1400 to i32*
  store i32 %1397, i32* %1401, align 4
  %1402 = load float*, float** %1227, align 8
  %1403 = getelementptr inbounds float, float* %1402, i64 %1384
  %1404 = bitcast float* %1403 to i32*
  %1405 = load i32, i32* %1404, align 4
  %1406 = add nuw nsw i32 %1364, 3
  %1407 = zext i32 %1406 to i64
  %1408 = getelementptr inbounds float, float* %1402, i64 %1407
  %1409 = bitcast float* %1408 to i32*
  store i32 %1405, i32* %1409, align 4
  %1410 = load float*, float** %1227, align 8
  %1411 = icmp sgt i32 %1365, -1
  br i1 %1411, label %1412, label %1465

1412:                                             ; preds = %1360
  %1413 = getelementptr inbounds float, float* %1410, i64 %1391
  %1414 = load float, float* %1413, align 4
  %1415 = sext i32 %1364 to i64
  br label %1416

1416:                                             ; preds = %1458, %1412
  %1417 = phi float* [ %1410, %1412 ], [ %1462, %1458 ]
  %1418 = phi i64 [ %1415, %1412 ], [ %1459, %1458 ]
  %1419 = phi i32 [ %1267, %1412 ], [ %1461, %1458 ]
  %1420 = phi float [ %1414, %1412 ], [ %1424, %1458 ]
  %1421 = phi i32 [ %1365, %1412 ], [ %1460, %1458 ]
  %1422 = phi i8 [ %1283, %1412 ], [ %1456, %1458 ]
  %1423 = getelementptr inbounds float, float* %1417, i64 %1418
  %1424 = load float, float* %1423, align 4
  %1425 = fsub float %1420, %1424
  %1426 = load <2 x float>, <2 x float>* %1268, align 4
  %1427 = add nsw i64 %1418, 1
  %1428 = getelementptr inbounds float, float* %1417, i64 %1427
  %1429 = load float, float* %1428, align 4
  %1430 = insertelement <2 x float> undef, float %1425, i32 0
  %1431 = insertelement <2 x float> %1430, float %1429, i32 1
  %1432 = fmul <2 x float> %1431, %1426
  %1433 = extractelement <2 x float> %1432, i32 0
  %1434 = extractelement <2 x float> %1432, i32 1
  %1435 = fadd float %1433, %1434
  %1436 = add nsw i64 %1418, 2
  %1437 = getelementptr inbounds float, float* %1417, i64 %1436
  %1438 = load <2 x float>, <2 x float>* %1269, align 4
  %1439 = bitcast float* %1437 to <2 x float>*
  %1440 = load <2 x float>, <2 x float>* %1439, align 4
  %1441 = fmul <2 x float> %1438, %1440
  %1442 = extractelement <2 x float> %1441, i32 0
  %1443 = fadd float %1435, %1442
  %1444 = extractelement <2 x float> %1441, i32 1
  %1445 = fadd float %1443, %1444
  store float %1445, float* %1423, align 4
  %1446 = fadd float %1445, 5.000000e-01
  %1447 = fptosi float %1446 to i32
  %1448 = icmp slt i32 %1447, 0
  %1449 = icmp slt i32 %1447, 256
  %1450 = trunc i32 %1447 to i8
  %1451 = select i1 %1449, i8 %1450, i8 -1
  %1452 = select i1 %1448, i8 0, i8 %1451
  %1453 = sext i32 %1419 to i64
  %1454 = getelementptr inbounds i8, i8* %1282, i64 %1453
  store i8 %1452, i8* %1454, align 1
  %1455 = icmp ult i8 %1422, %1452
  %1456 = select i1 %1455, i8 %1452, i8 %1422
  %1457 = icmp sgt i32 %1421, 0
  br i1 %1457, label %1458, label %1463

1458:                                             ; preds = %1416
  %1459 = add nsw i64 %1418, -1
  %1460 = add nsw i32 %1421, -1
  %1461 = sub nsw i32 %1419, %6
  %1462 = load float*, float** %1227, align 8
  br label %1416

1463:                                             ; preds = %1416
  %1464 = load float*, float** %1227, align 8
  br label %1465

1465:                                             ; preds = %1463, %1360
  %1466 = phi float* [ %1410, %1360 ], [ %1464, %1463 ]
  %1467 = phi i8 [ %1283, %1360 ], [ %1456, %1463 ]
  %1468 = add nuw nsw i32 %1281, 1
  %1469 = getelementptr inbounds i8, i8* %1280, i64 %1261
  %1470 = getelementptr inbounds i8, i8* %1282, i64 %1262
  %1471 = icmp eq i32 %1468, %4
  br i1 %1471, label %1270, label %1278

1472:                                             ; preds = %1270, %1274
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1226) #8
  br label %1473

1473:                                             ; preds = %18, %747, %1472, %1223, %980, %746, %496, %252
  %1474 = phi i8 [ %544, %746 ], [ %300, %496 ], [ %72, %252 ], [ %1271, %1472 ], [ %1028, %1223 ], [ %801, %980 ], [ 0, %747 ], [ 0, %18 ]
  ret i8 %1474
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN4skia31SingleChannelRecursiveGaussianYEPKhiiiRKNS_15RecursiveFilterERK7SkISizePhiiib(i8* nocapture readonly, i32, i32, i32, %"class.skia::RecursiveFilter"* readonly dereferenceable(24), %struct.SkISize* nocapture readonly dereferenceable(8), i8* nocapture, i32, i32, i32, i1 zeroext) local_unnamed_addr #3 {
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %6, i64 %18
  %20 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %4, i64 0, i32 2, i64 0
  %21 = getelementptr inbounds %"class.skia::RecursiveFilter", %"class.skia::RecursiveFilter"* %4, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = tail call fastcc zeroext i8 @_ZN4skia12_GLOBAL__N_128SingleChannelRecursiveFilterEPKhiiiiPhiiPKfNS_15RecursiveFilter5OrderEb(i8* %13, i32 %1, i32 %3, i32 %15, i32 %17, i8* %19, i32 %7, i32 %9, float* %20, i32 %22, i1 zeroext %10)
  ret i8 %23
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
