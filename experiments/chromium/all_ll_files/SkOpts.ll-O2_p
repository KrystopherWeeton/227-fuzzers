; ModuleID = '../../third_party/skia/src/core/SkOpts.cpp'
source_filename = "../../third_party/skia/src/core/SkOpts.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkXfermode = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkBitmapProcState = type { %class.SkImage_Base*, %class.SkPixmap, %class.SkMatrix, i8, i32, i32, i8, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i64, i64, i32, i32, i16, [6 x i8], %class.SkSTArenaAlloc, void (i8*, i32, i32, i32*, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, {}* }
%class.SkImage_Base = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [136 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%"struct.skvm::InterpreterInstruction" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%union.Slot = type { %"struct.skvx::Vec.55" }
%"struct.skvx::Vec.55" = type { %"struct.skvx::Vec.56", %"struct.skvx::Vec.56" }
%"struct.skvx::Vec.56" = type { %"struct.skvx::Vec.57", %"struct.skvx::Vec.57" }
%"struct.skvx::Vec.57" = type { %"struct.skvx::Vec.58", %"struct.skvx::Vec.58" }
%"struct.skvx::Vec.58" = type { float }
%struct.SkRasterPipeline_CallbackCtx = type { void (%struct.SkRasterPipeline_CallbackCtx*, i32)*, [64 x float], float* }
%"class.(anonymous namespace)::Sk4pxXfermode" = type { %class.SkXfermode.base, [4 x i8] }
%class.SkXfermode.base = type { %class.SkRefCnt.base }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.(anonymous namespace)::Sk4px" = type { %"class.(anonymous namespace)::SkNx" }
%"class.(anonymous namespace)::SkNx" = type { <2 x i64> }
%"class.(anonymous namespace)::Sk4pxXfermode.6" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.8" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.10" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.12" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.14" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.16" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.18" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.20" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.22" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.24" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.26" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.28" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.30" = type { %class.SkXfermode.base, [4 x i8] }
%"class.(anonymous namespace)::Sk4pxXfermode.32" = type { %class.SkXfermode.base, [4 x i8] }

$_ZN4sse315create_xfermodeE11SkBlendMode = comdat any

$_ZN4sse316blit_mask_d32_a8EPjmPKhmjii = comdat any

$_ZN4sse316blit_row_color32EPjPKjij = comdat any

$_ZN4sse320blit_row_s32a_opaqueEPjPKjij = comdat any

$_ZN4sse312RGBA_to_BGRAEPjPKji = comdat any

$_ZN4sse312RGBA_to_rgbAEPjPKji = comdat any

$_ZN4sse312RGBA_to_bgrAEPjPKji = comdat any

$_ZN4sse311RGB_to_RGB1EPjPKhi = comdat any

$_ZN4sse311RGB_to_BGR1EPjPKhi = comdat any

$_ZN4sse312gray_to_RGB1EPjPKhi = comdat any

$_ZN4sse313grayA_to_RGBAEPjPKhi = comdat any

$_ZN4sse313grayA_to_rgbAEPjPKhi = comdat any

$_ZN4sse321inverted_CMYK_to_RGB1EPjPKji = comdat any

$_ZN4sse321inverted_CMYK_to_BGR1EPjPKji = comdat any

$_ZN4sse38memset16EPtti = comdat any

$_ZN4sse38memset32EPjji = comdat any

$_ZN4sse38memset64EPmmi = comdat any

$_ZN4sse313rect_memset16EPttimi = comdat any

$_ZN4sse313rect_memset32EPjjimi = comdat any

$_ZN4sse313rect_memset64EPmmimi = comdat any

$_ZN4sse312cubic_solverEffff = comdat any

$_ZN4sse37hash_fnEPKvmj = comdat any

$_ZN4sse323S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj = comdat any

$_ZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

@_ZN6SkOpts15create_xfermodeE = hidden local_unnamed_addr global %class.SkXfermode* (i32)* @_ZN4sse315create_xfermodeE11SkBlendMode, align 8
@_ZN6SkOpts16blit_mask_d32_a8E = hidden local_unnamed_addr global void (i32*, i64, i8*, i64, i32, i32, i32)* @_ZN4sse316blit_mask_d32_a8EPjmPKhmjii, align 8
@_ZN6SkOpts16blit_row_color32E = hidden local_unnamed_addr global void (i32*, i32*, i32, i32)* @_ZN4sse316blit_row_color32EPjPKjij, align 8
@_ZN6SkOpts20blit_row_s32a_opaqueE = hidden local_unnamed_addr global void (i32*, i32*, i32, i32)* @_ZN4sse320blit_row_s32a_opaqueEPjPKjij, align 8
@_ZN6SkOpts12RGBA_to_BGRAE = hidden local_unnamed_addr global void (i32*, i32*, i32)* @_ZN4sse312RGBA_to_BGRAEPjPKji, align 8
@_ZN6SkOpts12RGBA_to_rgbAE = hidden local_unnamed_addr global void (i32*, i32*, i32)* @_ZN4sse312RGBA_to_rgbAEPjPKji, align 8
@_ZN6SkOpts12RGBA_to_bgrAE = hidden local_unnamed_addr global void (i32*, i32*, i32)* @_ZN4sse312RGBA_to_bgrAEPjPKji, align 8
@_ZN6SkOpts11RGB_to_RGB1E = hidden local_unnamed_addr global void (i32*, i8*, i32)* @_ZN4sse311RGB_to_RGB1EPjPKhi, align 8
@_ZN6SkOpts11RGB_to_BGR1E = hidden local_unnamed_addr global void (i32*, i8*, i32)* @_ZN4sse311RGB_to_BGR1EPjPKhi, align 8
@_ZN6SkOpts12gray_to_RGB1E = hidden local_unnamed_addr global void (i32*, i8*, i32)* @_ZN4sse312gray_to_RGB1EPjPKhi, align 8
@_ZN6SkOpts13grayA_to_RGBAE = hidden local_unnamed_addr global void (i32*, i8*, i32)* @_ZN4sse313grayA_to_RGBAEPjPKhi, align 8
@_ZN6SkOpts13grayA_to_rgbAE = hidden local_unnamed_addr global void (i32*, i8*, i32)* @_ZN4sse313grayA_to_rgbAEPjPKhi, align 8
@_ZN6SkOpts21inverted_CMYK_to_RGB1E = hidden local_unnamed_addr global void (i32*, i32*, i32)* @_ZN4sse321inverted_CMYK_to_RGB1EPjPKji, align 8
@_ZN6SkOpts21inverted_CMYK_to_BGR1E = hidden local_unnamed_addr global void (i32*, i32*, i32)* @_ZN4sse321inverted_CMYK_to_BGR1EPjPKji, align 8
@_ZN6SkOpts8memset16E = hidden local_unnamed_addr global void (i16*, i16, i32)* @_ZN4sse38memset16EPtti, align 8
@_ZN6SkOpts8memset32E = hidden local_unnamed_addr global void (i32*, i32, i32)* @_ZN4sse38memset32EPjji, align 8
@_ZN6SkOpts8memset64E = hidden local_unnamed_addr global void (i64*, i64, i32)* @_ZN4sse38memset64EPmmi, align 8
@_ZN6SkOpts13rect_memset16E = hidden local_unnamed_addr global void (i16*, i16, i32, i64, i32)* @_ZN4sse313rect_memset16EPttimi, align 8
@_ZN6SkOpts13rect_memset32E = hidden local_unnamed_addr global void (i32*, i32, i32, i64, i32)* @_ZN4sse313rect_memset32EPjjimi, align 8
@_ZN6SkOpts13rect_memset64E = hidden local_unnamed_addr global void (i64*, i64, i32, i64, i32)* @_ZN4sse313rect_memset64EPmmimi, align 8
@_ZN6SkOpts12cubic_solverE = hidden local_unnamed_addr global float (float, float, float, float)* @_ZN4sse312cubic_solverEffff, align 8
@_ZN6SkOpts7hash_fnE = hidden local_unnamed_addr global i32 (i8*, i64, i32)* @_ZN4sse37hash_fnEPKvmj, align 8
@_ZN6SkOpts23S32_alpha_D32_filter_DXE = hidden local_unnamed_addr global void (%struct.SkBitmapProcState*, i32*, i32, i32*)* @_ZN4sse323S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj, align 8
@_ZN6SkOpts25S32_alpha_D32_filter_DXDYE = hidden local_unnamed_addr global void (%struct.SkBitmapProcState*, i32*, i32, i32*)* null, align 8
@_ZN6SkOpts14interpret_skvmE = hidden local_unnamed_addr global void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)* @_ZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv, align 8
@_ZN6SkOpts12stages_highpE = hidden local_unnamed_addr global [187 x void ()*] [void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8callbackEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12move_src_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12move_dst_srcEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7clamp_0EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7clamp_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7clamp_aEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11clamp_gamutEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8unpremulEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6premulEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10premul_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12force_opaqueEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L16force_opaque_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7set_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17unbounded_set_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7swap_rbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11swap_rb_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11black_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11white_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13uniform_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L23unbounded_uniform_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17uniform_color_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11seed_shaderEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6ditherEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7load_a8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11load_a8_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8store_a8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9gather_a8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8load_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12load_565_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9store_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10gather_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9load_4444EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13load_4444_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10store_4444EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11gather_4444EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8load_f16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12load_f16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9store_f16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10gather_f16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9load_af16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13load_af16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10store_af16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11gather_af16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10load_rgf16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L14load_rgf16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11store_rgf16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12gather_rgf16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8load_f32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12load_f32_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9store_f32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10gather_f32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10load_rgf32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11store_rgf32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9load_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13load_8888_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10store_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11gather_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9load_rg88EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13load_rg88_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10store_rg88EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11gather_rg88EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8load_a16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12load_a16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9store_a16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10gather_a16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11load_rg1616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L15load_rg1616_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12store_rg1616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13gather_rg1616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13load_16161616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17load_16161616_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L14store_16161616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L15gather_16161616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12load_1010102EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L16load_1010102_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13store_1010102EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L14gather_1010102EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13alpha_to_grayEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17alpha_to_gray_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L32bt709_luminance_or_luma_to_alphaEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L30bt709_luminance_or_luma_to_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17bilerp_clamp_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L18bicubic_clamp_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12store_u16_beEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8load_srcEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9store_srcEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11store_src_aEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8load_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9store_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8scale_u8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9scale_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13scale_1_floatEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12scale_nativeEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7lerp_u8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8lerp_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12lerp_1_floatEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11lerp_nativeEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7dstatopEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L5dstinEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6dstoutEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7dstoverEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7srcatopEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L5srcinEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6srcoutEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7srcoverEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L5clearEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8modulateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8multiplyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L5plus_EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6screenEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L4xor_EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9colorburnEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10colordodgeEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6darkenEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10differenceEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9exclusionEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9hardlightEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7lightenEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7overlayEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9softlightEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L3hueEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10saturationEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L5colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10luminosityEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17srcover_rgba_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L16matrix_translateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L22matrix_scale_translateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10matrix_2x3EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10matrix_3x3EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10matrix_3x4EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10matrix_4x5EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10matrix_4x3EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L18matrix_perspectiveEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10parametricEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6gamma_EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L5PQishEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6HLGishEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9HLGinvishEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8mirror_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8repeat_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8mirror_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8repeat_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7decal_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7decal_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L13decal_x_and_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L16check_decal_maskEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8negate_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8bilinearEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7bicubicEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bilinear_nxEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bilinear_pxEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bilinear_nyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bilinear_pyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_n3xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_n1xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_p1xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_p3xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_n3yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_n1yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_p1yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11bicubic_p3yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7save_xyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10accumulateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L9clamp_x_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10mirror_x_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10repeat_x_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L22evenly_spaced_gradientEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L8gradientEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L29evenly_spaced_2_stop_gradientEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L16xy_to_unit_angleEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L12xy_to_radiusEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L23xy_to_2pt_conical_stripEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L33xy_to_2pt_conical_focal_on_circleEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L30xy_to_2pt_conical_well_behavedEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L25xy_to_2pt_conical_smallerEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L25xy_to_2pt_conical_greaterEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L34alter_2pt_conical_compensate_focalEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L24alter_2pt_conical_unswapEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L20mask_2pt_conical_nanEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L28mask_2pt_conical_degeneratesEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L17apply_vector_maskEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11byte_tablesEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10rgb_to_hslEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L10hsl_to_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L15gauss_a_to_rgbaEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L6embossEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L7swizzleEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)], align 16
@_ZN6SkOpts17just_return_highpE = hidden local_unnamed_addr global void ()* bitcast (void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)* @_ZN4sse3L11just_returnEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), align 8
@_ZN6SkOpts20start_pipeline_highpE = hidden local_unnamed_addr global void (i64, i64, i64, i64, i8**)* @_ZN4sse3L14start_pipelineEmmmmPPv, align 8
@_ZN6SkOpts11stages_lowpE = hidden local_unnamed_addr global [187 x void ()*] [void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12move_src_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12move_dst_srcEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7clamp_0EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7clamp_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7clamp_aEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11clamp_gamutEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL6premulEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10premul_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12force_opaqueEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL16force_opaque_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7set_rgbEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7swap_rbEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11swap_rb_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11black_colorEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11white_colorEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13uniform_colorEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL17uniform_color_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11seed_shaderEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7load_a8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11load_a8_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8store_a8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9gather_a8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8load_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12load_565_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9store_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10gather_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9load_4444EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13load_4444_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10store_4444EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11gather_4444EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9load_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13load_8888_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10store_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11gather_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9load_rg88EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13load_rg88_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10store_rg88EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11gather_rg88EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13alpha_to_grayEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL17alpha_to_gray_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL32bt709_luminance_or_luma_to_alphaEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL30bt709_luminance_or_luma_to_rgbEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8load_srcEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9store_srcEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11store_src_aEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8load_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9store_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8scale_u8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9scale_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13scale_1_floatEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12scale_nativeEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7lerp_u8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8lerp_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12lerp_1_floatEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11lerp_nativeEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7dstatopEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL5dstinEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL6dstoutEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7dstoverEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7srcatopEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL5srcinEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL6srcoutEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7srcoverEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL5clearEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8modulateEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8multiplyEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL5plus_EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL6screenEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL4xor_EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL6darkenEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10differenceEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9exclusionEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9hardlightEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7lightenEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7overlayEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL17srcover_rgba_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL16matrix_translateEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL22matrix_scale_translateEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10matrix_2x3EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL18matrix_perspectiveEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7decal_xEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7decal_yEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL13decal_x_and_yEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL16check_decal_maskEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL9clamp_x_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10mirror_x_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL10repeat_x_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL22evenly_spaced_gradientEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL8gradientEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL29evenly_spaced_2_stop_gradientEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL16xy_to_unit_angleEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL12xy_to_radiusEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL6embossEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL7swizzleEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)], align 16
@_ZN6SkOpts16just_return_lowpE = hidden local_unnamed_addr global void ()* bitcast (void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)* @_ZN4sse34lowpL11just_returnEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), align 8
@_ZN6SkOpts19start_pipeline_lowpE = hidden local_unnamed_addr global void (i64, i64, i64, i64, i8**)* @_ZN4sse34lowpL14start_pipelineEmmmmPPv, align 8
@_ZZN6SkOpts4InitEvE4once = internal global { { { i8 } } } zeroinitializer, align 1
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.6"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.6"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.8"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.8"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.10"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.10"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.12"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.12"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.14"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.14"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.16"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.16"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.18"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.18"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.20"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.20"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.22"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.22"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.24"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.24"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.26"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.26"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.28"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.28"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.30"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.30"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEEE = internal unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.32"*)* @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%"class.(anonymous namespace)::Sk4pxXfermode.32"*, i32*, i32*, i32, i8*)* @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEE6xfer32EPjPKjiPKh to i8*)] }, align 8
@_ZL12crc32c_table = internal unnamed_addr constant [256 x i32] [i32 0, i32 -227835133, i32 -516198153, i32 324072436, i32 -946170081, i32 904991772, i32 648144872, i32 -724933397, i32 -1965467441, i32 2024987596, i32 1809983544, i32 -1719030981, i32 1296289744, i32 -1087877933, i32 -1401372889, i32 1578318884, i32 274646895, i32 -499825556, i32 -244992104, i32 51262619, i32 -675000208, i32 632279923, i32 922689671, i32 -996891772, i32 -1702387808, i32 1760304291, i32 2075979607, i32 -1982370732, i32 1562183871, i32 -1351185476, i32 -1138329528, i32 1313733451, i32 549293790, i32 -757723683, i32 -1048117719, i32 871202090, i32 -416867903, i32 357341890, i32 102525238, i32 -193467851, i32 -1436232175, i32 1477399826, i32 1264559846, i32 -1187764763, i32 1845379342, i32 -1617575411, i32 -1933233671, i32 2125378298, i32 820201905, i32 -1031222606, i32 -774358714, i32 598981189, i32 -143008082, i32 85089709, i32 373468761, i32 -467063462, i32 -1170599554, i32 1213305469, i32 1526817161, i32 -1452612982, i32 2107672161, i32 -1882520222, i32 -1667500394, i32 1861252501, i32 1098587580, i32 -1290756417, i32 -1606390453, i32 1378610760, i32 -2032039261, i32 1955203488, i32 1742404180, i32 -1783531177, i32 -878557837, i32 969524848, i32 714683780, i32 -655182201, i32 205050476, i32 -28094097, i32 -318528869, i32 526918040, i32 1361435347, i32 -1555146288, i32 -1340167644, i32 1114974503, i32 -1765847604, i32 1691668175, i32 2005155131, i32 -2047885768, i32 -604208612, i32 697762079, i32 986182379, i32 -928222744, i32 476452099, i32 -301099520, i32 -44210700, i32 255256311, i32 1640403810, i32 -1817374623, i32 -2130844779, i32 1922457750, i32 -1503918979, i32 1412925310, i32 1197962378, i32 -1257441399, i32 -350237779, i32 427051182, i32 170179418, i32 -129025959, i32 746937522, i32 -554770511, i32 -843174843, i32 1070968646, i32 1905808397, i32 -2081171698, i32 -1868356358, i32 1657317369, i32 -1241332974, i32 1147748369, i32 1463399397, i32 -1521340186, i32 -79622974, i32 153784257, i32 444234805, i32 -401473738, i32 1021025245, i32 -827320098, i32 -572462294, i32 797665321, i32 -2097792136, i32 1889384571, i32 1674398607, i32 -1851340660, i32 1164749927, i32 -1224265884, i32 -1537745776, i32 1446797203, i32 137323447, i32 -96149324, i32 -384560320, i32 461344835, i32 -810158936, i32 1037989803, i32 781091935, i32 -588970148, i32 -1834419177, i32 1623424788, i32 1939049696, i32 -2114449437, i32 1429367560, i32 -1487280117, i32 -1274471425, i32 1180866812, i32 410100952, i32 -367384613, i32 -112536529, i32 186734380, i32 -538233913, i32 763408580, i32 1053836080, i32 -860110797, i32 -1572096602, i32 1344288421, i32 1131464017, i32 -1323612590, i32 1708204729, i32 -1749376582, i32 -2065018290, i32 1988219213, i32 680717673, i32 -621187478, i32 -911630946, i32 1002577565, i32 -284657034, i32 493091189, i32 238226049, i32 -61306494, i32 -1307217207, i32 1082061258, i32 1395524158, i32 -1589280451, i32 1972364758, i32 -2015074603, i32 -1800104671, i32 1725896226, i32 952904198, i32 -894981883, i32 -638100751, i32 731699698, i32 -11092711, i32 222117402, i32 510512622, i32 -335130899, i32 -1014159676, i32 837199303, i32 582374963, i32 -790768336, i32 68661723, i32 -159632680, i32 -450051796, i32 390545967, i32 1230274059, i32 -1153434360, i32 -1469116676, i32 1510247935, i32 -1899042540, i32 2091215383, i32 1878366691, i32 -1650582816, i32 -741088853, i32 565732008, i32 854102364, i32 -1065151905, i32 340358836, i32 -433916489, i32 -177076669, i32 119113024, i32 1493875044, i32 -1419691417, i32 -1204696685, i32 1247431312, i32 -1634718085, i32 1828433272, i32 2141937292, i32 -1916740209, i32 -483350502, i32 291187481, i32 34330861, i32 -262120466, i32 615137029, i32 -691946490, i32 -980332558, i32 939183345, i32 1776939221, i32 -1685949482, i32 -1999470558, i32 2058945313, i32 -1368168502, i32 1545135305, i32 1330124605, i32 -1121741762, i32 -210866315, i32 17165430, i32 307568514, i32 -532767615, i32 888469610, i32 -962626711, i32 -707819363, i32 665062302, i32 2042050490, i32 -1948470087, i32 -1735637171, i32 1793573966, i32 -1104306011, i32 1279665062, i32 1595330642, i32 -1384295599], align 16
@_ZN5SkCpu15gCachedFeaturesE = external local_unnamed_addr global i32, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %class.SkXfermode* @_ZN4sse315create_xfermodeE11SkBlendMode(i32) #0 comdat {
  switch i32 %0, label %23 [
    i32 0, label %16
    i32 1, label %2
    i32 2, label %3
    i32 3, label %4
    i32 4, label %5
    i32 5, label %6
    i32 6, label %7
    i32 7, label %8
    i32 8, label %9
    i32 9, label %10
    i32 10, label %11
    i32 11, label %12
    i32 12, label %13
    i32 13, label %14
    i32 14, label %15
  ]

2:                                                ; preds = %1
  br label %16

3:                                                ; preds = %1
  br label %16

4:                                                ; preds = %1
  br label %16

5:                                                ; preds = %1
  br label %16

6:                                                ; preds = %1
  br label %16

7:                                                ; preds = %1
  br label %16

8:                                                ; preds = %1
  br label %16

9:                                                ; preds = %1
  br label %16

10:                                               ; preds = %1
  br label %16

11:                                               ; preds = %1
  br label %16

12:                                               ; preds = %1
  br label %16

13:                                               ; preds = %1
  br label %16

14:                                               ; preds = %1
  br label %16

15:                                               ; preds = %1
  br label %16

16:                                               ; preds = %1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12, %13, %14, %15
  %17 = phi i32 (...)** [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %15 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %14 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %13 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %12 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %11 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %10 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %9 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %8 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %7 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %6 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %5 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %4 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %3 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %2 ], [ bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %1 ]
  %18 = tail call i8* @_Znwm(i64 16) #19
  %19 = getelementptr inbounds i8, i8* %18, i64 8
  %20 = bitcast i8* %19 to i32*
  store i32 1, i32* %20, align 4
  %21 = bitcast i8* %18 to i32 (...)***
  store i32 (...)** %17, i32 (...)*** %21, align 8
  %22 = bitcast i8* %18 to %class.SkXfermode*
  br label %23

23:                                               ; preds = %16, %1
  %24 = phi %class.SkXfermode* [ null, %1 ], [ %22, %16 ]
  ret %class.SkXfermode* %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse316blit_mask_d32_a8EPjmPKhmjii(i32*, i64, i8*, i64, i32, i32, i32) #1 comdat {
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <2 x i64>, align 16
  %21 = alloca <2 x i64>, align 16
  %22 = alloca <2 x i64>, align 16
  %23 = icmp eq i32 %4, -16777216
  br i1 %23, label %24, label %210

24:                                               ; preds = %7
  %25 = icmp sgt i32 %6, 0
  br i1 %25, label %26, label %738

26:                                               ; preds = %24
  %27 = icmp sgt i32 %5, 0
  %28 = lshr i64 %1, 2
  %29 = bitcast <2 x i64>* %18 to i8*
  %30 = bitcast <2 x i64>* %18 to i32*
  %31 = bitcast <2 x i64>* %18 to <16 x i8>*
  %32 = bitcast <2 x i64>* %19 to i8*
  %33 = bitcast <2 x i64>* %19 to i32*
  %34 = bitcast <2 x i64>* %19 to <16 x i8>*
  %35 = bitcast <2 x i64>* %20 to i8*
  %36 = bitcast <2 x i64>* %20 to i32*
  %37 = bitcast <2 x i64>* %20 to <16 x i8>*
  %38 = bitcast <2 x i64>* %21 to i8*
  %39 = bitcast <2 x i64>* %21 to i32*
  %40 = bitcast <2 x i64>* %21 to <16 x i8>*
  %41 = bitcast <2 x i64>* %22 to i8*
  %42 = bitcast <2 x i64>* %22 to i32*
  %43 = bitcast <2 x i64>* %22 to <16 x i8>*
  br label %44

44:                                               ; preds = %206, %26
  %45 = phi i32 [ %6, %26 ], [ %48, %206 ]
  %46 = phi i32* [ %0, %26 ], [ %207, %206 ]
  %47 = phi i8* [ %2, %26 ], [ %208, %206 ]
  %48 = add nsw i32 %45, -1
  br i1 %27, label %49, label %206

49:                                               ; preds = %44, %54
  %50 = phi i32 [ %113, %54 ], [ %5, %44 ]
  %51 = phi i8* [ %112, %54 ], [ %47, %44 ]
  %52 = phi i32* [ %111, %54 ], [ %46, %44 ]
  %53 = icmp sgt i32 %50, 7
  br i1 %53, label %54, label %115

54:                                               ; preds = %49
  %55 = bitcast i32* %52 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %18, align 16
  %57 = bitcast i8* %51 to i32*
  %58 = load i32, i32* %57, align 1
  store i32 %58, i32* %30, align 16
  %59 = load <16 x i8>, <16 x i8>* %31, align 16
  %60 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <16 x i8> %60 to <8 x i16>
  %62 = shufflevector <8 x i16> %61, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29)
  %63 = bitcast <8 x i16> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = xor <16 x i8> %63, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = mul <8 x i16> %71, %66
  %74 = mul <8 x i16> %72, %67
  %75 = add <8 x i16> %73, %66
  %76 = add <8 x i16> %74, %67
  %77 = lshr <8 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %78 = lshr <8 x i16> %76, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %79 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %77, <8 x i16> %78) #18
  %80 = and <16 x i8> %63, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %81 = add <16 x i8> %80, %79
  %82 = getelementptr inbounds i32, i32* %52, i64 4
  %83 = bitcast i32* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 4
  %85 = getelementptr inbounds i8, i8* %51, i64 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %19, align 16
  %86 = bitcast i8* %85 to i32*
  %87 = load i32, i32* %86, align 1
  store i32 %87, i32* %33, align 16
  %88 = load <16 x i8>, <16 x i8>* %34, align 16
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = bitcast <16 x i8> %89 to <8 x i16>
  %91 = shufflevector <8 x i16> %90, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32)
  %92 = bitcast <8 x i16> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %84, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = bitcast <16 x i8> %94 to <8 x i16>
  %97 = xor <16 x i8> %92, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = shufflevector <16 x i8> %97, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %100 = bitcast <16 x i8> %98 to <8 x i16>
  %101 = bitcast <16 x i8> %99 to <8 x i16>
  %102 = mul <8 x i16> %100, %95
  %103 = mul <8 x i16> %101, %96
  %104 = add <8 x i16> %102, %95
  %105 = add <8 x i16> %103, %96
  %106 = lshr <8 x i16> %104, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = lshr <8 x i16> %105, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %108 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %106, <8 x i16> %107) #18
  %109 = and <16 x i8> %92, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %110 = add <16 x i8> %109, %108
  store <16 x i8> %81, <16 x i8>* %55, align 4
  store <16 x i8> %110, <16 x i8>* %83, align 4
  %111 = getelementptr inbounds i32, i32* %52, i64 8
  %112 = getelementptr inbounds i8, i8* %51, i64 8
  %113 = add nsw i32 %50, -8
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %49, label %206

115:                                              ; preds = %49
  %116 = icmp sgt i32 %50, 3
  br i1 %116, label %117, label %148

117:                                              ; preds = %115
  %118 = bitcast i32* %52 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %20, align 16
  %120 = bitcast i8* %51 to i32*
  %121 = load i32, i32* %120, align 1
  store i32 %121, i32* %36, align 16
  %122 = load <16 x i8>, <16 x i8>* %37, align 16
  %123 = shufflevector <16 x i8> %122, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %124 = bitcast <16 x i8> %123 to <8 x i16>
  %125 = shufflevector <8 x i16> %124, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35)
  %126 = bitcast <8 x i16> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %119, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %128 = shufflevector <16 x i8> %119, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %129 = bitcast <16 x i8> %127 to <8 x i16>
  %130 = bitcast <16 x i8> %128 to <8 x i16>
  %131 = xor <16 x i8> %126, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %132 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %133 = shufflevector <16 x i8> %131, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = bitcast <16 x i8> %132 to <8 x i16>
  %135 = bitcast <16 x i8> %133 to <8 x i16>
  %136 = mul <8 x i16> %134, %129
  %137 = mul <8 x i16> %135, %130
  %138 = add <8 x i16> %136, %129
  %139 = add <8 x i16> %137, %130
  %140 = lshr <8 x i16> %138, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %141 = lshr <8 x i16> %139, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %142 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %140, <8 x i16> %141) #18
  %143 = and <16 x i8> %126, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1>
  %144 = add <16 x i8> %143, %142
  store <16 x i8> %144, <16 x i8>* %118, align 4
  %145 = getelementptr inbounds i32, i32* %52, i64 4
  %146 = getelementptr inbounds i8, i8* %51, i64 4
  %147 = add nsw i32 %50, -4
  br label %148

148:                                              ; preds = %117, %115
  %149 = phi i32* [ %145, %117 ], [ %52, %115 ]
  %150 = phi i8* [ %146, %117 ], [ %51, %115 ]
  %151 = phi i32 [ %147, %117 ], [ %50, %115 ]
  %152 = icmp sgt i32 %151, 1
  br i1 %152, label %153, label %182

153:                                              ; preds = %148
  %154 = bitcast i32* %149 to i64*
  %155 = load i64, i64* %154, align 4
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = bitcast i8* %150 to i16*
  %158 = load i16, i16* %157, align 1
  %159 = zext i16 %158 to i32
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %21, align 16
  store i32 %159, i32* %39, align 16
  %160 = load <16 x i8>, <16 x i8>* %40, align 16
  %161 = shufflevector <16 x i8> %160, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %162 = bitcast <16 x i8> %161 to <8 x i16>
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38)
  %164 = bitcast <8 x i16> %163 to <16 x i8>
  %165 = bitcast <2 x i64> %156 to <16 x i8>
  %166 = shufflevector <16 x i8> %165, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %167 = bitcast <16 x i8> %166 to <8 x i16>
  %168 = xor <16 x i8> %164, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %169 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = bitcast <16 x i8> %169 to <8 x i16>
  %171 = mul <8 x i16> %170, %167
  %172 = add <8 x i16> %171, %167
  %173 = lshr <8 x i16> %172, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %174 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %173, <8 x i16> undef) #18
  %175 = and <16 x i8> %164, <i8 0, i8 0, i8 0, i8 -1, i8 0, i8 0, i8 0, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %176 = add <16 x i8> %175, %174
  %177 = bitcast <16 x i8> %176 to <2 x i64>
  %178 = extractelement <2 x i64> %177, i32 0
  store i64 %178, i64* %154, align 4
  %179 = getelementptr inbounds i32, i32* %149, i64 2
  %180 = getelementptr inbounds i8, i8* %150, i64 2
  %181 = add nsw i32 %151, -2
  br label %182

182:                                              ; preds = %153, %148
  %183 = phi i32* [ %179, %153 ], [ %149, %148 ]
  %184 = phi i8* [ %180, %153 ], [ %150, %148 ]
  %185 = phi i32 [ %181, %153 ], [ %151, %148 ]
  %186 = icmp sgt i32 %185, 0
  br i1 %186, label %187, label %206

187:                                              ; preds = %182
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %22, align 16
  %188 = load i32, i32* %183, align 4
  store i32 %188, i32* %42, align 16
  %189 = load <16 x i8>, <16 x i8>* %43, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41)
  %190 = load i8, i8* %184, align 1
  %191 = insertelement <16 x i8> undef, i8 %190, i32 0
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> zeroinitializer
  %193 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = bitcast <16 x i8> %193 to <8 x i16>
  %195 = xor <16 x i8> %192, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %196 = shufflevector <16 x i8> %195, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %197 = bitcast <16 x i8> %196 to <8 x i16>
  %198 = mul <8 x i16> %197, %194
  %199 = add <8 x i16> %198, %194
  %200 = lshr <8 x i16> %199, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %201 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %200, <8 x i16> undef) #18
  %202 = and <16 x i8> %192, <i8 0, i8 0, i8 0, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %203 = add <16 x i8> %202, %201
  %204 = bitcast <16 x i8> %203 to <4 x i32>
  %205 = extractelement <4 x i32> %204, i32 0
  store i32 %205, i32* %183, align 4
  br label %206

206:                                              ; preds = %54, %187, %182, %44
  %207 = getelementptr inbounds i32, i32* %46, i64 %28
  %208 = getelementptr inbounds i8, i8* %47, i64 %3
  %209 = icmp sgt i32 %48, 0
  br i1 %209, label %44, label %738

210:                                              ; preds = %7
  %211 = icmp ugt i32 %4, -16777217
  %212 = tail call i32 @_Z18SkPreMultiplyColorj(i32 %4) #18
  %213 = icmp sgt i32 %6, 0
  br i1 %211, label %214, label %446

214:                                              ; preds = %210
  br i1 %213, label %215, label %738

215:                                              ; preds = %214
  %216 = insertelement <4 x i32> undef, i32 %212, i32 0
  %217 = shufflevector <4 x i32> %216, <4 x i32> undef, <4 x i32> zeroinitializer
  %218 = icmp sgt i32 %5, 0
  %219 = bitcast <4 x i32> %217 to <16 x i8>
  %220 = shufflevector <16 x i8> %219, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %221 = shufflevector <16 x i8> %219, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %222 = bitcast <16 x i8> %220 to <8 x i16>
  %223 = bitcast <16 x i8> %221 to <8 x i16>
  %224 = lshr i64 %1, 2
  %225 = bitcast <2 x i64>* %8 to i8*
  %226 = bitcast <2 x i64>* %8 to i32*
  %227 = bitcast <2 x i64>* %8 to <16 x i8>*
  %228 = bitcast <2 x i64>* %9 to i8*
  %229 = bitcast <2 x i64>* %9 to i32*
  %230 = bitcast <2 x i64>* %9 to <16 x i8>*
  %231 = bitcast <2 x i64>* %10 to i8*
  %232 = bitcast <2 x i64>* %10 to i32*
  %233 = bitcast <2 x i64>* %10 to <16 x i8>*
  %234 = bitcast <2 x i64>* %11 to i8*
  %235 = bitcast <2 x i64>* %11 to i32*
  %236 = bitcast <2 x i64>* %11 to <16 x i8>*
  %237 = bitcast <2 x i64>* %12 to i8*
  %238 = bitcast <2 x i64>* %12 to i32*
  %239 = bitcast <2 x i64>* %12 to <16 x i8>*
  br label %240

240:                                              ; preds = %442, %215
  %241 = phi i32 [ %6, %215 ], [ %244, %442 ]
  %242 = phi i32* [ %0, %215 ], [ %443, %442 ]
  %243 = phi i8* [ %2, %215 ], [ %444, %442 ]
  %244 = add nsw i32 %241, -1
  br i1 %218, label %245, label %442

245:                                              ; preds = %240, %250
  %246 = phi i32 [ %329, %250 ], [ %5, %240 ]
  %247 = phi i8* [ %328, %250 ], [ %243, %240 ]
  %248 = phi i32* [ %327, %250 ], [ %242, %240 ]
  %249 = icmp sgt i32 %246, 7
  br i1 %249, label %250, label %331

250:                                              ; preds = %245
  %251 = bitcast i32* %248 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %225)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %8, align 16
  %253 = bitcast i8* %247 to i32*
  %254 = load i32, i32* %253, align 1
  store i32 %254, i32* %226, align 16
  %255 = load <16 x i8>, <16 x i8>* %227, align 16
  %256 = shufflevector <16 x i8> %255, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %257 = bitcast <16 x i8> %256 to <8 x i16>
  %258 = shufflevector <8 x i16> %257, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %225)
  %259 = bitcast <8 x i16> %258 to <16 x i8>
  %260 = shufflevector <16 x i8> %259, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %261 = shufflevector <16 x i8> %259, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %262 = bitcast <16 x i8> %260 to <8 x i16>
  %263 = bitcast <16 x i8> %261 to <8 x i16>
  %264 = mul <8 x i16> %262, %222
  %265 = mul <8 x i16> %263, %223
  %266 = add <8 x i16> %264, %222
  %267 = add <8 x i16> %265, %223
  %268 = lshr <8 x i16> %266, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %269 = lshr <8 x i16> %267, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %270 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %268, <8 x i16> %269) #18
  %271 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %272 = shufflevector <16 x i8> %252, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %273 = bitcast <16 x i8> %271 to <8 x i16>
  %274 = bitcast <16 x i8> %272 to <8 x i16>
  %275 = xor <16 x i8> %259, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %276 = shufflevector <16 x i8> %275, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %277 = shufflevector <16 x i8> %275, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %278 = bitcast <16 x i8> %276 to <8 x i16>
  %279 = bitcast <16 x i8> %277 to <8 x i16>
  %280 = mul <8 x i16> %278, %273
  %281 = mul <8 x i16> %279, %274
  %282 = add <8 x i16> %280, %273
  %283 = add <8 x i16> %281, %274
  %284 = lshr <8 x i16> %282, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %285 = lshr <8 x i16> %283, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %286 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %284, <8 x i16> %285) #18
  %287 = add <16 x i8> %286, %270
  %288 = getelementptr inbounds i32, i32* %248, i64 4
  %289 = bitcast i32* %288 to <16 x i8>*
  %290 = load <16 x i8>, <16 x i8>* %289, align 4
  %291 = getelementptr inbounds i8, i8* %247, i64 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %228)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %9, align 16
  %292 = bitcast i8* %291 to i32*
  %293 = load i32, i32* %292, align 1
  store i32 %293, i32* %229, align 16
  %294 = load <16 x i8>, <16 x i8>* %230, align 16
  %295 = shufflevector <16 x i8> %294, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %296 = bitcast <16 x i8> %295 to <8 x i16>
  %297 = shufflevector <8 x i16> %296, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %228)
  %298 = bitcast <8 x i16> %297 to <16 x i8>
  %299 = shufflevector <16 x i8> %298, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %300 = shufflevector <16 x i8> %298, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %301 = bitcast <16 x i8> %299 to <8 x i16>
  %302 = bitcast <16 x i8> %300 to <8 x i16>
  %303 = mul <8 x i16> %301, %222
  %304 = mul <8 x i16> %302, %223
  %305 = add <8 x i16> %303, %222
  %306 = add <8 x i16> %304, %223
  %307 = lshr <8 x i16> %305, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %308 = lshr <8 x i16> %306, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %309 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %307, <8 x i16> %308) #18
  %310 = shufflevector <16 x i8> %290, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %311 = shufflevector <16 x i8> %290, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %312 = bitcast <16 x i8> %310 to <8 x i16>
  %313 = bitcast <16 x i8> %311 to <8 x i16>
  %314 = xor <16 x i8> %298, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %315 = shufflevector <16 x i8> %314, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %316 = shufflevector <16 x i8> %314, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %317 = bitcast <16 x i8> %315 to <8 x i16>
  %318 = bitcast <16 x i8> %316 to <8 x i16>
  %319 = mul <8 x i16> %317, %312
  %320 = mul <8 x i16> %318, %313
  %321 = add <8 x i16> %319, %312
  %322 = add <8 x i16> %320, %313
  %323 = lshr <8 x i16> %321, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %324 = lshr <8 x i16> %322, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %325 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %323, <8 x i16> %324) #18
  %326 = add <16 x i8> %325, %309
  store <16 x i8> %287, <16 x i8>* %251, align 4
  store <16 x i8> %326, <16 x i8>* %289, align 4
  %327 = getelementptr inbounds i32, i32* %248, i64 8
  %328 = getelementptr inbounds i8, i8* %247, i64 8
  %329 = add nsw i32 %246, -8
  %330 = icmp sgt i32 %329, 0
  br i1 %330, label %245, label %442

331:                                              ; preds = %245
  %332 = icmp sgt i32 %246, 3
  br i1 %332, label %333, label %374

333:                                              ; preds = %331
  %334 = bitcast i32* %248 to <16 x i8>*
  %335 = load <16 x i8>, <16 x i8>* %334, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %231)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %10, align 16
  %336 = bitcast i8* %247 to i32*
  %337 = load i32, i32* %336, align 1
  store i32 %337, i32* %232, align 16
  %338 = load <16 x i8>, <16 x i8>* %233, align 16
  %339 = shufflevector <16 x i8> %338, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %340 = bitcast <16 x i8> %339 to <8 x i16>
  %341 = shufflevector <8 x i16> %340, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %231)
  %342 = bitcast <8 x i16> %341 to <16 x i8>
  %343 = shufflevector <16 x i8> %342, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %344 = shufflevector <16 x i8> %342, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %345 = bitcast <16 x i8> %343 to <8 x i16>
  %346 = bitcast <16 x i8> %344 to <8 x i16>
  %347 = mul <8 x i16> %345, %222
  %348 = mul <8 x i16> %346, %223
  %349 = add <8 x i16> %347, %222
  %350 = add <8 x i16> %348, %223
  %351 = lshr <8 x i16> %349, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %352 = lshr <8 x i16> %350, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %353 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %351, <8 x i16> %352) #18
  %354 = shufflevector <16 x i8> %335, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %355 = shufflevector <16 x i8> %335, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %356 = bitcast <16 x i8> %354 to <8 x i16>
  %357 = bitcast <16 x i8> %355 to <8 x i16>
  %358 = xor <16 x i8> %342, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %359 = shufflevector <16 x i8> %358, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %360 = shufflevector <16 x i8> %358, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %361 = bitcast <16 x i8> %359 to <8 x i16>
  %362 = bitcast <16 x i8> %360 to <8 x i16>
  %363 = mul <8 x i16> %361, %356
  %364 = mul <8 x i16> %362, %357
  %365 = add <8 x i16> %363, %356
  %366 = add <8 x i16> %364, %357
  %367 = lshr <8 x i16> %365, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %368 = lshr <8 x i16> %366, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %369 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %367, <8 x i16> %368) #18
  %370 = add <16 x i8> %369, %353
  store <16 x i8> %370, <16 x i8>* %334, align 4
  %371 = getelementptr inbounds i32, i32* %248, i64 4
  %372 = getelementptr inbounds i8, i8* %247, i64 4
  %373 = add nsw i32 %246, -4
  br label %374

374:                                              ; preds = %333, %331
  %375 = phi i32* [ %371, %333 ], [ %248, %331 ]
  %376 = phi i8* [ %372, %333 ], [ %247, %331 ]
  %377 = phi i32 [ %373, %333 ], [ %246, %331 ]
  %378 = icmp sgt i32 %377, 1
  br i1 %378, label %379, label %413

379:                                              ; preds = %374
  %380 = bitcast i32* %375 to i64*
  %381 = load i64, i64* %380, align 4
  %382 = insertelement <2 x i64> undef, i64 %381, i32 0
  %383 = bitcast i8* %376 to i16*
  %384 = load i16, i16* %383, align 1
  %385 = zext i16 %384 to i32
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %234)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %11, align 16
  store i32 %385, i32* %235, align 16
  %386 = load <16 x i8>, <16 x i8>* %236, align 16
  %387 = shufflevector <16 x i8> %386, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %388 = bitcast <16 x i8> %387 to <8 x i16>
  %389 = shufflevector <8 x i16> %388, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %234)
  %390 = bitcast <8 x i16> %389 to <16 x i8>
  %391 = shufflevector <16 x i8> %390, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %392 = bitcast <16 x i8> %391 to <8 x i16>
  %393 = mul <8 x i16> %392, %222
  %394 = add <8 x i16> %393, %222
  %395 = lshr <8 x i16> %394, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %396 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %395, <8 x i16> undef) #18
  %397 = bitcast <2 x i64> %382 to <16 x i8>
  %398 = shufflevector <16 x i8> %397, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %399 = bitcast <16 x i8> %398 to <8 x i16>
  %400 = xor <16 x i8> %390, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %401 = shufflevector <16 x i8> %400, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %402 = bitcast <16 x i8> %401 to <8 x i16>
  %403 = mul <8 x i16> %402, %399
  %404 = add <8 x i16> %403, %399
  %405 = lshr <8 x i16> %404, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %406 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %405, <8 x i16> undef) #18
  %407 = add <16 x i8> %406, %396
  %408 = bitcast <16 x i8> %407 to <2 x i64>
  %409 = extractelement <2 x i64> %408, i32 0
  store i64 %409, i64* %380, align 4
  %410 = getelementptr inbounds i32, i32* %375, i64 2
  %411 = getelementptr inbounds i8, i8* %376, i64 2
  %412 = add nsw i32 %377, -2
  br label %413

413:                                              ; preds = %379, %374
  %414 = phi i32* [ %410, %379 ], [ %375, %374 ]
  %415 = phi i8* [ %411, %379 ], [ %376, %374 ]
  %416 = phi i32 [ %412, %379 ], [ %377, %374 ]
  %417 = icmp sgt i32 %416, 0
  br i1 %417, label %418, label %442

418:                                              ; preds = %413
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %237)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %12, align 16
  %419 = load i32, i32* %414, align 4
  store i32 %419, i32* %238, align 16
  %420 = load <16 x i8>, <16 x i8>* %239, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %237)
  %421 = load i8, i8* %415, align 1
  %422 = insertelement <16 x i8> undef, i8 %421, i32 0
  %423 = shufflevector <16 x i8> %422, <16 x i8> undef, <16 x i32> zeroinitializer
  %424 = shufflevector <16 x i8> %423, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %425 = bitcast <16 x i8> %424 to <8 x i16>
  %426 = mul <8 x i16> %425, %222
  %427 = add <8 x i16> %426, %222
  %428 = lshr <8 x i16> %427, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %429 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %428, <8 x i16> undef) #18
  %430 = shufflevector <16 x i8> %420, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %431 = bitcast <16 x i8> %430 to <8 x i16>
  %432 = xor <16 x i8> %423, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %433 = shufflevector <16 x i8> %432, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %434 = bitcast <16 x i8> %433 to <8 x i16>
  %435 = mul <8 x i16> %434, %431
  %436 = add <8 x i16> %435, %431
  %437 = lshr <8 x i16> %436, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %438 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %437, <8 x i16> undef) #18
  %439 = add <16 x i8> %438, %429
  %440 = bitcast <16 x i8> %439 to <4 x i32>
  %441 = extractelement <4 x i32> %440, i32 0
  store i32 %441, i32* %414, align 4
  br label %442

442:                                              ; preds = %250, %418, %413, %240
  %443 = getelementptr inbounds i32, i32* %242, i64 %224
  %444 = getelementptr inbounds i8, i8* %243, i64 %3
  %445 = icmp sgt i32 %244, 0
  br i1 %445, label %240, label %738

446:                                              ; preds = %210
  br i1 %213, label %447, label %738

447:                                              ; preds = %446
  %448 = insertelement <4 x i32> undef, i32 %212, i32 0
  %449 = shufflevector <4 x i32> %448, <4 x i32> undef, <4 x i32> zeroinitializer
  %450 = icmp sgt i32 %5, 0
  %451 = bitcast <4 x i32> %449 to <16 x i8>
  %452 = shufflevector <16 x i8> %451, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %453 = shufflevector <16 x i8> %451, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %454 = bitcast <16 x i8> %452 to <8 x i16>
  %455 = bitcast <16 x i8> %453 to <8 x i16>
  %456 = lshr i64 %1, 2
  %457 = bitcast <2 x i64>* %13 to i8*
  %458 = bitcast <2 x i64>* %13 to i32*
  %459 = bitcast <2 x i64>* %13 to <16 x i8>*
  %460 = bitcast <2 x i64>* %14 to i8*
  %461 = bitcast <2 x i64>* %14 to i32*
  %462 = bitcast <2 x i64>* %14 to <16 x i8>*
  %463 = bitcast <2 x i64>* %15 to i8*
  %464 = bitcast <2 x i64>* %15 to i32*
  %465 = bitcast <2 x i64>* %15 to <16 x i8>*
  %466 = bitcast <2 x i64>* %16 to i8*
  %467 = bitcast <2 x i64>* %16 to i32*
  %468 = bitcast <2 x i64>* %16 to <16 x i8>*
  %469 = bitcast <2 x i64>* %17 to i8*
  %470 = bitcast <2 x i64>* %17 to i32*
  %471 = bitcast <2 x i64>* %17 to <16 x i8>*
  br label %472

472:                                              ; preds = %734, %447
  %473 = phi i32 [ %6, %447 ], [ %476, %734 ]
  %474 = phi i32* [ %0, %447 ], [ %735, %734 ]
  %475 = phi i8* [ %2, %447 ], [ %736, %734 ]
  %476 = add nsw i32 %473, -1
  br i1 %450, label %477, label %734

477:                                              ; preds = %472, %482
  %478 = phi i32 [ %581, %482 ], [ %5, %472 ]
  %479 = phi i8* [ %580, %482 ], [ %475, %472 ]
  %480 = phi i32* [ %579, %482 ], [ %474, %472 ]
  %481 = icmp sgt i32 %478, 7
  br i1 %481, label %482, label %583

482:                                              ; preds = %477
  %483 = bitcast i32* %480 to <16 x i8>*
  %484 = load <16 x i8>, <16 x i8>* %483, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %457)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %13, align 16
  %485 = bitcast i8* %479 to i32*
  %486 = load i32, i32* %485, align 1
  store i32 %486, i32* %458, align 16
  %487 = load <16 x i8>, <16 x i8>* %459, align 16
  %488 = shufflevector <16 x i8> %487, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %489 = bitcast <16 x i8> %488 to <8 x i16>
  %490 = shufflevector <8 x i16> %489, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %457)
  %491 = bitcast <8 x i16> %490 to <16 x i8>
  %492 = shufflevector <16 x i8> %491, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %493 = shufflevector <16 x i8> %491, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %494 = bitcast <16 x i8> %492 to <8 x i16>
  %495 = bitcast <16 x i8> %493 to <8 x i16>
  %496 = mul <8 x i16> %494, %454
  %497 = mul <8 x i16> %495, %455
  %498 = add <8 x i16> %496, %454
  %499 = add <8 x i16> %497, %455
  %500 = lshr <8 x i16> %498, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %501 = lshr <8 x i16> %499, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %502 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %500, <8 x i16> %501) #18
  %503 = bitcast <16 x i8> %502 to <4 x i32>
  %504 = lshr <4 x i32> %503, <i32 8, i32 8, i32 8, i32 8>
  %505 = bitcast <4 x i32> %504 to <16 x i8>
  %506 = icmp ugt <16 x i8> %502, %505
  %507 = select <16 x i1> %506, <16 x i8> %502, <16 x i8> %505
  %508 = bitcast <16 x i8> %507 to <4 x i32>
  %509 = lshr <4 x i32> %508, <i32 16, i32 16, i32 16, i32 16>
  %510 = bitcast <4 x i32> %509 to <16 x i8>
  %511 = icmp ugt <16 x i8> %507, %510
  %512 = select <16 x i1> %511, <16 x i8> %507, <16 x i8> %510
  %513 = shufflevector <16 x i8> %484, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %514 = shufflevector <16 x i8> %484, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %515 = bitcast <16 x i8> %513 to <8 x i16>
  %516 = bitcast <16 x i8> %514 to <8 x i16>
  %517 = xor <16 x i8> %512, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %518 = shufflevector <16 x i8> %517, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %519 = shufflevector <16 x i8> %517, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %520 = bitcast <16 x i8> %518 to <8 x i16>
  %521 = bitcast <16 x i8> %519 to <8 x i16>
  %522 = mul <8 x i16> %520, %515
  %523 = mul <8 x i16> %521, %516
  %524 = add <8 x i16> %522, %515
  %525 = add <8 x i16> %523, %516
  %526 = lshr <8 x i16> %524, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %527 = lshr <8 x i16> %525, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %528 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %526, <8 x i16> %527) #18
  %529 = add <16 x i8> %528, %502
  %530 = getelementptr inbounds i32, i32* %480, i64 4
  %531 = bitcast i32* %530 to <16 x i8>*
  %532 = load <16 x i8>, <16 x i8>* %531, align 4
  %533 = getelementptr inbounds i8, i8* %479, i64 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %460)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %14, align 16
  %534 = bitcast i8* %533 to i32*
  %535 = load i32, i32* %534, align 1
  store i32 %535, i32* %461, align 16
  %536 = load <16 x i8>, <16 x i8>* %462, align 16
  %537 = shufflevector <16 x i8> %536, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %538 = bitcast <16 x i8> %537 to <8 x i16>
  %539 = shufflevector <8 x i16> %538, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %460)
  %540 = bitcast <8 x i16> %539 to <16 x i8>
  %541 = shufflevector <16 x i8> %540, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %542 = shufflevector <16 x i8> %540, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %543 = bitcast <16 x i8> %541 to <8 x i16>
  %544 = bitcast <16 x i8> %542 to <8 x i16>
  %545 = mul <8 x i16> %543, %454
  %546 = mul <8 x i16> %544, %455
  %547 = add <8 x i16> %545, %454
  %548 = add <8 x i16> %546, %455
  %549 = lshr <8 x i16> %547, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %550 = lshr <8 x i16> %548, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %551 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %549, <8 x i16> %550) #18
  %552 = bitcast <16 x i8> %551 to <4 x i32>
  %553 = lshr <4 x i32> %552, <i32 8, i32 8, i32 8, i32 8>
  %554 = bitcast <4 x i32> %553 to <16 x i8>
  %555 = icmp ugt <16 x i8> %551, %554
  %556 = select <16 x i1> %555, <16 x i8> %551, <16 x i8> %554
  %557 = bitcast <16 x i8> %556 to <4 x i32>
  %558 = lshr <4 x i32> %557, <i32 16, i32 16, i32 16, i32 16>
  %559 = bitcast <4 x i32> %558 to <16 x i8>
  %560 = icmp ugt <16 x i8> %556, %559
  %561 = select <16 x i1> %560, <16 x i8> %556, <16 x i8> %559
  %562 = shufflevector <16 x i8> %532, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %563 = shufflevector <16 x i8> %532, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %564 = bitcast <16 x i8> %562 to <8 x i16>
  %565 = bitcast <16 x i8> %563 to <8 x i16>
  %566 = xor <16 x i8> %561, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %567 = shufflevector <16 x i8> %566, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %568 = shufflevector <16 x i8> %566, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %569 = bitcast <16 x i8> %567 to <8 x i16>
  %570 = bitcast <16 x i8> %568 to <8 x i16>
  %571 = mul <8 x i16> %569, %564
  %572 = mul <8 x i16> %570, %565
  %573 = add <8 x i16> %571, %564
  %574 = add <8 x i16> %572, %565
  %575 = lshr <8 x i16> %573, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %576 = lshr <8 x i16> %574, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %577 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %575, <8 x i16> %576) #18
  %578 = add <16 x i8> %577, %551
  store <16 x i8> %529, <16 x i8>* %483, align 4
  store <16 x i8> %578, <16 x i8>* %531, align 4
  %579 = getelementptr inbounds i32, i32* %480, i64 8
  %580 = getelementptr inbounds i8, i8* %479, i64 8
  %581 = add nsw i32 %478, -8
  %582 = icmp sgt i32 %581, 0
  br i1 %582, label %477, label %734

583:                                              ; preds = %477
  %584 = icmp sgt i32 %478, 3
  br i1 %584, label %585, label %636

585:                                              ; preds = %583
  %586 = bitcast i32* %480 to <16 x i8>*
  %587 = load <16 x i8>, <16 x i8>* %586, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %463)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %15, align 16
  %588 = bitcast i8* %479 to i32*
  %589 = load i32, i32* %588, align 1
  store i32 %589, i32* %464, align 16
  %590 = load <16 x i8>, <16 x i8>* %465, align 16
  %591 = shufflevector <16 x i8> %590, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %592 = bitcast <16 x i8> %591 to <8 x i16>
  %593 = shufflevector <8 x i16> %592, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %463)
  %594 = bitcast <8 x i16> %593 to <16 x i8>
  %595 = shufflevector <16 x i8> %594, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %596 = shufflevector <16 x i8> %594, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %597 = bitcast <16 x i8> %595 to <8 x i16>
  %598 = bitcast <16 x i8> %596 to <8 x i16>
  %599 = mul <8 x i16> %597, %454
  %600 = mul <8 x i16> %598, %455
  %601 = add <8 x i16> %599, %454
  %602 = add <8 x i16> %600, %455
  %603 = lshr <8 x i16> %601, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %604 = lshr <8 x i16> %602, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %605 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %603, <8 x i16> %604) #18
  %606 = bitcast <16 x i8> %605 to <4 x i32>
  %607 = lshr <4 x i32> %606, <i32 8, i32 8, i32 8, i32 8>
  %608 = bitcast <4 x i32> %607 to <16 x i8>
  %609 = icmp ugt <16 x i8> %605, %608
  %610 = select <16 x i1> %609, <16 x i8> %605, <16 x i8> %608
  %611 = bitcast <16 x i8> %610 to <4 x i32>
  %612 = lshr <4 x i32> %611, <i32 16, i32 16, i32 16, i32 16>
  %613 = bitcast <4 x i32> %612 to <16 x i8>
  %614 = icmp ugt <16 x i8> %610, %613
  %615 = select <16 x i1> %614, <16 x i8> %610, <16 x i8> %613
  %616 = shufflevector <16 x i8> %587, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %617 = shufflevector <16 x i8> %587, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %618 = bitcast <16 x i8> %616 to <8 x i16>
  %619 = bitcast <16 x i8> %617 to <8 x i16>
  %620 = xor <16 x i8> %615, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %621 = shufflevector <16 x i8> %620, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %622 = shufflevector <16 x i8> %620, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %623 = bitcast <16 x i8> %621 to <8 x i16>
  %624 = bitcast <16 x i8> %622 to <8 x i16>
  %625 = mul <8 x i16> %623, %618
  %626 = mul <8 x i16> %624, %619
  %627 = add <8 x i16> %625, %618
  %628 = add <8 x i16> %626, %619
  %629 = lshr <8 x i16> %627, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %630 = lshr <8 x i16> %628, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %631 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %629, <8 x i16> %630) #18
  %632 = add <16 x i8> %631, %605
  store <16 x i8> %632, <16 x i8>* %586, align 4
  %633 = getelementptr inbounds i32, i32* %480, i64 4
  %634 = getelementptr inbounds i8, i8* %479, i64 4
  %635 = add nsw i32 %478, -4
  br label %636

636:                                              ; preds = %585, %583
  %637 = phi i32* [ %633, %585 ], [ %480, %583 ]
  %638 = phi i8* [ %634, %585 ], [ %479, %583 ]
  %639 = phi i32 [ %635, %585 ], [ %478, %583 ]
  %640 = icmp sgt i32 %639, 1
  br i1 %640, label %641, label %690

641:                                              ; preds = %636
  %642 = bitcast i32* %637 to i64*
  %643 = load i64, i64* %642, align 4
  %644 = insertelement <2 x i64> undef, i64 %643, i32 0
  %645 = bitcast i8* %638 to i16*
  %646 = load i16, i16* %645, align 1
  %647 = zext i16 %646 to i32
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %466)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %16, align 16
  store i32 %647, i32* %467, align 16
  %648 = load <16 x i8>, <16 x i8>* %468, align 16
  %649 = shufflevector <16 x i8> %648, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %650 = bitcast <16 x i8> %649 to <8 x i16>
  %651 = shufflevector <8 x i16> %650, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %466)
  %652 = bitcast <8 x i16> %651 to <16 x i8>
  %653 = shufflevector <16 x i8> %652, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %654 = shufflevector <16 x i8> %652, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %655 = bitcast <16 x i8> %653 to <8 x i16>
  %656 = bitcast <16 x i8> %654 to <8 x i16>
  %657 = mul <8 x i16> %655, %454
  %658 = mul <8 x i16> %656, %455
  %659 = add <8 x i16> %657, %454
  %660 = add <8 x i16> %658, %455
  %661 = lshr <8 x i16> %659, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %662 = lshr <8 x i16> %660, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %663 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %661, <8 x i16> %662) #18
  %664 = bitcast <16 x i8> %663 to <4 x i32>
  %665 = lshr <4 x i32> %664, <i32 8, i32 8, i32 8, i32 8>
  %666 = bitcast <4 x i32> %665 to <16 x i8>
  %667 = icmp ugt <16 x i8> %663, %666
  %668 = select <16 x i1> %667, <16 x i8> %663, <16 x i8> %666
  %669 = bitcast <16 x i8> %668 to <4 x i32>
  %670 = lshr <4 x i32> %669, <i32 16, i32 16, i32 16, i32 16>
  %671 = bitcast <4 x i32> %670 to <16 x i8>
  %672 = icmp ugt <16 x i8> %668, %671
  %673 = select <16 x i1> %672, <16 x i8> %668, <16 x i8> %671
  %674 = bitcast <2 x i64> %644 to <16 x i8>
  %675 = shufflevector <16 x i8> %674, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %676 = bitcast <16 x i8> %675 to <8 x i16>
  %677 = xor <16 x i8> %673, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %678 = shufflevector <16 x i8> %677, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %679 = bitcast <16 x i8> %678 to <8 x i16>
  %680 = mul <8 x i16> %679, %676
  %681 = add <8 x i16> %680, %676
  %682 = lshr <8 x i16> %681, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %683 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %682, <8 x i16> undef) #18
  %684 = add <16 x i8> %683, %663
  %685 = bitcast <16 x i8> %684 to <2 x i64>
  %686 = extractelement <2 x i64> %685, i32 0
  store i64 %686, i64* %642, align 4
  %687 = getelementptr inbounds i32, i32* %637, i64 2
  %688 = getelementptr inbounds i8, i8* %638, i64 2
  %689 = add nsw i32 %639, -2
  br label %690

690:                                              ; preds = %641, %636
  %691 = phi i32* [ %687, %641 ], [ %637, %636 ]
  %692 = phi i8* [ %688, %641 ], [ %638, %636 ]
  %693 = phi i32 [ %689, %641 ], [ %639, %636 ]
  %694 = icmp sgt i32 %693, 0
  br i1 %694, label %695, label %734

695:                                              ; preds = %690
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %469)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %17, align 16
  %696 = load i32, i32* %691, align 4
  store i32 %696, i32* %470, align 16
  %697 = load <16 x i8>, <16 x i8>* %471, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %469)
  %698 = load i8, i8* %692, align 1
  %699 = insertelement <16 x i8> undef, i8 %698, i32 0
  %700 = shufflevector <16 x i8> %699, <16 x i8> undef, <16 x i32> zeroinitializer
  %701 = shufflevector <16 x i8> %700, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %702 = shufflevector <16 x i8> %700, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %703 = bitcast <16 x i8> %701 to <8 x i16>
  %704 = bitcast <16 x i8> %702 to <8 x i16>
  %705 = mul <8 x i16> %703, %454
  %706 = mul <8 x i16> %704, %455
  %707 = add <8 x i16> %705, %454
  %708 = add <8 x i16> %706, %455
  %709 = lshr <8 x i16> %707, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %710 = lshr <8 x i16> %708, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %711 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %709, <8 x i16> %710) #18
  %712 = bitcast <16 x i8> %711 to <4 x i32>
  %713 = lshr <4 x i32> %712, <i32 8, i32 8, i32 8, i32 8>
  %714 = bitcast <4 x i32> %713 to <16 x i8>
  %715 = icmp ugt <16 x i8> %711, %714
  %716 = select <16 x i1> %715, <16 x i8> %711, <16 x i8> %714
  %717 = bitcast <16 x i8> %716 to <4 x i32>
  %718 = lshr <4 x i32> %717, <i32 16, i32 16, i32 16, i32 16>
  %719 = bitcast <4 x i32> %718 to <16 x i8>
  %720 = icmp ugt <16 x i8> %716, %719
  %721 = select <16 x i1> %720, <16 x i8> %716, <16 x i8> %719
  %722 = shufflevector <16 x i8> %697, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %723 = bitcast <16 x i8> %722 to <8 x i16>
  %724 = xor <16 x i8> %721, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %725 = shufflevector <16 x i8> %724, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %726 = bitcast <16 x i8> %725 to <8 x i16>
  %727 = mul <8 x i16> %726, %723
  %728 = add <8 x i16> %727, %723
  %729 = lshr <8 x i16> %728, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %730 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %729, <8 x i16> undef) #18
  %731 = add <16 x i8> %730, %711
  %732 = bitcast <16 x i8> %731 to <4 x i32>
  %733 = extractelement <4 x i32> %732, i32 0
  store i32 %733, i32* %691, align 4
  br label %734

734:                                              ; preds = %482, %695, %690, %472
  %735 = getelementptr inbounds i32, i32* %474, i64 %456
  %736 = getelementptr inbounds i8, i8* %475, i64 %3
  %737 = icmp sgt i32 %476, 0
  br i1 %737, label %472, label %738

738:                                              ; preds = %734, %442, %206, %446, %214, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse316blit_row_color32EPjPKjij(i32*, i32*, i32, i32) #2 comdat {
  %5 = icmp sgt i32 %2, 3
  br i1 %5, label %6, label %57

6:                                                ; preds = %4
  %7 = lshr i32 %3, 24
  %8 = xor i32 %7, 255
  %9 = lshr i32 %8, 7
  %10 = add nuw nsw i32 %9, %8
  %11 = trunc i32 %10 to i8
  %12 = insertelement <16 x i8> undef, i8 %11, i32 0
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> zeroinitializer
  %14 = zext i32 %3 to i64
  %15 = shl nuw i64 %14, 32
  %16 = or i64 %15, %14
  %17 = bitcast i64 %16 to <8 x i8>
  %18 = shufflevector <8 x i8> %17, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = shufflevector <8 x i8> %17, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = shufflevector <16 x i8> %18, <16 x i8> %19, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21 = zext <16 x i8> %20 to <16 x i16>
  %22 = zext <16 x i8> %13 to <16 x i16>
  %23 = shl nuw <16 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = or <16 x i16> %23, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %25 = add nsw i32 %2, -4
  %26 = and i32 %25, 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %6
  %29 = bitcast i32* %1 to <8 x i8>*
  %30 = load <8 x i8>, <8 x i8>* %29, align 1
  %31 = getelementptr inbounds i32, i32* %1, i64 2
  %32 = bitcast i32* %31 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1
  %34 = shufflevector <8 x i8> %30, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = shufflevector <8 x i8> %33, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %36 = shufflevector <16 x i8> %34, <16 x i8> %35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = mul nuw <16 x i16> %37, %22
  %39 = add <16 x i16> %38, %24
  %40 = lshr <16 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = trunc <16 x i16> %40 to <16 x i8>
  %42 = bitcast i32* %0 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds i32, i32* %1, i64 4
  %44 = getelementptr inbounds i32, i32* %0, i64 4
  %45 = add nsw i32 %2, -4
  br label %46

46:                                               ; preds = %28, %6
  %47 = phi i32* [ %0, %6 ], [ %44, %28 ]
  %48 = phi i32* [ %1, %6 ], [ %43, %28 ]
  %49 = phi i32 [ %2, %6 ], [ %45, %28 ]
  %50 = phi i32* [ undef, %6 ], [ %43, %28 ]
  %51 = phi i32* [ undef, %6 ], [ %44, %28 ]
  %52 = icmp ult i32 %25, 4
  br i1 %52, label %53, label %105

53:                                               ; preds = %105, %46
  %54 = phi i32* [ %50, %46 ], [ %139, %105 ]
  %55 = phi i32* [ %51, %46 ], [ %140, %105 ]
  %56 = and i32 %2, 3
  br label %57

57:                                               ; preds = %53, %4
  %58 = phi i32 [ %2, %4 ], [ %56, %53 ]
  %59 = phi i32* [ %1, %4 ], [ %54, %53 ]
  %60 = phi i32* [ %0, %4 ], [ %55, %53 ]
  %61 = icmp sgt i32 %58, 0
  br i1 %61, label %62, label %179

62:                                               ; preds = %57
  %63 = lshr i32 %3, 24
  %64 = xor i32 %63, 255
  %65 = lshr i32 %64, 7
  %66 = add nuw nsw i32 %65, %64
  %67 = trunc i32 %66 to i8
  %68 = insertelement <16 x i8> undef, i8 %67, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = zext i32 %3 to i64
  %71 = shl nuw i64 %70, 32
  %72 = or i64 %71, %70
  %73 = bitcast i64 %72 to <8 x i8>
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = shufflevector <8 x i8> %73, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %76 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %77 = zext <16 x i8> %76 to <16 x i16>
  %78 = zext <16 x i8> %69 to <16 x i16>
  %79 = shl nuw <16 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = or <16 x i16> %79, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %81 = and i32 %58, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %100, label %83

83:                                               ; preds = %62
  %84 = add nsw i32 %58, -1
  %85 = getelementptr inbounds i32, i32* %59, i64 1
  %86 = load i32, i32* %59, align 4
  %87 = zext i32 %86 to i64
  %88 = bitcast i64 %87 to <8 x i8>
  %89 = shufflevector <8 x i8> %88, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %91 = zext <16 x i8> %90 to <16 x i16>
  %92 = mul nuw <16 x i16> %91, %78
  %93 = add <16 x i16> %92, %80
  %94 = lshr <16 x i16> %93, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %95 = trunc <16 x i16> %94 to <16 x i8>
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = extractelement <2 x i64> %96, i32 0
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds i32, i32* %60, i64 1
  store i32 %98, i32* %60, align 4
  br label %100

100:                                              ; preds = %62, %83
  %101 = phi i32* [ %60, %62 ], [ %99, %83 ]
  %102 = phi i32* [ %59, %62 ], [ %85, %83 ]
  %103 = phi i32 [ %58, %62 ], [ %84, %83 ]
  %104 = icmp eq i32 %58, 1
  br i1 %104, label %179, label %143

105:                                              ; preds = %46, %105
  %106 = phi i32* [ %140, %105 ], [ %47, %46 ]
  %107 = phi i32* [ %139, %105 ], [ %48, %46 ]
  %108 = phi i32 [ %141, %105 ], [ %49, %46 ]
  %109 = bitcast i32* %107 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1
  %111 = getelementptr inbounds i32, i32* %107, i64 2
  %112 = bitcast i32* %111 to <8 x i8>*
  %113 = load <8 x i8>, <8 x i8>* %112, align 1
  %114 = shufflevector <8 x i8> %110, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = shufflevector <8 x i8> %113, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %116 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %117 = zext <16 x i8> %116 to <16 x i16>
  %118 = mul nuw <16 x i16> %117, %22
  %119 = add <16 x i16> %118, %24
  %120 = lshr <16 x i16> %119, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %121 = trunc <16 x i16> %120 to <16 x i8>
  %122 = bitcast i32* %106 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %122, align 1
  %123 = getelementptr inbounds i32, i32* %107, i64 4
  %124 = getelementptr inbounds i32, i32* %106, i64 4
  %125 = bitcast i32* %123 to <8 x i8>*
  %126 = load <8 x i8>, <8 x i8>* %125, align 1
  %127 = getelementptr inbounds i32, i32* %107, i64 6
  %128 = bitcast i32* %127 to <8 x i8>*
  %129 = load <8 x i8>, <8 x i8>* %128, align 1
  %130 = shufflevector <8 x i8> %126, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = shufflevector <8 x i8> %129, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %132 = shufflevector <16 x i8> %130, <16 x i8> %131, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %133 = zext <16 x i8> %132 to <16 x i16>
  %134 = mul nuw <16 x i16> %133, %22
  %135 = add <16 x i16> %134, %24
  %136 = lshr <16 x i16> %135, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %137 = trunc <16 x i16> %136 to <16 x i8>
  %138 = bitcast i32* %124 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %138, align 1
  %139 = getelementptr inbounds i32, i32* %107, i64 8
  %140 = getelementptr inbounds i32, i32* %106, i64 8
  %141 = add nsw i32 %108, -8
  %142 = icmp sgt i32 %141, 3
  br i1 %142, label %105, label %53

143:                                              ; preds = %100, %143
  %144 = phi i32* [ %177, %143 ], [ %101, %100 ]
  %145 = phi i32* [ %163, %143 ], [ %102, %100 ]
  %146 = phi i32 [ %162, %143 ], [ %103, %100 ]
  %147 = getelementptr inbounds i32, i32* %145, i64 1
  %148 = load i32, i32* %145, align 4
  %149 = zext i32 %148 to i64
  %150 = bitcast i64 %149 to <8 x i8>
  %151 = shufflevector <8 x i8> %150, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %153 = zext <16 x i8> %152 to <16 x i16>
  %154 = mul nuw <16 x i16> %153, %78
  %155 = add <16 x i16> %154, %80
  %156 = lshr <16 x i16> %155, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %157 = trunc <16 x i16> %156 to <16 x i8>
  %158 = bitcast <16 x i8> %157 to <2 x i64>
  %159 = extractelement <2 x i64> %158, i32 0
  %160 = trunc i64 %159 to i32
  %161 = getelementptr inbounds i32, i32* %144, i64 1
  store i32 %160, i32* %144, align 4
  %162 = add nsw i32 %146, -2
  %163 = getelementptr inbounds i32, i32* %145, i64 2
  %164 = load i32, i32* %147, align 4
  %165 = zext i32 %164 to i64
  %166 = bitcast i64 %165 to <8 x i8>
  %167 = shufflevector <8 x i8> %166, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = shufflevector <16 x i8> %167, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %169 = zext <16 x i8> %168 to <16 x i16>
  %170 = mul nuw <16 x i16> %169, %78
  %171 = add <16 x i16> %170, %80
  %172 = lshr <16 x i16> %171, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %173 = trunc <16 x i16> %172 to <16 x i8>
  %174 = bitcast <16 x i8> %173 to <2 x i64>
  %175 = extractelement <2 x i64> %174, i32 0
  %176 = trunc i64 %175 to i32
  %177 = getelementptr inbounds i32, i32* %144, i64 2
  store i32 %176, i32* %161, align 4
  %178 = icmp sgt i32 %162, 0
  br i1 %178, label %143, label %179

179:                                              ; preds = %100, %143, %57
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse320blit_row_s32a_opaqueEPjPKjij(i32*, i32*, i32, i32) #1 comdat {
  %5 = icmp sgt i32 %2, 3
  br i1 %5, label %62, label %8

6:                                                ; preds = %62
  %7 = and i32 %2, 3
  br label %8

8:                                                ; preds = %6, %4
  %9 = phi i32* [ %1, %4 ], [ %87, %6 ]
  %10 = phi i32 [ %2, %4 ], [ %7, %6 ]
  %11 = phi i32* [ %0, %4 ], [ %88, %6 ]
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %113

13:                                               ; preds = %8
  %14 = add nsw i32 %10, -1
  %15 = zext i32 %14 to i64
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i64 %16, 4
  br i1 %17, label %18, label %22

18:                                               ; preds = %60, %22, %13
  %19 = phi i32* [ %11, %22 ], [ %11, %13 ], [ %33, %60 ]
  %20 = phi i32 [ %10, %22 ], [ %10, %13 ], [ %35, %60 ]
  %21 = phi i32* [ %9, %22 ], [ %9, %13 ], [ %36, %60 ]
  br label %91

22:                                               ; preds = %13
  %23 = add nsw i32 %10, -1
  %24 = zext i32 %23 to i64
  %25 = add nuw nsw i64 %24, 1
  %26 = getelementptr i32, i32* %11, i64 %25
  %27 = getelementptr i32, i32* %9, i64 %25
  %28 = icmp ult i32* %11, %27
  %29 = icmp ult i32* %9, %26
  %30 = and i1 %28, %29
  br i1 %30, label %18, label %31

31:                                               ; preds = %22
  %32 = and i64 %16, 8589934588
  %33 = getelementptr i32, i32* %11, i64 %32
  %34 = trunc i64 %32 to i32
  %35 = sub i32 %10, %34
  %36 = getelementptr i32, i32* %9, i64 %32
  br label %37

37:                                               ; preds = %37, %31
  %38 = phi i64 [ 0, %31 ], [ %58, %37 ]
  %39 = getelementptr i32, i32* %11, i64 %38
  %40 = getelementptr i32, i32* %9, i64 %38
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4, !alias.scope !2
  %43 = bitcast i32* %39 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !alias.scope !5, !noalias !2
  %45 = lshr <4 x i32> %42, <i32 24, i32 24, i32 24, i32 24>
  %46 = sub nuw nsw <4 x i32> <i32 256, i32 256, i32 256, i32 256>, %45
  %47 = and <4 x i32> %44, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %48 = mul <4 x i32> %47, %46
  %49 = lshr <4 x i32> %48, <i32 8, i32 8, i32 8, i32 8>
  %50 = lshr <4 x i32> %44, <i32 8, i32 8, i32 8, i32 8>
  %51 = and <4 x i32> %50, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %52 = mul <4 x i32> %51, %46
  %53 = and <4 x i32> %49, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %54 = and <4 x i32> %52, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %55 = or <4 x i32> %53, %54
  %56 = add <4 x i32> %55, %42
  %57 = bitcast i32* %39 to <4 x i32>*
  store <4 x i32> %56, <4 x i32>* %57, align 4, !alias.scope !5, !noalias !2
  %58 = add i64 %38, 4
  %59 = icmp eq i64 %58, %32
  br i1 %59, label %60, label %37, !llvm.loop !7

60:                                               ; preds = %37
  %61 = icmp eq i64 %16, %32
  br i1 %61, label %113, label %18

62:                                               ; preds = %4, %62
  %63 = phi i32* [ %88, %62 ], [ %0, %4 ]
  %64 = phi i32 [ %89, %62 ], [ %2, %4 ]
  %65 = phi i32* [ %87, %62 ], [ %1, %4 ]
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 1
  %68 = bitcast i32* %63 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 1
  %70 = lshr <4 x i32> %67, <i32 24, i32 24, i32 24, i32 24>
  %71 = sub nuw nsw <4 x i32> <i32 256, i32 256, i32 256, i32 256>, %70
  %72 = shl nuw nsw <4 x i32> %71, <i32 16, i32 16, i32 16, i32 16>
  %73 = or <4 x i32> %72, %71
  %74 = and <8 x i16> %69, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %75 = bitcast <4 x i32> %73 to <8 x i16>
  %76 = mul <8 x i16> %74, %75
  %77 = lshr <8 x i16> %76, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %78 = bitcast <8 x i16> %77 to <2 x i64>
  %79 = lshr <8 x i16> %69, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = mul <8 x i16> %79, %75
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = and <2 x i64> %81, <i64 -71777214294589696, i64 -71777214294589696>
  %83 = or <2 x i64> %82, %78
  %84 = bitcast <2 x i64> %83 to <4 x i32>
  %85 = add <4 x i32> %67, %84
  %86 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %86, align 1
  %87 = getelementptr inbounds i32, i32* %65, i64 4
  %88 = getelementptr inbounds i32, i32* %63, i64 4
  %89 = add nsw i32 %64, -4
  %90 = icmp sgt i32 %89, 3
  br i1 %90, label %62, label %6

91:                                               ; preds = %18, %91
  %92 = phi i32* [ %111, %91 ], [ %19, %18 ]
  %93 = phi i32 [ %95, %91 ], [ %20, %18 ]
  %94 = phi i32* [ %110, %91 ], [ %21, %18 ]
  %95 = add nsw i32 %93, -1
  %96 = load i32, i32* %94, align 4
  %97 = load i32, i32* %92, align 4
  %98 = lshr i32 %96, 24
  %99 = sub nuw nsw i32 256, %98
  %100 = and i32 %97, 16711935
  %101 = mul i32 %100, %99
  %102 = lshr i32 %101, 8
  %103 = lshr i32 %97, 8
  %104 = and i32 %103, 16711935
  %105 = mul i32 %104, %99
  %106 = and i32 %102, 16711935
  %107 = and i32 %105, -16711936
  %108 = or i32 %106, %107
  %109 = add i32 %108, %96
  store i32 %109, i32* %92, align 4
  %110 = getelementptr inbounds i32, i32* %94, i64 1
  %111 = getelementptr inbounds i32, i32* %92, i64 1
  %112 = icmp sgt i32 %95, 0
  br i1 %112, label %91, label %113, !llvm.loop !9

113:                                              ; preds = %91, %60, %8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse312RGBA_to_BGRAEPjPKji(i32*, i32*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %92

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 8
  br i1 %7, label %46, label %8

8:                                                ; preds = %5
  %9 = getelementptr i32, i32* %0, i64 %6
  %10 = getelementptr i32, i32* %1, i64 %6
  %11 = icmp ugt i32* %10, %0
  %12 = icmp ugt i32* %9, %1
  %13 = and i1 %11, %12
  br i1 %13, label %46, label %14

14:                                               ; preds = %8
  %15 = and i64 %6, 4294967288
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %42, %16 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !10
  %21 = getelementptr inbounds i32, i32* %18, i64 4
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4, !alias.scope !10
  %24 = lshr <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %25 = lshr <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %26 = shl <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %27 = shl <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %28 = and <4 x i32> %26, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %29 = and <4 x i32> %27, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %30 = and <4 x i32> %24, <i32 255, i32 255, i32 255, i32 255>
  %31 = and <4 x i32> %25, <i32 255, i32 255, i32 255, i32 255>
  %32 = and <4 x i32> %20, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %33 = and <4 x i32> %23, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %34 = or <4 x i32> %28, %32
  %35 = or <4 x i32> %29, %33
  %36 = or <4 x i32> %34, %30
  %37 = or <4 x i32> %35, %31
  %38 = getelementptr inbounds i32, i32* %0, i64 %17
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %39, align 4, !alias.scope !13, !noalias !10
  %40 = getelementptr inbounds i32, i32* %38, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %41, align 4, !alias.scope !13, !noalias !10
  %42 = add i64 %17, 8
  %43 = icmp eq i64 %42, %15
  br i1 %43, label %44, label %16, !llvm.loop !15

44:                                               ; preds = %16
  %45 = icmp eq i64 %15, %6
  br i1 %45, label %92, label %46

46:                                               ; preds = %44, %8, %5
  %47 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %15, %44 ]
  %48 = xor i64 %47, -1
  %49 = and i64 %6, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %63, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i32, i32* %1, i64 %47
  %53 = load i32, i32* %52, align 4
  %54 = lshr i32 %53, 16
  %55 = shl i32 %53, 16
  %56 = and i32 %55, 16711680
  %57 = and i32 %54, 255
  %58 = and i32 %53, -16711936
  %59 = or i32 %56, %58
  %60 = or i32 %59, %57
  %61 = getelementptr inbounds i32, i32* %0, i64 %47
  store i32 %60, i32* %61, align 4
  %62 = or i64 %47, 1
  br label %63

63:                                               ; preds = %46, %51
  %64 = phi i64 [ %47, %46 ], [ %62, %51 ]
  %65 = sub nsw i64 0, %6
  %66 = icmp eq i64 %48, %65
  br i1 %66, label %92, label %67

67:                                               ; preds = %63, %67
  %68 = phi i64 [ %90, %67 ], [ %64, %63 ]
  %69 = getelementptr inbounds i32, i32* %1, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = lshr i32 %70, 16
  %72 = shl i32 %70, 16
  %73 = and i32 %72, 16711680
  %74 = and i32 %71, 255
  %75 = and i32 %70, -16711936
  %76 = or i32 %73, %75
  %77 = or i32 %76, %74
  %78 = getelementptr inbounds i32, i32* %0, i64 %68
  store i32 %77, i32* %78, align 4
  %79 = add nuw nsw i64 %68, 1
  %80 = getelementptr inbounds i32, i32* %1, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 16
  %83 = shl i32 %81, 16
  %84 = and i32 %83, 16711680
  %85 = and i32 %82, 255
  %86 = and i32 %81, -16711936
  %87 = or i32 %84, %86
  %88 = or i32 %87, %85
  %89 = getelementptr inbounds i32, i32* %0, i64 %79
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %68, 2
  %91 = icmp eq i64 %90, %6
  br i1 %91, label %92, label %67, !llvm.loop !16

92:                                               ; preds = %63, %67, %44, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse312RGBA_to_rgbAEPjPKji(i32*, i32*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %96

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 4
  br i1 %7, label %57, label %8

8:                                                ; preds = %5
  %9 = getelementptr i32, i32* %0, i64 %6
  %10 = getelementptr i32, i32* %1, i64 %6
  %11 = icmp ugt i32* %10, %0
  %12 = icmp ugt i32* %9, %1
  %13 = and i1 %11, %12
  br i1 %13, label %57, label %14

14:                                               ; preds = %8
  %15 = and i64 %6, 4294967292
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %53, %16 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !17
  %21 = lshr <4 x i32> %20, <i32 24, i32 24, i32 24, i32 24>
  %22 = lshr <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %23 = lshr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %24 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %25 = mul nuw nsw <4 x i32> %24, %21
  %26 = trunc <4 x i32> %25 to <4 x i16>
  %27 = add nuw <4 x i16> %26, <i16 127, i16 127, i16 127, i16 127>
  %28 = udiv <4 x i16> %27, <i16 255, i16 255, i16 255, i16 255>
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = and <4 x i32> %23, <i32 255, i32 255, i32 255, i32 255>
  %31 = mul nuw nsw <4 x i32> %30, %21
  %32 = trunc <4 x i32> %31 to <4 x i16>
  %33 = add nuw <4 x i16> %32, <i16 127, i16 127, i16 127, i16 127>
  %34 = udiv <4 x i16> %33, <i16 255, i16 255, i16 255, i16 255>
  %35 = zext <4 x i16> %34 to <4 x i32>
  %36 = and <4 x i32> %20, <i32 255, i32 255, i32 255, i32 255>
  %37 = mul nuw nsw <4 x i32> %36, %21
  %38 = trunc <4 x i32> %37 to <4 x i16>
  %39 = add nuw <4 x i16> %38, <i16 127, i16 127, i16 127, i16 127>
  %40 = udiv <4 x i16> %39, <i16 255, i16 255, i16 255, i16 255>
  %41 = and <4 x i32> %20, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %42 = shl nuw nsw <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %43 = and <4 x i32> %42, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %44 = shl nuw nsw <4 x i32> %35, <i32 8, i32 8, i32 8, i32 8>
  %45 = and <4 x i32> %44, <i32 65280, i32 65280, i32 65280, i32 65280>
  %46 = and <4 x i16> %40, <i16 255, i16 255, i16 255, i16 255>
  %47 = zext <4 x i16> %46 to <4 x i32>
  %48 = or <4 x i32> %41, %47
  %49 = or <4 x i32> %48, %43
  %50 = or <4 x i32> %49, %45
  %51 = getelementptr inbounds i32, i32* %0, i64 %17
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %52, align 4, !alias.scope !20, !noalias !17
  %53 = add i64 %17, 4
  %54 = icmp eq i64 %53, %15
  br i1 %54, label %55, label %16, !llvm.loop !22

55:                                               ; preds = %16
  %56 = icmp eq i64 %15, %6
  br i1 %56, label %96, label %57

57:                                               ; preds = %55, %8, %5
  %58 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %15, %55 ]
  br label %59

59:                                               ; preds = %57, %59
  %60 = phi i64 [ %94, %59 ], [ %58, %57 ]
  %61 = getelementptr inbounds i32, i32* %1, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = lshr i32 %62, 24
  %64 = lshr i32 %62, 16
  %65 = lshr i32 %62, 8
  %66 = and i32 %64, 255
  %67 = mul nuw nsw i32 %66, %63
  %68 = trunc i32 %67 to i16
  %69 = add nuw i16 %68, 127
  %70 = udiv i16 %69, 255
  %71 = zext i16 %70 to i32
  %72 = and i32 %65, 255
  %73 = mul nuw nsw i32 %72, %63
  %74 = trunc i32 %73 to i16
  %75 = add nuw i16 %74, 127
  %76 = udiv i16 %75, 255
  %77 = zext i16 %76 to i32
  %78 = and i32 %62, 255
  %79 = mul nuw nsw i32 %78, %63
  %80 = trunc i32 %79 to i16
  %81 = add nuw i16 %80, 127
  %82 = udiv i16 %81, 255
  %83 = and i32 %62, -16777216
  %84 = shl nuw nsw i32 %71, 16
  %85 = and i32 %84, 16711680
  %86 = shl nuw nsw i32 %77, 8
  %87 = and i32 %86, 65280
  %88 = and i16 %82, 255
  %89 = zext i16 %88 to i32
  %90 = or i32 %83, %89
  %91 = or i32 %90, %85
  %92 = or i32 %91, %87
  %93 = getelementptr inbounds i32, i32* %0, i64 %60
  store i32 %92, i32* %93, align 4
  %94 = add nuw nsw i64 %60, 1
  %95 = icmp eq i64 %94, %6
  br i1 %95, label %96, label %59, !llvm.loop !23

96:                                               ; preds = %59, %55, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse312RGBA_to_bgrAEPjPKji(i32*, i32*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %96

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 4
  br i1 %7, label %57, label %8

8:                                                ; preds = %5
  %9 = getelementptr i32, i32* %0, i64 %6
  %10 = getelementptr i32, i32* %1, i64 %6
  %11 = icmp ugt i32* %10, %0
  %12 = icmp ugt i32* %9, %1
  %13 = and i1 %11, %12
  br i1 %13, label %57, label %14

14:                                               ; preds = %8
  %15 = and i64 %6, 4294967292
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %53, %16 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !24
  %21 = lshr <4 x i32> %20, <i32 24, i32 24, i32 24, i32 24>
  %22 = lshr <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %23 = lshr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %24 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %25 = mul nuw nsw <4 x i32> %24, %21
  %26 = trunc <4 x i32> %25 to <4 x i16>
  %27 = add nuw <4 x i16> %26, <i16 127, i16 127, i16 127, i16 127>
  %28 = udiv <4 x i16> %27, <i16 255, i16 255, i16 255, i16 255>
  %29 = and <4 x i32> %23, <i32 255, i32 255, i32 255, i32 255>
  %30 = mul nuw nsw <4 x i32> %29, %21
  %31 = trunc <4 x i32> %30 to <4 x i16>
  %32 = add nuw <4 x i16> %31, <i16 127, i16 127, i16 127, i16 127>
  %33 = udiv <4 x i16> %32, <i16 255, i16 255, i16 255, i16 255>
  %34 = zext <4 x i16> %33 to <4 x i32>
  %35 = and <4 x i32> %20, <i32 255, i32 255, i32 255, i32 255>
  %36 = mul nuw nsw <4 x i32> %35, %21
  %37 = trunc <4 x i32> %36 to <4 x i16>
  %38 = add nuw <4 x i16> %37, <i16 127, i16 127, i16 127, i16 127>
  %39 = udiv <4 x i16> %38, <i16 255, i16 255, i16 255, i16 255>
  %40 = zext <4 x i16> %39 to <4 x i32>
  %41 = and <4 x i32> %20, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %42 = shl nuw nsw <4 x i32> %40, <i32 16, i32 16, i32 16, i32 16>
  %43 = and <4 x i32> %42, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %44 = or <4 x i32> %43, %41
  %45 = shl nuw nsw <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %46 = and <4 x i32> %45, <i32 65280, i32 65280, i32 65280, i32 65280>
  %47 = and <4 x i16> %28, <i16 255, i16 255, i16 255, i16 255>
  %48 = zext <4 x i16> %47 to <4 x i32>
  %49 = or <4 x i32> %44, %48
  %50 = or <4 x i32> %49, %46
  %51 = getelementptr inbounds i32, i32* %0, i64 %17
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %52, align 4, !alias.scope !27, !noalias !24
  %53 = add i64 %17, 4
  %54 = icmp eq i64 %53, %15
  br i1 %54, label %55, label %16, !llvm.loop !29

55:                                               ; preds = %16
  %56 = icmp eq i64 %15, %6
  br i1 %56, label %96, label %57

57:                                               ; preds = %55, %8, %5
  %58 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %15, %55 ]
  br label %59

59:                                               ; preds = %57, %59
  %60 = phi i64 [ %94, %59 ], [ %58, %57 ]
  %61 = getelementptr inbounds i32, i32* %1, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = lshr i32 %62, 24
  %64 = lshr i32 %62, 16
  %65 = lshr i32 %62, 8
  %66 = and i32 %64, 255
  %67 = mul nuw nsw i32 %66, %63
  %68 = trunc i32 %67 to i16
  %69 = add nuw i16 %68, 127
  %70 = udiv i16 %69, 255
  %71 = and i32 %65, 255
  %72 = mul nuw nsw i32 %71, %63
  %73 = trunc i32 %72 to i16
  %74 = add nuw i16 %73, 127
  %75 = udiv i16 %74, 255
  %76 = zext i16 %75 to i32
  %77 = and i32 %62, 255
  %78 = mul nuw nsw i32 %77, %63
  %79 = trunc i32 %78 to i16
  %80 = add nuw i16 %79, 127
  %81 = udiv i16 %80, 255
  %82 = zext i16 %81 to i32
  %83 = and i32 %62, -16777216
  %84 = shl nuw nsw i32 %82, 16
  %85 = and i32 %84, 16711680
  %86 = or i32 %85, %83
  %87 = shl nuw nsw i32 %76, 8
  %88 = and i32 %87, 65280
  %89 = and i16 %70, 255
  %90 = zext i16 %89 to i32
  %91 = or i32 %86, %90
  %92 = or i32 %91, %88
  %93 = getelementptr inbounds i32, i32* %0, i64 %60
  store i32 %92, i32* %93, align 4
  %94 = add nuw nsw i64 %60, 1
  %95 = icmp eq i64 %94, %6
  br i1 %95, label %96, label %59, !llvm.loop !30

96:                                               ; preds = %59, %55, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse311RGB_to_RGB1EPjPKhi(i32*, i8*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %68

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %49, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %46, %11 ]
  %13 = phi i8* [ %1, %9 ], [ %36, %11 ]
  %14 = phi i64 [ %10, %9 ], [ %47, %11 ]
  %15 = load i8, i8* %13, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds i8, i8* %13, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %13, i64 3
  %21 = zext i8 %19 to i32
  %22 = shl nuw nsw i32 %21, 16
  %23 = zext i8 %17 to i32
  %24 = shl nuw nsw i32 %23, 8
  %25 = zext i8 %15 to i32
  %26 = or i32 %24, %25
  %27 = or i32 %26, %22
  %28 = or i32 %27, -16777216
  %29 = getelementptr inbounds i32, i32* %0, i64 %12
  store i32 %28, i32* %29, align 4
  %30 = or i64 %12, 1
  %31 = load i8, i8* %20, align 1
  %32 = getelementptr inbounds i8, i8* %13, i64 4
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %13, i64 5
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %13, i64 6
  %37 = zext i8 %35 to i32
  %38 = shl nuw nsw i32 %37, 16
  %39 = zext i8 %33 to i32
  %40 = shl nuw nsw i32 %39, 8
  %41 = zext i8 %31 to i32
  %42 = or i32 %40, %41
  %43 = or i32 %42, %38
  %44 = or i32 %43, -16777216
  %45 = getelementptr inbounds i32, i32* %0, i64 %30
  store i32 %44, i32* %45, align 4
  %46 = add nuw nsw i64 %12, 2
  %47 = add i64 %14, -2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %11

49:                                               ; preds = %11, %5
  %50 = phi i64 [ 0, %5 ], [ %46, %11 ]
  %51 = phi i8* [ %1, %5 ], [ %36, %11 ]
  %52 = icmp eq i64 %7, 0
  br i1 %52, label %68, label %53

53:                                               ; preds = %49
  %54 = load i8, i8* %51, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %51, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = shl nuw nsw i32 %59, 16
  %61 = zext i8 %56 to i32
  %62 = shl nuw nsw i32 %61, 8
  %63 = zext i8 %54 to i32
  %64 = or i32 %62, %63
  %65 = or i32 %64, %60
  %66 = or i32 %65, -16777216
  %67 = getelementptr inbounds i32, i32* %0, i64 %50
  store i32 %66, i32* %67, align 4
  br label %68

68:                                               ; preds = %53, %49, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse311RGB_to_BGR1EPjPKhi(i32*, i8*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %68

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = and i64 %6, 1
  %8 = icmp eq i32 %2, 1
  br i1 %8, label %49, label %9

9:                                                ; preds = %5
  %10 = sub nsw i64 %6, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i64 [ 0, %9 ], [ %46, %11 ]
  %13 = phi i8* [ %1, %9 ], [ %36, %11 ]
  %14 = phi i64 [ %10, %9 ], [ %47, %11 ]
  %15 = load i8, i8* %13, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds i8, i8* %13, i64 2
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %13, i64 3
  %21 = zext i8 %15 to i32
  %22 = shl nuw nsw i32 %21, 16
  %23 = zext i8 %17 to i32
  %24 = shl nuw nsw i32 %23, 8
  %25 = zext i8 %19 to i32
  %26 = or i32 %22, %24
  %27 = or i32 %26, %25
  %28 = or i32 %27, -16777216
  %29 = getelementptr inbounds i32, i32* %0, i64 %12
  store i32 %28, i32* %29, align 4
  %30 = or i64 %12, 1
  %31 = load i8, i8* %20, align 1
  %32 = getelementptr inbounds i8, i8* %13, i64 4
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %13, i64 5
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %13, i64 6
  %37 = zext i8 %31 to i32
  %38 = shl nuw nsw i32 %37, 16
  %39 = zext i8 %33 to i32
  %40 = shl nuw nsw i32 %39, 8
  %41 = zext i8 %35 to i32
  %42 = or i32 %38, %40
  %43 = or i32 %42, %41
  %44 = or i32 %43, -16777216
  %45 = getelementptr inbounds i32, i32* %0, i64 %30
  store i32 %44, i32* %45, align 4
  %46 = add nuw nsw i64 %12, 2
  %47 = add i64 %14, -2
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %11

49:                                               ; preds = %11, %5
  %50 = phi i64 [ 0, %5 ], [ %46, %11 ]
  %51 = phi i8* [ %1, %5 ], [ %36, %11 ]
  %52 = icmp eq i64 %7, 0
  br i1 %52, label %68, label %53

53:                                               ; preds = %49
  %54 = load i8, i8* %51, align 1
  %55 = getelementptr inbounds i8, i8* %51, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %51, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %54 to i32
  %60 = shl nuw nsw i32 %59, 16
  %61 = zext i8 %56 to i32
  %62 = shl nuw nsw i32 %61, 8
  %63 = zext i8 %58 to i32
  %64 = or i32 %60, %62
  %65 = or i32 %64, %63
  %66 = or i32 %65, -16777216
  %67 = getelementptr inbounds i32, i32* %0, i64 %50
  store i32 %66, i32* %67, align 4
  br label %68

68:                                               ; preds = %53, %49, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse312gray_to_RGB1EPjPKhi(i32*, i8*, i32) #0 comdat {
  %4 = bitcast i32* %0 to i8*
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %89

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %46, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %0, i64 %7
  %11 = bitcast i32* %10 to i8*
  %12 = getelementptr i8, i8* %1, i64 %7
  %13 = icmp ugt i8* %12, %4
  %14 = icmp ugt i8* %11, %1
  %15 = and i1 %13, %14
  br i1 %15, label %46, label %16

16:                                               ; preds = %9
  %17 = and i64 %7, 4294967288
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %42, %18 ]
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  %21 = bitcast i8* %20 to <4 x i8>*
  %22 = load <4 x i8>, <4 x i8>* %21, align 1, !alias.scope !31
  %23 = getelementptr inbounds i8, i8* %20, i64 4
  %24 = bitcast i8* %23 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1, !alias.scope !31
  %26 = zext <4 x i8> %22 to <4 x i32>
  %27 = zext <4 x i8> %25 to <4 x i32>
  %28 = shl nuw nsw <4 x i32> %26, <i32 16, i32 16, i32 16, i32 16>
  %29 = shl nuw nsw <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %30 = shl nuw nsw <4 x i32> %26, <i32 8, i32 8, i32 8, i32 8>
  %31 = shl nuw nsw <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %32 = or <4 x i32> %30, %26
  %33 = or <4 x i32> %31, %27
  %34 = or <4 x i32> %32, %28
  %35 = or <4 x i32> %33, %29
  %36 = or <4 x i32> %34, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %37 = or <4 x i32> %35, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %38 = getelementptr inbounds i32, i32* %0, i64 %19
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %39, align 4, !alias.scope !34, !noalias !31
  %40 = getelementptr inbounds i32, i32* %38, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> %37, <4 x i32>* %41, align 4, !alias.scope !34, !noalias !31
  %42 = add i64 %19, 8
  %43 = icmp eq i64 %42, %17
  br i1 %43, label %44, label %18, !llvm.loop !36

44:                                               ; preds = %18
  %45 = icmp eq i64 %17, %7
  br i1 %45, label %89, label %46

46:                                               ; preds = %44, %9, %6
  %47 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %17, %44 ]
  %48 = xor i64 %47, -1
  %49 = and i64 %7, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i8, i8* %1, i64 %47
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = shl nuw nsw i32 %54, 16
  %56 = shl nuw nsw i32 %54, 8
  %57 = or i32 %56, %54
  %58 = or i32 %57, %55
  %59 = or i32 %58, -16777216
  %60 = getelementptr inbounds i32, i32* %0, i64 %47
  store i32 %59, i32* %60, align 4
  %61 = or i64 %47, 1
  br label %62

62:                                               ; preds = %46, %51
  %63 = phi i64 [ %47, %46 ], [ %61, %51 ]
  %64 = sub nsw i64 0, %7
  %65 = icmp eq i64 %48, %64
  br i1 %65, label %89, label %66

66:                                               ; preds = %62, %66
  %67 = phi i64 [ %87, %66 ], [ %63, %62 ]
  %68 = getelementptr inbounds i8, i8* %1, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = shl nuw nsw i32 %70, 16
  %72 = shl nuw nsw i32 %70, 8
  %73 = or i32 %72, %70
  %74 = or i32 %73, %71
  %75 = or i32 %74, -16777216
  %76 = getelementptr inbounds i32, i32* %0, i64 %67
  store i32 %75, i32* %76, align 4
  %77 = add nuw nsw i64 %67, 1
  %78 = getelementptr inbounds i8, i8* %1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = shl nuw nsw i32 %80, 16
  %82 = shl nuw nsw i32 %80, 8
  %83 = or i32 %82, %80
  %84 = or i32 %83, %81
  %85 = or i32 %84, -16777216
  %86 = getelementptr inbounds i32, i32* %0, i64 %77
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %67, 2
  %88 = icmp eq i64 %87, %7
  br i1 %88, label %89, label %66, !llvm.loop !37

89:                                               ; preds = %62, %66, %44, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse313grayA_to_RGBAEPjPKhi(i32*, i8*, i32) #0 comdat {
  %4 = bitcast i32* %0 to i8*
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %101

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 4
  br i1 %8, label %43, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %0, i64 %7
  %11 = bitcast i32* %10 to i8*
  %12 = shl nuw nsw i64 %7, 1
  %13 = getelementptr i8, i8* %1, i64 %12
  %14 = icmp ugt i8* %13, %4
  %15 = icmp ugt i8* %11, %1
  %16 = and i1 %14, %15
  br i1 %16, label %43, label %17

17:                                               ; preds = %9
  %18 = and i64 %7, 4294967292
  %19 = shl nuw nsw i64 %18, 1
  %20 = getelementptr i8, i8* %1, i64 %19
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i64 [ 0, %17 ], [ %39, %21 ]
  %23 = shl i64 %22, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = bitcast i8* %24 to <8 x i8>*
  %26 = load <8 x i8>, <8 x i8>* %25, align 1
  %27 = shufflevector <8 x i8> %26, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %28 = shufflevector <8 x i8> %26, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %29 = zext <4 x i8> %28 to <4 x i32>
  %30 = shl nuw <4 x i32> %29, <i32 24, i32 24, i32 24, i32 24>
  %31 = zext <4 x i8> %27 to <4 x i32>
  %32 = shl nuw nsw <4 x i32> %31, <i32 16, i32 16, i32 16, i32 16>
  %33 = shl nuw nsw <4 x i32> %31, <i32 8, i32 8, i32 8, i32 8>
  %34 = or <4 x i32> %32, %31
  %35 = or <4 x i32> %34, %33
  %36 = or <4 x i32> %35, %30
  %37 = getelementptr inbounds i32, i32* %0, i64 %22
  %38 = bitcast i32* %37 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %38, align 4, !alias.scope !38, !noalias !41
  %39 = add i64 %22, 4
  %40 = icmp eq i64 %39, %18
  br i1 %40, label %41, label %21, !llvm.loop !43

41:                                               ; preds = %21
  %42 = icmp eq i64 %18, %7
  br i1 %42, label %101, label %43

43:                                               ; preds = %41, %9, %6
  %44 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %18, %41 ]
  %45 = phi i8* [ %1, %9 ], [ %1, %6 ], [ %20, %41 ]
  %46 = xor i64 %44, -1
  %47 = and i64 %7, 1
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %64, label %49

49:                                               ; preds = %43
  %50 = load i8, i8* %45, align 1
  %51 = getelementptr inbounds i8, i8* %45, i64 1
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds i8, i8* %45, i64 2
  %54 = zext i8 %52 to i32
  %55 = shl nuw i32 %54, 24
  %56 = zext i8 %50 to i32
  %57 = shl nuw nsw i32 %56, 16
  %58 = shl nuw nsw i32 %56, 8
  %59 = or i32 %57, %56
  %60 = or i32 %59, %58
  %61 = or i32 %60, %55
  %62 = getelementptr inbounds i32, i32* %0, i64 %44
  store i32 %61, i32* %62, align 4
  %63 = or i64 %44, 1
  br label %64

64:                                               ; preds = %43, %49
  %65 = phi i64 [ %44, %43 ], [ %63, %49 ]
  %66 = phi i8* [ %45, %43 ], [ %53, %49 ]
  %67 = sub nsw i64 0, %7
  %68 = icmp eq i64 %46, %67
  br i1 %68, label %101, label %69

69:                                               ; preds = %64, %69
  %70 = phi i64 [ %99, %69 ], [ %65, %64 ]
  %71 = phi i8* [ %89, %69 ], [ %66, %64 ]
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %71, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds i8, i8* %71, i64 2
  %76 = zext i8 %74 to i32
  %77 = shl nuw i32 %76, 24
  %78 = zext i8 %72 to i32
  %79 = shl nuw nsw i32 %78, 16
  %80 = shl nuw nsw i32 %78, 8
  %81 = or i32 %79, %78
  %82 = or i32 %81, %80
  %83 = or i32 %82, %77
  %84 = getelementptr inbounds i32, i32* %0, i64 %70
  store i32 %83, i32* %84, align 4
  %85 = add nuw nsw i64 %70, 1
  %86 = load i8, i8* %75, align 1
  %87 = getelementptr inbounds i8, i8* %71, i64 3
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds i8, i8* %71, i64 4
  %90 = zext i8 %88 to i32
  %91 = shl nuw i32 %90, 24
  %92 = zext i8 %86 to i32
  %93 = shl nuw nsw i32 %92, 16
  %94 = shl nuw nsw i32 %92, 8
  %95 = or i32 %93, %92
  %96 = or i32 %95, %94
  %97 = or i32 %96, %91
  %98 = getelementptr inbounds i32, i32* %0, i64 %85
  store i32 %97, i32* %98, align 4
  %99 = add nuw nsw i64 %70, 2
  %100 = icmp eq i64 %99, %7
  br i1 %100, label %101, label %69, !llvm.loop !44

101:                                              ; preds = %64, %69, %41, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse313grayA_to_rgbAEPjPKhi(i32*, i8*, i32) #0 comdat {
  %4 = bitcast i32* %0 to i8*
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %78

6:                                                ; preds = %3
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 4
  br i1 %8, label %50, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %0, i64 %7
  %11 = bitcast i32* %10 to i8*
  %12 = shl nuw nsw i64 %7, 1
  %13 = getelementptr i8, i8* %1, i64 %12
  %14 = icmp ugt i8* %13, %4
  %15 = icmp ugt i8* %11, %1
  %16 = and i1 %14, %15
  br i1 %16, label %50, label %17

17:                                               ; preds = %9
  %18 = and i64 %7, 4294967292
  %19 = shl nuw nsw i64 %18, 1
  %20 = getelementptr i8, i8* %1, i64 %19
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i64 [ 0, %17 ], [ %46, %21 ]
  %23 = shl i64 %22, 1
  %24 = getelementptr i8, i8* %1, i64 %23
  %25 = bitcast i8* %24 to <8 x i8>*
  %26 = load <8 x i8>, <8 x i8>* %25, align 1
  %27 = shufflevector <8 x i8> %26, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %28 = shufflevector <8 x i8> %26, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %29 = zext <4 x i8> %27 to <4 x i32>
  %30 = zext <4 x i8> %28 to <4 x i32>
  %31 = mul nuw nsw <4 x i32> %30, %29
  %32 = trunc <4 x i32> %31 to <4 x i16>
  %33 = add nuw <4 x i16> %32, <i16 127, i16 127, i16 127, i16 127>
  %34 = udiv <4 x i16> %33, <i16 255, i16 255, i16 255, i16 255>
  %35 = shl nuw <4 x i32> %30, <i32 24, i32 24, i32 24, i32 24>
  %36 = and <4 x i16> %34, <i16 255, i16 255, i16 255, i16 255>
  %37 = zext <4 x i16> %36 to <4 x i32>
  %38 = shl nuw nsw <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %39 = shl <4 x i16> %34, <i16 8, i16 8, i16 8, i16 8>
  %40 = zext <4 x i16> %39 to <4 x i32>
  %41 = or <4 x i32> %35, %40
  %42 = or <4 x i32> %41, %37
  %43 = or <4 x i32> %42, %38
  %44 = getelementptr inbounds i32, i32* %0, i64 %22
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %43, <4 x i32>* %45, align 4, !alias.scope !45, !noalias !48
  %46 = add i64 %22, 4
  %47 = icmp eq i64 %46, %18
  br i1 %47, label %48, label %21, !llvm.loop !50

48:                                               ; preds = %21
  %49 = icmp eq i64 %18, %7
  br i1 %49, label %78, label %50

50:                                               ; preds = %48, %9, %6
  %51 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %18, %48 ]
  %52 = phi i8* [ %1, %9 ], [ %1, %6 ], [ %20, %48 ]
  br label %53

53:                                               ; preds = %50, %53
  %54 = phi i64 [ %76, %53 ], [ %51, %50 ]
  %55 = phi i8* [ %59, %53 ], [ %52, %50 ]
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %55, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %55, i64 2
  %60 = zext i8 %56 to i32
  %61 = zext i8 %58 to i32
  %62 = mul nuw nsw i32 %61, %60
  %63 = trunc i32 %62 to i16
  %64 = add nuw i16 %63, 127
  %65 = udiv i16 %64, 255
  %66 = shl nuw i32 %61, 24
  %67 = and i16 %65, 255
  %68 = zext i16 %67 to i32
  %69 = shl nuw nsw i32 %68, 16
  %70 = shl i16 %65, 8
  %71 = zext i16 %70 to i32
  %72 = or i32 %66, %71
  %73 = or i32 %72, %68
  %74 = or i32 %73, %69
  %75 = getelementptr inbounds i32, i32* %0, i64 %54
  store i32 %74, i32* %75, align 4
  %76 = add nuw nsw i64 %54, 1
  %77 = icmp eq i64 %76, %7
  br i1 %77, label %78, label %53, !llvm.loop !51

78:                                               ; preds = %53, %48, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse321inverted_CMYK_to_RGB1EPjPKji(i32*, i32*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %92

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 4
  br i1 %7, label %55, label %8

8:                                                ; preds = %5
  %9 = getelementptr i32, i32* %0, i64 %6
  %10 = getelementptr i32, i32* %1, i64 %6
  %11 = icmp ugt i32* %10, %0
  %12 = icmp ugt i32* %9, %1
  %13 = and i1 %11, %12
  br i1 %13, label %55, label %14

14:                                               ; preds = %8
  %15 = and i64 %6, 4294967292
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %51, %16 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !52
  %21 = lshr <4 x i32> %20, <i32 24, i32 24, i32 24, i32 24>
  %22 = lshr <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %23 = lshr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %24 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %25 = mul nuw nsw <4 x i32> %24, %21
  %26 = trunc <4 x i32> %25 to <4 x i16>
  %27 = add nuw <4 x i16> %26, <i16 127, i16 127, i16 127, i16 127>
  %28 = udiv <4 x i16> %27, <i16 255, i16 255, i16 255, i16 255>
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = and <4 x i32> %23, <i32 255, i32 255, i32 255, i32 255>
  %31 = mul nuw nsw <4 x i32> %30, %21
  %32 = trunc <4 x i32> %31 to <4 x i16>
  %33 = add nuw <4 x i16> %32, <i16 127, i16 127, i16 127, i16 127>
  %34 = udiv <4 x i16> %33, <i16 255, i16 255, i16 255, i16 255>
  %35 = zext <4 x i16> %34 to <4 x i32>
  %36 = and <4 x i32> %20, <i32 255, i32 255, i32 255, i32 255>
  %37 = mul nuw nsw <4 x i32> %36, %21
  %38 = trunc <4 x i32> %37 to <4 x i16>
  %39 = add nuw <4 x i16> %38, <i16 127, i16 127, i16 127, i16 127>
  %40 = udiv <4 x i16> %39, <i16 255, i16 255, i16 255, i16 255>
  %41 = shl nuw nsw <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %42 = shl nuw nsw <4 x i32> %35, <i32 8, i32 8, i32 8, i32 8>
  %43 = and <4 x i32> %42, <i32 65280, i32 65280, i32 65280, i32 65280>
  %44 = and <4 x i16> %40, <i16 255, i16 255, i16 255, i16 255>
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = or <4 x i32> %41, %45
  %47 = or <4 x i32> %46, %43
  %48 = or <4 x i32> %47, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %49 = getelementptr inbounds i32, i32* %0, i64 %17
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4, !alias.scope !55, !noalias !52
  %51 = add i64 %17, 4
  %52 = icmp eq i64 %51, %15
  br i1 %52, label %53, label %16, !llvm.loop !57

53:                                               ; preds = %16
  %54 = icmp eq i64 %15, %6
  br i1 %54, label %92, label %55

55:                                               ; preds = %53, %8, %5
  %56 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %15, %53 ]
  br label %57

57:                                               ; preds = %55, %57
  %58 = phi i64 [ %90, %57 ], [ %56, %55 ]
  %59 = getelementptr inbounds i32, i32* %1, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = lshr i32 %60, 24
  %62 = lshr i32 %60, 16
  %63 = lshr i32 %60, 8
  %64 = and i32 %62, 255
  %65 = mul nuw nsw i32 %64, %61
  %66 = trunc i32 %65 to i16
  %67 = add nuw i16 %66, 127
  %68 = udiv i16 %67, 255
  %69 = zext i16 %68 to i32
  %70 = and i32 %63, 255
  %71 = mul nuw nsw i32 %70, %61
  %72 = trunc i32 %71 to i16
  %73 = add nuw i16 %72, 127
  %74 = udiv i16 %73, 255
  %75 = zext i16 %74 to i32
  %76 = and i32 %60, 255
  %77 = mul nuw nsw i32 %76, %61
  %78 = trunc i32 %77 to i16
  %79 = add nuw i16 %78, 127
  %80 = udiv i16 %79, 255
  %81 = shl nuw nsw i32 %69, 16
  %82 = shl nuw nsw i32 %75, 8
  %83 = and i32 %82, 65280
  %84 = and i16 %80, 255
  %85 = zext i16 %84 to i32
  %86 = or i32 %81, %85
  %87 = or i32 %86, %83
  %88 = or i32 %87, -16777216
  %89 = getelementptr inbounds i32, i32* %0, i64 %58
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %58, 1
  %91 = icmp eq i64 %90, %6
  br i1 %91, label %92, label %57, !llvm.loop !58

92:                                               ; preds = %57, %53, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse321inverted_CMYK_to_BGR1EPjPKji(i32*, i32*, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %92

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 4
  br i1 %7, label %55, label %8

8:                                                ; preds = %5
  %9 = getelementptr i32, i32* %0, i64 %6
  %10 = getelementptr i32, i32* %1, i64 %6
  %11 = icmp ugt i32* %10, %0
  %12 = icmp ugt i32* %9, %1
  %13 = and i1 %11, %12
  br i1 %13, label %55, label %14

14:                                               ; preds = %8
  %15 = and i64 %6, 4294967292
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %51, %16 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !59
  %21 = lshr <4 x i32> %20, <i32 24, i32 24, i32 24, i32 24>
  %22 = lshr <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %23 = lshr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %24 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %25 = mul nuw nsw <4 x i32> %24, %21
  %26 = trunc <4 x i32> %25 to <4 x i16>
  %27 = add nuw <4 x i16> %26, <i16 127, i16 127, i16 127, i16 127>
  %28 = udiv <4 x i16> %27, <i16 255, i16 255, i16 255, i16 255>
  %29 = and <4 x i32> %23, <i32 255, i32 255, i32 255, i32 255>
  %30 = mul nuw nsw <4 x i32> %29, %21
  %31 = trunc <4 x i32> %30 to <4 x i16>
  %32 = add nuw <4 x i16> %31, <i16 127, i16 127, i16 127, i16 127>
  %33 = udiv <4 x i16> %32, <i16 255, i16 255, i16 255, i16 255>
  %34 = zext <4 x i16> %33 to <4 x i32>
  %35 = and <4 x i32> %20, <i32 255, i32 255, i32 255, i32 255>
  %36 = mul nuw nsw <4 x i32> %35, %21
  %37 = trunc <4 x i32> %36 to <4 x i16>
  %38 = add nuw <4 x i16> %37, <i16 127, i16 127, i16 127, i16 127>
  %39 = udiv <4 x i16> %38, <i16 255, i16 255, i16 255, i16 255>
  %40 = zext <4 x i16> %39 to <4 x i32>
  %41 = shl nuw nsw <4 x i32> %40, <i32 16, i32 16, i32 16, i32 16>
  %42 = shl nuw nsw <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %43 = and <4 x i32> %42, <i32 65280, i32 65280, i32 65280, i32 65280>
  %44 = and <4 x i16> %28, <i16 255, i16 255, i16 255, i16 255>
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = or <4 x i32> %41, %45
  %47 = or <4 x i32> %46, %43
  %48 = or <4 x i32> %47, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %49 = getelementptr inbounds i32, i32* %0, i64 %17
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4, !alias.scope !62, !noalias !59
  %51 = add i64 %17, 4
  %52 = icmp eq i64 %51, %15
  br i1 %52, label %53, label %16, !llvm.loop !64

53:                                               ; preds = %16
  %54 = icmp eq i64 %15, %6
  br i1 %54, label %92, label %55

55:                                               ; preds = %53, %8, %5
  %56 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %15, %53 ]
  br label %57

57:                                               ; preds = %55, %57
  %58 = phi i64 [ %90, %57 ], [ %56, %55 ]
  %59 = getelementptr inbounds i32, i32* %1, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = lshr i32 %60, 24
  %62 = lshr i32 %60, 16
  %63 = lshr i32 %60, 8
  %64 = and i32 %62, 255
  %65 = mul nuw nsw i32 %64, %61
  %66 = trunc i32 %65 to i16
  %67 = add nuw i16 %66, 127
  %68 = udiv i16 %67, 255
  %69 = and i32 %63, 255
  %70 = mul nuw nsw i32 %69, %61
  %71 = trunc i32 %70 to i16
  %72 = add nuw i16 %71, 127
  %73 = udiv i16 %72, 255
  %74 = zext i16 %73 to i32
  %75 = and i32 %60, 255
  %76 = mul nuw nsw i32 %75, %61
  %77 = trunc i32 %76 to i16
  %78 = add nuw i16 %77, 127
  %79 = udiv i16 %78, 255
  %80 = zext i16 %79 to i32
  %81 = shl nuw nsw i32 %80, 16
  %82 = shl nuw nsw i32 %74, 8
  %83 = and i32 %82, 65280
  %84 = and i16 %68, 255
  %85 = zext i16 %84 to i32
  %86 = or i32 %81, %85
  %87 = or i32 %86, %83
  %88 = or i32 %87, -16777216
  %89 = getelementptr inbounds i32, i32* %0, i64 %58
  store i32 %88, i32* %89, align 4
  %90 = add nuw nsw i64 %58, 1
  %91 = icmp eq i64 %90, %6
  br i1 %91, label %92, label %57, !llvm.loop !65

92:                                               ; preds = %57, %53, %3
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse38memset16EPtti(i16*, i16 zeroext, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %30

5:                                                ; preds = %3
  %6 = insertelement <8 x i16> undef, i16 %1, i32 0
  %7 = shufflevector <8 x i16> %6, <8 x i16> undef, <8 x i32> zeroinitializer
  %8 = add nsw i32 %2, -8
  %9 = lshr i32 %8, 3
  %10 = add nuw nsw i32 %9, 1
  %11 = and i32 %10, 7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %22, label %13

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %19, %13 ], [ %2, %5 ]
  %15 = phi i16* [ %18, %13 ], [ %0, %5 ]
  %16 = phi i32 [ %20, %13 ], [ %11, %5 ]
  %17 = bitcast i16* %15 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %17, align 1
  %18 = getelementptr inbounds i16, i16* %15, i64 8
  %19 = add nsw i32 %14, -8
  %20 = add i32 %16, -1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %13, !llvm.loop !66

22:                                               ; preds = %13, %5
  %23 = phi i32 [ %2, %5 ], [ %19, %13 ]
  %24 = phi i16* [ %0, %5 ], [ %18, %13 ]
  %25 = phi i16* [ undef, %5 ], [ %18, %13 ]
  %26 = icmp ult i32 %8, 56
  br i1 %26, label %27, label %118

27:                                               ; preds = %118, %22
  %28 = phi i16* [ %25, %22 ], [ %136, %118 ]
  %29 = and i32 %2, 7
  br label %30

30:                                               ; preds = %27, %3
  %31 = phi i16* [ %0, %3 ], [ %28, %27 ]
  %32 = phi i32 [ %2, %3 ], [ %29, %27 ]
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %145

34:                                               ; preds = %30
  %35 = add nsw i32 %32, -1
  %36 = zext i32 %35 to i64
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 16
  br i1 %38, label %39, label %42

39:                                               ; preds = %116, %34
  %40 = phi i32 [ %32, %34 ], [ %45, %116 ]
  %41 = phi i16* [ %31, %34 ], [ %46, %116 ]
  br label %139

42:                                               ; preds = %34
  %43 = and i64 %37, 8589934576
  %44 = trunc i64 %43 to i32
  %45 = sub i32 %32, %44
  %46 = getelementptr i16, i16* %31, i64 %43
  %47 = insertelement <8 x i16> undef, i16 %1, i32 0
  %48 = shufflevector <8 x i16> %47, <8 x i16> undef, <8 x i32> zeroinitializer
  %49 = insertelement <8 x i16> undef, i16 %1, i32 0
  %50 = shufflevector <8 x i16> %49, <8 x i16> undef, <8 x i32> zeroinitializer
  %51 = add nsw i64 %43, -16
  %52 = lshr exact i64 %51, 4
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 7
  %55 = icmp ult i64 %51, 112
  br i1 %55, label %103, label %56

56:                                               ; preds = %42
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %100, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %101, %58 ]
  %61 = getelementptr i16, i16* %31, i64 %59
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %62, align 2
  %63 = getelementptr i16, i16* %61, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %64, align 2
  %65 = or i64 %59, 16
  %66 = getelementptr i16, i16* %31, i64 %65
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %67, align 2
  %68 = getelementptr i16, i16* %66, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %69, align 2
  %70 = or i64 %59, 32
  %71 = getelementptr i16, i16* %31, i64 %70
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %72, align 2
  %73 = getelementptr i16, i16* %71, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %74, align 2
  %75 = or i64 %59, 48
  %76 = getelementptr i16, i16* %31, i64 %75
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %77, align 2
  %78 = getelementptr i16, i16* %76, i64 8
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %79, align 2
  %80 = or i64 %59, 64
  %81 = getelementptr i16, i16* %31, i64 %80
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %82, align 2
  %83 = getelementptr i16, i16* %81, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %84, align 2
  %85 = or i64 %59, 80
  %86 = getelementptr i16, i16* %31, i64 %85
  %87 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %87, align 2
  %88 = getelementptr i16, i16* %86, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %89, align 2
  %90 = or i64 %59, 96
  %91 = getelementptr i16, i16* %31, i64 %90
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %92, align 2
  %93 = getelementptr i16, i16* %91, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %94, align 2
  %95 = or i64 %59, 112
  %96 = getelementptr i16, i16* %31, i64 %95
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %97, align 2
  %98 = getelementptr i16, i16* %96, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %99, align 2
  %100 = add i64 %59, 128
  %101 = add i64 %60, -8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %58, !llvm.loop !68

103:                                              ; preds = %58, %42
  %104 = phi i64 [ 0, %42 ], [ %100, %58 ]
  %105 = icmp eq i64 %54, 0
  br i1 %105, label %116, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %113, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %114, %106 ], [ %54, %103 ]
  %109 = getelementptr i16, i16* %31, i64 %107
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %110, align 2
  %111 = getelementptr i16, i16* %109, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %112, align 2
  %113 = add i64 %107, 16
  %114 = add i64 %108, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %106, !llvm.loop !69

116:                                              ; preds = %106, %103
  %117 = icmp eq i64 %37, %43
  br i1 %117, label %145, label %39

118:                                              ; preds = %22, %118
  %119 = phi i32 [ %137, %118 ], [ %23, %22 ]
  %120 = phi i16* [ %136, %118 ], [ %24, %22 ]
  %121 = bitcast i16* %120 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %121, align 1
  %122 = getelementptr inbounds i16, i16* %120, i64 8
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %123, align 1
  %124 = getelementptr inbounds i16, i16* %120, i64 16
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %125, align 1
  %126 = getelementptr inbounds i16, i16* %120, i64 24
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %120, i64 32
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i16, i16* %120, i64 40
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %131, align 1
  %132 = getelementptr inbounds i16, i16* %120, i64 48
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %120, i64 56
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %135, align 1
  %136 = getelementptr inbounds i16, i16* %120, i64 64
  %137 = add nsw i32 %119, -64
  %138 = icmp sgt i32 %137, 7
  br i1 %138, label %118, label %27

139:                                              ; preds = %39, %139
  %140 = phi i32 [ %142, %139 ], [ %40, %39 ]
  %141 = phi i16* [ %143, %139 ], [ %41, %39 ]
  %142 = add nsw i32 %140, -1
  %143 = getelementptr inbounds i16, i16* %141, i64 1
  store i16 %1, i16* %141, align 2
  %144 = icmp sgt i32 %142, 0
  br i1 %144, label %139, label %145, !llvm.loop !70

145:                                              ; preds = %139, %116, %30
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse38memset32EPjji(i32*, i32, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 3
  br i1 %4, label %5, label %30

5:                                                ; preds = %3
  %6 = insertelement <4 x i32> undef, i32 %1, i32 0
  %7 = shufflevector <4 x i32> %6, <4 x i32> undef, <4 x i32> zeroinitializer
  %8 = add nsw i32 %2, -4
  %9 = lshr i32 %8, 2
  %10 = add nuw nsw i32 %9, 1
  %11 = and i32 %10, 7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %22, label %13

13:                                               ; preds = %5, %13
  %14 = phi i32 [ %19, %13 ], [ %2, %5 ]
  %15 = phi i32* [ %18, %13 ], [ %0, %5 ]
  %16 = phi i32 [ %20, %13 ], [ %11, %5 ]
  %17 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %17, align 1
  %18 = getelementptr inbounds i32, i32* %15, i64 4
  %19 = add nsw i32 %14, -4
  %20 = add i32 %16, -1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %13, !llvm.loop !72

22:                                               ; preds = %13, %5
  %23 = phi i32 [ %2, %5 ], [ %19, %13 ]
  %24 = phi i32* [ %0, %5 ], [ %18, %13 ]
  %25 = phi i32* [ undef, %5 ], [ %18, %13 ]
  %26 = icmp ult i32 %8, 28
  br i1 %26, label %27, label %118

27:                                               ; preds = %118, %22
  %28 = phi i32* [ %25, %22 ], [ %136, %118 ]
  %29 = and i32 %2, 3
  br label %30

30:                                               ; preds = %27, %3
  %31 = phi i32* [ %0, %3 ], [ %28, %27 ]
  %32 = phi i32 [ %2, %3 ], [ %29, %27 ]
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %145

34:                                               ; preds = %30
  %35 = add nsw i32 %32, -1
  %36 = zext i32 %35 to i64
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 8
  br i1 %38, label %39, label %42

39:                                               ; preds = %116, %34
  %40 = phi i32 [ %32, %34 ], [ %45, %116 ]
  %41 = phi i32* [ %31, %34 ], [ %46, %116 ]
  br label %139

42:                                               ; preds = %34
  %43 = and i64 %37, 8589934584
  %44 = trunc i64 %43 to i32
  %45 = sub i32 %32, %44
  %46 = getelementptr i32, i32* %31, i64 %43
  %47 = insertelement <4 x i32> undef, i32 %1, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x i32> undef, i32 %1, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = add nsw i64 %43, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 7
  %55 = icmp ult i64 %51, 56
  br i1 %55, label %103, label %56

56:                                               ; preds = %42
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %100, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %101, %58 ]
  %61 = getelementptr i32, i32* %31, i64 %59
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %62, align 4
  %63 = getelementptr i32, i32* %61, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %64, align 4
  %65 = or i64 %59, 8
  %66 = getelementptr i32, i32* %31, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %67, align 4
  %68 = getelementptr i32, i32* %66, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %69, align 4
  %70 = or i64 %59, 16
  %71 = getelementptr i32, i32* %31, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %72, align 4
  %73 = getelementptr i32, i32* %71, i64 4
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %74, align 4
  %75 = or i64 %59, 24
  %76 = getelementptr i32, i32* %31, i64 %75
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %77, align 4
  %78 = getelementptr i32, i32* %76, i64 4
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %79, align 4
  %80 = or i64 %59, 32
  %81 = getelementptr i32, i32* %31, i64 %80
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %82, align 4
  %83 = getelementptr i32, i32* %81, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %84, align 4
  %85 = or i64 %59, 40
  %86 = getelementptr i32, i32* %31, i64 %85
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %87, align 4
  %88 = getelementptr i32, i32* %86, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %89, align 4
  %90 = or i64 %59, 48
  %91 = getelementptr i32, i32* %31, i64 %90
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %92, align 4
  %93 = getelementptr i32, i32* %91, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %94, align 4
  %95 = or i64 %59, 56
  %96 = getelementptr i32, i32* %31, i64 %95
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %97, align 4
  %98 = getelementptr i32, i32* %96, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %99, align 4
  %100 = add i64 %59, 64
  %101 = add i64 %60, -8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %58, !llvm.loop !73

103:                                              ; preds = %58, %42
  %104 = phi i64 [ 0, %42 ], [ %100, %58 ]
  %105 = icmp eq i64 %54, 0
  br i1 %105, label %116, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %113, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %114, %106 ], [ %54, %103 ]
  %109 = getelementptr i32, i32* %31, i64 %107
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %110, align 4
  %111 = getelementptr i32, i32* %109, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %112, align 4
  %113 = add i64 %107, 8
  %114 = add i64 %108, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %106, !llvm.loop !74

116:                                              ; preds = %106, %103
  %117 = icmp eq i64 %37, %43
  br i1 %117, label %145, label %39

118:                                              ; preds = %22, %118
  %119 = phi i32 [ %137, %118 ], [ %23, %22 ]
  %120 = phi i32* [ %136, %118 ], [ %24, %22 ]
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %121, align 1
  %122 = getelementptr inbounds i32, i32* %120, i64 4
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %123, align 1
  %124 = getelementptr inbounds i32, i32* %120, i64 8
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %125, align 1
  %126 = getelementptr inbounds i32, i32* %120, i64 12
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %127, align 1
  %128 = getelementptr inbounds i32, i32* %120, i64 16
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %129, align 1
  %130 = getelementptr inbounds i32, i32* %120, i64 20
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %131, align 1
  %132 = getelementptr inbounds i32, i32* %120, i64 24
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %133, align 1
  %134 = getelementptr inbounds i32, i32* %120, i64 28
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %7, <4 x i32>* %135, align 1
  %136 = getelementptr inbounds i32, i32* %120, i64 32
  %137 = add nsw i32 %119, -32
  %138 = icmp sgt i32 %137, 3
  br i1 %138, label %118, label %27

139:                                              ; preds = %39, %139
  %140 = phi i32 [ %142, %139 ], [ %40, %39 ]
  %141 = phi i32* [ %143, %139 ], [ %41, %39 ]
  %142 = add nsw i32 %140, -1
  %143 = getelementptr inbounds i32, i32* %141, i64 1
  store i32 %1, i32* %141, align 4
  %144 = icmp sgt i32 %142, 0
  br i1 %144, label %139, label %145, !llvm.loop !75

145:                                              ; preds = %139, %116, %30
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse38memset64EPmmi(i64*, i64, i32) #0 comdat {
  %4 = icmp sgt i32 %2, 1
  br i1 %4, label %5, label %28

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -2
  %7 = lshr i32 %6, 1
  %8 = add nuw i32 %7, 1
  %9 = and i32 %8, 7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %20, label %11

11:                                               ; preds = %5, %11
  %12 = phi i32 [ %17, %11 ], [ %2, %5 ]
  %13 = phi i64* [ %16, %11 ], [ %0, %5 ]
  %14 = phi i32 [ %18, %11 ], [ %9, %5 ]
  store i64 %1, i64* %13, align 1
  %15 = getelementptr inbounds i64, i64* %13, i64 1
  store i64 %1, i64* %15, align 1
  %16 = getelementptr inbounds i64, i64* %13, i64 2
  %17 = add nsw i32 %12, -2
  %18 = add i32 %14, -1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %11, !llvm.loop !76

20:                                               ; preds = %11, %5
  %21 = phi i32 [ %2, %5 ], [ %17, %11 ]
  %22 = phi i64* [ %0, %5 ], [ %16, %11 ]
  %23 = phi i64* [ undef, %5 ], [ %16, %11 ]
  %24 = icmp ult i32 %6, 14
  br i1 %24, label %25, label %33

25:                                               ; preds = %33, %20
  %26 = phi i64* [ %23, %20 ], [ %51, %33 ]
  %27 = and i32 %2, 1
  br label %28

28:                                               ; preds = %25, %3
  %29 = phi i64* [ %0, %3 ], [ %26, %25 ]
  %30 = phi i32 [ %2, %3 ], [ %27, %25 ]
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %54

32:                                               ; preds = %28
  store i64 %1, i64* %29, align 8
  br label %54

33:                                               ; preds = %20, %33
  %34 = phi i32 [ %52, %33 ], [ %21, %20 ]
  %35 = phi i64* [ %51, %33 ], [ %22, %20 ]
  store i64 %1, i64* %35, align 1
  %36 = getelementptr inbounds i64, i64* %35, i64 1
  store i64 %1, i64* %36, align 1
  %37 = getelementptr inbounds i64, i64* %35, i64 2
  store i64 %1, i64* %37, align 1
  %38 = getelementptr inbounds i64, i64* %35, i64 3
  store i64 %1, i64* %38, align 1
  %39 = getelementptr inbounds i64, i64* %35, i64 4
  store i64 %1, i64* %39, align 1
  %40 = getelementptr inbounds i64, i64* %35, i64 5
  store i64 %1, i64* %40, align 1
  %41 = getelementptr inbounds i64, i64* %35, i64 6
  store i64 %1, i64* %41, align 1
  %42 = getelementptr inbounds i64, i64* %35, i64 7
  store i64 %1, i64* %42, align 1
  %43 = getelementptr inbounds i64, i64* %35, i64 8
  store i64 %1, i64* %43, align 1
  %44 = getelementptr inbounds i64, i64* %35, i64 9
  store i64 %1, i64* %44, align 1
  %45 = getelementptr inbounds i64, i64* %35, i64 10
  store i64 %1, i64* %45, align 1
  %46 = getelementptr inbounds i64, i64* %35, i64 11
  store i64 %1, i64* %46, align 1
  %47 = getelementptr inbounds i64, i64* %35, i64 12
  store i64 %1, i64* %47, align 1
  %48 = getelementptr inbounds i64, i64* %35, i64 13
  store i64 %1, i64* %48, align 1
  %49 = getelementptr inbounds i64, i64* %35, i64 14
  store i64 %1, i64* %49, align 1
  %50 = getelementptr inbounds i64, i64* %35, i64 15
  store i64 %1, i64* %50, align 1
  %51 = getelementptr inbounds i64, i64* %35, i64 16
  %52 = add nsw i32 %34, -16
  %53 = icmp sgt i32 %52, 1
  br i1 %53, label %33, label %25

54:                                               ; preds = %32, %28
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse313rect_memset16EPttimi(i16*, i16 zeroext, i32, i64, i32) #1 comdat {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %156

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 7
  %9 = insertelement <8 x i16> undef, i16 %1, i32 0
  %10 = shufflevector <8 x i16> %9, <8 x i16> undef, <8 x i32> zeroinitializer
  %11 = and i32 %2, 7
  %12 = add nsw i32 %2, -8
  %13 = lshr i32 %12, 3
  %14 = add nuw nsw i32 %13, 1
  %15 = and i32 %14, 7
  %16 = icmp eq i32 %15, 0
  %17 = icmp ult i32 %12, 56
  %18 = insertelement <8 x i16> undef, i16 %1, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %1, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %22

22:                                               ; preds = %151, %7
  %23 = phi i32 [ %4, %7 ], [ %25, %151 ]
  %24 = phi i16* [ %0, %7 ], [ %154, %151 ]
  %25 = add nsw i32 %23, -1
  br i1 %8, label %26, label %40

26:                                               ; preds = %22
  br i1 %16, label %36, label %27

27:                                               ; preds = %26, %27
  %28 = phi i32 [ %33, %27 ], [ %2, %26 ]
  %29 = phi i16* [ %32, %27 ], [ %24, %26 ]
  %30 = phi i32 [ %34, %27 ], [ %15, %26 ]
  %31 = bitcast i16* %29 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %31, align 1
  %32 = getelementptr inbounds i16, i16* %29, i64 8
  %33 = add nsw i32 %28, -8
  %34 = add i32 %30, -1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %27, !llvm.loop !77

36:                                               ; preds = %27, %26
  %37 = phi i32 [ %2, %26 ], [ %33, %27 ]
  %38 = phi i16* [ %24, %26 ], [ %32, %27 ]
  %39 = phi i16* [ undef, %26 ], [ %32, %27 ]
  br i1 %17, label %40, label %124

40:                                               ; preds = %36, %124, %22
  %41 = phi i16* [ %24, %22 ], [ %39, %36 ], [ %142, %124 ]
  %42 = phi i32 [ %2, %22 ], [ %11, %124 ], [ %11, %36 ]
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %151

44:                                               ; preds = %40
  %45 = add nsw i32 %42, -1
  %46 = zext i32 %45 to i64
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i64 %47, 16
  br i1 %48, label %49, label %52

49:                                               ; preds = %122, %44
  %50 = phi i32 [ %42, %44 ], [ %55, %122 ]
  %51 = phi i16* [ %41, %44 ], [ %56, %122 ]
  br label %145

52:                                               ; preds = %44
  %53 = and i64 %47, 8589934576
  %54 = trunc i64 %53 to i32
  %55 = sub i32 %42, %54
  %56 = getelementptr i16, i16* %41, i64 %53
  %57 = add nsw i64 %53, -16
  %58 = lshr exact i64 %57, 4
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 7
  %61 = icmp ult i64 %57, 112
  br i1 %61, label %109, label %62

62:                                               ; preds = %52
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %106, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %107, %64 ]
  %67 = getelementptr i16, i16* %41, i64 %65
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %68, align 2
  %69 = getelementptr i16, i16* %67, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %70, align 2
  %71 = or i64 %65, 16
  %72 = getelementptr i16, i16* %41, i64 %71
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %73, align 2
  %74 = getelementptr i16, i16* %72, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %75, align 2
  %76 = or i64 %65, 32
  %77 = getelementptr i16, i16* %41, i64 %76
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %78, align 2
  %79 = getelementptr i16, i16* %77, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %80, align 2
  %81 = or i64 %65, 48
  %82 = getelementptr i16, i16* %41, i64 %81
  %83 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %83, align 2
  %84 = getelementptr i16, i16* %82, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %85, align 2
  %86 = or i64 %65, 64
  %87 = getelementptr i16, i16* %41, i64 %86
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %88, align 2
  %89 = getelementptr i16, i16* %87, i64 8
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %90, align 2
  %91 = or i64 %65, 80
  %92 = getelementptr i16, i16* %41, i64 %91
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %93, align 2
  %94 = getelementptr i16, i16* %92, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %95, align 2
  %96 = or i64 %65, 96
  %97 = getelementptr i16, i16* %41, i64 %96
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %98, align 2
  %99 = getelementptr i16, i16* %97, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %100, align 2
  %101 = or i64 %65, 112
  %102 = getelementptr i16, i16* %41, i64 %101
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %103, align 2
  %104 = getelementptr i16, i16* %102, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %105, align 2
  %106 = add i64 %65, 128
  %107 = add i64 %66, -8
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %64, !llvm.loop !78

109:                                              ; preds = %64, %52
  %110 = phi i64 [ 0, %52 ], [ %106, %64 ]
  %111 = icmp eq i64 %60, 0
  br i1 %111, label %122, label %112

112:                                              ; preds = %109, %112
  %113 = phi i64 [ %119, %112 ], [ %110, %109 ]
  %114 = phi i64 [ %120, %112 ], [ %60, %109 ]
  %115 = getelementptr i16, i16* %41, i64 %113
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %19, <8 x i16>* %116, align 2
  %117 = getelementptr i16, i16* %115, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %21, <8 x i16>* %118, align 2
  %119 = add i64 %113, 16
  %120 = add i64 %114, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %112, !llvm.loop !79

122:                                              ; preds = %112, %109
  %123 = icmp eq i64 %47, %53
  br i1 %123, label %151, label %49

124:                                              ; preds = %36, %124
  %125 = phi i32 [ %143, %124 ], [ %37, %36 ]
  %126 = phi i16* [ %142, %124 ], [ %38, %36 ]
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %127, align 1
  %128 = getelementptr inbounds i16, i16* %126, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %129, align 1
  %130 = getelementptr inbounds i16, i16* %126, i64 16
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %131, align 1
  %132 = getelementptr inbounds i16, i16* %126, i64 24
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %133, align 1
  %134 = getelementptr inbounds i16, i16* %126, i64 32
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %135, align 1
  %136 = getelementptr inbounds i16, i16* %126, i64 40
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %137, align 1
  %138 = getelementptr inbounds i16, i16* %126, i64 48
  %139 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %139, align 1
  %140 = getelementptr inbounds i16, i16* %126, i64 56
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %141, align 1
  %142 = getelementptr inbounds i16, i16* %126, i64 64
  %143 = add nsw i32 %125, -64
  %144 = icmp sgt i32 %143, 7
  br i1 %144, label %124, label %40

145:                                              ; preds = %49, %145
  %146 = phi i32 [ %148, %145 ], [ %50, %49 ]
  %147 = phi i16* [ %149, %145 ], [ %51, %49 ]
  %148 = add nsw i32 %146, -1
  %149 = getelementptr inbounds i16, i16* %147, i64 1
  store i16 %1, i16* %147, align 2
  %150 = icmp sgt i32 %148, 0
  br i1 %150, label %145, label %151, !llvm.loop !80

151:                                              ; preds = %145, %122, %40
  %152 = bitcast i16* %24 to i8*
  %153 = getelementptr inbounds i8, i8* %152, i64 %3
  %154 = bitcast i8* %153 to i16*
  %155 = icmp sgt i32 %25, 0
  br i1 %155, label %22, label %156

156:                                              ; preds = %151, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse313rect_memset32EPjjimi(i32*, i32, i32, i64, i32) #1 comdat {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %156

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 3
  %9 = insertelement <4 x i32> undef, i32 %1, i32 0
  %10 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> zeroinitializer
  %11 = and i32 %2, 3
  %12 = add nsw i32 %2, -4
  %13 = lshr i32 %12, 2
  %14 = add nuw nsw i32 %13, 1
  %15 = and i32 %14, 7
  %16 = icmp eq i32 %15, 0
  %17 = icmp ult i32 %12, 28
  %18 = insertelement <4 x i32> undef, i32 %1, i32 0
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> zeroinitializer
  %20 = insertelement <4 x i32> undef, i32 %1, i32 0
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %22

22:                                               ; preds = %151, %7
  %23 = phi i32 [ %4, %7 ], [ %25, %151 ]
  %24 = phi i32* [ %0, %7 ], [ %154, %151 ]
  %25 = add nsw i32 %23, -1
  br i1 %8, label %26, label %40

26:                                               ; preds = %22
  br i1 %16, label %36, label %27

27:                                               ; preds = %26, %27
  %28 = phi i32 [ %33, %27 ], [ %2, %26 ]
  %29 = phi i32* [ %32, %27 ], [ %24, %26 ]
  %30 = phi i32 [ %34, %27 ], [ %15, %26 ]
  %31 = bitcast i32* %29 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %31, align 1
  %32 = getelementptr inbounds i32, i32* %29, i64 4
  %33 = add nsw i32 %28, -4
  %34 = add i32 %30, -1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %27, !llvm.loop !81

36:                                               ; preds = %27, %26
  %37 = phi i32 [ %2, %26 ], [ %33, %27 ]
  %38 = phi i32* [ %24, %26 ], [ %32, %27 ]
  %39 = phi i32* [ undef, %26 ], [ %32, %27 ]
  br i1 %17, label %40, label %124

40:                                               ; preds = %36, %124, %22
  %41 = phi i32* [ %24, %22 ], [ %39, %36 ], [ %142, %124 ]
  %42 = phi i32 [ %2, %22 ], [ %11, %124 ], [ %11, %36 ]
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %151

44:                                               ; preds = %40
  %45 = add nsw i32 %42, -1
  %46 = zext i32 %45 to i64
  %47 = add nuw nsw i64 %46, 1
  %48 = icmp ult i64 %47, 8
  br i1 %48, label %49, label %52

49:                                               ; preds = %122, %44
  %50 = phi i32 [ %42, %44 ], [ %55, %122 ]
  %51 = phi i32* [ %41, %44 ], [ %56, %122 ]
  br label %145

52:                                               ; preds = %44
  %53 = and i64 %47, 8589934584
  %54 = trunc i64 %53 to i32
  %55 = sub i32 %42, %54
  %56 = getelementptr i32, i32* %41, i64 %53
  %57 = add nsw i64 %53, -8
  %58 = lshr exact i64 %57, 3
  %59 = add nuw nsw i64 %58, 1
  %60 = and i64 %59, 7
  %61 = icmp ult i64 %57, 56
  br i1 %61, label %109, label %62

62:                                               ; preds = %52
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %106, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %107, %64 ]
  %67 = getelementptr i32, i32* %41, i64 %65
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %68, align 4
  %69 = getelementptr i32, i32* %67, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %70, align 4
  %71 = or i64 %65, 8
  %72 = getelementptr i32, i32* %41, i64 %71
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %73, align 4
  %74 = getelementptr i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %75, align 4
  %76 = or i64 %65, 16
  %77 = getelementptr i32, i32* %41, i64 %76
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %78, align 4
  %79 = getelementptr i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %80, align 4
  %81 = or i64 %65, 24
  %82 = getelementptr i32, i32* %41, i64 %81
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %83, align 4
  %84 = getelementptr i32, i32* %82, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %85, align 4
  %86 = or i64 %65, 32
  %87 = getelementptr i32, i32* %41, i64 %86
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %88, align 4
  %89 = getelementptr i32, i32* %87, i64 4
  %90 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %90, align 4
  %91 = or i64 %65, 40
  %92 = getelementptr i32, i32* %41, i64 %91
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %93, align 4
  %94 = getelementptr i32, i32* %92, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %95, align 4
  %96 = or i64 %65, 48
  %97 = getelementptr i32, i32* %41, i64 %96
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %98, align 4
  %99 = getelementptr i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %100, align 4
  %101 = or i64 %65, 56
  %102 = getelementptr i32, i32* %41, i64 %101
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %103, align 4
  %104 = getelementptr i32, i32* %102, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %105, align 4
  %106 = add i64 %65, 64
  %107 = add i64 %66, -8
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %64, !llvm.loop !82

109:                                              ; preds = %64, %52
  %110 = phi i64 [ 0, %52 ], [ %106, %64 ]
  %111 = icmp eq i64 %60, 0
  br i1 %111, label %122, label %112

112:                                              ; preds = %109, %112
  %113 = phi i64 [ %119, %112 ], [ %110, %109 ]
  %114 = phi i64 [ %120, %112 ], [ %60, %109 ]
  %115 = getelementptr i32, i32* %41, i64 %113
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %116, align 4
  %117 = getelementptr i32, i32* %115, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %21, <4 x i32>* %118, align 4
  %119 = add i64 %113, 8
  %120 = add i64 %114, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %112, !llvm.loop !83

122:                                              ; preds = %112, %109
  %123 = icmp eq i64 %47, %53
  br i1 %123, label %151, label %49

124:                                              ; preds = %36, %124
  %125 = phi i32 [ %143, %124 ], [ %37, %36 ]
  %126 = phi i32* [ %142, %124 ], [ %38, %36 ]
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %127, align 1
  %128 = getelementptr inbounds i32, i32* %126, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %129, align 1
  %130 = getelementptr inbounds i32, i32* %126, i64 8
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %131, align 1
  %132 = getelementptr inbounds i32, i32* %126, i64 12
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %133, align 1
  %134 = getelementptr inbounds i32, i32* %126, i64 16
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %135, align 1
  %136 = getelementptr inbounds i32, i32* %126, i64 20
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %137, align 1
  %138 = getelementptr inbounds i32, i32* %126, i64 24
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %139, align 1
  %140 = getelementptr inbounds i32, i32* %126, i64 28
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %10, <4 x i32>* %141, align 1
  %142 = getelementptr inbounds i32, i32* %126, i64 32
  %143 = add nsw i32 %125, -32
  %144 = icmp sgt i32 %143, 3
  br i1 %144, label %124, label %40

145:                                              ; preds = %49, %145
  %146 = phi i32 [ %148, %145 ], [ %50, %49 ]
  %147 = phi i32* [ %149, %145 ], [ %51, %49 ]
  %148 = add nsw i32 %146, -1
  %149 = getelementptr inbounds i32, i32* %147, i64 1
  store i32 %1, i32* %147, align 4
  %150 = icmp sgt i32 %148, 0
  br i1 %150, label %145, label %151, !llvm.loop !84

151:                                              ; preds = %145, %122, %40
  %152 = bitcast i32* %24 to i8*
  %153 = getelementptr inbounds i8, i8* %152, i64 %3
  %154 = bitcast i8* %153 to i32*
  %155 = icmp sgt i32 %25, 0
  br i1 %155, label %22, label %156

156:                                              ; preds = %151, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse313rect_memset64EPmmimi(i64*, i64, i32, i64, i32) #0 comdat {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %5
  %8 = icmp sgt i32 %2, 1
  %9 = and i32 %2, 1
  %10 = add nsw i32 %2, -2
  %11 = lshr i32 %10, 1
  %12 = add nuw i32 %11, 1
  %13 = and i32 %12, 7
  %14 = icmp eq i32 %13, 0
  %15 = icmp ult i32 %10, 14
  br label %16

16:                                               ; preds = %60, %7
  %17 = phi i32 [ %4, %7 ], [ %19, %60 ]
  %18 = phi i64* [ %0, %7 ], [ %63, %60 ]
  %19 = add nsw i32 %17, -1
  br i1 %8, label %20, label %34

20:                                               ; preds = %16
  br i1 %14, label %30, label %21

21:                                               ; preds = %20, %21
  %22 = phi i32 [ %27, %21 ], [ %2, %20 ]
  %23 = phi i64* [ %26, %21 ], [ %18, %20 ]
  %24 = phi i32 [ %28, %21 ], [ %13, %20 ]
  store i64 %1, i64* %23, align 1
  %25 = getelementptr inbounds i64, i64* %23, i64 1
  store i64 %1, i64* %25, align 1
  %26 = getelementptr inbounds i64, i64* %23, i64 2
  %27 = add nsw i32 %22, -2
  %28 = add i32 %24, -1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %21, !llvm.loop !85

30:                                               ; preds = %21, %20
  %31 = phi i32 [ %2, %20 ], [ %27, %21 ]
  %32 = phi i64* [ %18, %20 ], [ %26, %21 ]
  %33 = phi i64* [ undef, %20 ], [ %26, %21 ]
  br i1 %15, label %34, label %39

34:                                               ; preds = %30, %39, %16
  %35 = phi i64* [ %18, %16 ], [ %33, %30 ], [ %57, %39 ]
  %36 = phi i32 [ %2, %16 ], [ %9, %39 ], [ %9, %30 ]
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %60

38:                                               ; preds = %34
  store i64 %1, i64* %35, align 8
  br label %60

39:                                               ; preds = %30, %39
  %40 = phi i32 [ %58, %39 ], [ %31, %30 ]
  %41 = phi i64* [ %57, %39 ], [ %32, %30 ]
  store i64 %1, i64* %41, align 1
  %42 = getelementptr inbounds i64, i64* %41, i64 1
  store i64 %1, i64* %42, align 1
  %43 = getelementptr inbounds i64, i64* %41, i64 2
  store i64 %1, i64* %43, align 1
  %44 = getelementptr inbounds i64, i64* %41, i64 3
  store i64 %1, i64* %44, align 1
  %45 = getelementptr inbounds i64, i64* %41, i64 4
  store i64 %1, i64* %45, align 1
  %46 = getelementptr inbounds i64, i64* %41, i64 5
  store i64 %1, i64* %46, align 1
  %47 = getelementptr inbounds i64, i64* %41, i64 6
  store i64 %1, i64* %47, align 1
  %48 = getelementptr inbounds i64, i64* %41, i64 7
  store i64 %1, i64* %48, align 1
  %49 = getelementptr inbounds i64, i64* %41, i64 8
  store i64 %1, i64* %49, align 1
  %50 = getelementptr inbounds i64, i64* %41, i64 9
  store i64 %1, i64* %50, align 1
  %51 = getelementptr inbounds i64, i64* %41, i64 10
  store i64 %1, i64* %51, align 1
  %52 = getelementptr inbounds i64, i64* %41, i64 11
  store i64 %1, i64* %52, align 1
  %53 = getelementptr inbounds i64, i64* %41, i64 12
  store i64 %1, i64* %53, align 1
  %54 = getelementptr inbounds i64, i64* %41, i64 13
  store i64 %1, i64* %54, align 1
  %55 = getelementptr inbounds i64, i64* %41, i64 14
  store i64 %1, i64* %55, align 1
  %56 = getelementptr inbounds i64, i64* %41, i64 15
  store i64 %1, i64* %56, align 1
  %57 = getelementptr inbounds i64, i64* %41, i64 16
  %58 = add nsw i32 %40, -16
  %59 = icmp sgt i32 %58, 1
  br i1 %59, label %39, label %34

60:                                               ; preds = %38, %34
  %61 = bitcast i64* %18 to i8*
  %62 = getelementptr inbounds i8, i8* %61, i64 %3
  %63 = bitcast i8* %62 to i64*
  %64 = icmp sgt i32 %19, 0
  br i1 %64, label %16, label %65

65:                                               ; preds = %60, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden float @_ZN4sse312cubic_solverEffff(float, float, float, float) #0 comdat {
  %5 = fsub float -0.000000e+00, %3
  %6 = fmul float %0, 3.000000e+00
  %7 = fmul float %1, 2.000000e+00
  %8 = fadd float %6, %6
  br label %9

9:                                                ; preds = %20, %4
  %10 = phi float [ %5, %4 ], [ %33, %20 ]
  %11 = phi i32 [ 0, %4 ], [ %34, %20 ]
  %12 = fmul float %10, %0
  %13 = fadd float %12, %1
  %14 = fmul float %10, %13
  %15 = fadd float %14, %2
  %16 = fmul float %10, %15
  %17 = fadd float %16, %3
  %18 = tail call float @llvm.fabs.f32(float %17)
  %19 = fcmp ugt float %18, 0x3F0A36E2E0000000
  br i1 %19, label %20, label %36

20:                                               ; preds = %9
  %21 = fmul float %6, %10
  %22 = fadd float %7, %21
  %23 = fmul float %10, %22
  %24 = fadd float %23, %2
  %25 = fmul float %8, %10
  %26 = fadd float %7, %25
  %27 = fmul float %24, 2.000000e+00
  %28 = fmul float %27, %17
  %29 = fmul float %26, %17
  %30 = fmul float %24, %27
  %31 = fsub float %30, %29
  %32 = fdiv float %28, %31
  %33 = fsub float %10, %32
  %34 = add nuw nsw i32 %11, 1
  %35 = icmp eq i32 %34, 8
  br i1 %35, label %36, label %9

36:                                               ; preds = %20, %9
  %37 = phi float [ %10, %9 ], [ %33, %20 ]
  ret float %37
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN4sse37hash_fnEPKvmj(i8*, i64, i32) #0 comdat {
  %4 = icmp ugt i64 %1, 23
  br i1 %4, label %5, label %346

5:                                                ; preds = %3, %5
  %6 = phi i32 [ %231, %5 ], [ %2, %3 ]
  %7 = phi i32 [ %157, %5 ], [ %2, %3 ]
  %8 = phi i32 [ %83, %5 ], [ %2, %3 ]
  %9 = phi i8* [ %232, %5 ], [ %0, %3 ]
  %10 = phi i64 [ %233, %5 ], [ %1, %3 ]
  %11 = bitcast i8* %9 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = trunc i64 %12 to i32
  %14 = xor i32 %8, %13
  %15 = and i32 %14, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %8, 8
  %20 = xor i32 %18, %19
  %21 = lshr i64 %12, 8
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %20, %22
  %24 = and i32 %23, 255
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = lshr i32 %20, 8
  %29 = xor i32 %28, %27
  %30 = lshr i64 %12, 16
  %31 = trunc i64 %30 to i32
  %32 = xor i32 %29, %31
  %33 = and i32 %32, 255
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = lshr i32 %29, 8
  %38 = xor i32 %37, %36
  %39 = lshr i64 %12, 24
  %40 = trunc i64 %39 to i32
  %41 = xor i32 %38, %40
  %42 = and i32 %41, 255
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = lshr i32 %38, 8
  %47 = xor i32 %46, %45
  %48 = lshr i64 %12, 32
  %49 = trunc i64 %48 to i32
  %50 = xor i32 %47, %49
  %51 = and i32 %50, 255
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %47, 8
  %56 = xor i32 %55, %54
  %57 = lshr i64 %12, 40
  %58 = trunc i64 %57 to i32
  %59 = xor i32 %56, %58
  %60 = and i32 %59, 255
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = lshr i32 %56, 8
  %65 = xor i32 %64, %63
  %66 = lshr i64 %12, 48
  %67 = trunc i64 %66 to i32
  %68 = xor i32 %65, %67
  %69 = and i32 %68, 255
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = lshr i32 %65, 8
  %74 = xor i32 %73, %72
  %75 = lshr i64 %12, 56
  %76 = trunc i64 %75 to i32
  %77 = and i32 %74, 255
  %78 = xor i32 %77, %76
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %74, 8
  %83 = xor i32 %82, %81
  %84 = getelementptr inbounds i8, i8* %9, i64 8
  %85 = bitcast i8* %84 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = trunc i64 %86 to i32
  %88 = xor i32 %7, %87
  %89 = and i32 %88, 255
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = lshr i32 %7, 8
  %94 = xor i32 %92, %93
  %95 = lshr i64 %86, 8
  %96 = trunc i64 %95 to i32
  %97 = xor i32 %94, %96
  %98 = and i32 %97, 255
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = lshr i32 %94, 8
  %103 = xor i32 %102, %101
  %104 = lshr i64 %86, 16
  %105 = trunc i64 %104 to i32
  %106 = xor i32 %103, %105
  %107 = and i32 %106, 255
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = lshr i32 %103, 8
  %112 = xor i32 %111, %110
  %113 = lshr i64 %86, 24
  %114 = trunc i64 %113 to i32
  %115 = xor i32 %112, %114
  %116 = and i32 %115, 255
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = lshr i32 %112, 8
  %121 = xor i32 %120, %119
  %122 = lshr i64 %86, 32
  %123 = trunc i64 %122 to i32
  %124 = xor i32 %121, %123
  %125 = and i32 %124, 255
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = lshr i32 %121, 8
  %130 = xor i32 %129, %128
  %131 = lshr i64 %86, 40
  %132 = trunc i64 %131 to i32
  %133 = xor i32 %130, %132
  %134 = and i32 %133, 255
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = lshr i32 %130, 8
  %139 = xor i32 %138, %137
  %140 = lshr i64 %86, 48
  %141 = trunc i64 %140 to i32
  %142 = xor i32 %139, %141
  %143 = and i32 %142, 255
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = lshr i32 %139, 8
  %148 = xor i32 %147, %146
  %149 = lshr i64 %86, 56
  %150 = trunc i64 %149 to i32
  %151 = and i32 %148, 255
  %152 = xor i32 %151, %150
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = lshr i32 %148, 8
  %157 = xor i32 %156, %155
  %158 = getelementptr inbounds i8, i8* %9, i64 16
  %159 = bitcast i8* %158 to i64*
  %160 = load i64, i64* %159, align 1
  %161 = trunc i64 %160 to i32
  %162 = xor i32 %6, %161
  %163 = and i32 %162, 255
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = lshr i32 %6, 8
  %168 = xor i32 %166, %167
  %169 = lshr i64 %160, 8
  %170 = trunc i64 %169 to i32
  %171 = xor i32 %168, %170
  %172 = and i32 %171, 255
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = lshr i32 %168, 8
  %177 = xor i32 %176, %175
  %178 = lshr i64 %160, 16
  %179 = trunc i64 %178 to i32
  %180 = xor i32 %177, %179
  %181 = and i32 %180, 255
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = lshr i32 %177, 8
  %186 = xor i32 %185, %184
  %187 = lshr i64 %160, 24
  %188 = trunc i64 %187 to i32
  %189 = xor i32 %186, %188
  %190 = and i32 %189, 255
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = lshr i32 %186, 8
  %195 = xor i32 %194, %193
  %196 = lshr i64 %160, 32
  %197 = trunc i64 %196 to i32
  %198 = xor i32 %195, %197
  %199 = and i32 %198, 255
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = lshr i32 %195, 8
  %204 = xor i32 %203, %202
  %205 = lshr i64 %160, 40
  %206 = trunc i64 %205 to i32
  %207 = xor i32 %204, %206
  %208 = and i32 %207, 255
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = lshr i32 %204, 8
  %213 = xor i32 %212, %211
  %214 = lshr i64 %160, 48
  %215 = trunc i64 %214 to i32
  %216 = xor i32 %213, %215
  %217 = and i32 %216, 255
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = lshr i32 %213, 8
  %222 = xor i32 %221, %220
  %223 = lshr i64 %160, 56
  %224 = trunc i64 %223 to i32
  %225 = and i32 %222, 255
  %226 = xor i32 %225, %224
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = lshr i32 %222, 8
  %231 = xor i32 %230, %229
  %232 = getelementptr inbounds i8, i8* %9, i64 24
  %233 = add i64 %10, -24
  %234 = icmp ugt i64 %233, 23
  br i1 %234, label %5, label %235

235:                                              ; preds = %5
  %236 = xor i32 %231, %157
  %237 = and i32 %236, 255
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = lshr i32 %157, 8
  %242 = xor i32 %240, %241
  %243 = lshr i32 %231, 8
  %244 = xor i32 %242, %243
  %245 = and i32 %244, 255
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = lshr i32 %242, 8
  %250 = xor i32 %249, %248
  %251 = lshr i32 %231, 16
  %252 = xor i32 %250, %251
  %253 = and i32 %252, 255
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = lshr i32 %250, 8
  %258 = xor i32 %257, %256
  %259 = lshr i32 %229, 24
  %260 = and i32 %258, 255
  %261 = xor i32 %260, %259
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = lshr i32 %258, 8
  %266 = xor i32 %265, %264
  %267 = and i32 %266, 255
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %268
  %270 = load i32, i32* %269, align 4
  %271 = lshr i32 %266, 8
  %272 = xor i32 %271, %270
  %273 = and i32 %272, 255
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = lshr i32 %272, 8
  %278 = xor i32 %277, %276
  %279 = and i32 %278, 255
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %280
  %282 = load i32, i32* %281, align 4
  %283 = lshr i32 %278, 8
  %284 = xor i32 %283, %282
  %285 = and i32 %284, 255
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %286
  %288 = load i32, i32* %287, align 4
  %289 = lshr i32 %284, 8
  %290 = xor i32 %289, %288
  %291 = xor i32 %290, %83
  %292 = and i32 %291, 255
  %293 = zext i32 %292 to i64
  %294 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %293
  %295 = load i32, i32* %294, align 4
  %296 = lshr i32 %83, 8
  %297 = xor i32 %295, %296
  %298 = lshr i32 %290, 8
  %299 = xor i32 %298, %297
  %300 = and i32 %299, 255
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %301
  %303 = load i32, i32* %302, align 4
  %304 = lshr i32 %297, 8
  %305 = xor i32 %304, %303
  %306 = lshr i32 %290, 16
  %307 = xor i32 %306, %305
  %308 = and i32 %307, 255
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = lshr i32 %305, 8
  %313 = xor i32 %312, %311
  %314 = lshr i32 %288, 24
  %315 = and i32 %313, 255
  %316 = xor i32 %315, %314
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %317
  %319 = load i32, i32* %318, align 4
  %320 = lshr i32 %313, 8
  %321 = xor i32 %320, %319
  %322 = and i32 %321, 255
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = lshr i32 %321, 8
  %327 = xor i32 %326, %325
  %328 = and i32 %327, 255
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %329
  %331 = load i32, i32* %330, align 4
  %332 = lshr i32 %327, 8
  %333 = xor i32 %332, %331
  %334 = and i32 %333, 255
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %335
  %337 = load i32, i32* %336, align 4
  %338 = lshr i32 %333, 8
  %339 = xor i32 %338, %337
  %340 = and i32 %339, 255
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = lshr i32 %339, 8
  %345 = xor i32 %344, %343
  br label %346

346:                                              ; preds = %235, %3
  %347 = phi i64 [ %233, %235 ], [ %1, %3 ]
  %348 = phi i32 [ %345, %235 ], [ %2, %3 ]
  %349 = phi i8* [ %232, %235 ], [ %0, %3 ]
  %350 = icmp ugt i64 %347, 7
  br i1 %350, label %351, label %358

351:                                              ; preds = %346
  %352 = add nsw i64 %347, -8
  %353 = and i64 %352, -8
  %354 = add nuw nsw i64 %353, 8
  %355 = getelementptr i8, i8* %349, i64 %354
  br label %384

356:                                              ; preds = %384
  %357 = sub i64 %352, %353
  br label %358

358:                                              ; preds = %356, %346
  %359 = phi i64 [ %347, %346 ], [ %357, %356 ]
  %360 = phi i32 [ %348, %346 ], [ %460, %356 ]
  %361 = phi i8* [ %349, %346 ], [ %355, %356 ]
  %362 = icmp eq i64 %359, 0
  br i1 %362, label %490, label %363

363:                                              ; preds = %358
  %364 = and i64 %359, 1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %378, label %366

366:                                              ; preds = %363
  %367 = load i8, i8* %361, align 1
  %368 = zext i8 %367 to i32
  %369 = and i32 %360, 255
  %370 = xor i32 %369, %368
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %371
  %373 = load i32, i32* %372, align 4
  %374 = lshr i32 %360, 8
  %375 = xor i32 %373, %374
  %376 = getelementptr inbounds i8, i8* %361, i64 1
  %377 = add i64 %359, -1
  br label %378

378:                                              ; preds = %363, %366
  %379 = phi i32 [ undef, %363 ], [ %375, %366 ]
  %380 = phi i8* [ %361, %363 ], [ %376, %366 ]
  %381 = phi i32 [ %360, %363 ], [ %375, %366 ]
  %382 = phi i64 [ %359, %363 ], [ %377, %366 ]
  %383 = icmp eq i64 %359, 1
  br i1 %383, label %490, label %464

384:                                              ; preds = %351, %384
  %385 = phi i8* [ %461, %384 ], [ %349, %351 ]
  %386 = phi i32 [ %460, %384 ], [ %348, %351 ]
  %387 = phi i64 [ %462, %384 ], [ %347, %351 ]
  %388 = bitcast i8* %385 to i64*
  %389 = load i64, i64* %388, align 1
  %390 = trunc i64 %389 to i32
  %391 = xor i32 %386, %390
  %392 = and i32 %391, 255
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %393
  %395 = load i32, i32* %394, align 4
  %396 = lshr i32 %386, 8
  %397 = xor i32 %395, %396
  %398 = lshr i64 %389, 8
  %399 = trunc i64 %398 to i32
  %400 = xor i32 %397, %399
  %401 = and i32 %400, 255
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %402
  %404 = load i32, i32* %403, align 4
  %405 = lshr i32 %397, 8
  %406 = xor i32 %405, %404
  %407 = lshr i64 %389, 16
  %408 = trunc i64 %407 to i32
  %409 = xor i32 %406, %408
  %410 = and i32 %409, 255
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %411
  %413 = load i32, i32* %412, align 4
  %414 = lshr i32 %406, 8
  %415 = xor i32 %414, %413
  %416 = lshr i64 %389, 24
  %417 = trunc i64 %416 to i32
  %418 = xor i32 %415, %417
  %419 = and i32 %418, 255
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = lshr i32 %415, 8
  %424 = xor i32 %423, %422
  %425 = lshr i64 %389, 32
  %426 = trunc i64 %425 to i32
  %427 = xor i32 %424, %426
  %428 = and i32 %427, 255
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %429
  %431 = load i32, i32* %430, align 4
  %432 = lshr i32 %424, 8
  %433 = xor i32 %432, %431
  %434 = lshr i64 %389, 40
  %435 = trunc i64 %434 to i32
  %436 = xor i32 %433, %435
  %437 = and i32 %436, 255
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = lshr i32 %433, 8
  %442 = xor i32 %441, %440
  %443 = lshr i64 %389, 48
  %444 = trunc i64 %443 to i32
  %445 = xor i32 %442, %444
  %446 = and i32 %445, 255
  %447 = zext i32 %446 to i64
  %448 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = lshr i32 %442, 8
  %451 = xor i32 %450, %449
  %452 = lshr i64 %389, 56
  %453 = trunc i64 %452 to i32
  %454 = and i32 %451, 255
  %455 = xor i32 %454, %453
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %456
  %458 = load i32, i32* %457, align 4
  %459 = lshr i32 %451, 8
  %460 = xor i32 %459, %458
  %461 = getelementptr inbounds i8, i8* %385, i64 8
  %462 = add i64 %387, -8
  %463 = icmp ugt i64 %462, 7
  br i1 %463, label %384, label %356

464:                                              ; preds = %378, %464
  %465 = phi i8* [ %487, %464 ], [ %380, %378 ]
  %466 = phi i32 [ %486, %464 ], [ %381, %378 ]
  %467 = phi i64 [ %488, %464 ], [ %382, %378 ]
  %468 = load i8, i8* %465, align 1
  %469 = zext i8 %468 to i32
  %470 = and i32 %466, 255
  %471 = xor i32 %470, %469
  %472 = zext i32 %471 to i64
  %473 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = lshr i32 %466, 8
  %476 = xor i32 %474, %475
  %477 = getelementptr inbounds i8, i8* %465, i64 1
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = and i32 %476, 255
  %481 = xor i32 %480, %479
  %482 = zext i32 %481 to i64
  %483 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL12crc32c_table, i64 0, i64 %482
  %484 = load i32, i32* %483, align 4
  %485 = lshr i32 %476, 8
  %486 = xor i32 %484, %485
  %487 = getelementptr inbounds i8, i8* %465, i64 2
  %488 = add i64 %467, -2
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %464

490:                                              ; preds = %378, %464, %358
  %491 = phi i32 [ %360, %358 ], [ %379, %378 ], [ %486, %464 ]
  ret i32 %491
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse323S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj(%struct.SkBitmapProcState* dereferenceable(336), i32*, i32, i32*) #1 comdat {
  %5 = load i32, i32* %1, align 4
  %6 = lshr i32 %5, 18
  %7 = and i32 %5, 16383
  %8 = lshr i32 %5, 14
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = zext i32 %6 to i64
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %11
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = zext i32 %7 to i64
  %18 = mul i64 %13, %17
  %19 = getelementptr inbounds i8, i8* %10, i64 %18
  %20 = bitcast i8* %19 to i32*
  %21 = trunc i32 %8 to i16
  %22 = and i16 %21, 15
  %23 = icmp sgt i32 %2, 0
  br i1 %23, label %24, label %93

24:                                               ; preds = %4
  %25 = insertelement <8 x i16> undef, i16 %22, i32 0
  %26 = shufflevector <8 x i16> %25, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %27 = bitcast <8 x i16> %26 to <2 x i64>
  %28 = sub nuw nsw i16 16, %22
  %29 = insertelement <8 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <8 x i16> %29, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %31 = bitcast <8 x i16> %30 to <2 x i64>
  %32 = shufflevector <2 x i64> %27, <2 x i64> %31, <2 x i32> <i32 0, i32 2>
  %33 = bitcast <2 x i64> %32 to <8 x i16>
  %34 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  br label %35

35:                                               ; preds = %24, %86
  %36 = phi i32 [ %2, %24 ], [ %40, %86 ]
  %37 = phi i32* [ %1, %24 ], [ %39, %86 ]
  %38 = phi i32* [ %3, %24 ], [ %91, %86 ]
  %39 = getelementptr inbounds i32, i32* %37, i64 1
  %40 = add nsw i32 %36, -1
  %41 = load i32, i32* %39, align 4
  %42 = lshr i32 %41, 18
  %43 = and i32 %41, 16383
  %44 = lshr i32 %41, 14
  %45 = zext i32 %42 to i64
  %46 = getelementptr inbounds i32, i32* %16, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %43 to i64
  %49 = getelementptr inbounds i32, i32* %16, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds i32, i32* %20, i64 %45
  %52 = load i32, i32* %51, align 4
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = getelementptr inbounds i32, i32* %20, i64 %48
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = insertelement <4 x i32> %53, i32 %47, i32 1
  %58 = bitcast <4 x i32> %57 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %60 = insertelement <4 x i32> %56, i32 %50, i32 1
  %61 = bitcast <4 x i32> %60 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = bitcast <16 x i8> %59 to <8 x i16>
  %64 = shl <8 x i16> %63, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %65 = bitcast <16 x i8> %62 to <8 x i16>
  %66 = sub <8 x i16> %65, %63
  %67 = trunc i32 %44 to i16
  %68 = and i16 %67, 15
  %69 = insertelement <8 x i16> undef, i16 %68, i32 0
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> zeroinitializer
  %71 = mul <8 x i16> %66, %70
  %72 = add <8 x i16> %71, %64
  %73 = mul <8 x i16> %72, %33
  %74 = bitcast <8 x i16> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %76 = bitcast <16 x i8> %75 to <8 x i16>
  %77 = add <8 x i16> %73, %76
  %78 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %79 = load i16, i16* %34, align 8
  %80 = icmp ult i16 %79, 256
  br i1 %80, label %81, label %86

81:                                               ; preds = %35
  %82 = insertelement <8 x i16> undef, i16 %79, i32 0
  %83 = shufflevector <8 x i16> %82, <8 x i16> undef, <8 x i32> zeroinitializer
  %84 = mul <8 x i16> %78, %83
  %85 = lshr <8 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %86

86:                                               ; preds = %81, %35
  %87 = phi <8 x i16> [ %85, %81 ], [ %78, %35 ]
  %88 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %87, <8 x i16> undef) #18
  %89 = bitcast <16 x i8> %88 to <4 x i32>
  %90 = extractelement <4 x i32> %89, i32 0
  %91 = getelementptr inbounds i32, i32* %38, i64 1
  store i32 %90, i32* %38, align 4
  %92 = icmp sgt i32 %40, 0
  br i1 %92, label %35, label %93

93:                                               ; preds = %86, %4
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv(%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**) #3 comdat {
  %9 = alloca [16 x %union.Slot], align 32
  %10 = alloca <8 x i64>, align 64
  %11 = alloca <8 x i64>, align 64
  %12 = bitcast [16 x %union.Slot]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %12) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %12, i8 -1, i64 512, i1 false)
  %13 = getelementptr inbounds [16 x %union.Slot], [16 x %union.Slot]* %9, i64 0, i64 0
  %14 = icmp sgt i32 %2, 16
  br i1 %14, label %15, label %25

15:                                               ; preds = %8
  %16 = add nuw nsw i32 %2, 1
  %17 = sext i32 %16 to i64
  %18 = shl nsw i64 %17, 5
  %19 = tail call i8* @_Znam(i64 %18) #19
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 31
  %22 = add i64 %20, 32
  %23 = sub i64 %22, %21
  %24 = inttoptr i64 %23 to %union.Slot*
  br label %25

25:                                               ; preds = %15, %8
  %26 = phi i8* [ %19, %15 ], [ null, %8 ]
  %27 = phi %union.Slot* [ %24, %15 ], [ %13, %8 ]
  %28 = icmp sgt i32 %6, 0
  br i1 %28, label %29, label %1929

29:                                               ; preds = %25
  %30 = bitcast <8 x i64>* %10 to i8*
  %31 = bitcast <8 x i64>* %11 to i8*
  %32 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 4
  %33 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 5
  %34 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 6
  %35 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 7
  %36 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 4
  %37 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 5
  %38 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 6
  %39 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 7
  %40 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 0
  %41 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 1
  %42 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 2
  %43 = getelementptr inbounds <8 x i64>, <8 x i64>* %10, i64 0, i64 3
  %44 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 0
  %45 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 1
  %46 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 2
  %47 = getelementptr inbounds <8 x i64>, <8 x i64>* %11, i64 0, i64 3
  %48 = icmp sgt i32 %5, 0
  %49 = sext i32 %5 to i64
  %50 = and i64 %49, 1
  %51 = icmp eq i32 %5, 1
  %52 = sub nsw i64 %49, %50
  %53 = icmp eq i64 %50, 0
  br label %54

54:                                               ; preds = %29, %101
  %55 = phi i32 [ %6, %29 ], [ %68, %101 ]
  %56 = phi i32 [ 0, %29 ], [ %3, %101 ]
  %57 = icmp sgt i32 %55, 7
  %58 = select i1 %57, i32 8, i32 1
  %59 = icmp slt i32 %56, %1
  br i1 %59, label %60, label %67

60:                                               ; preds = %54
  %61 = zext i1 %57 to i32
  %62 = insertelement <8 x i32> undef, i32 %55, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = add <8 x i32> %63, <i32 0, i32 -1, i32 -2, i32 -3, i32 -4, i32 -5, i32 -6, i32 -7>
  %65 = zext i32 %58 to i64
  %66 = sext i32 %56 to i64
  br label %103

67:                                               ; preds = %1925, %54
  %68 = sub nsw i32 %55, %58
  br i1 %48, label %69, label %101

69:                                               ; preds = %67
  br i1 %51, label %91, label %70

70:                                               ; preds = %69, %70
  %71 = phi i64 [ %88, %70 ], [ 0, %69 ]
  %72 = phi i64 [ %89, %70 ], [ %52, %69 ]
  %73 = getelementptr inbounds i8*, i8** %7, i64 %71
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds i32, i32* %4, i64 %71
  %76 = load i32, i32* %75, align 4
  %77 = mul nsw i32 %76, %58
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %74, i64 %78
  store i8* %79, i8** %73, align 8
  %80 = or i64 %71, 1
  %81 = getelementptr inbounds i8*, i8** %7, i64 %80
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i32, i32* %4, i64 %80
  %84 = load i32, i32* %83, align 4
  %85 = mul nsw i32 %84, %58
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  store i8* %87, i8** %81, align 8
  %88 = add nuw nsw i64 %71, 2
  %89 = add i64 %72, -2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %70

91:                                               ; preds = %70, %69
  %92 = phi i64 [ 0, %69 ], [ %88, %70 ]
  br i1 %53, label %101, label %93

93:                                               ; preds = %91
  %94 = getelementptr inbounds i8*, i8** %7, i64 %92
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds i32, i32* %4, i64 %92
  %97 = load i32, i32* %96, align 4
  %98 = mul nsw i32 %97, %58
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %95, i64 %99
  store i8* %100, i8** %94, align 8
  br label %101

101:                                              ; preds = %93, %91, %67
  %102 = icmp sgt i32 %68, 0
  br i1 %102, label %54, label %1929

103:                                              ; preds = %1925, %60
  %104 = phi i64 [ %66, %60 ], [ %1926, %1925 ]
  %105 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 4
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 6
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 7
  %118 = load i32, i32* %117, align 4
  %119 = shl nsw i32 %106, 1
  %120 = or i32 %119, %61
  switch i32 %120, label %121 [
    i32 2, label %122
    i32 4, label %130
    i32 6, label %139
    i32 8, label %148
    i32 3, label %164
    i32 5, label %204
    i32 7, label %214
    i32 9, label %221
    i32 12, label %238
    i32 14, label %247
    i32 16, label %257
    i32 18, label %267
    i32 13, label %280
    i32 15, label %290
    i32 17, label %306
    i32 19, label %313
    i32 24, label %328
    i32 26, label %351
    i32 28, label %374
    i32 25, label %396
    i32 27, label %478
    i32 29, label %560
    i32 10, label %642
    i32 11, label %642
    i32 20, label %713
    i32 21, label %713
    i32 0, label %1925
    i32 1, label %1925
    i32 22, label %773
    i32 23, label %773
    i32 30, label %777
    i32 31, label %777
    i32 32, label %792
    i32 33, label %792
    i32 34, label %800
    i32 35, label %800
    i32 38, label %813
    i32 39, label %813
    i32 42, label %826
    i32 43, label %826
    i32 46, label %839
    i32 47, label %839
    i32 48, label %852
    i32 49, label %852
    i32 50, label %866
    i32 51, label %866
    i32 52, label %880
    i32 53, label %880
    i32 54, label %949
    i32 55, label %949
    i32 56, label %1014
    i32 57, label %1014
    i32 58, label %1079
    i32 59, label %1079
    i32 36, label %1114
    i32 37, label %1114
    i32 40, label %1127
    i32 41, label %1127
    i32 44, label %1140
    i32 45, label %1140
    i32 60, label %1153
    i32 61, label %1153
    i32 64, label %1164
    i32 65, label %1164
    i32 62, label %1175
    i32 63, label %1175
    i32 82, label %1186
    i32 83, label %1186
    i32 80, label %1200
    i32 81, label %1200
    i32 88, label %1214
    i32 89, label %1214
    i32 86, label %1228
    i32 87, label %1228
    i32 84, label %1242
    i32 85, label %1242
    i32 90, label %1256
    i32 91, label %1256
    i32 92, label %1270
    i32 93, label %1270
    i32 94, label %1283
    i32 95, label %1283
    i32 96, label %1296
    i32 97, label %1296
    i32 98, label %1309
    i32 99, label %1309
    i32 100, label %1323
    i32 101, label %1323
    i32 66, label %1430
    i32 67, label %1430
    i32 68, label %1465
    i32 69, label %1465
    i32 78, label %1500
    i32 79, label %1500
    i32 70, label %1509
    i32 71, label %1509
    i32 72, label %1518
    i32 73, label %1518
    i32 74, label %1548
    i32 75, label %1548
    i32 76, label %1743
    i32 77, label %1743
  ]

121:                                              ; preds = %103
  tail call void @llvm.trap()
  unreachable

122:                                              ; preds = %103
  %123 = sext i32 %116 to i64
  %124 = getelementptr inbounds i8*, i8** %7, i64 %123
  %125 = load i8*, i8** %124, align 8
  %126 = sext i32 %110 to i64
  %127 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %126
  %128 = bitcast %union.Slot* %127 to i8*
  %129 = load i8, i8* %128, align 32
  store i8 %129, i8* %125, align 1
  br label %1925

130:                                              ; preds = %103
  %131 = sext i32 %116 to i64
  %132 = getelementptr inbounds i8*, i8** %7, i64 %131
  %133 = bitcast i8** %132 to i16**
  %134 = load i16*, i16** %133, align 8
  %135 = sext i32 %110 to i64
  %136 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %135
  %137 = bitcast %union.Slot* %136 to i16*
  %138 = load i16, i16* %137, align 32
  store i16 %138, i16* %134, align 1
  br label %1925

139:                                              ; preds = %103
  %140 = sext i32 %116 to i64
  %141 = getelementptr inbounds i8*, i8** %7, i64 %140
  %142 = bitcast i8** %141 to i32**
  %143 = load i32*, i32** %142, align 8
  %144 = sext i32 %110 to i64
  %145 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %144
  %146 = bitcast %union.Slot* %145 to i32*
  %147 = load i32, i32* %146, align 32
  store i32 %147, i32* %143, align 1
  br label %1925

148:                                              ; preds = %103
  %149 = sext i32 %116 to i64
  %150 = getelementptr inbounds i8*, i8** %7, i64 %149
  %151 = bitcast i8** %150 to i32**
  %152 = load i32*, i32** %151, align 8
  %153 = sext i32 %110 to i64
  %154 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %153
  %155 = bitcast %union.Slot* %154 to i32*
  %156 = load i32, i32* %155, align 32
  store i32 %156, i32* %152, align 1
  %157 = load i8*, i8** %150, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 4
  %159 = sext i32 %112 to i64
  %160 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %159
  %161 = bitcast %union.Slot* %160 to i32*
  %162 = bitcast i8* %158 to i32*
  %163 = load i32, i32* %161, align 32
  store i32 %163, i32* %162, align 1
  br label %1925

164:                                              ; preds = %103
  %165 = sext i32 %110 to i64
  %166 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %165
  %167 = bitcast %union.Slot* %166 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 32
  %169 = trunc <8 x i32> %168 to <8 x i8>
  %170 = extractelement <8 x i8> %169, i32 0
  %171 = extractelement <8 x i8> %169, i32 1
  %172 = extractelement <8 x i8> %169, i32 2
  %173 = extractelement <8 x i8> %169, i32 3
  %174 = extractelement <8 x i8> %169, i32 4
  %175 = extractelement <8 x i8> %169, i32 5
  %176 = extractelement <8 x i8> %169, i32 6
  %177 = extractelement <8 x i8> %169, i32 7
  %178 = zext i8 %177 to i64
  %179 = shl nuw i64 %178, 56
  %180 = zext i8 %176 to i64
  %181 = shl nuw nsw i64 %180, 48
  %182 = zext i8 %175 to i64
  %183 = shl nuw nsw i64 %182, 40
  %184 = zext i8 %174 to i64
  %185 = shl nuw nsw i64 %184, 32
  %186 = zext i8 %173 to i64
  %187 = shl nuw nsw i64 %186, 24
  %188 = zext i8 %172 to i64
  %189 = shl nuw nsw i64 %188, 16
  %190 = zext i8 %171 to i64
  %191 = shl nuw nsw i64 %190, 8
  %192 = zext i8 %170 to i64
  %193 = or i64 %191, %192
  %194 = or i64 %193, %189
  %195 = or i64 %194, %187
  %196 = or i64 %195, %185
  %197 = or i64 %196, %183
  %198 = or i64 %197, %181
  %199 = or i64 %198, %179
  %200 = sext i32 %116 to i64
  %201 = getelementptr inbounds i8*, i8** %7, i64 %200
  %202 = bitcast i8** %201 to i64**
  %203 = load i64*, i64** %202, align 8
  store i64 %199, i64* %203, align 1
  br label %1925

204:                                              ; preds = %103
  %205 = sext i32 %110 to i64
  %206 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %205
  %207 = bitcast %union.Slot* %206 to <8 x i32>*
  %208 = load <8 x i32>, <8 x i32>* %207, align 32
  %209 = trunc <8 x i32> %208 to <8 x i16>
  %210 = sext i32 %116 to i64
  %211 = getelementptr inbounds i8*, i8** %7, i64 %210
  %212 = bitcast i8** %211 to <8 x i16>**
  %213 = load <8 x i16>*, <8 x i16>** %212, align 8
  store <8 x i16> %209, <8 x i16>* %213, align 1
  br label %1925

214:                                              ; preds = %103
  %215 = sext i32 %110 to i64
  %216 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %215
  %217 = sext i32 %116 to i64
  %218 = getelementptr inbounds i8*, i8** %7, i64 %217
  %219 = load i8*, i8** %218, align 8
  %220 = bitcast %union.Slot* %216 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %219, i8* align 32 %220, i64 32, i1 false) #18
  br label %1925

221:                                              ; preds = %103
  %222 = sext i32 %110 to i64
  %223 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %222
  %224 = bitcast %union.Slot* %223 to <8 x i32>*
  %225 = load <8 x i32>, <8 x i32>* %224, align 32, !noalias !86
  %226 = zext <8 x i32> %225 to <8 x i64>
  %227 = sext i32 %112 to i64
  %228 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %227
  %229 = bitcast %union.Slot* %228 to <8 x i32>*
  %230 = load <8 x i32>, <8 x i32>* %229, align 32, !noalias !89
  %231 = zext <8 x i32> %230 to <8 x i64>
  %232 = shl nuw <8 x i64> %231, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %233 = or <8 x i64> %232, %226
  %234 = sext i32 %116 to i64
  %235 = getelementptr inbounds i8*, i8** %7, i64 %234
  %236 = bitcast i8** %235 to <8 x i64>**
  %237 = load <8 x i64>*, <8 x i64>** %236, align 8
  store <8 x i64> %233, <8 x i64>* %237, align 1
  br label %1925

238:                                              ; preds = %103
  %239 = sext i32 %108 to i64
  %240 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %239
  %241 = bitcast %union.Slot* %240 to i8*
  %242 = sext i32 %116 to i64
  %243 = getelementptr inbounds i8*, i8** %7, i64 %242
  %244 = bitcast %union.Slot* %240 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %244, i8 0, i64 32, i1 false)
  %245 = load i8*, i8** %243, align 8
  %246 = load i8, i8* %245, align 1
  store i8 %246, i8* %241, align 32
  br label %1925

247:                                              ; preds = %103
  %248 = sext i32 %108 to i64
  %249 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %248
  %250 = sext i32 %116 to i64
  %251 = getelementptr inbounds i8*, i8** %7, i64 %250
  %252 = bitcast i8** %251 to i16**
  %253 = bitcast %union.Slot* %249 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %253, i8 0, i64 32, i1 false)
  %254 = load i16*, i16** %252, align 8
  %255 = bitcast %union.Slot* %249 to i16*
  %256 = load i16, i16* %254, align 1
  store i16 %256, i16* %255, align 32
  br label %1925

257:                                              ; preds = %103
  %258 = sext i32 %108 to i64
  %259 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %258
  %260 = bitcast %union.Slot* %259 to i32*
  %261 = sext i32 %116 to i64
  %262 = getelementptr inbounds i8*, i8** %7, i64 %261
  %263 = bitcast i8** %262 to i32**
  %264 = bitcast %union.Slot* %259 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %264, i8 0, i64 32, i1 false)
  %265 = load i32*, i32** %263, align 8
  %266 = load i32, i32* %265, align 1
  store i32 %266, i32* %260, align 32
  br label %1925

267:                                              ; preds = %103
  %268 = sext i32 %108 to i64
  %269 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %268
  %270 = bitcast %union.Slot* %269 to i32*
  %271 = sext i32 %116 to i64
  %272 = getelementptr inbounds i8*, i8** %7, i64 %271
  %273 = bitcast %union.Slot* %269 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %273, i8 0, i64 32, i1 false)
  %274 = load i8*, i8** %272, align 8
  %275 = shl nsw i32 %118, 2
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %274, i64 %276
  %278 = bitcast i8* %277 to i32*
  %279 = load i32, i32* %278, align 1
  store i32 %279, i32* %270, align 32
  br label %1925

280:                                              ; preds = %103
  %281 = sext i32 %116 to i64
  %282 = getelementptr inbounds i8*, i8** %7, i64 %281
  %283 = bitcast i8** %282 to <8 x i8>**
  %284 = load <8 x i8>*, <8 x i8>** %283, align 8
  %285 = load <8 x i8>, <8 x i8>* %284, align 1
  %286 = zext <8 x i8> %285 to <8 x i32>
  %287 = sext i32 %108 to i64
  %288 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %287
  %289 = bitcast %union.Slot* %288 to <8 x i32>*
  store <8 x i32> %286, <8 x i32>* %289, align 32
  br label %1925

290:                                              ; preds = %103
  %291 = sext i32 %116 to i64
  %292 = getelementptr inbounds i8*, i8** %7, i64 %291
  %293 = load i8*, i8** %292, align 8
  %294 = bitcast i8* %293 to <4 x i16>*
  %295 = load <4 x i16>, <4 x i16>* %294, align 1
  %296 = getelementptr inbounds i8, i8* %293, i64 8
  %297 = bitcast i8* %296 to <4 x i16>*
  %298 = load <4 x i16>, <4 x i16>* %297, align 1
  %299 = shufflevector <4 x i16> %295, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %300 = shufflevector <4 x i16> %298, <4 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %301 = shufflevector <8 x i16> %299, <8 x i16> %300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %302 = zext <8 x i16> %301 to <8 x i32>
  %303 = sext i32 %108 to i64
  %304 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %303
  %305 = bitcast %union.Slot* %304 to <8 x i32>*
  store <8 x i32> %302, <8 x i32>* %305, align 32
  br label %1925

306:                                              ; preds = %103
  %307 = sext i32 %116 to i64
  %308 = getelementptr inbounds i8*, i8** %7, i64 %307
  %309 = load i8*, i8** %308, align 8
  %310 = sext i32 %108 to i64
  %311 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %310
  %312 = bitcast %union.Slot* %311 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 32 %312, i8* align 1 %309, i64 32, i1 false)
  br label %1925

313:                                              ; preds = %103
  %314 = sext i32 %116 to i64
  %315 = getelementptr inbounds i8*, i8** %7, i64 %314
  %316 = bitcast i8** %315 to <8 x i64>**
  %317 = load <8 x i64>*, <8 x i64>** %316, align 8
  %318 = load <8 x i64>, <8 x i64>* %317, align 1
  %319 = shl nsw i32 %118, 5
  %320 = insertelement <8 x i32> undef, i32 %319, i32 0
  %321 = shufflevector <8 x i32> %320, <8 x i32> undef, <8 x i32> zeroinitializer
  %322 = zext <8 x i32> %321 to <8 x i64>
  %323 = lshr <8 x i64> %318, %322
  %324 = trunc <8 x i64> %323 to <8 x i32>
  %325 = sext i32 %108 to i64
  %326 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %325
  %327 = bitcast %union.Slot* %326 to <8 x i32>*
  store <8 x i32> %324, <8 x i32>* %327, align 32
  br label %1925

328:                                              ; preds = %103
  %329 = sext i32 %116 to i64
  %330 = getelementptr inbounds i8*, i8** %7, i64 %329
  %331 = load i8*, i8** %330, align 8
  %332 = sext i32 %118 to i64
  %333 = getelementptr inbounds i8, i8* %331, i64 %332
  %334 = bitcast i8* %333 to i8**
  %335 = load i8*, i8** %334, align 1
  %336 = sext i32 %110 to i64
  %337 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %336
  %338 = bitcast %union.Slot* %337 to i32*
  %339 = load i32, i32* %338, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i8, i8* %335, i64 %340
  %342 = load i8, i8* %341, align 1
  %343 = zext i8 %342 to i32
  %344 = sext i32 %108 to i64
  %345 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %344
  %346 = insertelement <4 x i32> undef, i32 %343, i32 0
  %347 = shufflevector <4 x i32> %346, <4 x i32> undef, <4 x i32> zeroinitializer
  %348 = bitcast %union.Slot* %345 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %348, align 32
  %349 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %344, i32 0, i32 1
  %350 = bitcast %"struct.skvx::Vec.56"* %349 to <4 x i32>*
  store <4 x i32> %347, <4 x i32>* %350, align 16
  br label %1925

351:                                              ; preds = %103
  %352 = sext i32 %116 to i64
  %353 = getelementptr inbounds i8*, i8** %7, i64 %352
  %354 = load i8*, i8** %353, align 8
  %355 = sext i32 %118 to i64
  %356 = getelementptr inbounds i8, i8* %354, i64 %355
  %357 = bitcast i8* %356 to i16**
  %358 = load i16*, i16** %357, align 1
  %359 = sext i32 %110 to i64
  %360 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %359
  %361 = bitcast %union.Slot* %360 to i32*
  %362 = load i32, i32* %361, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i16, i16* %358, i64 %363
  %365 = load i16, i16* %364, align 2
  %366 = zext i16 %365 to i32
  %367 = sext i32 %108 to i64
  %368 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %367
  %369 = insertelement <4 x i32> undef, i32 %366, i32 0
  %370 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> zeroinitializer
  %371 = bitcast %union.Slot* %368 to <4 x i32>*
  store <4 x i32> %370, <4 x i32>* %371, align 32
  %372 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %367, i32 0, i32 1
  %373 = bitcast %"struct.skvx::Vec.56"* %372 to <4 x i32>*
  store <4 x i32> %370, <4 x i32>* %373, align 16
  br label %1925

374:                                              ; preds = %103
  %375 = sext i32 %116 to i64
  %376 = getelementptr inbounds i8*, i8** %7, i64 %375
  %377 = load i8*, i8** %376, align 8
  %378 = sext i32 %118 to i64
  %379 = getelementptr inbounds i8, i8* %377, i64 %378
  %380 = bitcast i8* %379 to i32**
  %381 = load i32*, i32** %380, align 1
  %382 = sext i32 %110 to i64
  %383 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %382
  %384 = bitcast %union.Slot* %383 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i32, i32* %381, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = sext i32 %108 to i64
  %390 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %389
  %391 = insertelement <4 x i32> undef, i32 %388, i32 0
  %392 = shufflevector <4 x i32> %391, <4 x i32> undef, <4 x i32> zeroinitializer
  %393 = bitcast %union.Slot* %390 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %393, align 32
  %394 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %389, i32 0, i32 1
  %395 = bitcast %"struct.skvx::Vec.56"* %394 to <4 x i32>*
  store <4 x i32> %392, <4 x i32>* %395, align 16
  br label %1925

396:                                              ; preds = %103
  %397 = sext i32 %116 to i64
  %398 = getelementptr inbounds i8*, i8** %7, i64 %397
  %399 = load i8*, i8** %398, align 8
  %400 = sext i32 %118 to i64
  %401 = getelementptr inbounds i8, i8* %399, i64 %400
  %402 = bitcast i8* %401 to i8**
  %403 = load i8*, i8** %402, align 1
  %404 = sext i32 %110 to i64
  %405 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404
  %406 = bitcast %union.Slot* %405 to i32*
  %407 = load i32, i32* %406, align 4, !noalias !92
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %403, i64 %408
  %410 = load i8, i8* %409, align 1, !noalias !92
  %411 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 0, i32 0, i32 1
  %412 = bitcast %"struct.skvx::Vec.58"* %411 to i32*
  %413 = load i32, i32* %412, align 4, !noalias !92
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds i8, i8* %403, i64 %414
  %416 = load i8, i8* %415, align 1, !noalias !92
  %417 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 0, i32 1
  %418 = bitcast %"struct.skvx::Vec.57"* %417 to i32*
  %419 = load i32, i32* %418, align 4, !noalias !92
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds i8, i8* %403, i64 %420
  %422 = load i8, i8* %421, align 1, !noalias !92
  %423 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 0, i32 1, i32 1
  %424 = bitcast %"struct.skvx::Vec.58"* %423 to i32*
  %425 = load i32, i32* %424, align 4, !noalias !92
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds i8, i8* %403, i64 %426
  %428 = load i8, i8* %427, align 1, !noalias !92
  %429 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1
  %430 = bitcast %"struct.skvx::Vec.56"* %429 to i32*
  %431 = load i32, i32* %430, align 4, !noalias !92
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %403, i64 %432
  %434 = load i8, i8* %433, align 1, !noalias !92
  %435 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1, i32 0, i32 1
  %436 = bitcast %"struct.skvx::Vec.58"* %435 to i32*
  %437 = load i32, i32* %436, align 4, !noalias !92
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i8, i8* %403, i64 %438
  %440 = load i8, i8* %439, align 1, !noalias !92
  %441 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1, i32 1
  %442 = bitcast %"struct.skvx::Vec.57"* %441 to i32*
  %443 = load i32, i32* %442, align 4, !noalias !92
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds i8, i8* %403, i64 %444
  %446 = load i8, i8* %445, align 1, !noalias !92
  %447 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %404, i32 0, i32 1, i32 1, i32 1
  %448 = bitcast %"struct.skvx::Vec.58"* %447 to i32*
  %449 = load i32, i32* %448, align 4, !noalias !92
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i8, i8* %403, i64 %450
  %452 = load i8, i8* %451, align 1, !noalias !92
  %453 = zext i8 %446 to i64
  %454 = zext i8 %452 to i64
  %455 = shl nuw nsw i64 %454, 32
  %456 = or i64 %455, %453
  %457 = zext i8 %416 to i64
  %458 = shl nuw nsw i64 %457, 32
  %459 = zext i8 %410 to i64
  %460 = or i64 %458, %459
  %461 = zext i8 %428 to i64
  %462 = shl nuw nsw i64 %461, 32
  %463 = zext i8 %422 to i64
  %464 = or i64 %462, %463
  %465 = zext i8 %440 to i64
  %466 = shl nuw nsw i64 %465, 32
  %467 = zext i8 %434 to i64
  %468 = or i64 %466, %467
  %469 = sext i32 %108 to i64
  %470 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469
  %471 = bitcast %union.Slot* %470 to i64*
  store i64 %460, i64* %471, align 32
  %472 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469, i32 0, i32 0, i32 1
  %473 = bitcast %"struct.skvx::Vec.57"* %472 to i64*
  store i64 %464, i64* %473, align 8
  %474 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469, i32 0, i32 1
  %475 = bitcast %"struct.skvx::Vec.56"* %474 to i64*
  store i64 %468, i64* %475, align 16
  %476 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %469, i32 0, i32 1, i32 1
  %477 = bitcast %"struct.skvx::Vec.57"* %476 to i64*
  store i64 %456, i64* %477, align 8
  br label %1925

478:                                              ; preds = %103
  %479 = sext i32 %116 to i64
  %480 = getelementptr inbounds i8*, i8** %7, i64 %479
  %481 = load i8*, i8** %480, align 8
  %482 = sext i32 %118 to i64
  %483 = getelementptr inbounds i8, i8* %481, i64 %482
  %484 = bitcast i8* %483 to i16**
  %485 = load i16*, i16** %484, align 1
  %486 = sext i32 %110 to i64
  %487 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486
  %488 = bitcast %union.Slot* %487 to i32*
  %489 = load i32, i32* %488, align 4, !noalias !97
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i16, i16* %485, i64 %490
  %492 = load i16, i16* %491, align 2, !noalias !97
  %493 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 0, i32 0, i32 1
  %494 = bitcast %"struct.skvx::Vec.58"* %493 to i32*
  %495 = load i32, i32* %494, align 4, !noalias !97
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i16, i16* %485, i64 %496
  %498 = load i16, i16* %497, align 2, !noalias !97
  %499 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 0, i32 1
  %500 = bitcast %"struct.skvx::Vec.57"* %499 to i32*
  %501 = load i32, i32* %500, align 4, !noalias !97
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds i16, i16* %485, i64 %502
  %504 = load i16, i16* %503, align 2, !noalias !97
  %505 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 0, i32 1, i32 1
  %506 = bitcast %"struct.skvx::Vec.58"* %505 to i32*
  %507 = load i32, i32* %506, align 4, !noalias !97
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i16, i16* %485, i64 %508
  %510 = load i16, i16* %509, align 2, !noalias !97
  %511 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1
  %512 = bitcast %"struct.skvx::Vec.56"* %511 to i32*
  %513 = load i32, i32* %512, align 4, !noalias !97
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16, i16* %485, i64 %514
  %516 = load i16, i16* %515, align 2, !noalias !97
  %517 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1, i32 0, i32 1
  %518 = bitcast %"struct.skvx::Vec.58"* %517 to i32*
  %519 = load i32, i32* %518, align 4, !noalias !97
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds i16, i16* %485, i64 %520
  %522 = load i16, i16* %521, align 2, !noalias !97
  %523 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1, i32 1
  %524 = bitcast %"struct.skvx::Vec.57"* %523 to i32*
  %525 = load i32, i32* %524, align 4, !noalias !97
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, i16* %485, i64 %526
  %528 = load i16, i16* %527, align 2, !noalias !97
  %529 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %486, i32 0, i32 1, i32 1, i32 1
  %530 = bitcast %"struct.skvx::Vec.58"* %529 to i32*
  %531 = load i32, i32* %530, align 4, !noalias !97
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds i16, i16* %485, i64 %532
  %534 = load i16, i16* %533, align 2, !noalias !97
  %535 = zext i16 %528 to i64
  %536 = zext i16 %534 to i64
  %537 = shl nuw nsw i64 %536, 32
  %538 = or i64 %537, %535
  %539 = zext i16 %498 to i64
  %540 = shl nuw nsw i64 %539, 32
  %541 = zext i16 %492 to i64
  %542 = or i64 %540, %541
  %543 = zext i16 %510 to i64
  %544 = shl nuw nsw i64 %543, 32
  %545 = zext i16 %504 to i64
  %546 = or i64 %544, %545
  %547 = zext i16 %522 to i64
  %548 = shl nuw nsw i64 %547, 32
  %549 = zext i16 %516 to i64
  %550 = or i64 %548, %549
  %551 = sext i32 %108 to i64
  %552 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551
  %553 = bitcast %union.Slot* %552 to i64*
  store i64 %542, i64* %553, align 32
  %554 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551, i32 0, i32 0, i32 1
  %555 = bitcast %"struct.skvx::Vec.57"* %554 to i64*
  store i64 %546, i64* %555, align 8
  %556 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551, i32 0, i32 1
  %557 = bitcast %"struct.skvx::Vec.56"* %556 to i64*
  store i64 %550, i64* %557, align 16
  %558 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %551, i32 0, i32 1, i32 1
  %559 = bitcast %"struct.skvx::Vec.57"* %558 to i64*
  store i64 %538, i64* %559, align 8
  br label %1925

560:                                              ; preds = %103
  %561 = sext i32 %116 to i64
  %562 = getelementptr inbounds i8*, i8** %7, i64 %561
  %563 = load i8*, i8** %562, align 8
  %564 = sext i32 %118 to i64
  %565 = getelementptr inbounds i8, i8* %563, i64 %564
  %566 = bitcast i8* %565 to i32**
  %567 = load i32*, i32** %566, align 1
  %568 = sext i32 %110 to i64
  %569 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568
  %570 = bitcast %union.Slot* %569 to i32*
  %571 = load i32, i32* %570, align 4, !noalias !102
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i32, i32* %567, i64 %572
  %574 = load i32, i32* %573, align 4, !noalias !102
  %575 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 0, i32 0, i32 1
  %576 = bitcast %"struct.skvx::Vec.58"* %575 to i32*
  %577 = load i32, i32* %576, align 4, !noalias !102
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i32, i32* %567, i64 %578
  %580 = load i32, i32* %579, align 4, !noalias !102
  %581 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 0, i32 1
  %582 = bitcast %"struct.skvx::Vec.57"* %581 to i32*
  %583 = load i32, i32* %582, align 4, !noalias !102
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds i32, i32* %567, i64 %584
  %586 = load i32, i32* %585, align 4, !noalias !102
  %587 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 0, i32 1, i32 1
  %588 = bitcast %"struct.skvx::Vec.58"* %587 to i32*
  %589 = load i32, i32* %588, align 4, !noalias !102
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds i32, i32* %567, i64 %590
  %592 = load i32, i32* %591, align 4, !noalias !102
  %593 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1
  %594 = bitcast %"struct.skvx::Vec.56"* %593 to i32*
  %595 = load i32, i32* %594, align 4, !noalias !102
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i32, i32* %567, i64 %596
  %598 = load i32, i32* %597, align 4, !noalias !102
  %599 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1, i32 0, i32 1
  %600 = bitcast %"struct.skvx::Vec.58"* %599 to i32*
  %601 = load i32, i32* %600, align 4, !noalias !102
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds i32, i32* %567, i64 %602
  %604 = load i32, i32* %603, align 4, !noalias !102
  %605 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1, i32 1
  %606 = bitcast %"struct.skvx::Vec.57"* %605 to i32*
  %607 = load i32, i32* %606, align 4, !noalias !102
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds i32, i32* %567, i64 %608
  %610 = load i32, i32* %609, align 4, !noalias !102
  %611 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %568, i32 0, i32 1, i32 1, i32 1
  %612 = bitcast %"struct.skvx::Vec.58"* %611 to i32*
  %613 = load i32, i32* %612, align 4, !noalias !102
  %614 = sext i32 %613 to i64
  %615 = getelementptr inbounds i32, i32* %567, i64 %614
  %616 = load i32, i32* %615, align 4, !noalias !102
  %617 = zext i32 %610 to i64
  %618 = zext i32 %616 to i64
  %619 = shl nuw i64 %618, 32
  %620 = or i64 %619, %617
  %621 = zext i32 %580 to i64
  %622 = shl nuw i64 %621, 32
  %623 = zext i32 %574 to i64
  %624 = or i64 %622, %623
  %625 = zext i32 %592 to i64
  %626 = shl nuw i64 %625, 32
  %627 = zext i32 %586 to i64
  %628 = or i64 %626, %627
  %629 = zext i32 %604 to i64
  %630 = shl nuw i64 %629, 32
  %631 = zext i32 %598 to i64
  %632 = or i64 %630, %631
  %633 = sext i32 %108 to i64
  %634 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633
  %635 = bitcast %union.Slot* %634 to i64*
  store i64 %624, i64* %635, align 32
  %636 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633, i32 0, i32 0, i32 1
  %637 = bitcast %"struct.skvx::Vec.57"* %636 to i64*
  store i64 %628, i64* %637, align 8
  %638 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633, i32 0, i32 1
  %639 = bitcast %"struct.skvx::Vec.56"* %638 to i64*
  store i64 %632, i64* %639, align 16
  %640 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %633, i32 0, i32 1, i32 1
  %641 = bitcast %"struct.skvx::Vec.57"* %640 to i64*
  store i64 %620, i64* %641, align 8
  br label %1925

642:                                              ; preds = %103, %103
  %643 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %104, i32 5
  %644 = load i32, i32* %643, align 4
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %30)
  store <8 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <8 x i64>* %10, align 64
  %645 = sext i32 %110 to i64
  %646 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %645
  %647 = bitcast %union.Slot* %646 to <8 x i32>*
  %648 = load <8 x i32>, <8 x i32>* %647, align 32, !noalias !109
  %649 = zext <8 x i32> %648 to <8 x i64>
  %650 = sext i32 %112 to i64
  %651 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %650
  %652 = bitcast %union.Slot* %651 to <8 x i32>*
  %653 = load <8 x i32>, <8 x i32>* %652, align 32, !noalias !112
  %654 = zext <8 x i32> %653 to <8 x i64>
  %655 = shl nuw <8 x i64> %654, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %656 = or <8 x i64> %655, %649
  store <8 x i64> %656, <8 x i64>* %10, align 64, !alias.scope !115
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %31)
  store <8 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <8 x i64>* %11, align 64
  %657 = sext i32 %114 to i64
  %658 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %657
  %659 = bitcast %union.Slot* %658 to <8 x i32>*
  %660 = load <8 x i32>, <8 x i32>* %659, align 32, !noalias !118
  %661 = zext <8 x i32> %660 to <8 x i64>
  %662 = sext i32 %644 to i64
  %663 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %662
  %664 = bitcast %union.Slot* %663 to <8 x i32>*
  %665 = load <8 x i32>, <8 x i32>* %664, align 32, !noalias !121
  %666 = zext <8 x i32> %665 to <8 x i64>
  %667 = shl nuw <8 x i64> %666, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %668 = or <8 x i64> %667, %661
  store <8 x i64> %668, <8 x i64>* %11, align 64, !alias.scope !124
  %669 = sext i32 %116 to i64
  %670 = getelementptr inbounds i8*, i8** %7, i64 %669
  br label %672

671:                                              ; preds = %701
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %31)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %30)
  br label %1925

672:                                              ; preds = %642, %701
  %673 = phi i64 [ 0, %642 ], [ %711, %701 ]
  %674 = load i8*, i8** %670, align 8
  %675 = shl nsw i64 %673, 4
  %676 = getelementptr inbounds i8, i8* %674, i64 %675
  %677 = icmp ult i64 %673, 4
  br i1 %677, label %678, label %689

678:                                              ; preds = %672
  %679 = icmp ult i64 %673, 2
  %680 = icmp eq i64 %673, 1
  %681 = select i1 %680, i64* %41, i64* %40
  %682 = icmp eq i64 %673, 2
  %683 = select i1 %682, i64* %42, i64* %43
  %684 = select i1 %679, i64* %681, i64* %683
  %685 = bitcast i8* %676 to i64*
  %686 = load i64, i64* %684, align 8
  store i64 %686, i64* %685, align 1
  %687 = select i1 %680, i64* %45, i64* %44
  %688 = select i1 %682, i64* %46, i64* %47
  br label %701

689:                                              ; preds = %672
  %690 = add nsw i64 %673, -4
  %691 = icmp slt i64 %690, 2
  %692 = icmp eq i64 %690, 1
  %693 = select i1 %692, i64* %33, i64* %32
  %694 = icmp eq i64 %690, 2
  %695 = select i1 %694, i64* %34, i64* %35
  %696 = select i1 %691, i64* %693, i64* %695
  %697 = bitcast i8* %676 to i64*
  %698 = load i64, i64* %696, align 8
  store i64 %698, i64* %697, align 1
  %699 = select i1 %692, i64* %37, i64* %36
  %700 = select i1 %694, i64* %38, i64* %39
  br label %701

701:                                              ; preds = %678, %689
  %702 = phi i64* [ %688, %678 ], [ %700, %689 ]
  %703 = phi i64* [ %687, %678 ], [ %699, %689 ]
  %704 = phi i1 [ %679, %678 ], [ %691, %689 ]
  %705 = select i1 %704, i64* %703, i64* %702
  %706 = load i8*, i8** %670, align 8
  %707 = getelementptr inbounds i8, i8* %706, i64 8
  %708 = getelementptr inbounds i8, i8* %707, i64 %675
  %709 = bitcast i8* %708 to i64*
  %710 = load i64, i64* %705, align 8
  store i64 %710, i64* %709, align 1
  %711 = add nuw nsw i64 %673, 1
  %712 = icmp ult i64 %711, %65
  br i1 %712, label %672, label %671

713:                                              ; preds = %103, %103
  %714 = sext i32 %108 to i64
  %715 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714
  %716 = bitcast %union.Slot* %715 to i32*
  %717 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 0, i32 0, i32 1
  %718 = bitcast %"struct.skvx::Vec.58"* %717 to i32*
  %719 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 0, i32 1
  %720 = bitcast %"struct.skvx::Vec.57"* %719 to i32*
  %721 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 0, i32 1, i32 1
  %722 = bitcast %"struct.skvx::Vec.58"* %721 to i32*
  %723 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1
  %724 = bitcast %"struct.skvx::Vec.56"* %723 to i32*
  %725 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1, i32 0, i32 1
  %726 = bitcast %"struct.skvx::Vec.58"* %725 to i32*
  %727 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1, i32 1
  %728 = bitcast %"struct.skvx::Vec.57"* %727 to i32*
  %729 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %714, i32 0, i32 1, i32 1, i32 1
  %730 = bitcast %"struct.skvx::Vec.58"* %729 to i32*
  %731 = sext i32 %116 to i64
  %732 = getelementptr inbounds i8*, i8** %7, i64 %731
  %733 = shl nsw i32 %118, 2
  %734 = sext i32 %733 to i64
  %735 = bitcast %union.Slot* %715 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %735, i8 0, i64 32, i1 false)
  %736 = load i8*, i8** %732, align 8
  %737 = getelementptr inbounds i8, i8* %736, i64 %734
  %738 = bitcast i8* %737 to i32*
  %739 = load i32, i32* %738, align 1
  store i32 %739, i32* %716, align 4
  br i1 %57, label %740, label %1925

740:                                              ; preds = %713
  %741 = load i8*, i8** %732, align 8
  %742 = getelementptr inbounds i8, i8* %741, i64 16
  %743 = getelementptr inbounds i8, i8* %742, i64 %734
  %744 = bitcast i8* %743 to i32*
  %745 = load i32, i32* %744, align 1
  store i32 %745, i32* %718, align 4
  %746 = load i8*, i8** %732, align 8
  %747 = getelementptr inbounds i8, i8* %746, i64 32
  %748 = getelementptr inbounds i8, i8* %747, i64 %734
  %749 = bitcast i8* %748 to i32*
  %750 = load i32, i32* %749, align 1
  store i32 %750, i32* %720, align 4
  %751 = load i8*, i8** %732, align 8
  %752 = getelementptr inbounds i8, i8* %751, i64 48
  %753 = getelementptr inbounds i8, i8* %752, i64 %734
  %754 = bitcast i8* %753 to i32*
  %755 = load i32, i32* %754, align 1
  store i32 %755, i32* %722, align 4
  br label %756

756:                                              ; preds = %756, %740
  %757 = phi i64 [ 4, %740 ], [ %771, %756 ]
  %758 = add nsw i64 %757, -4
  %759 = icmp ult i64 %758, 2
  %760 = icmp eq i64 %758, 1
  %761 = select i1 %760, i32* %726, i32* %724
  %762 = icmp eq i64 %758, 2
  %763 = select i1 %762, i32* %728, i32* %730
  %764 = select i1 %759, i32* %761, i32* %763
  %765 = load i8*, i8** %732, align 8
  %766 = shl nsw i64 %757, 4
  %767 = getelementptr inbounds i8, i8* %765, i64 %734
  %768 = getelementptr inbounds i8, i8* %767, i64 %766
  %769 = bitcast i8* %768 to i32*
  %770 = load i32, i32* %769, align 1
  store i32 %770, i32* %764, align 4
  %771 = add nuw nsw i64 %757, 1
  %772 = icmp ult i64 %771, %65
  br i1 %772, label %756, label %1925, !llvm.loop !127

773:                                              ; preds = %103, %103
  %774 = sext i32 %108 to i64
  %775 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %774
  %776 = bitcast %union.Slot* %775 to <8 x i32>*
  store <8 x i32> %64, <8 x i32>* %776, align 32
  br label %1925

777:                                              ; preds = %103, %103
  %778 = sext i32 %116 to i64
  %779 = getelementptr inbounds i8*, i8** %7, i64 %778
  %780 = load i8*, i8** %779, align 8
  %781 = sext i32 %118 to i64
  %782 = getelementptr inbounds i8, i8* %780, i64 %781
  %783 = bitcast i8* %782 to i32*
  %784 = load i32, i32* %783, align 4
  %785 = sext i32 %108 to i64
  %786 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %785
  %787 = insertelement <4 x i32> undef, i32 %784, i32 0
  %788 = shufflevector <4 x i32> %787, <4 x i32> undef, <4 x i32> zeroinitializer
  %789 = bitcast %union.Slot* %786 to <4 x i32>*
  store <4 x i32> %788, <4 x i32>* %789, align 32
  %790 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %785, i32 0, i32 1
  %791 = bitcast %"struct.skvx::Vec.56"* %790 to <4 x i32>*
  store <4 x i32> %788, <4 x i32>* %791, align 16
  br label %1925

792:                                              ; preds = %103, %103
  %793 = sext i32 %108 to i64
  %794 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %793
  %795 = insertelement <4 x i32> undef, i32 %116, i32 0
  %796 = shufflevector <4 x i32> %795, <4 x i32> undef, <4 x i32> zeroinitializer
  %797 = bitcast %union.Slot* %794 to <4 x i32>*
  store <4 x i32> %796, <4 x i32>* %797, align 32
  %798 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %793, i32 0, i32 1
  %799 = bitcast %"struct.skvx::Vec.56"* %798 to <4 x i32>*
  store <4 x i32> %796, <4 x i32>* %799, align 16
  br label %1925

800:                                              ; preds = %103, %103
  %801 = sext i32 %110 to i64
  %802 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %801, i32 0
  %803 = sext i32 %112 to i64
  %804 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %803, i32 0
  %805 = bitcast %"struct.skvx::Vec.55"* %802 to <8 x float>*
  %806 = load <8 x float>, <8 x float>* %805, align 32, !noalias !128
  %807 = bitcast %"struct.skvx::Vec.55"* %804 to <8 x float>*
  %808 = load <8 x float>, <8 x float>* %807, align 32, !noalias !128
  %809 = fadd <8 x float> %806, %808
  %810 = sext i32 %108 to i64
  %811 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %810, i32 0
  %812 = bitcast %"struct.skvx::Vec.55"* %811 to <8 x float>*
  store <8 x float> %809, <8 x float>* %812, align 32
  br label %1925

813:                                              ; preds = %103, %103
  %814 = sext i32 %110 to i64
  %815 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %814, i32 0
  %816 = sext i32 %112 to i64
  %817 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %816, i32 0
  %818 = bitcast %"struct.skvx::Vec.55"* %815 to <8 x float>*
  %819 = load <8 x float>, <8 x float>* %818, align 32, !noalias !131
  %820 = bitcast %"struct.skvx::Vec.55"* %817 to <8 x float>*
  %821 = load <8 x float>, <8 x float>* %820, align 32, !noalias !131
  %822 = fsub <8 x float> %819, %821
  %823 = sext i32 %108 to i64
  %824 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %823, i32 0
  %825 = bitcast %"struct.skvx::Vec.55"* %824 to <8 x float>*
  store <8 x float> %822, <8 x float>* %825, align 32
  br label %1925

826:                                              ; preds = %103, %103
  %827 = sext i32 %110 to i64
  %828 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %827, i32 0
  %829 = sext i32 %112 to i64
  %830 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %829, i32 0
  %831 = bitcast %"struct.skvx::Vec.55"* %828 to <8 x float>*
  %832 = load <8 x float>, <8 x float>* %831, align 32, !noalias !134
  %833 = bitcast %"struct.skvx::Vec.55"* %830 to <8 x float>*
  %834 = load <8 x float>, <8 x float>* %833, align 32, !noalias !134
  %835 = fmul <8 x float> %832, %834
  %836 = sext i32 %108 to i64
  %837 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %836, i32 0
  %838 = bitcast %"struct.skvx::Vec.55"* %837 to <8 x float>*
  store <8 x float> %835, <8 x float>* %838, align 32
  br label %1925

839:                                              ; preds = %103, %103
  %840 = sext i32 %110 to i64
  %841 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %840, i32 0
  %842 = sext i32 %112 to i64
  %843 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %842, i32 0
  %844 = bitcast %"struct.skvx::Vec.55"* %841 to <8 x float>*
  %845 = load <8 x float>, <8 x float>* %844, align 32, !noalias !137
  %846 = bitcast %"struct.skvx::Vec.55"* %843 to <8 x float>*
  %847 = load <8 x float>, <8 x float>* %846, align 32, !noalias !137
  %848 = fdiv <8 x float> %845, %847
  %849 = sext i32 %108 to i64
  %850 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %849, i32 0
  %851 = bitcast %"struct.skvx::Vec.55"* %850 to <8 x float>*
  store <8 x float> %848, <8 x float>* %851, align 32
  br label %1925

852:                                              ; preds = %103, %103
  %853 = sext i32 %110 to i64
  %854 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %853, i32 0
  %855 = sext i32 %112 to i64
  %856 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %855, i32 0
  %857 = bitcast %"struct.skvx::Vec.55"* %856 to <8 x float>*
  %858 = load <8 x float>, <8 x float>* %857, align 32, !noalias !140
  %859 = bitcast %"struct.skvx::Vec.55"* %854 to <8 x float>*
  %860 = load <8 x float>, <8 x float>* %859, align 32, !noalias !140
  %861 = fcmp olt <8 x float> %858, %860
  %862 = select <8 x i1> %861, <8 x float> %858, <8 x float> %860
  %863 = sext i32 %108 to i64
  %864 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %863, i32 0
  %865 = bitcast %"struct.skvx::Vec.55"* %864 to <8 x float>*
  store <8 x float> %862, <8 x float>* %865, align 32
  br label %1925

866:                                              ; preds = %103, %103
  %867 = sext i32 %110 to i64
  %868 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %867, i32 0
  %869 = sext i32 %112 to i64
  %870 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %869, i32 0
  %871 = bitcast %"struct.skvx::Vec.55"* %868 to <8 x float>*
  %872 = load <8 x float>, <8 x float>* %871, align 32, !noalias !143
  %873 = bitcast %"struct.skvx::Vec.55"* %870 to <8 x float>*
  %874 = load <8 x float>, <8 x float>* %873, align 32, !noalias !143
  %875 = fcmp olt <8 x float> %872, %874
  %876 = select <8 x i1> %875, <8 x float> %874, <8 x float> %872
  %877 = sext i32 %108 to i64
  %878 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %877, i32 0
  %879 = bitcast %"struct.skvx::Vec.55"* %878 to <8 x float>*
  store <8 x float> %876, <8 x float>* %879, align 32
  br label %1925

880:                                              ; preds = %103, %103
  %881 = sext i32 %110 to i64
  %882 = sext i32 %112 to i64
  %883 = sext i32 %114 to i64
  %884 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 0, i32 0, i32 0
  %885 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 0, i32 0, i32 0
  %886 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 0, i32 0, i32 0
  %887 = load float, float* %884, align 4, !noalias !146
  %888 = load float, float* %885, align 4, !noalias !146
  %889 = load float, float* %886, align 4, !noalias !146
  %890 = tail call float @llvm.fma.f32(float %887, float %888, float %889) #18
  %891 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 0, i32 1, i32 0
  %892 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 0, i32 1, i32 0
  %893 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 0, i32 1, i32 0
  %894 = load float, float* %891, align 4, !noalias !146
  %895 = load float, float* %892, align 4, !noalias !146
  %896 = load float, float* %893, align 4, !noalias !146
  %897 = tail call float @llvm.fma.f32(float %894, float %895, float %896) #18
  %898 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 1, i32 0, i32 0
  %899 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 1, i32 0, i32 0
  %900 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 1, i32 0, i32 0
  %901 = load float, float* %898, align 4, !noalias !146
  %902 = load float, float* %899, align 4, !noalias !146
  %903 = load float, float* %900, align 4, !noalias !146
  %904 = tail call float @llvm.fma.f32(float %901, float %902, float %903) #18
  %905 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 0, i32 1, i32 1, i32 0
  %906 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 0, i32 1, i32 1, i32 0
  %907 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 0, i32 1, i32 1, i32 0
  %908 = load float, float* %905, align 4, !noalias !146
  %909 = load float, float* %906, align 4, !noalias !146
  %910 = load float, float* %907, align 4, !noalias !146
  %911 = tail call float @llvm.fma.f32(float %908, float %909, float %910) #18
  %912 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 0, i32 0, i32 0
  %913 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 0, i32 0, i32 0
  %914 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 0, i32 0, i32 0
  %915 = load float, float* %912, align 4, !noalias !146
  %916 = load float, float* %913, align 4, !noalias !146
  %917 = load float, float* %914, align 4, !noalias !146
  %918 = tail call float @llvm.fma.f32(float %915, float %916, float %917) #18
  %919 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 0, i32 1, i32 0
  %920 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 0, i32 1, i32 0
  %921 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 0, i32 1, i32 0
  %922 = load float, float* %919, align 4, !noalias !146
  %923 = load float, float* %920, align 4, !noalias !146
  %924 = load float, float* %921, align 4, !noalias !146
  %925 = tail call float @llvm.fma.f32(float %922, float %923, float %924) #18
  %926 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 1, i32 0, i32 0
  %927 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 1, i32 0, i32 0
  %928 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 1, i32 0, i32 0
  %929 = load float, float* %926, align 4, !noalias !146
  %930 = load float, float* %927, align 4, !noalias !146
  %931 = load float, float* %928, align 4, !noalias !146
  %932 = tail call float @llvm.fma.f32(float %929, float %930, float %931) #18
  %933 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %881, i32 0, i32 1, i32 1, i32 1, i32 0
  %934 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %882, i32 0, i32 1, i32 1, i32 1, i32 0
  %935 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %883, i32 0, i32 1, i32 1, i32 1, i32 0
  %936 = load float, float* %933, align 4, !noalias !146
  %937 = load float, float* %934, align 4, !noalias !146
  %938 = load float, float* %935, align 4, !noalias !146
  %939 = tail call float @llvm.fma.f32(float %936, float %937, float %938) #18
  %940 = sext i32 %108 to i64
  %941 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %890, float* %941, align 32
  %942 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %897, float* %942, align 4
  %943 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %904, float* %943, align 8
  %944 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %911, float* %944, align 4
  %945 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %918, float* %945, align 16
  %946 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %925, float* %946, align 4
  %947 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %932, float* %947, align 8
  %948 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %940, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %939, float* %948, align 4
  br label %1925

949:                                              ; preds = %103, %103
  %950 = sext i32 %110 to i64
  %951 = sext i32 %112 to i64
  %952 = sext i32 %114 to i64
  %953 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %952, i32 0
  %954 = bitcast %"struct.skvx::Vec.55"* %953 to <8 x float>*
  %955 = load <8 x float>, <8 x float>* %954, align 32, !noalias !153
  %956 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %955
  %957 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 0, i32 0, i32 0
  %958 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 0, i32 0, i32 0
  %959 = load float, float* %957, align 4, !noalias !156
  %960 = load float, float* %958, align 4, !noalias !156
  %961 = extractelement <8 x float> %956, i32 0
  %962 = tail call float @llvm.fma.f32(float %959, float %960, float %961) #18
  %963 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 0, i32 1, i32 0
  %964 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 0, i32 1, i32 0
  %965 = load float, float* %963, align 4, !noalias !156
  %966 = load float, float* %964, align 4, !noalias !156
  %967 = extractelement <8 x float> %956, i32 1
  %968 = tail call float @llvm.fma.f32(float %965, float %966, float %967) #18
  %969 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 1, i32 0, i32 0
  %970 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 1, i32 0, i32 0
  %971 = load float, float* %969, align 4, !noalias !156
  %972 = load float, float* %970, align 4, !noalias !156
  %973 = extractelement <8 x float> %956, i32 2
  %974 = tail call float @llvm.fma.f32(float %971, float %972, float %973) #18
  %975 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 0, i32 1, i32 1, i32 0
  %976 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 0, i32 1, i32 1, i32 0
  %977 = load float, float* %975, align 4, !noalias !156
  %978 = load float, float* %976, align 4, !noalias !156
  %979 = extractelement <8 x float> %956, i32 3
  %980 = tail call float @llvm.fma.f32(float %977, float %978, float %979) #18
  %981 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 0, i32 0, i32 0
  %982 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 0, i32 0, i32 0
  %983 = load float, float* %981, align 4, !noalias !156
  %984 = load float, float* %982, align 4, !noalias !156
  %985 = extractelement <8 x float> %956, i32 4
  %986 = tail call float @llvm.fma.f32(float %983, float %984, float %985) #18
  %987 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 0, i32 1, i32 0
  %988 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 0, i32 1, i32 0
  %989 = load float, float* %987, align 4, !noalias !156
  %990 = load float, float* %988, align 4, !noalias !156
  %991 = extractelement <8 x float> %956, i32 5
  %992 = tail call float @llvm.fma.f32(float %989, float %990, float %991) #18
  %993 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 1, i32 0, i32 0
  %994 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 1, i32 0, i32 0
  %995 = load float, float* %993, align 4, !noalias !156
  %996 = load float, float* %994, align 4, !noalias !156
  %997 = extractelement <8 x float> %956, i32 6
  %998 = tail call float @llvm.fma.f32(float %995, float %996, float %997) #18
  %999 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %950, i32 0, i32 1, i32 1, i32 1, i32 0
  %1000 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %951, i32 0, i32 1, i32 1, i32 1, i32 0
  %1001 = load float, float* %999, align 4, !noalias !156
  %1002 = load float, float* %1000, align 4, !noalias !156
  %1003 = extractelement <8 x float> %956, i32 7
  %1004 = tail call float @llvm.fma.f32(float %1001, float %1002, float %1003) #18
  %1005 = sext i32 %108 to i64
  %1006 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %962, float* %1006, align 32
  %1007 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %968, float* %1007, align 4
  %1008 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %974, float* %1008, align 8
  %1009 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %980, float* %1009, align 4
  %1010 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %986, float* %1010, align 16
  %1011 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %992, float* %1011, align 4
  %1012 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %998, float* %1012, align 8
  %1013 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1005, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1004, float* %1013, align 4
  br label %1925

1014:                                             ; preds = %103, %103
  %1015 = sext i32 %110 to i64
  %1016 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1015, i32 0
  %1017 = bitcast %"struct.skvx::Vec.55"* %1016 to <8 x float>*
  %1018 = load <8 x float>, <8 x float>* %1017, align 32, !noalias !163
  %1019 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1018
  %1020 = sext i32 %112 to i64
  %1021 = sext i32 %114 to i64
  %1022 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 0, i32 0
  %1023 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 0, i32 0, i32 0
  %1024 = extractelement <8 x float> %1019, i32 0
  %1025 = load float, float* %1022, align 4, !noalias !166
  %1026 = load float, float* %1023, align 4, !noalias !166
  %1027 = tail call float @llvm.fma.f32(float %1024, float %1025, float %1026) #18
  %1028 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 1, i32 0
  %1029 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 0, i32 1, i32 0
  %1030 = extractelement <8 x float> %1019, i32 1
  %1031 = load float, float* %1028, align 4, !noalias !166
  %1032 = load float, float* %1029, align 4, !noalias !166
  %1033 = tail call float @llvm.fma.f32(float %1030, float %1031, float %1032) #18
  %1034 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 0, i32 0
  %1035 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 1, i32 0, i32 0
  %1036 = extractelement <8 x float> %1019, i32 2
  %1037 = load float, float* %1034, align 4, !noalias !166
  %1038 = load float, float* %1035, align 4, !noalias !166
  %1039 = tail call float @llvm.fma.f32(float %1036, float %1037, float %1038) #18
  %1040 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 1, i32 0
  %1041 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 0, i32 1, i32 1, i32 0
  %1042 = extractelement <8 x float> %1019, i32 3
  %1043 = load float, float* %1040, align 4, !noalias !166
  %1044 = load float, float* %1041, align 4, !noalias !166
  %1045 = tail call float @llvm.fma.f32(float %1042, float %1043, float %1044) #18
  %1046 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 0, i32 0
  %1047 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 0, i32 0, i32 0
  %1048 = extractelement <8 x float> %1019, i32 4
  %1049 = load float, float* %1046, align 4, !noalias !166
  %1050 = load float, float* %1047, align 4, !noalias !166
  %1051 = tail call float @llvm.fma.f32(float %1048, float %1049, float %1050) #18
  %1052 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 1, i32 0
  %1053 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 0, i32 1, i32 0
  %1054 = extractelement <8 x float> %1019, i32 5
  %1055 = load float, float* %1052, align 4, !noalias !166
  %1056 = load float, float* %1053, align 4, !noalias !166
  %1057 = tail call float @llvm.fma.f32(float %1054, float %1055, float %1056) #18
  %1058 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 0, i32 0
  %1059 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 1, i32 0, i32 0
  %1060 = extractelement <8 x float> %1019, i32 6
  %1061 = load float, float* %1058, align 4, !noalias !166
  %1062 = load float, float* %1059, align 4, !noalias !166
  %1063 = tail call float @llvm.fma.f32(float %1060, float %1061, float %1062) #18
  %1064 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 1, i32 0
  %1065 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1021, i32 0, i32 1, i32 1, i32 1, i32 0
  %1066 = extractelement <8 x float> %1019, i32 7
  %1067 = load float, float* %1064, align 4, !noalias !166
  %1068 = load float, float* %1065, align 4, !noalias !166
  %1069 = tail call float @llvm.fma.f32(float %1066, float %1067, float %1068) #18
  %1070 = sext i32 %108 to i64
  %1071 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1027, float* %1071, align 32
  %1072 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1033, float* %1072, align 4
  %1073 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1039, float* %1073, align 8
  %1074 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1045, float* %1074, align 4
  %1075 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1051, float* %1075, align 16
  %1076 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1057, float* %1076, align 4
  %1077 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1063, float* %1077, align 8
  %1078 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1070, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1069, float* %1078, align 4
  br label %1925

1079:                                             ; preds = %103, %103
  %1080 = sext i32 %110 to i64
  %1081 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 0, i32 0, i32 0
  %1082 = load float, float* %1081, align 4, !noalias !173
  %1083 = tail call float @sqrtf(float %1082) #18, !noalias !173
  %1084 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 0, i32 1, i32 0
  %1085 = load float, float* %1084, align 4, !noalias !173
  %1086 = tail call float @sqrtf(float %1085) #18, !noalias !173
  %1087 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 1, i32 0, i32 0
  %1088 = load float, float* %1087, align 4, !noalias !173
  %1089 = tail call float @sqrtf(float %1088) #18, !noalias !173
  %1090 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 0, i32 1, i32 1, i32 0
  %1091 = load float, float* %1090, align 4, !noalias !173
  %1092 = tail call float @sqrtf(float %1091) #18, !noalias !173
  %1093 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 0, i32 0, i32 0
  %1094 = load float, float* %1093, align 4, !noalias !173
  %1095 = tail call float @sqrtf(float %1094) #18, !noalias !173
  %1096 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 0, i32 1, i32 0
  %1097 = load float, float* %1096, align 4, !noalias !173
  %1098 = tail call float @sqrtf(float %1097) #18, !noalias !173
  %1099 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 1, i32 0, i32 0
  %1100 = load float, float* %1099, align 4, !noalias !173
  %1101 = tail call float @sqrtf(float %1100) #18, !noalias !173
  %1102 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1080, i32 0, i32 1, i32 1, i32 1, i32 0
  %1103 = load float, float* %1102, align 4, !noalias !173
  %1104 = tail call float @sqrtf(float %1103) #18, !noalias !173
  %1105 = sext i32 %108 to i64
  %1106 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1083, float* %1106, align 32
  %1107 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1086, float* %1107, align 4
  %1108 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1089, float* %1108, align 8
  %1109 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1092, float* %1109, align 4
  %1110 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1095, float* %1110, align 16
  %1111 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1098, float* %1111, align 4
  %1112 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1101, float* %1112, align 8
  %1113 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1105, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1104, float* %1113, align 4
  br label %1925

1114:                                             ; preds = %103, %103
  %1115 = sext i32 %110 to i64
  %1116 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1115
  %1117 = sext i32 %112 to i64
  %1118 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1117
  %1119 = bitcast %union.Slot* %1116 to <8 x i32>*
  %1120 = load <8 x i32>, <8 x i32>* %1119, align 32, !noalias !180
  %1121 = bitcast %union.Slot* %1118 to <8 x i32>*
  %1122 = load <8 x i32>, <8 x i32>* %1121, align 32, !noalias !180
  %1123 = add <8 x i32> %1122, %1120
  %1124 = sext i32 %108 to i64
  %1125 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1124
  %1126 = bitcast %union.Slot* %1125 to <8 x i32>*
  store <8 x i32> %1123, <8 x i32>* %1126, align 32
  br label %1925

1127:                                             ; preds = %103, %103
  %1128 = sext i32 %110 to i64
  %1129 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1128
  %1130 = sext i32 %112 to i64
  %1131 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1130
  %1132 = bitcast %union.Slot* %1129 to <8 x i32>*
  %1133 = load <8 x i32>, <8 x i32>* %1132, align 32, !noalias !183
  %1134 = bitcast %union.Slot* %1131 to <8 x i32>*
  %1135 = load <8 x i32>, <8 x i32>* %1134, align 32, !noalias !183
  %1136 = sub <8 x i32> %1133, %1135
  %1137 = sext i32 %108 to i64
  %1138 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1137
  %1139 = bitcast %union.Slot* %1138 to <8 x i32>*
  store <8 x i32> %1136, <8 x i32>* %1139, align 32
  br label %1925

1140:                                             ; preds = %103, %103
  %1141 = sext i32 %110 to i64
  %1142 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1141
  %1143 = sext i32 %112 to i64
  %1144 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1143
  %1145 = bitcast %union.Slot* %1142 to <8 x i32>*
  %1146 = load <8 x i32>, <8 x i32>* %1145, align 32, !noalias !186
  %1147 = bitcast %union.Slot* %1144 to <8 x i32>*
  %1148 = load <8 x i32>, <8 x i32>* %1147, align 32, !noalias !186
  %1149 = mul <8 x i32> %1148, %1146
  %1150 = sext i32 %108 to i64
  %1151 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1150
  %1152 = bitcast %union.Slot* %1151 to <8 x i32>*
  store <8 x i32> %1149, <8 x i32>* %1152, align 32
  br label %1925

1153:                                             ; preds = %103, %103
  %1154 = sext i32 %110 to i64
  %1155 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1154
  %1156 = bitcast %union.Slot* %1155 to <8 x i32>*
  %1157 = load <8 x i32>, <8 x i32>* %1156, align 32, !noalias !189
  %1158 = insertelement <8 x i32> undef, i32 %116, i32 0
  %1159 = shufflevector <8 x i32> %1158, <8 x i32> undef, <8 x i32> zeroinitializer
  %1160 = shl <8 x i32> %1157, %1159
  %1161 = sext i32 %108 to i64
  %1162 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1161
  %1163 = bitcast %union.Slot* %1162 to <8 x i32>*
  store <8 x i32> %1160, <8 x i32>* %1163, align 32
  br label %1925

1164:                                             ; preds = %103, %103
  %1165 = sext i32 %110 to i64
  %1166 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1165
  %1167 = bitcast %union.Slot* %1166 to <8 x i32>*
  %1168 = load <8 x i32>, <8 x i32>* %1167, align 32, !noalias !192
  %1169 = insertelement <8 x i32> undef, i32 %116, i32 0
  %1170 = shufflevector <8 x i32> %1169, <8 x i32> undef, <8 x i32> zeroinitializer
  %1171 = ashr <8 x i32> %1168, %1170
  %1172 = sext i32 %108 to i64
  %1173 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1172
  %1174 = bitcast %union.Slot* %1173 to <8 x i32>*
  store <8 x i32> %1171, <8 x i32>* %1174, align 32
  br label %1925

1175:                                             ; preds = %103, %103
  %1176 = sext i32 %110 to i64
  %1177 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1176
  %1178 = bitcast %union.Slot* %1177 to <8 x i32>*
  %1179 = load <8 x i32>, <8 x i32>* %1178, align 32, !noalias !195
  %1180 = insertelement <8 x i32> undef, i32 %116, i32 0
  %1181 = shufflevector <8 x i32> %1180, <8 x i32> undef, <8 x i32> zeroinitializer
  %1182 = lshr <8 x i32> %1179, %1181
  %1183 = sext i32 %108 to i64
  %1184 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1183
  %1185 = bitcast %union.Slot* %1184 to <8 x i32>*
  store <8 x i32> %1182, <8 x i32>* %1185, align 32
  br label %1925

1186:                                             ; preds = %103, %103
  %1187 = sext i32 %110 to i64
  %1188 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1187, i32 0
  %1189 = sext i32 %112 to i64
  %1190 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1189, i32 0
  %1191 = bitcast %"struct.skvx::Vec.55"* %1188 to <8 x float>*
  %1192 = load <8 x float>, <8 x float>* %1191, align 32, !noalias !198
  %1193 = bitcast %"struct.skvx::Vec.55"* %1190 to <8 x float>*
  %1194 = load <8 x float>, <8 x float>* %1193, align 32, !noalias !198
  %1195 = fcmp oeq <8 x float> %1192, %1194
  %1196 = sext <8 x i1> %1195 to <8 x i32>
  %1197 = sext i32 %108 to i64
  %1198 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1197
  %1199 = bitcast %union.Slot* %1198 to <8 x i32>*
  store <8 x i32> %1196, <8 x i32>* %1199, align 32
  br label %1925

1200:                                             ; preds = %103, %103
  %1201 = sext i32 %110 to i64
  %1202 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1201, i32 0
  %1203 = sext i32 %112 to i64
  %1204 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1203, i32 0
  %1205 = bitcast %"struct.skvx::Vec.55"* %1202 to <8 x float>*
  %1206 = load <8 x float>, <8 x float>* %1205, align 32, !noalias !201
  %1207 = bitcast %"struct.skvx::Vec.55"* %1204 to <8 x float>*
  %1208 = load <8 x float>, <8 x float>* %1207, align 32, !noalias !201
  %1209 = fcmp une <8 x float> %1206, %1208
  %1210 = sext <8 x i1> %1209 to <8 x i32>
  %1211 = sext i32 %108 to i64
  %1212 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1211
  %1213 = bitcast %union.Slot* %1212 to <8 x i32>*
  store <8 x i32> %1210, <8 x i32>* %1213, align 32
  br label %1925

1214:                                             ; preds = %103, %103
  %1215 = sext i32 %110 to i64
  %1216 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1215, i32 0
  %1217 = sext i32 %112 to i64
  %1218 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1217, i32 0
  %1219 = bitcast %"struct.skvx::Vec.55"* %1216 to <8 x float>*
  %1220 = load <8 x float>, <8 x float>* %1219, align 32, !noalias !204
  %1221 = bitcast %"struct.skvx::Vec.55"* %1218 to <8 x float>*
  %1222 = load <8 x float>, <8 x float>* %1221, align 32, !noalias !204
  %1223 = fcmp ogt <8 x float> %1220, %1222
  %1224 = sext <8 x i1> %1223 to <8 x i32>
  %1225 = sext i32 %108 to i64
  %1226 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1225
  %1227 = bitcast %union.Slot* %1226 to <8 x i32>*
  store <8 x i32> %1224, <8 x i32>* %1227, align 32
  br label %1925

1228:                                             ; preds = %103, %103
  %1229 = sext i32 %110 to i64
  %1230 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1229, i32 0
  %1231 = sext i32 %112 to i64
  %1232 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1231, i32 0
  %1233 = bitcast %"struct.skvx::Vec.55"* %1230 to <8 x float>*
  %1234 = load <8 x float>, <8 x float>* %1233, align 32, !noalias !207
  %1235 = bitcast %"struct.skvx::Vec.55"* %1232 to <8 x float>*
  %1236 = load <8 x float>, <8 x float>* %1235, align 32, !noalias !207
  %1237 = fcmp oge <8 x float> %1234, %1236
  %1238 = sext <8 x i1> %1237 to <8 x i32>
  %1239 = sext i32 %108 to i64
  %1240 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1239
  %1241 = bitcast %union.Slot* %1240 to <8 x i32>*
  store <8 x i32> %1238, <8 x i32>* %1241, align 32
  br label %1925

1242:                                             ; preds = %103, %103
  %1243 = sext i32 %110 to i64
  %1244 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1243
  %1245 = sext i32 %112 to i64
  %1246 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1245
  %1247 = bitcast %union.Slot* %1244 to <8 x i32>*
  %1248 = load <8 x i32>, <8 x i32>* %1247, align 32, !noalias !210
  %1249 = bitcast %union.Slot* %1246 to <8 x i32>*
  %1250 = load <8 x i32>, <8 x i32>* %1249, align 32, !noalias !210
  %1251 = icmp eq <8 x i32> %1248, %1250
  %1252 = sext <8 x i1> %1251 to <8 x i32>
  %1253 = sext i32 %108 to i64
  %1254 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1253
  %1255 = bitcast %union.Slot* %1254 to <8 x i32>*
  store <8 x i32> %1252, <8 x i32>* %1255, align 32
  br label %1925

1256:                                             ; preds = %103, %103
  %1257 = sext i32 %110 to i64
  %1258 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1257
  %1259 = sext i32 %112 to i64
  %1260 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1259
  %1261 = bitcast %union.Slot* %1258 to <8 x i32>*
  %1262 = load <8 x i32>, <8 x i32>* %1261, align 32, !noalias !213
  %1263 = bitcast %union.Slot* %1260 to <8 x i32>*
  %1264 = load <8 x i32>, <8 x i32>* %1263, align 32, !noalias !213
  %1265 = icmp sgt <8 x i32> %1262, %1264
  %1266 = sext <8 x i1> %1265 to <8 x i32>
  %1267 = sext i32 %108 to i64
  %1268 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1267
  %1269 = bitcast %union.Slot* %1268 to <8 x i32>*
  store <8 x i32> %1266, <8 x i32>* %1269, align 32
  br label %1925

1270:                                             ; preds = %103, %103
  %1271 = sext i32 %110 to i64
  %1272 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1271
  %1273 = sext i32 %112 to i64
  %1274 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1273
  %1275 = bitcast %union.Slot* %1272 to <8 x i32>*
  %1276 = load <8 x i32>, <8 x i32>* %1275, align 32, !noalias !216
  %1277 = bitcast %union.Slot* %1274 to <8 x i32>*
  %1278 = load <8 x i32>, <8 x i32>* %1277, align 32, !noalias !216
  %1279 = and <8 x i32> %1278, %1276
  %1280 = sext i32 %108 to i64
  %1281 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1280
  %1282 = bitcast %union.Slot* %1281 to <8 x i32>*
  store <8 x i32> %1279, <8 x i32>* %1282, align 32
  br label %1925

1283:                                             ; preds = %103, %103
  %1284 = sext i32 %110 to i64
  %1285 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1284
  %1286 = sext i32 %112 to i64
  %1287 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1286
  %1288 = bitcast %union.Slot* %1285 to <8 x i32>*
  %1289 = load <8 x i32>, <8 x i32>* %1288, align 32, !noalias !219
  %1290 = bitcast %union.Slot* %1287 to <8 x i32>*
  %1291 = load <8 x i32>, <8 x i32>* %1290, align 32, !noalias !219
  %1292 = or <8 x i32> %1291, %1289
  %1293 = sext i32 %108 to i64
  %1294 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1293
  %1295 = bitcast %union.Slot* %1294 to <8 x i32>*
  store <8 x i32> %1292, <8 x i32>* %1295, align 32
  br label %1925

1296:                                             ; preds = %103, %103
  %1297 = sext i32 %110 to i64
  %1298 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1297
  %1299 = sext i32 %112 to i64
  %1300 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1299
  %1301 = bitcast %union.Slot* %1298 to <8 x i32>*
  %1302 = load <8 x i32>, <8 x i32>* %1301, align 32, !noalias !222
  %1303 = bitcast %union.Slot* %1300 to <8 x i32>*
  %1304 = load <8 x i32>, <8 x i32>* %1303, align 32, !noalias !222
  %1305 = xor <8 x i32> %1304, %1302
  %1306 = sext i32 %108 to i64
  %1307 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1306
  %1308 = bitcast %union.Slot* %1307 to <8 x i32>*
  store <8 x i32> %1305, <8 x i32>* %1308, align 32
  br label %1925

1309:                                             ; preds = %103, %103
  %1310 = sext i32 %110 to i64
  %1311 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1310
  %1312 = sext i32 %112 to i64
  %1313 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1312
  %1314 = bitcast %union.Slot* %1313 to <8 x i32>*
  %1315 = load <8 x i32>, <8 x i32>* %1314, align 32, !noalias !225
  %1316 = xor <8 x i32> %1315, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1317 = bitcast %union.Slot* %1311 to <8 x i32>*
  %1318 = load <8 x i32>, <8 x i32>* %1317, align 32, !noalias !228
  %1319 = and <8 x i32> %1318, %1316
  %1320 = sext i32 %108 to i64
  %1321 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1320
  %1322 = bitcast %union.Slot* %1321 to <8 x i32>*
  store <8 x i32> %1319, <8 x i32>* %1322, align 32
  br label %1925

1323:                                             ; preds = %103, %103
  %1324 = sext i32 %110 to i64
  %1325 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324
  %1326 = sext i32 %112 to i64
  %1327 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326
  %1328 = sext i32 %114 to i64
  %1329 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328
  %1330 = bitcast %union.Slot* %1327 to <2 x i32>*
  %1331 = load <2 x i32>, <2 x i32>* %1330, align 16, !noalias !231
  %1332 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326, i32 0, i32 0, i32 1
  %1333 = bitcast %"struct.skvx::Vec.57"* %1332 to <2 x i32>*
  %1334 = load <2 x i32>, <2 x i32>* %1333, align 8, !noalias !231
  %1335 = shufflevector <2 x i32> %1331, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1336 = shufflevector <2 x i32> %1334, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1337 = shufflevector <4 x i32> %1335, <4 x i32> %1336, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1338 = bitcast %union.Slot* %1325 to <4 x i32>*
  %1339 = load <4 x i32>, <4 x i32>* %1338, align 16, !noalias !231
  %1340 = and <4 x i32> %1337, %1339
  %1341 = bitcast <4 x i32> %1340 to <2 x i64>
  %1342 = extractelement <2 x i64> %1341, i32 0
  %1343 = extractelement <2 x i64> %1341, i32 1
  %1344 = bitcast i64 %1342 to <2 x i32>
  %1345 = shufflevector <2 x i32> %1344, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1346 = bitcast i64 %1343 to <2 x i32>
  %1347 = shufflevector <2 x i32> %1346, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1348 = shufflevector <4 x i32> %1345, <4 x i32> %1347, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1349 = bitcast <4 x i32> %1339 to <2 x i64>
  %1350 = xor <2 x i64> %1349, <i64 -1, i64 -1>
  %1351 = extractelement <2 x i64> %1350, i32 0
  %1352 = extractelement <2 x i64> %1350, i32 1
  %1353 = bitcast i64 %1351 to <2 x i32>
  %1354 = shufflevector <2 x i32> %1353, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1355 = bitcast i64 %1352 to <2 x i32>
  %1356 = shufflevector <2 x i32> %1355, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1357 = shufflevector <4 x i32> %1354, <4 x i32> %1356, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1358 = bitcast %union.Slot* %1329 to <2 x i32>*
  %1359 = load <2 x i32>, <2 x i32>* %1358, align 16, !noalias !231
  %1360 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328, i32 0, i32 0, i32 1
  %1361 = bitcast %"struct.skvx::Vec.57"* %1360 to <2 x i32>*
  %1362 = load <2 x i32>, <2 x i32>* %1361, align 8, !noalias !231
  %1363 = shufflevector <2 x i32> %1359, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1364 = shufflevector <2 x i32> %1362, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1365 = shufflevector <4 x i32> %1363, <4 x i32> %1364, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1366 = and <4 x i32> %1357, %1365
  %1367 = bitcast <4 x i32> %1366 to <2 x i64>
  %1368 = extractelement <2 x i64> %1367, i32 0
  %1369 = extractelement <2 x i64> %1367, i32 1
  %1370 = bitcast i64 %1368 to <2 x i32>
  %1371 = shufflevector <2 x i32> %1370, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1372 = bitcast i64 %1369 to <2 x i32>
  %1373 = shufflevector <2 x i32> %1372, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1374 = shufflevector <4 x i32> %1371, <4 x i32> %1373, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1375 = or <4 x i32> %1374, %1348
  %1376 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1
  %1377 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326, i32 0, i32 1
  %1378 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328, i32 0, i32 1
  %1379 = bitcast %"struct.skvx::Vec.56"* %1377 to <2 x i32>*
  %1380 = load <2 x i32>, <2 x i32>* %1379, align 16, !noalias !231
  %1381 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1326, i32 0, i32 1, i32 1
  %1382 = bitcast %"struct.skvx::Vec.57"* %1381 to <2 x i32>*
  %1383 = load <2 x i32>, <2 x i32>* %1382, align 8, !noalias !231
  %1384 = shufflevector <2 x i32> %1380, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1385 = shufflevector <2 x i32> %1383, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1386 = shufflevector <4 x i32> %1384, <4 x i32> %1385, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1387 = bitcast %"struct.skvx::Vec.56"* %1376 to <4 x i32>*
  %1388 = load <4 x i32>, <4 x i32>* %1387, align 16, !noalias !231
  %1389 = and <4 x i32> %1386, %1388
  %1390 = bitcast <4 x i32> %1389 to <2 x i64>
  %1391 = extractelement <2 x i64> %1390, i32 0
  %1392 = extractelement <2 x i64> %1390, i32 1
  %1393 = bitcast i64 %1391 to <2 x i32>
  %1394 = shufflevector <2 x i32> %1393, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1395 = bitcast i64 %1392 to <2 x i32>
  %1396 = shufflevector <2 x i32> %1395, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1397 = shufflevector <4 x i32> %1394, <4 x i32> %1396, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1398 = bitcast <4 x i32> %1388 to <2 x i64>
  %1399 = xor <2 x i64> %1398, <i64 -1, i64 -1>
  %1400 = extractelement <2 x i64> %1399, i32 0
  %1401 = extractelement <2 x i64> %1399, i32 1
  %1402 = bitcast i64 %1400 to <2 x i32>
  %1403 = shufflevector <2 x i32> %1402, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1404 = bitcast i64 %1401 to <2 x i32>
  %1405 = shufflevector <2 x i32> %1404, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1406 = shufflevector <4 x i32> %1403, <4 x i32> %1405, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1407 = bitcast %"struct.skvx::Vec.56"* %1378 to <2 x i32>*
  %1408 = load <2 x i32>, <2 x i32>* %1407, align 16, !noalias !231
  %1409 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1328, i32 0, i32 1, i32 1
  %1410 = bitcast %"struct.skvx::Vec.57"* %1409 to <2 x i32>*
  %1411 = load <2 x i32>, <2 x i32>* %1410, align 8, !noalias !231
  %1412 = shufflevector <2 x i32> %1408, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1413 = shufflevector <2 x i32> %1411, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1414 = shufflevector <4 x i32> %1412, <4 x i32> %1413, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1415 = and <4 x i32> %1406, %1414
  %1416 = bitcast <4 x i32> %1415 to <2 x i64>
  %1417 = extractelement <2 x i64> %1416, i32 0
  %1418 = extractelement <2 x i64> %1416, i32 1
  %1419 = bitcast i64 %1417 to <2 x i32>
  %1420 = shufflevector <2 x i32> %1419, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1421 = bitcast i64 %1418 to <2 x i32>
  %1422 = shufflevector <2 x i32> %1421, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1423 = shufflevector <4 x i32> %1420, <4 x i32> %1422, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1424 = or <4 x i32> %1423, %1397
  %1425 = sext i32 %108 to i64
  %1426 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1425
  %1427 = bitcast %union.Slot* %1426 to <4 x i32>*
  store <4 x i32> %1375, <4 x i32>* %1427, align 32
  %1428 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1425, i32 0, i32 1
  %1429 = bitcast %"struct.skvx::Vec.56"* %1428 to <4 x i32>*
  store <4 x i32> %1424, <4 x i32>* %1429, align 16
  br label %1925

1430:                                             ; preds = %103, %103
  %1431 = sext i32 %110 to i64
  %1432 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 0, i32 0, i32 0
  %1433 = load float, float* %1432, align 4, !noalias !234
  %1434 = tail call float @ceilf(float %1433) #18, !noalias !241
  %1435 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 0, i32 1, i32 0
  %1436 = load float, float* %1435, align 4, !noalias !234
  %1437 = tail call float @ceilf(float %1436) #18, !noalias !241
  %1438 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 1, i32 0, i32 0
  %1439 = load float, float* %1438, align 4, !noalias !234
  %1440 = tail call float @ceilf(float %1439) #18, !noalias !241
  %1441 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 0, i32 1, i32 1, i32 0
  %1442 = load float, float* %1441, align 4, !noalias !234
  %1443 = tail call float @ceilf(float %1442) #18, !noalias !241
  %1444 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 0, i32 0, i32 0
  %1445 = load float, float* %1444, align 4, !noalias !234
  %1446 = tail call float @ceilf(float %1445) #18, !noalias !241
  %1447 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 0, i32 1, i32 0
  %1448 = load float, float* %1447, align 4, !noalias !234
  %1449 = tail call float @ceilf(float %1448) #18, !noalias !241
  %1450 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 1, i32 0, i32 0
  %1451 = load float, float* %1450, align 4, !noalias !234
  %1452 = tail call float @ceilf(float %1451) #18, !noalias !241
  %1453 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1431, i32 0, i32 1, i32 1, i32 1, i32 0
  %1454 = load float, float* %1453, align 4, !noalias !234
  %1455 = tail call float @ceilf(float %1454) #18, !noalias !241
  %1456 = sext i32 %108 to i64
  %1457 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1434, float* %1457, align 32
  %1458 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1437, float* %1458, align 4
  %1459 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1440, float* %1459, align 8
  %1460 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1443, float* %1460, align 4
  %1461 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1446, float* %1461, align 16
  %1462 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1449, float* %1462, align 4
  %1463 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1452, float* %1463, align 8
  %1464 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1456, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1455, float* %1464, align 4
  br label %1925

1465:                                             ; preds = %103, %103
  %1466 = sext i32 %110 to i64
  %1467 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 0, i32 0, i32 0
  %1468 = load float, float* %1467, align 4, !noalias !242
  %1469 = tail call float @floorf(float %1468) #18, !noalias !249
  %1470 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 0, i32 1, i32 0
  %1471 = load float, float* %1470, align 4, !noalias !242
  %1472 = tail call float @floorf(float %1471) #18, !noalias !249
  %1473 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 1, i32 0, i32 0
  %1474 = load float, float* %1473, align 4, !noalias !242
  %1475 = tail call float @floorf(float %1474) #18, !noalias !249
  %1476 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 0, i32 1, i32 1, i32 0
  %1477 = load float, float* %1476, align 4, !noalias !242
  %1478 = tail call float @floorf(float %1477) #18, !noalias !249
  %1479 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 0, i32 0, i32 0
  %1480 = load float, float* %1479, align 4, !noalias !242
  %1481 = tail call float @floorf(float %1480) #18, !noalias !249
  %1482 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 0, i32 1, i32 0
  %1483 = load float, float* %1482, align 4, !noalias !242
  %1484 = tail call float @floorf(float %1483) #18, !noalias !249
  %1485 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 1, i32 0, i32 0
  %1486 = load float, float* %1485, align 4, !noalias !242
  %1487 = tail call float @floorf(float %1486) #18, !noalias !249
  %1488 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1466, i32 0, i32 1, i32 1, i32 1, i32 0
  %1489 = load float, float* %1488, align 4, !noalias !242
  %1490 = tail call float @floorf(float %1489) #18, !noalias !249
  %1491 = sext i32 %108 to i64
  %1492 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1469, float* %1492, align 32
  %1493 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1472, float* %1493, align 4
  %1494 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1475, float* %1494, align 8
  %1495 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1478, float* %1495, align 4
  %1496 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1481, float* %1496, align 16
  %1497 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1484, float* %1497, align 4
  %1498 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1487, float* %1498, align 8
  %1499 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1491, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1490, float* %1499, align 4
  br label %1925

1500:                                             ; preds = %103, %103
  %1501 = sext i32 %110 to i64
  %1502 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1501
  %1503 = bitcast %union.Slot* %1502 to <8 x i32>*
  %1504 = load <8 x i32>, <8 x i32>* %1503, align 32, !noalias !250
  %1505 = sitofp <8 x i32> %1504 to <8 x float>
  %1506 = sext i32 %108 to i64
  %1507 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1506, i32 0
  %1508 = bitcast %"struct.skvx::Vec.55"* %1507 to <8 x float>*
  store <8 x float> %1505, <8 x float>* %1508, align 32
  br label %1925

1509:                                             ; preds = %103, %103
  %1510 = sext i32 %110 to i64
  %1511 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1510, i32 0
  %1512 = bitcast %"struct.skvx::Vec.55"* %1511 to <8 x float>*
  %1513 = load <8 x float>, <8 x float>* %1512, align 32, !noalias !253
  %1514 = fptosi <8 x float> %1513 to <8 x i32>
  %1515 = sext i32 %108 to i64
  %1516 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1515
  %1517 = bitcast %union.Slot* %1516 to <8 x i32>*
  store <8 x i32> %1514, <8 x i32>* %1517, align 32
  br label %1925

1518:                                             ; preds = %103, %103
  %1519 = sext i32 %110 to i64
  %1520 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1519, i32 0
  %1521 = bitcast %"struct.skvx::Vec.55"* %1520 to <4 x float>*
  %1522 = load <4 x float>, <4 x float>* %1521, align 16, !noalias !256
  %1523 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1522) #18
  %1524 = bitcast <4 x i32> %1523 to <2 x i64>
  %1525 = extractelement <2 x i64> %1524, i32 0
  %1526 = extractelement <2 x i64> %1524, i32 1
  %1527 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1519, i32 0, i32 1
  %1528 = bitcast %"struct.skvx::Vec.56"* %1527 to <4 x float>*
  %1529 = load <4 x float>, <4 x float>* %1528, align 16, !noalias !256
  %1530 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %1529) #18
  %1531 = bitcast <4 x i32> %1530 to <2 x i64>
  %1532 = extractelement <2 x i64> %1531, i32 0
  %1533 = extractelement <2 x i64> %1531, i32 1
  %1534 = bitcast i64 %1525 to <2 x i32>
  %1535 = shufflevector <2 x i32> %1534, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1536 = bitcast i64 %1526 to <2 x i32>
  %1537 = shufflevector <2 x i32> %1536, <2 x i32> undef, <8 x i32> <i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %1538 = shufflevector <8 x i32> %1535, <8 x i32> %1537, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %1539 = bitcast i64 %1532 to <2 x i32>
  %1540 = shufflevector <2 x i32> %1539, <2 x i32> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 undef, i32 undef>
  %1541 = shufflevector <8 x i32> %1538, <8 x i32> %1540, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 undef, i32 undef>
  %1542 = bitcast i64 %1533 to <2 x i32>
  %1543 = shufflevector <2 x i32> %1542, <2 x i32> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1>
  %1544 = shufflevector <8 x i32> %1541, <8 x i32> %1543, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 14, i32 15>
  %1545 = sext i32 %108 to i64
  %1546 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1545
  %1547 = bitcast %union.Slot* %1546 to <8 x i32>*
  store <8 x i32> %1544, <8 x i32>* %1547, align 32
  br label %1925

1548:                                             ; preds = %103, %103
  %1549 = sext i32 %110 to i64
  %1550 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1549, i32 0
  %1551 = bitcast %"struct.skvx::Vec.55"* %1550 to <2 x i64>*
  %1552 = load <2 x i64>, <2 x i64>* %1551, align 16
  %1553 = and <2 x i64> %1552, <i64 -9223372034707292160, i64 -9223372034707292160>
  %1554 = extractelement <2 x i64> %1553, i32 0
  %1555 = extractelement <2 x i64> %1553, i32 1
  %1556 = bitcast i64 %1554 to <2 x i32>
  %1557 = shufflevector <2 x i32> %1556, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1558 = bitcast i64 %1555 to <2 x i32>
  %1559 = shufflevector <2 x i32> %1558, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1560 = shufflevector <4 x i32> %1557, <4 x i32> %1559, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1561 = bitcast <4 x i32> %1560 to <2 x i64>
  %1562 = xor <2 x i64> %1552, %1561
  %1563 = extractelement <2 x i64> %1562, i32 0
  %1564 = extractelement <2 x i64> %1562, i32 1
  %1565 = bitcast i64 %1563 to <2 x i32>
  %1566 = shufflevector <2 x i32> %1565, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1567 = bitcast i64 %1564 to <2 x i32>
  %1568 = shufflevector <2 x i32> %1567, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1569 = shufflevector <4 x i32> %1566, <4 x i32> %1568, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1570 = icmp ult <4 x i32> %1569, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %1571 = sext <4 x i1> %1570 to <4 x i32>
  %1572 = bitcast <4 x i32> %1571 to <2 x i64>
  %1573 = extractelement <2 x i64> %1572, i32 0
  %1574 = extractelement <2 x i64> %1572, i32 1
  %1575 = bitcast i64 %1573 to <2 x i32>
  %1576 = shufflevector <2 x i32> %1575, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1577 = bitcast i64 %1574 to <2 x i32>
  %1578 = shufflevector <2 x i32> %1577, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1579 = shufflevector <4 x i32> %1576, <4 x i32> %1578, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1580 = lshr <4 x i32> %1560, <i32 16, i32 16, i32 16, i32 16>
  %1581 = bitcast <4 x i32> %1580 to <2 x i64>
  %1582 = extractelement <2 x i64> %1581, i32 0
  %1583 = extractelement <2 x i64> %1581, i32 1
  %1584 = bitcast i64 %1582 to <2 x i32>
  %1585 = shufflevector <2 x i32> %1584, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1586 = bitcast i64 %1583 to <2 x i32>
  %1587 = shufflevector <2 x i32> %1586, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1588 = shufflevector <4 x i32> %1585, <4 x i32> %1587, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1589 = lshr <4 x i32> %1569, <i32 13, i32 13, i32 13, i32 13>
  %1590 = bitcast <4 x i32> %1589 to <2 x i64>
  %1591 = extractelement <2 x i64> %1590, i32 0
  %1592 = extractelement <2 x i64> %1590, i32 1
  %1593 = bitcast i64 %1591 to <2 x i32>
  %1594 = shufflevector <2 x i32> %1593, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1595 = bitcast i64 %1592 to <2 x i32>
  %1596 = shufflevector <2 x i32> %1595, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1597 = shufflevector <4 x i32> %1594, <4 x i32> %1596, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1598 = add <4 x i32> %1597, %1588
  %1599 = bitcast <4 x i32> %1598 to <2 x i64>
  %1600 = extractelement <2 x i64> %1599, i32 0
  %1601 = extractelement <2 x i64> %1599, i32 1
  %1602 = bitcast i64 %1600 to <2 x i32>
  %1603 = shufflevector <2 x i32> %1602, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1604 = bitcast i64 %1601 to <2 x i32>
  %1605 = shufflevector <2 x i32> %1604, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1606 = shufflevector <4 x i32> %1603, <4 x i32> %1605, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1607 = add <4 x i32> %1606, <i32 -114688, i32 -114688, i32 -114688, i32 -114688>
  %1608 = bitcast <4 x i32> %1607 to <2 x i64>
  %1609 = extractelement <2 x i64> %1608, i32 0
  %1610 = extractelement <2 x i64> %1608, i32 1
  %1611 = bitcast i64 %1609 to <2 x i32>
  %1612 = bitcast <4 x i32> %1579 to <2 x i64>
  %1613 = xor <2 x i64> %1612, <i64 -1, i64 -1>
  %1614 = extractelement <2 x i64> %1613, i32 0
  %1615 = extractelement <2 x i64> %1613, i32 1
  %1616 = bitcast i64 %1614 to <2 x i32>
  %1617 = shufflevector <2 x i32> %1616, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1618 = bitcast i64 %1615 to <2 x i32>
  %1619 = shufflevector <2 x i32> %1618, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1620 = shufflevector <4 x i32> %1617, <4 x i32> %1619, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1621 = bitcast i64 %1610 to <2 x i32>
  %1622 = shufflevector <2 x i32> %1611, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1623 = shufflevector <2 x i32> %1621, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1624 = shufflevector <4 x i32> %1622, <4 x i32> %1623, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1625 = and <4 x i32> %1624, %1620
  %1626 = bitcast <4 x i32> %1625 to <2 x i64>
  %1627 = extractelement <2 x i64> %1626, i32 0
  %1628 = extractelement <2 x i64> %1626, i32 1
  %1629 = bitcast i64 %1627 to <2 x i32>
  %1630 = shufflevector <2 x i32> %1629, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1631 = bitcast i64 %1628 to <2 x i32>
  %1632 = shufflevector <2 x i32> %1631, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1633 = shufflevector <4 x i32> %1630, <4 x i32> %1632, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1634 = bitcast <4 x i32> %1633 to <2 x i64>
  %1635 = extractelement <2 x i64> %1634, i32 0
  %1636 = extractelement <2 x i64> %1634, i32 1
  %1637 = bitcast i64 %1635 to <2 x i32>
  %1638 = shufflevector <2 x i32> %1637, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1639 = bitcast i64 %1636 to <2 x i32>
  %1640 = shufflevector <2 x i32> %1639, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1641 = shufflevector <4 x i32> %1638, <4 x i32> %1640, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1642 = trunc <4 x i32> %1641 to <4 x i16>
  %1643 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1549, i32 0, i32 1
  %1644 = bitcast %"struct.skvx::Vec.56"* %1643 to <2 x i64>*
  %1645 = load <2 x i64>, <2 x i64>* %1644, align 16
  %1646 = and <2 x i64> %1645, <i64 -9223372034707292160, i64 -9223372034707292160>
  %1647 = extractelement <2 x i64> %1646, i32 0
  %1648 = extractelement <2 x i64> %1646, i32 1
  %1649 = bitcast i64 %1647 to <2 x i32>
  %1650 = shufflevector <2 x i32> %1649, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1651 = bitcast i64 %1648 to <2 x i32>
  %1652 = shufflevector <2 x i32> %1651, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1653 = shufflevector <4 x i32> %1650, <4 x i32> %1652, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1654 = bitcast <4 x i32> %1653 to <2 x i64>
  %1655 = xor <2 x i64> %1645, %1654
  %1656 = extractelement <2 x i64> %1655, i32 0
  %1657 = extractelement <2 x i64> %1655, i32 1
  %1658 = bitcast i64 %1656 to <2 x i32>
  %1659 = shufflevector <2 x i32> %1658, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1660 = bitcast i64 %1657 to <2 x i32>
  %1661 = shufflevector <2 x i32> %1660, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1662 = shufflevector <4 x i32> %1659, <4 x i32> %1661, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1663 = icmp ult <4 x i32> %1662, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %1664 = sext <4 x i1> %1663 to <4 x i32>
  %1665 = bitcast <4 x i32> %1664 to <2 x i64>
  %1666 = extractelement <2 x i64> %1665, i32 0
  %1667 = extractelement <2 x i64> %1665, i32 1
  %1668 = bitcast i64 %1666 to <2 x i32>
  %1669 = shufflevector <2 x i32> %1668, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1670 = bitcast i64 %1667 to <2 x i32>
  %1671 = shufflevector <2 x i32> %1670, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1672 = shufflevector <4 x i32> %1669, <4 x i32> %1671, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1673 = lshr <4 x i32> %1653, <i32 16, i32 16, i32 16, i32 16>
  %1674 = bitcast <4 x i32> %1673 to <2 x i64>
  %1675 = extractelement <2 x i64> %1674, i32 0
  %1676 = extractelement <2 x i64> %1674, i32 1
  %1677 = bitcast i64 %1675 to <2 x i32>
  %1678 = shufflevector <2 x i32> %1677, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1679 = bitcast i64 %1676 to <2 x i32>
  %1680 = shufflevector <2 x i32> %1679, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1681 = shufflevector <4 x i32> %1678, <4 x i32> %1680, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1682 = lshr <4 x i32> %1662, <i32 13, i32 13, i32 13, i32 13>
  %1683 = bitcast <4 x i32> %1682 to <2 x i64>
  %1684 = extractelement <2 x i64> %1683, i32 0
  %1685 = extractelement <2 x i64> %1683, i32 1
  %1686 = bitcast i64 %1684 to <2 x i32>
  %1687 = shufflevector <2 x i32> %1686, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1688 = bitcast i64 %1685 to <2 x i32>
  %1689 = shufflevector <2 x i32> %1688, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1690 = shufflevector <4 x i32> %1687, <4 x i32> %1689, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1691 = add <4 x i32> %1690, %1681
  %1692 = bitcast <4 x i32> %1691 to <2 x i64>
  %1693 = extractelement <2 x i64> %1692, i32 0
  %1694 = extractelement <2 x i64> %1692, i32 1
  %1695 = bitcast i64 %1693 to <2 x i32>
  %1696 = shufflevector <2 x i32> %1695, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1697 = bitcast i64 %1694 to <2 x i32>
  %1698 = shufflevector <2 x i32> %1697, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1699 = shufflevector <4 x i32> %1696, <4 x i32> %1698, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1700 = add <4 x i32> %1699, <i32 -114688, i32 -114688, i32 -114688, i32 -114688>
  %1701 = bitcast <4 x i32> %1700 to <2 x i64>
  %1702 = extractelement <2 x i64> %1701, i32 0
  %1703 = extractelement <2 x i64> %1701, i32 1
  %1704 = bitcast i64 %1702 to <2 x i32>
  %1705 = bitcast <4 x i32> %1672 to <2 x i64>
  %1706 = xor <2 x i64> %1705, <i64 -1, i64 -1>
  %1707 = extractelement <2 x i64> %1706, i32 0
  %1708 = extractelement <2 x i64> %1706, i32 1
  %1709 = bitcast i64 %1707 to <2 x i32>
  %1710 = shufflevector <2 x i32> %1709, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1711 = bitcast i64 %1708 to <2 x i32>
  %1712 = shufflevector <2 x i32> %1711, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1713 = shufflevector <4 x i32> %1710, <4 x i32> %1712, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1714 = bitcast i64 %1703 to <2 x i32>
  %1715 = shufflevector <2 x i32> %1704, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1716 = shufflevector <2 x i32> %1714, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1717 = shufflevector <4 x i32> %1715, <4 x i32> %1716, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1718 = and <4 x i32> %1717, %1713
  %1719 = bitcast <4 x i32> %1718 to <2 x i64>
  %1720 = extractelement <2 x i64> %1719, i32 0
  %1721 = extractelement <2 x i64> %1719, i32 1
  %1722 = bitcast i64 %1720 to <2 x i32>
  %1723 = shufflevector <2 x i32> %1722, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1724 = bitcast i64 %1721 to <2 x i32>
  %1725 = shufflevector <2 x i32> %1724, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1726 = shufflevector <4 x i32> %1723, <4 x i32> %1725, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1727 = bitcast <4 x i32> %1726 to <2 x i64>
  %1728 = extractelement <2 x i64> %1727, i32 0
  %1729 = extractelement <2 x i64> %1727, i32 1
  %1730 = bitcast i64 %1728 to <2 x i32>
  %1731 = shufflevector <2 x i32> %1730, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1732 = bitcast i64 %1729 to <2 x i32>
  %1733 = shufflevector <2 x i32> %1732, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1734 = shufflevector <4 x i32> %1731, <4 x i32> %1733, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1735 = trunc <4 x i32> %1734 to <4 x i16>
  %1736 = shufflevector <4 x i16> %1642, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %1737 = shufflevector <4 x i16> %1735, <4 x i16> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1738 = shufflevector <8 x i16> %1736, <8 x i16> %1737, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %1739 = zext <8 x i16> %1738 to <8 x i32>
  %1740 = sext i32 %108 to i64
  %1741 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1740
  %1742 = bitcast %union.Slot* %1741 to <8 x i32>*
  store <8 x i32> %1739, <8 x i32>* %1742, align 32
  br label %1925

1743:                                             ; preds = %103, %103
  %1744 = sext i32 %110 to i64
  %1745 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744
  %1746 = bitcast %union.Slot* %1745 to <8 x i32>*
  %1747 = load <8 x i32>, <8 x i32>* %1746, align 32
  %1748 = trunc <8 x i32> %1747 to <8 x i16>
  %1749 = bitcast <8 x i16> %1748 to <2 x i64>
  %1750 = extractelement <2 x i64> %1749, i32 0
  %1751 = extractelement <2 x i64> %1749, i32 1
  %1752 = bitcast i64 %1750 to <4 x i16>
  %1753 = zext <4 x i16> %1752 to <4 x i32>
  %1754 = bitcast <4 x i32> %1753 to <2 x i64>
  %1755 = and <2 x i64> %1754, <i64 140737488388096, i64 140737488388096>
  %1756 = extractelement <2 x i64> %1755, i32 0
  %1757 = extractelement <2 x i64> %1755, i32 1
  %1758 = bitcast i64 %1756 to <2 x i32>
  %1759 = shufflevector <2 x i32> %1758, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1760 = bitcast i64 %1757 to <2 x i32>
  %1761 = shufflevector <2 x i32> %1760, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1762 = shufflevector <4 x i32> %1759, <4 x i32> %1761, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1763 = xor <4 x i32> %1762, %1753
  %1764 = bitcast <4 x i32> %1763 to <2 x i64>
  %1765 = extractelement <2 x i64> %1764, i32 0
  %1766 = extractelement <2 x i64> %1764, i32 1
  %1767 = bitcast i64 %1765 to <2 x i32>
  %1768 = shufflevector <2 x i32> %1767, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1769 = bitcast i64 %1766 to <2 x i32>
  %1770 = shufflevector <2 x i32> %1769, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1771 = shufflevector <4 x i32> %1768, <4 x i32> %1770, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1772 = icmp ult <4 x i32> %1771, <i32 1024, i32 1024, i32 1024, i32 1024>
  %1773 = sext <4 x i1> %1772 to <4 x i32>
  %1774 = bitcast <4 x i32> %1773 to <2 x i64>
  %1775 = extractelement <2 x i64> %1774, i32 0
  %1776 = extractelement <2 x i64> %1774, i32 1
  %1777 = bitcast i64 %1775 to <2 x i32>
  %1778 = shufflevector <2 x i32> %1777, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1779 = bitcast i64 %1776 to <2 x i32>
  %1780 = shufflevector <2 x i32> %1779, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1781 = shufflevector <4 x i32> %1778, <4 x i32> %1780, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1782 = shl <4 x i32> %1762, <i32 16, i32 16, i32 16, i32 16>
  %1783 = bitcast <4 x i32> %1782 to <2 x i64>
  %1784 = extractelement <2 x i64> %1783, i32 0
  %1785 = extractelement <2 x i64> %1783, i32 1
  %1786 = bitcast i64 %1784 to <2 x i32>
  %1787 = shufflevector <2 x i32> %1786, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1788 = bitcast i64 %1785 to <2 x i32>
  %1789 = shufflevector <2 x i32> %1788, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1790 = shufflevector <4 x i32> %1787, <4 x i32> %1789, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1791 = shl <4 x i32> %1771, <i32 13, i32 13, i32 13, i32 13>
  %1792 = bitcast <4 x i32> %1791 to <2 x i64>
  %1793 = extractelement <2 x i64> %1792, i32 0
  %1794 = extractelement <2 x i64> %1792, i32 1
  %1795 = bitcast i64 %1793 to <2 x i32>
  %1796 = shufflevector <2 x i32> %1795, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1797 = bitcast i64 %1794 to <2 x i32>
  %1798 = shufflevector <2 x i32> %1797, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1799 = shufflevector <4 x i32> %1796, <4 x i32> %1798, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1800 = add <4 x i32> %1799, %1790
  %1801 = bitcast <4 x i32> %1800 to <2 x i64>
  %1802 = extractelement <2 x i64> %1801, i32 0
  %1803 = extractelement <2 x i64> %1801, i32 1
  %1804 = bitcast i64 %1802 to <2 x i32>
  %1805 = shufflevector <2 x i32> %1804, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1806 = bitcast i64 %1803 to <2 x i32>
  %1807 = shufflevector <2 x i32> %1806, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1808 = shufflevector <4 x i32> %1805, <4 x i32> %1807, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1809 = add <4 x i32> %1808, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %1810 = bitcast <4 x i32> %1809 to <2 x i64>
  %1811 = extractelement <2 x i64> %1810, i32 0
  %1812 = extractelement <2 x i64> %1810, i32 1
  %1813 = bitcast i64 %1811 to <2 x i32>
  %1814 = bitcast i64 %1812 to <2 x i32>
  %1815 = bitcast <4 x i32> %1781 to <2 x i64>
  %1816 = xor <2 x i64> %1815, <i64 -1, i64 -1>
  %1817 = extractelement <2 x i64> %1816, i32 0
  %1818 = extractelement <2 x i64> %1816, i32 1
  %1819 = bitcast i64 %1817 to <2 x i32>
  %1820 = shufflevector <2 x i32> %1819, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1821 = bitcast i64 %1818 to <2 x i32>
  %1822 = shufflevector <2 x i32> %1821, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1823 = shufflevector <4 x i32> %1820, <4 x i32> %1822, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1824 = shufflevector <2 x i32> %1813, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1825 = shufflevector <2 x i32> %1814, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1826 = shufflevector <4 x i32> %1824, <4 x i32> %1825, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1827 = and <4 x i32> %1826, %1823
  %1828 = bitcast <4 x i32> %1827 to <2 x i64>
  %1829 = extractelement <2 x i64> %1828, i32 0
  %1830 = extractelement <2 x i64> %1828, i32 1
  %1831 = bitcast i64 %1829 to <2 x i32>
  %1832 = shufflevector <2 x i32> %1831, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1833 = bitcast i64 %1830 to <2 x i32>
  %1834 = shufflevector <2 x i32> %1833, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1835 = shufflevector <4 x i32> %1832, <4 x i32> %1834, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1836 = bitcast i64 %1751 to <4 x i16>
  %1837 = zext <4 x i16> %1836 to <4 x i32>
  %1838 = bitcast <4 x i32> %1837 to <2 x i64>
  %1839 = and <2 x i64> %1838, <i64 140737488388096, i64 140737488388096>
  %1840 = extractelement <2 x i64> %1839, i32 0
  %1841 = extractelement <2 x i64> %1839, i32 1
  %1842 = bitcast i64 %1840 to <2 x i32>
  %1843 = shufflevector <2 x i32> %1842, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1844 = bitcast i64 %1841 to <2 x i32>
  %1845 = shufflevector <2 x i32> %1844, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1846 = shufflevector <4 x i32> %1843, <4 x i32> %1845, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1847 = xor <4 x i32> %1846, %1837
  %1848 = bitcast <4 x i32> %1847 to <2 x i64>
  %1849 = extractelement <2 x i64> %1848, i32 0
  %1850 = extractelement <2 x i64> %1848, i32 1
  %1851 = bitcast i64 %1849 to <2 x i32>
  %1852 = shufflevector <2 x i32> %1851, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1853 = bitcast i64 %1850 to <2 x i32>
  %1854 = shufflevector <2 x i32> %1853, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1855 = shufflevector <4 x i32> %1852, <4 x i32> %1854, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1856 = icmp ult <4 x i32> %1855, <i32 1024, i32 1024, i32 1024, i32 1024>
  %1857 = sext <4 x i1> %1856 to <4 x i32>
  %1858 = bitcast <4 x i32> %1857 to <2 x i64>
  %1859 = extractelement <2 x i64> %1858, i32 0
  %1860 = extractelement <2 x i64> %1858, i32 1
  %1861 = bitcast i64 %1859 to <2 x i32>
  %1862 = shufflevector <2 x i32> %1861, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1863 = bitcast i64 %1860 to <2 x i32>
  %1864 = shufflevector <2 x i32> %1863, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1865 = shufflevector <4 x i32> %1862, <4 x i32> %1864, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1866 = shl <4 x i32> %1846, <i32 16, i32 16, i32 16, i32 16>
  %1867 = bitcast <4 x i32> %1866 to <2 x i64>
  %1868 = extractelement <2 x i64> %1867, i32 0
  %1869 = extractelement <2 x i64> %1867, i32 1
  %1870 = bitcast i64 %1868 to <2 x i32>
  %1871 = shufflevector <2 x i32> %1870, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1872 = bitcast i64 %1869 to <2 x i32>
  %1873 = shufflevector <2 x i32> %1872, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1874 = shufflevector <4 x i32> %1871, <4 x i32> %1873, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1875 = shl <4 x i32> %1855, <i32 13, i32 13, i32 13, i32 13>
  %1876 = bitcast <4 x i32> %1875 to <2 x i64>
  %1877 = extractelement <2 x i64> %1876, i32 0
  %1878 = extractelement <2 x i64> %1876, i32 1
  %1879 = bitcast i64 %1877 to <2 x i32>
  %1880 = shufflevector <2 x i32> %1879, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1881 = bitcast i64 %1878 to <2 x i32>
  %1882 = shufflevector <2 x i32> %1881, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1883 = shufflevector <4 x i32> %1880, <4 x i32> %1882, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1884 = add <4 x i32> %1883, %1874
  %1885 = bitcast <4 x i32> %1884 to <2 x i64>
  %1886 = extractelement <2 x i64> %1885, i32 0
  %1887 = extractelement <2 x i64> %1885, i32 1
  %1888 = bitcast i64 %1886 to <2 x i32>
  %1889 = shufflevector <2 x i32> %1888, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1890 = bitcast i64 %1887 to <2 x i32>
  %1891 = shufflevector <2 x i32> %1890, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1892 = shufflevector <4 x i32> %1889, <4 x i32> %1891, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1893 = add <4 x i32> %1892, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %1894 = bitcast <4 x i32> %1893 to <2 x i64>
  %1895 = extractelement <2 x i64> %1894, i32 0
  %1896 = extractelement <2 x i64> %1894, i32 1
  %1897 = bitcast i64 %1895 to <2 x i32>
  %1898 = bitcast i64 %1896 to <2 x i32>
  %1899 = bitcast <4 x i32> %1865 to <2 x i64>
  %1900 = xor <2 x i64> %1899, <i64 -1, i64 -1>
  %1901 = extractelement <2 x i64> %1900, i32 0
  %1902 = extractelement <2 x i64> %1900, i32 1
  %1903 = bitcast i64 %1901 to <2 x i32>
  %1904 = shufflevector <2 x i32> %1903, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1905 = bitcast i64 %1902 to <2 x i32>
  %1906 = shufflevector <2 x i32> %1905, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1907 = shufflevector <4 x i32> %1904, <4 x i32> %1906, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1908 = shufflevector <2 x i32> %1897, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1909 = shufflevector <2 x i32> %1898, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1910 = shufflevector <4 x i32> %1908, <4 x i32> %1909, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1911 = and <4 x i32> %1910, %1907
  %1912 = bitcast <4 x i32> %1911 to <2 x i64>
  %1913 = extractelement <2 x i64> %1912, i32 0
  %1914 = extractelement <2 x i64> %1912, i32 1
  %1915 = bitcast i64 %1913 to <2 x i32>
  %1916 = shufflevector <2 x i32> %1915, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %1917 = bitcast i64 %1914 to <2 x i32>
  %1918 = shufflevector <2 x i32> %1917, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %1919 = shufflevector <4 x i32> %1916, <4 x i32> %1918, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %1920 = sext i32 %108 to i64
  %1921 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1920, i32 0
  %1922 = bitcast %"struct.skvx::Vec.55"* %1921 to <4 x i32>*
  store <4 x i32> %1835, <4 x i32>* %1922, align 32
  %1923 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1920, i32 0, i32 1
  %1924 = bitcast %"struct.skvx::Vec.56"* %1923 to <4 x i32>*
  store <4 x i32> %1919, <4 x i32>* %1924, align 16
  br label %1925

1925:                                             ; preds = %713, %756, %103, %103, %1743, %1548, %1518, %1509, %1500, %1465, %1430, %1323, %1309, %1296, %1283, %1270, %1256, %1242, %1228, %1214, %1200, %1186, %1175, %1164, %1153, %1140, %1127, %1114, %1079, %1014, %949, %880, %866, %852, %839, %826, %813, %800, %792, %777, %773, %671, %560, %478, %396, %374, %351, %328, %313, %306, %290, %280, %267, %257, %247, %238, %221, %214, %204, %164, %148, %139, %130, %122
  %1926 = add nsw i64 %104, 1
  %1927 = trunc i64 %1926 to i32
  %1928 = icmp eq i32 %1927, %1
  br i1 %1928, label %67, label %103

1929:                                             ; preds = %101, %25
  %1930 = icmp eq i8* %26, null
  br i1 %1930, label %1932, label %1931

1931:                                             ; preds = %1929
  tail call void @_ZdaPv(i8* nonnull %26) #19
  br label %1932

1932:                                             ; preds = %1929, %1931
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %12) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8callbackEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to %struct.SkRasterPipeline_CallbackCtx*
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = shufflevector <4 x float> %4, <4 x float> %5, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %19 = shufflevector <4 x float> %6, <4 x float> %7, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %20 = shufflevector <4 x float> %4, <4 x float> %5, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %21 = shufflevector <4 x float> %6, <4 x float> %7, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %22 = shufflevector <4 x float> %18, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = shufflevector <4 x float> %19, <4 x float> %18, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %24 = shufflevector <4 x float> %20, <4 x float> %21, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %25 = bitcast i8* %17 to <4 x float>*
  store <4 x float> %22, <4 x float>* %25, align 1
  %26 = shufflevector <4 x float> %21, <4 x float> %20, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %27 = getelementptr inbounds i8, i8* %14, i64 24
  %28 = bitcast i8* %27 to <4 x float>*
  store <4 x float> %23, <4 x float>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %14, i64 40
  %30 = bitcast i8* %29 to <4 x float>*
  store <4 x float> %24, <4 x float>* %30, align 1
  %31 = getelementptr inbounds i8, i8* %14, i64 56
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %26, <4 x float>* %32, align 1
  %33 = bitcast i8* %14 to void (%struct.SkRasterPipeline_CallbackCtx*, i32)**
  %34 = load void (%struct.SkRasterPipeline_CallbackCtx*, i32)*, void (%struct.SkRasterPipeline_CallbackCtx*, i32)** %33, align 8
  %35 = icmp eq i64 %0, 0
  %36 = select i1 %35, i64 4, i64 %0
  %37 = trunc i64 %36 to i32
  tail call void %34(%struct.SkRasterPipeline_CallbackCtx* %16, i32 %37) #18
  %38 = getelementptr inbounds i8, i8* %14, i64 264
  %39 = bitcast i8* %38 to float**
  %40 = load float*, float** %39, align 8
  %41 = bitcast float* %40 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 1
  %43 = getelementptr inbounds float, float* %40, i64 4
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 1
  %46 = getelementptr inbounds float, float* %40, i64 8
  %47 = bitcast float* %46 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 1
  %49 = getelementptr inbounds float, float* %40, i64 12
  %50 = bitcast float* %49 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 1
  %52 = shufflevector <4 x float> %42, <4 x float> %45, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %53 = shufflevector <4 x float> %48, <4 x float> %51, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %54 = shufflevector <4 x float> %42, <4 x float> %45, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %55 = shufflevector <4 x float> %48, <4 x float> %51, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %56 = shufflevector <4 x float> %52, <4 x float> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = shufflevector <4 x float> %53, <4 x float> %52, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %58 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = shufflevector <4 x float> %55, <4 x float> %54, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %56, <4 x float> %57, <4 x float> %58, <4 x float> %59, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12move_src_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12move_dst_srcEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7clamp_0EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %4, <4 x float> zeroinitializer) #18
  %14 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> zeroinitializer) #18
  %15 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %6, <4 x float> zeroinitializer) #18
  %16 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %7, <4 x float> zeroinitializer) #18
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7clamp_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %4, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %14 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %15 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %6, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %7, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7clamp_aEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %7, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %14 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %4, <4 x float> %13) #18
  %15 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %13) #18
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %6, <4 x float> %13) #18
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %13, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11clamp_gamutEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %7, <4 x float> zeroinitializer) #18
  %14 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %13, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %15 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %4, <4 x float> zeroinitializer) #18
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %15, <4 x float> %14) #18
  %17 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> zeroinitializer) #18
  %18 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %17, <4 x float> %14) #18
  %19 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %6, <4 x float> zeroinitializer) #18
  %20 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %19, <4 x float> %14) #18
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <4 x float> %16, <4 x float> %18, <4 x float> %20, <4 x float> %14, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8unpremulEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %14 = fcmp olt <4 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = select <4 x i1> %14, <4 x float> %13, <4 x float> zeroinitializer
  %16 = fmul <4 x float> %15, %4
  %17 = fmul <4 x float> %15, %5
  %18 = fmul <4 x float> %15, %6
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <4 x float> %16, <4 x float> %17, <4 x float> %18, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6premulEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %7
  %14 = fmul <4 x float> %5, %7
  %15 = fmul <4 x float> %6, %7
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %19(i64 %0, i8** %18, i64 %2, i64 %3, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10premul_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %8, %11
  %14 = fmul <4 x float> %9, %11
  %15 = fmul <4 x float> %10, %11
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %19(i64 %0, i8** %18, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12force_opaqueEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L16force_opaque_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7set_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <4 x float> %19, <4 x float> %24, <4 x float> %29, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17unbounded_set_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <4 x float> %19, <4 x float> %24, <4 x float> %29, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7swap_rbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %6, <4 x float> %5, <4 x float> %4, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11swap_rb_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %10, <4 x float> %9, <4 x float> %8, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11black_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11white_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13uniform_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <4 x float> undef, float %32, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <4 x float> %19, <4 x float> %24, <4 x float> %29, <4 x float> %34, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L23unbounded_uniform_colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <4 x float> undef, float %32, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <4 x float> %19, <4 x float> %24, <4 x float> %29, <4 x float> %34, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17uniform_color_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <4 x float> undef, float %32, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %19, <4 x float> %24, <4 x float> %29, <4 x float> %34) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11seed_shaderEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = trunc i64 %2 to i32
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> zeroinitializer
  %16 = sitofp <4 x i32> %15 to <4 x float>
  %17 = fadd <4 x float> %16, <float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00>
  %18 = trunc i64 %3 to i32
  %19 = insertelement <4 x i32> undef, i32 %18, i32 0
  %20 = shufflevector <4 x i32> %19, <4 x i32> undef, <4 x i32> zeroinitializer
  %21 = sitofp <4 x i32> %20 to <4 x float>
  %22 = fadd <4 x float> %21, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <4 x float> %17, <4 x float> %22, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6ditherEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = trunc i64 %2 to i32
  %18 = insertelement <4 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> zeroinitializer
  %20 = add <4 x i32> %19, <i32 0, i32 1, i32 2, i32 3>
  %21 = trunc i64 %3 to i32
  %22 = insertelement <4 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <4 x i32> %22, <4 x i32> undef, <4 x i32> zeroinitializer
  %24 = xor <4 x i32> %23, %20
  %25 = shl <4 x i32> %24, <i32 5, i32 5, i32 5, i32 5>
  %26 = and <4 x i32> %25, <i32 32, i32 32, i32 32, i32 32>
  %27 = shl <4 x i32> %20, <i32 4, i32 4, i32 4, i32 4>
  %28 = and <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = shl <4 x i32> %24, <i32 2, i32 2, i32 2, i32 2>
  %30 = and <4 x i32> %29, <i32 8, i32 8, i32 8, i32 8>
  %31 = shl <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %32 = and <4 x i32> %31, <i32 4, i32 4, i32 4, i32 4>
  %33 = lshr <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  %34 = and <4 x i32> %33, <i32 2, i32 2, i32 2, i32 2>
  %35 = lshr <4 x i32> %20, <i32 2, i32 2, i32 2, i32 2>
  %36 = and <4 x i32> %35, <i32 1, i32 1, i32 1, i32 1>
  %37 = or <4 x i32> %32, %28
  %38 = or <4 x i32> %37, %36
  %39 = or <4 x i32> %38, %26
  %40 = or <4 x i32> %39, %30
  %41 = or <4 x i32> %40, %34
  %42 = sitofp <4 x i32> %41 to <4 x float>
  %43 = fmul <4 x float> %42, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %44 = fadd <4 x float> %43, <float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000>
  %45 = load float, float* %16, align 4
  %46 = insertelement <4 x float> undef, float %45, i32 0
  %47 = shufflevector <4 x float> %46, <4 x float> undef, <4 x i32> zeroinitializer
  %48 = fmul <4 x float> %44, %47
  %49 = fadd <4 x float> %48, %4
  %50 = fadd <4 x float> %48, %5
  %51 = fadd <4 x float> %48, %6
  %52 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %49, <4 x float> %7) #18
  %53 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %52) #18
  %54 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %50, <4 x float> %7) #18
  %55 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %54) #18
  %56 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %51, <4 x float> %7) #18
  %57 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %56) #18
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <4 x float> %53, <4 x float> %55, <4 x float> %57, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7load_a8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %39 [
    i64 0, label %40
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <4 x i8> <i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i8* %24 to <2 x i8>*
  %33 = load <2 x i8>, <2 x i8>* %32, align 1
  %34 = shufflevector <2 x i8> %33, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i8> %34, <4 x i8> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i8, i8* %24, align 1
  %38 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %37, i32 0
  br label %43

39:                                               ; preds = %12
  unreachable

40:                                               ; preds = %12
  %41 = bitcast i8* %24 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  br label %43

43:                                               ; preds = %30, %36, %40
  %44 = phi <4 x i8> [ %42, %40 ], [ %38, %36 ], [ %35, %30 ]
  %45 = uitofp <4 x i8> %44 to <4 x float>
  %46 = fmul <4 x float> %45, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %47 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %48 = extractvalue { i8*, i8** } %47, 0
  %49 = extractvalue { i8*, i8** } %47, 1
  %50 = bitcast i8* %48 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %50(i64 %0, i8** %49, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %46, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11load_a8_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %39 [
    i64 0, label %40
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <4 x i8> <i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i8* %24 to <2 x i8>*
  %33 = load <2 x i8>, <2 x i8>* %32, align 1
  %34 = shufflevector <2 x i8> %33, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i8> %34, <4 x i8> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i8, i8* %24, align 1
  %38 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %37, i32 0
  br label %43

39:                                               ; preds = %12
  unreachable

40:                                               ; preds = %12
  %41 = bitcast i8* %24 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  br label %43

43:                                               ; preds = %30, %36, %40
  %44 = phi <4 x i8> [ %42, %40 ], [ %38, %36 ], [ %35, %30 ]
  %45 = uitofp <4 x i8> %44 to <4 x float>
  %46 = fmul <4 x float> %45, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %47 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %48 = extractvalue { i8*, i8** } %47, 0
  %49 = extractvalue { i8*, i8** } %47, 1
  %50 = bitcast i8* %48 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %50(i64 %0, i8** %49, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %46) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8store_a8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = shl <4 x i32> %28, <i32 16, i32 16, i32 16, i32 16>
  %30 = ashr exact <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %30, <4 x i32> undef) #18
  %32 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %31, <8 x i16> undef) #18
  %33 = bitcast <16 x i8> %32 to <4 x i32>
  %34 = extractelement <4 x i32> %33, i32 0
  %35 = bitcast i32 %34 to <4 x i8>
  %36 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %36) #18
  switch i64 %0, label %47 [
    i64 0, label %45
    i64 1, label %43
    i64 2, label %40
    i64 3, label %37
  ], !prof !260

37:                                               ; preds = %12
  %38 = extractelement <4 x i8> %35, i32 2
  %39 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %38, i8* %39, align 1
  br label %40

40:                                               ; preds = %37, %12
  %41 = bitcast i8* %24 to <2 x i8>*
  %42 = shufflevector <4 x i8> %35, <4 x i8> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i8> %42, <2 x i8>* %41, align 1
  br label %48

43:                                               ; preds = %12
  %44 = extractelement <4 x i8> %35, i32 0
  store i8 %44, i8* %24, align 1
  br label %48

45:                                               ; preds = %12
  %46 = bitcast i8* %24 to i32*
  store i32 %34, i32* %46, align 1
  br label %48

47:                                               ; preds = %12
  unreachable

48:                                               ; preds = %40, %43, %45
  %49 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %50 = extractvalue { i8*, i8** } %49, 0
  %51 = extractvalue { i8*, i8** } %49, 1
  %52 = bitcast i8* %50 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %52(i64 %0, i8** %51, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9gather_a8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %37, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = insertelement <4 x i8> undef, i8 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %37, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = insertelement <4 x i8> %51, i8 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %37, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <4 x i8> %56, i8 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %37, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = insertelement <4 x i8> %61, i8 %65, i32 3
  %67 = uitofp <4 x i8> %66 to <4 x float>
  %68 = fmul <4 x float> %67, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %69 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %70 = extractvalue { i8*, i8** } %69, 0
  %71 = extractvalue { i8*, i8** } %69, 1
  %72 = bitcast i8* %70 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %72(i64 %0, i8** %71, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %68, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8load_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 63488, i32 63488, i32 63488, i32 63488>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %49 = and <4 x i32> %45, <i32 2016, i32 2016, i32 2016, i32 2016>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %52 = and <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %53 = sitofp <4 x i32> %52 to <4 x float>
  %54 = fmul <4 x float> %53, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %55 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %56 = extractvalue { i8*, i8** } %55, 0
  %57 = extractvalue { i8*, i8** } %55, 1
  %58 = bitcast i8* %56 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %58(i64 %0, i8** %57, i64 %2, i64 %3, <4 x float> %48, <4 x float> %51, <4 x float> %54, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12load_565_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 63488, i32 63488, i32 63488, i32 63488>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %49 = and <4 x i32> %45, <i32 2016, i32 2016, i32 2016, i32 2016>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %52 = and <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %53 = sitofp <4 x i32> %52 to <4 x float>
  %54 = fmul <4 x float> %53, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %55 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %56 = extractvalue { i8*, i8** } %55, 0
  %57 = extractvalue { i8*, i8** } %55, 1
  %58 = bitcast i8* %56 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %58(i64 %0, i8** %57, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %48, <4 x float> %51, <4 x float> %54, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9store_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = shl <4 x i32> %28, <i32 11, i32 11, i32 11, i32 11>
  %30 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %31 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %30, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %32 = fmul <4 x float> %31, <float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01>
  %33 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %32) #18
  %34 = shl <4 x i32> %33, <i32 5, i32 5, i32 5, i32 5>
  %35 = or <4 x i32> %34, %29
  %36 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %37 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %36, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %38 = fmul <4 x float> %37, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %39 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %38) #18
  %40 = or <4 x i32> %35, %39
  %41 = shl <4 x i32> %40, <i32 16, i32 16, i32 16, i32 16>
  %42 = ashr exact <4 x i32> %41, <i32 16, i32 16, i32 16, i32 16>
  %43 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %42, <4 x i32> undef) #18
  %44 = bitcast <8 x i16> %43 to <2 x double>
  %45 = extractelement <2 x double> %44, i32 0
  %46 = bitcast double %45 to <4 x i16>
  %47 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %47) #18
  switch i64 %0, label %58 [
    i64 0, label %56
    i64 1, label %54
    i64 2, label %51
    i64 3, label %48
  ], !prof !260

48:                                               ; preds = %12
  %49 = extractelement <4 x i16> %46, i32 2
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %49, i16* %50, align 2
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = shufflevector <4 x i16> %46, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %53, <2 x i16>* %52, align 2
  br label %59

54:                                               ; preds = %12
  %55 = extractelement <4 x i16> %46, i32 0
  store i16 %55, i16* %24, align 2
  br label %59

56:                                               ; preds = %12
  %57 = bitcast i16* %24 to double*
  store double %45, double* %57, align 2
  br label %59

58:                                               ; preds = %12
  unreachable

59:                                               ; preds = %51, %54, %56
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10gather_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <4 x i16> undef, i16 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <4 x i16> %51, i16 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <4 x i16> %56, i16 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <4 x i16> %61, i16 %65, i32 3
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = and <4 x i32> %67, <i32 63488, i32 63488, i32 63488, i32 63488>
  %69 = sitofp <4 x i32> %68 to <4 x float>
  %70 = fmul <4 x float> %69, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %71 = and <4 x i32> %67, <i32 2016, i32 2016, i32 2016, i32 2016>
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fmul <4 x float> %72, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %74 = and <4 x i32> %67, <i32 31, i32 31, i32 31, i32 31>
  %75 = sitofp <4 x i32> %74 to <4 x float>
  %76 = fmul <4 x float> %75, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %77 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %78 = extractvalue { i8*, i8** } %77, 0
  %79 = extractvalue { i8*, i8** } %77, 1
  %80 = bitcast i8* %78 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %80(i64 %0, i8** %79, i64 %2, i64 %3, <4 x float> %70, <4 x float> %73, <4 x float> %76, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9load_4444EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 61440, i32 61440, i32 61440, i32 61440>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000>
  %49 = and <4 x i32> %45, <i32 3840, i32 3840, i32 3840, i32 3840>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000>
  %52 = and <4 x i32> %45, <i32 240, i32 240, i32 240, i32 240>
  %53 = sitofp <4 x i32> %52 to <4 x float>
  %54 = fmul <4 x float> %53, <float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000>
  %55 = and <4 x i32> %45, <i32 15, i32 15, i32 15, i32 15>
  %56 = sitofp <4 x i32> %55 to <4 x float>
  %57 = fmul <4 x float> %56, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <4 x float> %48, <4 x float> %51, <4 x float> %54, <4 x float> %57, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13load_4444_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 61440, i32 61440, i32 61440, i32 61440>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000>
  %49 = and <4 x i32> %45, <i32 3840, i32 3840, i32 3840, i32 3840>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000>
  %52 = and <4 x i32> %45, <i32 240, i32 240, i32 240, i32 240>
  %53 = sitofp <4 x i32> %52 to <4 x float>
  %54 = fmul <4 x float> %53, <float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000>
  %55 = and <4 x i32> %45, <i32 15, i32 15, i32 15, i32 15>
  %56 = sitofp <4 x i32> %55 to <4 x float>
  %57 = fmul <4 x float> %56, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %48, <4 x float> %51, <4 x float> %54, <4 x float> %57) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10store_4444EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = shl <4 x i32> %28, <i32 12, i32 12, i32 12, i32 12>
  %30 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %31 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %30, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %32 = fmul <4 x float> %31, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %33 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %32) #18
  %34 = shl <4 x i32> %33, <i32 8, i32 8, i32 8, i32 8>
  %35 = or <4 x i32> %34, %29
  %36 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %37 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %36, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %38 = fmul <4 x float> %37, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %39 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %38) #18
  %40 = shl <4 x i32> %39, <i32 4, i32 4, i32 4, i32 4>
  %41 = or <4 x i32> %35, %40
  %42 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %43 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %42, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %44 = fmul <4 x float> %43, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %45 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %44) #18
  %46 = or <4 x i32> %41, %45
  %47 = shl <4 x i32> %46, <i32 16, i32 16, i32 16, i32 16>
  %48 = ashr exact <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %49 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %48, <4 x i32> undef) #18
  %50 = bitcast <8 x i16> %49 to <2 x double>
  %51 = extractelement <2 x double> %50, i32 0
  %52 = bitcast double %51 to <4 x i16>
  %53 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %53) #18
  switch i64 %0, label %64 [
    i64 0, label %62
    i64 1, label %60
    i64 2, label %57
    i64 3, label %54
  ], !prof !260

54:                                               ; preds = %12
  %55 = extractelement <4 x i16> %52, i32 2
  %56 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %55, i16* %56, align 2
  br label %57

57:                                               ; preds = %54, %12
  %58 = bitcast i16* %24 to <2 x i16>*
  %59 = shufflevector <4 x i16> %52, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %59, <2 x i16>* %58, align 2
  br label %65

60:                                               ; preds = %12
  %61 = extractelement <4 x i16> %52, i32 0
  store i16 %61, i16* %24, align 2
  br label %65

62:                                               ; preds = %12
  %63 = bitcast i16* %24 to double*
  store double %51, double* %63, align 2
  br label %65

64:                                               ; preds = %12
  unreachable

65:                                               ; preds = %57, %60, %62
  %66 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %67 = extractvalue { i8*, i8** } %66, 0
  %68 = extractvalue { i8*, i8** } %66, 1
  %69 = bitcast i8* %67 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %69(i64 %0, i8** %68, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11gather_4444EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <4 x i16> undef, i16 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <4 x i16> %51, i16 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <4 x i16> %56, i16 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <4 x i16> %61, i16 %65, i32 3
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = and <4 x i32> %67, <i32 61440, i32 61440, i32 61440, i32 61440>
  %69 = sitofp <4 x i32> %68 to <4 x float>
  %70 = fmul <4 x float> %69, <float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000>
  %71 = and <4 x i32> %67, <i32 3840, i32 3840, i32 3840, i32 3840>
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fmul <4 x float> %72, <float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000>
  %74 = and <4 x i32> %67, <i32 240, i32 240, i32 240, i32 240>
  %75 = sitofp <4 x i32> %74 to <4 x float>
  %76 = fmul <4 x float> %75, <float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000>
  %77 = and <4 x i32> %67, <i32 15, i32 15, i32 15, i32 15>
  %78 = sitofp <4 x i32> %77 to <4 x float>
  %79 = fmul <4 x float> %78, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  %80 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %81 = extractvalue { i8*, i8** } %80, 0
  %82 = extractvalue { i8*, i8** } %80, 1
  %83 = bitcast i8* %81 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %83(i64 %0, i8** %82, i64 %2, i64 %3, <4 x float> %70, <4 x float> %73, <4 x float> %76, <4 x float> %79, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8load_f16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp eq i64 %0, 0
  br i1 %25, label %47, label %26, !prof !261

26:                                               ; preds = %12
  %27 = bitcast i64* %24 to double*
  %28 = load double, double* %27, align 1
  %29 = icmp eq i64 %0, 1
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %28, i32 0
  %32 = bitcast <2 x double> %31 to <2 x i64>
  br label %53

33:                                               ; preds = %26
  %34 = getelementptr inbounds i64, i64* %24, i64 1
  %35 = bitcast i64* %34 to double*
  %36 = load double, double* %35, align 1
  %37 = insertelement <2 x double> undef, double %28, i32 0
  %38 = insertelement <2 x double> %37, double %36, i32 1
  %39 = bitcast <2 x double> %38 to <2 x i64>
  %40 = icmp ugt i64 %0, 2
  br i1 %40, label %41, label %53

41:                                               ; preds = %33
  %42 = getelementptr inbounds i64, i64* %24, i64 2
  %43 = bitcast i64* %42 to double*
  %44 = load double, double* %43, align 1
  %45 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %44, i32 0
  %46 = bitcast <2 x double> %45 to <2 x i64>
  br label %53

47:                                               ; preds = %12
  %48 = bitcast i64* %24 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 1
  %50 = getelementptr inbounds i64, i64* %24, i64 2
  %51 = bitcast i64* %50 to <2 x i64>*
  %52 = load <2 x i64>, <2 x i64>* %51, align 1
  br label %53

53:                                               ; preds = %30, %33, %41, %47
  %54 = phi <2 x i64> [ %52, %47 ], [ %46, %41 ], [ zeroinitializer, %33 ], [ zeroinitializer, %30 ]
  %55 = phi <2 x i64> [ %49, %47 ], [ %39, %41 ], [ %39, %33 ], [ %32, %30 ]
  %56 = bitcast <2 x i64> %55 to <8 x i16>
  %57 = bitcast <2 x i64> %54 to <8 x i16>
  %58 = shufflevector <8 x i16> %56, <8 x i16> %57, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %56, <8 x i16> %57, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %60 = shufflevector <8 x i16> %58, <8 x i16> %59, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %61 = shufflevector <8 x i16> %58, <8 x i16> %59, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %62 = bitcast <8 x i16> %60 to <2 x double>
  %63 = extractelement <2 x double> %62, i32 0
  %64 = bitcast double %63 to <4 x i16>
  %65 = extractelement <2 x double> %62, i32 1
  %66 = bitcast double %65 to <4 x i16>
  %67 = bitcast <8 x i16> %61 to <2 x double>
  %68 = extractelement <2 x double> %67, i32 0
  %69 = bitcast double %68 to <4 x i16>
  %70 = extractelement <2 x double> %67, i32 1
  %71 = bitcast double %70 to <4 x i16>
  %72 = zext <4 x i16> %64 to <4 x i32>
  %73 = and <4 x i32> %72, <i32 32767, i32 32767, i32 32767, i32 32767>
  %74 = icmp ugt <4 x i32> %73, <i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = shl nuw <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %76 = and <4 x i32> %75, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %77 = shl nuw nsw <4 x i32> %73, <i32 13, i32 13, i32 13, i32 13>
  %78 = or <4 x i32> %76, %77
  %79 = add nuw nsw <4 x i32> %78, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %80 = select <4 x i1> %74, <4 x i32> %79, <4 x i32> zeroinitializer
  %81 = zext <4 x i16> %66 to <4 x i32>
  %82 = and <4 x i32> %81, <i32 32767, i32 32767, i32 32767, i32 32767>
  %83 = icmp ugt <4 x i32> %82, <i32 1023, i32 1023, i32 1023, i32 1023>
  %84 = shl nuw <4 x i32> %81, <i32 16, i32 16, i32 16, i32 16>
  %85 = and <4 x i32> %84, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %86 = shl nuw nsw <4 x i32> %82, <i32 13, i32 13, i32 13, i32 13>
  %87 = or <4 x i32> %85, %86
  %88 = add nuw nsw <4 x i32> %87, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %89 = select <4 x i1> %83, <4 x i32> %88, <4 x i32> zeroinitializer
  %90 = zext <4 x i16> %69 to <4 x i32>
  %91 = and <4 x i32> %90, <i32 32767, i32 32767, i32 32767, i32 32767>
  %92 = icmp ugt <4 x i32> %91, <i32 1023, i32 1023, i32 1023, i32 1023>
  %93 = shl nuw <4 x i32> %90, <i32 16, i32 16, i32 16, i32 16>
  %94 = and <4 x i32> %93, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %95 = shl nuw nsw <4 x i32> %91, <i32 13, i32 13, i32 13, i32 13>
  %96 = or <4 x i32> %94, %95
  %97 = add nuw nsw <4 x i32> %96, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %98 = select <4 x i1> %92, <4 x i32> %97, <4 x i32> zeroinitializer
  %99 = zext <4 x i16> %71 to <4 x i32>
  %100 = and <4 x i32> %99, <i32 32767, i32 32767, i32 32767, i32 32767>
  %101 = icmp ugt <4 x i32> %100, <i32 1023, i32 1023, i32 1023, i32 1023>
  %102 = shl nuw <4 x i32> %99, <i32 16, i32 16, i32 16, i32 16>
  %103 = and <4 x i32> %102, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = shl nuw nsw <4 x i32> %100, <i32 13, i32 13, i32 13, i32 13>
  %105 = or <4 x i32> %103, %104
  %106 = add nuw nsw <4 x i32> %105, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %107 = select <4 x i1> %101, <4 x i32> %106, <4 x i32> zeroinitializer
  %108 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %109 = extractvalue { i8*, i8** } %108, 0
  %110 = extractvalue { i8*, i8** } %108, 1
  %111 = bitcast i8* %109 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %112 = bitcast <4 x i32> %80 to <4 x float>
  %113 = bitcast <4 x i32> %89 to <4 x float>
  %114 = bitcast <4 x i32> %98 to <4 x float>
  %115 = bitcast <4 x i32> %107 to <4 x float>
  tail call void %111(i64 %0, i8** %110, i64 %2, i64 %3, <4 x float> %112, <4 x float> %113, <4 x float> %114, <4 x float> %115, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12load_f16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp eq i64 %0, 0
  br i1 %25, label %47, label %26, !prof !261

26:                                               ; preds = %12
  %27 = bitcast i64* %24 to double*
  %28 = load double, double* %27, align 1
  %29 = icmp eq i64 %0, 1
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %28, i32 0
  %32 = bitcast <2 x double> %31 to <2 x i64>
  br label %53

33:                                               ; preds = %26
  %34 = getelementptr inbounds i64, i64* %24, i64 1
  %35 = bitcast i64* %34 to double*
  %36 = load double, double* %35, align 1
  %37 = insertelement <2 x double> undef, double %28, i32 0
  %38 = insertelement <2 x double> %37, double %36, i32 1
  %39 = bitcast <2 x double> %38 to <2 x i64>
  %40 = icmp ugt i64 %0, 2
  br i1 %40, label %41, label %53

41:                                               ; preds = %33
  %42 = getelementptr inbounds i64, i64* %24, i64 2
  %43 = bitcast i64* %42 to double*
  %44 = load double, double* %43, align 1
  %45 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %44, i32 0
  %46 = bitcast <2 x double> %45 to <2 x i64>
  br label %53

47:                                               ; preds = %12
  %48 = bitcast i64* %24 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 1
  %50 = getelementptr inbounds i64, i64* %24, i64 2
  %51 = bitcast i64* %50 to <2 x i64>*
  %52 = load <2 x i64>, <2 x i64>* %51, align 1
  br label %53

53:                                               ; preds = %30, %33, %41, %47
  %54 = phi <2 x i64> [ %52, %47 ], [ %46, %41 ], [ zeroinitializer, %33 ], [ zeroinitializer, %30 ]
  %55 = phi <2 x i64> [ %49, %47 ], [ %39, %41 ], [ %39, %33 ], [ %32, %30 ]
  %56 = bitcast <2 x i64> %55 to <8 x i16>
  %57 = bitcast <2 x i64> %54 to <8 x i16>
  %58 = shufflevector <8 x i16> %56, <8 x i16> %57, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %56, <8 x i16> %57, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %60 = shufflevector <8 x i16> %58, <8 x i16> %59, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %61 = shufflevector <8 x i16> %58, <8 x i16> %59, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %62 = bitcast <8 x i16> %60 to <2 x double>
  %63 = extractelement <2 x double> %62, i32 0
  %64 = bitcast double %63 to <4 x i16>
  %65 = extractelement <2 x double> %62, i32 1
  %66 = bitcast double %65 to <4 x i16>
  %67 = bitcast <8 x i16> %61 to <2 x double>
  %68 = extractelement <2 x double> %67, i32 0
  %69 = bitcast double %68 to <4 x i16>
  %70 = extractelement <2 x double> %67, i32 1
  %71 = bitcast double %70 to <4 x i16>
  %72 = zext <4 x i16> %64 to <4 x i32>
  %73 = and <4 x i32> %72, <i32 32767, i32 32767, i32 32767, i32 32767>
  %74 = icmp ugt <4 x i32> %73, <i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = shl nuw <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %76 = and <4 x i32> %75, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %77 = shl nuw nsw <4 x i32> %73, <i32 13, i32 13, i32 13, i32 13>
  %78 = or <4 x i32> %76, %77
  %79 = add nuw nsw <4 x i32> %78, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %80 = select <4 x i1> %74, <4 x i32> %79, <4 x i32> zeroinitializer
  %81 = zext <4 x i16> %66 to <4 x i32>
  %82 = and <4 x i32> %81, <i32 32767, i32 32767, i32 32767, i32 32767>
  %83 = icmp ugt <4 x i32> %82, <i32 1023, i32 1023, i32 1023, i32 1023>
  %84 = shl nuw <4 x i32> %81, <i32 16, i32 16, i32 16, i32 16>
  %85 = and <4 x i32> %84, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %86 = shl nuw nsw <4 x i32> %82, <i32 13, i32 13, i32 13, i32 13>
  %87 = or <4 x i32> %85, %86
  %88 = add nuw nsw <4 x i32> %87, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %89 = select <4 x i1> %83, <4 x i32> %88, <4 x i32> zeroinitializer
  %90 = zext <4 x i16> %69 to <4 x i32>
  %91 = and <4 x i32> %90, <i32 32767, i32 32767, i32 32767, i32 32767>
  %92 = icmp ugt <4 x i32> %91, <i32 1023, i32 1023, i32 1023, i32 1023>
  %93 = shl nuw <4 x i32> %90, <i32 16, i32 16, i32 16, i32 16>
  %94 = and <4 x i32> %93, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %95 = shl nuw nsw <4 x i32> %91, <i32 13, i32 13, i32 13, i32 13>
  %96 = or <4 x i32> %94, %95
  %97 = add nuw nsw <4 x i32> %96, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %98 = select <4 x i1> %92, <4 x i32> %97, <4 x i32> zeroinitializer
  %99 = zext <4 x i16> %71 to <4 x i32>
  %100 = and <4 x i32> %99, <i32 32767, i32 32767, i32 32767, i32 32767>
  %101 = icmp ugt <4 x i32> %100, <i32 1023, i32 1023, i32 1023, i32 1023>
  %102 = shl nuw <4 x i32> %99, <i32 16, i32 16, i32 16, i32 16>
  %103 = and <4 x i32> %102, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = shl nuw nsw <4 x i32> %100, <i32 13, i32 13, i32 13, i32 13>
  %105 = or <4 x i32> %103, %104
  %106 = add nuw nsw <4 x i32> %105, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %107 = select <4 x i1> %101, <4 x i32> %106, <4 x i32> zeroinitializer
  %108 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %109 = extractvalue { i8*, i8** } %108, 0
  %110 = extractvalue { i8*, i8** } %108, 1
  %111 = bitcast i8* %109 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %112 = bitcast <4 x i32> %80 to <4 x float>
  %113 = bitcast <4 x i32> %89 to <4 x float>
  %114 = bitcast <4 x i32> %98 to <4 x float>
  %115 = bitcast <4 x i32> %107 to <4 x float>
  tail call void %111(i64 %0, i8** %110, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %112, <4 x float> %113, <4 x float> %114, <4 x float> %115) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9store_f16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = bitcast <4 x float> %7 to <4 x i32>
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to i64**
  %21 = load i64*, i64** %20, align 8
  %22 = getelementptr inbounds i8, i8* %18, i64 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = sext i32 %24 to i64
  %26 = mul i64 %25, %3
  %27 = getelementptr inbounds i64, i64* %21, i64 %26
  %28 = getelementptr inbounds i64, i64* %27, i64 %2
  %29 = and <4 x i32> %13, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %30 = icmp ugt <4 x i32> %29, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %31 = lshr <4 x i32> %13, <i32 16, i32 16, i32 16, i32 16>
  %32 = and <4 x i32> %31, <i32 32768, i32 32768, i32 32768, i32 32768>
  %33 = lshr <4 x i32> %13, <i32 13, i32 13, i32 13, i32 13>
  %34 = add nuw nsw <4 x i32> %32, %33
  %35 = shl <4 x i32> %34, <i32 16, i32 16, i32 16, i32 16>
  %36 = add <4 x i32> %35, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %37 = ashr exact <4 x i32> %36, <i32 16, i32 16, i32 16, i32 16>
  %38 = select <4 x i1> %30, <4 x i32> %37, <4 x i32> zeroinitializer
  %39 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %38, <4 x i32> undef) #18
  %40 = and <4 x i32> %14, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %41 = icmp ugt <4 x i32> %40, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %42 = lshr <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %43 = and <4 x i32> %42, <i32 32768, i32 32768, i32 32768, i32 32768>
  %44 = lshr <4 x i32> %14, <i32 13, i32 13, i32 13, i32 13>
  %45 = add nuw nsw <4 x i32> %43, %44
  %46 = shl <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %47 = add <4 x i32> %46, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %48 = ashr exact <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %49 = select <4 x i1> %41, <4 x i32> %48, <4 x i32> zeroinitializer
  %50 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %49, <4 x i32> undef) #18
  %51 = and <4 x i32> %15, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %52 = icmp ugt <4 x i32> %51, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %53 = lshr <4 x i32> %15, <i32 16, i32 16, i32 16, i32 16>
  %54 = and <4 x i32> %53, <i32 32768, i32 32768, i32 32768, i32 32768>
  %55 = lshr <4 x i32> %15, <i32 13, i32 13, i32 13, i32 13>
  %56 = add nuw nsw <4 x i32> %54, %55
  %57 = shl <4 x i32> %56, <i32 16, i32 16, i32 16, i32 16>
  %58 = add <4 x i32> %57, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %59 = ashr exact <4 x i32> %58, <i32 16, i32 16, i32 16, i32 16>
  %60 = select <4 x i1> %52, <4 x i32> %59, <4 x i32> zeroinitializer
  %61 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %60, <4 x i32> undef) #18
  %62 = and <4 x i32> %16, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %63 = icmp ugt <4 x i32> %62, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %64 = lshr <4 x i32> %16, <i32 16, i32 16, i32 16, i32 16>
  %65 = and <4 x i32> %64, <i32 32768, i32 32768, i32 32768, i32 32768>
  %66 = lshr <4 x i32> %16, <i32 13, i32 13, i32 13, i32 13>
  %67 = add nuw nsw <4 x i32> %65, %66
  %68 = shl <4 x i32> %67, <i32 16, i32 16, i32 16, i32 16>
  %69 = add <4 x i32> %68, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %70 = ashr exact <4 x i32> %69, <i32 16, i32 16, i32 16, i32 16>
  %71 = select <4 x i1> %63, <4 x i32> %70, <4 x i32> zeroinitializer
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %71, <4 x i32> undef) #18
  %73 = shufflevector <8 x i16> %39, <8 x i16> %50, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = shufflevector <8 x i16> %61, <8 x i16> %72, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = icmp eq i64 %0, 0
  br i1 %75, label %95, label %76, !prof !261

76:                                               ; preds = %12
  %77 = bitcast i64* %28 to double*
  %78 = bitcast <8 x i16> %73 to <4 x i32>
  %79 = bitcast <8 x i16> %74 to <4 x i32>
  %80 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %81 = bitcast <4 x i32> %80 to <2 x double>
  %82 = extractelement <2 x double> %81, i32 0
  store double %82, double* %77, align 1
  %83 = icmp eq i64 %0, 1
  br i1 %83, label %103, label %84

84:                                               ; preds = %76
  %85 = getelementptr inbounds i64, i64* %28, i64 1
  %86 = bitcast i64* %85 to double*
  %87 = extractelement <2 x double> %81, i32 1
  store double %87, double* %86, align 1
  %88 = icmp ugt i64 %0, 2
  br i1 %88, label %89, label %103

89:                                               ; preds = %84
  %90 = getelementptr inbounds i64, i64* %28, i64 2
  %91 = bitcast i64* %90 to double*
  %92 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %93 = bitcast <4 x i32> %92 to <2 x double>
  %94 = extractelement <2 x double> %93, i32 0
  store double %94, double* %91, align 1
  br label %103

95:                                               ; preds = %12
  %96 = bitcast <8 x i16> %73 to <4 x i32>
  %97 = bitcast <8 x i16> %74 to <4 x i32>
  %98 = shufflevector <4 x i32> %96, <4 x i32> %97, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %99 = bitcast i64* %28 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %99, align 1
  %100 = getelementptr inbounds i64, i64* %28, i64 2
  %101 = shufflevector <4 x i32> %96, <4 x i32> %97, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %102 = bitcast i64* %100 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %102, align 1
  br label %103

103:                                              ; preds = %76, %84, %89, %95
  %104 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %19) #13, !srcloc !259
  %105 = extractvalue { i8*, i8** } %104, 0
  %106 = extractvalue { i8*, i8** } %104, 1
  %107 = bitcast i8* %105 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %107(i64 %0, i8** %106, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10gather_f16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i64**
  %37 = load i64*, i64** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i64, i64* %37, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = insertelement <4 x i64> undef, i64 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i64, i64* %37, i64 %53
  %55 = load i64, i64* %54, align 8
  %56 = insertelement <4 x i64> %51, i64 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i64, i64* %37, i64 %58
  %60 = load i64, i64* %59, align 8
  %61 = insertelement <4 x i64> %56, i64 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i64, i64* %37, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = insertelement <4 x i64> %61, i64 %65, i32 3
  %67 = shufflevector <4 x i64> %66, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %68 = shufflevector <4 x i64> %66, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %69 = bitcast <2 x i64> %67 to <8 x i16>
  %70 = bitcast <2 x i64> %68 to <8 x i16>
  %71 = shufflevector <8 x i16> %69, <8 x i16> %70, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = shufflevector <8 x i16> %69, <8 x i16> %70, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %73 = shufflevector <8 x i16> %71, <8 x i16> %72, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = shufflevector <8 x i16> %71, <8 x i16> %72, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %75 = bitcast <8 x i16> %73 to <2 x double>
  %76 = extractelement <2 x double> %75, i32 0
  %77 = bitcast double %76 to <4 x i16>
  %78 = extractelement <2 x double> %75, i32 1
  %79 = bitcast double %78 to <4 x i16>
  %80 = bitcast <8 x i16> %74 to <2 x double>
  %81 = extractelement <2 x double> %80, i32 0
  %82 = bitcast double %81 to <4 x i16>
  %83 = extractelement <2 x double> %80, i32 1
  %84 = bitcast double %83 to <4 x i16>
  %85 = zext <4 x i16> %77 to <4 x i32>
  %86 = and <4 x i32> %85, <i32 32767, i32 32767, i32 32767, i32 32767>
  %87 = icmp ugt <4 x i32> %86, <i32 1023, i32 1023, i32 1023, i32 1023>
  %88 = shl nuw <4 x i32> %85, <i32 16, i32 16, i32 16, i32 16>
  %89 = and <4 x i32> %88, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %90 = shl nuw nsw <4 x i32> %86, <i32 13, i32 13, i32 13, i32 13>
  %91 = or <4 x i32> %89, %90
  %92 = add nuw nsw <4 x i32> %91, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %93 = select <4 x i1> %87, <4 x i32> %92, <4 x i32> zeroinitializer
  %94 = zext <4 x i16> %79 to <4 x i32>
  %95 = and <4 x i32> %94, <i32 32767, i32 32767, i32 32767, i32 32767>
  %96 = icmp ugt <4 x i32> %95, <i32 1023, i32 1023, i32 1023, i32 1023>
  %97 = shl nuw <4 x i32> %94, <i32 16, i32 16, i32 16, i32 16>
  %98 = and <4 x i32> %97, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %99 = shl nuw nsw <4 x i32> %95, <i32 13, i32 13, i32 13, i32 13>
  %100 = or <4 x i32> %98, %99
  %101 = add nuw nsw <4 x i32> %100, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %102 = select <4 x i1> %96, <4 x i32> %101, <4 x i32> zeroinitializer
  %103 = zext <4 x i16> %82 to <4 x i32>
  %104 = and <4 x i32> %103, <i32 32767, i32 32767, i32 32767, i32 32767>
  %105 = icmp ugt <4 x i32> %104, <i32 1023, i32 1023, i32 1023, i32 1023>
  %106 = shl nuw <4 x i32> %103, <i32 16, i32 16, i32 16, i32 16>
  %107 = and <4 x i32> %106, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = shl nuw nsw <4 x i32> %104, <i32 13, i32 13, i32 13, i32 13>
  %109 = or <4 x i32> %107, %108
  %110 = add nuw nsw <4 x i32> %109, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %111 = select <4 x i1> %105, <4 x i32> %110, <4 x i32> zeroinitializer
  %112 = zext <4 x i16> %84 to <4 x i32>
  %113 = and <4 x i32> %112, <i32 32767, i32 32767, i32 32767, i32 32767>
  %114 = icmp ugt <4 x i32> %113, <i32 1023, i32 1023, i32 1023, i32 1023>
  %115 = shl nuw <4 x i32> %112, <i32 16, i32 16, i32 16, i32 16>
  %116 = and <4 x i32> %115, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %117 = shl nuw nsw <4 x i32> %113, <i32 13, i32 13, i32 13, i32 13>
  %118 = or <4 x i32> %116, %117
  %119 = add nuw nsw <4 x i32> %118, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %120 = select <4 x i1> %114, <4 x i32> %119, <4 x i32> zeroinitializer
  %121 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %122 = extractvalue { i8*, i8** } %121, 0
  %123 = extractvalue { i8*, i8** } %121, 1
  %124 = bitcast i8* %122 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %125 = bitcast <4 x i32> %93 to <4 x float>
  %126 = bitcast <4 x i32> %102 to <4 x float>
  %127 = bitcast <4 x i32> %111 to <4 x float>
  %128 = bitcast <4 x i32> %120 to <4 x float>
  tail call void %124(i64 %0, i8** %123, i64 %2, i64 %3, <4 x float> %125, <4 x float> %126, <4 x float> %127, <4 x float> %128, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9load_af16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 32767, i32 32767, i32 32767, i32 32767>
  %47 = icmp ugt <4 x i32> %46, <i32 1023, i32 1023, i32 1023, i32 1023>
  %48 = shl nuw <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %49 = and <4 x i32> %48, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %50 = shl nuw nsw <4 x i32> %46, <i32 13, i32 13, i32 13, i32 13>
  %51 = or <4 x i32> %49, %50
  %52 = add nuw nsw <4 x i32> %51, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %53 = select <4 x i1> %47, <4 x i32> %52, <4 x i32> zeroinitializer
  %54 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %55 = extractvalue { i8*, i8** } %54, 0
  %56 = extractvalue { i8*, i8** } %54, 1
  %57 = bitcast i8* %55 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %58 = bitcast <4 x i32> %53 to <4 x float>
  tail call void %57(i64 %0, i8** %56, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %58, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13load_af16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 32767, i32 32767, i32 32767, i32 32767>
  %47 = icmp ugt <4 x i32> %46, <i32 1023, i32 1023, i32 1023, i32 1023>
  %48 = shl nuw <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %49 = and <4 x i32> %48, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %50 = shl nuw nsw <4 x i32> %46, <i32 13, i32 13, i32 13, i32 13>
  %51 = or <4 x i32> %49, %50
  %52 = add nuw nsw <4 x i32> %51, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %53 = select <4 x i1> %47, <4 x i32> %52, <4 x i32> zeroinitializer
  %54 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %55 = extractvalue { i8*, i8** } %54, 0
  %56 = extractvalue { i8*, i8** } %54, 1
  %57 = bitcast i8* %55 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %58 = bitcast <4 x i32> %53 to <4 x float>
  tail call void %57(i64 %0, i8** %56, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %58) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10store_af16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %7 to <4 x i32>
  %14 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %15 = extractvalue { i8*, i8** } %14, 0
  %16 = extractvalue { i8*, i8** } %14, 1
  %17 = bitcast i8* %15 to i16**
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds i8, i8* %15, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = sext i32 %21 to i64
  %23 = mul i64 %22, %3
  %24 = getelementptr inbounds i16, i16* %18, i64 %23
  %25 = getelementptr inbounds i16, i16* %24, i64 %2
  %26 = and <4 x i32> %13, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %27 = icmp ugt <4 x i32> %26, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %28 = lshr <4 x i32> %13, <i32 16, i32 16, i32 16, i32 16>
  %29 = and <4 x i32> %28, <i32 32768, i32 32768, i32 32768, i32 32768>
  %30 = lshr <4 x i32> %13, <i32 13, i32 13, i32 13, i32 13>
  %31 = add nuw nsw <4 x i32> %29, %30
  %32 = shl <4 x i32> %31, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %32, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %34 = ashr exact <4 x i32> %33, <i32 16, i32 16, i32 16, i32 16>
  %35 = select <4 x i1> %27, <4 x i32> %34, <4 x i32> zeroinitializer
  %36 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %35, <4 x i32> undef) #18
  %37 = bitcast <8 x i16> %36 to <2 x double>
  %38 = extractelement <2 x double> %37, i32 0
  %39 = bitcast double %38 to <4 x i16>
  %40 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %40) #18
  switch i64 %0, label %51 [
    i64 0, label %49
    i64 1, label %47
    i64 2, label %44
    i64 3, label %41
  ], !prof !260

41:                                               ; preds = %12
  %42 = extractelement <4 x i16> %39, i32 2
  %43 = getelementptr inbounds i16, i16* %25, i64 2
  store i16 %42, i16* %43, align 2
  br label %44

44:                                               ; preds = %41, %12
  %45 = bitcast i16* %25 to <2 x i16>*
  %46 = shufflevector <4 x i16> %39, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %46, <2 x i16>* %45, align 2
  br label %52

47:                                               ; preds = %12
  %48 = extractelement <4 x i16> %39, i32 0
  store i16 %48, i16* %25, align 2
  br label %52

49:                                               ; preds = %12
  %50 = bitcast i16* %25 to double*
  store double %38, double* %50, align 2
  br label %52

51:                                               ; preds = %12
  unreachable

52:                                               ; preds = %44, %47, %49
  %53 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %16) #13, !srcloc !259
  %54 = extractvalue { i8*, i8** } %53, 0
  %55 = extractvalue { i8*, i8** } %53, 1
  %56 = bitcast i8* %54 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %56(i64 %0, i8** %55, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11gather_af16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <4 x i16> undef, i16 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <4 x i16> %51, i16 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <4 x i16> %56, i16 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <4 x i16> %61, i16 %65, i32 3
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = and <4 x i32> %67, <i32 32767, i32 32767, i32 32767, i32 32767>
  %69 = icmp ugt <4 x i32> %68, <i32 1023, i32 1023, i32 1023, i32 1023>
  %70 = shl nuw <4 x i32> %67, <i32 16, i32 16, i32 16, i32 16>
  %71 = and <4 x i32> %70, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %72 = shl nuw nsw <4 x i32> %68, <i32 13, i32 13, i32 13, i32 13>
  %73 = or <4 x i32> %71, %72
  %74 = add nuw nsw <4 x i32> %73, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %75 = select <4 x i1> %69, <4 x i32> %74, <4 x i32> zeroinitializer
  %76 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %77 = extractvalue { i8*, i8** } %76, 0
  %78 = extractvalue { i8*, i8** } %76, 1
  %79 = bitcast i8* %77 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %80 = bitcast <4 x i32> %75 to <4 x float>
  tail call void %79(i64 %0, i8** %78, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %80, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10load_rgf16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = bitcast i32* %24 to i16*
  switch i64 %0, label %26 [
    i64 0, label %46
    i64 1, label %42
  ], !prof !262

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to double*
  %28 = load double, double* %27, align 1
  %29 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %28, i32 0
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = icmp ugt i64 %0, 2
  br i1 %31, label %32, label %49

32:                                               ; preds = %26
  %33 = bitcast <2 x double> %29 to <8 x i16>
  %34 = getelementptr inbounds i32, i32* %24, i64 2
  %35 = bitcast i32* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %33, i16 %36, i64 4
  %38 = getelementptr inbounds i16, i16* %25, i64 5
  %39 = load i16, i16* %38, align 2
  %40 = insertelement <8 x i16> %37, i16 %39, i64 5
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  br label %49

42:                                               ; preds = %12
  %43 = load i32, i32* %24, align 4
  %44 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %43, i32 0
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  br label %49

46:                                               ; preds = %12
  %47 = bitcast i32* %24 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 1
  br label %49

49:                                               ; preds = %26, %32, %42, %46
  %50 = phi <2 x i64> [ %41, %32 ], [ %30, %26 ], [ %45, %42 ], [ %48, %46 ]
  %51 = bitcast <2 x i64> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 5, i32 6, i32 7>
  %53 = shufflevector <8 x i16> %52, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 6, i32 5, i32 7>
  %54 = bitcast <8 x i16> %53 to <4 x i32>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %56 = bitcast <2 x i32> %55 to <4 x i16>
  %57 = shufflevector <4 x i32> %54, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %58 = bitcast <2 x i32> %57 to <4 x i16>
  %59 = zext <4 x i16> %56 to <4 x i32>
  %60 = and <4 x i32> %59, <i32 32767, i32 32767, i32 32767, i32 32767>
  %61 = icmp ugt <4 x i32> %60, <i32 1023, i32 1023, i32 1023, i32 1023>
  %62 = shl nuw <4 x i32> %59, <i32 16, i32 16, i32 16, i32 16>
  %63 = and <4 x i32> %62, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %64 = shl nuw nsw <4 x i32> %60, <i32 13, i32 13, i32 13, i32 13>
  %65 = or <4 x i32> %63, %64
  %66 = add nuw nsw <4 x i32> %65, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %67 = select <4 x i1> %61, <4 x i32> %66, <4 x i32> zeroinitializer
  %68 = zext <4 x i16> %58 to <4 x i32>
  %69 = and <4 x i32> %68, <i32 32767, i32 32767, i32 32767, i32 32767>
  %70 = icmp ugt <4 x i32> %69, <i32 1023, i32 1023, i32 1023, i32 1023>
  %71 = shl nuw <4 x i32> %68, <i32 16, i32 16, i32 16, i32 16>
  %72 = and <4 x i32> %71, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %73 = shl nuw nsw <4 x i32> %69, <i32 13, i32 13, i32 13, i32 13>
  %74 = or <4 x i32> %72, %73
  %75 = add nuw nsw <4 x i32> %74, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %76 = select <4 x i1> %70, <4 x i32> %75, <4 x i32> zeroinitializer
  %77 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %78 = extractvalue { i8*, i8** } %77, 0
  %79 = extractvalue { i8*, i8** } %77, 1
  %80 = bitcast i8* %78 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %81 = bitcast <4 x i32> %67 to <4 x float>
  %82 = bitcast <4 x i32> %76 to <4 x float>
  tail call void %80(i64 %0, i8** %79, i64 %2, i64 %3, <4 x float> %81, <4 x float> %82, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L14load_rgf16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = bitcast i32* %24 to i16*
  switch i64 %0, label %26 [
    i64 0, label %46
    i64 1, label %42
  ], !prof !262

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to double*
  %28 = load double, double* %27, align 1
  %29 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %28, i32 0
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = icmp ugt i64 %0, 2
  br i1 %31, label %32, label %49

32:                                               ; preds = %26
  %33 = bitcast <2 x double> %29 to <8 x i16>
  %34 = getelementptr inbounds i32, i32* %24, i64 2
  %35 = bitcast i32* %34 to i16*
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %33, i16 %36, i64 4
  %38 = getelementptr inbounds i16, i16* %25, i64 5
  %39 = load i16, i16* %38, align 2
  %40 = insertelement <8 x i16> %37, i16 %39, i64 5
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  br label %49

42:                                               ; preds = %12
  %43 = load i32, i32* %24, align 4
  %44 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %43, i32 0
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  br label %49

46:                                               ; preds = %12
  %47 = bitcast i32* %24 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 1
  br label %49

49:                                               ; preds = %26, %32, %42, %46
  %50 = phi <2 x i64> [ %41, %32 ], [ %30, %26 ], [ %45, %42 ], [ %48, %46 ]
  %51 = bitcast <2 x i64> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 5, i32 6, i32 7>
  %53 = shufflevector <8 x i16> %52, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 6, i32 5, i32 7>
  %54 = bitcast <8 x i16> %53 to <4 x i32>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %56 = bitcast <2 x i32> %55 to <4 x i16>
  %57 = shufflevector <4 x i32> %54, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %58 = bitcast <2 x i32> %57 to <4 x i16>
  %59 = zext <4 x i16> %56 to <4 x i32>
  %60 = and <4 x i32> %59, <i32 32767, i32 32767, i32 32767, i32 32767>
  %61 = icmp ugt <4 x i32> %60, <i32 1023, i32 1023, i32 1023, i32 1023>
  %62 = shl nuw <4 x i32> %59, <i32 16, i32 16, i32 16, i32 16>
  %63 = and <4 x i32> %62, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %64 = shl nuw nsw <4 x i32> %60, <i32 13, i32 13, i32 13, i32 13>
  %65 = or <4 x i32> %63, %64
  %66 = add nuw nsw <4 x i32> %65, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %67 = select <4 x i1> %61, <4 x i32> %66, <4 x i32> zeroinitializer
  %68 = zext <4 x i16> %58 to <4 x i32>
  %69 = and <4 x i32> %68, <i32 32767, i32 32767, i32 32767, i32 32767>
  %70 = icmp ugt <4 x i32> %69, <i32 1023, i32 1023, i32 1023, i32 1023>
  %71 = shl nuw <4 x i32> %68, <i32 16, i32 16, i32 16, i32 16>
  %72 = and <4 x i32> %71, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %73 = shl nuw nsw <4 x i32> %69, <i32 13, i32 13, i32 13, i32 13>
  %74 = or <4 x i32> %72, %73
  %75 = add nuw nsw <4 x i32> %74, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %76 = select <4 x i1> %70, <4 x i32> %75, <4 x i32> zeroinitializer
  %77 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %78 = extractvalue { i8*, i8** } %77, 0
  %79 = extractvalue { i8*, i8** } %77, 1
  %80 = bitcast i8* %78 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %81 = bitcast <4 x i32> %67 to <4 x float>
  %82 = bitcast <4 x i32> %76 to <4 x float>
  tail call void %80(i64 %0, i8** %79, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %81, <4 x float> %82, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11store_rgf16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = bitcast i8* %16 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds i8, i8* %16, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, %3
  %25 = getelementptr inbounds i32, i32* %19, i64 %24
  %26 = getelementptr inbounds i32, i32* %25, i64 %2
  %27 = and <4 x i32> %13, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %28 = icmp ugt <4 x i32> %27, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %29 = lshr <4 x i32> %13, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 32768, i32 32768, i32 32768, i32 32768>
  %31 = lshr <4 x i32> %13, <i32 13, i32 13, i32 13, i32 13>
  %32 = add nuw nsw <4 x i32> %30, %31
  %33 = shl <4 x i32> %32, <i32 16, i32 16, i32 16, i32 16>
  %34 = add <4 x i32> %33, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %35 = ashr exact <4 x i32> %34, <i32 16, i32 16, i32 16, i32 16>
  %36 = select <4 x i1> %28, <4 x i32> %35, <4 x i32> zeroinitializer
  %37 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %36, <4 x i32> undef) #18
  %38 = and <4 x i32> %14, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %39 = icmp ugt <4 x i32> %38, <i32 947912703, i32 947912703, i32 947912703, i32 947912703>
  %40 = lshr <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %41 = and <4 x i32> %40, <i32 32768, i32 32768, i32 32768, i32 32768>
  %42 = lshr <4 x i32> %14, <i32 13, i32 13, i32 13, i32 13>
  %43 = add nuw nsw <4 x i32> %41, %42
  %44 = shl <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %45 = add <4 x i32> %44, <i32 1073741824, i32 1073741824, i32 1073741824, i32 1073741824>
  %46 = ashr exact <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %47 = select <4 x i1> %39, <4 x i32> %46, <4 x i32> zeroinitializer
  %48 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> undef) #18
  %49 = shufflevector <8 x i16> %37, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = bitcast <8 x i16> %49 to <4 x i32>
  switch i64 %0, label %51 [
    i64 0, label %61
    i64 1, label %59
  ], !prof !262

51:                                               ; preds = %12
  %52 = bitcast <8 x i16> %49 to <2 x i64>
  %53 = extractelement <2 x i64> %52, i32 0
  %54 = bitcast i32* %26 to i64*
  store i64 %53, i64* %54, align 1
  %55 = icmp ugt i64 %0, 2
  br i1 %55, label %56, label %63

56:                                               ; preds = %51
  %57 = extractelement <4 x i32> %50, i32 2
  %58 = getelementptr inbounds i32, i32* %26, i64 2
  store i32 %57, i32* %58, align 2
  br label %63

59:                                               ; preds = %12
  %60 = extractelement <4 x i32> %50, i32 0
  store i32 %60, i32* %26, align 2
  br label %63

61:                                               ; preds = %12
  %62 = bitcast i32* %26 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %62, align 1
  br label %63

63:                                               ; preds = %51, %56, %59, %61
  %64 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %17) #13, !srcloc !259
  %65 = extractvalue { i8*, i8** } %64, 0
  %66 = extractvalue { i8*, i8** } %64, 1
  %67 = bitcast i8* %65 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %67(i64 %0, i8** %66, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12gather_rgf16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %37, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = insertelement <4 x i32> undef, i32 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %37, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> %51, i32 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %37, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = insertelement <4 x i32> %56, i32 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %37, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = insertelement <4 x i32> %61, i32 %65, i32 3
  %67 = bitcast <4 x i32> %66 to <8 x i16>
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 5, i32 6, i32 7>
  %69 = shufflevector <8 x i16> %68, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 6, i32 5, i32 7>
  %70 = bitcast <8 x i16> %69 to <4 x i32>
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %72 = bitcast <2 x i32> %71 to <4 x i16>
  %73 = shufflevector <4 x i32> %70, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %74 = bitcast <2 x i32> %73 to <4 x i16>
  %75 = zext <4 x i16> %72 to <4 x i32>
  %76 = and <4 x i32> %75, <i32 32767, i32 32767, i32 32767, i32 32767>
  %77 = icmp ugt <4 x i32> %76, <i32 1023, i32 1023, i32 1023, i32 1023>
  %78 = shl nuw <4 x i32> %75, <i32 16, i32 16, i32 16, i32 16>
  %79 = and <4 x i32> %78, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %80 = shl nuw nsw <4 x i32> %76, <i32 13, i32 13, i32 13, i32 13>
  %81 = or <4 x i32> %79, %80
  %82 = add nuw nsw <4 x i32> %81, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %83 = select <4 x i1> %77, <4 x i32> %82, <4 x i32> zeroinitializer
  %84 = zext <4 x i16> %74 to <4 x i32>
  %85 = and <4 x i32> %84, <i32 32767, i32 32767, i32 32767, i32 32767>
  %86 = icmp ugt <4 x i32> %85, <i32 1023, i32 1023, i32 1023, i32 1023>
  %87 = shl nuw <4 x i32> %84, <i32 16, i32 16, i32 16, i32 16>
  %88 = and <4 x i32> %87, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %89 = shl nuw nsw <4 x i32> %85, <i32 13, i32 13, i32 13, i32 13>
  %90 = or <4 x i32> %88, %89
  %91 = add nuw nsw <4 x i32> %90, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %92 = select <4 x i1> %86, <4 x i32> %91, <4 x i32> zeroinitializer
  %93 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %94 = extractvalue { i8*, i8** } %93, 0
  %95 = extractvalue { i8*, i8** } %93, 1
  %96 = bitcast i8* %94 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %97 = bitcast <4 x i32> %83 to <4 x float>
  %98 = bitcast <4 x i32> %92 to <4 x float>
  tail call void %96(i64 %0, i8** %95, i64 %2, i64 %3, <4 x float> %97, <4 x float> %98, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8load_f32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 1
  switch i64 %0, label %29 [
    i64 0, label %38
    i64 1, label %48
  ], !prof !262

29:                                               ; preds = %12
  %30 = getelementptr inbounds float, float* %26, i64 4
  %31 = bitcast float* %30 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 1
  %33 = icmp ugt i64 %0, 2
  br i1 %33, label %34, label %48

34:                                               ; preds = %29
  %35 = getelementptr inbounds float, float* %26, i64 8
  %36 = bitcast float* %35 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 1
  br label %48

38:                                               ; preds = %12
  %39 = getelementptr inbounds float, float* %26, i64 4
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 1
  %42 = getelementptr inbounds float, float* %26, i64 8
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 1
  %45 = getelementptr inbounds float, float* %26, i64 12
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 1
  br label %48

48:                                               ; preds = %12, %29, %34, %38
  %49 = phi <4 x float> [ zeroinitializer, %34 ], [ zeroinitializer, %29 ], [ %47, %38 ], [ zeroinitializer, %12 ]
  %50 = phi <4 x float> [ %37, %34 ], [ zeroinitializer, %29 ], [ %44, %38 ], [ zeroinitializer, %12 ]
  %51 = phi <4 x float> [ %32, %34 ], [ %32, %29 ], [ %41, %38 ], [ zeroinitializer, %12 ]
  %52 = shufflevector <4 x float> %28, <4 x float> %51, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %53 = shufflevector <4 x float> %50, <4 x float> %49, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %54 = shufflevector <4 x float> %28, <4 x float> %51, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %55 = shufflevector <4 x float> %50, <4 x float> %49, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %56 = shufflevector <4 x float> %52, <4 x float> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = shufflevector <4 x float> %53, <4 x float> %52, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %58 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = shufflevector <4 x float> %55, <4 x float> %54, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %56, <4 x float> %57, <4 x float> %58, <4 x float> %59, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12load_f32_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 1
  switch i64 %0, label %29 [
    i64 0, label %38
    i64 1, label %48
  ], !prof !262

29:                                               ; preds = %12
  %30 = getelementptr inbounds float, float* %26, i64 4
  %31 = bitcast float* %30 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 1
  %33 = icmp ugt i64 %0, 2
  br i1 %33, label %34, label %48

34:                                               ; preds = %29
  %35 = getelementptr inbounds float, float* %26, i64 8
  %36 = bitcast float* %35 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 1
  br label %48

38:                                               ; preds = %12
  %39 = getelementptr inbounds float, float* %26, i64 4
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 1
  %42 = getelementptr inbounds float, float* %26, i64 8
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 1
  %45 = getelementptr inbounds float, float* %26, i64 12
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 1
  br label %48

48:                                               ; preds = %12, %29, %34, %38
  %49 = phi <4 x float> [ zeroinitializer, %34 ], [ zeroinitializer, %29 ], [ %47, %38 ], [ zeroinitializer, %12 ]
  %50 = phi <4 x float> [ %37, %34 ], [ zeroinitializer, %29 ], [ %44, %38 ], [ zeroinitializer, %12 ]
  %51 = phi <4 x float> [ %32, %34 ], [ %32, %29 ], [ %41, %38 ], [ zeroinitializer, %12 ]
  %52 = shufflevector <4 x float> %28, <4 x float> %51, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %53 = shufflevector <4 x float> %50, <4 x float> %49, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %54 = shufflevector <4 x float> %28, <4 x float> %51, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %55 = shufflevector <4 x float> %50, <4 x float> %49, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %56 = shufflevector <4 x float> %52, <4 x float> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = shufflevector <4 x float> %53, <4 x float> %52, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %58 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %59 = shufflevector <4 x float> %55, <4 x float> %54, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %56, <4 x float> %57, <4 x float> %58, <4 x float> %59) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9store_f32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  %27 = shufflevector <4 x float> %4, <4 x float> %5, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %28 = shufflevector <4 x float> %6, <4 x float> %7, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %29 = shufflevector <4 x float> %4, <4 x float> %5, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %30 = shufflevector <4 x float> %6, <4 x float> %7, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %31 = shufflevector <4 x float> %27, <4 x float> %28, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %32 = shufflevector <4 x float> %28, <4 x float> %27, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %33 = shufflevector <4 x float> %29, <4 x float> %30, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %34 = bitcast float* %26 to <4 x float>*
  store <4 x float> %31, <4 x float>* %34, align 1
  switch i64 %0, label %35 [
    i64 0, label %42
    i64 1, label %50
  ], !prof !262

35:                                               ; preds = %12
  %36 = getelementptr inbounds float, float* %26, i64 4
  %37 = bitcast float* %36 to <4 x float>*
  store <4 x float> %32, <4 x float>* %37, align 1
  %38 = icmp ugt i64 %0, 2
  br i1 %38, label %39, label %50

39:                                               ; preds = %35
  %40 = getelementptr inbounds float, float* %26, i64 8
  %41 = bitcast float* %40 to <4 x float>*
  store <4 x float> %33, <4 x float>* %41, align 1
  br label %50

42:                                               ; preds = %12
  %43 = shufflevector <4 x float> %30, <4 x float> %29, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %44 = getelementptr inbounds float, float* %26, i64 4
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %32, <4 x float>* %45, align 1
  %46 = getelementptr inbounds float, float* %26, i64 8
  %47 = bitcast float* %46 to <4 x float>*
  store <4 x float> %33, <4 x float>* %47, align 1
  %48 = getelementptr inbounds float, float* %26, i64 12
  %49 = bitcast float* %48 to <4 x float>*
  store <4 x float> %43, <4 x float>* %49, align 1
  br label %50

50:                                               ; preds = %12, %35, %39, %42
  %51 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %52 = extractvalue { i8*, i8** } %51, 0
  %53 = extractvalue { i8*, i8** } %51, 1
  %54 = bitcast i8* %52 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %54(i64 %0, i8** %53, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10gather_f32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to float**
  %37 = load float*, float** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = shl <4 x i32> %46, <i32 2, i32 2, i32 2, i32 2>
  %48 = extractelement <4 x i32> %47, i32 0
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds float, float* %37, i64 %49
  %51 = load float, float* %50, align 4
  %52 = insertelement <4 x float> undef, float %51, i32 0
  %53 = extractelement <4 x i32> %47, i32 1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds float, float* %37, i64 %54
  %56 = load float, float* %55, align 4
  %57 = insertelement <4 x float> %52, float %56, i32 1
  %58 = extractelement <4 x i32> %47, i32 2
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds float, float* %37, i64 %59
  %61 = load float, float* %60, align 4
  %62 = insertelement <4 x float> %57, float %61, i32 2
  %63 = extractelement <4 x i32> %47, i32 3
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds float, float* %37, i64 %64
  %66 = load float, float* %65, align 4
  %67 = insertelement <4 x float> %62, float %66, i32 3
  %68 = or <4 x i32> %47, <i32 1, i32 1, i32 1, i32 1>
  %69 = extractelement <4 x i32> %68, i32 0
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds float, float* %37, i64 %70
  %72 = load float, float* %71, align 4
  %73 = insertelement <4 x float> undef, float %72, i32 0
  %74 = extractelement <4 x i32> %68, i32 1
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %37, i64 %75
  %77 = load float, float* %76, align 4
  %78 = insertelement <4 x float> %73, float %77, i32 1
  %79 = extractelement <4 x i32> %68, i32 2
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds float, float* %37, i64 %80
  %82 = load float, float* %81, align 4
  %83 = insertelement <4 x float> %78, float %82, i32 2
  %84 = extractelement <4 x i32> %68, i32 3
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %37, i64 %85
  %87 = load float, float* %86, align 4
  %88 = insertelement <4 x float> %83, float %87, i32 3
  %89 = or <4 x i32> %47, <i32 2, i32 2, i32 2, i32 2>
  %90 = extractelement <4 x i32> %89, i32 0
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds float, float* %37, i64 %91
  %93 = load float, float* %92, align 4
  %94 = insertelement <4 x float> undef, float %93, i32 0
  %95 = extractelement <4 x i32> %89, i32 1
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %37, i64 %96
  %98 = load float, float* %97, align 4
  %99 = insertelement <4 x float> %94, float %98, i32 1
  %100 = extractelement <4 x i32> %89, i32 2
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %37, i64 %101
  %103 = load float, float* %102, align 4
  %104 = insertelement <4 x float> %99, float %103, i32 2
  %105 = extractelement <4 x i32> %89, i32 3
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %37, i64 %106
  %108 = load float, float* %107, align 4
  %109 = insertelement <4 x float> %104, float %108, i32 3
  %110 = or <4 x i32> %47, <i32 3, i32 3, i32 3, i32 3>
  %111 = extractelement <4 x i32> %110, i32 0
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds float, float* %37, i64 %112
  %114 = load float, float* %113, align 4
  %115 = insertelement <4 x float> undef, float %114, i32 0
  %116 = extractelement <4 x i32> %110, i32 1
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %37, i64 %117
  %119 = load float, float* %118, align 4
  %120 = insertelement <4 x float> %115, float %119, i32 1
  %121 = extractelement <4 x i32> %110, i32 2
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %37, i64 %122
  %124 = load float, float* %123, align 4
  %125 = insertelement <4 x float> %120, float %124, i32 2
  %126 = extractelement <4 x i32> %110, i32 3
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %37, i64 %127
  %129 = load float, float* %128, align 4
  %130 = insertelement <4 x float> %125, float %129, i32 3
  %131 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %132 = extractvalue { i8*, i8** } %131, 0
  %133 = extractvalue { i8*, i8** } %131, 1
  %134 = bitcast i8* %132 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %134(i64 %0, i8** %133, i64 %2, i64 %3, <4 x float> %67, <4 x float> %88, <4 x float> %109, <4 x float> %130, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10load_rgf32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 1
  %17 = shl i64 %3, 1
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  %27 = icmp eq i64 %0, 0
  br i1 %27, label %47, label %28, !prof !261

28:                                               ; preds = %12
  %29 = bitcast float* %26 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 1
  %31 = shufflevector <2 x float> %30, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %32 = shufflevector <4 x float> %31, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %33 = icmp eq i64 %0, 1
  br i1 %33, label %53, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds float, float* %26, i64 2
  %36 = bitcast float* %35 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 1
  %38 = shufflevector <2 x float> %37, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = shufflevector <4 x float> %32, <4 x float> %38, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %40 = icmp ugt i64 %0, 2
  br i1 %40, label %41, label %53

41:                                               ; preds = %34
  %42 = getelementptr inbounds float, float* %26, i64 4
  %43 = bitcast float* %42 to <2 x float>*
  %44 = load <2 x float>, <2 x float>* %43, align 1
  %45 = shufflevector <2 x float> %44, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %46 = shufflevector <4 x float> %45, <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %53

47:                                               ; preds = %12
  %48 = bitcast float* %26 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 1
  %50 = getelementptr inbounds float, float* %26, i64 4
  %51 = bitcast float* %50 to <4 x float>*
  %52 = load <4 x float>, <4 x float>* %51, align 1
  br label %53

53:                                               ; preds = %28, %34, %41, %47
  %54 = phi <4 x float> [ %39, %41 ], [ %39, %34 ], [ %49, %47 ], [ %32, %28 ]
  %55 = phi <4 x float> [ %46, %41 ], [ zeroinitializer, %34 ], [ %52, %47 ], [ zeroinitializer, %28 ]
  %56 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %57 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <4 x float> %56, <4 x float> %57, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11store_rgf32EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 1
  %17 = shl i64 %3, 1
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  %27 = shufflevector <4 x float> %4, <4 x float> %5, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %28 = shufflevector <4 x float> %4, <4 x float> %5, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %29 = icmp eq i64 %0, 0
  br i1 %29, label %43, label %30, !prof !261

30:                                               ; preds = %12
  %31 = shufflevector <4 x float> %27, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %32 = bitcast float* %26 to <2 x float>*
  store <2 x float> %31, <2 x float>* %32, align 1
  %33 = icmp eq i64 %0, 1
  br i1 %33, label %47, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds float, float* %26, i64 2
  %36 = shufflevector <4 x float> %27, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %37 = bitcast float* %35 to <2 x float>*
  store <2 x float> %36, <2 x float>* %37, align 1
  %38 = icmp ugt i64 %0, 2
  br i1 %38, label %39, label %47

39:                                               ; preds = %34
  %40 = getelementptr inbounds float, float* %26, i64 4
  %41 = shufflevector <4 x float> %28, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %42 = bitcast float* %40 to <2 x float>*
  store <2 x float> %41, <2 x float>* %42, align 1
  br label %47

43:                                               ; preds = %12
  %44 = bitcast float* %26 to <4 x float>*
  store <4 x float> %27, <4 x float>* %44, align 1
  %45 = getelementptr inbounds float, float* %26, i64 4
  %46 = bitcast float* %45 to <4 x float>*
  store <4 x float> %28, <4 x float>* %46, align 1
  br label %47

47:                                               ; preds = %30, %34, %39, %43
  %48 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %49 = extractvalue { i8*, i8** } %48, 0
  %50 = extractvalue { i8*, i8** } %48, 1
  %51 = bitcast i8* %49 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %51(i64 %0, i8** %50, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9load_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 255, i32 255, i32 255, i32 255>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %48 = lshr <4 x i32> %44, <i32 8, i32 8, i32 8, i32 8>
  %49 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %52 = lshr <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %53 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %54 = sitofp <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %54, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %56 = lshr <4 x i32> %44, <i32 24, i32 24, i32 24, i32 24>
  %57 = sitofp <4 x i32> %56 to <4 x float>
  %58 = fmul <4 x float> %57, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %47, <4 x float> %51, <4 x float> %55, <4 x float> %58, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13load_8888_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 255, i32 255, i32 255, i32 255>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %48 = lshr <4 x i32> %44, <i32 8, i32 8, i32 8, i32 8>
  %49 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %52 = lshr <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %53 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %54 = sitofp <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %54, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %56 = lshr <4 x i32> %44, <i32 24, i32 24, i32 24, i32 24>
  %57 = sitofp <4 x i32> %56 to <4 x float>
  %58 = fmul <4 x float> %57, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %47, <4 x float> %51, <4 x float> %55, <4 x float> %58) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10store_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %30 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %31 = fmul <4 x float> %30, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %31) #18
  %33 = shl <4 x i32> %32, <i32 8, i32 8, i32 8, i32 8>
  %34 = or <4 x i32> %33, %28
  %35 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %36 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %35, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %37 = fmul <4 x float> %36, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %37) #18
  %39 = shl <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %40 = or <4 x i32> %34, %39
  %41 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %42 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %41, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %43 = fmul <4 x float> %42, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %44 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %43) #18
  %45 = shl <4 x i32> %44, <i32 24, i32 24, i32 24, i32 24>
  %46 = or <4 x i32> %40, %45
  %47 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %47) #18
  switch i64 %0, label %58 [
    i64 0, label %56
    i64 1, label %54
    i64 2, label %51
    i64 3, label %48
  ], !prof !260

48:                                               ; preds = %12
  %49 = extractelement <4 x i32> %46, i32 2
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = shufflevector <4 x i32> %46, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %53, <2 x i32>* %52, align 4
  br label %59

54:                                               ; preds = %12
  %55 = extractelement <4 x i32> %46, i32 0
  store i32 %55, i32* %24, align 4
  br label %59

56:                                               ; preds = %12
  %57 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %57, align 4
  br label %59

58:                                               ; preds = %12
  unreachable

59:                                               ; preds = %51, %54, %56
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11gather_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %37, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = insertelement <4 x i32> undef, i32 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %37, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> %51, i32 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %37, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = insertelement <4 x i32> %56, i32 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %37, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = insertelement <4 x i32> %61, i32 %65, i32 3
  %67 = and <4 x i32> %66, <i32 255, i32 255, i32 255, i32 255>
  %68 = sitofp <4 x i32> %67 to <4 x float>
  %69 = fmul <4 x float> %68, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %70 = lshr <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %71 = and <4 x i32> %70, <i32 255, i32 255, i32 255, i32 255>
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fmul <4 x float> %72, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %74 = lshr <4 x i32> %66, <i32 16, i32 16, i32 16, i32 16>
  %75 = and <4 x i32> %74, <i32 255, i32 255, i32 255, i32 255>
  %76 = sitofp <4 x i32> %75 to <4 x float>
  %77 = fmul <4 x float> %76, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %78 = lshr <4 x i32> %66, <i32 24, i32 24, i32 24, i32 24>
  %79 = sitofp <4 x i32> %78 to <4 x float>
  %80 = fmul <4 x float> %79, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %81 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %82 = extractvalue { i8*, i8** } %81, 0
  %83 = extractvalue { i8*, i8** } %81, 1
  %84 = bitcast i8* %82 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %84(i64 %0, i8** %83, i64 %2, i64 %3, <4 x float> %69, <4 x float> %73, <4 x float> %77, <4 x float> %80, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9load_rg88EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 255, i32 255, i32 255, i32 255>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %49 = lshr <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %52 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %53 = extractvalue { i8*, i8** } %52, 0
  %54 = extractvalue { i8*, i8** } %52, 1
  %55 = bitcast i8* %53 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %55(i64 %0, i8** %54, i64 %2, i64 %3, <4 x float> %48, <4 x float> %51, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13load_rg88_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 255, i32 255, i32 255, i32 255>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %49 = lshr <4 x i32> %45, <i32 8, i32 8, i32 8, i32 8>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %52 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %53 = extractvalue { i8*, i8** } %52, 0
  %54 = extractvalue { i8*, i8** } %52, 1
  %55 = bitcast i8* %53 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %55(i64 %0, i8** %54, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %48, <4 x float> %51, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10store_rg88EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %30 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %31 = fmul <4 x float> %30, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %31) #18
  %33 = shl <4 x i32> %32, <i32 8, i32 8, i32 8, i32 8>
  %34 = or <4 x i32> %33, %28
  %35 = shl <4 x i32> %34, <i32 16, i32 16, i32 16, i32 16>
  %36 = ashr exact <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %37 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %36, <4 x i32> undef) #18
  %38 = bitcast <8 x i16> %37 to <2 x double>
  %39 = extractelement <2 x double> %38, i32 0
  %40 = bitcast double %39 to <4 x i16>
  %41 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %41) #18
  switch i64 %0, label %52 [
    i64 0, label %50
    i64 1, label %48
    i64 2, label %45
    i64 3, label %42
  ], !prof !260

42:                                               ; preds = %12
  %43 = extractelement <4 x i16> %40, i32 2
  %44 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %43, i16* %44, align 2
  br label %45

45:                                               ; preds = %42, %12
  %46 = bitcast i16* %24 to <2 x i16>*
  %47 = shufflevector <4 x i16> %40, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %47, <2 x i16>* %46, align 2
  br label %53

48:                                               ; preds = %12
  %49 = extractelement <4 x i16> %40, i32 0
  store i16 %49, i16* %24, align 2
  br label %53

50:                                               ; preds = %12
  %51 = bitcast i16* %24 to double*
  store double %39, double* %51, align 2
  br label %53

52:                                               ; preds = %12
  unreachable

53:                                               ; preds = %45, %48, %50
  %54 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %55 = extractvalue { i8*, i8** } %54, 0
  %56 = extractvalue { i8*, i8** } %54, 1
  %57 = bitcast i8* %55 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %57(i64 %0, i8** %56, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11gather_rg88EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <4 x i16> undef, i16 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <4 x i16> %51, i16 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <4 x i16> %56, i16 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <4 x i16> %61, i16 %65, i32 3
  %67 = zext <4 x i16> %66 to <4 x i32>
  %68 = and <4 x i32> %67, <i32 255, i32 255, i32 255, i32 255>
  %69 = sitofp <4 x i32> %68 to <4 x float>
  %70 = fmul <4 x float> %69, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %71 = lshr <4 x i32> %67, <i32 8, i32 8, i32 8, i32 8>
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fmul <4 x float> %72, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %74 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %75 = extractvalue { i8*, i8** } %74, 0
  %76 = extractvalue { i8*, i8** } %74, 1
  %77 = bitcast i8* %75 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %77(i64 %0, i8** %76, i64 %2, i64 %3, <4 x float> %70, <4 x float> %73, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8load_a16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = uitofp <4 x i16> %44 to <4 x float>
  %46 = fmul <4 x float> %45, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %47 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %48 = extractvalue { i8*, i8** } %47, 0
  %49 = extractvalue { i8*, i8** } %47, 1
  %50 = bitcast i8* %48 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %50(i64 %0, i8** %49, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %46, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12load_a16_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = uitofp <4 x i16> %44 to <4 x float>
  %46 = fmul <4 x float> %45, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %47 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %48 = extractvalue { i8*, i8** } %47, 0
  %49 = extractvalue { i8*, i8** } %47, 1
  %50 = bitcast i8* %48 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %50(i64 %0, i8** %49, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %46) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9store_a16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = shl <4 x i32> %28, <i32 16, i32 16, i32 16, i32 16>
  %30 = ashr exact <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %30, <4 x i32> undef) #18
  %32 = bitcast <8 x i16> %31 to <2 x double>
  %33 = extractelement <2 x double> %32, i32 0
  %34 = bitcast double %33 to <4 x i16>
  %35 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %35) #18
  switch i64 %0, label %46 [
    i64 0, label %44
    i64 1, label %42
    i64 2, label %39
    i64 3, label %36
  ], !prof !260

36:                                               ; preds = %12
  %37 = extractelement <4 x i16> %34, i32 2
  %38 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %37, i16* %38, align 2
  br label %39

39:                                               ; preds = %36, %12
  %40 = bitcast i16* %24 to <2 x i16>*
  %41 = shufflevector <4 x i16> %34, <4 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %41, <2 x i16>* %40, align 2
  br label %47

42:                                               ; preds = %12
  %43 = extractelement <4 x i16> %34, i32 0
  store i16 %43, i16* %24, align 2
  br label %47

44:                                               ; preds = %12
  %45 = bitcast i16* %24 to double*
  store double %33, double* %45, align 2
  br label %47

46:                                               ; preds = %12
  unreachable

47:                                               ; preds = %39, %42, %44
  %48 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %49 = extractvalue { i8*, i8** } %48, 0
  %50 = extractvalue { i8*, i8** } %48, 1
  %51 = bitcast i8* %49 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %51(i64 %0, i8** %50, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10gather_a16EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <4 x i16> undef, i16 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <4 x i16> %51, i16 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <4 x i16> %56, i16 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <4 x i16> %61, i16 %65, i32 3
  %67 = uitofp <4 x i16> %66 to <4 x float>
  %68 = fmul <4 x float> %67, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %69 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %70 = extractvalue { i8*, i8** } %69, 0
  %71 = extractvalue { i8*, i8** } %69, 1
  %72 = bitcast i8* %70 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %72(i64 %0, i8** %71, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %68, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11load_rg1616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 65535, i32 65535, i32 65535, i32 65535>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %48 = lshr <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %49 = sitofp <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %49, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %51 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %52 = extractvalue { i8*, i8** } %51, 0
  %53 = extractvalue { i8*, i8** } %51, 1
  %54 = bitcast i8* %52 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %54(i64 %0, i8** %53, i64 %2, i64 %3, <4 x float> %47, <4 x float> %50, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L15load_rg1616_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 65535, i32 65535, i32 65535, i32 65535>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %48 = lshr <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %49 = sitofp <4 x i32> %48 to <4 x float>
  %50 = fmul <4 x float> %49, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %51 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %52 = extractvalue { i8*, i8** } %51, 0
  %53 = extractvalue { i8*, i8** } %51, 1
  %54 = bitcast i8* %52 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %54(i64 %0, i8** %53, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %47, <4 x float> %50, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12store_rg1616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %30 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %31 = fmul <4 x float> %30, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %31) #18
  %33 = shl <4 x i32> %32, <i32 16, i32 16, i32 16, i32 16>
  %34 = or <4 x i32> %33, %28
  %35 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %35) #18
  switch i64 %0, label %46 [
    i64 0, label %44
    i64 1, label %42
    i64 2, label %39
    i64 3, label %36
  ], !prof !260

36:                                               ; preds = %12
  %37 = extractelement <4 x i32> %34, i32 2
  %38 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %37, i32* %38, align 4
  br label %39

39:                                               ; preds = %36, %12
  %40 = bitcast i32* %24 to <2 x i32>*
  %41 = shufflevector <4 x i32> %34, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %41, <2 x i32>* %40, align 4
  br label %47

42:                                               ; preds = %12
  %43 = extractelement <4 x i32> %34, i32 0
  store i32 %43, i32* %24, align 4
  br label %47

44:                                               ; preds = %12
  %45 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %45, align 4
  br label %47

46:                                               ; preds = %12
  unreachable

47:                                               ; preds = %39, %42, %44
  %48 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %49 = extractvalue { i8*, i8** } %48, 0
  %50 = extractvalue { i8*, i8** } %48, 1
  %51 = bitcast i8* %49 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %51(i64 %0, i8** %50, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13gather_rg1616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %37, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = insertelement <4 x i32> undef, i32 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %37, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> %51, i32 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %37, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = insertelement <4 x i32> %56, i32 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %37, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = insertelement <4 x i32> %61, i32 %65, i32 3
  %67 = and <4 x i32> %66, <i32 65535, i32 65535, i32 65535, i32 65535>
  %68 = sitofp <4 x i32> %67 to <4 x float>
  %69 = fmul <4 x float> %68, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %70 = lshr <4 x i32> %66, <i32 16, i32 16, i32 16, i32 16>
  %71 = sitofp <4 x i32> %70 to <4 x float>
  %72 = fmul <4 x float> %71, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %73 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %74 = extractvalue { i8*, i8** } %73, 0
  %75 = extractvalue { i8*, i8** } %73, 1
  %76 = bitcast i8* %74 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %76(i64 %0, i8** %75, i64 %2, i64 %3, <4 x float> %69, <4 x float> %72, <4 x float> zeroinitializer, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13load_16161616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i64, i64* %24, i64 2
  %28 = load i64, i64* %27, align 8
  %29 = insertelement <4 x i64> <i64 0, i64 0, i64 undef, i64 0>, i64 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i64> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i64* %24 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8
  %34 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %34, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i64, i64* %24, align 8
  %38 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i64* %24 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 8
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i64> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i64> %44, <i64 65535, i64 65535, i64 65535, i64 65535>
  %46 = uitofp <4 x i64> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %48 = lshr <4 x i64> %44, <i64 16, i64 16, i64 16, i64 16>
  %49 = and <4 x i64> %48, <i64 65535, i64 65535, i64 65535, i64 65535>
  %50 = uitofp <4 x i64> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %52 = lshr <4 x i64> %44, <i64 32, i64 32, i64 32, i64 32>
  %53 = and <4 x i64> %52, <i64 65535, i64 65535, i64 65535, i64 65535>
  %54 = uitofp <4 x i64> %53 to <4 x float>
  %55 = fmul <4 x float> %54, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %56 = lshr <4 x i64> %44, <i64 48, i64 48, i64 48, i64 48>
  %57 = uitofp <4 x i64> %56 to <4 x float>
  %58 = fmul <4 x float> %57, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %47, <4 x float> %51, <4 x float> %55, <4 x float> %58, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17load_16161616_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i64, i64* %24, i64 2
  %28 = load i64, i64* %27, align 8
  %29 = insertelement <4 x i64> <i64 0, i64 0, i64 undef, i64 0>, i64 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i64> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i64* %24 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 8
  %34 = shufflevector <2 x i64> %33, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i64> %34, <4 x i64> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i64, i64* %24, align 8
  %38 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i64* %24 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 8
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i64> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i64> %44, <i64 65535, i64 65535, i64 65535, i64 65535>
  %46 = uitofp <4 x i64> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %48 = lshr <4 x i64> %44, <i64 16, i64 16, i64 16, i64 16>
  %49 = and <4 x i64> %48, <i64 65535, i64 65535, i64 65535, i64 65535>
  %50 = uitofp <4 x i64> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %52 = lshr <4 x i64> %44, <i64 32, i64 32, i64 32, i64 32>
  %53 = and <4 x i64> %52, <i64 65535, i64 65535, i64 65535, i64 65535>
  %54 = uitofp <4 x i64> %53 to <4 x float>
  %55 = fmul <4 x float> %54, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %56 = lshr <4 x i64> %44, <i64 48, i64 48, i64 48, i64 48>
  %57 = uitofp <4 x i64> %56 to <4 x float>
  %58 = fmul <4 x float> %57, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %47, <4 x float> %51, <4 x float> %55, <4 x float> %58) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L14store_16161616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to i16**
  %19 = load i16*, i16** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds i16, i16* %19, i64 %24
  %26 = getelementptr inbounds i16, i16* %25, i64 %16
  %27 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %28 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %27, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %29 = fmul <4 x float> %28, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %30 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %29) #18
  %31 = shl <4 x i32> %30, <i32 16, i32 16, i32 16, i32 16>
  %32 = ashr exact <4 x i32> %31, <i32 16, i32 16, i32 16, i32 16>
  %33 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %32, <4 x i32> undef) #18
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %36 = fmul <4 x float> %35, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %37 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %36) #18
  %38 = shl <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %39 = ashr exact <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %40 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %39, <4 x i32> undef) #18
  %41 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %42 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %41, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %43 = fmul <4 x float> %42, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %44 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %43) #18
  %45 = shl <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %46 = ashr exact <4 x i32> %45, <i32 16, i32 16, i32 16, i32 16>
  %47 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %46, <4 x i32> undef) #18
  %48 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %49 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %48, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %50 = fmul <4 x float> %49, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %51 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %50) #18
  %52 = shl <4 x i32> %51, <i32 16, i32 16, i32 16, i32 16>
  %53 = ashr exact <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %54 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %53, <4 x i32> undef) #18
  %55 = shufflevector <8 x i16> %33, <8 x i16> %40, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = shufflevector <8 x i16> %47, <8 x i16> %54, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = icmp eq i64 %0, 0
  br i1 %57, label %77, label %58, !prof !261

58:                                               ; preds = %12
  %59 = bitcast i16* %26 to double*
  %60 = bitcast <8 x i16> %55 to <4 x i32>
  %61 = bitcast <8 x i16> %56 to <4 x i32>
  %62 = shufflevector <4 x i32> %60, <4 x i32> %61, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %63 = bitcast <4 x i32> %62 to <2 x double>
  %64 = extractelement <2 x double> %63, i32 0
  store double %64, double* %59, align 1
  %65 = icmp eq i64 %0, 1
  br i1 %65, label %85, label %66

66:                                               ; preds = %58
  %67 = getelementptr inbounds i16, i16* %26, i64 4
  %68 = bitcast i16* %67 to double*
  %69 = extractelement <2 x double> %63, i32 1
  store double %69, double* %68, align 1
  %70 = icmp ugt i64 %0, 2
  br i1 %70, label %71, label %85

71:                                               ; preds = %66
  %72 = getelementptr inbounds i16, i16* %26, i64 8
  %73 = bitcast i16* %72 to double*
  %74 = shufflevector <4 x i32> %60, <4 x i32> %61, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %75 = bitcast <4 x i32> %74 to <2 x double>
  %76 = extractelement <2 x double> %75, i32 0
  store double %76, double* %73, align 1
  br label %85

77:                                               ; preds = %12
  %78 = bitcast <8 x i16> %55 to <4 x i32>
  %79 = bitcast <8 x i16> %56 to <4 x i32>
  %80 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %81 = bitcast i16* %26 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %81, align 1
  %82 = getelementptr inbounds i16, i16* %26, i64 8
  %83 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %84 = bitcast i16* %82 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %84, align 1
  br label %85

85:                                               ; preds = %58, %66, %71, %77
  %86 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %87 = extractvalue { i8*, i8** } %86, 0
  %88 = extractvalue { i8*, i8** } %86, 1
  %89 = bitcast i8* %87 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %89(i64 %0, i8** %88, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L15gather_16161616EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i64**
  %37 = load i64*, i64** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i64, i64* %37, i64 %48
  %50 = load i64, i64* %49, align 8
  %51 = insertelement <4 x i64> undef, i64 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i64, i64* %37, i64 %53
  %55 = load i64, i64* %54, align 8
  %56 = insertelement <4 x i64> %51, i64 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i64, i64* %37, i64 %58
  %60 = load i64, i64* %59, align 8
  %61 = insertelement <4 x i64> %56, i64 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i64, i64* %37, i64 %63
  %65 = load i64, i64* %64, align 8
  %66 = insertelement <4 x i64> %61, i64 %65, i32 3
  %67 = and <4 x i64> %66, <i64 65535, i64 65535, i64 65535, i64 65535>
  %68 = uitofp <4 x i64> %67 to <4 x float>
  %69 = fmul <4 x float> %68, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %70 = lshr <4 x i64> %66, <i64 16, i64 16, i64 16, i64 16>
  %71 = and <4 x i64> %70, <i64 65535, i64 65535, i64 65535, i64 65535>
  %72 = uitofp <4 x i64> %71 to <4 x float>
  %73 = fmul <4 x float> %72, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %74 = lshr <4 x i64> %66, <i64 32, i64 32, i64 32, i64 32>
  %75 = and <4 x i64> %74, <i64 65535, i64 65535, i64 65535, i64 65535>
  %76 = uitofp <4 x i64> %75 to <4 x float>
  %77 = fmul <4 x float> %76, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %78 = lshr <4 x i64> %66, <i64 48, i64 48, i64 48, i64 48>
  %79 = uitofp <4 x i64> %78 to <4 x float>
  %80 = fmul <4 x float> %79, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %81 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %82 = extractvalue { i8*, i8** } %81, 0
  %83 = extractvalue { i8*, i8** } %81, 1
  %84 = bitcast i8* %82 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %84(i64 %0, i8** %83, i64 %2, i64 %3, <4 x float> %69, <4 x float> %73, <4 x float> %77, <4 x float> %80, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12load_1010102EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 1023, i32 1023, i32 1023, i32 1023>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %48 = lshr <4 x i32> %44, <i32 10, i32 10, i32 10, i32 10>
  %49 = and <4 x i32> %48, <i32 1023, i32 1023, i32 1023, i32 1023>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %52 = lshr <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %53 = and <4 x i32> %52, <i32 1023, i32 1023, i32 1023, i32 1023>
  %54 = sitofp <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %54, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %56 = lshr <4 x i32> %44, <i32 30, i32 30, i32 30, i32 30>
  %57 = sitofp <4 x i32> %56 to <4 x float>
  %58 = fmul <4 x float> %57, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %47, <4 x float> %51, <4 x float> %55, <4 x float> %58, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L16load_1010102_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 1023, i32 1023, i32 1023, i32 1023>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = fmul <4 x float> %46, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %48 = lshr <4 x i32> %44, <i32 10, i32 10, i32 10, i32 10>
  %49 = and <4 x i32> %48, <i32 1023, i32 1023, i32 1023, i32 1023>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %52 = lshr <4 x i32> %44, <i32 20, i32 20, i32 20, i32 20>
  %53 = and <4 x i32> %52, <i32 1023, i32 1023, i32 1023, i32 1023>
  %54 = sitofp <4 x i32> %53 to <4 x float>
  %55 = fmul <4 x float> %54, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %56 = lshr <4 x i32> %44, <i32 30, i32 30, i32 30, i32 30>
  %57 = sitofp <4 x i32> %56 to <4 x float>
  %58 = fmul <4 x float> %57, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %47, <4 x float> %51, <4 x float> %55, <4 x float> %58) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13store_1010102EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %27 = fmul <4 x float> %26, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %28 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %27) #18
  %29 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %30 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %31 = fmul <4 x float> %30, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %32 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %31) #18
  %33 = shl <4 x i32> %32, <i32 10, i32 10, i32 10, i32 10>
  %34 = or <4 x i32> %33, %28
  %35 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %36 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %35, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %37 = fmul <4 x float> %36, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %38 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %37) #18
  %39 = shl <4 x i32> %38, <i32 20, i32 20, i32 20, i32 20>
  %40 = or <4 x i32> %34, %39
  %41 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %42 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %41, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %43 = fmul <4 x float> %42, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %44 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %43) #18
  %45 = shl <4 x i32> %44, <i32 30, i32 30, i32 30, i32 30>
  %46 = or <4 x i32> %40, %45
  %47 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %47) #18
  switch i64 %0, label %58 [
    i64 0, label %56
    i64 1, label %54
    i64 2, label %51
    i64 3, label %48
  ], !prof !260

48:                                               ; preds = %12
  %49 = extractelement <4 x i32> %46, i32 2
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = shufflevector <4 x i32> %46, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %53, <2 x i32>* %52, align 4
  br label %59

54:                                               ; preds = %12
  %55 = extractelement <4 x i32> %46, i32 0
  store i32 %55, i32* %24, align 4
  br label %59

56:                                               ; preds = %12
  %57 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %46, <4 x i32>* %57, align 4
  br label %59

58:                                               ; preds = %12
  unreachable

59:                                               ; preds = %51, %54, %56
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L14gather_1010102EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast <4 x float> %20 to <4 x i32>
  %22 = add <4 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %25 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %23) #18
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = bitcast <4 x float> %30 to <4 x i32>
  %32 = add <4 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %35 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %34, <4 x float> %33) #18
  %36 = bitcast i8* %14 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = fptosi <4 x float> %35 to <4 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = mul <4 x i32> %43, %38
  %45 = fptosi <4 x float> %25 to <4 x i32>
  %46 = add <4 x i32> %44, %45
  %47 = extractelement <4 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %37, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = insertelement <4 x i32> undef, i32 %50, i32 0
  %52 = extractelement <4 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %37, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = insertelement <4 x i32> %51, i32 %55, i32 1
  %57 = extractelement <4 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %37, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = insertelement <4 x i32> %56, i32 %60, i32 2
  %62 = extractelement <4 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %37, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = insertelement <4 x i32> %61, i32 %65, i32 3
  %67 = and <4 x i32> %66, <i32 1023, i32 1023, i32 1023, i32 1023>
  %68 = sitofp <4 x i32> %67 to <4 x float>
  %69 = fmul <4 x float> %68, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %70 = lshr <4 x i32> %66, <i32 10, i32 10, i32 10, i32 10>
  %71 = and <4 x i32> %70, <i32 1023, i32 1023, i32 1023, i32 1023>
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fmul <4 x float> %72, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %74 = lshr <4 x i32> %66, <i32 20, i32 20, i32 20, i32 20>
  %75 = and <4 x i32> %74, <i32 1023, i32 1023, i32 1023, i32 1023>
  %76 = sitofp <4 x i32> %75 to <4 x float>
  %77 = fmul <4 x float> %76, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %78 = lshr <4 x i32> %66, <i32 30, i32 30, i32 30, i32 30>
  %79 = sitofp <4 x i32> %78 to <4 x float>
  %80 = fmul <4 x float> %79, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %81 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %82 = extractvalue { i8*, i8** } %81, 0
  %83 = extractvalue { i8*, i8** } %81, 1
  %84 = bitcast i8* %82 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %84(i64 %0, i8** %83, i64 %2, i64 %3, <4 x float> %69, <4 x float> %73, <4 x float> %77, <4 x float> %80, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13alpha_to_grayEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %7, <4 x float> %7, <4 x float> %7, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17alpha_to_gray_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %11, <4 x float> %11, <4 x float> %11, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L32bt709_luminance_or_luma_to_alphaEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>
  %14 = fmul <4 x float> %5, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>
  %15 = fadd <4 x float> %13, %14
  %16 = fmul <4 x float> %6, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>
  %17 = fadd <4 x float> %15, %16
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %17, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L30bt709_luminance_or_luma_to_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>
  %14 = fmul <4 x float> %5, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>
  %15 = fadd <4 x float> %13, %14
  %16 = fmul <4 x float> %6, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>
  %17 = fadd <4 x float> %15, %16
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <4 x float> %17, <4 x float> %17, <4 x float> %17, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17bilerp_clamp_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = fadd <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %16 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %15) #18
  %17 = sitofp <4 x i32> %16 to <4 x float>
  %18 = fcmp olt <4 x float> %15, %17
  %19 = select <4 x i1> %18, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %20 = fsub <4 x float> %17, %19
  %21 = fsub <4 x float> %15, %20
  %22 = fadd <4 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %23 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %22) #18
  %24 = sitofp <4 x i32> %23 to <4 x float>
  %25 = fcmp olt <4 x float> %22, %24
  %26 = select <4 x i1> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %27 = fsub <4 x float> %24, %26
  %28 = fsub <4 x float> %22, %27
  %29 = getelementptr inbounds i8, i8* %14, i64 12
  %30 = bitcast i8* %29 to float*
  %31 = getelementptr inbounds i8, i8* %14, i64 16
  %32 = bitcast i8* %31 to float*
  %33 = bitcast i8* %14 to i32**
  %34 = getelementptr inbounds i8, i8* %14, i64 8
  %35 = bitcast i8* %34 to i32*
  %36 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %37 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %28
  %38 = fadd <4 x float> %4, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %39 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %38) #18
  %40 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %15) #18
  %41 = load float, float* %30, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = bitcast <4 x float> %43 to <4 x i32>
  %45 = add <4 x i32> %44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %39, <4 x float> %46) #18
  %48 = load float, float* %32, align 8
  %49 = insertelement <4 x float> undef, float %48, i32 0
  %50 = shufflevector <4 x float> %49, <4 x float> undef, <4 x i32> zeroinitializer
  %51 = bitcast <4 x float> %50 to <4 x i32>
  %52 = add <4 x i32> %51, <i32 -1, i32 -1, i32 -1, i32 -1>
  %53 = bitcast <4 x i32> %52 to <4 x float>
  %54 = load i32*, i32** %33, align 8
  %55 = load i32, i32* %35, align 8
  %56 = insertelement <4 x i32> undef, i32 %55, i32 0
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> zeroinitializer
  %58 = fptosi <4 x float> %47 to <4 x i32>
  %59 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %40, <4 x float> %46) #18
  %60 = fptosi <4 x float> %59 to <4 x i32>
  br label %61

61:                                               ; preds = %61, %12
  %62 = phi <4 x float> [ zeroinitializer, %12 ], [ %163, %61 ]
  %63 = phi <4 x float> [ zeroinitializer, %12 ], [ %161, %61 ]
  %64 = phi <4 x float> [ zeroinitializer, %12 ], [ %159, %61 ]
  %65 = phi <4 x float> [ zeroinitializer, %12 ], [ %157, %61 ]
  %66 = phi float [ -5.000000e-01, %12 ], [ %164, %61 ]
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> zeroinitializer
  %69 = fadd <4 x float> %68, %5
  %70 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %69) #18
  %71 = fcmp ogt float %66, 0.000000e+00
  %72 = select i1 %71, <4 x float> %28, <4 x float> %37
  %73 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %70, <4 x float> %53) #18
  %74 = fptosi <4 x float> %73 to <4 x i32>
  %75 = mul <4 x i32> %57, %74
  %76 = add <4 x i32> %75, %58
  %77 = extractelement <4 x i32> %76, i32 0
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %54, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = insertelement <4 x i32> undef, i32 %80, i32 0
  %82 = extractelement <4 x i32> %76, i32 1
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %54, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = insertelement <4 x i32> %81, i32 %85, i32 1
  %87 = extractelement <4 x i32> %76, i32 2
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i32, i32* %54, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = insertelement <4 x i32> %86, i32 %90, i32 2
  %92 = extractelement <4 x i32> %76, i32 3
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i32, i32* %54, i64 %93
  %95 = load i32, i32* %94, align 4
  %96 = insertelement <4 x i32> %91, i32 %95, i32 3
  %97 = and <4 x i32> %96, <i32 255, i32 255, i32 255, i32 255>
  %98 = sitofp <4 x i32> %97 to <4 x float>
  %99 = fmul <4 x float> %98, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %100 = lshr <4 x i32> %96, <i32 8, i32 8, i32 8, i32 8>
  %101 = and <4 x i32> %100, <i32 255, i32 255, i32 255, i32 255>
  %102 = sitofp <4 x i32> %101 to <4 x float>
  %103 = fmul <4 x float> %102, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %104 = lshr <4 x i32> %96, <i32 16, i32 16, i32 16, i32 16>
  %105 = and <4 x i32> %104, <i32 255, i32 255, i32 255, i32 255>
  %106 = sitofp <4 x i32> %105 to <4 x float>
  %107 = fmul <4 x float> %106, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %108 = lshr <4 x i32> %96, <i32 24, i32 24, i32 24, i32 24>
  %109 = sitofp <4 x i32> %108 to <4 x float>
  %110 = fmul <4 x float> %109, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %111 = fmul <4 x float> %36, %72
  %112 = fmul <4 x float> %111, %99
  %113 = fadd <4 x float> %65, %112
  %114 = fmul <4 x float> %111, %103
  %115 = fadd <4 x float> %64, %114
  %116 = fmul <4 x float> %111, %107
  %117 = fadd <4 x float> %63, %116
  %118 = fmul <4 x float> %111, %110
  %119 = fadd <4 x float> %62, %118
  %120 = add <4 x i32> %75, %60
  %121 = extractelement <4 x i32> %120, i32 0
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i32, i32* %54, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = insertelement <4 x i32> undef, i32 %124, i32 0
  %126 = extractelement <4 x i32> %120, i32 1
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %54, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = insertelement <4 x i32> %125, i32 %129, i32 1
  %131 = extractelement <4 x i32> %120, i32 2
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i32, i32* %54, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = insertelement <4 x i32> %130, i32 %134, i32 2
  %136 = extractelement <4 x i32> %120, i32 3
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds i32, i32* %54, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = insertelement <4 x i32> %135, i32 %139, i32 3
  %141 = and <4 x i32> %140, <i32 255, i32 255, i32 255, i32 255>
  %142 = sitofp <4 x i32> %141 to <4 x float>
  %143 = fmul <4 x float> %142, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %144 = lshr <4 x i32> %140, <i32 8, i32 8, i32 8, i32 8>
  %145 = and <4 x i32> %144, <i32 255, i32 255, i32 255, i32 255>
  %146 = sitofp <4 x i32> %145 to <4 x float>
  %147 = fmul <4 x float> %146, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %148 = lshr <4 x i32> %140, <i32 16, i32 16, i32 16, i32 16>
  %149 = and <4 x i32> %148, <i32 255, i32 255, i32 255, i32 255>
  %150 = sitofp <4 x i32> %149 to <4 x float>
  %151 = fmul <4 x float> %150, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %152 = lshr <4 x i32> %140, <i32 24, i32 24, i32 24, i32 24>
  %153 = sitofp <4 x i32> %152 to <4 x float>
  %154 = fmul <4 x float> %153, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %155 = fmul <4 x float> %21, %72
  %156 = fmul <4 x float> %155, %143
  %157 = fadd <4 x float> %113, %156
  %158 = fmul <4 x float> %155, %147
  %159 = fadd <4 x float> %115, %158
  %160 = fmul <4 x float> %155, %151
  %161 = fadd <4 x float> %117, %160
  %162 = fmul <4 x float> %155, %154
  %163 = fadd <4 x float> %119, %162
  %164 = fadd float %66, 1.000000e+00
  %165 = fcmp ugt float %164, 5.000000e-01
  br i1 %165, label %166, label %61

166:                                              ; preds = %61
  %167 = extractvalue { i8*, i8** } %13, 1
  %168 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %167) #13, !srcloc !259
  %169 = extractvalue { i8*, i8** } %168, 0
  %170 = extractvalue { i8*, i8** } %168, 1
  %171 = bitcast i8* %169 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %171(i64 %0, i8** %170, i64 %2, i64 %3, <4 x float> %157, <4 x float> %159, <4 x float> %161, <4 x float> %163, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L18bicubic_clamp_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = alloca [4 x <4 x float>], align 16
  %14 = alloca [4 x <4 x float>], align 16
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = fadd <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %17) #18
  %19 = sitofp <4 x i32> %18 to <4 x float>
  %20 = fcmp olt <4 x float> %17, %19
  %21 = select <4 x i1> %20, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %22 = fsub <4 x float> %19, %21
  %23 = fsub <4 x float> %17, %22
  %24 = fadd <4 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %25 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %24) #18
  %26 = sitofp <4 x i32> %25 to <4 x float>
  %27 = fcmp olt <4 x float> %24, %26
  %28 = select <4 x i1> %27, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %29 = fsub <4 x float> %26, %28
  %30 = fsub <4 x float> %24, %29
  %31 = bitcast [4 x <4 x float>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %31) #18
  %32 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %13, i64 0, i64 0
  %33 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %30
  %34 = fmul <4 x float> %33, %33
  %35 = fmul <4 x float> %33, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %36 = fadd <4 x float> %35, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %37 = fmul <4 x float> %34, %36
  store <4 x float> %37, <4 x float>* %32, align 16
  %38 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %13, i64 0, i64 1
  %39 = fmul <4 x float> %33, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %40 = fadd <4 x float> %39, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %41 = fmul <4 x float> %33, %40
  %42 = fadd <4 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %43 = fmul <4 x float> %33, %42
  %44 = fadd <4 x float> %43, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  store <4 x float> %44, <4 x float>* %38, align 16
  %45 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %13, i64 0, i64 2
  %46 = fmul <4 x float> %30, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %47 = fadd <4 x float> %46, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %48 = fmul <4 x float> %30, %47
  %49 = fadd <4 x float> %48, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %50 = fmul <4 x float> %30, %49
  %51 = fadd <4 x float> %50, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  store <4 x float> %51, <4 x float>* %45, align 16
  %52 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %13, i64 0, i64 3
  %53 = fmul <4 x float> %30, %30
  %54 = fmul <4 x float> %30, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %55 = fadd <4 x float> %54, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %56 = fmul <4 x float> %53, %55
  store <4 x float> %56, <4 x float>* %52, align 16
  %57 = bitcast [4 x <4 x float>]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %57) #18
  %58 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %14, i64 0, i64 0
  %59 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %23
  %60 = fmul <4 x float> %59, %59
  %61 = fmul <4 x float> %59, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %62 = fadd <4 x float> %61, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %63 = fmul <4 x float> %60, %62
  store <4 x float> %63, <4 x float>* %58, align 16
  %64 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %14, i64 0, i64 1
  %65 = fmul <4 x float> %59, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %66 = fadd <4 x float> %65, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %67 = fmul <4 x float> %59, %66
  %68 = fadd <4 x float> %67, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %69 = fmul <4 x float> %59, %68
  %70 = fadd <4 x float> %69, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  store <4 x float> %70, <4 x float>* %64, align 16
  %71 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %14, i64 0, i64 2
  %72 = fmul <4 x float> %23, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %73 = fadd <4 x float> %72, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %74 = fmul <4 x float> %23, %73
  %75 = fadd <4 x float> %74, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %76 = fmul <4 x float> %23, %75
  %77 = fadd <4 x float> %76, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  store <4 x float> %77, <4 x float>* %71, align 16
  %78 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %14, i64 0, i64 3
  %79 = fmul <4 x float> %23, %23
  %80 = fmul <4 x float> %23, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %81 = fadd <4 x float> %80, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %82 = fmul <4 x float> %79, %81
  store <4 x float> %82, <4 x float>* %78, align 16
  %83 = fadd <4 x float> %5, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %84 = fadd <4 x float> %4, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %85 = getelementptr inbounds i8, i8* %16, i64 12
  %86 = bitcast i8* %85 to float*
  %87 = getelementptr inbounds i8, i8* %16, i64 16
  %88 = bitcast i8* %87 to float*
  %89 = bitcast i8* %16 to i32**
  %90 = getelementptr inbounds i8, i8* %16, i64 8
  %91 = bitcast i8* %90 to i32*
  %92 = load float, float* %86, align 4
  %93 = insertelement <4 x float> undef, float %92, i32 0
  %94 = shufflevector <4 x float> %93, <4 x float> undef, <4 x i32> zeroinitializer
  %95 = bitcast <4 x float> %94 to <4 x i32>
  %96 = add <4 x i32> %95, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = bitcast <4 x i32> %96 to <4 x float>
  %98 = load float, float* %88, align 8
  %99 = insertelement <4 x float> undef, float %98, i32 0
  %100 = shufflevector <4 x float> %99, <4 x float> undef, <4 x i32> zeroinitializer
  %101 = bitcast <4 x float> %100 to <4 x i32>
  %102 = add <4 x i32> %101, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = bitcast <4 x i32> %102 to <4 x float>
  %104 = load i32*, i32** %89, align 8
  %105 = load i32, i32* %91, align 8
  %106 = insertelement <4 x i32> undef, i32 %105, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %108

108:                                              ; preds = %123, %12
  %109 = phi <4 x float> [ zeroinitializer, %12 ], [ %182, %123 ]
  %110 = phi <4 x float> [ zeroinitializer, %12 ], [ %180, %123 ]
  %111 = phi <4 x float> [ zeroinitializer, %12 ], [ %178, %123 ]
  %112 = phi <4 x float> [ zeroinitializer, %12 ], [ %176, %123 ]
  %113 = phi <4 x float> [ %37, %12 ], [ %126, %123 ]
  %114 = phi i64 [ 0, %12 ], [ %121, %123 ]
  %115 = phi <4 x float> [ %83, %12 ], [ %124, %123 ]
  %116 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %115) #18
  %117 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %116, <4 x float> %103) #18
  %118 = fptosi <4 x float> %117 to <4 x i32>
  %119 = mul <4 x i32> %107, %118
  br label %127

120:                                              ; preds = %127
  %121 = add nuw nsw i64 %114, 1
  %122 = icmp eq i64 %121, 4
  br i1 %122, label %186, label %123

123:                                              ; preds = %120
  %124 = fadd <4 x float> %115, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %125 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %13, i64 0, i64 %121
  %126 = load <4 x float>, <4 x float>* %125, align 16
  br label %108

127:                                              ; preds = %127, %108
  %128 = phi <4 x float> [ %109, %108 ], [ %182, %127 ]
  %129 = phi <4 x float> [ %110, %108 ], [ %180, %127 ]
  %130 = phi <4 x float> [ %111, %108 ], [ %178, %127 ]
  %131 = phi <4 x float> [ %112, %108 ], [ %176, %127 ]
  %132 = phi i64 [ 0, %108 ], [ %184, %127 ]
  %133 = phi <4 x float> [ %84, %108 ], [ %183, %127 ]
  %134 = getelementptr inbounds [4 x <4 x float>], [4 x <4 x float>]* %14, i64 0, i64 %132
  %135 = load <4 x float>, <4 x float>* %134, align 16
  %136 = fmul <4 x float> %113, %135
  %137 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %133) #18
  %138 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %137, <4 x float> %97) #18
  %139 = fptosi <4 x float> %138 to <4 x i32>
  %140 = add <4 x i32> %119, %139
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i32, i32* %104, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = insertelement <4 x i32> undef, i32 %144, i32 0
  %146 = extractelement <4 x i32> %140, i32 1
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i32, i32* %104, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = insertelement <4 x i32> %145, i32 %149, i32 1
  %151 = extractelement <4 x i32> %140, i32 2
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %104, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = insertelement <4 x i32> %150, i32 %154, i32 2
  %156 = extractelement <4 x i32> %140, i32 3
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i32, i32* %104, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = insertelement <4 x i32> %155, i32 %159, i32 3
  %161 = and <4 x i32> %160, <i32 255, i32 255, i32 255, i32 255>
  %162 = sitofp <4 x i32> %161 to <4 x float>
  %163 = fmul <4 x float> %162, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %164 = lshr <4 x i32> %160, <i32 8, i32 8, i32 8, i32 8>
  %165 = and <4 x i32> %164, <i32 255, i32 255, i32 255, i32 255>
  %166 = sitofp <4 x i32> %165 to <4 x float>
  %167 = fmul <4 x float> %166, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %168 = lshr <4 x i32> %160, <i32 16, i32 16, i32 16, i32 16>
  %169 = and <4 x i32> %168, <i32 255, i32 255, i32 255, i32 255>
  %170 = sitofp <4 x i32> %169 to <4 x float>
  %171 = fmul <4 x float> %170, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %172 = lshr <4 x i32> %160, <i32 24, i32 24, i32 24, i32 24>
  %173 = sitofp <4 x i32> %172 to <4 x float>
  %174 = fmul <4 x float> %173, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %175 = fmul <4 x float> %136, %163
  %176 = fadd <4 x float> %131, %175
  %177 = fmul <4 x float> %136, %167
  %178 = fadd <4 x float> %130, %177
  %179 = fmul <4 x float> %136, %171
  %180 = fadd <4 x float> %129, %179
  %181 = fmul <4 x float> %136, %174
  %182 = fadd <4 x float> %128, %181
  %183 = fadd <4 x float> %133, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %184 = add nuw nsw i64 %132, 1
  %185 = icmp eq i64 %184, 4
  br i1 %185, label %120, label %127

186:                                              ; preds = %120
  %187 = extractvalue { i8*, i8** } %15, 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %57) #18
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %31) #18
  %188 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %187) #13, !srcloc !259
  %189 = extractvalue { i8*, i8** } %188, 0
  %190 = extractvalue { i8*, i8** } %188, 1
  %191 = bitcast i8* %189 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %191(i64 %0, i8** %190, i64 %2, i64 %3, <4 x float> %176, <4 x float> %178, <4 x float> %180, <4 x float> %182, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12store_u16_beEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = bitcast i8* %14 to i16**
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds i8, i8* %14, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = sext i32 %21 to i64
  %23 = mul i64 %22, %3
  %24 = getelementptr inbounds i16, i16* %18, i64 %23
  %25 = getelementptr inbounds i16, i16* %24, i64 %16
  %26 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %27 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %26, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %28 = fmul <4 x float> %27, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %29 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %28) #18
  %30 = shl <4 x i32> %29, <i32 16, i32 16, i32 16, i32 16>
  %31 = ashr exact <4 x i32> %30, <i32 16, i32 16, i32 16, i32 16>
  %32 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %31, <4 x i32> undef) #18
  %33 = bitcast <8 x i16> %32 to <2 x i64>
  %34 = insertelement <2 x i64> %33, i64 -6148914691236517206, i32 1
  %35 = bitcast <2 x i64> %34 to <8 x i16>
  %36 = shl <8 x i16> %35, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %37 = lshr <8 x i16> %35, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %38 = or <8 x i16> %36, %37
  %39 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %40 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %39, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %41 = fmul <4 x float> %40, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %42 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %41) #18
  %43 = shl <4 x i32> %42, <i32 16, i32 16, i32 16, i32 16>
  %44 = ashr exact <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %45 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %44, <4 x i32> undef) #18
  %46 = bitcast <8 x i16> %45 to <2 x i64>
  %47 = insertelement <2 x i64> %46, i64 -6148914691236517206, i32 1
  %48 = bitcast <2 x i64> %47 to <8 x i16>
  %49 = shl <8 x i16> %48, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %50 = lshr <8 x i16> %48, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %51 = or <8 x i16> %49, %50
  %52 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %53 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %52, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %54 = fmul <4 x float> %53, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %55 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %54) #18
  %56 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = ashr exact <4 x i32> %56, <i32 16, i32 16, i32 16, i32 16>
  %58 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %57, <4 x i32> undef) #18
  %59 = bitcast <8 x i16> %58 to <2 x i64>
  %60 = insertelement <2 x i64> %59, i64 -6148914691236517206, i32 1
  %61 = bitcast <2 x i64> %60 to <8 x i16>
  %62 = shl <8 x i16> %61, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %63 = lshr <8 x i16> %61, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = or <8 x i16> %62, %63
  %65 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %66 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %65, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %67 = fmul <4 x float> %66, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %68 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %67) #18
  %69 = shl <4 x i32> %68, <i32 16, i32 16, i32 16, i32 16>
  %70 = ashr exact <4 x i32> %69, <i32 16, i32 16, i32 16, i32 16>
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %70, <4 x i32> undef) #18
  %72 = bitcast <8 x i16> %71 to <2 x i64>
  %73 = insertelement <2 x i64> %72, i64 -6148914691236517206, i32 1
  %74 = bitcast <2 x i64> %73 to <8 x i16>
  %75 = shl <8 x i16> %74, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %76 = lshr <8 x i16> %74, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %77 = or <8 x i16> %75, %76
  %78 = shufflevector <8 x i16> %38, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = shufflevector <8 x i16> %64, <8 x i16> %77, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %80 = icmp eq i64 %0, 0
  br i1 %80, label %100, label %81, !prof !261

81:                                               ; preds = %12
  %82 = bitcast i16* %25 to double*
  %83 = bitcast <8 x i16> %78 to <4 x i32>
  %84 = bitcast <8 x i16> %79 to <4 x i32>
  %85 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = bitcast <4 x i32> %85 to <2 x double>
  %87 = extractelement <2 x double> %86, i32 0
  store double %87, double* %82, align 1
  %88 = icmp eq i64 %0, 1
  br i1 %88, label %108, label %89

89:                                               ; preds = %81
  %90 = getelementptr inbounds i16, i16* %25, i64 4
  %91 = bitcast i16* %90 to double*
  %92 = extractelement <2 x double> %86, i32 1
  store double %92, double* %91, align 1
  %93 = icmp ugt i64 %0, 2
  br i1 %93, label %94, label %108

94:                                               ; preds = %89
  %95 = getelementptr inbounds i16, i16* %25, i64 8
  %96 = bitcast i16* %95 to double*
  %97 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %98 = bitcast <4 x i32> %97 to <2 x double>
  %99 = extractelement <2 x double> %98, i32 0
  store double %99, double* %96, align 1
  br label %108

100:                                              ; preds = %12
  %101 = bitcast <8 x i16> %78 to <4 x i32>
  %102 = bitcast <8 x i16> %79 to <4 x i32>
  %103 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %104 = bitcast i16* %25 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %104, align 1
  %105 = getelementptr inbounds i16, i16* %25, i64 8
  %106 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %107 = bitcast i16* %105 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %107, align 1
  br label %108

108:                                              ; preds = %81, %89, %94, %100
  %109 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %110 = extractvalue { i8*, i8** } %109, 0
  %111 = extractvalue { i8*, i8** } %109, 1
  %112 = bitcast i8* %110 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %112(i64 %0, i8** %111, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8load_srcEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 16
  %19 = bitcast i8* %18 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 32
  %22 = bitcast i8* %21 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4
  %24 = getelementptr inbounds i8, i8* %14, i64 48
  %25 = bitcast i8* %24 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <4 x float> %17, <4 x float> %20, <4 x float> %23, <4 x float> %26, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9store_srcEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  store <4 x float> %4, <4 x float>* %16, align 4
  %17 = getelementptr inbounds i8, i8* %14, i64 16
  %18 = bitcast i8* %17 to <4 x float>*
  store <4 x float> %5, <4 x float>* %18, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 32
  %20 = bitcast i8* %19 to <4 x float>*
  store <4 x float> %6, <4 x float>* %20, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %7, <4 x float>* %22, align 4
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11store_src_aEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  store <4 x float> %7, <4 x float>* %16, align 4
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8load_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 16
  %19 = bitcast i8* %18 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 32
  %22 = bitcast i8* %21 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 4
  %24 = getelementptr inbounds i8, i8* %14, i64 48
  %25 = bitcast i8* %24 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %17, <4 x float> %20, <4 x float> %23, <4 x float> %26) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9store_dstEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  store <4 x float> %8, <4 x float>* %16, align 4
  %17 = getelementptr inbounds i8, i8* %14, i64 16
  %18 = bitcast i8* %17 to <4 x float>*
  store <4 x float> %9, <4 x float>* %18, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 32
  %20 = bitcast i8* %19 to <4 x float>*
  store <4 x float> %10, <4 x float>* %20, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 48
  %22 = bitcast i8* %21 to <4 x float>*
  store <4 x float> %11, <4 x float>* %22, align 4
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8scale_u8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %39 [
    i64 0, label %40
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <4 x i8> <i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i8* %24 to <2 x i8>*
  %33 = load <2 x i8>, <2 x i8>* %32, align 1
  %34 = shufflevector <2 x i8> %33, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i8> %34, <4 x i8> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i8, i8* %24, align 1
  %38 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %37, i32 0
  br label %43

39:                                               ; preds = %12
  unreachable

40:                                               ; preds = %12
  %41 = bitcast i8* %24 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  br label %43

43:                                               ; preds = %30, %36, %40
  %44 = phi <4 x i8> [ %42, %40 ], [ %38, %36 ], [ %35, %30 ]
  %45 = uitofp <4 x i8> %44 to <4 x float>
  %46 = fmul <4 x float> %45, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %47 = fmul <4 x float> %46, %4
  %48 = fmul <4 x float> %46, %5
  %49 = fmul <4 x float> %46, %6
  %50 = fmul <4 x float> %46, %7
  %51 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %52 = extractvalue { i8*, i8** } %51, 0
  %53 = extractvalue { i8*, i8** } %51, 1
  %54 = bitcast i8* %52 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %54(i64 %0, i8** %53, i64 %2, i64 %3, <4 x float> %47, <4 x float> %48, <4 x float> %49, <4 x float> %50, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9scale_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 63488, i32 63488, i32 63488, i32 63488>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %49 = and <4 x i32> %45, <i32 2016, i32 2016, i32 2016, i32 2016>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %52 = and <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %53 = sitofp <4 x i32> %52 to <4 x float>
  %54 = fmul <4 x float> %53, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %55 = fcmp uge <4 x float> %7, %11
  %56 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %51, <4 x float> %54) #18
  %57 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %48, <4 x float> %56) #18
  %58 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %51, <4 x float> %54) #18
  %59 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %48, <4 x float> %58) #18
  %60 = select <4 x i1> %55, <4 x float> %59, <4 x float> %57
  %61 = fmul <4 x float> %48, %4
  %62 = fmul <4 x float> %51, %5
  %63 = fmul <4 x float> %54, %6
  %64 = fmul <4 x float> %60, %7
  %65 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %66 = extractvalue { i8*, i8** } %65, 0
  %67 = extractvalue { i8*, i8** } %65, 1
  %68 = bitcast i8* %66 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %68(i64 %0, i8** %67, i64 %2, i64 %3, <4 x float> %61, <4 x float> %62, <4 x float> %63, <4 x float> %64, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13scale_1_floatEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fmul <4 x float> %19, %4
  %21 = fmul <4 x float> %19, %5
  %22 = fmul <4 x float> %19, %6
  %23 = fmul <4 x float> %19, %7
  %24 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %25 = extractvalue { i8*, i8** } %24, 0
  %26 = extractvalue { i8*, i8** } %24, 1
  %27 = bitcast i8* %25 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %27(i64 %0, i8** %26, i64 %2, i64 %3, <4 x float> %20, <4 x float> %21, <4 x float> %22, <4 x float> %23, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12scale_nativeEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fmul <4 x float> %17, %4
  %19 = fmul <4 x float> %17, %5
  %20 = fmul <4 x float> %17, %6
  %21 = fmul <4 x float> %17, %7
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <4 x float> %18, <4 x float> %19, <4 x float> %20, <4 x float> %21, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7lerp_u8EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %39 [
    i64 0, label %40
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <4 x i8> <i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i8* %24 to <2 x i8>*
  %33 = load <2 x i8>, <2 x i8>* %32, align 1
  %34 = shufflevector <2 x i8> %33, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i8> %34, <4 x i8> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i8, i8* %24, align 1
  %38 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %37, i32 0
  br label %43

39:                                               ; preds = %12
  unreachable

40:                                               ; preds = %12
  %41 = bitcast i8* %24 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  br label %43

43:                                               ; preds = %30, %36, %40
  %44 = phi <4 x i8> [ %42, %40 ], [ %38, %36 ], [ %35, %30 ]
  %45 = uitofp <4 x i8> %44 to <4 x float>
  %46 = fmul <4 x float> %45, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %47 = fsub <4 x float> %4, %8
  %48 = fmul <4 x float> %47, %46
  %49 = fadd <4 x float> %48, %8
  %50 = fsub <4 x float> %5, %9
  %51 = fmul <4 x float> %50, %46
  %52 = fadd <4 x float> %51, %9
  %53 = fsub <4 x float> %6, %10
  %54 = fmul <4 x float> %53, %46
  %55 = fadd <4 x float> %54, %10
  %56 = fsub <4 x float> %7, %11
  %57 = fmul <4 x float> %56, %46
  %58 = fadd <4 x float> %57, %11
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %49, <4 x float> %52, <4 x float> %55, <4 x float> %58, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8lerp_565EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 2
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <4 x i16> <i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i16* %24 to <2 x i16>*
  %33 = load <2 x i16>, <2 x i16>* %32, align 2
  %34 = shufflevector <2 x i16> %33, <2 x i16> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i16> %34, <4 x i16> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i16, i16* %24, align 2
  %38 = insertelement <4 x i16> <i16 undef, i16 0, i16 0, i16 0>, i16 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 2
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %30, %36, %39
  %44 = phi <4 x i16> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 63488, i32 63488, i32 63488, i32 63488>
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fmul <4 x float> %47, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %49 = and <4 x i32> %45, <i32 2016, i32 2016, i32 2016, i32 2016>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %52 = and <4 x i32> %45, <i32 31, i32 31, i32 31, i32 31>
  %53 = sitofp <4 x i32> %52 to <4 x float>
  %54 = fmul <4 x float> %53, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %55 = fcmp uge <4 x float> %7, %11
  %56 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %51, <4 x float> %54) #18
  %57 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %48, <4 x float> %56) #18
  %58 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %51, <4 x float> %54) #18
  %59 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %48, <4 x float> %58) #18
  %60 = select <4 x i1> %55, <4 x float> %59, <4 x float> %57
  %61 = fsub <4 x float> %4, %8
  %62 = fmul <4 x float> %61, %48
  %63 = fadd <4 x float> %62, %8
  %64 = fsub <4 x float> %5, %9
  %65 = fmul <4 x float> %64, %51
  %66 = fadd <4 x float> %65, %9
  %67 = fsub <4 x float> %6, %10
  %68 = fmul <4 x float> %67, %54
  %69 = fadd <4 x float> %68, %10
  %70 = fsub <4 x float> %7, %11
  %71 = fmul <4 x float> %70, %60
  %72 = fadd <4 x float> %71, %11
  %73 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %74 = extractvalue { i8*, i8** } %73, 0
  %75 = extractvalue { i8*, i8** } %73, 1
  %76 = bitcast i8* %74 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %76(i64 %0, i8** %75, i64 %2, i64 %3, <4 x float> %63, <4 x float> %66, <4 x float> %69, <4 x float> %72, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12lerp_1_floatEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fsub <4 x float> %4, %8
  %21 = fmul <4 x float> %20, %19
  %22 = fadd <4 x float> %21, %8
  %23 = fsub <4 x float> %5, %9
  %24 = fmul <4 x float> %23, %19
  %25 = fadd <4 x float> %24, %9
  %26 = fsub <4 x float> %6, %10
  %27 = fmul <4 x float> %26, %19
  %28 = fadd <4 x float> %27, %10
  %29 = fsub <4 x float> %7, %11
  %30 = fmul <4 x float> %29, %19
  %31 = fadd <4 x float> %30, %11
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <4 x float> %22, <4 x float> %25, <4 x float> %28, <4 x float> %31, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11lerp_nativeEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fsub <4 x float> %4, %8
  %19 = fmul <4 x float> %18, %17
  %20 = fadd <4 x float> %19, %8
  %21 = fsub <4 x float> %5, %9
  %22 = fmul <4 x float> %21, %17
  %23 = fadd <4 x float> %22, %9
  %24 = fsub <4 x float> %6, %10
  %25 = fmul <4 x float> %24, %17
  %26 = fadd <4 x float> %25, %10
  %27 = fsub <4 x float> %7, %11
  %28 = fmul <4 x float> %27, %17
  %29 = fadd <4 x float> %28, %11
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <4 x float> %20, <4 x float> %23, <4 x float> %26, <4 x float> %29, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7dstatopEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %7, %8
  %14 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %15 = fmul <4 x float> %14, %4
  %16 = fadd <4 x float> %13, %15
  %17 = fmul <4 x float> %7, %9
  %18 = fmul <4 x float> %14, %5
  %19 = fadd <4 x float> %17, %18
  %20 = fmul <4 x float> %7, %10
  %21 = fmul <4 x float> %14, %6
  %22 = fadd <4 x float> %20, %21
  %23 = fmul <4 x float> %7, %11
  %24 = fmul <4 x float> %14, %7
  %25 = fadd <4 x float> %23, %24
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %16, <4 x float> %19, <4 x float> %22, <4 x float> %25, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L5dstinEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %7, %8
  %14 = fmul <4 x float> %7, %9
  %15 = fmul <4 x float> %7, %10
  %16 = fmul <4 x float> %7, %11
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6dstoutEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %14 = fmul <4 x float> %13, %8
  %15 = fmul <4 x float> %13, %9
  %16 = fmul <4 x float> %13, %10
  %17 = fmul <4 x float> %13, %11
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %17, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7dstoverEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <4 x float> %13, %4
  %15 = fadd <4 x float> %14, %8
  %16 = fmul <4 x float> %13, %5
  %17 = fadd <4 x float> %16, %9
  %18 = fmul <4 x float> %13, %6
  %19 = fadd <4 x float> %18, %10
  %20 = fmul <4 x float> %13, %7
  %21 = fadd <4 x float> %20, %11
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <4 x float> %15, <4 x float> %17, <4 x float> %19, <4 x float> %21, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7srcatopEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %11
  %14 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %15 = fmul <4 x float> %14, %8
  %16 = fadd <4 x float> %15, %13
  %17 = fmul <4 x float> %5, %11
  %18 = fmul <4 x float> %14, %9
  %19 = fadd <4 x float> %18, %17
  %20 = fmul <4 x float> %6, %11
  %21 = fmul <4 x float> %14, %10
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %7, %11
  %24 = fmul <4 x float> %14, %11
  %25 = fadd <4 x float> %23, %24
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %16, <4 x float> %19, <4 x float> %22, <4 x float> %25, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L5srcinEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %11
  %14 = fmul <4 x float> %5, %11
  %15 = fmul <4 x float> %6, %11
  %16 = fmul <4 x float> %7, %11
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6srcoutEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <4 x float> %13, %4
  %15 = fmul <4 x float> %13, %5
  %16 = fmul <4 x float> %13, %6
  %17 = fmul <4 x float> %13, %7
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %17, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7srcoverEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %14 = fmul <4 x float> %13, %8
  %15 = fadd <4 x float> %14, %4
  %16 = fmul <4 x float> %13, %9
  %17 = fadd <4 x float> %16, %5
  %18 = fmul <4 x float> %13, %10
  %19 = fadd <4 x float> %18, %6
  %20 = fmul <4 x float> %13, %11
  %21 = fadd <4 x float> %20, %7
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <4 x float> %15, <4 x float> %17, <4 x float> %19, <4 x float> %21, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L5clearEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8modulateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %8
  %14 = fmul <4 x float> %5, %9
  %15 = fmul <4 x float> %6, %10
  %16 = fmul <4 x float> %7, %11
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %13, <4 x float> %14, <4 x float> %15, <4 x float> %16, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8multiplyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <4 x float> %13, %4
  %15 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <4 x float> %15, %8
  %17 = fadd <4 x float> %16, %14
  %18 = fmul <4 x float> %4, %8
  %19 = fadd <4 x float> %18, %17
  %20 = fmul <4 x float> %13, %5
  %21 = fmul <4 x float> %15, %9
  %22 = fadd <4 x float> %21, %20
  %23 = fmul <4 x float> %5, %9
  %24 = fadd <4 x float> %23, %22
  %25 = fmul <4 x float> %13, %6
  %26 = fmul <4 x float> %15, %10
  %27 = fadd <4 x float> %26, %25
  %28 = fmul <4 x float> %6, %10
  %29 = fadd <4 x float> %28, %27
  %30 = fmul <4 x float> %13, %7
  %31 = fmul <4 x float> %15, %11
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %7, %11
  %34 = fadd <4 x float> %33, %32
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <4 x float> %19, <4 x float> %24, <4 x float> %29, <4 x float> %34, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L5plus_EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, %8
  %14 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %13, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %15 = fadd <4 x float> %5, %9
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %15, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %17 = fadd <4 x float> %6, %10
  %18 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %17, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %19 = fadd <4 x float> %7, %11
  %20 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %19, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <4 x float> %14, <4 x float> %16, <4 x float> %18, <4 x float> %20, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6screenEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, %8
  %14 = fmul <4 x float> %4, %8
  %15 = fsub <4 x float> %13, %14
  %16 = fadd <4 x float> %5, %9
  %17 = fmul <4 x float> %5, %9
  %18 = fsub <4 x float> %16, %17
  %19 = fadd <4 x float> %6, %10
  %20 = fmul <4 x float> %6, %10
  %21 = fsub <4 x float> %19, %20
  %22 = fadd <4 x float> %7, %11
  %23 = fmul <4 x float> %7, %11
  %24 = fsub <4 x float> %22, %23
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <4 x float> %15, <4 x float> %18, <4 x float> %21, <4 x float> %24, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L4xor_EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <4 x float> %13, %4
  %15 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <4 x float> %15, %8
  %17 = fadd <4 x float> %16, %14
  %18 = fmul <4 x float> %13, %5
  %19 = fmul <4 x float> %15, %9
  %20 = fadd <4 x float> %19, %18
  %21 = fmul <4 x float> %13, %6
  %22 = fmul <4 x float> %15, %10
  %23 = fadd <4 x float> %22, %21
  %24 = fmul <4 x float> %13, %7
  %25 = fmul <4 x float> %15, %11
  %26 = fadd <4 x float> %25, %24
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <4 x float> %17, <4 x float> %20, <4 x float> %23, <4 x float> %26, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9colorburnEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fcmp une <4 x float> %8, %11
  %14 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %15 = fmul <4 x float> %14, %4
  %16 = fadd <4 x float> %15, %8
  %17 = fcmp une <4 x float> %4, zeroinitializer
  %18 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %19 = fmul <4 x float> %18, %8
  %20 = fsub <4 x float> %11, %8
  %21 = fmul <4 x float> %20, %7
  %22 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %4) #18
  %23 = fmul <4 x float> %21, %22
  %24 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %11, <4 x float> %23) #18
  %25 = fsub <4 x float> %11, %24
  %26 = fmul <4 x float> %25, %7
  %27 = fadd <4 x float> %15, %26
  %28 = fadd <4 x float> %19, %27
  %29 = select <4 x i1> %17, <4 x float> %28, <4 x float> %19
  %30 = select <4 x i1> %13, <4 x float> %29, <4 x float> %16
  %31 = fcmp une <4 x float> %9, %11
  %32 = fmul <4 x float> %14, %5
  %33 = fadd <4 x float> %32, %9
  %34 = fcmp une <4 x float> %5, zeroinitializer
  %35 = fmul <4 x float> %18, %9
  %36 = fsub <4 x float> %11, %9
  %37 = fmul <4 x float> %36, %7
  %38 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %5) #18
  %39 = fmul <4 x float> %37, %38
  %40 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %11, <4 x float> %39) #18
  %41 = fsub <4 x float> %11, %40
  %42 = fmul <4 x float> %41, %7
  %43 = fadd <4 x float> %32, %42
  %44 = fadd <4 x float> %35, %43
  %45 = select <4 x i1> %34, <4 x float> %44, <4 x float> %35
  %46 = select <4 x i1> %31, <4 x float> %45, <4 x float> %33
  %47 = fcmp une <4 x float> %10, %11
  %48 = fmul <4 x float> %14, %6
  %49 = fadd <4 x float> %48, %10
  %50 = fcmp une <4 x float> %6, zeroinitializer
  %51 = fmul <4 x float> %18, %10
  %52 = fsub <4 x float> %11, %10
  %53 = fmul <4 x float> %52, %7
  %54 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %6) #18
  %55 = fmul <4 x float> %53, %54
  %56 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %11, <4 x float> %55) #18
  %57 = fsub <4 x float> %11, %56
  %58 = fmul <4 x float> %57, %7
  %59 = fadd <4 x float> %48, %58
  %60 = fadd <4 x float> %51, %59
  %61 = select <4 x i1> %50, <4 x float> %60, <4 x float> %51
  %62 = select <4 x i1> %47, <4 x float> %61, <4 x float> %49
  %63 = fmul <4 x float> %18, %11
  %64 = fadd <4 x float> %63, %7
  %65 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %66 = extractvalue { i8*, i8** } %65, 0
  %67 = extractvalue { i8*, i8** } %65, 1
  %68 = bitcast i8* %66 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %68(i64 %0, i8** %67, i64 %2, i64 %3, <4 x float> %30, <4 x float> %46, <4 x float> %62, <4 x float> %64, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10colordodgeEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fcmp une <4 x float> %8, zeroinitializer
  %14 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %15 = fmul <4 x float> %14, %4
  %16 = fcmp une <4 x float> %4, %7
  %17 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %18 = fmul <4 x float> %17, %8
  %19 = fmul <4 x float> %7, %8
  %20 = fsub <4 x float> %7, %4
  %21 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %20) #18
  %22 = fmul <4 x float> %19, %21
  %23 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %11, <4 x float> %22) #18
  %24 = fmul <4 x float> %23, %7
  %25 = fadd <4 x float> %15, %24
  %26 = select <4 x i1> %16, <4 x float> %25, <4 x float> %4
  %27 = fadd <4 x float> %18, %26
  %28 = select <4 x i1> %13, <4 x float> %27, <4 x float> %15
  %29 = fcmp une <4 x float> %9, zeroinitializer
  %30 = fmul <4 x float> %14, %5
  %31 = fcmp une <4 x float> %5, %7
  %32 = fmul <4 x float> %17, %9
  %33 = fmul <4 x float> %7, %9
  %34 = fsub <4 x float> %7, %5
  %35 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %34) #18
  %36 = fmul <4 x float> %33, %35
  %37 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %11, <4 x float> %36) #18
  %38 = fmul <4 x float> %37, %7
  %39 = fadd <4 x float> %30, %38
  %40 = select <4 x i1> %31, <4 x float> %39, <4 x float> %5
  %41 = fadd <4 x float> %32, %40
  %42 = select <4 x i1> %29, <4 x float> %41, <4 x float> %30
  %43 = fcmp une <4 x float> %10, zeroinitializer
  %44 = fmul <4 x float> %14, %6
  %45 = fcmp une <4 x float> %6, %7
  %46 = fmul <4 x float> %17, %10
  %47 = fmul <4 x float> %7, %10
  %48 = fsub <4 x float> %7, %6
  %49 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %48) #18
  %50 = fmul <4 x float> %47, %49
  %51 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %11, <4 x float> %50) #18
  %52 = fmul <4 x float> %51, %7
  %53 = fadd <4 x float> %44, %52
  %54 = select <4 x i1> %45, <4 x float> %53, <4 x float> %6
  %55 = fadd <4 x float> %46, %54
  %56 = select <4 x i1> %43, <4 x float> %55, <4 x float> %44
  %57 = fmul <4 x float> %17, %11
  %58 = fadd <4 x float> %57, %7
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <4 x float> %28, <4 x float> %42, <4 x float> %56, <4 x float> %58, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6darkenEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, %8
  %14 = fmul <4 x float> %4, %11
  %15 = fmul <4 x float> %7, %8
  %16 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %14, <4 x float> %15) #18
  %17 = fsub <4 x float> %13, %16
  %18 = fadd <4 x float> %5, %9
  %19 = fmul <4 x float> %5, %11
  %20 = fmul <4 x float> %7, %9
  %21 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %19, <4 x float> %20) #18
  %22 = fsub <4 x float> %18, %21
  %23 = fadd <4 x float> %6, %10
  %24 = fmul <4 x float> %6, %11
  %25 = fmul <4 x float> %7, %10
  %26 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %24, <4 x float> %25) #18
  %27 = fsub <4 x float> %23, %26
  %28 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %29 = fmul <4 x float> %28, %11
  %30 = fadd <4 x float> %29, %7
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <4 x float> %17, <4 x float> %22, <4 x float> %27, <4 x float> %30, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10differenceEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, %8
  %14 = fmul <4 x float> %4, %11
  %15 = fmul <4 x float> %7, %8
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %14, <4 x float> %15) #18
  %17 = fadd <4 x float> %16, %16
  %18 = fsub <4 x float> %13, %17
  %19 = fadd <4 x float> %5, %9
  %20 = fmul <4 x float> %5, %11
  %21 = fmul <4 x float> %7, %9
  %22 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %20, <4 x float> %21) #18
  %23 = fadd <4 x float> %22, %22
  %24 = fsub <4 x float> %19, %23
  %25 = fadd <4 x float> %6, %10
  %26 = fmul <4 x float> %6, %11
  %27 = fmul <4 x float> %7, %10
  %28 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %26, <4 x float> %27) #18
  %29 = fadd <4 x float> %28, %28
  %30 = fsub <4 x float> %25, %29
  %31 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %32 = fmul <4 x float> %31, %11
  %33 = fadd <4 x float> %32, %7
  %34 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %35 = extractvalue { i8*, i8** } %34, 0
  %36 = extractvalue { i8*, i8** } %34, 1
  %37 = bitcast i8* %35 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %37(i64 %0, i8** %36, i64 %2, i64 %3, <4 x float> %18, <4 x float> %24, <4 x float> %30, <4 x float> %33, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9exclusionEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, %8
  %14 = fmul <4 x float> %4, %8
  %15 = fadd <4 x float> %14, %14
  %16 = fsub <4 x float> %13, %15
  %17 = fadd <4 x float> %5, %9
  %18 = fmul <4 x float> %5, %9
  %19 = fadd <4 x float> %18, %18
  %20 = fsub <4 x float> %17, %19
  %21 = fadd <4 x float> %6, %10
  %22 = fmul <4 x float> %6, %10
  %23 = fadd <4 x float> %22, %22
  %24 = fsub <4 x float> %21, %23
  %25 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %26 = fmul <4 x float> %25, %11
  %27 = fadd <4 x float> %26, %7
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <4 x float> %16, <4 x float> %20, <4 x float> %24, <4 x float> %27, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9hardlightEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <4 x float> %13, %4
  %15 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <4 x float> %15, %8
  %17 = fadd <4 x float> %16, %14
  %18 = fadd <4 x float> %4, %4
  %19 = fcmp ugt <4 x float> %18, %7
  %20 = fmul <4 x float> %4, %8
  %21 = fadd <4 x float> %20, %20
  %22 = fmul <4 x float> %7, %11
  %23 = fsub <4 x float> %11, %8
  %24 = fsub <4 x float> %7, %4
  %25 = fmul <4 x float> %24, %23
  %26 = fadd <4 x float> %25, %25
  %27 = fsub <4 x float> %22, %26
  %28 = select <4 x i1> %19, <4 x float> %27, <4 x float> %21
  %29 = fadd <4 x float> %17, %28
  %30 = fmul <4 x float> %13, %5
  %31 = fmul <4 x float> %15, %9
  %32 = fadd <4 x float> %31, %30
  %33 = fadd <4 x float> %5, %5
  %34 = fcmp ugt <4 x float> %33, %7
  %35 = fmul <4 x float> %5, %9
  %36 = fadd <4 x float> %35, %35
  %37 = fsub <4 x float> %11, %9
  %38 = fsub <4 x float> %7, %5
  %39 = fmul <4 x float> %38, %37
  %40 = fadd <4 x float> %39, %39
  %41 = fsub <4 x float> %22, %40
  %42 = select <4 x i1> %34, <4 x float> %41, <4 x float> %36
  %43 = fadd <4 x float> %32, %42
  %44 = fmul <4 x float> %13, %6
  %45 = fmul <4 x float> %15, %10
  %46 = fadd <4 x float> %45, %44
  %47 = fadd <4 x float> %6, %6
  %48 = fcmp ugt <4 x float> %47, %7
  %49 = fmul <4 x float> %6, %10
  %50 = fadd <4 x float> %49, %49
  %51 = fsub <4 x float> %11, %10
  %52 = fsub <4 x float> %7, %6
  %53 = fmul <4 x float> %52, %51
  %54 = fadd <4 x float> %53, %53
  %55 = fsub <4 x float> %22, %54
  %56 = select <4 x i1> %48, <4 x float> %55, <4 x float> %50
  %57 = fadd <4 x float> %46, %56
  %58 = fmul <4 x float> %15, %11
  %59 = fadd <4 x float> %58, %7
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %29, <4 x float> %43, <4 x float> %57, <4 x float> %59, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7lightenEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, %8
  %14 = fmul <4 x float> %4, %11
  %15 = fmul <4 x float> %7, %8
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %14, <4 x float> %15) #18
  %17 = fsub <4 x float> %13, %16
  %18 = fadd <4 x float> %5, %9
  %19 = fmul <4 x float> %5, %11
  %20 = fmul <4 x float> %7, %9
  %21 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %19, <4 x float> %20) #18
  %22 = fsub <4 x float> %18, %21
  %23 = fadd <4 x float> %6, %10
  %24 = fmul <4 x float> %6, %11
  %25 = fmul <4 x float> %7, %10
  %26 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %24, <4 x float> %25) #18
  %27 = fsub <4 x float> %23, %26
  %28 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %29 = fmul <4 x float> %28, %11
  %30 = fadd <4 x float> %29, %7
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <4 x float> %17, <4 x float> %22, <4 x float> %27, <4 x float> %30, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7overlayEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <4 x float> %13, %4
  %15 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <4 x float> %15, %8
  %17 = fadd <4 x float> %16, %14
  %18 = fadd <4 x float> %8, %8
  %19 = fcmp ugt <4 x float> %18, %11
  %20 = fmul <4 x float> %4, %8
  %21 = fadd <4 x float> %20, %20
  %22 = fmul <4 x float> %7, %11
  %23 = fsub <4 x float> %11, %8
  %24 = fsub <4 x float> %7, %4
  %25 = fmul <4 x float> %24, %23
  %26 = fadd <4 x float> %25, %25
  %27 = fsub <4 x float> %22, %26
  %28 = select <4 x i1> %19, <4 x float> %27, <4 x float> %21
  %29 = fadd <4 x float> %17, %28
  %30 = fmul <4 x float> %13, %5
  %31 = fmul <4 x float> %15, %9
  %32 = fadd <4 x float> %31, %30
  %33 = fadd <4 x float> %9, %9
  %34 = fcmp ugt <4 x float> %33, %11
  %35 = fmul <4 x float> %5, %9
  %36 = fadd <4 x float> %35, %35
  %37 = fsub <4 x float> %11, %9
  %38 = fsub <4 x float> %7, %5
  %39 = fmul <4 x float> %38, %37
  %40 = fadd <4 x float> %39, %39
  %41 = fsub <4 x float> %22, %40
  %42 = select <4 x i1> %34, <4 x float> %41, <4 x float> %36
  %43 = fadd <4 x float> %32, %42
  %44 = fmul <4 x float> %13, %6
  %45 = fmul <4 x float> %15, %10
  %46 = fadd <4 x float> %45, %44
  %47 = fadd <4 x float> %10, %10
  %48 = fcmp ugt <4 x float> %47, %11
  %49 = fmul <4 x float> %6, %10
  %50 = fadd <4 x float> %49, %49
  %51 = fsub <4 x float> %11, %10
  %52 = fsub <4 x float> %7, %6
  %53 = fmul <4 x float> %52, %51
  %54 = fadd <4 x float> %53, %53
  %55 = fsub <4 x float> %22, %54
  %56 = select <4 x i1> %48, <4 x float> %55, <4 x float> %50
  %57 = fadd <4 x float> %46, %56
  %58 = fmul <4 x float> %15, %11
  %59 = fadd <4 x float> %58, %7
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <4 x float> %29, <4 x float> %43, <4 x float> %57, <4 x float> %59, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9softlightEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fcmp ogt <4 x float> %11, zeroinitializer
  %14 = fdiv <4 x float> %8, %11
  %15 = select <4 x i1> %13, <4 x float> %14, <4 x float> zeroinitializer
  %16 = fadd <4 x float> %4, %4
  %17 = fadd <4 x float> %15, %15
  %18 = fadd <4 x float> %17, %17
  %19 = fsub <4 x float> %16, %7
  %20 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %21 = fmul <4 x float> %19, %20
  %22 = fadd <4 x float> %21, %7
  %23 = fmul <4 x float> %22, %8
  %24 = fmul <4 x float> %18, %18
  %25 = fadd <4 x float> %18, %24
  %26 = fadd <4 x float> %15, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fmul <4 x float> %26, %25
  %28 = fmul <4 x float> %15, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %29 = fadd <4 x float> %28, %27
  %30 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %15) #18
  %31 = fsub <4 x float> %30, %15
  %32 = fmul <4 x float> %7, %8
  %33 = fmul <4 x float> %19, %11
  %34 = fadd <4 x float> %8, %8
  %35 = fadd <4 x float> %34, %34
  %36 = fcmp ugt <4 x float> %35, %11
  %37 = select <4 x i1> %36, <4 x float> %31, <4 x float> %29
  %38 = fmul <4 x float> %33, %37
  %39 = fadd <4 x float> %32, %38
  %40 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %41 = fmul <4 x float> %40, %4
  %42 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %43 = fmul <4 x float> %42, %8
  %44 = fadd <4 x float> %43, %41
  %45 = fcmp ugt <4 x float> %16, %7
  %46 = select <4 x i1> %45, <4 x float> %39, <4 x float> %23
  %47 = fadd <4 x float> %44, %46
  %48 = fdiv <4 x float> %9, %11
  %49 = select <4 x i1> %13, <4 x float> %48, <4 x float> zeroinitializer
  %50 = fadd <4 x float> %5, %5
  %51 = fadd <4 x float> %49, %49
  %52 = fadd <4 x float> %51, %51
  %53 = fsub <4 x float> %50, %7
  %54 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %55 = fmul <4 x float> %53, %54
  %56 = fadd <4 x float> %55, %7
  %57 = fmul <4 x float> %56, %9
  %58 = fmul <4 x float> %52, %52
  %59 = fadd <4 x float> %52, %58
  %60 = fadd <4 x float> %49, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %61 = fmul <4 x float> %60, %59
  %62 = fmul <4 x float> %49, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %63 = fadd <4 x float> %62, %61
  %64 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %49) #18
  %65 = fsub <4 x float> %64, %49
  %66 = fmul <4 x float> %7, %9
  %67 = fmul <4 x float> %53, %11
  %68 = fadd <4 x float> %9, %9
  %69 = fadd <4 x float> %68, %68
  %70 = fcmp ugt <4 x float> %69, %11
  %71 = select <4 x i1> %70, <4 x float> %65, <4 x float> %63
  %72 = fmul <4 x float> %67, %71
  %73 = fadd <4 x float> %66, %72
  %74 = fmul <4 x float> %40, %5
  %75 = fmul <4 x float> %42, %9
  %76 = fadd <4 x float> %75, %74
  %77 = fcmp ugt <4 x float> %50, %7
  %78 = select <4 x i1> %77, <4 x float> %73, <4 x float> %57
  %79 = fadd <4 x float> %76, %78
  %80 = fdiv <4 x float> %10, %11
  %81 = select <4 x i1> %13, <4 x float> %80, <4 x float> zeroinitializer
  %82 = fadd <4 x float> %6, %6
  %83 = fadd <4 x float> %81, %81
  %84 = fadd <4 x float> %83, %83
  %85 = fsub <4 x float> %82, %7
  %86 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %81
  %87 = fmul <4 x float> %85, %86
  %88 = fadd <4 x float> %87, %7
  %89 = fmul <4 x float> %88, %10
  %90 = fmul <4 x float> %84, %84
  %91 = fadd <4 x float> %84, %90
  %92 = fadd <4 x float> %81, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %93 = fmul <4 x float> %92, %91
  %94 = fmul <4 x float> %81, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %95 = fadd <4 x float> %94, %93
  %96 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %81) #18
  %97 = fsub <4 x float> %96, %81
  %98 = fmul <4 x float> %7, %10
  %99 = fmul <4 x float> %85, %11
  %100 = fadd <4 x float> %10, %10
  %101 = fadd <4 x float> %100, %100
  %102 = fcmp ugt <4 x float> %101, %11
  %103 = select <4 x i1> %102, <4 x float> %97, <4 x float> %95
  %104 = fmul <4 x float> %99, %103
  %105 = fadd <4 x float> %98, %104
  %106 = fmul <4 x float> %40, %6
  %107 = fmul <4 x float> %42, %10
  %108 = fadd <4 x float> %107, %106
  %109 = fcmp ugt <4 x float> %82, %7
  %110 = select <4 x i1> %109, <4 x float> %105, <4 x float> %89
  %111 = fadd <4 x float> %108, %110
  %112 = fmul <4 x float> %42, %11
  %113 = fadd <4 x float> %112, %7
  %114 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %115 = extractvalue { i8*, i8** } %114, 0
  %116 = extractvalue { i8*, i8** } %114, 1
  %117 = bitcast i8* %115 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %117(i64 %0, i8** %116, i64 %2, i64 %3, <4 x float> %47, <4 x float> %79, <4 x float> %111, <4 x float> %113, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L3hueEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %7
  %14 = fmul <4 x float> %5, %7
  %15 = fmul <4 x float> %6, %7
  %16 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %9, <4 x float> %10) #18
  %17 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %8, <4 x float> %16) #18
  %18 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %9, <4 x float> %10) #18
  %19 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %8, <4 x float> %18) #18
  %20 = fsub <4 x float> %17, %19
  %21 = fmul <4 x float> %20, %7
  %22 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %14, <4 x float> %15) #18
  %23 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %13, <4 x float> %22) #18
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %14, <4 x float> %15) #18
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %13, <4 x float> %24) #18
  %26 = fsub <4 x float> %25, %23
  %27 = fcmp une <4 x float> %26, zeroinitializer
  %28 = fsub <4 x float> %13, %23
  %29 = fmul <4 x float> %21, %28
  %30 = fdiv <4 x float> %29, %26
  %31 = select <4 x i1> %27, <4 x float> %30, <4 x float> zeroinitializer
  %32 = fsub <4 x float> %14, %23
  %33 = fmul <4 x float> %21, %32
  %34 = fdiv <4 x float> %33, %26
  %35 = select <4 x i1> %27, <4 x float> %34, <4 x float> zeroinitializer
  %36 = fsub <4 x float> %15, %23
  %37 = fmul <4 x float> %21, %36
  %38 = fdiv <4 x float> %37, %26
  %39 = select <4 x i1> %27, <4 x float> %38, <4 x float> zeroinitializer
  %40 = fmul <4 x float> %8, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %41 = fmul <4 x float> %9, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %42 = fadd <4 x float> %40, %41
  %43 = fmul <4 x float> %10, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %44 = fadd <4 x float> %42, %43
  %45 = fmul <4 x float> %44, %7
  %46 = fmul <4 x float> %31, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %47 = fmul <4 x float> %35, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %48 = fadd <4 x float> %46, %47
  %49 = fmul <4 x float> %39, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %50 = fadd <4 x float> %49, %48
  %51 = fsub <4 x float> %45, %50
  %52 = fadd <4 x float> %31, %51
  %53 = fadd <4 x float> %35, %51
  %54 = fadd <4 x float> %39, %51
  %55 = fmul <4 x float> %7, %11
  %56 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %53, <4 x float> %54) #18
  %57 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %52, <4 x float> %56) #18
  %58 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %53, <4 x float> %54) #18
  %59 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %52, <4 x float> %58) #18
  %60 = fmul <4 x float> %52, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %61 = fmul <4 x float> %53, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %62 = fadd <4 x float> %60, %61
  %63 = fmul <4 x float> %54, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %64 = fadd <4 x float> %63, %62
  %65 = fcmp ult <4 x float> %57, zeroinitializer
  %66 = fsub <4 x float> %52, %64
  %67 = fmul <4 x float> %64, %66
  %68 = fsub <4 x float> %64, %57
  %69 = fdiv <4 x float> %67, %68
  %70 = fadd <4 x float> %64, %69
  %71 = select <4 x i1> %65, <4 x float> %70, <4 x float> %52
  %72 = fcmp ule <4 x float> %59, %55
  %73 = fsub <4 x float> %71, %64
  %74 = fsub <4 x float> %55, %64
  %75 = fmul <4 x float> %74, %73
  %76 = fsub <4 x float> %59, %64
  %77 = fdiv <4 x float> %75, %76
  %78 = fadd <4 x float> %64, %77
  %79 = select <4 x i1> %72, <4 x float> %71, <4 x float> %78
  %80 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %79, <4 x float> zeroinitializer) #18
  %81 = fsub <4 x float> %53, %64
  %82 = fmul <4 x float> %64, %81
  %83 = fdiv <4 x float> %82, %68
  %84 = fadd <4 x float> %64, %83
  %85 = select <4 x i1> %65, <4 x float> %84, <4 x float> %53
  %86 = fsub <4 x float> %85, %64
  %87 = fmul <4 x float> %74, %86
  %88 = fdiv <4 x float> %87, %76
  %89 = fadd <4 x float> %64, %88
  %90 = select <4 x i1> %72, <4 x float> %85, <4 x float> %89
  %91 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %90, <4 x float> zeroinitializer) #18
  %92 = fsub <4 x float> %54, %64
  %93 = fmul <4 x float> %64, %92
  %94 = fdiv <4 x float> %93, %68
  %95 = fadd <4 x float> %64, %94
  %96 = select <4 x i1> %65, <4 x float> %95, <4 x float> %54
  %97 = fsub <4 x float> %96, %64
  %98 = fmul <4 x float> %74, %97
  %99 = fdiv <4 x float> %98, %76
  %100 = fadd <4 x float> %64, %99
  %101 = select <4 x i1> %72, <4 x float> %96, <4 x float> %100
  %102 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %101, <4 x float> zeroinitializer) #18
  %103 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %104 = fmul <4 x float> %103, %4
  %105 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %106 = fmul <4 x float> %105, %8
  %107 = fadd <4 x float> %106, %104
  %108 = fadd <4 x float> %107, %80
  %109 = fmul <4 x float> %103, %5
  %110 = fmul <4 x float> %105, %9
  %111 = fadd <4 x float> %110, %109
  %112 = fadd <4 x float> %111, %91
  %113 = fmul <4 x float> %103, %6
  %114 = fmul <4 x float> %105, %10
  %115 = fadd <4 x float> %114, %113
  %116 = fadd <4 x float> %115, %102
  %117 = fadd <4 x float> %7, %11
  %118 = fsub <4 x float> %117, %55
  %119 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %120 = extractvalue { i8*, i8** } %119, 0
  %121 = extractvalue { i8*, i8** } %119, 1
  %122 = bitcast i8* %120 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %122(i64 %0, i8** %121, i64 %2, i64 %3, <4 x float> %108, <4 x float> %112, <4 x float> %116, <4 x float> %118, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10saturationEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %7, %8
  %14 = fmul <4 x float> %7, %9
  %15 = fmul <4 x float> %7, %10
  %16 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %6) #18
  %17 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %4, <4 x float> %16) #18
  %18 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %6) #18
  %19 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %4, <4 x float> %18) #18
  %20 = fsub <4 x float> %17, %19
  %21 = fmul <4 x float> %20, %11
  %22 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %14, <4 x float> %15) #18
  %23 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %13, <4 x float> %22) #18
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %14, <4 x float> %15) #18
  %25 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %13, <4 x float> %24) #18
  %26 = fsub <4 x float> %25, %23
  %27 = fcmp une <4 x float> %26, zeroinitializer
  %28 = fsub <4 x float> %13, %23
  %29 = fmul <4 x float> %21, %28
  %30 = fdiv <4 x float> %29, %26
  %31 = select <4 x i1> %27, <4 x float> %30, <4 x float> zeroinitializer
  %32 = fsub <4 x float> %14, %23
  %33 = fmul <4 x float> %21, %32
  %34 = fdiv <4 x float> %33, %26
  %35 = select <4 x i1> %27, <4 x float> %34, <4 x float> zeroinitializer
  %36 = fsub <4 x float> %15, %23
  %37 = fmul <4 x float> %21, %36
  %38 = fdiv <4 x float> %37, %26
  %39 = select <4 x i1> %27, <4 x float> %38, <4 x float> zeroinitializer
  %40 = fmul <4 x float> %8, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %41 = fmul <4 x float> %9, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %42 = fadd <4 x float> %40, %41
  %43 = fmul <4 x float> %10, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %44 = fadd <4 x float> %42, %43
  %45 = fmul <4 x float> %44, %7
  %46 = fmul <4 x float> %31, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %47 = fmul <4 x float> %35, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %48 = fadd <4 x float> %46, %47
  %49 = fmul <4 x float> %39, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %50 = fadd <4 x float> %49, %48
  %51 = fsub <4 x float> %45, %50
  %52 = fadd <4 x float> %31, %51
  %53 = fadd <4 x float> %35, %51
  %54 = fadd <4 x float> %39, %51
  %55 = fmul <4 x float> %7, %11
  %56 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %53, <4 x float> %54) #18
  %57 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %52, <4 x float> %56) #18
  %58 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %53, <4 x float> %54) #18
  %59 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %52, <4 x float> %58) #18
  %60 = fmul <4 x float> %52, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %61 = fmul <4 x float> %53, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %62 = fadd <4 x float> %60, %61
  %63 = fmul <4 x float> %54, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %64 = fadd <4 x float> %63, %62
  %65 = fcmp ult <4 x float> %57, zeroinitializer
  %66 = fsub <4 x float> %52, %64
  %67 = fmul <4 x float> %64, %66
  %68 = fsub <4 x float> %64, %57
  %69 = fdiv <4 x float> %67, %68
  %70 = fadd <4 x float> %64, %69
  %71 = select <4 x i1> %65, <4 x float> %70, <4 x float> %52
  %72 = fcmp ule <4 x float> %59, %55
  %73 = fsub <4 x float> %71, %64
  %74 = fsub <4 x float> %55, %64
  %75 = fmul <4 x float> %74, %73
  %76 = fsub <4 x float> %59, %64
  %77 = fdiv <4 x float> %75, %76
  %78 = fadd <4 x float> %64, %77
  %79 = select <4 x i1> %72, <4 x float> %71, <4 x float> %78
  %80 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %79, <4 x float> zeroinitializer) #18
  %81 = fsub <4 x float> %53, %64
  %82 = fmul <4 x float> %64, %81
  %83 = fdiv <4 x float> %82, %68
  %84 = fadd <4 x float> %64, %83
  %85 = select <4 x i1> %65, <4 x float> %84, <4 x float> %53
  %86 = fsub <4 x float> %85, %64
  %87 = fmul <4 x float> %74, %86
  %88 = fdiv <4 x float> %87, %76
  %89 = fadd <4 x float> %64, %88
  %90 = select <4 x i1> %72, <4 x float> %85, <4 x float> %89
  %91 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %90, <4 x float> zeroinitializer) #18
  %92 = fsub <4 x float> %54, %64
  %93 = fmul <4 x float> %64, %92
  %94 = fdiv <4 x float> %93, %68
  %95 = fadd <4 x float> %64, %94
  %96 = select <4 x i1> %65, <4 x float> %95, <4 x float> %54
  %97 = fsub <4 x float> %96, %64
  %98 = fmul <4 x float> %74, %97
  %99 = fdiv <4 x float> %98, %76
  %100 = fadd <4 x float> %64, %99
  %101 = select <4 x i1> %72, <4 x float> %96, <4 x float> %100
  %102 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %101, <4 x float> zeroinitializer) #18
  %103 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %104 = fmul <4 x float> %103, %4
  %105 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %106 = fmul <4 x float> %105, %8
  %107 = fadd <4 x float> %106, %104
  %108 = fadd <4 x float> %107, %80
  %109 = fmul <4 x float> %103, %5
  %110 = fmul <4 x float> %105, %9
  %111 = fadd <4 x float> %110, %109
  %112 = fadd <4 x float> %111, %91
  %113 = fmul <4 x float> %103, %6
  %114 = fmul <4 x float> %105, %10
  %115 = fadd <4 x float> %114, %113
  %116 = fadd <4 x float> %115, %102
  %117 = fadd <4 x float> %7, %11
  %118 = fsub <4 x float> %117, %55
  %119 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %120 = extractvalue { i8*, i8** } %119, 0
  %121 = extractvalue { i8*, i8** } %119, 1
  %122 = bitcast i8* %120 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %122(i64 %0, i8** %121, i64 %2, i64 %3, <4 x float> %108, <4 x float> %112, <4 x float> %116, <4 x float> %118, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L5colorEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %11
  %14 = fmul <4 x float> %5, %11
  %15 = fmul <4 x float> %6, %11
  %16 = fmul <4 x float> %8, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %17 = fmul <4 x float> %9, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %18 = fadd <4 x float> %16, %17
  %19 = fmul <4 x float> %10, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %20 = fadd <4 x float> %18, %19
  %21 = fmul <4 x float> %20, %7
  %22 = fmul <4 x float> %13, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %23 = fmul <4 x float> %14, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %24 = fadd <4 x float> %22, %23
  %25 = fmul <4 x float> %15, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %26 = fadd <4 x float> %25, %24
  %27 = fsub <4 x float> %21, %26
  %28 = fadd <4 x float> %13, %27
  %29 = fadd <4 x float> %14, %27
  %30 = fadd <4 x float> %15, %27
  %31 = fmul <4 x float> %7, %11
  %32 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> %30) #18
  %33 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %28, <4 x float> %32) #18
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %29, <4 x float> %30) #18
  %35 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %28, <4 x float> %34) #18
  %36 = fmul <4 x float> %28, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %37 = fmul <4 x float> %29, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %38 = fadd <4 x float> %36, %37
  %39 = fmul <4 x float> %30, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %40 = fadd <4 x float> %39, %38
  %41 = fcmp ult <4 x float> %33, zeroinitializer
  %42 = fsub <4 x float> %28, %40
  %43 = fmul <4 x float> %40, %42
  %44 = fsub <4 x float> %40, %33
  %45 = fdiv <4 x float> %43, %44
  %46 = fadd <4 x float> %40, %45
  %47 = select <4 x i1> %41, <4 x float> %46, <4 x float> %28
  %48 = fcmp ule <4 x float> %35, %31
  %49 = fsub <4 x float> %47, %40
  %50 = fsub <4 x float> %31, %40
  %51 = fmul <4 x float> %50, %49
  %52 = fsub <4 x float> %35, %40
  %53 = fdiv <4 x float> %51, %52
  %54 = fadd <4 x float> %40, %53
  %55 = select <4 x i1> %48, <4 x float> %47, <4 x float> %54
  %56 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %55, <4 x float> zeroinitializer) #18
  %57 = fsub <4 x float> %29, %40
  %58 = fmul <4 x float> %40, %57
  %59 = fdiv <4 x float> %58, %44
  %60 = fadd <4 x float> %40, %59
  %61 = select <4 x i1> %41, <4 x float> %60, <4 x float> %29
  %62 = fsub <4 x float> %61, %40
  %63 = fmul <4 x float> %50, %62
  %64 = fdiv <4 x float> %63, %52
  %65 = fadd <4 x float> %40, %64
  %66 = select <4 x i1> %48, <4 x float> %61, <4 x float> %65
  %67 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %66, <4 x float> zeroinitializer) #18
  %68 = fsub <4 x float> %30, %40
  %69 = fmul <4 x float> %40, %68
  %70 = fdiv <4 x float> %69, %44
  %71 = fadd <4 x float> %40, %70
  %72 = select <4 x i1> %41, <4 x float> %71, <4 x float> %30
  %73 = fsub <4 x float> %72, %40
  %74 = fmul <4 x float> %50, %73
  %75 = fdiv <4 x float> %74, %52
  %76 = fadd <4 x float> %40, %75
  %77 = select <4 x i1> %48, <4 x float> %72, <4 x float> %76
  %78 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %77, <4 x float> zeroinitializer) #18
  %79 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %80 = fmul <4 x float> %79, %4
  %81 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %82 = fmul <4 x float> %81, %8
  %83 = fadd <4 x float> %82, %80
  %84 = fadd <4 x float> %83, %56
  %85 = fmul <4 x float> %79, %5
  %86 = fmul <4 x float> %81, %9
  %87 = fadd <4 x float> %86, %85
  %88 = fadd <4 x float> %87, %67
  %89 = fmul <4 x float> %79, %6
  %90 = fmul <4 x float> %81, %10
  %91 = fadd <4 x float> %90, %89
  %92 = fadd <4 x float> %91, %78
  %93 = fadd <4 x float> %7, %11
  %94 = fsub <4 x float> %93, %31
  %95 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %96 = extractvalue { i8*, i8** } %95, 0
  %97 = extractvalue { i8*, i8** } %95, 1
  %98 = bitcast i8* %96 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %98(i64 %0, i8** %97, i64 %2, i64 %3, <4 x float> %84, <4 x float> %88, <4 x float> %92, <4 x float> %94, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10luminosityEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %7, %8
  %14 = fmul <4 x float> %7, %9
  %15 = fmul <4 x float> %7, %10
  %16 = fmul <4 x float> %4, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %17 = fmul <4 x float> %5, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %18 = fadd <4 x float> %16, %17
  %19 = fmul <4 x float> %6, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %20 = fadd <4 x float> %18, %19
  %21 = fmul <4 x float> %20, %11
  %22 = fmul <4 x float> %13, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %23 = fmul <4 x float> %14, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %24 = fadd <4 x float> %22, %23
  %25 = fmul <4 x float> %15, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %26 = fadd <4 x float> %24, %25
  %27 = fsub <4 x float> %21, %26
  %28 = fadd <4 x float> %13, %27
  %29 = fadd <4 x float> %14, %27
  %30 = fadd <4 x float> %15, %27
  %31 = fmul <4 x float> %7, %11
  %32 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %29, <4 x float> %30) #18
  %33 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %28, <4 x float> %32) #18
  %34 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %29, <4 x float> %30) #18
  %35 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %28, <4 x float> %34) #18
  %36 = fmul <4 x float> %28, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %37 = fmul <4 x float> %29, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %38 = fadd <4 x float> %36, %37
  %39 = fmul <4 x float> %30, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %40 = fadd <4 x float> %39, %38
  %41 = fcmp ult <4 x float> %33, zeroinitializer
  %42 = fsub <4 x float> %28, %40
  %43 = fmul <4 x float> %40, %42
  %44 = fsub <4 x float> %40, %33
  %45 = fdiv <4 x float> %43, %44
  %46 = fadd <4 x float> %40, %45
  %47 = select <4 x i1> %41, <4 x float> %46, <4 x float> %28
  %48 = fcmp ule <4 x float> %35, %31
  %49 = fsub <4 x float> %47, %40
  %50 = fsub <4 x float> %31, %40
  %51 = fmul <4 x float> %50, %49
  %52 = fsub <4 x float> %35, %40
  %53 = fdiv <4 x float> %51, %52
  %54 = fadd <4 x float> %40, %53
  %55 = select <4 x i1> %48, <4 x float> %47, <4 x float> %54
  %56 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %55, <4 x float> zeroinitializer) #18
  %57 = fsub <4 x float> %29, %40
  %58 = fmul <4 x float> %40, %57
  %59 = fdiv <4 x float> %58, %44
  %60 = fadd <4 x float> %40, %59
  %61 = select <4 x i1> %41, <4 x float> %60, <4 x float> %29
  %62 = fsub <4 x float> %61, %40
  %63 = fmul <4 x float> %50, %62
  %64 = fdiv <4 x float> %63, %52
  %65 = fadd <4 x float> %40, %64
  %66 = select <4 x i1> %48, <4 x float> %61, <4 x float> %65
  %67 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %66, <4 x float> zeroinitializer) #18
  %68 = fsub <4 x float> %30, %40
  %69 = fmul <4 x float> %40, %68
  %70 = fdiv <4 x float> %69, %44
  %71 = fadd <4 x float> %40, %70
  %72 = select <4 x i1> %41, <4 x float> %71, <4 x float> %30
  %73 = fsub <4 x float> %72, %40
  %74 = fmul <4 x float> %50, %73
  %75 = fdiv <4 x float> %74, %52
  %76 = fadd <4 x float> %40, %75
  %77 = select <4 x i1> %48, <4 x float> %72, <4 x float> %76
  %78 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %77, <4 x float> zeroinitializer) #18
  %79 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %80 = fmul <4 x float> %79, %4
  %81 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %82 = fmul <4 x float> %81, %8
  %83 = fadd <4 x float> %82, %80
  %84 = fadd <4 x float> %83, %56
  %85 = fmul <4 x float> %79, %5
  %86 = fmul <4 x float> %81, %9
  %87 = fadd <4 x float> %86, %85
  %88 = fadd <4 x float> %87, %67
  %89 = fmul <4 x float> %79, %6
  %90 = fmul <4 x float> %81, %10
  %91 = fadd <4 x float> %90, %89
  %92 = fadd <4 x float> %91, %78
  %93 = fadd <4 x float> %7, %11
  %94 = fsub <4 x float> %93, %31
  %95 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %96 = extractvalue { i8*, i8** } %95, 0
  %97 = extractvalue { i8*, i8** } %95, 1
  %98 = bitcast i8* %96 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %98(i64 %0, i8** %97, i64 %2, i64 %3, <4 x float> %84, <4 x float> %88, <4 x float> %92, <4 x float> %94, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17srcover_rgba_8888EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %25) #18
  switch i64 %0, label %42 [
    i64 0, label %39
    i64 1, label %36
    i64 2, label %30
    i64 3, label %26
  ], !prof !260

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 2
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 2
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <4 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = bitcast i32* %24 to <2 x i32>*
  %33 = load <2 x i32>, <2 x i32>* %32, align 4
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = shufflevector <4 x i32> %34, <4 x i32> %31, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %43

36:                                               ; preds = %12
  %37 = load i32, i32* %24, align 4
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %37, i32 0
  br label %43

39:                                               ; preds = %12
  %40 = bitcast i32* %24 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  br label %43

42:                                               ; preds = %12
  unreachable

43:                                               ; preds = %39, %36, %30
  %44 = phi <4 x i32> [ %41, %39 ], [ %38, %36 ], [ %35, %30 ]
  %45 = and <4 x i32> %44, <i32 255, i32 255, i32 255, i32 255>
  %46 = sitofp <4 x i32> %45 to <4 x float>
  %47 = lshr <4 x i32> %44, <i32 8, i32 8, i32 8, i32 8>
  %48 = and <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %49 = sitofp <4 x i32> %48 to <4 x float>
  %50 = lshr <4 x i32> %44, <i32 16, i32 16, i32 16, i32 16>
  %51 = and <4 x i32> %50, <i32 255, i32 255, i32 255, i32 255>
  %52 = sitofp <4 x i32> %51 to <4 x float>
  %53 = lshr <4 x i32> %44, <i32 24, i32 24, i32 24, i32 24>
  %54 = sitofp <4 x i32> %53 to <4 x float>
  %55 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %56 = fmul <4 x float> %4, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %57 = fmul <4 x float> %55, %46
  %58 = fadd <4 x float> %56, %57
  %59 = fmul <4 x float> %5, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %60 = fmul <4 x float> %55, %49
  %61 = fadd <4 x float> %59, %60
  %62 = fmul <4 x float> %6, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %63 = fmul <4 x float> %55, %52
  %64 = fadd <4 x float> %62, %63
  %65 = fmul <4 x float> %7, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %66 = fmul <4 x float> %55, %54
  %67 = fadd <4 x float> %65, %66
  %68 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %58) #18
  %69 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %68, <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #18
  %70 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %69) #18
  %71 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %61) #18
  %72 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %71, <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #18
  %73 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %72) #18
  %74 = shl <4 x i32> %73, <i32 8, i32 8, i32 8, i32 8>
  %75 = or <4 x i32> %74, %70
  %76 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %64) #18
  %77 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %76, <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #18
  %78 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %77) #18
  %79 = shl <4 x i32> %78, <i32 16, i32 16, i32 16, i32 16>
  %80 = or <4 x i32> %75, %79
  %81 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %67) #18
  %82 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %81, <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #18
  %83 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %82) #18
  %84 = shl <4 x i32> %83, <i32 24, i32 24, i32 24, i32 24>
  %85 = or <4 x i32> %80, %84
  switch i64 %0, label %96 [
    i64 0, label %94
    i64 1, label %92
    i64 2, label %89
    i64 3, label %86
  ], !prof !260

86:                                               ; preds = %43
  %87 = extractelement <4 x i32> %85, i32 2
  %88 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %87, i32* %88, align 4
  br label %89

89:                                               ; preds = %86, %43
  %90 = bitcast i32* %24 to <2 x i32>*
  %91 = shufflevector <4 x i32> %85, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %91, <2 x i32>* %90, align 4
  br label %97

92:                                               ; preds = %43
  %93 = extractelement <4 x i32> %85, i32 0
  store i32 %93, i32* %24, align 4
  br label %97

94:                                               ; preds = %43
  %95 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %95, align 4
  br label %97

96:                                               ; preds = %43
  unreachable

97:                                               ; preds = %89, %92, %94
  %98 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %99 = extractvalue { i8*, i8** } %98, 0
  %100 = extractvalue { i8*, i8** } %98, 1
  %101 = bitcast i8* %99 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %101(i64 %0, i8** %100, i64 %2, i64 %3, <4 x float> %58, <4 x float> %61, <4 x float> %64, <4 x float> %67, <4 x float> %46, <4 x float> %49, <4 x float> %52, <4 x float> %54) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L16matrix_translateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fadd <4 x float> %19, %4
  %21 = getelementptr inbounds i8, i8* %14, i64 4
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = insertelement <4 x float> undef, float %23, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = fadd <4 x float> %25, %5
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <4 x float> %20, <4 x float> %26, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L22matrix_scale_translateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %19, %4
  %26 = fadd <4 x float> %25, %24
  %27 = getelementptr inbounds i8, i8* %14, i64 4
  %28 = bitcast i8* %27 to float*
  %29 = load float, float* %28, align 4
  %30 = insertelement <4 x float> undef, float %29, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> zeroinitializer
  %32 = getelementptr inbounds i8, i8* %14, i64 12
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <4 x float> undef, float %34, i32 0
  %36 = shufflevector <4 x float> %35, <4 x float> undef, <4 x i32> zeroinitializer
  %37 = fmul <4 x float> %31, %5
  %38 = fadd <4 x float> %37, %36
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <4 x float> %26, <4 x float> %38, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10matrix_2x3EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 16
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = fmul <4 x float> %24, %5
  %31 = fadd <4 x float> %30, %29
  %32 = fmul <4 x float> %19, %4
  %33 = fadd <4 x float> %32, %31
  %34 = getelementptr inbounds i8, i8* %14, i64 4
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = insertelement <4 x float> undef, float %36, i32 0
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <4 x i32> zeroinitializer
  %39 = getelementptr inbounds i8, i8* %14, i64 12
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = getelementptr inbounds i8, i8* %14, i64 20
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> undef, float %46, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %43, %5
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %38, %4
  %52 = fadd <4 x float> %51, %50
  %53 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %54 = extractvalue { i8*, i8** } %53, 0
  %55 = extractvalue { i8*, i8** } %53, 1
  %56 = bitcast i8* %54 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %56(i64 %0, i8** %55, i64 %2, i64 %3, <4 x float> %33, <4 x float> %52, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10matrix_3x3EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 24
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = fmul <4 x float> %29, %6
  %31 = fmul <4 x float> %24, %5
  %32 = fadd <4 x float> %31, %30
  %33 = fmul <4 x float> %19, %4
  %34 = fadd <4 x float> %33, %32
  %35 = getelementptr inbounds i8, i8* %14, i64 4
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <4 x float> undef, float %37, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %40 = getelementptr inbounds i8, i8* %14, i64 16
  %41 = bitcast i8* %40 to float*
  %42 = load float, float* %41, align 4
  %43 = insertelement <4 x float> undef, float %42, i32 0
  %44 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> zeroinitializer
  %45 = getelementptr inbounds i8, i8* %14, i64 28
  %46 = bitcast i8* %45 to float*
  %47 = load float, float* %46, align 4
  %48 = insertelement <4 x float> undef, float %47, i32 0
  %49 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> zeroinitializer
  %50 = fmul <4 x float> %49, %6
  %51 = fmul <4 x float> %44, %5
  %52 = fadd <4 x float> %51, %50
  %53 = fmul <4 x float> %39, %4
  %54 = fadd <4 x float> %53, %52
  %55 = getelementptr inbounds i8, i8* %14, i64 8
  %56 = bitcast i8* %55 to float*
  %57 = load float, float* %56, align 4
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> zeroinitializer
  %60 = getelementptr inbounds i8, i8* %14, i64 20
  %61 = bitcast i8* %60 to float*
  %62 = load float, float* %61, align 4
  %63 = insertelement <4 x float> undef, float %62, i32 0
  %64 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> zeroinitializer
  %65 = getelementptr inbounds i8, i8* %14, i64 32
  %66 = bitcast i8* %65 to float*
  %67 = load float, float* %66, align 4
  %68 = insertelement <4 x float> undef, float %67, i32 0
  %69 = shufflevector <4 x float> %68, <4 x float> undef, <4 x i32> zeroinitializer
  %70 = fmul <4 x float> %69, %6
  %71 = fmul <4 x float> %64, %5
  %72 = fadd <4 x float> %71, %70
  %73 = fmul <4 x float> %59, %4
  %74 = fadd <4 x float> %73, %72
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <4 x float> %34, <4 x float> %54, <4 x float> %74, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10matrix_3x4EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 24
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 36
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <4 x float> undef, float %32, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = fmul <4 x float> %29, %6
  %36 = fadd <4 x float> %35, %34
  %37 = fmul <4 x float> %24, %5
  %38 = fadd <4 x float> %37, %36
  %39 = fmul <4 x float> %19, %4
  %40 = fadd <4 x float> %39, %38
  %41 = getelementptr inbounds i8, i8* %14, i64 4
  %42 = bitcast i8* %41 to float*
  %43 = load float, float* %42, align 4
  %44 = insertelement <4 x float> undef, float %43, i32 0
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <4 x i32> zeroinitializer
  %46 = getelementptr inbounds i8, i8* %14, i64 16
  %47 = bitcast i8* %46 to float*
  %48 = load float, float* %47, align 4
  %49 = insertelement <4 x float> undef, float %48, i32 0
  %50 = shufflevector <4 x float> %49, <4 x float> undef, <4 x i32> zeroinitializer
  %51 = getelementptr inbounds i8, i8* %14, i64 28
  %52 = bitcast i8* %51 to float*
  %53 = load float, float* %52, align 4
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  %56 = getelementptr inbounds i8, i8* %14, i64 40
  %57 = bitcast i8* %56 to float*
  %58 = load float, float* %57, align 4
  %59 = insertelement <4 x float> undef, float %58, i32 0
  %60 = shufflevector <4 x float> %59, <4 x float> undef, <4 x i32> zeroinitializer
  %61 = fmul <4 x float> %55, %6
  %62 = fadd <4 x float> %61, %60
  %63 = fmul <4 x float> %50, %5
  %64 = fadd <4 x float> %63, %62
  %65 = fmul <4 x float> %45, %4
  %66 = fadd <4 x float> %65, %64
  %67 = getelementptr inbounds i8, i8* %14, i64 8
  %68 = bitcast i8* %67 to float*
  %69 = load float, float* %68, align 4
  %70 = insertelement <4 x float> undef, float %69, i32 0
  %71 = shufflevector <4 x float> %70, <4 x float> undef, <4 x i32> zeroinitializer
  %72 = getelementptr inbounds i8, i8* %14, i64 20
  %73 = bitcast i8* %72 to float*
  %74 = load float, float* %73, align 4
  %75 = insertelement <4 x float> undef, float %74, i32 0
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> zeroinitializer
  %77 = getelementptr inbounds i8, i8* %14, i64 32
  %78 = bitcast i8* %77 to float*
  %79 = load float, float* %78, align 4
  %80 = insertelement <4 x float> undef, float %79, i32 0
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <4 x i32> zeroinitializer
  %82 = getelementptr inbounds i8, i8* %14, i64 44
  %83 = bitcast i8* %82 to float*
  %84 = load float, float* %83, align 4
  %85 = insertelement <4 x float> undef, float %84, i32 0
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <4 x i32> zeroinitializer
  %87 = fmul <4 x float> %81, %6
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %76, %5
  %90 = fadd <4 x float> %89, %88
  %91 = fmul <4 x float> %71, %4
  %92 = fadd <4 x float> %91, %90
  %93 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %94 = extractvalue { i8*, i8** } %93, 0
  %95 = extractvalue { i8*, i8** } %93, 1
  %96 = bitcast i8* %94 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %96(i64 %0, i8** %95, i64 %2, i64 %3, <4 x float> %40, <4 x float> %66, <4 x float> %92, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10matrix_4x5EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <4 x float> undef, float %32, i32 0
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %35 = getelementptr inbounds i8, i8* %14, i64 16
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <4 x float> undef, float %37, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %40 = fmul <4 x float> %34, %7
  %41 = fadd <4 x float> %40, %39
  %42 = fmul <4 x float> %29, %6
  %43 = fadd <4 x float> %42, %41
  %44 = fmul <4 x float> %24, %5
  %45 = fadd <4 x float> %44, %43
  %46 = fmul <4 x float> %19, %4
  %47 = fadd <4 x float> %46, %45
  %48 = getelementptr inbounds i8, i8* %14, i64 20
  %49 = bitcast i8* %48 to float*
  %50 = load float, float* %49, align 4
  %51 = insertelement <4 x float> undef, float %50, i32 0
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> zeroinitializer
  %53 = getelementptr inbounds i8, i8* %14, i64 24
  %54 = bitcast i8* %53 to float*
  %55 = load float, float* %54, align 4
  %56 = insertelement <4 x float> undef, float %55, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = getelementptr inbounds i8, i8* %14, i64 28
  %59 = bitcast i8* %58 to float*
  %60 = load float, float* %59, align 4
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = getelementptr inbounds i8, i8* %14, i64 32
  %64 = bitcast i8* %63 to float*
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = getelementptr inbounds i8, i8* %14, i64 36
  %69 = bitcast i8* %68 to float*
  %70 = load float, float* %69, align 4
  %71 = insertelement <4 x float> undef, float %70, i32 0
  %72 = shufflevector <4 x float> %71, <4 x float> undef, <4 x i32> zeroinitializer
  %73 = fmul <4 x float> %67, %7
  %74 = fadd <4 x float> %73, %72
  %75 = fmul <4 x float> %62, %6
  %76 = fadd <4 x float> %75, %74
  %77 = fmul <4 x float> %57, %5
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %52, %4
  %80 = fadd <4 x float> %79, %78
  %81 = getelementptr inbounds i8, i8* %14, i64 40
  %82 = bitcast i8* %81 to float*
  %83 = load float, float* %82, align 4
  %84 = insertelement <4 x float> undef, float %83, i32 0
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <4 x i32> zeroinitializer
  %86 = getelementptr inbounds i8, i8* %14, i64 44
  %87 = bitcast i8* %86 to float*
  %88 = load float, float* %87, align 4
  %89 = insertelement <4 x float> undef, float %88, i32 0
  %90 = shufflevector <4 x float> %89, <4 x float> undef, <4 x i32> zeroinitializer
  %91 = getelementptr inbounds i8, i8* %14, i64 48
  %92 = bitcast i8* %91 to float*
  %93 = load float, float* %92, align 4
  %94 = insertelement <4 x float> undef, float %93, i32 0
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> zeroinitializer
  %96 = getelementptr inbounds i8, i8* %14, i64 52
  %97 = bitcast i8* %96 to float*
  %98 = load float, float* %97, align 4
  %99 = insertelement <4 x float> undef, float %98, i32 0
  %100 = shufflevector <4 x float> %99, <4 x float> undef, <4 x i32> zeroinitializer
  %101 = getelementptr inbounds i8, i8* %14, i64 56
  %102 = bitcast i8* %101 to float*
  %103 = load float, float* %102, align 4
  %104 = insertelement <4 x float> undef, float %103, i32 0
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> zeroinitializer
  %106 = fmul <4 x float> %100, %7
  %107 = fadd <4 x float> %106, %105
  %108 = fmul <4 x float> %95, %6
  %109 = fadd <4 x float> %108, %107
  %110 = fmul <4 x float> %90, %5
  %111 = fadd <4 x float> %110, %109
  %112 = fmul <4 x float> %85, %4
  %113 = fadd <4 x float> %112, %111
  %114 = getelementptr inbounds i8, i8* %14, i64 60
  %115 = bitcast i8* %114 to float*
  %116 = load float, float* %115, align 4
  %117 = insertelement <4 x float> undef, float %116, i32 0
  %118 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> zeroinitializer
  %119 = getelementptr inbounds i8, i8* %14, i64 64
  %120 = bitcast i8* %119 to float*
  %121 = load float, float* %120, align 4
  %122 = insertelement <4 x float> undef, float %121, i32 0
  %123 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> zeroinitializer
  %124 = getelementptr inbounds i8, i8* %14, i64 68
  %125 = bitcast i8* %124 to float*
  %126 = load float, float* %125, align 4
  %127 = insertelement <4 x float> undef, float %126, i32 0
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> zeroinitializer
  %129 = getelementptr inbounds i8, i8* %14, i64 72
  %130 = bitcast i8* %129 to float*
  %131 = load float, float* %130, align 4
  %132 = insertelement <4 x float> undef, float %131, i32 0
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> zeroinitializer
  %134 = getelementptr inbounds i8, i8* %14, i64 76
  %135 = bitcast i8* %134 to float*
  %136 = load float, float* %135, align 4
  %137 = insertelement <4 x float> undef, float %136, i32 0
  %138 = shufflevector <4 x float> %137, <4 x float> undef, <4 x i32> zeroinitializer
  %139 = fmul <4 x float> %133, %7
  %140 = fadd <4 x float> %139, %138
  %141 = fmul <4 x float> %128, %6
  %142 = fadd <4 x float> %141, %140
  %143 = fmul <4 x float> %123, %5
  %144 = fadd <4 x float> %143, %142
  %145 = fmul <4 x float> %118, %4
  %146 = fadd <4 x float> %145, %144
  %147 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %148 = extractvalue { i8*, i8** } %147, 0
  %149 = extractvalue { i8*, i8** } %147, 1
  %150 = bitcast i8* %148 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %150(i64 %0, i8** %149, i64 %2, i64 %3, <4 x float> %47, <4 x float> %80, <4 x float> %113, <4 x float> %146, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10matrix_4x3EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 16
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 32
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = fmul <4 x float> %24, %5
  %31 = fadd <4 x float> %30, %29
  %32 = fmul <4 x float> %19, %4
  %33 = fadd <4 x float> %32, %31
  %34 = getelementptr inbounds i8, i8* %14, i64 4
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = insertelement <4 x float> undef, float %36, i32 0
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <4 x i32> zeroinitializer
  %39 = getelementptr inbounds i8, i8* %14, i64 20
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = getelementptr inbounds i8, i8* %14, i64 36
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> undef, float %46, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %43, %5
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %38, %4
  %52 = fadd <4 x float> %51, %50
  %53 = getelementptr inbounds i8, i8* %14, i64 8
  %54 = bitcast i8* %53 to float*
  %55 = load float, float* %54, align 4
  %56 = insertelement <4 x float> undef, float %55, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = getelementptr inbounds i8, i8* %14, i64 24
  %59 = bitcast i8* %58 to float*
  %60 = load float, float* %59, align 4
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = getelementptr inbounds i8, i8* %14, i64 40
  %64 = bitcast i8* %63 to float*
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = fmul <4 x float> %62, %5
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %57, %4
  %71 = fadd <4 x float> %70, %69
  %72 = getelementptr inbounds i8, i8* %14, i64 12
  %73 = bitcast i8* %72 to float*
  %74 = load float, float* %73, align 4
  %75 = insertelement <4 x float> undef, float %74, i32 0
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> zeroinitializer
  %77 = getelementptr inbounds i8, i8* %14, i64 28
  %78 = bitcast i8* %77 to float*
  %79 = load float, float* %78, align 4
  %80 = insertelement <4 x float> undef, float %79, i32 0
  %81 = shufflevector <4 x float> %80, <4 x float> undef, <4 x i32> zeroinitializer
  %82 = getelementptr inbounds i8, i8* %14, i64 44
  %83 = bitcast i8* %82 to float*
  %84 = load float, float* %83, align 4
  %85 = insertelement <4 x float> undef, float %84, i32 0
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <4 x i32> zeroinitializer
  %87 = fmul <4 x float> %81, %5
  %88 = fadd <4 x float> %87, %86
  %89 = fmul <4 x float> %76, %4
  %90 = fadd <4 x float> %89, %88
  %91 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %92 = extractvalue { i8*, i8** } %91, 0
  %93 = extractvalue { i8*, i8** } %91, 1
  %94 = bitcast i8* %92 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %94(i64 %0, i8** %93, i64 %2, i64 %3, <4 x float> %33, <4 x float> %52, <4 x float> %71, <4 x float> %90, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L18matrix_perspectiveEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = fmul <4 x float> %24, %5
  %31 = fadd <4 x float> %30, %29
  %32 = fmul <4 x float> %19, %4
  %33 = fadd <4 x float> %32, %31
  %34 = getelementptr inbounds i8, i8* %14, i64 12
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = insertelement <4 x float> undef, float %36, i32 0
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <4 x i32> zeroinitializer
  %39 = getelementptr inbounds i8, i8* %14, i64 16
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = getelementptr inbounds i8, i8* %14, i64 20
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> undef, float %46, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %43, %5
  %50 = fadd <4 x float> %49, %48
  %51 = fmul <4 x float> %38, %4
  %52 = fadd <4 x float> %51, %50
  %53 = getelementptr inbounds i8, i8* %14, i64 24
  %54 = bitcast i8* %53 to float*
  %55 = load float, float* %54, align 4
  %56 = insertelement <4 x float> undef, float %55, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = getelementptr inbounds i8, i8* %14, i64 28
  %59 = bitcast i8* %58 to float*
  %60 = load float, float* %59, align 4
  %61 = insertelement <4 x float> undef, float %60, i32 0
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> zeroinitializer
  %63 = getelementptr inbounds i8, i8* %14, i64 32
  %64 = bitcast i8* %63 to float*
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = fmul <4 x float> %62, %5
  %69 = fadd <4 x float> %68, %67
  %70 = fmul <4 x float> %57, %4
  %71 = fadd <4 x float> %70, %69
  %72 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %71) #18
  %73 = fmul <4 x float> %33, %72
  %74 = fmul <4 x float> %52, %72
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <4 x float> %73, <4 x float> %74, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10parametricEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <4 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <4 x i32> %20 to <4 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 16
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = insertelement <4 x float> undef, float %24, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = fcmp ult <4 x float> %26, %21
  %28 = getelementptr inbounds i8, i8* %17, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = insertelement <4 x float> undef, float %30, i32 0
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <4 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %17, i64 24
  %34 = bitcast i8* %33 to float*
  %35 = load float, float* %34, align 4
  %36 = insertelement <4 x float> undef, float %35, i32 0
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> zeroinitializer
  %38 = fmul <4 x float> %32, %21
  %39 = fadd <4 x float> %38, %37
  %40 = getelementptr inbounds i8, i8* %17, i64 4
  %41 = bitcast i8* %40 to float*
  %42 = load float, float* %41, align 4
  %43 = insertelement <4 x float> undef, float %42, i32 0
  %44 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> zeroinitializer
  %45 = getelementptr inbounds i8, i8* %17, i64 8
  %46 = bitcast i8* %45 to float*
  %47 = load float, float* %46, align 4
  %48 = insertelement <4 x float> undef, float %47, i32 0
  %49 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> zeroinitializer
  %50 = fmul <4 x float> %44, %21
  %51 = fadd <4 x float> %50, %49
  %52 = bitcast i8* %17 to float*
  %53 = load float, float* %52, align 4
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  %56 = fcmp une <4 x float> %51, zeroinitializer
  %57 = fcmp une <4 x float> %51, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %58 = bitcast <4 x float> %51 to <4 x i32>
  %59 = sitofp <4 x i32> %58 to <4 x float>
  %60 = fmul <4 x float> %59, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %61 = and <4 x i32> %58, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %62 = or <4 x i32> %61, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %63 = bitcast <4 x i32> %62 to <4 x float>
  %64 = fadd <4 x float> %60, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %65 = fmul <4 x float> %63, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %66 = fsub <4 x float> %64, %65
  %67 = fadd <4 x float> %63, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %68 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %67
  %69 = fsub <4 x float> %66, %68
  %70 = fmul <4 x float> %55, %69
  %71 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %70) #18
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fcmp olt <4 x float> %70, %72
  %74 = select <4 x i1> %73, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %75 = fsub <4 x float> %72, %74
  %76 = fsub <4 x float> %70, %75
  %77 = fadd <4 x float> %70, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %78 = fmul <4 x float> %76, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %79 = fsub <4 x float> %77, %78
  %80 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %76
  %81 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %80
  %82 = fadd <4 x float> %79, %81
  %83 = fmul <4 x float> %82, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %84 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %83) #18
  %85 = and <4 x i1> %57, %56
  %86 = select <4 x i1> %85, <4 x i32> %84, <4 x i32> %58
  %87 = bitcast <4 x i32> %86 to <4 x float>
  %88 = getelementptr inbounds i8, i8* %17, i64 20
  %89 = bitcast i8* %88 to float*
  %90 = load float, float* %89, align 4
  %91 = insertelement <4 x float> undef, float %90, i32 0
  %92 = shufflevector <4 x float> %91, <4 x float> undef, <4 x i32> zeroinitializer
  %93 = fadd <4 x float> %92, %87
  %94 = select <4 x i1> %27, <4 x float> %93, <4 x float> %39
  %95 = bitcast <4 x float> %94 to <4 x i32>
  %96 = or <4 x i32> %19, %95
  %97 = and <4 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %98 = and <4 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %99 = bitcast <4 x i32> %98 to <4 x float>
  %100 = fcmp ult <4 x float> %26, %99
  %101 = fmul <4 x float> %32, %99
  %102 = fadd <4 x float> %101, %37
  %103 = fmul <4 x float> %44, %99
  %104 = fadd <4 x float> %103, %49
  %105 = fcmp une <4 x float> %104, zeroinitializer
  %106 = fcmp une <4 x float> %104, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %107 = bitcast <4 x float> %104 to <4 x i32>
  %108 = sitofp <4 x i32> %107 to <4 x float>
  %109 = fmul <4 x float> %108, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %110 = and <4 x i32> %107, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %111 = or <4 x i32> %110, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %112 = bitcast <4 x i32> %111 to <4 x float>
  %113 = fadd <4 x float> %109, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %114 = fmul <4 x float> %112, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %115 = fsub <4 x float> %113, %114
  %116 = fadd <4 x float> %112, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %117 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %116
  %118 = fsub <4 x float> %115, %117
  %119 = fmul <4 x float> %55, %118
  %120 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %119) #18
  %121 = sitofp <4 x i32> %120 to <4 x float>
  %122 = fcmp olt <4 x float> %119, %121
  %123 = select <4 x i1> %122, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %124 = fsub <4 x float> %121, %123
  %125 = fsub <4 x float> %119, %124
  %126 = fadd <4 x float> %119, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %127 = fmul <4 x float> %125, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %128 = fsub <4 x float> %126, %127
  %129 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %125
  %130 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %129
  %131 = fadd <4 x float> %128, %130
  %132 = fmul <4 x float> %131, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %133 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %132) #18
  %134 = and <4 x i1> %106, %105
  %135 = select <4 x i1> %134, <4 x i32> %133, <4 x i32> %107
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = fadd <4 x float> %92, %136
  %138 = select <4 x i1> %100, <4 x float> %137, <4 x float> %102
  %139 = bitcast <4 x float> %138 to <4 x i32>
  %140 = or <4 x i32> %97, %139
  %141 = and <4 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %142 = and <4 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %143 = bitcast <4 x i32> %142 to <4 x float>
  %144 = fcmp ult <4 x float> %26, %143
  %145 = fmul <4 x float> %32, %143
  %146 = fadd <4 x float> %145, %37
  %147 = fmul <4 x float> %44, %143
  %148 = fadd <4 x float> %147, %49
  %149 = fcmp une <4 x float> %148, zeroinitializer
  %150 = fcmp une <4 x float> %148, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %151 = bitcast <4 x float> %148 to <4 x i32>
  %152 = sitofp <4 x i32> %151 to <4 x float>
  %153 = fmul <4 x float> %152, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %154 = and <4 x i32> %151, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %155 = or <4 x i32> %154, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %156 = bitcast <4 x i32> %155 to <4 x float>
  %157 = fadd <4 x float> %153, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %158 = fmul <4 x float> %156, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %159 = fsub <4 x float> %157, %158
  %160 = fadd <4 x float> %156, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %161 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %160
  %162 = fsub <4 x float> %159, %161
  %163 = fmul <4 x float> %55, %162
  %164 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %163) #18
  %165 = sitofp <4 x i32> %164 to <4 x float>
  %166 = fcmp olt <4 x float> %163, %165
  %167 = select <4 x i1> %166, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %168 = fsub <4 x float> %165, %167
  %169 = fsub <4 x float> %163, %168
  %170 = fadd <4 x float> %163, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %171 = fmul <4 x float> %169, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %172 = fsub <4 x float> %170, %171
  %173 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %169
  %174 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %173
  %175 = fadd <4 x float> %172, %174
  %176 = fmul <4 x float> %175, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %177 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %176) #18
  %178 = and <4 x i1> %150, %149
  %179 = select <4 x i1> %178, <4 x i32> %177, <4 x i32> %151
  %180 = bitcast <4 x i32> %179 to <4 x float>
  %181 = fadd <4 x float> %92, %180
  %182 = select <4 x i1> %144, <4 x float> %181, <4 x float> %146
  %183 = bitcast <4 x float> %182 to <4 x i32>
  %184 = or <4 x i32> %141, %183
  %185 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #13, !srcloc !259
  %186 = extractvalue { i8*, i8** } %185, 0
  %187 = extractvalue { i8*, i8** } %185, 1
  %188 = bitcast i8* %186 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %189 = bitcast <4 x i32> %96 to <4 x float>
  %190 = bitcast <4 x i32> %140 to <4 x float>
  %191 = bitcast <4 x i32> %184 to <4 x float>
  tail call void %188(i64 %0, i8** %187, i64 %2, i64 %3, <4 x float> %189, <4 x float> %190, <4 x float> %191, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6gamma_EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to float*
  %20 = and <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %21 = and <4 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = load float, float* %19, align 4
  %24 = insertelement <4 x float> undef, float %23, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = fcmp une <4 x float> %22, zeroinitializer
  %27 = fcmp une <4 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = sitofp <4 x i32> %21 to <4 x float>
  %29 = fmul <4 x float> %28, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %30 = and <4 x i32> %13, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %31 = or <4 x i32> %30, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = fadd <4 x float> %29, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %34 = fmul <4 x float> %32, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %35 = fsub <4 x float> %33, %34
  %36 = fadd <4 x float> %32, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %37 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %36
  %38 = fsub <4 x float> %35, %37
  %39 = fmul <4 x float> %38, %25
  %40 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %39) #18
  %41 = sitofp <4 x i32> %40 to <4 x float>
  %42 = fcmp olt <4 x float> %39, %41
  %43 = select <4 x i1> %42, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %44 = fsub <4 x float> %41, %43
  %45 = fsub <4 x float> %39, %44
  %46 = fadd <4 x float> %39, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %47 = fmul <4 x float> %45, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %48 = fsub <4 x float> %46, %47
  %49 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %45
  %50 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %49
  %51 = fadd <4 x float> %48, %50
  %52 = fmul <4 x float> %51, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %53 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %52) #18
  %54 = and <4 x i1> %27, %26
  %55 = select <4 x i1> %54, <4 x i32> %53, <4 x i32> %21
  %56 = or <4 x i32> %55, %20
  %57 = and <4 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %58 = and <4 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %59 = bitcast <4 x i32> %58 to <4 x float>
  %60 = fcmp une <4 x float> %59, zeroinitializer
  %61 = fcmp une <4 x float> %59, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %62 = sitofp <4 x i32> %58 to <4 x float>
  %63 = fmul <4 x float> %62, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %64 = and <4 x i32> %14, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %65 = or <4 x i32> %64, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %66 = bitcast <4 x i32> %65 to <4 x float>
  %67 = fadd <4 x float> %63, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %68 = fmul <4 x float> %66, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %69 = fsub <4 x float> %67, %68
  %70 = fadd <4 x float> %66, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %71 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %70
  %72 = fsub <4 x float> %69, %71
  %73 = fmul <4 x float> %72, %25
  %74 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %73) #18
  %75 = sitofp <4 x i32> %74 to <4 x float>
  %76 = fcmp olt <4 x float> %73, %75
  %77 = select <4 x i1> %76, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %78 = fsub <4 x float> %75, %77
  %79 = fsub <4 x float> %73, %78
  %80 = fadd <4 x float> %73, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %81 = fmul <4 x float> %79, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %82 = fsub <4 x float> %80, %81
  %83 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %79
  %84 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %83
  %85 = fadd <4 x float> %82, %84
  %86 = fmul <4 x float> %85, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %87 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %86) #18
  %88 = and <4 x i1> %61, %60
  %89 = select <4 x i1> %88, <4 x i32> %87, <4 x i32> %58
  %90 = or <4 x i32> %89, %57
  %91 = and <4 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %92 = and <4 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %93 = bitcast <4 x i32> %92 to <4 x float>
  %94 = fcmp une <4 x float> %93, zeroinitializer
  %95 = fcmp une <4 x float> %93, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %96 = sitofp <4 x i32> %92 to <4 x float>
  %97 = fmul <4 x float> %96, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %98 = and <4 x i32> %15, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %99 = or <4 x i32> %98, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %100 = bitcast <4 x i32> %99 to <4 x float>
  %101 = fadd <4 x float> %97, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %102 = fmul <4 x float> %100, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %103 = fsub <4 x float> %101, %102
  %104 = fadd <4 x float> %100, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %105 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %104
  %106 = fsub <4 x float> %103, %105
  %107 = fmul <4 x float> %106, %25
  %108 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %107) #18
  %109 = sitofp <4 x i32> %108 to <4 x float>
  %110 = fcmp olt <4 x float> %107, %109
  %111 = select <4 x i1> %110, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %112 = fsub <4 x float> %109, %111
  %113 = fsub <4 x float> %107, %112
  %114 = fadd <4 x float> %107, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %115 = fmul <4 x float> %113, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %116 = fsub <4 x float> %114, %115
  %117 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %113
  %118 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %117
  %119 = fadd <4 x float> %116, %118
  %120 = fmul <4 x float> %119, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %121 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %120) #18
  %122 = and <4 x i1> %95, %94
  %123 = select <4 x i1> %122, <4 x i32> %121, <4 x i32> %92
  %124 = or <4 x i32> %123, %91
  %125 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #13, !srcloc !259
  %126 = extractvalue { i8*, i8** } %125, 0
  %127 = extractvalue { i8*, i8** } %125, 1
  %128 = bitcast i8* %126 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %129 = bitcast <4 x i32> %56 to <4 x float>
  %130 = bitcast <4 x i32> %90 to <4 x float>
  %131 = bitcast <4 x i32> %124 to <4 x float>
  tail call void %128(i64 %0, i8** %127, i64 %2, i64 %3, <4 x float> %129, <4 x float> %130, <4 x float> %131, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L5PQishEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <4 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <4 x i32> %20 to <4 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 8
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = insertelement <4 x float> undef, float %24, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = getelementptr inbounds i8, i8* %17, i64 12
  %28 = bitcast i8* %27 to float*
  %29 = load float, float* %28, align 4
  %30 = insertelement <4 x float> undef, float %29, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> zeroinitializer
  %32 = fcmp une <4 x float> %21, zeroinitializer
  %33 = fcmp une <4 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %34 = sitofp <4 x i32> %20 to <4 x float>
  %35 = fmul <4 x float> %34, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %36 = and <4 x i32> %13, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %37 = or <4 x i32> %36, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fadd <4 x float> %35, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %40 = fmul <4 x float> %38, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %41 = fsub <4 x float> %39, %40
  %42 = fadd <4 x float> %38, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %43 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %42
  %44 = fsub <4 x float> %41, %43
  %45 = fmul <4 x float> %44, %31
  %46 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %45) #18
  %47 = sitofp <4 x i32> %46 to <4 x float>
  %48 = fcmp olt <4 x float> %45, %47
  %49 = select <4 x i1> %48, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %50 = fsub <4 x float> %47, %49
  %51 = fsub <4 x float> %45, %50
  %52 = fadd <4 x float> %45, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %53 = fmul <4 x float> %51, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %54 = fsub <4 x float> %52, %53
  %55 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %51
  %56 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %55
  %57 = fadd <4 x float> %54, %56
  %58 = fmul <4 x float> %57, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %59 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %58) #18
  %60 = and <4 x i1> %33, %32
  %61 = select <4 x i1> %60, <4 x i32> %59, <4 x i32> %20
  %62 = bitcast <4 x i32> %61 to <4 x float>
  %63 = getelementptr inbounds i8, i8* %17, i64 4
  %64 = bitcast i8* %63 to float*
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> undef, float %65, i32 0
  %67 = shufflevector <4 x float> %66, <4 x float> undef, <4 x i32> zeroinitializer
  %68 = fmul <4 x float> %26, %62
  %69 = fadd <4 x float> %68, %67
  %70 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %69, <4 x float> zeroinitializer) #18
  %71 = getelementptr inbounds i8, i8* %17, i64 20
  %72 = bitcast i8* %71 to float*
  %73 = load float, float* %72, align 4
  %74 = insertelement <4 x float> undef, float %73, i32 0
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <4 x i32> zeroinitializer
  %76 = getelementptr inbounds i8, i8* %17, i64 16
  %77 = bitcast i8* %76 to float*
  %78 = load float, float* %77, align 4
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = fmul <4 x float> %75, %62
  %82 = fadd <4 x float> %81, %80
  %83 = fdiv <4 x float> %70, %82
  %84 = getelementptr inbounds i8, i8* %17, i64 24
  %85 = bitcast i8* %84 to float*
  %86 = load float, float* %85, align 4
  %87 = insertelement <4 x float> undef, float %86, i32 0
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <4 x i32> zeroinitializer
  %89 = fcmp une <4 x float> %83, zeroinitializer
  %90 = fcmp une <4 x float> %83, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %91 = bitcast <4 x float> %83 to <4 x i32>
  %92 = sitofp <4 x i32> %91 to <4 x float>
  %93 = fmul <4 x float> %92, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %94 = and <4 x i32> %91, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %95 = or <4 x i32> %94, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %96 = bitcast <4 x i32> %95 to <4 x float>
  %97 = fadd <4 x float> %93, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %98 = fmul <4 x float> %96, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %99 = fsub <4 x float> %97, %98
  %100 = fadd <4 x float> %96, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %101 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %100
  %102 = fsub <4 x float> %99, %101
  %103 = fmul <4 x float> %88, %102
  %104 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %103) #18
  %105 = sitofp <4 x i32> %104 to <4 x float>
  %106 = fcmp olt <4 x float> %103, %105
  %107 = select <4 x i1> %106, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %108 = fsub <4 x float> %105, %107
  %109 = fsub <4 x float> %103, %108
  %110 = fadd <4 x float> %103, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %111 = fmul <4 x float> %109, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %112 = fsub <4 x float> %110, %111
  %113 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %109
  %114 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %113
  %115 = fadd <4 x float> %112, %114
  %116 = fmul <4 x float> %115, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %117 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %116) #18
  %118 = and <4 x i1> %90, %89
  %119 = select <4 x i1> %118, <4 x i32> %117, <4 x i32> %91
  %120 = or <4 x i32> %119, %19
  %121 = and <4 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %122 = and <4 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %123 = bitcast <4 x i32> %122 to <4 x float>
  %124 = fcmp une <4 x float> %123, zeroinitializer
  %125 = fcmp une <4 x float> %123, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %126 = sitofp <4 x i32> %122 to <4 x float>
  %127 = fmul <4 x float> %126, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %128 = and <4 x i32> %14, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %129 = or <4 x i32> %128, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %130 = bitcast <4 x i32> %129 to <4 x float>
  %131 = fadd <4 x float> %127, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %132 = fmul <4 x float> %130, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %133 = fsub <4 x float> %131, %132
  %134 = fadd <4 x float> %130, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %135 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %134
  %136 = fsub <4 x float> %133, %135
  %137 = fmul <4 x float> %136, %31
  %138 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %137) #18
  %139 = sitofp <4 x i32> %138 to <4 x float>
  %140 = fcmp olt <4 x float> %137, %139
  %141 = select <4 x i1> %140, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %142 = fsub <4 x float> %139, %141
  %143 = fsub <4 x float> %137, %142
  %144 = fadd <4 x float> %137, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %145 = fmul <4 x float> %143, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %146 = fsub <4 x float> %144, %145
  %147 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %143
  %148 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %147
  %149 = fadd <4 x float> %146, %148
  %150 = fmul <4 x float> %149, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %151 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %150) #18
  %152 = and <4 x i1> %125, %124
  %153 = select <4 x i1> %152, <4 x i32> %151, <4 x i32> %122
  %154 = bitcast <4 x i32> %153 to <4 x float>
  %155 = fmul <4 x float> %26, %154
  %156 = fadd <4 x float> %67, %155
  %157 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %156, <4 x float> zeroinitializer) #18
  %158 = fmul <4 x float> %75, %154
  %159 = fadd <4 x float> %80, %158
  %160 = fdiv <4 x float> %157, %159
  %161 = fcmp une <4 x float> %160, zeroinitializer
  %162 = fcmp une <4 x float> %160, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %163 = bitcast <4 x float> %160 to <4 x i32>
  %164 = sitofp <4 x i32> %163 to <4 x float>
  %165 = fmul <4 x float> %164, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %166 = and <4 x i32> %163, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %167 = or <4 x i32> %166, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %168 = bitcast <4 x i32> %167 to <4 x float>
  %169 = fadd <4 x float> %165, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %170 = fmul <4 x float> %168, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %171 = fsub <4 x float> %169, %170
  %172 = fadd <4 x float> %168, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %173 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %172
  %174 = fsub <4 x float> %171, %173
  %175 = fmul <4 x float> %88, %174
  %176 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %175) #18
  %177 = sitofp <4 x i32> %176 to <4 x float>
  %178 = fcmp olt <4 x float> %175, %177
  %179 = select <4 x i1> %178, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %180 = fsub <4 x float> %177, %179
  %181 = fsub <4 x float> %175, %180
  %182 = fadd <4 x float> %175, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %183 = fmul <4 x float> %181, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %184 = fsub <4 x float> %182, %183
  %185 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %181
  %186 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %185
  %187 = fadd <4 x float> %184, %186
  %188 = fmul <4 x float> %187, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %189 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %188) #18
  %190 = and <4 x i1> %162, %161
  %191 = select <4 x i1> %190, <4 x i32> %189, <4 x i32> %163
  %192 = or <4 x i32> %191, %121
  %193 = and <4 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %194 = and <4 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %195 = bitcast <4 x i32> %194 to <4 x float>
  %196 = fcmp une <4 x float> %195, zeroinitializer
  %197 = fcmp une <4 x float> %195, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %198 = sitofp <4 x i32> %194 to <4 x float>
  %199 = fmul <4 x float> %198, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %200 = and <4 x i32> %15, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %201 = or <4 x i32> %200, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %202 = bitcast <4 x i32> %201 to <4 x float>
  %203 = fadd <4 x float> %199, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %204 = fmul <4 x float> %202, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %205 = fsub <4 x float> %203, %204
  %206 = fadd <4 x float> %202, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %207 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %206
  %208 = fsub <4 x float> %205, %207
  %209 = fmul <4 x float> %208, %31
  %210 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %209) #18
  %211 = sitofp <4 x i32> %210 to <4 x float>
  %212 = fcmp olt <4 x float> %209, %211
  %213 = select <4 x i1> %212, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %214 = fsub <4 x float> %211, %213
  %215 = fsub <4 x float> %209, %214
  %216 = fadd <4 x float> %209, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %217 = fmul <4 x float> %215, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %218 = fsub <4 x float> %216, %217
  %219 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %215
  %220 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %219
  %221 = fadd <4 x float> %218, %220
  %222 = fmul <4 x float> %221, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %223 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %222) #18
  %224 = and <4 x i1> %197, %196
  %225 = select <4 x i1> %224, <4 x i32> %223, <4 x i32> %194
  %226 = bitcast <4 x i32> %225 to <4 x float>
  %227 = fmul <4 x float> %26, %226
  %228 = fadd <4 x float> %67, %227
  %229 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %228, <4 x float> zeroinitializer) #18
  %230 = fmul <4 x float> %75, %226
  %231 = fadd <4 x float> %80, %230
  %232 = fdiv <4 x float> %229, %231
  %233 = fcmp une <4 x float> %232, zeroinitializer
  %234 = fcmp une <4 x float> %232, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %235 = bitcast <4 x float> %232 to <4 x i32>
  %236 = sitofp <4 x i32> %235 to <4 x float>
  %237 = fmul <4 x float> %236, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %238 = and <4 x i32> %235, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %239 = or <4 x i32> %238, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %240 = bitcast <4 x i32> %239 to <4 x float>
  %241 = fadd <4 x float> %237, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %242 = fmul <4 x float> %240, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %243 = fsub <4 x float> %241, %242
  %244 = fadd <4 x float> %240, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %245 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %244
  %246 = fsub <4 x float> %243, %245
  %247 = fmul <4 x float> %88, %246
  %248 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %247) #18
  %249 = sitofp <4 x i32> %248 to <4 x float>
  %250 = fcmp olt <4 x float> %247, %249
  %251 = select <4 x i1> %250, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %252 = fsub <4 x float> %249, %251
  %253 = fsub <4 x float> %247, %252
  %254 = fadd <4 x float> %247, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %255 = fmul <4 x float> %253, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %256 = fsub <4 x float> %254, %255
  %257 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %253
  %258 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %257
  %259 = fadd <4 x float> %256, %258
  %260 = fmul <4 x float> %259, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %261 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %260) #18
  %262 = and <4 x i1> %234, %233
  %263 = select <4 x i1> %262, <4 x i32> %261, <4 x i32> %235
  %264 = or <4 x i32> %263, %193
  %265 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #13, !srcloc !259
  %266 = extractvalue { i8*, i8** } %265, 0
  %267 = extractvalue { i8*, i8** } %265, 1
  %268 = bitcast i8* %266 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %269 = bitcast <4 x i32> %120 to <4 x float>
  %270 = bitcast <4 x i32> %192 to <4 x float>
  %271 = bitcast <4 x i32> %264 to <4 x float>
  tail call void %268(i64 %0, i8** %267, i64 %2, i64 %3, <4 x float> %269, <4 x float> %270, <4 x float> %271, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6HLGishEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <4 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <4 x i32> %20 to <4 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 4
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds i8, i8* %17, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds i8, i8* %17, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds i8, i8* %17, i64 16
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds i8, i8* %17, i64 20
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds i8, i8* %17, i64 24
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fadd float %39, 1.000000e+00
  %41 = insertelement <4 x float> undef, float %24, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fmul <4 x float> %42, %21
  %44 = fcmp ugt <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %45 = insertelement <4 x float> undef, float %27, i32 0
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <4 x i32> zeroinitializer
  %47 = fcmp une <4 x float> %43, zeroinitializer
  %48 = fcmp une <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %49 = bitcast <4 x float> %43 to <4 x i32>
  %50 = sitofp <4 x i32> %49 to <4 x float>
  %51 = fmul <4 x float> %50, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %52 = and <4 x i32> %49, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %53 = or <4 x i32> %52, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = fadd <4 x float> %51, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %56 = fmul <4 x float> %54, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %57 = fsub <4 x float> %55, %56
  %58 = fadd <4 x float> %54, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %59 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %58
  %60 = fsub <4 x float> %57, %59
  %61 = fmul <4 x float> %46, %60
  %62 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %61) #18
  %63 = sitofp <4 x i32> %62 to <4 x float>
  %64 = fcmp olt <4 x float> %61, %63
  %65 = select <4 x i1> %64, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %66 = fsub <4 x float> %63, %65
  %67 = fsub <4 x float> %61, %66
  %68 = fadd <4 x float> %61, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %69 = fmul <4 x float> %67, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %70 = fsub <4 x float> %68, %69
  %71 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %67
  %72 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %71
  %73 = fadd <4 x float> %70, %72
  %74 = fmul <4 x float> %73, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %75 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %74) #18
  %76 = and <4 x i1> %48, %47
  %77 = select <4 x i1> %76, <4 x i32> %75, <4 x i32> %49
  %78 = insertelement <4 x float> undef, float %36, i32 0
  %79 = shufflevector <4 x float> %78, <4 x float> undef, <4 x i32> zeroinitializer
  %80 = fsub <4 x float> %21, %79
  %81 = insertelement <4 x float> undef, float %30, i32 0
  %82 = shufflevector <4 x float> %81, <4 x float> undef, <4 x i32> zeroinitializer
  %83 = fmul <4 x float> %82, %80
  %84 = fmul <4 x float> %83, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %85 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %84) #18
  %86 = sitofp <4 x i32> %85 to <4 x float>
  %87 = fcmp olt <4 x float> %84, %86
  %88 = select <4 x i1> %87, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %89 = fsub <4 x float> %86, %88
  %90 = fsub <4 x float> %84, %89
  %91 = fadd <4 x float> %84, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %92 = fmul <4 x float> %90, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %93 = fsub <4 x float> %91, %92
  %94 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %90
  %95 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %94
  %96 = fadd <4 x float> %93, %95
  %97 = fmul <4 x float> %96, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %98 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %97) #18
  %99 = bitcast <4 x i32> %98 to <4 x float>
  %100 = insertelement <4 x float> undef, float %33, i32 0
  %101 = shufflevector <4 x float> %100, <4 x float> undef, <4 x i32> zeroinitializer
  %102 = fadd <4 x float> %101, %99
  %103 = bitcast <4 x float> %102 to <4 x i32>
  %104 = select <4 x i1> %44, <4 x i32> %103, <4 x i32> %77
  %105 = insertelement <4 x float> undef, float %40, i32 0
  %106 = shufflevector <4 x float> %105, <4 x float> undef, <4 x i32> zeroinitializer
  %107 = or <4 x i32> %104, %19
  %108 = bitcast <4 x i32> %107 to <4 x float>
  %109 = fmul <4 x float> %106, %108
  %110 = and <4 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %111 = and <4 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %112 = bitcast <4 x i32> %111 to <4 x float>
  %113 = fmul <4 x float> %42, %112
  %114 = fcmp ugt <4 x float> %113, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %115 = fcmp une <4 x float> %113, zeroinitializer
  %116 = fcmp une <4 x float> %113, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %117 = bitcast <4 x float> %113 to <4 x i32>
  %118 = sitofp <4 x i32> %117 to <4 x float>
  %119 = fmul <4 x float> %118, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %120 = and <4 x i32> %117, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %121 = or <4 x i32> %120, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %122 = bitcast <4 x i32> %121 to <4 x float>
  %123 = fadd <4 x float> %119, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %124 = fmul <4 x float> %122, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %125 = fsub <4 x float> %123, %124
  %126 = fadd <4 x float> %122, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %127 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %126
  %128 = fsub <4 x float> %125, %127
  %129 = fmul <4 x float> %46, %128
  %130 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %129) #18
  %131 = sitofp <4 x i32> %130 to <4 x float>
  %132 = fcmp olt <4 x float> %129, %131
  %133 = select <4 x i1> %132, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %134 = fsub <4 x float> %131, %133
  %135 = fsub <4 x float> %129, %134
  %136 = fadd <4 x float> %129, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %137 = fmul <4 x float> %135, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %138 = fsub <4 x float> %136, %137
  %139 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %135
  %140 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %139
  %141 = fadd <4 x float> %138, %140
  %142 = fmul <4 x float> %141, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %143 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %142) #18
  %144 = and <4 x i1> %116, %115
  %145 = select <4 x i1> %144, <4 x i32> %143, <4 x i32> %117
  %146 = fsub <4 x float> %112, %79
  %147 = fmul <4 x float> %82, %146
  %148 = fmul <4 x float> %147, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %149 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %148) #18
  %150 = sitofp <4 x i32> %149 to <4 x float>
  %151 = fcmp olt <4 x float> %148, %150
  %152 = select <4 x i1> %151, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %153 = fsub <4 x float> %150, %152
  %154 = fsub <4 x float> %148, %153
  %155 = fadd <4 x float> %148, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %156 = fmul <4 x float> %154, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %157 = fsub <4 x float> %155, %156
  %158 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %154
  %159 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %158
  %160 = fadd <4 x float> %157, %159
  %161 = fmul <4 x float> %160, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %162 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %161) #18
  %163 = bitcast <4 x i32> %162 to <4 x float>
  %164 = fadd <4 x float> %101, %163
  %165 = bitcast <4 x float> %164 to <4 x i32>
  %166 = select <4 x i1> %114, <4 x i32> %165, <4 x i32> %145
  %167 = or <4 x i32> %166, %110
  %168 = bitcast <4 x i32> %167 to <4 x float>
  %169 = fmul <4 x float> %106, %168
  %170 = and <4 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %171 = and <4 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %172 = bitcast <4 x i32> %171 to <4 x float>
  %173 = fmul <4 x float> %42, %172
  %174 = fcmp ugt <4 x float> %173, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %175 = fcmp une <4 x float> %173, zeroinitializer
  %176 = fcmp une <4 x float> %173, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %177 = bitcast <4 x float> %173 to <4 x i32>
  %178 = sitofp <4 x i32> %177 to <4 x float>
  %179 = fmul <4 x float> %178, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %180 = and <4 x i32> %177, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %181 = or <4 x i32> %180, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %182 = bitcast <4 x i32> %181 to <4 x float>
  %183 = fadd <4 x float> %179, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %184 = fmul <4 x float> %182, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %185 = fsub <4 x float> %183, %184
  %186 = fadd <4 x float> %182, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %187 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %186
  %188 = fsub <4 x float> %185, %187
  %189 = fmul <4 x float> %46, %188
  %190 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %189) #18
  %191 = sitofp <4 x i32> %190 to <4 x float>
  %192 = fcmp olt <4 x float> %189, %191
  %193 = select <4 x i1> %192, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %194 = fsub <4 x float> %191, %193
  %195 = fsub <4 x float> %189, %194
  %196 = fadd <4 x float> %189, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %197 = fmul <4 x float> %195, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %198 = fsub <4 x float> %196, %197
  %199 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %195
  %200 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %199
  %201 = fadd <4 x float> %198, %200
  %202 = fmul <4 x float> %201, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %203 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %202) #18
  %204 = and <4 x i1> %176, %175
  %205 = select <4 x i1> %204, <4 x i32> %203, <4 x i32> %177
  %206 = fsub <4 x float> %172, %79
  %207 = fmul <4 x float> %82, %206
  %208 = fmul <4 x float> %207, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %209 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %208) #18
  %210 = sitofp <4 x i32> %209 to <4 x float>
  %211 = fcmp olt <4 x float> %208, %210
  %212 = select <4 x i1> %211, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %213 = fsub <4 x float> %210, %212
  %214 = fsub <4 x float> %208, %213
  %215 = fadd <4 x float> %208, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %216 = fmul <4 x float> %214, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %217 = fsub <4 x float> %215, %216
  %218 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %214
  %219 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %218
  %220 = fadd <4 x float> %217, %219
  %221 = fmul <4 x float> %220, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %222 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %221) #18
  %223 = bitcast <4 x i32> %222 to <4 x float>
  %224 = fadd <4 x float> %101, %223
  %225 = bitcast <4 x float> %224 to <4 x i32>
  %226 = select <4 x i1> %174, <4 x i32> %225, <4 x i32> %205
  %227 = or <4 x i32> %226, %170
  %228 = bitcast <4 x i32> %227 to <4 x float>
  %229 = fmul <4 x float> %106, %228
  %230 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #13, !srcloc !259
  %231 = extractvalue { i8*, i8** } %230, 0
  %232 = extractvalue { i8*, i8** } %230, 1
  %233 = bitcast i8* %231 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %233(i64 %0, i8** %232, i64 %2, i64 %3, <4 x float> %109, <4 x float> %169, <4 x float> %229, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9HLGinvishEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <4 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <4 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <4 x i32> %20 to <4 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 4
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds i8, i8* %17, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds i8, i8* %17, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds i8, i8* %17, i64 16
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds i8, i8* %17, i64 20
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds i8, i8* %17, i64 24
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fadd float %39, 1.000000e+00
  %41 = insertelement <4 x float> undef, float %40, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = fdiv <4 x float> %21, %42
  %44 = fcmp ugt <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %45 = insertelement <4 x float> undef, float %24, i32 0
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <4 x i32> zeroinitializer
  %47 = insertelement <4 x float> undef, float %27, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fcmp une <4 x float> %43, zeroinitializer
  %50 = fcmp une <4 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = bitcast <4 x float> %43 to <4 x i32>
  %52 = sitofp <4 x i32> %51 to <4 x float>
  %53 = fmul <4 x float> %52, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %54 = and <4 x i32> %51, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %55 = or <4 x i32> %54, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %56 = bitcast <4 x i32> %55 to <4 x float>
  %57 = fadd <4 x float> %53, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %58 = fmul <4 x float> %56, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %59 = fsub <4 x float> %57, %58
  %60 = fadd <4 x float> %56, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %61 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %60
  %62 = fsub <4 x float> %59, %61
  %63 = fmul <4 x float> %48, %62
  %64 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %63) #18
  %65 = sitofp <4 x i32> %64 to <4 x float>
  %66 = fcmp olt <4 x float> %63, %65
  %67 = select <4 x i1> %66, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %68 = fsub <4 x float> %65, %67
  %69 = fsub <4 x float> %63, %68
  %70 = fadd <4 x float> %63, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %71 = fmul <4 x float> %69, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %72 = fsub <4 x float> %70, %71
  %73 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %69
  %74 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %73
  %75 = fadd <4 x float> %72, %74
  %76 = fmul <4 x float> %75, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %77 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %76) #18
  %78 = and <4 x i1> %50, %49
  %79 = select <4 x i1> %78, <4 x i32> %77, <4 x i32> %51
  %80 = bitcast <4 x i32> %79 to <4 x float>
  %81 = fmul <4 x float> %46, %80
  %82 = insertelement <4 x float> undef, float %30, i32 0
  %83 = shufflevector <4 x float> %82, <4 x float> undef, <4 x i32> zeroinitializer
  %84 = insertelement <4 x float> undef, float %33, i32 0
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <4 x i32> zeroinitializer
  %86 = fsub <4 x float> %43, %85
  %87 = bitcast <4 x float> %86 to <4 x i32>
  %88 = sitofp <4 x i32> %87 to <4 x float>
  %89 = fmul <4 x float> %88, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %90 = and <4 x i32> %87, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %91 = or <4 x i32> %90, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %92 = bitcast <4 x i32> %91 to <4 x float>
  %93 = fadd <4 x float> %89, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %94 = fmul <4 x float> %92, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %95 = fsub <4 x float> %93, %94
  %96 = fadd <4 x float> %92, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %97 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %96
  %98 = fsub <4 x float> %95, %97
  %99 = fmul <4 x float> %98, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %100 = fmul <4 x float> %83, %99
  %101 = insertelement <4 x float> undef, float %36, i32 0
  %102 = shufflevector <4 x float> %101, <4 x float> undef, <4 x i32> zeroinitializer
  %103 = fadd <4 x float> %102, %100
  %104 = select <4 x i1> %44, <4 x float> %103, <4 x float> %81
  %105 = bitcast <4 x float> %104 to <4 x i32>
  %106 = or <4 x i32> %19, %105
  %107 = and <4 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = and <4 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %109 = bitcast <4 x i32> %108 to <4 x float>
  %110 = fdiv <4 x float> %109, %42
  %111 = fcmp ugt <4 x float> %110, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %112 = fcmp une <4 x float> %110, zeroinitializer
  %113 = fcmp une <4 x float> %110, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %114 = bitcast <4 x float> %110 to <4 x i32>
  %115 = sitofp <4 x i32> %114 to <4 x float>
  %116 = fmul <4 x float> %115, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %117 = and <4 x i32> %114, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %118 = or <4 x i32> %117, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %119 = bitcast <4 x i32> %118 to <4 x float>
  %120 = fadd <4 x float> %116, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %121 = fmul <4 x float> %119, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %122 = fsub <4 x float> %120, %121
  %123 = fadd <4 x float> %119, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %124 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %123
  %125 = fsub <4 x float> %122, %124
  %126 = fmul <4 x float> %48, %125
  %127 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %126) #18
  %128 = sitofp <4 x i32> %127 to <4 x float>
  %129 = fcmp olt <4 x float> %126, %128
  %130 = select <4 x i1> %129, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %131 = fsub <4 x float> %128, %130
  %132 = fsub <4 x float> %126, %131
  %133 = fadd <4 x float> %126, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %134 = fmul <4 x float> %132, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %135 = fsub <4 x float> %133, %134
  %136 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %132
  %137 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %136
  %138 = fadd <4 x float> %135, %137
  %139 = fmul <4 x float> %138, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %140 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %139) #18
  %141 = and <4 x i1> %113, %112
  %142 = select <4 x i1> %141, <4 x i32> %140, <4 x i32> %114
  %143 = bitcast <4 x i32> %142 to <4 x float>
  %144 = fmul <4 x float> %46, %143
  %145 = fsub <4 x float> %110, %85
  %146 = bitcast <4 x float> %145 to <4 x i32>
  %147 = sitofp <4 x i32> %146 to <4 x float>
  %148 = fmul <4 x float> %147, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %149 = and <4 x i32> %146, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %150 = or <4 x i32> %149, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %151 = bitcast <4 x i32> %150 to <4 x float>
  %152 = fadd <4 x float> %148, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %153 = fmul <4 x float> %151, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %154 = fsub <4 x float> %152, %153
  %155 = fadd <4 x float> %151, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %156 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %155
  %157 = fsub <4 x float> %154, %156
  %158 = fmul <4 x float> %157, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %159 = fmul <4 x float> %83, %158
  %160 = fadd <4 x float> %102, %159
  %161 = select <4 x i1> %111, <4 x float> %160, <4 x float> %144
  %162 = bitcast <4 x float> %161 to <4 x i32>
  %163 = or <4 x i32> %107, %162
  %164 = and <4 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %165 = and <4 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %166 = bitcast <4 x i32> %165 to <4 x float>
  %167 = fdiv <4 x float> %166, %42
  %168 = fcmp ugt <4 x float> %167, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %169 = fcmp une <4 x float> %167, zeroinitializer
  %170 = fcmp une <4 x float> %167, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %171 = bitcast <4 x float> %167 to <4 x i32>
  %172 = sitofp <4 x i32> %171 to <4 x float>
  %173 = fmul <4 x float> %172, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %174 = and <4 x i32> %171, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %175 = or <4 x i32> %174, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %176 = bitcast <4 x i32> %175 to <4 x float>
  %177 = fadd <4 x float> %173, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %178 = fmul <4 x float> %176, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %179 = fsub <4 x float> %177, %178
  %180 = fadd <4 x float> %176, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %181 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %180
  %182 = fsub <4 x float> %179, %181
  %183 = fmul <4 x float> %48, %182
  %184 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %183) #18
  %185 = sitofp <4 x i32> %184 to <4 x float>
  %186 = fcmp olt <4 x float> %183, %185
  %187 = select <4 x i1> %186, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %188 = fsub <4 x float> %185, %187
  %189 = fsub <4 x float> %183, %188
  %190 = fadd <4 x float> %183, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %191 = fmul <4 x float> %189, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %192 = fsub <4 x float> %190, %191
  %193 = fsub <4 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %189
  %194 = fdiv <4 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %193
  %195 = fadd <4 x float> %192, %194
  %196 = fmul <4 x float> %195, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %197 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %196) #18
  %198 = and <4 x i1> %170, %169
  %199 = select <4 x i1> %198, <4 x i32> %197, <4 x i32> %171
  %200 = bitcast <4 x i32> %199 to <4 x float>
  %201 = fmul <4 x float> %46, %200
  %202 = fsub <4 x float> %167, %85
  %203 = bitcast <4 x float> %202 to <4 x i32>
  %204 = sitofp <4 x i32> %203 to <4 x float>
  %205 = fmul <4 x float> %204, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %206 = and <4 x i32> %203, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %207 = or <4 x i32> %206, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %208 = bitcast <4 x i32> %207 to <4 x float>
  %209 = fadd <4 x float> %205, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %210 = fmul <4 x float> %208, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %211 = fsub <4 x float> %209, %210
  %212 = fadd <4 x float> %208, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %213 = fdiv <4 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %212
  %214 = fsub <4 x float> %211, %213
  %215 = fmul <4 x float> %214, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %216 = fmul <4 x float> %83, %215
  %217 = fadd <4 x float> %102, %216
  %218 = select <4 x i1> %168, <4 x float> %217, <4 x float> %201
  %219 = bitcast <4 x float> %218 to <4 x i32>
  %220 = or <4 x i32> %164, %219
  %221 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #13, !srcloc !259
  %222 = extractvalue { i8*, i8** } %221, 0
  %223 = extractvalue { i8*, i8** } %221, 1
  %224 = bitcast i8* %222 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %225 = bitcast <4 x i32> %106 to <4 x float>
  %226 = bitcast <4 x i32> %163 to <4 x float>
  %227 = bitcast <4 x i32> %220 to <4 x float>
  tail call void %224(i64 %0, i8** %223, i64 %2, i64 %3, <4 x float> %225, <4 x float> %226, <4 x float> %227, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8mirror_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 4
  %19 = bitcast i8* %18 to float*
  %20 = load float, float* %19, align 4
  %21 = insertelement <4 x float> undef, float %17, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = fsub <4 x float> %4, %22
  %24 = fadd float %17, %17
  %25 = insertelement <4 x float> undef, float %24, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = fmul float %20, 5.000000e-01
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = fmul <4 x float> %23, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %30) #18
  %32 = sitofp <4 x i32> %31 to <4 x float>
  %33 = fcmp olt <4 x float> %30, %32
  %34 = select <4 x i1> %33, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %35 = fsub <4 x float> %32, %34
  %36 = fmul <4 x float> %26, %35
  %37 = fsub <4 x float> %23, %36
  %38 = fsub <4 x float> %37, %22
  %39 = fsub <4 x float> zeroinitializer, %38
  %40 = bitcast <4 x float> %38 to <4 x i32>
  %41 = bitcast <4 x float> %39 to <4 x i32>
  %42 = and <4 x i32> %41, %40
  %43 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %44 = extractvalue { i8*, i8** } %43, 0
  %45 = extractvalue { i8*, i8** } %43, 1
  %46 = bitcast i8* %44 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %47 = bitcast <4 x i32> %42 to <4 x float>
  tail call void %46(i64 %0, i8** %45, i64 %2, i64 %3, <4 x float> %47, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8repeat_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 4
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = fmul <4 x float> %20, %4
  %22 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %21) #18
  %23 = sitofp <4 x i32> %22 to <4 x float>
  %24 = fcmp olt <4 x float> %21, %23
  %25 = select <4 x i1> %24, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %26 = fsub <4 x float> %23, %25
  %27 = bitcast i8* %14 to float*
  %28 = load float, float* %27, align 4
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = fmul <4 x float> %30, %26
  %32 = fsub <4 x float> %4, %31
  %33 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %34 = extractvalue { i8*, i8** } %33, 0
  %35 = extractvalue { i8*, i8** } %33, 1
  %36 = bitcast i8* %34 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %36(i64 %0, i8** %35, i64 %2, i64 %3, <4 x float> %32, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8mirror_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 4
  %19 = bitcast i8* %18 to float*
  %20 = load float, float* %19, align 4
  %21 = insertelement <4 x float> undef, float %17, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = fsub <4 x float> %5, %22
  %24 = fadd float %17, %17
  %25 = insertelement <4 x float> undef, float %24, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = fmul float %20, 5.000000e-01
  %28 = insertelement <4 x float> undef, float %27, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = fmul <4 x float> %23, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %30) #18
  %32 = sitofp <4 x i32> %31 to <4 x float>
  %33 = fcmp olt <4 x float> %30, %32
  %34 = select <4 x i1> %33, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %35 = fsub <4 x float> %32, %34
  %36 = fmul <4 x float> %26, %35
  %37 = fsub <4 x float> %23, %36
  %38 = fsub <4 x float> %37, %22
  %39 = fsub <4 x float> zeroinitializer, %38
  %40 = bitcast <4 x float> %38 to <4 x i32>
  %41 = bitcast <4 x float> %39 to <4 x i32>
  %42 = and <4 x i32> %41, %40
  %43 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %44 = extractvalue { i8*, i8** } %43, 0
  %45 = extractvalue { i8*, i8** } %43, 1
  %46 = bitcast i8* %44 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %47 = bitcast <4 x i32> %42 to <4 x float>
  tail call void %46(i64 %0, i8** %45, i64 %2, i64 %3, <4 x float> %4, <4 x float> %47, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8repeat_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 4
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = fmul <4 x float> %20, %5
  %22 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %21) #18
  %23 = sitofp <4 x i32> %22 to <4 x float>
  %24 = fcmp olt <4 x float> %21, %23
  %25 = select <4 x i1> %24, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %26 = fsub <4 x float> %23, %25
  %27 = bitcast i8* %14 to float*
  %28 = load float, float* %27, align 4
  %29 = insertelement <4 x float> undef, float %28, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  %31 = fmul <4 x float> %30, %26
  %32 = fsub <4 x float> %5, %31
  %33 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %34 = extractvalue { i8*, i8** } %33, 0
  %35 = extractvalue { i8*, i8** } %33, 1
  %36 = bitcast i8* %34 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %36(i64 %0, i8** %35, i64 %2, i64 %3, <4 x float> %4, <4 x float> %32, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7decal_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = fcmp oge <4 x float> %4, zeroinitializer
  %20 = insertelement <4 x float> undef, float %18, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = fcmp ogt <4 x float> %21, %4
  %23 = and <4 x i1> %22, %19
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> %24, <4 x i32>* %25, align 4
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7decal_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 68
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = fcmp oge <4 x float> %5, zeroinitializer
  %20 = insertelement <4 x float> undef, float %18, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = fcmp ogt <4 x float> %21, %5
  %23 = and <4 x i1> %22, %19
  %24 = sext <4 x i1> %23 to <4 x i32>
  %25 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> %24, <4 x i32>* %25, align 4
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L13decal_x_and_yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 68
  %20 = bitcast i8* %19 to float*
  %21 = load float, float* %20, align 4
  %22 = fcmp oge <4 x float> %4, zeroinitializer
  %23 = insertelement <4 x float> undef, float %18, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fcmp ogt <4 x float> %24, %4
  %26 = fcmp oge <4 x float> %5, zeroinitializer
  %27 = insertelement <4 x float> undef, float %21, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = fcmp ogt <4 x float> %28, %5
  %30 = and <4 x i1> %26, %22
  %31 = and <4 x i1> %30, %25
  %32 = and <4 x i1> %31, %29
  %33 = sext <4 x i1> %32 to <4 x i32>
  %34 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %34, align 4
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L16check_decal_maskEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = bitcast <4 x float> %7 to <4 x i32>
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = and <4 x i32> %21, %13
  %23 = and <4 x i32> %21, %14
  %24 = and <4 x i32> %21, %15
  %25 = and <4 x i32> %21, %16
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %19) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %30 = bitcast <4 x i32> %22 to <4 x float>
  %31 = bitcast <4 x i32> %23 to <4 x float>
  %32 = bitcast <4 x i32> %24 to <4 x float>
  %33 = bitcast <4 x i32> %25 to <4 x float>
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %30, <4 x float> %31, <4 x float> %32, <4 x float> %33, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8negate_xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %4
  %14 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %15 = extractvalue { i8*, i8** } %14, 0
  %16 = extractvalue { i8*, i8** } %14, 1
  %17 = bitcast i8* %15 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %17(i64 %0, i8** %16, i64 %2, i64 %3, <4 x float> %13, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8bilinearEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fadd <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %17 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %16) #18
  %18 = sitofp <4 x i32> %17 to <4 x float>
  %19 = fcmp olt <4 x float> %16, %18
  %20 = select <4 x i1> %19, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %21 = fsub <4 x float> %18, %20
  %22 = fsub <4 x float> %16, %21
  %23 = fadd <4 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %23) #18
  %25 = sitofp <4 x i32> %24 to <4 x float>
  %26 = fcmp olt <4 x float> %23, %25
  %27 = select <4 x i1> %26, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %28 = fsub <4 x float> %25, %27
  %29 = fsub <4 x float> %23, %28
  %30 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %31 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29
  %32 = fadd <4 x float> %5, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %33 = fadd <4 x float> %4, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %34 = getelementptr inbounds i8, i8* %14, i64 28
  %35 = bitcast i8* %34 to i32*
  %36 = getelementptr inbounds i8, i8* %14, i64 12
  %37 = bitcast i8* %36 to float*
  %38 = getelementptr inbounds i8, i8* %14, i64 36
  %39 = bitcast i8* %38 to float*
  %40 = getelementptr inbounds i8, i8* %14, i64 32
  %41 = bitcast i8* %40 to i32*
  %42 = getelementptr inbounds i8, i8* %14, i64 16
  %43 = bitcast i8* %42 to float*
  %44 = getelementptr inbounds i8, i8* %14, i64 40
  %45 = bitcast i8* %44 to float*
  %46 = getelementptr inbounds i8, i8* %14, i64 24
  %47 = bitcast i8* %46 to i32*
  %48 = bitcast i8* %14 to i32**
  %49 = getelementptr inbounds i8, i8* %14, i64 8
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %35, align 4
  %52 = load float, float* %37, align 4
  %53 = load float, float* %39, align 4
  switch i32 %51, label %91 [
    i32 3, label %92
    i32 0, label %92
    i32 1, label %54
    i32 2, label %67
  ]

54:                                               ; preds = %12
  %55 = insertelement <4 x float> undef, float %53, i32 0
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <4 x i32> zeroinitializer
  %57 = fmul <4 x float> %33, %56
  %58 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %57) #18
  %59 = sitofp <4 x i32> %58 to <4 x float>
  %60 = fcmp olt <4 x float> %57, %59
  %61 = select <4 x i1> %60, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %62 = fsub <4 x float> %59, %61
  %63 = insertelement <4 x float> undef, float %52, i32 0
  %64 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> zeroinitializer
  %65 = fmul <4 x float> %64, %62
  %66 = fsub <4 x float> %33, %65
  br label %92

67:                                               ; preds = %12
  %68 = insertelement <4 x float> undef, float %52, i32 0
  %69 = shufflevector <4 x float> %68, <4 x float> undef, <4 x i32> zeroinitializer
  %70 = fsub <4 x float> %33, %69
  %71 = fadd float %52, %52
  %72 = insertelement <4 x float> undef, float %71, i32 0
  %73 = shufflevector <4 x float> %72, <4 x float> undef, <4 x i32> zeroinitializer
  %74 = fmul float %53, 5.000000e-01
  %75 = insertelement <4 x float> undef, float %74, i32 0
  %76 = shufflevector <4 x float> %75, <4 x float> undef, <4 x i32> zeroinitializer
  %77 = fmul <4 x float> %70, %76
  %78 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %77) #18
  %79 = sitofp <4 x i32> %78 to <4 x float>
  %80 = fcmp olt <4 x float> %77, %79
  %81 = select <4 x i1> %80, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %82 = fsub <4 x float> %79, %81
  %83 = fmul <4 x float> %73, %82
  %84 = fsub <4 x float> %70, %83
  %85 = fsub <4 x float> %84, %69
  %86 = fsub <4 x float> zeroinitializer, %85
  %87 = bitcast <4 x float> %85 to <4 x i32>
  %88 = bitcast <4 x float> %86 to <4 x i32>
  %89 = and <4 x i32> %88, %87
  %90 = bitcast <4 x i32> %89 to <4 x float>
  br label %92

91:                                               ; preds = %504, %351, %198, %12
  tail call void @llvm.trap() #18
  unreachable

92:                                               ; preds = %67, %54, %12, %12
  %93 = phi <4 x float> [ %90, %67 ], [ %66, %54 ], [ %33, %12 ], [ %33, %12 ]
  %94 = load i32, i32* %41, align 8
  %95 = load float, float* %43, align 8
  %96 = load float, float* %45, align 8
  switch i32 %94, label %134 [
    i32 3, label %135
    i32 0, label %135
    i32 1, label %97
    i32 2, label %110
  ]

97:                                               ; preds = %92
  %98 = insertelement <4 x float> undef, float %96, i32 0
  %99 = shufflevector <4 x float> %98, <4 x float> undef, <4 x i32> zeroinitializer
  %100 = fmul <4 x float> %32, %99
  %101 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %100) #18
  %102 = sitofp <4 x i32> %101 to <4 x float>
  %103 = fcmp olt <4 x float> %100, %102
  %104 = select <4 x i1> %103, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %105 = fsub <4 x float> %102, %104
  %106 = insertelement <4 x float> undef, float %95, i32 0
  %107 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> zeroinitializer
  %108 = fmul <4 x float> %107, %105
  %109 = fsub <4 x float> %32, %108
  br label %135

110:                                              ; preds = %92
  %111 = insertelement <4 x float> undef, float %95, i32 0
  %112 = shufflevector <4 x float> %111, <4 x float> undef, <4 x i32> zeroinitializer
  %113 = fsub <4 x float> %32, %112
  %114 = fadd float %95, %95
  %115 = insertelement <4 x float> undef, float %114, i32 0
  %116 = shufflevector <4 x float> %115, <4 x float> undef, <4 x i32> zeroinitializer
  %117 = fmul float %96, 5.000000e-01
  %118 = insertelement <4 x float> undef, float %117, i32 0
  %119 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> zeroinitializer
  %120 = fmul <4 x float> %113, %119
  %121 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %120) #18
  %122 = sitofp <4 x i32> %121 to <4 x float>
  %123 = fcmp olt <4 x float> %120, %122
  %124 = select <4 x i1> %123, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %125 = fsub <4 x float> %122, %124
  %126 = fmul <4 x float> %116, %125
  %127 = fsub <4 x float> %113, %126
  %128 = fsub <4 x float> %127, %112
  %129 = fsub <4 x float> zeroinitializer, %128
  %130 = bitcast <4 x float> %128 to <4 x i32>
  %131 = bitcast <4 x float> %129 to <4 x i32>
  %132 = and <4 x i32> %131, %130
  %133 = bitcast <4 x i32> %132 to <4 x float>
  br label %135

134:                                              ; preds = %555, %403, %250, %92
  tail call void @llvm.trap() #18
  unreachable

135:                                              ; preds = %110, %97, %92, %92
  %136 = phi <4 x float> [ %133, %110 ], [ %109, %97 ], [ %32, %92 ], [ %32, %92 ]
  %137 = load i32, i32* %47, align 8
  switch i32 %137, label %198 [
    i32 4, label %138
    i32 6, label %138
  ]

138:                                              ; preds = %135, %135
  %139 = insertelement <4 x float> undef, float %52, i32 0
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <4 x i32> zeroinitializer
  %141 = bitcast <4 x float> %140 to <4 x i32>
  %142 = add <4 x i32> %141, <i32 -1, i32 -1, i32 -1, i32 -1>
  %143 = bitcast <4 x i32> %142 to <4 x float>
  %144 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %93) #18
  %145 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %144, <4 x float> %143) #18
  %146 = insertelement <4 x float> undef, float %95, i32 0
  %147 = shufflevector <4 x float> %146, <4 x float> undef, <4 x i32> zeroinitializer
  %148 = bitcast <4 x float> %147 to <4 x i32>
  %149 = add <4 x i32> %148, <i32 -1, i32 -1, i32 -1, i32 -1>
  %150 = bitcast <4 x i32> %149 to <4 x float>
  %151 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %136) #18
  %152 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %151, <4 x float> %150) #18
  %153 = load i32*, i32** %48, align 8
  %154 = fptosi <4 x float> %152 to <4 x i32>
  %155 = load i32, i32* %50, align 8
  %156 = insertelement <4 x i32> undef, i32 %155, i32 0
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> zeroinitializer
  %158 = mul <4 x i32> %157, %154
  %159 = fptosi <4 x float> %145 to <4 x i32>
  %160 = add <4 x i32> %158, %159
  %161 = extractelement <4 x i32> %160, i32 0
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds i32, i32* %153, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = insertelement <4 x i32> undef, i32 %164, i32 0
  %166 = extractelement <4 x i32> %160, i32 1
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds i32, i32* %153, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = insertelement <4 x i32> %165, i32 %169, i32 1
  %171 = extractelement <4 x i32> %160, i32 2
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds i32, i32* %153, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = insertelement <4 x i32> %170, i32 %174, i32 2
  %176 = extractelement <4 x i32> %160, i32 3
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds i32, i32* %153, i64 %177
  %179 = load i32, i32* %178, align 4
  %180 = insertelement <4 x i32> %175, i32 %179, i32 3
  %181 = and <4 x i32> %180, <i32 255, i32 255, i32 255, i32 255>
  %182 = sitofp <4 x i32> %181 to <4 x float>
  %183 = fmul <4 x float> %182, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %184 = lshr <4 x i32> %180, <i32 8, i32 8, i32 8, i32 8>
  %185 = and <4 x i32> %184, <i32 255, i32 255, i32 255, i32 255>
  %186 = sitofp <4 x i32> %185 to <4 x float>
  %187 = fmul <4 x float> %186, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %188 = lshr <4 x i32> %180, <i32 16, i32 16, i32 16, i32 16>
  %189 = and <4 x i32> %188, <i32 255, i32 255, i32 255, i32 255>
  %190 = sitofp <4 x i32> %189 to <4 x float>
  %191 = fmul <4 x float> %190, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %192 = lshr <4 x i32> %180, <i32 24, i32 24, i32 24, i32 24>
  %193 = sitofp <4 x i32> %192 to <4 x float>
  %194 = fmul <4 x float> %193, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %195 = icmp eq i32 %137, 6
  %196 = select i1 %195, <4 x float> %191, <4 x float> %183
  %197 = select i1 %195, <4 x float> %183, <4 x float> %191
  br label %198

198:                                              ; preds = %138, %135
  %199 = phi <4 x float> [ zeroinitializer, %135 ], [ %196, %138 ]
  %200 = phi <4 x float> [ zeroinitializer, %135 ], [ %187, %138 ]
  %201 = phi <4 x float> [ zeroinitializer, %135 ], [ %197, %138 ]
  %202 = phi <4 x float> [ zeroinitializer, %135 ], [ %194, %138 ]
  %203 = fmul <4 x float> %30, %31
  %204 = fmul <4 x float> %203, %199
  %205 = fadd <4 x float> %204, zeroinitializer
  %206 = fmul <4 x float> %203, %200
  %207 = fadd <4 x float> %206, zeroinitializer
  %208 = fmul <4 x float> %203, %201
  %209 = fadd <4 x float> %208, zeroinitializer
  %210 = fmul <4 x float> %203, %202
  %211 = fadd <4 x float> %210, zeroinitializer
  %212 = fadd <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %51, label %91 [
    i32 3, label %250
    i32 0, label %250
    i32 1, label %237
    i32 2, label %213
  ]

213:                                              ; preds = %198
  %214 = insertelement <4 x float> undef, float %52, i32 0
  %215 = shufflevector <4 x float> %214, <4 x float> undef, <4 x i32> zeroinitializer
  %216 = fsub <4 x float> %212, %215
  %217 = fadd float %52, %52
  %218 = insertelement <4 x float> undef, float %217, i32 0
  %219 = shufflevector <4 x float> %218, <4 x float> undef, <4 x i32> zeroinitializer
  %220 = fmul float %53, 5.000000e-01
  %221 = insertelement <4 x float> undef, float %220, i32 0
  %222 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> zeroinitializer
  %223 = fmul <4 x float> %216, %222
  %224 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %223) #18
  %225 = sitofp <4 x i32> %224 to <4 x float>
  %226 = fcmp olt <4 x float> %223, %225
  %227 = select <4 x i1> %226, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %228 = fsub <4 x float> %225, %227
  %229 = fmul <4 x float> %219, %228
  %230 = fsub <4 x float> %216, %229
  %231 = fsub <4 x float> %230, %215
  %232 = fsub <4 x float> zeroinitializer, %231
  %233 = bitcast <4 x float> %231 to <4 x i32>
  %234 = bitcast <4 x float> %232 to <4 x i32>
  %235 = and <4 x i32> %234, %233
  %236 = bitcast <4 x i32> %235 to <4 x float>
  br label %250

237:                                              ; preds = %198
  %238 = insertelement <4 x float> undef, float %53, i32 0
  %239 = shufflevector <4 x float> %238, <4 x float> undef, <4 x i32> zeroinitializer
  %240 = fmul <4 x float> %212, %239
  %241 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %240) #18
  %242 = sitofp <4 x i32> %241 to <4 x float>
  %243 = fcmp olt <4 x float> %240, %242
  %244 = select <4 x i1> %243, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %245 = fsub <4 x float> %242, %244
  %246 = insertelement <4 x float> undef, float %52, i32 0
  %247 = shufflevector <4 x float> %246, <4 x float> undef, <4 x i32> zeroinitializer
  %248 = fmul <4 x float> %247, %245
  %249 = fsub <4 x float> %212, %248
  br label %250

250:                                              ; preds = %237, %213, %198, %198
  %251 = phi <4 x float> [ %236, %213 ], [ %249, %237 ], [ %212, %198 ], [ %212, %198 ]
  switch i32 %94, label %134 [
    i32 3, label %289
    i32 0, label %289
    i32 1, label %276
    i32 2, label %252
  ]

252:                                              ; preds = %250
  %253 = insertelement <4 x float> undef, float %95, i32 0
  %254 = shufflevector <4 x float> %253, <4 x float> undef, <4 x i32> zeroinitializer
  %255 = fsub <4 x float> %32, %254
  %256 = fadd float %95, %95
  %257 = insertelement <4 x float> undef, float %256, i32 0
  %258 = shufflevector <4 x float> %257, <4 x float> undef, <4 x i32> zeroinitializer
  %259 = fmul float %96, 5.000000e-01
  %260 = insertelement <4 x float> undef, float %259, i32 0
  %261 = shufflevector <4 x float> %260, <4 x float> undef, <4 x i32> zeroinitializer
  %262 = fmul <4 x float> %255, %261
  %263 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %262) #18
  %264 = sitofp <4 x i32> %263 to <4 x float>
  %265 = fcmp olt <4 x float> %262, %264
  %266 = select <4 x i1> %265, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %267 = fsub <4 x float> %264, %266
  %268 = fmul <4 x float> %258, %267
  %269 = fsub <4 x float> %255, %268
  %270 = fsub <4 x float> %269, %254
  %271 = fsub <4 x float> zeroinitializer, %270
  %272 = bitcast <4 x float> %270 to <4 x i32>
  %273 = bitcast <4 x float> %271 to <4 x i32>
  %274 = and <4 x i32> %273, %272
  %275 = bitcast <4 x i32> %274 to <4 x float>
  br label %289

276:                                              ; preds = %250
  %277 = insertelement <4 x float> undef, float %96, i32 0
  %278 = shufflevector <4 x float> %277, <4 x float> undef, <4 x i32> zeroinitializer
  %279 = fmul <4 x float> %32, %278
  %280 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %279) #18
  %281 = sitofp <4 x i32> %280 to <4 x float>
  %282 = fcmp olt <4 x float> %279, %281
  %283 = select <4 x i1> %282, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %284 = fsub <4 x float> %281, %283
  %285 = insertelement <4 x float> undef, float %95, i32 0
  %286 = shufflevector <4 x float> %285, <4 x float> undef, <4 x i32> zeroinitializer
  %287 = fmul <4 x float> %286, %284
  %288 = fsub <4 x float> %32, %287
  br label %289

289:                                              ; preds = %276, %252, %250, %250
  %290 = phi <4 x float> [ %275, %252 ], [ %288, %276 ], [ %32, %250 ], [ %32, %250 ]
  switch i32 %137, label %351 [
    i32 4, label %291
    i32 6, label %291
  ]

291:                                              ; preds = %289, %289
  %292 = insertelement <4 x float> undef, float %52, i32 0
  %293 = shufflevector <4 x float> %292, <4 x float> undef, <4 x i32> zeroinitializer
  %294 = bitcast <4 x float> %293 to <4 x i32>
  %295 = add <4 x i32> %294, <i32 -1, i32 -1, i32 -1, i32 -1>
  %296 = bitcast <4 x i32> %295 to <4 x float>
  %297 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %251) #18
  %298 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %297, <4 x float> %296) #18
  %299 = insertelement <4 x float> undef, float %95, i32 0
  %300 = shufflevector <4 x float> %299, <4 x float> undef, <4 x i32> zeroinitializer
  %301 = bitcast <4 x float> %300 to <4 x i32>
  %302 = add <4 x i32> %301, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = bitcast <4 x i32> %302 to <4 x float>
  %304 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %290) #18
  %305 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %304, <4 x float> %303) #18
  %306 = load i32*, i32** %48, align 8
  %307 = fptosi <4 x float> %305 to <4 x i32>
  %308 = load i32, i32* %50, align 8
  %309 = insertelement <4 x i32> undef, i32 %308, i32 0
  %310 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> zeroinitializer
  %311 = mul <4 x i32> %310, %307
  %312 = fptosi <4 x float> %298 to <4 x i32>
  %313 = add <4 x i32> %311, %312
  %314 = extractelement <4 x i32> %313, i32 0
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds i32, i32* %306, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = insertelement <4 x i32> undef, i32 %317, i32 0
  %319 = extractelement <4 x i32> %313, i32 1
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds i32, i32* %306, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = insertelement <4 x i32> %318, i32 %322, i32 1
  %324 = extractelement <4 x i32> %313, i32 2
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds i32, i32* %306, i64 %325
  %327 = load i32, i32* %326, align 4
  %328 = insertelement <4 x i32> %323, i32 %327, i32 2
  %329 = extractelement <4 x i32> %313, i32 3
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds i32, i32* %306, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = insertelement <4 x i32> %328, i32 %332, i32 3
  %334 = and <4 x i32> %333, <i32 255, i32 255, i32 255, i32 255>
  %335 = sitofp <4 x i32> %334 to <4 x float>
  %336 = fmul <4 x float> %335, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %337 = lshr <4 x i32> %333, <i32 8, i32 8, i32 8, i32 8>
  %338 = and <4 x i32> %337, <i32 255, i32 255, i32 255, i32 255>
  %339 = sitofp <4 x i32> %338 to <4 x float>
  %340 = fmul <4 x float> %339, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %341 = lshr <4 x i32> %333, <i32 16, i32 16, i32 16, i32 16>
  %342 = and <4 x i32> %341, <i32 255, i32 255, i32 255, i32 255>
  %343 = sitofp <4 x i32> %342 to <4 x float>
  %344 = fmul <4 x float> %343, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %345 = lshr <4 x i32> %333, <i32 24, i32 24, i32 24, i32 24>
  %346 = sitofp <4 x i32> %345 to <4 x float>
  %347 = fmul <4 x float> %346, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %348 = icmp eq i32 %137, 6
  %349 = select i1 %348, <4 x float> %344, <4 x float> %336
  %350 = select i1 %348, <4 x float> %336, <4 x float> %344
  br label %351

351:                                              ; preds = %291, %289
  %352 = phi <4 x float> [ zeroinitializer, %289 ], [ %349, %291 ]
  %353 = phi <4 x float> [ zeroinitializer, %289 ], [ %340, %291 ]
  %354 = phi <4 x float> [ zeroinitializer, %289 ], [ %350, %291 ]
  %355 = phi <4 x float> [ zeroinitializer, %289 ], [ %347, %291 ]
  %356 = fmul <4 x float> %22, %31
  %357 = fmul <4 x float> %356, %352
  %358 = fadd <4 x float> %205, %357
  %359 = fmul <4 x float> %356, %353
  %360 = fadd <4 x float> %207, %359
  %361 = fmul <4 x float> %356, %354
  %362 = fadd <4 x float> %209, %361
  %363 = fmul <4 x float> %356, %355
  %364 = fadd <4 x float> %211, %363
  %365 = fadd <4 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %51, label %91 [
    i32 3, label %403
    i32 0, label %403
    i32 1, label %390
    i32 2, label %366
  ]

366:                                              ; preds = %351
  %367 = insertelement <4 x float> undef, float %52, i32 0
  %368 = shufflevector <4 x float> %367, <4 x float> undef, <4 x i32> zeroinitializer
  %369 = fsub <4 x float> %33, %368
  %370 = fadd float %52, %52
  %371 = insertelement <4 x float> undef, float %370, i32 0
  %372 = shufflevector <4 x float> %371, <4 x float> undef, <4 x i32> zeroinitializer
  %373 = fmul float %53, 5.000000e-01
  %374 = insertelement <4 x float> undef, float %373, i32 0
  %375 = shufflevector <4 x float> %374, <4 x float> undef, <4 x i32> zeroinitializer
  %376 = fmul <4 x float> %369, %375
  %377 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %376) #18
  %378 = sitofp <4 x i32> %377 to <4 x float>
  %379 = fcmp olt <4 x float> %376, %378
  %380 = select <4 x i1> %379, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %381 = fsub <4 x float> %378, %380
  %382 = fmul <4 x float> %372, %381
  %383 = fsub <4 x float> %369, %382
  %384 = fsub <4 x float> %383, %368
  %385 = fsub <4 x float> zeroinitializer, %384
  %386 = bitcast <4 x float> %384 to <4 x i32>
  %387 = bitcast <4 x float> %385 to <4 x i32>
  %388 = and <4 x i32> %387, %386
  %389 = bitcast <4 x i32> %388 to <4 x float>
  br label %403

390:                                              ; preds = %351
  %391 = insertelement <4 x float> undef, float %53, i32 0
  %392 = shufflevector <4 x float> %391, <4 x float> undef, <4 x i32> zeroinitializer
  %393 = fmul <4 x float> %33, %392
  %394 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %393) #18
  %395 = sitofp <4 x i32> %394 to <4 x float>
  %396 = fcmp olt <4 x float> %393, %395
  %397 = select <4 x i1> %396, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %398 = fsub <4 x float> %395, %397
  %399 = insertelement <4 x float> undef, float %52, i32 0
  %400 = shufflevector <4 x float> %399, <4 x float> undef, <4 x i32> zeroinitializer
  %401 = fmul <4 x float> %400, %398
  %402 = fsub <4 x float> %33, %401
  br label %403

403:                                              ; preds = %390, %366, %351, %351
  %404 = phi <4 x float> [ %389, %366 ], [ %402, %390 ], [ %33, %351 ], [ %33, %351 ]
  switch i32 %94, label %134 [
    i32 3, label %442
    i32 0, label %442
    i32 1, label %429
    i32 2, label %405
  ]

405:                                              ; preds = %403
  %406 = insertelement <4 x float> undef, float %95, i32 0
  %407 = shufflevector <4 x float> %406, <4 x float> undef, <4 x i32> zeroinitializer
  %408 = fsub <4 x float> %365, %407
  %409 = fadd float %95, %95
  %410 = insertelement <4 x float> undef, float %409, i32 0
  %411 = shufflevector <4 x float> %410, <4 x float> undef, <4 x i32> zeroinitializer
  %412 = fmul float %96, 5.000000e-01
  %413 = insertelement <4 x float> undef, float %412, i32 0
  %414 = shufflevector <4 x float> %413, <4 x float> undef, <4 x i32> zeroinitializer
  %415 = fmul <4 x float> %408, %414
  %416 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %415) #18
  %417 = sitofp <4 x i32> %416 to <4 x float>
  %418 = fcmp olt <4 x float> %415, %417
  %419 = select <4 x i1> %418, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %420 = fsub <4 x float> %417, %419
  %421 = fmul <4 x float> %411, %420
  %422 = fsub <4 x float> %408, %421
  %423 = fsub <4 x float> %422, %407
  %424 = fsub <4 x float> zeroinitializer, %423
  %425 = bitcast <4 x float> %423 to <4 x i32>
  %426 = bitcast <4 x float> %424 to <4 x i32>
  %427 = and <4 x i32> %426, %425
  %428 = bitcast <4 x i32> %427 to <4 x float>
  br label %442

429:                                              ; preds = %403
  %430 = insertelement <4 x float> undef, float %96, i32 0
  %431 = shufflevector <4 x float> %430, <4 x float> undef, <4 x i32> zeroinitializer
  %432 = fmul <4 x float> %365, %431
  %433 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %432) #18
  %434 = sitofp <4 x i32> %433 to <4 x float>
  %435 = fcmp olt <4 x float> %432, %434
  %436 = select <4 x i1> %435, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %437 = fsub <4 x float> %434, %436
  %438 = insertelement <4 x float> undef, float %95, i32 0
  %439 = shufflevector <4 x float> %438, <4 x float> undef, <4 x i32> zeroinitializer
  %440 = fmul <4 x float> %439, %437
  %441 = fsub <4 x float> %365, %440
  br label %442

442:                                              ; preds = %429, %405, %403, %403
  %443 = phi <4 x float> [ %428, %405 ], [ %441, %429 ], [ %365, %403 ], [ %365, %403 ]
  switch i32 %137, label %504 [
    i32 4, label %444
    i32 6, label %444
  ]

444:                                              ; preds = %442, %442
  %445 = insertelement <4 x float> undef, float %52, i32 0
  %446 = shufflevector <4 x float> %445, <4 x float> undef, <4 x i32> zeroinitializer
  %447 = bitcast <4 x float> %446 to <4 x i32>
  %448 = add <4 x i32> %447, <i32 -1, i32 -1, i32 -1, i32 -1>
  %449 = bitcast <4 x i32> %448 to <4 x float>
  %450 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %404) #18
  %451 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %450, <4 x float> %449) #18
  %452 = insertelement <4 x float> undef, float %95, i32 0
  %453 = shufflevector <4 x float> %452, <4 x float> undef, <4 x i32> zeroinitializer
  %454 = bitcast <4 x float> %453 to <4 x i32>
  %455 = add <4 x i32> %454, <i32 -1, i32 -1, i32 -1, i32 -1>
  %456 = bitcast <4 x i32> %455 to <4 x float>
  %457 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %443) #18
  %458 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %457, <4 x float> %456) #18
  %459 = load i32*, i32** %48, align 8
  %460 = fptosi <4 x float> %458 to <4 x i32>
  %461 = load i32, i32* %50, align 8
  %462 = insertelement <4 x i32> undef, i32 %461, i32 0
  %463 = shufflevector <4 x i32> %462, <4 x i32> undef, <4 x i32> zeroinitializer
  %464 = mul <4 x i32> %463, %460
  %465 = fptosi <4 x float> %451 to <4 x i32>
  %466 = add <4 x i32> %464, %465
  %467 = extractelement <4 x i32> %466, i32 0
  %468 = zext i32 %467 to i64
  %469 = getelementptr inbounds i32, i32* %459, i64 %468
  %470 = load i32, i32* %469, align 4
  %471 = insertelement <4 x i32> undef, i32 %470, i32 0
  %472 = extractelement <4 x i32> %466, i32 1
  %473 = zext i32 %472 to i64
  %474 = getelementptr inbounds i32, i32* %459, i64 %473
  %475 = load i32, i32* %474, align 4
  %476 = insertelement <4 x i32> %471, i32 %475, i32 1
  %477 = extractelement <4 x i32> %466, i32 2
  %478 = zext i32 %477 to i64
  %479 = getelementptr inbounds i32, i32* %459, i64 %478
  %480 = load i32, i32* %479, align 4
  %481 = insertelement <4 x i32> %476, i32 %480, i32 2
  %482 = extractelement <4 x i32> %466, i32 3
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds i32, i32* %459, i64 %483
  %485 = load i32, i32* %484, align 4
  %486 = insertelement <4 x i32> %481, i32 %485, i32 3
  %487 = and <4 x i32> %486, <i32 255, i32 255, i32 255, i32 255>
  %488 = sitofp <4 x i32> %487 to <4 x float>
  %489 = fmul <4 x float> %488, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %490 = lshr <4 x i32> %486, <i32 8, i32 8, i32 8, i32 8>
  %491 = and <4 x i32> %490, <i32 255, i32 255, i32 255, i32 255>
  %492 = sitofp <4 x i32> %491 to <4 x float>
  %493 = fmul <4 x float> %492, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %494 = lshr <4 x i32> %486, <i32 16, i32 16, i32 16, i32 16>
  %495 = and <4 x i32> %494, <i32 255, i32 255, i32 255, i32 255>
  %496 = sitofp <4 x i32> %495 to <4 x float>
  %497 = fmul <4 x float> %496, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %498 = lshr <4 x i32> %486, <i32 24, i32 24, i32 24, i32 24>
  %499 = sitofp <4 x i32> %498 to <4 x float>
  %500 = fmul <4 x float> %499, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %501 = icmp eq i32 %137, 6
  %502 = select i1 %501, <4 x float> %497, <4 x float> %489
  %503 = select i1 %501, <4 x float> %489, <4 x float> %497
  br label %504

504:                                              ; preds = %444, %442
  %505 = phi <4 x float> [ zeroinitializer, %442 ], [ %502, %444 ]
  %506 = phi <4 x float> [ zeroinitializer, %442 ], [ %493, %444 ]
  %507 = phi <4 x float> [ zeroinitializer, %442 ], [ %503, %444 ]
  %508 = phi <4 x float> [ zeroinitializer, %442 ], [ %500, %444 ]
  %509 = fmul <4 x float> %30, %29
  %510 = fmul <4 x float> %509, %505
  %511 = fadd <4 x float> %358, %510
  %512 = fmul <4 x float> %509, %506
  %513 = fadd <4 x float> %360, %512
  %514 = fmul <4 x float> %509, %507
  %515 = fadd <4 x float> %362, %514
  %516 = fmul <4 x float> %509, %508
  %517 = fadd <4 x float> %364, %516
  switch i32 %51, label %91 [
    i32 3, label %555
    i32 0, label %555
    i32 1, label %542
    i32 2, label %518
  ]

518:                                              ; preds = %504
  %519 = insertelement <4 x float> undef, float %52, i32 0
  %520 = shufflevector <4 x float> %519, <4 x float> undef, <4 x i32> zeroinitializer
  %521 = fsub <4 x float> %212, %520
  %522 = fadd float %52, %52
  %523 = insertelement <4 x float> undef, float %522, i32 0
  %524 = shufflevector <4 x float> %523, <4 x float> undef, <4 x i32> zeroinitializer
  %525 = fmul float %53, 5.000000e-01
  %526 = insertelement <4 x float> undef, float %525, i32 0
  %527 = shufflevector <4 x float> %526, <4 x float> undef, <4 x i32> zeroinitializer
  %528 = fmul <4 x float> %521, %527
  %529 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %528) #18
  %530 = sitofp <4 x i32> %529 to <4 x float>
  %531 = fcmp olt <4 x float> %528, %530
  %532 = select <4 x i1> %531, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %533 = fsub <4 x float> %530, %532
  %534 = fmul <4 x float> %524, %533
  %535 = fsub <4 x float> %521, %534
  %536 = fsub <4 x float> %535, %520
  %537 = fsub <4 x float> zeroinitializer, %536
  %538 = bitcast <4 x float> %536 to <4 x i32>
  %539 = bitcast <4 x float> %537 to <4 x i32>
  %540 = and <4 x i32> %539, %538
  %541 = bitcast <4 x i32> %540 to <4 x float>
  br label %555

542:                                              ; preds = %504
  %543 = insertelement <4 x float> undef, float %53, i32 0
  %544 = shufflevector <4 x float> %543, <4 x float> undef, <4 x i32> zeroinitializer
  %545 = fmul <4 x float> %212, %544
  %546 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %545) #18
  %547 = sitofp <4 x i32> %546 to <4 x float>
  %548 = fcmp olt <4 x float> %545, %547
  %549 = select <4 x i1> %548, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %550 = fsub <4 x float> %547, %549
  %551 = insertelement <4 x float> undef, float %52, i32 0
  %552 = shufflevector <4 x float> %551, <4 x float> undef, <4 x i32> zeroinitializer
  %553 = fmul <4 x float> %552, %550
  %554 = fsub <4 x float> %212, %553
  br label %555

555:                                              ; preds = %542, %518, %504, %504
  %556 = phi <4 x float> [ %541, %518 ], [ %554, %542 ], [ %212, %504 ], [ %212, %504 ]
  switch i32 %94, label %134 [
    i32 3, label %594
    i32 0, label %594
    i32 1, label %581
    i32 2, label %557
  ]

557:                                              ; preds = %555
  %558 = insertelement <4 x float> undef, float %95, i32 0
  %559 = shufflevector <4 x float> %558, <4 x float> undef, <4 x i32> zeroinitializer
  %560 = fsub <4 x float> %365, %559
  %561 = fadd float %95, %95
  %562 = insertelement <4 x float> undef, float %561, i32 0
  %563 = shufflevector <4 x float> %562, <4 x float> undef, <4 x i32> zeroinitializer
  %564 = fmul float %96, 5.000000e-01
  %565 = insertelement <4 x float> undef, float %564, i32 0
  %566 = shufflevector <4 x float> %565, <4 x float> undef, <4 x i32> zeroinitializer
  %567 = fmul <4 x float> %560, %566
  %568 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %567) #18
  %569 = sitofp <4 x i32> %568 to <4 x float>
  %570 = fcmp olt <4 x float> %567, %569
  %571 = select <4 x i1> %570, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %572 = fsub <4 x float> %569, %571
  %573 = fmul <4 x float> %563, %572
  %574 = fsub <4 x float> %560, %573
  %575 = fsub <4 x float> %574, %559
  %576 = fsub <4 x float> zeroinitializer, %575
  %577 = bitcast <4 x float> %575 to <4 x i32>
  %578 = bitcast <4 x float> %576 to <4 x i32>
  %579 = and <4 x i32> %578, %577
  %580 = bitcast <4 x i32> %579 to <4 x float>
  br label %594

581:                                              ; preds = %555
  %582 = insertelement <4 x float> undef, float %96, i32 0
  %583 = shufflevector <4 x float> %582, <4 x float> undef, <4 x i32> zeroinitializer
  %584 = fmul <4 x float> %365, %583
  %585 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %584) #18
  %586 = sitofp <4 x i32> %585 to <4 x float>
  %587 = fcmp olt <4 x float> %584, %586
  %588 = select <4 x i1> %587, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %589 = fsub <4 x float> %586, %588
  %590 = insertelement <4 x float> undef, float %95, i32 0
  %591 = shufflevector <4 x float> %590, <4 x float> undef, <4 x i32> zeroinitializer
  %592 = fmul <4 x float> %591, %589
  %593 = fsub <4 x float> %365, %592
  br label %594

594:                                              ; preds = %581, %557, %555, %555
  %595 = phi <4 x float> [ %580, %557 ], [ %593, %581 ], [ %365, %555 ], [ %365, %555 ]
  switch i32 %137, label %656 [
    i32 4, label %596
    i32 6, label %596
  ]

596:                                              ; preds = %594, %594
  %597 = insertelement <4 x float> undef, float %52, i32 0
  %598 = shufflevector <4 x float> %597, <4 x float> undef, <4 x i32> zeroinitializer
  %599 = bitcast <4 x float> %598 to <4 x i32>
  %600 = add <4 x i32> %599, <i32 -1, i32 -1, i32 -1, i32 -1>
  %601 = bitcast <4 x i32> %600 to <4 x float>
  %602 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %556) #18
  %603 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %602, <4 x float> %601) #18
  %604 = insertelement <4 x float> undef, float %95, i32 0
  %605 = shufflevector <4 x float> %604, <4 x float> undef, <4 x i32> zeroinitializer
  %606 = bitcast <4 x float> %605 to <4 x i32>
  %607 = add <4 x i32> %606, <i32 -1, i32 -1, i32 -1, i32 -1>
  %608 = bitcast <4 x i32> %607 to <4 x float>
  %609 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %595) #18
  %610 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %609, <4 x float> %608) #18
  %611 = load i32*, i32** %48, align 8
  %612 = fptosi <4 x float> %610 to <4 x i32>
  %613 = load i32, i32* %50, align 8
  %614 = insertelement <4 x i32> undef, i32 %613, i32 0
  %615 = shufflevector <4 x i32> %614, <4 x i32> undef, <4 x i32> zeroinitializer
  %616 = mul <4 x i32> %615, %612
  %617 = fptosi <4 x float> %603 to <4 x i32>
  %618 = add <4 x i32> %616, %617
  %619 = extractelement <4 x i32> %618, i32 0
  %620 = zext i32 %619 to i64
  %621 = getelementptr inbounds i32, i32* %611, i64 %620
  %622 = load i32, i32* %621, align 4
  %623 = insertelement <4 x i32> undef, i32 %622, i32 0
  %624 = extractelement <4 x i32> %618, i32 1
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds i32, i32* %611, i64 %625
  %627 = load i32, i32* %626, align 4
  %628 = insertelement <4 x i32> %623, i32 %627, i32 1
  %629 = extractelement <4 x i32> %618, i32 2
  %630 = zext i32 %629 to i64
  %631 = getelementptr inbounds i32, i32* %611, i64 %630
  %632 = load i32, i32* %631, align 4
  %633 = insertelement <4 x i32> %628, i32 %632, i32 2
  %634 = extractelement <4 x i32> %618, i32 3
  %635 = zext i32 %634 to i64
  %636 = getelementptr inbounds i32, i32* %611, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = insertelement <4 x i32> %633, i32 %637, i32 3
  %639 = and <4 x i32> %638, <i32 255, i32 255, i32 255, i32 255>
  %640 = sitofp <4 x i32> %639 to <4 x float>
  %641 = fmul <4 x float> %640, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %642 = lshr <4 x i32> %638, <i32 8, i32 8, i32 8, i32 8>
  %643 = and <4 x i32> %642, <i32 255, i32 255, i32 255, i32 255>
  %644 = sitofp <4 x i32> %643 to <4 x float>
  %645 = fmul <4 x float> %644, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %646 = lshr <4 x i32> %638, <i32 16, i32 16, i32 16, i32 16>
  %647 = and <4 x i32> %646, <i32 255, i32 255, i32 255, i32 255>
  %648 = sitofp <4 x i32> %647 to <4 x float>
  %649 = fmul <4 x float> %648, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %650 = lshr <4 x i32> %638, <i32 24, i32 24, i32 24, i32 24>
  %651 = sitofp <4 x i32> %650 to <4 x float>
  %652 = fmul <4 x float> %651, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %653 = icmp eq i32 %137, 6
  %654 = select i1 %653, <4 x float> %649, <4 x float> %641
  %655 = select i1 %653, <4 x float> %641, <4 x float> %649
  br label %656

656:                                              ; preds = %594, %596
  %657 = phi <4 x float> [ zeroinitializer, %594 ], [ %654, %596 ]
  %658 = phi <4 x float> [ zeroinitializer, %594 ], [ %645, %596 ]
  %659 = phi <4 x float> [ zeroinitializer, %594 ], [ %655, %596 ]
  %660 = phi <4 x float> [ zeroinitializer, %594 ], [ %652, %596 ]
  %661 = fmul <4 x float> %22, %29
  %662 = fmul <4 x float> %661, %657
  %663 = fadd <4 x float> %511, %662
  %664 = fmul <4 x float> %661, %658
  %665 = fadd <4 x float> %513, %664
  %666 = fmul <4 x float> %661, %659
  %667 = fadd <4 x float> %515, %666
  %668 = fmul <4 x float> %661, %660
  %669 = fadd <4 x float> %517, %668
  %670 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %671 = extractvalue { i8*, i8** } %670, 0
  %672 = extractvalue { i8*, i8** } %670, 1
  %673 = bitcast i8* %671 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %673(i64 %0, i8** %672, i64 %2, i64 %3, <4 x float> %663, <4 x float> %665, <4 x float> %667, <4 x float> %669, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7bicubicEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fadd <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %17 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %16) #18
  %18 = sitofp <4 x i32> %17 to <4 x float>
  %19 = fcmp olt <4 x float> %16, %18
  %20 = select <4 x i1> %19, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %21 = fsub <4 x float> %18, %20
  %22 = fsub <4 x float> %16, %21
  %23 = fadd <4 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %23) #18
  %25 = sitofp <4 x i32> %24 to <4 x float>
  %26 = fcmp olt <4 x float> %23, %25
  %27 = select <4 x i1> %26, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %28 = fsub <4 x float> %25, %27
  %29 = fsub <4 x float> %23, %28
  %30 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %31 = fmul <4 x float> %30, %30
  %32 = fmul <4 x float> %30, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %33 = fadd <4 x float> %32, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %34 = fmul <4 x float> %31, %33
  %35 = fmul <4 x float> %30, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %36 = fadd <4 x float> %35, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %37 = fmul <4 x float> %30, %36
  %38 = fadd <4 x float> %37, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %39 = fmul <4 x float> %30, %38
  %40 = fadd <4 x float> %39, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %41 = fmul <4 x float> %22, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %42 = fadd <4 x float> %41, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %43 = fmul <4 x float> %22, %42
  %44 = fadd <4 x float> %43, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = fmul <4 x float> %22, %44
  %46 = fadd <4 x float> %45, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %47 = fmul <4 x float> %22, %22
  %48 = fmul <4 x float> %22, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %49 = fadd <4 x float> %48, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %50 = fmul <4 x float> %47, %49
  %51 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29
  %52 = fmul <4 x float> %51, %51
  %53 = fmul <4 x float> %51, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %54 = fadd <4 x float> %53, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %55 = fmul <4 x float> %52, %54
  %56 = fmul <4 x float> %51, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %57 = fadd <4 x float> %56, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %58 = fmul <4 x float> %51, %57
  %59 = fadd <4 x float> %58, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %60 = fmul <4 x float> %51, %59
  %61 = fadd <4 x float> %60, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %62 = fmul <4 x float> %29, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %63 = fadd <4 x float> %62, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %64 = fmul <4 x float> %29, %63
  %65 = fadd <4 x float> %64, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %66 = fmul <4 x float> %29, %65
  %67 = fadd <4 x float> %66, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %68 = fmul <4 x float> %29, %29
  %69 = fmul <4 x float> %29, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %70 = fadd <4 x float> %69, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %71 = fmul <4 x float> %68, %70
  %72 = fadd <4 x float> %5, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %73 = fadd <4 x float> %4, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %74 = getelementptr inbounds i8, i8* %14, i64 28
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds i8, i8* %14, i64 12
  %77 = bitcast i8* %76 to float*
  %78 = getelementptr inbounds i8, i8* %14, i64 36
  %79 = bitcast i8* %78 to float*
  %80 = getelementptr inbounds i8, i8* %14, i64 32
  %81 = bitcast i8* %80 to i32*
  %82 = getelementptr inbounds i8, i8* %14, i64 16
  %83 = bitcast i8* %82 to float*
  %84 = getelementptr inbounds i8, i8* %14, i64 40
  %85 = bitcast i8* %84 to float*
  %86 = getelementptr inbounds i8, i8* %14, i64 24
  %87 = bitcast i8* %86 to i32*
  %88 = bitcast i8* %14 to i32**
  %89 = getelementptr inbounds i8, i8* %14, i64 8
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %75, align 4
  %92 = load float, float* %77, align 4
  %93 = load float, float* %79, align 4
  switch i32 %91, label %131 [
    i32 3, label %132
    i32 0, label %132
    i32 1, label %94
    i32 2, label %107
  ]

94:                                               ; preds = %12
  %95 = insertelement <4 x float> undef, float %93, i32 0
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <4 x i32> zeroinitializer
  %97 = fmul <4 x float> %73, %96
  %98 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %97) #18
  %99 = sitofp <4 x i32> %98 to <4 x float>
  %100 = fcmp olt <4 x float> %97, %99
  %101 = select <4 x i1> %100, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %102 = fsub <4 x float> %99, %101
  %103 = insertelement <4 x float> undef, float %92, i32 0
  %104 = shufflevector <4 x float> %103, <4 x float> undef, <4 x i32> zeroinitializer
  %105 = fmul <4 x float> %104, %102
  %106 = fsub <4 x float> %73, %105
  br label %132

107:                                              ; preds = %12
  %108 = insertelement <4 x float> undef, float %92, i32 0
  %109 = shufflevector <4 x float> %108, <4 x float> undef, <4 x i32> zeroinitializer
  %110 = fsub <4 x float> %73, %109
  %111 = fadd float %92, %92
  %112 = insertelement <4 x float> undef, float %111, i32 0
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> zeroinitializer
  %114 = fmul float %93, 5.000000e-01
  %115 = insertelement <4 x float> undef, float %114, i32 0
  %116 = shufflevector <4 x float> %115, <4 x float> undef, <4 x i32> zeroinitializer
  %117 = fmul <4 x float> %110, %116
  %118 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %117) #18
  %119 = sitofp <4 x i32> %118 to <4 x float>
  %120 = fcmp olt <4 x float> %117, %119
  %121 = select <4 x i1> %120, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %122 = fsub <4 x float> %119, %121
  %123 = fmul <4 x float> %113, %122
  %124 = fsub <4 x float> %110, %123
  %125 = fsub <4 x float> %124, %109
  %126 = fsub <4 x float> zeroinitializer, %125
  %127 = bitcast <4 x float> %125 to <4 x i32>
  %128 = bitcast <4 x float> %126 to <4 x i32>
  %129 = and <4 x i32> %128, %127
  %130 = bitcast <4 x i32> %129 to <4 x float>
  br label %132

131:                                              ; preds = %2372, %2220, %2068, %1915, %1763, %1611, %1459, %1306, %1154, %1002, %850, %697, %544, %391, %238, %12
  tail call void @llvm.trap() #18
  unreachable

132:                                              ; preds = %107, %94, %12, %12
  %133 = phi <4 x float> [ %130, %107 ], [ %106, %94 ], [ %73, %12 ], [ %73, %12 ]
  %134 = load i32, i32* %81, align 8
  %135 = load float, float* %83, align 8
  %136 = load float, float* %85, align 8
  switch i32 %134, label %174 [
    i32 3, label %175
    i32 0, label %175
    i32 1, label %137
    i32 2, label %150
  ]

137:                                              ; preds = %132
  %138 = insertelement <4 x float> undef, float %136, i32 0
  %139 = shufflevector <4 x float> %138, <4 x float> undef, <4 x i32> zeroinitializer
  %140 = fmul <4 x float> %72, %139
  %141 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %140) #18
  %142 = sitofp <4 x i32> %141 to <4 x float>
  %143 = fcmp olt <4 x float> %140, %142
  %144 = select <4 x i1> %143, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %145 = fsub <4 x float> %142, %144
  %146 = insertelement <4 x float> undef, float %135, i32 0
  %147 = shufflevector <4 x float> %146, <4 x float> undef, <4 x i32> zeroinitializer
  %148 = fmul <4 x float> %147, %145
  %149 = fsub <4 x float> %72, %148
  br label %175

150:                                              ; preds = %132
  %151 = insertelement <4 x float> undef, float %135, i32 0
  %152 = shufflevector <4 x float> %151, <4 x float> undef, <4 x i32> zeroinitializer
  %153 = fsub <4 x float> %72, %152
  %154 = fadd float %135, %135
  %155 = insertelement <4 x float> undef, float %154, i32 0
  %156 = shufflevector <4 x float> %155, <4 x float> undef, <4 x i32> zeroinitializer
  %157 = fmul float %136, 5.000000e-01
  %158 = insertelement <4 x float> undef, float %157, i32 0
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <4 x i32> zeroinitializer
  %160 = fmul <4 x float> %153, %159
  %161 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %160) #18
  %162 = sitofp <4 x i32> %161 to <4 x float>
  %163 = fcmp olt <4 x float> %160, %162
  %164 = select <4 x i1> %163, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %165 = fsub <4 x float> %162, %164
  %166 = fmul <4 x float> %156, %165
  %167 = fsub <4 x float> %153, %166
  %168 = fsub <4 x float> %167, %152
  %169 = fsub <4 x float> zeroinitializer, %168
  %170 = bitcast <4 x float> %168 to <4 x i32>
  %171 = bitcast <4 x float> %169 to <4 x i32>
  %172 = and <4 x i32> %171, %170
  %173 = bitcast <4 x i32> %172 to <4 x float>
  br label %175

174:                                              ; preds = %2423, %2271, %2119, %1967, %1814, %1662, %1510, %1358, %1205, %1053, %901, %749, %596, %443, %290, %132
  tail call void @llvm.trap() #18
  unreachable

175:                                              ; preds = %150, %137, %132, %132
  %176 = phi <4 x float> [ %173, %150 ], [ %149, %137 ], [ %72, %132 ], [ %72, %132 ]
  %177 = load i32, i32* %87, align 8
  switch i32 %177, label %238 [
    i32 4, label %178
    i32 6, label %178
  ]

178:                                              ; preds = %175, %175
  %179 = insertelement <4 x float> undef, float %92, i32 0
  %180 = shufflevector <4 x float> %179, <4 x float> undef, <4 x i32> zeroinitializer
  %181 = bitcast <4 x float> %180 to <4 x i32>
  %182 = add <4 x i32> %181, <i32 -1, i32 -1, i32 -1, i32 -1>
  %183 = bitcast <4 x i32> %182 to <4 x float>
  %184 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %133) #18
  %185 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %184, <4 x float> %183) #18
  %186 = insertelement <4 x float> undef, float %135, i32 0
  %187 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> zeroinitializer
  %188 = bitcast <4 x float> %187 to <4 x i32>
  %189 = add <4 x i32> %188, <i32 -1, i32 -1, i32 -1, i32 -1>
  %190 = bitcast <4 x i32> %189 to <4 x float>
  %191 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %176) #18
  %192 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %191, <4 x float> %190) #18
  %193 = load i32*, i32** %88, align 8
  %194 = fptosi <4 x float> %192 to <4 x i32>
  %195 = load i32, i32* %90, align 8
  %196 = insertelement <4 x i32> undef, i32 %195, i32 0
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> zeroinitializer
  %198 = mul <4 x i32> %197, %194
  %199 = fptosi <4 x float> %185 to <4 x i32>
  %200 = add <4 x i32> %198, %199
  %201 = extractelement <4 x i32> %200, i32 0
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds i32, i32* %193, i64 %202
  %204 = load i32, i32* %203, align 4
  %205 = insertelement <4 x i32> undef, i32 %204, i32 0
  %206 = extractelement <4 x i32> %200, i32 1
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds i32, i32* %193, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = insertelement <4 x i32> %205, i32 %209, i32 1
  %211 = extractelement <4 x i32> %200, i32 2
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i32, i32* %193, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = insertelement <4 x i32> %210, i32 %214, i32 2
  %216 = extractelement <4 x i32> %200, i32 3
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds i32, i32* %193, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = insertelement <4 x i32> %215, i32 %219, i32 3
  %221 = and <4 x i32> %220, <i32 255, i32 255, i32 255, i32 255>
  %222 = sitofp <4 x i32> %221 to <4 x float>
  %223 = fmul <4 x float> %222, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %224 = lshr <4 x i32> %220, <i32 8, i32 8, i32 8, i32 8>
  %225 = and <4 x i32> %224, <i32 255, i32 255, i32 255, i32 255>
  %226 = sitofp <4 x i32> %225 to <4 x float>
  %227 = fmul <4 x float> %226, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %228 = lshr <4 x i32> %220, <i32 16, i32 16, i32 16, i32 16>
  %229 = and <4 x i32> %228, <i32 255, i32 255, i32 255, i32 255>
  %230 = sitofp <4 x i32> %229 to <4 x float>
  %231 = fmul <4 x float> %230, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %232 = lshr <4 x i32> %220, <i32 24, i32 24, i32 24, i32 24>
  %233 = sitofp <4 x i32> %232 to <4 x float>
  %234 = fmul <4 x float> %233, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %235 = icmp eq i32 %177, 6
  %236 = select i1 %235, <4 x float> %231, <4 x float> %223
  %237 = select i1 %235, <4 x float> %223, <4 x float> %231
  br label %238

238:                                              ; preds = %178, %175
  %239 = phi <4 x float> [ zeroinitializer, %175 ], [ %236, %178 ]
  %240 = phi <4 x float> [ zeroinitializer, %175 ], [ %227, %178 ]
  %241 = phi <4 x float> [ zeroinitializer, %175 ], [ %237, %178 ]
  %242 = phi <4 x float> [ zeroinitializer, %175 ], [ %234, %178 ]
  %243 = fmul <4 x float> %34, %55
  %244 = fmul <4 x float> %243, %239
  %245 = fadd <4 x float> %244, zeroinitializer
  %246 = fmul <4 x float> %243, %240
  %247 = fadd <4 x float> %246, zeroinitializer
  %248 = fmul <4 x float> %243, %241
  %249 = fadd <4 x float> %248, zeroinitializer
  %250 = fmul <4 x float> %243, %242
  %251 = fadd <4 x float> %250, zeroinitializer
  %252 = fadd <4 x float> %73, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %91, label %131 [
    i32 3, label %290
    i32 0, label %290
    i32 1, label %277
    i32 2, label %253
  ]

253:                                              ; preds = %238
  %254 = insertelement <4 x float> undef, float %92, i32 0
  %255 = shufflevector <4 x float> %254, <4 x float> undef, <4 x i32> zeroinitializer
  %256 = fsub <4 x float> %252, %255
  %257 = fadd float %92, %92
  %258 = insertelement <4 x float> undef, float %257, i32 0
  %259 = shufflevector <4 x float> %258, <4 x float> undef, <4 x i32> zeroinitializer
  %260 = fmul float %93, 5.000000e-01
  %261 = insertelement <4 x float> undef, float %260, i32 0
  %262 = shufflevector <4 x float> %261, <4 x float> undef, <4 x i32> zeroinitializer
  %263 = fmul <4 x float> %256, %262
  %264 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %263) #18
  %265 = sitofp <4 x i32> %264 to <4 x float>
  %266 = fcmp olt <4 x float> %263, %265
  %267 = select <4 x i1> %266, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %268 = fsub <4 x float> %265, %267
  %269 = fmul <4 x float> %259, %268
  %270 = fsub <4 x float> %256, %269
  %271 = fsub <4 x float> %270, %255
  %272 = fsub <4 x float> zeroinitializer, %271
  %273 = bitcast <4 x float> %271 to <4 x i32>
  %274 = bitcast <4 x float> %272 to <4 x i32>
  %275 = and <4 x i32> %274, %273
  %276 = bitcast <4 x i32> %275 to <4 x float>
  br label %290

277:                                              ; preds = %238
  %278 = insertelement <4 x float> undef, float %93, i32 0
  %279 = shufflevector <4 x float> %278, <4 x float> undef, <4 x i32> zeroinitializer
  %280 = fmul <4 x float> %252, %279
  %281 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %280) #18
  %282 = sitofp <4 x i32> %281 to <4 x float>
  %283 = fcmp olt <4 x float> %280, %282
  %284 = select <4 x i1> %283, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %285 = fsub <4 x float> %282, %284
  %286 = insertelement <4 x float> undef, float %92, i32 0
  %287 = shufflevector <4 x float> %286, <4 x float> undef, <4 x i32> zeroinitializer
  %288 = fmul <4 x float> %287, %285
  %289 = fsub <4 x float> %252, %288
  br label %290

290:                                              ; preds = %277, %253, %238, %238
  %291 = phi <4 x float> [ %276, %253 ], [ %289, %277 ], [ %252, %238 ], [ %252, %238 ]
  switch i32 %134, label %174 [
    i32 3, label %329
    i32 0, label %329
    i32 1, label %316
    i32 2, label %292
  ]

292:                                              ; preds = %290
  %293 = insertelement <4 x float> undef, float %135, i32 0
  %294 = shufflevector <4 x float> %293, <4 x float> undef, <4 x i32> zeroinitializer
  %295 = fsub <4 x float> %72, %294
  %296 = fadd float %135, %135
  %297 = insertelement <4 x float> undef, float %296, i32 0
  %298 = shufflevector <4 x float> %297, <4 x float> undef, <4 x i32> zeroinitializer
  %299 = fmul float %136, 5.000000e-01
  %300 = insertelement <4 x float> undef, float %299, i32 0
  %301 = shufflevector <4 x float> %300, <4 x float> undef, <4 x i32> zeroinitializer
  %302 = fmul <4 x float> %295, %301
  %303 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %302) #18
  %304 = sitofp <4 x i32> %303 to <4 x float>
  %305 = fcmp olt <4 x float> %302, %304
  %306 = select <4 x i1> %305, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %307 = fsub <4 x float> %304, %306
  %308 = fmul <4 x float> %298, %307
  %309 = fsub <4 x float> %295, %308
  %310 = fsub <4 x float> %309, %294
  %311 = fsub <4 x float> zeroinitializer, %310
  %312 = bitcast <4 x float> %310 to <4 x i32>
  %313 = bitcast <4 x float> %311 to <4 x i32>
  %314 = and <4 x i32> %313, %312
  %315 = bitcast <4 x i32> %314 to <4 x float>
  br label %329

316:                                              ; preds = %290
  %317 = insertelement <4 x float> undef, float %136, i32 0
  %318 = shufflevector <4 x float> %317, <4 x float> undef, <4 x i32> zeroinitializer
  %319 = fmul <4 x float> %72, %318
  %320 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %319) #18
  %321 = sitofp <4 x i32> %320 to <4 x float>
  %322 = fcmp olt <4 x float> %319, %321
  %323 = select <4 x i1> %322, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %324 = fsub <4 x float> %321, %323
  %325 = insertelement <4 x float> undef, float %135, i32 0
  %326 = shufflevector <4 x float> %325, <4 x float> undef, <4 x i32> zeroinitializer
  %327 = fmul <4 x float> %326, %324
  %328 = fsub <4 x float> %72, %327
  br label %329

329:                                              ; preds = %316, %292, %290, %290
  %330 = phi <4 x float> [ %315, %292 ], [ %328, %316 ], [ %72, %290 ], [ %72, %290 ]
  switch i32 %177, label %391 [
    i32 4, label %331
    i32 6, label %331
  ]

331:                                              ; preds = %329, %329
  %332 = insertelement <4 x float> undef, float %92, i32 0
  %333 = shufflevector <4 x float> %332, <4 x float> undef, <4 x i32> zeroinitializer
  %334 = bitcast <4 x float> %333 to <4 x i32>
  %335 = add <4 x i32> %334, <i32 -1, i32 -1, i32 -1, i32 -1>
  %336 = bitcast <4 x i32> %335 to <4 x float>
  %337 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %291) #18
  %338 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %337, <4 x float> %336) #18
  %339 = insertelement <4 x float> undef, float %135, i32 0
  %340 = shufflevector <4 x float> %339, <4 x float> undef, <4 x i32> zeroinitializer
  %341 = bitcast <4 x float> %340 to <4 x i32>
  %342 = add <4 x i32> %341, <i32 -1, i32 -1, i32 -1, i32 -1>
  %343 = bitcast <4 x i32> %342 to <4 x float>
  %344 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %330) #18
  %345 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %344, <4 x float> %343) #18
  %346 = load i32*, i32** %88, align 8
  %347 = fptosi <4 x float> %345 to <4 x i32>
  %348 = load i32, i32* %90, align 8
  %349 = insertelement <4 x i32> undef, i32 %348, i32 0
  %350 = shufflevector <4 x i32> %349, <4 x i32> undef, <4 x i32> zeroinitializer
  %351 = mul <4 x i32> %350, %347
  %352 = fptosi <4 x float> %338 to <4 x i32>
  %353 = add <4 x i32> %351, %352
  %354 = extractelement <4 x i32> %353, i32 0
  %355 = zext i32 %354 to i64
  %356 = getelementptr inbounds i32, i32* %346, i64 %355
  %357 = load i32, i32* %356, align 4
  %358 = insertelement <4 x i32> undef, i32 %357, i32 0
  %359 = extractelement <4 x i32> %353, i32 1
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds i32, i32* %346, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = insertelement <4 x i32> %358, i32 %362, i32 1
  %364 = extractelement <4 x i32> %353, i32 2
  %365 = zext i32 %364 to i64
  %366 = getelementptr inbounds i32, i32* %346, i64 %365
  %367 = load i32, i32* %366, align 4
  %368 = insertelement <4 x i32> %363, i32 %367, i32 2
  %369 = extractelement <4 x i32> %353, i32 3
  %370 = zext i32 %369 to i64
  %371 = getelementptr inbounds i32, i32* %346, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = insertelement <4 x i32> %368, i32 %372, i32 3
  %374 = and <4 x i32> %373, <i32 255, i32 255, i32 255, i32 255>
  %375 = sitofp <4 x i32> %374 to <4 x float>
  %376 = fmul <4 x float> %375, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %377 = lshr <4 x i32> %373, <i32 8, i32 8, i32 8, i32 8>
  %378 = and <4 x i32> %377, <i32 255, i32 255, i32 255, i32 255>
  %379 = sitofp <4 x i32> %378 to <4 x float>
  %380 = fmul <4 x float> %379, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %381 = lshr <4 x i32> %373, <i32 16, i32 16, i32 16, i32 16>
  %382 = and <4 x i32> %381, <i32 255, i32 255, i32 255, i32 255>
  %383 = sitofp <4 x i32> %382 to <4 x float>
  %384 = fmul <4 x float> %383, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %385 = lshr <4 x i32> %373, <i32 24, i32 24, i32 24, i32 24>
  %386 = sitofp <4 x i32> %385 to <4 x float>
  %387 = fmul <4 x float> %386, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %388 = icmp eq i32 %177, 6
  %389 = select i1 %388, <4 x float> %384, <4 x float> %376
  %390 = select i1 %388, <4 x float> %376, <4 x float> %384
  br label %391

391:                                              ; preds = %331, %329
  %392 = phi <4 x float> [ zeroinitializer, %329 ], [ %389, %331 ]
  %393 = phi <4 x float> [ zeroinitializer, %329 ], [ %380, %331 ]
  %394 = phi <4 x float> [ zeroinitializer, %329 ], [ %390, %331 ]
  %395 = phi <4 x float> [ zeroinitializer, %329 ], [ %387, %331 ]
  %396 = fmul <4 x float> %55, %40
  %397 = fmul <4 x float> %396, %392
  %398 = fadd <4 x float> %245, %397
  %399 = fmul <4 x float> %396, %393
  %400 = fadd <4 x float> %247, %399
  %401 = fmul <4 x float> %396, %394
  %402 = fadd <4 x float> %249, %401
  %403 = fmul <4 x float> %396, %395
  %404 = fadd <4 x float> %251, %403
  %405 = fadd <4 x float> %252, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %91, label %131 [
    i32 3, label %443
    i32 0, label %443
    i32 1, label %430
    i32 2, label %406
  ]

406:                                              ; preds = %391
  %407 = insertelement <4 x float> undef, float %92, i32 0
  %408 = shufflevector <4 x float> %407, <4 x float> undef, <4 x i32> zeroinitializer
  %409 = fsub <4 x float> %405, %408
  %410 = fadd float %92, %92
  %411 = insertelement <4 x float> undef, float %410, i32 0
  %412 = shufflevector <4 x float> %411, <4 x float> undef, <4 x i32> zeroinitializer
  %413 = fmul float %93, 5.000000e-01
  %414 = insertelement <4 x float> undef, float %413, i32 0
  %415 = shufflevector <4 x float> %414, <4 x float> undef, <4 x i32> zeroinitializer
  %416 = fmul <4 x float> %409, %415
  %417 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %416) #18
  %418 = sitofp <4 x i32> %417 to <4 x float>
  %419 = fcmp olt <4 x float> %416, %418
  %420 = select <4 x i1> %419, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %421 = fsub <4 x float> %418, %420
  %422 = fmul <4 x float> %412, %421
  %423 = fsub <4 x float> %409, %422
  %424 = fsub <4 x float> %423, %408
  %425 = fsub <4 x float> zeroinitializer, %424
  %426 = bitcast <4 x float> %424 to <4 x i32>
  %427 = bitcast <4 x float> %425 to <4 x i32>
  %428 = and <4 x i32> %427, %426
  %429 = bitcast <4 x i32> %428 to <4 x float>
  br label %443

430:                                              ; preds = %391
  %431 = insertelement <4 x float> undef, float %93, i32 0
  %432 = shufflevector <4 x float> %431, <4 x float> undef, <4 x i32> zeroinitializer
  %433 = fmul <4 x float> %405, %432
  %434 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %433) #18
  %435 = sitofp <4 x i32> %434 to <4 x float>
  %436 = fcmp olt <4 x float> %433, %435
  %437 = select <4 x i1> %436, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %438 = fsub <4 x float> %435, %437
  %439 = insertelement <4 x float> undef, float %92, i32 0
  %440 = shufflevector <4 x float> %439, <4 x float> undef, <4 x i32> zeroinitializer
  %441 = fmul <4 x float> %440, %438
  %442 = fsub <4 x float> %405, %441
  br label %443

443:                                              ; preds = %430, %406, %391, %391
  %444 = phi <4 x float> [ %429, %406 ], [ %442, %430 ], [ %405, %391 ], [ %405, %391 ]
  switch i32 %134, label %174 [
    i32 3, label %482
    i32 0, label %482
    i32 1, label %469
    i32 2, label %445
  ]

445:                                              ; preds = %443
  %446 = insertelement <4 x float> undef, float %135, i32 0
  %447 = shufflevector <4 x float> %446, <4 x float> undef, <4 x i32> zeroinitializer
  %448 = fsub <4 x float> %72, %447
  %449 = fadd float %135, %135
  %450 = insertelement <4 x float> undef, float %449, i32 0
  %451 = shufflevector <4 x float> %450, <4 x float> undef, <4 x i32> zeroinitializer
  %452 = fmul float %136, 5.000000e-01
  %453 = insertelement <4 x float> undef, float %452, i32 0
  %454 = shufflevector <4 x float> %453, <4 x float> undef, <4 x i32> zeroinitializer
  %455 = fmul <4 x float> %448, %454
  %456 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %455) #18
  %457 = sitofp <4 x i32> %456 to <4 x float>
  %458 = fcmp olt <4 x float> %455, %457
  %459 = select <4 x i1> %458, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %460 = fsub <4 x float> %457, %459
  %461 = fmul <4 x float> %451, %460
  %462 = fsub <4 x float> %448, %461
  %463 = fsub <4 x float> %462, %447
  %464 = fsub <4 x float> zeroinitializer, %463
  %465 = bitcast <4 x float> %463 to <4 x i32>
  %466 = bitcast <4 x float> %464 to <4 x i32>
  %467 = and <4 x i32> %466, %465
  %468 = bitcast <4 x i32> %467 to <4 x float>
  br label %482

469:                                              ; preds = %443
  %470 = insertelement <4 x float> undef, float %136, i32 0
  %471 = shufflevector <4 x float> %470, <4 x float> undef, <4 x i32> zeroinitializer
  %472 = fmul <4 x float> %72, %471
  %473 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %472) #18
  %474 = sitofp <4 x i32> %473 to <4 x float>
  %475 = fcmp olt <4 x float> %472, %474
  %476 = select <4 x i1> %475, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %477 = fsub <4 x float> %474, %476
  %478 = insertelement <4 x float> undef, float %135, i32 0
  %479 = shufflevector <4 x float> %478, <4 x float> undef, <4 x i32> zeroinitializer
  %480 = fmul <4 x float> %479, %477
  %481 = fsub <4 x float> %72, %480
  br label %482

482:                                              ; preds = %469, %445, %443, %443
  %483 = phi <4 x float> [ %468, %445 ], [ %481, %469 ], [ %72, %443 ], [ %72, %443 ]
  switch i32 %177, label %544 [
    i32 4, label %484
    i32 6, label %484
  ]

484:                                              ; preds = %482, %482
  %485 = insertelement <4 x float> undef, float %92, i32 0
  %486 = shufflevector <4 x float> %485, <4 x float> undef, <4 x i32> zeroinitializer
  %487 = bitcast <4 x float> %486 to <4 x i32>
  %488 = add <4 x i32> %487, <i32 -1, i32 -1, i32 -1, i32 -1>
  %489 = bitcast <4 x i32> %488 to <4 x float>
  %490 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %444) #18
  %491 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %490, <4 x float> %489) #18
  %492 = insertelement <4 x float> undef, float %135, i32 0
  %493 = shufflevector <4 x float> %492, <4 x float> undef, <4 x i32> zeroinitializer
  %494 = bitcast <4 x float> %493 to <4 x i32>
  %495 = add <4 x i32> %494, <i32 -1, i32 -1, i32 -1, i32 -1>
  %496 = bitcast <4 x i32> %495 to <4 x float>
  %497 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %483) #18
  %498 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %497, <4 x float> %496) #18
  %499 = load i32*, i32** %88, align 8
  %500 = fptosi <4 x float> %498 to <4 x i32>
  %501 = load i32, i32* %90, align 8
  %502 = insertelement <4 x i32> undef, i32 %501, i32 0
  %503 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> zeroinitializer
  %504 = mul <4 x i32> %503, %500
  %505 = fptosi <4 x float> %491 to <4 x i32>
  %506 = add <4 x i32> %504, %505
  %507 = extractelement <4 x i32> %506, i32 0
  %508 = zext i32 %507 to i64
  %509 = getelementptr inbounds i32, i32* %499, i64 %508
  %510 = load i32, i32* %509, align 4
  %511 = insertelement <4 x i32> undef, i32 %510, i32 0
  %512 = extractelement <4 x i32> %506, i32 1
  %513 = zext i32 %512 to i64
  %514 = getelementptr inbounds i32, i32* %499, i64 %513
  %515 = load i32, i32* %514, align 4
  %516 = insertelement <4 x i32> %511, i32 %515, i32 1
  %517 = extractelement <4 x i32> %506, i32 2
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds i32, i32* %499, i64 %518
  %520 = load i32, i32* %519, align 4
  %521 = insertelement <4 x i32> %516, i32 %520, i32 2
  %522 = extractelement <4 x i32> %506, i32 3
  %523 = zext i32 %522 to i64
  %524 = getelementptr inbounds i32, i32* %499, i64 %523
  %525 = load i32, i32* %524, align 4
  %526 = insertelement <4 x i32> %521, i32 %525, i32 3
  %527 = and <4 x i32> %526, <i32 255, i32 255, i32 255, i32 255>
  %528 = sitofp <4 x i32> %527 to <4 x float>
  %529 = fmul <4 x float> %528, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %530 = lshr <4 x i32> %526, <i32 8, i32 8, i32 8, i32 8>
  %531 = and <4 x i32> %530, <i32 255, i32 255, i32 255, i32 255>
  %532 = sitofp <4 x i32> %531 to <4 x float>
  %533 = fmul <4 x float> %532, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %534 = lshr <4 x i32> %526, <i32 16, i32 16, i32 16, i32 16>
  %535 = and <4 x i32> %534, <i32 255, i32 255, i32 255, i32 255>
  %536 = sitofp <4 x i32> %535 to <4 x float>
  %537 = fmul <4 x float> %536, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %538 = lshr <4 x i32> %526, <i32 24, i32 24, i32 24, i32 24>
  %539 = sitofp <4 x i32> %538 to <4 x float>
  %540 = fmul <4 x float> %539, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %541 = icmp eq i32 %177, 6
  %542 = select i1 %541, <4 x float> %537, <4 x float> %529
  %543 = select i1 %541, <4 x float> %529, <4 x float> %537
  br label %544

544:                                              ; preds = %484, %482
  %545 = phi <4 x float> [ zeroinitializer, %482 ], [ %542, %484 ]
  %546 = phi <4 x float> [ zeroinitializer, %482 ], [ %533, %484 ]
  %547 = phi <4 x float> [ zeroinitializer, %482 ], [ %543, %484 ]
  %548 = phi <4 x float> [ zeroinitializer, %482 ], [ %540, %484 ]
  %549 = fmul <4 x float> %55, %46
  %550 = fmul <4 x float> %549, %545
  %551 = fadd <4 x float> %398, %550
  %552 = fmul <4 x float> %549, %546
  %553 = fadd <4 x float> %400, %552
  %554 = fmul <4 x float> %549, %547
  %555 = fadd <4 x float> %402, %554
  %556 = fmul <4 x float> %549, %548
  %557 = fadd <4 x float> %404, %556
  %558 = fadd <4 x float> %405, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %91, label %131 [
    i32 3, label %596
    i32 0, label %596
    i32 1, label %583
    i32 2, label %559
  ]

559:                                              ; preds = %544
  %560 = insertelement <4 x float> undef, float %92, i32 0
  %561 = shufflevector <4 x float> %560, <4 x float> undef, <4 x i32> zeroinitializer
  %562 = fsub <4 x float> %558, %561
  %563 = fadd float %92, %92
  %564 = insertelement <4 x float> undef, float %563, i32 0
  %565 = shufflevector <4 x float> %564, <4 x float> undef, <4 x i32> zeroinitializer
  %566 = fmul float %93, 5.000000e-01
  %567 = insertelement <4 x float> undef, float %566, i32 0
  %568 = shufflevector <4 x float> %567, <4 x float> undef, <4 x i32> zeroinitializer
  %569 = fmul <4 x float> %562, %568
  %570 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %569) #18
  %571 = sitofp <4 x i32> %570 to <4 x float>
  %572 = fcmp olt <4 x float> %569, %571
  %573 = select <4 x i1> %572, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %574 = fsub <4 x float> %571, %573
  %575 = fmul <4 x float> %565, %574
  %576 = fsub <4 x float> %562, %575
  %577 = fsub <4 x float> %576, %561
  %578 = fsub <4 x float> zeroinitializer, %577
  %579 = bitcast <4 x float> %577 to <4 x i32>
  %580 = bitcast <4 x float> %578 to <4 x i32>
  %581 = and <4 x i32> %580, %579
  %582 = bitcast <4 x i32> %581 to <4 x float>
  br label %596

583:                                              ; preds = %544
  %584 = insertelement <4 x float> undef, float %93, i32 0
  %585 = shufflevector <4 x float> %584, <4 x float> undef, <4 x i32> zeroinitializer
  %586 = fmul <4 x float> %558, %585
  %587 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %586) #18
  %588 = sitofp <4 x i32> %587 to <4 x float>
  %589 = fcmp olt <4 x float> %586, %588
  %590 = select <4 x i1> %589, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %591 = fsub <4 x float> %588, %590
  %592 = insertelement <4 x float> undef, float %92, i32 0
  %593 = shufflevector <4 x float> %592, <4 x float> undef, <4 x i32> zeroinitializer
  %594 = fmul <4 x float> %593, %591
  %595 = fsub <4 x float> %558, %594
  br label %596

596:                                              ; preds = %583, %559, %544, %544
  %597 = phi <4 x float> [ %582, %559 ], [ %595, %583 ], [ %558, %544 ], [ %558, %544 ]
  switch i32 %134, label %174 [
    i32 3, label %635
    i32 0, label %635
    i32 1, label %622
    i32 2, label %598
  ]

598:                                              ; preds = %596
  %599 = insertelement <4 x float> undef, float %135, i32 0
  %600 = shufflevector <4 x float> %599, <4 x float> undef, <4 x i32> zeroinitializer
  %601 = fsub <4 x float> %72, %600
  %602 = fadd float %135, %135
  %603 = insertelement <4 x float> undef, float %602, i32 0
  %604 = shufflevector <4 x float> %603, <4 x float> undef, <4 x i32> zeroinitializer
  %605 = fmul float %136, 5.000000e-01
  %606 = insertelement <4 x float> undef, float %605, i32 0
  %607 = shufflevector <4 x float> %606, <4 x float> undef, <4 x i32> zeroinitializer
  %608 = fmul <4 x float> %601, %607
  %609 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %608) #18
  %610 = sitofp <4 x i32> %609 to <4 x float>
  %611 = fcmp olt <4 x float> %608, %610
  %612 = select <4 x i1> %611, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %613 = fsub <4 x float> %610, %612
  %614 = fmul <4 x float> %604, %613
  %615 = fsub <4 x float> %601, %614
  %616 = fsub <4 x float> %615, %600
  %617 = fsub <4 x float> zeroinitializer, %616
  %618 = bitcast <4 x float> %616 to <4 x i32>
  %619 = bitcast <4 x float> %617 to <4 x i32>
  %620 = and <4 x i32> %619, %618
  %621 = bitcast <4 x i32> %620 to <4 x float>
  br label %635

622:                                              ; preds = %596
  %623 = insertelement <4 x float> undef, float %136, i32 0
  %624 = shufflevector <4 x float> %623, <4 x float> undef, <4 x i32> zeroinitializer
  %625 = fmul <4 x float> %72, %624
  %626 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %625) #18
  %627 = sitofp <4 x i32> %626 to <4 x float>
  %628 = fcmp olt <4 x float> %625, %627
  %629 = select <4 x i1> %628, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %630 = fsub <4 x float> %627, %629
  %631 = insertelement <4 x float> undef, float %135, i32 0
  %632 = shufflevector <4 x float> %631, <4 x float> undef, <4 x i32> zeroinitializer
  %633 = fmul <4 x float> %632, %630
  %634 = fsub <4 x float> %72, %633
  br label %635

635:                                              ; preds = %622, %598, %596, %596
  %636 = phi <4 x float> [ %621, %598 ], [ %634, %622 ], [ %72, %596 ], [ %72, %596 ]
  switch i32 %177, label %697 [
    i32 4, label %637
    i32 6, label %637
  ]

637:                                              ; preds = %635, %635
  %638 = insertelement <4 x float> undef, float %92, i32 0
  %639 = shufflevector <4 x float> %638, <4 x float> undef, <4 x i32> zeroinitializer
  %640 = bitcast <4 x float> %639 to <4 x i32>
  %641 = add <4 x i32> %640, <i32 -1, i32 -1, i32 -1, i32 -1>
  %642 = bitcast <4 x i32> %641 to <4 x float>
  %643 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %597) #18
  %644 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %643, <4 x float> %642) #18
  %645 = insertelement <4 x float> undef, float %135, i32 0
  %646 = shufflevector <4 x float> %645, <4 x float> undef, <4 x i32> zeroinitializer
  %647 = bitcast <4 x float> %646 to <4 x i32>
  %648 = add <4 x i32> %647, <i32 -1, i32 -1, i32 -1, i32 -1>
  %649 = bitcast <4 x i32> %648 to <4 x float>
  %650 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %636) #18
  %651 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %650, <4 x float> %649) #18
  %652 = load i32*, i32** %88, align 8
  %653 = fptosi <4 x float> %651 to <4 x i32>
  %654 = load i32, i32* %90, align 8
  %655 = insertelement <4 x i32> undef, i32 %654, i32 0
  %656 = shufflevector <4 x i32> %655, <4 x i32> undef, <4 x i32> zeroinitializer
  %657 = mul <4 x i32> %656, %653
  %658 = fptosi <4 x float> %644 to <4 x i32>
  %659 = add <4 x i32> %657, %658
  %660 = extractelement <4 x i32> %659, i32 0
  %661 = zext i32 %660 to i64
  %662 = getelementptr inbounds i32, i32* %652, i64 %661
  %663 = load i32, i32* %662, align 4
  %664 = insertelement <4 x i32> undef, i32 %663, i32 0
  %665 = extractelement <4 x i32> %659, i32 1
  %666 = zext i32 %665 to i64
  %667 = getelementptr inbounds i32, i32* %652, i64 %666
  %668 = load i32, i32* %667, align 4
  %669 = insertelement <4 x i32> %664, i32 %668, i32 1
  %670 = extractelement <4 x i32> %659, i32 2
  %671 = zext i32 %670 to i64
  %672 = getelementptr inbounds i32, i32* %652, i64 %671
  %673 = load i32, i32* %672, align 4
  %674 = insertelement <4 x i32> %669, i32 %673, i32 2
  %675 = extractelement <4 x i32> %659, i32 3
  %676 = zext i32 %675 to i64
  %677 = getelementptr inbounds i32, i32* %652, i64 %676
  %678 = load i32, i32* %677, align 4
  %679 = insertelement <4 x i32> %674, i32 %678, i32 3
  %680 = and <4 x i32> %679, <i32 255, i32 255, i32 255, i32 255>
  %681 = sitofp <4 x i32> %680 to <4 x float>
  %682 = fmul <4 x float> %681, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %683 = lshr <4 x i32> %679, <i32 8, i32 8, i32 8, i32 8>
  %684 = and <4 x i32> %683, <i32 255, i32 255, i32 255, i32 255>
  %685 = sitofp <4 x i32> %684 to <4 x float>
  %686 = fmul <4 x float> %685, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %687 = lshr <4 x i32> %679, <i32 16, i32 16, i32 16, i32 16>
  %688 = and <4 x i32> %687, <i32 255, i32 255, i32 255, i32 255>
  %689 = sitofp <4 x i32> %688 to <4 x float>
  %690 = fmul <4 x float> %689, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %691 = lshr <4 x i32> %679, <i32 24, i32 24, i32 24, i32 24>
  %692 = sitofp <4 x i32> %691 to <4 x float>
  %693 = fmul <4 x float> %692, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %694 = icmp eq i32 %177, 6
  %695 = select i1 %694, <4 x float> %690, <4 x float> %682
  %696 = select i1 %694, <4 x float> %682, <4 x float> %690
  br label %697

697:                                              ; preds = %637, %635
  %698 = phi <4 x float> [ zeroinitializer, %635 ], [ %695, %637 ]
  %699 = phi <4 x float> [ zeroinitializer, %635 ], [ %686, %637 ]
  %700 = phi <4 x float> [ zeroinitializer, %635 ], [ %696, %637 ]
  %701 = phi <4 x float> [ zeroinitializer, %635 ], [ %693, %637 ]
  %702 = fmul <4 x float> %50, %55
  %703 = fmul <4 x float> %702, %698
  %704 = fadd <4 x float> %551, %703
  %705 = fmul <4 x float> %702, %699
  %706 = fadd <4 x float> %553, %705
  %707 = fmul <4 x float> %702, %700
  %708 = fadd <4 x float> %555, %707
  %709 = fmul <4 x float> %702, %701
  %710 = fadd <4 x float> %557, %709
  %711 = fadd <4 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %91, label %131 [
    i32 3, label %749
    i32 0, label %749
    i32 1, label %736
    i32 2, label %712
  ]

712:                                              ; preds = %697
  %713 = insertelement <4 x float> undef, float %92, i32 0
  %714 = shufflevector <4 x float> %713, <4 x float> undef, <4 x i32> zeroinitializer
  %715 = fsub <4 x float> %73, %714
  %716 = fadd float %92, %92
  %717 = insertelement <4 x float> undef, float %716, i32 0
  %718 = shufflevector <4 x float> %717, <4 x float> undef, <4 x i32> zeroinitializer
  %719 = fmul float %93, 5.000000e-01
  %720 = insertelement <4 x float> undef, float %719, i32 0
  %721 = shufflevector <4 x float> %720, <4 x float> undef, <4 x i32> zeroinitializer
  %722 = fmul <4 x float> %715, %721
  %723 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %722) #18
  %724 = sitofp <4 x i32> %723 to <4 x float>
  %725 = fcmp olt <4 x float> %722, %724
  %726 = select <4 x i1> %725, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %727 = fsub <4 x float> %724, %726
  %728 = fmul <4 x float> %718, %727
  %729 = fsub <4 x float> %715, %728
  %730 = fsub <4 x float> %729, %714
  %731 = fsub <4 x float> zeroinitializer, %730
  %732 = bitcast <4 x float> %730 to <4 x i32>
  %733 = bitcast <4 x float> %731 to <4 x i32>
  %734 = and <4 x i32> %733, %732
  %735 = bitcast <4 x i32> %734 to <4 x float>
  br label %749

736:                                              ; preds = %697
  %737 = insertelement <4 x float> undef, float %93, i32 0
  %738 = shufflevector <4 x float> %737, <4 x float> undef, <4 x i32> zeroinitializer
  %739 = fmul <4 x float> %73, %738
  %740 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %739) #18
  %741 = sitofp <4 x i32> %740 to <4 x float>
  %742 = fcmp olt <4 x float> %739, %741
  %743 = select <4 x i1> %742, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %744 = fsub <4 x float> %741, %743
  %745 = insertelement <4 x float> undef, float %92, i32 0
  %746 = shufflevector <4 x float> %745, <4 x float> undef, <4 x i32> zeroinitializer
  %747 = fmul <4 x float> %746, %744
  %748 = fsub <4 x float> %73, %747
  br label %749

749:                                              ; preds = %736, %712, %697, %697
  %750 = phi <4 x float> [ %735, %712 ], [ %748, %736 ], [ %73, %697 ], [ %73, %697 ]
  switch i32 %134, label %174 [
    i32 3, label %788
    i32 0, label %788
    i32 1, label %775
    i32 2, label %751
  ]

751:                                              ; preds = %749
  %752 = insertelement <4 x float> undef, float %135, i32 0
  %753 = shufflevector <4 x float> %752, <4 x float> undef, <4 x i32> zeroinitializer
  %754 = fsub <4 x float> %711, %753
  %755 = fadd float %135, %135
  %756 = insertelement <4 x float> undef, float %755, i32 0
  %757 = shufflevector <4 x float> %756, <4 x float> undef, <4 x i32> zeroinitializer
  %758 = fmul float %136, 5.000000e-01
  %759 = insertelement <4 x float> undef, float %758, i32 0
  %760 = shufflevector <4 x float> %759, <4 x float> undef, <4 x i32> zeroinitializer
  %761 = fmul <4 x float> %754, %760
  %762 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %761) #18
  %763 = sitofp <4 x i32> %762 to <4 x float>
  %764 = fcmp olt <4 x float> %761, %763
  %765 = select <4 x i1> %764, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %766 = fsub <4 x float> %763, %765
  %767 = fmul <4 x float> %757, %766
  %768 = fsub <4 x float> %754, %767
  %769 = fsub <4 x float> %768, %753
  %770 = fsub <4 x float> zeroinitializer, %769
  %771 = bitcast <4 x float> %769 to <4 x i32>
  %772 = bitcast <4 x float> %770 to <4 x i32>
  %773 = and <4 x i32> %772, %771
  %774 = bitcast <4 x i32> %773 to <4 x float>
  br label %788

775:                                              ; preds = %749
  %776 = insertelement <4 x float> undef, float %136, i32 0
  %777 = shufflevector <4 x float> %776, <4 x float> undef, <4 x i32> zeroinitializer
  %778 = fmul <4 x float> %711, %777
  %779 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %778) #18
  %780 = sitofp <4 x i32> %779 to <4 x float>
  %781 = fcmp olt <4 x float> %778, %780
  %782 = select <4 x i1> %781, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %783 = fsub <4 x float> %780, %782
  %784 = insertelement <4 x float> undef, float %135, i32 0
  %785 = shufflevector <4 x float> %784, <4 x float> undef, <4 x i32> zeroinitializer
  %786 = fmul <4 x float> %785, %783
  %787 = fsub <4 x float> %711, %786
  br label %788

788:                                              ; preds = %775, %751, %749, %749
  %789 = phi <4 x float> [ %774, %751 ], [ %787, %775 ], [ %711, %749 ], [ %711, %749 ]
  switch i32 %177, label %850 [
    i32 4, label %790
    i32 6, label %790
  ]

790:                                              ; preds = %788, %788
  %791 = insertelement <4 x float> undef, float %92, i32 0
  %792 = shufflevector <4 x float> %791, <4 x float> undef, <4 x i32> zeroinitializer
  %793 = bitcast <4 x float> %792 to <4 x i32>
  %794 = add <4 x i32> %793, <i32 -1, i32 -1, i32 -1, i32 -1>
  %795 = bitcast <4 x i32> %794 to <4 x float>
  %796 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %750) #18
  %797 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %796, <4 x float> %795) #18
  %798 = insertelement <4 x float> undef, float %135, i32 0
  %799 = shufflevector <4 x float> %798, <4 x float> undef, <4 x i32> zeroinitializer
  %800 = bitcast <4 x float> %799 to <4 x i32>
  %801 = add <4 x i32> %800, <i32 -1, i32 -1, i32 -1, i32 -1>
  %802 = bitcast <4 x i32> %801 to <4 x float>
  %803 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %789) #18
  %804 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %803, <4 x float> %802) #18
  %805 = load i32*, i32** %88, align 8
  %806 = fptosi <4 x float> %804 to <4 x i32>
  %807 = load i32, i32* %90, align 8
  %808 = insertelement <4 x i32> undef, i32 %807, i32 0
  %809 = shufflevector <4 x i32> %808, <4 x i32> undef, <4 x i32> zeroinitializer
  %810 = mul <4 x i32> %809, %806
  %811 = fptosi <4 x float> %797 to <4 x i32>
  %812 = add <4 x i32> %810, %811
  %813 = extractelement <4 x i32> %812, i32 0
  %814 = zext i32 %813 to i64
  %815 = getelementptr inbounds i32, i32* %805, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = insertelement <4 x i32> undef, i32 %816, i32 0
  %818 = extractelement <4 x i32> %812, i32 1
  %819 = zext i32 %818 to i64
  %820 = getelementptr inbounds i32, i32* %805, i64 %819
  %821 = load i32, i32* %820, align 4
  %822 = insertelement <4 x i32> %817, i32 %821, i32 1
  %823 = extractelement <4 x i32> %812, i32 2
  %824 = zext i32 %823 to i64
  %825 = getelementptr inbounds i32, i32* %805, i64 %824
  %826 = load i32, i32* %825, align 4
  %827 = insertelement <4 x i32> %822, i32 %826, i32 2
  %828 = extractelement <4 x i32> %812, i32 3
  %829 = zext i32 %828 to i64
  %830 = getelementptr inbounds i32, i32* %805, i64 %829
  %831 = load i32, i32* %830, align 4
  %832 = insertelement <4 x i32> %827, i32 %831, i32 3
  %833 = and <4 x i32> %832, <i32 255, i32 255, i32 255, i32 255>
  %834 = sitofp <4 x i32> %833 to <4 x float>
  %835 = fmul <4 x float> %834, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %836 = lshr <4 x i32> %832, <i32 8, i32 8, i32 8, i32 8>
  %837 = and <4 x i32> %836, <i32 255, i32 255, i32 255, i32 255>
  %838 = sitofp <4 x i32> %837 to <4 x float>
  %839 = fmul <4 x float> %838, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %840 = lshr <4 x i32> %832, <i32 16, i32 16, i32 16, i32 16>
  %841 = and <4 x i32> %840, <i32 255, i32 255, i32 255, i32 255>
  %842 = sitofp <4 x i32> %841 to <4 x float>
  %843 = fmul <4 x float> %842, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %844 = lshr <4 x i32> %832, <i32 24, i32 24, i32 24, i32 24>
  %845 = sitofp <4 x i32> %844 to <4 x float>
  %846 = fmul <4 x float> %845, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %847 = icmp eq i32 %177, 6
  %848 = select i1 %847, <4 x float> %843, <4 x float> %835
  %849 = select i1 %847, <4 x float> %835, <4 x float> %843
  br label %850

850:                                              ; preds = %790, %788
  %851 = phi <4 x float> [ zeroinitializer, %788 ], [ %848, %790 ]
  %852 = phi <4 x float> [ zeroinitializer, %788 ], [ %839, %790 ]
  %853 = phi <4 x float> [ zeroinitializer, %788 ], [ %849, %790 ]
  %854 = phi <4 x float> [ zeroinitializer, %788 ], [ %846, %790 ]
  %855 = fmul <4 x float> %34, %61
  %856 = fmul <4 x float> %855, %851
  %857 = fadd <4 x float> %704, %856
  %858 = fmul <4 x float> %855, %852
  %859 = fadd <4 x float> %706, %858
  %860 = fmul <4 x float> %855, %853
  %861 = fadd <4 x float> %708, %860
  %862 = fmul <4 x float> %855, %854
  %863 = fadd <4 x float> %710, %862
  switch i32 %91, label %131 [
    i32 3, label %901
    i32 0, label %901
    i32 1, label %888
    i32 2, label %864
  ]

864:                                              ; preds = %850
  %865 = insertelement <4 x float> undef, float %92, i32 0
  %866 = shufflevector <4 x float> %865, <4 x float> undef, <4 x i32> zeroinitializer
  %867 = fsub <4 x float> %252, %866
  %868 = fadd float %92, %92
  %869 = insertelement <4 x float> undef, float %868, i32 0
  %870 = shufflevector <4 x float> %869, <4 x float> undef, <4 x i32> zeroinitializer
  %871 = fmul float %93, 5.000000e-01
  %872 = insertelement <4 x float> undef, float %871, i32 0
  %873 = shufflevector <4 x float> %872, <4 x float> undef, <4 x i32> zeroinitializer
  %874 = fmul <4 x float> %867, %873
  %875 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %874) #18
  %876 = sitofp <4 x i32> %875 to <4 x float>
  %877 = fcmp olt <4 x float> %874, %876
  %878 = select <4 x i1> %877, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %879 = fsub <4 x float> %876, %878
  %880 = fmul <4 x float> %870, %879
  %881 = fsub <4 x float> %867, %880
  %882 = fsub <4 x float> %881, %866
  %883 = fsub <4 x float> zeroinitializer, %882
  %884 = bitcast <4 x float> %882 to <4 x i32>
  %885 = bitcast <4 x float> %883 to <4 x i32>
  %886 = and <4 x i32> %885, %884
  %887 = bitcast <4 x i32> %886 to <4 x float>
  br label %901

888:                                              ; preds = %850
  %889 = insertelement <4 x float> undef, float %93, i32 0
  %890 = shufflevector <4 x float> %889, <4 x float> undef, <4 x i32> zeroinitializer
  %891 = fmul <4 x float> %252, %890
  %892 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %891) #18
  %893 = sitofp <4 x i32> %892 to <4 x float>
  %894 = fcmp olt <4 x float> %891, %893
  %895 = select <4 x i1> %894, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %896 = fsub <4 x float> %893, %895
  %897 = insertelement <4 x float> undef, float %92, i32 0
  %898 = shufflevector <4 x float> %897, <4 x float> undef, <4 x i32> zeroinitializer
  %899 = fmul <4 x float> %898, %896
  %900 = fsub <4 x float> %252, %899
  br label %901

901:                                              ; preds = %888, %864, %850, %850
  %902 = phi <4 x float> [ %887, %864 ], [ %900, %888 ], [ %252, %850 ], [ %252, %850 ]
  switch i32 %134, label %174 [
    i32 3, label %940
    i32 0, label %940
    i32 1, label %927
    i32 2, label %903
  ]

903:                                              ; preds = %901
  %904 = insertelement <4 x float> undef, float %135, i32 0
  %905 = shufflevector <4 x float> %904, <4 x float> undef, <4 x i32> zeroinitializer
  %906 = fsub <4 x float> %711, %905
  %907 = fadd float %135, %135
  %908 = insertelement <4 x float> undef, float %907, i32 0
  %909 = shufflevector <4 x float> %908, <4 x float> undef, <4 x i32> zeroinitializer
  %910 = fmul float %136, 5.000000e-01
  %911 = insertelement <4 x float> undef, float %910, i32 0
  %912 = shufflevector <4 x float> %911, <4 x float> undef, <4 x i32> zeroinitializer
  %913 = fmul <4 x float> %906, %912
  %914 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %913) #18
  %915 = sitofp <4 x i32> %914 to <4 x float>
  %916 = fcmp olt <4 x float> %913, %915
  %917 = select <4 x i1> %916, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %918 = fsub <4 x float> %915, %917
  %919 = fmul <4 x float> %909, %918
  %920 = fsub <4 x float> %906, %919
  %921 = fsub <4 x float> %920, %905
  %922 = fsub <4 x float> zeroinitializer, %921
  %923 = bitcast <4 x float> %921 to <4 x i32>
  %924 = bitcast <4 x float> %922 to <4 x i32>
  %925 = and <4 x i32> %924, %923
  %926 = bitcast <4 x i32> %925 to <4 x float>
  br label %940

927:                                              ; preds = %901
  %928 = insertelement <4 x float> undef, float %136, i32 0
  %929 = shufflevector <4 x float> %928, <4 x float> undef, <4 x i32> zeroinitializer
  %930 = fmul <4 x float> %711, %929
  %931 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %930) #18
  %932 = sitofp <4 x i32> %931 to <4 x float>
  %933 = fcmp olt <4 x float> %930, %932
  %934 = select <4 x i1> %933, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %935 = fsub <4 x float> %932, %934
  %936 = insertelement <4 x float> undef, float %135, i32 0
  %937 = shufflevector <4 x float> %936, <4 x float> undef, <4 x i32> zeroinitializer
  %938 = fmul <4 x float> %937, %935
  %939 = fsub <4 x float> %711, %938
  br label %940

940:                                              ; preds = %927, %903, %901, %901
  %941 = phi <4 x float> [ %926, %903 ], [ %939, %927 ], [ %711, %901 ], [ %711, %901 ]
  switch i32 %177, label %1002 [
    i32 4, label %942
    i32 6, label %942
  ]

942:                                              ; preds = %940, %940
  %943 = insertelement <4 x float> undef, float %92, i32 0
  %944 = shufflevector <4 x float> %943, <4 x float> undef, <4 x i32> zeroinitializer
  %945 = bitcast <4 x float> %944 to <4 x i32>
  %946 = add <4 x i32> %945, <i32 -1, i32 -1, i32 -1, i32 -1>
  %947 = bitcast <4 x i32> %946 to <4 x float>
  %948 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %902) #18
  %949 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %948, <4 x float> %947) #18
  %950 = insertelement <4 x float> undef, float %135, i32 0
  %951 = shufflevector <4 x float> %950, <4 x float> undef, <4 x i32> zeroinitializer
  %952 = bitcast <4 x float> %951 to <4 x i32>
  %953 = add <4 x i32> %952, <i32 -1, i32 -1, i32 -1, i32 -1>
  %954 = bitcast <4 x i32> %953 to <4 x float>
  %955 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %941) #18
  %956 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %955, <4 x float> %954) #18
  %957 = load i32*, i32** %88, align 8
  %958 = fptosi <4 x float> %956 to <4 x i32>
  %959 = load i32, i32* %90, align 8
  %960 = insertelement <4 x i32> undef, i32 %959, i32 0
  %961 = shufflevector <4 x i32> %960, <4 x i32> undef, <4 x i32> zeroinitializer
  %962 = mul <4 x i32> %961, %958
  %963 = fptosi <4 x float> %949 to <4 x i32>
  %964 = add <4 x i32> %962, %963
  %965 = extractelement <4 x i32> %964, i32 0
  %966 = zext i32 %965 to i64
  %967 = getelementptr inbounds i32, i32* %957, i64 %966
  %968 = load i32, i32* %967, align 4
  %969 = insertelement <4 x i32> undef, i32 %968, i32 0
  %970 = extractelement <4 x i32> %964, i32 1
  %971 = zext i32 %970 to i64
  %972 = getelementptr inbounds i32, i32* %957, i64 %971
  %973 = load i32, i32* %972, align 4
  %974 = insertelement <4 x i32> %969, i32 %973, i32 1
  %975 = extractelement <4 x i32> %964, i32 2
  %976 = zext i32 %975 to i64
  %977 = getelementptr inbounds i32, i32* %957, i64 %976
  %978 = load i32, i32* %977, align 4
  %979 = insertelement <4 x i32> %974, i32 %978, i32 2
  %980 = extractelement <4 x i32> %964, i32 3
  %981 = zext i32 %980 to i64
  %982 = getelementptr inbounds i32, i32* %957, i64 %981
  %983 = load i32, i32* %982, align 4
  %984 = insertelement <4 x i32> %979, i32 %983, i32 3
  %985 = and <4 x i32> %984, <i32 255, i32 255, i32 255, i32 255>
  %986 = sitofp <4 x i32> %985 to <4 x float>
  %987 = fmul <4 x float> %986, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %988 = lshr <4 x i32> %984, <i32 8, i32 8, i32 8, i32 8>
  %989 = and <4 x i32> %988, <i32 255, i32 255, i32 255, i32 255>
  %990 = sitofp <4 x i32> %989 to <4 x float>
  %991 = fmul <4 x float> %990, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %992 = lshr <4 x i32> %984, <i32 16, i32 16, i32 16, i32 16>
  %993 = and <4 x i32> %992, <i32 255, i32 255, i32 255, i32 255>
  %994 = sitofp <4 x i32> %993 to <4 x float>
  %995 = fmul <4 x float> %994, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %996 = lshr <4 x i32> %984, <i32 24, i32 24, i32 24, i32 24>
  %997 = sitofp <4 x i32> %996 to <4 x float>
  %998 = fmul <4 x float> %997, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %999 = icmp eq i32 %177, 6
  %1000 = select i1 %999, <4 x float> %995, <4 x float> %987
  %1001 = select i1 %999, <4 x float> %987, <4 x float> %995
  br label %1002

1002:                                             ; preds = %942, %940
  %1003 = phi <4 x float> [ zeroinitializer, %940 ], [ %1000, %942 ]
  %1004 = phi <4 x float> [ zeroinitializer, %940 ], [ %991, %942 ]
  %1005 = phi <4 x float> [ zeroinitializer, %940 ], [ %1001, %942 ]
  %1006 = phi <4 x float> [ zeroinitializer, %940 ], [ %998, %942 ]
  %1007 = fmul <4 x float> %40, %61
  %1008 = fmul <4 x float> %1007, %1003
  %1009 = fadd <4 x float> %857, %1008
  %1010 = fmul <4 x float> %1007, %1004
  %1011 = fadd <4 x float> %859, %1010
  %1012 = fmul <4 x float> %1007, %1005
  %1013 = fadd <4 x float> %861, %1012
  %1014 = fmul <4 x float> %1007, %1006
  %1015 = fadd <4 x float> %863, %1014
  switch i32 %91, label %131 [
    i32 3, label %1053
    i32 0, label %1053
    i32 1, label %1040
    i32 2, label %1016
  ]

1016:                                             ; preds = %1002
  %1017 = insertelement <4 x float> undef, float %92, i32 0
  %1018 = shufflevector <4 x float> %1017, <4 x float> undef, <4 x i32> zeroinitializer
  %1019 = fsub <4 x float> %405, %1018
  %1020 = fadd float %92, %92
  %1021 = insertelement <4 x float> undef, float %1020, i32 0
  %1022 = shufflevector <4 x float> %1021, <4 x float> undef, <4 x i32> zeroinitializer
  %1023 = fmul float %93, 5.000000e-01
  %1024 = insertelement <4 x float> undef, float %1023, i32 0
  %1025 = shufflevector <4 x float> %1024, <4 x float> undef, <4 x i32> zeroinitializer
  %1026 = fmul <4 x float> %1019, %1025
  %1027 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1026) #18
  %1028 = sitofp <4 x i32> %1027 to <4 x float>
  %1029 = fcmp olt <4 x float> %1026, %1028
  %1030 = select <4 x i1> %1029, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1031 = fsub <4 x float> %1028, %1030
  %1032 = fmul <4 x float> %1022, %1031
  %1033 = fsub <4 x float> %1019, %1032
  %1034 = fsub <4 x float> %1033, %1018
  %1035 = fsub <4 x float> zeroinitializer, %1034
  %1036 = bitcast <4 x float> %1034 to <4 x i32>
  %1037 = bitcast <4 x float> %1035 to <4 x i32>
  %1038 = and <4 x i32> %1037, %1036
  %1039 = bitcast <4 x i32> %1038 to <4 x float>
  br label %1053

1040:                                             ; preds = %1002
  %1041 = insertelement <4 x float> undef, float %93, i32 0
  %1042 = shufflevector <4 x float> %1041, <4 x float> undef, <4 x i32> zeroinitializer
  %1043 = fmul <4 x float> %405, %1042
  %1044 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1043) #18
  %1045 = sitofp <4 x i32> %1044 to <4 x float>
  %1046 = fcmp olt <4 x float> %1043, %1045
  %1047 = select <4 x i1> %1046, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1048 = fsub <4 x float> %1045, %1047
  %1049 = insertelement <4 x float> undef, float %92, i32 0
  %1050 = shufflevector <4 x float> %1049, <4 x float> undef, <4 x i32> zeroinitializer
  %1051 = fmul <4 x float> %1050, %1048
  %1052 = fsub <4 x float> %405, %1051
  br label %1053

1053:                                             ; preds = %1040, %1016, %1002, %1002
  %1054 = phi <4 x float> [ %1039, %1016 ], [ %1052, %1040 ], [ %405, %1002 ], [ %405, %1002 ]
  switch i32 %134, label %174 [
    i32 3, label %1092
    i32 0, label %1092
    i32 1, label %1079
    i32 2, label %1055
  ]

1055:                                             ; preds = %1053
  %1056 = insertelement <4 x float> undef, float %135, i32 0
  %1057 = shufflevector <4 x float> %1056, <4 x float> undef, <4 x i32> zeroinitializer
  %1058 = fsub <4 x float> %711, %1057
  %1059 = fadd float %135, %135
  %1060 = insertelement <4 x float> undef, float %1059, i32 0
  %1061 = shufflevector <4 x float> %1060, <4 x float> undef, <4 x i32> zeroinitializer
  %1062 = fmul float %136, 5.000000e-01
  %1063 = insertelement <4 x float> undef, float %1062, i32 0
  %1064 = shufflevector <4 x float> %1063, <4 x float> undef, <4 x i32> zeroinitializer
  %1065 = fmul <4 x float> %1058, %1064
  %1066 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1065) #18
  %1067 = sitofp <4 x i32> %1066 to <4 x float>
  %1068 = fcmp olt <4 x float> %1065, %1067
  %1069 = select <4 x i1> %1068, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1070 = fsub <4 x float> %1067, %1069
  %1071 = fmul <4 x float> %1061, %1070
  %1072 = fsub <4 x float> %1058, %1071
  %1073 = fsub <4 x float> %1072, %1057
  %1074 = fsub <4 x float> zeroinitializer, %1073
  %1075 = bitcast <4 x float> %1073 to <4 x i32>
  %1076 = bitcast <4 x float> %1074 to <4 x i32>
  %1077 = and <4 x i32> %1076, %1075
  %1078 = bitcast <4 x i32> %1077 to <4 x float>
  br label %1092

1079:                                             ; preds = %1053
  %1080 = insertelement <4 x float> undef, float %136, i32 0
  %1081 = shufflevector <4 x float> %1080, <4 x float> undef, <4 x i32> zeroinitializer
  %1082 = fmul <4 x float> %711, %1081
  %1083 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1082) #18
  %1084 = sitofp <4 x i32> %1083 to <4 x float>
  %1085 = fcmp olt <4 x float> %1082, %1084
  %1086 = select <4 x i1> %1085, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1087 = fsub <4 x float> %1084, %1086
  %1088 = insertelement <4 x float> undef, float %135, i32 0
  %1089 = shufflevector <4 x float> %1088, <4 x float> undef, <4 x i32> zeroinitializer
  %1090 = fmul <4 x float> %1089, %1087
  %1091 = fsub <4 x float> %711, %1090
  br label %1092

1092:                                             ; preds = %1079, %1055, %1053, %1053
  %1093 = phi <4 x float> [ %1078, %1055 ], [ %1091, %1079 ], [ %711, %1053 ], [ %711, %1053 ]
  switch i32 %177, label %1154 [
    i32 4, label %1094
    i32 6, label %1094
  ]

1094:                                             ; preds = %1092, %1092
  %1095 = insertelement <4 x float> undef, float %92, i32 0
  %1096 = shufflevector <4 x float> %1095, <4 x float> undef, <4 x i32> zeroinitializer
  %1097 = bitcast <4 x float> %1096 to <4 x i32>
  %1098 = add <4 x i32> %1097, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1099 = bitcast <4 x i32> %1098 to <4 x float>
  %1100 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1054) #18
  %1101 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1100, <4 x float> %1099) #18
  %1102 = insertelement <4 x float> undef, float %135, i32 0
  %1103 = shufflevector <4 x float> %1102, <4 x float> undef, <4 x i32> zeroinitializer
  %1104 = bitcast <4 x float> %1103 to <4 x i32>
  %1105 = add <4 x i32> %1104, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1106 = bitcast <4 x i32> %1105 to <4 x float>
  %1107 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1093) #18
  %1108 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1107, <4 x float> %1106) #18
  %1109 = load i32*, i32** %88, align 8
  %1110 = fptosi <4 x float> %1108 to <4 x i32>
  %1111 = load i32, i32* %90, align 8
  %1112 = insertelement <4 x i32> undef, i32 %1111, i32 0
  %1113 = shufflevector <4 x i32> %1112, <4 x i32> undef, <4 x i32> zeroinitializer
  %1114 = mul <4 x i32> %1113, %1110
  %1115 = fptosi <4 x float> %1101 to <4 x i32>
  %1116 = add <4 x i32> %1114, %1115
  %1117 = extractelement <4 x i32> %1116, i32 0
  %1118 = zext i32 %1117 to i64
  %1119 = getelementptr inbounds i32, i32* %1109, i64 %1118
  %1120 = load i32, i32* %1119, align 4
  %1121 = insertelement <4 x i32> undef, i32 %1120, i32 0
  %1122 = extractelement <4 x i32> %1116, i32 1
  %1123 = zext i32 %1122 to i64
  %1124 = getelementptr inbounds i32, i32* %1109, i64 %1123
  %1125 = load i32, i32* %1124, align 4
  %1126 = insertelement <4 x i32> %1121, i32 %1125, i32 1
  %1127 = extractelement <4 x i32> %1116, i32 2
  %1128 = zext i32 %1127 to i64
  %1129 = getelementptr inbounds i32, i32* %1109, i64 %1128
  %1130 = load i32, i32* %1129, align 4
  %1131 = insertelement <4 x i32> %1126, i32 %1130, i32 2
  %1132 = extractelement <4 x i32> %1116, i32 3
  %1133 = zext i32 %1132 to i64
  %1134 = getelementptr inbounds i32, i32* %1109, i64 %1133
  %1135 = load i32, i32* %1134, align 4
  %1136 = insertelement <4 x i32> %1131, i32 %1135, i32 3
  %1137 = and <4 x i32> %1136, <i32 255, i32 255, i32 255, i32 255>
  %1138 = sitofp <4 x i32> %1137 to <4 x float>
  %1139 = fmul <4 x float> %1138, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1140 = lshr <4 x i32> %1136, <i32 8, i32 8, i32 8, i32 8>
  %1141 = and <4 x i32> %1140, <i32 255, i32 255, i32 255, i32 255>
  %1142 = sitofp <4 x i32> %1141 to <4 x float>
  %1143 = fmul <4 x float> %1142, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1144 = lshr <4 x i32> %1136, <i32 16, i32 16, i32 16, i32 16>
  %1145 = and <4 x i32> %1144, <i32 255, i32 255, i32 255, i32 255>
  %1146 = sitofp <4 x i32> %1145 to <4 x float>
  %1147 = fmul <4 x float> %1146, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1148 = lshr <4 x i32> %1136, <i32 24, i32 24, i32 24, i32 24>
  %1149 = sitofp <4 x i32> %1148 to <4 x float>
  %1150 = fmul <4 x float> %1149, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1151 = icmp eq i32 %177, 6
  %1152 = select i1 %1151, <4 x float> %1147, <4 x float> %1139
  %1153 = select i1 %1151, <4 x float> %1139, <4 x float> %1147
  br label %1154

1154:                                             ; preds = %1094, %1092
  %1155 = phi <4 x float> [ zeroinitializer, %1092 ], [ %1152, %1094 ]
  %1156 = phi <4 x float> [ zeroinitializer, %1092 ], [ %1143, %1094 ]
  %1157 = phi <4 x float> [ zeroinitializer, %1092 ], [ %1153, %1094 ]
  %1158 = phi <4 x float> [ zeroinitializer, %1092 ], [ %1150, %1094 ]
  %1159 = fmul <4 x float> %46, %61
  %1160 = fmul <4 x float> %1159, %1155
  %1161 = fadd <4 x float> %1009, %1160
  %1162 = fmul <4 x float> %1159, %1156
  %1163 = fadd <4 x float> %1011, %1162
  %1164 = fmul <4 x float> %1159, %1157
  %1165 = fadd <4 x float> %1013, %1164
  %1166 = fmul <4 x float> %1159, %1158
  %1167 = fadd <4 x float> %1015, %1166
  switch i32 %91, label %131 [
    i32 3, label %1205
    i32 0, label %1205
    i32 1, label %1192
    i32 2, label %1168
  ]

1168:                                             ; preds = %1154
  %1169 = insertelement <4 x float> undef, float %92, i32 0
  %1170 = shufflevector <4 x float> %1169, <4 x float> undef, <4 x i32> zeroinitializer
  %1171 = fsub <4 x float> %558, %1170
  %1172 = fadd float %92, %92
  %1173 = insertelement <4 x float> undef, float %1172, i32 0
  %1174 = shufflevector <4 x float> %1173, <4 x float> undef, <4 x i32> zeroinitializer
  %1175 = fmul float %93, 5.000000e-01
  %1176 = insertelement <4 x float> undef, float %1175, i32 0
  %1177 = shufflevector <4 x float> %1176, <4 x float> undef, <4 x i32> zeroinitializer
  %1178 = fmul <4 x float> %1171, %1177
  %1179 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1178) #18
  %1180 = sitofp <4 x i32> %1179 to <4 x float>
  %1181 = fcmp olt <4 x float> %1178, %1180
  %1182 = select <4 x i1> %1181, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1183 = fsub <4 x float> %1180, %1182
  %1184 = fmul <4 x float> %1174, %1183
  %1185 = fsub <4 x float> %1171, %1184
  %1186 = fsub <4 x float> %1185, %1170
  %1187 = fsub <4 x float> zeroinitializer, %1186
  %1188 = bitcast <4 x float> %1186 to <4 x i32>
  %1189 = bitcast <4 x float> %1187 to <4 x i32>
  %1190 = and <4 x i32> %1189, %1188
  %1191 = bitcast <4 x i32> %1190 to <4 x float>
  br label %1205

1192:                                             ; preds = %1154
  %1193 = insertelement <4 x float> undef, float %93, i32 0
  %1194 = shufflevector <4 x float> %1193, <4 x float> undef, <4 x i32> zeroinitializer
  %1195 = fmul <4 x float> %558, %1194
  %1196 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1195) #18
  %1197 = sitofp <4 x i32> %1196 to <4 x float>
  %1198 = fcmp olt <4 x float> %1195, %1197
  %1199 = select <4 x i1> %1198, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1200 = fsub <4 x float> %1197, %1199
  %1201 = insertelement <4 x float> undef, float %92, i32 0
  %1202 = shufflevector <4 x float> %1201, <4 x float> undef, <4 x i32> zeroinitializer
  %1203 = fmul <4 x float> %1202, %1200
  %1204 = fsub <4 x float> %558, %1203
  br label %1205

1205:                                             ; preds = %1192, %1168, %1154, %1154
  %1206 = phi <4 x float> [ %1191, %1168 ], [ %1204, %1192 ], [ %558, %1154 ], [ %558, %1154 ]
  switch i32 %134, label %174 [
    i32 3, label %1244
    i32 0, label %1244
    i32 1, label %1231
    i32 2, label %1207
  ]

1207:                                             ; preds = %1205
  %1208 = insertelement <4 x float> undef, float %135, i32 0
  %1209 = shufflevector <4 x float> %1208, <4 x float> undef, <4 x i32> zeroinitializer
  %1210 = fsub <4 x float> %711, %1209
  %1211 = fadd float %135, %135
  %1212 = insertelement <4 x float> undef, float %1211, i32 0
  %1213 = shufflevector <4 x float> %1212, <4 x float> undef, <4 x i32> zeroinitializer
  %1214 = fmul float %136, 5.000000e-01
  %1215 = insertelement <4 x float> undef, float %1214, i32 0
  %1216 = shufflevector <4 x float> %1215, <4 x float> undef, <4 x i32> zeroinitializer
  %1217 = fmul <4 x float> %1210, %1216
  %1218 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1217) #18
  %1219 = sitofp <4 x i32> %1218 to <4 x float>
  %1220 = fcmp olt <4 x float> %1217, %1219
  %1221 = select <4 x i1> %1220, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1222 = fsub <4 x float> %1219, %1221
  %1223 = fmul <4 x float> %1213, %1222
  %1224 = fsub <4 x float> %1210, %1223
  %1225 = fsub <4 x float> %1224, %1209
  %1226 = fsub <4 x float> zeroinitializer, %1225
  %1227 = bitcast <4 x float> %1225 to <4 x i32>
  %1228 = bitcast <4 x float> %1226 to <4 x i32>
  %1229 = and <4 x i32> %1228, %1227
  %1230 = bitcast <4 x i32> %1229 to <4 x float>
  br label %1244

1231:                                             ; preds = %1205
  %1232 = insertelement <4 x float> undef, float %136, i32 0
  %1233 = shufflevector <4 x float> %1232, <4 x float> undef, <4 x i32> zeroinitializer
  %1234 = fmul <4 x float> %711, %1233
  %1235 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1234) #18
  %1236 = sitofp <4 x i32> %1235 to <4 x float>
  %1237 = fcmp olt <4 x float> %1234, %1236
  %1238 = select <4 x i1> %1237, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1239 = fsub <4 x float> %1236, %1238
  %1240 = insertelement <4 x float> undef, float %135, i32 0
  %1241 = shufflevector <4 x float> %1240, <4 x float> undef, <4 x i32> zeroinitializer
  %1242 = fmul <4 x float> %1241, %1239
  %1243 = fsub <4 x float> %711, %1242
  br label %1244

1244:                                             ; preds = %1231, %1207, %1205, %1205
  %1245 = phi <4 x float> [ %1230, %1207 ], [ %1243, %1231 ], [ %711, %1205 ], [ %711, %1205 ]
  switch i32 %177, label %1306 [
    i32 4, label %1246
    i32 6, label %1246
  ]

1246:                                             ; preds = %1244, %1244
  %1247 = insertelement <4 x float> undef, float %92, i32 0
  %1248 = shufflevector <4 x float> %1247, <4 x float> undef, <4 x i32> zeroinitializer
  %1249 = bitcast <4 x float> %1248 to <4 x i32>
  %1250 = add <4 x i32> %1249, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1251 = bitcast <4 x i32> %1250 to <4 x float>
  %1252 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1206) #18
  %1253 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1252, <4 x float> %1251) #18
  %1254 = insertelement <4 x float> undef, float %135, i32 0
  %1255 = shufflevector <4 x float> %1254, <4 x float> undef, <4 x i32> zeroinitializer
  %1256 = bitcast <4 x float> %1255 to <4 x i32>
  %1257 = add <4 x i32> %1256, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1258 = bitcast <4 x i32> %1257 to <4 x float>
  %1259 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1245) #18
  %1260 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1259, <4 x float> %1258) #18
  %1261 = load i32*, i32** %88, align 8
  %1262 = fptosi <4 x float> %1260 to <4 x i32>
  %1263 = load i32, i32* %90, align 8
  %1264 = insertelement <4 x i32> undef, i32 %1263, i32 0
  %1265 = shufflevector <4 x i32> %1264, <4 x i32> undef, <4 x i32> zeroinitializer
  %1266 = mul <4 x i32> %1265, %1262
  %1267 = fptosi <4 x float> %1253 to <4 x i32>
  %1268 = add <4 x i32> %1266, %1267
  %1269 = extractelement <4 x i32> %1268, i32 0
  %1270 = zext i32 %1269 to i64
  %1271 = getelementptr inbounds i32, i32* %1261, i64 %1270
  %1272 = load i32, i32* %1271, align 4
  %1273 = insertelement <4 x i32> undef, i32 %1272, i32 0
  %1274 = extractelement <4 x i32> %1268, i32 1
  %1275 = zext i32 %1274 to i64
  %1276 = getelementptr inbounds i32, i32* %1261, i64 %1275
  %1277 = load i32, i32* %1276, align 4
  %1278 = insertelement <4 x i32> %1273, i32 %1277, i32 1
  %1279 = extractelement <4 x i32> %1268, i32 2
  %1280 = zext i32 %1279 to i64
  %1281 = getelementptr inbounds i32, i32* %1261, i64 %1280
  %1282 = load i32, i32* %1281, align 4
  %1283 = insertelement <4 x i32> %1278, i32 %1282, i32 2
  %1284 = extractelement <4 x i32> %1268, i32 3
  %1285 = zext i32 %1284 to i64
  %1286 = getelementptr inbounds i32, i32* %1261, i64 %1285
  %1287 = load i32, i32* %1286, align 4
  %1288 = insertelement <4 x i32> %1283, i32 %1287, i32 3
  %1289 = and <4 x i32> %1288, <i32 255, i32 255, i32 255, i32 255>
  %1290 = sitofp <4 x i32> %1289 to <4 x float>
  %1291 = fmul <4 x float> %1290, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1292 = lshr <4 x i32> %1288, <i32 8, i32 8, i32 8, i32 8>
  %1293 = and <4 x i32> %1292, <i32 255, i32 255, i32 255, i32 255>
  %1294 = sitofp <4 x i32> %1293 to <4 x float>
  %1295 = fmul <4 x float> %1294, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1296 = lshr <4 x i32> %1288, <i32 16, i32 16, i32 16, i32 16>
  %1297 = and <4 x i32> %1296, <i32 255, i32 255, i32 255, i32 255>
  %1298 = sitofp <4 x i32> %1297 to <4 x float>
  %1299 = fmul <4 x float> %1298, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1300 = lshr <4 x i32> %1288, <i32 24, i32 24, i32 24, i32 24>
  %1301 = sitofp <4 x i32> %1300 to <4 x float>
  %1302 = fmul <4 x float> %1301, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1303 = icmp eq i32 %177, 6
  %1304 = select i1 %1303, <4 x float> %1299, <4 x float> %1291
  %1305 = select i1 %1303, <4 x float> %1291, <4 x float> %1299
  br label %1306

1306:                                             ; preds = %1246, %1244
  %1307 = phi <4 x float> [ zeroinitializer, %1244 ], [ %1304, %1246 ]
  %1308 = phi <4 x float> [ zeroinitializer, %1244 ], [ %1295, %1246 ]
  %1309 = phi <4 x float> [ zeroinitializer, %1244 ], [ %1305, %1246 ]
  %1310 = phi <4 x float> [ zeroinitializer, %1244 ], [ %1302, %1246 ]
  %1311 = fmul <4 x float> %50, %61
  %1312 = fmul <4 x float> %1311, %1307
  %1313 = fadd <4 x float> %1161, %1312
  %1314 = fmul <4 x float> %1311, %1308
  %1315 = fadd <4 x float> %1163, %1314
  %1316 = fmul <4 x float> %1311, %1309
  %1317 = fadd <4 x float> %1165, %1316
  %1318 = fmul <4 x float> %1311, %1310
  %1319 = fadd <4 x float> %1167, %1318
  %1320 = fadd <4 x float> %711, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %91, label %131 [
    i32 3, label %1358
    i32 0, label %1358
    i32 1, label %1345
    i32 2, label %1321
  ]

1321:                                             ; preds = %1306
  %1322 = insertelement <4 x float> undef, float %92, i32 0
  %1323 = shufflevector <4 x float> %1322, <4 x float> undef, <4 x i32> zeroinitializer
  %1324 = fsub <4 x float> %73, %1323
  %1325 = fadd float %92, %92
  %1326 = insertelement <4 x float> undef, float %1325, i32 0
  %1327 = shufflevector <4 x float> %1326, <4 x float> undef, <4 x i32> zeroinitializer
  %1328 = fmul float %93, 5.000000e-01
  %1329 = insertelement <4 x float> undef, float %1328, i32 0
  %1330 = shufflevector <4 x float> %1329, <4 x float> undef, <4 x i32> zeroinitializer
  %1331 = fmul <4 x float> %1324, %1330
  %1332 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1331) #18
  %1333 = sitofp <4 x i32> %1332 to <4 x float>
  %1334 = fcmp olt <4 x float> %1331, %1333
  %1335 = select <4 x i1> %1334, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1336 = fsub <4 x float> %1333, %1335
  %1337 = fmul <4 x float> %1327, %1336
  %1338 = fsub <4 x float> %1324, %1337
  %1339 = fsub <4 x float> %1338, %1323
  %1340 = fsub <4 x float> zeroinitializer, %1339
  %1341 = bitcast <4 x float> %1339 to <4 x i32>
  %1342 = bitcast <4 x float> %1340 to <4 x i32>
  %1343 = and <4 x i32> %1342, %1341
  %1344 = bitcast <4 x i32> %1343 to <4 x float>
  br label %1358

1345:                                             ; preds = %1306
  %1346 = insertelement <4 x float> undef, float %93, i32 0
  %1347 = shufflevector <4 x float> %1346, <4 x float> undef, <4 x i32> zeroinitializer
  %1348 = fmul <4 x float> %73, %1347
  %1349 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1348) #18
  %1350 = sitofp <4 x i32> %1349 to <4 x float>
  %1351 = fcmp olt <4 x float> %1348, %1350
  %1352 = select <4 x i1> %1351, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1353 = fsub <4 x float> %1350, %1352
  %1354 = insertelement <4 x float> undef, float %92, i32 0
  %1355 = shufflevector <4 x float> %1354, <4 x float> undef, <4 x i32> zeroinitializer
  %1356 = fmul <4 x float> %1355, %1353
  %1357 = fsub <4 x float> %73, %1356
  br label %1358

1358:                                             ; preds = %1345, %1321, %1306, %1306
  %1359 = phi <4 x float> [ %1344, %1321 ], [ %1357, %1345 ], [ %73, %1306 ], [ %73, %1306 ]
  switch i32 %134, label %174 [
    i32 3, label %1397
    i32 0, label %1397
    i32 1, label %1384
    i32 2, label %1360
  ]

1360:                                             ; preds = %1358
  %1361 = insertelement <4 x float> undef, float %135, i32 0
  %1362 = shufflevector <4 x float> %1361, <4 x float> undef, <4 x i32> zeroinitializer
  %1363 = fsub <4 x float> %1320, %1362
  %1364 = fadd float %135, %135
  %1365 = insertelement <4 x float> undef, float %1364, i32 0
  %1366 = shufflevector <4 x float> %1365, <4 x float> undef, <4 x i32> zeroinitializer
  %1367 = fmul float %136, 5.000000e-01
  %1368 = insertelement <4 x float> undef, float %1367, i32 0
  %1369 = shufflevector <4 x float> %1368, <4 x float> undef, <4 x i32> zeroinitializer
  %1370 = fmul <4 x float> %1363, %1369
  %1371 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1370) #18
  %1372 = sitofp <4 x i32> %1371 to <4 x float>
  %1373 = fcmp olt <4 x float> %1370, %1372
  %1374 = select <4 x i1> %1373, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1375 = fsub <4 x float> %1372, %1374
  %1376 = fmul <4 x float> %1366, %1375
  %1377 = fsub <4 x float> %1363, %1376
  %1378 = fsub <4 x float> %1377, %1362
  %1379 = fsub <4 x float> zeroinitializer, %1378
  %1380 = bitcast <4 x float> %1378 to <4 x i32>
  %1381 = bitcast <4 x float> %1379 to <4 x i32>
  %1382 = and <4 x i32> %1381, %1380
  %1383 = bitcast <4 x i32> %1382 to <4 x float>
  br label %1397

1384:                                             ; preds = %1358
  %1385 = insertelement <4 x float> undef, float %136, i32 0
  %1386 = shufflevector <4 x float> %1385, <4 x float> undef, <4 x i32> zeroinitializer
  %1387 = fmul <4 x float> %1320, %1386
  %1388 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1387) #18
  %1389 = sitofp <4 x i32> %1388 to <4 x float>
  %1390 = fcmp olt <4 x float> %1387, %1389
  %1391 = select <4 x i1> %1390, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1392 = fsub <4 x float> %1389, %1391
  %1393 = insertelement <4 x float> undef, float %135, i32 0
  %1394 = shufflevector <4 x float> %1393, <4 x float> undef, <4 x i32> zeroinitializer
  %1395 = fmul <4 x float> %1394, %1392
  %1396 = fsub <4 x float> %1320, %1395
  br label %1397

1397:                                             ; preds = %1384, %1360, %1358, %1358
  %1398 = phi <4 x float> [ %1383, %1360 ], [ %1396, %1384 ], [ %1320, %1358 ], [ %1320, %1358 ]
  switch i32 %177, label %1459 [
    i32 4, label %1399
    i32 6, label %1399
  ]

1399:                                             ; preds = %1397, %1397
  %1400 = insertelement <4 x float> undef, float %92, i32 0
  %1401 = shufflevector <4 x float> %1400, <4 x float> undef, <4 x i32> zeroinitializer
  %1402 = bitcast <4 x float> %1401 to <4 x i32>
  %1403 = add <4 x i32> %1402, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1404 = bitcast <4 x i32> %1403 to <4 x float>
  %1405 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1359) #18
  %1406 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1405, <4 x float> %1404) #18
  %1407 = insertelement <4 x float> undef, float %135, i32 0
  %1408 = shufflevector <4 x float> %1407, <4 x float> undef, <4 x i32> zeroinitializer
  %1409 = bitcast <4 x float> %1408 to <4 x i32>
  %1410 = add <4 x i32> %1409, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1411 = bitcast <4 x i32> %1410 to <4 x float>
  %1412 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1398) #18
  %1413 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1412, <4 x float> %1411) #18
  %1414 = load i32*, i32** %88, align 8
  %1415 = fptosi <4 x float> %1413 to <4 x i32>
  %1416 = load i32, i32* %90, align 8
  %1417 = insertelement <4 x i32> undef, i32 %1416, i32 0
  %1418 = shufflevector <4 x i32> %1417, <4 x i32> undef, <4 x i32> zeroinitializer
  %1419 = mul <4 x i32> %1418, %1415
  %1420 = fptosi <4 x float> %1406 to <4 x i32>
  %1421 = add <4 x i32> %1419, %1420
  %1422 = extractelement <4 x i32> %1421, i32 0
  %1423 = zext i32 %1422 to i64
  %1424 = getelementptr inbounds i32, i32* %1414, i64 %1423
  %1425 = load i32, i32* %1424, align 4
  %1426 = insertelement <4 x i32> undef, i32 %1425, i32 0
  %1427 = extractelement <4 x i32> %1421, i32 1
  %1428 = zext i32 %1427 to i64
  %1429 = getelementptr inbounds i32, i32* %1414, i64 %1428
  %1430 = load i32, i32* %1429, align 4
  %1431 = insertelement <4 x i32> %1426, i32 %1430, i32 1
  %1432 = extractelement <4 x i32> %1421, i32 2
  %1433 = zext i32 %1432 to i64
  %1434 = getelementptr inbounds i32, i32* %1414, i64 %1433
  %1435 = load i32, i32* %1434, align 4
  %1436 = insertelement <4 x i32> %1431, i32 %1435, i32 2
  %1437 = extractelement <4 x i32> %1421, i32 3
  %1438 = zext i32 %1437 to i64
  %1439 = getelementptr inbounds i32, i32* %1414, i64 %1438
  %1440 = load i32, i32* %1439, align 4
  %1441 = insertelement <4 x i32> %1436, i32 %1440, i32 3
  %1442 = and <4 x i32> %1441, <i32 255, i32 255, i32 255, i32 255>
  %1443 = sitofp <4 x i32> %1442 to <4 x float>
  %1444 = fmul <4 x float> %1443, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1445 = lshr <4 x i32> %1441, <i32 8, i32 8, i32 8, i32 8>
  %1446 = and <4 x i32> %1445, <i32 255, i32 255, i32 255, i32 255>
  %1447 = sitofp <4 x i32> %1446 to <4 x float>
  %1448 = fmul <4 x float> %1447, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1449 = lshr <4 x i32> %1441, <i32 16, i32 16, i32 16, i32 16>
  %1450 = and <4 x i32> %1449, <i32 255, i32 255, i32 255, i32 255>
  %1451 = sitofp <4 x i32> %1450 to <4 x float>
  %1452 = fmul <4 x float> %1451, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1453 = lshr <4 x i32> %1441, <i32 24, i32 24, i32 24, i32 24>
  %1454 = sitofp <4 x i32> %1453 to <4 x float>
  %1455 = fmul <4 x float> %1454, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1456 = icmp eq i32 %177, 6
  %1457 = select i1 %1456, <4 x float> %1452, <4 x float> %1444
  %1458 = select i1 %1456, <4 x float> %1444, <4 x float> %1452
  br label %1459

1459:                                             ; preds = %1399, %1397
  %1460 = phi <4 x float> [ zeroinitializer, %1397 ], [ %1457, %1399 ]
  %1461 = phi <4 x float> [ zeroinitializer, %1397 ], [ %1448, %1399 ]
  %1462 = phi <4 x float> [ zeroinitializer, %1397 ], [ %1458, %1399 ]
  %1463 = phi <4 x float> [ zeroinitializer, %1397 ], [ %1455, %1399 ]
  %1464 = fmul <4 x float> %34, %67
  %1465 = fmul <4 x float> %1464, %1460
  %1466 = fadd <4 x float> %1313, %1465
  %1467 = fmul <4 x float> %1464, %1461
  %1468 = fadd <4 x float> %1315, %1467
  %1469 = fmul <4 x float> %1464, %1462
  %1470 = fadd <4 x float> %1317, %1469
  %1471 = fmul <4 x float> %1464, %1463
  %1472 = fadd <4 x float> %1319, %1471
  switch i32 %91, label %131 [
    i32 3, label %1510
    i32 0, label %1510
    i32 1, label %1497
    i32 2, label %1473
  ]

1473:                                             ; preds = %1459
  %1474 = insertelement <4 x float> undef, float %92, i32 0
  %1475 = shufflevector <4 x float> %1474, <4 x float> undef, <4 x i32> zeroinitializer
  %1476 = fsub <4 x float> %252, %1475
  %1477 = fadd float %92, %92
  %1478 = insertelement <4 x float> undef, float %1477, i32 0
  %1479 = shufflevector <4 x float> %1478, <4 x float> undef, <4 x i32> zeroinitializer
  %1480 = fmul float %93, 5.000000e-01
  %1481 = insertelement <4 x float> undef, float %1480, i32 0
  %1482 = shufflevector <4 x float> %1481, <4 x float> undef, <4 x i32> zeroinitializer
  %1483 = fmul <4 x float> %1476, %1482
  %1484 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1483) #18
  %1485 = sitofp <4 x i32> %1484 to <4 x float>
  %1486 = fcmp olt <4 x float> %1483, %1485
  %1487 = select <4 x i1> %1486, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1488 = fsub <4 x float> %1485, %1487
  %1489 = fmul <4 x float> %1479, %1488
  %1490 = fsub <4 x float> %1476, %1489
  %1491 = fsub <4 x float> %1490, %1475
  %1492 = fsub <4 x float> zeroinitializer, %1491
  %1493 = bitcast <4 x float> %1491 to <4 x i32>
  %1494 = bitcast <4 x float> %1492 to <4 x i32>
  %1495 = and <4 x i32> %1494, %1493
  %1496 = bitcast <4 x i32> %1495 to <4 x float>
  br label %1510

1497:                                             ; preds = %1459
  %1498 = insertelement <4 x float> undef, float %93, i32 0
  %1499 = shufflevector <4 x float> %1498, <4 x float> undef, <4 x i32> zeroinitializer
  %1500 = fmul <4 x float> %252, %1499
  %1501 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1500) #18
  %1502 = sitofp <4 x i32> %1501 to <4 x float>
  %1503 = fcmp olt <4 x float> %1500, %1502
  %1504 = select <4 x i1> %1503, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1505 = fsub <4 x float> %1502, %1504
  %1506 = insertelement <4 x float> undef, float %92, i32 0
  %1507 = shufflevector <4 x float> %1506, <4 x float> undef, <4 x i32> zeroinitializer
  %1508 = fmul <4 x float> %1507, %1505
  %1509 = fsub <4 x float> %252, %1508
  br label %1510

1510:                                             ; preds = %1497, %1473, %1459, %1459
  %1511 = phi <4 x float> [ %1496, %1473 ], [ %1509, %1497 ], [ %252, %1459 ], [ %252, %1459 ]
  switch i32 %134, label %174 [
    i32 3, label %1549
    i32 0, label %1549
    i32 1, label %1536
    i32 2, label %1512
  ]

1512:                                             ; preds = %1510
  %1513 = insertelement <4 x float> undef, float %135, i32 0
  %1514 = shufflevector <4 x float> %1513, <4 x float> undef, <4 x i32> zeroinitializer
  %1515 = fsub <4 x float> %1320, %1514
  %1516 = fadd float %135, %135
  %1517 = insertelement <4 x float> undef, float %1516, i32 0
  %1518 = shufflevector <4 x float> %1517, <4 x float> undef, <4 x i32> zeroinitializer
  %1519 = fmul float %136, 5.000000e-01
  %1520 = insertelement <4 x float> undef, float %1519, i32 0
  %1521 = shufflevector <4 x float> %1520, <4 x float> undef, <4 x i32> zeroinitializer
  %1522 = fmul <4 x float> %1515, %1521
  %1523 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1522) #18
  %1524 = sitofp <4 x i32> %1523 to <4 x float>
  %1525 = fcmp olt <4 x float> %1522, %1524
  %1526 = select <4 x i1> %1525, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1527 = fsub <4 x float> %1524, %1526
  %1528 = fmul <4 x float> %1518, %1527
  %1529 = fsub <4 x float> %1515, %1528
  %1530 = fsub <4 x float> %1529, %1514
  %1531 = fsub <4 x float> zeroinitializer, %1530
  %1532 = bitcast <4 x float> %1530 to <4 x i32>
  %1533 = bitcast <4 x float> %1531 to <4 x i32>
  %1534 = and <4 x i32> %1533, %1532
  %1535 = bitcast <4 x i32> %1534 to <4 x float>
  br label %1549

1536:                                             ; preds = %1510
  %1537 = insertelement <4 x float> undef, float %136, i32 0
  %1538 = shufflevector <4 x float> %1537, <4 x float> undef, <4 x i32> zeroinitializer
  %1539 = fmul <4 x float> %1320, %1538
  %1540 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1539) #18
  %1541 = sitofp <4 x i32> %1540 to <4 x float>
  %1542 = fcmp olt <4 x float> %1539, %1541
  %1543 = select <4 x i1> %1542, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1544 = fsub <4 x float> %1541, %1543
  %1545 = insertelement <4 x float> undef, float %135, i32 0
  %1546 = shufflevector <4 x float> %1545, <4 x float> undef, <4 x i32> zeroinitializer
  %1547 = fmul <4 x float> %1546, %1544
  %1548 = fsub <4 x float> %1320, %1547
  br label %1549

1549:                                             ; preds = %1536, %1512, %1510, %1510
  %1550 = phi <4 x float> [ %1535, %1512 ], [ %1548, %1536 ], [ %1320, %1510 ], [ %1320, %1510 ]
  switch i32 %177, label %1611 [
    i32 4, label %1551
    i32 6, label %1551
  ]

1551:                                             ; preds = %1549, %1549
  %1552 = insertelement <4 x float> undef, float %92, i32 0
  %1553 = shufflevector <4 x float> %1552, <4 x float> undef, <4 x i32> zeroinitializer
  %1554 = bitcast <4 x float> %1553 to <4 x i32>
  %1555 = add <4 x i32> %1554, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1556 = bitcast <4 x i32> %1555 to <4 x float>
  %1557 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1511) #18
  %1558 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1557, <4 x float> %1556) #18
  %1559 = insertelement <4 x float> undef, float %135, i32 0
  %1560 = shufflevector <4 x float> %1559, <4 x float> undef, <4 x i32> zeroinitializer
  %1561 = bitcast <4 x float> %1560 to <4 x i32>
  %1562 = add <4 x i32> %1561, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1563 = bitcast <4 x i32> %1562 to <4 x float>
  %1564 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1550) #18
  %1565 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1564, <4 x float> %1563) #18
  %1566 = load i32*, i32** %88, align 8
  %1567 = fptosi <4 x float> %1565 to <4 x i32>
  %1568 = load i32, i32* %90, align 8
  %1569 = insertelement <4 x i32> undef, i32 %1568, i32 0
  %1570 = shufflevector <4 x i32> %1569, <4 x i32> undef, <4 x i32> zeroinitializer
  %1571 = mul <4 x i32> %1570, %1567
  %1572 = fptosi <4 x float> %1558 to <4 x i32>
  %1573 = add <4 x i32> %1571, %1572
  %1574 = extractelement <4 x i32> %1573, i32 0
  %1575 = zext i32 %1574 to i64
  %1576 = getelementptr inbounds i32, i32* %1566, i64 %1575
  %1577 = load i32, i32* %1576, align 4
  %1578 = insertelement <4 x i32> undef, i32 %1577, i32 0
  %1579 = extractelement <4 x i32> %1573, i32 1
  %1580 = zext i32 %1579 to i64
  %1581 = getelementptr inbounds i32, i32* %1566, i64 %1580
  %1582 = load i32, i32* %1581, align 4
  %1583 = insertelement <4 x i32> %1578, i32 %1582, i32 1
  %1584 = extractelement <4 x i32> %1573, i32 2
  %1585 = zext i32 %1584 to i64
  %1586 = getelementptr inbounds i32, i32* %1566, i64 %1585
  %1587 = load i32, i32* %1586, align 4
  %1588 = insertelement <4 x i32> %1583, i32 %1587, i32 2
  %1589 = extractelement <4 x i32> %1573, i32 3
  %1590 = zext i32 %1589 to i64
  %1591 = getelementptr inbounds i32, i32* %1566, i64 %1590
  %1592 = load i32, i32* %1591, align 4
  %1593 = insertelement <4 x i32> %1588, i32 %1592, i32 3
  %1594 = and <4 x i32> %1593, <i32 255, i32 255, i32 255, i32 255>
  %1595 = sitofp <4 x i32> %1594 to <4 x float>
  %1596 = fmul <4 x float> %1595, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1597 = lshr <4 x i32> %1593, <i32 8, i32 8, i32 8, i32 8>
  %1598 = and <4 x i32> %1597, <i32 255, i32 255, i32 255, i32 255>
  %1599 = sitofp <4 x i32> %1598 to <4 x float>
  %1600 = fmul <4 x float> %1599, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1601 = lshr <4 x i32> %1593, <i32 16, i32 16, i32 16, i32 16>
  %1602 = and <4 x i32> %1601, <i32 255, i32 255, i32 255, i32 255>
  %1603 = sitofp <4 x i32> %1602 to <4 x float>
  %1604 = fmul <4 x float> %1603, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1605 = lshr <4 x i32> %1593, <i32 24, i32 24, i32 24, i32 24>
  %1606 = sitofp <4 x i32> %1605 to <4 x float>
  %1607 = fmul <4 x float> %1606, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1608 = icmp eq i32 %177, 6
  %1609 = select i1 %1608, <4 x float> %1604, <4 x float> %1596
  %1610 = select i1 %1608, <4 x float> %1596, <4 x float> %1604
  br label %1611

1611:                                             ; preds = %1551, %1549
  %1612 = phi <4 x float> [ zeroinitializer, %1549 ], [ %1609, %1551 ]
  %1613 = phi <4 x float> [ zeroinitializer, %1549 ], [ %1600, %1551 ]
  %1614 = phi <4 x float> [ zeroinitializer, %1549 ], [ %1610, %1551 ]
  %1615 = phi <4 x float> [ zeroinitializer, %1549 ], [ %1607, %1551 ]
  %1616 = fmul <4 x float> %40, %67
  %1617 = fmul <4 x float> %1616, %1612
  %1618 = fadd <4 x float> %1466, %1617
  %1619 = fmul <4 x float> %1616, %1613
  %1620 = fadd <4 x float> %1468, %1619
  %1621 = fmul <4 x float> %1616, %1614
  %1622 = fadd <4 x float> %1470, %1621
  %1623 = fmul <4 x float> %1616, %1615
  %1624 = fadd <4 x float> %1472, %1623
  switch i32 %91, label %131 [
    i32 3, label %1662
    i32 0, label %1662
    i32 1, label %1649
    i32 2, label %1625
  ]

1625:                                             ; preds = %1611
  %1626 = insertelement <4 x float> undef, float %92, i32 0
  %1627 = shufflevector <4 x float> %1626, <4 x float> undef, <4 x i32> zeroinitializer
  %1628 = fsub <4 x float> %405, %1627
  %1629 = fadd float %92, %92
  %1630 = insertelement <4 x float> undef, float %1629, i32 0
  %1631 = shufflevector <4 x float> %1630, <4 x float> undef, <4 x i32> zeroinitializer
  %1632 = fmul float %93, 5.000000e-01
  %1633 = insertelement <4 x float> undef, float %1632, i32 0
  %1634 = shufflevector <4 x float> %1633, <4 x float> undef, <4 x i32> zeroinitializer
  %1635 = fmul <4 x float> %1628, %1634
  %1636 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1635) #18
  %1637 = sitofp <4 x i32> %1636 to <4 x float>
  %1638 = fcmp olt <4 x float> %1635, %1637
  %1639 = select <4 x i1> %1638, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1640 = fsub <4 x float> %1637, %1639
  %1641 = fmul <4 x float> %1631, %1640
  %1642 = fsub <4 x float> %1628, %1641
  %1643 = fsub <4 x float> %1642, %1627
  %1644 = fsub <4 x float> zeroinitializer, %1643
  %1645 = bitcast <4 x float> %1643 to <4 x i32>
  %1646 = bitcast <4 x float> %1644 to <4 x i32>
  %1647 = and <4 x i32> %1646, %1645
  %1648 = bitcast <4 x i32> %1647 to <4 x float>
  br label %1662

1649:                                             ; preds = %1611
  %1650 = insertelement <4 x float> undef, float %93, i32 0
  %1651 = shufflevector <4 x float> %1650, <4 x float> undef, <4 x i32> zeroinitializer
  %1652 = fmul <4 x float> %405, %1651
  %1653 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1652) #18
  %1654 = sitofp <4 x i32> %1653 to <4 x float>
  %1655 = fcmp olt <4 x float> %1652, %1654
  %1656 = select <4 x i1> %1655, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1657 = fsub <4 x float> %1654, %1656
  %1658 = insertelement <4 x float> undef, float %92, i32 0
  %1659 = shufflevector <4 x float> %1658, <4 x float> undef, <4 x i32> zeroinitializer
  %1660 = fmul <4 x float> %1659, %1657
  %1661 = fsub <4 x float> %405, %1660
  br label %1662

1662:                                             ; preds = %1649, %1625, %1611, %1611
  %1663 = phi <4 x float> [ %1648, %1625 ], [ %1661, %1649 ], [ %405, %1611 ], [ %405, %1611 ]
  switch i32 %134, label %174 [
    i32 3, label %1701
    i32 0, label %1701
    i32 1, label %1688
    i32 2, label %1664
  ]

1664:                                             ; preds = %1662
  %1665 = insertelement <4 x float> undef, float %135, i32 0
  %1666 = shufflevector <4 x float> %1665, <4 x float> undef, <4 x i32> zeroinitializer
  %1667 = fsub <4 x float> %1320, %1666
  %1668 = fadd float %135, %135
  %1669 = insertelement <4 x float> undef, float %1668, i32 0
  %1670 = shufflevector <4 x float> %1669, <4 x float> undef, <4 x i32> zeroinitializer
  %1671 = fmul float %136, 5.000000e-01
  %1672 = insertelement <4 x float> undef, float %1671, i32 0
  %1673 = shufflevector <4 x float> %1672, <4 x float> undef, <4 x i32> zeroinitializer
  %1674 = fmul <4 x float> %1667, %1673
  %1675 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1674) #18
  %1676 = sitofp <4 x i32> %1675 to <4 x float>
  %1677 = fcmp olt <4 x float> %1674, %1676
  %1678 = select <4 x i1> %1677, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1679 = fsub <4 x float> %1676, %1678
  %1680 = fmul <4 x float> %1670, %1679
  %1681 = fsub <4 x float> %1667, %1680
  %1682 = fsub <4 x float> %1681, %1666
  %1683 = fsub <4 x float> zeroinitializer, %1682
  %1684 = bitcast <4 x float> %1682 to <4 x i32>
  %1685 = bitcast <4 x float> %1683 to <4 x i32>
  %1686 = and <4 x i32> %1685, %1684
  %1687 = bitcast <4 x i32> %1686 to <4 x float>
  br label %1701

1688:                                             ; preds = %1662
  %1689 = insertelement <4 x float> undef, float %136, i32 0
  %1690 = shufflevector <4 x float> %1689, <4 x float> undef, <4 x i32> zeroinitializer
  %1691 = fmul <4 x float> %1320, %1690
  %1692 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1691) #18
  %1693 = sitofp <4 x i32> %1692 to <4 x float>
  %1694 = fcmp olt <4 x float> %1691, %1693
  %1695 = select <4 x i1> %1694, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1696 = fsub <4 x float> %1693, %1695
  %1697 = insertelement <4 x float> undef, float %135, i32 0
  %1698 = shufflevector <4 x float> %1697, <4 x float> undef, <4 x i32> zeroinitializer
  %1699 = fmul <4 x float> %1698, %1696
  %1700 = fsub <4 x float> %1320, %1699
  br label %1701

1701:                                             ; preds = %1688, %1664, %1662, %1662
  %1702 = phi <4 x float> [ %1687, %1664 ], [ %1700, %1688 ], [ %1320, %1662 ], [ %1320, %1662 ]
  switch i32 %177, label %1763 [
    i32 4, label %1703
    i32 6, label %1703
  ]

1703:                                             ; preds = %1701, %1701
  %1704 = insertelement <4 x float> undef, float %92, i32 0
  %1705 = shufflevector <4 x float> %1704, <4 x float> undef, <4 x i32> zeroinitializer
  %1706 = bitcast <4 x float> %1705 to <4 x i32>
  %1707 = add <4 x i32> %1706, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1708 = bitcast <4 x i32> %1707 to <4 x float>
  %1709 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1663) #18
  %1710 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1709, <4 x float> %1708) #18
  %1711 = insertelement <4 x float> undef, float %135, i32 0
  %1712 = shufflevector <4 x float> %1711, <4 x float> undef, <4 x i32> zeroinitializer
  %1713 = bitcast <4 x float> %1712 to <4 x i32>
  %1714 = add <4 x i32> %1713, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1715 = bitcast <4 x i32> %1714 to <4 x float>
  %1716 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1702) #18
  %1717 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1716, <4 x float> %1715) #18
  %1718 = load i32*, i32** %88, align 8
  %1719 = fptosi <4 x float> %1717 to <4 x i32>
  %1720 = load i32, i32* %90, align 8
  %1721 = insertelement <4 x i32> undef, i32 %1720, i32 0
  %1722 = shufflevector <4 x i32> %1721, <4 x i32> undef, <4 x i32> zeroinitializer
  %1723 = mul <4 x i32> %1722, %1719
  %1724 = fptosi <4 x float> %1710 to <4 x i32>
  %1725 = add <4 x i32> %1723, %1724
  %1726 = extractelement <4 x i32> %1725, i32 0
  %1727 = zext i32 %1726 to i64
  %1728 = getelementptr inbounds i32, i32* %1718, i64 %1727
  %1729 = load i32, i32* %1728, align 4
  %1730 = insertelement <4 x i32> undef, i32 %1729, i32 0
  %1731 = extractelement <4 x i32> %1725, i32 1
  %1732 = zext i32 %1731 to i64
  %1733 = getelementptr inbounds i32, i32* %1718, i64 %1732
  %1734 = load i32, i32* %1733, align 4
  %1735 = insertelement <4 x i32> %1730, i32 %1734, i32 1
  %1736 = extractelement <4 x i32> %1725, i32 2
  %1737 = zext i32 %1736 to i64
  %1738 = getelementptr inbounds i32, i32* %1718, i64 %1737
  %1739 = load i32, i32* %1738, align 4
  %1740 = insertelement <4 x i32> %1735, i32 %1739, i32 2
  %1741 = extractelement <4 x i32> %1725, i32 3
  %1742 = zext i32 %1741 to i64
  %1743 = getelementptr inbounds i32, i32* %1718, i64 %1742
  %1744 = load i32, i32* %1743, align 4
  %1745 = insertelement <4 x i32> %1740, i32 %1744, i32 3
  %1746 = and <4 x i32> %1745, <i32 255, i32 255, i32 255, i32 255>
  %1747 = sitofp <4 x i32> %1746 to <4 x float>
  %1748 = fmul <4 x float> %1747, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1749 = lshr <4 x i32> %1745, <i32 8, i32 8, i32 8, i32 8>
  %1750 = and <4 x i32> %1749, <i32 255, i32 255, i32 255, i32 255>
  %1751 = sitofp <4 x i32> %1750 to <4 x float>
  %1752 = fmul <4 x float> %1751, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1753 = lshr <4 x i32> %1745, <i32 16, i32 16, i32 16, i32 16>
  %1754 = and <4 x i32> %1753, <i32 255, i32 255, i32 255, i32 255>
  %1755 = sitofp <4 x i32> %1754 to <4 x float>
  %1756 = fmul <4 x float> %1755, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1757 = lshr <4 x i32> %1745, <i32 24, i32 24, i32 24, i32 24>
  %1758 = sitofp <4 x i32> %1757 to <4 x float>
  %1759 = fmul <4 x float> %1758, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1760 = icmp eq i32 %177, 6
  %1761 = select i1 %1760, <4 x float> %1756, <4 x float> %1748
  %1762 = select i1 %1760, <4 x float> %1748, <4 x float> %1756
  br label %1763

1763:                                             ; preds = %1703, %1701
  %1764 = phi <4 x float> [ zeroinitializer, %1701 ], [ %1761, %1703 ]
  %1765 = phi <4 x float> [ zeroinitializer, %1701 ], [ %1752, %1703 ]
  %1766 = phi <4 x float> [ zeroinitializer, %1701 ], [ %1762, %1703 ]
  %1767 = phi <4 x float> [ zeroinitializer, %1701 ], [ %1759, %1703 ]
  %1768 = fmul <4 x float> %46, %67
  %1769 = fmul <4 x float> %1768, %1764
  %1770 = fadd <4 x float> %1618, %1769
  %1771 = fmul <4 x float> %1768, %1765
  %1772 = fadd <4 x float> %1620, %1771
  %1773 = fmul <4 x float> %1768, %1766
  %1774 = fadd <4 x float> %1622, %1773
  %1775 = fmul <4 x float> %1768, %1767
  %1776 = fadd <4 x float> %1624, %1775
  switch i32 %91, label %131 [
    i32 3, label %1814
    i32 0, label %1814
    i32 1, label %1801
    i32 2, label %1777
  ]

1777:                                             ; preds = %1763
  %1778 = insertelement <4 x float> undef, float %92, i32 0
  %1779 = shufflevector <4 x float> %1778, <4 x float> undef, <4 x i32> zeroinitializer
  %1780 = fsub <4 x float> %558, %1779
  %1781 = fadd float %92, %92
  %1782 = insertelement <4 x float> undef, float %1781, i32 0
  %1783 = shufflevector <4 x float> %1782, <4 x float> undef, <4 x i32> zeroinitializer
  %1784 = fmul float %93, 5.000000e-01
  %1785 = insertelement <4 x float> undef, float %1784, i32 0
  %1786 = shufflevector <4 x float> %1785, <4 x float> undef, <4 x i32> zeroinitializer
  %1787 = fmul <4 x float> %1780, %1786
  %1788 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1787) #18
  %1789 = sitofp <4 x i32> %1788 to <4 x float>
  %1790 = fcmp olt <4 x float> %1787, %1789
  %1791 = select <4 x i1> %1790, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1792 = fsub <4 x float> %1789, %1791
  %1793 = fmul <4 x float> %1783, %1792
  %1794 = fsub <4 x float> %1780, %1793
  %1795 = fsub <4 x float> %1794, %1779
  %1796 = fsub <4 x float> zeroinitializer, %1795
  %1797 = bitcast <4 x float> %1795 to <4 x i32>
  %1798 = bitcast <4 x float> %1796 to <4 x i32>
  %1799 = and <4 x i32> %1798, %1797
  %1800 = bitcast <4 x i32> %1799 to <4 x float>
  br label %1814

1801:                                             ; preds = %1763
  %1802 = insertelement <4 x float> undef, float %93, i32 0
  %1803 = shufflevector <4 x float> %1802, <4 x float> undef, <4 x i32> zeroinitializer
  %1804 = fmul <4 x float> %558, %1803
  %1805 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1804) #18
  %1806 = sitofp <4 x i32> %1805 to <4 x float>
  %1807 = fcmp olt <4 x float> %1804, %1806
  %1808 = select <4 x i1> %1807, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1809 = fsub <4 x float> %1806, %1808
  %1810 = insertelement <4 x float> undef, float %92, i32 0
  %1811 = shufflevector <4 x float> %1810, <4 x float> undef, <4 x i32> zeroinitializer
  %1812 = fmul <4 x float> %1811, %1809
  %1813 = fsub <4 x float> %558, %1812
  br label %1814

1814:                                             ; preds = %1801, %1777, %1763, %1763
  %1815 = phi <4 x float> [ %1800, %1777 ], [ %1813, %1801 ], [ %558, %1763 ], [ %558, %1763 ]
  switch i32 %134, label %174 [
    i32 3, label %1853
    i32 0, label %1853
    i32 1, label %1840
    i32 2, label %1816
  ]

1816:                                             ; preds = %1814
  %1817 = insertelement <4 x float> undef, float %135, i32 0
  %1818 = shufflevector <4 x float> %1817, <4 x float> undef, <4 x i32> zeroinitializer
  %1819 = fsub <4 x float> %1320, %1818
  %1820 = fadd float %135, %135
  %1821 = insertelement <4 x float> undef, float %1820, i32 0
  %1822 = shufflevector <4 x float> %1821, <4 x float> undef, <4 x i32> zeroinitializer
  %1823 = fmul float %136, 5.000000e-01
  %1824 = insertelement <4 x float> undef, float %1823, i32 0
  %1825 = shufflevector <4 x float> %1824, <4 x float> undef, <4 x i32> zeroinitializer
  %1826 = fmul <4 x float> %1819, %1825
  %1827 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1826) #18
  %1828 = sitofp <4 x i32> %1827 to <4 x float>
  %1829 = fcmp olt <4 x float> %1826, %1828
  %1830 = select <4 x i1> %1829, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1831 = fsub <4 x float> %1828, %1830
  %1832 = fmul <4 x float> %1822, %1831
  %1833 = fsub <4 x float> %1819, %1832
  %1834 = fsub <4 x float> %1833, %1818
  %1835 = fsub <4 x float> zeroinitializer, %1834
  %1836 = bitcast <4 x float> %1834 to <4 x i32>
  %1837 = bitcast <4 x float> %1835 to <4 x i32>
  %1838 = and <4 x i32> %1837, %1836
  %1839 = bitcast <4 x i32> %1838 to <4 x float>
  br label %1853

1840:                                             ; preds = %1814
  %1841 = insertelement <4 x float> undef, float %136, i32 0
  %1842 = shufflevector <4 x float> %1841, <4 x float> undef, <4 x i32> zeroinitializer
  %1843 = fmul <4 x float> %1320, %1842
  %1844 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1843) #18
  %1845 = sitofp <4 x i32> %1844 to <4 x float>
  %1846 = fcmp olt <4 x float> %1843, %1845
  %1847 = select <4 x i1> %1846, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1848 = fsub <4 x float> %1845, %1847
  %1849 = insertelement <4 x float> undef, float %135, i32 0
  %1850 = shufflevector <4 x float> %1849, <4 x float> undef, <4 x i32> zeroinitializer
  %1851 = fmul <4 x float> %1850, %1848
  %1852 = fsub <4 x float> %1320, %1851
  br label %1853

1853:                                             ; preds = %1840, %1816, %1814, %1814
  %1854 = phi <4 x float> [ %1839, %1816 ], [ %1852, %1840 ], [ %1320, %1814 ], [ %1320, %1814 ]
  switch i32 %177, label %1915 [
    i32 4, label %1855
    i32 6, label %1855
  ]

1855:                                             ; preds = %1853, %1853
  %1856 = insertelement <4 x float> undef, float %92, i32 0
  %1857 = shufflevector <4 x float> %1856, <4 x float> undef, <4 x i32> zeroinitializer
  %1858 = bitcast <4 x float> %1857 to <4 x i32>
  %1859 = add <4 x i32> %1858, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1860 = bitcast <4 x i32> %1859 to <4 x float>
  %1861 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1815) #18
  %1862 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1861, <4 x float> %1860) #18
  %1863 = insertelement <4 x float> undef, float %135, i32 0
  %1864 = shufflevector <4 x float> %1863, <4 x float> undef, <4 x i32> zeroinitializer
  %1865 = bitcast <4 x float> %1864 to <4 x i32>
  %1866 = add <4 x i32> %1865, <i32 -1, i32 -1, i32 -1, i32 -1>
  %1867 = bitcast <4 x i32> %1866 to <4 x float>
  %1868 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1854) #18
  %1869 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %1868, <4 x float> %1867) #18
  %1870 = load i32*, i32** %88, align 8
  %1871 = fptosi <4 x float> %1869 to <4 x i32>
  %1872 = load i32, i32* %90, align 8
  %1873 = insertelement <4 x i32> undef, i32 %1872, i32 0
  %1874 = shufflevector <4 x i32> %1873, <4 x i32> undef, <4 x i32> zeroinitializer
  %1875 = mul <4 x i32> %1874, %1871
  %1876 = fptosi <4 x float> %1862 to <4 x i32>
  %1877 = add <4 x i32> %1875, %1876
  %1878 = extractelement <4 x i32> %1877, i32 0
  %1879 = zext i32 %1878 to i64
  %1880 = getelementptr inbounds i32, i32* %1870, i64 %1879
  %1881 = load i32, i32* %1880, align 4
  %1882 = insertelement <4 x i32> undef, i32 %1881, i32 0
  %1883 = extractelement <4 x i32> %1877, i32 1
  %1884 = zext i32 %1883 to i64
  %1885 = getelementptr inbounds i32, i32* %1870, i64 %1884
  %1886 = load i32, i32* %1885, align 4
  %1887 = insertelement <4 x i32> %1882, i32 %1886, i32 1
  %1888 = extractelement <4 x i32> %1877, i32 2
  %1889 = zext i32 %1888 to i64
  %1890 = getelementptr inbounds i32, i32* %1870, i64 %1889
  %1891 = load i32, i32* %1890, align 4
  %1892 = insertelement <4 x i32> %1887, i32 %1891, i32 2
  %1893 = extractelement <4 x i32> %1877, i32 3
  %1894 = zext i32 %1893 to i64
  %1895 = getelementptr inbounds i32, i32* %1870, i64 %1894
  %1896 = load i32, i32* %1895, align 4
  %1897 = insertelement <4 x i32> %1892, i32 %1896, i32 3
  %1898 = and <4 x i32> %1897, <i32 255, i32 255, i32 255, i32 255>
  %1899 = sitofp <4 x i32> %1898 to <4 x float>
  %1900 = fmul <4 x float> %1899, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1901 = lshr <4 x i32> %1897, <i32 8, i32 8, i32 8, i32 8>
  %1902 = and <4 x i32> %1901, <i32 255, i32 255, i32 255, i32 255>
  %1903 = sitofp <4 x i32> %1902 to <4 x float>
  %1904 = fmul <4 x float> %1903, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1905 = lshr <4 x i32> %1897, <i32 16, i32 16, i32 16, i32 16>
  %1906 = and <4 x i32> %1905, <i32 255, i32 255, i32 255, i32 255>
  %1907 = sitofp <4 x i32> %1906 to <4 x float>
  %1908 = fmul <4 x float> %1907, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1909 = lshr <4 x i32> %1897, <i32 24, i32 24, i32 24, i32 24>
  %1910 = sitofp <4 x i32> %1909 to <4 x float>
  %1911 = fmul <4 x float> %1910, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1912 = icmp eq i32 %177, 6
  %1913 = select i1 %1912, <4 x float> %1908, <4 x float> %1900
  %1914 = select i1 %1912, <4 x float> %1900, <4 x float> %1908
  br label %1915

1915:                                             ; preds = %1855, %1853
  %1916 = phi <4 x float> [ zeroinitializer, %1853 ], [ %1913, %1855 ]
  %1917 = phi <4 x float> [ zeroinitializer, %1853 ], [ %1904, %1855 ]
  %1918 = phi <4 x float> [ zeroinitializer, %1853 ], [ %1914, %1855 ]
  %1919 = phi <4 x float> [ zeroinitializer, %1853 ], [ %1911, %1855 ]
  %1920 = fmul <4 x float> %50, %67
  %1921 = fmul <4 x float> %1920, %1916
  %1922 = fadd <4 x float> %1770, %1921
  %1923 = fmul <4 x float> %1920, %1917
  %1924 = fadd <4 x float> %1772, %1923
  %1925 = fmul <4 x float> %1920, %1918
  %1926 = fadd <4 x float> %1774, %1925
  %1927 = fmul <4 x float> %1920, %1919
  %1928 = fadd <4 x float> %1776, %1927
  %1929 = fadd <4 x float> %1320, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %91, label %131 [
    i32 3, label %1967
    i32 0, label %1967
    i32 1, label %1954
    i32 2, label %1930
  ]

1930:                                             ; preds = %1915
  %1931 = insertelement <4 x float> undef, float %92, i32 0
  %1932 = shufflevector <4 x float> %1931, <4 x float> undef, <4 x i32> zeroinitializer
  %1933 = fsub <4 x float> %73, %1932
  %1934 = fadd float %92, %92
  %1935 = insertelement <4 x float> undef, float %1934, i32 0
  %1936 = shufflevector <4 x float> %1935, <4 x float> undef, <4 x i32> zeroinitializer
  %1937 = fmul float %93, 5.000000e-01
  %1938 = insertelement <4 x float> undef, float %1937, i32 0
  %1939 = shufflevector <4 x float> %1938, <4 x float> undef, <4 x i32> zeroinitializer
  %1940 = fmul <4 x float> %1933, %1939
  %1941 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1940) #18
  %1942 = sitofp <4 x i32> %1941 to <4 x float>
  %1943 = fcmp olt <4 x float> %1940, %1942
  %1944 = select <4 x i1> %1943, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1945 = fsub <4 x float> %1942, %1944
  %1946 = fmul <4 x float> %1936, %1945
  %1947 = fsub <4 x float> %1933, %1946
  %1948 = fsub <4 x float> %1947, %1932
  %1949 = fsub <4 x float> zeroinitializer, %1948
  %1950 = bitcast <4 x float> %1948 to <4 x i32>
  %1951 = bitcast <4 x float> %1949 to <4 x i32>
  %1952 = and <4 x i32> %1951, %1950
  %1953 = bitcast <4 x i32> %1952 to <4 x float>
  br label %1967

1954:                                             ; preds = %1915
  %1955 = insertelement <4 x float> undef, float %93, i32 0
  %1956 = shufflevector <4 x float> %1955, <4 x float> undef, <4 x i32> zeroinitializer
  %1957 = fmul <4 x float> %73, %1956
  %1958 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1957) #18
  %1959 = sitofp <4 x i32> %1958 to <4 x float>
  %1960 = fcmp olt <4 x float> %1957, %1959
  %1961 = select <4 x i1> %1960, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1962 = fsub <4 x float> %1959, %1961
  %1963 = insertelement <4 x float> undef, float %92, i32 0
  %1964 = shufflevector <4 x float> %1963, <4 x float> undef, <4 x i32> zeroinitializer
  %1965 = fmul <4 x float> %1964, %1962
  %1966 = fsub <4 x float> %73, %1965
  br label %1967

1967:                                             ; preds = %1954, %1930, %1915, %1915
  %1968 = phi <4 x float> [ %1953, %1930 ], [ %1966, %1954 ], [ %73, %1915 ], [ %73, %1915 ]
  switch i32 %134, label %174 [
    i32 3, label %2006
    i32 0, label %2006
    i32 1, label %1993
    i32 2, label %1969
  ]

1969:                                             ; preds = %1967
  %1970 = insertelement <4 x float> undef, float %135, i32 0
  %1971 = shufflevector <4 x float> %1970, <4 x float> undef, <4 x i32> zeroinitializer
  %1972 = fsub <4 x float> %1929, %1971
  %1973 = fadd float %135, %135
  %1974 = insertelement <4 x float> undef, float %1973, i32 0
  %1975 = shufflevector <4 x float> %1974, <4 x float> undef, <4 x i32> zeroinitializer
  %1976 = fmul float %136, 5.000000e-01
  %1977 = insertelement <4 x float> undef, float %1976, i32 0
  %1978 = shufflevector <4 x float> %1977, <4 x float> undef, <4 x i32> zeroinitializer
  %1979 = fmul <4 x float> %1972, %1978
  %1980 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1979) #18
  %1981 = sitofp <4 x i32> %1980 to <4 x float>
  %1982 = fcmp olt <4 x float> %1979, %1981
  %1983 = select <4 x i1> %1982, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %1984 = fsub <4 x float> %1981, %1983
  %1985 = fmul <4 x float> %1975, %1984
  %1986 = fsub <4 x float> %1972, %1985
  %1987 = fsub <4 x float> %1986, %1971
  %1988 = fsub <4 x float> zeroinitializer, %1987
  %1989 = bitcast <4 x float> %1987 to <4 x i32>
  %1990 = bitcast <4 x float> %1988 to <4 x i32>
  %1991 = and <4 x i32> %1990, %1989
  %1992 = bitcast <4 x i32> %1991 to <4 x float>
  br label %2006

1993:                                             ; preds = %1967
  %1994 = insertelement <4 x float> undef, float %136, i32 0
  %1995 = shufflevector <4 x float> %1994, <4 x float> undef, <4 x i32> zeroinitializer
  %1996 = fmul <4 x float> %1929, %1995
  %1997 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %1996) #18
  %1998 = sitofp <4 x i32> %1997 to <4 x float>
  %1999 = fcmp olt <4 x float> %1996, %1998
  %2000 = select <4 x i1> %1999, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2001 = fsub <4 x float> %1998, %2000
  %2002 = insertelement <4 x float> undef, float %135, i32 0
  %2003 = shufflevector <4 x float> %2002, <4 x float> undef, <4 x i32> zeroinitializer
  %2004 = fmul <4 x float> %2003, %2001
  %2005 = fsub <4 x float> %1929, %2004
  br label %2006

2006:                                             ; preds = %1993, %1969, %1967, %1967
  %2007 = phi <4 x float> [ %1992, %1969 ], [ %2005, %1993 ], [ %1929, %1967 ], [ %1929, %1967 ]
  switch i32 %177, label %2068 [
    i32 4, label %2008
    i32 6, label %2008
  ]

2008:                                             ; preds = %2006, %2006
  %2009 = insertelement <4 x float> undef, float %92, i32 0
  %2010 = shufflevector <4 x float> %2009, <4 x float> undef, <4 x i32> zeroinitializer
  %2011 = bitcast <4 x float> %2010 to <4 x i32>
  %2012 = add <4 x i32> %2011, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2013 = bitcast <4 x i32> %2012 to <4 x float>
  %2014 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %1968) #18
  %2015 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2014, <4 x float> %2013) #18
  %2016 = insertelement <4 x float> undef, float %135, i32 0
  %2017 = shufflevector <4 x float> %2016, <4 x float> undef, <4 x i32> zeroinitializer
  %2018 = bitcast <4 x float> %2017 to <4 x i32>
  %2019 = add <4 x i32> %2018, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2020 = bitcast <4 x i32> %2019 to <4 x float>
  %2021 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2007) #18
  %2022 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2021, <4 x float> %2020) #18
  %2023 = load i32*, i32** %88, align 8
  %2024 = fptosi <4 x float> %2022 to <4 x i32>
  %2025 = load i32, i32* %90, align 8
  %2026 = insertelement <4 x i32> undef, i32 %2025, i32 0
  %2027 = shufflevector <4 x i32> %2026, <4 x i32> undef, <4 x i32> zeroinitializer
  %2028 = mul <4 x i32> %2027, %2024
  %2029 = fptosi <4 x float> %2015 to <4 x i32>
  %2030 = add <4 x i32> %2028, %2029
  %2031 = extractelement <4 x i32> %2030, i32 0
  %2032 = zext i32 %2031 to i64
  %2033 = getelementptr inbounds i32, i32* %2023, i64 %2032
  %2034 = load i32, i32* %2033, align 4
  %2035 = insertelement <4 x i32> undef, i32 %2034, i32 0
  %2036 = extractelement <4 x i32> %2030, i32 1
  %2037 = zext i32 %2036 to i64
  %2038 = getelementptr inbounds i32, i32* %2023, i64 %2037
  %2039 = load i32, i32* %2038, align 4
  %2040 = insertelement <4 x i32> %2035, i32 %2039, i32 1
  %2041 = extractelement <4 x i32> %2030, i32 2
  %2042 = zext i32 %2041 to i64
  %2043 = getelementptr inbounds i32, i32* %2023, i64 %2042
  %2044 = load i32, i32* %2043, align 4
  %2045 = insertelement <4 x i32> %2040, i32 %2044, i32 2
  %2046 = extractelement <4 x i32> %2030, i32 3
  %2047 = zext i32 %2046 to i64
  %2048 = getelementptr inbounds i32, i32* %2023, i64 %2047
  %2049 = load i32, i32* %2048, align 4
  %2050 = insertelement <4 x i32> %2045, i32 %2049, i32 3
  %2051 = and <4 x i32> %2050, <i32 255, i32 255, i32 255, i32 255>
  %2052 = sitofp <4 x i32> %2051 to <4 x float>
  %2053 = fmul <4 x float> %2052, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2054 = lshr <4 x i32> %2050, <i32 8, i32 8, i32 8, i32 8>
  %2055 = and <4 x i32> %2054, <i32 255, i32 255, i32 255, i32 255>
  %2056 = sitofp <4 x i32> %2055 to <4 x float>
  %2057 = fmul <4 x float> %2056, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2058 = lshr <4 x i32> %2050, <i32 16, i32 16, i32 16, i32 16>
  %2059 = and <4 x i32> %2058, <i32 255, i32 255, i32 255, i32 255>
  %2060 = sitofp <4 x i32> %2059 to <4 x float>
  %2061 = fmul <4 x float> %2060, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2062 = lshr <4 x i32> %2050, <i32 24, i32 24, i32 24, i32 24>
  %2063 = sitofp <4 x i32> %2062 to <4 x float>
  %2064 = fmul <4 x float> %2063, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2065 = icmp eq i32 %177, 6
  %2066 = select i1 %2065, <4 x float> %2061, <4 x float> %2053
  %2067 = select i1 %2065, <4 x float> %2053, <4 x float> %2061
  br label %2068

2068:                                             ; preds = %2008, %2006
  %2069 = phi <4 x float> [ zeroinitializer, %2006 ], [ %2066, %2008 ]
  %2070 = phi <4 x float> [ zeroinitializer, %2006 ], [ %2057, %2008 ]
  %2071 = phi <4 x float> [ zeroinitializer, %2006 ], [ %2067, %2008 ]
  %2072 = phi <4 x float> [ zeroinitializer, %2006 ], [ %2064, %2008 ]
  %2073 = fmul <4 x float> %34, %71
  %2074 = fmul <4 x float> %2073, %2069
  %2075 = fadd <4 x float> %1922, %2074
  %2076 = fmul <4 x float> %2073, %2070
  %2077 = fadd <4 x float> %1924, %2076
  %2078 = fmul <4 x float> %2073, %2071
  %2079 = fadd <4 x float> %1926, %2078
  %2080 = fmul <4 x float> %2073, %2072
  %2081 = fadd <4 x float> %1928, %2080
  switch i32 %91, label %131 [
    i32 3, label %2119
    i32 0, label %2119
    i32 1, label %2106
    i32 2, label %2082
  ]

2082:                                             ; preds = %2068
  %2083 = insertelement <4 x float> undef, float %92, i32 0
  %2084 = shufflevector <4 x float> %2083, <4 x float> undef, <4 x i32> zeroinitializer
  %2085 = fsub <4 x float> %252, %2084
  %2086 = fadd float %92, %92
  %2087 = insertelement <4 x float> undef, float %2086, i32 0
  %2088 = shufflevector <4 x float> %2087, <4 x float> undef, <4 x i32> zeroinitializer
  %2089 = fmul float %93, 5.000000e-01
  %2090 = insertelement <4 x float> undef, float %2089, i32 0
  %2091 = shufflevector <4 x float> %2090, <4 x float> undef, <4 x i32> zeroinitializer
  %2092 = fmul <4 x float> %2085, %2091
  %2093 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2092) #18
  %2094 = sitofp <4 x i32> %2093 to <4 x float>
  %2095 = fcmp olt <4 x float> %2092, %2094
  %2096 = select <4 x i1> %2095, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2097 = fsub <4 x float> %2094, %2096
  %2098 = fmul <4 x float> %2088, %2097
  %2099 = fsub <4 x float> %2085, %2098
  %2100 = fsub <4 x float> %2099, %2084
  %2101 = fsub <4 x float> zeroinitializer, %2100
  %2102 = bitcast <4 x float> %2100 to <4 x i32>
  %2103 = bitcast <4 x float> %2101 to <4 x i32>
  %2104 = and <4 x i32> %2103, %2102
  %2105 = bitcast <4 x i32> %2104 to <4 x float>
  br label %2119

2106:                                             ; preds = %2068
  %2107 = insertelement <4 x float> undef, float %93, i32 0
  %2108 = shufflevector <4 x float> %2107, <4 x float> undef, <4 x i32> zeroinitializer
  %2109 = fmul <4 x float> %252, %2108
  %2110 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2109) #18
  %2111 = sitofp <4 x i32> %2110 to <4 x float>
  %2112 = fcmp olt <4 x float> %2109, %2111
  %2113 = select <4 x i1> %2112, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2114 = fsub <4 x float> %2111, %2113
  %2115 = insertelement <4 x float> undef, float %92, i32 0
  %2116 = shufflevector <4 x float> %2115, <4 x float> undef, <4 x i32> zeroinitializer
  %2117 = fmul <4 x float> %2116, %2114
  %2118 = fsub <4 x float> %252, %2117
  br label %2119

2119:                                             ; preds = %2106, %2082, %2068, %2068
  %2120 = phi <4 x float> [ %2105, %2082 ], [ %2118, %2106 ], [ %252, %2068 ], [ %252, %2068 ]
  switch i32 %134, label %174 [
    i32 3, label %2158
    i32 0, label %2158
    i32 1, label %2145
    i32 2, label %2121
  ]

2121:                                             ; preds = %2119
  %2122 = insertelement <4 x float> undef, float %135, i32 0
  %2123 = shufflevector <4 x float> %2122, <4 x float> undef, <4 x i32> zeroinitializer
  %2124 = fsub <4 x float> %1929, %2123
  %2125 = fadd float %135, %135
  %2126 = insertelement <4 x float> undef, float %2125, i32 0
  %2127 = shufflevector <4 x float> %2126, <4 x float> undef, <4 x i32> zeroinitializer
  %2128 = fmul float %136, 5.000000e-01
  %2129 = insertelement <4 x float> undef, float %2128, i32 0
  %2130 = shufflevector <4 x float> %2129, <4 x float> undef, <4 x i32> zeroinitializer
  %2131 = fmul <4 x float> %2124, %2130
  %2132 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2131) #18
  %2133 = sitofp <4 x i32> %2132 to <4 x float>
  %2134 = fcmp olt <4 x float> %2131, %2133
  %2135 = select <4 x i1> %2134, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2136 = fsub <4 x float> %2133, %2135
  %2137 = fmul <4 x float> %2127, %2136
  %2138 = fsub <4 x float> %2124, %2137
  %2139 = fsub <4 x float> %2138, %2123
  %2140 = fsub <4 x float> zeroinitializer, %2139
  %2141 = bitcast <4 x float> %2139 to <4 x i32>
  %2142 = bitcast <4 x float> %2140 to <4 x i32>
  %2143 = and <4 x i32> %2142, %2141
  %2144 = bitcast <4 x i32> %2143 to <4 x float>
  br label %2158

2145:                                             ; preds = %2119
  %2146 = insertelement <4 x float> undef, float %136, i32 0
  %2147 = shufflevector <4 x float> %2146, <4 x float> undef, <4 x i32> zeroinitializer
  %2148 = fmul <4 x float> %1929, %2147
  %2149 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2148) #18
  %2150 = sitofp <4 x i32> %2149 to <4 x float>
  %2151 = fcmp olt <4 x float> %2148, %2150
  %2152 = select <4 x i1> %2151, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2153 = fsub <4 x float> %2150, %2152
  %2154 = insertelement <4 x float> undef, float %135, i32 0
  %2155 = shufflevector <4 x float> %2154, <4 x float> undef, <4 x i32> zeroinitializer
  %2156 = fmul <4 x float> %2155, %2153
  %2157 = fsub <4 x float> %1929, %2156
  br label %2158

2158:                                             ; preds = %2145, %2121, %2119, %2119
  %2159 = phi <4 x float> [ %2144, %2121 ], [ %2157, %2145 ], [ %1929, %2119 ], [ %1929, %2119 ]
  switch i32 %177, label %2220 [
    i32 4, label %2160
    i32 6, label %2160
  ]

2160:                                             ; preds = %2158, %2158
  %2161 = insertelement <4 x float> undef, float %92, i32 0
  %2162 = shufflevector <4 x float> %2161, <4 x float> undef, <4 x i32> zeroinitializer
  %2163 = bitcast <4 x float> %2162 to <4 x i32>
  %2164 = add <4 x i32> %2163, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2165 = bitcast <4 x i32> %2164 to <4 x float>
  %2166 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2120) #18
  %2167 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2166, <4 x float> %2165) #18
  %2168 = insertelement <4 x float> undef, float %135, i32 0
  %2169 = shufflevector <4 x float> %2168, <4 x float> undef, <4 x i32> zeroinitializer
  %2170 = bitcast <4 x float> %2169 to <4 x i32>
  %2171 = add <4 x i32> %2170, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2172 = bitcast <4 x i32> %2171 to <4 x float>
  %2173 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2159) #18
  %2174 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2173, <4 x float> %2172) #18
  %2175 = load i32*, i32** %88, align 8
  %2176 = fptosi <4 x float> %2174 to <4 x i32>
  %2177 = load i32, i32* %90, align 8
  %2178 = insertelement <4 x i32> undef, i32 %2177, i32 0
  %2179 = shufflevector <4 x i32> %2178, <4 x i32> undef, <4 x i32> zeroinitializer
  %2180 = mul <4 x i32> %2179, %2176
  %2181 = fptosi <4 x float> %2167 to <4 x i32>
  %2182 = add <4 x i32> %2180, %2181
  %2183 = extractelement <4 x i32> %2182, i32 0
  %2184 = zext i32 %2183 to i64
  %2185 = getelementptr inbounds i32, i32* %2175, i64 %2184
  %2186 = load i32, i32* %2185, align 4
  %2187 = insertelement <4 x i32> undef, i32 %2186, i32 0
  %2188 = extractelement <4 x i32> %2182, i32 1
  %2189 = zext i32 %2188 to i64
  %2190 = getelementptr inbounds i32, i32* %2175, i64 %2189
  %2191 = load i32, i32* %2190, align 4
  %2192 = insertelement <4 x i32> %2187, i32 %2191, i32 1
  %2193 = extractelement <4 x i32> %2182, i32 2
  %2194 = zext i32 %2193 to i64
  %2195 = getelementptr inbounds i32, i32* %2175, i64 %2194
  %2196 = load i32, i32* %2195, align 4
  %2197 = insertelement <4 x i32> %2192, i32 %2196, i32 2
  %2198 = extractelement <4 x i32> %2182, i32 3
  %2199 = zext i32 %2198 to i64
  %2200 = getelementptr inbounds i32, i32* %2175, i64 %2199
  %2201 = load i32, i32* %2200, align 4
  %2202 = insertelement <4 x i32> %2197, i32 %2201, i32 3
  %2203 = and <4 x i32> %2202, <i32 255, i32 255, i32 255, i32 255>
  %2204 = sitofp <4 x i32> %2203 to <4 x float>
  %2205 = fmul <4 x float> %2204, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2206 = lshr <4 x i32> %2202, <i32 8, i32 8, i32 8, i32 8>
  %2207 = and <4 x i32> %2206, <i32 255, i32 255, i32 255, i32 255>
  %2208 = sitofp <4 x i32> %2207 to <4 x float>
  %2209 = fmul <4 x float> %2208, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2210 = lshr <4 x i32> %2202, <i32 16, i32 16, i32 16, i32 16>
  %2211 = and <4 x i32> %2210, <i32 255, i32 255, i32 255, i32 255>
  %2212 = sitofp <4 x i32> %2211 to <4 x float>
  %2213 = fmul <4 x float> %2212, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2214 = lshr <4 x i32> %2202, <i32 24, i32 24, i32 24, i32 24>
  %2215 = sitofp <4 x i32> %2214 to <4 x float>
  %2216 = fmul <4 x float> %2215, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2217 = icmp eq i32 %177, 6
  %2218 = select i1 %2217, <4 x float> %2213, <4 x float> %2205
  %2219 = select i1 %2217, <4 x float> %2205, <4 x float> %2213
  br label %2220

2220:                                             ; preds = %2160, %2158
  %2221 = phi <4 x float> [ zeroinitializer, %2158 ], [ %2218, %2160 ]
  %2222 = phi <4 x float> [ zeroinitializer, %2158 ], [ %2209, %2160 ]
  %2223 = phi <4 x float> [ zeroinitializer, %2158 ], [ %2219, %2160 ]
  %2224 = phi <4 x float> [ zeroinitializer, %2158 ], [ %2216, %2160 ]
  %2225 = fmul <4 x float> %71, %40
  %2226 = fmul <4 x float> %2225, %2221
  %2227 = fadd <4 x float> %2075, %2226
  %2228 = fmul <4 x float> %2225, %2222
  %2229 = fadd <4 x float> %2077, %2228
  %2230 = fmul <4 x float> %2225, %2223
  %2231 = fadd <4 x float> %2079, %2230
  %2232 = fmul <4 x float> %2225, %2224
  %2233 = fadd <4 x float> %2081, %2232
  switch i32 %91, label %131 [
    i32 3, label %2271
    i32 0, label %2271
    i32 1, label %2258
    i32 2, label %2234
  ]

2234:                                             ; preds = %2220
  %2235 = insertelement <4 x float> undef, float %92, i32 0
  %2236 = shufflevector <4 x float> %2235, <4 x float> undef, <4 x i32> zeroinitializer
  %2237 = fsub <4 x float> %405, %2236
  %2238 = fadd float %92, %92
  %2239 = insertelement <4 x float> undef, float %2238, i32 0
  %2240 = shufflevector <4 x float> %2239, <4 x float> undef, <4 x i32> zeroinitializer
  %2241 = fmul float %93, 5.000000e-01
  %2242 = insertelement <4 x float> undef, float %2241, i32 0
  %2243 = shufflevector <4 x float> %2242, <4 x float> undef, <4 x i32> zeroinitializer
  %2244 = fmul <4 x float> %2237, %2243
  %2245 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2244) #18
  %2246 = sitofp <4 x i32> %2245 to <4 x float>
  %2247 = fcmp olt <4 x float> %2244, %2246
  %2248 = select <4 x i1> %2247, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2249 = fsub <4 x float> %2246, %2248
  %2250 = fmul <4 x float> %2240, %2249
  %2251 = fsub <4 x float> %2237, %2250
  %2252 = fsub <4 x float> %2251, %2236
  %2253 = fsub <4 x float> zeroinitializer, %2252
  %2254 = bitcast <4 x float> %2252 to <4 x i32>
  %2255 = bitcast <4 x float> %2253 to <4 x i32>
  %2256 = and <4 x i32> %2255, %2254
  %2257 = bitcast <4 x i32> %2256 to <4 x float>
  br label %2271

2258:                                             ; preds = %2220
  %2259 = insertelement <4 x float> undef, float %93, i32 0
  %2260 = shufflevector <4 x float> %2259, <4 x float> undef, <4 x i32> zeroinitializer
  %2261 = fmul <4 x float> %405, %2260
  %2262 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2261) #18
  %2263 = sitofp <4 x i32> %2262 to <4 x float>
  %2264 = fcmp olt <4 x float> %2261, %2263
  %2265 = select <4 x i1> %2264, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2266 = fsub <4 x float> %2263, %2265
  %2267 = insertelement <4 x float> undef, float %92, i32 0
  %2268 = shufflevector <4 x float> %2267, <4 x float> undef, <4 x i32> zeroinitializer
  %2269 = fmul <4 x float> %2268, %2266
  %2270 = fsub <4 x float> %405, %2269
  br label %2271

2271:                                             ; preds = %2258, %2234, %2220, %2220
  %2272 = phi <4 x float> [ %2257, %2234 ], [ %2270, %2258 ], [ %405, %2220 ], [ %405, %2220 ]
  switch i32 %134, label %174 [
    i32 3, label %2310
    i32 0, label %2310
    i32 1, label %2297
    i32 2, label %2273
  ]

2273:                                             ; preds = %2271
  %2274 = insertelement <4 x float> undef, float %135, i32 0
  %2275 = shufflevector <4 x float> %2274, <4 x float> undef, <4 x i32> zeroinitializer
  %2276 = fsub <4 x float> %1929, %2275
  %2277 = fadd float %135, %135
  %2278 = insertelement <4 x float> undef, float %2277, i32 0
  %2279 = shufflevector <4 x float> %2278, <4 x float> undef, <4 x i32> zeroinitializer
  %2280 = fmul float %136, 5.000000e-01
  %2281 = insertelement <4 x float> undef, float %2280, i32 0
  %2282 = shufflevector <4 x float> %2281, <4 x float> undef, <4 x i32> zeroinitializer
  %2283 = fmul <4 x float> %2276, %2282
  %2284 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2283) #18
  %2285 = sitofp <4 x i32> %2284 to <4 x float>
  %2286 = fcmp olt <4 x float> %2283, %2285
  %2287 = select <4 x i1> %2286, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2288 = fsub <4 x float> %2285, %2287
  %2289 = fmul <4 x float> %2279, %2288
  %2290 = fsub <4 x float> %2276, %2289
  %2291 = fsub <4 x float> %2290, %2275
  %2292 = fsub <4 x float> zeroinitializer, %2291
  %2293 = bitcast <4 x float> %2291 to <4 x i32>
  %2294 = bitcast <4 x float> %2292 to <4 x i32>
  %2295 = and <4 x i32> %2294, %2293
  %2296 = bitcast <4 x i32> %2295 to <4 x float>
  br label %2310

2297:                                             ; preds = %2271
  %2298 = insertelement <4 x float> undef, float %136, i32 0
  %2299 = shufflevector <4 x float> %2298, <4 x float> undef, <4 x i32> zeroinitializer
  %2300 = fmul <4 x float> %1929, %2299
  %2301 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2300) #18
  %2302 = sitofp <4 x i32> %2301 to <4 x float>
  %2303 = fcmp olt <4 x float> %2300, %2302
  %2304 = select <4 x i1> %2303, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2305 = fsub <4 x float> %2302, %2304
  %2306 = insertelement <4 x float> undef, float %135, i32 0
  %2307 = shufflevector <4 x float> %2306, <4 x float> undef, <4 x i32> zeroinitializer
  %2308 = fmul <4 x float> %2307, %2305
  %2309 = fsub <4 x float> %1929, %2308
  br label %2310

2310:                                             ; preds = %2297, %2273, %2271, %2271
  %2311 = phi <4 x float> [ %2296, %2273 ], [ %2309, %2297 ], [ %1929, %2271 ], [ %1929, %2271 ]
  switch i32 %177, label %2372 [
    i32 4, label %2312
    i32 6, label %2312
  ]

2312:                                             ; preds = %2310, %2310
  %2313 = insertelement <4 x float> undef, float %92, i32 0
  %2314 = shufflevector <4 x float> %2313, <4 x float> undef, <4 x i32> zeroinitializer
  %2315 = bitcast <4 x float> %2314 to <4 x i32>
  %2316 = add <4 x i32> %2315, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2317 = bitcast <4 x i32> %2316 to <4 x float>
  %2318 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2272) #18
  %2319 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2318, <4 x float> %2317) #18
  %2320 = insertelement <4 x float> undef, float %135, i32 0
  %2321 = shufflevector <4 x float> %2320, <4 x float> undef, <4 x i32> zeroinitializer
  %2322 = bitcast <4 x float> %2321 to <4 x i32>
  %2323 = add <4 x i32> %2322, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2324 = bitcast <4 x i32> %2323 to <4 x float>
  %2325 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2311) #18
  %2326 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2325, <4 x float> %2324) #18
  %2327 = load i32*, i32** %88, align 8
  %2328 = fptosi <4 x float> %2326 to <4 x i32>
  %2329 = load i32, i32* %90, align 8
  %2330 = insertelement <4 x i32> undef, i32 %2329, i32 0
  %2331 = shufflevector <4 x i32> %2330, <4 x i32> undef, <4 x i32> zeroinitializer
  %2332 = mul <4 x i32> %2331, %2328
  %2333 = fptosi <4 x float> %2319 to <4 x i32>
  %2334 = add <4 x i32> %2332, %2333
  %2335 = extractelement <4 x i32> %2334, i32 0
  %2336 = zext i32 %2335 to i64
  %2337 = getelementptr inbounds i32, i32* %2327, i64 %2336
  %2338 = load i32, i32* %2337, align 4
  %2339 = insertelement <4 x i32> undef, i32 %2338, i32 0
  %2340 = extractelement <4 x i32> %2334, i32 1
  %2341 = zext i32 %2340 to i64
  %2342 = getelementptr inbounds i32, i32* %2327, i64 %2341
  %2343 = load i32, i32* %2342, align 4
  %2344 = insertelement <4 x i32> %2339, i32 %2343, i32 1
  %2345 = extractelement <4 x i32> %2334, i32 2
  %2346 = zext i32 %2345 to i64
  %2347 = getelementptr inbounds i32, i32* %2327, i64 %2346
  %2348 = load i32, i32* %2347, align 4
  %2349 = insertelement <4 x i32> %2344, i32 %2348, i32 2
  %2350 = extractelement <4 x i32> %2334, i32 3
  %2351 = zext i32 %2350 to i64
  %2352 = getelementptr inbounds i32, i32* %2327, i64 %2351
  %2353 = load i32, i32* %2352, align 4
  %2354 = insertelement <4 x i32> %2349, i32 %2353, i32 3
  %2355 = and <4 x i32> %2354, <i32 255, i32 255, i32 255, i32 255>
  %2356 = sitofp <4 x i32> %2355 to <4 x float>
  %2357 = fmul <4 x float> %2356, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2358 = lshr <4 x i32> %2354, <i32 8, i32 8, i32 8, i32 8>
  %2359 = and <4 x i32> %2358, <i32 255, i32 255, i32 255, i32 255>
  %2360 = sitofp <4 x i32> %2359 to <4 x float>
  %2361 = fmul <4 x float> %2360, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2362 = lshr <4 x i32> %2354, <i32 16, i32 16, i32 16, i32 16>
  %2363 = and <4 x i32> %2362, <i32 255, i32 255, i32 255, i32 255>
  %2364 = sitofp <4 x i32> %2363 to <4 x float>
  %2365 = fmul <4 x float> %2364, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2366 = lshr <4 x i32> %2354, <i32 24, i32 24, i32 24, i32 24>
  %2367 = sitofp <4 x i32> %2366 to <4 x float>
  %2368 = fmul <4 x float> %2367, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2369 = icmp eq i32 %177, 6
  %2370 = select i1 %2369, <4 x float> %2365, <4 x float> %2357
  %2371 = select i1 %2369, <4 x float> %2357, <4 x float> %2365
  br label %2372

2372:                                             ; preds = %2312, %2310
  %2373 = phi <4 x float> [ zeroinitializer, %2310 ], [ %2370, %2312 ]
  %2374 = phi <4 x float> [ zeroinitializer, %2310 ], [ %2361, %2312 ]
  %2375 = phi <4 x float> [ zeroinitializer, %2310 ], [ %2371, %2312 ]
  %2376 = phi <4 x float> [ zeroinitializer, %2310 ], [ %2368, %2312 ]
  %2377 = fmul <4 x float> %71, %46
  %2378 = fmul <4 x float> %2377, %2373
  %2379 = fadd <4 x float> %2227, %2378
  %2380 = fmul <4 x float> %2377, %2374
  %2381 = fadd <4 x float> %2229, %2380
  %2382 = fmul <4 x float> %2377, %2375
  %2383 = fadd <4 x float> %2231, %2382
  %2384 = fmul <4 x float> %2377, %2376
  %2385 = fadd <4 x float> %2233, %2384
  switch i32 %91, label %131 [
    i32 3, label %2423
    i32 0, label %2423
    i32 1, label %2410
    i32 2, label %2386
  ]

2386:                                             ; preds = %2372
  %2387 = insertelement <4 x float> undef, float %92, i32 0
  %2388 = shufflevector <4 x float> %2387, <4 x float> undef, <4 x i32> zeroinitializer
  %2389 = fsub <4 x float> %558, %2388
  %2390 = fadd float %92, %92
  %2391 = insertelement <4 x float> undef, float %2390, i32 0
  %2392 = shufflevector <4 x float> %2391, <4 x float> undef, <4 x i32> zeroinitializer
  %2393 = fmul float %93, 5.000000e-01
  %2394 = insertelement <4 x float> undef, float %2393, i32 0
  %2395 = shufflevector <4 x float> %2394, <4 x float> undef, <4 x i32> zeroinitializer
  %2396 = fmul <4 x float> %2389, %2395
  %2397 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2396) #18
  %2398 = sitofp <4 x i32> %2397 to <4 x float>
  %2399 = fcmp olt <4 x float> %2396, %2398
  %2400 = select <4 x i1> %2399, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2401 = fsub <4 x float> %2398, %2400
  %2402 = fmul <4 x float> %2392, %2401
  %2403 = fsub <4 x float> %2389, %2402
  %2404 = fsub <4 x float> %2403, %2388
  %2405 = fsub <4 x float> zeroinitializer, %2404
  %2406 = bitcast <4 x float> %2404 to <4 x i32>
  %2407 = bitcast <4 x float> %2405 to <4 x i32>
  %2408 = and <4 x i32> %2407, %2406
  %2409 = bitcast <4 x i32> %2408 to <4 x float>
  br label %2423

2410:                                             ; preds = %2372
  %2411 = insertelement <4 x float> undef, float %93, i32 0
  %2412 = shufflevector <4 x float> %2411, <4 x float> undef, <4 x i32> zeroinitializer
  %2413 = fmul <4 x float> %558, %2412
  %2414 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2413) #18
  %2415 = sitofp <4 x i32> %2414 to <4 x float>
  %2416 = fcmp olt <4 x float> %2413, %2415
  %2417 = select <4 x i1> %2416, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2418 = fsub <4 x float> %2415, %2417
  %2419 = insertelement <4 x float> undef, float %92, i32 0
  %2420 = shufflevector <4 x float> %2419, <4 x float> undef, <4 x i32> zeroinitializer
  %2421 = fmul <4 x float> %2420, %2418
  %2422 = fsub <4 x float> %558, %2421
  br label %2423

2423:                                             ; preds = %2410, %2386, %2372, %2372
  %2424 = phi <4 x float> [ %2409, %2386 ], [ %2422, %2410 ], [ %558, %2372 ], [ %558, %2372 ]
  switch i32 %134, label %174 [
    i32 3, label %2462
    i32 0, label %2462
    i32 1, label %2449
    i32 2, label %2425
  ]

2425:                                             ; preds = %2423
  %2426 = insertelement <4 x float> undef, float %135, i32 0
  %2427 = shufflevector <4 x float> %2426, <4 x float> undef, <4 x i32> zeroinitializer
  %2428 = fsub <4 x float> %1929, %2427
  %2429 = fadd float %135, %135
  %2430 = insertelement <4 x float> undef, float %2429, i32 0
  %2431 = shufflevector <4 x float> %2430, <4 x float> undef, <4 x i32> zeroinitializer
  %2432 = fmul float %136, 5.000000e-01
  %2433 = insertelement <4 x float> undef, float %2432, i32 0
  %2434 = shufflevector <4 x float> %2433, <4 x float> undef, <4 x i32> zeroinitializer
  %2435 = fmul <4 x float> %2428, %2434
  %2436 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2435) #18
  %2437 = sitofp <4 x i32> %2436 to <4 x float>
  %2438 = fcmp olt <4 x float> %2435, %2437
  %2439 = select <4 x i1> %2438, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2440 = fsub <4 x float> %2437, %2439
  %2441 = fmul <4 x float> %2431, %2440
  %2442 = fsub <4 x float> %2428, %2441
  %2443 = fsub <4 x float> %2442, %2427
  %2444 = fsub <4 x float> zeroinitializer, %2443
  %2445 = bitcast <4 x float> %2443 to <4 x i32>
  %2446 = bitcast <4 x float> %2444 to <4 x i32>
  %2447 = and <4 x i32> %2446, %2445
  %2448 = bitcast <4 x i32> %2447 to <4 x float>
  br label %2462

2449:                                             ; preds = %2423
  %2450 = insertelement <4 x float> undef, float %136, i32 0
  %2451 = shufflevector <4 x float> %2450, <4 x float> undef, <4 x i32> zeroinitializer
  %2452 = fmul <4 x float> %1929, %2451
  %2453 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %2452) #18
  %2454 = sitofp <4 x i32> %2453 to <4 x float>
  %2455 = fcmp olt <4 x float> %2452, %2454
  %2456 = select <4 x i1> %2455, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %2457 = fsub <4 x float> %2454, %2456
  %2458 = insertelement <4 x float> undef, float %135, i32 0
  %2459 = shufflevector <4 x float> %2458, <4 x float> undef, <4 x i32> zeroinitializer
  %2460 = fmul <4 x float> %2459, %2457
  %2461 = fsub <4 x float> %1929, %2460
  br label %2462

2462:                                             ; preds = %2449, %2425, %2423, %2423
  %2463 = phi <4 x float> [ %2448, %2425 ], [ %2461, %2449 ], [ %1929, %2423 ], [ %1929, %2423 ]
  switch i32 %177, label %2524 [
    i32 4, label %2464
    i32 6, label %2464
  ]

2464:                                             ; preds = %2462, %2462
  %2465 = insertelement <4 x float> undef, float %92, i32 0
  %2466 = shufflevector <4 x float> %2465, <4 x float> undef, <4 x i32> zeroinitializer
  %2467 = bitcast <4 x float> %2466 to <4 x i32>
  %2468 = add <4 x i32> %2467, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2469 = bitcast <4 x i32> %2468 to <4 x float>
  %2470 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2424) #18
  %2471 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2470, <4 x float> %2469) #18
  %2472 = insertelement <4 x float> undef, float %135, i32 0
  %2473 = shufflevector <4 x float> %2472, <4 x float> undef, <4 x i32> zeroinitializer
  %2474 = bitcast <4 x float> %2473 to <4 x i32>
  %2475 = add <4 x i32> %2474, <i32 -1, i32 -1, i32 -1, i32 -1>
  %2476 = bitcast <4 x i32> %2475 to <4 x float>
  %2477 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %2463) #18
  %2478 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %2477, <4 x float> %2476) #18
  %2479 = load i32*, i32** %88, align 8
  %2480 = fptosi <4 x float> %2478 to <4 x i32>
  %2481 = load i32, i32* %90, align 8
  %2482 = insertelement <4 x i32> undef, i32 %2481, i32 0
  %2483 = shufflevector <4 x i32> %2482, <4 x i32> undef, <4 x i32> zeroinitializer
  %2484 = mul <4 x i32> %2483, %2480
  %2485 = fptosi <4 x float> %2471 to <4 x i32>
  %2486 = add <4 x i32> %2484, %2485
  %2487 = extractelement <4 x i32> %2486, i32 0
  %2488 = zext i32 %2487 to i64
  %2489 = getelementptr inbounds i32, i32* %2479, i64 %2488
  %2490 = load i32, i32* %2489, align 4
  %2491 = insertelement <4 x i32> undef, i32 %2490, i32 0
  %2492 = extractelement <4 x i32> %2486, i32 1
  %2493 = zext i32 %2492 to i64
  %2494 = getelementptr inbounds i32, i32* %2479, i64 %2493
  %2495 = load i32, i32* %2494, align 4
  %2496 = insertelement <4 x i32> %2491, i32 %2495, i32 1
  %2497 = extractelement <4 x i32> %2486, i32 2
  %2498 = zext i32 %2497 to i64
  %2499 = getelementptr inbounds i32, i32* %2479, i64 %2498
  %2500 = load i32, i32* %2499, align 4
  %2501 = insertelement <4 x i32> %2496, i32 %2500, i32 2
  %2502 = extractelement <4 x i32> %2486, i32 3
  %2503 = zext i32 %2502 to i64
  %2504 = getelementptr inbounds i32, i32* %2479, i64 %2503
  %2505 = load i32, i32* %2504, align 4
  %2506 = insertelement <4 x i32> %2501, i32 %2505, i32 3
  %2507 = and <4 x i32> %2506, <i32 255, i32 255, i32 255, i32 255>
  %2508 = sitofp <4 x i32> %2507 to <4 x float>
  %2509 = fmul <4 x float> %2508, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2510 = lshr <4 x i32> %2506, <i32 8, i32 8, i32 8, i32 8>
  %2511 = and <4 x i32> %2510, <i32 255, i32 255, i32 255, i32 255>
  %2512 = sitofp <4 x i32> %2511 to <4 x float>
  %2513 = fmul <4 x float> %2512, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2514 = lshr <4 x i32> %2506, <i32 16, i32 16, i32 16, i32 16>
  %2515 = and <4 x i32> %2514, <i32 255, i32 255, i32 255, i32 255>
  %2516 = sitofp <4 x i32> %2515 to <4 x float>
  %2517 = fmul <4 x float> %2516, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2518 = lshr <4 x i32> %2506, <i32 24, i32 24, i32 24, i32 24>
  %2519 = sitofp <4 x i32> %2518 to <4 x float>
  %2520 = fmul <4 x float> %2519, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %2521 = icmp eq i32 %177, 6
  %2522 = select i1 %2521, <4 x float> %2517, <4 x float> %2509
  %2523 = select i1 %2521, <4 x float> %2509, <4 x float> %2517
  br label %2524

2524:                                             ; preds = %2462, %2464
  %2525 = phi <4 x float> [ zeroinitializer, %2462 ], [ %2522, %2464 ]
  %2526 = phi <4 x float> [ zeroinitializer, %2462 ], [ %2513, %2464 ]
  %2527 = phi <4 x float> [ zeroinitializer, %2462 ], [ %2523, %2464 ]
  %2528 = phi <4 x float> [ zeroinitializer, %2462 ], [ %2520, %2464 ]
  %2529 = fmul <4 x float> %50, %71
  %2530 = fmul <4 x float> %2529, %2525
  %2531 = fadd <4 x float> %2379, %2530
  %2532 = fmul <4 x float> %2529, %2526
  %2533 = fadd <4 x float> %2381, %2532
  %2534 = fmul <4 x float> %2529, %2527
  %2535 = fadd <4 x float> %2383, %2534
  %2536 = fmul <4 x float> %2529, %2528
  %2537 = fadd <4 x float> %2385, %2536
  %2538 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %2539 = extractvalue { i8*, i8** } %2538, 0
  %2540 = extractvalue { i8*, i8** } %2538, 1
  %2541 = bitcast i8* %2539 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %2541(i64 %0, i8** %2540, i64 %2, i64 %3, <4 x float> %2531, <4 x float> %2533, <4 x float> %2535, <4 x float> %2537, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bilinear_nxEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fadd <4 x float> %17, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = getelementptr inbounds i8, i8* %14, i64 256
  %24 = bitcast i8* %23 to <4 x float>*
  store <4 x float> %22, <4 x float>* %24, align 4
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <4 x float> %18, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bilinear_pxEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fadd <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = getelementptr inbounds i8, i8* %14, i64 256
  %23 = bitcast i8* %22 to <4 x float>*
  store <4 x float> %21, <4 x float>* %23, align 4
  %24 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %25 = extractvalue { i8*, i8** } %24, 0
  %26 = extractvalue { i8*, i8** } %24, 1
  %27 = bitcast i8* %25 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %27(i64 %0, i8** %26, i64 %2, i64 %3, <4 x float> %18, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bilinear_nyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %18, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = getelementptr inbounds i8, i8* %14, i64 320
  %25 = bitcast i8* %24 to <4 x float>*
  store <4 x float> %23, <4 x float>* %25, align 4
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %4, <4 x float> %19, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bilinear_pyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = getelementptr inbounds i8, i8* %14, i64 320
  %24 = bitcast i8* %23 to <4 x float>*
  store <4 x float> %22, <4 x float>* %24, align 4
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <4 x float> %4, <4 x float> %19, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_n3xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fadd <4 x float> %17, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = fmul <4 x float> %22, %22
  %24 = fmul <4 x float> %22, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %25 = fadd <4 x float> %24, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %26 = fmul <4 x float> %23, %25
  %27 = getelementptr inbounds i8, i8* %14, i64 256
  %28 = bitcast i8* %27 to <4 x float>*
  store <4 x float> %26, <4 x float>* %28, align 4
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <4 x float> %18, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_n1xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fadd <4 x float> %17, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = fmul <4 x float> %22, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %24 = fadd <4 x float> %23, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %25 = fmul <4 x float> %22, %24
  %26 = fadd <4 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %27 = fmul <4 x float> %22, %26
  %28 = fadd <4 x float> %27, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %29 = getelementptr inbounds i8, i8* %14, i64 256
  %30 = bitcast i8* %29 to <4 x float>*
  store <4 x float> %28, <4 x float>* %30, align 4
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <4 x float> %18, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_p1xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fadd <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = fmul <4 x float> %21, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %23 = fadd <4 x float> %22, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %24 = fmul <4 x float> %21, %23
  %25 = fadd <4 x float> %24, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %26 = fmul <4 x float> %21, %25
  %27 = fadd <4 x float> %26, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %28 = getelementptr inbounds i8, i8* %14, i64 256
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %27, <4 x float>* %29, align 4
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <4 x float> %18, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_p3xEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 4
  %18 = fadd <4 x float> %17, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = fmul <4 x float> %21, %21
  %23 = fmul <4 x float> %21, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %24 = fadd <4 x float> %23, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %25 = fmul <4 x float> %22, %24
  %26 = getelementptr inbounds i8, i8* %14, i64 256
  %27 = bitcast i8* %26 to <4 x float>*
  store <4 x float> %25, <4 x float>* %27, align 4
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <4 x float> %18, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_n3yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %18, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fmul <4 x float> %23, %23
  %25 = fmul <4 x float> %23, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %26 = fadd <4 x float> %25, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %27 = fmul <4 x float> %24, %26
  %28 = getelementptr inbounds i8, i8* %14, i64 320
  %29 = bitcast i8* %28 to <4 x float>*
  store <4 x float> %27, <4 x float>* %29, align 4
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <4 x float> %4, <4 x float> %19, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_n1yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %18, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fmul <4 x float> %23, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %25 = fadd <4 x float> %24, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %26 = fmul <4 x float> %23, %25
  %27 = fadd <4 x float> %26, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %28 = fmul <4 x float> %23, %27
  %29 = fadd <4 x float> %28, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %30 = getelementptr inbounds i8, i8* %14, i64 320
  %31 = bitcast i8* %30 to <4 x float>*
  store <4 x float> %29, <4 x float>* %31, align 4
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <4 x float> %4, <4 x float> %19, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_p1yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fmul <4 x float> %22, <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>
  %24 = fadd <4 x float> %23, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %25 = fmul <4 x float> %22, %24
  %26 = fadd <4 x float> %25, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %27 = fmul <4 x float> %22, %26
  %28 = fadd <4 x float> %27, <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>
  %29 = getelementptr inbounds i8, i8* %14, i64 320
  %30 = bitcast i8* %29 to <4 x float>*
  store <4 x float> %28, <4 x float>* %30, align 4
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <4 x float> %4, <4 x float> %19, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11bicubic_p3yEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = fadd <4 x float> %18, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <4 x float>*
  %22 = load <4 x float>, <4 x float>* %21, align 4
  %23 = fmul <4 x float> %22, %22
  %24 = fmul <4 x float> %22, <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>
  %25 = fadd <4 x float> %24, <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>
  %26 = fmul <4 x float> %23, %25
  %27 = getelementptr inbounds i8, i8* %14, i64 320
  %28 = bitcast i8* %27 to <4 x float>*
  store <4 x float> %26, <4 x float>* %28, align 4
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <4 x float> %4, <4 x float> %19, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7save_xyEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fadd <4 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %17 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %16) #18
  %18 = sitofp <4 x i32> %17 to <4 x float>
  %19 = fcmp olt <4 x float> %16, %18
  %20 = select <4 x i1> %19, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %21 = fsub <4 x float> %18, %20
  %22 = fsub <4 x float> %16, %21
  %23 = fadd <4 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %23) #18
  %25 = sitofp <4 x i32> %24 to <4 x float>
  %26 = fcmp olt <4 x float> %23, %25
  %27 = select <4 x i1> %26, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %28 = fsub <4 x float> %25, %27
  %29 = fsub <4 x float> %23, %28
  %30 = bitcast i8* %14 to <4 x float>*
  store <4 x float> %4, <4 x float>* %30, align 4
  %31 = getelementptr inbounds i8, i8* %14, i64 64
  %32 = bitcast i8* %31 to <4 x float>*
  store <4 x float> %5, <4 x float>* %32, align 4
  %33 = getelementptr inbounds i8, i8* %14, i64 128
  %34 = bitcast i8* %33 to <4 x float>*
  store <4 x float> %22, <4 x float>* %34, align 4
  %35 = getelementptr inbounds i8, i8* %14, i64 192
  %36 = bitcast i8* %35 to <4 x float>*
  store <4 x float> %29, <4 x float>* %36, align 4
  %37 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %38 = extractvalue { i8*, i8** } %37, 0
  %39 = extractvalue { i8*, i8** } %37, 1
  %40 = bitcast i8* %38 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %40(i64 %0, i8** %39, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10accumulateEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 256
  %17 = bitcast i8* %16 to <4 x float>*
  %18 = load <4 x float>, <4 x float>* %17, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 320
  %20 = bitcast i8* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 4
  %22 = fmul <4 x float> %18, %21
  %23 = fmul <4 x float> %22, %4
  %24 = fadd <4 x float> %23, %8
  %25 = fmul <4 x float> %22, %5
  %26 = fadd <4 x float> %25, %9
  %27 = fmul <4 x float> %22, %6
  %28 = fadd <4 x float> %27, %10
  %29 = fmul <4 x float> %22, %7
  %30 = fadd <4 x float> %29, %11
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <4 x float> %4, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %24, <4 x float> %26, <4 x float> %28, <4 x float> %30) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L9clamp_x_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %14 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %13, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = bitcast i8* %16 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %18(i64 %0, i8** %17, i64 %2, i64 %3, <4 x float> %14, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10mirror_x_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fadd <4 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %14 = fmul <4 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %15 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %14) #18
  %16 = sitofp <4 x i32> %15 to <4 x float>
  %17 = fcmp olt <4 x float> %14, %16
  %18 = select <4 x i1> %17, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %19 = fsub <4 x float> %16, %18
  %20 = fadd <4 x float> %19, %19
  %21 = fsub <4 x float> %13, %20
  %22 = fadd <4 x float> %21, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %23 = fsub <4 x float> zeroinitializer, %22
  %24 = bitcast <4 x float> %22 to <4 x i32>
  %25 = bitcast <4 x float> %23 to <4 x i32>
  %26 = and <4 x i32> %25, %24
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %27) #18
  %29 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %28, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <4 x float> %29, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10repeat_x_1EmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %4) #18
  %14 = sitofp <4 x i32> %13 to <4 x float>
  %15 = fcmp ogt <4 x float> %14, %4
  %16 = select <4 x i1> %15, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %17 = fsub <4 x float> %14, %16
  %18 = fsub <4 x float> %4, %17
  %19 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %18) #18
  %20 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %19, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <4 x float> %20, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L22evenly_spaced_gradientEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, -1
  %19 = uitofp i64 %18 to float
  %20 = insertelement <4 x float> undef, float %19, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = fmul <4 x float> %21, %4
  %23 = fptosi <4 x float> %22 to <4 x i32>
  %24 = getelementptr inbounds i8, i8* %14, i64 8
  %25 = bitcast i8* %24 to float**
  %26 = load float*, float** %25, align 8
  %27 = extractelement <4 x i32> %23, i32 0
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %26, i64 %28
  %30 = load float, float* %29, align 4
  %31 = insertelement <4 x float> undef, float %30, i32 0
  %32 = extractelement <4 x i32> %23, i32 1
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %26, i64 %33
  %35 = load float, float* %34, align 4
  %36 = insertelement <4 x float> %31, float %35, i32 1
  %37 = extractelement <4 x i32> %23, i32 2
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds float, float* %26, i64 %38
  %40 = load float, float* %39, align 4
  %41 = insertelement <4 x float> %36, float %40, i32 2
  %42 = extractelement <4 x i32> %23, i32 3
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %26, i64 %43
  %45 = load float, float* %44, align 4
  %46 = insertelement <4 x float> %41, float %45, i32 3
  %47 = getelementptr inbounds i8, i8* %14, i64 40
  %48 = bitcast i8* %47 to float**
  %49 = load float*, float** %48, align 8
  %50 = getelementptr inbounds float, float* %49, i64 %28
  %51 = load float, float* %50, align 4
  %52 = insertelement <4 x float> undef, float %51, i32 0
  %53 = getelementptr inbounds float, float* %49, i64 %33
  %54 = load float, float* %53, align 4
  %55 = insertelement <4 x float> %52, float %54, i32 1
  %56 = getelementptr inbounds float, float* %49, i64 %38
  %57 = load float, float* %56, align 4
  %58 = insertelement <4 x float> %55, float %57, i32 2
  %59 = getelementptr inbounds float, float* %49, i64 %43
  %60 = load float, float* %59, align 4
  %61 = insertelement <4 x float> %58, float %60, i32 3
  %62 = getelementptr inbounds i8, i8* %14, i64 16
  %63 = bitcast i8* %62 to float**
  %64 = load float*, float** %63, align 8
  %65 = getelementptr inbounds float, float* %64, i64 %28
  %66 = load float, float* %65, align 4
  %67 = insertelement <4 x float> undef, float %66, i32 0
  %68 = getelementptr inbounds float, float* %64, i64 %33
  %69 = load float, float* %68, align 4
  %70 = insertelement <4 x float> %67, float %69, i32 1
  %71 = getelementptr inbounds float, float* %64, i64 %38
  %72 = load float, float* %71, align 4
  %73 = insertelement <4 x float> %70, float %72, i32 2
  %74 = getelementptr inbounds float, float* %64, i64 %43
  %75 = load float, float* %74, align 4
  %76 = insertelement <4 x float> %73, float %75, i32 3
  %77 = getelementptr inbounds i8, i8* %14, i64 48
  %78 = bitcast i8* %77 to float**
  %79 = load float*, float** %78, align 8
  %80 = getelementptr inbounds float, float* %79, i64 %28
  %81 = load float, float* %80, align 4
  %82 = insertelement <4 x float> undef, float %81, i32 0
  %83 = getelementptr inbounds float, float* %79, i64 %33
  %84 = load float, float* %83, align 4
  %85 = insertelement <4 x float> %82, float %84, i32 1
  %86 = getelementptr inbounds float, float* %79, i64 %38
  %87 = load float, float* %86, align 4
  %88 = insertelement <4 x float> %85, float %87, i32 2
  %89 = getelementptr inbounds float, float* %79, i64 %43
  %90 = load float, float* %89, align 4
  %91 = insertelement <4 x float> %88, float %90, i32 3
  %92 = getelementptr inbounds i8, i8* %14, i64 24
  %93 = bitcast i8* %92 to float**
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %28
  %96 = load float, float* %95, align 4
  %97 = insertelement <4 x float> undef, float %96, i32 0
  %98 = getelementptr inbounds float, float* %94, i64 %33
  %99 = load float, float* %98, align 4
  %100 = insertelement <4 x float> %97, float %99, i32 1
  %101 = getelementptr inbounds float, float* %94, i64 %38
  %102 = load float, float* %101, align 4
  %103 = insertelement <4 x float> %100, float %102, i32 2
  %104 = getelementptr inbounds float, float* %94, i64 %43
  %105 = load float, float* %104, align 4
  %106 = insertelement <4 x float> %103, float %105, i32 3
  %107 = getelementptr inbounds i8, i8* %14, i64 56
  %108 = bitcast i8* %107 to float**
  %109 = load float*, float** %108, align 8
  %110 = getelementptr inbounds float, float* %109, i64 %28
  %111 = load float, float* %110, align 4
  %112 = insertelement <4 x float> undef, float %111, i32 0
  %113 = getelementptr inbounds float, float* %109, i64 %33
  %114 = load float, float* %113, align 4
  %115 = insertelement <4 x float> %112, float %114, i32 1
  %116 = getelementptr inbounds float, float* %109, i64 %38
  %117 = load float, float* %116, align 4
  %118 = insertelement <4 x float> %115, float %117, i32 2
  %119 = getelementptr inbounds float, float* %109, i64 %43
  %120 = load float, float* %119, align 4
  %121 = insertelement <4 x float> %118, float %120, i32 3
  %122 = getelementptr inbounds i8, i8* %14, i64 32
  %123 = bitcast i8* %122 to float**
  %124 = load float*, float** %123, align 8
  %125 = getelementptr inbounds float, float* %124, i64 %28
  %126 = load float, float* %125, align 4
  %127 = insertelement <4 x float> undef, float %126, i32 0
  %128 = getelementptr inbounds float, float* %124, i64 %33
  %129 = load float, float* %128, align 4
  %130 = insertelement <4 x float> %127, float %129, i32 1
  %131 = getelementptr inbounds float, float* %124, i64 %38
  %132 = load float, float* %131, align 4
  %133 = insertelement <4 x float> %130, float %132, i32 2
  %134 = getelementptr inbounds float, float* %124, i64 %43
  %135 = load float, float* %134, align 4
  %136 = insertelement <4 x float> %133, float %135, i32 3
  %137 = getelementptr inbounds i8, i8* %14, i64 64
  %138 = bitcast i8* %137 to float**
  %139 = load float*, float** %138, align 8
  %140 = getelementptr inbounds float, float* %139, i64 %28
  %141 = load float, float* %140, align 4
  %142 = insertelement <4 x float> undef, float %141, i32 0
  %143 = getelementptr inbounds float, float* %139, i64 %33
  %144 = load float, float* %143, align 4
  %145 = insertelement <4 x float> %142, float %144, i32 1
  %146 = getelementptr inbounds float, float* %139, i64 %38
  %147 = load float, float* %146, align 4
  %148 = insertelement <4 x float> %145, float %147, i32 2
  %149 = getelementptr inbounds float, float* %139, i64 %43
  %150 = load float, float* %149, align 4
  %151 = insertelement <4 x float> %148, float %150, i32 3
  %152 = fmul <4 x float> %46, %4
  %153 = fadd <4 x float> %152, %61
  %154 = fmul <4 x float> %76, %4
  %155 = fadd <4 x float> %154, %91
  %156 = fmul <4 x float> %106, %4
  %157 = fadd <4 x float> %156, %121
  %158 = fmul <4 x float> %136, %4
  %159 = fadd <4 x float> %158, %151
  %160 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %161 = extractvalue { i8*, i8** } %160, 0
  %162 = extractvalue { i8*, i8** } %160, 1
  %163 = bitcast i8* %161 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %163(i64 %0, i8** %162, i64 %2, i64 %3, <4 x float> %153, <4 x float> %155, <4 x float> %157, <4 x float> %159, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L8gradientEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, 1
  br i1 %18, label %19, label %63

19:                                               ; preds = %12
  %20 = getelementptr inbounds i8, i8* %14, i64 72
  %21 = bitcast i8* %20 to float**
  %22 = load float*, float** %21, align 8
  %23 = add i64 %17, -1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %17, 2
  br i1 %25, label %50, label %26

26:                                               ; preds = %19
  %27 = sub i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 1, %26 ], [ %47, %28 ]
  %30 = phi <4 x i32> [ zeroinitializer, %26 ], [ %46, %28 ]
  %31 = phi i64 [ %27, %26 ], [ %48, %28 ]
  %32 = getelementptr inbounds float, float* %22, i64 %29
  %33 = load float, float* %32, align 4
  %34 = insertelement <4 x float> undef, float %33, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = fcmp ole <4 x float> %35, %4
  %37 = zext <4 x i1> %36 to <4 x i32>
  %38 = add <4 x i32> %30, %37
  %39 = add nuw i64 %29, 1
  %40 = getelementptr inbounds float, float* %22, i64 %39
  %41 = load float, float* %40, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = fcmp ole <4 x float> %43, %4
  %45 = zext <4 x i1> %44 to <4 x i32>
  %46 = add <4 x i32> %38, %45
  %47 = add nuw i64 %29, 2
  %48 = add i64 %31, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %28

50:                                               ; preds = %28, %19
  %51 = phi <4 x i32> [ undef, %19 ], [ %46, %28 ]
  %52 = phi i64 [ 1, %19 ], [ %47, %28 ]
  %53 = phi <4 x i32> [ zeroinitializer, %19 ], [ %46, %28 ]
  %54 = icmp eq i64 %24, 0
  br i1 %54, label %63, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds float, float* %22, i64 %52
  %57 = load float, float* %56, align 4
  %58 = insertelement <4 x float> undef, float %57, i32 0
  %59 = shufflevector <4 x float> %58, <4 x float> undef, <4 x i32> zeroinitializer
  %60 = fcmp ole <4 x float> %59, %4
  %61 = zext <4 x i1> %60 to <4 x i32>
  %62 = add <4 x i32> %53, %61
  br label %63

63:                                               ; preds = %55, %50, %12
  %64 = phi <4 x i32> [ zeroinitializer, %12 ], [ %51, %50 ], [ %62, %55 ]
  %65 = getelementptr inbounds i8, i8* %14, i64 8
  %66 = bitcast i8* %65 to float**
  %67 = load float*, float** %66, align 8
  %68 = extractelement <4 x i32> %64, i32 0
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds float, float* %67, i64 %69
  %71 = load float, float* %70, align 4
  %72 = insertelement <4 x float> undef, float %71, i32 0
  %73 = extractelement <4 x i32> %64, i32 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds float, float* %67, i64 %74
  %76 = load float, float* %75, align 4
  %77 = insertelement <4 x float> %72, float %76, i32 1
  %78 = extractelement <4 x i32> %64, i32 2
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %67, i64 %79
  %81 = load float, float* %80, align 4
  %82 = insertelement <4 x float> %77, float %81, i32 2
  %83 = extractelement <4 x i32> %64, i32 3
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds float, float* %67, i64 %84
  %86 = load float, float* %85, align 4
  %87 = insertelement <4 x float> %82, float %86, i32 3
  %88 = getelementptr inbounds i8, i8* %14, i64 40
  %89 = bitcast i8* %88 to float**
  %90 = load float*, float** %89, align 8
  %91 = getelementptr inbounds float, float* %90, i64 %69
  %92 = load float, float* %91, align 4
  %93 = insertelement <4 x float> undef, float %92, i32 0
  %94 = getelementptr inbounds float, float* %90, i64 %74
  %95 = load float, float* %94, align 4
  %96 = insertelement <4 x float> %93, float %95, i32 1
  %97 = getelementptr inbounds float, float* %90, i64 %79
  %98 = load float, float* %97, align 4
  %99 = insertelement <4 x float> %96, float %98, i32 2
  %100 = getelementptr inbounds float, float* %90, i64 %84
  %101 = load float, float* %100, align 4
  %102 = insertelement <4 x float> %99, float %101, i32 3
  %103 = getelementptr inbounds i8, i8* %14, i64 16
  %104 = bitcast i8* %103 to float**
  %105 = load float*, float** %104, align 8
  %106 = getelementptr inbounds float, float* %105, i64 %69
  %107 = load float, float* %106, align 4
  %108 = insertelement <4 x float> undef, float %107, i32 0
  %109 = getelementptr inbounds float, float* %105, i64 %74
  %110 = load float, float* %109, align 4
  %111 = insertelement <4 x float> %108, float %110, i32 1
  %112 = getelementptr inbounds float, float* %105, i64 %79
  %113 = load float, float* %112, align 4
  %114 = insertelement <4 x float> %111, float %113, i32 2
  %115 = getelementptr inbounds float, float* %105, i64 %84
  %116 = load float, float* %115, align 4
  %117 = insertelement <4 x float> %114, float %116, i32 3
  %118 = getelementptr inbounds i8, i8* %14, i64 48
  %119 = bitcast i8* %118 to float**
  %120 = load float*, float** %119, align 8
  %121 = getelementptr inbounds float, float* %120, i64 %69
  %122 = load float, float* %121, align 4
  %123 = insertelement <4 x float> undef, float %122, i32 0
  %124 = getelementptr inbounds float, float* %120, i64 %74
  %125 = load float, float* %124, align 4
  %126 = insertelement <4 x float> %123, float %125, i32 1
  %127 = getelementptr inbounds float, float* %120, i64 %79
  %128 = load float, float* %127, align 4
  %129 = insertelement <4 x float> %126, float %128, i32 2
  %130 = getelementptr inbounds float, float* %120, i64 %84
  %131 = load float, float* %130, align 4
  %132 = insertelement <4 x float> %129, float %131, i32 3
  %133 = getelementptr inbounds i8, i8* %14, i64 24
  %134 = bitcast i8* %133 to float**
  %135 = load float*, float** %134, align 8
  %136 = getelementptr inbounds float, float* %135, i64 %69
  %137 = load float, float* %136, align 4
  %138 = insertelement <4 x float> undef, float %137, i32 0
  %139 = getelementptr inbounds float, float* %135, i64 %74
  %140 = load float, float* %139, align 4
  %141 = insertelement <4 x float> %138, float %140, i32 1
  %142 = getelementptr inbounds float, float* %135, i64 %79
  %143 = load float, float* %142, align 4
  %144 = insertelement <4 x float> %141, float %143, i32 2
  %145 = getelementptr inbounds float, float* %135, i64 %84
  %146 = load float, float* %145, align 4
  %147 = insertelement <4 x float> %144, float %146, i32 3
  %148 = getelementptr inbounds i8, i8* %14, i64 56
  %149 = bitcast i8* %148 to float**
  %150 = load float*, float** %149, align 8
  %151 = getelementptr inbounds float, float* %150, i64 %69
  %152 = load float, float* %151, align 4
  %153 = insertelement <4 x float> undef, float %152, i32 0
  %154 = getelementptr inbounds float, float* %150, i64 %74
  %155 = load float, float* %154, align 4
  %156 = insertelement <4 x float> %153, float %155, i32 1
  %157 = getelementptr inbounds float, float* %150, i64 %79
  %158 = load float, float* %157, align 4
  %159 = insertelement <4 x float> %156, float %158, i32 2
  %160 = getelementptr inbounds float, float* %150, i64 %84
  %161 = load float, float* %160, align 4
  %162 = insertelement <4 x float> %159, float %161, i32 3
  %163 = getelementptr inbounds i8, i8* %14, i64 32
  %164 = bitcast i8* %163 to float**
  %165 = load float*, float** %164, align 8
  %166 = getelementptr inbounds float, float* %165, i64 %69
  %167 = load float, float* %166, align 4
  %168 = insertelement <4 x float> undef, float %167, i32 0
  %169 = getelementptr inbounds float, float* %165, i64 %74
  %170 = load float, float* %169, align 4
  %171 = insertelement <4 x float> %168, float %170, i32 1
  %172 = getelementptr inbounds float, float* %165, i64 %79
  %173 = load float, float* %172, align 4
  %174 = insertelement <4 x float> %171, float %173, i32 2
  %175 = getelementptr inbounds float, float* %165, i64 %84
  %176 = load float, float* %175, align 4
  %177 = insertelement <4 x float> %174, float %176, i32 3
  %178 = getelementptr inbounds i8, i8* %14, i64 64
  %179 = bitcast i8* %178 to float**
  %180 = load float*, float** %179, align 8
  %181 = getelementptr inbounds float, float* %180, i64 %69
  %182 = load float, float* %181, align 4
  %183 = insertelement <4 x float> undef, float %182, i32 0
  %184 = getelementptr inbounds float, float* %180, i64 %74
  %185 = load float, float* %184, align 4
  %186 = insertelement <4 x float> %183, float %185, i32 1
  %187 = getelementptr inbounds float, float* %180, i64 %79
  %188 = load float, float* %187, align 4
  %189 = insertelement <4 x float> %186, float %188, i32 2
  %190 = getelementptr inbounds float, float* %180, i64 %84
  %191 = load float, float* %190, align 4
  %192 = insertelement <4 x float> %189, float %191, i32 3
  %193 = fmul <4 x float> %87, %4
  %194 = fadd <4 x float> %193, %102
  %195 = fmul <4 x float> %117, %4
  %196 = fadd <4 x float> %195, %132
  %197 = fmul <4 x float> %147, %4
  %198 = fadd <4 x float> %197, %162
  %199 = fmul <4 x float> %177, %4
  %200 = fadd <4 x float> %199, %192
  %201 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %202 = extractvalue { i8*, i8** } %201, 0
  %203 = extractvalue { i8*, i8** } %201, 1
  %204 = bitcast i8* %202 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %204(i64 %0, i8** %203, i64 %2, i64 %3, <4 x float> %194, <4 x float> %196, <4 x float> %198, <4 x float> %200, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L29evenly_spaced_2_stop_gradientEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 16
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %19, %4
  %26 = fadd <4 x float> %25, %24
  %27 = getelementptr inbounds i8, i8* %14, i64 4
  %28 = bitcast i8* %27 to float*
  %29 = load float, float* %28, align 4
  %30 = insertelement <4 x float> undef, float %29, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> zeroinitializer
  %32 = getelementptr inbounds i8, i8* %14, i64 20
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <4 x float> undef, float %34, i32 0
  %36 = shufflevector <4 x float> %35, <4 x float> undef, <4 x i32> zeroinitializer
  %37 = fmul <4 x float> %31, %4
  %38 = fadd <4 x float> %37, %36
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = insertelement <4 x float> undef, float %41, i32 0
  %43 = shufflevector <4 x float> %42, <4 x float> undef, <4 x i32> zeroinitializer
  %44 = getelementptr inbounds i8, i8* %14, i64 24
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> undef, float %46, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fmul <4 x float> %43, %4
  %50 = fadd <4 x float> %49, %48
  %51 = getelementptr inbounds i8, i8* %14, i64 12
  %52 = bitcast i8* %51 to float*
  %53 = load float, float* %52, align 4
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> zeroinitializer
  %56 = getelementptr inbounds i8, i8* %14, i64 28
  %57 = bitcast i8* %56 to float*
  %58 = load float, float* %57, align 4
  %59 = insertelement <4 x float> undef, float %58, i32 0
  %60 = shufflevector <4 x float> %59, <4 x float> undef, <4 x i32> zeroinitializer
  %61 = fmul <4 x float> %55, %4
  %62 = fadd <4 x float> %61, %60
  %63 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %64 = extractvalue { i8*, i8** } %63, 0
  %65 = extractvalue { i8*, i8** } %63, 1
  %66 = bitcast i8* %64 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %66(i64 %0, i8** %65, i64 %2, i64 %3, <4 x float> %26, <4 x float> %38, <4 x float> %50, <4 x float> %62, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L16xy_to_unit_angleEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> zeroinitializer, %4
  %14 = bitcast <4 x float> %4 to <4 x i32>
  %15 = bitcast <4 x float> %13 to <4 x i32>
  %16 = and <4 x i32> %15, %14
  %17 = bitcast <4 x i32> %16 to <4 x float>
  %18 = fsub <4 x float> zeroinitializer, %5
  %19 = bitcast <4 x float> %5 to <4 x i32>
  %20 = bitcast <4 x float> %18 to <4 x i32>
  %21 = and <4 x i32> %20, %19
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %17, <4 x float> %22) #18
  %24 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %17, <4 x float> %22) #18
  %25 = fdiv <4 x float> %23, %24
  %26 = fmul <4 x float> %25, %25
  %27 = fmul <4 x float> %26, <float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000>
  %28 = fadd <4 x float> %27, <float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000>
  %29 = fmul <4 x float> %26, %28
  %30 = fadd <4 x float> %29, <float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000>
  %31 = fmul <4 x float> %26, %30
  %32 = fadd <4 x float> %31, <float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000>
  %33 = fmul <4 x float> %25, %32
  %34 = fcmp uge <4 x float> %17, %22
  %35 = fsub <4 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, %33
  %36 = select <4 x i1> %34, <4 x float> %33, <4 x float> %35
  %37 = fcmp uge <4 x float> %4, zeroinitializer
  %38 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %36
  %39 = select <4 x i1> %37, <4 x float> %36, <4 x float> %38
  %40 = fcmp uge <4 x float> %5, zeroinitializer
  %41 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %42 = select <4 x i1> %40, <4 x float> %39, <4 x float> %41
  %43 = fcmp ord <4 x float> %42, zeroinitializer
  %44 = select <4 x i1> %43, <4 x float> %42, <4 x float> zeroinitializer
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <4 x float> %44, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L12xy_to_radiusEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %4, %4
  %14 = fmul <4 x float> %5, %5
  %15 = fadd <4 x float> %13, %14
  %16 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %15) #18
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <4 x float> %16, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L23xy_to_2pt_conical_stripEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = fmul <4 x float> %5, %5
  %22 = fsub <4 x float> %20, %21
  %23 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %22) #18
  %24 = fadd <4 x float> %23, %4
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <4 x float> %24, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L33xy_to_2pt_conical_focal_on_circleEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %5, %5
  %14 = fdiv <4 x float> %13, %4
  %15 = fadd <4 x float> %14, %4
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %19(i64 %0, i8** %18, i64 %2, i64 %3, <4 x float> %15, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L30xy_to_2pt_conical_well_behavedEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fmul <4 x float> %4, %4
  %17 = fmul <4 x float> %5, %5
  %18 = fadd <4 x float> %16, %17
  %19 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %18) #18
  %20 = getelementptr inbounds i8, i8* %14, i64 64
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %24, %4
  %26 = fsub <4 x float> %19, %25
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <4 x float> %26, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L25xy_to_2pt_conical_smallerEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fmul <4 x float> %4, %4
  %17 = fmul <4 x float> %5, %5
  %18 = fsub <4 x float> %16, %17
  %19 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %18) #18
  %20 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %19
  %21 = getelementptr inbounds i8, i8* %14, i64 64
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = insertelement <4 x float> undef, float %23, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = fmul <4 x float> %25, %4
  %27 = fsub <4 x float> %20, %26
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <4 x float> %27, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L25xy_to_2pt_conical_greaterEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fmul <4 x float> %4, %4
  %17 = fmul <4 x float> %5, %5
  %18 = fsub <4 x float> %16, %17
  %19 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %18) #18
  %20 = getelementptr inbounds i8, i8* %14, i64 64
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %24, %4
  %26 = fsub <4 x float> %19, %25
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <4 x float> %26, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L34alter_2pt_conical_compensate_focalEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 68
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = fadd <4 x float> %20, %4
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <4 x float> %21, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L24alter_2pt_conical_unswapEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %14 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %15 = extractvalue { i8*, i8** } %14, 0
  %16 = extractvalue { i8*, i8** } %14, 1
  %17 = bitcast i8* %15 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %17(i64 %0, i8** %16, i64 %2, i64 %3, <4 x float> %13, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L20mask_2pt_conical_nanEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fcmp uno <4 x float> %4, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> zeroinitializer, <4 x float> %4
  %18 = xor <4 x i1> %16, <i1 true, i1 true, i1 true, i1 true>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %20, align 4
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <4 x float> %17, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L28mask_2pt_conical_degeneratesEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fcmp ule <4 x float> %4, zeroinitializer
  %17 = select <4 x i1> %16, <4 x float> zeroinitializer, <4 x float> %4
  %18 = xor <4 x i1> %16, <i1 true, i1 true, i1 true, i1 true>
  %19 = sext <4 x i1> %18 to <4 x i32>
  %20 = bitcast i8* %14 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %20, align 4
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <4 x float> %17, <4 x float> %5, <4 x float> %6, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L17apply_vector_maskEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = bitcast <4 x float> %4 to <4 x i32>
  %14 = bitcast <4 x float> %5 to <4 x i32>
  %15 = bitcast <4 x float> %6 to <4 x i32>
  %16 = bitcast <4 x float> %7 to <4 x i32>
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 4
  %22 = and <4 x i32> %21, %13
  %23 = and <4 x i32> %21, %14
  %24 = and <4 x i32> %21, %15
  %25 = and <4 x i32> %21, %16
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %19) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %30 = bitcast <4 x i32> %22 to <4 x float>
  %31 = bitcast <4 x i32> %23 to <4 x float>
  %32 = bitcast <4 x i32> %24 to <4 x float>
  %33 = bitcast <4 x i32> %25 to <4 x float>
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <4 x float> %30, <4 x float> %31, <4 x float> %32, <4 x float> %33, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L11byte_tablesEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %4) #18
  %19 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %18, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %20 = fmul <4 x float> %19, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %21 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %20) #18
  %22 = extractelement <4 x i32> %21, i32 0
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %17, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = insertelement <4 x i8> undef, i8 %25, i32 0
  %27 = extractelement <4 x i32> %21, i32 1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %17, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = insertelement <4 x i8> %26, i8 %30, i32 1
  %32 = extractelement <4 x i32> %21, i32 2
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %17, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = insertelement <4 x i8> %31, i8 %35, i32 2
  %37 = extractelement <4 x i32> %21, i32 3
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %17, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = insertelement <4 x i8> %36, i8 %40, i32 3
  %42 = uitofp <4 x i8> %41 to <4 x float>
  %43 = fmul <4 x float> %42, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %44 = getelementptr inbounds i8, i8* %14, i64 8
  %45 = bitcast i8* %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %5) #18
  %48 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %47, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %49 = fmul <4 x float> %48, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %50 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %49) #18
  %51 = extractelement <4 x i32> %50, i32 0
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %46, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = insertelement <4 x i8> undef, i8 %54, i32 0
  %56 = extractelement <4 x i32> %50, i32 1
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %46, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = insertelement <4 x i8> %55, i8 %59, i32 1
  %61 = extractelement <4 x i32> %50, i32 2
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %46, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = insertelement <4 x i8> %60, i8 %64, i32 2
  %66 = extractelement <4 x i32> %50, i32 3
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %46, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = insertelement <4 x i8> %65, i8 %69, i32 3
  %71 = uitofp <4 x i8> %70 to <4 x float>
  %72 = fmul <4 x float> %71, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %73 = getelementptr inbounds i8, i8* %14, i64 16
  %74 = bitcast i8* %73 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %6) #18
  %77 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %76, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %78 = fmul <4 x float> %77, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %79 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %78) #18
  %80 = extractelement <4 x i32> %79, i32 0
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %75, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = insertelement <4 x i8> undef, i8 %83, i32 0
  %85 = extractelement <4 x i32> %79, i32 1
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %75, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = insertelement <4 x i8> %84, i8 %88, i32 1
  %90 = extractelement <4 x i32> %79, i32 2
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %75, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = insertelement <4 x i8> %89, i8 %93, i32 2
  %95 = extractelement <4 x i32> %79, i32 3
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %75, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = insertelement <4 x i8> %94, i8 %98, i32 3
  %100 = uitofp <4 x i8> %99 to <4 x float>
  %101 = fmul <4 x float> %100, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %102 = getelementptr inbounds i8, i8* %14, i64 24
  %103 = bitcast i8* %102 to i8**
  %104 = load i8*, i8** %103, align 8
  %105 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %7) #18
  %106 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %105, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %107 = fmul <4 x float> %106, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %108 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %107) #18
  %109 = extractelement <4 x i32> %108, i32 0
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %104, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = insertelement <4 x i8> undef, i8 %112, i32 0
  %114 = extractelement <4 x i32> %108, i32 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %104, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = insertelement <4 x i8> %113, i8 %117, i32 1
  %119 = extractelement <4 x i32> %108, i32 2
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %104, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = insertelement <4 x i8> %118, i8 %122, i32 2
  %124 = extractelement <4 x i32> %108, i32 3
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %104, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = insertelement <4 x i8> %123, i8 %127, i32 3
  %129 = uitofp <4 x i8> %128 to <4 x float>
  %130 = fmul <4 x float> %129, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %131 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %132 = extractvalue { i8*, i8** } %131, 0
  %133 = extractvalue { i8*, i8** } %131, 1
  %134 = bitcast i8* %132 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %134(i64 %0, i8** %133, i64 %2, i64 %3, <4 x float> %43, <4 x float> %72, <4 x float> %101, <4 x float> %130, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10rgb_to_hslEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %5, <4 x float> %6) #18
  %14 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %4, <4 x float> %13) #18
  %15 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %5, <4 x float> %6) #18
  %16 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %4, <4 x float> %15) #18
  %17 = fsub <4 x float> %14, %16
  %18 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %19 = fcmp une <4 x float> %14, %16
  %20 = fcmp une <4 x float> %14, %4
  %21 = fsub <4 x float> %5, %6
  %22 = fmul <4 x float> %21, %18
  %23 = fcmp olt <4 x float> %5, %6
  %24 = select <4 x i1> %23, <4 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>, <4 x float> zeroinitializer
  %25 = fadd <4 x float> %24, %22
  %26 = fcmp une <4 x float> %14, %5
  %27 = fsub <4 x float> %6, %4
  %28 = fmul <4 x float> %27, %18
  %29 = fadd <4 x float> %28, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %30 = fsub <4 x float> %4, %5
  %31 = fmul <4 x float> %30, %18
  %32 = fadd <4 x float> %31, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %33 = select <4 x i1> %26, <4 x float> %32, <4 x float> %29
  %34 = select <4 x i1> %20, <4 x float> %33, <4 x float> %25
  %35 = bitcast <4 x float> %34 to <4 x i32>
  %36 = sext <4 x i1> %19 to <4 x i32>
  %37 = and <4 x i32> %35, %36
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fmul <4 x float> %38, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %40 = fadd <4 x float> %14, %16
  %41 = fmul <4 x float> %40, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %42 = fcmp ule <4 x float> %41, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %43 = fsub <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %14
  %44 = fsub <4 x float> %43, %16
  %45 = select <4 x i1> %42, <4 x float> %40, <4 x float> %44
  %46 = fdiv <4 x float> %17, %45
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = and <4 x i32> %47, %36
  %49 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %50 = extractvalue { i8*, i8** } %49, 0
  %51 = extractvalue { i8*, i8** } %49, 1
  %52 = bitcast i8* %50 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %53 = bitcast <4 x i32> %48 to <4 x float>
  tail call void %52(i64 %0, i8** %51, i64 %2, i64 %3, <4 x float> %39, <4 x float> %53, <4 x float> %41, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L10hsl_to_rgbEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %6, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %14 = fadd <4 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <4 x float> zeroinitializer, %14
  %16 = bitcast <4 x float> %14 to <4 x i32>
  %17 = bitcast <4 x float> %15 to <4 x i32>
  %18 = and <4 x i32> %17, %16
  %19 = bitcast <4 x i32> %18 to <4 x float>
  %20 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %19
  %21 = fmul <4 x float> %20, %5
  %22 = fadd <4 x float> %4, zeroinitializer
  %23 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %22) #18
  %24 = sitofp <4 x i32> %23 to <4 x float>
  %25 = fcmp olt <4 x float> %22, %24
  %26 = select <4 x i1> %25, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %27 = fsub <4 x float> %26, %24
  %28 = fadd <4 x float> %22, %27
  %29 = fmul <4 x float> %28, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %30 = fadd <4 x float> %29, <float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00>
  %31 = fsub <4 x float> zeroinitializer, %30
  %32 = bitcast <4 x float> %30 to <4 x i32>
  %33 = bitcast <4 x float> %31 to <4 x i32>
  %34 = and <4 x i32> %33, %32
  %35 = bitcast <4 x i32> %34 to <4 x float>
  %36 = fadd <4 x float> %35, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %37 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %36) #18
  %38 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %37, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %39 = fadd <4 x float> %38, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %40 = fmul <4 x float> %21, %39
  %41 = fadd <4 x float> %40, %6
  %42 = fadd <4 x float> %4, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %43 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %42) #18
  %44 = sitofp <4 x i32> %43 to <4 x float>
  %45 = fcmp olt <4 x float> %42, %44
  %46 = select <4 x i1> %45, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %47 = fsub <4 x float> %44, %46
  %48 = fsub <4 x float> %42, %47
  %49 = fmul <4 x float> %48, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %50 = fadd <4 x float> %49, <float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00>
  %51 = fsub <4 x float> zeroinitializer, %50
  %52 = bitcast <4 x float> %50 to <4 x i32>
  %53 = bitcast <4 x float> %51 to <4 x i32>
  %54 = and <4 x i32> %53, %52
  %55 = bitcast <4 x i32> %54 to <4 x float>
  %56 = fadd <4 x float> %55, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %57 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %56) #18
  %58 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %57, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %59 = fadd <4 x float> %58, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %60 = fmul <4 x float> %21, %59
  %61 = fadd <4 x float> %60, %6
  %62 = fadd <4 x float> %4, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %63 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %62) #18
  %64 = sitofp <4 x i32> %63 to <4 x float>
  %65 = fcmp olt <4 x float> %62, %64
  %66 = select <4 x i1> %65, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %67 = fsub <4 x float> %64, %66
  %68 = fsub <4 x float> %62, %67
  %69 = fmul <4 x float> %68, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %70 = fadd <4 x float> %69, <float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00>
  %71 = fsub <4 x float> zeroinitializer, %70
  %72 = bitcast <4 x float> %70 to <4 x i32>
  %73 = bitcast <4 x float> %71 to <4 x i32>
  %74 = and <4 x i32> %73, %72
  %75 = bitcast <4 x i32> %74 to <4 x float>
  %76 = fadd <4 x float> %75, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %77 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %76) #18
  %78 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %77, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #18
  %79 = fadd <4 x float> %78, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %80 = fmul <4 x float> %21, %79
  %81 = fadd <4 x float> %80, %6
  %82 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %83 = extractvalue { i8*, i8** } %82, 0
  %84 = extractvalue { i8*, i8** } %82, 1
  %85 = bitcast i8* %83 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %85(i64 %0, i8** %84, i64 %2, i64 %3, <4 x float> %41, <4 x float> %61, <4 x float> %81, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L15gauss_a_to_rgbaEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = fmul <4 x float> %7, <float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000>
  %14 = fadd <4 x float> %13, <float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000>
  %15 = fmul <4 x float> %14, %7
  %16 = fadd <4 x float> %15, <float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000>
  %17 = fmul <4 x float> %16, %7
  %18 = fadd <4 x float> %17, <float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000>
  %19 = fmul <4 x float> %18, %7
  %20 = fadd <4 x float> %19, <float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000>
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <4 x float> %20, <4 x float> %20, <4 x float> %20, <4 x float> %20, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L6embossEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = getelementptr inbounds i8, i8* %14, i64 16
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %14, i64 24
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = sext i32 %30 to i64
  %32 = mul i64 %31, %3
  %33 = getelementptr inbounds i8, i8* %27, i64 %32
  %34 = getelementptr inbounds i8, i8* %33, i64 %2
  %35 = icmp ult i64 %0, 4
  tail call void @llvm.assume(i1 %35) #18
  switch i64 %0, label %41 [
    i64 0, label %65
    i64 1, label %60
    i64 2, label %36
    i64 3, label %42
  ], !prof !260

36:                                               ; preds = %12
  %37 = bitcast i8* %24 to <2 x i8>*
  %38 = load <2 x i8>, <2 x i8>* %37, align 1
  %39 = shufflevector <2 x i8> %38, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = shufflevector <4 x i8> %39, <4 x i8> <i8 undef, i8 undef, i8 0, i8 0>, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %53

41:                                               ; preds = %12
  unreachable

42:                                               ; preds = %12
  %43 = getelementptr inbounds i8, i8* %24, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = insertelement <4 x i8> <i8 undef, i8 undef, i8 undef, i8 0>, i8 %44, i32 2
  %46 = bitcast i8* %24 to <2 x i8>*
  %47 = load <2 x i8>, <2 x i8>* %46, align 1
  %48 = shufflevector <2 x i8> %47, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %49 = shufflevector <4 x i8> %48, <4 x i8> %45, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %50 = getelementptr inbounds i8, i8* %34, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <4 x i8> <i8 0, i8 0, i8 undef, i8 0>, i8 %51, i32 2
  br label %53

53:                                               ; preds = %42, %36
  %54 = phi <4 x i8> [ %49, %42 ], [ %40, %36 ]
  %55 = phi <4 x i8> [ %52, %42 ], [ zeroinitializer, %36 ]
  %56 = bitcast i8* %34 to <2 x i8>*
  %57 = load <2 x i8>, <2 x i8>* %56, align 1
  %58 = shufflevector <2 x i8> %57, <2 x i8> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = shufflevector <4 x i8> %58, <4 x i8> %55, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  br label %70

60:                                               ; preds = %12
  %61 = load i8, i8* %24, align 1
  %62 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %61, i32 0
  %63 = load i8, i8* %34, align 1
  %64 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %63, i32 0
  br label %70

65:                                               ; preds = %12
  %66 = bitcast i8* %24 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = bitcast i8* %34 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1
  br label %70

70:                                               ; preds = %53, %60, %65
  %71 = phi <4 x i8> [ %67, %65 ], [ %62, %60 ], [ %54, %53 ]
  %72 = phi <4 x i8> [ %69, %65 ], [ %64, %60 ], [ %59, %53 ]
  %73 = uitofp <4 x i8> %71 to <4 x float>
  %74 = fmul <4 x float> %73, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %75 = uitofp <4 x i8> %72 to <4 x float>
  %76 = fmul <4 x float> %75, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %77 = fmul <4 x float> %74, %4
  %78 = fadd <4 x float> %77, %76
  %79 = fmul <4 x float> %74, %5
  %80 = fadd <4 x float> %76, %79
  %81 = fmul <4 x float> %74, %6
  %82 = fadd <4 x float> %76, %81
  %83 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %84 = extractvalue { i8*, i8** } %83, 0
  %85 = extractvalue { i8*, i8** } %83, 1
  %86 = bitcast i8* %84 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %86(i64 %0, i8** %85, i64 %2, i64 %3, <4 x float> %78, <4 x float> %80, <4 x float> %82, <4 x float> %7, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L7swizzleEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = ptrtoint i8* %14 to i64
  %17 = trunc i64 %16 to i32
  %18 = shl i32 %17, 24
  %19 = ashr exact i32 %18, 24
  switch i32 %19, label %25 [
    i32 49, label %24
    i32 103, label %20
    i32 98, label %21
    i32 97, label %22
    i32 48, label %23
  ]

20:                                               ; preds = %12
  br label %25

21:                                               ; preds = %12
  br label %25

22:                                               ; preds = %12
  br label %25

23:                                               ; preds = %12
  br label %25

24:                                               ; preds = %12
  br label %25

25:                                               ; preds = %24, %23, %22, %21, %20, %12
  %26 = phi <4 x float> [ %4, %12 ], [ zeroinitializer, %23 ], [ %7, %22 ], [ %6, %21 ], [ %5, %20 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %24 ]
  %27 = shl i32 %17, 16
  %28 = ashr i32 %27, 24
  switch i32 %28, label %34 [
    i32 114, label %33
    i32 49, label %29
    i32 98, label %32
    i32 97, label %31
    i32 48, label %30
  ]

29:                                               ; preds = %25
  br label %34

30:                                               ; preds = %25
  br label %34

31:                                               ; preds = %25
  br label %34

32:                                               ; preds = %25
  br label %34

33:                                               ; preds = %25
  br label %34

34:                                               ; preds = %33, %32, %31, %30, %29, %25
  %35 = phi <4 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29 ], [ zeroinitializer, %30 ], [ %7, %31 ], [ %6, %32 ], [ %4, %33 ], [ %5, %25 ]
  %36 = shl i32 %17, 8
  %37 = ashr i32 %36, 24
  switch i32 %37, label %43 [
    i32 114, label %42
    i32 103, label %41
    i32 49, label %38
    i32 97, label %40
    i32 48, label %39
  ]

38:                                               ; preds = %34
  br label %43

39:                                               ; preds = %34
  br label %43

40:                                               ; preds = %34
  br label %43

41:                                               ; preds = %34
  br label %43

42:                                               ; preds = %34
  br label %43

43:                                               ; preds = %42, %41, %40, %39, %38, %34
  %44 = phi <4 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38 ], [ zeroinitializer, %39 ], [ %7, %40 ], [ %5, %41 ], [ %4, %42 ], [ %6, %34 ]
  %45 = ashr i32 %17, 24
  switch i32 %45, label %51 [
    i32 114, label %50
    i32 103, label %49
    i32 98, label %48
    i32 49, label %46
    i32 48, label %47
  ]

46:                                               ; preds = %43
  br label %51

47:                                               ; preds = %43
  br label %51

48:                                               ; preds = %43
  br label %51

49:                                               ; preds = %43
  br label %51

50:                                               ; preds = %43
  br label %51

51:                                               ; preds = %43, %46, %47, %48, %49, %50
  %52 = phi <4 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %46 ], [ zeroinitializer, %47 ], [ %6, %48 ], [ %5, %49 ], [ %4, %50 ], [ %7, %43 ]
  %53 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %54 = extractvalue { i8*, i8** } %53, 0
  %55 = extractvalue { i8*, i8** } %53, 1
  %56 = bitcast i8* %54 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  tail call void %56(i64 %0, i8** %55, i64 %2, i64 %3, <4 x float> %26, <4 x float> %35, <4 x float> %44, <4 x float> %52, <4 x float> %8, <4 x float> %9, <4 x float> %10, <4 x float> %11) #18
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN4sse3L11just_returnEmPPvmmDv4_fS2_S2_S2_S2_S2_S2_S2_(i64, i8** nocapture, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>) #6 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse3L14start_pipelineEmmmmPPv(i64, i64, i64, i64, i8**) #4 {
  %6 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %4) #13, !srcloc !259
  %7 = extractvalue { i8*, i8** } %6, 0
  %8 = extractvalue { i8*, i8** } %6, 1
  %9 = bitcast i8* %7 to void (i64, i8**, i64, i64, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>)*
  %10 = icmp ult i64 %1, %3
  br i1 %10, label %11, label %29

11:                                               ; preds = %5
  %12 = add i64 %0, 4
  %13 = icmp ugt i64 %12, %2
  br label %14

14:                                               ; preds = %26, %11
  %15 = phi i64 [ %1, %11 ], [ %27, %26 ]
  br i1 %13, label %21, label %16

16:                                               ; preds = %14, %16
  %17 = phi i64 [ %19, %16 ], [ %12, %14 ]
  %18 = phi i64 [ %17, %16 ], [ %0, %14 ]
  tail call void %9(i64 0, i8** %8, i64 %18, i64 %15, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer) #18
  %19 = add i64 %17, 4
  %20 = icmp ugt i64 %19, %2
  br i1 %20, label %21, label %16

21:                                               ; preds = %16, %14
  %22 = phi i64 [ %0, %14 ], [ %17, %16 ]
  %23 = sub i64 %2, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void %9(i64 %23, i8** %8, i64 %22, i64 %15, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer, <4 x float> zeroinitializer) #18
  br label %26

26:                                               ; preds = %21, %25
  %27 = add nuw i64 %15, 1
  %28 = icmp eq i64 %27, %3
  br i1 %28, label %29, label %14

29:                                               ; preds = %26, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12move_src_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12move_dst_srcEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7clamp_0EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7clamp_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7clamp_aEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = icmp ult <8 x i16> %4, %7
  %14 = select <8 x i1> %13, <8 x i16> %4, <8 x i16> %7
  %15 = icmp ult <8 x i16> %5, %7
  %16 = select <8 x i1> %15, <8 x i16> %5, <8 x i16> %7
  %17 = icmp ult <8 x i16> %6, %7
  %18 = select <8 x i1> %17, <8 x i16> %6, <8 x i16> %7
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <8 x i16> %14, <8 x i16> %16, <8 x i16> %18, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11clamp_gamutEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL6premulEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %7, %4
  %14 = add <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <8 x i16> %7, %5
  %17 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %7, %6
  %20 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <8 x i16> %15, <8 x i16> %18, <8 x i16> %21, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10premul_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %11, %8
  %14 = add <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <8 x i16> %11, %9
  %17 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %11, %10
  %20 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %15, <8 x i16> %18, <8 x i16> %21, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12force_opaqueEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL16force_opaque_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7set_rgbEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fadd float %18, 5.000000e-01
  %20 = fptoui float %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = getelementptr inbounds i8, i8* %14, i64 4
  %24 = bitcast i8* %23 to float*
  %25 = load float, float* %24, align 4
  %26 = fmul float %25, 2.550000e+02
  %27 = fadd float %26, 5.000000e-01
  %28 = fptoui float %27 to i16
  %29 = insertelement <8 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <8 x i16> %29, <8 x i16> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 8
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, 2.550000e+02
  %35 = fadd float %34, 5.000000e-01
  %36 = fptoui float %35 to i16
  %37 = insertelement <8 x i16> undef, i16 %36, i32 0
  %38 = shufflevector <8 x i16> %37, <8 x i16> undef, <8 x i32> zeroinitializer
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <8 x i16> %22, <8 x i16> %30, <8 x i16> %38, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7swap_rbEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %6, <8 x i16> %5, <8 x i16> %4, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11swap_rb_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %10, <8 x i16> %9, <8 x i16> %8, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11black_colorEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11white_colorEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13uniform_colorEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 16
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 4
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = getelementptr inbounds i8, i8* %14, i64 18
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %22, align 2
  %24 = insertelement <8 x i16> undef, i16 %23, i32 0
  %25 = shufflevector <8 x i16> %24, <8 x i16> undef, <8 x i32> zeroinitializer
  %26 = getelementptr inbounds i8, i8* %14, i64 20
  %27 = bitcast i8* %26 to i16*
  %28 = load i16, i16* %27, align 4
  %29 = insertelement <8 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <8 x i16> %29, <8 x i16> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 22
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> undef, i16 %33, i32 0
  %35 = shufflevector <8 x i16> %34, <8 x i16> undef, <8 x i32> zeroinitializer
  %36 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %37 = extractvalue { i8*, i8** } %36, 0
  %38 = extractvalue { i8*, i8** } %36, 1
  %39 = bitcast i8* %37 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %39(i64 %0, i8** %38, i64 %2, i64 %3, <8 x i16> %20, <8 x i16> %25, <8 x i16> %30, <8 x i16> %35, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL17uniform_color_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 16
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 4
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = getelementptr inbounds i8, i8* %14, i64 18
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %22, align 2
  %24 = insertelement <8 x i16> undef, i16 %23, i32 0
  %25 = shufflevector <8 x i16> %24, <8 x i16> undef, <8 x i32> zeroinitializer
  %26 = getelementptr inbounds i8, i8* %14, i64 20
  %27 = bitcast i8* %26 to i16*
  %28 = load i16, i16* %27, align 4
  %29 = insertelement <8 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <8 x i16> %29, <8 x i16> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 22
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> undef, i16 %33, i32 0
  %35 = shufflevector <8 x i16> %34, <8 x i16> undef, <8 x i32> zeroinitializer
  %36 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %37 = extractvalue { i8*, i8** } %36, 0
  %38 = extractvalue { i8*, i8** } %36, 1
  %39 = bitcast i8* %37 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %39(i64 %0, i8** %38, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %20, <8 x i16> %25, <8 x i16> %30, <8 x i16> %35) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11seed_shaderEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = trunc i64 %2 to i32
  %14 = insertelement <8 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  %16 = sitofp <8 x i32> %15 to <8 x float>
  %17 = fadd <8 x float> %16, <float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00>
  %18 = trunc i64 %3 to i32
  %19 = insertelement <8 x i32> undef, i32 %18, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = sitofp <8 x i32> %20 to <8 x float>
  %22 = fadd <8 x float> %21, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %23 = shufflevector <8 x float> %17, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %24 = bitcast <4 x float> %23 to <8 x i16>
  %25 = shufflevector <8 x float> %17, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %26 = bitcast <4 x float> %25 to <8 x i16>
  %27 = shufflevector <8 x float> %22, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %28 = bitcast <4 x float> %27 to <8 x i16>
  %29 = shufflevector <8 x float> %22, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %30 = bitcast <4 x float> %29 to <8 x i16>
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <8 x i16> %24, <8 x i16> %26, <8 x i16> %28, <8 x i16> %30, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7load_a8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 6
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <8 x i8> %34, i8 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <8 x i8> %39, i8 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = shufflevector <4 x i8> %46, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i8> %47, <8 x i8> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i8* %24 to <2 x i8>*
  %56 = load <2 x i8>, <2 x i8>* %55, align 1
  %57 = shufflevector <2 x i8> %56, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i8> %57, <8 x i8> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i8, i8* %24, align 1
  %61 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = zext <8 x i8> %64 to <8 x i16>
  %66 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %67 = extractvalue { i8*, i8** } %66, 0
  %68 = extractvalue { i8*, i8** } %66, 1
  %69 = bitcast i8* %67 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %69(i64 %0, i8** %68, i64 %2, i64 %3, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> %65, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11load_a8_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 6
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <8 x i8> %34, i8 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <8 x i8> %39, i8 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = shufflevector <4 x i8> %46, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i8> %47, <8 x i8> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i8* %24 to <2 x i8>*
  %56 = load <2 x i8>, <2 x i8>* %55, align 1
  %57 = shufflevector <2 x i8> %56, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i8> %57, <8 x i8> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i8, i8* %24, align 1
  %61 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = zext <8 x i8> %64 to <8 x i16>
  %66 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %67 = extractvalue { i8*, i8** } %66, 0
  %68 = extractvalue { i8*, i8** } %66, 1
  %69 = bitcast i8* %67 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %69(i64 %0, i8** %68, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> %65) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8store_a8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = trunc <8 x i16> %7 to <8 x i8>
  %26 = and i64 %0, 7
  switch i64 %26, label %49 [
    i64 0, label %27
    i64 7, label %29
    i64 6, label %32
    i64 5, label %35
    i64 4, label %38
    i64 3, label %41
    i64 2, label %44
    i64 1, label %47
  ]

27:                                               ; preds = %12
  %28 = bitcast i8* %24 to <8 x i8>*
  store <8 x i8> %25, <8 x i8>* %28, align 1
  br label %50

29:                                               ; preds = %12
  %30 = extractelement <8 x i8> %25, i32 6
  %31 = getelementptr inbounds i8, i8* %24, i64 6
  store i8 %30, i8* %31, align 1
  br label %32

32:                                               ; preds = %29, %12
  %33 = extractelement <8 x i8> %25, i32 5
  %34 = getelementptr inbounds i8, i8* %24, i64 5
  store i8 %33, i8* %34, align 1
  br label %35

35:                                               ; preds = %32, %12
  %36 = extractelement <8 x i8> %25, i32 4
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  store i8 %36, i8* %37, align 1
  br label %38

38:                                               ; preds = %35, %12
  %39 = bitcast i8* %24 to <4 x i8>*
  %40 = shufflevector <8 x i8> %25, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %40, <4 x i8>* %39, align 1
  br label %50

41:                                               ; preds = %12
  %42 = extractelement <8 x i8> %25, i32 2
  %43 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %42, i8* %43, align 1
  br label %44

44:                                               ; preds = %41, %12
  %45 = bitcast i8* %24 to <2 x i8>*
  %46 = shufflevector <8 x i8> %25, <8 x i8> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i8> %46, <2 x i8>* %45, align 1
  br label %50

47:                                               ; preds = %12
  %48 = extractelement <8 x i8> %25, i32 0
  store i8 %48, i8* %24, align 1
  br label %50

49:                                               ; preds = %12
  unreachable

50:                                               ; preds = %27, %38, %44, %47
  %51 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %52 = extractvalue { i8*, i8** } %51, 0
  %53 = extractvalue { i8*, i8** } %51, 1
  %54 = bitcast i8* %52 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %54(i64 %0, i8** %53, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9gather_a8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <8 x float> undef, float %30, i32 0
  %32 = shufflevector <8 x float> %31, <8 x float> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fcmp ogt <8 x float> %17, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %17, <8 x float> zeroinitializer
  %42 = fcmp olt <8 x float> %41, %32
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> %32
  %44 = fcmp ogt <8 x float> %22, zeroinitializer
  %45 = select <8 x i1> %44, <8 x float> %22, <8 x float> zeroinitializer
  %46 = fcmp olt <8 x float> %45, %39
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> %39
  %48 = bitcast i8* %24 to i8**
  %49 = load i8*, i8** %48, align 8
  %50 = fptosi <8 x float> %47 to <8 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = mul <8 x i32> %55, %50
  %57 = fptosi <8 x float> %43 to <8 x i32>
  %58 = add <8 x i32> %56, %57
  %59 = extractelement <8 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %49, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = insertelement <8 x i8> undef, i8 %62, i32 0
  %64 = extractelement <8 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %49, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = insertelement <8 x i8> %63, i8 %67, i32 1
  %69 = extractelement <8 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %49, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = insertelement <8 x i8> %68, i8 %72, i32 2
  %74 = extractelement <8 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %49, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = insertelement <8 x i8> %73, i8 %77, i32 3
  %79 = extractelement <8 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %49, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = insertelement <8 x i8> %78, i8 %82, i32 4
  %84 = extractelement <8 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %49, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = insertelement <8 x i8> %83, i8 %87, i32 5
  %89 = extractelement <8 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %49, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = insertelement <8 x i8> %88, i8 %92, i32 6
  %94 = extractelement <8 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %49, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = insertelement <8 x i8> %93, i8 %97, i32 7
  %99 = zext <8 x i8> %98 to <8 x i16>
  %100 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %101 = extractvalue { i8*, i8** } %100, 0
  %102 = extractvalue { i8*, i8** } %100, 1
  %103 = bitcast i8* %101 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %103(i64 %0, i8** %102, i64 %2, i64 %3, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> %99, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8load_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = lshr <8 x i16> %64, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %66 = lshr <8 x i16> %64, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %67 = and <8 x i16> %66, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %68 = and <8 x i16> %64, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %69 = shl nuw nsw <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %70 = lshr <8 x i16> %64, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %71 = or <8 x i16> %69, %70
  %72 = shl nuw nsw <8 x i16> %67, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %73 = lshr <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = or <8 x i16> %72, %73
  %75 = shl nuw nsw <8 x i16> %68, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %76 = lshr <8 x i16> %68, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %77 = or <8 x i16> %75, %76
  %78 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %79 = extractvalue { i8*, i8** } %78, 0
  %80 = extractvalue { i8*, i8** } %78, 1
  %81 = bitcast i8* %79 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %81(i64 %0, i8** %80, i64 %2, i64 %3, <8 x i16> %71, <8 x i16> %74, <8 x i16> %77, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12load_565_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = lshr <8 x i16> %64, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %66 = lshr <8 x i16> %64, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %67 = and <8 x i16> %66, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %68 = and <8 x i16> %64, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %69 = shl nuw nsw <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %70 = lshr <8 x i16> %64, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %71 = or <8 x i16> %69, %70
  %72 = shl nuw nsw <8 x i16> %67, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %73 = lshr <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = or <8 x i16> %72, %73
  %75 = shl nuw nsw <8 x i16> %68, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %76 = lshr <8 x i16> %68, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %77 = or <8 x i16> %75, %76
  %78 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %79 = extractvalue { i8*, i8** } %78, 0
  %80 = extractvalue { i8*, i8** } %78, 1
  %81 = bitcast i8* %79 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %81(i64 %0, i8** %80, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %71, <8 x i16> %74, <8 x i16> %77, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9store_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = mul <8 x i16> %4, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %26 = add <8 x i16> %25, <i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36>
  %27 = udiv <8 x i16> %26, <i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74>
  %28 = mul <8 x i16> %5, <i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21>
  %29 = add <8 x i16> %28, <i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42>
  %30 = udiv <8 x i16> %29, <i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85>
  %31 = mul <8 x i16> %6, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %32 = add <8 x i16> %31, <i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36>
  %33 = udiv <8 x i16> %32, <i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74>
  %34 = shl <8 x i16> %27, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %35 = shl nuw nsw <8 x i16> %30, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %36 = or <8 x i16> %35, %34
  %37 = or <8 x i16> %36, %33
  %38 = and i64 %0, 7
  switch i64 %38, label %61 [
    i64 0, label %39
    i64 7, label %41
    i64 6, label %44
    i64 5, label %47
    i64 4, label %50
    i64 3, label %53
    i64 2, label %56
    i64 1, label %59
  ]

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %40, align 2
  br label %62

41:                                               ; preds = %12
  %42 = extractelement <8 x i16> %37, i32 6
  %43 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %42, i16* %43, align 2
  br label %44

44:                                               ; preds = %41, %12
  %45 = extractelement <8 x i16> %37, i32 5
  %46 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %45, i16* %46, align 2
  br label %47

47:                                               ; preds = %44, %12
  %48 = extractelement <8 x i16> %37, i32 4
  %49 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %48, i16* %49, align 2
  br label %50

50:                                               ; preds = %47, %12
  %51 = bitcast i16* %24 to <4 x i16>*
  %52 = shufflevector <8 x i16> %37, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %52, <4 x i16>* %51, align 2
  br label %62

53:                                               ; preds = %12
  %54 = extractelement <8 x i16> %37, i32 2
  %55 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %54, i16* %55, align 2
  br label %56

56:                                               ; preds = %53, %12
  %57 = bitcast i16* %24 to <2 x i16>*
  %58 = shufflevector <8 x i16> %37, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %58, <2 x i16>* %57, align 2
  br label %62

59:                                               ; preds = %12
  %60 = extractelement <8 x i16> %37, i32 0
  store i16 %60, i16* %24, align 2
  br label %62

61:                                               ; preds = %12
  unreachable

62:                                               ; preds = %39, %50, %56, %59
  %63 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %64 = extractvalue { i8*, i8** } %63, 0
  %65 = extractvalue { i8*, i8** } %63, 1
  %66 = bitcast i8* %64 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %66(i64 %0, i8** %65, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10gather_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <8 x float> undef, float %30, i32 0
  %32 = shufflevector <8 x float> %31, <8 x float> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fcmp ogt <8 x float> %17, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %17, <8 x float> zeroinitializer
  %42 = fcmp olt <8 x float> %41, %32
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> %32
  %44 = fcmp ogt <8 x float> %22, zeroinitializer
  %45 = select <8 x i1> %44, <8 x float> %22, <8 x float> zeroinitializer
  %46 = fcmp olt <8 x float> %45, %39
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> %39
  %48 = bitcast i8* %24 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = fptosi <8 x float> %47 to <8 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = mul <8 x i32> %55, %50
  %57 = fptosi <8 x float> %43 to <8 x i32>
  %58 = add <8 x i32> %56, %57
  %59 = extractelement <8 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %49, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <8 x i16> undef, i16 %62, i32 0
  %64 = extractelement <8 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %49, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = insertelement <8 x i16> %63, i16 %67, i32 1
  %69 = extractelement <8 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %49, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = insertelement <8 x i16> %68, i16 %72, i32 2
  %74 = extractelement <8 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %49, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = insertelement <8 x i16> %73, i16 %77, i32 3
  %79 = extractelement <8 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %49, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = insertelement <8 x i16> %78, i16 %82, i32 4
  %84 = extractelement <8 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %49, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = insertelement <8 x i16> %83, i16 %87, i32 5
  %89 = extractelement <8 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %49, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <8 x i16> %88, i16 %92, i32 6
  %94 = extractelement <8 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %49, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = insertelement <8 x i16> %93, i16 %97, i32 7
  %99 = lshr <8 x i16> %98, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %100 = lshr <8 x i16> %98, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %101 = and <8 x i16> %100, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %102 = and <8 x i16> %98, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %103 = shl nuw nsw <8 x i16> %99, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %104 = lshr <8 x i16> %98, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %105 = or <8 x i16> %103, %104
  %106 = shl nuw nsw <8 x i16> %101, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %107 = lshr <8 x i16> %101, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %108 = or <8 x i16> %106, %107
  %109 = shl nuw nsw <8 x i16> %102, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %110 = lshr <8 x i16> %102, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %111 = or <8 x i16> %109, %110
  %112 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %113 = extractvalue { i8*, i8** } %112, 0
  %114 = extractvalue { i8*, i8** } %112, 1
  %115 = bitcast i8* %113 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %115(i64 %0, i8** %114, i64 %2, i64 %3, <8 x i16> %105, <8 x i16> %108, <8 x i16> %111, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9load_4444EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = lshr <8 x i16> %64, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %66 = lshr <8 x i16> %64, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %67 = and <8 x i16> %66, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %68 = lshr <8 x i16> %64, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %69 = and <8 x i16> %68, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %70 = and <8 x i16> %64, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %71 = shl nuw nsw <8 x i16> %65, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %72 = or <8 x i16> %71, %65
  %73 = shl nuw nsw <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = or <8 x i16> %73, %67
  %75 = shl nuw nsw <8 x i16> %69, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %76 = or <8 x i16> %75, %69
  %77 = shl nuw nsw <8 x i16> %70, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %78 = or <8 x i16> %77, %70
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x i16> %72, <8 x i16> %74, <8 x i16> %76, <8 x i16> %78, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13load_4444_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = lshr <8 x i16> %64, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %66 = lshr <8 x i16> %64, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %67 = and <8 x i16> %66, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %68 = lshr <8 x i16> %64, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %69 = and <8 x i16> %68, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %70 = and <8 x i16> %64, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %71 = shl nuw nsw <8 x i16> %65, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %72 = or <8 x i16> %71, %65
  %73 = shl nuw nsw <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = or <8 x i16> %73, %67
  %75 = shl nuw nsw <8 x i16> %69, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %76 = or <8 x i16> %75, %69
  %77 = shl nuw nsw <8 x i16> %70, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %78 = or <8 x i16> %77, %70
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %72, <8 x i16> %74, <8 x i16> %76, <8 x i16> %78) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10store_4444EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = add <8 x i16> %4, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = udiv <8 x i16> %25, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %27 = add <8 x i16> %5, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = udiv <8 x i16> %27, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %29 = add <8 x i16> %6, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = udiv <8 x i16> %29, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %31 = add <8 x i16> %7, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = udiv <8 x i16> %31, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %33 = shl <8 x i16> %26, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %34 = shl <8 x i16> %28, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = or <8 x i16> %34, %33
  %36 = shl nuw <8 x i16> %30, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %37 = or <8 x i16> %35, %36
  %38 = or <8 x i16> %37, %32
  %39 = and i64 %0, 7
  switch i64 %39, label %62 [
    i64 0, label %40
    i64 7, label %42
    i64 6, label %45
    i64 5, label %48
    i64 4, label %51
    i64 3, label %54
    i64 2, label %57
    i64 1, label %60
  ]

40:                                               ; preds = %12
  %41 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %41, align 2
  br label %63

42:                                               ; preds = %12
  %43 = extractelement <8 x i16> %38, i32 6
  %44 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %43, i16* %44, align 2
  br label %45

45:                                               ; preds = %42, %12
  %46 = extractelement <8 x i16> %38, i32 5
  %47 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %46, i16* %47, align 2
  br label %48

48:                                               ; preds = %45, %12
  %49 = extractelement <8 x i16> %38, i32 4
  %50 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %49, i16* %50, align 2
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i16* %24 to <4 x i16>*
  %53 = shufflevector <8 x i16> %38, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %53, <4 x i16>* %52, align 2
  br label %63

54:                                               ; preds = %12
  %55 = extractelement <8 x i16> %38, i32 2
  %56 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %55, i16* %56, align 2
  br label %57

57:                                               ; preds = %54, %12
  %58 = bitcast i16* %24 to <2 x i16>*
  %59 = shufflevector <8 x i16> %38, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %59, <2 x i16>* %58, align 2
  br label %63

60:                                               ; preds = %12
  %61 = extractelement <8 x i16> %38, i32 0
  store i16 %61, i16* %24, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %51, %57, %60
  %64 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %65 = extractvalue { i8*, i8** } %64, 0
  %66 = extractvalue { i8*, i8** } %64, 1
  %67 = bitcast i8* %65 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %67(i64 %0, i8** %66, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11gather_4444EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <8 x float> undef, float %30, i32 0
  %32 = shufflevector <8 x float> %31, <8 x float> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fcmp ogt <8 x float> %17, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %17, <8 x float> zeroinitializer
  %42 = fcmp olt <8 x float> %41, %32
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> %32
  %44 = fcmp ogt <8 x float> %22, zeroinitializer
  %45 = select <8 x i1> %44, <8 x float> %22, <8 x float> zeroinitializer
  %46 = fcmp olt <8 x float> %45, %39
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> %39
  %48 = bitcast i8* %24 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = fptosi <8 x float> %47 to <8 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = mul <8 x i32> %55, %50
  %57 = fptosi <8 x float> %43 to <8 x i32>
  %58 = add <8 x i32> %56, %57
  %59 = extractelement <8 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %49, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <8 x i16> undef, i16 %62, i32 0
  %64 = extractelement <8 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %49, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = insertelement <8 x i16> %63, i16 %67, i32 1
  %69 = extractelement <8 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %49, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = insertelement <8 x i16> %68, i16 %72, i32 2
  %74 = extractelement <8 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %49, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = insertelement <8 x i16> %73, i16 %77, i32 3
  %79 = extractelement <8 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %49, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = insertelement <8 x i16> %78, i16 %82, i32 4
  %84 = extractelement <8 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %49, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = insertelement <8 x i16> %83, i16 %87, i32 5
  %89 = extractelement <8 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %49, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <8 x i16> %88, i16 %92, i32 6
  %94 = extractelement <8 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %49, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = insertelement <8 x i16> %93, i16 %97, i32 7
  %99 = lshr <8 x i16> %98, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %100 = lshr <8 x i16> %98, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %101 = and <8 x i16> %100, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %102 = lshr <8 x i16> %98, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %103 = and <8 x i16> %102, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %104 = and <8 x i16> %98, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %105 = shl nuw nsw <8 x i16> %99, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %106 = or <8 x i16> %105, %99
  %107 = shl nuw nsw <8 x i16> %101, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %108 = or <8 x i16> %107, %101
  %109 = shl nuw nsw <8 x i16> %103, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %110 = or <8 x i16> %109, %103
  %111 = shl nuw nsw <8 x i16> %104, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %112 = or <8 x i16> %111, %104
  %113 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %114 = extractvalue { i8*, i8** } %113, 0
  %115 = extractvalue { i8*, i8** } %113, 1
  %116 = bitcast i8* %114 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %116(i64 %0, i8** %115, i64 %2, i64 %3, <8 x i16> %106, <8 x i16> %108, <8 x i16> %110, <8 x i16> %112, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9load_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 4
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %24, i64 6
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i32> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, i32* %24, i64 5
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <8 x i32> %34, i32 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i32> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i32, i32* %24, i64 4
  %41 = load i32, i32* %40, align 4
  %42 = insertelement <8 x i32> %39, i32 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i32> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i32* %24 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i32> %47, <8 x i32> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i32> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i32* %24 to <2 x i32>*
  %56 = load <2 x i32>, <2 x i32>* %55, align 4
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i32> %57, <8 x i32> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i32, i32* %24, align 4
  %61 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = and <8 x i16> %65, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %67 = lshr <8 x i16> %65, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %68 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = and <8 x i16> %69, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %71 = lshr <8 x i16> %69, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %72 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %73 = extractvalue { i8*, i8** } %72, 0
  %74 = extractvalue { i8*, i8** } %72, 1
  %75 = bitcast i8* %73 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %75(i64 %0, i8** %74, i64 %2, i64 %3, <8 x i16> %66, <8 x i16> %67, <8 x i16> %70, <8 x i16> %71, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13load_8888_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 4
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %24, i64 6
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i32> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, i32* %24, i64 5
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <8 x i32> %34, i32 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i32> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i32, i32* %24, i64 4
  %41 = load i32, i32* %40, align 4
  %42 = insertelement <8 x i32> %39, i32 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i32> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i32* %24 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i32> %47, <8 x i32> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i32> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i32* %24 to <2 x i32>*
  %56 = load <2 x i32>, <2 x i32>* %55, align 4
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i32> %57, <8 x i32> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i32, i32* %24, align 4
  %61 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = and <8 x i16> %65, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %67 = lshr <8 x i16> %65, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %68 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = and <8 x i16> %69, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %71 = lshr <8 x i16> %69, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %72 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %73 = extractvalue { i8*, i8** } %72, 0
  %74 = extractvalue { i8*, i8** } %72, 1
  %75 = bitcast i8* %73 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %75(i64 %0, i8** %74, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %66, <8 x i16> %67, <8 x i16> %70, <8 x i16> %71) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10store_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = shl <8 x i16> %5, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = or <8 x i16> %25, %4
  %27 = zext <8 x i16> %26 to <8 x i32>
  %28 = shl <8 x i16> %7, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = or <8 x i16> %28, %6
  %30 = zext <8 x i16> %29 to <8 x i32>
  %31 = shl nuw <8 x i32> %30, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %32 = or <8 x i32> %31, %27
  %33 = and i64 %0, 7
  switch i64 %33, label %56 [
    i64 0, label %34
    i64 7, label %36
    i64 6, label %39
    i64 5, label %42
    i64 4, label %45
    i64 3, label %48
    i64 2, label %51
    i64 1, label %54
  ]

34:                                               ; preds = %12
  %35 = bitcast i32* %24 to <8 x i32>*
  store <8 x i32> %32, <8 x i32>* %35, align 4
  br label %57

36:                                               ; preds = %12
  %37 = extractelement <8 x i32> %32, i32 6
  %38 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %37, i32* %38, align 4
  br label %39

39:                                               ; preds = %36, %12
  %40 = extractelement <8 x i32> %32, i32 5
  %41 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %40, i32* %41, align 4
  br label %42

42:                                               ; preds = %39, %12
  %43 = extractelement <8 x i32> %32, i32 4
  %44 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %43, i32* %44, align 4
  br label %45

45:                                               ; preds = %42, %12
  %46 = bitcast i32* %24 to <4 x i32>*
  %47 = shufflevector <8 x i32> %32, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %47, <4 x i32>* %46, align 4
  br label %57

48:                                               ; preds = %12
  %49 = extractelement <8 x i32> %32, i32 2
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = shufflevector <8 x i32> %32, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %53, <2 x i32>* %52, align 4
  br label %57

54:                                               ; preds = %12
  %55 = extractelement <8 x i32> %32, i32 0
  store i32 %55, i32* %24, align 4
  br label %57

56:                                               ; preds = %12
  unreachable

57:                                               ; preds = %34, %45, %51, %54
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11gather_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <8 x float> undef, float %30, i32 0
  %32 = shufflevector <8 x float> %31, <8 x float> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fcmp ogt <8 x float> %17, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %17, <8 x float> zeroinitializer
  %42 = fcmp olt <8 x float> %41, %32
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> %32
  %44 = fcmp ogt <8 x float> %22, zeroinitializer
  %45 = select <8 x i1> %44, <8 x float> %22, <8 x float> zeroinitializer
  %46 = fcmp olt <8 x float> %45, %39
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> %39
  %48 = bitcast i8* %24 to i32**
  %49 = load i32*, i32** %48, align 8
  %50 = fptosi <8 x float> %47 to <8 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = mul <8 x i32> %55, %50
  %57 = fptosi <8 x float> %43 to <8 x i32>
  %58 = add <8 x i32> %56, %57
  %59 = extractelement <8 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %49, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = insertelement <8 x i32> undef, i32 %62, i32 0
  %64 = extractelement <8 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %49, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = insertelement <8 x i32> %63, i32 %67, i32 1
  %69 = extractelement <8 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i32, i32* %49, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = insertelement <8 x i32> %68, i32 %72, i32 2
  %74 = extractelement <8 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %49, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = insertelement <8 x i32> %73, i32 %77, i32 3
  %79 = extractelement <8 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i32, i32* %49, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = insertelement <8 x i32> %78, i32 %82, i32 4
  %84 = extractelement <8 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %49, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = insertelement <8 x i32> %83, i32 %87, i32 5
  %89 = extractelement <8 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %49, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = insertelement <8 x i32> %88, i32 %92, i32 6
  %94 = extractelement <8 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i32, i32* %49, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = insertelement <8 x i32> %93, i32 %97, i32 7
  %99 = trunc <8 x i32> %98 to <8 x i16>
  %100 = and <8 x i16> %99, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %101 = lshr <8 x i16> %99, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %102 = lshr <8 x i32> %98, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = and <8 x i16> %103, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %105 = lshr <8 x i16> %103, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %106 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %107 = extractvalue { i8*, i8** } %106, 0
  %108 = extractvalue { i8*, i8** } %106, 1
  %109 = bitcast i8* %107 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %109(i64 %0, i8** %108, i64 %2, i64 %3, <8 x i16> %100, <8 x i16> %101, <8 x i16> %104, <8 x i16> %105, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9load_rg88EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = and <8 x i16> %64, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %66 = lshr <8 x i16> %64, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %67 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %68 = extractvalue { i8*, i8** } %67, 0
  %69 = extractvalue { i8*, i8** } %67, 1
  %70 = bitcast i8* %68 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %70(i64 %0, i8** %69, i64 %2, i64 %3, <8 x i16> %65, <8 x i16> %66, <8 x i16> zeroinitializer, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13load_rg88_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = and <8 x i16> %64, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %66 = lshr <8 x i16> %64, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %67 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %68 = extractvalue { i8*, i8** } %67, 0
  %69 = extractvalue { i8*, i8** } %67, 1
  %70 = bitcast i8* %68 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %70(i64 %0, i8** %69, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %65, <8 x i16> %66, <8 x i16> zeroinitializer, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10store_rg88EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = shl <8 x i16> %5, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = or <8 x i16> %25, %4
  %27 = and i64 %0, 7
  switch i64 %27, label %50 [
    i64 0, label %28
    i64 7, label %30
    i64 6, label %33
    i64 5, label %36
    i64 4, label %39
    i64 3, label %42
    i64 2, label %45
    i64 1, label %48
  ]

28:                                               ; preds = %12
  %29 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %26, <8 x i16>* %29, align 2
  br label %51

30:                                               ; preds = %12
  %31 = extractelement <8 x i16> %26, i32 6
  %32 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %31, i16* %32, align 2
  br label %33

33:                                               ; preds = %30, %12
  %34 = extractelement <8 x i16> %26, i32 5
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %34, i16* %35, align 2
  br label %36

36:                                               ; preds = %33, %12
  %37 = extractelement <8 x i16> %26, i32 4
  %38 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %37, i16* %38, align 2
  br label %39

39:                                               ; preds = %36, %12
  %40 = bitcast i16* %24 to <4 x i16>*
  %41 = shufflevector <8 x i16> %26, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %41, <4 x i16>* %40, align 2
  br label %51

42:                                               ; preds = %12
  %43 = extractelement <8 x i16> %26, i32 2
  %44 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %43, i16* %44, align 2
  br label %45

45:                                               ; preds = %42, %12
  %46 = bitcast i16* %24 to <2 x i16>*
  %47 = shufflevector <8 x i16> %26, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %47, <2 x i16>* %46, align 2
  br label %51

48:                                               ; preds = %12
  %49 = extractelement <8 x i16> %26, i32 0
  store i16 %49, i16* %24, align 2
  br label %51

50:                                               ; preds = %12
  unreachable

51:                                               ; preds = %28, %39, %45, %48
  %52 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %53 = extractvalue { i8*, i8** } %52, 0
  %54 = extractvalue { i8*, i8** } %52, 1
  %55 = bitcast i8* %53 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %55(i64 %0, i8** %54, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11gather_rg88EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <8 x float> undef, float %30, i32 0
  %32 = shufflevector <8 x float> %31, <8 x float> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fcmp ogt <8 x float> %17, zeroinitializer
  %41 = select <8 x i1> %40, <8 x float> %17, <8 x float> zeroinitializer
  %42 = fcmp olt <8 x float> %41, %32
  %43 = select <8 x i1> %42, <8 x float> %41, <8 x float> %32
  %44 = fcmp ogt <8 x float> %22, zeroinitializer
  %45 = select <8 x i1> %44, <8 x float> %22, <8 x float> zeroinitializer
  %46 = fcmp olt <8 x float> %45, %39
  %47 = select <8 x i1> %46, <8 x float> %45, <8 x float> %39
  %48 = bitcast i8* %24 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = fptosi <8 x float> %47 to <8 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <8 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <8 x i32> %54, <8 x i32> undef, <8 x i32> zeroinitializer
  %56 = mul <8 x i32> %55, %50
  %57 = fptosi <8 x float> %43 to <8 x i32>
  %58 = add <8 x i32> %56, %57
  %59 = extractelement <8 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %49, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <8 x i16> undef, i16 %62, i32 0
  %64 = extractelement <8 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %49, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = insertelement <8 x i16> %63, i16 %67, i32 1
  %69 = extractelement <8 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %49, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = insertelement <8 x i16> %68, i16 %72, i32 2
  %74 = extractelement <8 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %49, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = insertelement <8 x i16> %73, i16 %77, i32 3
  %79 = extractelement <8 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %49, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = insertelement <8 x i16> %78, i16 %82, i32 4
  %84 = extractelement <8 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %49, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = insertelement <8 x i16> %83, i16 %87, i32 5
  %89 = extractelement <8 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %49, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <8 x i16> %88, i16 %92, i32 6
  %94 = extractelement <8 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %49, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = insertelement <8 x i16> %93, i16 %97, i32 7
  %99 = and <8 x i16> %98, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %100 = lshr <8 x i16> %98, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %101 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %102 = extractvalue { i8*, i8** } %101, 0
  %103 = extractvalue { i8*, i8** } %101, 1
  %104 = bitcast i8* %102 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %104(i64 %0, i8** %103, i64 %2, i64 %3, <8 x i16> %99, <8 x i16> %100, <8 x i16> zeroinitializer, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13alpha_to_grayEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %7, <8 x i16> %7, <8 x i16> %7, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL17alpha_to_gray_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %11, <8 x i16> %11, <8 x i16> %11, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL32bt709_luminance_or_luma_to_alphaEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %4, <i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54>
  %14 = mul <8 x i16> %5, <i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183>
  %15 = add <8 x i16> %14, %13
  %16 = mul <8 x i16> %6, <i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19>
  %17 = add <8 x i16> %15, %16
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> %18, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL30bt709_luminance_or_luma_to_rgbEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %4, <i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54>
  %14 = mul <8 x i16> %5, <i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183>
  %15 = add <8 x i16> %14, %13
  %16 = mul <8 x i16> %6, <i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19>
  %17 = add <8 x i16> %15, %16
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <8 x i16> %18, <8 x i16> %18, <8 x i16> %18, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8load_srcEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 2
  %18 = getelementptr inbounds i8, i8* %14, i64 16
  %19 = bitcast i8* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 32
  %22 = bitcast i8* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = getelementptr inbounds i8, i8* %14, i64 48
  %25 = bitcast i8* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x i16> %17, <8 x i16> %20, <8 x i16> %23, <8 x i16> %26, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9store_srcEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> %4, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i8, i8* %14, i64 16
  %18 = bitcast i8* %17 to <8 x i16>*
  store <8 x i16> %5, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i8, i8* %14, i64 32
  %20 = bitcast i8* %19 to <8 x i16>*
  store <8 x i16> %6, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 48
  %22 = bitcast i8* %21 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %22, align 2
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11store_src_aEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> %7, <8 x i16>* %16, align 2
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8load_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 2
  %18 = getelementptr inbounds i8, i8* %14, i64 16
  %19 = bitcast i8* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 32
  %22 = bitcast i8* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 2
  %24 = getelementptr inbounds i8, i8* %14, i64 48
  %25 = bitcast i8* %24 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 2
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %17, <8 x i16> %20, <8 x i16> %23, <8 x i16> %26) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9store_dstEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  store <8 x i16> %8, <8 x i16>* %16, align 2
  %17 = getelementptr inbounds i8, i8* %14, i64 16
  %18 = bitcast i8* %17 to <8 x i16>*
  store <8 x i16> %9, <8 x i16>* %18, align 2
  %19 = getelementptr inbounds i8, i8* %14, i64 32
  %20 = bitcast i8* %19 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %20, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 48
  %22 = bitcast i8* %21 to <8 x i16>*
  store <8 x i16> %11, <8 x i16>* %22, align 2
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8scale_u8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 6
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <8 x i8> %34, i8 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <8 x i8> %39, i8 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = shufflevector <4 x i8> %46, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i8> %47, <8 x i8> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i8* %24 to <2 x i8>*
  %56 = load <2 x i8>, <2 x i8>* %55, align 1
  %57 = shufflevector <2 x i8> %56, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i8> %57, <8 x i8> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i8, i8* %24, align 1
  %61 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = zext <8 x i8> %64 to <8 x i16>
  %66 = mul <8 x i16> %65, %4
  %67 = add <8 x i16> %66, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %68 = lshr <8 x i16> %67, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %69 = mul <8 x i16> %65, %5
  %70 = add <8 x i16> %69, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %71 = lshr <8 x i16> %70, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %72 = mul <8 x i16> %65, %6
  %73 = add <8 x i16> %72, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %74 = lshr <8 x i16> %73, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %75 = mul <8 x i16> %65, %7
  %76 = add <8 x i16> %75, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %77 = lshr <8 x i16> %76, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %78 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %79 = extractvalue { i8*, i8** } %78, 0
  %80 = extractvalue { i8*, i8** } %78, 1
  %81 = bitcast i8* %79 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %81(i64 %0, i8** %80, i64 %2, i64 %3, <8 x i16> %68, <8 x i16> %71, <8 x i16> %74, <8 x i16> %77, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9scale_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = lshr <8 x i16> %64, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %66 = lshr <8 x i16> %64, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %67 = and <8 x i16> %66, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %68 = and <8 x i16> %64, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %69 = shl nuw nsw <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %70 = lshr <8 x i16> %64, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %71 = or <8 x i16> %69, %70
  %72 = shl nuw nsw <8 x i16> %67, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %73 = lshr <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = or <8 x i16> %72, %73
  %75 = shl nuw nsw <8 x i16> %68, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %76 = lshr <8 x i16> %68, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %77 = or <8 x i16> %75, %76
  %78 = icmp ult <8 x i16> %7, %11
  %79 = icmp ult <8 x i16> %74, %77
  %80 = select <8 x i1> %79, <8 x i16> %74, <8 x i16> %77
  %81 = icmp ugt <8 x i16> %80, %71
  %82 = select <8 x i1> %81, <8 x i16> %71, <8 x i16> %80
  %83 = select <8 x i1> %79, <8 x i16> %77, <8 x i16> %74
  %84 = icmp ugt <8 x i16> %83, %71
  %85 = select <8 x i1> %84, <8 x i16> %83, <8 x i16> %71
  %86 = select <8 x i1> %78, <8 x i16> %82, <8 x i16> %85
  %87 = mul <8 x i16> %71, %4
  %88 = add <8 x i16> %87, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %89 = lshr <8 x i16> %88, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %90 = mul <8 x i16> %74, %5
  %91 = add <8 x i16> %90, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %92 = lshr <8 x i16> %91, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %93 = mul <8 x i16> %77, %6
  %94 = add <8 x i16> %93, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %95 = lshr <8 x i16> %94, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %96 = mul <8 x i16> %86, %7
  %97 = add <8 x i16> %96, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %98 = lshr <8 x i16> %97, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %99 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %100 = extractvalue { i8*, i8** } %99, 0
  %101 = extractvalue { i8*, i8** } %99, 1
  %102 = bitcast i8* %100 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %102(i64 %0, i8** %101, i64 %2, i64 %3, <8 x i16> %89, <8 x i16> %92, <8 x i16> %95, <8 x i16> %98, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13scale_1_floatEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fadd float %18, 5.000000e-01
  %20 = fptoui float %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = mul <8 x i16> %22, %4
  %24 = add <8 x i16> %23, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = lshr <8 x i16> %24, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = mul <8 x i16> %22, %5
  %27 = add <8 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <8 x i16> %22, %6
  %30 = add <8 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = mul <8 x i16> %22, %7
  %33 = add <8 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %34 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x i16> %25, <8 x i16> %28, <8 x i16> %31, <8 x i16> %34, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12scale_nativeEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 2
  %18 = mul <8 x i16> %17, %4
  %19 = add <8 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %20 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = mul <8 x i16> %17, %5
  %22 = add <8 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %23 = lshr <8 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <8 x i16> %17, %6
  %25 = add <8 x i16> %24, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = lshr <8 x i16> %25, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %27 = mul <8 x i16> %17, %7
  %28 = add <8 x i16> %27, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %29 = lshr <8 x i16> %28, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x i16> %20, <8 x i16> %23, <8 x i16> %26, <8 x i16> %29, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7lerp_u8EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 6
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <8 x i8> %34, i8 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 4
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <8 x i8> %39, i8 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = shufflevector <4 x i8> %46, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i8> %47, <8 x i8> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 2
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i8* %24 to <2 x i8>*
  %56 = load <2 x i8>, <2 x i8>* %55, align 1
  %57 = shufflevector <2 x i8> %56, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i8> %57, <8 x i8> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i8, i8* %24, align 1
  %61 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = zext <8 x i8> %64 to <8 x i16>
  %66 = xor <8 x i16> %65, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %67 = mul <8 x i16> %66, %8
  %68 = mul <8 x i16> %65, %4
  %69 = add <8 x i16> %68, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %70 = add <8 x i16> %69, %67
  %71 = lshr <8 x i16> %70, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %72 = mul <8 x i16> %66, %9
  %73 = mul <8 x i16> %65, %5
  %74 = add <8 x i16> %73, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %75 = add <8 x i16> %74, %72
  %76 = lshr <8 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %77 = mul <8 x i16> %66, %10
  %78 = mul <8 x i16> %65, %6
  %79 = add <8 x i16> %78, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %80 = add <8 x i16> %79, %77
  %81 = lshr <8 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %82 = mul <8 x i16> %66, %11
  %83 = mul <8 x i16> %65, %7
  %84 = add <8 x i16> %83, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %85 = add <8 x i16> %84, %82
  %86 = lshr <8 x i16> %85, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %88 = extractvalue { i8*, i8** } %87, 0
  %89 = extractvalue { i8*, i8** } %87, 1
  %90 = bitcast i8* %88 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %90(i64 %0, i8** %89, i64 %2, i64 %3, <8 x i16> %71, <8 x i16> %76, <8 x i16> %81, <8 x i16> %86, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8lerp_565EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 2
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 6
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 5
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <8 x i16> %34, i16 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 4
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <8 x i16> %39, i16 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <4 x i16>*
  %46 = load <4 x i16>, <4 x i16>* %45, align 2
  %47 = shufflevector <4 x i16> %46, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i16> %47, <8 x i16> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 2
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = load <2 x i16>, <2 x i16>* %55, align 2
  %57 = shufflevector <2 x i16> %56, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i16> %57, <8 x i16> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i16, i16* %24, align 2
  %61 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %26, %43, %53, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = lshr <8 x i16> %64, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %66 = lshr <8 x i16> %64, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %67 = and <8 x i16> %66, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %68 = and <8 x i16> %64, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %69 = shl nuw nsw <8 x i16> %65, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %70 = lshr <8 x i16> %64, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %71 = or <8 x i16> %69, %70
  %72 = shl nuw nsw <8 x i16> %67, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %73 = lshr <8 x i16> %67, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %74 = or <8 x i16> %72, %73
  %75 = shl nuw nsw <8 x i16> %68, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %76 = lshr <8 x i16> %68, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %77 = or <8 x i16> %75, %76
  %78 = icmp ult <8 x i16> %7, %11
  %79 = icmp ult <8 x i16> %74, %77
  %80 = select <8 x i1> %79, <8 x i16> %74, <8 x i16> %77
  %81 = icmp ugt <8 x i16> %80, %71
  %82 = select <8 x i1> %81, <8 x i16> %71, <8 x i16> %80
  %83 = select <8 x i1> %79, <8 x i16> %77, <8 x i16> %74
  %84 = icmp ugt <8 x i16> %83, %71
  %85 = select <8 x i1> %84, <8 x i16> %83, <8 x i16> %71
  %86 = select <8 x i1> %78, <8 x i16> %82, <8 x i16> %85
  %87 = xor <8 x i16> %71, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %88 = mul <8 x i16> %87, %8
  %89 = mul <8 x i16> %71, %4
  %90 = add <8 x i16> %89, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %91 = add <8 x i16> %90, %88
  %92 = lshr <8 x i16> %91, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %93 = xor <8 x i16> %74, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %94 = mul <8 x i16> %93, %9
  %95 = mul <8 x i16> %74, %5
  %96 = add <8 x i16> %95, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %97 = add <8 x i16> %96, %94
  %98 = lshr <8 x i16> %97, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %99 = xor <8 x i16> %77, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %100 = mul <8 x i16> %99, %10
  %101 = mul <8 x i16> %77, %6
  %102 = add <8 x i16> %101, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %103 = add <8 x i16> %102, %100
  %104 = lshr <8 x i16> %103, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %105 = xor <8 x i16> %86, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %106 = mul <8 x i16> %105, %11
  %107 = mul <8 x i16> %86, %7
  %108 = add <8 x i16> %107, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %109 = add <8 x i16> %108, %106
  %110 = lshr <8 x i16> %109, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %111 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %112 = extractvalue { i8*, i8** } %111, 0
  %113 = extractvalue { i8*, i8** } %111, 1
  %114 = bitcast i8* %112 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %114(i64 %0, i8** %113, i64 %2, i64 %3, <8 x i16> %92, <8 x i16> %98, <8 x i16> %104, <8 x i16> %110, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12lerp_1_floatEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fadd float %18, 5.000000e-01
  %20 = fptoui float %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %22
  %24 = mul <8 x i16> %23, %8
  %25 = mul <8 x i16> %22, %4
  %26 = add <8 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <8 x i16> %26, %24
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <8 x i16> %23, %9
  %30 = mul <8 x i16> %22, %5
  %31 = add <8 x i16> %30, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %32 = add <8 x i16> %31, %29
  %33 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = mul <8 x i16> %23, %10
  %35 = mul <8 x i16> %22, %6
  %36 = add <8 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = add <8 x i16> %36, %34
  %38 = lshr <8 x i16> %37, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %39 = mul <8 x i16> %23, %11
  %40 = mul <8 x i16> %22, %7
  %41 = add <8 x i16> %40, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %42 = add <8 x i16> %41, %39
  %43 = lshr <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %44 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %45 = extractvalue { i8*, i8** } %44, 0
  %46 = extractvalue { i8*, i8** } %44, 1
  %47 = bitcast i8* %45 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %47(i64 %0, i8** %46, i64 %2, i64 %3, <8 x i16> %28, <8 x i16> %33, <8 x i16> %38, <8 x i16> %43, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL11lerp_nativeEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 2
  %18 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %17
  %19 = mul <8 x i16> %18, %8
  %20 = mul <8 x i16> %17, %4
  %21 = add <8 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <8 x i16> %21, %19
  %23 = lshr <8 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <8 x i16> %18, %9
  %25 = mul <8 x i16> %17, %5
  %26 = add <8 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <8 x i16> %26, %24
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <8 x i16> %18, %10
  %30 = mul <8 x i16> %17, %6
  %31 = add <8 x i16> %30, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %32 = add <8 x i16> %31, %29
  %33 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = mul <8 x i16> %18, %11
  %35 = mul <8 x i16> %17, %7
  %36 = add <8 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = add <8 x i16> %36, %34
  %38 = lshr <8 x i16> %37, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <8 x i16> %23, <8 x i16> %28, <8 x i16> %33, <8 x i16> %38, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7dstatopEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %8, %7
  %14 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %15 = mul <8 x i16> %14, %4
  %16 = add <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %17 = add <8 x i16> %16, %15
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %9, %7
  %20 = mul <8 x i16> %14, %5
  %21 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <8 x i16> %21, %20
  %23 = lshr <8 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <8 x i16> %10, %7
  %25 = mul <8 x i16> %14, %6
  %26 = add <8 x i16> %24, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <8 x i16> %26, %25
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <8 x i16> %7, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %30 = add <8 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <8 x i16> %18, <8 x i16> %23, <8 x i16> %28, <8 x i16> %31, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL5dstinEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %8, %7
  %14 = add <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <8 x i16> %9, %7
  %17 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %10, %7
  %20 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = mul <8 x i16> %11, %7
  %23 = add <8 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <8 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x i16> %15, <8 x i16> %18, <8 x i16> %21, <8 x i16> %24, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL6dstoutEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %14 = mul <8 x i16> %13, %8
  %15 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = mul <8 x i16> %13, %9
  %18 = add <8 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = mul <8 x i16> %13, %10
  %21 = add <8 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = mul <8 x i16> %13, %11
  %24 = add <8 x i16> %23, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = lshr <8 x i16> %24, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x i16> %16, <8 x i16> %19, <8 x i16> %22, <8 x i16> %25, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7dstoverEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <8 x i16> %13, %4
  %15 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = add <8 x i16> %16, %8
  %18 = mul <8 x i16> %13, %5
  %19 = add <8 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %20 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = add <8 x i16> %20, %9
  %22 = mul <8 x i16> %13, %6
  %23 = add <8 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <8 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = add <8 x i16> %24, %10
  %26 = mul <8 x i16> %13, %7
  %27 = add <8 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = add <8 x i16> %28, %11
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x i16> %17, <8 x i16> %21, <8 x i16> %25, <8 x i16> %29, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7srcatopEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %11, %4
  %14 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %15 = mul <8 x i16> %14, %8
  %16 = add <8 x i16> %15, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %17 = add <8 x i16> %16, %13
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %11, %5
  %20 = mul <8 x i16> %14, %9
  %21 = add <8 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <8 x i16> %21, %19
  %23 = lshr <8 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <8 x i16> %11, %6
  %25 = mul <8 x i16> %14, %10
  %26 = add <8 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <8 x i16> %26, %24
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <8 x i16> %11, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %30 = add <8 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <8 x i16> %18, <8 x i16> %23, <8 x i16> %28, <8 x i16> %31, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL5srcinEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %11, %4
  %14 = add <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <8 x i16> %11, %5
  %17 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %11, %6
  %20 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = mul <8 x i16> %11, %7
  %23 = add <8 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <8 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x i16> %15, <8 x i16> %18, <8 x i16> %21, <8 x i16> %24, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL6srcoutEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <8 x i16> %13, %4
  %15 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = mul <8 x i16> %13, %5
  %18 = add <8 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = mul <8 x i16> %13, %6
  %21 = add <8 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = mul <8 x i16> %13, %7
  %24 = add <8 x i16> %23, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = lshr <8 x i16> %24, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x i16> %16, <8 x i16> %19, <8 x i16> %22, <8 x i16> %25, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7srcoverEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %14 = mul <8 x i16> %13, %8
  %15 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = add <8 x i16> %16, %4
  %18 = mul <8 x i16> %13, %9
  %19 = add <8 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %20 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = add <8 x i16> %20, %5
  %22 = mul <8 x i16> %13, %10
  %23 = add <8 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <8 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = add <8 x i16> %24, %6
  %26 = mul <8 x i16> %13, %11
  %27 = add <8 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = add <8 x i16> %28, %7
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x i16> %17, <8 x i16> %21, <8 x i16> %25, <8 x i16> %29, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL5clearEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8modulateEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = mul <8 x i16> %8, %4
  %14 = add <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <8 x i16> %9, %5
  %17 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <8 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <8 x i16> %10, %6
  %20 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = mul <8 x i16> %11, %7
  %23 = add <8 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <8 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x i16> %15, <8 x i16> %18, <8 x i16> %21, <8 x i16> %24, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8multiplyEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %14 = mul <8 x i16> %13, %8
  %15 = add <8 x i16> %8, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = sub <8 x i16> %15, %11
  %17 = mul <8 x i16> %16, %4
  %18 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = add <8 x i16> %18, %17
  %20 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = mul <8 x i16> %13, %9
  %22 = add <8 x i16> %9, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %23 = sub <8 x i16> %22, %11
  %24 = mul <8 x i16> %23, %5
  %25 = add <8 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = add <8 x i16> %25, %24
  %27 = lshr <8 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = mul <8 x i16> %13, %10
  %29 = add <8 x i16> %10, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %30 = sub <8 x i16> %29, %11
  %31 = mul <8 x i16> %30, %6
  %32 = add <8 x i16> %28, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %33 = add <8 x i16> %32, %31
  %34 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = mul <8 x i16> %13, %11
  %36 = mul <8 x i16> %7, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = add <8 x i16> %36, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %38 = add <8 x i16> %37, %35
  %39 = lshr <8 x i16> %38, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %41 = extractvalue { i8*, i8** } %40, 0
  %42 = extractvalue { i8*, i8** } %40, 1
  %43 = bitcast i8* %41 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %43(i64 %0, i8** %42, i64 %2, i64 %3, <8 x i16> %20, <8 x i16> %27, <8 x i16> %34, <8 x i16> %39, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL5plus_EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = add <8 x i16> %8, %4
  %14 = icmp ult <8 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = select <8 x i1> %14, <8 x i16> %13, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = add <8 x i16> %9, %5
  %17 = icmp ult <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = select <8 x i1> %17, <8 x i16> %16, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = add <8 x i16> %10, %6
  %20 = icmp ult <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = select <8 x i1> %20, <8 x i16> %19, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <8 x i16> %11, %7
  %23 = icmp ult <8 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = select <8 x i1> %23, <8 x i16> %22, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x i16> %15, <8 x i16> %18, <8 x i16> %21, <8 x i16> %24, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL6screenEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = add <8 x i16> %8, %4
  %14 = mul <8 x i16> %8, %4
  %15 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = sub <8 x i16> %13, %16
  %18 = add <8 x i16> %9, %5
  %19 = mul <8 x i16> %9, %5
  %20 = add <8 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = sub <8 x i16> %18, %21
  %23 = add <8 x i16> %10, %6
  %24 = mul <8 x i16> %10, %6
  %25 = add <8 x i16> %24, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = lshr <8 x i16> %25, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %27 = sub <8 x i16> %23, %26
  %28 = add <8 x i16> %11, %7
  %29 = mul <8 x i16> %11, %7
  %30 = add <8 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = sub <8 x i16> %28, %31
  %33 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %34 = extractvalue { i8*, i8** } %33, 0
  %35 = extractvalue { i8*, i8** } %33, 1
  %36 = bitcast i8* %34 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %36(i64 %0, i8** %35, i64 %2, i64 %3, <8 x i16> %17, <8 x i16> %22, <8 x i16> %27, <8 x i16> %32, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL4xor_EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <8 x i16> %13, %4
  %15 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %16 = mul <8 x i16> %15, %8
  %17 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = add <8 x i16> %17, %14
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = mul <8 x i16> %13, %5
  %21 = mul <8 x i16> %15, %9
  %22 = add <8 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %23 = add <8 x i16> %22, %20
  %24 = lshr <8 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = mul <8 x i16> %13, %6
  %26 = mul <8 x i16> %15, %10
  %27 = add <8 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = add <8 x i16> %27, %25
  %29 = lshr <8 x i16> %28, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = mul <8 x i16> %13, %7
  %31 = mul <8 x i16> %15, %11
  %32 = add <8 x i16> %31, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %33 = add <8 x i16> %32, %30
  %34 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x i16> %19, <8 x i16> %24, <8 x i16> %29, <8 x i16> %34, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL6darkenEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = add <8 x i16> %8, %4
  %14 = mul <8 x i16> %11, %4
  %15 = mul <8 x i16> %8, %7
  %16 = icmp ult <8 x i16> %14, %15
  %17 = select <8 x i1> %16, <8 x i16> %15, <8 x i16> %14
  %18 = add <8 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = sub <8 x i16> %13, %19
  %21 = add <8 x i16> %9, %5
  %22 = mul <8 x i16> %11, %5
  %23 = mul <8 x i16> %9, %7
  %24 = icmp ult <8 x i16> %22, %23
  %25 = select <8 x i1> %24, <8 x i16> %23, <8 x i16> %22
  %26 = add <8 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = lshr <8 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = sub <8 x i16> %21, %27
  %29 = add <8 x i16> %10, %6
  %30 = mul <8 x i16> %11, %6
  %31 = mul <8 x i16> %10, %7
  %32 = icmp ult <8 x i16> %30, %31
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> %30
  %34 = add <8 x i16> %33, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %35 = lshr <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = sub <8 x i16> %29, %35
  %37 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %38 = mul <8 x i16> %37, %11
  %39 = add <8 x i16> %38, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %40 = lshr <8 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = add <8 x i16> %40, %7
  %42 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %43 = extractvalue { i8*, i8** } %42, 0
  %44 = extractvalue { i8*, i8** } %42, 1
  %45 = bitcast i8* %43 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %45(i64 %0, i8** %44, i64 %2, i64 %3, <8 x i16> %20, <8 x i16> %28, <8 x i16> %36, <8 x i16> %41, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10differenceEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = add <8 x i16> %8, %4
  %14 = mul <8 x i16> %11, %4
  %15 = mul <8 x i16> %8, %7
  %16 = icmp ult <8 x i16> %14, %15
  %17 = select <8 x i1> %16, <8 x i16> %14, <8 x i16> %15
  %18 = add <8 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = shl nuw nsw <8 x i16> %19, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %21 = sub <8 x i16> %13, %20
  %22 = add <8 x i16> %9, %5
  %23 = mul <8 x i16> %11, %5
  %24 = mul <8 x i16> %9, %7
  %25 = icmp ult <8 x i16> %23, %24
  %26 = select <8 x i1> %25, <8 x i16> %23, <8 x i16> %24
  %27 = add <8 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = shl nuw nsw <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = sub <8 x i16> %22, %29
  %31 = add <8 x i16> %10, %6
  %32 = mul <8 x i16> %11, %6
  %33 = mul <8 x i16> %10, %7
  %34 = icmp ult <8 x i16> %32, %33
  %35 = select <8 x i1> %34, <8 x i16> %32, <8 x i16> %33
  %36 = add <8 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = lshr <8 x i16> %36, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %38 = shl nuw nsw <8 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = sub <8 x i16> %31, %38
  %40 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %41 = mul <8 x i16> %40, %11
  %42 = add <8 x i16> %41, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %43 = lshr <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %44 = add <8 x i16> %43, %7
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <8 x i16> %21, <8 x i16> %30, <8 x i16> %39, <8 x i16> %44, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9exclusionEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = add <8 x i16> %8, %4
  %14 = mul <8 x i16> %8, %4
  %15 = add <8 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <8 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = shl nuw nsw <8 x i16> %16, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = sub <8 x i16> %13, %17
  %19 = add <8 x i16> %9, %5
  %20 = mul <8 x i16> %9, %5
  %21 = add <8 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = lshr <8 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = shl nuw nsw <8 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = sub <8 x i16> %19, %23
  %25 = add <8 x i16> %10, %6
  %26 = mul <8 x i16> %10, %6
  %27 = add <8 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = shl nuw nsw <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = sub <8 x i16> %25, %29
  %31 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %32 = mul <8 x i16> %31, %11
  %33 = add <8 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %34 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = add <8 x i16> %34, %7
  %36 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %37 = extractvalue { i8*, i8** } %36, 0
  %38 = extractvalue { i8*, i8** } %36, 1
  %39 = bitcast i8* %37 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %39(i64 %0, i8** %38, i64 %2, i64 %3, <8 x i16> %18, <8 x i16> %24, <8 x i16> %30, <8 x i16> %35, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9hardlightEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <8 x i16> %13, %4
  %15 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %16 = mul <8 x i16> %15, %8
  %17 = shl <8 x i16> %4, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = icmp ugt <8 x i16> %17, %7
  %19 = mul <8 x i16> %17, %8
  %20 = mul <8 x i16> %11, %7
  %21 = sub <8 x i16> %7, %4
  %22 = shl <8 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %23 = sub <8 x i16> %11, %8
  %24 = mul <8 x i16> %23, %22
  %25 = sub <8 x i16> %20, %24
  %26 = select <8 x i1> %18, <8 x i16> %25, <8 x i16> %19
  %27 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = add <8 x i16> %27, %14
  %29 = add <8 x i16> %28, %26
  %30 = lshr <8 x i16> %29, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %31 = mul <8 x i16> %13, %5
  %32 = mul <8 x i16> %15, %9
  %33 = shl <8 x i16> %5, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %34 = icmp ugt <8 x i16> %33, %7
  %35 = mul <8 x i16> %33, %9
  %36 = sub <8 x i16> %7, %5
  %37 = shl <8 x i16> %36, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %38 = sub <8 x i16> %11, %9
  %39 = mul <8 x i16> %38, %37
  %40 = sub <8 x i16> %20, %39
  %41 = select <8 x i1> %34, <8 x i16> %40, <8 x i16> %35
  %42 = add <8 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %43 = add <8 x i16> %42, %31
  %44 = add <8 x i16> %43, %41
  %45 = lshr <8 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = mul <8 x i16> %13, %6
  %47 = mul <8 x i16> %15, %10
  %48 = shl <8 x i16> %6, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %49 = icmp ugt <8 x i16> %48, %7
  %50 = mul <8 x i16> %48, %10
  %51 = sub <8 x i16> %7, %6
  %52 = shl <8 x i16> %51, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %53 = sub <8 x i16> %11, %10
  %54 = mul <8 x i16> %53, %52
  %55 = sub <8 x i16> %20, %54
  %56 = select <8 x i1> %49, <8 x i16> %55, <8 x i16> %50
  %57 = add <8 x i16> %47, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %58 = add <8 x i16> %57, %46
  %59 = add <8 x i16> %58, %56
  %60 = lshr <8 x i16> %59, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %61 = mul <8 x i16> %15, %11
  %62 = add <8 x i16> %61, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %63 = lshr <8 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = add <8 x i16> %63, %7
  %65 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %66 = extractvalue { i8*, i8** } %65, 0
  %67 = extractvalue { i8*, i8** } %65, 1
  %68 = bitcast i8* %66 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %68(i64 %0, i8** %67, i64 %2, i64 %3, <8 x i16> %30, <8 x i16> %45, <8 x i16> %60, <8 x i16> %64, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7lightenEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = add <8 x i16> %8, %4
  %14 = mul <8 x i16> %11, %4
  %15 = mul <8 x i16> %8, %7
  %16 = icmp ult <8 x i16> %14, %15
  %17 = select <8 x i1> %16, <8 x i16> %14, <8 x i16> %15
  %18 = add <8 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = sub <8 x i16> %13, %19
  %21 = add <8 x i16> %9, %5
  %22 = mul <8 x i16> %11, %5
  %23 = mul <8 x i16> %9, %7
  %24 = icmp ult <8 x i16> %22, %23
  %25 = select <8 x i1> %24, <8 x i16> %22, <8 x i16> %23
  %26 = add <8 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = lshr <8 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = sub <8 x i16> %21, %27
  %29 = add <8 x i16> %10, %6
  %30 = mul <8 x i16> %11, %6
  %31 = mul <8 x i16> %10, %7
  %32 = icmp ult <8 x i16> %30, %31
  %33 = select <8 x i1> %32, <8 x i16> %30, <8 x i16> %31
  %34 = add <8 x i16> %33, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %35 = lshr <8 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = sub <8 x i16> %29, %35
  %37 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %38 = mul <8 x i16> %37, %11
  %39 = add <8 x i16> %38, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %40 = lshr <8 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = add <8 x i16> %40, %7
  %42 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %43 = extractvalue { i8*, i8** } %42, 0
  %44 = extractvalue { i8*, i8** } %42, 1
  %45 = bitcast i8* %43 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %45(i64 %0, i8** %44, i64 %2, i64 %3, <8 x i16> %20, <8 x i16> %28, <8 x i16> %36, <8 x i16> %41, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7overlayEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <8 x i16> %13, %4
  %15 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %16 = mul <8 x i16> %15, %8
  %17 = shl <8 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = icmp ugt <8 x i16> %17, %11
  %19 = shl <8 x i16> %4, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %20 = mul <8 x i16> %19, %8
  %21 = mul <8 x i16> %11, %7
  %22 = sub <8 x i16> %7, %4
  %23 = shl <8 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = sub <8 x i16> %11, %8
  %25 = mul <8 x i16> %24, %23
  %26 = sub <8 x i16> %21, %25
  %27 = select <8 x i1> %18, <8 x i16> %26, <8 x i16> %20
  %28 = add <8 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %29 = add <8 x i16> %28, %14
  %30 = add <8 x i16> %29, %27
  %31 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = mul <8 x i16> %13, %5
  %33 = mul <8 x i16> %15, %9
  %34 = shl <8 x i16> %9, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %35 = icmp ugt <8 x i16> %34, %11
  %36 = shl <8 x i16> %5, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %37 = mul <8 x i16> %36, %9
  %38 = sub <8 x i16> %7, %5
  %39 = shl <8 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = sub <8 x i16> %11, %9
  %41 = mul <8 x i16> %40, %39
  %42 = sub <8 x i16> %21, %41
  %43 = select <8 x i1> %35, <8 x i16> %42, <8 x i16> %37
  %44 = add <8 x i16> %33, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %45 = add <8 x i16> %44, %32
  %46 = add <8 x i16> %45, %43
  %47 = lshr <8 x i16> %46, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %48 = mul <8 x i16> %13, %6
  %49 = mul <8 x i16> %15, %10
  %50 = shl <8 x i16> %10, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %51 = icmp ugt <8 x i16> %50, %11
  %52 = shl <8 x i16> %6, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %53 = mul <8 x i16> %52, %10
  %54 = sub <8 x i16> %7, %6
  %55 = shl <8 x i16> %54, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = sub <8 x i16> %11, %10
  %57 = mul <8 x i16> %56, %55
  %58 = sub <8 x i16> %21, %57
  %59 = select <8 x i1> %51, <8 x i16> %58, <8 x i16> %53
  %60 = add <8 x i16> %49, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %61 = add <8 x i16> %60, %48
  %62 = add <8 x i16> %61, %59
  %63 = lshr <8 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = mul <8 x i16> %15, %11
  %65 = add <8 x i16> %64, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %66 = lshr <8 x i16> %65, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %67 = add <8 x i16> %66, %7
  %68 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %69 = extractvalue { i8*, i8** } %68, 0
  %70 = extractvalue { i8*, i8** } %68, 1
  %71 = bitcast i8* %69 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %71(i64 %0, i8** %70, i64 %2, i64 %3, <8 x i16> %31, <8 x i16> %47, <8 x i16> %63, <8 x i16> %67, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL17srcover_rgba_8888EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %62 [
    i64 0, label %26
    i64 7, label %29
    i64 6, label %33
    i64 5, label %38
    i64 4, label %43
    i64 3, label %49
    i64 2, label %53
    i64 1, label %59
  ]

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 4
  br label %63

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %24, i64 6
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %31, i32 6
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <8 x i32> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, i32* %24, i64 5
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <8 x i32> %34, i32 %36, i32 5
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <8 x i32> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i32, i32* %24, i64 4
  %41 = load i32, i32* %40, align 4
  %42 = insertelement <8 x i32> %39, i32 %41, i32 4
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <8 x i32> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i32* %24 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i32> %47, <8 x i32> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

49:                                               ; preds = %12
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %51, i32 2
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <8 x i32> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = bitcast i32* %24 to <2 x i32>*
  %56 = load <2 x i32>, <2 x i32>* %55, align 4
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x i32> %57, <8 x i32> %54, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

59:                                               ; preds = %12
  %60 = load i32, i32* %24, align 4
  %61 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %60, i32 0
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %59, %53, %43, %26
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %53 ], [ %48, %43 ], [ %28, %26 ]
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = and <8 x i16> %65, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %67 = lshr <8 x i16> %65, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %68 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %69 = trunc <8 x i32> %68 to <8 x i16>
  %70 = and <8 x i16> %69, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %71 = lshr <8 x i16> %69, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %72 = sub <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %73 = mul <8 x i16> %66, %72
  %74 = add <8 x i16> %73, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %75 = lshr <8 x i16> %74, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %76 = add <8 x i16> %75, %4
  %77 = mul <8 x i16> %67, %72
  %78 = add <8 x i16> %77, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %79 = lshr <8 x i16> %78, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = add <8 x i16> %79, %5
  %81 = mul <8 x i16> %70, %72
  %82 = add <8 x i16> %81, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %83 = lshr <8 x i16> %82, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %84 = add <8 x i16> %83, %6
  %85 = mul <8 x i16> %71, %72
  %86 = add <8 x i16> %85, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %87 = lshr <8 x i16> %86, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = add <8 x i16> %87, %7
  %89 = shl <8 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %90 = or <8 x i16> %89, %76
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = shl <8 x i16> %88, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %93 = or <8 x i16> %92, %84
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = shl nuw <8 x i32> %94, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %96 = or <8 x i32> %95, %91
  switch i64 %25, label %119 [
    i64 0, label %97
    i64 7, label %99
    i64 6, label %102
    i64 5, label %105
    i64 4, label %108
    i64 3, label %111
    i64 2, label %114
    i64 1, label %117
  ]

97:                                               ; preds = %63
  %98 = bitcast i32* %24 to <8 x i32>*
  store <8 x i32> %96, <8 x i32>* %98, align 4
  br label %120

99:                                               ; preds = %63
  %100 = extractelement <8 x i32> %96, i32 6
  %101 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %100, i32* %101, align 4
  br label %102

102:                                              ; preds = %99, %63
  %103 = extractelement <8 x i32> %96, i32 5
  %104 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %103, i32* %104, align 4
  br label %105

105:                                              ; preds = %102, %63
  %106 = extractelement <8 x i32> %96, i32 4
  %107 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %106, i32* %107, align 4
  br label %108

108:                                              ; preds = %105, %63
  %109 = bitcast i32* %24 to <4 x i32>*
  %110 = shufflevector <8 x i32> %96, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %110, <4 x i32>* %109, align 4
  br label %120

111:                                              ; preds = %63
  %112 = extractelement <8 x i32> %96, i32 2
  %113 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %112, i32* %113, align 4
  br label %114

114:                                              ; preds = %111, %63
  %115 = bitcast i32* %24 to <2 x i32>*
  %116 = shufflevector <8 x i32> %96, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %116, <2 x i32>* %115, align 4
  br label %120

117:                                              ; preds = %63
  %118 = extractelement <8 x i32> %96, i32 0
  store i32 %118, i32* %24, align 4
  br label %120

119:                                              ; preds = %63
  unreachable

120:                                              ; preds = %97, %108, %114, %117
  %121 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %122 = extractvalue { i8*, i8** } %121, 0
  %123 = extractvalue { i8*, i8** } %121, 1
  %124 = bitcast i8* %122 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %124(i64 %0, i8** %123, i64 %2, i64 %3, <8 x i16> %76, <8 x i16> %80, <8 x i16> %84, <8 x i16> %88, <8 x i16> %66, <8 x i16> %67, <8 x i16> %70, <8 x i16> %71) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL16matrix_translateEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = fadd <8 x float> %17, %29
  %31 = getelementptr inbounds i8, i8* %24, i64 4
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = fadd <8 x float> %22, %35
  %37 = shufflevector <8 x float> %30, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %38 = bitcast <4 x float> %37 to <8 x i16>
  %39 = shufflevector <8 x float> %30, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %40 = bitcast <4 x float> %39 to <8 x i16>
  %41 = shufflevector <8 x float> %36, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %42 = bitcast <4 x float> %41 to <8 x i16>
  %43 = shufflevector <8 x float> %36, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %44 = bitcast <4 x float> %43 to <8 x i16>
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <8 x i16> %38, <8 x i16> %40, <8 x i16> %42, <8 x i16> %44, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL22matrix_scale_translateEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %24, i64 8
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = fmul <8 x float> %17, %29
  %36 = fadd <8 x float> %35, %34
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds i8, i8* %24, i64 12
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = insertelement <8 x float> undef, float %44, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = fmul <8 x float> %22, %41
  %48 = fadd <8 x float> %47, %46
  %49 = shufflevector <8 x float> %36, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %50 = bitcast <4 x float> %49 to <8 x i16>
  %51 = shufflevector <8 x float> %36, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %52 = bitcast <4 x float> %51 to <8 x i16>
  %53 = shufflevector <8 x float> %48, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %54 = bitcast <4 x float> %53 to <8 x i16>
  %55 = shufflevector <8 x float> %48, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %56 = bitcast <4 x float> %55 to <8 x i16>
  %57 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %58 = extractvalue { i8*, i8** } %57, 0
  %59 = extractvalue { i8*, i8** } %57, 1
  %60 = bitcast i8* %58 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %60(i64 %0, i8** %59, i64 %2, i64 %3, <8 x i16> %50, <8 x i16> %52, <8 x i16> %54, <8 x i16> %56, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10matrix_2x3EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %24, i64 8
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = getelementptr inbounds i8, i8* %24, i64 16
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fmul <8 x float> %22, %34
  %41 = fadd <8 x float> %40, %39
  %42 = fmul <8 x float> %17, %29
  %43 = fadd <8 x float> %42, %41
  %44 = getelementptr inbounds i8, i8* %24, i64 4
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %24, i64 12
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %24, i64 20
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = fmul <8 x float> %22, %53
  %60 = fadd <8 x float> %59, %58
  %61 = fmul <8 x float> %17, %48
  %62 = fadd <8 x float> %61, %60
  %63 = shufflevector <8 x float> %43, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %64 = bitcast <4 x float> %63 to <8 x i16>
  %65 = shufflevector <8 x float> %43, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %66 = bitcast <4 x float> %65 to <8 x i16>
  %67 = shufflevector <8 x float> %62, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %68 = bitcast <4 x float> %67 to <8 x i16>
  %69 = shufflevector <8 x float> %62, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %70 = bitcast <4 x float> %69 to <8 x i16>
  %71 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %72 = extractvalue { i8*, i8** } %71, 0
  %73 = extractvalue { i8*, i8** } %71, 1
  %74 = bitcast i8* %72 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %74(i64 %0, i8** %73, i64 %2, i64 %3, <8 x i16> %64, <8 x i16> %66, <8 x i16> %68, <8 x i16> %70, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL18matrix_perspectiveEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %24, i64 4
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = getelementptr inbounds i8, i8* %24, i64 8
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = fmul <8 x float> %22, %34
  %41 = fadd <8 x float> %40, %39
  %42 = fmul <8 x float> %17, %29
  %43 = fadd <8 x float> %42, %41
  %44 = getelementptr inbounds i8, i8* %24, i64 12
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %24, i64 16
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %24, i64 20
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = fmul <8 x float> %22, %53
  %60 = fadd <8 x float> %59, %58
  %61 = fmul <8 x float> %17, %48
  %62 = fadd <8 x float> %61, %60
  %63 = getelementptr inbounds i8, i8* %24, i64 24
  %64 = bitcast i8* %63 to float*
  %65 = load float, float* %64, align 4
  %66 = insertelement <8 x float> undef, float %65, i32 0
  %67 = shufflevector <8 x float> %66, <8 x float> undef, <8 x i32> zeroinitializer
  %68 = getelementptr inbounds i8, i8* %24, i64 28
  %69 = bitcast i8* %68 to float*
  %70 = load float, float* %69, align 4
  %71 = insertelement <8 x float> undef, float %70, i32 0
  %72 = shufflevector <8 x float> %71, <8 x float> undef, <8 x i32> zeroinitializer
  %73 = getelementptr inbounds i8, i8* %24, i64 32
  %74 = bitcast i8* %73 to float*
  %75 = load float, float* %74, align 4
  %76 = insertelement <8 x float> undef, float %75, i32 0
  %77 = shufflevector <8 x float> %76, <8 x float> undef, <8 x i32> zeroinitializer
  %78 = fmul <8 x float> %22, %72
  %79 = fadd <8 x float> %78, %77
  %80 = fmul <8 x float> %17, %67
  %81 = fadd <8 x float> %80, %79
  %82 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %81
  %83 = fmul <8 x float> %43, %82
  %84 = fmul <8 x float> %62, %82
  %85 = shufflevector <8 x float> %83, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %86 = bitcast <4 x float> %85 to <8 x i16>
  %87 = shufflevector <8 x float> %83, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %88 = bitcast <4 x float> %87 to <8 x i16>
  %89 = shufflevector <8 x float> %84, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %90 = bitcast <4 x float> %89 to <8 x i16>
  %91 = shufflevector <8 x float> %84, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %92 = bitcast <4 x float> %91 to <8 x i16>
  %93 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %94 = extractvalue { i8*, i8** } %93, 0
  %95 = extractvalue { i8*, i8** } %93, 1
  %96 = bitcast i8* %94 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %96(i64 %0, i8** %95, i64 %2, i64 %3, <8 x i16> %86, <8 x i16> %88, <8 x i16> %90, <8 x i16> %92, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7decal_xEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = getelementptr inbounds i8, i8* %19, i64 64
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = fcmp oge <8 x float> %17, zeroinitializer
  %25 = insertelement <8 x float> undef, float %23, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fcmp olt <8 x float> %17, %26
  %28 = and <8 x i1> %27, %24
  %29 = sext <8 x i1> %28 to <8 x i16>
  %30 = bitcast i8* %19 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 4
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7decal_yEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %6 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %7 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = getelementptr inbounds i8, i8* %19, i64 68
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = fcmp oge <8 x float> %17, zeroinitializer
  %25 = insertelement <8 x float> undef, float %23, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fcmp olt <8 x float> %17, %26
  %28 = and <8 x i1> %27, %24
  %29 = sext <8 x i1> %28 to <8 x i16>
  %30 = bitcast i8* %19 to <8 x i16>*
  store <8 x i16> %29, <8 x i16>* %30, align 4
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #13, !srcloc !259
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL13decal_x_and_yEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 64
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds i8, i8* %24, i64 68
  %30 = bitcast i8* %29 to float*
  %31 = load float, float* %30, align 4
  %32 = fcmp oge <8 x float> %17, zeroinitializer
  %33 = insertelement <8 x float> undef, float %28, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = fcmp olt <8 x float> %17, %34
  %36 = fcmp oge <8 x float> %22, zeroinitializer
  %37 = insertelement <8 x float> undef, float %31, i32 0
  %38 = shufflevector <8 x float> %37, <8 x float> undef, <8 x i32> zeroinitializer
  %39 = fcmp olt <8 x float> %22, %38
  %40 = and <8 x i1> %36, %32
  %41 = and <8 x i1> %40, %35
  %42 = and <8 x i1> %41, %39
  %43 = sext <8 x i1> %42 to <8 x i16>
  %44 = bitcast i8* %24 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %44, align 4
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #13, !srcloc !259
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <8 x i16> %4, <8 x i16> %5, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL16check_decal_maskEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 4
  %18 = and <8 x i16> %17, %4
  %19 = and <8 x i16> %17, %5
  %20 = and <8 x i16> %17, %6
  %21 = and <8 x i16> %17, %7
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <8 x i16> %18, <8 x i16> %19, <8 x i16> %20, <8 x i16> %21, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL9clamp_x_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = fcmp ogt <8 x float> %17, zeroinitializer
  %19 = select <8 x i1> %18, <8 x float> %17, <8 x float> zeroinitializer
  %20 = fcmp olt <8 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = select <8 x i1> %20, <8 x float> %19, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = shufflevector <8 x float> %21, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %23 = bitcast <4 x float> %22 to <8 x i16>
  %24 = shufflevector <8 x float> %21, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %25 = bitcast <4 x float> %24 to <8 x i16>
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x i16> %23, <8 x i16> %25, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10mirror_x_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = fadd <8 x float> %17, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %19 = fmul <8 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = fptosi <8 x float> %19 to <8 x i32>
  %21 = sitofp <8 x i32> %20 to <8 x float>
  %22 = fcmp olt <8 x float> %19, %21
  %23 = select <8 x i1> %22, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer
  %24 = fsub <8 x float> %21, %23
  %25 = fadd <8 x float> %24, %24
  %26 = fsub <8 x float> %18, %25
  %27 = fadd <8 x float> %26, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = bitcast <8 x float> %27 to <8 x i32>
  %29 = and <8 x i32> %28, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %30 = bitcast <8 x i32> %29 to <8 x float>
  %31 = fcmp ogt <8 x float> %30, zeroinitializer
  %32 = select <8 x i1> %31, <8 x float> %30, <8 x float> zeroinitializer
  %33 = fcmp olt <8 x float> %32, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %34 = select <8 x i1> %33, <8 x float> %32, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = bitcast <4 x float> %35 to <8 x i16>
  %37 = shufflevector <8 x float> %34, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %38 = bitcast <4 x float> %37 to <8 x i16>
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <8 x i16> %36, <8 x i16> %38, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL10repeat_x_1EmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = fptosi <8 x float> %17 to <8 x i32>
  %19 = sitofp <8 x i32> %18 to <8 x float>
  %20 = fcmp olt <8 x float> %17, %19
  %21 = select <8 x i1> %20, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer
  %22 = fsub <8 x float> %19, %21
  %23 = fsub <8 x float> %17, %22
  %24 = fcmp ogt <8 x float> %23, zeroinitializer
  %25 = select <8 x i1> %24, <8 x float> %23, <8 x float> zeroinitializer
  %26 = fcmp olt <8 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = select <8 x i1> %26, <8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = shufflevector <8 x float> %27, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %29 = bitcast <4 x float> %28 to <8 x i16>
  %30 = shufflevector <8 x float> %27, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %31 = bitcast <4 x float> %30 to <8 x i16>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <8 x i16> %29, <8 x i16> %31, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL22evenly_spaced_gradientEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -1
  %24 = uitofp i64 %23 to float
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fmul <8 x float> %17, %26
  %28 = fptosi <8 x float> %27 to <8 x i32>
  %29 = getelementptr inbounds i8, i8* %19, i64 8
  %30 = bitcast i8* %29 to float**
  %31 = load float*, float** %30, align 8
  %32 = extractelement <8 x i32> %28, i32 0
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %31, i64 %33
  %35 = load float, float* %34, align 4
  %36 = insertelement <8 x float> undef, float %35, i32 0
  %37 = extractelement <8 x i32> %28, i32 1
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds float, float* %31, i64 %38
  %40 = load float, float* %39, align 4
  %41 = insertelement <8 x float> %36, float %40, i32 1
  %42 = extractelement <8 x i32> %28, i32 2
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %31, i64 %43
  %45 = load float, float* %44, align 4
  %46 = insertelement <8 x float> %41, float %45, i32 2
  %47 = extractelement <8 x i32> %28, i32 3
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %31, i64 %48
  %50 = load float, float* %49, align 4
  %51 = insertelement <8 x float> %46, float %50, i32 3
  %52 = extractelement <8 x i32> %28, i32 4
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %31, i64 %53
  %55 = load float, float* %54, align 4
  %56 = insertelement <8 x float> %51, float %55, i32 4
  %57 = extractelement <8 x i32> %28, i32 5
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %31, i64 %58
  %60 = load float, float* %59, align 4
  %61 = insertelement <8 x float> %56, float %60, i32 5
  %62 = extractelement <8 x i32> %28, i32 6
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %31, i64 %63
  %65 = load float, float* %64, align 4
  %66 = insertelement <8 x float> %61, float %65, i32 6
  %67 = extractelement <8 x i32> %28, i32 7
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %31, i64 %68
  %70 = load float, float* %69, align 4
  %71 = insertelement <8 x float> %66, float %70, i32 7
  %72 = getelementptr inbounds i8, i8* %19, i64 16
  %73 = bitcast i8* %72 to float**
  %74 = load float*, float** %73, align 8
  %75 = getelementptr inbounds float, float* %74, i64 %33
  %76 = load float, float* %75, align 4
  %77 = insertelement <8 x float> undef, float %76, i32 0
  %78 = getelementptr inbounds float, float* %74, i64 %38
  %79 = load float, float* %78, align 4
  %80 = insertelement <8 x float> %77, float %79, i32 1
  %81 = getelementptr inbounds float, float* %74, i64 %43
  %82 = load float, float* %81, align 4
  %83 = insertelement <8 x float> %80, float %82, i32 2
  %84 = getelementptr inbounds float, float* %74, i64 %48
  %85 = load float, float* %84, align 4
  %86 = insertelement <8 x float> %83, float %85, i32 3
  %87 = getelementptr inbounds float, float* %74, i64 %53
  %88 = load float, float* %87, align 4
  %89 = insertelement <8 x float> %86, float %88, i32 4
  %90 = getelementptr inbounds float, float* %74, i64 %58
  %91 = load float, float* %90, align 4
  %92 = insertelement <8 x float> %89, float %91, i32 5
  %93 = getelementptr inbounds float, float* %74, i64 %63
  %94 = load float, float* %93, align 4
  %95 = insertelement <8 x float> %92, float %94, i32 6
  %96 = getelementptr inbounds float, float* %74, i64 %68
  %97 = load float, float* %96, align 4
  %98 = insertelement <8 x float> %95, float %97, i32 7
  %99 = getelementptr inbounds i8, i8* %19, i64 24
  %100 = bitcast i8* %99 to float**
  %101 = load float*, float** %100, align 8
  %102 = getelementptr inbounds float, float* %101, i64 %33
  %103 = load float, float* %102, align 4
  %104 = insertelement <8 x float> undef, float %103, i32 0
  %105 = getelementptr inbounds float, float* %101, i64 %38
  %106 = load float, float* %105, align 4
  %107 = insertelement <8 x float> %104, float %106, i32 1
  %108 = getelementptr inbounds float, float* %101, i64 %43
  %109 = load float, float* %108, align 4
  %110 = insertelement <8 x float> %107, float %109, i32 2
  %111 = getelementptr inbounds float, float* %101, i64 %48
  %112 = load float, float* %111, align 4
  %113 = insertelement <8 x float> %110, float %112, i32 3
  %114 = getelementptr inbounds float, float* %101, i64 %53
  %115 = load float, float* %114, align 4
  %116 = insertelement <8 x float> %113, float %115, i32 4
  %117 = getelementptr inbounds float, float* %101, i64 %58
  %118 = load float, float* %117, align 4
  %119 = insertelement <8 x float> %116, float %118, i32 5
  %120 = getelementptr inbounds float, float* %101, i64 %63
  %121 = load float, float* %120, align 4
  %122 = insertelement <8 x float> %119, float %121, i32 6
  %123 = getelementptr inbounds float, float* %101, i64 %68
  %124 = load float, float* %123, align 4
  %125 = insertelement <8 x float> %122, float %124, i32 7
  %126 = getelementptr inbounds i8, i8* %19, i64 32
  %127 = bitcast i8* %126 to float**
  %128 = load float*, float** %127, align 8
  %129 = getelementptr inbounds float, float* %128, i64 %33
  %130 = load float, float* %129, align 4
  %131 = insertelement <8 x float> undef, float %130, i32 0
  %132 = getelementptr inbounds float, float* %128, i64 %38
  %133 = load float, float* %132, align 4
  %134 = insertelement <8 x float> %131, float %133, i32 1
  %135 = getelementptr inbounds float, float* %128, i64 %43
  %136 = load float, float* %135, align 4
  %137 = insertelement <8 x float> %134, float %136, i32 2
  %138 = getelementptr inbounds float, float* %128, i64 %48
  %139 = load float, float* %138, align 4
  %140 = insertelement <8 x float> %137, float %139, i32 3
  %141 = getelementptr inbounds float, float* %128, i64 %53
  %142 = load float, float* %141, align 4
  %143 = insertelement <8 x float> %140, float %142, i32 4
  %144 = getelementptr inbounds float, float* %128, i64 %58
  %145 = load float, float* %144, align 4
  %146 = insertelement <8 x float> %143, float %145, i32 5
  %147 = getelementptr inbounds float, float* %128, i64 %63
  %148 = load float, float* %147, align 4
  %149 = insertelement <8 x float> %146, float %148, i32 6
  %150 = getelementptr inbounds float, float* %128, i64 %68
  %151 = load float, float* %150, align 4
  %152 = insertelement <8 x float> %149, float %151, i32 7
  %153 = getelementptr inbounds i8, i8* %19, i64 40
  %154 = bitcast i8* %153 to float**
  %155 = load float*, float** %154, align 8
  %156 = getelementptr inbounds float, float* %155, i64 %33
  %157 = load float, float* %156, align 4
  %158 = insertelement <8 x float> undef, float %157, i32 0
  %159 = getelementptr inbounds float, float* %155, i64 %38
  %160 = load float, float* %159, align 4
  %161 = insertelement <8 x float> %158, float %160, i32 1
  %162 = getelementptr inbounds float, float* %155, i64 %43
  %163 = load float, float* %162, align 4
  %164 = insertelement <8 x float> %161, float %163, i32 2
  %165 = getelementptr inbounds float, float* %155, i64 %48
  %166 = load float, float* %165, align 4
  %167 = insertelement <8 x float> %164, float %166, i32 3
  %168 = getelementptr inbounds float, float* %155, i64 %53
  %169 = load float, float* %168, align 4
  %170 = insertelement <8 x float> %167, float %169, i32 4
  %171 = getelementptr inbounds float, float* %155, i64 %58
  %172 = load float, float* %171, align 4
  %173 = insertelement <8 x float> %170, float %172, i32 5
  %174 = getelementptr inbounds float, float* %155, i64 %63
  %175 = load float, float* %174, align 4
  %176 = insertelement <8 x float> %173, float %175, i32 6
  %177 = getelementptr inbounds float, float* %155, i64 %68
  %178 = load float, float* %177, align 4
  %179 = insertelement <8 x float> %176, float %178, i32 7
  %180 = getelementptr inbounds i8, i8* %19, i64 48
  %181 = bitcast i8* %180 to float**
  %182 = load float*, float** %181, align 8
  %183 = getelementptr inbounds float, float* %182, i64 %33
  %184 = load float, float* %183, align 4
  %185 = insertelement <8 x float> undef, float %184, i32 0
  %186 = getelementptr inbounds float, float* %182, i64 %38
  %187 = load float, float* %186, align 4
  %188 = insertelement <8 x float> %185, float %187, i32 1
  %189 = getelementptr inbounds float, float* %182, i64 %43
  %190 = load float, float* %189, align 4
  %191 = insertelement <8 x float> %188, float %190, i32 2
  %192 = getelementptr inbounds float, float* %182, i64 %48
  %193 = load float, float* %192, align 4
  %194 = insertelement <8 x float> %191, float %193, i32 3
  %195 = getelementptr inbounds float, float* %182, i64 %53
  %196 = load float, float* %195, align 4
  %197 = insertelement <8 x float> %194, float %196, i32 4
  %198 = getelementptr inbounds float, float* %182, i64 %58
  %199 = load float, float* %198, align 4
  %200 = insertelement <8 x float> %197, float %199, i32 5
  %201 = getelementptr inbounds float, float* %182, i64 %63
  %202 = load float, float* %201, align 4
  %203 = insertelement <8 x float> %200, float %202, i32 6
  %204 = getelementptr inbounds float, float* %182, i64 %68
  %205 = load float, float* %204, align 4
  %206 = insertelement <8 x float> %203, float %205, i32 7
  %207 = getelementptr inbounds i8, i8* %19, i64 56
  %208 = bitcast i8* %207 to float**
  %209 = load float*, float** %208, align 8
  %210 = getelementptr inbounds float, float* %209, i64 %33
  %211 = load float, float* %210, align 4
  %212 = insertelement <8 x float> undef, float %211, i32 0
  %213 = getelementptr inbounds float, float* %209, i64 %38
  %214 = load float, float* %213, align 4
  %215 = insertelement <8 x float> %212, float %214, i32 1
  %216 = getelementptr inbounds float, float* %209, i64 %43
  %217 = load float, float* %216, align 4
  %218 = insertelement <8 x float> %215, float %217, i32 2
  %219 = getelementptr inbounds float, float* %209, i64 %48
  %220 = load float, float* %219, align 4
  %221 = insertelement <8 x float> %218, float %220, i32 3
  %222 = getelementptr inbounds float, float* %209, i64 %53
  %223 = load float, float* %222, align 4
  %224 = insertelement <8 x float> %221, float %223, i32 4
  %225 = getelementptr inbounds float, float* %209, i64 %58
  %226 = load float, float* %225, align 4
  %227 = insertelement <8 x float> %224, float %226, i32 5
  %228 = getelementptr inbounds float, float* %209, i64 %63
  %229 = load float, float* %228, align 4
  %230 = insertelement <8 x float> %227, float %229, i32 6
  %231 = getelementptr inbounds float, float* %209, i64 %68
  %232 = load float, float* %231, align 4
  %233 = insertelement <8 x float> %230, float %232, i32 7
  %234 = getelementptr inbounds i8, i8* %19, i64 64
  %235 = bitcast i8* %234 to float**
  %236 = load float*, float** %235, align 8
  %237 = getelementptr inbounds float, float* %236, i64 %33
  %238 = load float, float* %237, align 4
  %239 = insertelement <8 x float> undef, float %238, i32 0
  %240 = getelementptr inbounds float, float* %236, i64 %38
  %241 = load float, float* %240, align 4
  %242 = insertelement <8 x float> %239, float %241, i32 1
  %243 = getelementptr inbounds float, float* %236, i64 %43
  %244 = load float, float* %243, align 4
  %245 = insertelement <8 x float> %242, float %244, i32 2
  %246 = getelementptr inbounds float, float* %236, i64 %48
  %247 = load float, float* %246, align 4
  %248 = insertelement <8 x float> %245, float %247, i32 3
  %249 = getelementptr inbounds float, float* %236, i64 %53
  %250 = load float, float* %249, align 4
  %251 = insertelement <8 x float> %248, float %250, i32 4
  %252 = getelementptr inbounds float, float* %236, i64 %58
  %253 = load float, float* %252, align 4
  %254 = insertelement <8 x float> %251, float %253, i32 5
  %255 = getelementptr inbounds float, float* %236, i64 %63
  %256 = load float, float* %255, align 4
  %257 = insertelement <8 x float> %254, float %256, i32 6
  %258 = getelementptr inbounds float, float* %236, i64 %68
  %259 = load float, float* %258, align 4
  %260 = insertelement <8 x float> %257, float %259, i32 7
  %261 = fmul <8 x float> %17, %71
  %262 = fadd <8 x float> %261, %179
  %263 = fmul <8 x float> %17, %98
  %264 = fadd <8 x float> %263, %206
  %265 = fmul <8 x float> %17, %125
  %266 = fadd <8 x float> %265, %233
  %267 = fmul <8 x float> %17, %152
  %268 = fadd <8 x float> %267, %260
  %269 = getelementptr inbounds i8, i8* %19, i64 80
  %270 = load i8, i8* %269, align 8, !range !263
  %271 = icmp eq i8 %270, 0
  %272 = select i1 %271, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %268
  %273 = fcmp ogt <8 x float> %262, zeroinitializer
  %274 = select <8 x i1> %273, <8 x float> %262, <8 x float> zeroinitializer
  %275 = fcmp olt <8 x float> %274, %272
  %276 = select <8 x i1> %275, <8 x float> %274, <8 x float> %272
  %277 = fmul <8 x float> %276, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %278 = fadd <8 x float> %277, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %279 = fptoui <8 x float> %278 to <8 x i16>
  %280 = fcmp ogt <8 x float> %264, zeroinitializer
  %281 = select <8 x i1> %280, <8 x float> %264, <8 x float> zeroinitializer
  %282 = fcmp olt <8 x float> %281, %272
  %283 = select <8 x i1> %282, <8 x float> %281, <8 x float> %272
  %284 = fmul <8 x float> %283, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %285 = fadd <8 x float> %284, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %286 = fptoui <8 x float> %285 to <8 x i16>
  %287 = fcmp ogt <8 x float> %266, zeroinitializer
  %288 = select <8 x i1> %287, <8 x float> %266, <8 x float> zeroinitializer
  %289 = fcmp olt <8 x float> %288, %272
  %290 = select <8 x i1> %289, <8 x float> %288, <8 x float> %272
  %291 = fmul <8 x float> %290, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %292 = fadd <8 x float> %291, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %293 = fptoui <8 x float> %292 to <8 x i16>
  %294 = fmul <8 x float> %268, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %295 = fadd <8 x float> %294, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %296 = fptoui <8 x float> %295 to <8 x i16>
  %297 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #13, !srcloc !259
  %298 = extractvalue { i8*, i8** } %297, 0
  %299 = extractvalue { i8*, i8** } %297, 1
  %300 = bitcast i8* %298 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %300(i64 %0, i8** %299, i64 %2, i64 %3, <8 x i16> %279, <8 x i16> %286, <8 x i16> %293, <8 x i16> %296, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL8gradientEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %22, 1
  br i1 %23, label %24, label %68

24:                                               ; preds = %12
  %25 = getelementptr inbounds i8, i8* %19, i64 72
  %26 = bitcast i8* %25 to float**
  %27 = load float*, float** %26, align 8
  %28 = add i64 %22, -1
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %22, 2
  br i1 %30, label %55, label %31

31:                                               ; preds = %24
  %32 = sub i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 1, %31 ], [ %52, %33 ]
  %35 = phi <8 x i32> [ zeroinitializer, %31 ], [ %51, %33 ]
  %36 = phi i64 [ %32, %31 ], [ %53, %33 ]
  %37 = getelementptr inbounds float, float* %27, i64 %34
  %38 = load float, float* %37, align 4
  %39 = insertelement <8 x float> undef, float %38, i32 0
  %40 = shufflevector <8 x float> %39, <8 x float> undef, <8 x i32> zeroinitializer
  %41 = fcmp oge <8 x float> %17, %40
  %42 = zext <8 x i1> %41 to <8 x i32>
  %43 = add <8 x i32> %35, %42
  %44 = add nuw i64 %34, 1
  %45 = getelementptr inbounds float, float* %27, i64 %44
  %46 = load float, float* %45, align 4
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = fcmp oge <8 x float> %17, %48
  %50 = zext <8 x i1> %49 to <8 x i32>
  %51 = add <8 x i32> %43, %50
  %52 = add nuw i64 %34, 2
  %53 = add i64 %36, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %33

55:                                               ; preds = %33, %24
  %56 = phi <8 x i32> [ undef, %24 ], [ %51, %33 ]
  %57 = phi i64 [ 1, %24 ], [ %52, %33 ]
  %58 = phi <8 x i32> [ zeroinitializer, %24 ], [ %51, %33 ]
  %59 = icmp eq i64 %29, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds float, float* %27, i64 %57
  %62 = load float, float* %61, align 4
  %63 = insertelement <8 x float> undef, float %62, i32 0
  %64 = shufflevector <8 x float> %63, <8 x float> undef, <8 x i32> zeroinitializer
  %65 = fcmp oge <8 x float> %17, %64
  %66 = zext <8 x i1> %65 to <8 x i32>
  %67 = add <8 x i32> %58, %66
  br label %68

68:                                               ; preds = %60, %55, %12
  %69 = phi <8 x i32> [ zeroinitializer, %12 ], [ %56, %55 ], [ %67, %60 ]
  %70 = getelementptr inbounds i8, i8* %19, i64 8
  %71 = bitcast i8* %70 to float**
  %72 = load float*, float** %71, align 8
  %73 = extractelement <8 x i32> %69, i32 0
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds float, float* %72, i64 %74
  %76 = load float, float* %75, align 4
  %77 = insertelement <8 x float> undef, float %76, i32 0
  %78 = extractelement <8 x i32> %69, i32 1
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %72, i64 %79
  %81 = load float, float* %80, align 4
  %82 = insertelement <8 x float> %77, float %81, i32 1
  %83 = extractelement <8 x i32> %69, i32 2
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds float, float* %72, i64 %84
  %86 = load float, float* %85, align 4
  %87 = insertelement <8 x float> %82, float %86, i32 2
  %88 = extractelement <8 x i32> %69, i32 3
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds float, float* %72, i64 %89
  %91 = load float, float* %90, align 4
  %92 = insertelement <8 x float> %87, float %91, i32 3
  %93 = extractelement <8 x i32> %69, i32 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds float, float* %72, i64 %94
  %96 = load float, float* %95, align 4
  %97 = insertelement <8 x float> %92, float %96, i32 4
  %98 = extractelement <8 x i32> %69, i32 5
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %72, i64 %99
  %101 = load float, float* %100, align 4
  %102 = insertelement <8 x float> %97, float %101, i32 5
  %103 = extractelement <8 x i32> %69, i32 6
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds float, float* %72, i64 %104
  %106 = load float, float* %105, align 4
  %107 = insertelement <8 x float> %102, float %106, i32 6
  %108 = extractelement <8 x i32> %69, i32 7
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %72, i64 %109
  %111 = load float, float* %110, align 4
  %112 = insertelement <8 x float> %107, float %111, i32 7
  %113 = getelementptr inbounds i8, i8* %19, i64 16
  %114 = bitcast i8* %113 to float**
  %115 = load float*, float** %114, align 8
  %116 = getelementptr inbounds float, float* %115, i64 %74
  %117 = load float, float* %116, align 4
  %118 = insertelement <8 x float> undef, float %117, i32 0
  %119 = getelementptr inbounds float, float* %115, i64 %79
  %120 = load float, float* %119, align 4
  %121 = insertelement <8 x float> %118, float %120, i32 1
  %122 = getelementptr inbounds float, float* %115, i64 %84
  %123 = load float, float* %122, align 4
  %124 = insertelement <8 x float> %121, float %123, i32 2
  %125 = getelementptr inbounds float, float* %115, i64 %89
  %126 = load float, float* %125, align 4
  %127 = insertelement <8 x float> %124, float %126, i32 3
  %128 = getelementptr inbounds float, float* %115, i64 %94
  %129 = load float, float* %128, align 4
  %130 = insertelement <8 x float> %127, float %129, i32 4
  %131 = getelementptr inbounds float, float* %115, i64 %99
  %132 = load float, float* %131, align 4
  %133 = insertelement <8 x float> %130, float %132, i32 5
  %134 = getelementptr inbounds float, float* %115, i64 %104
  %135 = load float, float* %134, align 4
  %136 = insertelement <8 x float> %133, float %135, i32 6
  %137 = getelementptr inbounds float, float* %115, i64 %109
  %138 = load float, float* %137, align 4
  %139 = insertelement <8 x float> %136, float %138, i32 7
  %140 = getelementptr inbounds i8, i8* %19, i64 24
  %141 = bitcast i8* %140 to float**
  %142 = load float*, float** %141, align 8
  %143 = getelementptr inbounds float, float* %142, i64 %74
  %144 = load float, float* %143, align 4
  %145 = insertelement <8 x float> undef, float %144, i32 0
  %146 = getelementptr inbounds float, float* %142, i64 %79
  %147 = load float, float* %146, align 4
  %148 = insertelement <8 x float> %145, float %147, i32 1
  %149 = getelementptr inbounds float, float* %142, i64 %84
  %150 = load float, float* %149, align 4
  %151 = insertelement <8 x float> %148, float %150, i32 2
  %152 = getelementptr inbounds float, float* %142, i64 %89
  %153 = load float, float* %152, align 4
  %154 = insertelement <8 x float> %151, float %153, i32 3
  %155 = getelementptr inbounds float, float* %142, i64 %94
  %156 = load float, float* %155, align 4
  %157 = insertelement <8 x float> %154, float %156, i32 4
  %158 = getelementptr inbounds float, float* %142, i64 %99
  %159 = load float, float* %158, align 4
  %160 = insertelement <8 x float> %157, float %159, i32 5
  %161 = getelementptr inbounds float, float* %142, i64 %104
  %162 = load float, float* %161, align 4
  %163 = insertelement <8 x float> %160, float %162, i32 6
  %164 = getelementptr inbounds float, float* %142, i64 %109
  %165 = load float, float* %164, align 4
  %166 = insertelement <8 x float> %163, float %165, i32 7
  %167 = getelementptr inbounds i8, i8* %19, i64 32
  %168 = bitcast i8* %167 to float**
  %169 = load float*, float** %168, align 8
  %170 = getelementptr inbounds float, float* %169, i64 %74
  %171 = load float, float* %170, align 4
  %172 = insertelement <8 x float> undef, float %171, i32 0
  %173 = getelementptr inbounds float, float* %169, i64 %79
  %174 = load float, float* %173, align 4
  %175 = insertelement <8 x float> %172, float %174, i32 1
  %176 = getelementptr inbounds float, float* %169, i64 %84
  %177 = load float, float* %176, align 4
  %178 = insertelement <8 x float> %175, float %177, i32 2
  %179 = getelementptr inbounds float, float* %169, i64 %89
  %180 = load float, float* %179, align 4
  %181 = insertelement <8 x float> %178, float %180, i32 3
  %182 = getelementptr inbounds float, float* %169, i64 %94
  %183 = load float, float* %182, align 4
  %184 = insertelement <8 x float> %181, float %183, i32 4
  %185 = getelementptr inbounds float, float* %169, i64 %99
  %186 = load float, float* %185, align 4
  %187 = insertelement <8 x float> %184, float %186, i32 5
  %188 = getelementptr inbounds float, float* %169, i64 %104
  %189 = load float, float* %188, align 4
  %190 = insertelement <8 x float> %187, float %189, i32 6
  %191 = getelementptr inbounds float, float* %169, i64 %109
  %192 = load float, float* %191, align 4
  %193 = insertelement <8 x float> %190, float %192, i32 7
  %194 = getelementptr inbounds i8, i8* %19, i64 40
  %195 = bitcast i8* %194 to float**
  %196 = load float*, float** %195, align 8
  %197 = getelementptr inbounds float, float* %196, i64 %74
  %198 = load float, float* %197, align 4
  %199 = insertelement <8 x float> undef, float %198, i32 0
  %200 = getelementptr inbounds float, float* %196, i64 %79
  %201 = load float, float* %200, align 4
  %202 = insertelement <8 x float> %199, float %201, i32 1
  %203 = getelementptr inbounds float, float* %196, i64 %84
  %204 = load float, float* %203, align 4
  %205 = insertelement <8 x float> %202, float %204, i32 2
  %206 = getelementptr inbounds float, float* %196, i64 %89
  %207 = load float, float* %206, align 4
  %208 = insertelement <8 x float> %205, float %207, i32 3
  %209 = getelementptr inbounds float, float* %196, i64 %94
  %210 = load float, float* %209, align 4
  %211 = insertelement <8 x float> %208, float %210, i32 4
  %212 = getelementptr inbounds float, float* %196, i64 %99
  %213 = load float, float* %212, align 4
  %214 = insertelement <8 x float> %211, float %213, i32 5
  %215 = getelementptr inbounds float, float* %196, i64 %104
  %216 = load float, float* %215, align 4
  %217 = insertelement <8 x float> %214, float %216, i32 6
  %218 = getelementptr inbounds float, float* %196, i64 %109
  %219 = load float, float* %218, align 4
  %220 = insertelement <8 x float> %217, float %219, i32 7
  %221 = getelementptr inbounds i8, i8* %19, i64 48
  %222 = bitcast i8* %221 to float**
  %223 = load float*, float** %222, align 8
  %224 = getelementptr inbounds float, float* %223, i64 %74
  %225 = load float, float* %224, align 4
  %226 = insertelement <8 x float> undef, float %225, i32 0
  %227 = getelementptr inbounds float, float* %223, i64 %79
  %228 = load float, float* %227, align 4
  %229 = insertelement <8 x float> %226, float %228, i32 1
  %230 = getelementptr inbounds float, float* %223, i64 %84
  %231 = load float, float* %230, align 4
  %232 = insertelement <8 x float> %229, float %231, i32 2
  %233 = getelementptr inbounds float, float* %223, i64 %89
  %234 = load float, float* %233, align 4
  %235 = insertelement <8 x float> %232, float %234, i32 3
  %236 = getelementptr inbounds float, float* %223, i64 %94
  %237 = load float, float* %236, align 4
  %238 = insertelement <8 x float> %235, float %237, i32 4
  %239 = getelementptr inbounds float, float* %223, i64 %99
  %240 = load float, float* %239, align 4
  %241 = insertelement <8 x float> %238, float %240, i32 5
  %242 = getelementptr inbounds float, float* %223, i64 %104
  %243 = load float, float* %242, align 4
  %244 = insertelement <8 x float> %241, float %243, i32 6
  %245 = getelementptr inbounds float, float* %223, i64 %109
  %246 = load float, float* %245, align 4
  %247 = insertelement <8 x float> %244, float %246, i32 7
  %248 = getelementptr inbounds i8, i8* %19, i64 56
  %249 = bitcast i8* %248 to float**
  %250 = load float*, float** %249, align 8
  %251 = getelementptr inbounds float, float* %250, i64 %74
  %252 = load float, float* %251, align 4
  %253 = insertelement <8 x float> undef, float %252, i32 0
  %254 = getelementptr inbounds float, float* %250, i64 %79
  %255 = load float, float* %254, align 4
  %256 = insertelement <8 x float> %253, float %255, i32 1
  %257 = getelementptr inbounds float, float* %250, i64 %84
  %258 = load float, float* %257, align 4
  %259 = insertelement <8 x float> %256, float %258, i32 2
  %260 = getelementptr inbounds float, float* %250, i64 %89
  %261 = load float, float* %260, align 4
  %262 = insertelement <8 x float> %259, float %261, i32 3
  %263 = getelementptr inbounds float, float* %250, i64 %94
  %264 = load float, float* %263, align 4
  %265 = insertelement <8 x float> %262, float %264, i32 4
  %266 = getelementptr inbounds float, float* %250, i64 %99
  %267 = load float, float* %266, align 4
  %268 = insertelement <8 x float> %265, float %267, i32 5
  %269 = getelementptr inbounds float, float* %250, i64 %104
  %270 = load float, float* %269, align 4
  %271 = insertelement <8 x float> %268, float %270, i32 6
  %272 = getelementptr inbounds float, float* %250, i64 %109
  %273 = load float, float* %272, align 4
  %274 = insertelement <8 x float> %271, float %273, i32 7
  %275 = getelementptr inbounds i8, i8* %19, i64 64
  %276 = bitcast i8* %275 to float**
  %277 = load float*, float** %276, align 8
  %278 = getelementptr inbounds float, float* %277, i64 %74
  %279 = load float, float* %278, align 4
  %280 = insertelement <8 x float> undef, float %279, i32 0
  %281 = getelementptr inbounds float, float* %277, i64 %79
  %282 = load float, float* %281, align 4
  %283 = insertelement <8 x float> %280, float %282, i32 1
  %284 = getelementptr inbounds float, float* %277, i64 %84
  %285 = load float, float* %284, align 4
  %286 = insertelement <8 x float> %283, float %285, i32 2
  %287 = getelementptr inbounds float, float* %277, i64 %89
  %288 = load float, float* %287, align 4
  %289 = insertelement <8 x float> %286, float %288, i32 3
  %290 = getelementptr inbounds float, float* %277, i64 %94
  %291 = load float, float* %290, align 4
  %292 = insertelement <8 x float> %289, float %291, i32 4
  %293 = getelementptr inbounds float, float* %277, i64 %99
  %294 = load float, float* %293, align 4
  %295 = insertelement <8 x float> %292, float %294, i32 5
  %296 = getelementptr inbounds float, float* %277, i64 %104
  %297 = load float, float* %296, align 4
  %298 = insertelement <8 x float> %295, float %297, i32 6
  %299 = getelementptr inbounds float, float* %277, i64 %109
  %300 = load float, float* %299, align 4
  %301 = insertelement <8 x float> %298, float %300, i32 7
  %302 = fmul <8 x float> %17, %112
  %303 = fadd <8 x float> %302, %220
  %304 = fmul <8 x float> %17, %139
  %305 = fadd <8 x float> %304, %247
  %306 = fmul <8 x float> %17, %166
  %307 = fadd <8 x float> %306, %274
  %308 = fmul <8 x float> %17, %193
  %309 = fadd <8 x float> %308, %301
  %310 = getelementptr inbounds i8, i8* %19, i64 80
  %311 = load i8, i8* %310, align 8, !range !263
  %312 = icmp eq i8 %311, 0
  %313 = select i1 %312, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %309
  %314 = fcmp ogt <8 x float> %303, zeroinitializer
  %315 = select <8 x i1> %314, <8 x float> %303, <8 x float> zeroinitializer
  %316 = fcmp olt <8 x float> %315, %313
  %317 = select <8 x i1> %316, <8 x float> %315, <8 x float> %313
  %318 = fmul <8 x float> %317, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %319 = fadd <8 x float> %318, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %320 = fptoui <8 x float> %319 to <8 x i16>
  %321 = fcmp ogt <8 x float> %305, zeroinitializer
  %322 = select <8 x i1> %321, <8 x float> %305, <8 x float> zeroinitializer
  %323 = fcmp olt <8 x float> %322, %313
  %324 = select <8 x i1> %323, <8 x float> %322, <8 x float> %313
  %325 = fmul <8 x float> %324, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %326 = fadd <8 x float> %325, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %327 = fptoui <8 x float> %326 to <8 x i16>
  %328 = fcmp ogt <8 x float> %307, zeroinitializer
  %329 = select <8 x i1> %328, <8 x float> %307, <8 x float> zeroinitializer
  %330 = fcmp olt <8 x float> %329, %313
  %331 = select <8 x i1> %330, <8 x float> %329, <8 x float> %313
  %332 = fmul <8 x float> %331, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %333 = fadd <8 x float> %332, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %334 = fptoui <8 x float> %333 to <8 x i16>
  %335 = fmul <8 x float> %309, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %336 = fadd <8 x float> %335, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %337 = fptoui <8 x float> %336 to <8 x i16>
  %338 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #13, !srcloc !259
  %339 = extractvalue { i8*, i8** } %338, 0
  %340 = extractvalue { i8*, i8** } %338, 1
  %341 = bitcast i8* %339 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %341(i64 %0, i8** %340, i64 %2, i64 %3, <8 x i16> %320, <8 x i16> %327, <8 x i16> %334, <8 x i16> %337, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL29evenly_spaced_2_stop_gradientEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %19, i64 16
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = fmul <8 x float> %17, %24
  %31 = fadd <8 x float> %30, %29
  %32 = getelementptr inbounds i8, i8* %19, i64 4
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <8 x float> undef, float %34, i32 0
  %36 = shufflevector <8 x float> %35, <8 x float> undef, <8 x i32> zeroinitializer
  %37 = getelementptr inbounds i8, i8* %19, i64 20
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = fmul <8 x float> %17, %36
  %43 = fadd <8 x float> %42, %41
  %44 = getelementptr inbounds i8, i8* %19, i64 8
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %19, i64 24
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = fmul <8 x float> %17, %48
  %55 = fadd <8 x float> %54, %53
  %56 = getelementptr inbounds i8, i8* %19, i64 12
  %57 = bitcast i8* %56 to float*
  %58 = load float, float* %57, align 4
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = getelementptr inbounds i8, i8* %19, i64 28
  %62 = bitcast i8* %61 to float*
  %63 = load float, float* %62, align 4
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = fmul <8 x float> %17, %60
  %67 = fadd <8 x float> %66, %65
  %68 = getelementptr inbounds i8, i8* %19, i64 32
  %69 = load i8, i8* %68, align 4, !range !263
  %70 = icmp eq i8 %69, 0
  %71 = select i1 %70, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %67
  %72 = fcmp ogt <8 x float> %31, zeroinitializer
  %73 = select <8 x i1> %72, <8 x float> %31, <8 x float> zeroinitializer
  %74 = fcmp olt <8 x float> %73, %71
  %75 = select <8 x i1> %74, <8 x float> %73, <8 x float> %71
  %76 = fmul <8 x float> %75, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %77 = fadd <8 x float> %76, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fptoui <8 x float> %77 to <8 x i16>
  %79 = fcmp ogt <8 x float> %43, zeroinitializer
  %80 = select <8 x i1> %79, <8 x float> %43, <8 x float> zeroinitializer
  %81 = fcmp olt <8 x float> %80, %71
  %82 = select <8 x i1> %81, <8 x float> %80, <8 x float> %71
  %83 = fmul <8 x float> %82, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %84 = fadd <8 x float> %83, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %85 = fptoui <8 x float> %84 to <8 x i16>
  %86 = fcmp ogt <8 x float> %55, zeroinitializer
  %87 = select <8 x i1> %86, <8 x float> %55, <8 x float> zeroinitializer
  %88 = fcmp olt <8 x float> %87, %71
  %89 = select <8 x i1> %88, <8 x float> %87, <8 x float> %71
  %90 = fmul <8 x float> %89, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %91 = fadd <8 x float> %90, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %92 = fptoui <8 x float> %91 to <8 x i16>
  %93 = fmul <8 x float> %67, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %94 = fadd <8 x float> %93, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %95 = fptoui <8 x float> %94 to <8 x i16>
  %96 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #13, !srcloc !259
  %97 = extractvalue { i8*, i8** } %96, 0
  %98 = extractvalue { i8*, i8** } %96, 1
  %99 = bitcast i8* %97 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %99(i64 %0, i8** %98, i64 %2, i64 %3, <8 x i16> %78, <8 x i16> %85, <8 x i16> %92, <8 x i16> %95, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL16xy_to_unit_angleEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = bitcast <8 x float> %17 to <8 x i32>
  %24 = and <8 x i32> %23, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %25 = bitcast <8 x i32> %24 to <8 x float>
  %26 = bitcast <8 x float> %22 to <8 x i32>
  %27 = and <8 x i32> %26, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %28 = bitcast <8 x i32> %27 to <8 x float>
  %29 = fcmp olt <8 x float> %25, %28
  %30 = select <8 x i1> %29, <8 x i32> %24, <8 x i32> %27
  %31 = bitcast <8 x i32> %30 to <8 x float>
  %32 = select <8 x i1> %29, <8 x i32> %27, <8 x i32> %24
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = fdiv <8 x float> %31, %33
  %35 = fmul <8 x float> %34, %34
  %36 = fmul <8 x float> %35, <float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000>
  %37 = fadd <8 x float> %36, <float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000>
  %38 = fmul <8 x float> %35, %37
  %39 = fadd <8 x float> %38, <float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000>
  %40 = fmul <8 x float> %35, %39
  %41 = fadd <8 x float> %40, <float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000>
  %42 = fmul <8 x float> %34, %41
  %43 = fsub <8 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, %42
  %44 = select <8 x i1> %29, <8 x float> %43, <8 x float> %42
  %45 = fcmp uge <8 x float> %17, zeroinitializer
  %46 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %44
  %47 = select <8 x i1> %45, <8 x float> %44, <8 x float> %46
  %48 = fcmp uge <8 x float> %22, zeroinitializer
  %49 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %50 = select <8 x i1> %48, <8 x float> %47, <8 x float> %49
  %51 = fcmp ord <8 x float> %50, zeroinitializer
  %52 = select <8 x i1> %51, <8 x float> %50, <8 x float> zeroinitializer
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %54 = bitcast <4 x float> %53 to <8 x i16>
  %55 = shufflevector <8 x float> %52, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %56 = bitcast <4 x float> %55 to <8 x i16>
  %57 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %58 = extractvalue { i8*, i8** } %57, 0
  %59 = extractvalue { i8*, i8** } %57, 1
  %60 = bitcast i8* %58 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %60(i64 %0, i8** %59, i64 %2, i64 %3, <8 x i16> %54, <8 x i16> %56, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL12xy_to_radiusEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #5 {
  %13 = bitcast <8 x i16> %4 to <4 x float>
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <8 x i16> %5 to <4 x float>
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %17 = shufflevector <8 x float> %14, <8 x float> %16, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %18 = bitcast <8 x i16> %6 to <4 x float>
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <8 x i16> %7 to <4 x float>
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %22 = shufflevector <8 x float> %19, <8 x float> %21, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %23 = fmul <8 x float> %17, %17
  %24 = fmul <8 x float> %22, %22
  %25 = fadd <8 x float> %23, %24
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %27 = shufflevector <8 x float> %25, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %28 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %26) #18
  %29 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %27) #18
  %30 = bitcast <4 x float> %28 to <8 x i16>
  %31 = bitcast <4 x float> %29 to <8 x i16>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <8 x i16> %30, <8 x i16> %31, <8 x i16> %6, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL6embossEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 7
  switch i64 %25, label %88 [
    i64 0, label %26
    i64 7, label %42
    i64 6, label %46
    i64 5, label %51
    i64 4, label %56
    i64 3, label %62
    i64 2, label %66
    i64 1, label %72
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  %29 = zext <8 x i8> %28 to <8 x i16>
  %30 = getelementptr inbounds i8, i8* %14, i64 16
  %31 = bitcast i8* %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %14, i64 24
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = sext i32 %35 to i64
  %37 = mul i64 %36, %3
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  %39 = getelementptr inbounds i8, i8* %38, i64 %2
  %40 = bitcast i8* %39 to <8 x i8>*
  %41 = load <8 x i8>, <8 x i8>* %40, align 1
  br label %133

42:                                               ; preds = %12
  %43 = getelementptr inbounds i8, i8* %24, i64 6
  %44 = load i8, i8* %43, align 1
  %45 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %44, i32 6
  br label %46

46:                                               ; preds = %42, %12
  %47 = phi <8 x i8> [ zeroinitializer, %12 ], [ %45, %42 ]
  %48 = getelementptr inbounds i8, i8* %24, i64 5
  %49 = load i8, i8* %48, align 1
  %50 = insertelement <8 x i8> %47, i8 %49, i32 5
  br label %51

51:                                               ; preds = %46, %12
  %52 = phi <8 x i8> [ zeroinitializer, %12 ], [ %50, %46 ]
  %53 = getelementptr inbounds i8, i8* %24, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = insertelement <8 x i8> %52, i8 %54, i32 4
  br label %56

56:                                               ; preds = %51, %12
  %57 = phi <8 x i8> [ zeroinitializer, %12 ], [ %55, %51 ]
  %58 = bitcast i8* %24 to <4 x i8>*
  %59 = load <4 x i8>, <4 x i8>* %58, align 1
  %60 = shufflevector <4 x i8> %59, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = shufflevector <8 x i8> %60, <8 x i8> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %89

62:                                               ; preds = %12
  %63 = getelementptr inbounds i8, i8* %24, i64 2
  %64 = load i8, i8* %63, align 1
  %65 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %64, i32 2
  br label %66

66:                                               ; preds = %62, %12
  %67 = phi <8 x i8> [ zeroinitializer, %12 ], [ %65, %62 ]
  %68 = bitcast i8* %24 to <2 x i8>*
  %69 = load <2 x i8>, <2 x i8>* %68, align 1
  %70 = shufflevector <2 x i8> %69, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = shufflevector <8 x i8> %70, <8 x i8> %67, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %89

72:                                               ; preds = %12
  %73 = load i8, i8* %24, align 1
  %74 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %73, i32 0
  %75 = zext <8 x i8> %74 to <8 x i16>
  %76 = getelementptr inbounds i8, i8* %14, i64 16
  %77 = bitcast i8* %76 to i8**
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds i8, i8* %14, i64 24
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 8
  %82 = sext i32 %81 to i64
  %83 = mul i64 %82, %3
  %84 = getelementptr inbounds i8, i8* %78, i64 %83
  %85 = getelementptr inbounds i8, i8* %84, i64 %2
  %86 = load i8, i8* %85, align 1
  %87 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %86, i32 0
  br label %133

88:                                               ; preds = %12
  unreachable

89:                                               ; preds = %66, %56
  %90 = phi <8 x i8> [ %71, %66 ], [ %61, %56 ]
  %91 = zext <8 x i8> %90 to <8 x i16>
  %92 = getelementptr inbounds i8, i8* %14, i64 16
  %93 = bitcast i8* %92 to i8**
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds i8, i8* %14, i64 24
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 8
  %98 = sext i32 %97 to i64
  %99 = mul i64 %98, %3
  %100 = getelementptr inbounds i8, i8* %94, i64 %99
  %101 = getelementptr inbounds i8, i8* %100, i64 %2
  switch i64 %25, label %132 [
    i64 2, label %126
    i64 7, label %102
    i64 6, label %106
    i64 5, label %111
    i64 4, label %116
    i64 3, label %122
  ]

102:                                              ; preds = %89
  %103 = getelementptr inbounds i8, i8* %101, i64 6
  %104 = load i8, i8* %103, align 1
  %105 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %104, i32 6
  br label %106

106:                                              ; preds = %102, %89
  %107 = phi <8 x i8> [ zeroinitializer, %89 ], [ %105, %102 ]
  %108 = getelementptr inbounds i8, i8* %101, i64 5
  %109 = load i8, i8* %108, align 1
  %110 = insertelement <8 x i8> %107, i8 %109, i32 5
  br label %111

111:                                              ; preds = %106, %89
  %112 = phi <8 x i8> [ zeroinitializer, %89 ], [ %110, %106 ]
  %113 = getelementptr inbounds i8, i8* %101, i64 4
  %114 = load i8, i8* %113, align 1
  %115 = insertelement <8 x i8> %112, i8 %114, i32 4
  br label %116

116:                                              ; preds = %111, %89
  %117 = phi <8 x i8> [ zeroinitializer, %89 ], [ %115, %111 ]
  %118 = bitcast i8* %101 to <4 x i8>*
  %119 = load <4 x i8>, <4 x i8>* %118, align 1
  %120 = shufflevector <4 x i8> %119, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %121 = shufflevector <8 x i8> %120, <8 x i8> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %133

122:                                              ; preds = %89
  %123 = getelementptr inbounds i8, i8* %101, i64 2
  %124 = load i8, i8* %123, align 1
  %125 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %124, i32 2
  br label %126

126:                                              ; preds = %122, %89
  %127 = phi <8 x i8> [ zeroinitializer, %89 ], [ %125, %122 ]
  %128 = bitcast i8* %101 to <2 x i8>*
  %129 = load <2 x i8>, <2 x i8>* %128, align 1
  %130 = shufflevector <2 x i8> %129, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = shufflevector <8 x i8> %130, <8 x i8> %127, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %133

132:                                              ; preds = %89
  unreachable

133:                                              ; preds = %26, %72, %116, %126
  %134 = phi <8 x i16> [ %75, %72 ], [ %91, %126 ], [ %91, %116 ], [ %29, %26 ]
  %135 = phi <8 x i8> [ %87, %72 ], [ %131, %126 ], [ %121, %116 ], [ %41, %26 ]
  %136 = zext <8 x i8> %135 to <8 x i16>
  %137 = mul <8 x i16> %134, %4
  %138 = add <8 x i16> %137, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %139 = lshr <8 x i16> %138, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %140 = add nuw nsw <8 x i16> %139, %136
  %141 = icmp ult <8 x i16> %140, %7
  %142 = select <8 x i1> %141, <8 x i16> %140, <8 x i16> %7
  %143 = mul <8 x i16> %134, %5
  %144 = add <8 x i16> %143, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %145 = lshr <8 x i16> %144, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %146 = add nuw nsw <8 x i16> %145, %136
  %147 = icmp ult <8 x i16> %146, %7
  %148 = select <8 x i1> %147, <8 x i16> %146, <8 x i16> %7
  %149 = mul <8 x i16> %134, %6
  %150 = add <8 x i16> %149, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %151 = lshr <8 x i16> %150, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %152 = add nuw nsw <8 x i16> %151, %136
  %153 = icmp ult <8 x i16> %152, %7
  %154 = select <8 x i1> %153, <8 x i16> %152, <8 x i16> %7
  %155 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %156 = extractvalue { i8*, i8** } %155, 0
  %157 = extractvalue { i8*, i8** } %155, 1
  %158 = bitcast i8* %156 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %158(i64 %0, i8** %157, i64 %2, i64 %3, <8 x i16> %142, <8 x i16> %148, <8 x i16> %154, <8 x i16> %7, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL7swizzleEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #13, !srcloc !259
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = ptrtoint i8* %14 to i64
  %17 = trunc i64 %16 to i32
  %18 = shl i32 %17, 24
  %19 = ashr exact i32 %18, 24
  switch i32 %19, label %25 [
    i32 49, label %24
    i32 103, label %20
    i32 98, label %21
    i32 97, label %22
    i32 48, label %23
  ]

20:                                               ; preds = %12
  br label %25

21:                                               ; preds = %12
  br label %25

22:                                               ; preds = %12
  br label %25

23:                                               ; preds = %12
  br label %25

24:                                               ; preds = %12
  br label %25

25:                                               ; preds = %24, %23, %22, %21, %20, %12
  %26 = phi <8 x i16> [ %4, %12 ], [ zeroinitializer, %23 ], [ %7, %22 ], [ %6, %21 ], [ %5, %20 ], [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %24 ]
  %27 = shl i32 %17, 16
  %28 = ashr i32 %27, 24
  switch i32 %28, label %34 [
    i32 114, label %33
    i32 49, label %29
    i32 98, label %32
    i32 97, label %31
    i32 48, label %30
  ]

29:                                               ; preds = %25
  br label %34

30:                                               ; preds = %25
  br label %34

31:                                               ; preds = %25
  br label %34

32:                                               ; preds = %25
  br label %34

33:                                               ; preds = %25
  br label %34

34:                                               ; preds = %33, %32, %31, %30, %29, %25
  %35 = phi <8 x i16> [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %29 ], [ zeroinitializer, %30 ], [ %7, %31 ], [ %6, %32 ], [ %4, %33 ], [ %5, %25 ]
  %36 = shl i32 %17, 8
  %37 = ashr i32 %36, 24
  switch i32 %37, label %43 [
    i32 114, label %42
    i32 103, label %41
    i32 49, label %38
    i32 97, label %40
    i32 48, label %39
  ]

38:                                               ; preds = %34
  br label %43

39:                                               ; preds = %34
  br label %43

40:                                               ; preds = %34
  br label %43

41:                                               ; preds = %34
  br label %43

42:                                               ; preds = %34
  br label %43

43:                                               ; preds = %42, %41, %40, %39, %38, %34
  %44 = phi <8 x i16> [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %38 ], [ zeroinitializer, %39 ], [ %7, %40 ], [ %5, %41 ], [ %4, %42 ], [ %6, %34 ]
  %45 = ashr i32 %17, 24
  switch i32 %45, label %51 [
    i32 114, label %50
    i32 103, label %49
    i32 98, label %48
    i32 49, label %46
    i32 48, label %47
  ]

46:                                               ; preds = %43
  br label %51

47:                                               ; preds = %43
  br label %51

48:                                               ; preds = %43
  br label %51

49:                                               ; preds = %43
  br label %51

50:                                               ; preds = %43
  br label %51

51:                                               ; preds = %43, %46, %47, %48, %49, %50
  %52 = phi <8 x i16> [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %46 ], [ zeroinitializer, %47 ], [ %6, %48 ], [ %5, %49 ], [ %4, %50 ], [ %7, %43 ]
  %53 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #13, !srcloc !259
  %54 = extractvalue { i8*, i8** } %53, 0
  %55 = extractvalue { i8*, i8** } %53, 1
  %56 = bitcast i8* %54 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  tail call void %56(i64 %0, i8** %55, i64 %2, i64 %3, <8 x i16> %26, <8 x i16> %35, <8 x i16> %44, <8 x i16> %52, <8 x i16> %8, <8 x i16> %9, <8 x i16> %10, <8 x i16> %11) #18
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN4sse34lowpL11just_returnEmPPvmmDv8_tS3_S3_S3_S3_S3_S3_S3_(i64, i8** nocapture, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>) #6 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sse34lowpL14start_pipelineEmmmmPPv(i64, i64, i64, i64, i8**) #4 {
  %6 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %4) #13, !srcloc !259
  %7 = extractvalue { i8*, i8** } %6, 0
  %8 = extractvalue { i8*, i8** } %6, 1
  %9 = bitcast i8* %7 to void (i64, i8**, i64, i64, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>, <8 x i16>)*
  %10 = icmp ult i64 %1, %3
  br i1 %10, label %11, label %16

11:                                               ; preds = %5
  %12 = add i64 %0, 8
  %13 = icmp ugt i64 %12, %2
  br label %14

14:                                               ; preds = %27, %11
  %15 = phi i64 [ %1, %11 ], [ %28, %27 ]
  br i1 %13, label %22, label %17

16:                                               ; preds = %27, %5
  ret void

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %20, %17 ], [ %12, %14 ]
  %19 = phi i64 [ %18, %17 ], [ %0, %14 ]
  tail call void %9(i64 0, i8** %8, i64 %19, i64 %15, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer) #18
  %20 = add i64 %18, 8
  %21 = icmp ugt i64 %20, %2
  br i1 %21, label %22, label %17

22:                                               ; preds = %17, %14
  %23 = phi i64 [ %0, %14 ], [ %18, %17 ]
  %24 = sub i64 %2, %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void %9(i64 %24, i8** %8, i64 %23, i64 %15, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer, <8 x i16> zeroinitializer) #18
  br label %27

27:                                               ; preds = %22, %26
  %28 = add nuw i64 %15, 1
  %29 = icmp eq i64 %28, %3
  br i1 %29, label %16, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6SkOpts4InitEv() local_unnamed_addr #7 {
  %1 = load atomic i8, i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN6SkOpts4InitEvE4once, i64 0, i32 0, i32 0, i32 0) acquire, align 1
  switch i8 %1, label %2 [
    i8 2, label %45
    i8 0, label %3
  ]

2:                                                ; preds = %3, %0
  br label %42

3:                                                ; preds = %0
  %4 = cmpxchg i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN6SkOpts4InitEvE4once, i64 0, i32 0, i32 0, i32 0), i8 0, i8 1 monotonic monotonic
  %5 = extractvalue { i8, i1 } %4, 1
  br i1 %5, label %6, label %2

6:                                                ; preds = %3
  %7 = load i32, i32* @_ZN5SkCpu15gCachedFeaturesE, align 4
  %8 = and i32 %7, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  tail call void @_ZN6SkOpts10Init_ssse3Ev() #18
  %11 = load i32, i32* @_ZN5SkCpu15gCachedFeaturesE, align 4
  br label %12

12:                                               ; preds = %6, %10
  %13 = phi i32 [ %7, %6 ], [ %11, %10 ]
  %14 = and i32 %13, 32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  tail call void @_ZN6SkOpts10Init_sse42Ev() #18
  %17 = load i32, i32* @_ZN5SkCpu15gCachedFeaturesE, align 4
  br label %18

18:                                               ; preds = %12, %16
  %19 = phi i32 [ %13, %12 ], [ %17, %16 ]
  %20 = and i32 %19, 64
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  tail call void @_ZN6SkOpts8Init_avxEv() #18
  %23 = load i32, i32* @_ZN5SkCpu15gCachedFeaturesE, align 4
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi i32 [ %19, %18 ], [ %23, %22 ]
  %26 = and i32 %25, 3968
  %27 = icmp eq i32 %26, 3968
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  tail call void @_ZN6SkOpts8Init_hswEv() #18
  %29 = load i32, i32* @_ZN5SkCpu15gCachedFeaturesE, align 4
  br label %30

30:                                               ; preds = %28, %24
  %31 = phi i32 [ %29, %28 ], [ %25, %24 ]
  %32 = and i32 %31, 929792
  %33 = icmp eq i32 %32, 929792
  br i1 %33, label %34, label %36

34:                                               ; preds = %30
  tail call void @_ZN6SkOpts8Init_skxEv() #18
  %35 = load i32, i32* @_ZN5SkCpu15gCachedFeaturesE, align 4
  br label %36

36:                                               ; preds = %34, %30
  %37 = phi i32 [ %35, %34 ], [ %31, %30 ]
  %38 = and i32 %37, 1048576
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN6SkOpts9Init_ermsEv() #18
  br label %41

41:                                               ; preds = %36, %40
  store atomic i8 2, i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN6SkOpts4InitEvE4once, i64 0, i32 0, i32 0, i32 0) release, align 1
  br label %45

42:                                               ; preds = %2, %42
  %43 = load atomic i8, i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN6SkOpts4InitEvE4once, i64 0, i32 0, i32 0, i32 0) acquire, align 1
  %44 = icmp eq i8 %43, 2
  br i1 %44, label %45, label %42

45:                                               ; preds = %42, %0, %41
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #7 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #18
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5ClearEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %37

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %38

9:                                                ; preds = %7, %13
  %10 = phi i32 [ %15, %13 ], [ %3, %7 ]
  %11 = phi i32* [ %14, %13 ], [ %1, %7 ]
  %12 = icmp sgt i32 %10, 7
  br i1 %12, label %13, label %18

13:                                               ; preds = %9
  %14 = getelementptr inbounds i32, i32* %11, i64 8
  %15 = add nsw i32 %10, -8
  %16 = icmp sgt i32 %15, 0
  %17 = bitcast i32* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 32, i1 false) #18
  br i1 %16, label %9, label %38

18:                                               ; preds = %9
  %19 = icmp sgt i32 %10, 3
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  %21 = bitcast i32* %11 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %21, align 4
  %22 = getelementptr inbounds i32, i32* %11, i64 4
  %23 = add nsw i32 %10, -4
  br label %24

24:                                               ; preds = %20, %18
  %25 = phi i32* [ %22, %20 ], [ %11, %18 ]
  %26 = phi i32 [ %23, %20 ], [ %10, %18 ]
  %27 = icmp sgt i32 %26, 1
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = bitcast i32* %25 to i64*
  store i64 0, i64* %29, align 4
  %30 = getelementptr inbounds i32, i32* %25, i64 2
  %31 = add nsw i32 %26, -2
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i32* [ %30, %28 ], [ %25, %24 ]
  %34 = phi i32 [ %31, %28 ], [ %26, %24 ]
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  store i32 0, i32* %33, align 4
  br label %38

37:                                               ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_5ClearEEENS_5Sk4pxERKS2_S4_S4_)
  br label %38

38:                                               ; preds = %13, %36, %32, %7, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #7 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #10

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #11

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32, i32* nocapture, i32* nocapture readonly, i8* nocapture readonly, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nocapture) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %13 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %14 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %15 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %16 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %17 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %18 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %19 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %20 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %21 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %22 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %23 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %24 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %25 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %26 = alloca %"class.(anonymous namespace)::Sk4px", align 16
  %27 = icmp sgt i32 %0, 0
  br i1 %27, label %28, label %173

28:                                               ; preds = %5
  %29 = bitcast %"class.(anonymous namespace)::Sk4px"* %12 to i8*
  %30 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %12, i64 0, i32 0, i32 0
  %31 = bitcast %"class.(anonymous namespace)::Sk4px"* %13 to i8*
  %32 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %13, i64 0, i32 0, i32 0
  %33 = bitcast %"class.(anonymous namespace)::Sk4px"* %14 to i8*
  %34 = bitcast <2 x i64>* %9 to i8*
  %35 = bitcast <2 x i64>* %9 to i32*
  %36 = bitcast <2 x i64>* %9 to <16 x i8>*
  %37 = bitcast %"class.(anonymous namespace)::Sk4px"* %14 to <8 x i16>*
  %38 = bitcast %"class.(anonymous namespace)::Sk4px"* %15 to i8*
  %39 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %15, i64 0, i32 0, i32 0
  %40 = bitcast %"class.(anonymous namespace)::Sk4px"* %16 to i8*
  %41 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %16, i64 0, i32 0, i32 0
  %42 = bitcast %"class.(anonymous namespace)::Sk4px"* %17 to i8*
  %43 = bitcast <2 x i64>* %6 to i8*
  %44 = bitcast <2 x i64>* %6 to i32*
  %45 = bitcast <2 x i64>* %6 to <16 x i8>*
  %46 = bitcast %"class.(anonymous namespace)::Sk4px"* %17 to <8 x i16>*
  br label %47

47:                                               ; preds = %28, %53
  %48 = phi i32 [ %0, %28 ], [ %82, %53 ]
  %49 = phi i8* [ %3, %28 ], [ %81, %53 ]
  %50 = phi i32* [ %2, %28 ], [ %80, %53 ]
  %51 = phi i32* [ %1, %28 ], [ %79, %53 ]
  %52 = icmp sgt i32 %48, 7
  br i1 %52, label %53, label %84

53:                                               ; preds = %47
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #18
  %54 = bitcast i32* %51 to <2 x i64>*
  %55 = load <2 x i64>, <2 x i64>* %54, align 4
  store <2 x i64> %55, <2 x i64>* %30, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #18
  %56 = bitcast i32* %50 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 4
  store <2 x i64> %57, <2 x i64>* %32, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %9, align 16
  %58 = bitcast i8* %49 to i32*
  %59 = load i32, i32* %58, align 1
  store i32 %59, i32* %35, align 16
  %60 = load <16 x i8>, <16 x i8>* %36, align 16
  %61 = shufflevector <16 x i8> %60, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = bitcast <16 x i8> %61 to <8 x i16>
  %63 = shufflevector <8 x i16> %62, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34)
  store <8 x i16> %63, <8 x i16>* %37, align 16
  %64 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %12, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %13, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %14) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #18
  %65 = getelementptr inbounds i32, i32* %51, i64 4
  %66 = bitcast i32* %65 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 4
  store <2 x i64> %67, <2 x i64>* %39, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #18
  %68 = getelementptr inbounds i32, i32* %50, i64 4
  %69 = bitcast i32* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 4
  store <2 x i64> %70, <2 x i64>* %41, align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #18
  %71 = getelementptr inbounds i8, i8* %49, i64 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 1
  store i32 %73, i32* %44, align 16
  %74 = load <16 x i8>, <16 x i8>* %45, align 16
  %75 = shufflevector <16 x i8> %74, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = bitcast <16 x i8> %75 to <8 x i16>
  %77 = shufflevector <8 x i16> %76, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43)
  store <8 x i16> %77, <8 x i16>* %46, align 16
  %78 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %15, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %16, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %17) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #18
  store <2 x i64> %64, <2 x i64>* %54, align 4
  store <2 x i64> %78, <2 x i64>* %66, align 4
  %79 = getelementptr inbounds i32, i32* %51, i64 8
  %80 = getelementptr inbounds i32, i32* %50, i64 8
  %81 = getelementptr inbounds i8, i8* %49, i64 8
  %82 = add nsw i32 %48, -8
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %47, label %173

84:                                               ; preds = %47
  %85 = icmp sgt i32 %48, 3
  br i1 %85, label %86, label %111

86:                                               ; preds = %84
  %87 = bitcast %"class.(anonymous namespace)::Sk4px"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #18
  %88 = bitcast i32* %51 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 4
  %90 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %18, i64 0, i32 0, i32 0
  store <2 x i64> %89, <2 x i64>* %90, align 16
  %91 = bitcast %"class.(anonymous namespace)::Sk4px"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #18
  %92 = bitcast i32* %50 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 4
  %94 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %19, i64 0, i32 0, i32 0
  store <2 x i64> %93, <2 x i64>* %94, align 16
  %95 = bitcast %"class.(anonymous namespace)::Sk4px"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %95) #18
  %96 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %96)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %97 = bitcast i8* %49 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = bitcast <2 x i64>* %7 to i32*
  store i32 %98, i32* %99, align 16
  %100 = bitcast <2 x i64>* %7 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 16
  %102 = shufflevector <16 x i8> %101, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <16 x i8> %102 to <8 x i16>
  %104 = shufflevector <8 x i16> %103, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %96)
  %105 = bitcast %"class.(anonymous namespace)::Sk4px"* %20 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %105, align 16
  %106 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %18, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %19, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %20) #18
  store <2 x i64> %106, <2 x i64>* %88, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %95) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #18
  %107 = getelementptr inbounds i32, i32* %51, i64 4
  %108 = getelementptr inbounds i32, i32* %50, i64 4
  %109 = getelementptr inbounds i8, i8* %49, i64 4
  %110 = add nsw i32 %48, -4
  br label %111

111:                                              ; preds = %86, %84
  %112 = phi i32* [ %107, %86 ], [ %51, %84 ]
  %113 = phi i32* [ %108, %86 ], [ %50, %84 ]
  %114 = phi i8* [ %109, %86 ], [ %49, %84 ]
  %115 = phi i32 [ %110, %86 ], [ %48, %84 ]
  %116 = icmp sgt i32 %115, 1
  br i1 %116, label %117, label %146

117:                                              ; preds = %111
  %118 = bitcast %"class.(anonymous namespace)::Sk4px"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #18
  %119 = bitcast i32* %112 to i64*
  %120 = load i64, i64* %119, align 4
  %121 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %120, i32 0
  %122 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %21, i64 0, i32 0, i32 0
  store <2 x i64> %121, <2 x i64>* %122, align 16
  %123 = bitcast %"class.(anonymous namespace)::Sk4px"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %123) #18
  %124 = bitcast i32* %113 to i64*
  %125 = load i64, i64* %124, align 4
  %126 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %125, i32 0
  %127 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %22, i64 0, i32 0, i32 0
  store <2 x i64> %126, <2 x i64>* %127, align 16
  %128 = bitcast %"class.(anonymous namespace)::Sk4px"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %128) #18
  %129 = bitcast i8* %114 to i16*
  %130 = load i16, i16* %129, align 1
  %131 = zext i16 %130 to i32
  %132 = bitcast <2 x i64>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %8, align 16
  %133 = bitcast <2 x i64>* %8 to i32*
  store i32 %131, i32* %133, align 16
  %134 = bitcast <2 x i64>* %8 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 16
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = bitcast <16 x i8> %136 to <8 x i16>
  %138 = shufflevector <8 x i16> %137, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132)
  %139 = bitcast %"class.(anonymous namespace)::Sk4px"* %23 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %139, align 16
  %140 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %21, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %22, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %23) #18
  %141 = extractelement <2 x i64> %140, i32 0
  store i64 %141, i64* %119, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %128) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #18
  %142 = getelementptr inbounds i32, i32* %112, i64 2
  %143 = getelementptr inbounds i32, i32* %113, i64 2
  %144 = getelementptr inbounds i8, i8* %114, i64 2
  %145 = add nsw i32 %115, -2
  br label %146

146:                                              ; preds = %117, %111
  %147 = phi i32* [ %142, %117 ], [ %112, %111 ]
  %148 = phi i32* [ %143, %117 ], [ %113, %111 ]
  %149 = phi i8* [ %144, %117 ], [ %114, %111 ]
  %150 = phi i32 [ %145, %117 ], [ %115, %111 ]
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %152, label %173

152:                                              ; preds = %146
  %153 = bitcast %"class.(anonymous namespace)::Sk4px"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #18
  %154 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %154)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %10, align 16
  %155 = load i32, i32* %147, align 4
  %156 = bitcast <2 x i64>* %10 to i32*
  store i32 %155, i32* %156, align 16
  %157 = load <2 x i64>, <2 x i64>* %10, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %154)
  %158 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %24, i64 0, i32 0, i32 0
  store <2 x i64> %157, <2 x i64>* %158, align 16
  %159 = bitcast %"class.(anonymous namespace)::Sk4px"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %159) #18
  %160 = bitcast <2 x i64>* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %160)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %11, align 16
  %161 = load i32, i32* %148, align 4
  %162 = bitcast <2 x i64>* %11 to i32*
  store i32 %161, i32* %162, align 16
  %163 = load <2 x i64>, <2 x i64>* %11, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %160)
  %164 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %25, i64 0, i32 0, i32 0
  store <2 x i64> %163, <2 x i64>* %164, align 16
  %165 = bitcast %"class.(anonymous namespace)::Sk4px"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %165) #18
  %166 = load i8, i8* %149, align 1
  %167 = insertelement <16 x i8> undef, i8 %166, i32 0
  %168 = shufflevector <16 x i8> %167, <16 x i8> undef, <16 x i32> zeroinitializer
  %169 = bitcast %"class.(anonymous namespace)::Sk4px"* %26 to <16 x i8>*
  store <16 x i8> %168, <16 x i8>* %169, align 16
  %170 = call <2 x i64> %4(%"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %24, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %25, %"class.(anonymous namespace)::Sk4px"* nonnull dereferenceable(16) %26) #18
  %171 = bitcast <2 x i64> %170 to <4 x i32>
  %172 = extractelement <4 x i32> %171, i32 0
  store i32 %172, i32* %147, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %165) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %159) #18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #18
  br label %173

173:                                              ; preds = %53, %5, %146, %152
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_5ClearEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !264
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %10, %15
  %18 = mul <8 x i16> %11, %16
  %19 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %20 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %19, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %21 = add <8 x i16> %18, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %22 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %21, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %20, <8 x i16> %22) #18
  %24 = bitcast <16 x i8> %23 to <2 x i64>
  ret <2 x i64> %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #11

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #13

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #13

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.6"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.6"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3SrcEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.6"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %55

7:                                                ; preds = %5
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %56

9:                                                ; preds = %7, %14
  %10 = phi i32 [ %25, %14 ], [ %3, %7 ]
  %11 = phi i32* [ %24, %14 ], [ %2, %7 ]
  %12 = phi i32* [ %23, %14 ], [ %1, %7 ]
  %13 = icmp sgt i32 %10, 7
  br i1 %13, label %14, label %27

14:                                               ; preds = %9
  %15 = bitcast i32* %12 to <2 x i64>*
  %16 = bitcast i32* %11 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 4
  %18 = getelementptr inbounds i32, i32* %12, i64 4
  %19 = bitcast i32* %18 to <2 x i64>*
  %20 = getelementptr inbounds i32, i32* %11, i64 4
  %21 = bitcast i32* %20 to <2 x i64>*
  %22 = load <2 x i64>, <2 x i64>* %21, align 4
  store <2 x i64> %17, <2 x i64>* %15, align 4
  store <2 x i64> %22, <2 x i64>* %19, align 4
  %23 = getelementptr inbounds i32, i32* %12, i64 8
  %24 = getelementptr inbounds i32, i32* %11, i64 8
  %25 = add nsw i32 %10, -8
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %9, label %56

27:                                               ; preds = %9
  %28 = icmp sgt i32 %10, 3
  br i1 %28, label %29, label %36

29:                                               ; preds = %27
  %30 = bitcast i32* %12 to <2 x i64>*
  %31 = bitcast i32* %11 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 4
  store <2 x i64> %32, <2 x i64>* %30, align 4
  %33 = getelementptr inbounds i32, i32* %12, i64 4
  %34 = getelementptr inbounds i32, i32* %11, i64 4
  %35 = add nsw i32 %10, -4
  br label %36

36:                                               ; preds = %29, %27
  %37 = phi i32* [ %33, %29 ], [ %12, %27 ]
  %38 = phi i32* [ %34, %29 ], [ %11, %27 ]
  %39 = phi i32 [ %35, %29 ], [ %10, %27 ]
  %40 = icmp sgt i32 %39, 1
  br i1 %40, label %41, label %48

41:                                               ; preds = %36
  %42 = bitcast i32* %38 to i64*
  %43 = load i64, i64* %42, align 4
  %44 = bitcast i32* %37 to i64*
  store i64 %43, i64* %44, align 4
  %45 = getelementptr inbounds i32, i32* %37, i64 2
  %46 = getelementptr inbounds i32, i32* %38, i64 2
  %47 = add nsw i32 %39, -2
  br label %48

48:                                               ; preds = %41, %36
  %49 = phi i32* [ %45, %41 ], [ %37, %36 ]
  %50 = phi i32* [ %46, %41 ], [ %38, %36 ]
  %51 = phi i32 [ %47, %41 ], [ %39, %36 ]
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %48
  %54 = load i32, i32* %50, align 4
  store i32 %54, i32* %49, align 4
  br label %56

55:                                               ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_3SrcEEENS_5Sk4pxERKS2_S4_S4_)
  br label %56

56:                                               ; preds = %14, %53, %48, %7, %55
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_3SrcEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %7 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %8 = bitcast <16 x i8> %6 to <8 x i16>
  %9 = bitcast <16 x i8> %7 to <8 x i16>
  %10 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %14 = bitcast <16 x i8> %12 to <8 x i16>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = mul <8 x i16> %14, %8
  %17 = mul <8 x i16> %15, %9
  %18 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %19 = load <16 x i8>, <16 x i8>* %18, align 16, !noalias !271
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = shufflevector <16 x i8> %19, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = mul <8 x i16> %22, %27
  %30 = mul <8 x i16> %23, %28
  %31 = add <8 x i16> %16, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %32 = add <8 x i16> %31, %29
  %33 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %32, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %34 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %35 = add <8 x i16> %34, %30
  %36 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %35, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %37 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %36) #18
  %38 = bitcast <16 x i8> %37 to <2 x i64>
  ret <2 x i64> %38
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.8"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.8"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3DstEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.8"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %5, %8
  ret void

8:                                                ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_3DstEEENS_5Sk4pxERKS2_S4_S4_)
  br label %7
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_3DstEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readnone dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %7 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %8 = bitcast <16 x i8> %6 to <8 x i16>
  %9 = bitcast <16 x i8> %7 to <8 x i16>
  %10 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %14 = bitcast <16 x i8> %12 to <8 x i16>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = mul <8 x i16> %14, %8
  %17 = mul <8 x i16> %15, %9
  %18 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = mul <8 x i16> %8, %21
  %24 = mul <8 x i16> %9, %22
  %25 = add <8 x i16> %16, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %26 = add <8 x i16> %25, %23
  %27 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %26, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %28 = add <8 x i16> %17, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %29 = add <8 x i16> %28, %24
  %30 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %29, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %31 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %27, <8 x i16> %30) #18
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  ret <2 x i64> %32
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.10"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.10"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcOverEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.10"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %202

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %203

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %85, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %84, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %83, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %87

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 4
  %21 = bitcast <2 x i64> %20 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %20 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %36, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = mul <8 x i16> %39, %34
  %42 = mul <8 x i16> %40, %35
  %43 = add <8 x i16> %41, %34
  %44 = add <8 x i16> %42, %35
  %45 = lshr <8 x i16> %43, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = lshr <8 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %47 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> %46) #18
  %48 = add <16 x i8> %47, %23
  %49 = getelementptr inbounds i32, i32* %14, i64 4
  %50 = bitcast i32* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 4
  %52 = getelementptr inbounds i32, i32* %13, i64 4
  %53 = bitcast i32* %52 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 4
  %55 = bitcast <2 x i64> %54 to <4 x i32>
  %56 = lshr <4 x i32> %55, <i32 8, i32 8, i32 8, i32 8>
  %57 = bitcast <2 x i64> %54 to <16 x i8>
  %58 = bitcast <4 x i32> %56 to <16 x i8>
  %59 = icmp ugt <16 x i8> %57, %58
  %60 = select <16 x i1> %59, <16 x i8> %57, <16 x i8> %58
  %61 = bitcast <16 x i8> %60 to <4 x i32>
  %62 = lshr <4 x i32> %61, <i32 16, i32 16, i32 16, i32 16>
  %63 = bitcast <4 x i32> %62 to <16 x i8>
  %64 = icmp ugt <16 x i8> %60, %63
  %65 = select <16 x i1> %64, <16 x i8> %60, <16 x i8> %63
  %66 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = shufflevector <16 x i8> %51, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <16 x i8> %66 to <8 x i16>
  %69 = bitcast <16 x i8> %67 to <8 x i16>
  %70 = xor <16 x i8> %65, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = mul <8 x i16> %73, %68
  %76 = mul <8 x i16> %74, %69
  %77 = add <8 x i16> %75, %68
  %78 = add <8 x i16> %76, %69
  %79 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = lshr <8 x i16> %78, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %81 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %79, <8 x i16> %80) #18
  %82 = add <16 x i8> %81, %57
  store <16 x i8> %48, <16 x i8>* %17, align 4
  store <16 x i8> %82, <16 x i8>* %50, align 4
  %83 = getelementptr inbounds i32, i32* %14, i64 8
  %84 = getelementptr inbounds i32, i32* %13, i64 8
  %85 = add nsw i32 %12, -8
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %11, label %203

87:                                               ; preds = %11
  %88 = icmp sgt i32 %12, 3
  br i1 %88, label %89, label %125

89:                                               ; preds = %87
  %90 = bitcast i32* %14 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 4
  %92 = bitcast i32* %13 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 4
  %94 = bitcast <2 x i64> %93 to <4 x i32>
  %95 = lshr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %96 = bitcast <2 x i64> %93 to <16 x i8>
  %97 = bitcast <4 x i32> %95 to <16 x i8>
  %98 = icmp ugt <16 x i8> %96, %97
  %99 = select <16 x i1> %98, <16 x i8> %96, <16 x i8> %97
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = lshr <4 x i32> %100, <i32 16, i32 16, i32 16, i32 16>
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = icmp ugt <16 x i8> %99, %102
  %104 = select <16 x i1> %103, <16 x i8> %99, <16 x i8> %102
  %105 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %91, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = bitcast <16 x i8> %105 to <8 x i16>
  %108 = bitcast <16 x i8> %106 to <8 x i16>
  %109 = xor <16 x i8> %104, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %109, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = bitcast <16 x i8> %110 to <8 x i16>
  %113 = bitcast <16 x i8> %111 to <8 x i16>
  %114 = mul <8 x i16> %112, %107
  %115 = mul <8 x i16> %113, %108
  %116 = add <8 x i16> %114, %107
  %117 = add <8 x i16> %115, %108
  %118 = lshr <8 x i16> %116, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %119 = lshr <8 x i16> %117, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %118, <8 x i16> %119) #18
  %121 = add <16 x i8> %120, %96
  store <16 x i8> %121, <16 x i8>* %90, align 4
  %122 = getelementptr inbounds i32, i32* %14, i64 4
  %123 = getelementptr inbounds i32, i32* %13, i64 4
  %124 = add nsw i32 %12, -4
  br label %125

125:                                              ; preds = %89, %87
  %126 = phi i32* [ %122, %89 ], [ %14, %87 ]
  %127 = phi i32* [ %123, %89 ], [ %13, %87 ]
  %128 = phi i32 [ %124, %89 ], [ %12, %87 ]
  %129 = icmp sgt i32 %128, 1
  br i1 %129, label %130, label %164

130:                                              ; preds = %125
  %131 = bitcast i32* %126 to i64*
  %132 = load i64, i64* %131, align 4
  %133 = insertelement <2 x i64> undef, i64 %132, i32 0
  %134 = bitcast i32* %127 to i64*
  %135 = load i64, i64* %134, align 4
  %136 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %135, i32 0
  %137 = bitcast <2 x i64> %136 to <4 x i32>
  %138 = lshr <4 x i32> %137, <i32 8, i32 8, i32 8, i32 8>
  %139 = bitcast <2 x i64> %136 to <16 x i8>
  %140 = bitcast <4 x i32> %138 to <16 x i8>
  %141 = icmp ugt <16 x i8> %139, %140
  %142 = select <16 x i1> %141, <16 x i8> %139, <16 x i8> %140
  %143 = bitcast <16 x i8> %142 to <4 x i32>
  %144 = lshr <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = icmp ugt <16 x i8> %142, %145
  %147 = select <16 x i1> %146, <16 x i8> %142, <16 x i8> %145
  %148 = bitcast <2 x i64> %133 to <16 x i8>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %150 = bitcast <16 x i8> %149 to <8 x i16>
  %151 = xor <16 x i8> %147, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = mul <8 x i16> %153, %150
  %155 = add <8 x i16> %154, %150
  %156 = lshr <8 x i16> %155, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %157 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %156, <8 x i16> undef) #18
  %158 = add <16 x i8> %157, %139
  %159 = bitcast <16 x i8> %158 to <2 x i64>
  %160 = extractelement <2 x i64> %159, i32 0
  store i64 %160, i64* %131, align 4
  %161 = getelementptr inbounds i32, i32* %126, i64 2
  %162 = getelementptr inbounds i32, i32* %127, i64 2
  %163 = add nsw i32 %128, -2
  br label %164

164:                                              ; preds = %130, %125
  %165 = phi i32* [ %161, %130 ], [ %126, %125 ]
  %166 = phi i32* [ %162, %130 ], [ %127, %125 ]
  %167 = phi i32 [ %163, %130 ], [ %128, %125 ]
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %203

169:                                              ; preds = %164
  %170 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %170)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %171 = load i32, i32* %165, align 4
  %172 = bitcast <2 x i64>* %6 to i32*
  store i32 %171, i32* %172, align 16
  %173 = bitcast <2 x i64>* %6 to <16 x i8>*
  %174 = load <16 x i8>, <16 x i8>* %173, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %170)
  %175 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %175)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %176 = load i32, i32* %166, align 4
  %177 = bitcast <2 x i64>* %7 to i32*
  store i32 %176, i32* %177, align 16
  %178 = load <2 x i64>, <2 x i64>* %7, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %175)
  %179 = bitcast <2 x i64> %178 to <4 x i32>
  %180 = lshr <4 x i32> %179, <i32 8, i32 8, i32 8, i32 8>
  %181 = bitcast <2 x i64> %178 to <16 x i8>
  %182 = bitcast <4 x i32> %180 to <16 x i8>
  %183 = icmp ugt <16 x i8> %181, %182
  %184 = select <16 x i1> %183, <16 x i8> %181, <16 x i8> %182
  %185 = bitcast <16 x i8> %184 to <4 x i32>
  %186 = lshr <4 x i32> %185, <i32 16, i32 16, i32 16, i32 16>
  %187 = bitcast <4 x i32> %186 to <16 x i8>
  %188 = icmp ugt <16 x i8> %184, %187
  %189 = select <16 x i1> %188, <16 x i8> %184, <16 x i8> %187
  %190 = shufflevector <16 x i8> %174, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %191 = bitcast <16 x i8> %190 to <8 x i16>
  %192 = xor <16 x i8> %189, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %193 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = bitcast <16 x i8> %193 to <8 x i16>
  %195 = mul <8 x i16> %194, %191
  %196 = add <8 x i16> %195, %191
  %197 = lshr <8 x i16> %196, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %198 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %197, <8 x i16> undef) #18
  %199 = add <16 x i8> %198, %181
  %200 = bitcast <16 x i8> %199 to <4 x i32>
  %201 = extractelement <4 x i32> %200, i32 0
  store i32 %201, i32* %165, align 4
  br label %203

202:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcOverEEENS_5Sk4pxERKS2_S4_S4_)
  br label %203

203:                                              ; preds = %16, %169, %164, %9, %202
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcOverEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %1, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !278
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %16, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %26, %21
  %29 = mul <8 x i16> %27, %22
  %30 = add <8 x i16> %28, %21
  %31 = add <8 x i16> %29, %22
  %32 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = lshr <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %32, <8 x i16> %33) #18
  %35 = add <16 x i8> %34, %8
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %35, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 16
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = mul <8 x i16> %44, %38
  %47 = mul <8 x i16> %45, %39
  %48 = xor <16 x i8> %41, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = mul <8 x i16> %51, %21
  %54 = mul <8 x i16> %52, %22
  %55 = add <8 x i16> %46, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %56 = add <8 x i16> %55, %53
  %57 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %56, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %58 = add <8 x i16> %47, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %59 = add <8 x i16> %58, %54
  %60 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %59, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %60) #18
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  ret <2 x i64> %62
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.12"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.12"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstOverEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.12"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %205

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %206

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %87, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %86, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %85, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %89

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %18 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %36, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = mul <8 x i16> %39, %34
  %42 = mul <8 x i16> %40, %35
  %43 = add <8 x i16> %41, %34
  %44 = add <8 x i16> %42, %35
  %45 = lshr <8 x i16> %43, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = lshr <8 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %47 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> %46) #18
  %48 = add <16 x i8> %47, %23
  %49 = getelementptr inbounds i32, i32* %14, i64 4
  %50 = bitcast i32* %49 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 4
  %52 = getelementptr inbounds i32, i32* %13, i64 4
  %53 = bitcast i32* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 4
  %55 = bitcast <2 x i64> %51 to <4 x i32>
  %56 = lshr <4 x i32> %55, <i32 8, i32 8, i32 8, i32 8>
  %57 = bitcast <2 x i64> %51 to <16 x i8>
  %58 = bitcast <4 x i32> %56 to <16 x i8>
  %59 = icmp ugt <16 x i8> %57, %58
  %60 = select <16 x i1> %59, <16 x i8> %57, <16 x i8> %58
  %61 = bitcast <16 x i8> %60 to <4 x i32>
  %62 = lshr <4 x i32> %61, <i32 16, i32 16, i32 16, i32 16>
  %63 = bitcast <4 x i32> %62 to <16 x i8>
  %64 = icmp ugt <16 x i8> %60, %63
  %65 = select <16 x i1> %64, <16 x i8> %60, <16 x i8> %63
  %66 = shufflevector <16 x i8> %54, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = shufflevector <16 x i8> %54, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <16 x i8> %66 to <8 x i16>
  %69 = bitcast <16 x i8> %67 to <8 x i16>
  %70 = xor <16 x i8> %65, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = mul <8 x i16> %73, %68
  %76 = mul <8 x i16> %74, %69
  %77 = add <8 x i16> %75, %68
  %78 = add <8 x i16> %76, %69
  %79 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = lshr <8 x i16> %78, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %81 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %79, <8 x i16> %80) #18
  %82 = add <16 x i8> %81, %57
  %83 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %48, <16 x i8>* %83, align 4
  %84 = bitcast i32* %49 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 4
  %85 = getelementptr inbounds i32, i32* %14, i64 8
  %86 = getelementptr inbounds i32, i32* %13, i64 8
  %87 = add nsw i32 %12, -8
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %11, label %206

89:                                               ; preds = %11
  %90 = icmp sgt i32 %12, 3
  br i1 %90, label %91, label %128

91:                                               ; preds = %89
  %92 = bitcast i32* %14 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 4
  %94 = bitcast i32* %13 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 4
  %96 = bitcast <2 x i64> %93 to <4 x i32>
  %97 = lshr <4 x i32> %96, <i32 8, i32 8, i32 8, i32 8>
  %98 = bitcast <2 x i64> %93 to <16 x i8>
  %99 = bitcast <4 x i32> %97 to <16 x i8>
  %100 = icmp ugt <16 x i8> %98, %99
  %101 = select <16 x i1> %100, <16 x i8> %98, <16 x i8> %99
  %102 = bitcast <16 x i8> %101 to <4 x i32>
  %103 = lshr <4 x i32> %102, <i32 16, i32 16, i32 16, i32 16>
  %104 = bitcast <4 x i32> %103 to <16 x i8>
  %105 = icmp ugt <16 x i8> %101, %104
  %106 = select <16 x i1> %105, <16 x i8> %101, <16 x i8> %104
  %107 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = bitcast <16 x i8> %108 to <8 x i16>
  %111 = xor <16 x i8> %106, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %112 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = bitcast <16 x i8> %113 to <8 x i16>
  %116 = mul <8 x i16> %114, %109
  %117 = mul <8 x i16> %115, %110
  %118 = add <8 x i16> %116, %109
  %119 = add <8 x i16> %117, %110
  %120 = lshr <8 x i16> %118, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %121 = lshr <8 x i16> %119, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %122 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %120, <8 x i16> %121) #18
  %123 = add <16 x i8> %122, %98
  %124 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %123, <16 x i8>* %124, align 4
  %125 = getelementptr inbounds i32, i32* %14, i64 4
  %126 = getelementptr inbounds i32, i32* %13, i64 4
  %127 = add nsw i32 %12, -4
  br label %128

128:                                              ; preds = %91, %89
  %129 = phi i32* [ %125, %91 ], [ %14, %89 ]
  %130 = phi i32* [ %126, %91 ], [ %13, %89 ]
  %131 = phi i32 [ %127, %91 ], [ %12, %89 ]
  %132 = icmp sgt i32 %131, 1
  br i1 %132, label %133, label %167

133:                                              ; preds = %128
  %134 = bitcast i32* %129 to i64*
  %135 = load i64, i64* %134, align 4
  %136 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %135, i32 0
  %137 = bitcast i32* %130 to i64*
  %138 = load i64, i64* %137, align 4
  %139 = insertelement <2 x i64> undef, i64 %138, i32 0
  %140 = bitcast <2 x i64> %136 to <4 x i32>
  %141 = lshr <4 x i32> %140, <i32 8, i32 8, i32 8, i32 8>
  %142 = bitcast <2 x i64> %136 to <16 x i8>
  %143 = bitcast <4 x i32> %141 to <16 x i8>
  %144 = icmp ugt <16 x i8> %142, %143
  %145 = select <16 x i1> %144, <16 x i8> %142, <16 x i8> %143
  %146 = bitcast <16 x i8> %145 to <4 x i32>
  %147 = lshr <4 x i32> %146, <i32 16, i32 16, i32 16, i32 16>
  %148 = bitcast <4 x i32> %147 to <16 x i8>
  %149 = icmp ugt <16 x i8> %145, %148
  %150 = select <16 x i1> %149, <16 x i8> %145, <16 x i8> %148
  %151 = bitcast <2 x i64> %139 to <16 x i8>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = xor <16 x i8> %150, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %156 = bitcast <16 x i8> %155 to <8 x i16>
  %157 = mul <8 x i16> %156, %153
  %158 = add <8 x i16> %157, %153
  %159 = lshr <8 x i16> %158, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %160 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %159, <8 x i16> undef) #18
  %161 = add <16 x i8> %160, %142
  %162 = bitcast <16 x i8> %161 to <2 x i64>
  %163 = extractelement <2 x i64> %162, i32 0
  store i64 %163, i64* %134, align 4
  %164 = getelementptr inbounds i32, i32* %129, i64 2
  %165 = getelementptr inbounds i32, i32* %130, i64 2
  %166 = add nsw i32 %131, -2
  br label %167

167:                                              ; preds = %133, %128
  %168 = phi i32* [ %164, %133 ], [ %129, %128 ]
  %169 = phi i32* [ %165, %133 ], [ %130, %128 ]
  %170 = phi i32 [ %166, %133 ], [ %131, %128 ]
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %206

172:                                              ; preds = %167
  %173 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %173)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %174 = load i32, i32* %168, align 4
  %175 = bitcast <2 x i64>* %6 to i32*
  store i32 %174, i32* %175, align 16
  %176 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %173)
  %177 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %177)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %178 = load i32, i32* %169, align 4
  %179 = bitcast <2 x i64>* %7 to i32*
  store i32 %178, i32* %179, align 16
  %180 = bitcast <2 x i64>* %7 to <16 x i8>*
  %181 = load <16 x i8>, <16 x i8>* %180, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %177)
  %182 = bitcast <2 x i64> %176 to <4 x i32>
  %183 = lshr <4 x i32> %182, <i32 8, i32 8, i32 8, i32 8>
  %184 = bitcast <2 x i64> %176 to <16 x i8>
  %185 = bitcast <4 x i32> %183 to <16 x i8>
  %186 = icmp ugt <16 x i8> %184, %185
  %187 = select <16 x i1> %186, <16 x i8> %184, <16 x i8> %185
  %188 = bitcast <16 x i8> %187 to <4 x i32>
  %189 = lshr <4 x i32> %188, <i32 16, i32 16, i32 16, i32 16>
  %190 = bitcast <4 x i32> %189 to <16 x i8>
  %191 = icmp ugt <16 x i8> %187, %190
  %192 = select <16 x i1> %191, <16 x i8> %187, <16 x i8> %190
  %193 = shufflevector <16 x i8> %181, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %194 = bitcast <16 x i8> %193 to <8 x i16>
  %195 = xor <16 x i8> %192, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %196 = shufflevector <16 x i8> %195, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %197 = bitcast <16 x i8> %196 to <8 x i16>
  %198 = mul <8 x i16> %197, %194
  %199 = add <8 x i16> %198, %194
  %200 = lshr <8 x i16> %199, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %201 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %200, <8 x i16> undef) #18
  %202 = add <16 x i8> %201, %184
  %203 = bitcast <16 x i8> %202 to <4 x i32>
  %204 = extractelement <4 x i32> %203, i32 0
  store i32 %204, i32* %168, align 4
  br label %206

205:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7DstOverEEENS_5Sk4pxERKS2_S4_S4_)
  br label %206

206:                                              ; preds = %16, %172, %167, %9, %205
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7DstOverEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %0, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !281
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %16, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %26, %21
  %29 = mul <8 x i16> %27, %22
  %30 = add <8 x i16> %28, %21
  %31 = add <8 x i16> %29, %22
  %32 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = lshr <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %32, <8 x i16> %33) #18
  %35 = add <16 x i8> %34, %8
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %35, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 16
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = mul <8 x i16> %44, %38
  %47 = mul <8 x i16> %45, %39
  %48 = bitcast <2 x i64> %5 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = xor <16 x i8> %41, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %54 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %55 = shufflevector <16 x i8> %53, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %56 = bitcast <16 x i8> %54 to <8 x i16>
  %57 = bitcast <16 x i8> %55 to <8 x i16>
  %58 = mul <8 x i16> %51, %56
  %59 = mul <8 x i16> %52, %57
  %60 = add <8 x i16> %46, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %61 = add <8 x i16> %60, %58
  %62 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %61, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %63 = add <8 x i16> %47, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %64 = add <8 x i16> %63, %59
  %65 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %64, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %66 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> %65) #18
  %67 = bitcast <16 x i8> %66 to <2 x i64>
  ret <2 x i64> %67
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.14"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.14"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5SrcInEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.14"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %195

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %196

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %83, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %82, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %81, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %85

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %18 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = mul <8 x i16> %38, %34
  %41 = mul <8 x i16> %39, %35
  %42 = add <8 x i16> %40, %34
  %43 = add <8 x i16> %41, %35
  %44 = lshr <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %45 = lshr <8 x i16> %43, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> %45) #18
  %47 = getelementptr inbounds i32, i32* %14, i64 4
  %48 = bitcast i32* %47 to <2 x i64>*
  %49 = load <2 x i64>, <2 x i64>* %48, align 4
  %50 = getelementptr inbounds i32, i32* %13, i64 4
  %51 = bitcast i32* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 4
  %53 = bitcast <2 x i64> %49 to <4 x i32>
  %54 = lshr <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <2 x i64> %49 to <16 x i8>
  %56 = bitcast <4 x i32> %54 to <16 x i8>
  %57 = icmp ugt <16 x i8> %55, %56
  %58 = select <16 x i1> %57, <16 x i8> %55, <16 x i8> %56
  %59 = bitcast <16 x i8> %58 to <4 x i32>
  %60 = lshr <4 x i32> %59, <i32 16, i32 16, i32 16, i32 16>
  %61 = bitcast <4 x i32> %60 to <16 x i8>
  %62 = icmp ugt <16 x i8> %58, %61
  %63 = select <16 x i1> %62, <16 x i8> %58, <16 x i8> %61
  %64 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = shufflevector <16 x i8> %52, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %63, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i8> %68 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = mul <8 x i16> %70, %66
  %73 = mul <8 x i16> %71, %67
  %74 = add <8 x i16> %72, %66
  %75 = add <8 x i16> %73, %67
  %76 = lshr <8 x i16> %74, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %77 = lshr <8 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %78 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %76, <8 x i16> %77) #18
  %79 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %79, align 4
  %80 = bitcast i32* %47 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %80, align 4
  %81 = getelementptr inbounds i32, i32* %14, i64 8
  %82 = getelementptr inbounds i32, i32* %13, i64 8
  %83 = add nsw i32 %12, -8
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %11, label %196

85:                                               ; preds = %11
  %86 = icmp sgt i32 %12, 3
  br i1 %86, label %87, label %122

87:                                               ; preds = %85
  %88 = bitcast i32* %14 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 4
  %90 = bitcast i32* %13 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 4
  %92 = bitcast <2 x i64> %89 to <4 x i32>
  %93 = lshr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %94 = bitcast <2 x i64> %89 to <16 x i8>
  %95 = bitcast <4 x i32> %93 to <16 x i8>
  %96 = icmp ugt <16 x i8> %94, %95
  %97 = select <16 x i1> %96, <16 x i8> %94, <16 x i8> %95
  %98 = bitcast <16 x i8> %97 to <4 x i32>
  %99 = lshr <4 x i32> %98, <i32 16, i32 16, i32 16, i32 16>
  %100 = bitcast <4 x i32> %99 to <16 x i8>
  %101 = icmp ugt <16 x i8> %97, %100
  %102 = select <16 x i1> %101, <16 x i8> %97, <16 x i8> %100
  %103 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %91, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = bitcast <16 x i8> %104 to <8 x i16>
  %107 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = shufflevector <16 x i8> %102, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = bitcast <16 x i8> %108 to <8 x i16>
  %111 = mul <8 x i16> %109, %105
  %112 = mul <8 x i16> %110, %106
  %113 = add <8 x i16> %111, %105
  %114 = add <8 x i16> %112, %106
  %115 = lshr <8 x i16> %113, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %116 = lshr <8 x i16> %114, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %117 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %115, <8 x i16> %116) #18
  %118 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %118, align 4
  %119 = getelementptr inbounds i32, i32* %14, i64 4
  %120 = getelementptr inbounds i32, i32* %13, i64 4
  %121 = add nsw i32 %12, -4
  br label %122

122:                                              ; preds = %87, %85
  %123 = phi i32* [ %119, %87 ], [ %14, %85 ]
  %124 = phi i32* [ %120, %87 ], [ %13, %85 ]
  %125 = phi i32 [ %121, %87 ], [ %12, %85 ]
  %126 = icmp sgt i32 %125, 1
  br i1 %126, label %127, label %159

127:                                              ; preds = %122
  %128 = bitcast i32* %123 to i64*
  %129 = load i64, i64* %128, align 4
  %130 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %129, i32 0
  %131 = bitcast i32* %124 to i64*
  %132 = load i64, i64* %131, align 4
  %133 = insertelement <2 x i64> undef, i64 %132, i32 0
  %134 = bitcast <2 x i64> %130 to <4 x i32>
  %135 = lshr <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %136 = bitcast <2 x i64> %130 to <16 x i8>
  %137 = bitcast <4 x i32> %135 to <16 x i8>
  %138 = icmp ugt <16 x i8> %136, %137
  %139 = select <16 x i1> %138, <16 x i8> %136, <16 x i8> %137
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = lshr <4 x i32> %140, <i32 16, i32 16, i32 16, i32 16>
  %142 = bitcast <4 x i32> %141 to <16 x i8>
  %143 = icmp ugt <16 x i8> %139, %142
  %144 = select <16 x i1> %143, <16 x i8> %139, <16 x i8> %142
  %145 = bitcast <2 x i64> %133 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %149 = bitcast <16 x i8> %148 to <8 x i16>
  %150 = mul <8 x i16> %149, %147
  %151 = add <8 x i16> %150, %147
  %152 = lshr <8 x i16> %151, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %153 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %152, <8 x i16> undef) #18
  %154 = bitcast <16 x i8> %153 to <2 x i64>
  %155 = extractelement <2 x i64> %154, i32 0
  store i64 %155, i64* %128, align 4
  %156 = getelementptr inbounds i32, i32* %123, i64 2
  %157 = getelementptr inbounds i32, i32* %124, i64 2
  %158 = add nsw i32 %125, -2
  br label %159

159:                                              ; preds = %127, %122
  %160 = phi i32* [ %156, %127 ], [ %123, %122 ]
  %161 = phi i32* [ %157, %127 ], [ %124, %122 ]
  %162 = phi i32 [ %158, %127 ], [ %125, %122 ]
  %163 = icmp sgt i32 %162, 0
  br i1 %163, label %164, label %196

164:                                              ; preds = %159
  %165 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %165)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %166 = load i32, i32* %160, align 4
  %167 = bitcast <2 x i64>* %6 to i32*
  store i32 %166, i32* %167, align 16
  %168 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %165)
  %169 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %169)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %170 = load i32, i32* %161, align 4
  %171 = bitcast <2 x i64>* %7 to i32*
  store i32 %170, i32* %171, align 16
  %172 = bitcast <2 x i64>* %7 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %169)
  %174 = bitcast <2 x i64> %168 to <4 x i32>
  %175 = lshr <4 x i32> %174, <i32 8, i32 8, i32 8, i32 8>
  %176 = bitcast <2 x i64> %168 to <16 x i8>
  %177 = bitcast <4 x i32> %175 to <16 x i8>
  %178 = icmp ugt <16 x i8> %176, %177
  %179 = select <16 x i1> %178, <16 x i8> %176, <16 x i8> %177
  %180 = bitcast <16 x i8> %179 to <4 x i32>
  %181 = lshr <4 x i32> %180, <i32 16, i32 16, i32 16, i32 16>
  %182 = bitcast <4 x i32> %181 to <16 x i8>
  %183 = icmp ugt <16 x i8> %179, %182
  %184 = select <16 x i1> %183, <16 x i8> %179, <16 x i8> %182
  %185 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %186 = bitcast <16 x i8> %185 to <8 x i16>
  %187 = shufflevector <16 x i8> %184, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %188 = bitcast <16 x i8> %187 to <8 x i16>
  %189 = mul <8 x i16> %188, %186
  %190 = add <8 x i16> %189, %186
  %191 = lshr <8 x i16> %190, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %192 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %191, <8 x i16> undef) #18
  %193 = bitcast <16 x i8> %192 to <4 x i32>
  %194 = extractelement <4 x i32> %193, i32 0
  store i32 %194, i32* %160, align 4
  br label %196

195:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_5SrcInEEENS_5Sk4pxERKS2_S4_S4_)
  br label %196

196:                                              ; preds = %16, %164, %159, %9, %195
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_5SrcInEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %0, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !284
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %16, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = mul <8 x i16> %25, %21
  %28 = mul <8 x i16> %26, %22
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = lshr <8 x i16> %29, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %31, <8 x i16> %32) #18
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %33, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = bitcast <16 x i8> %34 to <8 x i16>
  %37 = bitcast <16 x i8> %35 to <8 x i16>
  %38 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 16
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %39, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = bitcast <16 x i8> %41 to <8 x i16>
  %44 = mul <8 x i16> %42, %36
  %45 = mul <8 x i16> %43, %37
  %46 = bitcast <2 x i64> %5 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = shufflevector <16 x i8> %46, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = bitcast <16 x i8> %47 to <8 x i16>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = xor <16 x i8> %39, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %51, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = mul <8 x i16> %49, %54
  %57 = mul <8 x i16> %50, %55
  %58 = add <8 x i16> %44, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %59 = add <8 x i16> %58, %56
  %60 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %59, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %61 = add <8 x i16> %45, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %62 = add <8 x i16> %61, %57
  %63 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %62, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %64 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> %63) #18
  %65 = bitcast <16 x i8> %64 to <2 x i64>
  ret <2 x i64> %65
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.16"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.16"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_5DstInEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.16"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %192

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %193

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %81, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %80, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %79, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %83

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 4
  %21 = bitcast <2 x i64> %20 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %20 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = mul <8 x i16> %38, %34
  %41 = mul <8 x i16> %39, %35
  %42 = add <8 x i16> %40, %34
  %43 = add <8 x i16> %41, %35
  %44 = lshr <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %45 = lshr <8 x i16> %43, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> %45) #18
  %47 = getelementptr inbounds i32, i32* %14, i64 4
  %48 = bitcast i32* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 4
  %50 = getelementptr inbounds i32, i32* %13, i64 4
  %51 = bitcast i32* %50 to <2 x i64>*
  %52 = load <2 x i64>, <2 x i64>* %51, align 4
  %53 = bitcast <2 x i64> %52 to <4 x i32>
  %54 = lshr <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %55 = bitcast <2 x i64> %52 to <16 x i8>
  %56 = bitcast <4 x i32> %54 to <16 x i8>
  %57 = icmp ugt <16 x i8> %55, %56
  %58 = select <16 x i1> %57, <16 x i8> %55, <16 x i8> %56
  %59 = bitcast <16 x i8> %58 to <4 x i32>
  %60 = lshr <4 x i32> %59, <i32 16, i32 16, i32 16, i32 16>
  %61 = bitcast <4 x i32> %60 to <16 x i8>
  %62 = icmp ugt <16 x i8> %58, %61
  %63 = select <16 x i1> %62, <16 x i8> %58, <16 x i8> %61
  %64 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = shufflevector <16 x i8> %49, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %63, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i8> %68 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = mul <8 x i16> %70, %66
  %73 = mul <8 x i16> %71, %67
  %74 = add <8 x i16> %72, %66
  %75 = add <8 x i16> %73, %67
  %76 = lshr <8 x i16> %74, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %77 = lshr <8 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %78 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %76, <8 x i16> %77) #18
  store <16 x i8> %46, <16 x i8>* %17, align 4
  store <16 x i8> %78, <16 x i8>* %48, align 4
  %79 = getelementptr inbounds i32, i32* %14, i64 8
  %80 = getelementptr inbounds i32, i32* %13, i64 8
  %81 = add nsw i32 %12, -8
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %11, label %193

83:                                               ; preds = %11
  %84 = icmp sgt i32 %12, 3
  br i1 %84, label %85, label %119

85:                                               ; preds = %83
  %86 = bitcast i32* %14 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 4
  %88 = bitcast i32* %13 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 4
  %90 = bitcast <2 x i64> %89 to <4 x i32>
  %91 = lshr <4 x i32> %90, <i32 8, i32 8, i32 8, i32 8>
  %92 = bitcast <2 x i64> %89 to <16 x i8>
  %93 = bitcast <4 x i32> %91 to <16 x i8>
  %94 = icmp ugt <16 x i8> %92, %93
  %95 = select <16 x i1> %94, <16 x i8> %92, <16 x i8> %93
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = lshr <4 x i32> %96, <i32 16, i32 16, i32 16, i32 16>
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = icmp ugt <16 x i8> %95, %98
  %100 = select <16 x i1> %99, <16 x i8> %95, <16 x i8> %98
  %101 = shufflevector <16 x i8> %87, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = shufflevector <16 x i8> %87, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %103 = bitcast <16 x i8> %101 to <8 x i16>
  %104 = bitcast <16 x i8> %102 to <8 x i16>
  %105 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %100, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = bitcast <16 x i8> %105 to <8 x i16>
  %108 = bitcast <16 x i8> %106 to <8 x i16>
  %109 = mul <8 x i16> %107, %103
  %110 = mul <8 x i16> %108, %104
  %111 = add <8 x i16> %109, %103
  %112 = add <8 x i16> %110, %104
  %113 = lshr <8 x i16> %111, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %114 = lshr <8 x i16> %112, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %113, <8 x i16> %114) #18
  store <16 x i8> %115, <16 x i8>* %86, align 4
  %116 = getelementptr inbounds i32, i32* %14, i64 4
  %117 = getelementptr inbounds i32, i32* %13, i64 4
  %118 = add nsw i32 %12, -4
  br label %119

119:                                              ; preds = %85, %83
  %120 = phi i32* [ %116, %85 ], [ %14, %83 ]
  %121 = phi i32* [ %117, %85 ], [ %13, %83 ]
  %122 = phi i32 [ %118, %85 ], [ %12, %83 ]
  %123 = icmp sgt i32 %122, 1
  br i1 %123, label %124, label %156

124:                                              ; preds = %119
  %125 = bitcast i32* %120 to i64*
  %126 = load i64, i64* %125, align 4
  %127 = insertelement <2 x i64> undef, i64 %126, i32 0
  %128 = bitcast i32* %121 to i64*
  %129 = load i64, i64* %128, align 4
  %130 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %129, i32 0
  %131 = bitcast <2 x i64> %130 to <4 x i32>
  %132 = lshr <4 x i32> %131, <i32 8, i32 8, i32 8, i32 8>
  %133 = bitcast <2 x i64> %130 to <16 x i8>
  %134 = bitcast <4 x i32> %132 to <16 x i8>
  %135 = icmp ugt <16 x i8> %133, %134
  %136 = select <16 x i1> %135, <16 x i8> %133, <16 x i8> %134
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = lshr <4 x i32> %137, <i32 16, i32 16, i32 16, i32 16>
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = icmp ugt <16 x i8> %136, %139
  %141 = select <16 x i1> %140, <16 x i8> %136, <16 x i8> %139
  %142 = bitcast <2 x i64> %127 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = bitcast <16 x i8> %143 to <8 x i16>
  %145 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %146 = bitcast <16 x i8> %145 to <8 x i16>
  %147 = mul <8 x i16> %146, %144
  %148 = add <8 x i16> %147, %144
  %149 = lshr <8 x i16> %148, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %150 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %149, <8 x i16> undef) #18
  %151 = bitcast <16 x i8> %150 to <2 x i64>
  %152 = extractelement <2 x i64> %151, i32 0
  store i64 %152, i64* %125, align 4
  %153 = getelementptr inbounds i32, i32* %120, i64 2
  %154 = getelementptr inbounds i32, i32* %121, i64 2
  %155 = add nsw i32 %122, -2
  br label %156

156:                                              ; preds = %124, %119
  %157 = phi i32* [ %153, %124 ], [ %120, %119 ]
  %158 = phi i32* [ %154, %124 ], [ %121, %119 ]
  %159 = phi i32 [ %155, %124 ], [ %122, %119 ]
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %161, label %193

161:                                              ; preds = %156
  %162 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %162)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %163 = load i32, i32* %157, align 4
  %164 = bitcast <2 x i64>* %6 to i32*
  store i32 %163, i32* %164, align 16
  %165 = bitcast <2 x i64>* %6 to <16 x i8>*
  %166 = load <16 x i8>, <16 x i8>* %165, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %162)
  %167 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %167)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %168 = load i32, i32* %158, align 4
  %169 = bitcast <2 x i64>* %7 to i32*
  store i32 %168, i32* %169, align 16
  %170 = load <2 x i64>, <2 x i64>* %7, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %167)
  %171 = bitcast <2 x i64> %170 to <4 x i32>
  %172 = lshr <4 x i32> %171, <i32 8, i32 8, i32 8, i32 8>
  %173 = bitcast <2 x i64> %170 to <16 x i8>
  %174 = bitcast <4 x i32> %172 to <16 x i8>
  %175 = icmp ugt <16 x i8> %173, %174
  %176 = select <16 x i1> %175, <16 x i8> %173, <16 x i8> %174
  %177 = bitcast <16 x i8> %176 to <4 x i32>
  %178 = lshr <4 x i32> %177, <i32 16, i32 16, i32 16, i32 16>
  %179 = bitcast <4 x i32> %178 to <16 x i8>
  %180 = icmp ugt <16 x i8> %176, %179
  %181 = select <16 x i1> %180, <16 x i8> %176, <16 x i8> %179
  %182 = shufflevector <16 x i8> %166, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %183 = bitcast <16 x i8> %182 to <8 x i16>
  %184 = shufflevector <16 x i8> %181, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %185 = bitcast <16 x i8> %184 to <8 x i16>
  %186 = mul <8 x i16> %185, %183
  %187 = add <8 x i16> %186, %183
  %188 = lshr <8 x i16> %187, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %189 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %188, <8 x i16> undef) #18
  %190 = bitcast <16 x i8> %189 to <4 x i32>
  %191 = extractelement <4 x i32> %190, i32 0
  store i32 %191, i32* %157, align 4
  br label %193

192:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_5DstInEEENS_5Sk4pxERKS2_S4_S4_)
  br label %193

193:                                              ; preds = %16, %161, %156, %9, %192
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_5DstInEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %1, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !287
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %16, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = mul <8 x i16> %25, %21
  %28 = mul <8 x i16> %26, %22
  %29 = add <8 x i16> %27, %21
  %30 = add <8 x i16> %28, %22
  %31 = lshr <8 x i16> %29, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %31, <8 x i16> %32) #18
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = shufflevector <16 x i8> %33, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = bitcast <16 x i8> %34 to <8 x i16>
  %37 = bitcast <16 x i8> %35 to <8 x i16>
  %38 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 16
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %39, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = bitcast <16 x i8> %41 to <8 x i16>
  %44 = mul <8 x i16> %42, %36
  %45 = mul <8 x i16> %43, %37
  %46 = xor <16 x i8> %39, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = shufflevector <16 x i8> %46, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %49 = bitcast <16 x i8> %47 to <8 x i16>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = mul <8 x i16> %49, %21
  %52 = mul <8 x i16> %50, %22
  %53 = add <8 x i16> %44, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %54 = add <8 x i16> %53, %51
  %55 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %54, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %56 = add <8 x i16> %45, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %57 = add <8 x i16> %56, %52
  %58 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %57, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> %58) #18
  %60 = bitcast <16 x i8> %59 to <2 x i64>
  ret <2 x i64> %60
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.18"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.18"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6SrcOutEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.18"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %200

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %201

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %85, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %84, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %83, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %87

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %18 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %36, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = mul <8 x i16> %39, %34
  %42 = mul <8 x i16> %40, %35
  %43 = add <8 x i16> %41, %34
  %44 = add <8 x i16> %42, %35
  %45 = lshr <8 x i16> %43, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = lshr <8 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %47 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> %46) #18
  %48 = getelementptr inbounds i32, i32* %14, i64 4
  %49 = bitcast i32* %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 4
  %51 = getelementptr inbounds i32, i32* %13, i64 4
  %52 = bitcast i32* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 4
  %54 = bitcast <2 x i64> %50 to <4 x i32>
  %55 = lshr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = bitcast <2 x i64> %50 to <16 x i8>
  %57 = bitcast <4 x i32> %55 to <16 x i8>
  %58 = icmp ugt <16 x i8> %56, %57
  %59 = select <16 x i1> %58, <16 x i8> %56, <16 x i8> %57
  %60 = bitcast <16 x i8> %59 to <4 x i32>
  %61 = lshr <4 x i32> %60, <i32 16, i32 16, i32 16, i32 16>
  %62 = bitcast <4 x i32> %61 to <16 x i8>
  %63 = icmp ugt <16 x i8> %59, %62
  %64 = select <16 x i1> %63, <16 x i8> %59, <16 x i8> %62
  %65 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %53, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = bitcast <16 x i8> %66 to <8 x i16>
  %69 = xor <16 x i8> %64, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = mul <8 x i16> %72, %67
  %75 = mul <8 x i16> %73, %68
  %76 = add <8 x i16> %74, %67
  %77 = add <8 x i16> %75, %68
  %78 = lshr <8 x i16> %76, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %79 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %78, <8 x i16> %79) #18
  %81 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %47, <16 x i8>* %81, align 4
  %82 = bitcast i32* %48 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 4
  %83 = getelementptr inbounds i32, i32* %14, i64 8
  %84 = getelementptr inbounds i32, i32* %13, i64 8
  %85 = add nsw i32 %12, -8
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %11, label %201

87:                                               ; preds = %11
  %88 = icmp sgt i32 %12, 3
  br i1 %88, label %89, label %125

89:                                               ; preds = %87
  %90 = bitcast i32* %14 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 4
  %92 = bitcast i32* %13 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 4
  %94 = bitcast <2 x i64> %91 to <4 x i32>
  %95 = lshr <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %96 = bitcast <2 x i64> %91 to <16 x i8>
  %97 = bitcast <4 x i32> %95 to <16 x i8>
  %98 = icmp ugt <16 x i8> %96, %97
  %99 = select <16 x i1> %98, <16 x i8> %96, <16 x i8> %97
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = lshr <4 x i32> %100, <i32 16, i32 16, i32 16, i32 16>
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = icmp ugt <16 x i8> %99, %102
  %104 = select <16 x i1> %103, <16 x i8> %99, <16 x i8> %102
  %105 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %93, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = bitcast <16 x i8> %105 to <8 x i16>
  %108 = bitcast <16 x i8> %106 to <8 x i16>
  %109 = xor <16 x i8> %104, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %110 = shufflevector <16 x i8> %109, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %111 = shufflevector <16 x i8> %109, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = bitcast <16 x i8> %110 to <8 x i16>
  %113 = bitcast <16 x i8> %111 to <8 x i16>
  %114 = mul <8 x i16> %112, %107
  %115 = mul <8 x i16> %113, %108
  %116 = add <8 x i16> %114, %107
  %117 = add <8 x i16> %115, %108
  %118 = lshr <8 x i16> %116, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %119 = lshr <8 x i16> %117, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %118, <8 x i16> %119) #18
  %121 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %120, <16 x i8>* %121, align 4
  %122 = getelementptr inbounds i32, i32* %14, i64 4
  %123 = getelementptr inbounds i32, i32* %13, i64 4
  %124 = add nsw i32 %12, -4
  br label %125

125:                                              ; preds = %89, %87
  %126 = phi i32* [ %122, %89 ], [ %14, %87 ]
  %127 = phi i32* [ %123, %89 ], [ %13, %87 ]
  %128 = phi i32 [ %124, %89 ], [ %12, %87 ]
  %129 = icmp sgt i32 %128, 1
  br i1 %129, label %130, label %163

130:                                              ; preds = %125
  %131 = bitcast i32* %126 to i64*
  %132 = load i64, i64* %131, align 4
  %133 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %132, i32 0
  %134 = bitcast i32* %127 to i64*
  %135 = load i64, i64* %134, align 4
  %136 = insertelement <2 x i64> undef, i64 %135, i32 0
  %137 = bitcast <2 x i64> %133 to <4 x i32>
  %138 = lshr <4 x i32> %137, <i32 8, i32 8, i32 8, i32 8>
  %139 = bitcast <2 x i64> %133 to <16 x i8>
  %140 = bitcast <4 x i32> %138 to <16 x i8>
  %141 = icmp ugt <16 x i8> %139, %140
  %142 = select <16 x i1> %141, <16 x i8> %139, <16 x i8> %140
  %143 = bitcast <16 x i8> %142 to <4 x i32>
  %144 = lshr <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = icmp ugt <16 x i8> %142, %145
  %147 = select <16 x i1> %146, <16 x i8> %142, <16 x i8> %145
  %148 = bitcast <2 x i64> %136 to <16 x i8>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %150 = bitcast <16 x i8> %149 to <8 x i16>
  %151 = xor <16 x i8> %147, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = bitcast <16 x i8> %152 to <8 x i16>
  %154 = mul <8 x i16> %153, %150
  %155 = add <8 x i16> %154, %150
  %156 = lshr <8 x i16> %155, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %157 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %156, <8 x i16> undef) #18
  %158 = bitcast <16 x i8> %157 to <2 x i64>
  %159 = extractelement <2 x i64> %158, i32 0
  store i64 %159, i64* %131, align 4
  %160 = getelementptr inbounds i32, i32* %126, i64 2
  %161 = getelementptr inbounds i32, i32* %127, i64 2
  %162 = add nsw i32 %128, -2
  br label %163

163:                                              ; preds = %130, %125
  %164 = phi i32* [ %160, %130 ], [ %126, %125 ]
  %165 = phi i32* [ %161, %130 ], [ %127, %125 ]
  %166 = phi i32 [ %162, %130 ], [ %128, %125 ]
  %167 = icmp sgt i32 %166, 0
  br i1 %167, label %168, label %201

168:                                              ; preds = %163
  %169 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %169)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %170 = load i32, i32* %164, align 4
  %171 = bitcast <2 x i64>* %6 to i32*
  store i32 %170, i32* %171, align 16
  %172 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %169)
  %173 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %173)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %174 = load i32, i32* %165, align 4
  %175 = bitcast <2 x i64>* %7 to i32*
  store i32 %174, i32* %175, align 16
  %176 = bitcast <2 x i64>* %7 to <16 x i8>*
  %177 = load <16 x i8>, <16 x i8>* %176, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %173)
  %178 = bitcast <2 x i64> %172 to <4 x i32>
  %179 = lshr <4 x i32> %178, <i32 8, i32 8, i32 8, i32 8>
  %180 = bitcast <2 x i64> %172 to <16 x i8>
  %181 = bitcast <4 x i32> %179 to <16 x i8>
  %182 = icmp ugt <16 x i8> %180, %181
  %183 = select <16 x i1> %182, <16 x i8> %180, <16 x i8> %181
  %184 = bitcast <16 x i8> %183 to <4 x i32>
  %185 = lshr <4 x i32> %184, <i32 16, i32 16, i32 16, i32 16>
  %186 = bitcast <4 x i32> %185 to <16 x i8>
  %187 = icmp ugt <16 x i8> %183, %186
  %188 = select <16 x i1> %187, <16 x i8> %183, <16 x i8> %186
  %189 = shufflevector <16 x i8> %177, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = bitcast <16 x i8> %189 to <8 x i16>
  %191 = xor <16 x i8> %188, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %192 = shufflevector <16 x i8> %191, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %193 = bitcast <16 x i8> %192 to <8 x i16>
  %194 = mul <8 x i16> %193, %190
  %195 = add <8 x i16> %194, %190
  %196 = lshr <8 x i16> %195, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %196, <8 x i16> undef) #18
  %198 = bitcast <16 x i8> %197 to <4 x i32>
  %199 = extractelement <4 x i32> %198, i32 0
  store i32 %199, i32* %164, align 4
  br label %201

200:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_6SrcOutEEENS_5Sk4pxERKS2_S4_S4_)
  br label %201

201:                                              ; preds = %16, %168, %163, %9, %200
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_6SrcOutEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %0, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !290
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %16, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %26, %21
  %29 = mul <8 x i16> %27, %22
  %30 = add <8 x i16> %28, %21
  %31 = add <8 x i16> %29, %22
  %32 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = lshr <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %32, <8 x i16> %33) #18
  %35 = shufflevector <16 x i8> %34, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = shufflevector <16 x i8> %34, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %37 = bitcast <16 x i8> %35 to <8 x i16>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 16
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %40, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %43 = bitcast <16 x i8> %41 to <8 x i16>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = mul <8 x i16> %43, %37
  %46 = mul <8 x i16> %44, %38
  %47 = bitcast <2 x i64> %5 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = shufflevector <16 x i8> %47, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = xor <16 x i8> %40, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = shufflevector <16 x i8> %52, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = bitcast <16 x i8> %54 to <8 x i16>
  %57 = mul <8 x i16> %50, %55
  %58 = mul <8 x i16> %51, %56
  %59 = add <8 x i16> %45, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %60 = add <8 x i16> %59, %57
  %61 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %60, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %62 = add <8 x i16> %46, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %63 = add <8 x i16> %62, %58
  %64 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %63, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %65 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %61, <8 x i16> %64) #18
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  ret <2 x i64> %66
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.20"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.20"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6DstOutEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.20"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %197

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %198

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %83, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %82, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %81, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %85

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 4
  %21 = bitcast <2 x i64> %20 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %20 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %36, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = mul <8 x i16> %39, %34
  %42 = mul <8 x i16> %40, %35
  %43 = add <8 x i16> %41, %34
  %44 = add <8 x i16> %42, %35
  %45 = lshr <8 x i16> %43, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = lshr <8 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %47 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %45, <8 x i16> %46) #18
  %48 = getelementptr inbounds i32, i32* %14, i64 4
  %49 = bitcast i32* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 4
  %51 = getelementptr inbounds i32, i32* %13, i64 4
  %52 = bitcast i32* %51 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 4
  %54 = bitcast <2 x i64> %53 to <4 x i32>
  %55 = lshr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %56 = bitcast <2 x i64> %53 to <16 x i8>
  %57 = bitcast <4 x i32> %55 to <16 x i8>
  %58 = icmp ugt <16 x i8> %56, %57
  %59 = select <16 x i1> %58, <16 x i8> %56, <16 x i8> %57
  %60 = bitcast <16 x i8> %59 to <4 x i32>
  %61 = lshr <4 x i32> %60, <i32 16, i32 16, i32 16, i32 16>
  %62 = bitcast <4 x i32> %61 to <16 x i8>
  %63 = icmp ugt <16 x i8> %59, %62
  %64 = select <16 x i1> %63, <16 x i8> %59, <16 x i8> %62
  %65 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = bitcast <16 x i8> %66 to <8 x i16>
  %69 = xor <16 x i8> %64, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = mul <8 x i16> %72, %67
  %75 = mul <8 x i16> %73, %68
  %76 = add <8 x i16> %74, %67
  %77 = add <8 x i16> %75, %68
  %78 = lshr <8 x i16> %76, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %79 = lshr <8 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %78, <8 x i16> %79) #18
  store <16 x i8> %47, <16 x i8>* %17, align 4
  store <16 x i8> %80, <16 x i8>* %49, align 4
  %81 = getelementptr inbounds i32, i32* %14, i64 8
  %82 = getelementptr inbounds i32, i32* %13, i64 8
  %83 = add nsw i32 %12, -8
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %11, label %198

85:                                               ; preds = %11
  %86 = icmp sgt i32 %12, 3
  br i1 %86, label %87, label %122

87:                                               ; preds = %85
  %88 = bitcast i32* %14 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 4
  %90 = bitcast i32* %13 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 4
  %92 = bitcast <2 x i64> %91 to <4 x i32>
  %93 = lshr <4 x i32> %92, <i32 8, i32 8, i32 8, i32 8>
  %94 = bitcast <2 x i64> %91 to <16 x i8>
  %95 = bitcast <4 x i32> %93 to <16 x i8>
  %96 = icmp ugt <16 x i8> %94, %95
  %97 = select <16 x i1> %96, <16 x i8> %94, <16 x i8> %95
  %98 = bitcast <16 x i8> %97 to <4 x i32>
  %99 = lshr <4 x i32> %98, <i32 16, i32 16, i32 16, i32 16>
  %100 = bitcast <4 x i32> %99 to <16 x i8>
  %101 = icmp ugt <16 x i8> %97, %100
  %102 = select <16 x i1> %101, <16 x i8> %97, <16 x i8> %100
  %103 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %104 = shufflevector <16 x i8> %89, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = bitcast <16 x i8> %103 to <8 x i16>
  %106 = bitcast <16 x i8> %104 to <8 x i16>
  %107 = xor <16 x i8> %102, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = shufflevector <16 x i8> %107, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i8> %108 to <8 x i16>
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = mul <8 x i16> %110, %105
  %113 = mul <8 x i16> %111, %106
  %114 = add <8 x i16> %112, %105
  %115 = add <8 x i16> %113, %106
  %116 = lshr <8 x i16> %114, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %117 = lshr <8 x i16> %115, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %118 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %116, <8 x i16> %117) #18
  store <16 x i8> %118, <16 x i8>* %88, align 4
  %119 = getelementptr inbounds i32, i32* %14, i64 4
  %120 = getelementptr inbounds i32, i32* %13, i64 4
  %121 = add nsw i32 %12, -4
  br label %122

122:                                              ; preds = %87, %85
  %123 = phi i32* [ %119, %87 ], [ %14, %85 ]
  %124 = phi i32* [ %120, %87 ], [ %13, %85 ]
  %125 = phi i32 [ %121, %87 ], [ %12, %85 ]
  %126 = icmp sgt i32 %125, 1
  br i1 %126, label %127, label %160

127:                                              ; preds = %122
  %128 = bitcast i32* %123 to i64*
  %129 = load i64, i64* %128, align 4
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = bitcast i32* %124 to i64*
  %132 = load i64, i64* %131, align 4
  %133 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %132, i32 0
  %134 = bitcast <2 x i64> %133 to <4 x i32>
  %135 = lshr <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %136 = bitcast <2 x i64> %133 to <16 x i8>
  %137 = bitcast <4 x i32> %135 to <16 x i8>
  %138 = icmp ugt <16 x i8> %136, %137
  %139 = select <16 x i1> %138, <16 x i8> %136, <16 x i8> %137
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = lshr <4 x i32> %140, <i32 16, i32 16, i32 16, i32 16>
  %142 = bitcast <4 x i32> %141 to <16 x i8>
  %143 = icmp ugt <16 x i8> %139, %142
  %144 = select <16 x i1> %143, <16 x i8> %139, <16 x i8> %142
  %145 = bitcast <2 x i64> %130 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %147 = bitcast <16 x i8> %146 to <8 x i16>
  %148 = xor <16 x i8> %144, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %150 = bitcast <16 x i8> %149 to <8 x i16>
  %151 = mul <8 x i16> %150, %147
  %152 = add <8 x i16> %151, %147
  %153 = lshr <8 x i16> %152, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %154 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> undef) #18
  %155 = bitcast <16 x i8> %154 to <2 x i64>
  %156 = extractelement <2 x i64> %155, i32 0
  store i64 %156, i64* %128, align 4
  %157 = getelementptr inbounds i32, i32* %123, i64 2
  %158 = getelementptr inbounds i32, i32* %124, i64 2
  %159 = add nsw i32 %125, -2
  br label %160

160:                                              ; preds = %127, %122
  %161 = phi i32* [ %157, %127 ], [ %123, %122 ]
  %162 = phi i32* [ %158, %127 ], [ %124, %122 ]
  %163 = phi i32 [ %159, %127 ], [ %125, %122 ]
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %198

165:                                              ; preds = %160
  %166 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %166)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %167 = load i32, i32* %161, align 4
  %168 = bitcast <2 x i64>* %6 to i32*
  store i32 %167, i32* %168, align 16
  %169 = bitcast <2 x i64>* %6 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %166)
  %171 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %171)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %172 = load i32, i32* %162, align 4
  %173 = bitcast <2 x i64>* %7 to i32*
  store i32 %172, i32* %173, align 16
  %174 = load <2 x i64>, <2 x i64>* %7, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %171)
  %175 = bitcast <2 x i64> %174 to <4 x i32>
  %176 = lshr <4 x i32> %175, <i32 8, i32 8, i32 8, i32 8>
  %177 = bitcast <2 x i64> %174 to <16 x i8>
  %178 = bitcast <4 x i32> %176 to <16 x i8>
  %179 = icmp ugt <16 x i8> %177, %178
  %180 = select <16 x i1> %179, <16 x i8> %177, <16 x i8> %178
  %181 = bitcast <16 x i8> %180 to <4 x i32>
  %182 = lshr <4 x i32> %181, <i32 16, i32 16, i32 16, i32 16>
  %183 = bitcast <4 x i32> %182 to <16 x i8>
  %184 = icmp ugt <16 x i8> %180, %183
  %185 = select <16 x i1> %184, <16 x i8> %180, <16 x i8> %183
  %186 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %187 = bitcast <16 x i8> %186 to <8 x i16>
  %188 = xor <16 x i8> %185, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %189 = shufflevector <16 x i8> %188, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %190 = bitcast <16 x i8> %189 to <8 x i16>
  %191 = mul <8 x i16> %190, %187
  %192 = add <8 x i16> %191, %187
  %193 = lshr <8 x i16> %192, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %194 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %193, <8 x i16> undef) #18
  %195 = bitcast <16 x i8> %194 to <4 x i32>
  %196 = extractelement <4 x i32> %195, i32 0
  store i32 %196, i32* %161, align 4
  br label %198

197:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_6DstOutEEENS_5Sk4pxERKS2_S4_S4_)
  br label %198

198:                                              ; preds = %16, %165, %160, %9, %197
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_6DstOutEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %1, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !293
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %16, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %26, %21
  %29 = mul <8 x i16> %27, %22
  %30 = add <8 x i16> %28, %21
  %31 = add <8 x i16> %29, %22
  %32 = lshr <8 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %33 = lshr <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %32, <8 x i16> %33) #18
  %35 = shufflevector <16 x i8> %34, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %36 = shufflevector <16 x i8> %34, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %37 = bitcast <16 x i8> %35 to <8 x i16>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 16
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %40, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %43 = bitcast <16 x i8> %41 to <8 x i16>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = mul <8 x i16> %43, %37
  %46 = mul <8 x i16> %44, %38
  %47 = xor <16 x i8> %40, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = shufflevector <16 x i8> %47, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %50 = bitcast <16 x i8> %48 to <8 x i16>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = mul <8 x i16> %50, %21
  %53 = mul <8 x i16> %51, %22
  %54 = add <8 x i16> %45, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %55 = add <8 x i16> %54, %52
  %56 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %55, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %57 = add <8 x i16> %46, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %58 = add <8 x i16> %57, %53
  %59 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %58, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %56, <8 x i16> %59) #18
  %61 = bitcast <16 x i8> %60 to <2 x i64>
  ret <2 x i64> %61
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.22"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.22"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7SrcATopEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.22"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %298

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %299

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %129, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %128, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %127, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %131

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %18 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = mul <8 x i16> %38, %34
  %41 = mul <8 x i16> %39, %35
  %42 = bitcast <16 x i8> %20 to <4 x i32>
  %43 = lshr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = icmp ugt <16 x i8> %20, %44
  %46 = select <16 x i1> %45, <16 x i8> %20, <16 x i8> %44
  %47 = bitcast <16 x i8> %46 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = icmp ugt <16 x i8> %46, %49
  %51 = select <16 x i1> %50, <16 x i8> %46, <16 x i8> %49
  %52 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = xor <16 x i8> %51, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %59 = bitcast <16 x i8> %57 to <8 x i16>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = mul <8 x i16> %59, %54
  %62 = mul <8 x i16> %60, %55
  %63 = add <8 x i16> %40, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %64 = add <8 x i16> %63, %61
  %65 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %64, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %66 = add <8 x i16> %41, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %67 = add <8 x i16> %66, %62
  %68 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %67, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %65, <8 x i16> %68) #18
  %70 = getelementptr inbounds i32, i32* %14, i64 4
  %71 = bitcast i32* %70 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 4
  %73 = getelementptr inbounds i32, i32* %13, i64 4
  %74 = bitcast i32* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 4
  %76 = bitcast <2 x i64> %72 to <4 x i32>
  %77 = lshr <4 x i32> %76, <i32 8, i32 8, i32 8, i32 8>
  %78 = bitcast <2 x i64> %72 to <16 x i8>
  %79 = bitcast <4 x i32> %77 to <16 x i8>
  %80 = icmp ugt <16 x i8> %78, %79
  %81 = select <16 x i1> %80, <16 x i8> %78, <16 x i8> %79
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = lshr <4 x i32> %82, <i32 16, i32 16, i32 16, i32 16>
  %84 = bitcast <4 x i32> %83 to <16 x i8>
  %85 = icmp ugt <16 x i8> %81, %84
  %86 = select <16 x i1> %85, <16 x i8> %81, <16 x i8> %84
  %87 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %88 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = bitcast <16 x i8> %87 to <8 x i16>
  %90 = bitcast <16 x i8> %88 to <8 x i16>
  %91 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = shufflevector <16 x i8> %86, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %93 = bitcast <16 x i8> %91 to <8 x i16>
  %94 = bitcast <16 x i8> %92 to <8 x i16>
  %95 = mul <8 x i16> %93, %89
  %96 = mul <8 x i16> %94, %90
  %97 = bitcast <16 x i8> %75 to <4 x i32>
  %98 = lshr <4 x i32> %97, <i32 8, i32 8, i32 8, i32 8>
  %99 = bitcast <4 x i32> %98 to <16 x i8>
  %100 = icmp ugt <16 x i8> %75, %99
  %101 = select <16 x i1> %100, <16 x i8> %75, <16 x i8> %99
  %102 = bitcast <16 x i8> %101 to <4 x i32>
  %103 = lshr <4 x i32> %102, <i32 16, i32 16, i32 16, i32 16>
  %104 = bitcast <4 x i32> %103 to <16 x i8>
  %105 = icmp ugt <16 x i8> %101, %104
  %106 = select <16 x i1> %105, <16 x i8> %101, <16 x i8> %104
  %107 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = bitcast <16 x i8> %108 to <8 x i16>
  %111 = xor <16 x i8> %106, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %112 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = bitcast <16 x i8> %113 to <8 x i16>
  %116 = mul <8 x i16> %114, %109
  %117 = mul <8 x i16> %115, %110
  %118 = add <8 x i16> %95, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %119 = add <8 x i16> %118, %116
  %120 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %119, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %121 = add <8 x i16> %96, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %122 = add <8 x i16> %121, %117
  %123 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %122, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %120, <8 x i16> %123) #18
  %125 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %125, align 4
  %126 = bitcast i32* %70 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %126, align 4
  %127 = getelementptr inbounds i32, i32* %14, i64 8
  %128 = getelementptr inbounds i32, i32* %13, i64 8
  %129 = add nsw i32 %12, -8
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %11, label %299

131:                                              ; preds = %11
  %132 = icmp sgt i32 %12, 3
  br i1 %132, label %133, label %191

133:                                              ; preds = %131
  %134 = bitcast i32* %14 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 4
  %136 = bitcast i32* %13 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 4
  %138 = bitcast <2 x i64> %135 to <4 x i32>
  %139 = lshr <4 x i32> %138, <i32 8, i32 8, i32 8, i32 8>
  %140 = bitcast <2 x i64> %135 to <16 x i8>
  %141 = bitcast <4 x i32> %139 to <16 x i8>
  %142 = icmp ugt <16 x i8> %140, %141
  %143 = select <16 x i1> %142, <16 x i8> %140, <16 x i8> %141
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = lshr <4 x i32> %144, <i32 16, i32 16, i32 16, i32 16>
  %146 = bitcast <4 x i32> %145 to <16 x i8>
  %147 = icmp ugt <16 x i8> %143, %146
  %148 = select <16 x i1> %147, <16 x i8> %143, <16 x i8> %146
  %149 = shufflevector <16 x i8> %137, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %150 = shufflevector <16 x i8> %137, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %151 = bitcast <16 x i8> %149 to <8 x i16>
  %152 = bitcast <16 x i8> %150 to <8 x i16>
  %153 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %154 = shufflevector <16 x i8> %148, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %155 = bitcast <16 x i8> %153 to <8 x i16>
  %156 = bitcast <16 x i8> %154 to <8 x i16>
  %157 = mul <8 x i16> %155, %151
  %158 = mul <8 x i16> %156, %152
  %159 = bitcast <16 x i8> %137 to <4 x i32>
  %160 = lshr <4 x i32> %159, <i32 8, i32 8, i32 8, i32 8>
  %161 = bitcast <4 x i32> %160 to <16 x i8>
  %162 = icmp ugt <16 x i8> %137, %161
  %163 = select <16 x i1> %162, <16 x i8> %137, <16 x i8> %161
  %164 = bitcast <16 x i8> %163 to <4 x i32>
  %165 = lshr <4 x i32> %164, <i32 16, i32 16, i32 16, i32 16>
  %166 = bitcast <4 x i32> %165 to <16 x i8>
  %167 = icmp ugt <16 x i8> %163, %166
  %168 = select <16 x i1> %167, <16 x i8> %163, <16 x i8> %166
  %169 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %170 = shufflevector <16 x i8> %140, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = bitcast <16 x i8> %169 to <8 x i16>
  %172 = bitcast <16 x i8> %170 to <8 x i16>
  %173 = xor <16 x i8> %168, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %174 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = shufflevector <16 x i8> %173, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %176 = bitcast <16 x i8> %174 to <8 x i16>
  %177 = bitcast <16 x i8> %175 to <8 x i16>
  %178 = mul <8 x i16> %176, %171
  %179 = mul <8 x i16> %177, %172
  %180 = add <8 x i16> %157, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %181 = add <8 x i16> %180, %178
  %182 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %181, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %183 = add <8 x i16> %158, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %184 = add <8 x i16> %183, %179
  %185 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %184, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %186 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %182, <8 x i16> %185) #18
  %187 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %187, align 4
  %188 = getelementptr inbounds i32, i32* %14, i64 4
  %189 = getelementptr inbounds i32, i32* %13, i64 4
  %190 = add nsw i32 %12, -4
  br label %191

191:                                              ; preds = %133, %131
  %192 = phi i32* [ %188, %133 ], [ %14, %131 ]
  %193 = phi i32* [ %189, %133 ], [ %13, %131 ]
  %194 = phi i32 [ %190, %133 ], [ %12, %131 ]
  %195 = icmp sgt i32 %194, 1
  br i1 %195, label %196, label %245

196:                                              ; preds = %191
  %197 = bitcast i32* %192 to i64*
  %198 = load i64, i64* %197, align 4
  %199 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %198, i32 0
  %200 = bitcast i32* %193 to i64*
  %201 = load i64, i64* %200, align 4
  %202 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %201, i32 0
  %203 = bitcast <2 x i64> %199 to <4 x i32>
  %204 = lshr <4 x i32> %203, <i32 8, i32 8, i32 8, i32 8>
  %205 = bitcast <2 x i64> %199 to <16 x i8>
  %206 = bitcast <4 x i32> %204 to <16 x i8>
  %207 = icmp ugt <16 x i8> %205, %206
  %208 = select <16 x i1> %207, <16 x i8> %205, <16 x i8> %206
  %209 = bitcast <16 x i8> %208 to <4 x i32>
  %210 = lshr <4 x i32> %209, <i32 16, i32 16, i32 16, i32 16>
  %211 = bitcast <4 x i32> %210 to <16 x i8>
  %212 = icmp ugt <16 x i8> %208, %211
  %213 = select <16 x i1> %212, <16 x i8> %208, <16 x i8> %211
  %214 = bitcast <2 x i64> %202 to <16 x i8>
  %215 = shufflevector <16 x i8> %214, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %216 = bitcast <16 x i8> %215 to <8 x i16>
  %217 = shufflevector <16 x i8> %213, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %218 = bitcast <16 x i8> %217 to <8 x i16>
  %219 = mul <8 x i16> %218, %216
  %220 = bitcast <2 x i64> %202 to <4 x i32>
  %221 = lshr <4 x i32> %220, <i32 8, i32 8, i32 8, i32 8>
  %222 = bitcast <4 x i32> %221 to <16 x i8>
  %223 = icmp ugt <16 x i8> %214, %222
  %224 = select <16 x i1> %223, <16 x i8> %214, <16 x i8> %222
  %225 = bitcast <16 x i8> %224 to <4 x i32>
  %226 = lshr <4 x i32> %225, <i32 16, i32 16, i32 16, i32 16>
  %227 = bitcast <4 x i32> %226 to <16 x i8>
  %228 = icmp ugt <16 x i8> %224, %227
  %229 = select <16 x i1> %228, <16 x i8> %224, <16 x i8> %227
  %230 = shufflevector <16 x i8> %205, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %231 = bitcast <16 x i8> %230 to <8 x i16>
  %232 = xor <16 x i8> %229, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %233 = shufflevector <16 x i8> %232, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %234 = bitcast <16 x i8> %233 to <8 x i16>
  %235 = mul <8 x i16> %234, %231
  %236 = add <8 x i16> %219, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %237 = add <8 x i16> %236, %235
  %238 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %237, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %239 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %238, <8 x i16> undef) #18
  %240 = bitcast <16 x i8> %239 to <2 x i64>
  %241 = extractelement <2 x i64> %240, i32 0
  store i64 %241, i64* %197, align 4
  %242 = getelementptr inbounds i32, i32* %192, i64 2
  %243 = getelementptr inbounds i32, i32* %193, i64 2
  %244 = add nsw i32 %194, -2
  br label %245

245:                                              ; preds = %196, %191
  %246 = phi i32* [ %242, %196 ], [ %192, %191 ]
  %247 = phi i32* [ %243, %196 ], [ %193, %191 ]
  %248 = phi i32 [ %244, %196 ], [ %194, %191 ]
  %249 = icmp sgt i32 %248, 0
  br i1 %249, label %250, label %299

250:                                              ; preds = %245
  %251 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %251)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %252 = load i32, i32* %246, align 4
  %253 = bitcast <2 x i64>* %6 to i32*
  store i32 %252, i32* %253, align 16
  %254 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %251)
  %255 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %255)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %256 = load i32, i32* %247, align 4
  %257 = bitcast <2 x i64>* %7 to i32*
  store i32 %256, i32* %257, align 16
  %258 = bitcast <2 x i64>* %7 to <16 x i8>*
  %259 = load <16 x i8>, <16 x i8>* %258, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %255)
  %260 = bitcast <2 x i64> %254 to <4 x i32>
  %261 = lshr <4 x i32> %260, <i32 8, i32 8, i32 8, i32 8>
  %262 = bitcast <2 x i64> %254 to <16 x i8>
  %263 = bitcast <4 x i32> %261 to <16 x i8>
  %264 = icmp ugt <16 x i8> %262, %263
  %265 = select <16 x i1> %264, <16 x i8> %262, <16 x i8> %263
  %266 = bitcast <16 x i8> %265 to <4 x i32>
  %267 = lshr <4 x i32> %266, <i32 16, i32 16, i32 16, i32 16>
  %268 = bitcast <4 x i32> %267 to <16 x i8>
  %269 = icmp ugt <16 x i8> %265, %268
  %270 = select <16 x i1> %269, <16 x i8> %265, <16 x i8> %268
  %271 = shufflevector <16 x i8> %259, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %272 = bitcast <16 x i8> %271 to <8 x i16>
  %273 = shufflevector <16 x i8> %270, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %274 = bitcast <16 x i8> %273 to <8 x i16>
  %275 = mul <8 x i16> %274, %272
  %276 = bitcast <16 x i8> %259 to <4 x i32>
  %277 = lshr <4 x i32> %276, <i32 8, i32 8, i32 8, i32 8>
  %278 = bitcast <4 x i32> %277 to <16 x i8>
  %279 = icmp ugt <16 x i8> %259, %278
  %280 = select <16 x i1> %279, <16 x i8> %259, <16 x i8> %278
  %281 = bitcast <16 x i8> %280 to <4 x i32>
  %282 = lshr <4 x i32> %281, <i32 16, i32 16, i32 16, i32 16>
  %283 = bitcast <4 x i32> %282 to <16 x i8>
  %284 = icmp ugt <16 x i8> %280, %283
  %285 = select <16 x i1> %284, <16 x i8> %280, <16 x i8> %283
  %286 = shufflevector <16 x i8> %262, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %287 = bitcast <16 x i8> %286 to <8 x i16>
  %288 = xor <16 x i8> %285, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %289 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %290 = bitcast <16 x i8> %289 to <8 x i16>
  %291 = mul <8 x i16> %290, %287
  %292 = add <8 x i16> %275, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %293 = add <8 x i16> %292, %291
  %294 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %293, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %295 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %294, <8 x i16> undef) #18
  %296 = bitcast <16 x i8> %295 to <4 x i32>
  %297 = extractelement <4 x i32> %296, i32 0
  store i32 %297, i32* %246, align 4
  br label %299

298:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcATopEEENS_5Sk4pxERKS2_S4_S4_)
  br label %299

299:                                              ; preds = %16, %250, %245, %9, %298
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7SrcATopEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %0, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !296
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %16, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = mul <8 x i16> %25, %21
  %28 = mul <8 x i16> %26, %22
  %29 = bitcast <16 x i8> %18 to <4 x i32>
  %30 = lshr <4 x i32> %29, <i32 8, i32 8, i32 8, i32 8>
  %31 = bitcast <4 x i32> %30 to <16 x i8>
  %32 = icmp ugt <16 x i8> %18, %31
  %33 = select <16 x i1> %32, <16 x i8> %18, <16 x i8> %31
  %34 = bitcast <16 x i8> %33 to <4 x i32>
  %35 = lshr <4 x i32> %34, <i32 16, i32 16, i32 16, i32 16>
  %36 = bitcast <4 x i32> %35 to <16 x i8>
  %37 = icmp ugt <16 x i8> %33, %36
  %38 = select <16 x i1> %37, <16 x i8> %33, <16 x i8> %36
  %39 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = xor <16 x i8> %38, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = mul <8 x i16> %46, %41
  %49 = mul <8 x i16> %47, %42
  %50 = add <8 x i16> %27, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %51 = add <8 x i16> %50, %48
  %52 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %51, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %53 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %54 = add <8 x i16> %53, %49
  %55 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %54, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %55) #18
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %59 = bitcast <16 x i8> %57 to <8 x i16>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 16
  %63 = shufflevector <16 x i8> %62, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = shufflevector <16 x i8> %62, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i8> %63 to <8 x i16>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = mul <8 x i16> %65, %59
  %68 = mul <8 x i16> %66, %60
  %69 = bitcast <2 x i64> %5 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = xor <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = shufflevector <16 x i8> %74, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = bitcast <16 x i8> %75 to <8 x i16>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = mul <8 x i16> %72, %77
  %80 = mul <8 x i16> %73, %78
  %81 = add <8 x i16> %67, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %82 = add <8 x i16> %81, %79
  %83 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %82, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %84 = add <8 x i16> %68, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %85 = add <8 x i16> %84, %80
  %86 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %85, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %87 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %83, <8 x i16> %86) #18
  %88 = bitcast <16 x i8> %87 to <2 x i64>
  ret <2 x i64> %88
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.24"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.24"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_7DstATopEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.24"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %295

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %296

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %127, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %126, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %125, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %129

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <2 x i64>*
  %20 = load <2 x i64>, <2 x i64>* %19, align 4
  %21 = bitcast <2 x i64> %20 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %20 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = mul <8 x i16> %38, %34
  %41 = mul <8 x i16> %39, %35
  %42 = bitcast <16 x i8> %18 to <4 x i32>
  %43 = lshr <4 x i32> %42, <i32 8, i32 8, i32 8, i32 8>
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = icmp ugt <16 x i8> %18, %44
  %46 = select <16 x i1> %45, <16 x i8> %18, <16 x i8> %44
  %47 = bitcast <16 x i8> %46 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = icmp ugt <16 x i8> %46, %49
  %51 = select <16 x i1> %50, <16 x i8> %46, <16 x i8> %49
  %52 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = xor <16 x i8> %51, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %59 = bitcast <16 x i8> %57 to <8 x i16>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = mul <8 x i16> %59, %54
  %62 = mul <8 x i16> %60, %55
  %63 = add <8 x i16> %61, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %64 = add <8 x i16> %63, %40
  %65 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %64, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %66 = add <8 x i16> %62, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %67 = add <8 x i16> %66, %41
  %68 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %67, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %65, <8 x i16> %68) #18
  %70 = getelementptr inbounds i32, i32* %14, i64 4
  %71 = bitcast i32* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 4
  %73 = getelementptr inbounds i32, i32* %13, i64 4
  %74 = bitcast i32* %73 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 4
  %76 = bitcast <2 x i64> %75 to <4 x i32>
  %77 = lshr <4 x i32> %76, <i32 8, i32 8, i32 8, i32 8>
  %78 = bitcast <2 x i64> %75 to <16 x i8>
  %79 = bitcast <4 x i32> %77 to <16 x i8>
  %80 = icmp ugt <16 x i8> %78, %79
  %81 = select <16 x i1> %80, <16 x i8> %78, <16 x i8> %79
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = lshr <4 x i32> %82, <i32 16, i32 16, i32 16, i32 16>
  %84 = bitcast <4 x i32> %83 to <16 x i8>
  %85 = icmp ugt <16 x i8> %81, %84
  %86 = select <16 x i1> %85, <16 x i8> %81, <16 x i8> %84
  %87 = shufflevector <16 x i8> %72, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %88 = shufflevector <16 x i8> %72, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = bitcast <16 x i8> %87 to <8 x i16>
  %90 = bitcast <16 x i8> %88 to <8 x i16>
  %91 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = shufflevector <16 x i8> %86, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %93 = bitcast <16 x i8> %91 to <8 x i16>
  %94 = bitcast <16 x i8> %92 to <8 x i16>
  %95 = mul <8 x i16> %93, %89
  %96 = mul <8 x i16> %94, %90
  %97 = bitcast <16 x i8> %72 to <4 x i32>
  %98 = lshr <4 x i32> %97, <i32 8, i32 8, i32 8, i32 8>
  %99 = bitcast <4 x i32> %98 to <16 x i8>
  %100 = icmp ugt <16 x i8> %72, %99
  %101 = select <16 x i1> %100, <16 x i8> %72, <16 x i8> %99
  %102 = bitcast <16 x i8> %101 to <4 x i32>
  %103 = lshr <4 x i32> %102, <i32 16, i32 16, i32 16, i32 16>
  %104 = bitcast <4 x i32> %103 to <16 x i8>
  %105 = icmp ugt <16 x i8> %101, %104
  %106 = select <16 x i1> %105, <16 x i8> %101, <16 x i8> %104
  %107 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %108 = shufflevector <16 x i8> %78, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %109 = bitcast <16 x i8> %107 to <8 x i16>
  %110 = bitcast <16 x i8> %108 to <8 x i16>
  %111 = xor <16 x i8> %106, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %112 = shufflevector <16 x i8> %111, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %111, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i8> %112 to <8 x i16>
  %115 = bitcast <16 x i8> %113 to <8 x i16>
  %116 = mul <8 x i16> %114, %109
  %117 = mul <8 x i16> %115, %110
  %118 = add <8 x i16> %116, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %119 = add <8 x i16> %118, %95
  %120 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %119, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %121 = add <8 x i16> %117, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %122 = add <8 x i16> %121, %96
  %123 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %122, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %120, <8 x i16> %123) #18
  store <16 x i8> %69, <16 x i8>* %17, align 4
  store <16 x i8> %124, <16 x i8>* %71, align 4
  %125 = getelementptr inbounds i32, i32* %14, i64 8
  %126 = getelementptr inbounds i32, i32* %13, i64 8
  %127 = add nsw i32 %12, -8
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %11, label %296

129:                                              ; preds = %11
  %130 = icmp sgt i32 %12, 3
  br i1 %130, label %131, label %188

131:                                              ; preds = %129
  %132 = bitcast i32* %14 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 4
  %134 = bitcast i32* %13 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 4
  %136 = bitcast <2 x i64> %135 to <4 x i32>
  %137 = lshr <4 x i32> %136, <i32 8, i32 8, i32 8, i32 8>
  %138 = bitcast <2 x i64> %135 to <16 x i8>
  %139 = bitcast <4 x i32> %137 to <16 x i8>
  %140 = icmp ugt <16 x i8> %138, %139
  %141 = select <16 x i1> %140, <16 x i8> %138, <16 x i8> %139
  %142 = bitcast <16 x i8> %141 to <4 x i32>
  %143 = lshr <4 x i32> %142, <i32 16, i32 16, i32 16, i32 16>
  %144 = bitcast <4 x i32> %143 to <16 x i8>
  %145 = icmp ugt <16 x i8> %141, %144
  %146 = select <16 x i1> %145, <16 x i8> %141, <16 x i8> %144
  %147 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %148 = shufflevector <16 x i8> %133, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = bitcast <16 x i8> %147 to <8 x i16>
  %150 = bitcast <16 x i8> %148 to <8 x i16>
  %151 = shufflevector <16 x i8> %146, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = shufflevector <16 x i8> %146, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = bitcast <16 x i8> %151 to <8 x i16>
  %154 = bitcast <16 x i8> %152 to <8 x i16>
  %155 = mul <8 x i16> %153, %149
  %156 = mul <8 x i16> %154, %150
  %157 = bitcast <16 x i8> %133 to <4 x i32>
  %158 = lshr <4 x i32> %157, <i32 8, i32 8, i32 8, i32 8>
  %159 = bitcast <4 x i32> %158 to <16 x i8>
  %160 = icmp ugt <16 x i8> %133, %159
  %161 = select <16 x i1> %160, <16 x i8> %133, <16 x i8> %159
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = lshr <4 x i32> %162, <i32 16, i32 16, i32 16, i32 16>
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = icmp ugt <16 x i8> %161, %164
  %166 = select <16 x i1> %165, <16 x i8> %161, <16 x i8> %164
  %167 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %168 = shufflevector <16 x i8> %138, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %169 = bitcast <16 x i8> %167 to <8 x i16>
  %170 = bitcast <16 x i8> %168 to <8 x i16>
  %171 = xor <16 x i8> %166, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %172 = shufflevector <16 x i8> %171, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %173 = shufflevector <16 x i8> %171, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %174 = bitcast <16 x i8> %172 to <8 x i16>
  %175 = bitcast <16 x i8> %173 to <8 x i16>
  %176 = mul <8 x i16> %174, %169
  %177 = mul <8 x i16> %175, %170
  %178 = add <8 x i16> %176, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %179 = add <8 x i16> %178, %155
  %180 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %179, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %181 = add <8 x i16> %177, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %182 = add <8 x i16> %181, %156
  %183 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %182, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %184 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %180, <8 x i16> %183) #18
  store <16 x i8> %184, <16 x i8>* %132, align 4
  %185 = getelementptr inbounds i32, i32* %14, i64 4
  %186 = getelementptr inbounds i32, i32* %13, i64 4
  %187 = add nsw i32 %12, -4
  br label %188

188:                                              ; preds = %131, %129
  %189 = phi i32* [ %185, %131 ], [ %14, %129 ]
  %190 = phi i32* [ %186, %131 ], [ %13, %129 ]
  %191 = phi i32 [ %187, %131 ], [ %12, %129 ]
  %192 = icmp sgt i32 %191, 1
  br i1 %192, label %193, label %242

193:                                              ; preds = %188
  %194 = bitcast i32* %189 to i64*
  %195 = load i64, i64* %194, align 4
  %196 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %195, i32 0
  %197 = bitcast i32* %190 to i64*
  %198 = load i64, i64* %197, align 4
  %199 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %198, i32 0
  %200 = bitcast <2 x i64> %199 to <4 x i32>
  %201 = lshr <4 x i32> %200, <i32 8, i32 8, i32 8, i32 8>
  %202 = bitcast <2 x i64> %199 to <16 x i8>
  %203 = bitcast <4 x i32> %201 to <16 x i8>
  %204 = icmp ugt <16 x i8> %202, %203
  %205 = select <16 x i1> %204, <16 x i8> %202, <16 x i8> %203
  %206 = bitcast <16 x i8> %205 to <4 x i32>
  %207 = lshr <4 x i32> %206, <i32 16, i32 16, i32 16, i32 16>
  %208 = bitcast <4 x i32> %207 to <16 x i8>
  %209 = icmp ugt <16 x i8> %205, %208
  %210 = select <16 x i1> %209, <16 x i8> %205, <16 x i8> %208
  %211 = bitcast <2 x i64> %196 to <16 x i8>
  %212 = shufflevector <16 x i8> %211, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %213 = bitcast <16 x i8> %212 to <8 x i16>
  %214 = shufflevector <16 x i8> %210, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %215 = bitcast <16 x i8> %214 to <8 x i16>
  %216 = mul <8 x i16> %215, %213
  %217 = bitcast <2 x i64> %196 to <4 x i32>
  %218 = lshr <4 x i32> %217, <i32 8, i32 8, i32 8, i32 8>
  %219 = bitcast <4 x i32> %218 to <16 x i8>
  %220 = icmp ugt <16 x i8> %211, %219
  %221 = select <16 x i1> %220, <16 x i8> %211, <16 x i8> %219
  %222 = bitcast <16 x i8> %221 to <4 x i32>
  %223 = lshr <4 x i32> %222, <i32 16, i32 16, i32 16, i32 16>
  %224 = bitcast <4 x i32> %223 to <16 x i8>
  %225 = icmp ugt <16 x i8> %221, %224
  %226 = select <16 x i1> %225, <16 x i8> %221, <16 x i8> %224
  %227 = shufflevector <16 x i8> %202, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = bitcast <16 x i8> %227 to <8 x i16>
  %229 = xor <16 x i8> %226, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %230 = shufflevector <16 x i8> %229, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %231 = bitcast <16 x i8> %230 to <8 x i16>
  %232 = mul <8 x i16> %231, %228
  %233 = add <8 x i16> %232, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %234 = add <8 x i16> %233, %216
  %235 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %234, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %236 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %235, <8 x i16> undef) #18
  %237 = bitcast <16 x i8> %236 to <2 x i64>
  %238 = extractelement <2 x i64> %237, i32 0
  store i64 %238, i64* %194, align 4
  %239 = getelementptr inbounds i32, i32* %189, i64 2
  %240 = getelementptr inbounds i32, i32* %190, i64 2
  %241 = add nsw i32 %191, -2
  br label %242

242:                                              ; preds = %193, %188
  %243 = phi i32* [ %239, %193 ], [ %189, %188 ]
  %244 = phi i32* [ %240, %193 ], [ %190, %188 ]
  %245 = phi i32 [ %241, %193 ], [ %191, %188 ]
  %246 = icmp sgt i32 %245, 0
  br i1 %246, label %247, label %296

247:                                              ; preds = %242
  %248 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %248)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %249 = load i32, i32* %243, align 4
  %250 = bitcast <2 x i64>* %6 to i32*
  store i32 %249, i32* %250, align 16
  %251 = bitcast <2 x i64>* %6 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %248)
  %253 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %253)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %254 = load i32, i32* %244, align 4
  %255 = bitcast <2 x i64>* %7 to i32*
  store i32 %254, i32* %255, align 16
  %256 = load <2 x i64>, <2 x i64>* %7, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %253)
  %257 = bitcast <2 x i64> %256 to <4 x i32>
  %258 = lshr <4 x i32> %257, <i32 8, i32 8, i32 8, i32 8>
  %259 = bitcast <2 x i64> %256 to <16 x i8>
  %260 = bitcast <4 x i32> %258 to <16 x i8>
  %261 = icmp ugt <16 x i8> %259, %260
  %262 = select <16 x i1> %261, <16 x i8> %259, <16 x i8> %260
  %263 = bitcast <16 x i8> %262 to <4 x i32>
  %264 = lshr <4 x i32> %263, <i32 16, i32 16, i32 16, i32 16>
  %265 = bitcast <4 x i32> %264 to <16 x i8>
  %266 = icmp ugt <16 x i8> %262, %265
  %267 = select <16 x i1> %266, <16 x i8> %262, <16 x i8> %265
  %268 = shufflevector <16 x i8> %252, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %269 = bitcast <16 x i8> %268 to <8 x i16>
  %270 = shufflevector <16 x i8> %267, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %271 = bitcast <16 x i8> %270 to <8 x i16>
  %272 = mul <8 x i16> %271, %269
  %273 = bitcast <16 x i8> %252 to <4 x i32>
  %274 = lshr <4 x i32> %273, <i32 8, i32 8, i32 8, i32 8>
  %275 = bitcast <4 x i32> %274 to <16 x i8>
  %276 = icmp ugt <16 x i8> %252, %275
  %277 = select <16 x i1> %276, <16 x i8> %252, <16 x i8> %275
  %278 = bitcast <16 x i8> %277 to <4 x i32>
  %279 = lshr <4 x i32> %278, <i32 16, i32 16, i32 16, i32 16>
  %280 = bitcast <4 x i32> %279 to <16 x i8>
  %281 = icmp ugt <16 x i8> %277, %280
  %282 = select <16 x i1> %281, <16 x i8> %277, <16 x i8> %280
  %283 = shufflevector <16 x i8> %259, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %284 = bitcast <16 x i8> %283 to <8 x i16>
  %285 = xor <16 x i8> %282, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %286 = shufflevector <16 x i8> %285, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %287 = bitcast <16 x i8> %286 to <8 x i16>
  %288 = mul <8 x i16> %287, %284
  %289 = add <8 x i16> %288, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %290 = add <8 x i16> %289, %272
  %291 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %290, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %292 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %291, <8 x i16> undef) #18
  %293 = bitcast <16 x i8> %292 to <4 x i32>
  %294 = extractelement <4 x i32> %293, i32 0
  store i32 %294, i32* %243, align 4
  br label %296

295:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_7DstATopEEENS_5Sk4pxERKS2_S4_S4_)
  br label %296

296:                                              ; preds = %16, %247, %242, %9, %295
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_7DstATopEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %1, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !303
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %16, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = mul <8 x i16> %25, %21
  %28 = mul <8 x i16> %26, %22
  %29 = bitcast <16 x i8> %18 to <4 x i32>
  %30 = lshr <4 x i32> %29, <i32 8, i32 8, i32 8, i32 8>
  %31 = bitcast <4 x i32> %30 to <16 x i8>
  %32 = icmp ugt <16 x i8> %18, %31
  %33 = select <16 x i1> %32, <16 x i8> %18, <16 x i8> %31
  %34 = bitcast <16 x i8> %33 to <4 x i32>
  %35 = lshr <4 x i32> %34, <i32 16, i32 16, i32 16, i32 16>
  %36 = bitcast <4 x i32> %35 to <16 x i8>
  %37 = icmp ugt <16 x i8> %33, %36
  %38 = select <16 x i1> %37, <16 x i8> %33, <16 x i8> %36
  %39 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %40 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = xor <16 x i8> %38, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %43, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = mul <8 x i16> %46, %41
  %49 = mul <8 x i16> %47, %42
  %50 = add <8 x i16> %27, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %51 = add <8 x i16> %50, %48
  %52 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %51, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %53 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %54 = add <8 x i16> %53, %49
  %55 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %54, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %52, <8 x i16> %55) #18
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = shufflevector <16 x i8> %56, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %59 = bitcast <16 x i8> %57 to <8 x i16>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 16
  %63 = shufflevector <16 x i8> %62, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = shufflevector <16 x i8> %62, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i8> %63 to <8 x i16>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = mul <8 x i16> %65, %59
  %68 = mul <8 x i16> %66, %60
  %69 = xor <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = mul <8 x i16> %72, %21
  %75 = mul <8 x i16> %73, %22
  %76 = add <8 x i16> %67, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %77 = add <8 x i16> %76, %74
  %78 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %77, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %79 = add <8 x i16> %68, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %80 = add <8 x i16> %79, %75
  %81 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %80, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %78, <8 x i16> %81) #18
  %83 = bitcast <16 x i8> %82 to <2 x i64>
  ret <2 x i64> %83
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.26"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.26"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_3XorEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.26"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %303

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %304

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %131, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %130, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %129, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %133

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = bitcast <2 x i64> %18 to <4 x i32>
  %22 = lshr <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  %23 = bitcast <2 x i64> %18 to <16 x i8>
  %24 = bitcast <4 x i32> %22 to <16 x i8>
  %25 = icmp ugt <16 x i8> %23, %24
  %26 = select <16 x i1> %25, <16 x i8> %23, <16 x i8> %24
  %27 = bitcast <16 x i8> %26 to <4 x i32>
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  %30 = icmp ugt <16 x i8> %26, %29
  %31 = select <16 x i1> %30, <16 x i8> %26, <16 x i8> %29
  %32 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = xor <16 x i8> %31, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = shufflevector <16 x i8> %36, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = mul <8 x i16> %39, %34
  %42 = mul <8 x i16> %40, %35
  %43 = bitcast <16 x i8> %20 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %45 = bitcast <4 x i32> %44 to <16 x i8>
  %46 = icmp ugt <16 x i8> %20, %45
  %47 = select <16 x i1> %46, <16 x i8> %20, <16 x i8> %45
  %48 = bitcast <16 x i8> %47 to <4 x i32>
  %49 = lshr <4 x i32> %48, <i32 16, i32 16, i32 16, i32 16>
  %50 = bitcast <4 x i32> %49 to <16 x i8>
  %51 = icmp ugt <16 x i8> %47, %50
  %52 = select <16 x i1> %51, <16 x i8> %47, <16 x i8> %50
  %53 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = bitcast <16 x i8> %54 to <8 x i16>
  %57 = xor <16 x i8> %52, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %57, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = mul <8 x i16> %60, %55
  %63 = mul <8 x i16> %61, %56
  %64 = add <8 x i16> %41, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %65 = add <8 x i16> %64, %62
  %66 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %65, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %67 = add <8 x i16> %42, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %68 = add <8 x i16> %67, %63
  %69 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %68, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %70 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %66, <8 x i16> %69) #18
  %71 = getelementptr inbounds i32, i32* %14, i64 4
  %72 = bitcast i32* %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 4
  %74 = getelementptr inbounds i32, i32* %13, i64 4
  %75 = bitcast i32* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 4
  %77 = bitcast <2 x i64> %73 to <4 x i32>
  %78 = lshr <4 x i32> %77, <i32 8, i32 8, i32 8, i32 8>
  %79 = bitcast <2 x i64> %73 to <16 x i8>
  %80 = bitcast <4 x i32> %78 to <16 x i8>
  %81 = icmp ugt <16 x i8> %79, %80
  %82 = select <16 x i1> %81, <16 x i8> %79, <16 x i8> %80
  %83 = bitcast <16 x i8> %82 to <4 x i32>
  %84 = lshr <4 x i32> %83, <i32 16, i32 16, i32 16, i32 16>
  %85 = bitcast <4 x i32> %84 to <16 x i8>
  %86 = icmp ugt <16 x i8> %82, %85
  %87 = select <16 x i1> %86, <16 x i8> %82, <16 x i8> %85
  %88 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = shufflevector <16 x i8> %76, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = bitcast <16 x i8> %88 to <8 x i16>
  %91 = bitcast <16 x i8> %89 to <8 x i16>
  %92 = xor <16 x i8> %87, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %93 to <8 x i16>
  %96 = bitcast <16 x i8> %94 to <8 x i16>
  %97 = mul <8 x i16> %95, %90
  %98 = mul <8 x i16> %96, %91
  %99 = bitcast <16 x i8> %76 to <4 x i32>
  %100 = lshr <4 x i32> %99, <i32 8, i32 8, i32 8, i32 8>
  %101 = bitcast <4 x i32> %100 to <16 x i8>
  %102 = icmp ugt <16 x i8> %76, %101
  %103 = select <16 x i1> %102, <16 x i8> %76, <16 x i8> %101
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = lshr <4 x i32> %104, <i32 16, i32 16, i32 16, i32 16>
  %106 = bitcast <4 x i32> %105 to <16 x i8>
  %107 = icmp ugt <16 x i8> %103, %106
  %108 = select <16 x i1> %107, <16 x i8> %103, <16 x i8> %106
  %109 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = shufflevector <16 x i8> %79, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %111 = bitcast <16 x i8> %109 to <8 x i16>
  %112 = bitcast <16 x i8> %110 to <8 x i16>
  %113 = xor <16 x i8> %108, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = shufflevector <16 x i8> %113, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i8> %114 to <8 x i16>
  %117 = bitcast <16 x i8> %115 to <8 x i16>
  %118 = mul <8 x i16> %116, %111
  %119 = mul <8 x i16> %117, %112
  %120 = add <8 x i16> %97, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %121 = add <8 x i16> %120, %118
  %122 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %121, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %123 = add <8 x i16> %98, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %124 = add <8 x i16> %123, %119
  %125 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %124, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %126 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %122, <8 x i16> %125) #18
  %127 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %127, align 4
  %128 = bitcast i32* %71 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %128, align 4
  %129 = getelementptr inbounds i32, i32* %14, i64 8
  %130 = getelementptr inbounds i32, i32* %13, i64 8
  %131 = add nsw i32 %12, -8
  %132 = icmp sgt i32 %131, 0
  br i1 %132, label %11, label %304

133:                                              ; preds = %11
  %134 = icmp sgt i32 %12, 3
  br i1 %134, label %135, label %194

135:                                              ; preds = %133
  %136 = bitcast i32* %14 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 4
  %138 = bitcast i32* %13 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 4
  %140 = bitcast <2 x i64> %137 to <4 x i32>
  %141 = lshr <4 x i32> %140, <i32 8, i32 8, i32 8, i32 8>
  %142 = bitcast <2 x i64> %137 to <16 x i8>
  %143 = bitcast <4 x i32> %141 to <16 x i8>
  %144 = icmp ugt <16 x i8> %142, %143
  %145 = select <16 x i1> %144, <16 x i8> %142, <16 x i8> %143
  %146 = bitcast <16 x i8> %145 to <4 x i32>
  %147 = lshr <4 x i32> %146, <i32 16, i32 16, i32 16, i32 16>
  %148 = bitcast <4 x i32> %147 to <16 x i8>
  %149 = icmp ugt <16 x i8> %145, %148
  %150 = select <16 x i1> %149, <16 x i8> %145, <16 x i8> %148
  %151 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = shufflevector <16 x i8> %139, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %153 = bitcast <16 x i8> %151 to <8 x i16>
  %154 = bitcast <16 x i8> %152 to <8 x i16>
  %155 = xor <16 x i8> %150, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %156 = shufflevector <16 x i8> %155, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %157 = shufflevector <16 x i8> %155, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %158 = bitcast <16 x i8> %156 to <8 x i16>
  %159 = bitcast <16 x i8> %157 to <8 x i16>
  %160 = mul <8 x i16> %158, %153
  %161 = mul <8 x i16> %159, %154
  %162 = bitcast <16 x i8> %139 to <4 x i32>
  %163 = lshr <4 x i32> %162, <i32 8, i32 8, i32 8, i32 8>
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = icmp ugt <16 x i8> %139, %164
  %166 = select <16 x i1> %165, <16 x i8> %139, <16 x i8> %164
  %167 = bitcast <16 x i8> %166 to <4 x i32>
  %168 = lshr <4 x i32> %167, <i32 16, i32 16, i32 16, i32 16>
  %169 = bitcast <4 x i32> %168 to <16 x i8>
  %170 = icmp ugt <16 x i8> %166, %169
  %171 = select <16 x i1> %170, <16 x i8> %166, <16 x i8> %169
  %172 = shufflevector <16 x i8> %142, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %173 = shufflevector <16 x i8> %142, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %174 = bitcast <16 x i8> %172 to <8 x i16>
  %175 = bitcast <16 x i8> %173 to <8 x i16>
  %176 = xor <16 x i8> %171, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %177 = shufflevector <16 x i8> %176, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %178 = shufflevector <16 x i8> %176, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %179 = bitcast <16 x i8> %177 to <8 x i16>
  %180 = bitcast <16 x i8> %178 to <8 x i16>
  %181 = mul <8 x i16> %179, %174
  %182 = mul <8 x i16> %180, %175
  %183 = add <8 x i16> %160, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %184 = add <8 x i16> %183, %181
  %185 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %184, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %186 = add <8 x i16> %161, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %187 = add <8 x i16> %186, %182
  %188 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %187, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %189 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> %188) #18
  %190 = bitcast i32* %14 to <16 x i8>*
  store <16 x i8> %189, <16 x i8>* %190, align 4
  %191 = getelementptr inbounds i32, i32* %14, i64 4
  %192 = getelementptr inbounds i32, i32* %13, i64 4
  %193 = add nsw i32 %12, -4
  br label %194

194:                                              ; preds = %135, %133
  %195 = phi i32* [ %191, %135 ], [ %14, %133 ]
  %196 = phi i32* [ %192, %135 ], [ %13, %133 ]
  %197 = phi i32 [ %193, %135 ], [ %12, %133 ]
  %198 = icmp sgt i32 %197, 1
  br i1 %198, label %199, label %249

199:                                              ; preds = %194
  %200 = bitcast i32* %195 to i64*
  %201 = load i64, i64* %200, align 4
  %202 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %201, i32 0
  %203 = bitcast i32* %196 to i64*
  %204 = load i64, i64* %203, align 4
  %205 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %204, i32 0
  %206 = bitcast <2 x i64> %202 to <4 x i32>
  %207 = lshr <4 x i32> %206, <i32 8, i32 8, i32 8, i32 8>
  %208 = bitcast <2 x i64> %202 to <16 x i8>
  %209 = bitcast <4 x i32> %207 to <16 x i8>
  %210 = icmp ugt <16 x i8> %208, %209
  %211 = select <16 x i1> %210, <16 x i8> %208, <16 x i8> %209
  %212 = bitcast <16 x i8> %211 to <4 x i32>
  %213 = lshr <4 x i32> %212, <i32 16, i32 16, i32 16, i32 16>
  %214 = bitcast <4 x i32> %213 to <16 x i8>
  %215 = icmp ugt <16 x i8> %211, %214
  %216 = select <16 x i1> %215, <16 x i8> %211, <16 x i8> %214
  %217 = bitcast <2 x i64> %205 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %219 = bitcast <16 x i8> %218 to <8 x i16>
  %220 = xor <16 x i8> %216, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %221 = shufflevector <16 x i8> %220, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %222 = bitcast <16 x i8> %221 to <8 x i16>
  %223 = mul <8 x i16> %222, %219
  %224 = bitcast <2 x i64> %205 to <4 x i32>
  %225 = lshr <4 x i32> %224, <i32 8, i32 8, i32 8, i32 8>
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = icmp ugt <16 x i8> %217, %226
  %228 = select <16 x i1> %227, <16 x i8> %217, <16 x i8> %226
  %229 = bitcast <16 x i8> %228 to <4 x i32>
  %230 = lshr <4 x i32> %229, <i32 16, i32 16, i32 16, i32 16>
  %231 = bitcast <4 x i32> %230 to <16 x i8>
  %232 = icmp ugt <16 x i8> %228, %231
  %233 = select <16 x i1> %232, <16 x i8> %228, <16 x i8> %231
  %234 = shufflevector <16 x i8> %208, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %235 = bitcast <16 x i8> %234 to <8 x i16>
  %236 = xor <16 x i8> %233, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %237 = shufflevector <16 x i8> %236, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %238 = bitcast <16 x i8> %237 to <8 x i16>
  %239 = mul <8 x i16> %238, %235
  %240 = add <8 x i16> %223, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %241 = add <8 x i16> %240, %239
  %242 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %241, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %243 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %242, <8 x i16> undef) #18
  %244 = bitcast <16 x i8> %243 to <2 x i64>
  %245 = extractelement <2 x i64> %244, i32 0
  store i64 %245, i64* %200, align 4
  %246 = getelementptr inbounds i32, i32* %195, i64 2
  %247 = getelementptr inbounds i32, i32* %196, i64 2
  %248 = add nsw i32 %197, -2
  br label %249

249:                                              ; preds = %199, %194
  %250 = phi i32* [ %246, %199 ], [ %195, %194 ]
  %251 = phi i32* [ %247, %199 ], [ %196, %194 ]
  %252 = phi i32 [ %248, %199 ], [ %197, %194 ]
  %253 = icmp sgt i32 %252, 0
  br i1 %253, label %254, label %304

254:                                              ; preds = %249
  %255 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %255)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %256 = load i32, i32* %250, align 4
  %257 = bitcast <2 x i64>* %6 to i32*
  store i32 %256, i32* %257, align 16
  %258 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %255)
  %259 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %259)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %260 = load i32, i32* %251, align 4
  %261 = bitcast <2 x i64>* %7 to i32*
  store i32 %260, i32* %261, align 16
  %262 = bitcast <2 x i64>* %7 to <16 x i8>*
  %263 = load <16 x i8>, <16 x i8>* %262, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %259)
  %264 = bitcast <2 x i64> %258 to <4 x i32>
  %265 = lshr <4 x i32> %264, <i32 8, i32 8, i32 8, i32 8>
  %266 = bitcast <2 x i64> %258 to <16 x i8>
  %267 = bitcast <4 x i32> %265 to <16 x i8>
  %268 = icmp ugt <16 x i8> %266, %267
  %269 = select <16 x i1> %268, <16 x i8> %266, <16 x i8> %267
  %270 = bitcast <16 x i8> %269 to <4 x i32>
  %271 = lshr <4 x i32> %270, <i32 16, i32 16, i32 16, i32 16>
  %272 = bitcast <4 x i32> %271 to <16 x i8>
  %273 = icmp ugt <16 x i8> %269, %272
  %274 = select <16 x i1> %273, <16 x i8> %269, <16 x i8> %272
  %275 = shufflevector <16 x i8> %263, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %276 = bitcast <16 x i8> %275 to <8 x i16>
  %277 = xor <16 x i8> %274, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %278 = shufflevector <16 x i8> %277, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %279 = bitcast <16 x i8> %278 to <8 x i16>
  %280 = mul <8 x i16> %279, %276
  %281 = bitcast <16 x i8> %263 to <4 x i32>
  %282 = lshr <4 x i32> %281, <i32 8, i32 8, i32 8, i32 8>
  %283 = bitcast <4 x i32> %282 to <16 x i8>
  %284 = icmp ugt <16 x i8> %263, %283
  %285 = select <16 x i1> %284, <16 x i8> %263, <16 x i8> %283
  %286 = bitcast <16 x i8> %285 to <4 x i32>
  %287 = lshr <4 x i32> %286, <i32 16, i32 16, i32 16, i32 16>
  %288 = bitcast <4 x i32> %287 to <16 x i8>
  %289 = icmp ugt <16 x i8> %285, %288
  %290 = select <16 x i1> %289, <16 x i8> %285, <16 x i8> %288
  %291 = shufflevector <16 x i8> %266, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %292 = bitcast <16 x i8> %291 to <8 x i16>
  %293 = xor <16 x i8> %290, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %294 = shufflevector <16 x i8> %293, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %295 = bitcast <16 x i8> %294 to <8 x i16>
  %296 = mul <8 x i16> %295, %292
  %297 = add <8 x i16> %280, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %298 = add <8 x i16> %297, %296
  %299 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %298, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %300 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %299, <8 x i16> undef) #18
  %301 = bitcast <16 x i8> %300 to <4 x i32>
  %302 = extractelement <4 x i32> %301, i32 0
  store i32 %302, i32* %250, align 4
  br label %304

303:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_3XorEEENS_5Sk4pxERKS2_S4_S4_)
  br label %304

304:                                              ; preds = %16, %254, %249, %9, %303
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_3XorEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = getelementptr inbounds %"class.(anonymous namespace)::Sk4px", %"class.(anonymous namespace)::Sk4px"* %0, i64 0, i32 0, i32 0
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %6 = bitcast <2 x i64> %5 to <4 x i32>
  %7 = lshr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %8 = bitcast <2 x i64> %5 to <16 x i8>
  %9 = bitcast <4 x i32> %7 to <16 x i8>
  %10 = icmp ugt <16 x i8> %8, %9
  %11 = select <16 x i1> %10, <16 x i8> %8, <16 x i8> %9
  %12 = bitcast <16 x i8> %11 to <4 x i32>
  %13 = lshr <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = icmp ugt <16 x i8> %11, %14
  %16 = select <16 x i1> %15, <16 x i8> %11, <16 x i8> %14
  %17 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16, !noalias !310
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %19 to <8 x i16>
  %22 = bitcast <16 x i8> %20 to <8 x i16>
  %23 = xor <16 x i8> %16, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = shufflevector <16 x i8> %23, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = mul <8 x i16> %26, %21
  %29 = mul <8 x i16> %27, %22
  %30 = bitcast <16 x i8> %18 to <4 x i32>
  %31 = lshr <4 x i32> %30, <i32 8, i32 8, i32 8, i32 8>
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = icmp ugt <16 x i8> %18, %32
  %34 = select <16 x i1> %33, <16 x i8> %18, <16 x i8> %32
  %35 = bitcast <16 x i8> %34 to <4 x i32>
  %36 = lshr <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %37 = bitcast <4 x i32> %36 to <16 x i8>
  %38 = icmp ugt <16 x i8> %34, %37
  %39 = select <16 x i1> %38, <16 x i8> %34, <16 x i8> %37
  %40 = shufflevector <16 x i8> %8, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %8, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %42 = bitcast <16 x i8> %40 to <8 x i16>
  %43 = bitcast <16 x i8> %41 to <8 x i16>
  %44 = xor <16 x i8> %39, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = shufflevector <16 x i8> %44, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = mul <8 x i16> %47, %42
  %50 = mul <8 x i16> %48, %43
  %51 = add <8 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %52 = add <8 x i16> %51, %49
  %53 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %52, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %54 = add <8 x i16> %29, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %55 = add <8 x i16> %54, %50
  %56 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %55, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %57 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %53, <8 x i16> %56) #18
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %57, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 16
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = shufflevector <16 x i8> %63, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i8> %64 to <8 x i16>
  %67 = bitcast <16 x i8> %65 to <8 x i16>
  %68 = mul <8 x i16> %66, %60
  %69 = mul <8 x i16> %67, %61
  %70 = bitcast <2 x i64> %5 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i8> %71 to <8 x i16>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = xor <16 x i8> %63, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %78 = bitcast <16 x i8> %76 to <8 x i16>
  %79 = bitcast <16 x i8> %77 to <8 x i16>
  %80 = mul <8 x i16> %73, %78
  %81 = mul <8 x i16> %74, %79
  %82 = add <8 x i16> %68, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %83 = add <8 x i16> %82, %80
  %84 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %83, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %85 = add <8 x i16> %69, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %86 = add <8 x i16> %85, %81
  %87 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %86, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %88 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> %87) #18
  %89 = bitcast <16 x i8> %88 to <2 x i64>
  ret <2 x i64> %89
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.28"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.28"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_4PlusEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.28"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = icmp eq i8* %4, null
  %15 = icmp sgt i32 %3, 0
  br i1 %14, label %16, label %89

16:                                               ; preds = %5
  br i1 %15, label %17, label %289

17:                                               ; preds = %16, %22
  %18 = phi i32 [ %37, %22 ], [ %3, %16 ]
  %19 = phi i32* [ %36, %22 ], [ %2, %16 ]
  %20 = phi i32* [ %35, %22 ], [ %1, %16 ]
  %21 = icmp sgt i32 %18, 7
  br i1 %21, label %22, label %39

22:                                               ; preds = %17
  %23 = bitcast i32* %20 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 4
  %25 = bitcast i32* %19 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 4
  %27 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %26, <16 x i8> %24) #18
  %28 = getelementptr inbounds i32, i32* %20, i64 4
  %29 = bitcast i32* %28 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 4
  %31 = getelementptr inbounds i32, i32* %19, i64 4
  %32 = bitcast i32* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 4
  %34 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %33, <16 x i8> %30) #18
  store <16 x i8> %27, <16 x i8>* %23, align 4
  store <16 x i8> %34, <16 x i8>* %29, align 4
  %35 = getelementptr inbounds i32, i32* %20, i64 8
  %36 = getelementptr inbounds i32, i32* %19, i64 8
  %37 = add nsw i32 %18, -8
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %17, label %289

39:                                               ; preds = %17
  %40 = icmp sgt i32 %18, 3
  br i1 %40, label %41, label %50

41:                                               ; preds = %39
  %42 = bitcast i32* %20 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 4
  %44 = bitcast i32* %19 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 4
  %46 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %45, <16 x i8> %43) #18
  store <16 x i8> %46, <16 x i8>* %42, align 4
  %47 = getelementptr inbounds i32, i32* %20, i64 4
  %48 = getelementptr inbounds i32, i32* %19, i64 4
  %49 = add nsw i32 %18, -4
  br label %50

50:                                               ; preds = %41, %39
  %51 = phi i32* [ %47, %41 ], [ %20, %39 ]
  %52 = phi i32* [ %48, %41 ], [ %19, %39 ]
  %53 = phi i32 [ %49, %41 ], [ %18, %39 ]
  %54 = icmp sgt i32 %53, 1
  br i1 %54, label %55, label %70

55:                                               ; preds = %50
  %56 = bitcast i32* %51 to i64*
  %57 = load i64, i64* %56, align 4
  %58 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %57, i32 0
  %59 = bitcast i32* %52 to i64*
  %60 = load i64, i64* %59, align 4
  %61 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %60, i32 0
  %62 = bitcast <2 x i64> %61 to <16 x i8>
  %63 = bitcast <2 x i64> %58 to <16 x i8>
  %64 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %62, <16 x i8> %63) #18
  %65 = bitcast <16 x i8> %64 to <2 x i64>
  %66 = extractelement <2 x i64> %65, i32 0
  store i64 %66, i64* %56, align 4
  %67 = getelementptr inbounds i32, i32* %51, i64 2
  %68 = getelementptr inbounds i32, i32* %52, i64 2
  %69 = add nsw i32 %53, -2
  br label %70

70:                                               ; preds = %55, %50
  %71 = phi i32* [ %67, %55 ], [ %51, %50 ]
  %72 = phi i32* [ %68, %55 ], [ %52, %50 ]
  %73 = phi i32 [ %69, %55 ], [ %53, %50 ]
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %289

75:                                               ; preds = %70
  %76 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %77 = load i32, i32* %71, align 4
  %78 = bitcast <2 x i64>* %6 to i32*
  store i32 %77, i32* %78, align 16
  %79 = bitcast <2 x i64>* %6 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76)
  %81 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %82 = load i32, i32* %72, align 4
  %83 = bitcast <2 x i64>* %7 to i32*
  store i32 %82, i32* %83, align 16
  %84 = bitcast <2 x i64>* %7 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81)
  %86 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %85, <16 x i8> %80) #18
  %87 = bitcast <16 x i8> %86 to <4 x i32>
  %88 = extractelement <4 x i32> %87, i32 0
  store i32 %88, i32* %71, align 4
  br label %289

89:                                               ; preds = %5
  br i1 %15, label %90, label %289

90:                                               ; preds = %89
  %91 = bitcast <2 x i64>* %11 to i8*
  %92 = bitcast <2 x i64>* %11 to i32*
  %93 = bitcast <2 x i64>* %11 to <16 x i8>*
  %94 = bitcast <2 x i64>* %8 to i8*
  %95 = bitcast <2 x i64>* %8 to i32*
  %96 = bitcast <2 x i64>* %8 to <16 x i8>*
  br label %97

97:                                               ; preds = %90, %103
  %98 = phi i32 [ %164, %103 ], [ %3, %90 ]
  %99 = phi i8* [ %163, %103 ], [ %4, %90 ]
  %100 = phi i32* [ %162, %103 ], [ %2, %90 ]
  %101 = phi i32* [ %161, %103 ], [ %1, %90 ]
  %102 = icmp sgt i32 %98, 7
  br i1 %102, label %103, label %166

103:                                              ; preds = %97
  %104 = bitcast i32* %101 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 4
  %106 = bitcast i32* %100 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %11, align 16
  %108 = bitcast i8* %99 to i32*
  %109 = load i32, i32* %108, align 1
  store i32 %109, i32* %92, align 16
  %110 = load <16 x i8>, <16 x i8>* %93, align 16
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <16 x i8> %111 to <8 x i16>
  %113 = shufflevector <8 x i16> %112, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91)
  %114 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = shufflevector <16 x i8> %107, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i8> %114 to <8 x i16>
  %117 = bitcast <16 x i8> %115 to <8 x i16>
  %118 = bitcast <8 x i16> %113 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = shufflevector <16 x i8> %118, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %121 = bitcast <16 x i8> %119 to <8 x i16>
  %122 = bitcast <16 x i8> %120 to <8 x i16>
  %123 = mul <8 x i16> %121, %116
  %124 = mul <8 x i16> %122, %117
  %125 = add <8 x i16> %123, %116
  %126 = add <8 x i16> %124, %117
  %127 = lshr <8 x i16> %125, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %128 = lshr <8 x i16> %126, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %129 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %127, <8 x i16> %128) #18
  %130 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %105, <16 x i8> %129) #18
  %131 = getelementptr inbounds i32, i32* %101, i64 4
  %132 = bitcast i32* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 4
  %134 = getelementptr inbounds i32, i32* %100, i64 4
  %135 = bitcast i32* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 4
  %137 = getelementptr inbounds i8, i8* %99, i64 4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %8, align 16
  %138 = bitcast i8* %137 to i32*
  %139 = load i32, i32* %138, align 1
  store i32 %139, i32* %95, align 16
  %140 = load <16 x i8>, <16 x i8>* %96, align 16
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <16 x i8> %141 to <8 x i16>
  %143 = shufflevector <8 x i16> %142, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94)
  %144 = shufflevector <16 x i8> %136, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %145 = shufflevector <16 x i8> %136, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %146 = bitcast <16 x i8> %144 to <8 x i16>
  %147 = bitcast <16 x i8> %145 to <8 x i16>
  %148 = bitcast <8 x i16> %143 to <16 x i8>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %150 = shufflevector <16 x i8> %148, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %151 = bitcast <16 x i8> %149 to <8 x i16>
  %152 = bitcast <16 x i8> %150 to <8 x i16>
  %153 = mul <8 x i16> %151, %146
  %154 = mul <8 x i16> %152, %147
  %155 = add <8 x i16> %153, %146
  %156 = add <8 x i16> %154, %147
  %157 = lshr <8 x i16> %155, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %158 = lshr <8 x i16> %156, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %159 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %157, <8 x i16> %158) #18
  %160 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %133, <16 x i8> %159) #18
  store <16 x i8> %130, <16 x i8>* %104, align 4
  store <16 x i8> %160, <16 x i8>* %132, align 4
  %161 = getelementptr inbounds i32, i32* %101, i64 8
  %162 = getelementptr inbounds i32, i32* %100, i64 8
  %163 = getelementptr inbounds i8, i8* %99, i64 8
  %164 = add nsw i32 %98, -8
  %165 = icmp sgt i32 %164, 0
  br i1 %165, label %97, label %289

166:                                              ; preds = %97
  %167 = icmp sgt i32 %98, 3
  br i1 %167, label %168, label %203

168:                                              ; preds = %166
  %169 = bitcast i32* %101 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 4
  %171 = bitcast i32* %100 to <16 x i8>*
  %172 = load <16 x i8>, <16 x i8>* %171, align 4
  %173 = bitcast <2 x i64>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %173)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %9, align 16
  %174 = bitcast i8* %99 to i32*
  %175 = load i32, i32* %174, align 1
  %176 = bitcast <2 x i64>* %9 to i32*
  store i32 %175, i32* %176, align 16
  %177 = bitcast <2 x i64>* %9 to <16 x i8>*
  %178 = load <16 x i8>, <16 x i8>* %177, align 16
  %179 = shufflevector <16 x i8> %178, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %180 = bitcast <16 x i8> %179 to <8 x i16>
  %181 = shufflevector <8 x i16> %180, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %173)
  %182 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %183 = shufflevector <16 x i8> %172, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %184 = bitcast <16 x i8> %182 to <8 x i16>
  %185 = bitcast <16 x i8> %183 to <8 x i16>
  %186 = bitcast <8 x i16> %181 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %188 = shufflevector <16 x i8> %186, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast <16 x i8> %187 to <8 x i16>
  %190 = bitcast <16 x i8> %188 to <8 x i16>
  %191 = mul <8 x i16> %189, %184
  %192 = mul <8 x i16> %190, %185
  %193 = add <8 x i16> %191, %184
  %194 = add <8 x i16> %192, %185
  %195 = lshr <8 x i16> %193, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %196 = lshr <8 x i16> %194, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %195, <8 x i16> %196) #18
  %198 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %170, <16 x i8> %197) #18
  store <16 x i8> %198, <16 x i8>* %169, align 4
  %199 = getelementptr inbounds i32, i32* %101, i64 4
  %200 = getelementptr inbounds i32, i32* %100, i64 4
  %201 = getelementptr inbounds i8, i8* %99, i64 4
  %202 = add nsw i32 %98, -4
  br label %203

203:                                              ; preds = %168, %166
  %204 = phi i32* [ %199, %168 ], [ %101, %166 ]
  %205 = phi i32* [ %200, %168 ], [ %100, %166 ]
  %206 = phi i8* [ %201, %168 ], [ %99, %166 ]
  %207 = phi i32 [ %202, %168 ], [ %98, %166 ]
  %208 = icmp sgt i32 %207, 1
  br i1 %208, label %209, label %251

209:                                              ; preds = %203
  %210 = bitcast i32* %204 to i64*
  %211 = load i64, i64* %210, align 4
  %212 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %211, i32 0
  %213 = bitcast i32* %205 to i64*
  %214 = load i64, i64* %213, align 4
  %215 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %214, i32 0
  %216 = bitcast i8* %206 to i16*
  %217 = load i16, i16* %216, align 1
  %218 = zext i16 %217 to i32
  %219 = bitcast <2 x i64>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %219)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %10, align 16
  %220 = bitcast <2 x i64>* %10 to i32*
  store i32 %218, i32* %220, align 16
  %221 = bitcast <2 x i64>* %10 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 16
  %223 = shufflevector <16 x i8> %222, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %224 = bitcast <16 x i8> %223 to <8 x i16>
  %225 = shufflevector <8 x i16> %224, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %219)
  %226 = bitcast <2 x i64> %215 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %228 = shufflevector <16 x i8> %226, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %229 = bitcast <16 x i8> %227 to <8 x i16>
  %230 = bitcast <16 x i8> %228 to <8 x i16>
  %231 = bitcast <8 x i16> %225 to <16 x i8>
  %232 = shufflevector <16 x i8> %231, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %233 = shufflevector <16 x i8> %231, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %234 = bitcast <16 x i8> %232 to <8 x i16>
  %235 = bitcast <16 x i8> %233 to <8 x i16>
  %236 = mul <8 x i16> %234, %229
  %237 = mul <8 x i16> %235, %230
  %238 = add <8 x i16> %236, %229
  %239 = add <8 x i16> %237, %230
  %240 = lshr <8 x i16> %238, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %241 = lshr <8 x i16> %239, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %242 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %240, <8 x i16> %241) #18
  %243 = bitcast <2 x i64> %212 to <16 x i8>
  %244 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %243, <16 x i8> %242) #18
  %245 = bitcast <16 x i8> %244 to <2 x i64>
  %246 = extractelement <2 x i64> %245, i32 0
  store i64 %246, i64* %210, align 4
  %247 = getelementptr inbounds i32, i32* %204, i64 2
  %248 = getelementptr inbounds i32, i32* %205, i64 2
  %249 = getelementptr inbounds i8, i8* %206, i64 2
  %250 = add nsw i32 %207, -2
  br label %251

251:                                              ; preds = %209, %203
  %252 = phi i32* [ %247, %209 ], [ %204, %203 ]
  %253 = phi i32* [ %248, %209 ], [ %205, %203 ]
  %254 = phi i8* [ %249, %209 ], [ %206, %203 ]
  %255 = phi i32 [ %250, %209 ], [ %207, %203 ]
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %289

257:                                              ; preds = %251
  %258 = bitcast <2 x i64>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %258)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %12, align 16
  %259 = load i32, i32* %252, align 4
  %260 = bitcast <2 x i64>* %12 to i32*
  store i32 %259, i32* %260, align 16
  %261 = bitcast <2 x i64>* %12 to <16 x i8>*
  %262 = load <16 x i8>, <16 x i8>* %261, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %258)
  %263 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %263)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %13, align 16
  %264 = load i32, i32* %253, align 4
  %265 = bitcast <2 x i64>* %13 to i32*
  store i32 %264, i32* %265, align 16
  %266 = bitcast <2 x i64>* %13 to <16 x i8>*
  %267 = load <16 x i8>, <16 x i8>* %266, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %263)
  %268 = load i8, i8* %254, align 1
  %269 = insertelement <16 x i8> undef, i8 %268, i32 0
  %270 = shufflevector <16 x i8> %269, <16 x i8> undef, <16 x i32> zeroinitializer
  %271 = shufflevector <16 x i8> %267, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %272 = shufflevector <16 x i8> %267, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %273 = bitcast <16 x i8> %271 to <8 x i16>
  %274 = bitcast <16 x i8> %272 to <8 x i16>
  %275 = shufflevector <16 x i8> %270, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %276 = shufflevector <16 x i8> %270, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %277 = bitcast <16 x i8> %275 to <8 x i16>
  %278 = bitcast <16 x i8> %276 to <8 x i16>
  %279 = mul <8 x i16> %277, %273
  %280 = mul <8 x i16> %278, %274
  %281 = add <8 x i16> %279, %273
  %282 = add <8 x i16> %280, %274
  %283 = lshr <8 x i16> %281, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %284 = lshr <8 x i16> %282, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %285 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %283, <8 x i16> %284) #18
  %286 = tail call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %262, <16 x i8> %285) #18
  %287 = bitcast <16 x i8> %286 to <4 x i32>
  %288 = extractelement <4 x i32> %287, i32 0
  store i32 %288, i32* %252, align 4
  br label %289

289:                                              ; preds = %103, %22, %257, %251, %89, %75, %70, %16
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8>, <16 x i8>) #14

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.30"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.30"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_8ModulateEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.30"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %139

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %140

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %59, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %58, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %57, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %61

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = mul <8 x i16> %23, %27
  %30 = mul <8 x i16> %24, %28
  %31 = add <8 x i16> %29, %23
  %32 = add <8 x i16> %30, %24
  %33 = lshr <8 x i16> %31, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %33, <8 x i16> %34) #18
  %36 = getelementptr inbounds i32, i32* %14, i64 4
  %37 = bitcast i32* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 4
  %39 = getelementptr inbounds i32, i32* %13, i64 4
  %40 = bitcast i32* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 4
  %42 = shufflevector <16 x i8> %41, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %43 = shufflevector <16 x i8> %41, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %42 to <8 x i16>
  %45 = bitcast <16 x i8> %43 to <8 x i16>
  %46 = shufflevector <16 x i8> %38, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = shufflevector <16 x i8> %38, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %48 = bitcast <16 x i8> %46 to <8 x i16>
  %49 = bitcast <16 x i8> %47 to <8 x i16>
  %50 = mul <8 x i16> %44, %48
  %51 = mul <8 x i16> %45, %49
  %52 = add <8 x i16> %50, %44
  %53 = add <8 x i16> %51, %45
  %54 = lshr <8 x i16> %52, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %55 = lshr <8 x i16> %53, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %54, <8 x i16> %55) #18
  store <16 x i8> %35, <16 x i8>* %17, align 4
  store <16 x i8> %56, <16 x i8>* %37, align 4
  %57 = getelementptr inbounds i32, i32* %14, i64 8
  %58 = getelementptr inbounds i32, i32* %13, i64 8
  %59 = add nsw i32 %12, -8
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %11, label %140

61:                                               ; preds = %11
  %62 = icmp sgt i32 %12, 3
  br i1 %62, label %63, label %86

63:                                               ; preds = %61
  %64 = bitcast i32* %14 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 4
  %66 = bitcast i32* %13 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 4
  %68 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = shufflevector <16 x i8> %67, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i8> %68 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %65, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = mul <8 x i16> %70, %74
  %77 = mul <8 x i16> %71, %75
  %78 = add <8 x i16> %76, %70
  %79 = add <8 x i16> %77, %71
  %80 = lshr <8 x i16> %78, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %81 = lshr <8 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #18
  store <16 x i8> %82, <16 x i8>* %64, align 4
  %83 = getelementptr inbounds i32, i32* %14, i64 4
  %84 = getelementptr inbounds i32, i32* %13, i64 4
  %85 = add nsw i32 %12, -4
  br label %86

86:                                               ; preds = %63, %61
  %87 = phi i32* [ %83, %63 ], [ %14, %61 ]
  %88 = phi i32* [ %84, %63 ], [ %13, %61 ]
  %89 = phi i32 [ %85, %63 ], [ %12, %61 ]
  %90 = icmp sgt i32 %89, 1
  br i1 %90, label %91, label %113

91:                                               ; preds = %86
  %92 = bitcast i32* %87 to i64*
  %93 = load i64, i64* %92, align 4
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = bitcast i32* %88 to i64*
  %96 = load i64, i64* %95, align 4
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = bitcast <2 x i64> %94 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = bitcast <16 x i8> %102 to <8 x i16>
  %104 = mul <8 x i16> %100, %103
  %105 = add <8 x i16> %104, %100
  %106 = lshr <8 x i16> %105, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %106, <8 x i16> undef) #18
  %108 = bitcast <16 x i8> %107 to <2 x i64>
  %109 = extractelement <2 x i64> %108, i32 0
  store i64 %109, i64* %92, align 4
  %110 = getelementptr inbounds i32, i32* %87, i64 2
  %111 = getelementptr inbounds i32, i32* %88, i64 2
  %112 = add nsw i32 %89, -2
  br label %113

113:                                              ; preds = %91, %86
  %114 = phi i32* [ %110, %91 ], [ %87, %86 ]
  %115 = phi i32* [ %111, %91 ], [ %88, %86 ]
  %116 = phi i32 [ %112, %91 ], [ %89, %86 ]
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %140

118:                                              ; preds = %113
  %119 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %119)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %120 = load i32, i32* %114, align 4
  %121 = bitcast <2 x i64>* %6 to i32*
  store i32 %120, i32* %121, align 16
  %122 = bitcast <2 x i64>* %6 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %119)
  %124 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %124)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %125 = load i32, i32* %115, align 4
  %126 = bitcast <2 x i64>* %7 to i32*
  store i32 %125, i32* %126, align 16
  %127 = bitcast <2 x i64>* %7 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %124)
  %129 = shufflevector <16 x i8> %128, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %130 = bitcast <16 x i8> %129 to <8 x i16>
  %131 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %132 = bitcast <16 x i8> %131 to <8 x i16>
  %133 = mul <8 x i16> %130, %132
  %134 = add <8 x i16> %133, %130
  %135 = lshr <8 x i16> %134, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> undef) #18
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = extractelement <4 x i32> %137, i32 0
  store i32 %138, i32* %114, align 4
  br label %140

139:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_8ModulateEEENS_5Sk4pxERKS2_S4_S4_)
  br label %140

140:                                              ; preds = %16, %118, %113, %9, %139
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_8ModulateEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16, !noalias !317
  %6 = shufflevector <16 x i8> %5, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %7 = shufflevector <16 x i8> %5, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %8 = bitcast <16 x i8> %6 to <8 x i16>
  %9 = bitcast <16 x i8> %7 to <8 x i16>
  %10 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %14 = bitcast <16 x i8> %12 to <8 x i16>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = mul <8 x i16> %14, %8
  %17 = mul <8 x i16> %15, %9
  %18 = add <8 x i16> %16, %8
  %19 = add <8 x i16> %17, %9
  %20 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %20, <8 x i16> %21) #18
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = shufflevector <16 x i8> %22, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 16
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = shufflevector <16 x i8> %28, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %29 to <8 x i16>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = mul <8 x i16> %31, %25
  %34 = mul <8 x i16> %32, %26
  %35 = xor <16 x i8> %28, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %37 = shufflevector <16 x i8> %35, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %38 = bitcast <16 x i8> %36 to <8 x i16>
  %39 = bitcast <16 x i8> %37 to <8 x i16>
  %40 = mul <8 x i16> %38, %14
  %41 = mul <8 x i16> %39, %15
  %42 = add <8 x i16> %33, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %43 = add <8 x i16> %42, %40
  %44 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %43, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %45 = add <8 x i16> %34, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %46 = add <8 x i16> %45, %41
  %47 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %46, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %48 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> %47) #18
  %49 = bitcast <16 x i8> %48 to <2 x i64>
  ret <2 x i64> %49
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEED0Ev(%"class.(anonymous namespace)::Sk4pxXfermode.32"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.(anonymous namespace)::Sk4pxXfermode.32"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK12_GLOBAL__N_113Sk4pxXfermodeINS_6ScreenEE6xfer32EPjPKjiPKh(%"class.(anonymous namespace)::Sk4pxXfermode.32"* nocapture readnone, i32* nocapture, i32* nocapture readonly, i32, i8* readonly) unnamed_addr #4 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = icmp eq i8* %4, null
  br i1 %8, label %9, label %149

9:                                                ; preds = %5
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %150

11:                                               ; preds = %9, %16
  %12 = phi i32 [ %63, %16 ], [ %3, %9 ]
  %13 = phi i32* [ %62, %16 ], [ %2, %9 ]
  %14 = phi i32* [ %61, %16 ], [ %1, %9 ]
  %15 = icmp sgt i32 %12, 7
  br i1 %15, label %16, label %65

16:                                               ; preds = %11
  %17 = bitcast i32* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 4
  %19 = bitcast i32* %13 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 4
  %21 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = xor <16 x i8> %20, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = shufflevector <16 x i8> %25, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast <16 x i8> %27 to <8 x i16>
  %30 = mul <8 x i16> %28, %23
  %31 = mul <8 x i16> %29, %24
  %32 = add <8 x i16> %30, %23
  %33 = add <8 x i16> %31, %24
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = lshr <8 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %34, <8 x i16> %35) #18
  %37 = add <16 x i8> %36, %20
  %38 = getelementptr inbounds i32, i32* %14, i64 4
  %39 = bitcast i32* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 4
  %41 = getelementptr inbounds i32, i32* %13, i64 4
  %42 = bitcast i32* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 4
  %44 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = shufflevector <16 x i8> %40, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i8> %44 to <8 x i16>
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = xor <16 x i8> %43, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = mul <8 x i16> %51, %46
  %54 = mul <8 x i16> %52, %47
  %55 = add <8 x i16> %53, %46
  %56 = add <8 x i16> %54, %47
  %57 = lshr <8 x i16> %55, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %58 = lshr <8 x i16> %56, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %57, <8 x i16> %58) #18
  %60 = add <16 x i8> %59, %43
  store <16 x i8> %37, <16 x i8>* %17, align 4
  store <16 x i8> %60, <16 x i8>* %39, align 4
  %61 = getelementptr inbounds i32, i32* %14, i64 8
  %62 = getelementptr inbounds i32, i32* %13, i64 8
  %63 = add nsw i32 %12, -8
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %11, label %150

65:                                               ; preds = %11
  %66 = icmp sgt i32 %12, 3
  br i1 %66, label %67, label %92

67:                                               ; preds = %65
  %68 = bitcast i32* %14 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 4
  %70 = bitcast i32* %13 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 4
  %72 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %69, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <16 x i8> %72 to <8 x i16>
  %75 = bitcast <16 x i8> %73 to <8 x i16>
  %76 = xor <16 x i8> %71, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = shufflevector <16 x i8> %76, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i8> %77 to <8 x i16>
  %80 = bitcast <16 x i8> %78 to <8 x i16>
  %81 = mul <8 x i16> %79, %74
  %82 = mul <8 x i16> %80, %75
  %83 = add <8 x i16> %81, %74
  %84 = add <8 x i16> %82, %75
  %85 = lshr <8 x i16> %83, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = lshr <8 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %87 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %85, <8 x i16> %86) #18
  %88 = add <16 x i8> %87, %71
  store <16 x i8> %88, <16 x i8>* %68, align 4
  %89 = getelementptr inbounds i32, i32* %14, i64 4
  %90 = getelementptr inbounds i32, i32* %13, i64 4
  %91 = add nsw i32 %12, -4
  br label %92

92:                                               ; preds = %67, %65
  %93 = phi i32* [ %89, %67 ], [ %14, %65 ]
  %94 = phi i32* [ %90, %67 ], [ %13, %65 ]
  %95 = phi i32 [ %91, %67 ], [ %12, %65 ]
  %96 = icmp sgt i32 %95, 1
  br i1 %96, label %97, label %121

97:                                               ; preds = %92
  %98 = bitcast i32* %93 to i64*
  %99 = load i64, i64* %98, align 4
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast i32* %94 to i64*
  %102 = load i64, i64* %101, align 4
  %103 = insertelement <2 x i64> <i64 undef, i64 -6148914691236517206>, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <16 x i8>
  %105 = bitcast <2 x i64> %100 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %106 to <8 x i16>
  %108 = xor <16 x i8> %104, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %109 = shufflevector <16 x i8> %108, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %110 = bitcast <16 x i8> %109 to <8 x i16>
  %111 = mul <8 x i16> %110, %107
  %112 = add <8 x i16> %111, %107
  %113 = lshr <8 x i16> %112, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %114 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %113, <8 x i16> undef) #18
  %115 = add <16 x i8> %114, %104
  %116 = bitcast <16 x i8> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  store i64 %117, i64* %98, align 4
  %118 = getelementptr inbounds i32, i32* %93, i64 2
  %119 = getelementptr inbounds i32, i32* %94, i64 2
  %120 = add nsw i32 %95, -2
  br label %121

121:                                              ; preds = %97, %92
  %122 = phi i32* [ %118, %97 ], [ %93, %92 ]
  %123 = phi i32* [ %119, %97 ], [ %94, %92 ]
  %124 = phi i32 [ %120, %97 ], [ %95, %92 ]
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %150

126:                                              ; preds = %121
  %127 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %127)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %6, align 16
  %128 = load i32, i32* %122, align 4
  %129 = bitcast <2 x i64>* %6 to i32*
  store i32 %128, i32* %129, align 16
  %130 = bitcast <2 x i64>* %6 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %127)
  %132 = bitcast <2 x i64>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %132)
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %7, align 16
  %133 = load i32, i32* %123, align 4
  %134 = bitcast <2 x i64>* %7 to i32*
  store i32 %133, i32* %134, align 16
  %135 = bitcast <2 x i64>* %7 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %132)
  %137 = shufflevector <16 x i8> %131, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = xor <16 x i8> %136, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %140 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %141 = bitcast <16 x i8> %140 to <8 x i16>
  %142 = mul <8 x i16> %141, %138
  %143 = add <8 x i16> %142, %138
  %144 = lshr <8 x i16> %143, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %145 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %144, <8 x i16> undef) #18
  %146 = add <16 x i8> %145, %136
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = extractelement <4 x i32> %147, i32 0
  store i32 %148, i32* %122, align 4
  br label %150

149:                                              ; preds = %5
  tail call fastcc void @_ZN12_GLOBAL__N_15Sk4px14MapDstSrcAlphaIFS0_RKS0_S3_S3_EEEviPjPKjPKhRKT_(i32 %3, i32* %1, i32* %2, i8* nonnull %4, <2 x i64> (%"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*, %"class.(anonymous namespace)::Sk4px"*)* nonnull @_ZN12_GLOBAL__N_17xfer_aaINS_6ScreenEEENS_5Sk4pxERKS2_S4_S4_)
  br label %150

150:                                              ; preds = %16, %126, %121, %9, %149
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal <2 x i64> @_ZN12_GLOBAL__N_17xfer_aaINS_6ScreenEEENS_5Sk4pxERKS2_S4_S4_(%"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16), %"class.(anonymous namespace)::Sk4px"* nocapture readonly dereferenceable(16)) #12 {
  %4 = bitcast %"class.(anonymous namespace)::Sk4px"* %1 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  %6 = bitcast %"class.(anonymous namespace)::Sk4px"* %0 to <16 x i8>*
  %7 = load <16 x i8>, <16 x i8>* %6, align 16, !noalias !320
  %8 = shufflevector <16 x i8> %7, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %9 = shufflevector <16 x i8> %7, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %10 = bitcast <16 x i8> %8 to <8 x i16>
  %11 = bitcast <16 x i8> %9 to <8 x i16>
  %12 = xor <16 x i8> %5, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %12, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = bitcast <16 x i8> %13 to <8 x i16>
  %16 = bitcast <16 x i8> %14 to <8 x i16>
  %17 = mul <8 x i16> %10, %15
  %18 = mul <8 x i16> %11, %16
  %19 = add <8 x i16> %17, %10
  %20 = add <8 x i16> %18, %11
  %21 = lshr <8 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %21, <8 x i16> %22) #18
  %24 = add <16 x i8> %23, %5
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = bitcast <16 x i8> %26 to <8 x i16>
  %29 = bitcast %"class.(anonymous namespace)::Sk4px"* %2 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 16
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %33 = bitcast <16 x i8> %31 to <8 x i16>
  %34 = bitcast <16 x i8> %32 to <8 x i16>
  %35 = mul <8 x i16> %33, %27
  %36 = mul <8 x i16> %34, %28
  %37 = xor <16 x i8> %30, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %40 = bitcast <16 x i8> %38 to <8 x i16>
  %41 = bitcast <16 x i8> %39 to <8 x i16>
  %42 = mul <8 x i16> %40, %10
  %43 = mul <8 x i16> %41, %11
  %44 = add <8 x i16> %35, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %45 = add <8 x i16> %44, %42
  %46 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %45, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %47 = add <8 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %48 = add <8 x i16> %47, %43
  %49 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %48, <8 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #18
  %50 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %46, <8 x i16> %49) #18
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  ret <2 x i64> %51
}

declare i32 @_Z18SkPreMultiplyColorj(i32) local_unnamed_addr #15

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #11

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #14

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fma.f32(float, float, float) #14

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #16

; Function Attrs: nofree nounwind readnone
declare float @ceilf(float) local_unnamed_addr #17

; Function Attrs: nofree nounwind readnone
declare float @floorf(float) local_unnamed_addr #17

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #13

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #13

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #13

; Function Attrs: nounwind
declare void @llvm.assume(i1) #18

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #13

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #13

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.rcp.ps(<4 x float>) #13

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #14

declare void @_ZN6SkOpts10Init_ssse3Ev() local_unnamed_addr #15

declare void @_ZN6SkOpts10Init_sse42Ev() local_unnamed_addr #15

declare void @_ZN6SkOpts8Init_avxEv() local_unnamed_addr #15

declare void @_ZN6SkOpts8Init_hswEv() local_unnamed_addr #15

declare void @_ZN6SkOpts8Init_skxEv() local_unnamed_addr #15

declare void @_ZN6SkOpts9Init_ermsEv() local_unnamed_addr #15

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #11

attributes #0 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { cold noreturn nounwind }
attributes #11 = { argmemonly nounwind }
attributes #12 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind }
attributes #19 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = !{!18}
!18 = distinct !{!18, !19}
!19 = distinct !{!19, !"LVerDomain"}
!20 = !{!21}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !8}
!23 = distinct !{!23, !8}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !8}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !8}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !8}
!51 = distinct !{!51, !8}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !8}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !8}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !67}
!67 = !{!"llvm.loop.unroll.disable"}
!68 = distinct !{!68, !8}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !71, !8}
!71 = !{!"llvm.loop.unroll.runtime.disable"}
!72 = distinct !{!72, !67}
!73 = distinct !{!73, !8}
!74 = distinct !{!74, !67}
!75 = distinct !{!75, !71, !8}
!76 = distinct !{!76, !67}
!77 = distinct !{!77, !67}
!78 = distinct !{!78, !8}
!79 = distinct !{!79, !67}
!80 = distinct !{!80, !71, !8}
!81 = distinct !{!81, !67}
!82 = distinct !{!82, !8}
!83 = distinct !{!83, !67}
!84 = distinct !{!84, !71, !8}
!85 = distinct !{!85, !67}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!88 = distinct !{!88, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!91 = distinct !{!91, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!92 = !{!93, !95}
!93 = distinct !{!93, !94, !"_ZN4skvxL3mapIRZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!94 = distinct !{!94, !"_ZN4skvxL3mapIRZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!95 = distinct !{!95, !96, !"_ZN4skvx3mapIZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!96 = distinct !{!96, !"_ZN4skvx3mapIZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!97 = !{!98, !100}
!98 = distinct !{!98, !99, !"_ZN4skvxL3mapIRZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!99 = distinct !{!99, !"_ZN4skvxL3mapIRZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_JNS_3VecILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!100 = distinct !{!100, !101, !"_ZN4skvx3mapIZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!101 = distinct !{!101, !"_ZN4skvx3mapIZN4sse314interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_Li8EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!102 = !{!103, !105, !107}
!103 = distinct !{!103, !104, !"_ZN4skvxL3mapIRZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_JNS2_ILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!104 = distinct !{!104, !"_ZN4skvxL3mapIRZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_JNS2_ILi8EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!105 = distinct !{!105, !106, !"_ZN4skvx3mapIZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_Li8EiJEEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!106 = distinct !{!106, !"_ZN4skvx3mapIZL8gather32ILi8EENS_3VecIXT_EiEEPKiRKS3_EUliE_Li8EiJEEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!107 = distinct !{!107, !108, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!108 = distinct !{!108, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!111 = distinct !{!111, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!114 = distinct !{!114, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!117 = distinct !{!117, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!120 = distinct !{!120, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!123 = distinct !{!123, !"_ZN4skvxL4castImLi8EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!126 = distinct !{!126, !"_ZN4skvxorILi8EmEENS_3VecIXT_ET0_EERKS3_S5_"}
!127 = distinct !{!127, !67}
!128 = !{!129}
!129 = distinct !{!129, !130, !"_ZN4skvxplILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!130 = distinct !{!130, !"_ZN4skvxplILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!131 = !{!132}
!132 = distinct !{!132, !133, !"_ZN4skvxmiILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!133 = distinct !{!133, !"_ZN4skvxmiILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN4skvxmlILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!136 = distinct !{!136, !"_ZN4skvxmlILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN4skvxdvILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!139 = distinct !{!139, !"_ZN4skvxdvILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!140 = !{!141}
!141 = distinct !{!141, !142, !"_ZN4skvxL3minILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!142 = distinct !{!142, !"_ZN4skvxL3minILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"_ZN4skvxL3maxILi8EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!145 = distinct !{!145, !"_ZN4skvxL3maxILi8EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!146 = !{!147, !149, !151}
!147 = distinct !{!147, !148, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!148 = distinct !{!148, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!149 = distinct !{!149, !150, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!150 = distinct !{!150, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!151 = distinct !{!151, !152, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!152 = distinct !{!152, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!153 = !{!154}
!154 = distinct !{!154, !155, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!155 = distinct !{!155, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_"}
!156 = !{!157, !159, !161}
!157 = distinct !{!157, !158, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!158 = distinct !{!158, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!159 = distinct !{!159, !160, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!160 = distinct !{!160, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!161 = distinct !{!161, !162, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!162 = distinct !{!162, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!163 = !{!164}
!164 = distinct !{!164, !165, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!165 = distinct !{!165, !"_ZN4skvxngILi8EfEENS_3VecIXT_ET0_EERKS3_"}
!166 = !{!167, !169, !171}
!167 = distinct !{!167, !168, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!168 = distinct !{!168, !"_ZN4skvxL3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi8EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!169 = distinct !{!169, !170, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!170 = distinct !{!170, !"_ZN4skvx3mapIRZNS_L3fmaILi8EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li8EfJNS2_ILi8EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!171 = distinct !{!171, !172, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!172 = distinct !{!172, !"_ZN4skvxL3fmaILi8EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!173 = !{!174, !176, !178}
!174 = distinct !{!174, !175, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!175 = distinct !{!175, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!176 = distinct !{!176, !177, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!177 = distinct !{!177, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!178 = distinct !{!178, !179, !"_ZN4skvxL4sqrtILi8EEENS_3VecIXT_EfEERKS2_: argument 0"}
!179 = distinct !{!179, !"_ZN4skvxL4sqrtILi8EEENS_3VecIXT_EfEERKS2_"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"_ZN4skvxplILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!182 = distinct !{!182, !"_ZN4skvxplILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!183 = !{!184}
!184 = distinct !{!184, !185, !"_ZN4skvxmiILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!185 = distinct !{!185, !"_ZN4skvxmiILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!186 = !{!187}
!187 = distinct !{!187, !188, !"_ZN4skvxmlILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!188 = distinct !{!188, !"_ZN4skvxmlILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!189 = !{!190}
!190 = distinct !{!190, !191, !"_ZN4skvxlsILi8EiEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!191 = distinct !{!191, !"_ZN4skvxlsILi8EiEENS_3VecIXT_ET0_EERKS3_i"}
!192 = !{!193}
!193 = distinct !{!193, !194, !"_ZN4skvxrsILi8EiEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!194 = distinct !{!194, !"_ZN4skvxrsILi8EiEENS_3VecIXT_ET0_EERKS3_i"}
!195 = !{!196}
!196 = distinct !{!196, !197, !"_ZN4skvxrsILi8EjEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!197 = distinct !{!197, !"_ZN4skvxrsILi8EjEENS_3VecIXT_ET0_EERKS3_i"}
!198 = !{!199}
!199 = distinct !{!199, !200, !"_ZN4skvxeqILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!200 = distinct !{!200, !"_ZN4skvxeqILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!201 = !{!202}
!202 = distinct !{!202, !203, !"_ZN4skvxneILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!203 = distinct !{!203, !"_ZN4skvxneILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!204 = !{!205}
!205 = distinct !{!205, !206, !"_ZN4skvxgtILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!206 = distinct !{!206, !"_ZN4skvxgtILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!207 = !{!208}
!208 = distinct !{!208, !209, !"_ZN4skvxgeILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!209 = distinct !{!209, !"_ZN4skvxgeILi8EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!210 = !{!211}
!211 = distinct !{!211, !212, !"_ZN4skvxeqILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!212 = distinct !{!212, !"_ZN4skvxeqILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!213 = !{!214}
!214 = distinct !{!214, !215, !"_ZN4skvxgtILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!215 = distinct !{!215, !"_ZN4skvxgtILi8EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!216 = !{!217}
!217 = distinct !{!217, !218, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!218 = distinct !{!218, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!219 = !{!220}
!220 = distinct !{!220, !221, !"_ZN4skvxorILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!221 = distinct !{!221, !"_ZN4skvxorILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!222 = !{!223}
!223 = distinct !{!223, !224, !"_ZN4skvxeoILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!224 = distinct !{!224, !"_ZN4skvxeoILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!225 = !{!226}
!226 = distinct !{!226, !227, !"_ZN4skvxcoILi8EiEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!227 = distinct !{!227, !"_ZN4skvxcoILi8EiEENS_3VecIXT_ET0_EERKS3_"}
!228 = !{!229}
!229 = distinct !{!229, !230, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!230 = distinct !{!230, !"_ZN4skvxanILi8EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!231 = !{!232}
!232 = distinct !{!232, !233, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!233 = distinct !{!233, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!234 = !{!235, !237, !239}
!235 = distinct !{!235, !236, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!236 = distinct !{!236, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!237 = distinct !{!237, !238, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!238 = distinct !{!238, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!239 = distinct !{!239, !240, !"_ZN4skvxL4ceilILi8EEENS_3VecIXT_EfEERKS2_: argument 0"}
!240 = distinct !{!240, !"_ZN4skvxL4ceilILi8EEENS_3VecIXT_EfEERKS2_"}
!241 = !{!235, !237}
!242 = !{!243, !245, !247}
!243 = distinct !{!243, !244, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!244 = distinct !{!244, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi8EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!245 = distinct !{!245, !246, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!246 = distinct !{!246, !"_ZN4skvx3mapIRDoFffELi8EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!247 = distinct !{!247, !248, !"_ZN4skvxL5floorILi8EEENS_3VecIXT_EfEERKS2_: argument 0"}
!248 = distinct !{!248, !"_ZN4skvxL5floorILi8EEENS_3VecIXT_EfEERKS2_"}
!249 = !{!243, !245}
!250 = !{!251}
!251 = distinct !{!251, !252, !"_ZN4skvxL4castIfLi8EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!252 = distinct !{!252, !"_ZN4skvxL4castIfLi8EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"_ZN4skvxL4castIiLi8EfEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!255 = distinct !{!255, !"_ZN4skvxL4castIiLi8EfEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!258 = distinct !{!258, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!259 = !{i32 7511899}
!260 = !{!"branch_weights", i32 1, i32 16000, i32 1, i32 1, i32 1}
!261 = !{!"branch_weights", i32 2000, i32 1}
!262 = !{!"branch_weights", i32 1, i32 4000, i32 1}
!263 = !{i8 0, i8 2}
!264 = !{!265, !267, !269}
!265 = distinct !{!265, !266, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!266 = distinct !{!266, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!267 = distinct !{!267, !268, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!268 = distinct !{!268, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!269 = distinct !{!269, !270, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!270 = distinct !{!270, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!271 = !{!272, !274, !276}
!272 = distinct !{!272, !273, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!273 = distinct !{!273, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!274 = distinct !{!274, !275, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!275 = distinct !{!275, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!276 = distinct !{!276, !277, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!277 = distinct !{!277, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!278 = !{!279}
!279 = distinct !{!279, !280, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!280 = distinct !{!280, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!281 = !{!282}
!282 = distinct !{!282, !283, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!283 = distinct !{!283, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!284 = !{!285}
!285 = distinct !{!285, !286, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!286 = distinct !{!286, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!287 = !{!288}
!288 = distinct !{!288, !289, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!289 = distinct !{!289, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!290 = !{!291}
!291 = distinct !{!291, !292, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!292 = distinct !{!292, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!293 = !{!294}
!294 = distinct !{!294, !295, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!295 = distinct !{!295, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!296 = !{!297, !299, !301}
!297 = distinct !{!297, !298, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!298 = distinct !{!298, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!299 = distinct !{!299, !300, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!300 = distinct !{!300, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!301 = distinct !{!301, !302, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!302 = distinct !{!302, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!303 = !{!304, !306, !308}
!304 = distinct !{!304, !305, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!305 = distinct !{!305, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!306 = distinct !{!306, !307, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!307 = distinct !{!307, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!308 = distinct !{!308, !309, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!309 = distinct !{!309, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!310 = !{!311, !313, !315}
!311 = distinct !{!311, !312, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!312 = distinct !{!312, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!313 = distinct !{!313, !314, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE: argument 0"}
!314 = distinct !{!314, !"_ZNK12_GLOBAL__N_15Sk4px8mulWidenERKNS_4SkNxILi16EhEE"}
!315 = distinct !{!315, !316, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_: argument 0"}
!316 = distinct !{!316, !"_ZNK12_GLOBAL__N_15Sk4pxmlERKS0_"}
!317 = !{!318}
!318 = distinct !{!318, !319, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!319 = distinct !{!319, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
!320 = !{!321}
!321 = distinct !{!321, !322, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv: argument 0"}
!322 = distinct !{!322, !"_ZNK12_GLOBAL__N_15Sk4px5widenEv"}
