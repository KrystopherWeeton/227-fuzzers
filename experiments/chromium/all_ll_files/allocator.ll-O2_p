; ModuleID = '../../third_party/blink/renderer/platform/wtf/allocator/allocator.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/allocator/allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3WTF16AtomicReadMemcpyEPvPKvm(i8* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = bitcast i8* %0 to i64*
  %5 = bitcast i8* %1 to i64*
  %6 = icmp ugt i64 %2, 7
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = add i64 %2, -8
  %9 = lshr i64 %8, 3
  %10 = add nuw nsw i64 %9, 1
  %11 = and i64 %10, 7
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %7, %13
  %14 = phi i64* [ %21, %13 ], [ %5, %7 ]
  %15 = phi i64* [ %20, %13 ], [ %4, %7 ]
  %16 = phi i64 [ %19, %13 ], [ %2, %7 ]
  %17 = phi i64 [ %22, %13 ], [ %11, %7 ]
  %18 = load atomic i64, i64* %14 monotonic, align 8
  store i64 %18, i64* %15, align 8
  %19 = add i64 %16, -8
  %20 = getelementptr inbounds i64, i64* %15, i64 1
  %21 = getelementptr inbounds i64, i64* %14, i64 1
  %22 = add i64 %17, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %13, !llvm.loop !2

24:                                               ; preds = %13, %7
  %25 = phi i64* [ %5, %7 ], [ %21, %13 ]
  %26 = phi i64* [ %4, %7 ], [ %20, %13 ]
  %27 = phi i64 [ %2, %7 ], [ %19, %13 ]
  %28 = phi i64* [ undef, %7 ], [ %20, %13 ]
  %29 = phi i64* [ undef, %7 ], [ %21, %13 ]
  %30 = icmp ult i64 %8, 56
  br i1 %30, label %61, label %31

31:                                               ; preds = %24, %31
  %32 = phi i64* [ %59, %31 ], [ %25, %24 ]
  %33 = phi i64* [ %58, %31 ], [ %26, %24 ]
  %34 = phi i64 [ %57, %31 ], [ %27, %24 ]
  %35 = load atomic i64, i64* %32 monotonic, align 8
  store i64 %35, i64* %33, align 8
  %36 = getelementptr inbounds i64, i64* %33, i64 1
  %37 = getelementptr inbounds i64, i64* %32, i64 1
  %38 = load atomic i64, i64* %37 monotonic, align 8
  store i64 %38, i64* %36, align 8
  %39 = getelementptr inbounds i64, i64* %33, i64 2
  %40 = getelementptr inbounds i64, i64* %32, i64 2
  %41 = load atomic i64, i64* %40 monotonic, align 8
  store i64 %41, i64* %39, align 8
  %42 = getelementptr inbounds i64, i64* %33, i64 3
  %43 = getelementptr inbounds i64, i64* %32, i64 3
  %44 = load atomic i64, i64* %43 monotonic, align 8
  store i64 %44, i64* %42, align 8
  %45 = getelementptr inbounds i64, i64* %33, i64 4
  %46 = getelementptr inbounds i64, i64* %32, i64 4
  %47 = load atomic i64, i64* %46 monotonic, align 8
  store i64 %47, i64* %45, align 8
  %48 = getelementptr inbounds i64, i64* %33, i64 5
  %49 = getelementptr inbounds i64, i64* %32, i64 5
  %50 = load atomic i64, i64* %49 monotonic, align 8
  store i64 %50, i64* %48, align 8
  %51 = getelementptr inbounds i64, i64* %33, i64 6
  %52 = getelementptr inbounds i64, i64* %32, i64 6
  %53 = load atomic i64, i64* %52 monotonic, align 8
  store i64 %53, i64* %51, align 8
  %54 = getelementptr inbounds i64, i64* %33, i64 7
  %55 = getelementptr inbounds i64, i64* %32, i64 7
  %56 = load atomic i64, i64* %55 monotonic, align 8
  store i64 %56, i64* %54, align 8
  %57 = add i64 %34, -64
  %58 = getelementptr inbounds i64, i64* %33, i64 8
  %59 = getelementptr inbounds i64, i64* %32, i64 8
  %60 = icmp ugt i64 %57, 7
  br i1 %60, label %31, label %61

61:                                               ; preds = %31, %24
  %62 = phi i64* [ %28, %24 ], [ %58, %31 ]
  %63 = phi i64* [ %29, %24 ], [ %59, %31 ]
  %64 = and i64 %2, 7
  br label %65

65:                                               ; preds = %61, %3
  %66 = phi i64 [ %2, %3 ], [ %64, %61 ]
  %67 = phi i64* [ %4, %3 ], [ %62, %61 ]
  %68 = phi i64* [ %5, %3 ], [ %63, %61 ]
  %69 = icmp eq i64 %66, 0
  br i1 %69, label %122, label %70

70:                                               ; preds = %65
  %71 = bitcast i64* %68 to i8*
  %72 = bitcast i64* %67 to i8*
  %73 = add i64 %66, -1
  %74 = and i64 %66, 7
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %70, %76
  %77 = phi i8* [ %84, %76 ], [ %71, %70 ]
  %78 = phi i8* [ %83, %76 ], [ %72, %70 ]
  %79 = phi i64 [ %82, %76 ], [ %66, %70 ]
  %80 = phi i64 [ %85, %76 ], [ %74, %70 ]
  %81 = load atomic i8, i8* %77 monotonic, align 1
  store i8 %81, i8* %78, align 1
  %82 = add i64 %79, -1
  %83 = getelementptr inbounds i8, i8* %78, i64 1
  %84 = getelementptr inbounds i8, i8* %77, i64 1
  %85 = add i64 %80, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %76, !llvm.loop !4

87:                                               ; preds = %76, %70
  %88 = phi i8* [ %71, %70 ], [ %84, %76 ]
  %89 = phi i8* [ %72, %70 ], [ %83, %76 ]
  %90 = phi i64 [ %66, %70 ], [ %82, %76 ]
  %91 = icmp ult i64 %73, 7
  br i1 %91, label %122, label %92

92:                                               ; preds = %87, %92
  %93 = phi i8* [ %120, %92 ], [ %88, %87 ]
  %94 = phi i8* [ %119, %92 ], [ %89, %87 ]
  %95 = phi i64 [ %118, %92 ], [ %90, %87 ]
  %96 = load atomic i8, i8* %93 monotonic, align 1
  store i8 %96, i8* %94, align 1
  %97 = getelementptr inbounds i8, i8* %94, i64 1
  %98 = getelementptr inbounds i8, i8* %93, i64 1
  %99 = load atomic i8, i8* %98 monotonic, align 1
  store i8 %99, i8* %97, align 1
  %100 = getelementptr inbounds i8, i8* %94, i64 2
  %101 = getelementptr inbounds i8, i8* %93, i64 2
  %102 = load atomic i8, i8* %101 monotonic, align 1
  store i8 %102, i8* %100, align 1
  %103 = getelementptr inbounds i8, i8* %94, i64 3
  %104 = getelementptr inbounds i8, i8* %93, i64 3
  %105 = load atomic i8, i8* %104 monotonic, align 1
  store i8 %105, i8* %103, align 1
  %106 = getelementptr inbounds i8, i8* %94, i64 4
  %107 = getelementptr inbounds i8, i8* %93, i64 4
  %108 = load atomic i8, i8* %107 monotonic, align 1
  store i8 %108, i8* %106, align 1
  %109 = getelementptr inbounds i8, i8* %94, i64 5
  %110 = getelementptr inbounds i8, i8* %93, i64 5
  %111 = load atomic i8, i8* %110 monotonic, align 1
  store i8 %111, i8* %109, align 1
  %112 = getelementptr inbounds i8, i8* %94, i64 6
  %113 = getelementptr inbounds i8, i8* %93, i64 6
  %114 = load atomic i8, i8* %113 monotonic, align 1
  store i8 %114, i8* %112, align 1
  %115 = getelementptr inbounds i8, i8* %94, i64 7
  %116 = getelementptr inbounds i8, i8* %93, i64 7
  %117 = load atomic i8, i8* %116 monotonic, align 1
  store i8 %117, i8* %115, align 1
  %118 = add i64 %95, -8
  %119 = getelementptr inbounds i8, i8* %94, i64 8
  %120 = getelementptr inbounds i8, i8* %93, i64 8
  %121 = icmp eq i64 %118, 0
  br i1 %121, label %122, label %92

122:                                              ; preds = %87, %92, %65
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = bitcast i8* %0 to i64*
  %5 = bitcast i8* %1 to i64*
  %6 = icmp ugt i64 %2, 7
  br i1 %6, label %7, label %65

7:                                                ; preds = %3
  %8 = add i64 %2, -8
  %9 = lshr i64 %8, 3
  %10 = add nuw nsw i64 %9, 1
  %11 = and i64 %10, 7
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %7, %13
  %14 = phi i64* [ %21, %13 ], [ %5, %7 ]
  %15 = phi i64* [ %20, %13 ], [ %4, %7 ]
  %16 = phi i64 [ %19, %13 ], [ %2, %7 ]
  %17 = phi i64 [ %22, %13 ], [ %11, %7 ]
  %18 = load i64, i64* %14, align 8
  store atomic i64 %18, i64* %15 monotonic, align 8
  %19 = add i64 %16, -8
  %20 = getelementptr inbounds i64, i64* %15, i64 1
  %21 = getelementptr inbounds i64, i64* %14, i64 1
  %22 = add i64 %17, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %13, !llvm.loop !5

24:                                               ; preds = %13, %7
  %25 = phi i64* [ %5, %7 ], [ %21, %13 ]
  %26 = phi i64* [ %4, %7 ], [ %20, %13 ]
  %27 = phi i64 [ %2, %7 ], [ %19, %13 ]
  %28 = phi i64* [ undef, %7 ], [ %20, %13 ]
  %29 = phi i64* [ undef, %7 ], [ %21, %13 ]
  %30 = icmp ult i64 %8, 56
  br i1 %30, label %61, label %31

31:                                               ; preds = %24, %31
  %32 = phi i64* [ %59, %31 ], [ %25, %24 ]
  %33 = phi i64* [ %58, %31 ], [ %26, %24 ]
  %34 = phi i64 [ %57, %31 ], [ %27, %24 ]
  %35 = load i64, i64* %32, align 8
  store atomic i64 %35, i64* %33 monotonic, align 8
  %36 = getelementptr inbounds i64, i64* %33, i64 1
  %37 = getelementptr inbounds i64, i64* %32, i64 1
  %38 = load i64, i64* %37, align 8
  store atomic i64 %38, i64* %36 monotonic, align 8
  %39 = getelementptr inbounds i64, i64* %33, i64 2
  %40 = getelementptr inbounds i64, i64* %32, i64 2
  %41 = load i64, i64* %40, align 8
  store atomic i64 %41, i64* %39 monotonic, align 8
  %42 = getelementptr inbounds i64, i64* %33, i64 3
  %43 = getelementptr inbounds i64, i64* %32, i64 3
  %44 = load i64, i64* %43, align 8
  store atomic i64 %44, i64* %42 monotonic, align 8
  %45 = getelementptr inbounds i64, i64* %33, i64 4
  %46 = getelementptr inbounds i64, i64* %32, i64 4
  %47 = load i64, i64* %46, align 8
  store atomic i64 %47, i64* %45 monotonic, align 8
  %48 = getelementptr inbounds i64, i64* %33, i64 5
  %49 = getelementptr inbounds i64, i64* %32, i64 5
  %50 = load i64, i64* %49, align 8
  store atomic i64 %50, i64* %48 monotonic, align 8
  %51 = getelementptr inbounds i64, i64* %33, i64 6
  %52 = getelementptr inbounds i64, i64* %32, i64 6
  %53 = load i64, i64* %52, align 8
  store atomic i64 %53, i64* %51 monotonic, align 8
  %54 = getelementptr inbounds i64, i64* %33, i64 7
  %55 = getelementptr inbounds i64, i64* %32, i64 7
  %56 = load i64, i64* %55, align 8
  store atomic i64 %56, i64* %54 monotonic, align 8
  %57 = add i64 %34, -64
  %58 = getelementptr inbounds i64, i64* %33, i64 8
  %59 = getelementptr inbounds i64, i64* %32, i64 8
  %60 = icmp ugt i64 %57, 7
  br i1 %60, label %31, label %61

61:                                               ; preds = %31, %24
  %62 = phi i64* [ %28, %24 ], [ %58, %31 ]
  %63 = phi i64* [ %29, %24 ], [ %59, %31 ]
  %64 = and i64 %2, 7
  br label %65

65:                                               ; preds = %61, %3
  %66 = phi i64 [ %2, %3 ], [ %64, %61 ]
  %67 = phi i64* [ %4, %3 ], [ %62, %61 ]
  %68 = phi i64* [ %5, %3 ], [ %63, %61 ]
  %69 = icmp eq i64 %66, 0
  br i1 %69, label %122, label %70

70:                                               ; preds = %65
  %71 = bitcast i64* %68 to i8*
  %72 = bitcast i64* %67 to i8*
  %73 = add i64 %66, -1
  %74 = and i64 %66, 7
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %70, %76
  %77 = phi i8* [ %84, %76 ], [ %71, %70 ]
  %78 = phi i8* [ %83, %76 ], [ %72, %70 ]
  %79 = phi i64 [ %82, %76 ], [ %66, %70 ]
  %80 = phi i64 [ %85, %76 ], [ %74, %70 ]
  %81 = load i8, i8* %77, align 1
  store atomic i8 %81, i8* %78 monotonic, align 1
  %82 = add i64 %79, -1
  %83 = getelementptr inbounds i8, i8* %78, i64 1
  %84 = getelementptr inbounds i8, i8* %77, i64 1
  %85 = add i64 %80, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %76, !llvm.loop !6

87:                                               ; preds = %76, %70
  %88 = phi i8* [ %71, %70 ], [ %84, %76 ]
  %89 = phi i8* [ %72, %70 ], [ %83, %76 ]
  %90 = phi i64 [ %66, %70 ], [ %82, %76 ]
  %91 = icmp ult i64 %73, 7
  br i1 %91, label %122, label %92

92:                                               ; preds = %87, %92
  %93 = phi i8* [ %120, %92 ], [ %88, %87 ]
  %94 = phi i8* [ %119, %92 ], [ %89, %87 ]
  %95 = phi i64 [ %118, %92 ], [ %90, %87 ]
  %96 = load i8, i8* %93, align 1
  store atomic i8 %96, i8* %94 monotonic, align 1
  %97 = getelementptr inbounds i8, i8* %94, i64 1
  %98 = getelementptr inbounds i8, i8* %93, i64 1
  %99 = load i8, i8* %98, align 1
  store atomic i8 %99, i8* %97 monotonic, align 1
  %100 = getelementptr inbounds i8, i8* %94, i64 2
  %101 = getelementptr inbounds i8, i8* %93, i64 2
  %102 = load i8, i8* %101, align 1
  store atomic i8 %102, i8* %100 monotonic, align 1
  %103 = getelementptr inbounds i8, i8* %94, i64 3
  %104 = getelementptr inbounds i8, i8* %93, i64 3
  %105 = load i8, i8* %104, align 1
  store atomic i8 %105, i8* %103 monotonic, align 1
  %106 = getelementptr inbounds i8, i8* %94, i64 4
  %107 = getelementptr inbounds i8, i8* %93, i64 4
  %108 = load i8, i8* %107, align 1
  store atomic i8 %108, i8* %106 monotonic, align 1
  %109 = getelementptr inbounds i8, i8* %94, i64 5
  %110 = getelementptr inbounds i8, i8* %93, i64 5
  %111 = load i8, i8* %110, align 1
  store atomic i8 %111, i8* %109 monotonic, align 1
  %112 = getelementptr inbounds i8, i8* %94, i64 6
  %113 = getelementptr inbounds i8, i8* %93, i64 6
  %114 = load i8, i8* %113, align 1
  store atomic i8 %114, i8* %112 monotonic, align 1
  %115 = getelementptr inbounds i8, i8* %94, i64 7
  %116 = getelementptr inbounds i8, i8* %93, i64 7
  %117 = load i8, i8* %116, align 1
  store atomic i8 %117, i8* %115 monotonic, align 1
  %118 = add i64 %95, -8
  %119 = getelementptr inbounds i8, i8* %94, i64 8
  %120 = getelementptr inbounds i8, i8* %93, i64 8
  %121 = icmp eq i64 %118, 0
  br i1 %121, label %122, label %92

122:                                              ; preds = %87, %92, %65
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3WTF13AtomicMemzeroEPvm(i8* nocapture, i64) local_unnamed_addr #0 {
  %3 = bitcast i8* %0 to i64*
  %4 = icmp ugt i64 %1, 7
  br i1 %4, label %5, label %40

5:                                                ; preds = %2
  %6 = add i64 %1, -8
  %7 = lshr i64 %6, 3
  %8 = add nuw nsw i64 %7, 1
  %9 = and i64 %8, 7
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %5, %11
  %12 = phi i64* [ %16, %11 ], [ %3, %5 ]
  %13 = phi i64 [ %15, %11 ], [ %1, %5 ]
  %14 = phi i64 [ %17, %11 ], [ %9, %5 ]
  store atomic i64 0, i64* %12 monotonic, align 8
  %15 = add i64 %13, -8
  %16 = getelementptr inbounds i64, i64* %12, i64 1
  %17 = add i64 %14, -1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %11, !llvm.loop !7

19:                                               ; preds = %11, %5
  %20 = phi i64* [ %3, %5 ], [ %16, %11 ]
  %21 = phi i64 [ %1, %5 ], [ %15, %11 ]
  %22 = phi i64* [ undef, %5 ], [ %16, %11 ]
  %23 = icmp ult i64 %6, 56
  br i1 %23, label %37, label %24

24:                                               ; preds = %19, %24
  %25 = phi i64* [ %35, %24 ], [ %20, %19 ]
  %26 = phi i64 [ %34, %24 ], [ %21, %19 ]
  store atomic i64 0, i64* %25 monotonic, align 8
  %27 = getelementptr inbounds i64, i64* %25, i64 1
  store atomic i64 0, i64* %27 monotonic, align 8
  %28 = getelementptr inbounds i64, i64* %25, i64 2
  store atomic i64 0, i64* %28 monotonic, align 8
  %29 = getelementptr inbounds i64, i64* %25, i64 3
  store atomic i64 0, i64* %29 monotonic, align 8
  %30 = getelementptr inbounds i64, i64* %25, i64 4
  store atomic i64 0, i64* %30 monotonic, align 8
  %31 = getelementptr inbounds i64, i64* %25, i64 5
  store atomic i64 0, i64* %31 monotonic, align 8
  %32 = getelementptr inbounds i64, i64* %25, i64 6
  store atomic i64 0, i64* %32 monotonic, align 8
  %33 = getelementptr inbounds i64, i64* %25, i64 7
  store atomic i64 0, i64* %33 monotonic, align 8
  %34 = add i64 %26, -64
  %35 = getelementptr inbounds i64, i64* %25, i64 8
  %36 = icmp ugt i64 %34, 7
  br i1 %36, label %24, label %37

37:                                               ; preds = %24, %19
  %38 = phi i64* [ %22, %19 ], [ %35, %24 ]
  %39 = and i64 %1, 7
  br label %40

40:                                               ; preds = %37, %2
  %41 = phi i64 [ %1, %2 ], [ %39, %37 ]
  %42 = phi i64* [ %3, %2 ], [ %38, %37 ]
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %74, label %44

44:                                               ; preds = %40
  %45 = bitcast i64* %42 to i8*
  %46 = add i64 %41, -1
  %47 = and i64 %41, 7
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %57, label %49

49:                                               ; preds = %44, %49
  %50 = phi i8* [ %54, %49 ], [ %45, %44 ]
  %51 = phi i64 [ %53, %49 ], [ %41, %44 ]
  %52 = phi i64 [ %55, %49 ], [ %47, %44 ]
  store atomic i8 0, i8* %50 monotonic, align 1
  %53 = add i64 %51, -1
  %54 = getelementptr inbounds i8, i8* %50, i64 1
  %55 = add i64 %52, -1
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %49, !llvm.loop !8

57:                                               ; preds = %49, %44
  %58 = phi i8* [ %45, %44 ], [ %54, %49 ]
  %59 = phi i64 [ %41, %44 ], [ %53, %49 ]
  %60 = icmp ult i64 %46, 7
  br i1 %60, label %74, label %61

61:                                               ; preds = %57, %61
  %62 = phi i8* [ %72, %61 ], [ %58, %57 ]
  %63 = phi i64 [ %71, %61 ], [ %59, %57 ]
  store atomic i8 0, i8* %62 monotonic, align 1
  %64 = getelementptr inbounds i8, i8* %62, i64 1
  store atomic i8 0, i8* %64 monotonic, align 1
  %65 = getelementptr inbounds i8, i8* %62, i64 2
  store atomic i8 0, i8* %65 monotonic, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 3
  store atomic i8 0, i8* %66 monotonic, align 1
  %67 = getelementptr inbounds i8, i8* %62, i64 4
  store atomic i8 0, i8* %67 monotonic, align 1
  %68 = getelementptr inbounds i8, i8* %62, i64 5
  store atomic i8 0, i8* %68 monotonic, align 1
  %69 = getelementptr inbounds i8, i8* %62, i64 6
  store atomic i8 0, i8* %69 monotonic, align 1
  %70 = getelementptr inbounds i8, i8* %62, i64 7
  store atomic i8 0, i8* %70 monotonic, align 1
  %71 = add i64 %63, -8
  %72 = getelementptr inbounds i8, i8* %62, i64 8
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %74, label %61

74:                                               ; preds = %57, %61, %40
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
