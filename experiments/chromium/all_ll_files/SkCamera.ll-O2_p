; ModuleID = '../../third_party/skia/src/utils/SkCamera.cpp'
source_filename = "../../third_party/skia/src/utils/SkCamera.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPatch3D = type { %struct.SkV3, %struct.SkV3, %struct.SkV3 }
%struct.SkV3 = type { float, float, float }
%class.SkCamera3D = type <{ %struct.SkV3, %struct.SkV3, %struct.SkV3, %struct.SkV3, %class.SkMatrix, i8, [3 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%class.Sk3DView = type <{ %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec", %class.SkCamera3D, [4 x i8] }>
%"struct.Sk3DView::Rec" = type { %"struct.Sk3DView::Rec"*, %class.SkM44 }
%class.SkM44 = type { [16 x float] }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.2" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque

@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

@_ZN9SkPatch3DC1Ev = hidden unnamed_addr alias void (%class.SkPatch3D*), void (%class.SkPatch3D*)* @_ZN9SkPatch3DC2Ev
@_ZN10SkCamera3DC1Ev = hidden unnamed_addr alias void (%class.SkCamera3D*), void (%class.SkCamera3D*)* @_ZN10SkCamera3DC2Ev
@_ZN8Sk3DViewC1Ev = hidden unnamed_addr alias void (%class.Sk3DView*), void (%class.Sk3DView*)* @_ZN8Sk3DViewC2Ev
@_ZN8Sk3DViewD1Ev = hidden unnamed_addr alias void (%class.Sk3DView*), void (%class.Sk3DView*)* @_ZN8Sk3DViewD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9SkPatch3DC2Ev(%class.SkPatch3D* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 2, i32 2
  store float 0.000000e+00, float* %2, align 4
  %3 = bitcast %class.SkPatch3D* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %3, align 4
  %4 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 1, i32 1
  %5 = bitcast float* %4 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %5, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9SkPatch3D5resetEv(%class.SkPatch3D* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 2, i32 2
  store float 0.000000e+00, float* %2, align 4
  %3 = bitcast %class.SkPatch3D* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %3, align 4
  %4 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 1, i32 1
  %5 = bitcast float* %4 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %5, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK9SkPatch3D9transformERK5SkM44PS_(%class.SkPatch3D* nocapture, %class.SkM44* dereferenceable(64), %class.SkPatch3D*) local_unnamed_addr #2 align 2 {
  %4 = icmp eq %class.SkPatch3D* %2, null
  %5 = select i1 %4, %class.SkPatch3D* %0, %class.SkPatch3D* %2
  %6 = bitcast %class.SkPatch3D* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = extractelement <2 x float> %7, i32 0
  %11 = extractelement <2 x float> %7, i32 1
  %12 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %1, float %10, float %11, float %9, float 0.000000e+00) #10
  %13 = extractvalue { <2 x float>, <2 x float> } %12, 0
  %14 = extractvalue { <2 x float>, <2 x float> } %12, 1
  %15 = extractelement <2 x float> %14, i32 0
  %16 = bitcast %class.SkPatch3D* %5 to <2 x float>*
  store <2 x float> %13, <2 x float>* %16, align 4
  %17 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %5, i64 0, i32 0, i32 2
  store float %15, float* %17, align 4
  %18 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 1
  %19 = bitcast %struct.SkV3* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 1, i32 2
  %22 = load float, float* %21, align 4
  %23 = extractelement <2 x float> %20, i32 0
  %24 = extractelement <2 x float> %20, i32 1
  %25 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %1, float %23, float %24, float %22, float 0.000000e+00) #10
  %26 = extractvalue { <2 x float>, <2 x float> } %25, 0
  %27 = extractvalue { <2 x float>, <2 x float> } %25, 1
  %28 = extractelement <2 x float> %27, i32 0
  %29 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %5, i64 0, i32 1
  %30 = bitcast %struct.SkV3* %29 to <2 x float>*
  store <2 x float> %26, <2 x float>* %30, align 4
  %31 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %5, i64 0, i32 1, i32 2
  store float %28, float* %31, align 4
  %32 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 2, i32 0
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 2, i32 1
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 2, i32 2
  %37 = load float, float* %36, align 4
  %38 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %1, float %33, float %35, float %37, float 1.000000e+00) #10
  %39 = extractvalue { <2 x float>, <2 x float> } %38, 0
  %40 = extractvalue { <2 x float>, <2 x float> } %38, 1
  %41 = extractelement <2 x float> %39, i32 0
  %42 = extractelement <2 x float> %39, i32 1
  %43 = extractelement <2 x float> %40, i32 0
  %44 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %5, i64 0, i32 2, i32 0
  store float %41, float* %44, align 4
  %45 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %5, i64 0, i32 2, i32 1
  store float %42, float* %45, align 4
  %46 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %5, i64 0, i32 2, i32 2
  store float %43, float* %46, align 4
  ret void
}

declare { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44*, float, float, float, float) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK9SkPatch3D7dotWithEfff(%class.SkPatch3D* nocapture readonly, float, float, float) local_unnamed_addr #4 align 2 {
  %5 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 0, i32 2
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 1, i32 1
  %8 = bitcast float* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %0, i64 0, i32 1, i32 0
  %11 = load float, float* %10, align 4
  %12 = fmul float %6, %11
  %13 = bitcast %class.SkPatch3D* %0 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fmul <2 x float> %9, %14
  %16 = extractelement <2 x float> %15, i32 0
  %17 = fsub float %12, %16
  %18 = extractelement <2 x float> %14, i32 1
  %19 = insertelement <2 x float> undef, float %18, i32 0
  %20 = insertelement <2 x float> %19, float %6, i32 1
  %21 = insertelement <2 x float> undef, float %11, i32 0
  %22 = shufflevector <2 x float> %21, <2 x float> %9, <2 x i32> <i32 0, i32 2>
  %23 = fmul <2 x float> %20, %22
  %24 = fsub <2 x float> %15, %23
  %25 = fmul float %17, %2
  %26 = insertelement <2 x float> undef, float %3, i32 0
  %27 = insertelement <2 x float> %26, float %1, i32 1
  %28 = fmul <2 x float> %24, %27
  %29 = extractelement <2 x float> %28, i32 1
  %30 = fadd float %29, %25
  %31 = extractelement <2 x float> %28, i32 0
  %32 = fadd float %31, %30
  ret float %32
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkCamera3DC2Ev(%class.SkCamera3D* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 0
  %3 = bitcast float* %2 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %3, align 4
  %4 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 4
  %5 = bitcast float* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %5, align 4
  %6 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 8
  store float 1.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 1
  store i32 16, i32* %7, align 4
  %8 = bitcast %class.SkCamera3D* %0 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float -5.760000e+02, float 0.000000e+00>, <4 x float>* %8, align 4
  %9 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 1, i32 2
  store float 1.000000e+00, float* %10, align 4
  %11 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 2, i32 0
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float -1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %12, align 4
  %13 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 1
  store float 0.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 2
  %15 = bitcast float* %14 to i32*
  store i32 -1005584384, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 5
  store i8 1, i8* %16, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN10SkCamera3D5resetEv(%class.SkCamera3D* nocapture) local_unnamed_addr #5 align 2 {
  %2 = bitcast %class.SkCamera3D* %0 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float -5.760000e+02, float 0.000000e+00>, <4 x float>* %2, align 4
  %3 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 1, i32 1
  %4 = bitcast float* %3 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float -1.000000e+00>, <4 x float>* %4, align 4
  %5 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 2, i32 2
  store float 0.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 0
  store float 0.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 1
  store float 0.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 2
  %9 = bitcast float* %8 to i32*
  store i32 -1005584384, i32* %9, align 4
  %10 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 5
  store i8 1, i8* %10, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10SkCamera3D6updateEv(%class.SkCamera3D* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 5
  store i8 1, i8* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkCamera3D8doUpdateEv(%class.SkCamera3D* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 1, i32 0
  %3 = load float, float* %2, align 4
  %4 = fmul float %3, %3
  %5 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 1, i32 1
  %6 = load float, float* %5, align 4
  %7 = fmul float %6, %6
  %8 = fadd float %4, %7
  %9 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 1, i32 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %10, %10
  %12 = fadd float %8, %11
  %13 = tail call float @sqrtf(float %12) #10
  %14 = fdiv float 1.000000e+00, %13
  %15 = load float, float* %2, align 4
  %16 = fmul float %15, %14
  %17 = bitcast float* %5 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = insertelement <2 x float> undef, float %14, i32 0
  %20 = shufflevector <2 x float> %19, <2 x float> undef, <2 x i32> zeroinitializer
  %21 = fmul <2 x float> %20, %18
  %22 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 2, i32 0
  %23 = load float, float* %22, align 4
  %24 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 2, i32 1
  %25 = load float, float* %24, align 4
  %26 = extractelement <2 x float> %21, i32 0
  %27 = fmul float %26, %25
  %28 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 2, i32 2
  %29 = load float, float* %28, align 4
  %30 = extractelement <2 x float> %21, i32 1
  %31 = insertelement <2 x float> undef, float %30, i32 0
  %32 = insertelement <2 x float> %31, float %16, i32 1
  %33 = insertelement <2 x float> undef, float %29, i32 0
  %34 = insertelement <2 x float> %33, float %23, i32 1
  %35 = fmul <2 x float> %32, %34
  %36 = fmul float %26, %27
  %37 = fmul <2 x float> %32, %35
  %38 = fsub float %25, %36
  %39 = fsub <2 x float> %34, %37
  %40 = extractelement <2 x float> %39, i32 1
  %41 = fmul float %40, %40
  %42 = fmul float %38, %38
  %43 = fadd float %41, %42
  %44 = extractelement <2 x float> %39, i32 0
  %45 = fmul float %44, %44
  %46 = fadd float %43, %45
  %47 = tail call float @sqrtf(float %46) #10
  %48 = fdiv float 1.000000e+00, %47
  %49 = fmul float %48, %38
  %50 = insertelement <2 x float> undef, float %48, i32 0
  %51 = shufflevector <2 x float> %50, <2 x float> undef, <2 x i32> zeroinitializer
  %52 = fmul <2 x float> %51, %39
  %53 = fmul <2 x float> %21, %52
  %54 = insertelement <2 x float> undef, float %49, i32 0
  %55 = extractelement <2 x float> %52, i32 0
  %56 = shufflevector <2 x float> %54, <2 x float> %52, <2 x i32> <i32 0, i32 2>
  %57 = fmul <2 x float> %32, %56
  %58 = fsub <2 x float> %53, %57
  %59 = fmul float %16, %49
  %60 = extractelement <2 x float> %52, i32 1
  %61 = fmul float %26, %60
  %62 = fsub float %59, %61
  %63 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 0
  %64 = bitcast float* %63 to <2 x float>*
  %65 = load <2 x float>, <2 x float>* %64, align 4
  %66 = shufflevector <2 x float> %65, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %67 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 3, i32 2
  %68 = load float, float* %67, align 4
  %69 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 0
  %70 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 1
  %71 = insertelement <4 x float> undef, float %16, i32 0
  %72 = insertelement <4 x float> %71, float %26, i32 1
  %73 = insertelement <4 x float> %72, float %30, i32 2
  %74 = insertelement <4 x float> %73, float %16, i32 3
  %75 = fmul <4 x float> %74, %66
  %76 = insertelement <2 x float> %52, float %68, i32 0
  %77 = shufflevector <2 x float> %76, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  %78 = extractelement <2 x float> %58, i32 0
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = extractelement <2 x float> %58, i32 1
  %81 = insertelement <4 x float> %79, float %80, i32 1
  %82 = insertelement <4 x float> %81, float %62, i32 2
  %83 = insertelement <4 x float> %82, float %68, i32 3
  %84 = fmul <4 x float> %77, %83
  %85 = fsub <4 x float> %75, %84
  %86 = bitcast float* %69 to <4 x float>*
  store <4 x float> %85, <4 x float>* %86, align 4
  %87 = extractelement <2 x float> %65, i32 1
  %88 = fmul float %26, %87
  %89 = fmul float %49, %68
  %90 = fsub float %88, %89
  %91 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 4
  store float %90, float* %91, align 4
  %92 = fmul float %30, %87
  %93 = fmul float %68, %55
  %94 = fsub float %92, %93
  %95 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 5
  store float %94, float* %95, align 4
  %96 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 6
  store float %16, float* %96, align 4
  %97 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 7
  store float %26, float* %97, align 4
  %98 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 8
  store float %30, float* %98, align 4
  store i32 128, i32* %70, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10SkCamera3D13patchToMatrixERK9SkPatch3DP8SkMatrix(%class.SkCamera3D* nocapture, %class.SkPatch3D* nocapture readonly dereferenceable(36), %class.SkMatrix* nocapture) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %3
  tail call void @_ZNK10SkCamera3D8doUpdateEv(%class.SkCamera3D* %0)
  store i8 0, i8* %4, align 4
  br label %8

8:                                                ; preds = %3, %7
  %9 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 0
  %10 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %1, i64 0, i32 2, i32 0
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = fsub float %11, %13
  %15 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %1, i64 0, i32 2, i32 1
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = fsub float %16, %18
  %20 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %1, i64 0, i32 2, i32 2
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 0, i32 2
  %23 = load float, float* %22, align 4
  %24 = fsub float %21, %23
  %25 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 6
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 7
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 8
  %30 = load float, float* %29, align 4
  %31 = fmul float %14, %26
  %32 = fmul float %19, %28
  %33 = fadd float %31, %32
  %34 = fmul float %24, %30
  %35 = fadd float %33, %34
  %36 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %1, i64 0, i32 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = load float, float* %9, align 4
  %39 = fmul float %37, %38
  %40 = fadd float %39, 0.000000e+00
  %41 = getelementptr inbounds float, float* %36, i64 1
  %42 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 1
  %43 = load float, float* %41, align 4
  %44 = load float, float* %42, align 4
  %45 = fmul float %43, %44
  %46 = fadd float %40, %45
  %47 = getelementptr inbounds float, float* %36, i64 2
  %48 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 2
  %49 = load float, float* %47, align 4
  %50 = load float, float* %48, align 4
  %51 = fmul float %49, %50
  %52 = fadd float %46, %51
  %53 = fdiv float %52, %35
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 0
  store float %53, float* %54, align 4
  %55 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  store i32 128, i32* %55, align 4
  %56 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 3
  %57 = load float, float* %36, align 4
  %58 = load float, float* %56, align 4
  %59 = fmul float %57, %58
  %60 = fadd float %59, 0.000000e+00
  %61 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 4
  %62 = load float, float* %41, align 4
  %63 = load float, float* %61, align 4
  %64 = fmul float %62, %63
  %65 = fadd float %60, %64
  %66 = getelementptr inbounds %class.SkCamera3D, %class.SkCamera3D* %0, i64 0, i32 4, i32 0, i64 5
  %67 = load float, float* %47, align 4
  %68 = load float, float* %66, align 4
  %69 = fmul float %67, %68
  %70 = fadd float %65, %69
  %71 = fdiv float %70, %35
  %72 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  store float %71, float* %72, align 4
  store i32 128, i32* %55, align 4
  %73 = load float, float* %36, align 4
  %74 = load float, float* %25, align 4
  %75 = fmul float %73, %74
  %76 = fadd float %75, 0.000000e+00
  %77 = load float, float* %41, align 4
  %78 = load float, float* %27, align 4
  %79 = fmul float %77, %78
  %80 = fadd float %76, %79
  %81 = load float, float* %47, align 4
  %82 = load float, float* %29, align 4
  %83 = fmul float %81, %82
  %84 = fadd float %80, %83
  %85 = fdiv float %84, %35
  %86 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 6
  store float %85, float* %86, align 4
  store i32 128, i32* %55, align 4
  %87 = getelementptr inbounds float, float* %36, i64 3
  %88 = load float, float* %87, align 4
  %89 = load float, float* %9, align 4
  %90 = fmul float %88, %89
  %91 = fadd float %90, 0.000000e+00
  %92 = getelementptr inbounds float, float* %36, i64 4
  %93 = load float, float* %92, align 4
  %94 = load float, float* %42, align 4
  %95 = fmul float %93, %94
  %96 = fadd float %91, %95
  %97 = getelementptr inbounds float, float* %36, i64 5
  %98 = load float, float* %97, align 4
  %99 = load float, float* %48, align 4
  %100 = fmul float %98, %99
  %101 = fadd float %96, %100
  %102 = fdiv float %101, %35
  %103 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  store float %102, float* %103, align 4
  store i32 128, i32* %55, align 4
  %104 = load float, float* %87, align 4
  %105 = load float, float* %56, align 4
  %106 = fmul float %104, %105
  %107 = fadd float %106, 0.000000e+00
  %108 = load float, float* %92, align 4
  %109 = load float, float* %61, align 4
  %110 = fmul float %108, %109
  %111 = fadd float %107, %110
  %112 = load float, float* %97, align 4
  %113 = load float, float* %66, align 4
  %114 = fmul float %112, %113
  %115 = fadd float %111, %114
  %116 = fdiv float %115, %35
  %117 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  store float %116, float* %117, align 4
  store i32 128, i32* %55, align 4
  %118 = load float, float* %87, align 4
  %119 = load float, float* %25, align 4
  %120 = fmul float %118, %119
  %121 = fadd float %120, 0.000000e+00
  %122 = load float, float* %92, align 4
  %123 = load float, float* %27, align 4
  %124 = fmul float %122, %123
  %125 = fadd float %121, %124
  %126 = load float, float* %97, align 4
  %127 = load float, float* %29, align 4
  %128 = fmul float %126, %127
  %129 = fadd float %125, %128
  %130 = fdiv float %129, %35
  %131 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 7
  store float %130, float* %131, align 4
  store i32 128, i32* %55, align 4
  %132 = load float, float* %9, align 4
  %133 = fmul float %14, %132
  %134 = fadd float %133, 0.000000e+00
  %135 = load float, float* %42, align 4
  %136 = fmul float %19, %135
  %137 = fadd float %134, %136
  %138 = load float, float* %48, align 4
  %139 = fmul float %24, %138
  %140 = fadd float %137, %139
  %141 = fdiv float %140, %35
  %142 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  store float %141, float* %142, align 4
  store i32 128, i32* %55, align 4
  %143 = load float, float* %56, align 4
  %144 = fmul float %14, %143
  %145 = fadd float %144, 0.000000e+00
  %146 = load float, float* %61, align 4
  %147 = fmul float %19, %146
  %148 = fadd float %145, %147
  %149 = load float, float* %66, align 4
  %150 = fmul float %24, %149
  %151 = fadd float %148, %150
  %152 = fdiv float %151, %35
  %153 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  store float %152, float* %153, align 4
  %154 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %154, align 4
  store i32 128, i32* %55, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DViewC2Ev(%class.Sk3DView*) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 1
  %3 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 1, i32 1
  %4 = bitcast %class.SkM44* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #10
  %5 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 4, i32 0, i64 0
  %6 = bitcast float* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %6, align 4
  %7 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 4, i32 0, i64 4
  %8 = bitcast float* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %8, align 4
  %9 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 4, i32 0, i64 8
  store float 1.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 4, i32 1
  store i32 16, i32* %10, align 4
  %11 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 0, i32 0
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float -5.760000e+02, float 0.000000e+00>, <4 x float>* %12, align 4
  %13 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 1, i32 1
  store float 0.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 1, i32 2
  store float 1.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 2, i32 0
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float -1.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %16, align 4
  %17 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 3, i32 1
  store float 0.000000e+00, float* %17, align 4
  %18 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 3, i32 2
  %19 = bitcast float* %18 to i32*
  store i32 -1005584384, i32* %19, align 4
  %20 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2, i32 5
  store i8 1, i8* %20, align 4
  %21 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  store %"struct.Sk3DView::Rec"* %2, %"struct.Sk3DView::Rec"** %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DViewD2Ev(%class.Sk3DView* readonly) unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %3 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %2, align 8
  %4 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 1
  %5 = icmp eq %"struct.Sk3DView::Rec"* %3, %4
  br i1 %5, label %15, label %6

6:                                                ; preds = %1, %13
  %7 = phi %"struct.Sk3DView::Rec"* [ %9, %13 ], [ %3, %1 ]
  %8 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %7, i64 0, i32 0
  %9 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %8, align 8
  %10 = icmp eq %"struct.Sk3DView::Rec"* %7, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = bitcast %"struct.Sk3DView::Rec"* %7 to i8*
  tail call void @_ZdlPv(i8* %12) #11
  br label %13

13:                                               ; preds = %11, %6
  %14 = icmp eq %"struct.Sk3DView::Rec"* %9, %4
  br i1 %14, label %15, label %6

15:                                               ; preds = %13, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DView4saveEv(%class.Sk3DView* nocapture) local_unnamed_addr #6 align 2 {
  %2 = tail call i8* @_Znwm(i64 72) #11
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #10
  %4 = bitcast %class.Sk3DView* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast i8* %2 to i64*
  store i64 %5, i64* %6, align 8
  %7 = inttoptr i64 %5 to %"struct.Sk3DView::Rec"*
  %8 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %7, i64 0, i32 1
  %9 = bitcast %class.SkM44* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 4 %9, i64 64, i1 false)
  %10 = bitcast %class.Sk3DView* %0 to i8**
  store i8* %2, i8** %10, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DView7restoreEv(%class.Sk3DView* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %3 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %2, align 8
  %4 = bitcast %"struct.Sk3DView::Rec"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq %"struct.Sk3DView::Rec"* %3, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.Sk3DView::Rec"* %3 to i8*
  tail call void @_ZdlPv(i8* %8) #11
  br label %9

9:                                                ; preds = %7, %1
  %10 = bitcast %class.Sk3DView* %0 to i64*
  store i64 %5, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DView9translateEfff(%class.Sk3DView* nocapture readonly, float, float, float) local_unnamed_addr #6 align 2 {
  %5 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %6 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %5, align 8
  %7 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %6, i64 0, i32 1
  %8 = tail call dereferenceable(64) %class.SkM44* @_ZN5SkM4412preTranslateEfff(%class.SkM44* %7, float %1, float %2, float %3) #10
  ret void
}

declare dereferenceable(64) %class.SkM44* @_ZN5SkM4412preTranslateEfff(%class.SkM44*, float, float, float) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DView7rotateXEf(%class.Sk3DView* nocapture readonly, float) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkM44, align 4
  %4 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %5 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %4, align 8
  %6 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %5, i64 0, i32 1
  %7 = bitcast %class.SkM44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #10
  %8 = fmul float %1, 0x400921FB60000000
  %9 = fdiv float %8, 1.800000e+02
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 -1, i64 64, i1 false) #10, !alias.scope !3
  %10 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setRotateE4SkV3f(%class.SkM44* nonnull %3, <2 x float> <float 1.000000e+00, float 0.000000e+00>, float 0.000000e+00, float %9) #10
  %11 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* %6, %class.SkM44* dereferenceable(64) %6, %class.SkM44* nonnull dereferenceable(64) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DView7rotateYEf(%class.Sk3DView* nocapture readonly, float) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkM44, align 4
  %4 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %5 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %4, align 8
  %6 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %5, i64 0, i32 1
  %7 = bitcast %class.SkM44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #10
  %8 = fmul float %1, 0x400921FB60000000
  %9 = fdiv float %8, 1.800000e+02
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 -1, i64 64, i1 false) #10, !alias.scope !6
  %10 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setRotateE4SkV3f(%class.SkM44* nonnull %3, <2 x float> <float 0.000000e+00, float -1.000000e+00>, float 0.000000e+00, float %9) #10
  %11 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* %6, %class.SkM44* dereferenceable(64) %6, %class.SkM44* nonnull dereferenceable(64) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8Sk3DView7rotateZEf(%class.Sk3DView* nocapture readonly, float) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkM44, align 4
  %4 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %5 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %4, align 8
  %6 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %5, i64 0, i32 1
  %7 = bitcast %class.SkM44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #10
  %8 = fmul float %1, 0x400921FB60000000
  %9 = fdiv float %8, 1.800000e+02
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 -1, i64 64, i1 false) #10, !alias.scope !9
  %10 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setRotateE4SkV3f(%class.SkM44* nonnull %3, <2 x float> zeroinitializer, float 1.000000e+00, float %9) #10
  %11 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* %6, %class.SkM44* dereferenceable(64) %6, %class.SkM44* nonnull dereferenceable(64) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK8Sk3DView13dotWithNormalEfff(%class.Sk3DView* nocapture readonly, float, float, float) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %6 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %5, align 8
  %7 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %6, i64 0, i32 1
  %8 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %7, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00) #10
  %9 = extractvalue { <2 x float>, <2 x float> } %8, 0
  %10 = extractvalue { <2 x float>, <2 x float> } %8, 1
  %11 = extractelement <2 x float> %10, i32 0
  %12 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %7, float 0.000000e+00, float -1.000000e+00, float 0.000000e+00, float 0.000000e+00) #10
  %13 = extractvalue { <2 x float>, <2 x float> } %12, 0
  %14 = extractvalue { <2 x float>, <2 x float> } %12, 1
  %15 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %7, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00) #10
  %16 = extractelement <2 x float> %13, i32 0
  %17 = fmul float %11, %16
  %18 = shufflevector <2 x float> %13, <2 x float> %14, <2 x i32> <i32 1, i32 2>
  %19 = fmul <2 x float> %9, %18
  %20 = extractelement <2 x float> %19, i32 0
  %21 = fsub float %17, %20
  %22 = shufflevector <2 x float> %9, <2 x float> %10, <2 x i32> <i32 1, i32 2>
  %23 = fmul <2 x float> %22, %13
  %24 = fsub <2 x float> %19, %23
  %25 = fmul float %21, %2
  %26 = insertelement <2 x float> undef, float %3, i32 0
  %27 = insertelement <2 x float> %26, float %1, i32 1
  %28 = fmul <2 x float> %24, %27
  %29 = extractelement <2 x float> %28, i32 1
  %30 = fadd float %29, %25
  %31 = extractelement <2 x float> %28, i32 0
  %32 = fadd float %31, %30
  ret float %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8Sk3DView9getMatrixEP8SkMatrix(%class.Sk3DView* nocapture, %class.SkMatrix*) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkPatch3D, align 8
  %4 = icmp eq %class.SkMatrix* %1, null
  br i1 %4, label %43, label %5

5:                                                ; preds = %2
  %6 = bitcast %class.SkPatch3D* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %6) #10
  %7 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 2, i32 0
  %8 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 2, i32 1
  %9 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 2, i32 2
  %10 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 0, i32 0
  store float 1.000000e+00, float* %10, align 8
  %11 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 0, i32 2
  %13 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1, i32 1
  store float -1.000000e+00, float* %14, align 4
  %15 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1, i32 2
  %16 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %17 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %16, align 8
  %18 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %17, i64 0, i32 1
  %19 = bitcast %class.SkPatch3D* %3 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 8
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  %23 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %18, float %21, float %22, float 0.000000e+00, float 0.000000e+00) #10
  %24 = extractvalue { <2 x float>, <2 x float> } %23, 0
  %25 = extractvalue { <2 x float>, <2 x float> } %23, 1
  %26 = extractelement <2 x float> %25, i32 0
  store <2 x float> %24, <2 x float>* %19, align 8
  store float %26, float* %12, align 8
  %27 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1
  %28 = bitcast %struct.SkV3* %27 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = extractelement <2 x float> %29, i32 0
  %31 = extractelement <2 x float> %29, i32 1
  %32 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %18, float %30, float %31, float 0.000000e+00, float 0.000000e+00) #10
  %33 = extractvalue { <2 x float>, <2 x float> } %32, 0
  %34 = extractvalue { <2 x float>, <2 x float> } %32, 1
  %35 = extractelement <2 x float> %34, i32 0
  store <2 x float> %33, <2 x float>* %28, align 4
  store float %35, float* %15, align 4
  %36 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %18, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00) #10
  %37 = extractvalue { <2 x float>, <2 x float> } %36, 0
  %38 = extractvalue { <2 x float>, <2 x float> } %36, 1
  %39 = extractelement <2 x float> %37, i32 0
  %40 = extractelement <2 x float> %37, i32 1
  %41 = extractelement <2 x float> %38, i32 0
  store float %39, float* %7, align 8
  store float %40, float* %8, align 4
  store float %41, float* %9, align 8
  %42 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2
  call void @_ZNK10SkCamera3D13patchToMatrixERK9SkPatch3DP8SkMatrix(%class.SkCamera3D* %42, %class.SkPatch3D* nonnull dereferenceable(36) %3, %class.SkMatrix* nonnull %1)
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %6) #10
  br label %43

43:                                               ; preds = %2, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8Sk3DView13applyToCanvasEP8SkCanvas(%class.Sk3DView* nocapture, %class.SkCanvas*) local_unnamed_addr #2 align 2 {
  %3 = alloca %class.SkPatch3D, align 8
  %4 = alloca %class.SkMatrix, align 16
  %5 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #10
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %7 = bitcast %class.SkMatrix* %4 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %7, align 16
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %9 = bitcast float* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %9, align 16
  %10 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %10, align 16
  store i32 16, i32* %6, align 4
  %11 = bitcast %class.SkPatch3D* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %11) #10
  %12 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 2, i32 0
  %13 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 2, i32 2
  %15 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 0, i32 0
  store float 1.000000e+00, float* %15, align 8
  %16 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %16, align 4
  %17 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 0, i32 2
  %18 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1, i32 1
  store float -1.000000e+00, float* %19, align 4
  %20 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1, i32 2
  %21 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 0
  %22 = load %"struct.Sk3DView::Rec"*, %"struct.Sk3DView::Rec"** %21, align 8
  %23 = getelementptr inbounds %"struct.Sk3DView::Rec", %"struct.Sk3DView::Rec"* %22, i64 0, i32 1
  %24 = bitcast %class.SkPatch3D* %3 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 8
  %26 = extractelement <2 x float> %25, i32 0
  %27 = extractelement <2 x float> %25, i32 1
  %28 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %23, float %26, float %27, float 0.000000e+00, float 0.000000e+00) #10
  %29 = extractvalue { <2 x float>, <2 x float> } %28, 0
  %30 = extractvalue { <2 x float>, <2 x float> } %28, 1
  %31 = extractelement <2 x float> %30, i32 0
  store <2 x float> %29, <2 x float>* %24, align 8
  store float %31, float* %17, align 8
  %32 = getelementptr inbounds %class.SkPatch3D, %class.SkPatch3D* %3, i64 0, i32 1
  %33 = bitcast %struct.SkV3* %32 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4
  %35 = extractelement <2 x float> %34, i32 0
  %36 = extractelement <2 x float> %34, i32 1
  %37 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %23, float %35, float %36, float 0.000000e+00, float 0.000000e+00) #10
  %38 = extractvalue { <2 x float>, <2 x float> } %37, 0
  %39 = extractvalue { <2 x float>, <2 x float> } %37, 1
  %40 = extractelement <2 x float> %39, i32 0
  store <2 x float> %38, <2 x float>* %33, align 4
  store float %40, float* %20, align 4
  %41 = tail call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* %23, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00) #10
  %42 = extractvalue { <2 x float>, <2 x float> } %41, 0
  %43 = extractvalue { <2 x float>, <2 x float> } %41, 1
  %44 = extractelement <2 x float> %42, i32 0
  %45 = extractelement <2 x float> %42, i32 1
  %46 = extractelement <2 x float> %43, i32 0
  store float %44, float* %12, align 8
  store float %45, float* %13, align 4
  store float %46, float* %14, align 8
  %47 = getelementptr inbounds %class.Sk3DView, %class.Sk3DView* %0, i64 0, i32 2
  call void @_ZNK10SkCamera3D13patchToMatrixERK9SkPatch3DP8SkMatrix(%class.SkCamera3D* %47, %class.SkPatch3D* nonnull dereferenceable(36) %3, %class.SkMatrix* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %11) #10
  call void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas* %1, %class.SkMatrix* nonnull dereferenceable(40) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #10
  ret void
}

declare void @_ZN8SkCanvas6concatERK8SkMatrix(%class.SkCanvas*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

declare dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44*, %class.SkM44* dereferenceable(64), %class.SkM44* dereferenceable(64)) local_unnamed_addr #3

declare dereferenceable(64) %class.SkM44* @_ZN5SkM449setRotateE4SkV3f(%class.SkM44*, <2 x float>, float, float) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN5SkM446RotateE4SkV3f: argument 0"}
!5 = distinct !{!5, !"_ZN5SkM446RotateE4SkV3f"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN5SkM446RotateE4SkV3f: argument 0"}
!8 = distinct !{!8, !"_ZN5SkM446RotateE4SkV3f"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN5SkM446RotateE4SkV3f: argument 0"}
!11 = distinct !{!11, !"_ZN5SkM446RotateE4SkV3f"}
