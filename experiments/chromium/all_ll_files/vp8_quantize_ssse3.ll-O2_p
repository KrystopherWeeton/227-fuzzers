; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/x86/vp8_quantize_ssse3.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/x86/vp8_quantize_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_fast_quantize_b_ssse3(%struct.block* nocapture readonly, %struct.blockd* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 1
  %4 = bitcast i16** %3 to <8 x i16>**
  %5 = load <8 x i16>*, <8 x i16>** %4, align 8
  %6 = load <8 x i16>, <8 x i16>* %5, align 16
  %7 = getelementptr inbounds <8 x i16>, <8 x i16>* %5, i64 0, i64 8
  %8 = bitcast i16* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 16
  %10 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 7
  %11 = bitcast i16** %10 to <8 x i16>**
  %12 = load <8 x i16>*, <8 x i16>** %11, align 8
  %13 = load <8 x i16>, <8 x i16>* %12, align 16
  %14 = getelementptr inbounds <8 x i16>, <8 x i16>* %12, i64 0, i64 8
  %15 = bitcast i16* %14 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 16
  %17 = getelementptr inbounds %struct.block, %struct.block* %0, i64 0, i32 3
  %18 = bitcast i16** %17 to <8 x i16>**
  %19 = load <8 x i16>*, <8 x i16>** %18, align 8
  %20 = load <8 x i16>, <8 x i16>* %19, align 16
  %21 = getelementptr inbounds <8 x i16>, <8 x i16>* %19, i64 0, i64 8
  %22 = bitcast i16* %21 to <8 x i16>*
  %23 = load <8 x i16>, <8 x i16>* %22, align 16
  %24 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 3
  %25 = bitcast i16** %24 to <8 x i16>**
  %26 = load <8 x i16>*, <8 x i16>** %25, align 8
  %27 = load <8 x i16>, <8 x i16>* %26, align 16
  %28 = getelementptr inbounds <8 x i16>, <8 x i16>* %26, i64 0, i64 8
  %29 = bitcast i16* %28 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = ashr <8 x i16> %6, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %32 = ashr <8 x i16> %9, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %33 = sub <8 x i16> zeroinitializer, %6
  %34 = icmp slt <8 x i16> %6, zeroinitializer
  %35 = select <8 x i1> %34, <8 x i16> %33, <8 x i16> %6
  %36 = sub <8 x i16> zeroinitializer, %9
  %37 = icmp slt <8 x i16> %9, zeroinitializer
  %38 = select <8 x i1> %37, <8 x i16> %36, <8 x i16> %9
  %39 = add <8 x i16> %13, %35
  %40 = add <8 x i16> %16, %38
  %41 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %39, <8 x i16> %20) #2
  %42 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %40, <8 x i16> %23) #2
  %43 = xor <8 x i16> %41, %31
  %44 = xor <8 x i16> %42, %32
  %45 = sub <8 x i16> %43, %31
  %46 = sub <8 x i16> %44, %32
  %47 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %48 = bitcast %struct.blockd* %1 to <8 x i16>**
  %49 = load <8 x i16>*, <8 x i16>** %48, align 8
  store <8 x i16> %45, <8 x i16>* %49, align 16
  %50 = load i16*, i16** %47, align 8
  %51 = getelementptr inbounds i16, i16* %50, i64 8
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %52, align 16
  %53 = mul <8 x i16> %45, %27
  %54 = mul <8 x i16> %46, %30
  %55 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 1
  %56 = bitcast i16** %55 to <8 x i16>**
  %57 = load <8 x i16>*, <8 x i16>** %56, align 8
  store <8 x i16> %53, <8 x i16>* %57, align 16
  %58 = load i16*, i16** %55, align 8
  %59 = getelementptr inbounds i16, i16* %58, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %54, <8 x i16>* %60, align 16
  %61 = icmp sgt <8 x i16> %41, zeroinitializer
  %62 = sext <8 x i1> %61 to <8 x i16>
  %63 = icmp sgt <8 x i16> %42, zeroinitializer
  %64 = sext <8 x i1> %63 to <8 x i16>
  %65 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %62, <8 x i16> %64) #2
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 4, i32 8, i32 5, i32 2, i32 3, i32 6, i32 9, i32 12, i32 13, i32 10, i32 7, i32 11, i32 14, i32 15>
  %67 = icmp slt <16 x i8> %66, zeroinitializer
  %68 = bitcast <16 x i1> %67 to i16
  %69 = zext i16 %68 to i32
  %70 = tail call i32 asm sideeffect "bsr $1, $0", "=r,r,~{flags},~{dirflag},~{fpsr},~{flags}"(i32 %69) #2, !srcloc !2
  %71 = icmp eq i16 %68, 0
  %72 = trunc i32 %70 to i8
  %73 = add i8 %72, 1
  %74 = select i1 %71, i8 0, i8 %73
  %75 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %76 = load i8*, i8** %75, align 8
  store i8 %74, i8* %76, align 1
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 842}
