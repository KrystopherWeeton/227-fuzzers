; ModuleID = '../../third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/libEGL/Surface.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.LibGLESv2 = type <{ i8*, %class.LibGLESv2exports*, i8, [7 x i8] }>
%class.LibGLESv2exports = type { void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32)*, void (float, float, float, float)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, i32 (i32)*, void (i32)*, void (float, float, float, float)*, void (float)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i8)*, void (float, float)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32)*, void (i32)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32*)*, i32 ()*, void (i32, i32, i32*)*, void (i32, float*)*, void (i32, i32, i32, i32*)*, i32 ()*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, i32*, i8*)*, i8* (i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, float*)*, void (i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (float, i8)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, i8 (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, float)*, void (i32, float*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32)*, void (i32, i32*)*, %"class.egl::Context"* (%"class.egl::Display"*, %"class.egl::Context"*, %"class.egl::Config"*)*, void ()* (i8*)*, %"class.egl::Image"* (i32, i32, i32, i32)*, %"class.egl::Image"* (%"class.egl::ClientBuffer"*)*, %"class.egl::Image"* (i32, i32, i32, i32)*, %"class.sw::FrameBuffer"* (i8*, i64, i32, i32)* }
%"class.egl::Display" = type { i32 (...)**, i8*, i8*, i32, i32, %"class.std::__1::set", %"class.egl::ConfigSet", %"class.std::__1::set.12", %"class.std::__1::set.22", %"class.gl::NameSpace", %"class.sw::RecursiveLock" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.egl::ConfigSet" = type { %"class.std::__1::set.4" }
%"class.std::__1::set.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.12" = type { %"class.std::__1::__tree.13" }
%"class.std::__1::__tree.13" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.22" = type { %"class.std::__1::__tree.23" }
%"class.std::__1::__tree.23" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.gl::NameSpace" = type <{ %"class.std::__1::map", i32, [4 x i8] }>
%"class.std::__1::map" = type { %"class.std::__1::__tree.32" }
%"class.std::__1::__tree.32" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.33", %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.sw::RecursiveLock" = type { %"class.std::__1::recursive_mutex" }
%"class.std::__1::recursive_mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.egl::Context" = type { %"class.gl::Object.base", %"class.egl::Display"* }
%"class.gl::Object.base" = type <{ i32 (...)**, i32 }>
%"class.egl::Config" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.egl::Image" = type { %"class.sw::Surface.base", [6 x i8], %"class.gl::Object.base", i32, i32, i32, i32, i8, %"class.egl::Texture"* }
%"class.sw::Surface.base" = type <{ i32 (...)**, %"class.sw::Resource"*, %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", i8, i8, i8, i8, i32, i8, i8 }>
%"class.sw::Resource" = type { i64, %"class.sw::MutexLock", %"class.sw::Event", i32, i32, i32, i8, i8* }
%"class.sw::MutexLock" = type { %union.pthread_mutex_t }
%"class.sw::Event" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.41, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.41 = type { i64 }
%"struct.sw::Surface::Buffer" = type <{ i8*, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, i32, %"class.sw::AtomicInt", i8, [3 x i8] }>
%"class.sw::AtomicInt" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.egl::Texture" = type { %"class.gl::NamedObject" }
%"class.gl::NamedObject" = type { %"class.gl::Object.base", i32 }
%"class.egl::ClientBuffer" = type { i32, i32, i32, i8*, i64 }
%"class.sw::FrameBuffer" = type <{ i32 (...)**, i8, [7 x i8], i8*, i32, i32, i32, i32, i8*, void (i8*, i8*, %"struct.sw::FrameBuffer::Cursor"*)*, %"class.std::__1::shared_ptr", %"struct.sw::BlitState", %"struct.sw::BlitState", %"class.sw::Thread"*, %"class.sw::Event", %"class.sw::Event", i8, [7 x i8] }>
%"struct.sw::FrameBuffer::Cursor" = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.rr::Routine"*, %"class.std::__1::__shared_weak_count"* }
%"class.rr::Routine" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.sw::BlitState" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.sw::Thread" = type <{ i64, i8, [7 x i8] }>
%class.LibX11 = type { i8 }
%"class.gl::Surface" = type { i32 (...)** }
%"class.egl::Surface" = type <{ %"class.gl::Surface", %"class.gl::Object.base", [4 x i8], %"class.egl::Display"*, %"class.egl::Config"*, %"class.egl::Image"*, %"class.egl::Image"*, %"class.egl::Texture"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i8*, i32, i32, i32, [4 x i8] }>
%"class.egl::WindowSurface" = type { %"class.egl::Surface.base", i64, %"class.sw::FrameBuffer"* }
%"class.egl::Surface.base" = type <{ %"class.gl::Surface", %"class.gl::Object.base", [4 x i8], %"class.egl::Display"*, %"class.egl::Config"*, %"class.egl::Image"*, %"class.egl::Image"*, %"class.egl::Texture"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i8*, i32, i32, i32 }>
%"class.egl::PBufferSurface" = type { %"class.egl::Surface.base", [4 x i8] }
%"class.gl::Object" = type <{ i32 (...)**, i32, [4 x i8] }>
%struct.XWindowAttributes = type { i32, i32, i32, i32, i32, i32, %struct.Visual*, i64, i32, i32, i32, i32, i64, i64, i32, i64, i32, i32, i64, i64, i64, i32, %struct.Screen* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct._XDisplay = type opaque
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct._XGC = type opaque
%struct.LibX11exports = type { %struct._XDisplay* (i8*)*, i32 (%struct._XDisplay*, i64, %struct.XWindowAttributes*)*, %struct.Screen* (%struct._XDisplay*)*, i32 (%struct.Screen*)*, i32 (%struct.Screen*)*, i32 (%struct.Screen*)*, %struct._XGC* (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, i32, i32, i32, %struct.XVisualInfo*)*, %struct.Visual* (%struct._XDisplay*, i32)*, i32 (%struct._XDisplay*, %struct.XErrorEvent*)* (i32 (%struct._XDisplay*, %struct.XErrorEvent*)*)*, i32 (%struct._XDisplay*, i32)*, %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XDisplay*)*, i32 (%struct._XDisplay*, i64, %struct._XGC*, %struct._XImage*, i32, i32, i32, i32, i32, i32)*, i32 (%struct._XDisplay*, i64, %struct._XGC*, i32, i32, i8*, i32)*, i32 (%struct._XDisplay*)*, %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i8*, %struct.XShmSegmentInfo*, i32, i32)*, i32 (%struct._XDisplay*, %struct.XShmSegmentInfo*)*, i32 (%struct._XDisplay*, %struct.XShmSegmentInfo*)*, i32 (%struct._XDisplay*, i64, %struct._XGC*, %struct._XImage*, i32, i32, i32, i32, i32, i32, i1)* }
%struct.XVisualInfo = type { %struct.Visual*, i64, i32, i32, i32, i64, i64, i64, i32, i32 }
%struct.XErrorEvent = type { i32, %struct._XDisplay*, i64, i64, i8, i8, i8 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %"struct._XImage::funcs" }
%"struct._XImage::funcs" = type { {}*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.XShmSegmentInfo = type { i64, i32, i8*, i32 }
%"class.sw::Surface" = type <{ i32 (...)**, %"class.sw::Resource"*, %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", %"struct.sw::Surface::Buffer", i8, i8, i8, i8, i32, i8, i8, [6 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.46 }
%union.anon.46 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.47 }
%struct.anon.47 = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNK3egl7Surface15isWindowSurfaceEv = comdat any

$_ZNK3egl7Surface16isPBufferSurfaceEv = comdat any

$_ZNK3egl13WindowSurface15isWindowSurfaceEv = comdat any

$_ZNK3egl14PBufferSurface16isPBufferSurfaceEv = comdat any

$_ZN9LibGLESv211loadExportsEv = comdat any

$_Z11loadLibraryILi3EEPvRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERAT__PKcSB_ = comdat any

$_ZTVN2gl7SurfaceE = comdat any

@_ZTVN2gl7SurfaceE = linkonce_odr hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTVN3egl7SurfaceE = hidden unnamed_addr constant { [26 x i8*], [6 x i8*] } { [26 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.egl::Surface"*)* @_ZN3egl7SurfaceD2Ev to i8*), i8* bitcast (void (%"class.egl::Surface"*)* @_ZN3egl7SurfaceD0Ev to i8*), i8* bitcast (%"class.egl::Image"* (%"class.egl::Surface"*)* @_ZN3egl7Surface15getRenderTargetEv to i8*), i8* bitcast (%"class.egl::Image"* (%"class.egl::Surface"*)* @_ZN3egl7Surface15getDepthStencilEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface8getWidthEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface9getHeightEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16getTextureTargetEv to i8*), i8* bitcast (void (%"class.egl::Surface"*, %"class.egl::Texture"*)* @_ZN3egl7Surface15setBoundTextureEPNS_7TextureE to i8*), i8* bitcast (i1 (%"class.egl::Surface"*)* @_ZN3egl7Surface10initializeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface11getConfigIDEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface14getSurfaceTypeEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface14getMipmapLevelEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface21getMultisampleResolveEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface19getPixelAspectRatioEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getRenderBufferEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getSwapBehaviorEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16getTextureFormatEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface17getLargestPBufferEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.egl::Texture"* (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getBoundTextureEv to i8*), i8* bitcast (i1 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15isWindowSurfaceEv to i8*), i8* bitcast (i1 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16isPBufferSurfaceEv to i8*), i8* bitcast (void (%"class.egl::Surface"*)* @_ZN3egl7Surface15deleteResourcesEv to i8*)], [6 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.gl::Object"*)* @_ZN2gl6Object6addRefEv to i8*), i8* bitcast (void (%"class.gl::Object"*)* @_ZN2gl6Object7releaseEv to i8*), i8* bitcast (void (%"class.egl::Surface"*)* @_ZThn8_N3egl7SurfaceD1Ev to i8*), i8* bitcast (void (%"class.egl::Surface"*)* @_ZThn8_N3egl7SurfaceD0Ev to i8*)] }, align 8
@libGLESv2 = external global %class.LibGLESv2, align 8
@_ZTVN3egl13WindowSurfaceE = hidden unnamed_addr constant { [26 x i8*], [6 x i8*] } { [26 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.egl::WindowSurface"*)* @_ZN3egl13WindowSurfaceD2Ev to i8*), i8* bitcast (void (%"class.egl::WindowSurface"*)* @_ZN3egl13WindowSurfaceD0Ev to i8*), i8* bitcast (%"class.egl::Image"* (%"class.egl::Surface"*)* @_ZN3egl7Surface15getRenderTargetEv to i8*), i8* bitcast (%"class.egl::Image"* (%"class.egl::Surface"*)* @_ZN3egl7Surface15getDepthStencilEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface8getWidthEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface9getHeightEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16getTextureTargetEv to i8*), i8* bitcast (void (%"class.egl::Surface"*, %"class.egl::Texture"*)* @_ZN3egl7Surface15setBoundTextureEPNS_7TextureE to i8*), i8* bitcast (i1 (%"class.egl::WindowSurface"*)* @_ZN3egl13WindowSurface10initializeEv to i8*), i8* bitcast (void (%"class.egl::WindowSurface"*)* @_ZN3egl13WindowSurface4swapEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface11getConfigIDEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface14getSurfaceTypeEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface14getMipmapLevelEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface21getMultisampleResolveEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface19getPixelAspectRatioEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getRenderBufferEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getSwapBehaviorEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16getTextureFormatEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface17getLargestPBufferEv to i8*), i8* bitcast (i64 (%"class.egl::WindowSurface"*)* @_ZNK3egl13WindowSurface15getWindowHandleEv to i8*), i8* bitcast (%"class.egl::Texture"* (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getBoundTextureEv to i8*), i8* bitcast (i1 (%"class.egl::WindowSurface"*)* @_ZNK3egl13WindowSurface15isWindowSurfaceEv to i8*), i8* bitcast (i1 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16isPBufferSurfaceEv to i8*), i8* bitcast (void (%"class.egl::WindowSurface"*)* @_ZN3egl13WindowSurface15deleteResourcesEv to i8*)], [6 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.gl::Object"*)* @_ZN2gl6Object6addRefEv to i8*), i8* bitcast (void (%"class.gl::Object"*)* @_ZN2gl6Object7releaseEv to i8*), i8* bitcast (void (%"class.egl::WindowSurface"*)* @_ZThn8_N3egl13WindowSurfaceD1Ev to i8*), i8* bitcast (void (%"class.egl::WindowSurface"*)* @_ZThn8_N3egl13WindowSurfaceD0Ev to i8*)] }, align 8
@libX11 = external global %class.LibX11, align 1
@_ZTVN3egl14PBufferSurfaceE = hidden unnamed_addr constant { [26 x i8*], [6 x i8*] } { [26 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.egl::PBufferSurface"*)* @_ZN3egl14PBufferSurfaceD2Ev to i8*), i8* bitcast (void (%"class.egl::PBufferSurface"*)* @_ZN3egl14PBufferSurfaceD0Ev to i8*), i8* bitcast (%"class.egl::Image"* (%"class.egl::Surface"*)* @_ZN3egl7Surface15getRenderTargetEv to i8*), i8* bitcast (%"class.egl::Image"* (%"class.egl::Surface"*)* @_ZN3egl7Surface15getDepthStencilEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface8getWidthEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface9getHeightEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16getTextureTargetEv to i8*), i8* bitcast (void (%"class.egl::Surface"*, %"class.egl::Texture"*)* @_ZN3egl7Surface15setBoundTextureEPNS_7TextureE to i8*), i8* bitcast (i1 (%"class.egl::Surface"*)* @_ZN3egl7Surface10initializeEv to i8*), i8* bitcast (void (%"class.egl::PBufferSurface"*)* @_ZN3egl14PBufferSurface4swapEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface11getConfigIDEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface14getSurfaceTypeEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface14getMipmapLevelEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface21getMultisampleResolveEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface19getPixelAspectRatioEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getRenderBufferEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getSwapBehaviorEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface16getTextureFormatEv to i8*), i8* bitcast (i32 (%"class.egl::Surface"*)* @_ZNK3egl7Surface17getLargestPBufferEv to i8*), i8* bitcast (i64 (%"class.egl::PBufferSurface"*)* @_ZNK3egl14PBufferSurface15getWindowHandleEv to i8*), i8* bitcast (%"class.egl::Texture"* (%"class.egl::Surface"*)* @_ZNK3egl7Surface15getBoundTextureEv to i8*), i8* bitcast (i1 (%"class.egl::Surface"*)* @_ZNK3egl7Surface15isWindowSurfaceEv to i8*), i8* bitcast (i1 (%"class.egl::PBufferSurface"*)* @_ZNK3egl14PBufferSurface16isPBufferSurfaceEv to i8*), i8* bitcast (void (%"class.egl::PBufferSurface"*)* @_ZN3egl14PBufferSurface15deleteResourcesEv to i8*)], [6 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.gl::Object"*)* @_ZN2gl6Object6addRefEv to i8*), i8* bitcast (void (%"class.gl::Object"*)* @_ZN2gl6Object7releaseEv to i8*), i8* bitcast (void (%"class.egl::PBufferSurface"*)* @_ZThn8_N3egl14PBufferSurfaceD1Ev to i8*), i8* bitcast (void (%"class.egl::PBufferSurface"*)* @_ZThn8_N3egl14PBufferSurfaceD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [27 x i8] c"lib64GLES_V2_translator.so\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"libGLESv2.so.2\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"libGLESv2.so\00", align 1
@__const._ZN9LibGLESv211loadExportsEv.libGLESv2_lib = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)], align 16
@.str.3 = private unnamed_addr constant [22 x i8] c"libGLESv2_swiftshader\00", align 1

@_ZN2gl7SurfaceD1Ev = hidden unnamed_addr alias void (%"class.gl::Surface"*), void (%"class.gl::Surface"*)* @_ZN2gl7SurfaceD2Ev
@_ZN3egl7SurfaceD1Ev = hidden unnamed_addr alias void (%"class.egl::Surface"*), void (%"class.egl::Surface"*)* @_ZN3egl7SurfaceD2Ev
@_ZN3egl13WindowSurfaceC1EPNS_7DisplayEPKNS_6ConfigEl = hidden unnamed_addr alias void (%"class.egl::WindowSurface"*, %"class.egl::Display"*, %"class.egl::Config"*, i64), void (%"class.egl::WindowSurface"*, %"class.egl::Display"*, %"class.egl::Config"*, i64)* @_ZN3egl13WindowSurfaceC2EPNS_7DisplayEPKNS_6ConfigEl
@_ZN3egl13WindowSurfaceD1Ev = hidden unnamed_addr alias void (%"class.egl::WindowSurface"*), void (%"class.egl::WindowSurface"*)* @_ZN3egl13WindowSurfaceD2Ev
@_ZN3egl14PBufferSurfaceC1EPNS_7DisplayEPKNS_6ConfigEiijjjjjPvi = hidden unnamed_addr alias void (%"class.egl::PBufferSurface"*, %"class.egl::Display"*, %"class.egl::Config"*, i32, i32, i32, i32, i32, i32, i32, i8*, i32), void (%"class.egl::PBufferSurface"*, %"class.egl::Display"*, %"class.egl::Config"*, i32, i32, i32, i32, i32, i32, i32, i8*, i32)* @_ZN3egl14PBufferSurfaceC2EPNS_7DisplayEPKNS_6ConfigEiijjjjjPvi
@_ZN3egl14PBufferSurfaceD1Ev = hidden unnamed_addr alias void (%"class.egl::PBufferSurface"*), void (%"class.egl::PBufferSurface"*)* @_ZN3egl14PBufferSurfaceD2Ev

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN2gl7SurfaceC2Ev(%"class.gl::Surface"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::Surface", %"class.gl::Surface"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2gl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN2gl7SurfaceD2Ev(%"class.gl::Surface"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind optsize ssp uwtable
define hidden void @_ZN2gl7SurfaceD0Ev(%"class.gl::Surface"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl7SurfaceC2EPKNS_7DisplayEPKNS_6ConfigE(%"class.egl::Surface"*, %"class.egl::Display"*, %"class.egl::Config"*) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2gl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 1
  %6 = bitcast %"class.gl::Object.base"* %5 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectC2Ev(%"class.gl::Object"* %6) #14
  %7 = bitcast %"class.egl::Surface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %7, align 8
  %8 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 3
  store %"class.egl::Display"* %1, %"class.egl::Display"** %8, align 8
  %9 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 4
  store %"class.egl::Config"* %2, %"class.egl::Config"** %9, align 8
  %10 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 12
  %12 = bitcast %"class.egl::Image"** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 40, i1 false)
  %13 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 12442, i32 -1, i32 12420, i32 12436>, <4 x i32>* %13, align 8
  %14 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 16
  store i32 12380, i32* %14, align 8
  %15 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 17
  store i32 12380, i32* %15, align 4
  %16 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 18
  store i32 1, i32* %16, align 8
  %17 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 20
  store i8* null, i8** %17, align 8
  ret void
}

; Function Attrs: optsize
declare void @_ZN2gl6ObjectC2Ev(%"class.gl::Object"*) unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl7SurfaceD2Ev(%"class.egl::Surface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 1
  %3 = bitcast %"class.egl::Surface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %3, align 8
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %0) #15
  %4 = bitcast %"class.gl::Object.base"* %2 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectD2Ev(%"class.gl::Object"* %4) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 5
  %3 = load %"class.egl::Image"*, %"class.egl::Image"** %2, align 8
  %4 = icmp eq %"class.egl::Image"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.egl::Image"* %3 to void (%"class.egl::Image"*)***
  %7 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %7, i64 7
  %9 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %8, align 8
  tail call void %9(%"class.egl::Image"* nonnull %3) #14
  store %"class.egl::Image"* null, %"class.egl::Image"** %2, align 8
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 7
  %12 = load %"class.egl::Texture"*, %"class.egl::Texture"** %11, align 8
  %13 = icmp eq %"class.egl::Texture"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.egl::Texture"* %12 to void (%"class.egl::Texture"*)***
  %16 = load void (%"class.egl::Texture"*)**, void (%"class.egl::Texture"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.egl::Texture"*)*, void (%"class.egl::Texture"*)** %16, i64 4
  %18 = load void (%"class.egl::Texture"*)*, void (%"class.egl::Texture"*)** %17, align 8
  tail call void %18(%"class.egl::Texture"* nonnull %12) #14
  store %"class.egl::Texture"* null, %"class.egl::Texture"** %11, align 8
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 6
  %21 = load %"class.egl::Image"*, %"class.egl::Image"** %20, align 8
  %22 = icmp eq %"class.egl::Image"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = bitcast %"class.egl::Image"* %21 to void (%"class.egl::Image"*)***
  %25 = load void (%"class.egl::Image"*)**, void (%"class.egl::Image"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %25, i64 7
  %27 = load void (%"class.egl::Image"*)*, void (%"class.egl::Image"*)** %26, align 8
  tail call void %27(%"class.egl::Image"* nonnull %21) #14
  store %"class.egl::Image"* null, %"class.egl::Image"** %20, align 8
  br label %28

28:                                               ; preds = %19, %23
  ret void
}

; Function Attrs: nounwind optsize
declare void @_ZN2gl6ObjectD2Ev(%"class.gl::Object"*) unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn8_N3egl7SurfaceD1Ev(%"class.egl::Surface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 -1, i32 23
  %3 = bitcast i32* %2 to %"class.egl::Surface"*
  %4 = getelementptr inbounds i32, i32* %2, i64 2
  %5 = bitcast i32* %2 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %5, align 8
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %3) #14
  %6 = bitcast i32* %4 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectD2Ev(%"class.gl::Object"* %6) #14
  ret void
}

; Function Attrs: noreturn nounwind optsize ssp uwtable
define hidden void @_ZN3egl7SurfaceD0Ev(%"class.egl::Surface"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: noreturn nounwind optsize ssp uwtable
define hidden void @_ZThn8_N3egl7SurfaceD0Ev(%"class.egl::Surface"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3egl7Surface10initializeEv(%"class.egl::Surface"*) unnamed_addr #4 align 2 {
  %2 = alloca %"class.egl::ClientBuffer", align 8
  %3 = tail call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #14
  %4 = icmp eq %class.LibGLESv2exports* %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 6
  %7 = load %"class.egl::Image"*, %"class.egl::Image"** %6, align 8
  br label %50

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 20
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  %12 = tail call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #14
  br i1 %11, label %35, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %class.LibGLESv2exports, %class.LibGLESv2exports* %12, i64 0, i32 197
  %15 = load %"class.egl::Image"* (%"class.egl::ClientBuffer"*)*, %"class.egl::Image"* (%"class.egl::ClientBuffer"*)** %14, align 8
  %16 = bitcast %"class.egl::ClientBuffer"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #16
  %17 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 8
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 9
  %20 = load i32, i32* %19, align 4
  %21 = tail call i32 @_ZNK3egl7Surface21getClientBufferFormatEv(%"class.egl::Surface"* %0) #15
  %22 = bitcast i8** %9 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 21
  %25 = load i32, i32* %24, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %"class.egl::ClientBuffer", %"class.egl::ClientBuffer"* %2, i64 0, i32 0
  store i32 %18, i32* %27, align 8
  %28 = getelementptr inbounds %"class.egl::ClientBuffer", %"class.egl::ClientBuffer"* %2, i64 0, i32 1
  store i32 %20, i32* %28, align 4
  %29 = getelementptr inbounds %"class.egl::ClientBuffer", %"class.egl::ClientBuffer"* %2, i64 0, i32 2
  store i32 %21, i32* %29, align 8
  %30 = getelementptr inbounds %"class.egl::ClientBuffer", %"class.egl::ClientBuffer"* %2, i64 0, i32 3
  %31 = bitcast i8** %30 to i64*
  store i64 %23, i64* %31, align 8
  %32 = getelementptr inbounds %"class.egl::ClientBuffer", %"class.egl::ClientBuffer"* %2, i64 0, i32 4
  store i64 %26, i64* %32, align 8
  %33 = call %"class.egl::Image"* %15(%"class.egl::ClientBuffer"* nonnull dereferenceable(32) %2) #14
  %34 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 6
  store %"class.egl::Image"* %33, %"class.egl::Image"** %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #16
  br label %50

35:                                               ; preds = %8
  %36 = getelementptr inbounds %class.LibGLESv2exports, %class.LibGLESv2exports* %12, i64 0, i32 196
  %37 = load %"class.egl::Image"* (i32, i32, i32, i32)*, %"class.egl::Image"* (i32, i32, i32, i32)** %36, align 8
  %38 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 8
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 9
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 4
  %43 = load %"class.egl::Config"*, %"class.egl::Config"** %42, align 8
  %44 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %43, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %43, i64 0, i32 29
  %47 = load i32, i32* %46, align 4
  %48 = tail call %"class.egl::Image"* %37(i32 %39, i32 %41, i32 %45, i32 %47) #14
  %49 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 6
  store %"class.egl::Image"* %48, %"class.egl::Image"** %49, align 8
  br label %50

50:                                               ; preds = %5, %13, %35
  %51 = phi %"class.egl::Image"* [ %7, %5 ], [ %33, %13 ], [ %48, %35 ]
  %52 = icmp eq %"class.egl::Image"* %51, null
  br i1 %52, label %53, label %58

53:                                               ; preds = %50
  %54 = bitcast %"class.egl::Surface"* %0 to void (%"class.egl::Surface"*)***
  %55 = load void (%"class.egl::Surface"*)**, void (%"class.egl::Surface"*)*** %54, align 8
  %56 = getelementptr inbounds void (%"class.egl::Surface"*)*, void (%"class.egl::Surface"*)** %55, i64 23
  %57 = load void (%"class.egl::Surface"*)*, void (%"class.egl::Surface"*)** %56, align 8
  call void %57(%"class.egl::Surface"* %0) #14
  call void @_ZN3egl5errorEi(i32 12291) #14
  br label %93

58:                                               ; preds = %50
  %59 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 4
  %60 = load %"class.egl::Config"*, %"class.egl::Config"** %59, align 8
  %61 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %60, i64 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %93, label %64

64:                                               ; preds = %58
  %65 = call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #14
  %66 = icmp eq %class.LibGLESv2exports* %65, null
  br i1 %66, label %67, label %70

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 5
  %69 = load %"class.egl::Image"*, %"class.egl::Image"** %68, align 8
  br label %85

70:                                               ; preds = %64
  %71 = call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #14
  %72 = getelementptr inbounds %class.LibGLESv2exports, %class.LibGLESv2exports* %71, i64 0, i32 198
  %73 = load %"class.egl::Image"* (i32, i32, i32, i32)*, %"class.egl::Image"* (i32, i32, i32, i32)** %72, align 8
  %74 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 8
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 9
  %77 = load i32, i32* %76, align 4
  %78 = load %"class.egl::Config"*, %"class.egl::Config"** %59, align 8
  %79 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %78, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %78, i64 0, i32 29
  %82 = load i32, i32* %81, align 4
  %83 = call %"class.egl::Image"* %73(i32 %75, i32 %77, i32 %80, i32 %82) #14
  %84 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 5
  store %"class.egl::Image"* %83, %"class.egl::Image"** %84, align 8
  br label %85

85:                                               ; preds = %67, %70
  %86 = phi %"class.egl::Image"* [ %69, %67 ], [ %83, %70 ]
  %87 = icmp eq %"class.egl::Image"* %86, null
  br i1 %87, label %88, label %93

88:                                               ; preds = %85
  %89 = bitcast %"class.egl::Surface"* %0 to void (%"class.egl::Surface"*)***
  %90 = load void (%"class.egl::Surface"*)**, void (%"class.egl::Surface"*)*** %89, align 8
  %91 = getelementptr inbounds void (%"class.egl::Surface"*)*, void (%"class.egl::Surface"*)** %90, i64 23
  %92 = load void (%"class.egl::Surface"*)*, void (%"class.egl::Surface"*)** %91, align 8
  call void %92(%"class.egl::Surface"* %0) #14
  call void @_ZN3egl5errorEi(i32 12291) #14
  br label %93

93:                                               ; preds = %58, %85, %88, %53
  %94 = phi i1 [ false, %88 ], [ false, %53 ], [ true, %85 ], [ true, %58 ]
  ret i1 %94
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface21getClientBufferFormatEv(%"class.egl::Surface"* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 23
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %18 [
    i32 5121, label %4
    i32 5123, label %10
    i32 36193, label %14
    i32 5131, label %14
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 22
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %18 [
    i32 6403, label %19
    i32 33319, label %7
    i32 6407, label %8
    i32 32993, label %9
  ]

7:                                                ; preds = %4
  br label %19

8:                                                ; preds = %4
  br label %19

9:                                                ; preds = %4
  br label %19

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 22
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 33332
  br i1 %13, label %19, label %18

14:                                               ; preds = %1, %1
  %15 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 22
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 6408
  br i1 %17, label %19, label %18

18:                                               ; preds = %1, %14, %10, %4
  br label %19

19:                                               ; preds = %14, %10, %4, %18, %9, %8, %7
  %20 = phi i32 [ 0, %18 ], [ 19, %9 ], [ 18, %8 ], [ 36, %7 ], [ 5, %4 ], [ 7, %10 ], [ 77, %14 ]
  ret i32 %20
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.egl::Image"* @_ZN3egl7Surface15getRenderTargetEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 6
  %3 = load %"class.egl::Image"*, %"class.egl::Image"** %2, align 8
  %4 = icmp eq %"class.egl::Image"* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %3, i64 0, i32 2
  %7 = bitcast %"class.gl::Object.base"* %6 to %"class.gl::Object"*
  %8 = bitcast %"class.gl::Object.base"* %6 to void (%"class.gl::Object"*)***
  %9 = load void (%"class.gl::Object"*)**, void (%"class.gl::Object"*)*** %8, align 8
  %10 = load void (%"class.gl::Object"*)*, void (%"class.gl::Object"*)** %9, align 8
  tail call void %10(%"class.gl::Object"* %7) #14
  %11 = load %"class.egl::Image"*, %"class.egl::Image"** %2, align 8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"class.egl::Image"* [ null, %1 ], [ %11, %5 ]
  ret %"class.egl::Image"* %13
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden %"class.egl::Image"* @_ZN3egl7Surface15getDepthStencilEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 5
  %3 = load %"class.egl::Image"*, %"class.egl::Image"** %2, align 8
  %4 = icmp eq %"class.egl::Image"* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.egl::Image", %"class.egl::Image"* %3, i64 0, i32 2
  %7 = bitcast %"class.gl::Object.base"* %6 to %"class.gl::Object"*
  %8 = bitcast %"class.gl::Object.base"* %6 to void (%"class.gl::Object"*)***
  %9 = load void (%"class.gl::Object"*)**, void (%"class.gl::Object"*)*** %8, align 8
  %10 = load void (%"class.gl::Object"*)*, void (%"class.gl::Object"*)** %9, align 8
  tail call void %10(%"class.gl::Object"* %7) #14
  %11 = load %"class.egl::Image"*, %"class.egl::Image"** %2, align 8
  br label %12

12:                                               ; preds = %1, %5
  %13 = phi %"class.egl::Image"* [ null, %1 ], [ %11, %5 ]
  ret %"class.egl::Image"* %13
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3egl7Surface14setMipmapLevelEi(%"class.egl::Surface"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 11
  store i32 %1, i32* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3egl7Surface21setMultisampleResolveEj(%"class.egl::Surface"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 12
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3egl7Surface15setSwapBehaviorEj(%"class.egl::Surface"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 15
  store i32 %1, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl7Surface15setSwapIntervalEi(%"class.egl::Surface"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 18
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  store i32 %1, i32* %3, align 8
  %7 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 3
  %8 = load %"class.egl::Display"*, %"class.egl::Display"** %7, align 8
  %9 = tail call i32 @_ZNK3egl7Display18getMinSwapIntervalEv(%"class.egl::Display"* %8) #14
  %10 = load i32, i32* %3, align 4
  %11 = icmp slt i32 %10, %9
  %12 = select i1 %11, i32 %9, i32 %10
  store i32 %12, i32* %3, align 8
  %13 = load %"class.egl::Display"*, %"class.egl::Display"** %7, align 8
  %14 = tail call i32 @_ZNK3egl7Display18getMaxSwapIntervalEv(%"class.egl::Display"* %13) #14
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %14, %15
  %17 = select i1 %16, i32 %14, i32 %15
  store i32 %17, i32* %3, align 8
  br label %18

18:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: optsize
declare i32 @_ZNK3egl7Display18getMinSwapIntervalEv(%"class.egl::Display"*) local_unnamed_addr #5

; Function Attrs: optsize
declare i32 @_ZNK3egl7Display18getMaxSwapIntervalEv(%"class.egl::Display"*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface11getConfigIDEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 4
  %3 = load %"class.egl::Config"*, %"class.egl::Config"** %2, align 8
  %4 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %3, i64 0, i32 14
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface14getSurfaceTypeEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 4
  %3 = load %"class.egl::Config"*, %"class.egl::Config"** %2, align 8
  %4 = getelementptr inbounds %"class.egl::Config", %"class.egl::Config"* %3, i64 0, i32 31
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface8getWidthEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface9getHeightEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 9
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface14getMipmapLevelEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 11
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface21getMultisampleResolveEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 12
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface19getPixelAspectRatioEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 13
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface15getRenderBufferEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 14
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface15getSwapBehaviorEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 15
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface16getTextureFormatEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 16
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface16getTextureTargetEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 17
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3egl7Surface17getLargestPBufferEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN3egl7Surface15setBoundTextureEPNS_7TextureE(%"class.egl::Surface"* nocapture, %"class.egl::Texture"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 7
  store %"class.egl::Texture"* %1, %"class.egl::Texture"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden %"class.egl::Texture"* @_ZNK3egl7Surface15getBoundTextureEv(%"class.egl::Surface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::Surface", %"class.egl::Surface"* %0, i64 0, i32 7
  %3 = load %"class.egl::Texture"*, %"class.egl::Texture"** %2, align 8
  ret %"class.egl::Texture"* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl13WindowSurfaceC2EPNS_7DisplayEPKNS_6ConfigEl(%"class.egl::WindowSurface"*, %"class.egl::Display"*, %"class.egl::Config"*, i64) unnamed_addr #4 align 2 {
  %5 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2gl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.gl::Object.base"* %6 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectC2Ev(%"class.gl::Object"* %7) #14
  %8 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 3
  store %"class.egl::Display"* %1, %"class.egl::Display"** %8, align 8
  %9 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 4
  store %"class.egl::Config"* %2, %"class.egl::Config"** %9, align 8
  %10 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 5
  %11 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 12
  %12 = bitcast %"class.egl::Image"** %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 40, i1 false) #16
  %13 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 16
  store i32 12380, i32* %13, align 8
  %14 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 17
  store i32 12380, i32* %14, align 4
  %15 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 18
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 20
  store i8* null, i8** %16, align 8
  %17 = bitcast %"class.egl::WindowSurface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl13WindowSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl13WindowSurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %17, align 8
  %18 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 1
  store i64 %3, i64* %18, align 8
  %19 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 2
  store %"class.sw::FrameBuffer"* null, %"class.sw::FrameBuffer"** %19, align 8
  %20 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 12442, i32 10000, i32 12420, i32 12436>, <4 x i32>* %20, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl13WindowSurfaceD2Ev(%"class.egl::WindowSurface"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.egl::WindowSurface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl13WindowSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl13WindowSurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 2
  %4 = load %"class.sw::FrameBuffer"*, %"class.sw::FrameBuffer"** %3, align 8
  %5 = icmp eq %"class.sw::FrameBuffer"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.sw::FrameBuffer"* %4 to void (%"class.sw::FrameBuffer"*)***
  %8 = load void (%"class.sw::FrameBuffer"*)**, void (%"class.sw::FrameBuffer"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.sw::FrameBuffer"*)*, void (%"class.sw::FrameBuffer"*)** %8, i64 1
  %10 = load void (%"class.sw::FrameBuffer"*)*, void (%"class.sw::FrameBuffer"*)** %9, align 8
  tail call void %10(%"class.sw::FrameBuffer"* nonnull %4) #14
  br label %11

11:                                               ; preds = %1, %6
  store %"class.sw::FrameBuffer"* null, %"class.sw::FrameBuffer"** %3, align 8
  %12 = bitcast %"class.egl::WindowSurface"* %0 to %"class.egl::Surface"*
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %12) #14
  %13 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.egl::WindowSurface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %14, align 8
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %12) #14
  %15 = bitcast %"class.gl::Object.base"* %13 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectD2Ev(%"class.gl::Object"* %15) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl13WindowSurface15deleteResourcesEv(%"class.egl::WindowSurface"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 2
  %3 = load %"class.sw::FrameBuffer"*, %"class.sw::FrameBuffer"** %2, align 8
  %4 = icmp eq %"class.sw::FrameBuffer"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.sw::FrameBuffer"* %3 to void (%"class.sw::FrameBuffer"*)***
  %7 = load void (%"class.sw::FrameBuffer"*)**, void (%"class.sw::FrameBuffer"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.sw::FrameBuffer"*)*, void (%"class.sw::FrameBuffer"*)** %7, i64 1
  %9 = load void (%"class.sw::FrameBuffer"*)*, void (%"class.sw::FrameBuffer"*)** %8, align 8
  tail call void %9(%"class.sw::FrameBuffer"* nonnull %3) #14
  br label %10

10:                                               ; preds = %5, %1
  store %"class.sw::FrameBuffer"* null, %"class.sw::FrameBuffer"** %2, align 8
  %11 = bitcast %"class.egl::WindowSurface"* %0 to %"class.egl::Surface"*
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %11) #15
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn8_N3egl13WindowSurfaceD1Ev(%"class.egl::WindowSurface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 -1, i32 2
  %3 = bitcast %"class.sw::FrameBuffer"** %2 to %"class.egl::WindowSurface"*
  tail call void @_ZN3egl13WindowSurfaceD2Ev(%"class.egl::WindowSurface"* %3) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl13WindowSurfaceD0Ev(%"class.egl::WindowSurface"*) unnamed_addr #4 align 2 {
  tail call void @_ZN3egl13WindowSurfaceD2Ev(%"class.egl::WindowSurface"* %0) #14
  %2 = bitcast %"class.egl::WindowSurface"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #17
  ret void
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn8_N3egl13WindowSurfaceD0Ev(%"class.egl::WindowSurface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 -1, i32 2
  %3 = bitcast %"class.sw::FrameBuffer"** %2 to %"class.egl::WindowSurface"*
  tail call void @_ZN3egl13WindowSurfaceD2Ev(%"class.egl::WindowSurface"* %3) #14
  %4 = bitcast %"class.sw::FrameBuffer"** %2 to i8*
  tail call void @_ZdlPv(i8* %4) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3egl13WindowSurface10initializeEv(%"class.egl::WindowSurface"*) unnamed_addr #4 align 2 {
  %2 = tail call zeroext i1 @_ZN3egl13WindowSurface14checkForResizeEv(%"class.egl::WindowSurface"* %0) #15
  ret i1 %2
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3egl13WindowSurface14checkForResizeEv(%"class.egl::WindowSurface"*) local_unnamed_addr #4 align 2 {
  %2 = alloca %struct.XWindowAttributes, align 8
  %3 = bitcast %struct.XWindowAttributes* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %3) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 136, i1 false)
  %4 = tail call %struct.LibX11exports* @_ZN6LibX11ptEv(%class.LibX11* nonnull @libX11) #14
  %5 = getelementptr inbounds %struct.LibX11exports, %struct.LibX11exports* %4, i64 0, i32 1
  %6 = load i32 (%struct._XDisplay*, i64, %struct.XWindowAttributes*)*, i32 (%struct._XDisplay*, i64, %struct.XWindowAttributes*)** %5, align 8
  %7 = bitcast %"class.egl::WindowSurface"* %0 to %"class.egl::Surface"*
  %8 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 3
  %9 = load %"class.egl::Display"*, %"class.egl::Display"** %8, align 8
  %10 = tail call i8* @_ZNK3egl7Display16getNativeDisplayEv(%"class.egl::Display"* %9) #14
  %11 = bitcast i8* %10 to %struct._XDisplay*
  %12 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = call i32 %6(%struct._XDisplay* %11, i64 %13, %struct.XWindowAttributes* nonnull %2) #14
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %1
  call void @_ZN3egl5errorEi(i32 12299) #14
  br label %40

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.XWindowAttributes, %struct.XWindowAttributes* %2, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.XWindowAttributes, %struct.XWindowAttributes* %2, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 8
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %19, %23
  br i1 %24, label %25, label %29

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 9
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %21, %27
  br i1 %28, label %40, label %29

29:                                               ; preds = %25, %17
  %30 = call zeroext i1 @_ZN3egl13WindowSurface5resetEii(%"class.egl::WindowSurface"* %0, i32 %19, i32 %21) #15
  %31 = call %"class.egl::Surface"* @_ZN3egl21getCurrentDrawSurfaceEv() #14
  %32 = icmp eq %"class.egl::Surface"* %31, %7
  br i1 %32, label %33, label %40

33:                                               ; preds = %29
  %34 = call %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() #14
  %35 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 0
  %36 = bitcast %"class.egl::Context"* %34 to void (%"class.egl::Context"*, %"class.gl::Surface"*)***
  %37 = load void (%"class.egl::Context"*, %"class.gl::Surface"*)**, void (%"class.egl::Context"*, %"class.gl::Surface"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.egl::Context"*, %"class.gl::Surface"*)*, void (%"class.egl::Context"*, %"class.gl::Surface"*)** %37, i64 4
  %39 = load void (%"class.egl::Context"*, %"class.gl::Surface"*)*, void (%"class.egl::Context"*, %"class.gl::Surface"*)** %38, align 8
  call void %39(%"class.egl::Context"* %34, %"class.gl::Surface"* %35) #14
  br label %40

40:                                               ; preds = %33, %29, %25, %16
  %41 = phi i1 [ false, %16 ], [ %30, %33 ], [ %30, %29 ], [ true, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %3) #16
  ret i1 %41
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl13WindowSurface4swapEv(%"class.egl::WindowSurface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 6
  %3 = load %"class.egl::Image"*, %"class.egl::Image"** %2, align 8
  %4 = icmp eq %"class.egl::Image"* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 2
  %7 = load %"class.sw::FrameBuffer"*, %"class.sw::FrameBuffer"** %6, align 8
  %8 = icmp eq %"class.sw::FrameBuffer"* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.egl::Image"* %3 to %"class.sw::Surface"*
  %11 = bitcast %"class.sw::FrameBuffer"* %7 to void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)***
  %12 = load void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)**, void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)*, void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)** %12, i64 2
  %14 = load void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)*, void (%"class.sw::FrameBuffer"*, %"class.sw::Surface"*)** %13, align 8
  tail call void %14(%"class.sw::FrameBuffer"* nonnull %7, %"class.sw::Surface"* nonnull %10) #14
  %15 = tail call zeroext i1 @_ZN3egl13WindowSurface14checkForResizeEv(%"class.egl::WindowSurface"* %0) #15
  br label %16

16:                                               ; preds = %5, %1, %9
  ret void
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i64 @_ZNK3egl13WindowSurface15getWindowHandleEv(%"class.egl::WindowSurface"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: optsize
declare %struct.LibX11exports* @_ZN6LibX11ptEv(%class.LibX11*) local_unnamed_addr #5

; Function Attrs: optsize
declare i8* @_ZNK3egl7Display16getNativeDisplayEv(%"class.egl::Display"*) local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN3egl13WindowSurface5resetEii(%"class.egl::WindowSurface"*, i32, i32) local_unnamed_addr #4 align 2 {
  %4 = bitcast %"class.egl::WindowSurface"* %0 to %"class.egl::Surface"*
  %5 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 8
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 9
  store i32 %2, i32* %6, align 4
  %7 = bitcast %"class.egl::WindowSurface"* %0 to void (%"class.egl::WindowSurface"*)***
  %8 = load void (%"class.egl::WindowSurface"*)**, void (%"class.egl::WindowSurface"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.egl::WindowSurface"*)*, void (%"class.egl::WindowSurface"*)** %8, i64 23
  %10 = load void (%"class.egl::WindowSurface"*)*, void (%"class.egl::WindowSurface"*)** %9, align 8
  tail call void %10(%"class.egl::WindowSurface"* %0) #14
  %11 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %39, label %14

14:                                               ; preds = %3
  %15 = tail call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #14
  %16 = icmp eq %class.LibGLESv2exports* %15, null
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 2
  %19 = load %"class.sw::FrameBuffer"*, %"class.sw::FrameBuffer"** %18, align 8
  br label %32

20:                                               ; preds = %14
  %21 = tail call %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2* nonnull @libGLESv2) #14
  %22 = getelementptr inbounds %class.LibGLESv2exports, %class.LibGLESv2exports* %21, i64 0, i32 199
  %23 = load %"class.sw::FrameBuffer"* (i8*, i64, i32, i32)*, %"class.sw::FrameBuffer"* (i8*, i64, i32, i32)** %22, align 8
  %24 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 0, i32 3
  %25 = load %"class.egl::Display"*, %"class.egl::Display"** %24, align 8
  %26 = tail call i8* @_ZNK3egl7Display16getNativeDisplayEv(%"class.egl::Display"* %25) #14
  %27 = load i64, i64* %11, align 8
  %28 = load i32, i32* %5, align 8
  %29 = load i32, i32* %6, align 4
  %30 = tail call %"class.sw::FrameBuffer"* %23(i8* %26, i64 %27, i32 %28, i32 %29) #14
  %31 = getelementptr inbounds %"class.egl::WindowSurface", %"class.egl::WindowSurface"* %0, i64 0, i32 2
  store %"class.sw::FrameBuffer"* %30, %"class.sw::FrameBuffer"** %31, align 8
  br label %32

32:                                               ; preds = %17, %20
  %33 = phi %"class.sw::FrameBuffer"* [ %19, %17 ], [ %30, %20 ]
  %34 = icmp eq %"class.sw::FrameBuffer"* %33, null
  br i1 %34, label %35, label %39

35:                                               ; preds = %32
  %36 = load void (%"class.egl::WindowSurface"*)**, void (%"class.egl::WindowSurface"*)*** %7, align 8
  %37 = getelementptr inbounds void (%"class.egl::WindowSurface"*)*, void (%"class.egl::WindowSurface"*)** %36, i64 23
  %38 = load void (%"class.egl::WindowSurface"*)*, void (%"class.egl::WindowSurface"*)** %37, align 8
  tail call void %38(%"class.egl::WindowSurface"* %0) #14
  tail call void @_ZN3egl5errorEi(i32 12291) #14
  br label %41

39:                                               ; preds = %32, %3
  %40 = tail call zeroext i1 @_ZN3egl7Surface10initializeEv(%"class.egl::Surface"* %4) #15
  br label %41

41:                                               ; preds = %39, %35
  %42 = phi i1 [ %40, %39 ], [ false, %35 ]
  ret i1 %42
}

; Function Attrs: optsize
declare %"class.egl::Surface"* @_ZN3egl21getCurrentDrawSurfaceEv() local_unnamed_addr #5

; Function Attrs: optsize
declare %"class.egl::Context"* @_ZN3egl17getCurrentContextEv() local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl14PBufferSurfaceC2EPNS_7DisplayEPKNS_6ConfigEiijjjjjPvi(%"class.egl::PBufferSurface"*, %"class.egl::Display"*, %"class.egl::Config"*, i32, i32, i32, i32, i32, i32, i32, i8*, i32) unnamed_addr #4 align 2 {
  %13 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2gl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"class.gl::Object.base"* %14 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectC2Ev(%"class.gl::Object"* %15) #14
  %16 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 3
  store %"class.egl::Display"* %1, %"class.egl::Display"** %16, align 8
  %17 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 4
  store %"class.egl::Config"* %2, %"class.egl::Config"** %17, align 8
  %18 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 5
  %19 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 12
  %20 = bitcast %"class.egl::Image"** %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 40, i1 false) #16
  %21 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> <i32 12442, i32 -1, i32 12420, i32 12436>, <4 x i32>* %21, align 8
  %22 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 16
  %23 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 17
  %24 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 18
  store i32 1, i32* %24, align 8
  %25 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 20
  %26 = bitcast %"class.egl::PBufferSurface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl14PBufferSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl14PBufferSurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %26, align 8
  %27 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 8
  store i32 %3, i32* %27, align 8
  %28 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 9
  store i32 %4, i32* %28, align 4
  %29 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 10
  store i32 %9, i32* %29, align 8
  store i32 %5, i32* %22, align 8
  store i32 %6, i32* %23, align 4
  %30 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 22
  store i32 %7, i32* %30, align 4
  %31 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 23
  store i32 %8, i32* %31, align 8
  store i8* %10, i8** %25, align 8
  %32 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 21
  store i32 %11, i32* %32, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl14PBufferSurfaceD2Ev(%"class.egl::PBufferSurface"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.egl::PBufferSurface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl14PBufferSurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl14PBufferSurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %2, align 8
  %3 = bitcast %"class.egl::PBufferSurface"* %0 to %"class.egl::Surface"*
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %3) #14
  %4 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 0, i32 0, i32 1
  %5 = bitcast %"class.egl::PBufferSurface"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [26 x i8*], [6 x i8*] }, { [26 x i8*], [6 x i8*] }* @_ZTVN3egl7SurfaceE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %5, align 8
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %3) #14
  %6 = bitcast %"class.gl::Object.base"* %4 to %"class.gl::Object"*
  tail call void @_ZN2gl6ObjectD2Ev(%"class.gl::Object"* %6) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl14PBufferSurface15deleteResourcesEv(%"class.egl::PBufferSurface"* nocapture) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.egl::PBufferSurface"* %0 to %"class.egl::Surface"*
  tail call void @_ZN3egl7Surface15deleteResourcesEv(%"class.egl::Surface"* %2) #15
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn8_N3egl14PBufferSurfaceD1Ev(%"class.egl::PBufferSurface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 -1, i32 0, i32 23
  %3 = bitcast i32* %2 to %"class.egl::PBufferSurface"*
  tail call void @_ZN3egl14PBufferSurfaceD2Ev(%"class.egl::PBufferSurface"* %3) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN3egl14PBufferSurfaceD0Ev(%"class.egl::PBufferSurface"*) unnamed_addr #4 align 2 {
  tail call void @_ZN3egl14PBufferSurfaceD2Ev(%"class.egl::PBufferSurface"* %0) #14
  %2 = bitcast %"class.egl::PBufferSurface"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #17
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZThn8_N3egl14PBufferSurfaceD0Ev(%"class.egl::PBufferSurface"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.egl::PBufferSurface", %"class.egl::PBufferSurface"* %0, i64 -1, i32 0, i32 23
  %3 = bitcast i32* %2 to %"class.egl::PBufferSurface"*
  tail call void @_ZN3egl14PBufferSurfaceD2Ev(%"class.egl::PBufferSurface"* %3) #14
  %4 = bitcast i32* %2 to i8*
  tail call void @_ZdlPv(i8* %4) #17
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN3egl14PBufferSurface4swapEv(%"class.egl::PBufferSurface"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden i64 @_ZNK3egl14PBufferSurface15getWindowHandleEv(%"class.egl::PBufferSurface"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i64 0
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3egl7Surface15isWindowSurfaceEv(%"class.egl::Surface"*) unnamed_addr #4 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3egl7Surface16isPBufferSurfaceEv(%"class.egl::Surface"*) unnamed_addr #4 comdat align 2 {
  ret i1 false
}

; Function Attrs: optsize
declare void @_ZN2gl6Object6addRefEv(%"class.gl::Object"*) unnamed_addr #5

; Function Attrs: optsize
declare void @_ZN2gl6Object7releaseEv(%"class.gl::Object"*) unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3egl13WindowSurface15isWindowSurfaceEv(%"class.egl::WindowSurface"*) unnamed_addr #4 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3egl14PBufferSurface16isPBufferSurfaceEv(%"class.egl::PBufferSurface"*) unnamed_addr #4 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.LibGLESv2exports* @_ZN9LibGLESv211loadExportsEv(%class.LibGLESv2*) local_unnamed_addr #4 comdat align 2 {
  %2 = alloca [3 x i8*], align 16
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %35

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %35

11:                                               ; preds = %7
  %12 = bitcast [3 x i8*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* align 16 bitcast ([3 x i8*]* @__const._ZN9LibGLESv211loadExportsEv.libGLESv2_lib to i8*), i64 24, i1 false)
  %13 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #16
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false)
  call void @_Z18getModuleDirectoryv(%"class.std::__1::basic_string"* nonnull sret %3) #14
  %16 = call i8* @_Z11loadLibraryILi3EEPvRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERAT__PKcSB_(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %3, [3 x i8*]* nonnull dereferenceable(24) %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #15
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %27, label %18

18:                                               ; preds = %11
  %19 = call i8* @dlsym(i8* nonnull %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0)) #14
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = call i8* @dlerror() #14
  br label %23

23:                                               ; preds = %18, %21
  %24 = bitcast i8* %19 to %class.LibGLESv2exports* ()*
  %25 = call %class.LibGLESv2exports* %24() #14
  %26 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 1
  store %class.LibGLESv2exports* %25, %class.LibGLESv2exports** %26, align 8
  br label %27

27:                                               ; preds = %11, %23
  store i8 1, i8* %4, align 8
  %28 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %33) #17
  br label %34

34:                                               ; preds = %27, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #16
  br label %35

35:                                               ; preds = %7, %1, %34
  %36 = getelementptr inbounds %class.LibGLESv2, %class.LibGLESv2* %0, i64 0, i32 1
  %37 = load %class.LibGLESv2exports*, %class.LibGLESv2exports** %36, align 8
  ret %class.LibGLESv2exports* %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

; Function Attrs: optsize
declare void @_Z18getModuleDirectoryv(%"class.std::__1::basic_string"* sret) local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_Z11loadLibraryILi3EEPvRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERAT__PKcSB_(%"class.std::__1::basic_string"* dereferenceable(24), [3 x i8*]* dereferenceable(24), i8*) local_unnamed_addr #4 comdat {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds [3 x i8*], [3 x i8*]* %1, i64 0, i64 0
  %7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %1, i64 0, i64 3
  %8 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = icmp eq i8* %2, null
  br label %29

20:                                               ; preds = %92
  %21 = icmp eq i8** %94, %7
  br i1 %21, label %22, label %29

22:                                               ; preds = %20
  %23 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %27 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  br label %97

29:                                               ; preds = %3, %20
  %30 = phi i8* [ undef, %3 ], [ %87, %20 ]
  %31 = phi i8** [ %6, %3 ], [ %94, %20 ]
  %32 = load i8*, i8** %31, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #16, !alias.scope !3
  %33 = load i8, i8* %13, align 1, !noalias !3
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %29
  %36 = load i64, i64* %15, align 8, !noalias !3
  %37 = call i64 @strlen(i8* %32) #14, !noalias !3
  %38 = load i8*, i8** %16, align 8, !noalias !3
  br label %42

39:                                               ; preds = %29
  %40 = zext i8 %33 to i64
  %41 = call i64 @strlen(i8* %32) #14, !noalias !3
  br label %42

42:                                               ; preds = %39, %35
  %43 = phi i64 [ %37, %35 ], [ %41, %39 ]
  %44 = phi i64 [ %36, %35 ], [ %40, %39 ]
  %45 = phi i8* [ %38, %35 ], [ %14, %39 ]
  %46 = add i64 %44, %43
  %47 = icmp ugt i64 %46, -17
  br i1 %47, label %48, label %50

48:                                               ; preds = %42
  %49 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %49) #18
  unreachable

50:                                               ; preds = %42
  %51 = icmp ult i64 %46, 23
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = trunc i64 %44 to i8
  store i8 %53, i8* %18, align 1, !alias.scope !3
  br label %59

54:                                               ; preds = %50
  %55 = add nuw i64 %46, 16
  %56 = and i64 %55, -16
  %57 = call i8* @_Znwm(i64 %56) #17
  store i8* %57, i8** %9, align 8, !alias.scope !3
  %58 = or i64 %56, -9223372036854775808
  store i64 %58, i64* %11, align 8, !alias.scope !3
  store i64 %44, i64* %10, align 8, !alias.scope !3
  br label %59

59:                                               ; preds = %54, %52
  %60 = phi i8* [ %8, %52 ], [ %57, %54 ]
  %61 = icmp eq i64 %44, 0
  br i1 %61, label %63, label %62

62:                                               ; preds = %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %45, i64 %44, i1 false) #16
  br label %63

63:                                               ; preds = %59, %62
  %64 = getelementptr inbounds i8, i8* %60, i64 %44
  store i8 0, i8* %64, align 1
  %65 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %32, i64 %43) #14
  %66 = load i8, i8* %18, align 1
  %67 = icmp slt i8 %66, 0
  %68 = load i8*, i8** %9, align 8
  %69 = select i1 %67, i8* %68, i8* %8
  %70 = call i8* @dlopen(i8* %69, i32 5) #14
  %71 = icmp eq i8* %70, null
  br i1 %71, label %85, label %72

72:                                               ; preds = %63
  %73 = call i8* @dlopen(i8* %69, i32 1) #14
  %74 = icmp eq i8* %73, null
  %75 = or i1 %74, %19
  %76 = xor i1 %74, true
  %77 = zext i1 %76 to i32
  %78 = select i1 %74, i8* %30, i8* %73
  br i1 %75, label %85, label %79

79:                                               ; preds = %72
  %80 = call i8* @dlsym(i8* nonnull %73, i8* nonnull %2) #14
  %81 = icmp eq i8* %80, null
  br i1 %81, label %82, label %85

82:                                               ; preds = %79
  %83 = call i8* @dlerror() #14
  %84 = call i32 @dlclose(i8* nonnull %73) #14
  br label %85

85:                                               ; preds = %72, %63, %79, %82
  %86 = phi i32 [ %77, %72 ], [ 0, %82 ], [ 1, %79 ], [ 0, %63 ]
  %87 = phi i8* [ %78, %72 ], [ %30, %82 ], [ %73, %79 ], [ %30, %63 ]
  %88 = load i8, i8* %18, align 1
  %89 = icmp slt i8 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %85
  %91 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %91) #17
  br label %92

92:                                               ; preds = %85, %90
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #16
  %93 = icmp eq i32 %86, 0
  %94 = getelementptr inbounds i8*, i8** %31, i64 1
  br i1 %93, label %20, label %160

95:                                               ; preds = %157
  %96 = icmp eq i8** %159, %7
  br i1 %96, label %160, label %97

97:                                               ; preds = %22, %95
  %98 = phi i8* [ %87, %22 ], [ %152, %95 ]
  %99 = phi i8** [ %6, %22 ], [ %159, %95 ]
  %100 = load i8*, i8** %99, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 0, i64 24, i1 false) #16, !alias.scope !6
  %101 = load i8, i8* %13, align 1, !noalias !6
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %107

103:                                              ; preds = %97
  %104 = load i64, i64* %15, align 8, !noalias !6
  %105 = call i64 @strlen(i8* %100) #14, !noalias !6
  %106 = load i8*, i8** %16, align 8, !noalias !6
  br label %110

107:                                              ; preds = %97
  %108 = zext i8 %101 to i64
  %109 = call i64 @strlen(i8* %100) #14, !noalias !6
  br label %110

110:                                              ; preds = %107, %103
  %111 = phi i64 [ %105, %103 ], [ %109, %107 ]
  %112 = phi i64 [ %104, %103 ], [ %108, %107 ]
  %113 = phi i8* [ %106, %103 ], [ %14, %107 ]
  %114 = add i64 %112, %111
  %115 = icmp ugt i64 %114, -17
  br i1 %115, label %116, label %118

116:                                              ; preds = %110
  %117 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %117) #18
  unreachable

118:                                              ; preds = %110
  %119 = icmp ult i64 %114, 23
  br i1 %119, label %120, label %122

120:                                              ; preds = %118
  %121 = trunc i64 %112 to i8
  store i8 %121, i8* %28, align 1, !alias.scope !6
  br label %127

122:                                              ; preds = %118
  %123 = add nuw i64 %114, 16
  %124 = and i64 %123, -16
  %125 = call i8* @_Znwm(i64 %124) #17
  store i8* %125, i8** %24, align 8, !alias.scope !6
  %126 = or i64 %124, -9223372036854775808
  store i64 %126, i64* %26, align 8, !alias.scope !6
  store i64 %112, i64* %25, align 8, !alias.scope !6
  br label %127

127:                                              ; preds = %122, %120
  %128 = phi i8* [ %23, %120 ], [ %125, %122 ]
  %129 = icmp eq i64 %112, 0
  br i1 %129, label %131, label %130

130:                                              ; preds = %127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %128, i8* align 1 %113, i64 %112, i1 false) #16
  br label %131

131:                                              ; preds = %127, %130
  %132 = getelementptr inbounds i8, i8* %128, i64 %112
  store i8 0, i8* %132, align 1
  %133 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %5, i8* %100, i64 %111) #14
  %134 = load i8, i8* %28, align 1
  %135 = icmp slt i8 %134, 0
  %136 = load i8*, i8** %24, align 8
  %137 = select i1 %135, i8* %136, i8* %23
  %138 = call i8* @dlopen(i8* %137, i32 1) #14
  %139 = icmp eq i8* %138, null
  %140 = or i1 %139, %19
  %141 = xor i1 %139, true
  %142 = zext i1 %141 to i32
  %143 = select i1 %139, i8* %98, i8* %138
  br i1 %140, label %150, label %144

144:                                              ; preds = %131
  %145 = call i8* @dlsym(i8* nonnull %138, i8* nonnull %2) #14
  %146 = icmp eq i8* %145, null
  br i1 %146, label %147, label %150

147:                                              ; preds = %144
  %148 = call i8* @dlerror() #14
  %149 = call i32 @dlclose(i8* nonnull %138) #14
  br label %150

150:                                              ; preds = %131, %144, %147
  %151 = phi i32 [ %142, %131 ], [ 0, %147 ], [ 1, %144 ]
  %152 = phi i8* [ %143, %131 ], [ %98, %147 ], [ %138, %144 ]
  %153 = load i8, i8* %28, align 1
  %154 = icmp slt i8 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %150
  %156 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %156) #17
  br label %157

157:                                              ; preds = %150, %155
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #16
  %158 = icmp eq i32 %151, 0
  %159 = getelementptr inbounds i8*, i8** %99, i64 1
  br i1 %158, label %95, label %160

160:                                              ; preds = %92, %95, %157
  %161 = phi i8* [ null, %95 ], [ %152, %157 ], [ %87, %92 ]
  ret i8* %161
}

; Function Attrs: optsize
declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: nounwind optsize
declare i8* @dlopen(i8*, i32) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i32 @dlclose(i8*) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i8* @dlsym(i8*, i8*) local_unnamed_addr #6

; Function Attrs: nounwind optsize
declare i8* @dlerror() local_unnamed_addr #6

; Function Attrs: optsize
declare void @_ZN3egl5errorEi(i32) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn nounwind }
attributes #14 = { nounwind optsize }
attributes #15 = { optsize }
attributes #16 = { nounwind }
attributes #17 = { builtin nounwind optsize }
attributes #18 = { noreturn nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
