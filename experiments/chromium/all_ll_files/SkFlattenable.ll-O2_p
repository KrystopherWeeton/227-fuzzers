; ModuleID = '../../third_party/skia/src/core/SkFlattenable.cpp'
source_filename = "../../third_party/skia/src/core/SkFlattenable.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.(anonymous namespace)::Entry" = type { i8*, void (%class.sk_sp.10*, %class.SkReadBuffer*)* }
%class.sk_sp.10 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair.34" }
%"struct.std::__1::pair.34" = type { i32, void (%class.sk_sp.10*, %class.SkReadBuffer*)* }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp*, i8*, i64, i8*)*, i8* }
%class.SkNamedFactorySet = type { %class.SkRefCnt.base, i32, %class.SkFactorySet, %class.SkTDArray.1 }
%class.SkFactorySet = type { %class.SkTPtrSet }
%class.SkTPtrSet = type { %class.SkPtrSet }
%class.SkPtrSet = type { %class.SkRefCnt.base, %class.SkTDArray }
%class.SkTDArray = type { %"struct.SkPtrSet::Pair"*, i32, i32 }
%"struct.SkPtrSet::Pair" = type { i8*, i32 }
%class.SkTDArray.1 = type { i8**, i32, i32 }
%class.SkRefCntSet = type { %class.SkTPtrSet.11 }
%class.SkTPtrSet.11 = type { %class.SkPtrSet }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.sk_sp.16 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.SkSerialProcs = type { void (%class.sk_sp.16*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.16*, %class.SkTypeface*, i8*)*, i8* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.12", [7 x i8] }>
%"struct.std::__1::atomic.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl.14" }
%"struct.std::__1::__cxx_atomic_impl.14" = type { %"struct.std::__1::__cxx_atomic_base_impl.15" }
%"struct.std::__1::__cxx_atomic_base_impl.15" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.17, i32, i32 }
%class.sk_sp.17 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.18, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.18 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkBinaryWriteBuffer = type { %class.SkWriteBuffer, %class.sk_sp.19, %class.sk_sp.20, %class.SkWriter32, %class.SkTHashMap.25 }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%class.sk_sp.19 = type { %class.SkFactorySet* }
%class.sk_sp.20 = type { %class.SkRefCntSet* }
%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.21" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i8* }
%class.SkTHashMap.25 = type { %class.SkTHashTable.26 }
%class.SkTHashTable.26 = type { i32, i32, %class.SkAutoTArray.27 }
%class.SkAutoTArray.27 = type { %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.SkTHashTable<SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair, const char *, SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair, const char *, SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair>::Slot" = type opaque

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN17SkNamedFactorySetD2Ev = comdat any

$_ZN17SkNamedFactorySetD0Ev = comdat any

$_ZN8SkPtrSetD2Ev = comdat any

$_ZN12SkFactorySetD0Ev = comdat any

$_ZN8SkPtrSet6incPtrEPv = comdat any

$_ZN8SkPtrSet6decPtrEPv = comdat any

$_ZN8SkPtrSetD0Ev = comdat any

$_ZTV17SkNamedFactorySet = comdat any

$_ZTV12SkFactorySet = comdat any

$_ZTV8SkPtrSet = comdat any

@_ZTV17SkNamedFactorySet = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkNamedFactorySet*)* @_ZN17SkNamedFactorySetD2Ev to i8*), i8* bitcast (void (%class.SkNamedFactorySet*)* @_ZN17SkNamedFactorySetD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*)] }, comdat, align 8
@_ZTV11SkRefCntSet = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntSet*)* @_ZN11SkRefCntSetD2Ev to i8*), i8* bitcast (void (%class.SkRefCntSet*)* @_ZN11SkRefCntSetD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.SkRefCntSet*, i8*)* @_ZN11SkRefCntSet6incPtrEPv to i8*), i8* bitcast (void (%class.SkRefCntSet*, i8*)* @_ZN11SkRefCntSet6decPtrEPv to i8*)] }, align 8
@_ZN12_GLOBAL__N_18gEntriesE = internal global [128 x %"struct.(anonymous namespace)::Entry"] zeroinitializer, align 16
@_ZN12_GLOBAL__N_16gCountE = internal unnamed_addr global i32 0, align 4
@_ZTV12SkFactorySet = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkPtrSet*)* @_ZN8SkPtrSetD2Ev to i8*), i8* bitcast (void (%class.SkFactorySet*)* @_ZN12SkFactorySetD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.SkPtrSet*, i8*)* @_ZN8SkPtrSet6incPtrEPv to i8*), i8* bitcast (void (%class.SkPtrSet*, i8*)* @_ZN8SkPtrSet6decPtrEPv to i8*)] }, comdat, align 8
@_ZTV8SkPtrSet = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkPtrSet*)* @_ZN8SkPtrSetD2Ev to i8*), i8* bitcast (void (%class.SkPtrSet*)* @_ZN8SkPtrSetD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.SkPtrSet*, i8*)* @_ZN8SkPtrSet6incPtrEPv to i8*), i8* bitcast (void (%class.SkPtrSet*, i8*)* @_ZN8SkPtrSet6decPtrEPv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

@_ZN17SkNamedFactorySetC1Ev = hidden unnamed_addr alias void (%class.SkNamedFactorySet*), void (%class.SkNamedFactorySet*)* @_ZN17SkNamedFactorySetC2Ev
@_ZN11SkRefCntSetD1Ev = hidden unnamed_addr alias void (%class.SkRefCntSet*), void (%class.SkRefCntSet*)* @_ZN11SkRefCntSetD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17SkNamedFactorySetC2Ev(%class.SkNamedFactorySet* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV17SkNamedFactorySet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 1
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %7 = bitcast %class.SkTDArray* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #9
  %8 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV12SkFactorySet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3
  %10 = bitcast %class.SkTDArray.1* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN17SkNamedFactorySet4findEPF5sk_spI13SkFlattenableER12SkReadBufferE(%class.SkNamedFactorySet*, void (%class.sk_sp.10*, %class.SkReadBuffer*)*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0
  %4 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)* %1 to i8*
  %5 = tail call i32 @_ZNK8SkPtrSet4findEPv(%class.SkPtrSet* %3, i8* %4) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %54

7:                                                ; preds = %2
  tail call void @_ZN13SkFlattenable28RegisterFlattenablesIfNeededEv() #9
  %8 = load i32, i32* @_ZN12_GLOBAL__N_16gCountE, align 4
  %9 = sext i32 %8 to i64
  br label %10

10:                                               ; preds = %14, %7
  %11 = phi i64 [ %12, %14 ], [ %9, %7 ]
  %12 = add nsw i64 %11, -1
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %54

14:                                               ; preds = %10
  %15 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %12, i32 1
  %16 = load void (%class.sk_sp.10*, %class.SkReadBuffer*)*, void (%class.sk_sp.10*, %class.SkReadBuffer*)** %15, align 8
  %17 = icmp eq void (%class.sk_sp.10*, %class.SkReadBuffer*)* %16, %1
  br i1 %17, label %18, label %10

18:                                               ; preds = %14
  %19 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %12, i32 0
  %20 = load i8*, i8** %19, align 16
  %21 = icmp eq i8* %20, null
  br i1 %21, label %54, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3
  %24 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, 1
  %27 = icmp sgt i32 %26, -1
  br i1 %27, label %29, label %28

28:                                               ; preds = %22
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #10
  unreachable

29:                                               ; preds = %22
  %30 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = icmp slt i32 %31, %26
  br i1 %32, label %36, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %23, i64 0, i32 0
  %35 = load i8**, i8*** %34, align 8
  br label %49

36:                                               ; preds = %29
  %37 = add i32 %25, 5
  %38 = lshr i32 %37, 2
  %39 = add nuw i32 %38, %37
  %40 = icmp sgt i32 %39, -1
  br i1 %40, label %42, label %41

41:                                               ; preds = %36
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #10
  unreachable

42:                                               ; preds = %36
  store i32 %39, i32* %30, align 8
  %43 = bitcast %class.SkTDArray.1* %23 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = sext i32 %39 to i64
  %46 = shl nsw i64 %45, 3
  %47 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %44, i64 %46) #9
  store i8* %47, i8** %43, align 8
  %48 = bitcast i8* %47 to i8**
  br label %49

49:                                               ; preds = %33, %42
  %50 = phi i8** [ %35, %33 ], [ %48, %42 ]
  store i32 %26, i32* %24, align 4
  %51 = sext i32 %25 to i64
  %52 = getelementptr inbounds i8*, i8** %50, i64 %51
  store i8* %20, i8** %52, align 8
  %53 = tail call i32 @_ZN8SkPtrSet3addEPv(%class.SkPtrSet* %3, i8* %4) #9
  br label %54

54:                                               ; preds = %10, %49, %18, %2
  %55 = phi i32 [ %5, %2 ], [ %53, %49 ], [ 0, %18 ], [ 0, %10 ]
  ret i32 %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN13SkFlattenable13FactoryToNameEPF5sk_spIS_ER12SkReadBufferE(void (%class.sk_sp.10*, %class.SkReadBuffer*)* readnone) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13SkFlattenable28RegisterFlattenablesIfNeededEv() #9
  %2 = load i32, i32* @_ZN12_GLOBAL__N_16gCountE, align 4
  %3 = sext i32 %2 to i64
  br label %4

4:                                                ; preds = %8, %1
  %5 = phi i64 [ %6, %8 ], [ %3, %1 ]
  %6 = add nsw i64 %5, -1
  %7 = icmp sgt i64 %5, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %4
  %9 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %6, i32 1
  %10 = load void (%class.sk_sp.10*, %class.SkReadBuffer*)*, void (%class.sk_sp.10*, %class.SkReadBuffer*)** %9, align 8
  %11 = icmp eq void (%class.sk_sp.10*, %class.SkReadBuffer*)* %10, %0
  br i1 %11, label %12, label %4

12:                                               ; preds = %8
  %13 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %6, i32 0
  %14 = load i8*, i8** %13, align 16
  br label %15

15:                                               ; preds = %4, %12
  %16 = phi i8* [ %14, %12 ], [ null, %4 ]
  ret i8* %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZN17SkNamedFactorySet23getNextAddedFactoryNameEv(%class.SkNamedFactorySet* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %3, %5
  br i1 %6, label %7, label %14

7:                                                ; preds = %1
  %8 = add nsw i32 %3, 1
  store i32 %8, i32* %2, align 4
  %9 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3, i32 0
  %10 = load i8**, i8*** %9, align 8
  %11 = sext i32 %3 to i64
  %12 = getelementptr inbounds i8*, i8** %10, i64 %11
  %13 = load i8*, i8** %12, align 8
  br label %14

14:                                               ; preds = %1, %7
  %15 = phi i8* [ %13, %7 ], [ null, %1 ]
  ret i8* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkRefCntSetD2Ev(%class.SkRefCntSet*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkRefCntSet, %class.SkRefCntSet* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV11SkRefCntSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRefCntSet, %class.SkRefCntSet* %0, i64 0, i32 0, i32 0
  tail call void @_ZN8SkPtrSet5resetEv(%class.SkPtrSet* %3) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %class.SkRefCntSet, %class.SkRefCntSet* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %class.SkTDArray* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @_Z7sk_freePv(i8* %6) #9
  ret void
}

declare void @_ZN8SkPtrSet5resetEv(%class.SkPtrSet*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkRefCntSetD0Ev(%class.SkRefCntSet*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkRefCntSet, %class.SkRefCntSet* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV11SkRefCntSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRefCntSet, %class.SkRefCntSet* %0, i64 0, i32 0, i32 0
  tail call void @_ZN8SkPtrSet5resetEv(%class.SkPtrSet* %3) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %class.SkRefCntSet, %class.SkRefCntSet* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %class.SkTDArray* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @_Z7sk_freePv(i8* %6) #9
  %7 = bitcast %class.SkRefCntSet* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11SkRefCntSet6incPtrEPv(%class.SkRefCntSet* nocapture readnone, i8* nocapture) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to i32*
  %5 = atomicrmw add i32* %4, i32 1 monotonic
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkRefCntSet6decPtrEPv(%class.SkRefCntSet* nocapture readnone, i8*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to i32*
  %5 = atomicrmw add i32* %4, i32 -1 acq_rel
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = bitcast i8* %1 to %class.SkRefCntBase*
  %9 = bitcast i8* %1 to void (%class.SkRefCntBase*)***
  %10 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %9, align 8
  %11 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %10, i64 2
  %12 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %11, align 8
  tail call void %12(%class.SkRefCntBase* %8) #9
  br label %13

13:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkFlattenable8FinalizeEv() local_unnamed_addr #0 align 2 {
  %1 = load i32, i32* @_ZN12_GLOBAL__N_16gCountE, align 4
  %2 = sext i32 %1 to i64
  %3 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %2
  tail call fastcc void @_ZNSt3__16__sortIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEvT0_S6_T_(%"struct.(anonymous namespace)::Entry"* getelementptr inbounds ([128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 0), %"struct.(anonymous namespace)::Entry"* %3) #9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.10*, %class.SkReadBuffer*)*) local_unnamed_addr #2 align 2 {
  %3 = load i32, i32* @_ZN12_GLOBAL__N_16gCountE, align 4
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %4, i32 0
  store i8* %0, i8** %5, align 16
  %6 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %4, i32 1
  store void (%class.sk_sp.10*, %class.SkReadBuffer*)* %1, void (%class.sk_sp.10*, %class.SkReadBuffer*)** %6, align 8
  %7 = add nsw i32 %3, 1
  store i32 %7, i32* @_ZN12_GLOBAL__N_16gCountE, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void (%class.sk_sp.10*, %class.SkReadBuffer*)* @_ZN13SkFlattenable13NameToFactoryEPKc(i8*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13SkFlattenable28RegisterFlattenablesIfNeededEv() #9
  %2 = load i32, i32* @_ZN12_GLOBAL__N_16gCountE, align 4
  %3 = sext i32 %2 to i64
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %80, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds [128 x %"struct.(anonymous namespace)::Entry"], [128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE, i64 0, i64 %3
  br label %7

7:                                                ; preds = %75, %5
  %8 = phi %"struct.(anonymous namespace)::Entry"* [ %6, %5 ], [ %78, %75 ]
  %9 = phi i64 [ %3, %5 ], [ %77, %75 ]
  %10 = phi i64 [ ptrtoint ([128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE to i64), %5 ], [ %76, %75 ]
  %11 = lshr i64 %9, 1
  %12 = inttoptr i64 %10 to %"struct.(anonymous namespace)::Entry"*
  %13 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %12, i64 %11
  %14 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %13, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = tail call i32 @strcmp(i8* %15, i8* %0) #12
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %13, i64 1
  %20 = ptrtoint %"struct.(anonymous namespace)::Entry"* %19 to i64
  %21 = xor i64 %11, -1
  %22 = add i64 %9, %21
  br label %75

23:                                               ; preds = %7
  %24 = tail call i32 @strcmp(i8* %0, i8* %15) #12
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %75, label %26

26:                                               ; preds = %23
  %27 = inttoptr i64 %10 to %"struct.(anonymous namespace)::Entry"*
  %28 = ptrtoint %"struct.(anonymous namespace)::Entry"* %13 to i64
  %29 = sub i64 %28, %10
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %48, label %31

31:                                               ; preds = %26
  %32 = ashr exact i64 %29, 4
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ %32, %31 ], [ %46, %33 ]
  %35 = phi %"struct.(anonymous namespace)::Entry"* [ %27, %31 ], [ %45, %33 ]
  %36 = lshr i64 %34, 1
  %37 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %35, i64 %36
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %37, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = tail call i32 @strcmp(i8* %39, i8* %0) #12
  %41 = icmp slt i32 %40, 0
  %42 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %37, i64 1
  %43 = xor i64 %36, -1
  %44 = add i64 %34, %43
  %45 = select i1 %41, %"struct.(anonymous namespace)::Entry"* %42, %"struct.(anonymous namespace)::Entry"* %35
  %46 = select i1 %41, i64 %44, i64 %36
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %33

48:                                               ; preds = %33, %26
  %49 = phi %"struct.(anonymous namespace)::Entry"* [ %27, %26 ], [ %45, %33 ]
  %50 = ptrtoint %"struct.(anonymous namespace)::Entry"* %49 to i64
  %51 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %13, i64 1
  %52 = ptrtoint %"struct.(anonymous namespace)::Entry"* %8 to i64
  %53 = ptrtoint %"struct.(anonymous namespace)::Entry"* %51 to i64
  %54 = sub i64 %52, %53
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %80, label %56

56:                                               ; preds = %48
  %57 = ashr exact i64 %54, 4
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ %57, %56 ], [ %71, %58 ]
  %60 = phi %"struct.(anonymous namespace)::Entry"* [ %51, %56 ], [ %70, %58 ]
  %61 = lshr i64 %59, 1
  %62 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %60, i64 %61
  %63 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %62, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = tail call i32 @strcmp(i8* %0, i8* %64) #12
  %66 = icmp slt i32 %65, 0
  %67 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %62, i64 1
  %68 = xor i64 %61, -1
  %69 = add i64 %59, %68
  %70 = select i1 %66, %"struct.(anonymous namespace)::Entry"* %60, %"struct.(anonymous namespace)::Entry"* %67
  %71 = select i1 %66, i64 %61, i64 %69
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %58

73:                                               ; preds = %58
  %74 = ptrtoint %"struct.(anonymous namespace)::Entry"* %70 to i64
  br label %80

75:                                               ; preds = %23, %18
  %76 = phi i64 [ %20, %18 ], [ %10, %23 ]
  %77 = phi i64 [ %22, %18 ], [ %11, %23 ]
  %78 = phi %"struct.(anonymous namespace)::Entry"* [ %8, %18 ], [ %13, %23 ]
  %79 = icmp eq i64 %77, 0
  br i1 %79, label %80, label %7

80:                                               ; preds = %75, %1, %48, %73
  %81 = phi i64 [ ptrtoint ([128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE to i64), %1 ], [ %50, %73 ], [ %50, %48 ], [ %76, %75 ]
  %82 = phi i64 [ ptrtoint ([128 x %"struct.(anonymous namespace)::Entry"]* @_ZN12_GLOBAL__N_18gEntriesE to i64), %1 ], [ %74, %73 ], [ %53, %48 ], [ %76, %75 ]
  %83 = inttoptr i64 %81 to %"struct.(anonymous namespace)::Entry"*
  %84 = inttoptr i64 %82 to %"struct.(anonymous namespace)::Entry"*
  %85 = icmp eq %"struct.(anonymous namespace)::Entry"* %83, %84
  br i1 %85, label %89, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %83, i64 0, i32 1
  %88 = load void (%class.sk_sp.10*, %class.SkReadBuffer*)*, void (%class.sk_sp.10*, %class.SkReadBuffer*)** %87, align 8
  br label %89

89:                                               ; preds = %80, %86
  %90 = phi void (%class.sk_sp.10*, %class.SkReadBuffer*)* [ %88, %86 ], [ null, %80 ]
  ret void (%class.sk_sp.10*, %class.SkReadBuffer*)* %90
}

declare void @_ZN13SkFlattenable28RegisterFlattenablesIfNeededEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK13SkFlattenable9serializeEPK13SkSerialProcs(%class.sk_sp.16* noalias sret, %class.SkFlattenable*, %struct.SkSerialProcs* readonly) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkBinaryWriteBuffer, align 8
  %5 = bitcast %class.SkBinaryWriteBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 128, i1 false)
  call void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer* nonnull %4) #9
  %6 = icmp eq %struct.SkSerialProcs* %2, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 0, i32 1
  %9 = bitcast %struct.SkSerialProcs* %8 to i8*
  %10 = bitcast %struct.SkSerialProcs* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* nonnull align 8 %10, i64 48, i1 false) #9
  br label %11

11:                                               ; preds = %3, %7
  call void @_ZN19SkBinaryWriteBuffer16writeFlattenableEPK13SkFlattenable(%class.SkBinaryWriteBuffer* nonnull %4, %class.SkFlattenable* %1) #9
  %12 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 3, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %0, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %14, align 8
  call void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp.16* sret %0, i64 %13) #9
  %15 = load %class.SkData*, %class.SkData** %14, align 8
  %16 = getelementptr inbounds %class.SkData, %class.SkData* %15, i64 0, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 3, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = load i64, i64* %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %19, i64 %20, i1 false) #9
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer*) unnamed_addr #3

declare void @_ZN19SkBinaryWriteBuffer16writeFlattenableEPK13SkFlattenable(%class.SkBinaryWriteBuffer*, %class.SkFlattenable*) unnamed_addr #3

declare void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp.16* sret, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK13SkFlattenable9serializeEPvmPK13SkSerialProcs(%class.SkFlattenable*, i8*, i64, %struct.SkSerialProcs* readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkBinaryWriteBuffer, align 8
  %6 = bitcast %class.SkBinaryWriteBuffer* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 128, i1 false)
  call void @_ZN19SkBinaryWriteBufferC1EPvm(%class.SkBinaryWriteBuffer* nonnull %5, i8* %1, i64 %2) #9
  %7 = icmp eq %struct.SkSerialProcs* %3, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %5, i64 0, i32 0, i32 1
  %10 = bitcast %struct.SkSerialProcs* %9 to i8*
  %11 = bitcast %struct.SkSerialProcs* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* nonnull align 8 %11, i64 48, i1 false) #9
  br label %12

12:                                               ; preds = %4, %8
  call void @_ZN19SkBinaryWriteBuffer16writeFlattenableEPK13SkFlattenable(%class.SkBinaryWriteBuffer* nonnull %5, %class.SkFlattenable* %0) #9
  %13 = call zeroext i1 @_ZNK19SkBinaryWriteBuffer19usingInitialStorageEv(%class.SkBinaryWriteBuffer* nonnull %5) #9
  %14 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %5, i64 0, i32 3, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = select i1 %13, i64 %15, i64 0
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #9
  ret i64 %16
}

declare void @_ZN19SkBinaryWriteBufferC1EPvm(%class.SkBinaryWriteBuffer*, i8*, i64) unnamed_addr #3

declare zeroext i1 @_ZNK19SkBinaryWriteBuffer19usingInitialStorageEv(%class.SkBinaryWriteBuffer*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkFlattenable11DeserializeENS_4TypeEPKvmPK15SkDeserialProcs(%class.sk_sp.10* noalias nocapture sret, i32, i8*, i64, %struct.SkDeserialProcs*) local_unnamed_addr #0 align 2 {
  %6 = alloca %class.SkReadBuffer, align 8
  %7 = bitcast %class.SkReadBuffer* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %7) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 136, i1 false)
  %8 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %6, i64 0, i32 6
  store %class.sk_sp* null, %class.sk_sp** %8, align 8
  %9 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %6, i64 0, i32 7
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %6, i64 0, i32 9
  %11 = bitcast {}*** %10 to void (%class.sk_sp.10*, %class.SkReadBuffer*)***
  store void (%class.sk_sp.10*, %class.SkReadBuffer*)** null, void (%class.sk_sp.10*, %class.SkReadBuffer*)*** %11, align 8
  %12 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %6, i64 0, i32 10
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %6, i64 0, i32 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 44, i1 false) #9
  %14 = bitcast %struct.SkDeserialProcs* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 49, i1 false) #9
  call void @_ZN12SkReadBuffer9setMemoryEPKvm(%class.SkReadBuffer* nonnull %6, i8* %2, i64 %3) #9
  %15 = icmp eq %struct.SkDeserialProcs* %4, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %5
  call void @_ZN12SkReadBuffer16setDeserialProcsERK15SkDeserialProcs(%class.SkReadBuffer* nonnull %6, %struct.SkDeserialProcs* nonnull dereferenceable(48) %4) #9
  br label %17

17:                                               ; preds = %5, %16
  %18 = call %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer* nonnull %6, i32 %1) #9
  %19 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %0, i64 0, i32 0
  store %class.SkFlattenable* %18, %class.SkFlattenable** %19, align 8
  %20 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %6, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %21 = load %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"** %20, align 8
  store %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* null, %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"** %20, align 8
  %22 = icmp eq %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %17
  %24 = bitcast %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* %21 to i8*
  call void @_ZdaPv(i8* %24) #11
  br label %25

25:                                               ; preds = %17, %23
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %7) #9
  ret void
}

declare void @_ZN12SkReadBuffer16setDeserialProcsERK15SkDeserialProcs(%class.SkReadBuffer*, %struct.SkDeserialProcs* dereferenceable(48)) local_unnamed_addr #3

declare %class.SkFlattenable* @_ZN12SkReadBuffer15readFlattenableEN13SkFlattenable4TypeE(%class.SkReadBuffer*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #9
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17SkNamedFactorySetD2Ev(%class.SkNamedFactorySet*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV17SkNamedFactorySet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3
  %4 = bitcast %class.SkTDArray.1* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #9
  %6 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = bitcast %class.SkTDArray* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @_Z7sk_freePv(i8* %9) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17SkNamedFactorySetD0Ev(%class.SkNamedFactorySet*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV17SkNamedFactorySet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 3
  %4 = bitcast %class.SkTDArray.1* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #9
  %6 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkNamedFactorySet, %class.SkNamedFactorySet* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = bitcast %class.SkTDArray* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @_Z7sk_freePv(i8* %9) #9
  %10 = bitcast %class.SkNamedFactorySet* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkPtrSetD2Ev(%class.SkPtrSet*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkPtrSet, %class.SkPtrSet* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkPtrSet, %class.SkPtrSet* %0, i64 0, i32 1
  %4 = bitcast %class.SkTDArray* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkFactorySetD0Ev(%class.SkFactorySet*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkFactorySet, %class.SkFactorySet* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkFactorySet, %class.SkFactorySet* %0, i64 0, i32 0, i32 0, i32 1
  %4 = bitcast %class.SkTDArray* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #9
  %6 = bitcast %class.SkFactorySet* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkPtrSet6incPtrEPv(%class.SkPtrSet*, i8*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkPtrSet6decPtrEPv(%class.SkPtrSet*, i8*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkPtrSetD0Ev(%class.SkPtrSet*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %class.SkPtrSet, %class.SkPtrSet* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV8SkPtrSet, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkPtrSet, %class.SkPtrSet* %0, i64 0, i32 1
  %4 = bitcast %class.SkTDArray* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #9
  %6 = bitcast %class.SkPtrSet* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #11
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN12SkReadBuffer9setMemoryEPKvm(%class.SkReadBuffer*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

declare i32 @_ZNK8SkPtrSet4findEPv(%class.SkPtrSet*, i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #7

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #3

declare i32 @_ZN8SkPtrSet3addEPv(%class.SkPtrSet*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16__sortIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEvT0_S6_T_(%"struct.(anonymous namespace)::Entry"*, %"struct.(anonymous namespace)::Entry"*) unnamed_addr #0 {
  br label %3

3:                                                ; preds = %265, %2
  %4 = phi %"struct.(anonymous namespace)::Entry"* [ %1, %2 ], [ %237, %265 ]
  %5 = phi %"struct.(anonymous namespace)::Entry"* [ %0, %2 ], [ %17, %265 ]
  %6 = ptrtoint %"struct.(anonymous namespace)::Entry"* %4 to i64
  %7 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %7, i64 0, i32 0
  %9 = bitcast %"struct.(anonymous namespace)::Entry"* %7 to i8*
  %10 = bitcast %"struct.(anonymous namespace)::Entry"* %7 to i64*
  %11 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1, i32 1
  %12 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %11 to i64*
  %13 = ptrtoint %"struct.(anonymous namespace)::Entry"* %4 to i64
  br label %14

14:                                               ; preds = %274, %3
  %15 = phi %"struct.(anonymous namespace)::Entry"* [ %5, %3 ], [ %275, %274 ]
  br label %16

16:                                               ; preds = %164, %14
  %17 = phi %"struct.(anonymous namespace)::Entry"* [ %15, %14 ], [ %149, %164 ]
  %18 = ptrtoint %"struct.(anonymous namespace)::Entry"* %17 to i64
  %19 = sub i64 %6, %18
  %20 = ashr exact i64 %19, 4
  switch i64 %20, label %54 [
    i64 0, label %278
    i64 1, label %278
    i64 2, label %21
    i64 3, label %39
    i64 4, label %43
    i64 5, label %48
  ]

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %22, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #12
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %278

29:                                               ; preds = %21
  %30 = ptrtoint i8* %26 to i64
  %31 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 0, i32 1
  %32 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"struct.(anonymous namespace)::Entry"* %17 to i8*
  %35 = bitcast %"struct.(anonymous namespace)::Entry"* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false) #9
  %36 = bitcast %"struct.(anonymous namespace)::Entry"* %22 to i64*
  store i64 %30, i64* %36, align 8
  %37 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1, i32 1
  %38 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %37 to i64*
  store i64 %33, i64* %38, align 8
  br label %278

39:                                               ; preds = %16
  %40 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 1
  %41 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1
  %42 = tail call fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %40, %"struct.(anonymous namespace)::Entry"* %41)
  br label %278

43:                                               ; preds = %16
  %44 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 1
  %45 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 2
  %46 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1
  %47 = tail call fastcc i32 @_ZNSt3__17__sort4IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %44, %"struct.(anonymous namespace)::Entry"* %45, %"struct.(anonymous namespace)::Entry"* %46)
  br label %278

48:                                               ; preds = %16
  %49 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 1
  %50 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 2
  %51 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 3
  %52 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 -1
  %53 = tail call fastcc i32 @_ZNSt3__17__sort5IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %49, %"struct.(anonymous namespace)::Entry"* %50, %"struct.(anonymous namespace)::Entry"* %51, %"struct.(anonymous namespace)::Entry"* %52)
  br label %278

54:                                               ; preds = %16
  %55 = icmp slt i64 %19, 496
  br i1 %55, label %56, label %95

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 2
  %58 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 1
  %59 = tail call fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %58, %"struct.(anonymous namespace)::Entry"* %57) #9
  %60 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 3
  %61 = icmp eq %"struct.(anonymous namespace)::Entry"* %60, %4
  br i1 %61, label %278, label %62

62:                                               ; preds = %56, %92
  %63 = phi %"struct.(anonymous namespace)::Entry"* [ %93, %92 ], [ %60, %56 ]
  %64 = phi %"struct.(anonymous namespace)::Entry"* [ %63, %92 ], [ %57, %56 ]
  %65 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %63, i64 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %64, i64 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = tail call i32 @strcmp(i8* %66, i8* %68) #12
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %92

71:                                               ; preds = %62
  %72 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %63, i64 0, i32 1
  %73 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %72 to i64*
  %74 = load i64, i64* %73, align 8
  br label %75

75:                                               ; preds = %81, %71
  %76 = phi %"struct.(anonymous namespace)::Entry"* [ %63, %71 ], [ %77, %81 ]
  %77 = phi %"struct.(anonymous namespace)::Entry"* [ %64, %71 ], [ %82, %81 ]
  %78 = bitcast %"struct.(anonymous namespace)::Entry"* %76 to i8*
  %79 = bitcast %"struct.(anonymous namespace)::Entry"* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 16, i1 false) #9
  %80 = icmp eq %"struct.(anonymous namespace)::Entry"* %77, %17
  br i1 %80, label %87, label %81

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %77, i64 -1
  %83 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %82, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = tail call i32 @strcmp(i8* %66, i8* %84) #12
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %75, label %87

87:                                               ; preds = %81, %75
  %88 = phi %"struct.(anonymous namespace)::Entry"* [ %17, %75 ], [ %77, %81 ]
  %89 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %88, i64 0, i32 0
  store i8* %66, i8** %89, align 8
  %90 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %88, i64 0, i32 1
  %91 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %90 to i64*
  store i64 %74, i64* %91, align 8
  br label %92

92:                                               ; preds = %87, %62
  %93 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %63, i64 1
  %94 = icmp eq %"struct.(anonymous namespace)::Entry"* %93, %4
  br i1 %94, label %278, label %62

95:                                               ; preds = %54
  %96 = icmp sgt i64 %19, 15984
  %97 = sdiv i64 %20, 2
  %98 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 %97
  br i1 %96, label %99, label %104

99:                                               ; preds = %95
  %100 = sdiv i64 %20, 4
  %101 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 %100
  %102 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %98, i64 %100
  %103 = tail call fastcc i32 @_ZNSt3__17__sort5IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %101, %"struct.(anonymous namespace)::Entry"* %98, %"struct.(anonymous namespace)::Entry"* %102, %"struct.(anonymous namespace)::Entry"* %7)
  br label %106

104:                                              ; preds = %95
  %105 = tail call fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %98, %"struct.(anonymous namespace)::Entry"* %7)
  br label %106

106:                                              ; preds = %104, %99
  %107 = phi i32 [ %103, %99 ], [ %105, %104 ]
  %108 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %98, i64 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = tail call i32 @strcmp(i8* %109, i8* %111) #12
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %191, label %114

114:                                              ; preds = %106, %175
  %115 = phi %"struct.(anonymous namespace)::Entry"* [ %116, %175 ], [ %7, %106 ]
  %116 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %115, i64 -1
  %117 = icmp eq %"struct.(anonymous namespace)::Entry"* %17, %116
  br i1 %117, label %118, label %175

118:                                              ; preds = %114
  %119 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 1
  %120 = load i8*, i8** %8, align 8
  %121 = tail call i32 @strcmp(i8* %109, i8* %120) #12
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %141, label %123

123:                                              ; preds = %118
  %124 = icmp eq %"struct.(anonymous namespace)::Entry"* %119, %7
  br i1 %124, label %278, label %125

125:                                              ; preds = %123, %138
  %126 = phi %"struct.(anonymous namespace)::Entry"* [ %139, %138 ], [ %119, %123 ]
  %127 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %126, i64 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = tail call i32 @strcmp(i8* %109, i8* %128) #12
  %130 = icmp slt i32 %129, 0
  br i1 %130, label %131, label %138

131:                                              ; preds = %125
  %132 = ptrtoint i8* %128 to i64
  %133 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %126, i64 0, i32 1
  %134 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = bitcast %"struct.(anonymous namespace)::Entry"* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 8 %9, i64 16, i1 false) #9
  store i64 %132, i64* %10, align 8
  store i64 %135, i64* %12, align 8
  %137 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %126, i64 1
  br label %141

138:                                              ; preds = %125
  %139 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %126, i64 1
  %140 = icmp eq %"struct.(anonymous namespace)::Entry"* %139, %7
  br i1 %140, label %278, label %125

141:                                              ; preds = %131, %118
  %142 = phi %"struct.(anonymous namespace)::Entry"* [ %119, %118 ], [ %137, %131 ]
  %143 = icmp eq %"struct.(anonymous namespace)::Entry"* %142, %7
  br i1 %143, label %278, label %144

144:                                              ; preds = %141, %166
  %145 = phi %"struct.(anonymous namespace)::Entry"* [ %154, %166 ], [ %142, %141 ]
  %146 = phi %"struct.(anonymous namespace)::Entry"* [ %159, %166 ], [ %7, %141 ]
  %147 = load i8*, i8** %108, align 8
  br label %148

148:                                              ; preds = %148, %144
  %149 = phi %"struct.(anonymous namespace)::Entry"* [ %145, %144 ], [ %154, %148 ]
  %150 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %149, i64 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = tail call i32 @strcmp(i8* %147, i8* %151) #12
  %153 = icmp slt i32 %152, 0
  %154 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %149, i64 1
  br i1 %153, label %155, label %148

155:                                              ; preds = %148
  %156 = ptrtoint i8* %151 to i64
  br label %157

157:                                              ; preds = %155, %157
  %158 = phi %"struct.(anonymous namespace)::Entry"* [ %159, %157 ], [ %146, %155 ]
  %159 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %158, i64 -1
  %160 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %159, i64 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = tail call i32 @strcmp(i8* %147, i8* %161) #12
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %157, label %164

164:                                              ; preds = %157
  %165 = icmp ult %"struct.(anonymous namespace)::Entry"* %149, %159
  br i1 %165, label %166, label %16

166:                                              ; preds = %164
  %167 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %149, i64 0, i32 1
  %168 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast %"struct.(anonymous namespace)::Entry"* %149 to i8*
  %171 = bitcast %"struct.(anonymous namespace)::Entry"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* align 8 %171, i64 16, i1 false) #9
  %172 = bitcast %"struct.(anonymous namespace)::Entry"* %159 to i64*
  store i64 %156, i64* %172, align 8
  %173 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %158, i64 -1, i32 1
  %174 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %173 to i64*
  store i64 %169, i64* %174, align 8
  br label %144

175:                                              ; preds = %114
  %176 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %116, i64 0, i32 0
  %177 = load i8*, i8** %176, align 8
  %178 = tail call i32 @strcmp(i8* %177, i8* %111) #12
  %179 = icmp slt i32 %178, 0
  br i1 %179, label %180, label %114

180:                                              ; preds = %175
  %181 = ptrtoint i8* %109 to i64
  %182 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 0, i32 1
  %183 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %182 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = bitcast %"struct.(anonymous namespace)::Entry"* %17 to i8*
  %186 = bitcast %"struct.(anonymous namespace)::Entry"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false) #9
  %187 = bitcast %"struct.(anonymous namespace)::Entry"* %116 to i64*
  store i64 %181, i64* %187, align 8
  %188 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %115, i64 -1, i32 1
  %189 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %188 to i64*
  store i64 %184, i64* %189, align 8
  %190 = add i32 %107, 1
  br label %191

191:                                              ; preds = %106, %180
  %192 = phi i32 [ %190, %180 ], [ %107, %106 ]
  %193 = phi %"struct.(anonymous namespace)::Entry"* [ %116, %180 ], [ %7, %106 ]
  %194 = ptrtoint %"struct.(anonymous namespace)::Entry"* %17 to i64
  %195 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %17, i64 1
  %196 = icmp ult %"struct.(anonymous namespace)::Entry"* %195, %193
  br i1 %196, label %197, label %234

197:                                              ; preds = %191, %222
  %198 = phi %"struct.(anonymous namespace)::Entry"* [ %233, %222 ], [ %98, %191 ]
  %199 = phi i32 [ %231, %222 ], [ %192, %191 ]
  %200 = phi %"struct.(anonymous namespace)::Entry"* [ %210, %222 ], [ %195, %191 ]
  %201 = phi %"struct.(anonymous namespace)::Entry"* [ %215, %222 ], [ %193, %191 ]
  %202 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %198, i64 0, i32 0
  %203 = load i8*, i8** %202, align 8
  br label %204

204:                                              ; preds = %204, %197
  %205 = phi %"struct.(anonymous namespace)::Entry"* [ %200, %197 ], [ %210, %204 ]
  %206 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %205, i64 0, i32 0
  %207 = load i8*, i8** %206, align 8
  %208 = tail call i32 @strcmp(i8* %207, i8* %203) #12
  %209 = icmp slt i32 %208, 0
  %210 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %205, i64 1
  br i1 %209, label %204, label %211

211:                                              ; preds = %204
  %212 = ptrtoint i8* %207 to i64
  br label %213

213:                                              ; preds = %211, %213
  %214 = phi %"struct.(anonymous namespace)::Entry"* [ %215, %213 ], [ %201, %211 ]
  %215 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %214, i64 -1
  %216 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %215, i64 0, i32 0
  %217 = load i8*, i8** %216, align 8
  %218 = tail call i32 @strcmp(i8* %217, i8* %203) #12
  %219 = icmp slt i32 %218, 0
  br i1 %219, label %220, label %213

220:                                              ; preds = %213
  %221 = icmp ugt %"struct.(anonymous namespace)::Entry"* %205, %215
  br i1 %221, label %234, label %222

222:                                              ; preds = %220
  %223 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %205, i64 0, i32 1
  %224 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = bitcast %"struct.(anonymous namespace)::Entry"* %205 to i8*
  %227 = bitcast %"struct.(anonymous namespace)::Entry"* %215 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 16, i1 false) #9
  %228 = bitcast %"struct.(anonymous namespace)::Entry"* %215 to i64*
  store i64 %212, i64* %228, align 8
  %229 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %214, i64 -1, i32 1
  %230 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %229 to i64*
  store i64 %225, i64* %230, align 8
  %231 = add i32 %199, 1
  %232 = icmp eq %"struct.(anonymous namespace)::Entry"* %198, %205
  %233 = select i1 %232, %"struct.(anonymous namespace)::Entry"* %215, %"struct.(anonymous namespace)::Entry"* %198
  br label %197

234:                                              ; preds = %220, %191
  %235 = phi %"struct.(anonymous namespace)::Entry"* [ %98, %191 ], [ %198, %220 ]
  %236 = phi i32 [ %192, %191 ], [ %199, %220 ]
  %237 = phi %"struct.(anonymous namespace)::Entry"* [ %195, %191 ], [ %205, %220 ]
  %238 = icmp eq %"struct.(anonymous namespace)::Entry"* %237, %235
  br i1 %238, label %257, label %239

239:                                              ; preds = %234
  %240 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %235, i64 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %237, i64 0, i32 0
  %243 = load i8*, i8** %242, align 8
  %244 = tail call i32 @strcmp(i8* %241, i8* %243) #12
  %245 = icmp slt i32 %244, 0
  br i1 %245, label %246, label %257

246:                                              ; preds = %239
  %247 = ptrtoint i8* %243 to i64
  %248 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %237, i64 0, i32 1
  %249 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"struct.(anonymous namespace)::Entry"* %237 to i8*
  %252 = bitcast %"struct.(anonymous namespace)::Entry"* %235 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %251, i8* align 8 %252, i64 16, i1 false) #9
  %253 = bitcast %"struct.(anonymous namespace)::Entry"* %235 to i64*
  store i64 %247, i64* %253, align 8
  %254 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %235, i64 0, i32 1
  %255 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %254 to i64*
  store i64 %250, i64* %255, align 8
  %256 = add i32 %236, 1
  br label %257

257:                                              ; preds = %234, %246, %239
  %258 = phi i32 [ %256, %246 ], [ %236, %239 ], [ %236, %234 ]
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %267

260:                                              ; preds = %257
  %261 = tail call fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEbT0_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %237)
  %262 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %237, i64 1
  %263 = tail call fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEbT0_S6_T_(%"struct.(anonymous namespace)::Entry"* %262, %"struct.(anonymous namespace)::Entry"* %4)
  br i1 %263, label %264, label %266

264:                                              ; preds = %260
  br i1 %261, label %278, label %265

265:                                              ; preds = %264, %276
  br label %3

266:                                              ; preds = %260
  br i1 %261, label %274, label %267

267:                                              ; preds = %266, %257
  %268 = ptrtoint %"struct.(anonymous namespace)::Entry"* %237 to i64
  %269 = sub i64 %268, %194
  %270 = sub i64 %13, %268
  %271 = icmp slt i64 %269, %270
  br i1 %271, label %272, label %276

272:                                              ; preds = %267
  tail call fastcc void @_ZNSt3__16__sortIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEvT0_S6_T_(%"struct.(anonymous namespace)::Entry"* %17, %"struct.(anonymous namespace)::Entry"* %237)
  %273 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %237, i64 1
  br label %274

274:                                              ; preds = %272, %266
  %275 = phi %"struct.(anonymous namespace)::Entry"* [ %262, %266 ], [ %273, %272 ]
  br label %14

276:                                              ; preds = %267
  %277 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %237, i64 1
  tail call fastcc void @_ZNSt3__16__sortIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEvT0_S6_T_(%"struct.(anonymous namespace)::Entry"* %277, %"struct.(anonymous namespace)::Entry"* %4)
  br label %265

278:                                              ; preds = %264, %141, %16, %16, %123, %138, %92, %56, %21, %29, %39, %43, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture) unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i32 @strcmp(i8* %5, i8* %7) #12
  %9 = icmp slt i32 %8, 0
  %10 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = tail call i32 @strcmp(i8* %11, i8* %5) #12
  %13 = icmp slt i32 %12, 0
  %14 = ptrtoint i8* %5 to i64
  %15 = ptrtoint i8* %7 to i64
  br i1 %9, label %37, label %16

16:                                               ; preds = %3
  br i1 %13, label %17, label %60

17:                                               ; preds = %16
  %18 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 1
  %19 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i8*
  %22 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false) #9
  %23 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i64*
  store i64 %14, i64* %23, align 8
  %24 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 1
  %25 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %24 to i64*
  store i64 %20, i64* %25, align 8
  %26 = load i8*, i8** %4, align 8
  %27 = load i8*, i8** %6, align 8
  %28 = tail call i32 @strcmp(i8* %26, i8* %27) #12
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %60

30:                                               ; preds = %17
  %31 = ptrtoint i8* %27 to i64
  %32 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i64*
  %33 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 1
  %34 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"struct.(anonymous namespace)::Entry"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %21, i64 16, i1 false) #9
  store i64 %31, i64* %32, align 8
  store i64 %35, i64* %19, align 8
  br label %60

37:                                               ; preds = %3
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 1
  %39 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"struct.(anonymous namespace)::Entry"* %0 to i8*
  br i1 %13, label %42, label %47

42:                                               ; preds = %37
  %43 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %43, i64 16, i1 false) #9
  %44 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i64*
  store i64 %15, i64* %44, align 8
  %45 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 1
  %46 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %45 to i64*
  store i64 %40, i64* %46, align 8
  br label %60

47:                                               ; preds = %37
  %48 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %48, i64 16, i1 false) #9
  %49 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i64*
  store i64 %15, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 1
  %51 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %50 to i64*
  store i64 %40, i64* %51, align 8
  %52 = load i8*, i8** %10, align 8
  %53 = tail call i32 @strcmp(i8* %52, i8* %7) #12
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %47
  %56 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %56, i64 16, i1 false) #9
  %57 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i64*
  store i64 %15, i64* %57, align 8
  %58 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 1
  %59 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %58 to i64*
  store i64 %40, i64* %59, align 8
  br label %60

60:                                               ; preds = %47, %55, %17, %30, %16, %42
  %61 = phi i32 [ 1, %42 ], [ 0, %16 ], [ 2, %30 ], [ 1, %17 ], [ 2, %55 ], [ 1, %47 ]
  ret i32 %61
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort4IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture) unnamed_addr #0 {
  %5 = tail call fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %0, %"struct.(anonymous namespace)::Entry"* %1, %"struct.(anonymous namespace)::Entry"* %2)
  %6 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %3, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = tail call i32 @strcmp(i8* %7, i8* %9) #12
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %49

12:                                               ; preds = %4
  %13 = ptrtoint i8* %9 to i64
  %14 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 1
  %15 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i8*
  %18 = bitcast %"struct.(anonymous namespace)::Entry"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false) #9
  %19 = bitcast %"struct.(anonymous namespace)::Entry"* %3 to i64*
  store i64 %13, i64* %19, align 8
  %20 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %3, i64 0, i32 1
  %21 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %20 to i64*
  store i64 %16, i64* %21, align 8
  %22 = add i32 %5, 1
  %23 = load i8*, i8** %8, align 8
  %24 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = tail call i32 @strcmp(i8* %23, i8* %25) #12
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %49

28:                                               ; preds = %12
  %29 = ptrtoint i8* %25 to i64
  %30 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i64*
  %31 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 1
  %32 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %17, i64 16, i1 false) #9
  store i64 %29, i64* %30, align 8
  store i64 %33, i64* %15, align 8
  %35 = add i32 %5, 2
  %36 = load i8*, i8** %24, align 8
  %37 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = tail call i32 @strcmp(i8* %36, i8* %38) #12
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %49

41:                                               ; preds = %28
  %42 = ptrtoint i8* %38 to i64
  %43 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i64*
  %44 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 1
  %45 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"struct.(anonymous namespace)::Entry"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %34, i64 16, i1 false) #9
  store i64 %42, i64* %43, align 8
  store i64 %46, i64* %32, align 8
  %48 = add i32 %5, 3
  br label %49

49:                                               ; preds = %12, %41, %28, %4
  %50 = phi i32 [ %48, %41 ], [ %35, %28 ], [ %22, %12 ], [ %5, %4 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort5IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture, %"struct.(anonymous namespace)::Entry"* nocapture) unnamed_addr #0 {
  %6 = tail call fastcc i32 @_ZNSt3__17__sort4IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %0, %"struct.(anonymous namespace)::Entry"* %1, %"struct.(anonymous namespace)::Entry"* %2, %"struct.(anonymous namespace)::Entry"* %3)
  %7 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %3, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = tail call i32 @strcmp(i8* %8, i8* %10) #12
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %63

13:                                               ; preds = %5
  %14 = ptrtoint i8* %10 to i64
  %15 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %3, i64 0, i32 1
  %16 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"struct.(anonymous namespace)::Entry"* %3 to i8*
  %19 = bitcast %"struct.(anonymous namespace)::Entry"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false) #9
  %20 = bitcast %"struct.(anonymous namespace)::Entry"* %4 to i64*
  store i64 %14, i64* %20, align 8
  %21 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %4, i64 0, i32 1
  %22 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %21 to i64*
  store i64 %17, i64* %22, align 8
  %23 = add i32 %6, 1
  %24 = load i8*, i8** %9, align 8
  %25 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i32 @strcmp(i8* %24, i8* %26) #12
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %63

29:                                               ; preds = %13
  %30 = ptrtoint i8* %26 to i64
  %31 = bitcast %"struct.(anonymous namespace)::Entry"* %3 to i64*
  %32 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %2, i64 0, i32 1
  %33 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %18, i64 16, i1 false) #9
  store i64 %30, i64* %31, align 8
  store i64 %34, i64* %16, align 8
  %36 = add i32 %6, 2
  %37 = load i8*, i8** %25, align 8
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = tail call i32 @strcmp(i8* %37, i8* %39) #12
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %63

42:                                               ; preds = %29
  %43 = ptrtoint i8* %39 to i64
  %44 = bitcast %"struct.(anonymous namespace)::Entry"* %2 to i64*
  %45 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 0, i32 1
  %46 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %35, i64 16, i1 false) #9
  store i64 %43, i64* %44, align 8
  store i64 %47, i64* %33, align 8
  %49 = add i32 %6, 3
  %50 = load i8*, i8** %38, align 8
  %51 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = tail call i32 @strcmp(i8* %50, i8* %52) #12
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %63

55:                                               ; preds = %42
  %56 = ptrtoint i8* %52 to i64
  %57 = bitcast %"struct.(anonymous namespace)::Entry"* %1 to i64*
  %58 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 1
  %59 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast %"struct.(anonymous namespace)::Entry"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %48, i64 16, i1 false) #9
  store i64 %56, i64* %57, align 8
  store i64 %60, i64* %46, align 8
  %62 = add i32 %6, 4
  br label %63

63:                                               ; preds = %13, %42, %55, %29, %5
  %64 = phi i32 [ %62, %55 ], [ %49, %42 ], [ %36, %29 ], [ %23, %13 ], [ %6, %5 ]
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEbT0_S6_T_(%"struct.(anonymous namespace)::Entry"*, %"struct.(anonymous namespace)::Entry"*) unnamed_addr #0 {
  %3 = ptrtoint %"struct.(anonymous namespace)::Entry"* %1 to i64
  %4 = ptrtoint %"struct.(anonymous namespace)::Entry"* %0 to i64
  %5 = sub i64 %3, %4
  %6 = ashr exact i64 %5, 4
  switch i64 %6, label %40 [
    i64 0, label %86
    i64 1, label %86
    i64 2, label %7
    i64 3, label %25
    i64 4, label %29
    i64 5, label %34
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 -1
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %8, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = tail call i32 @strcmp(i8* %10, i8* %12) #12
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %86

15:                                               ; preds = %7
  %16 = ptrtoint i8* %12 to i64
  %17 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 0, i32 1
  %18 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"struct.(anonymous namespace)::Entry"* %0 to i8*
  %21 = bitcast %"struct.(anonymous namespace)::Entry"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 16, i1 false) #9
  %22 = bitcast %"struct.(anonymous namespace)::Entry"* %8 to i64*
  store i64 %16, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 -1, i32 1
  %24 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %23 to i64*
  store i64 %19, i64* %24, align 8
  br label %86

25:                                               ; preds = %2
  %26 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 1
  %27 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 -1
  %28 = tail call fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %0, %"struct.(anonymous namespace)::Entry"* %26, %"struct.(anonymous namespace)::Entry"* %27)
  br label %86

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 1
  %31 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 2
  %32 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 -1
  %33 = tail call fastcc i32 @_ZNSt3__17__sort4IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %0, %"struct.(anonymous namespace)::Entry"* %30, %"struct.(anonymous namespace)::Entry"* %31, %"struct.(anonymous namespace)::Entry"* %32)
  br label %86

34:                                               ; preds = %2
  %35 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 1
  %36 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 2
  %37 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 3
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %1, i64 -1
  %39 = tail call fastcc i32 @_ZNSt3__17__sort5IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %0, %"struct.(anonymous namespace)::Entry"* %35, %"struct.(anonymous namespace)::Entry"* %36, %"struct.(anonymous namespace)::Entry"* %37, %"struct.(anonymous namespace)::Entry"* %38)
  br label %86

40:                                               ; preds = %2
  %41 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 2
  %42 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 1
  %43 = tail call fastcc i32 @_ZNSt3__17__sort3IRN12_GLOBAL__N_115EntryComparatorEPNS1_5EntryEEEjT0_S6_S6_T_(%"struct.(anonymous namespace)::Entry"* %0, %"struct.(anonymous namespace)::Entry"* %42, %"struct.(anonymous namespace)::Entry"* %41)
  %44 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %0, i64 3
  %45 = icmp eq %"struct.(anonymous namespace)::Entry"* %44, %1
  br i1 %45, label %86, label %46

46:                                               ; preds = %40, %79
  %47 = phi %"struct.(anonymous namespace)::Entry"* [ %81, %79 ], [ %44, %40 ]
  %48 = phi i32 [ %80, %79 ], [ 0, %40 ]
  %49 = phi %"struct.(anonymous namespace)::Entry"* [ %47, %79 ], [ %41, %40 ]
  %50 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %47, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %49, i64 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = tail call i32 @strcmp(i8* %51, i8* %53) #12
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %79

56:                                               ; preds = %46
  %57 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %47, i64 0, i32 1
  %58 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %57 to i64*
  %59 = load i64, i64* %58, align 8
  br label %60

60:                                               ; preds = %66, %56
  %61 = phi %"struct.(anonymous namespace)::Entry"* [ %47, %56 ], [ %62, %66 ]
  %62 = phi %"struct.(anonymous namespace)::Entry"* [ %49, %56 ], [ %67, %66 ]
  %63 = bitcast %"struct.(anonymous namespace)::Entry"* %61 to i8*
  %64 = bitcast %"struct.(anonymous namespace)::Entry"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false)
  %65 = icmp eq %"struct.(anonymous namespace)::Entry"* %62, %0
  br i1 %65, label %72, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %62, i64 -1
  %68 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %67, i64 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = tail call i32 @strcmp(i8* %51, i8* %69) #12
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %60, label %72

72:                                               ; preds = %60, %66
  %73 = phi %"struct.(anonymous namespace)::Entry"* [ %0, %60 ], [ %62, %66 ]
  %74 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %73, i64 0, i32 0
  store i8* %51, i8** %74, align 8
  %75 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %73, i64 0, i32 1
  %76 = bitcast void (%class.sk_sp.10*, %class.SkReadBuffer*)** %75 to i64*
  store i64 %59, i64* %76, align 8
  %77 = add i32 %48, 1
  %78 = icmp eq i32 %77, 8
  br i1 %78, label %83, label %79

79:                                               ; preds = %72, %46
  %80 = phi i32 [ %77, %72 ], [ %48, %46 ]
  %81 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %47, i64 1
  %82 = icmp eq %"struct.(anonymous namespace)::Entry"* %81, %1
  br i1 %82, label %86, label %46

83:                                               ; preds = %72
  %84 = getelementptr inbounds %"struct.(anonymous namespace)::Entry", %"struct.(anonymous namespace)::Entry"* %47, i64 1
  %85 = icmp eq %"struct.(anonymous namespace)::Entry"* %84, %1
  br label %86

86:                                               ; preds = %79, %83, %40, %7, %15, %2, %2, %34, %29, %25
  %87 = phi i1 [ true, %34 ], [ true, %29 ], [ true, %25 ], [ true, %2 ], [ true, %2 ], [ true, %15 ], [ true, %7 ], [ true, %40 ], [ %85, %83 ], [ true, %79 ]
  ret i1 %87
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
