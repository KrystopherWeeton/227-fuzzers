; ModuleID = '../../third_party/blink/renderer/platform/geometry/float_point_3d.cc'
source_filename = "../../third_party/blink/renderer/platform/geometry/float_point_3d.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FloatPoint3D" = type { float, float, float }
%"class.gfx::Point3F" = type { float, float, float }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::TextStream" = type { %"class.WTF::StringBuilder" }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }

@.str = private unnamed_addr constant [12 x i8] c"%lg,%lg,%lg\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"x=\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" y=\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" z=\00", align 1

@_ZN5blink12FloatPoint3DC1ERKN3gfx7Point3FE = hidden unnamed_addr alias void (%"class.blink::FloatPoint3D"*, %"class.gfx::Point3F"*), void (%"class.blink::FloatPoint3D"*, %"class.gfx::Point3F"*)* @_ZN5blink12FloatPoint3DC2ERKN3gfx7Point3FE

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink12FloatPoint3DC2ERKN3gfx7Point3FE(%"class.blink::FloatPoint3D"* nocapture, %"class.gfx::Point3F"* nocapture readonly dereferenceable(12)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.gfx::Point3F"* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %"class.blink::FloatPoint3D"* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 1
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 2
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = bitcast float* %11 to i32*
  store i32 %14, i32* %15, align 4
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5blink12FloatPoint3D9NormalizeEv(%"class.blink::FloatPoint3D"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fmul float %3, %3
  %5 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 2
  %7 = bitcast float* %5 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fmul <2 x float> %8, %8
  %10 = extractelement <2 x float> %9, i32 0
  %11 = fadd float %4, %10
  %12 = extractelement <2 x float> %9, i32 1
  %13 = fadd float %11, %12
  %14 = tail call float @sqrtf(float %13) #6
  %15 = fcmp une float %14, 0.000000e+00
  br i1 %15, label %16, label %23

16:                                               ; preds = %1
  %17 = load float, float* %2, align 4
  %18 = fdiv float %17, %14
  store float %18, float* %2, align 4
  %19 = load float, float* %5, align 4
  %20 = fdiv float %19, %14
  store float %20, float* %5, align 4
  %21 = load float, float* %6, align 4
  %22 = fdiv float %21, %14
  store float %22, float* %6, align 4
  br label %23

23:                                               ; preds = %16, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZNK5blink12FloatPoint3D12AngleBetweenERKS0_(%"class.blink::FloatPoint3D"* nocapture readonly, %"class.blink::FloatPoint3D"* nocapture readonly dereferenceable(12)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fmul float %4, %4
  %6 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 1
  %7 = bitcast float* %6 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = fmul <2 x float> %8, %8
  %10 = extractelement <2 x float> %9, i32 0
  %11 = fadd float %5, %10
  %12 = extractelement <2 x float> %9, i32 1
  %13 = fadd float %11, %12
  %14 = tail call float @sqrtf(float %13) #6
  %15 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %16
  %18 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 1
  %19 = bitcast float* %18 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fmul <2 x float> %20, %20
  %22 = extractelement <2 x float> %21, i32 0
  %23 = fadd float %17, %22
  %24 = extractelement <2 x float> %21, i32 1
  %25 = fadd float %23, %24
  %26 = tail call float @sqrtf(float %25) #6
  %27 = fcmp une float %14, 0.000000e+00
  %28 = fcmp une float %26, 0.000000e+00
  %29 = and i1 %27, %28
  br i1 %29, label %30, label %52

30:                                               ; preds = %2
  %31 = load float, float* %3, align 4
  %32 = load float, float* %15, align 4
  %33 = fmul float %31, %32
  %34 = bitcast float* %6 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 4
  %36 = bitcast float* %18 to <2 x float>*
  %37 = load <2 x float>, <2 x float>* %36, align 4
  %38 = fmul <2 x float> %35, %37
  %39 = extractelement <2 x float> %38, i32 0
  %40 = fadd float %33, %39
  %41 = extractelement <2 x float> %38, i32 1
  %42 = fadd float %40, %41
  %43 = fmul float %14, %26
  %44 = fdiv float %42, %43
  %45 = fpext float %44 to double
  %46 = fcmp ult float %44, 1.000000e+00
  %47 = fcmp ole double %45, -1.000000e+00
  %48 = select i1 %47, double -1.000000e+00, double %45
  %49 = select i1 %46, double %48, double 1.000000e+00
  %50 = tail call double @acos(double %49) #6
  %51 = fptrunc double %50 to float
  br label %52

52:                                               ; preds = %2, %30
  %53 = phi float [ %51, %30 ], [ 0.000000e+00, %2 ]
  ret float %53
}

; Function Attrs: nofree nounwind
declare double @acos(double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12FloatPoint3DE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::FloatPoint3D"* nocapture readonly dereferenceable(12)) local_unnamed_addr #4 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 2
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %7, double %10, double %13) #6
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8
  %16 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #6
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %32, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  br i1 %23, label %26, label %28

26:                                               ; preds = %19
  %27 = add i32 %25, -1
  store i32 %27, i32* %24, align 4
  br label %28

28:                                               ; preds = %26, %19
  %29 = phi i32 [ %27, %26 ], [ %25, %19 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %17) #6
  br label %32

32:                                               ; preds = %2, %28, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #6
  ret %"class.std::__1::basic_ostream"* %16
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink12FloatPoint3D8ToStringEv(%"class.blink::FloatPoint3D"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = fpext float %3 to double
  %5 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = fpext float %6 to double
  %8 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = tail call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %4, double %7, double %10) #6
  ret %"class.WTF::StringImpl"* %11
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.WTF::TextStream"* @_ZN5blinklsERN3WTF10TextStreamERKNS_12FloatPoint3DE(%"class.WTF::TextStream"* returned dereferenceable(48), %"class.blink::FloatPoint3D"* nocapture readonly dereferenceable(12)) local_unnamed_addr #4 {
  %3 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #6
  %4 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEf(%"class.WTF::TextStream"* %3, float %5) #6
  %7 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)) #6
  %8 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEf(%"class.WTF::TextStream"* %7, float %9) #6
  %11 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)) #6
  %12 = getelementptr inbounds %"class.blink::FloatPoint3D", %"class.blink::FloatPoint3D"* %1, i64 0, i32 2
  %13 = load float, float* %12, align 4
  %14 = tail call dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEf(%"class.WTF::TextStream"* %11, float %13) #6
  ret %"class.WTF::TextStream"* %0
}

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEPKc(%"class.WTF::TextStream"*, i8*) local_unnamed_addr #5

declare dereferenceable(48) %"class.WTF::TextStream"* @_ZN3WTF10TextStreamlsEf(%"class.WTF::TextStream"*, float) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
