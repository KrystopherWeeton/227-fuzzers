; ModuleID = '../../third_party/webrtc/common_audio/third_party/ooura/fft_size_128/ooura_fft_sse2.cc'
source_filename = "../../third_party/webrtc/common_audio/third_party/ooura/fft_size_128/ooura_fft_sse2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZN6webrtcL9rdft_wk1rE = internal unnamed_addr constant [32 x float] [float 1.000000e+00, float 1.000000e+00, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FEF6297C0000000, float 0x3FEF6297C0000000, float 0x3FE1C73B40000000, float 0x3FE1C73B40000000, float 0x3FEA9B6620000000, float 0x3FEA9B6620000000, float 0x3FC8F8B840000000, float 0x3FC8F8B840000000, float 0x3FEFD88DA0000000, float 0x3FEFD88DA0000000, float 0x3FE44CF340000000, float 0x3FE44CF340000000, float 0x3FEC38B300000000, float 0x3FEC38B300000000, float 0x3FD2940620000000, float 0x3FD2940620000000, float 0x3FEE9F4160000000, float 0x3FEE9F4160000000, float 0x3FDE2B5D40000000, float 0x3FDE2B5D40000000, float 0x3FE8BC8060000000, float 0x3FE8BC8060000000, float 0x3FB917A6C0000000, float 0x3FB917A6C0000000], align 16
@_ZN6webrtcL9rdft_wk1iE = internal unnamed_addr constant [32 x float] [float -0.000000e+00, float 0.000000e+00, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFD87DE2C0000000, float 0x3FD87DE2C0000000, float 0xBFED906BE0000000, float 0x3FED906BE0000000, float 0xBFC8F8B840000000, float 0x3FC8F8B840000000, float 0xBFEA9B6620000000, float 0x3FEA9B6620000000, float 0xBFE1C73B40000000, float 0x3FE1C73B40000000, float 0xBFEF6297C0000000, float 0x3FEF6297C0000000, float 0xBFB917A6C0000000, float 0x3FB917A6C0000000, float 0xBFE8BC8060000000, float 0x3FE8BC8060000000, float 0xBFDE2B5D40000000, float 0x3FDE2B5D40000000, float 0xBFEE9F4160000000, float 0x3FEE9F4160000000, float 0xBFD2940620000000, float 0x3FD2940620000000, float 0xBFEC38B300000000, float 0x3FEC38B300000000, float 0xBFE44CF340000000, float 0x3FE44CF340000000, float 0xBFEFD88DA0000000, float 0x3FEFD88DA0000000], align 16
@_ZN6webrtcL9rdft_wk2rE = internal unnamed_addr constant [32 x float] [float 1.000000e+00, float 1.000000e+00, float -0.000000e+00, float -0.000000e+00, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0xBFD87DE2C0000000, float 0xBFD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0xBFED906BE0000000, float 0xBFED906BE0000000, float 0x3FEF6297C0000000, float 0x3FEF6297C0000000, float 0xBFC8F8B840000000, float 0xBFC8F8B840000000, float 0x3FE1C73B40000000, float 0x3FE1C73B40000000, float 0xBFEA9B6620000000, float 0xBFEA9B6620000000, float 0x3FEA9B6620000000, float 0x3FEA9B6620000000, float 0xBFE1C73B40000000, float 0xBFE1C73B40000000, float 0x3FC8F8B840000000, float 0x3FC8F8B840000000, float 0xBFEF6297C0000000, float 0xBFEF6297C0000000], align 16
@_ZN6webrtcL9rdft_wk2iE = internal unnamed_addr constant [32 x float] [float -0.000000e+00, float 0.000000e+00, float -1.000000e+00, float 1.000000e+00, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFD87DE2C0000000, float 0x3FD87DE2C0000000, float 0xBFED906BE0000000, float 0x3FED906BE0000000, float 0xBFED906BE0000000, float 0x3FED906BE0000000, float 0xBFD87DE2C0000000, float 0x3FD87DE2C0000000, float 0xBFC8F8B840000000, float 0x3FC8F8B840000000, float 0xBFEF6297C0000000, float 0x3FEF6297C0000000, float 0xBFEA9B6620000000, float 0x3FEA9B6620000000, float 0xBFE1C73B40000000, float 0x3FE1C73B40000000, float 0xBFE1C73B40000000, float 0x3FE1C73B40000000, float 0xBFEA9B6620000000, float 0x3FEA9B6620000000, float 0xBFEF6297C0000000, float 0x3FEF6297C0000000, float 0xBFC8F8B840000000, float 0x3FC8F8B840000000], align 16
@_ZN6webrtcL9rdft_wk3rE = internal unnamed_addr constant [32 x float] [float 1.000000e+00, float 1.000000e+00, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0xBFED906BE0000000, float 0xBFED906BE0000000, float 0x3FEA9B6600000000, float 0x3FEA9B6600000000, float 0xBFEF6297C0000000, float 0xBFEF6297C0000000, float 0xBFC8F8B880000000, float 0xBFC8F8B880000000, float 0xBFE1C73B40000000, float 0xBFE1C73B40000000, float 0x3FEE9F4160000000, float 0x3FEE9F4160000000, float 0xBFEC38B2C0000000, float 0xBFEC38B2C0000000, float 0x3FB917A700000000, float 0x3FB917A700000000, float 0xBFE8BC8080000000, float 0xBFE8BC8080000000, float 0x3FE44CF340000000, float 0x3FE44CF340000000, float 0xBFEFD88DA0000000, float 0xBFEFD88DA0000000, float 0xBFDE2B5DC0000000, float 0xBFDE2B5DC0000000, float 0xBFD2940640000000, float 0xBFD2940640000000], align 16
@_ZN6webrtcL9rdft_wk3iE = internal unnamed_addr constant [32 x float] [float -0.000000e+00, float 0.000000e+00, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFED906BE0000000, float 0x3FED906BE0000000, float 0x3FD87DE2C0000000, float 0xBFD87DE2C0000000, float 0xBFE1C73B40000000, float 0x3FE1C73B40000000, float 0xBFC8F8B880000000, float 0x3FC8F8B880000000, float 0xBFEF6297C0000000, float 0x3FEF6297C0000000, float 0x3FEA9B6600000000, float 0xBFEA9B6600000000, float 0xBFD2940640000000, float 0x3FD2940640000000, float 0xBFDE2B5DC0000000, float 0x3FDE2B5DC0000000, float 0xBFEFD88DA0000000, float 0x3FEFD88DA0000000, float 0x3FE44CF340000000, float 0xBFE44CF340000000, float 0xBFE8BC8080000000, float 0x3FE8BC8080000000, float 0x3FB917A700000000, float 0xBFB917A700000000, float 0xBFEC38B2C0000000, float 0x3FEC38B2C0000000, float 0x3FEE9F4160000000, float 0xBFEE9F4160000000], align 16
@_ZN6webrtcL6rdft_wE = internal unnamed_addr constant [64 x float] [float 1.000000e+00, float 0.000000e+00, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FED906BE0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0x3FED906BE0000000, float 0x3FEF6297C0000000, float 0x3FC8F8B840000000, float 0x3FE1C73B40000000, float 0x3FEA9B6620000000, float 0x3FEA9B6620000000, float 0x3FE1C73B40000000, float 0x3FC8F8B840000000, float 0x3FEF6297C0000000, float 0x3FEFD88DA0000000, float 0x3FB917A6C0000000, float 0x3FE44CF340000000, float 0x3FE8BC8060000000, float 0x3FEC38B300000000, float 0x3FDE2B5D40000000, float 0x3FD2940620000000, float 0x3FEE9F4160000000, float 0x3FEE9F4160000000, float 0x3FD2940620000000, float 0x3FDE2B5D40000000, float 0x3FEC38B300000000, float 0x3FE8BC8060000000, float 0x3FE44CF340000000, float 0x3FB917A6C0000000, float 0x3FEFD88DA0000000, float 0x3FE6A09E60000000, float 0x3FDFF621E0000000, float 0x3FDFD88DA0000000, float 0x3FDFA75580000000, float 0x3FDF6297C0000000, float 0x3FDF0A7F00000000, float 0x3FDE9F4160000000, float 0x3FDE212100000000, float 0x3FDD906BE0000000, float 0x3FDCED7AE0000000, float 0x3FDC38B300000000, float 0x3FDB728340000000, float 0x3FDA9B6620000000, float 0x3FD9B3E040000000, float 0x3FD8BC8060000000, float 0x3FD7B5DF40000000, float 0x3FD6A09E60000000, float 0x3FD57D6940000000, float 0x3FD44CF340000000, float 0x3FD30FF800000000, float 0x3FD1C73B40000000, float 0x3FD07387A0000000, float 0x3FCE2B5D40000000, float 0x3FCB5D1000000000, float 0x3FC87DE2C0000000, float 0x3FC58F9A80000000, float 0x3FC2940620000000, float 0x3FBF19F9A0000000, float 0x3FB8F8B840000000, float 0x3FB2C81060000000, float 0x3FA917A6C0000000, float 0x3F991F6600000000], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc15cft1st_128_SSE2EPf(float* nocapture) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %1, %2
  %3 = phi i64 [ 0, %1 ], [ %69, %2 ]
  %4 = phi i64 [ 0, %1 ], [ %68, %2 ]
  %5 = getelementptr inbounds float, float* %0, i64 %4
  %6 = bitcast float* %5 to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 1
  %8 = or i64 %4, 4
  %9 = getelementptr inbounds float, float* %0, i64 %8
  %10 = bitcast float* %9 to <4 x float>*
  %11 = load <4 x float>, <4 x float>* %10, align 1
  %12 = or i64 %4, 8
  %13 = getelementptr inbounds float, float* %0, i64 %12
  %14 = bitcast float* %13 to <4 x float>*
  %15 = load <4 x float>, <4 x float>* %14, align 1
  %16 = or i64 %4, 12
  %17 = getelementptr inbounds float, float* %0, i64 %16
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 1
  %20 = shufflevector <4 x float> %7, <4 x float> %15, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %21 = shufflevector <4 x float> %7, <4 x float> %15, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %22 = shufflevector <4 x float> %11, <4 x float> %19, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %23 = shufflevector <4 x float> %11, <4 x float> %19, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %24 = getelementptr inbounds [32 x float], [32 x float]* @_ZN6webrtcL9rdft_wk1rE, i64 0, i64 %3
  %25 = bitcast float* %24 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 16
  %27 = getelementptr inbounds [32 x float], [32 x float]* @_ZN6webrtcL9rdft_wk1iE, i64 0, i64 %3
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 16
  %30 = getelementptr inbounds [32 x float], [32 x float]* @_ZN6webrtcL9rdft_wk2rE, i64 0, i64 %3
  %31 = bitcast float* %30 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 16
  %33 = getelementptr inbounds [32 x float], [32 x float]* @_ZN6webrtcL9rdft_wk2iE, i64 0, i64 %3
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 16
  %36 = getelementptr inbounds [32 x float], [32 x float]* @_ZN6webrtcL9rdft_wk3rE, i64 0, i64 %3
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 16
  %39 = getelementptr inbounds [32 x float], [32 x float]* @_ZN6webrtcL9rdft_wk3iE, i64 0, i64 %3
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 16
  %42 = fadd <4 x float> %20, %21
  %43 = fsub <4 x float> %20, %21
  %44 = fadd <4 x float> %22, %23
  %45 = fsub <4 x float> %22, %23
  %46 = fadd <4 x float> %42, %44
  %47 = fsub <4 x float> %42, %44
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %49 = fmul <4 x float> %32, %47
  %50 = fmul <4 x float> %35, %48
  %51 = fadd <4 x float> %49, %50
  %52 = fmul <4 x float> %45, <float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00>
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %54 = fadd <4 x float> %43, %53
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %56 = fmul <4 x float> %26, %54
  %57 = fmul <4 x float> %29, %55
  %58 = fadd <4 x float> %56, %57
  %59 = fsub <4 x float> %43, %53
  %60 = shufflevector <4 x float> %59, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %61 = fmul <4 x float> %38, %59
  %62 = fmul <4 x float> %41, %60
  %63 = fadd <4 x float> %61, %62
  %64 = shufflevector <4 x float> %46, <4 x float> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %65 = shufflevector <4 x float> %51, <4 x float> %63, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = shufflevector <4 x float> %46, <4 x float> %58, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %67 = shufflevector <4 x float> %51, <4 x float> %63, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  store <4 x float> %64, <4 x float>* %6, align 1
  store <4 x float> %65, <4 x float>* %10, align 1
  store <4 x float> %66, <4 x float>* %14, align 1
  store <4 x float> %67, <4 x float>* %18, align 1
  %68 = add nuw nsw i64 %4, 16
  %69 = add nuw nsw i64 %3, 4
  %70 = icmp ult i64 %68, 128
  br i1 %70, label %2, label %71

71:                                               ; preds = %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc15cftmdl_128_SSE2EPf(float* nocapture) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %1, %2
  %3 = phi i64 [ 0, %1 ], [ %95, %2 ]
  %4 = getelementptr inbounds float, float* %0, i64 %3
  %5 = bitcast float* %4 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> undef, i64 %6, i32 0
  %8 = add nuw nsw i64 %3, 8
  %9 = getelementptr inbounds float, float* %0, i64 %8
  %10 = bitcast float* %9 to i64*
  %11 = load i64, i64* %10, align 1
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = add nuw nsw i64 %3, 32
  %14 = getelementptr inbounds float, float* %0, i64 %13
  %15 = bitcast float* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = add nuw nsw i64 %3, 40
  %19 = getelementptr inbounds float, float* %0, i64 %18
  %20 = bitcast float* %19 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %7 to <4 x float>
  %24 = bitcast <2 x i64> %17 to <4 x float>
  %25 = shufflevector <4 x float> %23, <4 x float> %24, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %26 = bitcast <2 x i64> %12 to <4 x float>
  %27 = bitcast <2 x i64> %22 to <4 x float>
  %28 = shufflevector <4 x float> %26, <4 x float> %27, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %29 = fadd <4 x float> %25, %28
  %30 = fsub <4 x float> %25, %28
  %31 = add nuw nsw i64 %3, 16
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = bitcast float* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = add nuw nsw i64 %3, 24
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = add nuw nsw i64 %3, 48
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = add nuw nsw i64 %3, 56
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %35 to <4 x float>
  %52 = bitcast <2 x i64> %45 to <4 x float>
  %53 = shufflevector <4 x float> %51, <4 x float> %52, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %54 = bitcast <2 x i64> %40 to <4 x float>
  %55 = bitcast <2 x i64> %50 to <4 x float>
  %56 = shufflevector <4 x float> %54, <4 x float> %55, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = fadd <4 x float> %53, %56
  %58 = fsub <4 x float> %53, %56
  %59 = fadd <4 x float> %29, %57
  %60 = fsub <4 x float> %29, %57
  %61 = fmul <4 x float> %58, <float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00>
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %63 = fadd <4 x float> %30, %62
  %64 = fsub <4 x float> %30, %62
  %65 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 2, i32 2, i32 6, i32 6>
  %66 = shufflevector <4 x float> %63, <4 x float> %64, <4 x i32> <i32 3, i32 3, i32 7, i32 7>
  %67 = fmul <4 x float> %66, <float -1.000000e+00, float 1.000000e+00, float -1.000000e+00, float 1.000000e+00>
  %68 = fadd <4 x float> %65, %67
  %69 = fmul <4 x float> %68, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFE6A09E60000000>
  %70 = bitcast <4 x float> %59 to <2 x i64>
  %71 = extractelement <2 x i64> %70, i32 0
  store i64 %71, i64* %5, align 1
  %72 = bitcast <4 x float> %59 to <4 x i32>
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = extractelement <2 x i64> %74, i32 0
  store i64 %75, i64* %15, align 1
  %76 = bitcast <4 x float> %60 to <2 x i64>
  %77 = extractelement <2 x i64> %76, i32 0
  store i64 %77, i64* %33, align 1
  %78 = bitcast <4 x float> %60 to <4 x i32>
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 undef, i32 undef>
  %80 = bitcast <4 x i32> %79 to <2 x i64>
  %81 = extractelement <2 x i64> %80, i32 0
  store i64 %81, i64* %43, align 1
  %82 = trunc i64 %81 to i32
  %83 = bitcast i32 %82 to float
  %84 = fsub float -0.000000e+00, %83
  store float %84, float* %42, align 4
  %85 = bitcast <4 x float> %63 to <2 x i64>
  %86 = extractelement <2 x i64> %85, i32 0
  store i64 %86, i64* %10, align 1
  %87 = bitcast <4 x float> %64 to <2 x i64>
  %88 = extractelement <2 x i64> %87, i32 0
  store i64 %88, i64* %38, align 1
  %89 = bitcast <4 x float> %69 to <2 x i64>
  %90 = extractelement <2 x i64> %89, i32 0
  store i64 %90, i64* %20, align 1
  %91 = bitcast <4 x float> %69 to <4 x i32>
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 undef, i32 undef>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = extractelement <2 x i64> %93, i32 0
  store i64 %94, i64* %48, align 1
  %95 = add nuw nsw i64 %3, 2
  %96 = icmp ult i64 %95, 8
  br i1 %96, label %2, label %97

97:                                               ; preds = %2, %97
  %98 = phi i64 [ %196, %97 ], [ 64, %2 ]
  %99 = getelementptr inbounds float, float* %0, i64 %98
  %100 = bitcast float* %99 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = insertelement <2 x i64> undef, i64 %101, i32 0
  %103 = add nuw nsw i64 %98, 8
  %104 = getelementptr inbounds float, float* %0, i64 %103
  %105 = bitcast float* %104 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> undef, i64 %106, i32 0
  %108 = add nuw nsw i64 %98, 32
  %109 = getelementptr inbounds float, float* %0, i64 %108
  %110 = bitcast float* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = add nuw nsw i64 %98, 40
  %114 = getelementptr inbounds float, float* %0, i64 %113
  %115 = bitcast float* %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = insertelement <2 x i64> undef, i64 %116, i32 0
  %118 = bitcast <2 x i64> %102 to <4 x float>
  %119 = bitcast <2 x i64> %112 to <4 x float>
  %120 = shufflevector <4 x float> %118, <4 x float> %119, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %121 = bitcast <2 x i64> %107 to <4 x float>
  %122 = bitcast <2 x i64> %117 to <4 x float>
  %123 = shufflevector <4 x float> %121, <4 x float> %122, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %124 = fadd <4 x float> %120, %123
  %125 = fsub <4 x float> %120, %123
  %126 = add nuw nsw i64 %98, 16
  %127 = getelementptr inbounds float, float* %0, i64 %126
  %128 = bitcast float* %127 to i64*
  %129 = load i64, i64* %128, align 1
  %130 = insertelement <2 x i64> undef, i64 %129, i32 0
  %131 = add nuw nsw i64 %98, 24
  %132 = getelementptr inbounds float, float* %0, i64 %131
  %133 = bitcast float* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = add nuw nsw i64 %98, 48
  %137 = getelementptr inbounds float, float* %0, i64 %136
  %138 = bitcast float* %137 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = add nuw nsw i64 %98, 56
  %142 = getelementptr inbounds float, float* %0, i64 %141
  %143 = bitcast float* %142 to i64*
  %144 = load i64, i64* %143, align 1
  %145 = insertelement <2 x i64> undef, i64 %144, i32 0
  %146 = bitcast <2 x i64> %130 to <4 x float>
  %147 = bitcast <2 x i64> %140 to <4 x float>
  %148 = shufflevector <4 x float> %146, <4 x float> %147, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %149 = bitcast <2 x i64> %135 to <4 x float>
  %150 = bitcast <2 x i64> %145 to <4 x float>
  %151 = shufflevector <4 x float> %149, <4 x float> %150, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %152 = fadd <4 x float> %148, %151
  %153 = fsub <4 x float> %148, %151
  %154 = fadd <4 x float> %124, %152
  %155 = fsub <4 x float> %124, %152
  %156 = fmul <4 x float> %155, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFE6A09E60000000, float 0xBFE6A09E60000000>
  %157 = fmul <4 x float> %155, <float 0x3FE6A09E60000000, float 0xBFE6A09E60000000, float 0x3FE6A09E60000000, float 0xBFE6A09E60000000>
  %158 = shufflevector <4 x float> %157, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %159 = fadd <4 x float> %156, %158
  %160 = fmul <4 x float> %153, <float 1.000000e+00, float -1.000000e+00, float 1.000000e+00, float -1.000000e+00>
  %161 = shufflevector <4 x float> %160, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %162 = fadd <4 x float> %125, %161
  %163 = fsub <4 x float> %125, %161
  %164 = fmul <4 x float> %162, <float 0x3FED906BE0000000, float 0x3FED906BE0000000, float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000>
  %165 = fmul <4 x float> %162, <float 0x3FD87DE2C0000000, float 0xBFD87DE2C0000000, float 0x3FED906BE0000000, float 0xBFED906BE0000000>
  %166 = shufflevector <4 x float> %165, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %167 = fadd <4 x float> %164, %166
  %168 = fmul <4 x float> %163, <float 0x3FD87DE2C0000000, float 0x3FD87DE2C0000000, float 0xBFED906BE0000000, float 0xBFED906BE0000000>
  %169 = fmul <4 x float> %163, <float 0x3FED906BE0000000, float 0xBFED906BE0000000, float 0xBFD87DE2C0000000, float 0x3FD87DE2C0000000>
  %170 = shufflevector <4 x float> %169, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %171 = fadd <4 x float> %168, %170
  %172 = bitcast <4 x float> %154 to <2 x i64>
  %173 = extractelement <2 x i64> %172, i32 0
  store i64 %173, i64* %100, align 1
  %174 = bitcast <4 x float> %154 to <4 x i32>
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = extractelement <2 x i64> %176, i32 0
  store i64 %177, i64* %110, align 1
  %178 = bitcast <4 x float> %159 to <2 x i64>
  %179 = extractelement <2 x i64> %178, i32 0
  store i64 %179, i64* %128, align 1
  %180 = bitcast <4 x float> %159 to <4 x i32>
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = extractelement <2 x i64> %182, i32 0
  store i64 %183, i64* %138, align 1
  %184 = bitcast <4 x float> %167 to <2 x i64>
  %185 = extractelement <2 x i64> %184, i32 0
  store i64 %185, i64* %105, align 1
  %186 = bitcast <4 x float> %167 to <4 x i32>
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %188 = bitcast <4 x i32> %187 to <2 x i64>
  %189 = extractelement <2 x i64> %188, i32 0
  store i64 %189, i64* %115, align 1
  %190 = bitcast <4 x float> %171 to <2 x i64>
  %191 = extractelement <2 x i64> %190, i32 0
  store i64 %191, i64* %133, align 1
  %192 = bitcast <4 x float> %171 to <4 x i32>
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %194 = bitcast <4 x i32> %193 to <2 x i64>
  %195 = extractelement <2 x i64> %194, i32 0
  store i64 %195, i64* %143, align 1
  %196 = add nuw nsw i64 %98, 2
  %197 = icmp ult i64 %196, 72
  br i1 %197, label %97, label %198

198:                                              ; preds = %97
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc16rftfsub_128_SSE2EPf(float* nocapture) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %1, %2
  %3 = phi i64 [ 2, %1 ], [ %52, %2 ]
  %4 = phi i64 [ 1, %1 ], [ %51, %2 ]
  %5 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %4
  %6 = bitcast float* %5 to <4 x float>*
  %7 = load <4 x float>, <4 x float>* %6, align 4
  %8 = sub nuw nsw i64 29, %4
  %9 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %8
  %10 = bitcast float* %9 to <4 x float>*
  %11 = load <4 x float>, <4 x float>* %10, align 4
  %12 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %11
  %13 = shufflevector <4 x float> %12, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %14 = getelementptr inbounds float, float* %0, i64 %3
  %15 = bitcast float* %14 to <4 x float>*
  %16 = load <4 x float>, <4 x float>* %15, align 1
  %17 = add nuw nsw i64 %3, 4
  %18 = getelementptr inbounds float, float* %0, i64 %17
  %19 = bitcast float* %18 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 1
  %21 = sub nuw nsw i64 122, %3
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 1
  %25 = sub nuw nsw i64 126, %3
  %26 = getelementptr inbounds float, float* %0, i64 %25
  %27 = bitcast float* %26 to <4 x float>*
  %28 = load <4 x float>, <4 x float>* %27, align 1
  %29 = shufflevector <4 x float> %16, <4 x float> %20, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %30 = shufflevector <4 x float> %16, <4 x float> %20, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %31 = shufflevector <4 x float> %28, <4 x float> %24, <4 x i32> <i32 2, i32 0, i32 6, i32 4>
  %32 = shufflevector <4 x float> %28, <4 x float> %24, <4 x i32> <i32 3, i32 1, i32 7, i32 5>
  %33 = fsub <4 x float> %29, %31
  %34 = fadd <4 x float> %30, %32
  %35 = fmul <4 x float> %13, %33
  %36 = fmul <4 x float> %7, %34
  %37 = fmul <4 x float> %13, %34
  %38 = fmul <4 x float> %7, %33
  %39 = fsub <4 x float> %35, %36
  %40 = fadd <4 x float> %37, %38
  %41 = fsub <4 x float> %29, %39
  %42 = fsub <4 x float> %30, %40
  %43 = fadd <4 x float> %31, %39
  %44 = fsub <4 x float> %32, %40
  %45 = shufflevector <4 x float> %41, <4 x float> %42, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %46 = shufflevector <4 x float> %41, <4 x float> %42, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %47 = shufflevector <4 x float> %43, <4 x float> %44, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %48 = shufflevector <4 x float> %43, <4 x float> %44, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %49 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %50 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  store <4 x float> %45, <4 x float>* %15, align 1
  store <4 x float> %46, <4 x float>* %19, align 1
  store <4 x float> %49, <4 x float>* %23, align 1
  store <4 x float> %50, <4 x float>* %27, align 1
  %51 = add nuw nsw i64 %4, 4
  %52 = add nuw nsw i64 %3, 8
  %53 = icmp ult i64 %52, 57
  br i1 %53, label %2, label %54

54:                                               ; preds = %2
  %55 = getelementptr inbounds float, float* %0, i64 58
  %56 = getelementptr inbounds float, float* %0, i64 70
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds float, float* %0, i64 71
  %59 = load float, float* %58, align 4
  %60 = bitcast float* %55 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4
  %62 = shufflevector <4 x float> %61, <4 x float> undef, <2 x i32> <i32 0, i32 2>
  %63 = insertelement <2 x float> undef, float %57, i32 0
  %64 = getelementptr inbounds float, float* %0, i64 66
  %65 = bitcast float* %64 to <4 x float>*
  %66 = load <4 x float>, <4 x float>* %65, align 4
  %67 = extractelement <4 x float> %66, i32 2
  %68 = insertelement <2 x float> %63, float %67, i32 1
  %69 = fsub <2 x float> %62, %68
  %70 = shufflevector <2 x float> %69, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %71 = shufflevector <4 x float> %61, <4 x float> undef, <2 x i32> <i32 1, i32 3>
  %72 = insertelement <2 x float> undef, float %59, i32 0
  %73 = extractelement <4 x float> %66, i32 3
  %74 = insertelement <2 x float> %72, float %73, i32 1
  %75 = fadd <2 x float> %71, %74
  %76 = shufflevector <2 x float> %75, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %77 = fmul <4 x float> %76, <float 0x3FB2C81060000000, float 0x3F762AA000000000, float 0x3FA917A6C0000000, float 0x3F63B93000000000>
  %78 = fmul <4 x float> %70, <float 0x3F762AA000000000, float 0x3FB2C81060000000, float 0x3F63B93000000000, float 0x3FA917A6C0000000>
  %79 = fsub <4 x float> %78, %77
  %80 = fadd <4 x float> %78, %77
  %81 = shufflevector <4 x float> %79, <4 x float> %80, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %82 = extractelement <4 x float> %79, i32 0
  %83 = fadd float %57, %82
  store float %83, float* %56, align 4
  %84 = extractelement <4 x float> %80, i32 1
  %85 = fsub float %59, %84
  store float %85, float* %58, align 4
  %86 = fsub <4 x float> %61, %81
  %87 = bitcast float* %55 to <4 x float>*
  store <4 x float> %86, <4 x float>* %87, align 4
  %88 = getelementptr inbounds float, float* %0, i64 62
  %89 = load float, float* %88, align 4
  %90 = extractelement <4 x float> %66, i32 0
  %91 = fsub float %89, %90
  %92 = getelementptr inbounds float, float* %0, i64 63
  %93 = load float, float* %92, align 4
  %94 = extractelement <4 x float> %66, i32 1
  %95 = fadd float %93, %94
  %96 = fmul float %91, 0x3F43BC4000000000
  %97 = fmul float %95, 0x3F991F6600000000
  %98 = fsub float %96, %97
  %99 = fmul float %95, 0x3F43BC4000000000
  %100 = fmul float %91, 0x3F991F6600000000
  %101 = fadd float %100, %99
  %102 = fsub float %89, %98
  store float %102, float* %88, align 4
  %103 = fsub float %93, %101
  store float %103, float* %92, align 4
  %104 = insertelement <4 x float> undef, float %98, i32 0
  %105 = insertelement <4 x float> %104, float %101, i32 1
  %106 = shufflevector <4 x float> %105, <4 x float> %79, <4 x i32> <i32 0, i32 1, i32 6, i32 undef>
  %107 = shufflevector <4 x float> %106, <4 x float> %80, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %108 = fadd <4 x float> %66, %107
  %109 = fsub <4 x float> %66, %107
  %110 = shufflevector <4 x float> %108, <4 x float> %109, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %111 = bitcast float* %64 to <4 x float>*
  store <4 x float> %110, <4 x float>* %111, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc16rftbsub_128_SSE2EPf(float* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds float, float* %0, i64 1
  %3 = load float, float* %2, align 4
  %4 = fsub float -0.000000e+00, %3
  store float %4, float* %2, align 4
  br label %5

5:                                                ; preds = %1, %5
  %6 = phi i64 [ 2, %1 ], [ %55, %5 ]
  %7 = phi i64 [ 1, %1 ], [ %54, %5 ]
  %8 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %7
  %9 = bitcast float* %8 to <4 x float>*
  %10 = load <4 x float>, <4 x float>* %9, align 4
  %11 = sub nuw nsw i64 29, %7
  %12 = getelementptr inbounds float, float* getelementptr inbounds ([64 x float], [64 x float]* @_ZN6webrtcL6rdft_wE, i64 0, i64 32), i64 %11
  %13 = bitcast float* %12 to <4 x float>*
  %14 = load <4 x float>, <4 x float>* %13, align 4
  %15 = fsub <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %14
  %16 = shufflevector <4 x float> %15, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %17 = getelementptr inbounds float, float* %0, i64 %6
  %18 = bitcast float* %17 to <4 x float>*
  %19 = load <4 x float>, <4 x float>* %18, align 1
  %20 = add nuw nsw i64 %6, 4
  %21 = getelementptr inbounds float, float* %0, i64 %20
  %22 = bitcast float* %21 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 1
  %24 = sub nuw nsw i64 122, %6
  %25 = getelementptr inbounds float, float* %0, i64 %24
  %26 = bitcast float* %25 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 1
  %28 = sub nuw nsw i64 126, %6
  %29 = getelementptr inbounds float, float* %0, i64 %28
  %30 = bitcast float* %29 to <4 x float>*
  %31 = load <4 x float>, <4 x float>* %30, align 1
  %32 = shufflevector <4 x float> %19, <4 x float> %23, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %33 = shufflevector <4 x float> %19, <4 x float> %23, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %34 = shufflevector <4 x float> %31, <4 x float> %27, <4 x i32> <i32 2, i32 0, i32 6, i32 4>
  %35 = shufflevector <4 x float> %31, <4 x float> %27, <4 x i32> <i32 3, i32 1, i32 7, i32 5>
  %36 = fsub <4 x float> %32, %34
  %37 = fadd <4 x float> %33, %35
  %38 = fmul <4 x float> %16, %36
  %39 = fmul <4 x float> %10, %37
  %40 = fmul <4 x float> %16, %37
  %41 = fmul <4 x float> %10, %36
  %42 = fadd <4 x float> %38, %39
  %43 = fsub <4 x float> %40, %41
  %44 = fsub <4 x float> %32, %42
  %45 = fsub <4 x float> %43, %33
  %46 = fadd <4 x float> %34, %42
  %47 = fsub <4 x float> %43, %35
  %48 = shufflevector <4 x float> %44, <4 x float> %45, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %49 = shufflevector <4 x float> %44, <4 x float> %45, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %50 = shufflevector <4 x float> %46, <4 x float> %47, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %51 = shufflevector <4 x float> %46, <4 x float> %47, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %52 = shufflevector <4 x float> %50, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %53 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  store <4 x float> %48, <4 x float>* %18, align 1
  store <4 x float> %49, <4 x float>* %22, align 1
  store <4 x float> %52, <4 x float>* %26, align 1
  store <4 x float> %53, <4 x float>* %30, align 1
  %54 = add nuw nsw i64 %7, 4
  %55 = add nuw nsw i64 %6, 8
  %56 = icmp ult i64 %55, 57
  br i1 %56, label %5, label %57

57:                                               ; preds = %5
  %58 = getelementptr inbounds float, float* %0, i64 58
  %59 = load float, float* %58, align 4
  %60 = getelementptr inbounds float, float* %0, i64 70
  %61 = load float, float* %60, align 4
  %62 = fsub float %59, %61
  %63 = getelementptr inbounds float, float* %0, i64 59
  %64 = load float, float* %63, align 4
  %65 = getelementptr inbounds float, float* %0, i64 71
  %66 = load float, float* %65, align 4
  %67 = fadd float %64, %66
  %68 = fmul float %62, 0x3F762AA000000000
  %69 = fmul float %67, 0x3FB2C81060000000
  %70 = fadd float %68, %69
  %71 = fmul float %67, 0x3F762AA000000000
  %72 = fmul float %62, 0x3FB2C81060000000
  %73 = fsub float %71, %72
  %74 = fadd float %70, %61
  store float %74, float* %60, align 4
  %75 = fsub float %73, %66
  store float %75, float* %65, align 4
  %76 = getelementptr inbounds float, float* %0, i64 60
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds float, float* %0, i64 65
  %79 = bitcast float* %78 to <4 x float>*
  %80 = load <4 x float>, <4 x float>* %79, align 4
  %81 = extractelement <4 x float> %80, i32 3
  %82 = fsub float %77, %81
  %83 = getelementptr inbounds float, float* %0, i64 61
  %84 = load float, float* %83, align 4
  %85 = getelementptr inbounds float, float* %0, i64 69
  %86 = load float, float* %85, align 4
  %87 = fadd float %84, %86
  %88 = fmul float %82, 0x3F63B93000000000
  %89 = fmul float %87, 0x3FA917A6C0000000
  %90 = fadd float %88, %89
  %91 = fmul float %87, 0x3F63B93000000000
  %92 = fmul float %82, 0x3FA917A6C0000000
  %93 = fsub float %91, %92
  %94 = insertelement <4 x float> undef, float %59, i32 0
  %95 = insertelement <4 x float> %94, float %73, i32 1
  %96 = insertelement <4 x float> %95, float %77, i32 2
  %97 = insertelement <4 x float> %96, float %93, i32 3
  %98 = insertelement <4 x float> undef, float %70, i32 0
  %99 = insertelement <4 x float> %98, float %64, i32 1
  %100 = insertelement <4 x float> %99, float %90, i32 2
  %101 = insertelement <4 x float> %100, float %84, i32 3
  %102 = fsub <4 x float> %97, %101
  %103 = bitcast float* %58 to <4 x float>*
  store <4 x float> %102, <4 x float>* %103, align 4
  %104 = fsub float %93, %86
  store float %104, float* %85, align 4
  %105 = getelementptr inbounds float, float* %0, i64 62
  %106 = load float, float* %105, align 4
  %107 = extractelement <4 x float> %80, i32 1
  %108 = fsub float %106, %107
  %109 = getelementptr inbounds float, float* %0, i64 63
  %110 = load float, float* %109, align 4
  %111 = extractelement <4 x float> %80, i32 2
  %112 = fadd float %110, %111
  %113 = fmul float %108, 0x3F43BC4000000000
  %114 = fmul float %112, 0x3F991F6600000000
  %115 = fadd float %113, %114
  %116 = fmul float %112, 0x3F43BC4000000000
  %117 = fmul float %108, 0x3F991F6600000000
  %118 = fsub float %116, %117
  %119 = fsub float %106, %115
  store float %119, float* %105, align 4
  %120 = fsub float %118, %110
  store float %120, float* %109, align 4
  %121 = insertelement <4 x float> <float -0.000000e+00, float undef, float undef, float undef>, float %115, i32 1
  %122 = insertelement <4 x float> %121, float %118, i32 2
  %123 = insertelement <4 x float> %122, float %90, i32 3
  %124 = fsub <4 x float> %123, %80
  %125 = fadd <4 x float> %123, %80
  %126 = shufflevector <4 x float> %124, <4 x float> %125, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %127 = bitcast float* %78 to <4 x float>*
  store <4 x float> %126, <4 x float>* %127, align 4
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
