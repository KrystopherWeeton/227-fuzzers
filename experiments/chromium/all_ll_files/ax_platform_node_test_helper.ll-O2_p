; ModuleID = '../../ui/accessibility/platform/ax_platform_node_test_helper.cc'
source_filename = "../../ui/accessibility/platform/ax_platform_node_test_helper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::AXPlatformNode" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.ui::AXPlatformNodeDelegate" = type { i32 (...)** }
%struct._AtkObject = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2ui24AXPlatformNodeTestHelper11GetTreeSizeEPNS_14AXPlatformNodeE(%"class.ui::AXPlatformNode"*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq %"class.ui::AXPlatformNode"* %0, null
  br i1 %2, label %33, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.ui::AXPlatformNode"* %0 to %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)***
  %5 = load %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)**, %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)*, %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)** %5, i64 3
  %7 = load %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)*, %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)** %6, align 8
  %8 = tail call %"class.ui::AXPlatformNodeDelegate"* %7(%"class.ui::AXPlatformNode"* nonnull %0) #5
  %9 = bitcast %"class.ui::AXPlatformNodeDelegate"* %8 to i32 (%"class.ui::AXPlatformNodeDelegate"*)***
  %10 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)**, i32 (%"class.ui::AXPlatformNodeDelegate"*)*** %9, align 8
  %11 = getelementptr inbounds i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %10, i64 12
  %12 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %11, align 8
  %13 = tail call i32 %12(%"class.ui::AXPlatformNodeDelegate"* %8) #5
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %33

15:                                               ; preds = %3
  %16 = bitcast %"class.ui::AXPlatformNodeDelegate"* %8 to %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)***
  br label %17

17:                                               ; preds = %15, %17
  %18 = phi i32 [ 0, %15 ], [ %27, %17 ]
  %19 = phi i32 [ 1, %15 ], [ %26, %17 ]
  %20 = load %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)**, %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)*** %16, align 8
  %21 = getelementptr inbounds %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)*, %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)** %20, i64 13
  %22 = load %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)*, %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)** %21, align 8
  %23 = tail call %struct._AtkObject* %22(%"class.ui::AXPlatformNodeDelegate"* %8, i32 %18) #5
  %24 = tail call %"class.ui::AXPlatformNode"* @_ZN2ui14AXPlatformNode24FromNativeViewAccessibleEP10_AtkObject(%struct._AtkObject* %23) #5
  %25 = tail call i32 @_ZN2ui24AXPlatformNodeTestHelper11GetTreeSizeEPNS_14AXPlatformNodeE(%"class.ui::AXPlatformNode"* %24)
  %26 = add nsw i32 %25, %19
  %27 = add nuw nsw i32 %18, 1
  %28 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)**, i32 (%"class.ui::AXPlatformNodeDelegate"*)*** %9, align 8
  %29 = getelementptr inbounds i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %28, i64 12
  %30 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %29, align 8
  %31 = tail call i32 %30(%"class.ui::AXPlatformNodeDelegate"* %8) #5
  %32 = icmp slt i32 %27, %31
  br i1 %32, label %17, label %33

33:                                               ; preds = %17, %3, %1
  %34 = phi i32 [ 0, %1 ], [ 1, %3 ], [ %26, %17 ]
  ret i32 %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.ui::AXPlatformNode"* @_ZN2ui14AXPlatformNode24FromNativeViewAccessibleEP10_AtkObject(%struct._AtkObject*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::AXPlatformNode"* @_ZN2ui24AXPlatformNodeTestHelper15FindChildByNameEPNS_14AXPlatformNodeERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.ui::AXPlatformNode"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = icmp eq %"class.ui::AXPlatformNode"* %0, null
  br i1 %4, label %95, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.ui::AXPlatformNode"* %0 to %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)***
  %7 = load %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)**, %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)*, %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)** %7, i64 3
  %9 = load %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)*, %"class.ui::AXPlatformNodeDelegate"* (%"class.ui::AXPlatformNode"*)** %8, align 8
  %10 = tail call %"class.ui::AXPlatformNodeDelegate"* %9(%"class.ui::AXPlatformNode"* nonnull %0) #5
  %11 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #5
  %12 = bitcast %"class.ui::AXPlatformNodeDelegate"* %10 to void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)***
  %13 = load void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)**, void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)*, void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)** %13, i64 30
  %15 = load void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)*, void (%"class.std::__1::basic_string"*, %"class.ui::AXPlatformNodeDelegate"*)** %14, align 8
  call void %15(%"class.std::__1::basic_string"* nonnull sret %3, %"class.ui::AXPlatformNodeDelegate"* %10) #5
  %16 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %18 to i64
  %23 = select i1 %19, i64 %21, i64 %22
  %24 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = zext i8 %26 to i64
  %31 = select i1 %27, i64 %29, i64 %30
  %32 = icmp eq i64 %23, %31
  br i1 %32, label %33, label %62

33:                                               ; preds = %5
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = select i1 %19, i8* %35, i8* %11
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %40 = select i1 %27, i8* %38, i8* %39
  %41 = icmp eq i64 %23, 0
  br i1 %19, label %49, label %42

42:                                               ; preds = %33
  br i1 %41, label %48, label %43

43:                                               ; preds = %42
  %44 = ptrtoint i8* %35 to i64
  %45 = trunc i64 %44 to i8
  %46 = load i8, i8* %40, align 1
  %47 = icmp eq i8 %46, %45
  br i1 %47, label %50, label %62

48:                                               ; preds = %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  br label %95

49:                                               ; preds = %33
  br i1 %41, label %97, label %67

50:                                               ; preds = %43, %57
  %51 = phi i64 [ %54, %57 ], [ %22, %43 ]
  %52 = phi i8* [ %55, %57 ], [ %11, %43 ]
  %53 = phi i8* [ %58, %57 ], [ %40, %43 ]
  %54 = add i64 %51, -1
  %55 = getelementptr inbounds i8, i8* %52, i64 1
  %56 = icmp eq i64 %54, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %50
  %58 = getelementptr inbounds i8, i8* %53, i64 1
  %59 = load i8, i8* %55, align 1
  %60 = load i8, i8* %58, align 1
  %61 = icmp eq i8 %59, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %57, %43, %5
  %63 = phi i1 [ false, %5 ], [ false, %43 ], [ false, %57 ], [ true, %50 ]
  br i1 %19, label %64, label %70

64:                                               ; preds = %62
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void @_ZdlPv(i8* %66) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  br i1 %63, label %95, label %71

67:                                               ; preds = %49
  %68 = call i32 @bcmp(i8* %36, i8* %40, i64 %23) #5
  %69 = icmp eq i32 %68, 0
  call void @_ZdlPv(i8* %35) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  br i1 %69, label %95, label %71

70:                                               ; preds = %62
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  br i1 %63, label %95, label %71

71:                                               ; preds = %64, %70, %67
  %72 = bitcast %"class.ui::AXPlatformNodeDelegate"* %10 to %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)***
  %73 = bitcast %"class.ui::AXPlatformNodeDelegate"* %10 to i32 (%"class.ui::AXPlatformNodeDelegate"*)***
  %74 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)**, i32 (%"class.ui::AXPlatformNodeDelegate"*)*** %73, align 8
  %75 = getelementptr inbounds i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %74, i64 12
  %76 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %75, align 8
  %77 = call i32 %76(%"class.ui::AXPlatformNodeDelegate"* %10) #5
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %85, label %95

79:                                               ; preds = %85
  %80 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)**, i32 (%"class.ui::AXPlatformNodeDelegate"*)*** %73, align 8
  %81 = getelementptr inbounds i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %80, i64 12
  %82 = load i32 (%"class.ui::AXPlatformNodeDelegate"*)*, i32 (%"class.ui::AXPlatformNodeDelegate"*)** %81, align 8
  %83 = call i32 %82(%"class.ui::AXPlatformNodeDelegate"* %10) #5
  %84 = icmp slt i32 %94, %83
  br i1 %84, label %85, label %95

85:                                               ; preds = %71, %79
  %86 = phi i32 [ %94, %79 ], [ 0, %71 ]
  %87 = load %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)**, %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)*** %72, align 8
  %88 = getelementptr inbounds %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)*, %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)** %87, i64 13
  %89 = load %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)*, %struct._AtkObject* (%"class.ui::AXPlatformNodeDelegate"*, i32)** %88, align 8
  %90 = call %struct._AtkObject* %89(%"class.ui::AXPlatformNodeDelegate"* %10, i32 %86) #5
  %91 = call %"class.ui::AXPlatformNode"* @_ZN2ui14AXPlatformNode24FromNativeViewAccessibleEP10_AtkObject(%struct._AtkObject* %90) #5
  %92 = call %"class.ui::AXPlatformNode"* @_ZN2ui24AXPlatformNodeTestHelper15FindChildByNameEPNS_14AXPlatformNodeERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(%"class.ui::AXPlatformNode"* %91, %"class.std::__1::basic_string"* dereferenceable(24) %1)
  %93 = icmp eq %"class.ui::AXPlatformNode"* %92, null
  %94 = add nuw nsw i32 %86, 1
  br i1 %93, label %79, label %95

95:                                               ; preds = %85, %79, %64, %71, %2, %70, %48, %67, %97
  %96 = phi %"class.ui::AXPlatformNode"* [ %0, %97 ], [ %0, %67 ], [ %0, %48 ], [ %0, %70 ], [ null, %2 ], [ null, %71 ], [ %0, %64 ], [ %92, %85 ], [ null, %79 ]
  ret %"class.ui::AXPlatformNode"* %96

97:                                               ; preds = %49
  call void @_ZdlPv(i8* %35) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #5
  br label %95
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
