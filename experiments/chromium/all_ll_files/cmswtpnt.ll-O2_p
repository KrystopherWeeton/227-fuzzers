; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmswtpnt.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmswtpnt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.cmsCIEXYZ = type { double, double, double }
%struct.cmsCIExyY = type { double, double, double }
%struct.ISOTEMPERATURE = type { double, double, double, double }
%struct.cmsMAT3 = type { [3 x %struct.cmsVEC3] }
%struct.cmsVEC3 = type { [3 x double] }
%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct.cmsCIExyYTRIPLE = type { %struct.cmsCIExyY, %struct.cmsCIExyY, %struct.cmsCIExyY }

@cmsD50_XYZ.D50XYZ = internal global %struct.cmsCIEXYZ { double 0x3FEEDAB9F559B3D0, double 1.000000e+00, double 0x3FEA6594AF4F0D84 }, align 8
@cmsD50_xyY.D50xyY = internal global %struct.cmsCIExyY zeroinitializer, align 8
@.str = private unnamed_addr constant [36 x i8] c"cmsWhitePointFromTemp: invalid temp\00", align 1
@isotempdata = internal unnamed_addr constant [31 x %struct.ISOTEMPERATURE] [%struct.ISOTEMPERATURE { double 0.000000e+00, double 1.800600e-01, double 2.635200e-01, double -2.434100e-01 }, %struct.ISOTEMPERATURE { double 1.000000e+01, double 1.806600e-01, double 2.658900e-01, double -2.547900e-01 }, %struct.ISOTEMPERATURE { double 2.000000e+01, double 1.813300e-01, double 2.684600e-01, double -2.687600e-01 }, %struct.ISOTEMPERATURE { double 3.000000e+01, double 1.820800e-01, double 2.711900e-01, double -2.853900e-01 }, %struct.ISOTEMPERATURE { double 4.000000e+01, double 1.829300e-01, double 2.740700e-01, double -3.047000e-01 }, %struct.ISOTEMPERATURE { double 5.000000e+01, double 1.838800e-01, double 2.770900e-01, double -3.267500e-01 }, %struct.ISOTEMPERATURE { double 6.000000e+01, double 1.849400e-01, double 2.802100e-01, double -3.515600e-01 }, %struct.ISOTEMPERATURE { double 7.000000e+01, double 1.861100e-01, double 2.834200e-01, double -3.791500e-01 }, %struct.ISOTEMPERATURE { double 8.000000e+01, double 1.874000e-01, double 2.866800e-01, double -4.095500e-01 }, %struct.ISOTEMPERATURE { double 9.000000e+01, double 1.888000e-01, double 2.899700e-01, double -4.427800e-01 }, %struct.ISOTEMPERATURE { double 1.000000e+02, double 1.903200e-01, double 2.932600e-01, double -4.788800e-01 }, %struct.ISOTEMPERATURE { double 1.250000e+02, double 1.946200e-01, double 3.014100e-01, double -5.820400e-01 }, %struct.ISOTEMPERATURE { double 1.500000e+02, double 1.996200e-01, double 3.092100e-01, double -7.047100e-01 }, %struct.ISOTEMPERATURE { double 1.750000e+02, double 2.052500e-01, double 3.164700e-01, double -8.490100e-01 }, %struct.ISOTEMPERATURE { double 2.000000e+02, double 2.114200e-01, double 3.231200e-01, double -1.018200e+00 }, %struct.ISOTEMPERATURE { double 2.250000e+02, double 2.180700e-01, double 3.290900e-01, double -1.216800e+00 }, %struct.ISOTEMPERATURE { double 2.500000e+02, double 2.251100e-01, double 3.343900e-01, double -1.451200e+00 }, %struct.ISOTEMPERATURE { double 2.750000e+02, double 2.324700e-01, double 3.390400e-01, double -1.729800e+00 }, %struct.ISOTEMPERATURE { double 3.000000e+02, double 2.401000e-01, double 3.430800e-01, double -2.063700e+00 }, %struct.ISOTEMPERATURE { double 3.250000e+02, double 2.470200e-01, double 3.465500e-01, double -2.468100e+00 }, %struct.ISOTEMPERATURE { double 3.500000e+02, double 2.559100e-01, double 3.495100e-01, double -2.964100e+00 }, %struct.ISOTEMPERATURE { double 3.750000e+02, double 2.640000e-01, double 3.520000e-01, double -3.581400e+00 }, %struct.ISOTEMPERATURE { double 4.000000e+02, double 2.721800e-01, double 3.540700e-01, double -4.363300e+00 }, %struct.ISOTEMPERATURE { double 4.250000e+02, double 2.803900e-01, double 3.557700e-01, double -5.376200e+00 }, %struct.ISOTEMPERATURE { double 4.500000e+02, double 2.886300e-01, double 3.571400e-01, double -6.726200e+00 }, %struct.ISOTEMPERATURE { double 4.750000e+02, double 2.968500e-01, double 3.582300e-01, double -8.595500e+00 }, %struct.ISOTEMPERATURE { double 5.000000e+02, double 3.050500e-01, double 3.590700e-01, double -1.132400e+01 }, %struct.ISOTEMPERATURE { double 5.250000e+02, double 3.132000e-01, double 3.596800e-01, double -1.562800e+01 }, %struct.ISOTEMPERATURE { double 5.500000e+02, double 3.212900e-01, double 3.601100e-01, double -2.332500e+01 }, %struct.ISOTEMPERATURE { double 5.750000e+02, double 3.293100e-01, double 3.603800e-01, double -4.077000e+01 }, %struct.ISOTEMPERATURE { double 6.000000e+02, double 3.372400e-01, double 3.605100e-01, double -1.164500e+02 }], align 16
@__const._cmsAdaptationMatrix.LamRigg = private unnamed_addr constant %struct.cmsMAT3 { [3 x %struct.cmsVEC3] [%struct.cmsVEC3 { [3 x double] [double 8.951000e-01, double 2.664000e-01, double -1.614000e-01] }, %struct.cmsVEC3 { [3 x double] [double 0xBFE801A36E2EB1C4, double 1.713500e+00, double 3.670000e-02] }, %struct.cmsVEC3 { [3 x double] [double 3.890000e-02, double -6.850000e-02, double 1.029600e+00] }] }, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.cmsCIEXYZ* @cmsD50_XYZ() local_unnamed_addr #0 {
  ret %struct.cmsCIEXYZ* @cmsD50_XYZ.D50XYZ
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %struct.cmsCIExyY* @cmsD50_xyY() local_unnamed_addr #1 {
  tail call void @cmsXYZ2xyY(%struct.cmsCIExyY* nonnull @cmsD50_xyY.D50xyY, %struct.cmsCIEXYZ* nonnull @cmsD50_XYZ.D50XYZ) #6
  ret %struct.cmsCIExyY* @cmsD50_xyY.D50xyY
}

declare void @cmsXYZ2xyY(%struct.cmsCIExyY*, %struct.cmsCIEXYZ*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsWhitePointFromTemp(%struct.cmsCIExyY* nocapture, double) local_unnamed_addr #1 {
  %3 = fmul double %1, %1
  %4 = fmul double %3, %1
  %5 = fcmp oge double %1, 4.000000e+03
  %6 = fcmp ole double %1, 7.000000e+03
  %7 = and i1 %5, %6
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = fcmp ogt double %1, 7.000000e+03
  %10 = fcmp ole double %1, 2.500000e+04
  %11 = and i1 %9, %10
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* null, i32 2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0)) #6
  br label %35

13:                                               ; preds = %8, %2
  %14 = phi double [ 4.607000e+00, %2 ], [ 2.006400e+00, %8 ]
  %15 = phi double [ 2.967800e+00, %2 ], [ 1.901800e+00, %8 ]
  %16 = phi double [ 9.911000e-02, %2 ], [ 2.474800e-01, %8 ]
  %17 = phi double [ 2.440630e-01, %2 ], [ 2.370400e-01, %8 ]
  %18 = fdiv double 1.000000e+09, %4
  %19 = fmul double %18, %14
  %20 = fdiv double 1.000000e+06, %3
  %21 = fmul double %20, %15
  %22 = fsub double %21, %19
  %23 = fdiv double 1.000000e+03, %1
  %24 = fmul double %23, %16
  %25 = fadd double %24, %22
  %26 = fadd double %25, %17
  %27 = fmul double %26, %26
  %28 = fmul double %27, 3.000000e+00
  %29 = fmul double %26, 2.870000e+00
  %30 = fsub double %29, %28
  %31 = fadd double %30, -2.750000e-01
  %32 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %0, i64 0, i32 0
  store double %26, double* %32, align 8
  %33 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %0, i64 0, i32 1
  store double %31, double* %33, align 8
  %34 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %0, i64 0, i32 2
  store double 1.000000e+00, double* %34, align 8
  br label %35

35:                                               ; preds = %13, %12
  %36 = phi i32 [ 1, %13 ], [ 0, %12 ]
  ret i32 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @cmsSignalError(%struct._cmsContext_struct*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @cmsTempFromWhitePoint(double* nocapture, %struct.cmsCIExyY* nocapture readonly) local_unnamed_addr #4 {
  %3 = bitcast %struct.cmsCIExyY* %1 to <2 x double>*
  %4 = load <2 x double>, <2 x double>* %3, align 8
  %5 = extractelement <2 x double> %4, i32 1
  %6 = fmul double %5, 6.000000e+00
  %7 = extractelement <2 x double> %4, i32 0
  %8 = fsub double %6, %7
  %9 = fadd double %8, 1.500000e+00
  %10 = fmul <2 x double> %4, <double 2.000000e+00, double 3.000000e+00>
  %11 = insertelement <2 x double> undef, double %9, i32 0
  %12 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> zeroinitializer
  %13 = fdiv <2 x double> %10, %12
  br label %16

14:                                               ; preds = %16
  %15 = icmp eq i64 %40, 31
  br i1 %15, label %48, label %16

16:                                               ; preds = %14, %2
  %17 = phi i64 [ 0, %2 ], [ %40, %14 ]
  %18 = phi double [ 0.000000e+00, %2 ], [ %26, %14 ]
  %19 = phi double [ 0.000000e+00, %2 ], [ %35, %14 ]
  %20 = getelementptr inbounds [31 x %struct.ISOTEMPERATURE], [31 x %struct.ISOTEMPERATURE]* @isotempdata, i64 0, i64 %17, i32 1
  %21 = bitcast double* %20 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = getelementptr inbounds [31 x %struct.ISOTEMPERATURE], [31 x %struct.ISOTEMPERATURE]* @isotempdata, i64 0, i64 %17, i32 3
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds [31 x %struct.ISOTEMPERATURE], [31 x %struct.ISOTEMPERATURE]* @isotempdata, i64 0, i64 %17, i32 0
  %26 = load double, double* %25, align 16
  %27 = fsub <2 x double> %13, %22
  %28 = extractelement <2 x double> %27, i32 0
  %29 = fmul double %28, %24
  %30 = extractelement <2 x double> %27, i32 1
  %31 = fsub double %30, %29
  %32 = fmul double %24, %24
  %33 = fadd double %32, 1.000000e+00
  %34 = tail call double @sqrt(double %33) #6
  %35 = fdiv double %31, %34
  %36 = icmp ne i64 %17, 0
  %37 = fdiv double %19, %35
  %38 = fcmp olt double %37, 0.000000e+00
  %39 = and i1 %36, %38
  %40 = add nuw nsw i64 %17, 1
  br i1 %39, label %41, label %14

41:                                               ; preds = %16
  %42 = fsub double %19, %35
  %43 = fdiv double %19, %42
  %44 = fsub double %26, %18
  %45 = fmul double %44, %43
  %46 = fadd double %18, %45
  %47 = fdiv double 1.000000e+06, %46
  store double %47, double* %0, align 8
  br label %48

48:                                               ; preds = %14, %41
  %49 = phi i32 [ 1, %41 ], [ 0, %14 ]
  ret i32 %49
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsAdaptationMatrix(%struct.cmsMAT3*, %struct.cmsMAT3*, %struct.cmsCIEXYZ* nocapture readonly, %struct.cmsCIEXYZ* nocapture readonly) local_unnamed_addr #1 {
  %5 = alloca %struct.cmsMAT3, align 8
  %6 = alloca %struct.cmsVEC3, align 8
  %7 = alloca %struct.cmsVEC3, align 8
  %8 = alloca %struct.cmsVEC3, align 8
  %9 = alloca %struct.cmsVEC3, align 8
  %10 = alloca %struct.cmsMAT3, align 8
  %11 = alloca %struct.cmsMAT3, align 8
  %12 = alloca %struct.cmsMAT3, align 8
  %13 = bitcast %struct.cmsMAT3* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %13) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 bitcast (%struct.cmsMAT3* @__const._cmsAdaptationMatrix.LamRigg to i8*), i64 72, i1 false)
  %14 = icmp eq %struct.cmsMAT3* %1, null
  %15 = select i1 %14, %struct.cmsMAT3* %12, %struct.cmsMAT3* %1
  %16 = bitcast %struct.cmsMAT3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 72, i1 false) #6
  %17 = bitcast %struct.cmsVEC3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #6
  %18 = bitcast %struct.cmsVEC3* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #6
  %19 = bitcast %struct.cmsVEC3* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -1, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #6
  %20 = bitcast %struct.cmsVEC3* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -1, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #6
  %21 = bitcast %struct.cmsMAT3* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -1, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -1, i64 72, i1 false) #6
  %22 = bitcast %struct.cmsMAT3* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %22) #6
  %23 = bitcast %struct.cmsMAT3* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %23, i64 72, i1 false) #6
  %24 = call i32 @_cmsMAT3inverse(%struct.cmsMAT3* nonnull %11, %struct.cmsMAT3* nonnull %5) #6
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %57, label %26

26:                                               ; preds = %4
  %27 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %9, i64 0, i32 0, i64 0
  %28 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %9, i64 0, i32 0, i64 2
  %29 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %9, i64 0, i32 0, i64 1
  %30 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %7, i64 0, i32 0, i64 0
  %31 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %7, i64 0, i32 0, i64 2
  %32 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %7, i64 0, i32 0, i64 1
  %33 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 0
  %34 = load double, double* %33, align 8
  %35 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 1
  %36 = load double, double* %35, align 8
  %37 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 2
  %38 = load double, double* %37, align 8
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %6, double %34, double %36, double %38) #6
  %39 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %3, i64 0, i32 0
  %40 = load double, double* %39, align 8
  %41 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %3, i64 0, i32 1
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %3, i64 0, i32 2
  %44 = load double, double* %43, align 8
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %8, double %40, double %42, double %44) #6
  call void @_cmsMAT3eval(%struct.cmsVEC3* nonnull %7, %struct.cmsMAT3* %15, %struct.cmsVEC3* nonnull %6) #6
  call void @_cmsMAT3eval(%struct.cmsVEC3* nonnull %9, %struct.cmsMAT3* %15, %struct.cmsVEC3* nonnull %8) #6
  %45 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %10, i64 0, i32 0, i64 0
  %46 = load double, double* %27, align 8
  %47 = load double, double* %30, align 8
  %48 = fdiv double %46, %47
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %45, double %48, double 0.000000e+00, double 0.000000e+00) #6
  %49 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %10, i64 0, i32 0, i64 1
  %50 = load double, double* %29, align 8
  %51 = load double, double* %32, align 8
  %52 = fdiv double %50, %51
  call void @_cmsVEC3init(%struct.cmsVEC3* %49, double 0.000000e+00, double %52, double 0.000000e+00) #6
  %53 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %10, i64 0, i32 0, i64 2
  %54 = load double, double* %28, align 8
  %55 = load double, double* %31, align 8
  %56 = fdiv double %54, %55
  call void @_cmsVEC3init(%struct.cmsVEC3* %53, double 0.000000e+00, double 0.000000e+00, double %56) #6
  call void @_cmsMAT3per(%struct.cmsMAT3* nonnull %11, %struct.cmsMAT3* nonnull %10, %struct.cmsMAT3* %15) #6
  call void @_cmsMAT3per(%struct.cmsMAT3* %0, %struct.cmsMAT3* nonnull %5, %struct.cmsMAT3* nonnull %11) #6
  br label %57

57:                                               ; preds = %4, %26
  %58 = phi i32 [ 1, %26 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %13) #6
  ret i32 %58
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_cmsBuildRGB2XYZtransferMatrix(%struct.cmsMAT3*, %struct.cmsCIExyY*, %struct.cmsCIExyYTRIPLE* nocapture readonly) local_unnamed_addr #1 {
  %4 = alloca %struct.cmsCIEXYZ, align 8
  %5 = alloca %struct.cmsMAT3, align 8
  %6 = alloca %struct.cmsMAT3, align 8
  %7 = alloca %struct.cmsVEC3, align 8
  %8 = alloca %struct.cmsVEC3, align 8
  %9 = alloca %struct.cmsMAT3, align 8
  %10 = alloca %struct.cmsMAT3, align 8
  %11 = bitcast %struct.cmsVEC3* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #6
  %12 = bitcast %struct.cmsVEC3* %8 to i8*
  %13 = bitcast %struct.cmsVEC3* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #6
  %14 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %8, i64 0, i32 0, i64 0
  %15 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %8, i64 0, i32 0, i64 1
  %16 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %8, i64 0, i32 0, i64 2
  %17 = bitcast %struct.cmsMAT3* %9 to i8*
  %18 = bitcast %struct.cmsVEC3* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 72, i1 false)
  %19 = bitcast %struct.cmsMAT3* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -1, i64 72, i1 false)
  %20 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %1, i64 0, i32 0
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct.cmsCIExyY, %struct.cmsCIExyY* %1, i64 0, i32 1
  %23 = load double, double* %22, align 8
  %24 = getelementptr inbounds %struct.cmsCIExyYTRIPLE, %struct.cmsCIExyYTRIPLE* %2, i64 0, i32 0, i32 0
  %25 = load double, double* %24, align 8
  %26 = getelementptr inbounds %struct.cmsCIExyYTRIPLE, %struct.cmsCIExyYTRIPLE* %2, i64 0, i32 0, i32 1
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds %struct.cmsCIExyYTRIPLE, %struct.cmsCIExyYTRIPLE* %2, i64 0, i32 1, i32 0
  %29 = load double, double* %28, align 8
  %30 = getelementptr inbounds %struct.cmsCIExyYTRIPLE, %struct.cmsCIExyYTRIPLE* %2, i64 0, i32 1, i32 1
  %31 = load double, double* %30, align 8
  %32 = getelementptr inbounds %struct.cmsCIExyYTRIPLE, %struct.cmsCIExyYTRIPLE* %2, i64 0, i32 2, i32 0
  %33 = load double, double* %32, align 8
  %34 = getelementptr inbounds %struct.cmsCIExyYTRIPLE, %struct.cmsCIExyYTRIPLE* %2, i64 0, i32 2, i32 1
  %35 = load double, double* %34, align 8
  %36 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %10, i64 0, i32 0, i64 0
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %36, double %25, double %29, double %33) #6
  %37 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %10, i64 0, i32 0, i64 1
  call void @_cmsVEC3init(%struct.cmsVEC3* %37, double %27, double %31, double %35) #6
  %38 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %10, i64 0, i32 0, i64 2
  %39 = fsub double 1.000000e+00, %25
  %40 = fsub double %39, %27
  %41 = fsub double 1.000000e+00, %29
  %42 = fsub double %41, %31
  %43 = fsub double 1.000000e+00, %33
  %44 = fsub double %43, %35
  call void @_cmsVEC3init(%struct.cmsVEC3* %38, double %40, double %42, double %44) #6
  %45 = call i32 @_cmsMAT3inverse(%struct.cmsMAT3* nonnull %10, %struct.cmsMAT3* nonnull %9) #6
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %82, label %47

47:                                               ; preds = %3
  %48 = fdiv double %21, %23
  %49 = fsub double 1.000000e+00, %21
  %50 = fsub double %49, %23
  %51 = fdiv double %50, %23
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %7, double %48, double 1.000000e+00, double %51) #6
  call void @_cmsMAT3eval(%struct.cmsVEC3* nonnull %8, %struct.cmsMAT3* nonnull %9, %struct.cmsVEC3* nonnull %7) #6
  %52 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 0
  %53 = load double, double* %14, align 8
  %54 = fmul double %25, %53
  %55 = load double, double* %15, align 8
  %56 = fmul double %29, %55
  %57 = load double, double* %16, align 8
  %58 = fmul double %33, %57
  call void @_cmsVEC3init(%struct.cmsVEC3* %52, double %54, double %56, double %58) #6
  %59 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 1
  %60 = load double, double* %14, align 8
  %61 = fmul double %27, %60
  %62 = load double, double* %15, align 8
  %63 = fmul double %31, %62
  %64 = load double, double* %16, align 8
  %65 = fmul double %35, %64
  call void @_cmsVEC3init(%struct.cmsVEC3* %59, double %61, double %63, double %65) #6
  %66 = getelementptr inbounds %struct.cmsMAT3, %struct.cmsMAT3* %0, i64 0, i32 0, i64 2
  %67 = load double, double* %14, align 8
  %68 = fmul double %40, %67
  %69 = load double, double* %15, align 8
  %70 = fmul double %42, %69
  %71 = load double, double* %16, align 8
  %72 = fmul double %44, %71
  call void @_cmsVEC3init(%struct.cmsVEC3* %66, double %68, double %70, double %72) #6
  %73 = bitcast %struct.cmsCIEXYZ* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #6
  %74 = bitcast %struct.cmsMAT3* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -1, i64 24, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %74) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -1, i64 72, i1 false) #6
  %75 = bitcast %struct.cmsMAT3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %75) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -1, i64 72, i1 false) #6
  call void @cmsxyY2XYZ(%struct.cmsCIEXYZ* nonnull %4, %struct.cmsCIExyY* %1) #6
  %76 = call i32 @_cmsAdaptationMatrix(%struct.cmsMAT3* nonnull %5, %struct.cmsMAT3* null, %struct.cmsCIEXYZ* nonnull %4, %struct.cmsCIEXYZ* nonnull @cmsD50_XYZ.D50XYZ) #6
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %80, label %78

78:                                               ; preds = %47
  %79 = bitcast %struct.cmsMAT3* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %75, i8* align 8 %79, i64 72, i1 false) #6
  call void @_cmsMAT3per(%struct.cmsMAT3* %0, %struct.cmsMAT3* nonnull %5, %struct.cmsMAT3* nonnull %6) #6
  br label %80

80:                                               ; preds = %47, %78
  %81 = phi i32 [ 1, %78 ], [ 0, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %75) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %74) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #6
  br label %82

82:                                               ; preds = %3, %80
  %83 = phi i32 [ %81, %80 ], [ 0, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #6
  ret i32 %83
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_cmsVEC3init(%struct.cmsVEC3*, double, double, double) local_unnamed_addr #2

declare i32 @_cmsMAT3inverse(%struct.cmsMAT3*, %struct.cmsMAT3*) local_unnamed_addr #2

declare void @_cmsMAT3eval(%struct.cmsVEC3*, %struct.cmsMAT3*, %struct.cmsVEC3*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsAdaptToIlluminant(%struct.cmsCIEXYZ* nocapture, %struct.cmsCIEXYZ* nocapture readonly, %struct.cmsCIEXYZ* nocapture readonly, %struct.cmsCIEXYZ* nocapture readonly) local_unnamed_addr #1 {
  %5 = alloca %struct.cmsMAT3, align 8
  %6 = alloca %struct.cmsVEC3, align 8
  %7 = alloca %struct.cmsVEC3, align 16
  %8 = bitcast %struct.cmsMAT3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -1, i64 72, i1 false)
  %9 = bitcast %struct.cmsVEC3* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #6
  %10 = bitcast %struct.cmsVEC3* %7 to i8*
  %11 = bitcast %struct.cmsVEC3* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #6
  %12 = bitcast %struct.cmsVEC3* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 24, i1 false)
  %13 = call i32 @_cmsAdaptationMatrix(%struct.cmsMAT3* nonnull %5, %struct.cmsMAT3* null, %struct.cmsCIEXYZ* %1, %struct.cmsCIEXYZ* %2)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %30, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %7, i64 0, i32 0, i64 2
  %17 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %3, i64 0, i32 0
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %3, i64 0, i32 1
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %3, i64 0, i32 2
  %22 = load double, double* %21, align 8
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %6, double %18, double %20, double %22) #6
  call void @_cmsMAT3eval(%struct.cmsVEC3* nonnull %7, %struct.cmsMAT3* nonnull %5, %struct.cmsVEC3* nonnull %6) #6
  %23 = bitcast %struct.cmsVEC3* %7 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 16
  %25 = bitcast %struct.cmsCIEXYZ* %0 to <2 x i64>*
  store <2 x i64> %24, <2 x i64>* %25, align 8
  %26 = bitcast double* %16 to i64*
  %27 = load i64, i64* %26, align 16
  %28 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %0, i64 0, i32 2
  %29 = bitcast double* %28 to i64*
  store i64 %27, i64* %29, align 8
  br label %30

30:                                               ; preds = %4, %15
  %31 = phi i32 [ 1, %15 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %8) #6
  ret i32 %31
}

declare void @_cmsMAT3per(%struct.cmsMAT3*, %struct.cmsMAT3*, %struct.cmsMAT3*) local_unnamed_addr #2

declare void @cmsxyY2XYZ(%struct.cmsCIEXYZ*, %struct.cmsCIExyY*) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
