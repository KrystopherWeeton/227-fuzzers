; ModuleID = '../../third_party/libjxl/src/lib/jxl/jpeg/jpeg_data.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/jpeg/jpeg_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector.22", %"class.std::__1::vector.31", %"class.std::__1::vector.45", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.17" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.24", %"struct.std::__1::array.25", i32, i8, [3 x i8] }>
%"struct.std::__1::array.24" = type { [17 x i32] }
%"struct.std::__1::array.25" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.40" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i16*, i16*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i16* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.47", i32, %"class.std::__1::vector.48", %"class.std::__1::vector.55" }
%"struct.std::__1::array.47" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem" }

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE7reserveEm = comdat any

$_ZN3jxl4jpeg8JPEGDataD2Ev = comdat any

$_ZN3jxl4jpeg8JPEGDataD0Ev = comdat any

$_ZNK3jxl4jpeg8JPEGData4NameEv = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13AppMarkerTypeENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfoENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg14JPEGQuantTableENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg15JPEGHuffmanCodeENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfo16ExtraZeroRunInfoENS_9allocatorIS4_EEE8__appendEm = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE24__emplace_back_slow_pathIJRjEEEvDpOT_ = comdat any

@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/libjxl/src/lib/jxl/jpeg/jpeg_data.cc\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"marker_order.back() == 0xd9\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"app_data.size() == info.num_app_markers\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"app_marker_type.size() == info.num_app_markers\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"com_data.size() == info.num_com_markers\00", align 1
@.str.12 = private unnamed_addr constant [35 x i8] c"scan_info.size() == info.num_scans\00", align 1
@.str.39 = private unnamed_addr constant [20 x i8] c"value_slots[4] == 1\00", align 1
@.str.65 = private unnamed_addr constant [55 x i8] c"inter_marker_data_sizes.size() == info.num_intermarker\00", align 1
@_ZTVN3jxl4jpeg8JPEGDataE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::jpeg::JPEGData"*)* @_ZN3jxl4jpeg8JPEGDataD2Ev to i8*), i8* bitcast (void (%"struct.jxl::jpeg::JPEGData"*)* @_ZN3jxl4jpeg8JPEGDataD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::jpeg::JPEGData"*)* @_ZNK3jxl4jpeg8JPEGData4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::jpeg::JPEGData"*, %"class.jxl::Visitor"*)* @_ZN3jxl4jpeg8JPEGData11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@.str.69 = private unnamed_addr constant [9 x i8] c"JPEGData\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl4jpeg8JPEGData11VisitFieldsEPNS_7VisitorE(%"struct.jxl::jpeg::JPEGData"*, %"class.jxl::Visitor"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca i32, align 4
  %14 = alloca [5 x i64], align 16
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %"class.std::__1::vector.48", align 16
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #9
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %23 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 1
  %24 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector.31"* %22 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = icmp eq i64 %28, 48
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %5, align 1
  %31 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %32 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %31, align 8
  %33 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %32, i64 3
  %34 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %33, align 8
  %35 = call i32 %34(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* nonnull %5) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %1606

37:                                               ; preds = %2
  %38 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %39 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %40 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %39, i64 12
  %41 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %40, align 8
  %42 = call zeroext i1 %41(%"class.jxl::Visitor"* %1) #9
  br i1 %42, label %43, label %75

43:                                               ; preds = %37
  %44 = load i8, i8* %5, align 1, !range !2
  %45 = icmp eq i8 %44, 0
  %46 = select i1 %45, i64 3, i64 1
  %47 = load i64, i64* %24, align 8
  %48 = load i64, i64* %26, align 8
  %49 = sub i64 %47, %48
  %50 = sdiv exact i64 %49, 48
  %51 = icmp ugt i64 %46, %50
  %52 = inttoptr i64 %48 to %"struct.jxl::jpeg::JPEGComponent"*
  %53 = inttoptr i64 %47 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %51, label %54, label %56

54:                                               ; preds = %43
  %55 = sub nsw i64 %46, %50
  call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.31"* %22, i64 %55) #9
  br label %75

56:                                               ; preds = %43
  %57 = icmp ult i64 %46, %50
  br i1 %57, label %58, label %75

58:                                               ; preds = %56
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %52, i64 %46
  %60 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %59, %53
  br i1 %60, label %74, label %61

61:                                               ; preds = %58, %72
  %62 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %63, %72 ], [ %53, %58 ]
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %62, i64 -1
  %64 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %62, i64 -1, i32 6, i32 0, i32 0
  %65 = load i16*, i16** %64, align 8
  %66 = icmp eq i16* %65, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %61
  %68 = ptrtoint i16* %65 to i64
  %69 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %62, i64 -1, i32 6, i32 0, i32 1
  %70 = bitcast i16** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = bitcast i16* %65 to i8*
  call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %67, %61
  %73 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %63, %59
  br i1 %73, label %74, label %61

74:                                               ; preds = %72, %58
  store %"struct.jxl::jpeg::JPEGComponent"* %59, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  br label %75

75:                                               ; preds = %74, %56, %54, %37
  %76 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %77 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %76, i64 12
  %78 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %77, align 8
  %79 = call zeroext i1 %78(%"class.jxl::Visitor"* %1) #9
  br i1 %79, label %80, label %181

80:                                               ; preds = %75
  %81 = bitcast i32* %4 to i8*
  %82 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %83 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  %85 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast i8** %84 to i64*
  %87 = bitcast %"class.std::__1::vector.0"* %83 to i64*
  %88 = bitcast i8** %85 to i64*
  %89 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %83, i64 0, i32 0, i32 0
  br label %90

90:                                               ; preds = %80, %179
  %91 = phi i8 [ %107, %179 ], [ -64, %80 ]
  %92 = phi i8 [ %121, %179 ], [ 0, %80 ]
  %93 = phi i64 [ %122, %179 ], [ 0, %80 ]
  %94 = phi i64 [ %123, %179 ], [ 0, %80 ]
  %95 = phi i64 [ %124, %179 ], [ 0, %80 ]
  %96 = phi i64 [ %111, %179 ], [ 0, %80 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #9
  %97 = zext i8 %91 to i32
  %98 = add nsw i32 %97, -192
  store i32 %98, i32* %4, align 4
  %99 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %82, align 8
  %100 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %99, i64 5
  %101 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %100, align 8
  %102 = call i32 %101(%"class.jxl::Visitor"* %1, i64 6, i32 0, i32* nonnull %4) #9
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %119

104:                                              ; preds = %90
  %105 = load i32, i32* %4, align 4
  %106 = trunc i32 %105 to i8
  %107 = add i8 %106, -64
  %108 = and i8 %107, -16
  %109 = icmp eq i8 %108, -32
  %110 = zext i1 %109 to i64
  %111 = add i64 %96, %110
  switch i8 %106, label %120 [
    i8 62, label %112
    i8 26, label %114
    i8 63, label %116
    i8 29, label %118
  ]

112:                                              ; preds = %104
  %113 = add i64 %95, 1
  br label %120

114:                                              ; preds = %104
  %115 = add i64 %94, 1
  br label %120

116:                                              ; preds = %104
  %117 = add i64 %93, 1
  br label %120

118:                                              ; preds = %104
  br label %120

119:                                              ; preds = %90
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #9
  br label %1606

120:                                              ; preds = %104, %112, %114, %116, %118
  %121 = phi i8 [ %92, %116 ], [ 1, %118 ], [ %92, %114 ], [ %92, %112 ], [ %92, %104 ]
  %122 = phi i64 [ %117, %116 ], [ %93, %118 ], [ %93, %114 ], [ %93, %112 ], [ %93, %104 ]
  %123 = phi i64 [ %94, %116 ], [ %94, %118 ], [ %115, %114 ], [ %94, %112 ], [ %94, %104 ]
  %124 = phi i64 [ %95, %116 ], [ %95, %118 ], [ %95, %114 ], [ %113, %112 ], [ %95, %104 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #9
  %125 = load i8*, i8** %84, align 8
  %126 = load i8*, i8** %85, align 8
  %127 = icmp eq i8* %125, %126
  %128 = ptrtoint i8* %126 to i64
  br i1 %127, label %132, label %129

129:                                              ; preds = %120
  store i8 %107, i8* %125, align 1
  %130 = getelementptr inbounds i8, i8* %125, i64 1
  %131 = ptrtoint i8* %130 to i64
  store i64 %131, i64* %86, align 8
  br label %174

132:                                              ; preds = %120
  %133 = ptrtoint i8* %125 to i64
  %134 = load i64, i64* %87, align 8
  %135 = sub i64 %133, %134
  %136 = add i64 %135, 1
  %137 = icmp slt i64 %136, 0
  br i1 %137, label %138, label %140

138:                                              ; preds = %132
  %139 = bitcast %"class.std::__1::vector.0"* %83 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %139) #11
  unreachable

140:                                              ; preds = %132
  %141 = sub i64 %128, %134
  %142 = icmp ult i64 %141, 4611686018427387903
  br i1 %142, label %143, label %148

143:                                              ; preds = %140
  %144 = shl i64 %141, 1
  %145 = icmp ult i64 %144, %136
  %146 = select i1 %145, i64 %136, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %151, label %148

148:                                              ; preds = %143, %140
  %149 = phi i64 [ %146, %143 ], [ 9223372036854775807, %140 ]
  %150 = call i8* @_Znwm(i64 %149) #10
  br label %151

151:                                              ; preds = %148, %143
  %152 = phi i64 [ %149, %148 ], [ 0, %143 ]
  %153 = phi i8* [ %150, %148 ], [ null, %143 ]
  %154 = getelementptr inbounds i8, i8* %153, i64 %135
  %155 = getelementptr inbounds i8, i8* %153, i64 %152
  %156 = ptrtoint i8* %155 to i64
  store i8 %107, i8* %154, align 1
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = ptrtoint i8* %157 to i64
  %159 = load i8*, i8** %89, align 8
  %160 = load i64, i64* %86, align 8
  %161 = ptrtoint i8* %159 to i64
  %162 = sub i64 %160, %161
  %163 = sub i64 0, %162
  %164 = getelementptr inbounds i8, i8* %154, i64 %163
  %165 = ptrtoint i8* %164 to i64
  %166 = icmp sgt i64 %162, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %151
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %159, i64 %162, i1 false) #9
  %168 = load i8*, i8** %89, align 8
  br label %169

169:                                              ; preds = %167, %151
  %170 = phi i8* [ %159, %151 ], [ %168, %167 ]
  store i64 %165, i64* %87, align 8
  store i64 %158, i64* %86, align 8
  store i64 %156, i64* %88, align 8
  %171 = icmp eq i8* %170, null
  br i1 %171, label %174, label %172

172:                                              ; preds = %169
  call void @_ZdlPv(i8* nonnull %170) #10
  %173 = load i64, i64* %86, align 8
  br label %174

174:                                              ; preds = %129, %169, %172
  %175 = phi i64 [ %131, %129 ], [ %158, %169 ], [ %173, %172 ]
  %176 = load i64, i64* %87, align 8
  %177 = sub i64 %175, %176
  %178 = icmp ugt i64 %177, 16384
  br i1 %178, label %1606, label %179

179:                                              ; preds = %174
  %180 = icmp eq i8 %107, -39
  br i1 %180, label %259, label %90

181:                                              ; preds = %75
  %182 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %183 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  %184 = bitcast i8** %183 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = bitcast %"class.std::__1::vector.0"* %182 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = sub i64 %185, %187
  %189 = icmp ugt i64 %188, 16384
  br i1 %189, label %1606, label %190

190:                                              ; preds = %181
  %191 = icmp eq i64 %185, %187
  %192 = inttoptr i64 %187 to i8*
  br i1 %191, label %242, label %193

193:                                              ; preds = %190
  %194 = bitcast i32* %3 to i8*
  %195 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  br label %196

196:                                              ; preds = %193, %229
  %197 = phi i8* [ %192, %193 ], [ %239, %229 ]
  %198 = phi i64 [ 0, %193 ], [ %234, %229 ]
  %199 = phi i64 [ 0, %193 ], [ %220, %229 ]
  %200 = phi i64 [ 0, %193 ], [ %233, %229 ]
  %201 = phi i64 [ 0, %193 ], [ %232, %229 ]
  %202 = phi i64 [ 0, %193 ], [ %231, %229 ]
  %203 = phi i8 [ 0, %193 ], [ %230, %229 ]
  %204 = getelementptr inbounds i8, i8* %197, i64 %198
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %194) #9
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = add nsw i32 %206, -192
  store i32 %207, i32* %3, align 4
  %208 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %195, align 8
  %209 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %208, i64 5
  %210 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %209, align 8
  %211 = call i32 %210(%"class.jxl::Visitor"* %1, i64 6, i32 0, i32* nonnull %3) #9
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %228

213:                                              ; preds = %196
  %214 = load i32, i32* %3, align 4
  %215 = trunc i32 %214 to i8
  %216 = add i8 %215, -64
  store i8 %216, i8* %204, align 1
  %217 = and i8 %216, -16
  %218 = icmp eq i8 %217, -32
  %219 = zext i1 %218 to i64
  %220 = add i64 %199, %219
  switch i8 %215, label %229 [
    i8 62, label %221
    i8 26, label %223
    i8 63, label %225
    i8 29, label %227
  ]

221:                                              ; preds = %213
  %222 = add i64 %200, 1
  br label %229

223:                                              ; preds = %213
  %224 = add i64 %201, 1
  br label %229

225:                                              ; preds = %213
  %226 = add i64 %202, 1
  br label %229

227:                                              ; preds = %213
  br label %229

228:                                              ; preds = %196
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %194) #9
  br label %1606

229:                                              ; preds = %213, %221, %223, %225, %227
  %230 = phi i8 [ %203, %225 ], [ 1, %227 ], [ %203, %223 ], [ %203, %221 ], [ %203, %213 ]
  %231 = phi i64 [ %226, %225 ], [ %202, %227 ], [ %202, %223 ], [ %202, %221 ], [ %202, %213 ]
  %232 = phi i64 [ %201, %225 ], [ %201, %227 ], [ %224, %223 ], [ %201, %221 ], [ %201, %213 ]
  %233 = phi i64 [ %200, %225 ], [ %200, %227 ], [ %200, %223 ], [ %222, %221 ], [ %200, %213 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %194) #9
  %234 = add nuw i64 %198, 1
  %235 = load i64, i64* %184, align 8
  %236 = load i64, i64* %186, align 8
  %237 = sub i64 %235, %236
  %238 = icmp ult i64 %234, %237
  %239 = inttoptr i64 %236 to i8*
  br i1 %238, label %196, label %240

240:                                              ; preds = %229
  %241 = inttoptr i64 %236 to i8*
  br label %242

242:                                              ; preds = %240, %190
  %243 = phi i64 [ %185, %190 ], [ %235, %240 ]
  %244 = phi i8 [ 0, %190 ], [ %230, %240 ]
  %245 = phi i64 [ 0, %190 ], [ %231, %240 ]
  %246 = phi i64 [ 0, %190 ], [ %232, %240 ]
  %247 = phi i64 [ 0, %190 ], [ %233, %240 ]
  %248 = phi i64 [ 0, %190 ], [ %220, %240 ]
  %249 = phi i8* [ %192, %190 ], [ %241, %240 ]
  %250 = inttoptr i64 %243 to i8*
  %251 = icmp eq i8* %249, %250
  br i1 %251, label %259, label %252

252:                                              ; preds = %242
  %253 = getelementptr inbounds i8, i8* %250, i64 -1
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %254, -39
  br i1 %255, label %259, label %256

256:                                              ; preds = %252
  %257 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 88, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0)) #9
  %258 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

259:                                              ; preds = %179, %242, %252
  %260 = phi i8 [ %244, %242 ], [ %244, %252 ], [ %121, %179 ]
  %261 = phi i64 [ %245, %242 ], [ %245, %252 ], [ %122, %179 ]
  %262 = phi i64 [ %246, %242 ], [ %246, %252 ], [ %123, %179 ]
  %263 = phi i64 [ %247, %242 ], [ %247, %252 ], [ %124, %179 ]
  %264 = phi i64 [ %248, %242 ], [ %248, %252 ], [ %111, %179 ]
  %265 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %266 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %265, i64 12
  %267 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %266, align 8
  %268 = call zeroext i1 %267(%"class.jxl::Visitor"* %1) #9
  br i1 %268, label %269, label %392

269:                                              ; preds = %259
  %270 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %271 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4, i32 0, i32 1
  %272 = bitcast %"class.std::__1::vector.0"** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.std::__1::vector"* %270 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = sub i64 %273, %275
  %277 = sdiv exact i64 %276, 24
  %278 = icmp ugt i64 %264, %277
  %279 = inttoptr i64 %275 to %"class.std::__1::vector.0"*
  %280 = inttoptr i64 %273 to %"class.std::__1::vector.0"*
  br i1 %278, label %281, label %283

281:                                              ; preds = %269
  %282 = sub i64 %264, %277
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"* %270, i64 %282) #9
  br label %301

283:                                              ; preds = %269
  %284 = icmp ult i64 %264, %277
  br i1 %284, label %285, label %301

285:                                              ; preds = %283
  %286 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %279, i64 %264
  %287 = icmp eq %"class.std::__1::vector.0"* %286, %280
  br i1 %287, label %300, label %288

288:                                              ; preds = %285, %298
  %289 = phi %"class.std::__1::vector.0"* [ %290, %298 ], [ %280, %285 ]
  %290 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %289, i64 -1
  %291 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %290, i64 0, i32 0, i32 0
  %292 = load i8*, i8** %291, align 8
  %293 = icmp eq i8* %292, null
  br i1 %293, label %298, label %294

294:                                              ; preds = %288
  %295 = ptrtoint i8* %292 to i64
  %296 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %289, i64 -1, i32 0, i32 1
  %297 = bitcast i8** %296 to i64*
  store i64 %295, i64* %297, align 8
  call void @_ZdlPv(i8* nonnull %292) #10
  br label %298

298:                                              ; preds = %294, %288
  %299 = icmp eq %"class.std::__1::vector.0"* %290, %286
  br i1 %299, label %300, label %288

300:                                              ; preds = %298, %285
  store %"class.std::__1::vector.0"* %286, %"class.std::__1::vector.0"** %271, align 8
  br label %301

301:                                              ; preds = %281, %283, %300
  %302 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %303 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"class.std::__1::vector.8"* %302 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = sub i64 %305, %307
  %309 = ashr exact i64 %308, 2
  %310 = icmp ugt i64 %264, %309
  %311 = inttoptr i64 %307 to i32*
  br i1 %310, label %312, label %314

312:                                              ; preds = %301
  %313 = sub i64 %264, %309
  call void @_ZNSt3__16vectorIN3jxl4jpeg13AppMarkerTypeENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.8"* %302, i64 %313) #9
  br label %318

314:                                              ; preds = %301
  %315 = icmp ult i64 %264, %309
  br i1 %315, label %316, label %318

316:                                              ; preds = %314
  %317 = getelementptr inbounds i32, i32* %311, i64 %264
  store i32* %317, i32** %303, align 8
  br label %318

318:                                              ; preds = %312, %314, %316
  %319 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %320 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6, i32 0, i32 1
  %321 = bitcast %"class.std::__1::vector.0"** %320 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = bitcast %"class.std::__1::vector"* %319 to i64*
  %324 = load i64, i64* %323, align 8
  %325 = sub i64 %322, %324
  %326 = sdiv exact i64 %325, 24
  %327 = icmp ugt i64 %263, %326
  %328 = inttoptr i64 %324 to %"class.std::__1::vector.0"*
  %329 = inttoptr i64 %322 to %"class.std::__1::vector.0"*
  br i1 %327, label %330, label %332

330:                                              ; preds = %318
  %331 = sub i64 %263, %326
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"* %319, i64 %331) #9
  br label %350

332:                                              ; preds = %318
  %333 = icmp ult i64 %263, %326
  br i1 %333, label %334, label %350

334:                                              ; preds = %332
  %335 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %328, i64 %263
  %336 = icmp eq %"class.std::__1::vector.0"* %335, %329
  br i1 %336, label %349, label %337

337:                                              ; preds = %334, %347
  %338 = phi %"class.std::__1::vector.0"* [ %339, %347 ], [ %329, %334 ]
  %339 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %338, i64 -1
  %340 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %339, i64 0, i32 0, i32 0
  %341 = load i8*, i8** %340, align 8
  %342 = icmp eq i8* %341, null
  br i1 %342, label %347, label %343

343:                                              ; preds = %337
  %344 = ptrtoint i8* %341 to i64
  %345 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %338, i64 -1, i32 0, i32 1
  %346 = bitcast i8** %345 to i64*
  store i64 %344, i64* %346, align 8
  call void @_ZdlPv(i8* nonnull %341) #10
  br label %347

347:                                              ; preds = %343, %337
  %348 = icmp eq %"class.std::__1::vector.0"* %339, %335
  br i1 %348, label %349, label %337

349:                                              ; preds = %347, %334
  store %"class.std::__1::vector.0"* %335, %"class.std::__1::vector.0"** %320, align 8
  br label %350

350:                                              ; preds = %330, %332, %349
  %351 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %352 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %353 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %352 to i64*
  %354 = load i64, i64* %353, align 8
  %355 = bitcast %"class.std::__1::vector.45"* %351 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = sub i64 %354, %356
  %358 = sdiv exact i64 %357, 120
  %359 = icmp ugt i64 %262, %358
  %360 = inttoptr i64 %356 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %361 = inttoptr i64 %354 to %"struct.jxl::jpeg::JPEGScanInfo"*
  br i1 %359, label %362, label %364

362:                                              ; preds = %350
  %363 = sub i64 %262, %358
  call void @_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfoENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.45"* %351, i64 %363) #9
  br label %392

364:                                              ; preds = %350
  %365 = icmp ult i64 %262, %358
  br i1 %365, label %366, label %392

366:                                              ; preds = %364
  %367 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %360, i64 %262
  %368 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %367, %361
  br i1 %368, label %391, label %369

369:                                              ; preds = %366, %389
  %370 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %371, %389 ], [ %361, %366 ]
  %371 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %370, i64 -1
  %372 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %370, i64 -1, i32 8, i32 0, i32 0
  %373 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %372, align 8
  %374 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %373, null
  br i1 %374, label %380, label %375

375:                                              ; preds = %369
  %376 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %373 to i64
  %377 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %370, i64 -1, i32 8, i32 0, i32 1
  %378 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %377 to i64*
  store i64 %376, i64* %378, align 8
  %379 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %373 to i8*
  call void @_ZdlPv(i8* %379) #10
  br label %380

380:                                              ; preds = %375, %369
  %381 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %370, i64 -1, i32 7, i32 0, i32 0
  %382 = load i32*, i32** %381, align 8
  %383 = icmp eq i32* %382, null
  br i1 %383, label %389, label %384

384:                                              ; preds = %380
  %385 = ptrtoint i32* %382 to i64
  %386 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %370, i64 -1, i32 7, i32 0, i32 1
  %387 = bitcast i32** %386 to i64*
  store i64 %385, i64* %387, align 8
  %388 = bitcast i32* %382 to i8*
  call void @_ZdlPv(i8* %388) #10
  br label %389

389:                                              ; preds = %384, %380
  %390 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %371, %367
  br i1 %390, label %391, label %369

391:                                              ; preds = %389, %366
  store %"struct.jxl::jpeg::JPEGScanInfo"* %367, %"struct.jxl::jpeg::JPEGScanInfo"** %352, align 8
  br label %392

392:                                              ; preds = %259, %391, %364, %362
  %393 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %394 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4, i32 0, i32 1
  %395 = bitcast %"class.std::__1::vector.0"** %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = bitcast %"class.std::__1::vector"* %393 to i64*
  %398 = load i64, i64* %397, align 8
  %399 = sub i64 %396, %398
  %400 = sdiv exact i64 %399, 24
  %401 = icmp eq i64 %400, %264
  br i1 %401, label %405, label %402

402:                                              ; preds = %392
  %403 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 99, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0)) #9
  %404 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

405:                                              ; preds = %392
  %406 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %407 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %408 = bitcast i32** %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = bitcast %"class.std::__1::vector.8"* %406 to i64*
  %411 = load i64, i64* %410, align 8
  %412 = sub i64 %409, %411
  %413 = ashr exact i64 %412, 2
  %414 = icmp eq i64 %413, %264
  %415 = inttoptr i64 %411 to i32*
  br i1 %414, label %419, label %416

416:                                              ; preds = %405
  %417 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 100, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0)) #9
  %418 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

419:                                              ; preds = %405
  %420 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %421 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6, i32 0, i32 1
  %422 = bitcast %"class.std::__1::vector.0"** %421 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = bitcast %"class.std::__1::vector"* %420 to i64*
  %425 = load i64, i64* %424, align 8
  %426 = sub i64 %423, %425
  %427 = sdiv exact i64 %426, 24
  %428 = icmp eq i64 %427, %263
  %429 = inttoptr i64 %425 to %"class.std::__1::vector.0"*
  %430 = inttoptr i64 %423 to %"class.std::__1::vector.0"*
  br i1 %428, label %434, label %431

431:                                              ; preds = %419
  %432 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 101, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0)) #9
  %433 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

434:                                              ; preds = %419
  %435 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %436 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %437 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %436 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = bitcast %"class.std::__1::vector.45"* %435 to i64*
  %440 = load i64, i64* %439, align 8
  %441 = sub i64 %438, %440
  %442 = sdiv exact i64 %441, 120
  %443 = icmp eq i64 %442, %262
  br i1 %443, label %444, label %457

444:                                              ; preds = %434
  %445 = icmp eq i64 %396, %398
  br i1 %445, label %530, label %446

446:                                              ; preds = %444
  %447 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %406, i64 0, i32 0, i32 0
  %448 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %449 = bitcast i32* %6 to i8*
  %450 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %451 = inttoptr i64 %398 to %"class.std::__1::vector.0"*
  %452 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %448, align 8, !noalias !3
  %453 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %452, i64 4
  %454 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %453, align 8, !noalias !3
  %455 = call i32 %454(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 554050781248, i32 0, i32* %415) #9
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %460, label %1606

457:                                              ; preds = %434
  %458 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 102, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0)) #9
  %459 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

460:                                              ; preds = %446, %516
  %461 = phi %"class.std::__1::vector.0"* [ %519, %516 ], [ %451, %446 ]
  %462 = phi %"class.std::__1::vector.0"* [ %518, %516 ], [ %451, %446 ]
  %463 = phi i64 [ %510, %516 ], [ 0, %446 ]
  %464 = load i32*, i32** %447, align 8
  %465 = getelementptr inbounds i32, i32* %464, i64 %463
  %466 = load i32, i32* %465, align 4
  %467 = icmp ult i32 %466, 4
  br i1 %467, label %468, label %1606

468:                                              ; preds = %460
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %449) #9
  %469 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %462, i64 %463, i32 0, i32 1
  %470 = bitcast i8** %469 to i64*
  %471 = load i64, i64* %470, align 8
  %472 = bitcast %"class.std::__1::vector.0"* %461 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = sub i64 %471, %473
  %475 = trunc i64 %474 to i32
  %476 = add i32 %475, -1
  store i32 %476, i32* %6, align 4
  %477 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %450, align 8
  %478 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %477, i64 5
  %479 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %478, align 8
  %480 = call i32 %479(%"class.jxl::Visitor"* %1, i64 16, i32 0, i32* nonnull %6) #9
  %481 = icmp eq i32 %480, 0
  br i1 %481, label %482, label %507

482:                                              ; preds = %468
  %483 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %484 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %483, i64 12
  %485 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %484, align 8
  %486 = call zeroext i1 %485(%"class.jxl::Visitor"* %1) #9
  br i1 %486, label %487, label %502

487:                                              ; preds = %482
  %488 = load i32, i32* %6, align 4
  %489 = add i32 %488, 1
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %470, align 8
  %492 = load i64, i64* %472, align 8
  %493 = sub i64 %491, %492
  %494 = icmp ult i64 %493, %490
  %495 = inttoptr i64 %492 to i8*
  br i1 %494, label %496, label %498

496:                                              ; preds = %487
  %497 = sub i64 %490, %493
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.0"* %461, i64 %497) #9
  br label %502

498:                                              ; preds = %487
  %499 = icmp ugt i64 %493, %490
  br i1 %499, label %500, label %502

500:                                              ; preds = %498
  %501 = getelementptr inbounds i8, i8* %495, i64 %490
  store i8* %501, i8** %469, align 8
  br label %502

502:                                              ; preds = %500, %498, %496, %482
  %503 = load i64, i64* %470, align 8
  %504 = load i64, i64* %472, align 8
  %505 = sub i64 %503, %504
  %506 = icmp ult i64 %505, 3
  br i1 %506, label %507, label %509

507:                                              ; preds = %468, %502
  %508 = phi i32 [ %480, %468 ], [ 1, %502 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %449) #9
  br label %1606

509:                                              ; preds = %502
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %449) #9
  %510 = add nuw i64 %463, 1
  %511 = load i64, i64* %395, align 8
  %512 = load i64, i64* %397, align 8
  %513 = sub i64 %511, %512
  %514 = sdiv exact i64 %513, 24
  %515 = icmp ult i64 %510, %514
  br i1 %515, label %516, label %526

516:                                              ; preds = %509
  %517 = load i32*, i32** %447, align 8
  %518 = inttoptr i64 %512 to %"class.std::__1::vector.0"*
  %519 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %518, i64 %510
  %520 = getelementptr inbounds i32, i32* %517, i64 %510
  %521 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %448, align 8, !noalias !3
  %522 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %521, i64 4
  %523 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %522, align 8, !noalias !3
  %524 = call i32 %523(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 554050781248, i32 0, i32* %520) #9
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %460, label %1606

526:                                              ; preds = %509
  %527 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %420, i64 0, i32 0, i32 0
  %528 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %527, align 8
  %529 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %421, align 8
  br label %530

530:                                              ; preds = %526, %444
  %531 = phi %"class.std::__1::vector.0"* [ %529, %526 ], [ %430, %444 ]
  %532 = phi %"class.std::__1::vector.0"* [ %528, %526 ], [ %429, %444 ]
  %533 = icmp eq %"class.std::__1::vector.0"* %532, %531
  br i1 %533, label %582, label %534

534:                                              ; preds = %530
  %535 = bitcast i32* %7 to i8*
  %536 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  br label %537

537:                                              ; preds = %534, %577
  %538 = phi %"class.std::__1::vector.0"* [ %532, %534 ], [ %578, %577 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %535) #9
  %539 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %538, i64 0, i32 0, i32 1
  %540 = bitcast i8** %539 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = bitcast %"class.std::__1::vector.0"* %538 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = sub i64 %541, %543
  %545 = trunc i64 %544 to i32
  %546 = add i32 %545, -1
  store i32 %546, i32* %7, align 4
  %547 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %536, align 8
  %548 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %547, i64 5
  %549 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %548, align 8
  %550 = call i32 %549(%"class.jxl::Visitor"* %1, i64 16, i32 0, i32* nonnull %7) #9
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %552, label %580

552:                                              ; preds = %537
  %553 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %554 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %553, i64 12
  %555 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %554, align 8
  %556 = call zeroext i1 %555(%"class.jxl::Visitor"* %1) #9
  br i1 %556, label %557, label %572

557:                                              ; preds = %552
  %558 = load i32, i32* %7, align 4
  %559 = add i32 %558, 1
  %560 = zext i32 %559 to i64
  %561 = load i64, i64* %540, align 8
  %562 = load i64, i64* %542, align 8
  %563 = sub i64 %561, %562
  %564 = icmp ult i64 %563, %560
  %565 = inttoptr i64 %562 to i8*
  br i1 %564, label %566, label %568

566:                                              ; preds = %557
  %567 = sub i64 %560, %563
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.0"* %538, i64 %567) #9
  br label %572

568:                                              ; preds = %557
  %569 = icmp ugt i64 %563, %560
  br i1 %569, label %570, label %572

570:                                              ; preds = %568
  %571 = getelementptr inbounds i8, i8* %565, i64 %560
  store i8* %571, i8** %539, align 8
  br label %572

572:                                              ; preds = %570, %568, %566, %552
  %573 = load i64, i64* %540, align 8
  %574 = load i64, i64* %542, align 8
  %575 = sub i64 %573, %574
  %576 = icmp ult i64 %575, 3
  br i1 %576, label %580, label %577

577:                                              ; preds = %572
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %535) #9
  %578 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %538, i64 1
  %579 = icmp eq %"class.std::__1::vector.0"* %578, %531
  br i1 %579, label %582, label %537

580:                                              ; preds = %572, %537
  %581 = phi i32 [ %550, %537 ], [ 1, %572 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %535) #9
  br label %1606

582:                                              ; preds = %577, %530
  %583 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %583) #9
  %584 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7
  %585 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %586 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %585 to i64*
  %587 = load i64, i64* %586, align 8
  %588 = bitcast %"class.std::__1::vector.15"* %584 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = sub i64 %587, %589
  %591 = sdiv exact i64 %590, 268
  %592 = trunc i64 %591 to i32
  store i32 %592, i32* %8, align 4
  %593 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %594 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !6
  %595 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %594, i64 4
  %596 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %595, align 8, !noalias !6
  %597 = call i32 %596(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372017527422973, i32 2, i32* nonnull %8) #9
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %599, label %1604

599:                                              ; preds = %582
  %600 = load i32, i32* %8, align 4
  %601 = icmp eq i32 %600, 4
  br i1 %601, label %1604, label %602

602:                                              ; preds = %599
  %603 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %604 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %603, i64 12
  %605 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %604, align 8
  %606 = call zeroext i1 %605(%"class.jxl::Visitor"* %1) #9
  br i1 %606, label %607, label %622

607:                                              ; preds = %602
  %608 = load i32, i32* %8, align 4
  %609 = zext i32 %608 to i64
  %610 = load i64, i64* %586, align 8
  %611 = load i64, i64* %588, align 8
  %612 = sub i64 %610, %611
  %613 = sdiv exact i64 %612, 268
  %614 = icmp ult i64 %613, %609
  %615 = inttoptr i64 %611 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br i1 %614, label %616, label %618

616:                                              ; preds = %607
  %617 = sub nsw i64 %609, %613
  call void @_ZNSt3__16vectorIN3jxl4jpeg14JPEGQuantTableENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.15"* %584, i64 %617) #9
  br label %622

618:                                              ; preds = %607
  %619 = icmp ugt i64 %613, %609
  br i1 %619, label %620, label %622

620:                                              ; preds = %618
  %621 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %615, i64 %609
  store %"struct.jxl::jpeg::JPEGQuantTable"* %621, %"struct.jxl::jpeg::JPEGQuantTable"** %585, align 8
  br label %622

622:                                              ; preds = %620, %618, %616, %602
  %623 = load i32, i32* %8, align 4
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %662, label %625

625:                                              ; preds = %622
  %626 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %584, i64 0, i32 0, i32 0
  %627 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  br label %632

628:                                              ; preds = %653
  %629 = load i32, i32* %8, align 4
  %630 = zext i32 %629 to i64
  %631 = icmp ult i64 %661, %630
  br i1 %631, label %632, label %662

632:                                              ; preds = %625, %628
  %633 = phi i64 [ 0, %625 ], [ %661, %628 ]
  %634 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %626, align 8
  %635 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %634, i64 %633, i32 1
  %636 = load i32, i32* %635, align 4
  %637 = icmp ugt i32 %636, 1
  br i1 %637, label %1604, label %638

638:                                              ; preds = %632
  %639 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %627, align 8
  %640 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %639, i64 5
  %641 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %640, align 8
  %642 = call i32 %641(%"class.jxl::Visitor"* %1, i64 1, i32 0, i32* %635) #9
  %643 = icmp eq i32 %642, 0
  br i1 %643, label %644, label %1604

644:                                              ; preds = %638
  %645 = trunc i64 %633 to i32
  %646 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %626, align 8
  %647 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %646, i64 %633, i32 2
  %648 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %627, align 8
  %649 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %648, i64 5
  %650 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %649, align 8
  %651 = call i32 %650(%"class.jxl::Visitor"* %1, i64 2, i32 %645, i32* %647) #9
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %653, label %1604

653:                                              ; preds = %644
  %654 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %626, align 8
  %655 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %654, i64 %633, i32 3
  %656 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %31, align 8
  %657 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %656, i64 3
  %658 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %657, align 8
  %659 = call i32 %658(%"class.jxl::Visitor"* %1, i1 zeroext true, i8* %655) #9
  %660 = icmp eq i32 %659, 0
  %661 = add nuw nsw i64 %633, 1
  br i1 %660, label %628, label %1604

662:                                              ; preds = %628, %622
  %663 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %663) #9
  store i32 -1431655766, i32* %9, align 4
  %664 = load i64, i64* %24, align 8
  %665 = load i64, i64* %26, align 8
  %666 = sub i64 %664, %665
  %667 = sdiv exact i64 %666, 48
  %668 = inttoptr i64 %665 to %"struct.jxl::jpeg::JPEGComponent"*
  switch i64 %667, label %688 [
    i64 1, label %669
    i64 3, label %673
  ]

669:                                              ; preds = %662
  %670 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %668, i64 0, i32 0
  %671 = load i32, i32* %670, align 8
  %672 = icmp eq i32 %671, 1
  br i1 %672, label %694, label %688

673:                                              ; preds = %662
  %674 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %668, i64 0, i32 0
  %675 = load i32, i32* %674, align 8
  switch i32 %675, label %688 [
    i32 1, label %676
    i32 82, label %684
  ]

676:                                              ; preds = %673
  %677 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %668, i64 1, i32 0
  %678 = load i32, i32* %677, align 8
  %679 = icmp eq i32 %678, 2
  br i1 %679, label %680, label %688

680:                                              ; preds = %676
  %681 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %668, i64 2, i32 0
  %682 = load i32, i32* %681, align 8
  %683 = icmp eq i32 %682, 3
  br i1 %683, label %694, label %688

684:                                              ; preds = %673
  %685 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %668, i64 1, i32 0
  %686 = load i32, i32* %685, align 8
  %687 = icmp eq i32 %686, 71
  br i1 %687, label %689, label %688

688:                                              ; preds = %673, %676, %680, %662, %684, %669
  br label %694

689:                                              ; preds = %684
  %690 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %668, i64 2, i32 0
  %691 = load i32, i32* %690, align 8
  %692 = icmp eq i32 %691, 66
  %693 = select i1 %692, i32 2, i32 3
  br label %694

694:                                              ; preds = %689, %688, %680, %669
  %695 = phi i32 [ 0, %669 ], [ 1, %680 ], [ 3, %688 ], [ %693, %689 ]
  store i32 %695, i32* %9, align 4
  %696 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %697 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %698 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %697, i64 5
  %699 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %698, align 8
  %700 = call i32 %699(%"class.jxl::Visitor"* %1, i64 2, i32 1, i32* nonnull %9) #9
  %701 = icmp eq i32 %700, 0
  br i1 %701, label %702, label %1602

702:                                              ; preds = %694
  %703 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %703) #9
  store i32 -1431655766, i32* %10, align 4
  %704 = load i32, i32* %9, align 4
  switch i32 %704, label %706 [
    i32 0, label %705
    i32 3, label %707
  ]

705:                                              ; preds = %702
  store i32 1, i32* %10, align 4
  br label %722

706:                                              ; preds = %702
  store i32 3, i32* %10, align 4
  br label %722

707:                                              ; preds = %702
  %708 = load i64, i64* %24, align 8
  %709 = load i64, i64* %26, align 8
  %710 = sub i64 %708, %709
  %711 = sdiv exact i64 %710, 48
  %712 = trunc i64 %711 to i32
  store i32 %712, i32* %10, align 4
  %713 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !9
  %714 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %713, i64 4
  %715 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %714, align 8, !noalias !9
  %716 = call i32 %715(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372017527422973, i32 3, i32* nonnull %10) #9
  %717 = icmp eq i32 %716, 0
  br i1 %717, label %718, label %1600

718:                                              ; preds = %707
  %719 = load i32, i32* %10, align 4
  %720 = or i32 %719, 2
  %721 = icmp eq i32 %720, 3
  br i1 %721, label %722, label %1600

722:                                              ; preds = %718, %706, %705
  %723 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %724 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %723, i64 12
  %725 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %724, align 8
  %726 = call zeroext i1 %725(%"class.jxl::Visitor"* %1) #9
  br i1 %726, label %727, label %758

727:                                              ; preds = %722
  %728 = load i32, i32* %10, align 4
  %729 = zext i32 %728 to i64
  %730 = load i64, i64* %24, align 8
  %731 = load i64, i64* %26, align 8
  %732 = sub i64 %730, %731
  %733 = sdiv exact i64 %732, 48
  %734 = icmp ult i64 %733, %729
  %735 = inttoptr i64 %731 to %"struct.jxl::jpeg::JPEGComponent"*
  %736 = inttoptr i64 %730 to %"struct.jxl::jpeg::JPEGComponent"*
  br i1 %734, label %737, label %739

737:                                              ; preds = %727
  %738 = sub nsw i64 %729, %733
  call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.31"* %22, i64 %738) #9
  br label %758

739:                                              ; preds = %727
  %740 = icmp ugt i64 %733, %729
  br i1 %740, label %741, label %758

741:                                              ; preds = %739
  %742 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %735, i64 %729
  %743 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %742, %736
  br i1 %743, label %757, label %744

744:                                              ; preds = %741, %755
  %745 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %746, %755 ], [ %736, %741 ]
  %746 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %745, i64 -1
  %747 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %745, i64 -1, i32 6, i32 0, i32 0
  %748 = load i16*, i16** %747, align 8
  %749 = icmp eq i16* %748, null
  br i1 %749, label %755, label %750

750:                                              ; preds = %744
  %751 = ptrtoint i16* %748 to i64
  %752 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %745, i64 -1, i32 6, i32 0, i32 1
  %753 = bitcast i16** %752 to i64*
  store i64 %751, i64* %753, align 8
  %754 = bitcast i16* %748 to i8*
  call void @_ZdlPv(i8* %754) #10
  br label %755

755:                                              ; preds = %750, %744
  %756 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %746, %742
  br i1 %756, label %757, label %744

757:                                              ; preds = %755, %741
  store %"struct.jxl::jpeg::JPEGComponent"* %742, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  br label %758

758:                                              ; preds = %757, %739, %737, %722
  %759 = load i32, i32* %9, align 4
  switch i32 %759, label %785 [
    i32 3, label %760
    i32 0, label %781
  ]

760:                                              ; preds = %758
  %761 = load i64, i64* %24, align 8
  %762 = load i64, i64* %26, align 8
  %763 = icmp eq i64 %761, %762
  br i1 %763, label %800, label %770

764:                                              ; preds = %770
  %765 = load i64, i64* %24, align 8
  %766 = load i64, i64* %26, align 8
  %767 = sub i64 %765, %766
  %768 = sdiv exact i64 %767, 48
  %769 = icmp ult i64 %780, %768
  br i1 %769, label %770, label %800

770:                                              ; preds = %760, %764
  %771 = phi i64 [ %766, %764 ], [ %762, %760 ]
  %772 = phi i64 [ %780, %764 ], [ 0, %760 ]
  %773 = inttoptr i64 %771 to %"struct.jxl::jpeg::JPEGComponent"*
  %774 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %773, i64 %772, i32 0
  %775 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %776 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %775, i64 5
  %777 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %776, align 8
  %778 = call i32 %777(%"class.jxl::Visitor"* %1, i64 8, i32 0, i32* %774) #9
  %779 = icmp eq i32 %778, 0
  %780 = add nuw i64 %772, 1
  br i1 %779, label %764, label %1600

781:                                              ; preds = %758
  %782 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %22, i64 0, i32 0, i32 0
  %783 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %782, align 8
  %784 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %783, i64 0, i32 0
  store i32 1, i32* %784, align 8
  br label %800

785:                                              ; preds = %758
  %786 = icmp eq i32 %759, 2
  %787 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %22, i64 0, i32 0, i32 0
  %788 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %787, align 8
  %789 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %788, i64 0, i32 0
  br i1 %786, label %790, label %795

790:                                              ; preds = %785
  store i32 82, i32* %789, align 8
  %791 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %787, align 8
  %792 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %791, i64 1, i32 0
  store i32 71, i32* %792, align 8
  %793 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %787, align 8
  %794 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %793, i64 2, i32 0
  store i32 66, i32* %794, align 8
  br label %800

795:                                              ; preds = %785
  store i32 1, i32* %789, align 8
  %796 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %787, align 8
  %797 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %796, i64 1, i32 0
  store i32 2, i32* %797, align 8
  %798 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %787, align 8
  %799 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %798, i64 2, i32 0
  store i32 3, i32* %799, align 8
  br label %800

800:                                              ; preds = %764, %760, %781, %795, %790
  %801 = load i64, i64* %24, align 8
  %802 = load i64, i64* %26, align 8
  %803 = icmp eq i64 %801, %802
  br i1 %803, label %804, label %809

804:                                              ; preds = %800
  %805 = load i64, i64* %586, align 8
  %806 = load i64, i64* %588, align 8
  %807 = sub i64 %805, %806
  %808 = sdiv exact i64 %807, 268
  br label %842

809:                                              ; preds = %800
  %810 = inttoptr i64 %802 to %"struct.jxl::jpeg::JPEGComponent"*
  %811 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %22, i64 0, i32 0, i32 0
  br label %812

812:                                              ; preds = %809, %832
  %813 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %810, %809 ], [ %823, %832 ]
  %814 = phi i64 [ 0, %809 ], [ %836, %832 ]
  %815 = phi i64 [ 0, %809 ], [ %837, %832 ]
  %816 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %813, i64 %815, i32 3
  %817 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %818 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %817, i64 5
  %819 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %818, align 8
  %820 = call i32 %819(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %816) #9
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %822, label %1600

822:                                              ; preds = %812
  %823 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %811, align 8
  %824 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %823, i64 %815, i32 3
  %825 = load i32, i32* %824, align 4
  %826 = zext i32 %825 to i64
  %827 = load i64, i64* %586, align 8
  %828 = load i64, i64* %588, align 8
  %829 = sub i64 %827, %828
  %830 = sdiv exact i64 %829, 268
  %831 = icmp ugt i64 %830, %826
  br i1 %831, label %832, label %1600

832:                                              ; preds = %822
  %833 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %823 to i64
  %834 = shl i32 1, %825
  %835 = zext i32 %834 to i64
  %836 = or i64 %814, %835
  %837 = add nuw i64 %815, 1
  %838 = load i64, i64* %24, align 8
  %839 = sub i64 %838, %833
  %840 = sdiv exact i64 %839, 48
  %841 = icmp ult i64 %837, %840
  br i1 %841, label %812, label %842

842:                                              ; preds = %832, %804
  %843 = phi i64 [ %808, %804 ], [ %830, %832 ]
  %844 = phi i64 [ 0, %804 ], [ %836, %832 ]
  %845 = add i64 %844, 1
  %846 = trunc i64 %843 to i32
  %847 = shl i32 1, %846
  %848 = zext i32 %847 to i64
  %849 = icmp eq i64 %845, %848
  br i1 %849, label %850, label %1600

850:                                              ; preds = %842
  %851 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %851) #9
  %852 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8
  %853 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %854 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %853 to i64*
  %855 = load i64, i64* %854, align 8
  %856 = bitcast %"class.std::__1::vector.22"* %852 to i64*
  %857 = load i64, i64* %856, align 8
  %858 = sub i64 %855, %857
  %859 = sdiv exact i64 %858, 1104
  %860 = trunc i64 %859 to i32
  store i32 %860, i32* %11, align 4
  %861 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !12
  %862 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %861, i64 4
  %863 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %862, align 8, !noalias !12
  %864 = call i32 %863(%"class.jxl::Visitor"* %1, i64 285615325188, i64 3594887627075, i32 4, i32* nonnull %11) #9
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %866, label %1598

866:                                              ; preds = %850
  %867 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %868 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %867, i64 12
  %869 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %868, align 8
  %870 = call zeroext i1 %869(%"class.jxl::Visitor"* %1) #9
  br i1 %870, label %871, label %886

871:                                              ; preds = %866
  %872 = load i32, i32* %11, align 4
  %873 = zext i32 %872 to i64
  %874 = load i64, i64* %854, align 8
  %875 = load i64, i64* %856, align 8
  %876 = sub i64 %874, %875
  %877 = sdiv exact i64 %876, 1104
  %878 = icmp ult i64 %877, %873
  %879 = inttoptr i64 %875 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  br i1 %878, label %880, label %882

880:                                              ; preds = %871
  %881 = sub nsw i64 %873, %877
  call void @_ZNSt3__16vectorIN3jxl4jpeg15JPEGHuffmanCodeENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.22"* %852, i64 %881) #9
  br label %886

882:                                              ; preds = %871
  %883 = icmp ugt i64 %877, %873
  br i1 %883, label %884, label %886

884:                                              ; preds = %882
  %885 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %879, i64 %873
  store %"struct.jxl::jpeg::JPEGHuffmanCode"* %885, %"struct.jxl::jpeg::JPEGHuffmanCode"** %853, align 8
  br label %886

886:                                              ; preds = %884, %882, %880, %866
  %887 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %852, i64 0, i32 0, i32 0
  %888 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %887, align 8
  %889 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %853, align 8
  %890 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %888, %889
  br i1 %890, label %1011, label %891

891:                                              ; preds = %886
  %892 = bitcast i32* %13 to i8*
  %893 = bitcast [5 x i64]* %14 to i8*
  %894 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 4
  %895 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 0
  %896 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 1
  %897 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 2
  %898 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 3
  br label %901

899:                                              ; preds = %1006
  %900 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %1010, %889
  br i1 %900, label %1011, label %901

901:                                              ; preds = %891, %899
  %902 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %888, %891 ], [ %1010, %899 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #9
  %903 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %902, i64 0, i32 2
  %904 = load i32, i32* %903, align 4
  %905 = icmp ugt i32 %904, 15
  %906 = zext i1 %905 to i8
  store i8 %906, i8* %12, align 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %892) #9
  %907 = and i32 %904, 15
  store i32 %907, i32* %13, align 4
  %908 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %31, align 8
  %909 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %908, i64 3
  %910 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %909, align 8
  %911 = call i32 %910(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* nonnull %12) #9
  %912 = icmp eq i32 %911, 0
  br i1 %912, label %913, label %1004

913:                                              ; preds = %901
  %914 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %915 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %914, i64 5
  %916 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %915, align 8
  %917 = call i32 %916(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* nonnull %13) #9
  %918 = icmp eq i32 %917, 0
  br i1 %918, label %919, label %1004

919:                                              ; preds = %913
  %920 = load i8, i8* %12, align 1, !range !2
  %921 = shl nuw nsw i8 %920, 4
  %922 = zext i8 %921 to i32
  %923 = load i32, i32* %13, align 4
  %924 = or i32 %923, %922
  store i32 %924, i32* %903, align 4
  %925 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %902, i64 0, i32 3
  %926 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %31, align 8
  %927 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %926, i64 3
  %928 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %927, align 8
  %929 = call i32 %928(%"class.jxl::Visitor"* %1, i1 zeroext true, i8* %925) #9
  %930 = icmp eq i32 %929, 0
  br i1 %930, label %931, label %1004

931:                                              ; preds = %919, %940
  %932 = phi i64 [ %943, %940 ], [ 0, %919 ]
  %933 = phi i64 [ %944, %940 ], [ 0, %919 ]
  %934 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %902, i64 0, i32 0, i32 0, i64 %933
  %935 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !15
  %936 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %935, i64 4
  %937 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %936, align 8, !noalias !15
  %938 = call i32 %937(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 30064771138, i32 0, i32* %934) #9
  %939 = icmp eq i32 %938, 0
  br i1 %939, label %940, label %1004

940:                                              ; preds = %931
  %941 = load i32, i32* %934, align 4
  %942 = zext i32 %941 to i64
  %943 = add i64 %932, %942
  %944 = add nuw nsw i64 %933, 1
  %945 = icmp eq i64 %944, 17
  br i1 %945, label %946, label %931

946:                                              ; preds = %940
  %947 = add i64 %943, -1
  %948 = icmp ugt i64 %947, 256
  br i1 %948, label %1004, label %949

949:                                              ; preds = %946
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %893) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %893, i8 0, i64 40, i1 false)
  br label %950

950:                                              ; preds = %958, %949
  %951 = phi i64 [ %968, %958 ], [ 0, %949 ]
  %952 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %902, i64 0, i32 1, i32 0, i64 %951
  %953 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !18
  %954 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %953, i64 4
  %955 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %954, align 8, !noalias !18
  %956 = call i32 %955(%"class.jxl::Visitor"* %1, i64 554050781185, i64 167503724803, i32 0, i32* %952) #9
  %957 = icmp eq i32 %956, 0
  br i1 %957, label %958, label %1006

958:                                              ; preds = %950
  %959 = load i32, i32* %952, align 4
  %960 = and i32 %959, 63
  %961 = zext i32 %960 to i64
  %962 = shl i64 1, %961
  %963 = lshr i32 %959, 6
  %964 = zext i32 %963 to i64
  %965 = getelementptr inbounds [5 x i64], [5 x i64]* %14, i64 0, i64 %964
  %966 = load i64, i64* %965, align 8
  %967 = or i64 %962, %966
  store i64 %967, i64* %965, align 8
  %968 = add nuw i64 %951, 1
  %969 = icmp eq i64 %968, %943
  br i1 %969, label %970, label %950

970:                                              ; preds = %958
  %971 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %902, i64 0, i32 1, i32 0, i64 %947
  %972 = load i32, i32* %971, align 4
  %973 = icmp eq i32 %972, 256
  br i1 %973, label %974, label %1006

974:                                              ; preds = %970
  %975 = load i64, i64* %894, align 16
  %976 = icmp eq i64 %975, 1
  br i1 %976, label %977, label %991

977:                                              ; preds = %974
  %978 = load i64, i64* %895, align 16
  %979 = call i64 @llvm.ctpop.i64(i64 %978) #9, !range !21
  %980 = add nuw nsw i64 %979, 1
  %981 = load i64, i64* %896, align 8
  %982 = call i64 @llvm.ctpop.i64(i64 %981) #9, !range !21
  %983 = add nuw nsw i64 %982, %980
  %984 = load i64, i64* %897, align 16
  %985 = call i64 @llvm.ctpop.i64(i64 %984) #9, !range !21
  %986 = add nuw nsw i64 %985, %983
  %987 = load i64, i64* %898, align 8
  %988 = call i64 @llvm.ctpop.i64(i64 %987) #9, !range !21
  %989 = add nuw nsw i64 %988, %986
  %990 = icmp eq i64 %989, %943
  br i1 %990, label %994, label %1006

991:                                              ; preds = %974
  %992 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 249, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.39, i64 0, i64 0)) #9
  %993 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

994:                                              ; preds = %977
  %995 = load i8, i8* %12, align 1, !range !2
  %996 = icmp eq i8 %995, 0
  br i1 %996, label %997, label %1006

997:                                              ; preds = %994
  %998 = lshr i64 %978, 12
  %999 = or i64 %998, %981
  %1000 = or i64 %999, %984
  %1001 = or i64 %1000, %987
  %1002 = icmp ne i64 %1001, 0
  %1003 = zext i1 %1002 to i32
  br label %1006

1004:                                             ; preds = %901, %913, %919, %946, %931
  %1005 = phi i32 [ %938, %931 ], [ 1, %946 ], [ %929, %919 ], [ %917, %913 ], [ %911, %901 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %892) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #9
  br label %1598

1006:                                             ; preds = %950, %997, %970, %977, %994
  %1007 = phi i32 [ 1, %970 ], [ 1, %977 ], [ 0, %994 ], [ %1003, %997 ], [ %956, %950 ]
  %1008 = phi i32 [ 1, %970 ], [ 1, %977 ], [ 0, %994 ], [ %1003, %997 ], [ 1, %950 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %893) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %892) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #9
  %1009 = icmp eq i32 %1008, 0
  %1010 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %902, i64 1
  br i1 %1009, label %899, label %1598

1011:                                             ; preds = %899, %886
  %1012 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %435, i64 0, i32 0, i32 0
  %1013 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %1012, align 8
  %1014 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %436, align 8
  %1015 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %1013, %1014
  br i1 %1015, label %1103, label %1018

1016:                                             ; preds = %1095
  %1017 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %1102, %1014
  br i1 %1017, label %1103, label %1018

1018:                                             ; preds = %1011, %1016
  %1019 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %1102, %1016 ], [ %1013, %1011 ]
  %1020 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 4
  %1021 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !22
  %1022 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1021, i64 4
  %1023 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1022, align 8, !noalias !22
  %1024 = call i32 %1023(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372017527422973, i32 1, i32* %1020) #9
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1026, label %1598

1026:                                             ; preds = %1018
  %1027 = load i32, i32* %1020, align 8
  %1028 = icmp ugt i32 %1027, 3
  br i1 %1028, label %1598, label %1029

1029:                                             ; preds = %1026
  %1030 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 0
  %1031 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1032 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1031, i64 5
  %1033 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1032, align 8
  %1034 = call i32 %1033(%"class.jxl::Visitor"* %1, i64 6, i32 0, i32* %1030) #9
  %1035 = icmp eq i32 %1034, 0
  br i1 %1035, label %1036, label %1598

1036:                                             ; preds = %1029
  %1037 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 1
  %1038 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1039 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1038, i64 5
  %1040 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1039, align 8
  %1041 = call i32 %1040(%"class.jxl::Visitor"* %1, i64 6, i32 63, i32* %1037) #9
  %1042 = icmp eq i32 %1041, 0
  br i1 %1042, label %1043, label %1598

1043:                                             ; preds = %1036
  %1044 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 3
  %1045 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1046 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1045, i64 5
  %1047 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1046, align 8
  %1048 = call i32 %1047(%"class.jxl::Visitor"* %1, i64 4, i32 0, i32* %1044) #9
  %1049 = icmp eq i32 %1048, 0
  br i1 %1049, label %1050, label %1598

1050:                                             ; preds = %1043
  %1051 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 2
  %1052 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1053 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1052, i64 5
  %1054 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1053, align 8
  %1055 = call i32 %1054(%"class.jxl::Visitor"* %1, i64 4, i32 0, i32* %1051) #9
  %1056 = icmp eq i32 %1055, 0
  br i1 %1056, label %1057, label %1598

1057:                                             ; preds = %1050
  %1058 = load i32, i32* %1020, align 8
  %1059 = icmp eq i32 %1058, 0
  br i1 %1059, label %1095, label %1064

1060:                                             ; preds = %1087
  %1061 = load i32, i32* %1020, align 8
  %1062 = zext i32 %1061 to i64
  %1063 = icmp ult i64 %1094, %1062
  br i1 %1063, label %1064, label %1095

1064:                                             ; preds = %1057, %1060
  %1065 = phi i64 [ %1094, %1060 ], [ 0, %1057 ]
  %1066 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 5, i32 0, i64 %1065, i32 0
  %1067 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1068 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1067, i64 5
  %1069 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1068, align 8
  %1070 = call i32 %1069(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %1066) #9
  %1071 = icmp eq i32 %1070, 0
  br i1 %1071, label %1072, label %1598

1072:                                             ; preds = %1064
  %1073 = load i32, i32* %1066, align 4
  %1074 = zext i32 %1073 to i64
  %1075 = load i64, i64* %24, align 8
  %1076 = load i64, i64* %26, align 8
  %1077 = sub i64 %1075, %1076
  %1078 = sdiv exact i64 %1077, 48
  %1079 = icmp ugt i64 %1078, %1074
  br i1 %1079, label %1080, label %1598

1080:                                             ; preds = %1072
  %1081 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 5, i32 0, i64 %1065, i32 2
  %1082 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1083 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1082, i64 5
  %1084 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1083, align 8
  %1085 = call i32 %1084(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %1081) #9
  %1086 = icmp eq i32 %1085, 0
  br i1 %1086, label %1087, label %1598

1087:                                             ; preds = %1080
  %1088 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 5, i32 0, i64 %1065, i32 1
  %1089 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1090 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1089, i64 5
  %1091 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1090, align 8
  %1092 = call i32 %1091(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %1088) #9
  %1093 = icmp eq i32 %1092, 0
  %1094 = add nuw nsw i64 %1065, 1
  br i1 %1093, label %1060, label %1598

1095:                                             ; preds = %1060, %1057
  %1096 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 0, i32 6
  %1097 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !25
  %1098 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1097, i64 4
  %1099 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1098, align 8, !noalias !25
  %1100 = call i32 %1099(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 423054278658, i32 10, i32* %1096) #9
  %1101 = icmp eq i32 %1100, 0
  %1102 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1019, i64 1
  br i1 %1101, label %1016, label %1598

1103:                                             ; preds = %1016, %1011
  %1104 = icmp eq i8 %260, 0
  br i1 %1104, label %1112, label %1105

1105:                                             ; preds = %1103
  %1106 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 3
  %1107 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1108 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1107, i64 5
  %1109 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1108, align 8
  %1110 = call i32 %1109(%"class.jxl::Visitor"* %1, i64 16, i32 0, i32* %1106) #9
  %1111 = icmp eq i32 %1110, 0
  br i1 %1111, label %1112, label %1598

1112:                                             ; preds = %1103, %1105
  %1113 = load i64, i64* %437, align 8
  %1114 = load i64, i64* %439, align 8
  %1115 = sub i64 %1113, %1114
  %1116 = sdiv exact i64 %1115, 120
  %1117 = inttoptr i64 %1114 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %1118 = inttoptr i64 %1113 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %1119 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %1117, %1118
  br i1 %1119, label %1325, label %1120

1120:                                             ; preds = %1112
  %1121 = bitcast i32* %15 to i8*
  %1122 = bitcast i32* %16 to i8*
  %1123 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 3
  %1124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 0
  %1125 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %1126 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 2
  br label %1127

1127:                                             ; preds = %1120, %1321
  %1128 = phi i64 [ %1116, %1120 ], [ %1322, %1321 ]
  %1129 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %1117, %1120 ], [ %1323, %1321 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1121) #9
  %1130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 0, i32 7
  %1131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 0, i32 7, i32 0, i32 1
  %1132 = bitcast i32** %1131 to i64*
  %1133 = load i64, i64* %1132, align 8
  %1134 = bitcast %"class.std::__1::vector.48"* %1130 to i64*
  %1135 = load i64, i64* %1134, align 8
  %1136 = sub i64 %1133, %1135
  %1137 = lshr exact i64 %1136, 2
  %1138 = trunc i64 %1137 to i32
  store i32 %1138, i32* %15, align 4
  %1139 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !28
  %1140 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1139, i64 4
  %1141 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1140, align 8, !noalias !28
  %1142 = call i32 %1141(%"class.jxl::Visitor"* %1, i64 143881404416, i64 2813203579011, i32 0, i32* nonnull %15) #9
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1144, label %1317

1144:                                             ; preds = %1127
  %1145 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %1146 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1145, i64 12
  %1147 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1146, align 8
  %1148 = call zeroext i1 %1147(%"class.jxl::Visitor"* %1) #9
  br i1 %1148, label %1149, label %1164

1149:                                             ; preds = %1144
  %1150 = load i32, i32* %15, align 4
  %1151 = zext i32 %1150 to i64
  %1152 = load i64, i64* %1132, align 8
  %1153 = load i64, i64* %1134, align 8
  %1154 = sub i64 %1152, %1153
  %1155 = ashr exact i64 %1154, 2
  %1156 = icmp ult i64 %1155, %1151
  %1157 = inttoptr i64 %1153 to i32*
  br i1 %1156, label %1158, label %1160

1158:                                             ; preds = %1149
  %1159 = sub nsw i64 %1151, %1155
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.48"* %1130, i64 %1159) #9
  br label %1164

1160:                                             ; preds = %1149
  %1161 = icmp ugt i64 %1155, %1151
  br i1 %1161, label %1162, label %1164

1162:                                             ; preds = %1160
  %1163 = getelementptr inbounds i32, i32* %1157, i64 %1151
  store i32* %1163, i32** %1131, align 8
  br label %1164

1164:                                             ; preds = %1162, %1160, %1158, %1144
  %1165 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %1130, i64 0, i32 0, i32 0
  %1166 = load i32*, i32** %1165, align 8
  %1167 = load i32*, i32** %1131, align 8
  %1168 = icmp eq i32* %1166, %1167
  br i1 %1168, label %1189, label %1171

1169:                                             ; preds = %1182
  %1170 = icmp eq i32* %1188, %1167
  br i1 %1170, label %1189, label %1171

1171:                                             ; preds = %1164, %1169
  %1172 = phi i32 [ %1184, %1169 ], [ -1, %1164 ]
  %1173 = phi i32* [ %1188, %1169 ], [ %1166, %1164 ]
  %1174 = add nsw i32 %1172, 1
  %1175 = load i32, i32* %1173, align 4
  %1176 = sub i32 %1175, %1174
  store i32 %1176, i32* %1173, align 4
  %1177 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !31
  %1178 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1177, i64 4
  %1179 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1178, align 8, !noalias !31
  %1180 = call i32 %1179(%"class.jxl::Visitor"* %1, i64 148176371712, i64 5750961209636, i32 0, i32* %1173) #9
  %1181 = icmp eq i32 %1180, 0
  br i1 %1181, label %1182, label %1317

1182:                                             ; preds = %1171
  %1183 = load i32, i32* %1173, align 4
  %1184 = add i32 %1183, %1174
  store i32 %1184, i32* %1173, align 4
  %1185 = icmp sle i32 %1184, %1172
  %1186 = icmp ugt i32 %1184, 1073741824
  %1187 = or i1 %1185, %1186
  %1188 = getelementptr inbounds i32, i32* %1173, i64 1
  br i1 %1187, label %1317, label %1169

1189:                                             ; preds = %1169, %1164
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1122) #9
  %1190 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 0, i32 8
  %1191 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 0, i32 8, i32 0, i32 1
  %1192 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1191 to i64*
  %1193 = load i64, i64* %1192, align 8
  %1194 = bitcast %"class.std::__1::vector.55"* %1190 to i64*
  %1195 = load i64, i64* %1194, align 8
  %1196 = sub i64 %1193, %1195
  %1197 = lshr exact i64 %1196, 3
  %1198 = trunc i64 %1197 to i32
  store i32 %1198, i32* %16, align 4
  %1199 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !34
  %1200 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1199, i64 4
  %1201 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1200, align 8, !noalias !34
  %1202 = call i32 %1201(%"class.jxl::Visitor"* %1, i64 143881404416, i64 2813203579011, i32 0, i32* nonnull %16) #9
  %1203 = icmp eq i32 %1202, 0
  br i1 %1203, label %1204, label %1319

1204:                                             ; preds = %1189
  %1205 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %1206 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1205, i64 12
  %1207 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1206, align 8
  %1208 = call zeroext i1 %1207(%"class.jxl::Visitor"* %1) #9
  br i1 %1208, label %1209, label %1224

1209:                                             ; preds = %1204
  %1210 = load i32, i32* %16, align 4
  %1211 = zext i32 %1210 to i64
  %1212 = load i64, i64* %1192, align 8
  %1213 = load i64, i64* %1194, align 8
  %1214 = sub i64 %1212, %1213
  %1215 = ashr exact i64 %1214, 3
  %1216 = icmp ult i64 %1215, %1211
  %1217 = inttoptr i64 %1213 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  br i1 %1216, label %1218, label %1220

1218:                                             ; preds = %1209
  %1219 = sub nsw i64 %1211, %1215
  call void @_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfo16ExtraZeroRunInfoENS_9allocatorIS4_EEE8__appendEm(%"class.std::__1::vector.55"* %1190, i64 %1219) #9
  br label %1224

1220:                                             ; preds = %1209
  %1221 = icmp ugt i64 %1215, %1211
  br i1 %1221, label %1222, label %1224

1222:                                             ; preds = %1220
  %1223 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1217, i64 %1211
  store %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1223, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %1191, align 8
  br label %1224

1224:                                             ; preds = %1222, %1220, %1218, %1204
  %1225 = load i64, i64* %1192, align 8
  %1226 = load i64, i64* %1194, align 8
  %1227 = icmp eq i64 %1225, %1226
  br i1 %1227, label %1262, label %1234

1228:                                             ; preds = %1255
  %1229 = load i64, i64* %1192, align 8
  %1230 = load i64, i64* %1194, align 8
  %1231 = sub i64 %1229, %1230
  %1232 = ashr exact i64 %1231, 3
  %1233 = icmp ult i64 %1261, %1232
  br i1 %1233, label %1234, label %1262

1234:                                             ; preds = %1224, %1228
  %1235 = phi i64 [ %1230, %1228 ], [ %1226, %1224 ]
  %1236 = phi i32 [ %1257, %1228 ], [ -1, %1224 ]
  %1237 = phi i64 [ %1261, %1228 ], [ 0, %1224 ]
  %1238 = inttoptr i64 %1235 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %1239 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1238, i64 %1237, i32 0
  %1240 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1238, i64 %1237, i32 1
  %1241 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !37
  %1242 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1241, i64 4
  %1243 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1242, align 8, !noalias !37
  %1244 = call i32 %1243(%"class.jxl::Visitor"* %1, i64 281320357889, i64 2778843840675, i32 1, i32* %1240) #9
  %1245 = icmp eq i32 %1244, 0
  br i1 %1245, label %1246, label %1319

1246:                                             ; preds = %1234
  %1247 = add nsw i32 %1236, 1
  %1248 = load i32, i32* %1239, align 4
  %1249 = sub i32 %1248, %1247
  store i32 %1249, i32* %1239, align 4
  %1250 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !40
  %1251 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1250, i64 4
  %1252 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1251, align 8, !noalias !40
  %1253 = call i32 %1252(%"class.jxl::Visitor"* %1, i64 148176371712, i64 5750961209636, i32 0, i32* %1239) #9
  %1254 = icmp eq i32 %1253, 0
  br i1 %1254, label %1255, label %1319

1255:                                             ; preds = %1246
  %1256 = load i32, i32* %1239, align 4
  %1257 = add i32 %1256, %1247
  store i32 %1257, i32* %1239, align 4
  %1258 = icmp sle i32 %1257, %1236
  %1259 = icmp ugt i32 %1257, 1073741824
  %1260 = or i1 %1258, %1259
  %1261 = add nuw i64 %1237, 1
  br i1 %1260, label %1319, label %1228

1262:                                             ; preds = %1228, %1224
  %1263 = load i32, i32* %1123, align 8
  %1264 = icmp eq i32 %1263, 0
  br i1 %1264, label %1321, label %1265

1265:                                             ; preds = %1262
  %1266 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 0, i32 4
  %1267 = load i32, i32* %1266, align 8
  %1268 = icmp ugt i32 %1267, 1
  %1269 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 0, i32 5, i32 0, i64 0, i32 0
  %1270 = load i32, i32* %1269, align 4
  %1271 = zext i32 %1270 to i64
  %1272 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %1124, align 8
  %1273 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1272, i64 %1271, i32 1
  %1274 = load i32, i32* %1273, align 4
  %1275 = select i1 %1268, i32 1, i32 %1274
  %1276 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1272, i64 %1271, i32 2
  %1277 = load i32, i32* %1276, align 8
  %1278 = select i1 %1268, i32 1, i32 %1277
  %1279 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  %1280 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %1272, %1279
  br i1 %1280, label %1298, label %1284

1281:                                             ; preds = %1284
  %1282 = shl i32 %1291, 3
  %1283 = shl i32 %1295, 3
  br label %1298

1284:                                             ; preds = %1265, %1284
  %1285 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %1296, %1284 ], [ %1272, %1265 ]
  %1286 = phi i32 [ %1295, %1284 ], [ 1, %1265 ]
  %1287 = phi i32 [ %1291, %1284 ], [ 1, %1265 ]
  %1288 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1285, i64 0, i32 1
  %1289 = load i32, i32* %1288, align 4
  %1290 = icmp slt i32 %1289, %1287
  %1291 = select i1 %1290, i32 %1287, i32 %1289
  %1292 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1285, i64 0, i32 2
  %1293 = load i32, i32* %1292, align 4
  %1294 = icmp slt i32 %1293, %1286
  %1295 = select i1 %1294, i32 %1286, i32 %1293
  %1296 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %1285, i64 1
  %1297 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %1296, %1279
  br i1 %1297, label %1281, label %1284

1298:                                             ; preds = %1265, %1281
  %1299 = phi i32 [ 8, %1265 ], [ %1282, %1281 ]
  %1300 = phi i32 [ 8, %1265 ], [ %1283, %1281 ]
  %1301 = load i32, i32* %1125, align 8
  %1302 = mul nsw i32 %1301, %1275
  %1303 = add i32 %1299, -1
  %1304 = add i32 %1303, %1302
  %1305 = sdiv i32 %1304, %1299
  %1306 = load i32, i32* %1126, align 4
  %1307 = mul nsw i32 %1306, %1278
  %1308 = add i32 %1300, -1
  %1309 = add i32 %1308, %1307
  %1310 = sdiv i32 %1309, %1300
  %1311 = mul nsw i32 %1310, %1305
  %1312 = add i32 %1263, -1
  %1313 = add i32 %1312, %1311
  %1314 = udiv i32 %1313, %1263
  %1315 = sext i32 %1314 to i64
  %1316 = add i64 %1128, %1315
  br label %1321

1317:                                             ; preds = %1127, %1182, %1171
  %1318 = phi i32 [ %1180, %1171 ], [ 1, %1182 ], [ %1142, %1127 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1121) #9
  br label %1598

1319:                                             ; preds = %1189, %1255, %1234, %1246
  %1320 = phi i32 [ %1244, %1234 ], [ %1253, %1246 ], [ 1, %1255 ], [ %1202, %1189 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1122) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1121) #9
  br label %1598

1321:                                             ; preds = %1298, %1262
  %1322 = phi i64 [ %1316, %1298 ], [ %1128, %1262 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1122) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1121) #9
  %1323 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1129, i64 1
  %1324 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %1323, %1118
  br i1 %1324, label %1325, label %1127

1325:                                             ; preds = %1321, %1112
  %1326 = phi i64 [ %1116, %1112 ], [ %1322, %1321 ]
  %1327 = bitcast %"class.std::__1::vector.48"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1327) #9
  %1328 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %17, i64 0, i32 0, i32 0
  %1329 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %17, i64 0, i32 0, i32 1
  %1330 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %17, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1327, i8 0, i64 24, i1 false) #9
  %1331 = bitcast i32** %1330 to i64*
  %1332 = bitcast %"class.std::__1::vector.48"* %17 to i64*
  %1333 = icmp eq i64 %261, 0
  br i1 %1333, label %1434, label %1334

1334:                                             ; preds = %1325
  %1335 = icmp ugt i64 %261, 4611686018427387903
  br i1 %1335, label %1336, label %1337

1336:                                             ; preds = %1334
  call void @abort() #11
  unreachable

1337:                                             ; preds = %1334
  %1338 = shl i64 %261, 2
  %1339 = call i8* @_Znwm(i64 %1338) #10
  %1340 = bitcast i8* %1339 to i32*
  %1341 = getelementptr inbounds i32, i32* %1340, i64 %261
  %1342 = ptrtoint i32* %1341 to i64
  %1343 = insertelement <2 x i8*> undef, i8* %1339, i32 0
  %1344 = shufflevector <2 x i8*> %1343, <2 x i8*> undef, <2 x i32> zeroinitializer
  %1345 = ptrtoint <2 x i8*> %1344 to <2 x i64>
  %1346 = bitcast %"class.std::__1::vector.48"* %17 to <2 x i64>*
  store <2 x i64> %1345, <2 x i64>* %1346, align 16
  store i64 %1342, i64* %1331, align 16
  %1347 = bitcast i32* %18 to i8*
  %1348 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12, i32 0, i32 0
  %1349 = bitcast i32** %1329 to i64*
  br label %1350

1350:                                             ; preds = %1431, %1337
  %1351 = phi i64 [ 0, %1337 ], [ %1432, %1431 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1347) #9
  store i32 -1431655766, i32* %18, align 4
  %1352 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %1353 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1352, i64 12
  %1354 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1353, align 8
  %1355 = call zeroext i1 %1354(%"class.jxl::Visitor"* %1) #9
  br i1 %1355, label %1365, label %1356

1356:                                             ; preds = %1350
  %1357 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1348, align 8
  %1358 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1357, i64 %1351
  %1359 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1357, i64 %1351, i32 0, i32 1
  %1360 = bitcast i8** %1359 to i64*
  %1361 = load i64, i64* %1360, align 8
  %1362 = bitcast %"class.std::__1::vector.0"* %1358 to i64*
  %1363 = load i64, i64* %1362, align 8
  %1364 = sub i64 %1361, %1363
  br label %1365

1365:                                             ; preds = %1350, %1356
  %1366 = phi i64 [ %1364, %1356 ], [ 0, %1350 ]
  %1367 = trunc i64 %1366 to i32
  store i32 %1367, i32* %18, align 4
  %1368 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1369 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1368, i64 5
  %1370 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1369, align 8
  %1371 = call i32 %1370(%"class.jxl::Visitor"* %1, i64 16, i32 0, i32* nonnull %18) #9
  %1372 = icmp eq i32 %1371, 0
  br i1 %1372, label %1373, label %1588

1373:                                             ; preds = %1365
  %1374 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %1375 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1374, i64 12
  %1376 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1375, align 8
  %1377 = call zeroext i1 %1376(%"class.jxl::Visitor"* %1) #9
  br i1 %1377, label %1378, label %1431

1378:                                             ; preds = %1373
  %1379 = load i32*, i32** %1329, align 8
  %1380 = load i32*, i32** %1330, align 16
  %1381 = icmp ult i32* %1379, %1380
  %1382 = ptrtoint i32* %1380 to i64
  br i1 %1381, label %1383, label %1387

1383:                                             ; preds = %1378
  %1384 = load i32, i32* %18, align 4
  store i32 %1384, i32* %1379, align 4
  %1385 = getelementptr inbounds i32, i32* %1379, i64 1
  %1386 = ptrtoint i32* %1385 to i64
  store i64 %1386, i64* %1349, align 8
  br label %1431

1387:                                             ; preds = %1378
  %1388 = ptrtoint i32* %1379 to i64
  %1389 = load i64, i64* %1332, align 16
  %1390 = sub i64 %1388, %1389
  %1391 = ashr exact i64 %1390, 2
  %1392 = add nsw i64 %1391, 1
  %1393 = icmp ugt i64 %1392, 4611686018427387903
  br i1 %1393, label %1394, label %1396

1394:                                             ; preds = %1387
  %1395 = bitcast %"class.std::__1::vector.48"* %17 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1395) #11
  unreachable

1396:                                             ; preds = %1387
  %1397 = sub i64 %1382, %1389
  %1398 = ashr exact i64 %1397, 2
  %1399 = icmp ult i64 %1398, 2305843009213693951
  br i1 %1399, label %1400, label %1408

1400:                                             ; preds = %1396
  %1401 = ashr exact i64 %1397, 1
  %1402 = icmp ult i64 %1401, %1392
  %1403 = select i1 %1402, i64 %1392, i64 %1401
  %1404 = icmp eq i64 %1403, 0
  br i1 %1404, label %1413, label %1405

1405:                                             ; preds = %1400
  %1406 = icmp ugt i64 %1403, 4611686018427387903
  br i1 %1406, label %1407, label %1408

1407:                                             ; preds = %1405
  call void @abort() #11
  unreachable

1408:                                             ; preds = %1405, %1396
  %1409 = phi i64 [ %1403, %1405 ], [ 4611686018427387903, %1396 ]
  %1410 = shl i64 %1409, 2
  %1411 = call i8* @_Znwm(i64 %1410) #10
  %1412 = bitcast i8* %1411 to i32*
  br label %1413

1413:                                             ; preds = %1408, %1400
  %1414 = phi i64 [ %1409, %1408 ], [ 0, %1400 ]
  %1415 = phi i8* [ %1411, %1408 ], [ null, %1400 ]
  %1416 = phi i32* [ %1412, %1408 ], [ null, %1400 ]
  %1417 = getelementptr inbounds i32, i32* %1416, i64 %1391
  %1418 = getelementptr inbounds i32, i32* %1416, i64 %1414
  %1419 = ptrtoint i32* %1418 to i64
  %1420 = load i32, i32* %18, align 4
  store i32 %1420, i32* %1417, align 4
  %1421 = getelementptr inbounds i32, i32* %1417, i64 1
  %1422 = ptrtoint i32* %1421 to i64
  %1423 = ptrtoint i32* %1416 to i64
  %1424 = icmp sgt i64 %1390, 0
  br i1 %1424, label %1425, label %1427

1425:                                             ; preds = %1413
  %1426 = inttoptr i64 %1389 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1415, i8* align 4 %1426, i64 %1390, i1 false) #9
  br label %1427

1427:                                             ; preds = %1425, %1413
  store i64 %1423, i64* %1332, align 16
  store i64 %1422, i64* %1349, align 8
  store i64 %1419, i64* %1331, align 16
  %1428 = icmp eq i64 %1389, 0
  br i1 %1428, label %1431, label %1429

1429:                                             ; preds = %1427
  %1430 = inttoptr i64 %1389 to i8*
  call void @_ZdlPv(i8* %1430) #10
  br label %1431

1431:                                             ; preds = %1373, %1383, %1427, %1429
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1347) #9
  %1432 = add nuw i64 %1351, 1
  %1433 = icmp eq i64 %1432, %261
  br i1 %1433, label %1434, label %1350

1434:                                             ; preds = %1431, %1325
  %1435 = phi i1 [ true, %1325 ], [ false, %1431 ]
  %1436 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1436) #9
  %1437 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %1438 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  %1439 = bitcast i8** %1438 to i64*
  %1440 = load i64, i64* %1439, align 8
  %1441 = bitcast %"class.std::__1::vector.0"* %1437 to i64*
  %1442 = load i64, i64* %1441, align 8
  %1443 = sub i64 %1440, %1442
  %1444 = trunc i64 %1443 to i32
  store i32 %1444, i32* %19, align 4
  %1445 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %593, align 8, !noalias !43
  %1446 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1445, i64 4
  %1447 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %1446, align 8, !noalias !43
  %1448 = call i32 %1447(%"class.jxl::Visitor"* %1, i64 169651208192, i64 9042611260104751, i32 0, i32* nonnull %19) #9
  %1449 = icmp eq i32 %1448, 0
  br i1 %1449, label %1450, label %1588

1450:                                             ; preds = %1434
  %1451 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 15
  %1452 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %31, align 8
  %1453 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %1452, i64 3
  %1454 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %1453, align 8
  %1455 = call i32 %1454(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %1451) #9
  %1456 = icmp eq i32 %1455, 0
  br i1 %1456, label %1457, label %1588

1457:                                             ; preds = %1450
  %1458 = load i8, i8* %1451, align 4, !range !2
  %1459 = icmp eq i8 %1458, 0
  br i1 %1459, label %1522, label %1460

1460:                                             ; preds = %1457
  %1461 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1461) #9
  %1462 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16
  %1463 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  %1464 = bitcast i8** %1463 to i64*
  %1465 = load i64, i64* %1464, align 8
  %1466 = bitcast %"class.std::__1::vector.0"* %1462 to i64*
  %1467 = load i64, i64* %1466, align 8
  %1468 = sub i64 %1465, %1467
  %1469 = trunc i64 %1468 to i32
  store i32 %1469, i32* %20, align 4
  %1470 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %696, align 8
  %1471 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1470, i64 5
  %1472 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %1471, align 8
  %1473 = call i32 %1472(%"class.jxl::Visitor"* %1, i64 24, i32 0, i32* nonnull %20) #9
  %1474 = icmp eq i32 %1473, 0
  br i1 %1474, label %1475, label %1519

1475:                                             ; preds = %1460
  %1476 = load i32, i32* %20, align 4
  %1477 = zext i32 %1476 to i64
  %1478 = mul i64 %1326, 7
  %1479 = icmp ult i64 %1478, %1477
  br i1 %1479, label %1519, label %1480

1480:                                             ; preds = %1475
  %1481 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %1482 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1481, i64 12
  %1483 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1482, align 8
  %1484 = call zeroext i1 %1483(%"class.jxl::Visitor"* %1) #9
  br i1 %1484, label %1485, label %1499

1485:                                             ; preds = %1480
  %1486 = load i32, i32* %20, align 4
  %1487 = zext i32 %1486 to i64
  %1488 = load i64, i64* %1464, align 8
  %1489 = load i64, i64* %1466, align 8
  %1490 = sub i64 %1488, %1489
  %1491 = icmp ult i64 %1490, %1487
  %1492 = inttoptr i64 %1489 to i8*
  br i1 %1491, label %1493, label %1495

1493:                                             ; preds = %1485
  %1494 = sub i64 %1487, %1490
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.0"* %1462, i64 %1494) #9
  br label %1499

1495:                                             ; preds = %1485
  %1496 = icmp ugt i64 %1490, %1487
  br i1 %1496, label %1497, label %1499

1497:                                             ; preds = %1495
  %1498 = getelementptr inbounds i8, i8* %1492, i64 %1487
  store i8* %1498, i8** %1463, align 8
  br label %1499

1499:                                             ; preds = %1497, %1495, %1493, %1480
  %1500 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1462, i64 0, i32 0, i32 0
  %1501 = load i8*, i8** %1500, align 8
  %1502 = load i8*, i8** %1463, align 8
  %1503 = icmp eq i8* %1501, %1502
  br i1 %1503, label %1521, label %1504

1504:                                             ; preds = %1499, %1514
  %1505 = phi i8* [ %1516, %1514 ], [ %1501, %1499 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %21) #9
  store i8 -86, i8* %21, align 1
  %1506 = load i8, i8* %1505, align 1
  %1507 = icmp ne i8 %1506, 0
  %1508 = zext i1 %1507 to i8
  store i8 %1508, i8* %21, align 1
  %1509 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %31, align 8
  %1510 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %1509, i64 3
  %1511 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %1510, align 8
  %1512 = call i32 %1511(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* nonnull %21) #9
  %1513 = icmp eq i32 %1512, 0
  br i1 %1513, label %1514, label %1518

1514:                                             ; preds = %1504
  %1515 = load i8, i8* %21, align 1, !range !2
  store i8 %1515, i8* %1505, align 1
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %21) #9
  %1516 = getelementptr inbounds i8, i8* %1505, i64 1
  %1517 = icmp eq i8* %1516, %1502
  br i1 %1517, label %1521, label %1504

1518:                                             ; preds = %1504
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %21) #9
  br label %1519

1519:                                             ; preds = %1460, %1475, %1518
  %1520 = phi i32 [ %1512, %1518 ], [ 1, %1475 ], [ %1473, %1460 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1461) #9
  br label %1588

1521:                                             ; preds = %1514, %1499
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1461) #9
  br label %1522

1522:                                             ; preds = %1521, %1457
  %1523 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %38, align 8
  %1524 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1523, i64 12
  %1525 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %1524, align 8
  %1526 = call zeroext i1 %1525(%"class.jxl::Visitor"* %1) #9
  br i1 %1526, label %1527, label %1588

1527:                                             ; preds = %1522
  %1528 = load i32, i32* %19, align 4
  %1529 = zext i32 %1528 to i64
  %1530 = load i64, i64* %1439, align 8
  %1531 = load i64, i64* %1441, align 8
  %1532 = sub i64 %1530, %1531
  %1533 = icmp ult i64 %1532, %1529
  %1534 = inttoptr i64 %1531 to i8*
  br i1 %1533, label %1535, label %1537

1535:                                             ; preds = %1527
  %1536 = sub i64 %1529, %1532
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.0"* %1437, i64 %1536) #9
  br label %1541

1537:                                             ; preds = %1527
  %1538 = icmp ugt i64 %1532, %1529
  br i1 %1538, label %1539, label %1541

1539:                                             ; preds = %1537
  %1540 = getelementptr inbounds i8, i8* %1534, i64 %1529
  store i8* %1540, i8** %1438, align 8
  br label %1541

1541:                                             ; preds = %1535, %1537, %1539
  %1542 = bitcast i32** %1329 to i64*
  %1543 = load i64, i64* %1542, align 8
  %1544 = load i64, i64* %1332, align 16
  %1545 = sub i64 %1543, %1544
  %1546 = ashr exact i64 %1545, 2
  %1547 = icmp eq i64 %1546, %261
  br i1 %1547, label %1551, label %1548

1548:                                             ; preds = %1541
  %1549 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 395, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.65, i64 0, i64 0)) #9
  %1550 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

1551:                                             ; preds = %1541
  %1552 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE7reserveEm(%"class.std::__1::vector"* %1552, i64 %261)
  br i1 %1435, label %1588, label %1553

1553:                                             ; preds = %1551
  %1554 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12, i32 0, i32 1
  %1555 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %1556 = bitcast %"class.std::__1::vector.0"** %1554 to i64*
  br label %1557

1557:                                             ; preds = %1585, %1553
  %1558 = phi i64 [ 0, %1553 ], [ %1586, %1585 ]
  %1559 = load i32*, i32** %1328, align 16
  %1560 = getelementptr inbounds i32, i32* %1559, i64 %1558
  %1561 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1554, align 8
  %1562 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1555, align 8
  %1563 = icmp ult %"class.std::__1::vector.0"* %1561, %1562
  br i1 %1563, label %1564, label %1584

1564:                                             ; preds = %1557
  %1565 = load i32, i32* %1560, align 4
  %1566 = zext i32 %1565 to i64
  %1567 = bitcast %"class.std::__1::vector.0"* %1561 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1567, i8 0, i64 24, i1 false) #9
  %1568 = icmp eq i32 %1565, 0
  br i1 %1568, label %1581, label %1569

1569:                                             ; preds = %1564
  %1570 = call i8* @_Znwm(i64 %1566) #10
  %1571 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1561, i64 0, i32 0, i32 1
  %1572 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1561, i64 0, i32 0, i32 0
  store i8* %1570, i8** %1572, align 8
  %1573 = getelementptr inbounds i8, i8* %1570, i64 %1566
  %1574 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1561, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %1573, i8** %1574, align 8
  %1575 = bitcast i8** %1571 to i64*
  %1576 = ptrtoint i8* %1570 to i64
  %1577 = sub i64 %1566, %1576
  %1578 = getelementptr i8, i8* %1570, i64 %1577
  %1579 = ptrtoint i8* %1578 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1570, i8 0, i64 %1579, i1 false) #9
  %1580 = ptrtoint i8* %1573 to i64
  store i64 %1580, i64* %1575, align 8
  br label %1581

1581:                                             ; preds = %1569, %1564
  %1582 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1561, i64 1
  %1583 = ptrtoint %"class.std::__1::vector.0"* %1582 to i64
  store i64 %1583, i64* %1556, align 8
  br label %1585

1584:                                             ; preds = %1557
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE24__emplace_back_slow_pathIJRjEEEvDpOT_(%"class.std::__1::vector"* %1552, i32* dereferenceable(4) %1560) #9
  br label %1585

1585:                                             ; preds = %1581, %1584
  %1586 = add nuw i64 %1558, 1
  %1587 = icmp eq i64 %1586, %261
  br i1 %1587, label %1588, label %1557

1588:                                             ; preds = %1365, %1585, %1434, %1450, %1519, %1522, %1551
  %1589 = phi i8* [ %1436, %1551 ], [ %1436, %1522 ], [ %1436, %1519 ], [ %1436, %1450 ], [ %1436, %1434 ], [ %1436, %1585 ], [ %1347, %1365 ]
  %1590 = phi i32 [ 0, %1551 ], [ 0, %1522 ], [ %1520, %1519 ], [ %1455, %1450 ], [ %1448, %1434 ], [ 0, %1585 ], [ %1371, %1365 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1589) #9
  %1591 = load i32*, i32** %1328, align 16
  %1592 = icmp eq i32* %1591, null
  br i1 %1592, label %1597, label %1593

1593:                                             ; preds = %1588
  %1594 = ptrtoint i32* %1591 to i64
  %1595 = bitcast i32** %1329 to i64*
  store i64 %1594, i64* %1595, align 8
  %1596 = bitcast i32* %1591 to i8*
  call void @_ZdlPv(i8* %1596) #10
  br label %1597

1597:                                             ; preds = %1588, %1593
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1327) #9
  br label %1598

1598:                                             ; preds = %1006, %1095, %1050, %1043, %1036, %1029, %1026, %1018, %1087, %1080, %1072, %1064, %1319, %1317, %1004, %1105, %850, %1597
  %1599 = phi i32 [ %1590, %1597 ], [ %864, %850 ], [ %1110, %1105 ], [ %1005, %1004 ], [ %1320, %1319 ], [ %1318, %1317 ], [ %1070, %1064 ], [ 1, %1072 ], [ %1085, %1080 ], [ %1092, %1087 ], [ %1100, %1095 ], [ %1024, %1018 ], [ 1, %1026 ], [ %1034, %1029 ], [ %1041, %1036 ], [ %1048, %1043 ], [ %1055, %1050 ], [ %1007, %1006 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %851) #9
  br label %1600

1600:                                             ; preds = %770, %822, %812, %842, %718, %707, %1598
  %1601 = phi i32 [ %1599, %1598 ], [ %716, %707 ], [ 1, %718 ], [ 1, %842 ], [ 1, %822 ], [ %820, %812 ], [ %778, %770 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %703) #9
  br label %1602

1602:                                             ; preds = %694, %1600
  %1603 = phi i32 [ %1601, %1600 ], [ %700, %694 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %663) #9
  br label %1604

1604:                                             ; preds = %653, %644, %638, %632, %599, %582, %1602
  %1605 = phi i32 [ %1603, %1602 ], [ %597, %582 ], [ 1, %599 ], [ %659, %653 ], [ %651, %644 ], [ %642, %638 ], [ 1, %632 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %583) #9
  br label %1606

1606:                                             ; preds = %174, %460, %516, %446, %1604, %119, %228, %181, %580, %507, %2
  %1607 = phi i32 [ %35, %2 ], [ %1605, %1604 ], [ %581, %580 ], [ %102, %119 ], [ %211, %228 ], [ 1, %181 ], [ %508, %507 ], [ %455, %446 ], [ %524, %516 ], [ 1, %460 ], [ 1, %174 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #9
  ret i32 %1607
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3jxl4jpeg8JPEGData16CalculateMcuSizeERKNS0_12JPEGScanInfoEPiS5_(%"struct.jxl::jpeg::JPEGData"* nocapture readonly, %"struct.jxl::jpeg::JPEGScanInfo"* nocapture readonly dereferenceable(120), i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = icmp ugt i32 %6, 1
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 5, i32 0, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 0
  %12 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %12, i64 %10, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = select i1 %7, i32 1, i32 %14
  %16 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %12, i64 %10, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = select i1 %7, i32 1, i32 %17
  %19 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 1
  %20 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %19, align 8
  %21 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %12, %20
  br i1 %21, label %25, label %40

22:                                               ; preds = %40
  %23 = shl i32 %47, 3
  %24 = shl i32 %51, 3
  br label %25

25:                                               ; preds = %22, %4
  %26 = phi i32 [ 8, %4 ], [ %23, %22 ]
  %27 = phi i32 [ 8, %4 ], [ %24, %22 ]
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = mul nsw i32 %29, %15
  %31 = add i32 %26, -1
  %32 = add i32 %31, %30
  %33 = sdiv i32 %32, %26
  store i32 %33, i32* %2, align 4
  %34 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = mul nsw i32 %35, %18
  %37 = add i32 %27, -1
  %38 = add i32 %37, %36
  %39 = sdiv i32 %38, %27
  store i32 %39, i32* %3, align 4
  ret void

40:                                               ; preds = %4, %40
  %41 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %52, %40 ], [ %12, %4 ]
  %42 = phi i32 [ %51, %40 ], [ 1, %4 ]
  %43 = phi i32 [ %47, %40 ], [ 1, %4 ]
  %44 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %41, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %45, %43
  %47 = select i1 %46, i32 %43, i32 %45
  %48 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %41, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %49, %42
  %51 = select i1 %50, i32 %42, i32 %49
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %41, i64 1
  %53 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %52, %20
  br i1 %53, label %22, label %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE7reserveEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.0"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.std::__1::vector.0"*
  br i1 %10, label %12, label %75

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::vector.0"** %13 to i64*
  %15 = icmp ugt i64 %1, 768614336404564650
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #11
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 24
  %21 = mul i64 %1, 24
  %22 = tail call i8* @_Znwm(i64 %21) #10
  %23 = bitcast i8* %22 to %"class.std::__1::vector.0"*
  %24 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %23, i64 %20
  %25 = ptrtoint %"class.std::__1::vector.0"* %24 to i64
  %26 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %23, i64 %1
  %27 = ptrtoint %"class.std::__1::vector.0"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.std::__1::vector.0"*
  %29 = icmp eq %"class.std::__1::vector.0"* %28, %11
  br i1 %29, label %30, label %31

30:                                               ; preds = %17
  store i64 %25, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  br label %70

31:                                               ; preds = %17, %31
  %32 = phi %"class.std::__1::vector.0"* [ %34, %31 ], [ %24, %17 ]
  %33 = phi %"class.std::__1::vector.0"* [ %35, %31 ], [ %28, %17 ]
  %34 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %32, i64 -1
  %35 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 -1
  %36 = bitcast %"class.std::__1::vector.0"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #9
  %37 = bitcast %"class.std::__1::vector.0"* %35 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.0"* %34 to i64*
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 -1, i32 0, i32 1
  %41 = bitcast i8** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %32, i64 -1, i32 0, i32 1
  %44 = bitcast i8** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 -1, i32 0, i32 2, i32 0, i32 0
  %46 = bitcast i8** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %32, i64 -1, i32 0, i32 2, i32 0, i32 0
  %49 = bitcast i8** %48 to i64*
  store i64 %47, i64* %49, align 8
  %50 = bitcast %"class.std::__1::vector.0"* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 24, i1 false) #9
  %51 = icmp eq %"class.std::__1::vector.0"* %35, %11
  br i1 %51, label %52, label %31

52:                                               ; preds = %31
  %53 = ptrtoint %"class.std::__1::vector.0"* %34 to i64
  %54 = load i64, i64* %6, align 8
  %55 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %13, align 8
  %56 = inttoptr i64 %54 to %"class.std::__1::vector.0"*
  store i64 %53, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %57 = icmp eq %"class.std::__1::vector.0"* %55, %56
  br i1 %57, label %70, label %58

58:                                               ; preds = %52, %68
  %59 = phi %"class.std::__1::vector.0"* [ %60, %68 ], [ %55, %52 ]
  %60 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %59, i64 -1
  %61 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %60, i64 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %68, label %64

64:                                               ; preds = %58
  %65 = ptrtoint i8* %62 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %59, i64 -1, i32 0, i32 1
  %67 = bitcast i8** %66 to i64*
  store i64 %65, i64* %67, align 8
  tail call void @_ZdlPv(i8* nonnull %62) #10
  br label %68

68:                                               ; preds = %64, %58
  %69 = icmp eq %"class.std::__1::vector.0"* %60, %56
  br i1 %69, label %70, label %58

70:                                               ; preds = %68, %30, %52
  %71 = phi i64 [ %7, %30 ], [ %54, %52 ], [ %54, %68 ]
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %70
  %74 = inttoptr i64 %71 to i8*
  tail call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %73, %70, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl4jpeg18SetJPEGDataFromICCERKNS_11PaddedBytesEPNS0_8JPEGDataE(%"class.jxl::PaddedBytes"* nocapture readonly dereferenceable(24), %"struct.jxl::jpeg::JPEGData"* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 4
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 4, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.0"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %51, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %13 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %14

14:                                               ; preds = %10, %43
  %15 = phi i64 [ %8, %10 ], [ %44, %43 ]
  %16 = phi i64 [ %6, %10 ], [ %45, %43 ]
  %17 = phi i64 [ 0, %10 ], [ %46, %43 ]
  %18 = phi i64 [ 0, %10 ], [ %47, %43 ]
  %19 = inttoptr i64 %15 to %"class.std::__1::vector.0"*
  %20 = load i32*, i32** %11, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %18
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %43

24:                                               ; preds = %14
  %25 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %19, i64 %18
  %26 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %19, i64 %18, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::vector.0"* %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = add i64 %31, -17
  %33 = add i64 %32, %17
  %34 = load i64, i64* %12, align 8
  %35 = icmp ugt i64 %33, %34
  br i1 %35, label %59, label %36

36:                                               ; preds = %24
  %37 = inttoptr i64 %30 to i8*
  %38 = getelementptr inbounds i8, i8* %37, i64 17
  %39 = load i8*, i8** %13, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %40, i64 %32, i1 false)
  %41 = load i64, i64* %5, align 8
  %42 = load i64, i64* %7, align 8
  br label %43

43:                                               ; preds = %36, %14
  %44 = phi i64 [ %15, %14 ], [ %42, %36 ]
  %45 = phi i64 [ %16, %14 ], [ %41, %36 ]
  %46 = phi i64 [ %17, %14 ], [ %33, %36 ]
  %47 = add nuw i64 %18, 1
  %48 = sub i64 %45, %44
  %49 = sdiv exact i64 %48, 24
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %14, label %51

51:                                               ; preds = %43, %2
  %52 = phi i64 [ 0, %2 ], [ %46, %43 ]
  %53 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %0, i64 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = icmp ne i64 %52, %54
  %56 = icmp ne i64 %52, 0
  %57 = and i1 %56, %55
  %58 = zext i1 %57 to i32
  ret i32 %58

59:                                               ; preds = %24
  ret i32 1
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg8JPEGDataD2Ev(%"struct.jxl::jpeg::JPEGData"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl4jpeg8JPEGDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #10
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i8* %12 to i64
  %16 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  tail call void @_ZdlPv(i8* nonnull %12) #10
  br label %18

18:                                               ; preds = %10, %14
  %19 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %19, i64 0, i32 0, i32 0
  %21 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %20, align 8
  %22 = icmp eq %"class.std::__1::vector.0"* %21, null
  br i1 %22, label %45, label %23

23:                                               ; preds = %18
  %24 = bitcast %"class.std::__1::vector.0"* %21 to i8*
  %25 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12, i32 0, i32 1
  %26 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %25, align 8
  %27 = icmp eq %"class.std::__1::vector.0"* %26, %21
  br i1 %27, label %43, label %28

28:                                               ; preds = %23, %38
  %29 = phi %"class.std::__1::vector.0"* [ %30, %38 ], [ %26, %23 ]
  %30 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %29, i64 -1
  %31 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %30, i64 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %28
  %35 = ptrtoint i8* %32 to i64
  %36 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %29, i64 -1, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  store i64 %35, i64* %37, align 8
  tail call void @_ZdlPv(i8* nonnull %32) #10
  br label %38

38:                                               ; preds = %34, %28
  %39 = icmp eq %"class.std::__1::vector.0"* %30, %21
  br i1 %39, label %40, label %28

40:                                               ; preds = %38
  %41 = bitcast %"class.std::__1::vector"* %19 to i8**
  %42 = load i8*, i8** %41, align 8
  br label %43

43:                                               ; preds = %40, %23
  %44 = phi i8* [ %42, %40 ], [ %24, %23 ]
  store %"class.std::__1::vector.0"* %21, %"class.std::__1::vector.0"** %25, align 8
  tail call void @_ZdlPv(i8* %44) #10
  br label %45

45:                                               ; preds = %18, %43
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %53, label %49

49:                                               ; preds = %45
  %50 = ptrtoint i8* %47 to i64
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  %52 = bitcast i8** %51 to i64*
  store i64 %50, i64* %52, align 8
  tail call void @_ZdlPv(i8* nonnull %47) #10
  br label %53

53:                                               ; preds = %45, %49
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %55 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %54, i64 0, i32 0, i32 0
  %56 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %55, align 8
  %57 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %56, null
  br i1 %57, label %90, label %58

58:                                               ; preds = %53
  %59 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %56 to i8*
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %61 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %60, align 8
  %62 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %61, %56
  br i1 %62, label %88, label %63

63:                                               ; preds = %58, %83
  %64 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %65, %83 ], [ %61, %58 ]
  %65 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %64, i64 -1
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %64, i64 -1, i32 8, i32 0, i32 0
  %67 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %66, align 8
  %68 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %67, null
  br i1 %68, label %74, label %69

69:                                               ; preds = %63
  %70 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %67 to i64
  %71 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %64, i64 -1, i32 8, i32 0, i32 1
  %72 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %67 to i8*
  tail call void @_ZdlPv(i8* %73) #10
  br label %74

74:                                               ; preds = %69, %63
  %75 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %64, i64 -1, i32 7, i32 0, i32 0
  %76 = load i32*, i32** %75, align 8
  %77 = icmp eq i32* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %74
  %79 = ptrtoint i32* %76 to i64
  %80 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %64, i64 -1, i32 7, i32 0, i32 1
  %81 = bitcast i32** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = bitcast i32* %76 to i8*
  tail call void @_ZdlPv(i8* %82) #10
  br label %83

83:                                               ; preds = %78, %74
  %84 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %65, %56
  br i1 %84, label %85, label %63

85:                                               ; preds = %83
  %86 = bitcast %"class.std::__1::vector.45"* %54 to i8**
  %87 = load i8*, i8** %86, align 8
  br label %88

88:                                               ; preds = %85, %58
  %89 = phi i8* [ %87, %85 ], [ %59, %58 ]
  store %"struct.jxl::jpeg::JPEGScanInfo"* %56, %"struct.jxl::jpeg::JPEGScanInfo"** %60, align 8
  tail call void @_ZdlPv(i8* %89) #10
  br label %90

90:                                               ; preds = %53, %88
  %91 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %92 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %91, i64 0, i32 0, i32 0
  %93 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %92, align 8
  %94 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %93, null
  br i1 %94, label %118, label %95

95:                                               ; preds = %90
  %96 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %93 to i8*
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 1
  %98 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %97, align 8
  %99 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %98, %93
  br i1 %99, label %116, label %100

100:                                              ; preds = %95, %111
  %101 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %102, %111 ], [ %98, %95 ]
  %102 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %101, i64 -1
  %103 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %101, i64 -1, i32 6, i32 0, i32 0
  %104 = load i16*, i16** %103, align 8
  %105 = icmp eq i16* %104, null
  br i1 %105, label %111, label %106

106:                                              ; preds = %100
  %107 = ptrtoint i16* %104 to i64
  %108 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %101, i64 -1, i32 6, i32 0, i32 1
  %109 = bitcast i16** %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = bitcast i16* %104 to i8*
  tail call void @_ZdlPv(i8* %110) #10
  br label %111

111:                                              ; preds = %106, %100
  %112 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %102, %93
  br i1 %112, label %113, label %100

113:                                              ; preds = %111
  %114 = bitcast %"class.std::__1::vector.31"* %91 to i8**
  %115 = load i8*, i8** %114, align 8
  br label %116

116:                                              ; preds = %113, %95
  %117 = phi i8* [ %115, %113 ], [ %96, %95 ]
  store %"struct.jxl::jpeg::JPEGComponent"* %93, %"struct.jxl::jpeg::JPEGComponent"** %97, align 8
  tail call void @_ZdlPv(i8* %117) #10
  br label %118

118:                                              ; preds = %90, %116
  %119 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 0
  %120 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %119, align 8
  %121 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %120, null
  br i1 %121, label %127, label %122

122:                                              ; preds = %118
  %123 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %120 to i64
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %125 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %120 to i8*
  tail call void @_ZdlPv(i8* %126) #10
  br label %127

127:                                              ; preds = %118, %122
  %128 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 0
  %129 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %128, align 8
  %130 = icmp eq %"struct.jxl::jpeg::JPEGQuantTable"* %129, null
  br i1 %130, label %136, label %131

131:                                              ; preds = %127
  %132 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %129 to i64
  %133 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %134 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %133 to i64*
  store i64 %132, i64* %134, align 8
  %135 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %129 to i8*
  tail call void @_ZdlPv(i8* %135) #10
  br label %136

136:                                              ; preds = %127, %131
  %137 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %138 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %137, i64 0, i32 0, i32 0
  %139 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %138, align 8
  %140 = icmp eq %"class.std::__1::vector.0"* %139, null
  br i1 %140, label %163, label %141

141:                                              ; preds = %136
  %142 = bitcast %"class.std::__1::vector.0"* %139 to i8*
  %143 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6, i32 0, i32 1
  %144 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %143, align 8
  %145 = icmp eq %"class.std::__1::vector.0"* %144, %139
  br i1 %145, label %161, label %146

146:                                              ; preds = %141, %156
  %147 = phi %"class.std::__1::vector.0"* [ %148, %156 ], [ %144, %141 ]
  %148 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %147, i64 -1
  %149 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %148, i64 0, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %156, label %152

152:                                              ; preds = %146
  %153 = ptrtoint i8* %150 to i64
  %154 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %147, i64 -1, i32 0, i32 1
  %155 = bitcast i8** %154 to i64*
  store i64 %153, i64* %155, align 8
  tail call void @_ZdlPv(i8* nonnull %150) #10
  br label %156

156:                                              ; preds = %152, %146
  %157 = icmp eq %"class.std::__1::vector.0"* %148, %139
  br i1 %157, label %158, label %146

158:                                              ; preds = %156
  %159 = bitcast %"class.std::__1::vector"* %137 to i8**
  %160 = load i8*, i8** %159, align 8
  br label %161

161:                                              ; preds = %158, %141
  %162 = phi i8* [ %160, %158 ], [ %142, %141 ]
  store %"class.std::__1::vector.0"* %139, %"class.std::__1::vector.0"** %143, align 8
  tail call void @_ZdlPv(i8* %162) #10
  br label %163

163:                                              ; preds = %136, %161
  %164 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 0
  %165 = load i32*, i32** %164, align 8
  %166 = icmp eq i32* %165, null
  br i1 %166, label %172, label %167

167:                                              ; preds = %163
  %168 = ptrtoint i32* %165 to i64
  %169 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %170 = bitcast i32** %169 to i64*
  store i64 %168, i64* %170, align 8
  %171 = bitcast i32* %165 to i8*
  tail call void @_ZdlPv(i8* %171) #10
  br label %172

172:                                              ; preds = %163, %167
  %173 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %174 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %173, i64 0, i32 0, i32 0
  %175 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %174, align 8
  %176 = icmp eq %"class.std::__1::vector.0"* %175, null
  br i1 %176, label %199, label %177

177:                                              ; preds = %172
  %178 = bitcast %"class.std::__1::vector.0"* %175 to i8*
  %179 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4, i32 0, i32 1
  %180 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %179, align 8
  %181 = icmp eq %"class.std::__1::vector.0"* %180, %175
  br i1 %181, label %197, label %182

182:                                              ; preds = %177, %192
  %183 = phi %"class.std::__1::vector.0"* [ %184, %192 ], [ %180, %177 ]
  %184 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %183, i64 -1
  %185 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %184, i64 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %192, label %188

188:                                              ; preds = %182
  %189 = ptrtoint i8* %186 to i64
  %190 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %183, i64 -1, i32 0, i32 1
  %191 = bitcast i8** %190 to i64*
  store i64 %189, i64* %191, align 8
  tail call void @_ZdlPv(i8* nonnull %186) #10
  br label %192

192:                                              ; preds = %188, %182
  %193 = icmp eq %"class.std::__1::vector.0"* %184, %175
  br i1 %193, label %194, label %182

194:                                              ; preds = %192
  %195 = bitcast %"class.std::__1::vector"* %173 to i8**
  %196 = load i8*, i8** %195, align 8
  br label %197

197:                                              ; preds = %194, %177
  %198 = phi i8* [ %196, %194 ], [ %178, %177 ]
  store %"class.std::__1::vector.0"* %175, %"class.std::__1::vector.0"** %179, align 8
  tail call void @_ZdlPv(i8* %198) #10
  br label %199

199:                                              ; preds = %172, %197
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg8JPEGDataD0Ev(%"struct.jxl::jpeg::JPEGData"*) unnamed_addr #4 comdat align 2 {
  tail call void @_ZN3jxl4jpeg8JPEGDataD2Ev(%"struct.jxl::jpeg::JPEGData"* %0) #9
  %2 = bitcast %"struct.jxl::jpeg::JPEGData"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl4jpeg8JPEGData4NameEv(%"struct.jxl::jpeg::JPEGData"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.69, i64 0, i64 0)
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.31"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::JPEGComponent"*
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %27, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %14 to i64
  br label %27

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %25, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 0
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 1
  store i32 1, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 2
  store i32 1, i32* %22, align 8
  %23 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 0, i32 3
  %24 = bitcast i32* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 36, i1 false) #9
  %25 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %19, i64 1
  %26 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %25, %14
  br i1 %26, label %16, label %18

27:                                               ; preds = %12, %16
  %28 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %128

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.31"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = sdiv exact i64 %32, 48
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 384307168202282325
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.31"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = sdiv exact i64 %39, 48
  %41 = icmp ult i64 %40, 192153584101141162
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = shl nsw i64 %40, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 384307168202282325, %38 ]
  %49 = mul i64 %48, 48
  %50 = tail call i8* @_Znwm(i64 %49) #10
  %51 = bitcast i8* %50 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %52

52:                                               ; preds = %42, %47
  %53 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %54 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %51, %47 ], [ null, %42 ]
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %54, i64 %33
  %56 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %54, i64 %53
  %57 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %55, i64 %1
  br label %58

58:                                               ; preds = %52, %58
  %59 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %65, %58 ], [ %55, %52 ]
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 0
  store i32 0, i32* %60, align 8
  %61 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 1
  store i32 1, i32* %61, align 4
  %62 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 2
  store i32 1, i32* %62, align 8
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 0, i32 3
  %64 = bitcast i32* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %64, i8 0, i64 36, i1 false) #9
  %65 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %59, i64 1
  %66 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %57, %65
  br i1 %66, label %67, label %58

67:                                               ; preds = %58
  %68 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %56 to i64
  %69 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %57 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %70, align 8
  %72 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %6, align 8
  %73 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %71 to i64
  br label %104

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %79, %76 ], [ %55, %67 ]
  %78 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1
  %81 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %79 to i8*
  %82 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 24, i1 false) #9
  %83 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1, i32 6
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1, i32 6
  %85 = bitcast %"class.std::__1::vector.33"* %83 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #9
  %86 = bitcast %"class.std::__1::vector.33"* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.std::__1::vector.33"* %83 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1, i32 6, i32 0, i32 1
  %90 = bitcast i16** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1, i32 6, i32 0, i32 1
  %93 = bitcast i16** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %78, i64 -1, i32 6, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast i16** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %77, i64 -1, i32 6, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast i16** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = bitcast %"class.std::__1::vector.33"* %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 24, i1 false) #9
  %100 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %80, %71
  br i1 %100, label %101, label %76

101:                                              ; preds = %76
  %102 = load i64, i64* %30, align 8
  %103 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %6, align 8
  br label %104

104:                                              ; preds = %74, %101
  %105 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %71, %74 ], [ %103, %101 ]
  %106 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %55, %74 ], [ %79, %101 ]
  %107 = phi i64 [ %75, %74 ], [ %102, %101 ]
  %108 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %106 to i64
  store i64 %108, i64* %30, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %109 = inttoptr i64 %107 to %"struct.jxl::jpeg::JPEGComponent"*
  %110 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %105, %109
  br i1 %110, label %124, label %111

111:                                              ; preds = %104, %122
  %112 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %113, %122 ], [ %105, %104 ]
  %113 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %112, i64 -1
  %114 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %112, i64 -1, i32 6, i32 0, i32 0
  %115 = load i16*, i16** %114, align 8
  %116 = icmp eq i16* %115, null
  br i1 %116, label %122, label %117

117:                                              ; preds = %111
  %118 = ptrtoint i16* %115 to i64
  %119 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %112, i64 -1, i32 6, i32 0, i32 1
  %120 = bitcast i16** %119 to i64*
  store i64 %118, i64* %120, align 8
  %121 = bitcast i16* %115 to i8*
  tail call void @_ZdlPv(i8* %121) #10
  br label %122

122:                                              ; preds = %117, %111
  %123 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %113, %109
  br i1 %123, label %124, label %111

124:                                              ; preds = %122, %104
  %125 = icmp eq i64 %107, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %124
  %127 = inttoptr i64 %107 to i8*
  tail call void @_ZdlPv(i8* %127) #10
  br label %128

128:                                              ; preds = %126, %124, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.0"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.0"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.0"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #9
  %27 = ptrtoint %"class.std::__1::vector.0"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %123

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #10
  %52 = bitcast i8* %51 to %"class.std::__1::vector.0"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.0"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.0"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.0"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #9
  %64 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.0"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.0"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.0"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.0"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %70, align 8
  %72 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.0"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.0"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.0"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.0"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.0"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #9
  %82 = bitcast %"class.std::__1::vector.0"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.0"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i8** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.0"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #9
  %96 = icmp eq %"class.std::__1::vector.0"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.0"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.0"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.0"*
  %106 = icmp eq %"class.std::__1::vector.0"* %102, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %101, %117
  %108 = phi %"class.std::__1::vector.0"* [ %109, %117 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %109, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i8* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i8** %115 to i64*
  store i64 %114, i64* %116, align 8
  tail call void @_ZdlPv(i8* nonnull %111) #10
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"class.std::__1::vector.0"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %101
  %120 = icmp eq i64 %104, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %121, %119, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13AppMarkerTypeENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfoENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.45"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 120
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 120
  %25 = add i64 %23, 120
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #9
  %27 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %154

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.45"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 120
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 153722867280912930
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.45"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 120
  %42 = icmp ult i64 %41, 76861433640456465
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 153722867280912930, %39 ]
  %50 = mul i64 %49, 120
  %51 = tail call i8* @_Znwm(i64 %50) #10
  %52 = bitcast i8* %51 to %"struct.jxl::jpeg::JPEGScanInfo"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %55, i64 %34
  %57 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %56 to i64
  %58 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 120, i1 false) #9
  %64 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %61, i64 1
  %65 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %64 to i64
  %66 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %58 to i64
  %69 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.45", %"class.std::__1::vector.45"* %0, i64 0, i32 0, i32 0
  %71 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %70, align 8
  %72 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %6, align 8
  %73 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %71 to i64
  br label %122

76:                                               ; preds = %67, %76
  %77 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1
  %80 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1
  %81 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %79 to i8*
  %82 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 72, i1 false) #9
  %83 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1, i32 7
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1, i32 7
  %85 = bitcast %"class.std::__1::vector.48"* %83 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #9
  %86 = bitcast %"class.std::__1::vector.48"* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.std::__1::vector.48"* %83 to i64*
  store i64 %87, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1, i32 7, i32 0, i32 1
  %90 = bitcast i32** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1, i32 7, i32 0, i32 1
  %93 = bitcast i32** %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast i32** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %98 = bitcast i32** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = bitcast %"class.std::__1::vector.48"* %84 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 24, i1 false) #9
  %100 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1, i32 8
  %101 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1, i32 8
  %102 = bitcast %"class.std::__1::vector.55"* %100 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %102, i8 0, i64 24, i1 false) #9
  %103 = bitcast %"class.std::__1::vector.55"* %101 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.std::__1::vector.55"* %100 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1, i32 8, i32 0, i32 1
  %107 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1, i32 8, i32 0, i32 1
  %110 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %109 to i64*
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %78, i64 -1, i32 8, i32 0, i32 2, i32 0, i32 0
  %112 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %77, i64 -1, i32 8, i32 0, i32 2, i32 0, i32 0
  %115 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = bitcast %"class.std::__1::vector.55"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 24, i1 false) #9
  %117 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %80, %71
  br i1 %117, label %118, label %76

118:                                              ; preds = %76
  %119 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %79 to i64
  %120 = load i64, i64* %31, align 8
  %121 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %6, align 8
  br label %122

122:                                              ; preds = %74, %118
  %123 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %71, %74 ], [ %121, %118 ]
  %124 = phi i64 [ %57, %74 ], [ %119, %118 ]
  %125 = phi i64 [ %75, %74 ], [ %120, %118 ]
  store i64 %124, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %126 = inttoptr i64 %125 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %127 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %123, %126
  br i1 %127, label %150, label %128

128:                                              ; preds = %122, %148
  %129 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %130, %148 ], [ %123, %122 ]
  %130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %129, i64 -1
  %131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %129, i64 -1, i32 8, i32 0, i32 0
  %132 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %131, align 8
  %133 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %128
  %135 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %132 to i64
  %136 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %129, i64 -1, i32 8, i32 0, i32 1
  %137 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %132 to i8*
  tail call void @_ZdlPv(i8* %138) #10
  br label %139

139:                                              ; preds = %134, %128
  %140 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %129, i64 -1, i32 7, i32 0, i32 0
  %141 = load i32*, i32** %140, align 8
  %142 = icmp eq i32* %141, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = ptrtoint i32* %141 to i64
  %145 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %129, i64 -1, i32 7, i32 0, i32 1
  %146 = bitcast i32** %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = bitcast i32* %141 to i8*
  tail call void @_ZdlPv(i8* %147) #10
  br label %148

148:                                              ; preds = %143, %139
  %149 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %130, %126
  br i1 %149, label %150, label %128

150:                                              ; preds = %148, %122
  %151 = icmp eq i64 %125, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %150
  %153 = inttoptr i64 %125 to i8*
  tail call void @_ZdlPv(i8* %153) #10
  br label %154

154:                                              ; preds = %152, %150, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.0"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #9
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.0"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #10
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #9
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #9
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #10
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg14JPEGQuantTableENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.15"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 268
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %26, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::JPEGQuantTable"*
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %24, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %14 to i64
  br label %24

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::jpeg::JPEGQuantTable"* [ %22, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %19, i64 0, i32 3
  %21 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 268, i1 false) #9
  store i8 1, i8* %20, align 4
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %19, i64 1
  %23 = icmp eq %"struct.jxl::jpeg::JPEGQuantTable"* %22, %14
  br i1 %23, label %16, label %18

24:                                               ; preds = %12, %16
  %25 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %25, i64* %7, align 8
  br label %82

26:                                               ; preds = %2
  %27 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %8, %28
  %30 = sdiv exact i64 %29, 268
  %31 = add i64 %30, %1
  %32 = icmp ugt i64 %31, 68831134603393849
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #11
  unreachable

35:                                               ; preds = %26
  %36 = sub i64 %5, %28
  %37 = sdiv exact i64 %36, 268
  %38 = icmp ult i64 %37, 34415567301696924
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = shl nsw i64 %37, 1
  %41 = icmp ult i64 %40, %31
  %42 = select i1 %41, i64 %31, i64 %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %35, %39
  %45 = phi i64 [ %42, %39 ], [ 68831134603393849, %35 ]
  %46 = mul i64 %45, 268
  %47 = tail call i8* @_Znwm(i64 %46) #10
  %48 = bitcast i8* %47 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br label %49

49:                                               ; preds = %39, %44
  %50 = phi i64 [ %45, %44 ], [ 0, %39 ]
  %51 = phi %"struct.jxl::jpeg::JPEGQuantTable"* [ %48, %44 ], [ null, %39 ]
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %51, i64 %30
  %53 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %51, i64 %50
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %52, i64 %1
  br label %55

55:                                               ; preds = %49, %55
  %56 = phi %"struct.jxl::jpeg::JPEGQuantTable"* [ %59, %55 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %56, i64 0, i32 3
  %58 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %58, i8 0, i64 268, i1 false) #9
  store i8 1, i8* %57, align 4
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %56, i64 1
  %60 = icmp eq %"struct.jxl::jpeg::JPEGQuantTable"* %54, %59
  br i1 %60, label %61, label %55

61:                                               ; preds = %55
  %62 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %53 to i64
  %63 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %54 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %65 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %64, align 8
  %66 = load i64, i64* %7, align 8
  %67 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %65 to i64
  %68 = sub i64 %66, %67
  %69 = sdiv exact i64 %68, -268
  %70 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %52, i64 %69
  %71 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %70 to i64
  %72 = icmp sgt i64 %68, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %61
  %74 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %70 to i8*
  %75 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 %68, i1 false) #9
  %76 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %64, align 8
  br label %77

77:                                               ; preds = %61, %73
  %78 = phi %"struct.jxl::jpeg::JPEGQuantTable"* [ %65, %61 ], [ %76, %73 ]
  store i64 %71, i64* %27, align 8
  store i64 %63, i64* %7, align 8
  store i64 %62, i64* %4, align 8
  %79 = icmp eq %"struct.jxl::jpeg::JPEGQuantTable"* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %78 to i8*
  tail call void @_ZdlPv(i8* %81) #10
  br label %82

82:                                               ; preds = %80, %77, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg15JPEGHuffmanCodeENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.22"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 1104
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %26, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %24, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %14 to i64
  br label %24

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %22, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %19, i64 0, i32 3
  %21 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 1104, i1 false) #9
  store i8 1, i8* %20, align 4
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %19, i64 1
  %23 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %22, %14
  br i1 %23, label %16, label %18

24:                                               ; preds = %12, %16
  %25 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %25, i64* %7, align 8
  br label %82

26:                                               ; preds = %2
  %27 = bitcast %"class.std::__1::vector.22"* %0 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %8, %28
  %30 = sdiv exact i64 %29, 1104
  %31 = add i64 %30, %1
  %32 = icmp ugt i64 %31, 16709007313142709
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::vector.22"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #11
  unreachable

35:                                               ; preds = %26
  %36 = sub i64 %5, %28
  %37 = sdiv exact i64 %36, 1104
  %38 = icmp ult i64 %37, 8354503656571354
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = shl nsw i64 %37, 1
  %41 = icmp ult i64 %40, %31
  %42 = select i1 %41, i64 %31, i64 %40
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %35, %39
  %45 = phi i64 [ %42, %39 ], [ 16709007313142709, %35 ]
  %46 = mul i64 %45, 1104
  %47 = tail call i8* @_Znwm(i64 %46) #10
  %48 = bitcast i8* %47 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  br label %49

49:                                               ; preds = %39, %44
  %50 = phi i64 [ %45, %44 ], [ 0, %39 ]
  %51 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %48, %44 ], [ null, %39 ]
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %51, i64 %30
  %53 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %51, i64 %50
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %52, i64 %1
  br label %55

55:                                               ; preds = %49, %55
  %56 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %59, %55 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %56, i64 0, i32 3
  %58 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %58, i8 0, i64 1104, i1 false) #9
  store i8 1, i8* %57, align 4
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %56, i64 1
  %60 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %54, %59
  br i1 %60, label %61, label %55

61:                                               ; preds = %55
  %62 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %53 to i64
  %63 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %54 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %0, i64 0, i32 0, i32 0
  %65 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %64, align 8
  %66 = load i64, i64* %7, align 8
  %67 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %65 to i64
  %68 = sub i64 %66, %67
  %69 = sdiv exact i64 %68, -1104
  %70 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %52, i64 %69
  %71 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %70 to i64
  %72 = icmp sgt i64 %68, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %61
  %74 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %70 to i8*
  %75 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 %68, i1 false) #9
  %76 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %64, align 8
  br label %77

77:                                               ; preds = %61, %73
  %78 = phi %"struct.jxl::jpeg::JPEGHuffmanCode"* [ %65, %61 ], [ %76, %73 ]
  store i64 %71, i64* %27, align 8
  store i64 %63, i64* %7, align 8
  store i64 %62, i64* %4, align 8
  %79 = icmp eq %"struct.jxl::jpeg::JPEGHuffmanCode"* %78, null
  br i1 %79, label %82, label %80

80:                                               ; preds = %77
  %81 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %78 to i8*
  tail call void @_ZdlPv(i8* %81) #10
  br label %82

82:                                               ; preds = %80, %77, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.48"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.48"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.48"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg12JPEGScanInfo16ExtraZeroRunInfoENS_9allocatorIS4_EEE8__appendEm(%"class.std::__1::vector.55"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.55"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %57, i64 %33
  %59 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %58 to i8*
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %57, i64 %56
  %61 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %58, i64 %1
  %62 = shl nsw i64 %1, 3
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %60 to i64
  %64 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %58, i64 %71
  %73 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %72 to i8*
  %77 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE24__emplace_back_slow_pathIJRjEEEvDpOT_(%"class.std::__1::vector"*, i32* dereferenceable(4)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::vector.0"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::vector.0"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = bitcast i8* %29 to %"class.std::__1::vector.0"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::vector.0"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::vector.0"* %35 to i64
  %37 = load i32, i32* %1, align 4
  %38 = zext i32 %37 to i64
  %39 = bitcast %"class.std::__1::vector.0"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #9
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %31
  %42 = tail call i8* @_Znwm(i64 %38) #10
  %43 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %9, i32 0, i32 1
  %44 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 0, i32 0, i32 0
  store i8* %42, i8** %44, align 8
  %45 = getelementptr inbounds i8, i8* %42, i64 %38
  %46 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 %9, i32 0, i32 2, i32 0, i32 0
  store i8* %45, i8** %46, align 8
  %47 = bitcast i8** %43 to i64*
  %48 = ptrtoint i8* %42 to i64
  %49 = sub i64 %38, %48
  %50 = getelementptr i8, i8* %42, i64 %49
  %51 = ptrtoint i8* %50 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %42, i8 0, i64 %51, i1 false) #9
  %52 = ptrtoint i8* %45 to i64
  store i64 %52, i64* %47, align 8
  br label %53

53:                                               ; preds = %31, %41
  %54 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 1
  %55 = ptrtoint %"class.std::__1::vector.0"* %54 to i64
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %57 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %56, align 8
  %58 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3, align 8
  %59 = icmp eq %"class.std::__1::vector.0"* %58, %57
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = ptrtoint %"class.std::__1::vector.0"* %57 to i64
  br label %86

62:                                               ; preds = %53, %62
  %63 = phi %"class.std::__1::vector.0"* [ %65, %62 ], [ %34, %53 ]
  %64 = phi %"class.std::__1::vector.0"* [ %66, %62 ], [ %58, %53 ]
  %65 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %63, i64 -1
  %66 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %64, i64 -1
  %67 = bitcast %"class.std::__1::vector.0"* %65 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 24, i1 false) #9
  %68 = bitcast %"class.std::__1::vector.0"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.0"* %65 to i64*
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %64, i64 -1, i32 0, i32 1
  %72 = bitcast i8** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %63, i64 -1, i32 0, i32 1
  %75 = bitcast i8** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %64, i64 -1, i32 0, i32 2, i32 0, i32 0
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %63, i64 -1, i32 0, i32 2, i32 0, i32 0
  %80 = bitcast i8** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast %"class.std::__1::vector.0"* %66 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #9
  %82 = icmp eq %"class.std::__1::vector.0"* %66, %57
  br i1 %82, label %83, label %62

83:                                               ; preds = %62
  %84 = load i64, i64* %6, align 8
  %85 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3, align 8
  br label %86

86:                                               ; preds = %60, %83
  %87 = phi %"class.std::__1::vector.0"* [ %57, %60 ], [ %85, %83 ]
  %88 = phi %"class.std::__1::vector.0"* [ %34, %60 ], [ %65, %83 ]
  %89 = phi i64 [ %61, %60 ], [ %84, %83 ]
  %90 = ptrtoint %"class.std::__1::vector.0"* %88 to i64
  store i64 %90, i64* %6, align 8
  store i64 %55, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %91 = inttoptr i64 %89 to %"class.std::__1::vector.0"*
  %92 = icmp eq %"class.std::__1::vector.0"* %87, %91
  br i1 %92, label %105, label %93

93:                                               ; preds = %86, %103
  %94 = phi %"class.std::__1::vector.0"* [ %95, %103 ], [ %87, %86 ]
  %95 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %94, i64 -1
  %96 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %95, i64 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %93
  %100 = ptrtoint i8* %97 to i64
  %101 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %94, i64 -1, i32 0, i32 1
  %102 = bitcast i8** %101 to i64*
  store i64 %100, i64* %102, align 8
  tail call void @_ZdlPv(i8* nonnull %97) #10
  br label %103

103:                                              ; preds = %99, %93
  %104 = icmp eq %"class.std::__1::vector.0"* %95, %91
  br i1 %104, label %105, label %93

105:                                              ; preds = %103, %86
  %106 = icmp eq i64 %89, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %105
  %108 = inttoptr i64 %89 to i8*
  tail call void @_ZdlPv(i8* %108) #10
  br label %109

109:                                              ; preds = %105, %107
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!17 = distinct !{!17, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!20 = distinct !{!20, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!21 = !{i64 0, i64 65}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!33 = distinct !{!33, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!36 = distinct !{!36, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!39 = distinct !{!39, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!42 = distinct !{!42, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!45 = distinct !{!45, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
