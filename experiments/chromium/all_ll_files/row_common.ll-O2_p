; ModuleID = '../../third_party/libyuv/source/row_common.cc'
source_filename = "../../third_party/libyuv/source/row_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libyuv::YuvConstants" = type { [32 x i8], [32 x i8], [32 x i8], [16 x i16], [16 x i16] }

@kYuvI601Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00", [32 x i8] c"\194\194\194\194\194\194\194\194\194\194\194\194\194\194\194\194", [32 x i8] c"\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f", [16 x i16] [i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997], [16 x i16] [i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160] }, align 32
@kYvuI601Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00f\00", [32 x i8] c"4\194\194\194\194\194\194\194\194\194\194\194\194\194\194\194\19", [32 x i8] c"\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80", [16 x i16] [i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997], [16 x i16] [i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160] }, align 32
@kYuvJPEGConstants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00", [32 x i8] c"\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.", [32 x i8] c"\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z", [16 x i16] [i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320], [16 x i16] [i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32] }, align 32
@kYvuJPEGConstants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00Z\00", [32 x i8] c".\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16.\16", [32 x i8] c"\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q\00q", [16 x i16] [i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320], [16 x i16] [i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32] }, align 32
@kYuvH709Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00", [32 x i8] c"\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22", [32 x i8] c"\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s", [16 x i16] [i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997], [16 x i16] [i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160] }, align 32
@kYvuH709Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00s\00", [32 x i8] c"\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E\22\0E", [32 x i8] c"\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80", [16 x i16] [i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997, i16 18997], [16 x i16] [i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160] }, align 32
@kYuvF709Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00", [32 x i8] c"\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E", [32 x i8] c"\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e", [16 x i16] [i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320], [16 x i16] [i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32] }, align 32
@kYvuF709Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00e\00", [32 x i8] c"\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C\1E\0C", [32 x i8] c"\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w\00w", [16 x i16] [i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320], [16 x i16] [i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32] }, align 32
@kYuv2020Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00", [32 x i8] c"\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*", [32 x i8] c"\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k", [16 x i16] [i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003], [16 x i16] [i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160] }, align 32
@kYvu2020Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00k\00", [32 x i8] c"*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C*\0C", [32 x i8] c"\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80", [16 x i16] [i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003, i16 19003], [16 x i16] [i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160, i16 -1160] }, align 32
@kYuvV2020Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00", [32 x i8] c"\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%", [32 x i8] c"\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^", [16 x i16] [i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320], [16 x i16] [i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32] }, align 32
@kYvuV2020Constants = hidden local_unnamed_addr constant %"struct.libyuv::YuvConstants" { [32 x i8] c"^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00^\00", [32 x i8] c"%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B%\0B", [32 x i8] c"\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x\00x", [16 x i16] [i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320, i16 16320], [16 x i16] [i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32] }, align 32
@fixed_invtbl8 = hidden local_unnamed_addr constant [256 x i32] [i32 16777216, i32 16842751, i32 16809984, i32 16799061, i32 16793600, i32 16790323, i32 16788138, i32 16786578, i32 16785408, i32 16784497, i32 16783769, i32 16783173, i32 16782677, i32 16782257, i32 16781897, i32 16781585, i32 16781312, i32 16781071, i32 16780856, i32 16780665, i32 16780492, i32 16780336, i32 16780194, i32 16780065, i32 16779946, i32 16779837, i32 16779736, i32 16779643, i32 16779556, i32 16779475, i32 16779400, i32 16779330, i32 16779264, i32 16779201, i32 16779143, i32 16779088, i32 16779036, i32 16778987, i32 16778940, i32 16778896, i32 16778854, i32 16778814, i32 16778776, i32 16778740, i32 16778705, i32 16778672, i32 16778640, i32 16778610, i32 16778581, i32 16778553, i32 16778526, i32 16778501, i32 16778476, i32 16778452, i32 16778429, i32 16778407, i32 16778386, i32 16778365, i32 16778345, i32 16778326, i32 16778308, i32 16778290, i32 16778273, i32 16778256, i32 16778240, i32 16778224, i32 16778208, i32 16778194, i32 16778179, i32 16778165, i32 16778152, i32 16778139, i32 16778126, i32 16778113, i32 16778101, i32 16778089, i32 16778078, i32 16778067, i32 16778056, i32 16778045, i32 16778035, i32 16778025, i32 16778015, i32 16778005, i32 16777996, i32 16777987, i32 16777978, i32 16777969, i32 16777960, i32 16777952, i32 16777944, i32 16777936, i32 16777928, i32 16777920, i32 16777913, i32 16777905, i32 16777898, i32 16777891, i32 16777884, i32 16777877, i32 16777871, i32 16777864, i32 16777858, i32 16777852, i32 16777846, i32 16777840, i32 16777834, i32 16777828, i32 16777822, i32 16777817, i32 16777811, i32 16777806, i32 16777801, i32 16777795, i32 16777790, i32 16777785, i32 16777780, i32 16777776, i32 16777771, i32 16777766, i32 16777762, i32 16777757, i32 16777753, i32 16777748, i32 16777744, i32 16777740, i32 16777736, i32 16777732, i32 16777728, i32 16777724, i32 16777720, i32 16777716, i32 16777712, i32 16777708, i32 16777705, i32 16777701, i32 16777697, i32 16777694, i32 16777690, i32 16777687, i32 16777684, i32 16777680, i32 16777677, i32 16777674, i32 16777671, i32 16777667, i32 16777664, i32 16777661, i32 16777658, i32 16777655, i32 16777652, i32 16777650, i32 16777647, i32 16777644, i32 16777641, i32 16777638, i32 16777636, i32 16777633, i32 16777630, i32 16777628, i32 16777625, i32 16777623, i32 16777620, i32 16777618, i32 16777615, i32 16777613, i32 16777610, i32 16777608, i32 16777606, i32 16777603, i32 16777601, i32 16777599, i32 16777597, i32 16777594, i32 16777592, i32 16777590, i32 16777588, i32 16777586, i32 16777584, i32 16777582, i32 16777580, i32 16777578, i32 16777576, i32 16777574, i32 16777572, i32 16777570, i32 16777568, i32 16777566, i32 16777564, i32 16777562, i32 16777560, i32 16777559, i32 16777557, i32 16777555, i32 16777553, i32 16777552, i32 16777550, i32 16777548, i32 16777546, i32 16777545, i32 16777543, i32 16777542, i32 16777540, i32 16777538, i32 16777537, i32 16777535, i32 16777534, i32 16777532, i32 16777531, i32 16777529, i32 16777528, i32 16777526, i32 16777525, i32 16777523, i32 16777522, i32 16777520, i32 16777519, i32 16777518, i32 16777516, i32 16777515, i32 16777513, i32 16777512, i32 16777511, i32 16777509, i32 16777508, i32 16777507, i32 16777505, i32 16777504, i32 16777503, i32 16777502, i32 16777500, i32 16777499, i32 16777498, i32 16777497, i32 16777496, i32 16777494, i32 16777493, i32 16777492, i32 16777491, i32 16777490, i32 16777489, i32 16777487, i32 16777486, i32 16777485, i32 16777484, i32 16777483, i32 16777482, i32 16777481, i32 16777480, i32 16777479, i32 16777478, i32 16777477, i32 16777476, i32 16777475, i32 16777474, i32 16777472], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB24ToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %49

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %36, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %33, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %32, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %34, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  store i8 %14, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %16, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %18, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 3
  store i8 -1, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %12, i64 4
  %23 = getelementptr inbounds i8, i8* %11, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %11, i64 4
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %11, i64 5
  %28 = load i8, i8* %27, align 1
  store i8 %24, i8* %22, align 1
  %29 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %26, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %12, i64 6
  store i8 %28, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 7
  store i8 -1, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %12, i64 8
  %33 = getelementptr inbounds i8, i8* %11, i64 6
  %34 = add i32 %13, -2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %10

36:                                               ; preds = %10, %5
  %37 = phi i8* [ %0, %5 ], [ %33, %10 ]
  %38 = phi i8* [ %1, %5 ], [ %32, %10 ]
  %39 = icmp eq i32 %6, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %36
  %41 = load i8, i8* %37, align 1
  %42 = getelementptr inbounds i8, i8* %37, i64 1
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %37, i64 2
  %45 = load i8, i8* %44, align 1
  store i8 %41, i8* %38, align 1
  %46 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %43, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %45, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %38, i64 3
  store i8 -1, i8* %48, align 1
  br label %49

49:                                               ; preds = %40, %36, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %49

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %36, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %33, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %32, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %34, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %16, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %14, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 3
  store i8 -1, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %12, i64 4
  %23 = getelementptr inbounds i8, i8* %11, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %11, i64 4
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %11, i64 5
  %28 = load i8, i8* %27, align 1
  store i8 %28, i8* %22, align 1
  %29 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %26, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %12, i64 6
  store i8 %24, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 7
  store i8 -1, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %12, i64 8
  %33 = getelementptr inbounds i8, i8* %11, i64 6
  %34 = add i32 %13, -2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %10

36:                                               ; preds = %10, %5
  %37 = phi i8* [ %0, %5 ], [ %33, %10 ]
  %38 = phi i8* [ %1, %5 ], [ %32, %10 ]
  %39 = icmp eq i32 %6, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %36
  %41 = load i8, i8* %37, align 1
  %42 = getelementptr inbounds i8, i8* %37, i64 1
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %37, i64 2
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %38, align 1
  %46 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %43, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %41, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %38, i64 3
  store i8 -1, i8* %48, align 1
  br label %49

49:                                               ; preds = %40, %36, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToRGBARow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %49

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %36, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %33, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %32, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %34, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  store i8 -1, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %16, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 3
  store i8 %14, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %12, i64 4
  %23 = getelementptr inbounds i8, i8* %11, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %11, i64 4
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %11, i64 5
  %28 = load i8, i8* %27, align 1
  store i8 -1, i8* %22, align 1
  %29 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %12, i64 6
  store i8 %26, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 7
  store i8 %24, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %12, i64 8
  %33 = getelementptr inbounds i8, i8* %11, i64 6
  %34 = add i32 %13, -2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %10

36:                                               ; preds = %10, %5
  %37 = phi i8* [ %0, %5 ], [ %33, %10 ]
  %38 = phi i8* [ %1, %5 ], [ %32, %10 ]
  %39 = icmp eq i32 %6, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %36
  %41 = load i8, i8* %37, align 1
  %42 = getelementptr inbounds i8, i8* %37, i64 1
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %37, i64 2
  %45 = load i8, i8* %44, align 1
  store i8 -1, i8* %38, align 1
  %46 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %43, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %38, i64 3
  store i8 %41, i8* %48, align 1
  br label %49

49:                                               ; preds = %40, %36, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToRGB24Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %46

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %34, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %31, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %30, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %32, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %16, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %14, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 3
  %22 = getelementptr inbounds i8, i8* %11, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %11, i64 4
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %11, i64 5
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %21, align 1
  %28 = getelementptr inbounds i8, i8* %12, i64 4
  store i8 %25, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %23, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %12, i64 6
  %31 = getelementptr inbounds i8, i8* %11, i64 6
  %32 = add i32 %13, -2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %10

34:                                               ; preds = %10, %5
  %35 = phi i8* [ %0, %5 ], [ %31, %10 ]
  %36 = phi i8* [ %1, %5 ], [ %30, %10 ]
  %37 = icmp eq i32 %6, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %34
  %39 = load i8, i8* %35, align 1
  %40 = getelementptr inbounds i8, i8* %35, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %35, i64 2
  %43 = load i8, i8* %42, align 1
  store i8 %43, i8* %36, align 1
  %44 = getelementptr inbounds i8, i8* %36, i64 1
  store i8 %41, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %36, i64 2
  store i8 %39, i8* %45, align 1
  br label %46

46:                                               ; preds = %38, %34, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB565ToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %93

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %61, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = shl nuw nsw i64 %12, 1
  %17 = add nuw nsw i64 %16, 2
  %18 = getelementptr i8, i8* %0, i64 %17
  %19 = icmp ugt i8* %18, %1
  %20 = icmp ugt i8* %15, %0
  %21 = and i1 %19, %20
  br i1 %21, label %61, label %22

22:                                               ; preds = %10
  %23 = and i64 %8, 8589934576
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = shl nuw nsw i64 %23, 2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = trunc i64 %23 to i32
  br label %29

29:                                               ; preds = %29, %22
  %30 = phi i64 [ 0, %22 ], [ %57, %29 ]
  %31 = shl i64 %30, 1
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = shl i64 %30, 2
  %34 = bitcast i8* %32 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = shufflevector <32 x i8> %35, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %37 = shufflevector <32 x i8> %35, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %38 = lshr <16 x i8> %36, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %39 = shl <16 x i8> %37, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %40 = and <16 x i8> %39, <i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56>
  %41 = or <16 x i8> %40, %38
  %42 = lshr <16 x i8> %37, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %43 = shl <16 x i8> %36, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %44 = lshr <16 x i8> %36, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %45 = and <16 x i8> %44, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %46 = or <16 x i8> %45, %43
  %47 = shl nuw <16 x i8> %41, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %48 = lshr <16 x i8> %40, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %49 = or <16 x i8> %47, %48
  %50 = and <16 x i8> %37, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %51 = or <16 x i8> %50, %42
  %52 = getelementptr inbounds i8, i8* %1, i64 %33
  %53 = bitcast i8* %52 to <64 x i8>*
  %54 = shufflevector <16 x i8> %46, <16 x i8> %49, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %55 = shufflevector <16 x i8> %51, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %56 = shufflevector <32 x i8> %54, <32 x i8> %55, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %56, <64 x i8>* %53, align 1
  %57 = add i64 %30, 16
  %58 = icmp eq i64 %57, %23
  br i1 %58, label %59, label %29, !llvm.loop !2

59:                                               ; preds = %29
  %60 = icmp eq i64 %8, %23
  br i1 %60, label %93, label %61

61:                                               ; preds = %59, %10, %5
  %62 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %25, %59 ]
  %63 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %27, %59 ]
  %64 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %28, %59 ]
  br label %65

65:                                               ; preds = %61, %65
  %66 = phi i8* [ %90, %65 ], [ %62, %61 ]
  %67 = phi i8* [ %89, %65 ], [ %63, %61 ]
  %68 = phi i32 [ %91, %65 ], [ %64, %61 ]
  %69 = load i8, i8* %66, align 1
  %70 = lshr i8 %69, 5
  %71 = getelementptr inbounds i8, i8* %66, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = shl i8 %72, 3
  %74 = and i8 %73, 56
  %75 = or i8 %74, %70
  %76 = lshr i8 %72, 5
  %77 = shl i8 %69, 3
  %78 = lshr i8 %69, 2
  %79 = and i8 %78, 7
  %80 = or i8 %79, %77
  store i8 %80, i8* %67, align 1
  %81 = shl nuw i8 %75, 2
  %82 = lshr i8 %74, 4
  %83 = or i8 %81, %82
  %84 = getelementptr inbounds i8, i8* %67, i64 1
  store i8 %83, i8* %84, align 1
  %85 = and i8 %72, -8
  %86 = or i8 %85, %76
  %87 = getelementptr inbounds i8, i8* %67, i64 2
  store i8 %86, i8* %87, align 1
  %88 = getelementptr inbounds i8, i8* %67, i64 3
  store i8 -1, i8* %88, align 1
  %89 = getelementptr inbounds i8, i8* %67, i64 4
  %90 = getelementptr inbounds i8, i8* %66, i64 2
  %91 = add nuw nsw i32 %68, 1
  %92 = icmp eq i32 %91, %2
  br i1 %92, label %93, label %65, !llvm.loop !4

93:                                               ; preds = %65, %59, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGB1555ToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %99

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %64, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = shl nuw nsw i64 %12, 1
  %17 = add nuw nsw i64 %16, 2
  %18 = getelementptr i8, i8* %0, i64 %17
  %19 = icmp ugt i8* %18, %1
  %20 = icmp ugt i8* %15, %0
  %21 = and i1 %19, %20
  br i1 %21, label %64, label %22

22:                                               ; preds = %10
  %23 = and i64 %8, 8589934576
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = shl nuw nsw i64 %23, 2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = trunc i64 %23 to i32
  br label %29

29:                                               ; preds = %29, %22
  %30 = phi i64 [ 0, %22 ], [ %60, %29 ]
  %31 = shl i64 %30, 1
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = shl i64 %30, 2
  %34 = bitcast i8* %32 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = shufflevector <32 x i8> %35, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %37 = shufflevector <32 x i8> %35, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %38 = lshr <16 x i8> %36, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %39 = shl <16 x i8> %37, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %40 = and <16 x i8> %39, <i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24>
  %41 = or <16 x i8> %40, %38
  %42 = lshr <16 x i8> %37, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %43 = shl <16 x i8> %36, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %44 = lshr <16 x i8> %36, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %45 = and <16 x i8> %44, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %46 = or <16 x i8> %45, %43
  %47 = shl nuw <16 x i8> %41, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %48 = lshr <16 x i8> %41, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %49 = or <16 x i8> %47, %48
  %50 = shl <16 x i8> %42, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %51 = lshr <16 x i8> %37, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %52 = and <16 x i8> %51, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %53 = or <16 x i8> %50, %52
  %54 = ashr <16 x i8> %37, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %55 = getelementptr inbounds i8, i8* %1, i64 %33
  %56 = bitcast i8* %55 to <64 x i8>*
  %57 = shufflevector <16 x i8> %46, <16 x i8> %49, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %58 = shufflevector <16 x i8> %53, <16 x i8> %54, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %59 = shufflevector <32 x i8> %57, <32 x i8> %58, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %59, <64 x i8>* %56, align 1
  %60 = add i64 %30, 16
  %61 = icmp eq i64 %60, %23
  br i1 %61, label %62, label %29, !llvm.loop !5

62:                                               ; preds = %29
  %63 = icmp eq i64 %8, %23
  br i1 %63, label %99, label %64

64:                                               ; preds = %62, %10, %5
  %65 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %25, %62 ]
  %66 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %27, %62 ]
  %67 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %28, %62 ]
  br label %68

68:                                               ; preds = %64, %68
  %69 = phi i8* [ %96, %68 ], [ %65, %64 ]
  %70 = phi i8* [ %95, %68 ], [ %66, %64 ]
  %71 = phi i32 [ %97, %68 ], [ %67, %64 ]
  %72 = load i8, i8* %69, align 1
  %73 = lshr i8 %72, 5
  %74 = getelementptr inbounds i8, i8* %69, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = shl i8 %75, 3
  %77 = and i8 %76, 24
  %78 = or i8 %77, %73
  %79 = lshr i8 %75, 2
  %80 = shl i8 %72, 3
  %81 = lshr i8 %72, 2
  %82 = and i8 %81, 7
  %83 = or i8 %82, %80
  store i8 %83, i8* %70, align 1
  %84 = shl nuw i8 %78, 3
  %85 = lshr i8 %78, 2
  %86 = or i8 %84, %85
  %87 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %86, i8* %87, align 1
  %88 = shl i8 %79, 3
  %89 = lshr i8 %75, 4
  %90 = and i8 %89, 7
  %91 = or i8 %88, %90
  %92 = getelementptr inbounds i8, i8* %70, i64 2
  store i8 %91, i8* %92, align 1
  %93 = ashr i8 %75, 7
  %94 = getelementptr inbounds i8, i8* %70, i64 3
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds i8, i8* %70, i64 4
  %96 = getelementptr inbounds i8, i8* %69, i64 2
  %97 = add nuw nsw i32 %71, 1
  %98 = icmp eq i32 %97, %2
  br i1 %98, label %99, label %68, !llvm.loop !6

99:                                               ; preds = %68, %62, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGB4444ToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %89

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %59, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = shl nuw nsw i64 %12, 1
  %17 = add nuw nsw i64 %16, 2
  %18 = getelementptr i8, i8* %0, i64 %17
  %19 = icmp ugt i8* %18, %1
  %20 = icmp ugt i8* %15, %0
  %21 = and i1 %19, %20
  br i1 %21, label %59, label %22

22:                                               ; preds = %10
  %23 = and i64 %8, 8589934576
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i8, i8* %0, i64 %24
  %26 = shl nuw nsw i64 %23, 2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = trunc i64 %23 to i32
  br label %29

29:                                               ; preds = %29, %22
  %30 = phi i64 [ 0, %22 ], [ %55, %29 ]
  %31 = shl i64 %30, 1
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = shl i64 %30, 2
  %34 = bitcast i8* %32 to <32 x i8>*
  %35 = load <32 x i8>, <32 x i8>* %34, align 1
  %36 = shufflevector <32 x i8> %35, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %37 = shufflevector <32 x i8> %35, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %38 = and <16 x i8> %36, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %39 = lshr <16 x i8> %36, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %40 = and <16 x i8> %37, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %41 = lshr <16 x i8> %37, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %42 = shl <16 x i8> %36, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %43 = or <16 x i8> %42, %38
  %44 = and <16 x i8> %36, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %45 = or <16 x i8> %44, %39
  %46 = shl <16 x i8> %37, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %47 = or <16 x i8> %46, %40
  %48 = and <16 x i8> %37, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %49 = or <16 x i8> %48, %41
  %50 = getelementptr inbounds i8, i8* %1, i64 %33
  %51 = bitcast i8* %50 to <64 x i8>*
  %52 = shufflevector <16 x i8> %43, <16 x i8> %45, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %53 = shufflevector <16 x i8> %47, <16 x i8> %49, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %54 = shufflevector <32 x i8> %52, <32 x i8> %53, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %54, <64 x i8>* %51, align 1
  %55 = add i64 %30, 16
  %56 = icmp eq i64 %55, %23
  br i1 %56, label %57, label %29, !llvm.loop !7

57:                                               ; preds = %29
  %58 = icmp eq i64 %8, %23
  br i1 %58, label %89, label %59

59:                                               ; preds = %57, %10, %5
  %60 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %25, %57 ]
  %61 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %27, %57 ]
  %62 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %28, %57 ]
  br label %63

63:                                               ; preds = %59, %63
  %64 = phi i8* [ %86, %63 ], [ %60, %59 ]
  %65 = phi i8* [ %85, %63 ], [ %61, %59 ]
  %66 = phi i32 [ %87, %63 ], [ %62, %59 ]
  %67 = load i8, i8* %64, align 1
  %68 = and i8 %67, 15
  %69 = lshr i8 %67, 4
  %70 = getelementptr inbounds i8, i8* %64, i64 1
  %71 = load i8, i8* %70, align 1
  %72 = and i8 %71, 15
  %73 = lshr i8 %71, 4
  %74 = shl i8 %67, 4
  %75 = or i8 %74, %68
  store i8 %75, i8* %65, align 1
  %76 = and i8 %67, -16
  %77 = or i8 %76, %69
  %78 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %77, i8* %78, align 1
  %79 = shl i8 %71, 4
  %80 = or i8 %79, %72
  %81 = getelementptr inbounds i8, i8* %65, i64 2
  store i8 %80, i8* %81, align 1
  %82 = and i8 %71, -16
  %83 = or i8 %82, %73
  %84 = getelementptr inbounds i8, i8* %65, i64 3
  store i8 %83, i8* %84, align 1
  %85 = getelementptr inbounds i8, i8* %65, i64 4
  %86 = getelementptr inbounds i8, i8* %64, i64 2
  %87 = add nuw nsw i32 %66, 1
  %88 = icmp eq i32 %87, %2
  br i1 %88, label %89, label %63, !llvm.loop !8

89:                                               ; preds = %63, %57, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AR30ToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %77

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %51, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = getelementptr i8, i8* %0, i64 %14
  %17 = icmp ugt i8* %16, %1
  %18 = icmp ugt i8* %15, %0
  %19 = and i1 %17, %18
  br i1 %19, label %51, label %20

20:                                               ; preds = %10
  %21 = and i64 %8, 8589934588
  %22 = shl nuw nsw i64 %21, 2
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = shl nuw nsw i64 %21, 2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = trunc i64 %21 to i32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi i64 [ 0, %20 ], [ %47, %27 ]
  %29 = shl i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = shl i64 %28, 2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = bitcast i8* %30 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 1, !alias.scope !9
  %35 = lshr <4 x i32> %34, <i32 2, i32 2, i32 2, i32 2>
  %36 = and <4 x i32> %35, <i32 255, i32 255, i32 255, i32 255>
  %37 = lshr <4 x i32> %34, <i32 30, i32 30, i32 30, i32 30>
  %38 = lshr <4 x i32> %34, <i32 4, i32 4, i32 4, i32 4>
  %39 = and <4 x i32> %38, <i32 65280, i32 65280, i32 65280, i32 65280>
  %40 = or <4 x i32> %36, %39
  %41 = lshr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %42 = and <4 x i32> %41, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %43 = or <4 x i32> %40, %42
  %44 = mul nuw <4 x i32> %37, <i32 1426063360, i32 1426063360, i32 1426063360, i32 1426063360>
  %45 = or <4 x i32> %43, %44
  %46 = bitcast i8* %32 to <4 x i32>*
  store <4 x i32> %45, <4 x i32>* %46, align 4, !alias.scope !12, !noalias !9
  %47 = add i64 %28, 4
  %48 = icmp eq i64 %47, %21
  br i1 %48, label %49, label %27, !llvm.loop !14

49:                                               ; preds = %27
  %50 = icmp eq i64 %8, %21
  br i1 %50, label %77, label %51

51:                                               ; preds = %49, %10, %5
  %52 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %23, %49 ]
  %53 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %49 ]
  %54 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %49 ]
  br label %55

55:                                               ; preds = %51, %55
  %56 = phi i8* [ %74, %55 ], [ %52, %51 ]
  %57 = phi i8* [ %73, %55 ], [ %53, %51 ]
  %58 = phi i32 [ %75, %55 ], [ %54, %51 ]
  %59 = bitcast i8* %56 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = lshr i32 %60, 2
  %62 = and i32 %61, 255
  %63 = lshr i32 %60, 30
  %64 = lshr i32 %60, 4
  %65 = and i32 %64, 65280
  %66 = or i32 %62, %65
  %67 = lshr i32 %60, 6
  %68 = and i32 %67, 16711680
  %69 = or i32 %66, %68
  %70 = mul nuw i32 %63, 1426063360
  %71 = or i32 %69, %70
  %72 = bitcast i8* %57 to i32*
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds i8, i8* %57, i64 4
  %74 = getelementptr inbounds i8, i8* %56, i64 4
  %75 = add nuw nsw i32 %58, 1
  %76 = icmp eq i32 %75, %2
  br i1 %76, label %77, label %55, !llvm.loop !15

77:                                               ; preds = %55, %49, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AR30ToABGRRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %77

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %51, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = getelementptr i8, i8* %0, i64 %14
  %17 = icmp ugt i8* %16, %1
  %18 = icmp ugt i8* %15, %0
  %19 = and i1 %17, %18
  br i1 %19, label %51, label %20

20:                                               ; preds = %10
  %21 = and i64 %8, 8589934588
  %22 = shl nuw nsw i64 %21, 2
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = shl nuw nsw i64 %21, 2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = trunc i64 %21 to i32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi i64 [ 0, %20 ], [ %47, %27 ]
  %29 = shl i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = shl i64 %28, 2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = bitcast i8* %30 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 1, !alias.scope !16
  %35 = lshr <4 x i32> %34, <i32 22, i32 22, i32 22, i32 22>
  %36 = and <4 x i32> %35, <i32 255, i32 255, i32 255, i32 255>
  %37 = lshr <4 x i32> %34, <i32 30, i32 30, i32 30, i32 30>
  %38 = lshr <4 x i32> %34, <i32 4, i32 4, i32 4, i32 4>
  %39 = and <4 x i32> %38, <i32 65280, i32 65280, i32 65280, i32 65280>
  %40 = or <4 x i32> %36, %39
  %41 = shl <4 x i32> %34, <i32 14, i32 14, i32 14, i32 14>
  %42 = and <4 x i32> %41, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %43 = or <4 x i32> %40, %42
  %44 = mul nuw <4 x i32> %37, <i32 1426063360, i32 1426063360, i32 1426063360, i32 1426063360>
  %45 = or <4 x i32> %43, %44
  %46 = bitcast i8* %32 to <4 x i32>*
  store <4 x i32> %45, <4 x i32>* %46, align 4, !alias.scope !19, !noalias !16
  %47 = add i64 %28, 4
  %48 = icmp eq i64 %47, %21
  br i1 %48, label %49, label %27, !llvm.loop !21

49:                                               ; preds = %27
  %50 = icmp eq i64 %8, %21
  br i1 %50, label %77, label %51

51:                                               ; preds = %49, %10, %5
  %52 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %23, %49 ]
  %53 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %49 ]
  %54 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %49 ]
  br label %55

55:                                               ; preds = %51, %55
  %56 = phi i8* [ %74, %55 ], [ %52, %51 ]
  %57 = phi i8* [ %73, %55 ], [ %53, %51 ]
  %58 = phi i32 [ %75, %55 ], [ %54, %51 ]
  %59 = bitcast i8* %56 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = lshr i32 %60, 22
  %62 = and i32 %61, 255
  %63 = lshr i32 %60, 30
  %64 = lshr i32 %60, 4
  %65 = and i32 %64, 65280
  %66 = or i32 %62, %65
  %67 = shl i32 %60, 14
  %68 = and i32 %67, 16711680
  %69 = or i32 %66, %68
  %70 = mul nuw i32 %63, 1426063360
  %71 = or i32 %69, %70
  %72 = bitcast i8* %57 to i32*
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds i8, i8* %57, i64 4
  %74 = getelementptr inbounds i8, i8* %56, i64 4
  %75 = add nuw nsw i32 %58, 1
  %76 = icmp eq i32 %75, %2
  br i1 %76, label %77, label %55, !llvm.loop !22

77:                                               ; preds = %55, %49, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AR30ToAB30Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %117

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 8
  br i1 %9, label %59, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = getelementptr i8, i8* %0, i64 %14
  %17 = icmp ugt i8* %16, %1
  %18 = icmp ugt i8* %15, %0
  %19 = and i1 %17, %18
  br i1 %19, label %59, label %20

20:                                               ; preds = %10
  %21 = and i64 %8, 8589934584
  %22 = shl nuw nsw i64 %21, 2
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = shl nuw nsw i64 %21, 2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = trunc i64 %21 to i32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi i64 [ 0, %20 ], [ %55, %27 ]
  %29 = shl i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = shl i64 %28, 2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = bitcast i8* %30 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 1, !alias.scope !23
  %35 = getelementptr i8, i8* %30, i64 16
  %36 = bitcast i8* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 1, !alias.scope !23
  %38 = and <4 x i32> %34, <i32 -1072694272, i32 -1072694272, i32 -1072694272, i32 -1072694272>
  %39 = and <4 x i32> %37, <i32 -1072694272, i32 -1072694272, i32 -1072694272, i32 -1072694272>
  %40 = lshr <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %41 = lshr <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %42 = and <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = and <4 x i32> %41, <i32 1023, i32 1023, i32 1023, i32 1023>
  %44 = or <4 x i32> %42, %38
  %45 = or <4 x i32> %43, %39
  %46 = shl <4 x i32> %34, <i32 20, i32 20, i32 20, i32 20>
  %47 = shl <4 x i32> %37, <i32 20, i32 20, i32 20, i32 20>
  %48 = and <4 x i32> %46, <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>
  %49 = and <4 x i32> %47, <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>
  %50 = or <4 x i32> %44, %48
  %51 = or <4 x i32> %45, %49
  %52 = bitcast i8* %32 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %52, align 4, !alias.scope !26, !noalias !23
  %53 = getelementptr i8, i8* %32, i64 16
  %54 = bitcast i8* %53 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %54, align 4, !alias.scope !26, !noalias !23
  %55 = add i64 %28, 8
  %56 = icmp eq i64 %55, %21
  br i1 %56, label %57, label %27, !llvm.loop !28

57:                                               ; preds = %27
  %58 = icmp eq i64 %8, %21
  br i1 %58, label %117, label %59

59:                                               ; preds = %57, %10, %5
  %60 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %23, %57 ]
  %61 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %57 ]
  %62 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %57 ]
  %63 = sub i32 %2, %62
  %64 = xor i32 %62, -1
  %65 = and i32 %63, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %81, label %67

67:                                               ; preds = %59
  %68 = bitcast i8* %60 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = and i32 %69, -1072694272
  %71 = lshr i32 %69, 20
  %72 = and i32 %71, 1023
  %73 = or i32 %72, %70
  %74 = shl i32 %69, 20
  %75 = and i32 %74, 1072693248
  %76 = or i32 %73, %75
  %77 = bitcast i8* %61 to i32*
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds i8, i8* %61, i64 4
  %79 = getelementptr inbounds i8, i8* %60, i64 4
  %80 = add nuw nsw i32 %62, 1
  br label %81

81:                                               ; preds = %59, %67
  %82 = phi i8* [ %60, %59 ], [ %79, %67 ]
  %83 = phi i8* [ %61, %59 ], [ %78, %67 ]
  %84 = phi i32 [ %62, %59 ], [ %80, %67 ]
  %85 = sub i32 0, %2
  %86 = icmp eq i32 %64, %85
  br i1 %86, label %117, label %87

87:                                               ; preds = %81, %87
  %88 = phi i8* [ %114, %87 ], [ %82, %81 ]
  %89 = phi i8* [ %113, %87 ], [ %83, %81 ]
  %90 = phi i32 [ %115, %87 ], [ %84, %81 ]
  %91 = bitcast i8* %88 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = and i32 %92, -1072694272
  %94 = lshr i32 %92, 20
  %95 = and i32 %94, 1023
  %96 = or i32 %95, %93
  %97 = shl i32 %92, 20
  %98 = and i32 %97, 1072693248
  %99 = or i32 %96, %98
  %100 = bitcast i8* %89 to i32*
  store i32 %99, i32* %100, align 4
  %101 = getelementptr inbounds i8, i8* %89, i64 4
  %102 = getelementptr inbounds i8, i8* %88, i64 4
  %103 = bitcast i8* %102 to i32*
  %104 = load i32, i32* %103, align 1
  %105 = and i32 %104, -1072694272
  %106 = lshr i32 %104, 20
  %107 = and i32 %106, 1023
  %108 = or i32 %107, %105
  %109 = shl i32 %104, 20
  %110 = and i32 %109, 1072693248
  %111 = or i32 %108, %110
  %112 = bitcast i8* %101 to i32*
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds i8, i8* %89, i64 8
  %114 = getelementptr inbounds i8, i8* %88, i64 8
  %115 = add nuw nsw i32 %90, 2
  %116 = icmp eq i32 %115, %2
  br i1 %116, label %117, label %87, !llvm.loop !29

117:                                              ; preds = %81, %87, %57, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToRGB24Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %46

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %34, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %31, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %30, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %32, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  store i8 %14, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %16, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %18, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 3
  %22 = getelementptr inbounds i8, i8* %11, i64 4
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %11, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %11, i64 6
  %27 = load i8, i8* %26, align 1
  store i8 %23, i8* %21, align 1
  %28 = getelementptr inbounds i8, i8* %12, i64 4
  store i8 %25, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %27, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %12, i64 6
  %31 = getelementptr inbounds i8, i8* %11, i64 8
  %32 = add i32 %13, -2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %10

34:                                               ; preds = %10, %5
  %35 = phi i8* [ %0, %5 ], [ %31, %10 ]
  %36 = phi i8* [ %1, %5 ], [ %30, %10 ]
  %37 = icmp eq i32 %6, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %34
  %39 = load i8, i8* %35, align 1
  %40 = getelementptr inbounds i8, i8* %35, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %35, i64 2
  %43 = load i8, i8* %42, align 1
  store i8 %39, i8* %36, align 1
  %44 = getelementptr inbounds i8, i8* %36, i64 1
  store i8 %41, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %36, i64 2
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %38, %34, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToRAWRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %46

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %34, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %31, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %30, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %32, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %12, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %16, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %14, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 3
  %22 = getelementptr inbounds i8, i8* %11, i64 4
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %11, i64 5
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %11, i64 6
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %21, align 1
  %28 = getelementptr inbounds i8, i8* %12, i64 4
  store i8 %25, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %23, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %12, i64 6
  %31 = getelementptr inbounds i8, i8* %11, i64 8
  %32 = add i32 %13, -2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %10

34:                                               ; preds = %10, %5
  %35 = phi i8* [ %0, %5 ], [ %31, %10 ]
  %36 = phi i8* [ %1, %5 ], [ %30, %10 ]
  %37 = icmp eq i32 %6, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %34
  %39 = load i8, i8* %35, align 1
  %40 = getelementptr inbounds i8, i8* %35, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %35, i64 2
  %43 = load i8, i8* %42, align 1
  store i8 %43, i8* %36, align 1
  %44 = getelementptr inbounds i8, i8* %36, i64 1
  store i8 %41, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %36, i64 2
  store i8 %39, i8* %45, align 1
  br label %46

46:                                               ; preds = %38, %34, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToRGB565Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %121

6:                                                ; preds = %3
  %7 = add i32 %2, -2
  %8 = lshr i32 %7, 1
  %9 = add nuw i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = icmp ult i32 %9, 5
  br i1 %11, label %75, label %12

12:                                               ; preds = %6
  %13 = add i32 %2, -2
  %14 = lshr i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = shl nuw nsw i64 %15, 3
  %20 = or i64 %19, 7
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = icmp ugt i8* %21, %1
  %23 = icmp ugt i8* %18, %0
  %24 = and i1 %22, %23
  br i1 %24, label %75, label %25

25:                                               ; preds = %12
  %26 = and i64 %10, 3
  %27 = icmp eq i64 %26, 0
  %28 = select i1 %27, i64 4, i64 %26
  %29 = sub nsw i64 %10, %28
  %30 = shl nsw i64 %29, 3
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = shl nsw i64 %29, 2
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = trunc i64 %29 to i32
  %35 = shl i32 %34, 1
  br label %36

36:                                               ; preds = %36, %25
  %37 = phi i64 [ 0, %25 ], [ %73, %36 ]
  %38 = shl i64 %37, 3
  %39 = getelementptr i8, i8* %0, i64 %38
  %40 = shl i64 %37, 2
  %41 = getelementptr i8, i8* %1, i64 %40
  %42 = bitcast i8* %39 to <32 x i8>*
  %43 = load <32 x i8>, <32 x i8>* %42, align 1
  %44 = shufflevector <32 x i8> %43, <32 x i8> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %45 = shufflevector <32 x i8> %43, <32 x i8> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %46 = shufflevector <32 x i8> %43, <32 x i8> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %47 = shufflevector <32 x i8> %43, <32 x i8> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %48 = shufflevector <32 x i8> %43, <32 x i8> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %49 = shufflevector <32 x i8> %43, <32 x i8> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %50 = lshr <4 x i8> %44, <i8 3, i8 3, i8 3, i8 3>
  %51 = lshr <4 x i8> %45, <i8 2, i8 2, i8 2, i8 2>
  %52 = lshr <4 x i8> %46, <i8 3, i8 3, i8 3, i8 3>
  %53 = lshr <4 x i8> %47, <i8 3, i8 3, i8 3, i8 3>
  %54 = lshr <4 x i8> %48, <i8 2, i8 2, i8 2, i8 2>
  %55 = lshr <4 x i8> %49, <i8 3, i8 3, i8 3, i8 3>
  %56 = zext <4 x i8> %50 to <4 x i32>
  %57 = zext <4 x i8> %51 to <4 x i32>
  %58 = shl nuw nsw <4 x i32> %57, <i32 5, i32 5, i32 5, i32 5>
  %59 = or <4 x i32> %58, %56
  %60 = zext <4 x i8> %52 to <4 x i32>
  %61 = shl nuw nsw <4 x i32> %60, <i32 11, i32 11, i32 11, i32 11>
  %62 = or <4 x i32> %59, %61
  %63 = zext <4 x i8> %53 to <4 x i32>
  %64 = shl nuw nsw <4 x i32> %63, <i32 16, i32 16, i32 16, i32 16>
  %65 = or <4 x i32> %62, %64
  %66 = zext <4 x i8> %54 to <4 x i32>
  %67 = shl nuw nsw <4 x i32> %66, <i32 21, i32 21, i32 21, i32 21>
  %68 = or <4 x i32> %65, %67
  %69 = zext <4 x i8> %55 to <4 x i32>
  %70 = shl nuw <4 x i32> %69, <i32 27, i32 27, i32 27, i32 27>
  %71 = or <4 x i32> %68, %70
  %72 = bitcast i8* %41 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %72, align 4, !alias.scope !30, !noalias !33
  %73 = add i64 %37, 4
  %74 = icmp eq i64 %73, %29
  br i1 %74, label %75, label %36, !llvm.loop !35

75:                                               ; preds = %36, %12, %6
  %76 = phi i8* [ %0, %12 ], [ %0, %6 ], [ %31, %36 ]
  %77 = phi i8* [ %1, %12 ], [ %1, %6 ], [ %33, %36 ]
  %78 = phi i32 [ 0, %12 ], [ 0, %6 ], [ %35, %36 ]
  br label %79

79:                                               ; preds = %75, %79
  %80 = phi i8* [ %118, %79 ], [ %76, %75 ]
  %81 = phi i8* [ %117, %79 ], [ %77, %75 ]
  %82 = phi i32 [ %119, %79 ], [ %78, %75 ]
  %83 = load i8, i8* %80, align 1
  %84 = lshr i8 %83, 3
  %85 = getelementptr inbounds i8, i8* %80, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = lshr i8 %86, 2
  %88 = getelementptr inbounds i8, i8* %80, i64 2
  %89 = load i8, i8* %88, align 1
  %90 = lshr i8 %89, 3
  %91 = getelementptr inbounds i8, i8* %80, i64 4
  %92 = load i8, i8* %91, align 1
  %93 = lshr i8 %92, 3
  %94 = getelementptr inbounds i8, i8* %80, i64 5
  %95 = load i8, i8* %94, align 1
  %96 = lshr i8 %95, 2
  %97 = getelementptr inbounds i8, i8* %80, i64 6
  %98 = load i8, i8* %97, align 1
  %99 = lshr i8 %98, 3
  %100 = zext i8 %84 to i32
  %101 = zext i8 %87 to i32
  %102 = shl nuw nsw i32 %101, 5
  %103 = or i32 %102, %100
  %104 = zext i8 %90 to i32
  %105 = shl nuw nsw i32 %104, 11
  %106 = or i32 %103, %105
  %107 = zext i8 %93 to i32
  %108 = shl nuw nsw i32 %107, 16
  %109 = or i32 %106, %108
  %110 = zext i8 %96 to i32
  %111 = shl nuw nsw i32 %110, 21
  %112 = or i32 %109, %111
  %113 = zext i8 %99 to i32
  %114 = shl nuw i32 %113, 27
  %115 = or i32 %112, %114
  %116 = bitcast i8* %81 to i32*
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds i8, i8* %81, i64 4
  %118 = getelementptr inbounds i8, i8* %80, i64 8
  %119 = add nuw nsw i32 %82, 2
  %120 = icmp slt i32 %119, %4
  br i1 %120, label %79, label %121, !llvm.loop !36

121:                                              ; preds = %79, %3
  %122 = phi i8* [ %1, %3 ], [ %117, %79 ]
  %123 = phi i8* [ %0, %3 ], [ %118, %79 ]
  %124 = and i32 %2, 1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %143, label %126

126:                                              ; preds = %121
  %127 = load i8, i8* %123, align 1
  %128 = lshr i8 %127, 3
  %129 = getelementptr inbounds i8, i8* %123, i64 1
  %130 = load i8, i8* %129, align 1
  %131 = lshr i8 %130, 2
  %132 = getelementptr inbounds i8, i8* %123, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = lshr i8 %133, 3
  %135 = zext i8 %128 to i16
  %136 = zext i8 %131 to i16
  %137 = shl nuw nsw i16 %136, 5
  %138 = or i16 %137, %135
  %139 = zext i8 %134 to i16
  %140 = shl nuw i16 %139, 11
  %141 = or i16 %138, %140
  %142 = bitcast i8* %122 to i16*
  store i16 %141, i16* %142, align 2
  br label %143

143:                                              ; preds = %121, %126
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToRGB565DitherRow_C(i8* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  store i32 %2, i32* %5, align 4
  %7 = add nsw i32 %3, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %192

9:                                                ; preds = %4
  %10 = bitcast i32* %5 to i8*
  %11 = add i32 %3, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ugt i32 %11, 7
  %16 = and i32 %3, -2
  %17 = icmp eq i32 %16, 2
  %18 = and i1 %15, %17
  br i1 %18, label %19, label %117

19:                                               ; preds = %9
  %20 = add i32 %3, -2
  %21 = lshr i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 2
  %24 = add nuw nsw i64 %23, 4
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = shl nuw nsw i64 %22, 3
  %27 = or i64 %26, 7
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = mul nsw i64 %22, -2
  %30 = getelementptr i8, i8* %6, i64 %29
  %31 = getelementptr inbounds i8, i8* %6, i64 2
  %32 = icmp ugt i8* %28, %1
  %33 = icmp ugt i8* %25, %0
  %34 = and i1 %32, %33
  %35 = icmp ugt i8* %31, %1
  %36 = icmp ult i8* %30, %25
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  br i1 %38, label %117, label %39

39:                                               ; preds = %19
  %40 = and i64 %14, 3
  %41 = icmp eq i64 %40, 0
  %42 = select i1 %41, i64 4, i64 %40
  %43 = sub nsw i64 %14, %42
  %44 = shl nsw i64 %43, 3
  %45 = getelementptr i8, i8* %0, i64 %44
  %46 = shl nsw i64 %43, 2
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = trunc i64 %43 to i32
  %49 = shl i32 %48, 1
  %50 = getelementptr inbounds i8, i8* %10, i64 -6
  %51 = bitcast i8* %50 to <8 x i8>*
  %52 = load <8 x i8>, <8 x i8>* %51, align 2
  %53 = shufflevector <8 x i8> %52, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %54 = shufflevector <4 x i8> %53, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %55 = shufflevector <8 x i8> %52, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %56 = shufflevector <4 x i8> %55, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %57 = zext <4 x i8> %54 to <4 x i32>
  %58 = zext <4 x i8> %56 to <4 x i32>
  br label %59

59:                                               ; preds = %59, %39
  %60 = phi i64 [ 0, %39 ], [ %115, %59 ]
  %61 = shl i64 %60, 3
  %62 = getelementptr i8, i8* %0, i64 %61
  %63 = shl i64 %60, 2
  %64 = getelementptr i8, i8* %1, i64 %63
  %65 = bitcast i8* %62 to <32 x i8>*
  %66 = load <32 x i8>, <32 x i8>* %65, align 1
  %67 = shufflevector <32 x i8> %66, <32 x i8> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %68 = shufflevector <32 x i8> %66, <32 x i8> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %69 = shufflevector <32 x i8> %66, <32 x i8> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %70 = shufflevector <32 x i8> %66, <32 x i8> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %71 = shufflevector <32 x i8> %66, <32 x i8> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %72 = shufflevector <32 x i8> %66, <32 x i8> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %73 = zext <4 x i8> %67 to <4 x i32>
  %74 = add nuw nsw <4 x i32> %73, %57
  %75 = icmp ugt <4 x i32> %74, <i32 254, i32 254, i32 254, i32 254>
  %76 = lshr <4 x i32> %74, <i32 3, i32 3, i32 3, i32 3>
  %77 = and <4 x i32> %76, <i32 31, i32 31, i32 31, i32 31>
  %78 = select <4 x i1> %75, <4 x i32> <i32 31, i32 31, i32 31, i32 31>, <4 x i32> %77
  %79 = zext <4 x i8> %68 to <4 x i32>
  %80 = add nuw nsw <4 x i32> %79, %57
  %81 = icmp ugt <4 x i32> %80, <i32 254, i32 254, i32 254, i32 254>
  %82 = zext <4 x i8> %69 to <4 x i32>
  %83 = add nuw nsw <4 x i32> %82, %57
  %84 = icmp ugt <4 x i32> %83, <i32 254, i32 254, i32 254, i32 254>
  %85 = zext <4 x i8> %70 to <4 x i32>
  %86 = add nuw nsw <4 x i32> %85, %58
  %87 = icmp ugt <4 x i32> %86, <i32 254, i32 254, i32 254, i32 254>
  %88 = zext <4 x i8> %71 to <4 x i32>
  %89 = add nuw nsw <4 x i32> %88, %58
  %90 = icmp ugt <4 x i32> %89, <i32 254, i32 254, i32 254, i32 254>
  %91 = zext <4 x i8> %72 to <4 x i32>
  %92 = add nuw nsw <4 x i32> %91, %58
  %93 = icmp ugt <4 x i32> %92, <i32 254, i32 254, i32 254, i32 254>
  %94 = lshr <4 x i32> %92, <i32 3, i32 3, i32 3, i32 3>
  %95 = shl nuw nsw <4 x i32> %80, <i32 3, i32 3, i32 3, i32 3>
  %96 = and <4 x i32> %95, <i32 2016, i32 2016, i32 2016, i32 2016>
  %97 = select <4 x i1> %81, <4 x i32> <i32 2016, i32 2016, i32 2016, i32 2016>, <4 x i32> %96
  %98 = or <4 x i32> %97, %78
  %99 = shl nuw nsw <4 x i32> %83, <i32 8, i32 8, i32 8, i32 8>
  %100 = and <4 x i32> %99, <i32 63488, i32 63488, i32 63488, i32 63488>
  %101 = select <4 x i1> %84, <4 x i32> <i32 63488, i32 63488, i32 63488, i32 63488>, <4 x i32> %100
  %102 = or <4 x i32> %98, %101
  %103 = shl nuw nsw <4 x i32> %86, <i32 13, i32 13, i32 13, i32 13>
  %104 = and <4 x i32> %103, <i32 2031616, i32 2031616, i32 2031616, i32 2031616>
  %105 = select <4 x i1> %87, <4 x i32> <i32 2031616, i32 2031616, i32 2031616, i32 2031616>, <4 x i32> %104
  %106 = or <4 x i32> %102, %105
  %107 = shl nuw nsw <4 x i32> %89, <i32 19, i32 19, i32 19, i32 19>
  %108 = and <4 x i32> %107, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %109 = select <4 x i1> %90, <4 x i32> <i32 132120576, i32 132120576, i32 132120576, i32 132120576>, <4 x i32> %108
  %110 = or <4 x i32> %106, %109
  %111 = shl <4 x i32> %94, <i32 27, i32 27, i32 27, i32 27>
  %112 = select <4 x i1> %93, <4 x i32> <i32 -134217728, i32 -134217728, i32 -134217728, i32 -134217728>, <4 x i32> %111
  %113 = or <4 x i32> %110, %112
  %114 = bitcast i8* %64 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %114, align 4, !alias.scope !37, !noalias !40
  %115 = add i64 %60, 4
  %116 = icmp eq i64 %115, %43
  br i1 %116, label %117, label %59, !llvm.loop !43

117:                                              ; preds = %59, %9, %19
  %118 = phi i8* [ %0, %19 ], [ %0, %9 ], [ %45, %59 ]
  %119 = phi i8* [ %1, %19 ], [ %1, %9 ], [ %47, %59 ]
  %120 = phi i32 [ 0, %19 ], [ 0, %9 ], [ %49, %59 ]
  br label %121

121:                                              ; preds = %117, %121
  %122 = phi i8* [ %189, %121 ], [ %118, %117 ]
  %123 = phi i8* [ %188, %121 ], [ %119, %117 ]
  %124 = phi i32 [ %190, %121 ], [ %120, %117 ]
  %125 = and i32 %124, 2
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %10, i64 %126
  %128 = load i8, i8* %127, align 2
  %129 = zext i8 %128 to i32
  %130 = or i32 %125, 1
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %10, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = load i8, i8* %122, align 1
  %136 = zext i8 %135 to i32
  %137 = add nuw nsw i32 %136, %129
  %138 = icmp ugt i32 %137, 254
  %139 = lshr i32 %137, 3
  %140 = and i32 %139, 31
  %141 = select i1 %138, i32 31, i32 %140
  %142 = getelementptr inbounds i8, i8* %122, i64 1
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add nuw nsw i32 %144, %129
  %146 = icmp ugt i32 %145, 254
  %147 = getelementptr inbounds i8, i8* %122, i64 2
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = add nuw nsw i32 %149, %129
  %151 = icmp ugt i32 %150, 254
  %152 = getelementptr inbounds i8, i8* %122, i64 4
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = add nuw nsw i32 %154, %134
  %156 = icmp ugt i32 %155, 254
  %157 = getelementptr inbounds i8, i8* %122, i64 5
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = add nuw nsw i32 %159, %134
  %161 = icmp ugt i32 %160, 254
  %162 = getelementptr inbounds i8, i8* %122, i64 6
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = add nuw nsw i32 %164, %134
  %166 = icmp ugt i32 %165, 254
  %167 = lshr i32 %165, 3
  %168 = shl nuw nsw i32 %145, 3
  %169 = and i32 %168, 2016
  %170 = select i1 %146, i32 2016, i32 %169
  %171 = or i32 %170, %141
  %172 = shl nuw nsw i32 %150, 8
  %173 = and i32 %172, 63488
  %174 = select i1 %151, i32 63488, i32 %173
  %175 = or i32 %171, %174
  %176 = shl nuw nsw i32 %155, 13
  %177 = and i32 %176, 2031616
  %178 = select i1 %156, i32 2031616, i32 %177
  %179 = or i32 %175, %178
  %180 = shl nuw nsw i32 %160, 19
  %181 = and i32 %180, 132120576
  %182 = select i1 %161, i32 132120576, i32 %181
  %183 = or i32 %179, %182
  %184 = shl i32 %167, 27
  %185 = select i1 %166, i32 -134217728, i32 %184
  %186 = or i32 %183, %185
  %187 = bitcast i8* %123 to i32*
  store i32 %186, i32* %187, align 4
  %188 = getelementptr inbounds i8, i8* %123, i64 4
  %189 = getelementptr inbounds i8, i8* %122, i64 8
  %190 = add nuw nsw i32 %124, 2
  %191 = icmp slt i32 %190, %7
  br i1 %191, label %121, label %192, !llvm.loop !44

192:                                              ; preds = %121, %4
  %193 = phi i8* [ %1, %4 ], [ %188, %121 ]
  %194 = phi i8* [ %0, %4 ], [ %189, %121 ]
  %195 = and i32 %3, 1
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %230, label %197

197:                                              ; preds = %192
  %198 = and i32 %7, 3
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds i8, i8* %6, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = load i8, i8* %194, align 1
  %204 = zext i8 %203 to i32
  %205 = add nuw nsw i32 %204, %202
  %206 = icmp ugt i32 %205, 254
  %207 = lshr i32 %205, 3
  %208 = and i32 %207, 31
  %209 = select i1 %206, i32 31, i32 %208
  %210 = getelementptr inbounds i8, i8* %194, i64 1
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = add nuw nsw i32 %212, %202
  %214 = icmp ugt i32 %213, 254
  %215 = getelementptr inbounds i8, i8* %194, i64 2
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = add nuw nsw i32 %217, %202
  %219 = icmp ugt i32 %218, 254
  %220 = shl nuw nsw i32 %213, 3
  %221 = and i32 %220, 2016
  %222 = select i1 %214, i32 2016, i32 %221
  %223 = or i32 %222, %209
  %224 = shl nuw nsw i32 %218, 8
  %225 = and i32 %224, 63488
  %226 = select i1 %219, i32 63488, i32 %225
  %227 = or i32 %223, %226
  %228 = trunc i32 %227 to i16
  %229 = bitcast i8* %193 to i16*
  store i16 %228, i16* %229, align 2
  br label %230

230:                                              ; preds = %192, %197
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToARGB1555Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %142

6:                                                ; preds = %3
  %7 = add i32 %2, -2
  %8 = lshr i32 %7, 1
  %9 = add nuw i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = icmp ult i32 %9, 4
  br i1 %11, label %84, label %12

12:                                               ; preds = %6
  %13 = add i32 %2, -2
  %14 = lshr i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = shl nuw nsw i64 %15, 3
  %20 = add nuw nsw i64 %19, 8
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = icmp ugt i8* %21, %1
  %23 = icmp ugt i8* %18, %0
  %24 = and i1 %22, %23
  br i1 %24, label %84, label %25

25:                                               ; preds = %12
  %26 = and i64 %10, 4294967292
  %27 = shl nuw nsw i64 %26, 3
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = shl nuw nsw i64 %26, 2
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = trunc i64 %26 to i32
  %32 = shl i32 %31, 1
  br label %33

33:                                               ; preds = %33, %25
  %34 = phi i64 [ 0, %25 ], [ %80, %33 ]
  %35 = shl i64 %34, 3
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = shl i64 %34, 2
  %38 = getelementptr i8, i8* %1, i64 %37
  %39 = bitcast i8* %36 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %42 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %43 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %44 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %45 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %46 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %47 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %48 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 7, i32 15, i32 23, i32 31>
  %49 = lshr <4 x i8> %41, <i8 3, i8 3, i8 3, i8 3>
  %50 = lshr <4 x i8> %42, <i8 3, i8 3, i8 3, i8 3>
  %51 = lshr <4 x i8> %43, <i8 3, i8 3, i8 3, i8 3>
  %52 = lshr <4 x i8> %44, <i8 7, i8 7, i8 7, i8 7>
  %53 = lshr <4 x i8> %45, <i8 3, i8 3, i8 3, i8 3>
  %54 = lshr <4 x i8> %46, <i8 3, i8 3, i8 3, i8 3>
  %55 = lshr <4 x i8> %47, <i8 3, i8 3, i8 3, i8 3>
  %56 = lshr <4 x i8> %48, <i8 7, i8 7, i8 7, i8 7>
  %57 = zext <4 x i8> %49 to <4 x i32>
  %58 = zext <4 x i8> %50 to <4 x i32>
  %59 = shl nuw nsw <4 x i32> %58, <i32 5, i32 5, i32 5, i32 5>
  %60 = or <4 x i32> %59, %57
  %61 = zext <4 x i8> %51 to <4 x i32>
  %62 = shl nuw nsw <4 x i32> %61, <i32 10, i32 10, i32 10, i32 10>
  %63 = or <4 x i32> %60, %62
  %64 = zext <4 x i8> %52 to <4 x i32>
  %65 = shl nuw nsw <4 x i32> %64, <i32 15, i32 15, i32 15, i32 15>
  %66 = or <4 x i32> %63, %65
  %67 = zext <4 x i8> %53 to <4 x i32>
  %68 = shl nuw nsw <4 x i32> %67, <i32 16, i32 16, i32 16, i32 16>
  %69 = or <4 x i32> %66, %68
  %70 = zext <4 x i8> %54 to <4 x i32>
  %71 = shl nuw nsw <4 x i32> %70, <i32 21, i32 21, i32 21, i32 21>
  %72 = or <4 x i32> %69, %71
  %73 = zext <4 x i8> %55 to <4 x i32>
  %74 = shl nuw nsw <4 x i32> %73, <i32 26, i32 26, i32 26, i32 26>
  %75 = or <4 x i32> %72, %74
  %76 = zext <4 x i8> %56 to <4 x i32>
  %77 = shl nuw <4 x i32> %76, <i32 31, i32 31, i32 31, i32 31>
  %78 = or <4 x i32> %75, %77
  %79 = bitcast i8* %38 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %79, align 4, !alias.scope !45, !noalias !48
  %80 = add i64 %34, 4
  %81 = icmp eq i64 %80, %26
  br i1 %81, label %82, label %33, !llvm.loop !50

82:                                               ; preds = %33
  %83 = icmp eq i64 %26, %10
  br i1 %83, label %142, label %84

84:                                               ; preds = %82, %12, %6
  %85 = phi i8* [ %0, %12 ], [ %0, %6 ], [ %28, %82 ]
  %86 = phi i8* [ %1, %12 ], [ %1, %6 ], [ %30, %82 ]
  %87 = phi i32 [ 0, %12 ], [ 0, %6 ], [ %32, %82 ]
  br label %88

88:                                               ; preds = %84, %88
  %89 = phi i8* [ %139, %88 ], [ %85, %84 ]
  %90 = phi i8* [ %138, %88 ], [ %86, %84 ]
  %91 = phi i32 [ %140, %88 ], [ %87, %84 ]
  %92 = load i8, i8* %89, align 1
  %93 = lshr i8 %92, 3
  %94 = getelementptr inbounds i8, i8* %89, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = lshr i8 %95, 3
  %97 = getelementptr inbounds i8, i8* %89, i64 2
  %98 = load i8, i8* %97, align 1
  %99 = lshr i8 %98, 3
  %100 = getelementptr inbounds i8, i8* %89, i64 3
  %101 = load i8, i8* %100, align 1
  %102 = lshr i8 %101, 7
  %103 = getelementptr inbounds i8, i8* %89, i64 4
  %104 = load i8, i8* %103, align 1
  %105 = lshr i8 %104, 3
  %106 = getelementptr inbounds i8, i8* %89, i64 5
  %107 = load i8, i8* %106, align 1
  %108 = lshr i8 %107, 3
  %109 = getelementptr inbounds i8, i8* %89, i64 6
  %110 = load i8, i8* %109, align 1
  %111 = lshr i8 %110, 3
  %112 = getelementptr inbounds i8, i8* %89, i64 7
  %113 = load i8, i8* %112, align 1
  %114 = lshr i8 %113, 7
  %115 = zext i8 %93 to i32
  %116 = zext i8 %96 to i32
  %117 = shl nuw nsw i32 %116, 5
  %118 = or i32 %117, %115
  %119 = zext i8 %99 to i32
  %120 = shl nuw nsw i32 %119, 10
  %121 = or i32 %118, %120
  %122 = zext i8 %102 to i32
  %123 = shl nuw nsw i32 %122, 15
  %124 = or i32 %121, %123
  %125 = zext i8 %105 to i32
  %126 = shl nuw nsw i32 %125, 16
  %127 = or i32 %124, %126
  %128 = zext i8 %108 to i32
  %129 = shl nuw nsw i32 %128, 21
  %130 = or i32 %127, %129
  %131 = zext i8 %111 to i32
  %132 = shl nuw nsw i32 %131, 26
  %133 = or i32 %130, %132
  %134 = zext i8 %114 to i32
  %135 = shl nuw i32 %134, 31
  %136 = or i32 %133, %135
  %137 = bitcast i8* %90 to i32*
  store i32 %136, i32* %137, align 4
  %138 = getelementptr inbounds i8, i8* %90, i64 4
  %139 = getelementptr inbounds i8, i8* %89, i64 8
  %140 = add nuw nsw i32 %91, 2
  %141 = icmp slt i32 %140, %4
  br i1 %141, label %88, label %142, !llvm.loop !51

142:                                              ; preds = %88, %82, %3
  %143 = phi i8* [ %1, %3 ], [ %30, %82 ], [ %138, %88 ]
  %144 = phi i8* [ %0, %3 ], [ %28, %82 ], [ %139, %88 ]
  %145 = and i32 %2, 1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %170, label %147

147:                                              ; preds = %142
  %148 = load i8, i8* %144, align 1
  %149 = lshr i8 %148, 3
  %150 = getelementptr inbounds i8, i8* %144, i64 1
  %151 = load i8, i8* %150, align 1
  %152 = lshr i8 %151, 3
  %153 = getelementptr inbounds i8, i8* %144, i64 2
  %154 = load i8, i8* %153, align 1
  %155 = lshr i8 %154, 3
  %156 = getelementptr inbounds i8, i8* %144, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = lshr i8 %157, 7
  %159 = zext i8 %149 to i16
  %160 = zext i8 %152 to i16
  %161 = shl nuw nsw i16 %160, 5
  %162 = or i16 %161, %159
  %163 = zext i8 %155 to i16
  %164 = shl nuw nsw i16 %163, 10
  %165 = or i16 %162, %164
  %166 = zext i8 %158 to i16
  %167 = shl nuw i16 %166, 15
  %168 = or i16 %165, %167
  %169 = bitcast i8* %143 to i16*
  store i16 %168, i16* %169, align 2
  br label %170

170:                                              ; preds = %142, %147
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToARGB4444Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %138

6:                                                ; preds = %3
  %7 = add i32 %2, -2
  %8 = lshr i32 %7, 1
  %9 = add nuw i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = icmp ult i32 %9, 4
  br i1 %11, label %82, label %12

12:                                               ; preds = %6
  %13 = add i32 %2, -2
  %14 = lshr i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = shl nuw nsw i64 %15, 2
  %17 = add nuw nsw i64 %16, 4
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = shl nuw nsw i64 %15, 3
  %20 = add nuw nsw i64 %19, 8
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = icmp ugt i8* %21, %1
  %23 = icmp ugt i8* %18, %0
  %24 = and i1 %22, %23
  br i1 %24, label %82, label %25

25:                                               ; preds = %12
  %26 = and i64 %10, 4294967292
  %27 = shl nuw nsw i64 %26, 3
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = shl nuw nsw i64 %26, 2
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = trunc i64 %26 to i32
  %32 = shl i32 %31, 1
  br label %33

33:                                               ; preds = %33, %25
  %34 = phi i64 [ 0, %25 ], [ %78, %33 ]
  %35 = shl i64 %34, 3
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = shl i64 %34, 2
  %38 = getelementptr i8, i8* %1, i64 %37
  %39 = bitcast i8* %36 to <32 x i8>*
  %40 = load <32 x i8>, <32 x i8>* %39, align 1
  %41 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %42 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %43 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %44 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %45 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %46 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %47 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %48 = shufflevector <32 x i8> %40, <32 x i8> undef, <4 x i32> <i32 7, i32 15, i32 23, i32 31>
  %49 = lshr <4 x i8> %41, <i8 4, i8 4, i8 4, i8 4>
  %50 = and <4 x i8> %42, <i8 -16, i8 -16, i8 -16, i8 -16>
  %51 = lshr <4 x i8> %43, <i8 4, i8 4, i8 4, i8 4>
  %52 = lshr <4 x i8> %44, <i8 4, i8 4, i8 4, i8 4>
  %53 = lshr <4 x i8> %45, <i8 4, i8 4, i8 4, i8 4>
  %54 = lshr <4 x i8> %46, <i8 4, i8 4, i8 4, i8 4>
  %55 = lshr <4 x i8> %47, <i8 4, i8 4, i8 4, i8 4>
  %56 = lshr <4 x i8> %48, <i8 4, i8 4, i8 4, i8 4>
  %57 = or <4 x i8> %50, %49
  %58 = zext <4 x i8> %57 to <4 x i32>
  %59 = zext <4 x i8> %51 to <4 x i32>
  %60 = shl nuw nsw <4 x i32> %59, <i32 8, i32 8, i32 8, i32 8>
  %61 = or <4 x i32> %60, %58
  %62 = zext <4 x i8> %52 to <4 x i32>
  %63 = shl nuw nsw <4 x i32> %62, <i32 12, i32 12, i32 12, i32 12>
  %64 = or <4 x i32> %61, %63
  %65 = zext <4 x i8> %53 to <4 x i32>
  %66 = shl nuw nsw <4 x i32> %65, <i32 16, i32 16, i32 16, i32 16>
  %67 = or <4 x i32> %64, %66
  %68 = zext <4 x i8> %54 to <4 x i32>
  %69 = shl nuw nsw <4 x i32> %68, <i32 20, i32 20, i32 20, i32 20>
  %70 = or <4 x i32> %67, %69
  %71 = zext <4 x i8> %55 to <4 x i32>
  %72 = shl nuw nsw <4 x i32> %71, <i32 24, i32 24, i32 24, i32 24>
  %73 = or <4 x i32> %70, %72
  %74 = zext <4 x i8> %56 to <4 x i32>
  %75 = shl nuw <4 x i32> %74, <i32 28, i32 28, i32 28, i32 28>
  %76 = or <4 x i32> %73, %75
  %77 = bitcast i8* %38 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %77, align 4, !alias.scope !52, !noalias !55
  %78 = add i64 %34, 4
  %79 = icmp eq i64 %78, %26
  br i1 %79, label %80, label %33, !llvm.loop !57

80:                                               ; preds = %33
  %81 = icmp eq i64 %26, %10
  br i1 %81, label %138, label %82

82:                                               ; preds = %80, %12, %6
  %83 = phi i8* [ %0, %12 ], [ %0, %6 ], [ %28, %80 ]
  %84 = phi i8* [ %1, %12 ], [ %1, %6 ], [ %30, %80 ]
  %85 = phi i32 [ 0, %12 ], [ 0, %6 ], [ %32, %80 ]
  br label %86

86:                                               ; preds = %82, %86
  %87 = phi i8* [ %135, %86 ], [ %83, %82 ]
  %88 = phi i8* [ %134, %86 ], [ %84, %82 ]
  %89 = phi i32 [ %136, %86 ], [ %85, %82 ]
  %90 = load i8, i8* %87, align 1
  %91 = lshr i8 %90, 4
  %92 = getelementptr inbounds i8, i8* %87, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = and i8 %93, -16
  %95 = getelementptr inbounds i8, i8* %87, i64 2
  %96 = load i8, i8* %95, align 1
  %97 = lshr i8 %96, 4
  %98 = getelementptr inbounds i8, i8* %87, i64 3
  %99 = load i8, i8* %98, align 1
  %100 = lshr i8 %99, 4
  %101 = getelementptr inbounds i8, i8* %87, i64 4
  %102 = load i8, i8* %101, align 1
  %103 = lshr i8 %102, 4
  %104 = getelementptr inbounds i8, i8* %87, i64 5
  %105 = load i8, i8* %104, align 1
  %106 = lshr i8 %105, 4
  %107 = getelementptr inbounds i8, i8* %87, i64 6
  %108 = load i8, i8* %107, align 1
  %109 = lshr i8 %108, 4
  %110 = getelementptr inbounds i8, i8* %87, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = lshr i8 %111, 4
  %113 = or i8 %94, %91
  %114 = zext i8 %113 to i32
  %115 = zext i8 %97 to i32
  %116 = shl nuw nsw i32 %115, 8
  %117 = or i32 %116, %114
  %118 = zext i8 %100 to i32
  %119 = shl nuw nsw i32 %118, 12
  %120 = or i32 %117, %119
  %121 = zext i8 %103 to i32
  %122 = shl nuw nsw i32 %121, 16
  %123 = or i32 %120, %122
  %124 = zext i8 %106 to i32
  %125 = shl nuw nsw i32 %124, 20
  %126 = or i32 %123, %125
  %127 = zext i8 %109 to i32
  %128 = shl nuw nsw i32 %127, 24
  %129 = or i32 %126, %128
  %130 = zext i8 %112 to i32
  %131 = shl nuw i32 %130, 28
  %132 = or i32 %129, %131
  %133 = bitcast i8* %88 to i32*
  store i32 %132, i32* %133, align 4
  %134 = getelementptr inbounds i8, i8* %88, i64 4
  %135 = getelementptr inbounds i8, i8* %87, i64 8
  %136 = add nuw nsw i32 %89, 2
  %137 = icmp slt i32 %136, %4
  br i1 %137, label %86, label %138, !llvm.loop !58

138:                                              ; preds = %86, %80, %3
  %139 = phi i8* [ %1, %3 ], [ %30, %80 ], [ %134, %86 ]
  %140 = phi i8* [ %0, %3 ], [ %28, %80 ], [ %135, %86 ]
  %141 = and i32 %2, 1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %164, label %143

143:                                              ; preds = %138
  %144 = load i8, i8* %140, align 1
  %145 = lshr i8 %144, 4
  %146 = getelementptr inbounds i8, i8* %140, i64 1
  %147 = load i8, i8* %146, align 1
  %148 = and i8 %147, -16
  %149 = getelementptr inbounds i8, i8* %140, i64 2
  %150 = load i8, i8* %149, align 1
  %151 = lshr i8 %150, 4
  %152 = getelementptr inbounds i8, i8* %140, i64 3
  %153 = load i8, i8* %152, align 1
  %154 = lshr i8 %153, 4
  %155 = or i8 %148, %145
  %156 = zext i8 %155 to i16
  %157 = zext i8 %151 to i16
  %158 = shl nuw nsw i16 %157, 8
  %159 = or i16 %158, %156
  %160 = zext i8 %154 to i16
  %161 = shl nuw i16 %160, 12
  %162 = or i16 %159, %161
  %163 = bitcast i8* %139 to i16*
  store i16 %162, i16* %163, align 2
  br label %164

164:                                              ; preds = %138, %143
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ABGRToAR30Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %104

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %64, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = getelementptr i8, i8* %0, i64 %14
  %17 = icmp ugt i8* %16, %1
  %18 = icmp ugt i8* %15, %0
  %19 = and i1 %17, %18
  br i1 %19, label %64, label %20

20:                                               ; preds = %10
  %21 = and i64 %8, 8589934588
  %22 = shl nuw nsw i64 %21, 2
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = shl nuw nsw i64 %21, 2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = trunc i64 %21 to i32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi i64 [ 0, %20 ], [ %60, %27 ]
  %29 = shl i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = shl i64 %28, 2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = bitcast i8* %30 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %37 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %38 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %39 = zext <4 x i8> %35 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 6, i32 6, i32 6, i32 6>
  %41 = shl nuw nsw <4 x i32> %39, <i32 2, i32 2, i32 2, i32 2>
  %42 = or <4 x i32> %40, %41
  %43 = zext <4 x i8> %36 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 6, i32 6, i32 6, i32 6>
  %45 = shl nuw nsw <4 x i32> %43, <i32 2, i32 2, i32 2, i32 2>
  %46 = or <4 x i32> %44, %45
  %47 = zext <4 x i8> %37 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 6, i32 6, i32 6, i32 6>
  %49 = shl nuw nsw <4 x i32> %47, <i32 2, i32 2, i32 2, i32 2>
  %50 = or <4 x i32> %48, %49
  %51 = lshr <4 x i8> %38, <i8 6, i8 6, i8 6, i8 6>
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = shl nuw nsw <4 x i32> %46, <i32 10, i32 10, i32 10, i32 10>
  %54 = shl nuw nsw <4 x i32> %42, <i32 20, i32 20, i32 20, i32 20>
  %55 = shl nuw <4 x i32> %52, <i32 30, i32 30, i32 30, i32 30>
  %56 = or <4 x i32> %50, %54
  %57 = or <4 x i32> %56, %53
  %58 = or <4 x i32> %57, %55
  %59 = bitcast i8* %32 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %59, align 4, !alias.scope !59, !noalias !62
  %60 = add i64 %28, 4
  %61 = icmp eq i64 %60, %21
  br i1 %61, label %62, label %27, !llvm.loop !64

62:                                               ; preds = %27
  %63 = icmp eq i64 %8, %21
  br i1 %63, label %104, label %64

64:                                               ; preds = %62, %10, %5
  %65 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %23, %62 ]
  %66 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %62 ]
  %67 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %62 ]
  br label %68

68:                                               ; preds = %64, %68
  %69 = phi i8* [ %101, %68 ], [ %65, %64 ]
  %70 = phi i8* [ %100, %68 ], [ %66, %64 ]
  %71 = phi i32 [ %102, %68 ], [ %67, %64 ]
  %72 = load i8, i8* %69, align 1
  %73 = zext i8 %72 to i32
  %74 = lshr i32 %73, 6
  %75 = shl nuw nsw i32 %73, 2
  %76 = or i32 %74, %75
  %77 = getelementptr inbounds i8, i8* %69, i64 1
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = lshr i32 %79, 6
  %81 = shl nuw nsw i32 %79, 2
  %82 = or i32 %80, %81
  %83 = getelementptr inbounds i8, i8* %69, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = lshr i32 %85, 6
  %87 = shl nuw nsw i32 %85, 2
  %88 = or i32 %86, %87
  %89 = getelementptr inbounds i8, i8* %69, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = lshr i8 %90, 6
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %82, 10
  %94 = shl nuw nsw i32 %76, 20
  %95 = shl nuw i32 %92, 30
  %96 = or i32 %88, %94
  %97 = or i32 %96, %93
  %98 = or i32 %97, %95
  %99 = bitcast i8* %70 to i32*
  store i32 %98, i32* %99, align 4
  %100 = getelementptr inbounds i8, i8* %70, i64 4
  %101 = getelementptr inbounds i8, i8* %69, i64 4
  %102 = add nuw nsw i32 %71, 1
  %103 = icmp eq i32 %102, %2
  br i1 %103, label %104, label %68, !llvm.loop !65

104:                                              ; preds = %68, %62, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToAR30Row_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %104

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %64, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  %14 = add nuw nsw i64 %13, 4
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = getelementptr i8, i8* %0, i64 %14
  %17 = icmp ugt i8* %16, %1
  %18 = icmp ugt i8* %15, %0
  %19 = and i1 %17, %18
  br i1 %19, label %64, label %20

20:                                               ; preds = %10
  %21 = and i64 %8, 8589934588
  %22 = shl nuw nsw i64 %21, 2
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = shl nuw nsw i64 %21, 2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = trunc i64 %21 to i32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi i64 [ 0, %20 ], [ %60, %27 ]
  %29 = shl i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = shl i64 %28, 2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = bitcast i8* %30 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1
  %35 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %37 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %38 = shufflevector <16 x i8> %34, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %39 = zext <4 x i8> %35 to <4 x i32>
  %40 = lshr <4 x i32> %39, <i32 6, i32 6, i32 6, i32 6>
  %41 = shl nuw nsw <4 x i32> %39, <i32 2, i32 2, i32 2, i32 2>
  %42 = or <4 x i32> %40, %41
  %43 = zext <4 x i8> %36 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 6, i32 6, i32 6, i32 6>
  %45 = shl nuw nsw <4 x i32> %43, <i32 2, i32 2, i32 2, i32 2>
  %46 = or <4 x i32> %44, %45
  %47 = zext <4 x i8> %37 to <4 x i32>
  %48 = lshr <4 x i32> %47, <i32 6, i32 6, i32 6, i32 6>
  %49 = shl nuw nsw <4 x i32> %47, <i32 2, i32 2, i32 2, i32 2>
  %50 = or <4 x i32> %48, %49
  %51 = lshr <4 x i8> %38, <i8 6, i8 6, i8 6, i8 6>
  %52 = zext <4 x i8> %51 to <4 x i32>
  %53 = shl nuw nsw <4 x i32> %46, <i32 10, i32 10, i32 10, i32 10>
  %54 = or <4 x i32> %42, %53
  %55 = shl nuw nsw <4 x i32> %50, <i32 20, i32 20, i32 20, i32 20>
  %56 = or <4 x i32> %54, %55
  %57 = shl nuw <4 x i32> %52, <i32 30, i32 30, i32 30, i32 30>
  %58 = or <4 x i32> %56, %57
  %59 = bitcast i8* %32 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %59, align 4, !alias.scope !66, !noalias !69
  %60 = add i64 %28, 4
  %61 = icmp eq i64 %60, %21
  br i1 %61, label %62, label %27, !llvm.loop !71

62:                                               ; preds = %27
  %63 = icmp eq i64 %8, %21
  br i1 %63, label %104, label %64

64:                                               ; preds = %62, %10, %5
  %65 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %23, %62 ]
  %66 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %62 ]
  %67 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %62 ]
  br label %68

68:                                               ; preds = %64, %68
  %69 = phi i8* [ %101, %68 ], [ %65, %64 ]
  %70 = phi i8* [ %100, %68 ], [ %66, %64 ]
  %71 = phi i32 [ %102, %68 ], [ %67, %64 ]
  %72 = load i8, i8* %69, align 1
  %73 = zext i8 %72 to i32
  %74 = lshr i32 %73, 6
  %75 = shl nuw nsw i32 %73, 2
  %76 = or i32 %74, %75
  %77 = getelementptr inbounds i8, i8* %69, i64 1
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = lshr i32 %79, 6
  %81 = shl nuw nsw i32 %79, 2
  %82 = or i32 %80, %81
  %83 = getelementptr inbounds i8, i8* %69, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = lshr i32 %85, 6
  %87 = shl nuw nsw i32 %85, 2
  %88 = or i32 %86, %87
  %89 = getelementptr inbounds i8, i8* %69, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = lshr i8 %90, 6
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %82, 10
  %94 = or i32 %76, %93
  %95 = shl nuw nsw i32 %88, 20
  %96 = or i32 %94, %95
  %97 = shl nuw i32 %92, 30
  %98 = or i32 %96, %97
  %99 = bitcast i8* %70 to i32*
  store i32 %98, i32* %99, align 4
  %100 = getelementptr inbounds i8, i8* %70, i64 4
  %101 = getelementptr inbounds i8, i8* %69, i64 4
  %102 = add nuw nsw i32 %71, 1
  %103 = icmp eq i32 %102, %2
  br i1 %103, label %104, label %68, !llvm.loop !72

104:                                              ; preds = %68, %62, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToAR64Row_C(i8* nocapture readonly, i16* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %56, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %53, %10 ]
  %12 = phi i16* [ %1, %8 ], [ %52, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %54, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = zext i8 %14 to i16
  %16 = mul nuw i16 %15, 257
  store i16 %16, i16* %12, align 2
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = mul nuw i16 %19, 257
  %21 = getelementptr inbounds i16, i16* %12, i64 1
  store i16 %20, i16* %21, align 2
  %22 = getelementptr inbounds i8, i8* %11, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  %25 = mul nuw i16 %24, 257
  %26 = getelementptr inbounds i16, i16* %12, i64 2
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %11, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = mul nuw i16 %29, 257
  %31 = getelementptr inbounds i16, i16* %12, i64 3
  store i16 %30, i16* %31, align 2
  %32 = getelementptr inbounds i16, i16* %12, i64 4
  %33 = getelementptr inbounds i8, i8* %11, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  %36 = mul nuw i16 %35, 257
  store i16 %36, i16* %32, align 2
  %37 = getelementptr inbounds i8, i8* %11, i64 5
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i16
  %40 = mul nuw i16 %39, 257
  %41 = getelementptr inbounds i16, i16* %12, i64 5
  store i16 %40, i16* %41, align 2
  %42 = getelementptr inbounds i8, i8* %11, i64 6
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i16
  %45 = mul nuw i16 %44, 257
  %46 = getelementptr inbounds i16, i16* %12, i64 6
  store i16 %45, i16* %46, align 2
  %47 = getelementptr inbounds i8, i8* %11, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = mul nuw i16 %49, 257
  %51 = getelementptr inbounds i16, i16* %12, i64 7
  store i16 %50, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %12, i64 8
  %53 = getelementptr inbounds i8, i8* %11, i64 8
  %54 = add i32 %13, -2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %10

56:                                               ; preds = %10, %5
  %57 = phi i8* [ %0, %5 ], [ %53, %10 ]
  %58 = phi i16* [ %1, %5 ], [ %52, %10 ]
  %59 = icmp eq i32 %6, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %56
  %61 = load i8, i8* %57, align 1
  %62 = zext i8 %61 to i16
  %63 = mul nuw i16 %62, 257
  store i16 %63, i16* %58, align 2
  %64 = getelementptr inbounds i8, i8* %57, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i16
  %67 = mul nuw i16 %66, 257
  %68 = getelementptr inbounds i16, i16* %58, i64 1
  store i16 %67, i16* %68, align 2
  %69 = getelementptr inbounds i8, i8* %57, i64 2
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i16
  %72 = mul nuw i16 %71, 257
  %73 = getelementptr inbounds i16, i16* %58, i64 2
  store i16 %72, i16* %73, align 2
  %74 = getelementptr inbounds i8, i8* %57, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i16
  %77 = mul nuw i16 %76, 257
  %78 = getelementptr inbounds i16, i16* %58, i64 3
  store i16 %77, i16* %78, align 2
  br label %79

79:                                               ; preds = %60, %56, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToAB64Row_C(i8* nocapture readonly, i16* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %56, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %53, %10 ]
  %12 = phi i16* [ %1, %8 ], [ %52, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %54, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i16
  %17 = mul nuw i16 %16, 257
  store i16 %17, i16* %12, align 2
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = mul nuw i16 %20, 257
  %22 = getelementptr inbounds i16, i16* %12, i64 1
  store i16 %21, i16* %22, align 2
  %23 = load i8, i8* %11, align 1
  %24 = zext i8 %23 to i16
  %25 = mul nuw i16 %24, 257
  %26 = getelementptr inbounds i16, i16* %12, i64 2
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i8, i8* %11, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i16
  %30 = mul nuw i16 %29, 257
  %31 = getelementptr inbounds i16, i16* %12, i64 3
  store i16 %30, i16* %31, align 2
  %32 = getelementptr inbounds i16, i16* %12, i64 4
  %33 = getelementptr inbounds i8, i8* %11, i64 4
  %34 = getelementptr inbounds i8, i8* %11, i64 6
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i16
  %37 = mul nuw i16 %36, 257
  store i16 %37, i16* %32, align 2
  %38 = getelementptr inbounds i8, i8* %11, i64 5
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i16
  %41 = mul nuw i16 %40, 257
  %42 = getelementptr inbounds i16, i16* %12, i64 5
  store i16 %41, i16* %42, align 2
  %43 = load i8, i8* %33, align 1
  %44 = zext i8 %43 to i16
  %45 = mul nuw i16 %44, 257
  %46 = getelementptr inbounds i16, i16* %12, i64 6
  store i16 %45, i16* %46, align 2
  %47 = getelementptr inbounds i8, i8* %11, i64 7
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i16
  %50 = mul nuw i16 %49, 257
  %51 = getelementptr inbounds i16, i16* %12, i64 7
  store i16 %50, i16* %51, align 2
  %52 = getelementptr inbounds i16, i16* %12, i64 8
  %53 = getelementptr inbounds i8, i8* %11, i64 8
  %54 = add i32 %13, -2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %10

56:                                               ; preds = %10, %5
  %57 = phi i8* [ %0, %5 ], [ %53, %10 ]
  %58 = phi i16* [ %1, %5 ], [ %52, %10 ]
  %59 = icmp eq i32 %6, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds i8, i8* %57, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  %64 = mul nuw i16 %63, 257
  store i16 %64, i16* %58, align 2
  %65 = getelementptr inbounds i8, i8* %57, i64 1
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i16
  %68 = mul nuw i16 %67, 257
  %69 = getelementptr inbounds i16, i16* %58, i64 1
  store i16 %68, i16* %69, align 2
  %70 = load i8, i8* %57, align 1
  %71 = zext i8 %70 to i16
  %72 = mul nuw i16 %71, 257
  %73 = getelementptr inbounds i16, i16* %58, i64 2
  store i16 %72, i16* %73, align 2
  %74 = getelementptr inbounds i8, i8* %57, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i16
  %77 = mul nuw i16 %76, 257
  %78 = getelementptr inbounds i16, i16* %58, i64 3
  store i16 %77, i16* %78, align 2
  br label %79

79:                                               ; preds = %60, %56, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AR64ToARGBRow_C(i16* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %56, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i16* [ %0, %8 ], [ %53, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %52, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %54, %10 ]
  %14 = load i16, i16* %11, align 2
  %15 = lshr i16 %14, 8
  %16 = trunc i16 %15 to i8
  store i8 %16, i8* %12, align 1
  %17 = getelementptr inbounds i16, i16* %11, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = lshr i16 %18, 8
  %20 = trunc i16 %19 to i8
  %21 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i16, i16* %11, i64 2
  %23 = load i16, i16* %22, align 2
  %24 = lshr i16 %23, 8
  %25 = trunc i16 %24 to i8
  %26 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i16, i16* %11, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = lshr i16 %28, 8
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds i8, i8* %12, i64 3
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %12, i64 4
  %33 = getelementptr inbounds i16, i16* %11, i64 4
  %34 = load i16, i16* %33, align 2
  %35 = lshr i16 %34, 8
  %36 = trunc i16 %35 to i8
  store i8 %36, i8* %32, align 1
  %37 = getelementptr inbounds i16, i16* %11, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = lshr i16 %38, 8
  %40 = trunc i16 %39 to i8
  %41 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i16, i16* %11, i64 6
  %43 = load i16, i16* %42, align 2
  %44 = lshr i16 %43, 8
  %45 = trunc i16 %44 to i8
  %46 = getelementptr inbounds i8, i8* %12, i64 6
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds i16, i16* %11, i64 7
  %48 = load i16, i16* %47, align 2
  %49 = lshr i16 %48, 8
  %50 = trunc i16 %49 to i8
  %51 = getelementptr inbounds i8, i8* %12, i64 7
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %12, i64 8
  %53 = getelementptr inbounds i16, i16* %11, i64 8
  %54 = add i32 %13, -2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %10

56:                                               ; preds = %10, %5
  %57 = phi i16* [ %0, %5 ], [ %53, %10 ]
  %58 = phi i8* [ %1, %5 ], [ %52, %10 ]
  %59 = icmp eq i32 %6, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %56
  %61 = load i16, i16* %57, align 2
  %62 = lshr i16 %61, 8
  %63 = trunc i16 %62 to i8
  store i8 %63, i8* %58, align 1
  %64 = getelementptr inbounds i16, i16* %57, i64 1
  %65 = load i16, i16* %64, align 2
  %66 = lshr i16 %65, 8
  %67 = trunc i16 %66 to i8
  %68 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %67, i8* %68, align 1
  %69 = getelementptr inbounds i16, i16* %57, i64 2
  %70 = load i16, i16* %69, align 2
  %71 = lshr i16 %70, 8
  %72 = trunc i16 %71 to i8
  %73 = getelementptr inbounds i8, i8* %58, i64 2
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i16, i16* %57, i64 3
  %75 = load i16, i16* %74, align 2
  %76 = lshr i16 %75, 8
  %77 = trunc i16 %76 to i8
  %78 = getelementptr inbounds i8, i8* %58, i64 3
  store i8 %77, i8* %78, align 1
  br label %79

79:                                               ; preds = %60, %56, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AB64ToARGBRow_C(i16* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %56, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i16* [ %0, %8 ], [ %53, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %52, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %54, %10 ]
  %14 = getelementptr inbounds i16, i16* %11, i64 2
  %15 = load i16, i16* %14, align 2
  %16 = lshr i16 %15, 8
  %17 = trunc i16 %16 to i8
  store i8 %17, i8* %12, align 1
  %18 = getelementptr inbounds i16, i16* %11, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = lshr i16 %19, 8
  %21 = trunc i16 %20 to i8
  %22 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %21, i8* %22, align 1
  %23 = load i16, i16* %11, align 2
  %24 = lshr i16 %23, 8
  %25 = trunc i16 %24 to i8
  %26 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i16, i16* %11, i64 3
  %28 = load i16, i16* %27, align 2
  %29 = lshr i16 %28, 8
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds i8, i8* %12, i64 3
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %12, i64 4
  %33 = getelementptr inbounds i16, i16* %11, i64 4
  %34 = getelementptr inbounds i16, i16* %11, i64 6
  %35 = load i16, i16* %34, align 2
  %36 = lshr i16 %35, 8
  %37 = trunc i16 %36 to i8
  store i8 %37, i8* %32, align 1
  %38 = getelementptr inbounds i16, i16* %11, i64 5
  %39 = load i16, i16* %38, align 2
  %40 = lshr i16 %39, 8
  %41 = trunc i16 %40 to i8
  %42 = getelementptr inbounds i8, i8* %12, i64 5
  store i8 %41, i8* %42, align 1
  %43 = load i16, i16* %33, align 2
  %44 = lshr i16 %43, 8
  %45 = trunc i16 %44 to i8
  %46 = getelementptr inbounds i8, i8* %12, i64 6
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds i16, i16* %11, i64 7
  %48 = load i16, i16* %47, align 2
  %49 = lshr i16 %48, 8
  %50 = trunc i16 %49 to i8
  %51 = getelementptr inbounds i8, i8* %12, i64 7
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %12, i64 8
  %53 = getelementptr inbounds i16, i16* %11, i64 8
  %54 = add i32 %13, -2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %10

56:                                               ; preds = %10, %5
  %57 = phi i16* [ %0, %5 ], [ %53, %10 ]
  %58 = phi i8* [ %1, %5 ], [ %52, %10 ]
  %59 = icmp eq i32 %6, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds i16, i16* %57, i64 2
  %62 = load i16, i16* %61, align 2
  %63 = lshr i16 %62, 8
  %64 = trunc i16 %63 to i8
  store i8 %64, i8* %58, align 1
  %65 = getelementptr inbounds i16, i16* %57, i64 1
  %66 = load i16, i16* %65, align 2
  %67 = lshr i16 %66, 8
  %68 = trunc i16 %67 to i8
  %69 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %68, i8* %69, align 1
  %70 = load i16, i16* %57, align 2
  %71 = lshr i16 %70, 8
  %72 = trunc i16 %71 to i8
  %73 = getelementptr inbounds i8, i8* %58, i64 2
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i16, i16* %57, i64 3
  %75 = load i16, i16* %74, align 2
  %76 = lshr i16 %75, 8
  %77 = trunc i16 %76 to i8
  %78 = getelementptr inbounds i8, i8* %58, i64 3
  store i8 %77, i8* %78, align 1
  br label %79

79:                                               ; preds = %60, %56, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AR64ShuffleRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = sdiv i32 %3, 2
  %6 = icmp sgt i32 %3, 1
  br i1 %6, label %7, label %78

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %2, i64 6
  %9 = load i8, i8* %8, align 1
  %10 = lshr i8 %9, 1
  %11 = getelementptr inbounds i8, i8* %2, i64 4
  %12 = load i8, i8* %11, align 1
  %13 = lshr i8 %12, 1
  %14 = getelementptr inbounds i8, i8* %2, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = lshr i8 %15, 1
  %17 = load i8, i8* %2, align 1
  %18 = lshr i8 %17, 1
  %19 = bitcast i8* %1 to i16*
  %20 = bitcast i8* %0 to i16*
  %21 = zext i8 %18 to i64
  %22 = zext i8 %16 to i64
  %23 = zext i8 %13 to i64
  %24 = zext i8 %10 to i64
  %25 = and i32 %5, 1
  %26 = and i32 %3, -2
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %62, label %28

28:                                               ; preds = %7
  %29 = sub nsw i32 %5, %25
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i16* [ %20, %28 ], [ %58, %30 ]
  %32 = phi i16* [ %19, %28 ], [ %59, %30 ]
  %33 = phi i32 [ %29, %28 ], [ %60, %30 ]
  %34 = getelementptr inbounds i16, i16* %31, i64 %21
  %35 = load i16, i16* %34, align 2
  %36 = getelementptr inbounds i16, i16* %31, i64 %22
  %37 = load i16, i16* %36, align 2
  %38 = getelementptr inbounds i16, i16* %31, i64 %23
  %39 = load i16, i16* %38, align 2
  %40 = getelementptr inbounds i16, i16* %31, i64 %24
  %41 = load i16, i16* %40, align 2
  store i16 %35, i16* %32, align 2
  %42 = getelementptr inbounds i16, i16* %32, i64 1
  store i16 %37, i16* %42, align 2
  %43 = getelementptr inbounds i16, i16* %32, i64 2
  store i16 %39, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %32, i64 3
  store i16 %41, i16* %44, align 2
  %45 = getelementptr inbounds i16, i16* %31, i64 4
  %46 = getelementptr inbounds i16, i16* %32, i64 4
  %47 = getelementptr inbounds i16, i16* %45, i64 %21
  %48 = load i16, i16* %47, align 2
  %49 = getelementptr inbounds i16, i16* %45, i64 %22
  %50 = load i16, i16* %49, align 2
  %51 = getelementptr inbounds i16, i16* %45, i64 %23
  %52 = load i16, i16* %51, align 2
  %53 = getelementptr inbounds i16, i16* %45, i64 %24
  %54 = load i16, i16* %53, align 2
  store i16 %48, i16* %46, align 2
  %55 = getelementptr inbounds i16, i16* %32, i64 5
  store i16 %50, i16* %55, align 2
  %56 = getelementptr inbounds i16, i16* %32, i64 6
  store i16 %52, i16* %56, align 2
  %57 = getelementptr inbounds i16, i16* %32, i64 7
  store i16 %54, i16* %57, align 2
  %58 = getelementptr inbounds i16, i16* %31, i64 8
  %59 = getelementptr inbounds i16, i16* %32, i64 8
  %60 = add i32 %33, -2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %30

62:                                               ; preds = %30, %7
  %63 = phi i16* [ %20, %7 ], [ %58, %30 ]
  %64 = phi i16* [ %19, %7 ], [ %59, %30 ]
  %65 = icmp eq i32 %25, 0
  br i1 %65, label %78, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds i16, i16* %63, i64 %21
  %68 = load i16, i16* %67, align 2
  %69 = getelementptr inbounds i16, i16* %63, i64 %22
  %70 = load i16, i16* %69, align 2
  %71 = getelementptr inbounds i16, i16* %63, i64 %23
  %72 = load i16, i16* %71, align 2
  %73 = getelementptr inbounds i16, i16* %63, i64 %24
  %74 = load i16, i16* %73, align 2
  store i16 %68, i16* %64, align 2
  %75 = getelementptr inbounds i16, i16* %64, i64 1
  store i16 %70, i16* %75, align 2
  %76 = getelementptr inbounds i16, i16* %64, i64 2
  store i16 %72, i16* %76, align 2
  %77 = getelementptr inbounds i16, i16* %64, i64 3
  store i16 %74, i16* %77, align 2
  br label %78

78:                                               ; preds = %66, %62, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = load i8, i8* %11, align 1
  %19 = zext i8 %15 to i32
  %20 = mul nuw nsw i32 %19, 66
  %21 = zext i8 %17 to i32
  %22 = mul nuw nsw i32 %21, 129
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 25
  %25 = add nuw nsw i32 %20, 4224
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 4
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 6
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 5
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %30, align 1
  %37 = zext i8 %33 to i32
  %38 = mul nuw nsw i32 %37, 66
  %39 = zext i8 %35 to i32
  %40 = mul nuw nsw i32 %39, 129
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 25
  %43 = add nuw nsw i32 %38, 4224
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 8
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %53, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = load i8, i8* %53, align 1
  %62 = zext i8 %58 to i32
  %63 = mul nuw nsw i32 %62, 66
  %64 = zext i8 %60 to i32
  %65 = mul nuw nsw i32 %64, 129
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 25
  %68 = add nuw nsw i32 %63, 4224
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %245

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %147, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = shl nuw nsw i64 %19, 3
  %24 = add nsw i64 %23, %6
  %25 = add nsw i64 %24, 7
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = or i64 %23, 7
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = icmp ugt i8* %22, %2
  %30 = icmp ugt i8* %21, %3
  %31 = and i1 %29, %30
  %32 = icmp ugt i8* %26, %2
  %33 = icmp ult i8* %7, %21
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %21, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %26, %3
  %41 = icmp ult i8* %7, %22
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  %44 = icmp ugt i8* %28, %3
  %45 = icmp ugt i8* %22, %0
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  br i1 %47, label %147, label %48

48:                                               ; preds = %16
  %49 = and i64 %14, 15
  %50 = icmp eq i64 %49, 0
  %51 = select i1 %50, i64 16, i64 %49
  %52 = sub nsw i64 %14, %51
  %53 = shl nsw i64 %52, 3
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = getelementptr i8, i8* %2, i64 %52
  %56 = getelementptr i8, i8* %3, i64 %52
  %57 = shl nsw i64 %52, 3
  %58 = getelementptr i8, i8* %7, i64 %57
  %59 = trunc i64 %52 to i32
  %60 = shl i32 %59, 1
  br label %61

61:                                               ; preds = %61, %48
  %62 = phi i64 [ 0, %48 ], [ %145, %61 ]
  %63 = shl i64 %62, 3
  %64 = getelementptr i8, i8* %0, i64 %63
  %65 = getelementptr i8, i8* %2, i64 %62
  %66 = getelementptr i8, i8* %3, i64 %62
  %67 = shl i64 %62, 3
  %68 = getelementptr i8, i8* %7, i64 %67
  %69 = bitcast i8* %64 to <128 x i8>*
  %70 = load <128 x i8>, <128 x i8>* %69, align 1
  %71 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %72 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %73 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %74 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %75 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %76 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %77 = zext <16 x i8> %71 to <16 x i32>
  %78 = bitcast i8* %68 to <128 x i8>*
  %79 = load <128 x i8>, <128 x i8>* %78, align 1
  %80 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %81 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %82 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %83 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %84 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %85 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %86 = zext <16 x i8> %80 to <16 x i32>
  %87 = add nuw nsw <16 x i32> %77, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = add nuw nsw <16 x i32> %87, %86
  %89 = lshr <16 x i32> %88, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %90 = zext <16 x i8> %74 to <16 x i32>
  %91 = zext <16 x i8> %83 to <16 x i32>
  %92 = add nuw nsw <16 x i32> %90, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = add nuw nsw <16 x i32> %92, %91
  %94 = lshr <16 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = add nuw nsw <16 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = add nuw nsw <16 x i32> %95, %94
  %97 = lshr <16 x i32> %96, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = zext <16 x i8> %72 to <16 x i32>
  %99 = zext <16 x i8> %81 to <16 x i32>
  %100 = add nuw nsw <16 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <16 x i32> %100, %99
  %102 = lshr <16 x i32> %101, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = zext <16 x i8> %75 to <16 x i32>
  %104 = zext <16 x i8> %84 to <16 x i32>
  %105 = add nuw nsw <16 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %106 = add nuw nsw <16 x i32> %105, %104
  %107 = lshr <16 x i32> %106, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = add nuw nsw <16 x i32> %102, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %109 = add nuw nsw <16 x i32> %108, %107
  %110 = lshr <16 x i32> %109, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = zext <16 x i8> %73 to <16 x i32>
  %112 = zext <16 x i8> %82 to <16 x i32>
  %113 = add nuw nsw <16 x i32> %111, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = add nuw nsw <16 x i32> %113, %112
  %115 = lshr <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = zext <16 x i8> %76 to <16 x i32>
  %117 = zext <16 x i8> %85 to <16 x i32>
  %118 = add nuw nsw <16 x i32> %116, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = add nuw nsw <16 x i32> %118, %117
  %120 = lshr <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %121 = add nuw nsw <16 x i32> %115, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %122 = add nuw nsw <16 x i32> %121, %120
  %123 = lshr <16 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = and <16 x i32> %97, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %125 = mul nuw nsw <16 x i32> %124, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %126 = and <16 x i32> %110, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = mul nsw <16 x i32> %126, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %128 = and <16 x i32> %123, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = mul nsw <16 x i32> %128, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %130 = or <16 x i32> %125, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %131 = add nsw <16 x i32> %130, %127
  %132 = add nsw <16 x i32> %131, %129
  %133 = lshr <16 x i32> %132, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %134 = trunc <16 x i32> %133 to <16 x i8>
  %135 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %135, align 1, !alias.scope !73, !noalias !76
  %136 = mul nuw nsw <16 x i32> %128, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %137 = mul nsw <16 x i32> %126, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %138 = mul nsw <16 x i32> %124, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %139 = or <16 x i32> %136, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %140 = add nsw <16 x i32> %137, %138
  %141 = add nsw <16 x i32> %140, %139
  %142 = lshr <16 x i32> %141, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %143 = trunc <16 x i32> %142 to <16 x i8>
  %144 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %143, <16 x i8>* %144, align 1, !alias.scope !80, !noalias !81
  %145 = add i64 %62, 16
  %146 = icmp eq i64 %145, %52
  br i1 %146, label %147, label %61, !llvm.loop !82

147:                                              ; preds = %61, %16, %10
  %148 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %54, %61 ]
  %149 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %55, %61 ]
  %150 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %56, %61 ]
  %151 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %58, %61 ]
  %152 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %60, %61 ]
  br label %153

153:                                              ; preds = %147, %153
  %154 = phi i8* [ %239, %153 ], [ %148, %147 ]
  %155 = phi i8* [ %241, %153 ], [ %149, %147 ]
  %156 = phi i8* [ %242, %153 ], [ %150, %147 ]
  %157 = phi i8* [ %240, %153 ], [ %151, %147 ]
  %158 = phi i32 [ %243, %153 ], [ %152, %147 ]
  %159 = load i8, i8* %154, align 1
  %160 = zext i8 %159 to i32
  %161 = load i8, i8* %157, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %160, 1
  %164 = add nuw nsw i32 %163, %162
  %165 = lshr i32 %164, 1
  %166 = getelementptr inbounds i8, i8* %154, i64 4
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = getelementptr inbounds i8, i8* %157, i64 4
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = add nuw nsw i32 %168, 1
  %173 = add nuw nsw i32 %172, %171
  %174 = lshr i32 %173, 1
  %175 = add nuw nsw i32 %165, 1
  %176 = add nuw nsw i32 %175, %174
  %177 = lshr i32 %176, 1
  %178 = getelementptr inbounds i8, i8* %154, i64 1
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = getelementptr inbounds i8, i8* %157, i64 1
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = add nuw nsw i32 %180, 1
  %185 = add nuw nsw i32 %184, %183
  %186 = lshr i32 %185, 1
  %187 = getelementptr inbounds i8, i8* %154, i64 5
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds i8, i8* %157, i64 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = add nuw nsw i32 %189, 1
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 1
  %196 = add nuw nsw i32 %186, 1
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 1
  %199 = getelementptr inbounds i8, i8* %154, i64 2
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = getelementptr inbounds i8, i8* %157, i64 2
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = add nuw nsw i32 %201, 1
  %206 = add nuw nsw i32 %205, %204
  %207 = lshr i32 %206, 1
  %208 = getelementptr inbounds i8, i8* %154, i64 6
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = getelementptr inbounds i8, i8* %157, i64 6
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = add nuw nsw i32 %210, 1
  %215 = add nuw nsw i32 %214, %213
  %216 = lshr i32 %215, 1
  %217 = add nuw nsw i32 %207, 1
  %218 = add nuw nsw i32 %217, %216
  %219 = lshr i32 %218, 1
  %220 = and i32 %177, 255
  %221 = mul nuw nsw i32 %220, 112
  %222 = and i32 %198, 255
  %223 = mul nsw i32 %222, -74
  %224 = and i32 %219, 255
  %225 = mul nsw i32 %224, -38
  %226 = or i32 %221, 32768
  %227 = add nsw i32 %226, %223
  %228 = add nsw i32 %227, %225
  %229 = lshr i32 %228, 8
  %230 = trunc i32 %229 to i8
  store i8 %230, i8* %155, align 1
  %231 = mul nuw nsw i32 %224, 112
  %232 = mul nsw i32 %222, -94
  %233 = mul nsw i32 %220, -18
  %234 = or i32 %231, 32768
  %235 = add nsw i32 %232, %233
  %236 = add nsw i32 %235, %234
  %237 = lshr i32 %236, 8
  %238 = trunc i32 %237 to i8
  store i8 %238, i8* %156, align 1
  %239 = getelementptr inbounds i8, i8* %154, i64 8
  %240 = getelementptr inbounds i8, i8* %157, i64 8
  %241 = getelementptr inbounds i8, i8* %155, i64 1
  %242 = getelementptr inbounds i8, i8* %156, i64 1
  %243 = add nuw nsw i32 %158, 2
  %244 = icmp slt i32 %243, %8
  br i1 %244, label %153, label %245, !llvm.loop !83

245:                                              ; preds = %153, %5
  %246 = phi i8* [ %7, %5 ], [ %240, %153 ]
  %247 = phi i8* [ %3, %5 ], [ %242, %153 ]
  %248 = phi i8* [ %2, %5 ], [ %241, %153 ]
  %249 = phi i8* [ %0, %5 ], [ %239, %153 ]
  %250 = and i32 %4, 1
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %297, label %252

252:                                              ; preds = %245
  %253 = load i8, i8* %249, align 1
  %254 = zext i8 %253 to i32
  %255 = load i8, i8* %246, align 1
  %256 = zext i8 %255 to i32
  %257 = add nuw nsw i32 %254, 1
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 1
  %260 = getelementptr inbounds i8, i8* %249, i64 1
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i32
  %263 = getelementptr inbounds i8, i8* %246, i64 1
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = add nuw nsw i32 %262, 1
  %267 = add nuw nsw i32 %266, %265
  %268 = lshr i32 %267, 1
  %269 = getelementptr inbounds i8, i8* %249, i64 2
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = getelementptr inbounds i8, i8* %246, i64 2
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = add nuw nsw i32 %271, 1
  %276 = add nuw nsw i32 %275, %274
  %277 = lshr i32 %276, 1
  %278 = and i32 %259, 255
  %279 = mul nuw nsw i32 %278, 112
  %280 = and i32 %268, 255
  %281 = mul nsw i32 %280, -74
  %282 = and i32 %277, 255
  %283 = mul nsw i32 %282, -38
  %284 = or i32 %279, 32768
  %285 = add nsw i32 %284, %281
  %286 = add nsw i32 %285, %283
  %287 = lshr i32 %286, 8
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %248, align 1
  %289 = mul nuw nsw i32 %282, 112
  %290 = mul nsw i32 %280, -94
  %291 = mul nsw i32 %278, -18
  %292 = or i32 %289, 32768
  %293 = add nsw i32 %290, %291
  %294 = add nsw i32 %293, %292
  %295 = lshr i32 %294, 8
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %247, align 1
  br label %297

297:                                              ; preds = %245, %252
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @BGRAToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %75

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %53, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %49, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %50, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %51, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds i8, i8* %11, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %15 to i32
  %21 = mul nuw nsw i32 %20, 66
  %22 = zext i8 %17 to i32
  %23 = mul nuw nsw i32 %22, 129
  %24 = zext i8 %19 to i32
  %25 = mul nuw nsw i32 %24, 25
  %26 = add nuw nsw i32 %21, 4224
  %27 = add nuw nsw i32 %26, %23
  %28 = add nuw nsw i32 %27, %25
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %12, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 6
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %11, i64 7
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %33 to i32
  %39 = mul nuw nsw i32 %38, 66
  %40 = zext i8 %35 to i32
  %41 = mul nuw nsw i32 %40, 129
  %42 = zext i8 %37 to i32
  %43 = mul nuw nsw i32 %42, 25
  %44 = add nuw nsw i32 %39, 4224
  %45 = add nuw nsw i32 %44, %41
  %46 = add nuw nsw i32 %45, %43
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %31, align 1
  %49 = getelementptr inbounds i8, i8* %11, i64 8
  %50 = getelementptr inbounds i8, i8* %12, i64 2
  %51 = add i32 %13, -2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %10

53:                                               ; preds = %10, %5
  %54 = phi i8* [ %0, %5 ], [ %49, %10 ]
  %55 = phi i8* [ %1, %5 ], [ %50, %10 ]
  %56 = icmp eq i32 %6, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %54, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %54, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %54, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %59 to i32
  %65 = mul nuw nsw i32 %64, 66
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 129
  %68 = zext i8 %63 to i32
  %69 = mul nuw nsw i32 %68, 25
  %70 = add nuw nsw i32 %65, 4224
  %71 = add nuw nsw i32 %70, %67
  %72 = add nuw nsw i32 %71, %69
  %73 = lshr i32 %72, 8
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %55, align 1
  br label %75

75:                                               ; preds = %57, %53, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @BGRAToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %253

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %153, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = add nsw i64 %6, 1
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = shl nuw nsw i64 %19, 3
  %26 = add nsw i64 %25, %6
  %27 = add nsw i64 %26, 8
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 1
  %30 = add nuw nsw i64 %25, 8
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = icmp ugt i8* %22, %2
  %33 = icmp ugt i8* %21, %3
  %34 = and i1 %32, %33
  %35 = icmp ugt i8* %28, %2
  %36 = icmp ult i8* %24, %21
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  %39 = icmp ugt i8* %31, %2
  %40 = icmp ult i8* %29, %21
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = icmp ugt i8* %28, %3
  %44 = icmp ult i8* %24, %22
  %45 = and i1 %43, %44
  %46 = or i1 %42, %45
  %47 = icmp ugt i8* %31, %3
  %48 = icmp ult i8* %29, %22
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  br i1 %50, label %153, label %51

51:                                               ; preds = %16
  %52 = and i64 %14, 15
  %53 = icmp eq i64 %52, 0
  %54 = select i1 %53, i64 16, i64 %52
  %55 = sub nsw i64 %14, %54
  %56 = shl nsw i64 %55, 3
  %57 = getelementptr i8, i8* %0, i64 %56
  %58 = getelementptr i8, i8* %2, i64 %55
  %59 = getelementptr i8, i8* %3, i64 %55
  %60 = shl nsw i64 %55, 3
  %61 = getelementptr i8, i8* %7, i64 %60
  %62 = trunc i64 %55 to i32
  %63 = shl i32 %62, 1
  %64 = getelementptr i8, i8* %7, i64 3
  %65 = getelementptr inbounds i8, i8* %0, i64 1
  %66 = getelementptr inbounds i8, i8* %64, i64 -2
  br label %67

67:                                               ; preds = %67, %51
  %68 = phi i64 [ 0, %51 ], [ %151, %67 ]
  %69 = shl i64 %68, 3
  %70 = getelementptr i8, i8* %2, i64 %68
  %71 = getelementptr i8, i8* %3, i64 %68
  %72 = shl i64 %68, 3
  %73 = getelementptr inbounds i8, i8* %65, i64 %69
  %74 = bitcast i8* %73 to <128 x i8>*
  %75 = load <128 x i8>, <128 x i8>* %74, align 1
  %76 = shufflevector <128 x i8> %75, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %77 = shufflevector <128 x i8> %75, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %78 = shufflevector <128 x i8> %75, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %79 = shufflevector <128 x i8> %75, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %80 = shufflevector <128 x i8> %75, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %81 = shufflevector <128 x i8> %75, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %82 = zext <16 x i8> %78 to <16 x i32>
  %83 = getelementptr inbounds i8, i8* %66, i64 %72
  %84 = bitcast i8* %83 to <128 x i8>*
  %85 = load <128 x i8>, <128 x i8>* %84, align 1
  %86 = shufflevector <128 x i8> %85, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %87 = shufflevector <128 x i8> %85, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %88 = shufflevector <128 x i8> %85, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %89 = shufflevector <128 x i8> %85, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %90 = shufflevector <128 x i8> %85, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %91 = shufflevector <128 x i8> %85, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %92 = zext <16 x i8> %88 to <16 x i32>
  %93 = add nuw nsw <16 x i32> %82, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %94 = add nuw nsw <16 x i32> %93, %92
  %95 = lshr <16 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = zext <16 x i8> %81 to <16 x i32>
  %97 = zext <16 x i8> %91 to <16 x i32>
  %98 = add nuw nsw <16 x i32> %96, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %99 = add nuw nsw <16 x i32> %98, %97
  %100 = lshr <16 x i32> %99, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <16 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %102 = add nuw nsw <16 x i32> %101, %100
  %103 = lshr <16 x i32> %102, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %104 = zext <16 x i8> %77 to <16 x i32>
  %105 = zext <16 x i8> %87 to <16 x i32>
  %106 = add nuw nsw <16 x i32> %104, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %107 = add nuw nsw <16 x i32> %106, %105
  %108 = lshr <16 x i32> %107, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %109 = zext <16 x i8> %80 to <16 x i32>
  %110 = zext <16 x i8> %90 to <16 x i32>
  %111 = add nuw nsw <16 x i32> %109, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %112 = add nuw nsw <16 x i32> %111, %110
  %113 = lshr <16 x i32> %112, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = add nuw nsw <16 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %115 = add nuw nsw <16 x i32> %114, %113
  %116 = lshr <16 x i32> %115, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %117 = zext <16 x i8> %76 to <16 x i32>
  %118 = zext <16 x i8> %86 to <16 x i32>
  %119 = add nuw nsw <16 x i32> %117, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %120 = add nuw nsw <16 x i32> %119, %118
  %121 = lshr <16 x i32> %120, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %122 = zext <16 x i8> %79 to <16 x i32>
  %123 = zext <16 x i8> %89 to <16 x i32>
  %124 = add nuw nsw <16 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %125 = add nuw nsw <16 x i32> %124, %123
  %126 = lshr <16 x i32> %125, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %127 = add nuw nsw <16 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = add nuw nsw <16 x i32> %127, %126
  %129 = lshr <16 x i32> %128, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %130 = and <16 x i32> %103, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = mul nuw nsw <16 x i32> %130, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %132 = and <16 x i32> %116, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %133 = mul nsw <16 x i32> %132, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %134 = and <16 x i32> %129, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = mul nsw <16 x i32> %134, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %136 = or <16 x i32> %131, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %137 = add nsw <16 x i32> %136, %133
  %138 = add nsw <16 x i32> %137, %135
  %139 = lshr <16 x i32> %138, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %140 = trunc <16 x i32> %139 to <16 x i8>
  %141 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %140, <16 x i8>* %141, align 1, !alias.scope !84, !noalias !87
  %142 = mul nuw nsw <16 x i32> %134, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %143 = mul nsw <16 x i32> %132, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %144 = mul nsw <16 x i32> %130, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %145 = or <16 x i32> %142, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %146 = add nsw <16 x i32> %143, %144
  %147 = add nsw <16 x i32> %146, %145
  %148 = lshr <16 x i32> %147, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %149 = trunc <16 x i32> %148 to <16 x i8>
  %150 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %149, <16 x i8>* %150, align 1, !alias.scope !91, !noalias !92
  %151 = add i64 %68, 16
  %152 = icmp eq i64 %151, %55
  br i1 %152, label %153, label %67, !llvm.loop !93

153:                                              ; preds = %67, %16, %10
  %154 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %57, %67 ]
  %155 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %58, %67 ]
  %156 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %59, %67 ]
  %157 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %61, %67 ]
  %158 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %63, %67 ]
  br label %159

159:                                              ; preds = %153, %159
  %160 = phi i8* [ %247, %159 ], [ %154, %153 ]
  %161 = phi i8* [ %249, %159 ], [ %155, %153 ]
  %162 = phi i8* [ %250, %159 ], [ %156, %153 ]
  %163 = phi i8* [ %248, %159 ], [ %157, %153 ]
  %164 = phi i32 [ %251, %159 ], [ %158, %153 ]
  %165 = getelementptr inbounds i8, i8* %160, i64 3
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = getelementptr inbounds i8, i8* %163, i64 3
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = add nuw nsw i32 %167, 1
  %172 = add nuw nsw i32 %171, %170
  %173 = lshr i32 %172, 1
  %174 = getelementptr inbounds i8, i8* %160, i64 7
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = getelementptr inbounds i8, i8* %163, i64 7
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = add nuw nsw i32 %176, 1
  %181 = add nuw nsw i32 %180, %179
  %182 = lshr i32 %181, 1
  %183 = add nuw nsw i32 %173, 1
  %184 = add nuw nsw i32 %183, %182
  %185 = lshr i32 %184, 1
  %186 = getelementptr inbounds i8, i8* %160, i64 2
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = getelementptr inbounds i8, i8* %163, i64 2
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = add nuw nsw i32 %188, 1
  %193 = add nuw nsw i32 %192, %191
  %194 = lshr i32 %193, 1
  %195 = getelementptr inbounds i8, i8* %160, i64 6
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = getelementptr inbounds i8, i8* %163, i64 6
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = add nuw nsw i32 %197, 1
  %202 = add nuw nsw i32 %201, %200
  %203 = lshr i32 %202, 1
  %204 = add nuw nsw i32 %194, 1
  %205 = add nuw nsw i32 %204, %203
  %206 = lshr i32 %205, 1
  %207 = getelementptr inbounds i8, i8* %160, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = getelementptr inbounds i8, i8* %163, i64 1
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = add nuw nsw i32 %209, 1
  %214 = add nuw nsw i32 %213, %212
  %215 = lshr i32 %214, 1
  %216 = getelementptr inbounds i8, i8* %160, i64 5
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = getelementptr inbounds i8, i8* %163, i64 5
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i32
  %222 = add nuw nsw i32 %218, 1
  %223 = add nuw nsw i32 %222, %221
  %224 = lshr i32 %223, 1
  %225 = add nuw nsw i32 %215, 1
  %226 = add nuw nsw i32 %225, %224
  %227 = lshr i32 %226, 1
  %228 = and i32 %185, 255
  %229 = mul nuw nsw i32 %228, 112
  %230 = and i32 %206, 255
  %231 = mul nsw i32 %230, -74
  %232 = and i32 %227, 255
  %233 = mul nsw i32 %232, -38
  %234 = or i32 %229, 32768
  %235 = add nsw i32 %234, %231
  %236 = add nsw i32 %235, %233
  %237 = lshr i32 %236, 8
  %238 = trunc i32 %237 to i8
  store i8 %238, i8* %161, align 1
  %239 = mul nuw nsw i32 %232, 112
  %240 = mul nsw i32 %230, -94
  %241 = mul nsw i32 %228, -18
  %242 = or i32 %239, 32768
  %243 = add nsw i32 %240, %241
  %244 = add nsw i32 %243, %242
  %245 = lshr i32 %244, 8
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %162, align 1
  %247 = getelementptr inbounds i8, i8* %160, i64 8
  %248 = getelementptr inbounds i8, i8* %163, i64 8
  %249 = getelementptr inbounds i8, i8* %161, i64 1
  %250 = getelementptr inbounds i8, i8* %162, i64 1
  %251 = add nuw nsw i32 %164, 2
  %252 = icmp slt i32 %251, %8
  br i1 %252, label %159, label %253, !llvm.loop !94

253:                                              ; preds = %159, %5
  %254 = phi i8* [ %7, %5 ], [ %248, %159 ]
  %255 = phi i8* [ %3, %5 ], [ %250, %159 ]
  %256 = phi i8* [ %2, %5 ], [ %249, %159 ]
  %257 = phi i8* [ %0, %5 ], [ %247, %159 ]
  %258 = and i32 %4, 1
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %307, label %260

260:                                              ; preds = %253
  %261 = getelementptr inbounds i8, i8* %257, i64 3
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i32
  %264 = getelementptr inbounds i8, i8* %254, i64 3
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = add nuw nsw i32 %263, 1
  %268 = add nuw nsw i32 %267, %266
  %269 = lshr i32 %268, 1
  %270 = getelementptr inbounds i8, i8* %257, i64 2
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = getelementptr inbounds i8, i8* %254, i64 2
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = add nuw nsw i32 %272, 1
  %277 = add nuw nsw i32 %276, %275
  %278 = lshr i32 %277, 1
  %279 = getelementptr inbounds i8, i8* %257, i64 1
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = getelementptr inbounds i8, i8* %254, i64 1
  %283 = load i8, i8* %282, align 1
  %284 = zext i8 %283 to i32
  %285 = add nuw nsw i32 %281, 1
  %286 = add nuw nsw i32 %285, %284
  %287 = lshr i32 %286, 1
  %288 = and i32 %269, 255
  %289 = mul nuw nsw i32 %288, 112
  %290 = and i32 %278, 255
  %291 = mul nsw i32 %290, -74
  %292 = and i32 %287, 255
  %293 = mul nsw i32 %292, -38
  %294 = or i32 %289, 32768
  %295 = add nsw i32 %294, %291
  %296 = add nsw i32 %295, %293
  %297 = lshr i32 %296, 8
  %298 = trunc i32 %297 to i8
  store i8 %298, i8* %256, align 1
  %299 = mul nuw nsw i32 %292, 112
  %300 = mul nsw i32 %290, -94
  %301 = mul nsw i32 %288, -18
  %302 = or i32 %299, 32768
  %303 = add nsw i32 %300, %301
  %304 = add nsw i32 %303, %302
  %305 = lshr i32 %304, 8
  %306 = trunc i32 %305 to i8
  store i8 %306, i8* %255, align 1
  br label %307

307:                                              ; preds = %253, %260
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ABGRToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %14 to i32
  %20 = mul nuw nsw i32 %19, 66
  %21 = zext i8 %16 to i32
  %22 = mul nuw nsw i32 %21, 129
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 25
  %25 = add nuw nsw i32 %20, 4224
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 4
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = load i8, i8* %30, align 1
  %33 = getelementptr inbounds i8, i8* %11, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %11, i64 6
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %32 to i32
  %38 = mul nuw nsw i32 %37, 66
  %39 = zext i8 %34 to i32
  %40 = mul nuw nsw i32 %39, 129
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 25
  %43 = add nuw nsw i32 %38, 4224
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 8
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = load i8, i8* %53, align 1
  %58 = getelementptr inbounds i8, i8* %53, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %57 to i32
  %63 = mul nuw nsw i32 %62, 66
  %64 = zext i8 %59 to i32
  %65 = mul nuw nsw i32 %64, 129
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 25
  %68 = add nuw nsw i32 %63, 4224
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ABGRToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %247

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %149, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = shl nuw nsw i64 %19, 3
  %24 = add nsw i64 %23, %6
  %25 = add nsw i64 %24, 7
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = or i64 %23, 7
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = icmp ugt i8* %22, %2
  %30 = icmp ugt i8* %21, %3
  %31 = and i1 %29, %30
  %32 = icmp ugt i8* %26, %2
  %33 = icmp ult i8* %7, %21
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %21, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %26, %3
  %41 = icmp ult i8* %7, %22
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  %44 = icmp ugt i8* %28, %3
  %45 = icmp ugt i8* %22, %0
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  br i1 %47, label %149, label %48

48:                                               ; preds = %16
  %49 = and i64 %14, 15
  %50 = icmp eq i64 %49, 0
  %51 = select i1 %50, i64 16, i64 %49
  %52 = sub nsw i64 %14, %51
  %53 = shl nsw i64 %52, 3
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = getelementptr i8, i8* %2, i64 %52
  %56 = getelementptr i8, i8* %3, i64 %52
  %57 = shl nsw i64 %52, 3
  %58 = getelementptr i8, i8* %7, i64 %57
  %59 = trunc i64 %52 to i32
  %60 = shl i32 %59, 1
  %61 = getelementptr i8, i8* %7, i64 2
  %62 = getelementptr inbounds i8, i8* %61, i64 -2
  br label %63

63:                                               ; preds = %63, %48
  %64 = phi i64 [ 0, %48 ], [ %147, %63 ]
  %65 = shl i64 %64, 3
  %66 = getelementptr i8, i8* %2, i64 %64
  %67 = getelementptr i8, i8* %3, i64 %64
  %68 = shl i64 %64, 3
  %69 = getelementptr inbounds i8, i8* %0, i64 %65
  %70 = bitcast i8* %69 to <128 x i8>*
  %71 = load <128 x i8>, <128 x i8>* %70, align 1
  %72 = shufflevector <128 x i8> %71, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %73 = shufflevector <128 x i8> %71, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %74 = shufflevector <128 x i8> %71, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %75 = shufflevector <128 x i8> %71, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %76 = shufflevector <128 x i8> %71, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %77 = shufflevector <128 x i8> %71, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %78 = zext <16 x i8> %74 to <16 x i32>
  %79 = getelementptr inbounds i8, i8* %62, i64 %68
  %80 = bitcast i8* %79 to <128 x i8>*
  %81 = load <128 x i8>, <128 x i8>* %80, align 1
  %82 = shufflevector <128 x i8> %81, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %83 = shufflevector <128 x i8> %81, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %84 = shufflevector <128 x i8> %81, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %85 = shufflevector <128 x i8> %81, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %86 = shufflevector <128 x i8> %81, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %87 = shufflevector <128 x i8> %81, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %88 = zext <16 x i8> %84 to <16 x i32>
  %89 = add nuw nsw <16 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %90 = add nuw nsw <16 x i32> %89, %88
  %91 = lshr <16 x i32> %90, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %92 = zext <16 x i8> %77 to <16 x i32>
  %93 = zext <16 x i8> %87 to <16 x i32>
  %94 = add nuw nsw <16 x i32> %92, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = add nuw nsw <16 x i32> %94, %93
  %96 = lshr <16 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %97 = add nuw nsw <16 x i32> %91, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = add nuw nsw <16 x i32> %97, %96
  %99 = lshr <16 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = zext <16 x i8> %73 to <16 x i32>
  %101 = zext <16 x i8> %83 to <16 x i32>
  %102 = add nuw nsw <16 x i32> %100, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = add nuw nsw <16 x i32> %102, %101
  %104 = lshr <16 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %105 = zext <16 x i8> %76 to <16 x i32>
  %106 = zext <16 x i8> %86 to <16 x i32>
  %107 = add nuw nsw <16 x i32> %105, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = add nuw nsw <16 x i32> %107, %106
  %109 = lshr <16 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %110 = add nuw nsw <16 x i32> %104, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = add nuw nsw <16 x i32> %110, %109
  %112 = lshr <16 x i32> %111, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %113 = zext <16 x i8> %72 to <16 x i32>
  %114 = zext <16 x i8> %82 to <16 x i32>
  %115 = add nuw nsw <16 x i32> %113, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = add nuw nsw <16 x i32> %115, %114
  %117 = lshr <16 x i32> %116, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %118 = zext <16 x i8> %75 to <16 x i32>
  %119 = zext <16 x i8> %85 to <16 x i32>
  %120 = add nuw nsw <16 x i32> %118, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %121 = add nuw nsw <16 x i32> %120, %119
  %122 = lshr <16 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %123 = add nuw nsw <16 x i32> %117, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = add nuw nsw <16 x i32> %123, %122
  %125 = lshr <16 x i32> %124, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %126 = and <16 x i32> %99, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = mul nuw nsw <16 x i32> %126, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %128 = and <16 x i32> %112, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = mul nsw <16 x i32> %128, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %130 = and <16 x i32> %125, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = mul nsw <16 x i32> %130, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %132 = or <16 x i32> %127, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %133 = add nsw <16 x i32> %132, %129
  %134 = add nsw <16 x i32> %133, %131
  %135 = lshr <16 x i32> %134, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %136 = trunc <16 x i32> %135 to <16 x i8>
  %137 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %136, <16 x i8>* %137, align 1, !alias.scope !95, !noalias !98
  %138 = mul nuw nsw <16 x i32> %130, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %139 = mul nsw <16 x i32> %128, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %140 = mul nsw <16 x i32> %126, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %141 = or <16 x i32> %138, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %142 = add nsw <16 x i32> %139, %140
  %143 = add nsw <16 x i32> %142, %141
  %144 = lshr <16 x i32> %143, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %145 = trunc <16 x i32> %144 to <16 x i8>
  %146 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %145, <16 x i8>* %146, align 1, !alias.scope !102, !noalias !103
  %147 = add i64 %64, 16
  %148 = icmp eq i64 %147, %52
  br i1 %148, label %149, label %63, !llvm.loop !104

149:                                              ; preds = %63, %16, %10
  %150 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %54, %63 ]
  %151 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %55, %63 ]
  %152 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %56, %63 ]
  %153 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %58, %63 ]
  %154 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %60, %63 ]
  br label %155

155:                                              ; preds = %149, %155
  %156 = phi i8* [ %241, %155 ], [ %150, %149 ]
  %157 = phi i8* [ %243, %155 ], [ %151, %149 ]
  %158 = phi i8* [ %244, %155 ], [ %152, %149 ]
  %159 = phi i8* [ %242, %155 ], [ %153, %149 ]
  %160 = phi i32 [ %245, %155 ], [ %154, %149 ]
  %161 = getelementptr inbounds i8, i8* %156, i64 2
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds i8, i8* %159, i64 2
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add nuw nsw i32 %163, 1
  %168 = add nuw nsw i32 %167, %166
  %169 = lshr i32 %168, 1
  %170 = getelementptr inbounds i8, i8* %156, i64 6
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = getelementptr inbounds i8, i8* %159, i64 6
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = add nuw nsw i32 %172, 1
  %177 = add nuw nsw i32 %176, %175
  %178 = lshr i32 %177, 1
  %179 = add nuw nsw i32 %169, 1
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 1
  %182 = getelementptr inbounds i8, i8* %156, i64 1
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = getelementptr inbounds i8, i8* %159, i64 1
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = add nuw nsw i32 %184, 1
  %189 = add nuw nsw i32 %188, %187
  %190 = lshr i32 %189, 1
  %191 = getelementptr inbounds i8, i8* %156, i64 5
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = getelementptr inbounds i8, i8* %159, i64 5
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = add nuw nsw i32 %193, 1
  %198 = add nuw nsw i32 %197, %196
  %199 = lshr i32 %198, 1
  %200 = add nuw nsw i32 %190, 1
  %201 = add nuw nsw i32 %200, %199
  %202 = lshr i32 %201, 1
  %203 = load i8, i8* %156, align 1
  %204 = zext i8 %203 to i32
  %205 = load i8, i8* %159, align 1
  %206 = zext i8 %205 to i32
  %207 = add nuw nsw i32 %204, 1
  %208 = add nuw nsw i32 %207, %206
  %209 = lshr i32 %208, 1
  %210 = getelementptr inbounds i8, i8* %156, i64 4
  %211 = load i8, i8* %210, align 1
  %212 = zext i8 %211 to i32
  %213 = getelementptr inbounds i8, i8* %159, i64 4
  %214 = load i8, i8* %213, align 1
  %215 = zext i8 %214 to i32
  %216 = add nuw nsw i32 %212, 1
  %217 = add nuw nsw i32 %216, %215
  %218 = lshr i32 %217, 1
  %219 = add nuw nsw i32 %209, 1
  %220 = add nuw nsw i32 %219, %218
  %221 = lshr i32 %220, 1
  %222 = and i32 %181, 255
  %223 = mul nuw nsw i32 %222, 112
  %224 = and i32 %202, 255
  %225 = mul nsw i32 %224, -74
  %226 = and i32 %221, 255
  %227 = mul nsw i32 %226, -38
  %228 = or i32 %223, 32768
  %229 = add nsw i32 %228, %225
  %230 = add nsw i32 %229, %227
  %231 = lshr i32 %230, 8
  %232 = trunc i32 %231 to i8
  store i8 %232, i8* %157, align 1
  %233 = mul nuw nsw i32 %226, 112
  %234 = mul nsw i32 %224, -94
  %235 = mul nsw i32 %222, -18
  %236 = or i32 %233, 32768
  %237 = add nsw i32 %234, %235
  %238 = add nsw i32 %237, %236
  %239 = lshr i32 %238, 8
  %240 = trunc i32 %239 to i8
  store i8 %240, i8* %158, align 1
  %241 = getelementptr inbounds i8, i8* %156, i64 8
  %242 = getelementptr inbounds i8, i8* %159, i64 8
  %243 = getelementptr inbounds i8, i8* %157, i64 1
  %244 = getelementptr inbounds i8, i8* %158, i64 1
  %245 = add nuw nsw i32 %160, 2
  %246 = icmp slt i32 %245, %8
  br i1 %246, label %155, label %247, !llvm.loop !105

247:                                              ; preds = %155, %5
  %248 = phi i8* [ %7, %5 ], [ %242, %155 ]
  %249 = phi i8* [ %3, %5 ], [ %244, %155 ]
  %250 = phi i8* [ %2, %5 ], [ %243, %155 ]
  %251 = phi i8* [ %0, %5 ], [ %241, %155 ]
  %252 = and i32 %4, 1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %299, label %254

254:                                              ; preds = %247
  %255 = getelementptr inbounds i8, i8* %251, i64 2
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = getelementptr inbounds i8, i8* %248, i64 2
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = add nuw nsw i32 %257, 1
  %262 = add nuw nsw i32 %261, %260
  %263 = lshr i32 %262, 1
  %264 = getelementptr inbounds i8, i8* %251, i64 1
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = getelementptr inbounds i8, i8* %248, i64 1
  %268 = load i8, i8* %267, align 1
  %269 = zext i8 %268 to i32
  %270 = add nuw nsw i32 %266, 1
  %271 = add nuw nsw i32 %270, %269
  %272 = lshr i32 %271, 1
  %273 = load i8, i8* %251, align 1
  %274 = zext i8 %273 to i32
  %275 = load i8, i8* %248, align 1
  %276 = zext i8 %275 to i32
  %277 = add nuw nsw i32 %274, 1
  %278 = add nuw nsw i32 %277, %276
  %279 = lshr i32 %278, 1
  %280 = and i32 %263, 255
  %281 = mul nuw nsw i32 %280, 112
  %282 = and i32 %272, 255
  %283 = mul nsw i32 %282, -74
  %284 = and i32 %279, 255
  %285 = mul nsw i32 %284, -38
  %286 = or i32 %281, 32768
  %287 = add nsw i32 %286, %283
  %288 = add nsw i32 %287, %285
  %289 = lshr i32 %288, 8
  %290 = trunc i32 %289 to i8
  store i8 %290, i8* %250, align 1
  %291 = mul nuw nsw i32 %284, 112
  %292 = mul nsw i32 %282, -94
  %293 = mul nsw i32 %280, -18
  %294 = or i32 %291, 32768
  %295 = add nsw i32 %292, %293
  %296 = add nsw i32 %295, %294
  %297 = lshr i32 %296, 8
  %298 = trunc i32 %297 to i8
  store i8 %298, i8* %249, align 1
  br label %299

299:                                              ; preds = %247, %254
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGBAToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %75

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %53, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %49, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %50, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %51, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 3
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %15 to i32
  %21 = mul nuw nsw i32 %20, 66
  %22 = zext i8 %17 to i32
  %23 = mul nuw nsw i32 %22, 129
  %24 = zext i8 %19 to i32
  %25 = mul nuw nsw i32 %24, 25
  %26 = add nuw nsw i32 %21, 4224
  %27 = add nuw nsw i32 %26, %23
  %28 = add nuw nsw i32 %27, %25
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %12, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 6
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %11, i64 5
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %33 to i32
  %39 = mul nuw nsw i32 %38, 66
  %40 = zext i8 %35 to i32
  %41 = mul nuw nsw i32 %40, 129
  %42 = zext i8 %37 to i32
  %43 = mul nuw nsw i32 %42, 25
  %44 = add nuw nsw i32 %39, 4224
  %45 = add nuw nsw i32 %44, %41
  %46 = add nuw nsw i32 %45, %43
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %31, align 1
  %49 = getelementptr inbounds i8, i8* %11, i64 8
  %50 = getelementptr inbounds i8, i8* %12, i64 2
  %51 = add i32 %13, -2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %10

53:                                               ; preds = %10, %5
  %54 = phi i8* [ %0, %5 ], [ %49, %10 ]
  %55 = phi i8* [ %1, %5 ], [ %50, %10 ]
  %56 = icmp eq i32 %6, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %54, i64 3
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %54, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %54, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %59 to i32
  %65 = mul nuw nsw i32 %64, 66
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 129
  %68 = zext i8 %63 to i32
  %69 = mul nuw nsw i32 %68, 25
  %70 = add nuw nsw i32 %65, 4224
  %71 = add nuw nsw i32 %70, %67
  %72 = add nuw nsw i32 %71, %69
  %73 = lshr i32 %72, 8
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %55, align 1
  br label %75

75:                                               ; preds = %57, %53, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGBAToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %252

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %152, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = add nsw i64 %6, 1
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = shl nuw nsw i64 %19, 3
  %26 = add nsw i64 %25, %6
  %27 = add nsw i64 %26, 8
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 1
  %30 = add nuw nsw i64 %25, 8
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = icmp ugt i8* %22, %2
  %33 = icmp ugt i8* %21, %3
  %34 = and i1 %32, %33
  %35 = icmp ugt i8* %28, %2
  %36 = icmp ult i8* %24, %21
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  %39 = icmp ugt i8* %31, %2
  %40 = icmp ult i8* %29, %21
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = icmp ugt i8* %28, %3
  %44 = icmp ult i8* %24, %22
  %45 = and i1 %43, %44
  %46 = or i1 %42, %45
  %47 = icmp ugt i8* %31, %3
  %48 = icmp ult i8* %29, %22
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  br i1 %50, label %152, label %51

51:                                               ; preds = %16
  %52 = and i64 %14, 15
  %53 = icmp eq i64 %52, 0
  %54 = select i1 %53, i64 16, i64 %52
  %55 = sub nsw i64 %14, %54
  %56 = shl nsw i64 %55, 3
  %57 = getelementptr i8, i8* %0, i64 %56
  %58 = getelementptr i8, i8* %2, i64 %55
  %59 = getelementptr i8, i8* %3, i64 %55
  %60 = shl nsw i64 %55, 3
  %61 = getelementptr i8, i8* %7, i64 %60
  %62 = trunc i64 %55 to i32
  %63 = shl i32 %62, 1
  %64 = getelementptr i8, i8* %0, i64 1
  %65 = getelementptr i8, i8* %7, i64 1
  br label %66

66:                                               ; preds = %66, %51
  %67 = phi i64 [ 0, %51 ], [ %150, %66 ]
  %68 = shl i64 %67, 3
  %69 = getelementptr i8, i8* %2, i64 %67
  %70 = getelementptr i8, i8* %3, i64 %67
  %71 = shl i64 %67, 3
  %72 = getelementptr inbounds i8, i8* %64, i64 %68
  %73 = bitcast i8* %72 to <128 x i8>*
  %74 = load <128 x i8>, <128 x i8>* %73, align 1
  %75 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %76 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %77 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %78 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %79 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %80 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %81 = zext <16 x i8> %75 to <16 x i32>
  %82 = getelementptr inbounds i8, i8* %65, i64 %71
  %83 = bitcast i8* %82 to <128 x i8>*
  %84 = load <128 x i8>, <128 x i8>* %83, align 1
  %85 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %86 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %87 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %88 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %89 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %90 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %91 = zext <16 x i8> %85 to <16 x i32>
  %92 = add nuw nsw <16 x i32> %81, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = add nuw nsw <16 x i32> %92, %91
  %94 = lshr <16 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = zext <16 x i8> %78 to <16 x i32>
  %96 = zext <16 x i8> %88 to <16 x i32>
  %97 = add nuw nsw <16 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = add nuw nsw <16 x i32> %97, %96
  %99 = lshr <16 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nuw nsw <16 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <16 x i32> %100, %99
  %102 = lshr <16 x i32> %101, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = zext <16 x i8> %76 to <16 x i32>
  %104 = zext <16 x i8> %86 to <16 x i32>
  %105 = add nuw nsw <16 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %106 = add nuw nsw <16 x i32> %105, %104
  %107 = lshr <16 x i32> %106, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = zext <16 x i8> %79 to <16 x i32>
  %109 = zext <16 x i8> %89 to <16 x i32>
  %110 = add nuw nsw <16 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = add nuw nsw <16 x i32> %110, %109
  %112 = lshr <16 x i32> %111, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %113 = add nuw nsw <16 x i32> %107, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = add nuw nsw <16 x i32> %113, %112
  %115 = lshr <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = zext <16 x i8> %77 to <16 x i32>
  %117 = zext <16 x i8> %87 to <16 x i32>
  %118 = add nuw nsw <16 x i32> %116, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = add nuw nsw <16 x i32> %118, %117
  %120 = lshr <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %121 = zext <16 x i8> %80 to <16 x i32>
  %122 = zext <16 x i8> %90 to <16 x i32>
  %123 = add nuw nsw <16 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = add nuw nsw <16 x i32> %123, %122
  %125 = lshr <16 x i32> %124, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %126 = add nuw nsw <16 x i32> %120, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %127 = add nuw nsw <16 x i32> %126, %125
  %128 = lshr <16 x i32> %127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %129 = and <16 x i32> %102, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %130 = mul nuw nsw <16 x i32> %129, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %131 = and <16 x i32> %115, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = mul nsw <16 x i32> %131, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %133 = and <16 x i32> %128, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %134 = mul nsw <16 x i32> %133, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %135 = or <16 x i32> %130, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %136 = add nsw <16 x i32> %135, %132
  %137 = add nsw <16 x i32> %136, %134
  %138 = lshr <16 x i32> %137, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %139 = trunc <16 x i32> %138 to <16 x i8>
  %140 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %139, <16 x i8>* %140, align 1, !alias.scope !106, !noalias !109
  %141 = mul nuw nsw <16 x i32> %133, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %142 = mul nsw <16 x i32> %131, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %143 = mul nsw <16 x i32> %129, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %144 = or <16 x i32> %141, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %145 = add nsw <16 x i32> %142, %143
  %146 = add nsw <16 x i32> %145, %144
  %147 = lshr <16 x i32> %146, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %148 = trunc <16 x i32> %147 to <16 x i8>
  %149 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %149, align 1, !alias.scope !113, !noalias !114
  %150 = add i64 %67, 16
  %151 = icmp eq i64 %150, %55
  br i1 %151, label %152, label %66, !llvm.loop !115

152:                                              ; preds = %66, %16, %10
  %153 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %57, %66 ]
  %154 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %58, %66 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %59, %66 ]
  %156 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %61, %66 ]
  %157 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %63, %66 ]
  br label %158

158:                                              ; preds = %152, %158
  %159 = phi i8* [ %246, %158 ], [ %153, %152 ]
  %160 = phi i8* [ %248, %158 ], [ %154, %152 ]
  %161 = phi i8* [ %249, %158 ], [ %155, %152 ]
  %162 = phi i8* [ %247, %158 ], [ %156, %152 ]
  %163 = phi i32 [ %250, %158 ], [ %157, %152 ]
  %164 = getelementptr inbounds i8, i8* %159, i64 1
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = getelementptr inbounds i8, i8* %162, i64 1
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = add nuw nsw i32 %166, 1
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 1
  %173 = getelementptr inbounds i8, i8* %159, i64 5
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds i8, i8* %162, i64 5
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = add nuw nsw i32 %175, 1
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 1
  %182 = add nuw nsw i32 %172, 1
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 1
  %185 = getelementptr inbounds i8, i8* %159, i64 2
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = getelementptr inbounds i8, i8* %162, i64 2
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nuw nsw i32 %187, 1
  %192 = add nuw nsw i32 %191, %190
  %193 = lshr i32 %192, 1
  %194 = getelementptr inbounds i8, i8* %159, i64 6
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = getelementptr inbounds i8, i8* %162, i64 6
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = add nuw nsw i32 %196, 1
  %201 = add nuw nsw i32 %200, %199
  %202 = lshr i32 %201, 1
  %203 = add nuw nsw i32 %193, 1
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 1
  %206 = getelementptr inbounds i8, i8* %159, i64 3
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = getelementptr inbounds i8, i8* %162, i64 3
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = add nuw nsw i32 %208, 1
  %213 = add nuw nsw i32 %212, %211
  %214 = lshr i32 %213, 1
  %215 = getelementptr inbounds i8, i8* %159, i64 7
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = getelementptr inbounds i8, i8* %162, i64 7
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nuw nsw i32 %217, 1
  %222 = add nuw nsw i32 %221, %220
  %223 = lshr i32 %222, 1
  %224 = add nuw nsw i32 %214, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = and i32 %184, 255
  %228 = mul nuw nsw i32 %227, 112
  %229 = and i32 %205, 255
  %230 = mul nsw i32 %229, -74
  %231 = and i32 %226, 255
  %232 = mul nsw i32 %231, -38
  %233 = or i32 %228, 32768
  %234 = add nsw i32 %233, %230
  %235 = add nsw i32 %234, %232
  %236 = lshr i32 %235, 8
  %237 = trunc i32 %236 to i8
  store i8 %237, i8* %160, align 1
  %238 = mul nuw nsw i32 %231, 112
  %239 = mul nsw i32 %229, -94
  %240 = mul nsw i32 %227, -18
  %241 = or i32 %238, 32768
  %242 = add nsw i32 %239, %240
  %243 = add nsw i32 %242, %241
  %244 = lshr i32 %243, 8
  %245 = trunc i32 %244 to i8
  store i8 %245, i8* %161, align 1
  %246 = getelementptr inbounds i8, i8* %159, i64 8
  %247 = getelementptr inbounds i8, i8* %162, i64 8
  %248 = getelementptr inbounds i8, i8* %160, i64 1
  %249 = getelementptr inbounds i8, i8* %161, i64 1
  %250 = add nuw nsw i32 %163, 2
  %251 = icmp slt i32 %250, %8
  br i1 %251, label %158, label %252, !llvm.loop !116

252:                                              ; preds = %158, %5
  %253 = phi i8* [ %7, %5 ], [ %247, %158 ]
  %254 = phi i8* [ %3, %5 ], [ %249, %158 ]
  %255 = phi i8* [ %2, %5 ], [ %248, %158 ]
  %256 = phi i8* [ %0, %5 ], [ %246, %158 ]
  %257 = and i32 %4, 1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %306, label %259

259:                                              ; preds = %252
  %260 = getelementptr inbounds i8, i8* %256, i64 1
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i32
  %263 = getelementptr inbounds i8, i8* %253, i64 1
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = add nuw nsw i32 %262, 1
  %267 = add nuw nsw i32 %266, %265
  %268 = lshr i32 %267, 1
  %269 = getelementptr inbounds i8, i8* %256, i64 2
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = getelementptr inbounds i8, i8* %253, i64 2
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = add nuw nsw i32 %271, 1
  %276 = add nuw nsw i32 %275, %274
  %277 = lshr i32 %276, 1
  %278 = getelementptr inbounds i8, i8* %256, i64 3
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = getelementptr inbounds i8, i8* %253, i64 3
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = add nuw nsw i32 %280, 1
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 1
  %287 = and i32 %268, 255
  %288 = mul nuw nsw i32 %287, 112
  %289 = and i32 %277, 255
  %290 = mul nsw i32 %289, -74
  %291 = and i32 %286, 255
  %292 = mul nsw i32 %291, -38
  %293 = or i32 %288, 32768
  %294 = add nsw i32 %293, %290
  %295 = add nsw i32 %294, %292
  %296 = lshr i32 %295, 8
  %297 = trunc i32 %296 to i8
  store i8 %297, i8* %255, align 1
  %298 = mul nuw nsw i32 %291, 112
  %299 = mul nsw i32 %289, -94
  %300 = mul nsw i32 %287, -18
  %301 = or i32 %298, 32768
  %302 = add nsw i32 %299, %300
  %303 = add nsw i32 %302, %301
  %304 = lshr i32 %303, 8
  %305 = trunc i32 %304 to i8
  store i8 %305, i8* %254, align 1
  br label %306

306:                                              ; preds = %252, %259
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB24ToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = load i8, i8* %11, align 1
  %19 = zext i8 %15 to i32
  %20 = mul nuw nsw i32 %19, 66
  %21 = zext i8 %17 to i32
  %22 = mul nuw nsw i32 %21, 129
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 25
  %25 = add nuw nsw i32 %20, 4224
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 3
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 4
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %30, align 1
  %37 = zext i8 %33 to i32
  %38 = mul nuw nsw i32 %37, 66
  %39 = zext i8 %35 to i32
  %40 = mul nuw nsw i32 %39, 129
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 25
  %43 = add nuw nsw i32 %38, 4224
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 6
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %53, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = load i8, i8* %53, align 1
  %62 = zext i8 %58 to i32
  %63 = mul nuw nsw i32 %62, 66
  %64 = zext i8 %60 to i32
  %65 = mul nuw nsw i32 %64, 129
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 25
  %68 = add nuw nsw i32 %63, 4224
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB24ToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %102

10:                                               ; preds = %5, %10
  %11 = phi i8* [ %96, %10 ], [ %0, %5 ]
  %12 = phi i8* [ %98, %10 ], [ %2, %5 ]
  %13 = phi i8* [ %99, %10 ], [ %3, %5 ]
  %14 = phi i8* [ %97, %10 ], [ %7, %5 ]
  %15 = phi i32 [ %100, %10 ], [ 0, %5 ]
  %16 = load i8, i8* %11, align 1
  %17 = zext i8 %16 to i32
  %18 = load i8, i8* %14, align 1
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %17, 1
  %21 = add nuw nsw i32 %20, %19
  %22 = lshr i32 %21, 1
  %23 = getelementptr inbounds i8, i8* %11, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %14, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %25, 1
  %30 = add nuw nsw i32 %29, %28
  %31 = lshr i32 %30, 1
  %32 = add nuw nsw i32 %22, 1
  %33 = add nuw nsw i32 %32, %31
  %34 = lshr i32 %33, 1
  %35 = getelementptr inbounds i8, i8* %11, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %14, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = getelementptr inbounds i8, i8* %11, i64 4
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %14, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = add nuw nsw i32 %46, 1
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 1
  %53 = add nuw nsw i32 %43, 1
  %54 = add nuw nsw i32 %53, %52
  %55 = lshr i32 %54, 1
  %56 = getelementptr inbounds i8, i8* %11, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %14, i64 2
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = add nuw nsw i32 %58, 1
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 1
  %65 = getelementptr inbounds i8, i8* %11, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %14, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = add nuw nsw i32 %64, 1
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 1
  %77 = and i32 %34, 255
  %78 = mul nuw nsw i32 %77, 112
  %79 = and i32 %55, 255
  %80 = mul nsw i32 %79, -74
  %81 = and i32 %76, 255
  %82 = mul nsw i32 %81, -38
  %83 = or i32 %78, 32768
  %84 = add nsw i32 %83, %80
  %85 = add nsw i32 %84, %82
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %12, align 1
  %88 = mul nuw nsw i32 %81, 112
  %89 = mul nsw i32 %79, -94
  %90 = mul nsw i32 %77, -18
  %91 = or i32 %88, 32768
  %92 = add nsw i32 %89, %90
  %93 = add nsw i32 %92, %91
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %13, align 1
  %96 = getelementptr inbounds i8, i8* %11, i64 6
  %97 = getelementptr inbounds i8, i8* %14, i64 6
  %98 = getelementptr inbounds i8, i8* %12, i64 1
  %99 = getelementptr inbounds i8, i8* %13, i64 1
  %100 = add nuw nsw i32 %15, 2
  %101 = icmp slt i32 %100, %8
  br i1 %101, label %10, label %102

102:                                              ; preds = %10, %5
  %103 = phi i8* [ %7, %5 ], [ %97, %10 ]
  %104 = phi i8* [ %3, %5 ], [ %99, %10 ]
  %105 = phi i8* [ %2, %5 ], [ %98, %10 ]
  %106 = phi i8* [ %0, %5 ], [ %96, %10 ]
  %107 = and i32 %4, 1
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %154, label %109

109:                                              ; preds = %102
  %110 = load i8, i8* %106, align 1
  %111 = zext i8 %110 to i32
  %112 = load i8, i8* %103, align 1
  %113 = zext i8 %112 to i32
  %114 = add nuw nsw i32 %111, 1
  %115 = add nuw nsw i32 %114, %113
  %116 = lshr i32 %115, 1
  %117 = getelementptr inbounds i8, i8* %106, i64 1
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds i8, i8* %103, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, 1
  %124 = add nuw nsw i32 %123, %122
  %125 = lshr i32 %124, 1
  %126 = getelementptr inbounds i8, i8* %106, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds i8, i8* %103, i64 2
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %128, 1
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 1
  %135 = and i32 %116, 255
  %136 = mul nuw nsw i32 %135, 112
  %137 = and i32 %125, 255
  %138 = mul nsw i32 %137, -74
  %139 = and i32 %134, 255
  %140 = mul nsw i32 %139, -38
  %141 = or i32 %136, 32768
  %142 = add nsw i32 %141, %138
  %143 = add nsw i32 %142, %140
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %105, align 1
  %146 = mul nuw nsw i32 %139, 112
  %147 = mul nsw i32 %137, -94
  %148 = mul nsw i32 %135, -18
  %149 = or i32 %146, 32768
  %150 = add nsw i32 %147, %148
  %151 = add nsw i32 %150, %149
  %152 = lshr i32 %151, 8
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %104, align 1
  br label %154

154:                                              ; preds = %102, %109
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %14 to i32
  %20 = mul nuw nsw i32 %19, 66
  %21 = zext i8 %16 to i32
  %22 = mul nuw nsw i32 %21, 129
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 25
  %25 = add nuw nsw i32 %20, 4224
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 3
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = load i8, i8* %30, align 1
  %33 = getelementptr inbounds i8, i8* %11, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %11, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %32 to i32
  %38 = mul nuw nsw i32 %37, 66
  %39 = zext i8 %34 to i32
  %40 = mul nuw nsw i32 %39, 129
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 25
  %43 = add nuw nsw i32 %38, 4224
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 6
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = load i8, i8* %53, align 1
  %58 = getelementptr inbounds i8, i8* %53, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %57 to i32
  %63 = mul nuw nsw i32 %62, 66
  %64 = zext i8 %59 to i32
  %65 = mul nuw nsw i32 %64, 129
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 25
  %68 = add nuw nsw i32 %63, 4224
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %102

10:                                               ; preds = %5, %10
  %11 = phi i8* [ %96, %10 ], [ %0, %5 ]
  %12 = phi i8* [ %98, %10 ], [ %2, %5 ]
  %13 = phi i8* [ %99, %10 ], [ %3, %5 ]
  %14 = phi i8* [ %97, %10 ], [ %7, %5 ]
  %15 = phi i32 [ %100, %10 ], [ 0, %5 ]
  %16 = getelementptr inbounds i8, i8* %11, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %14, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = add nuw nsw i32 %18, 1
  %23 = add nuw nsw i32 %22, %21
  %24 = lshr i32 %23, 1
  %25 = getelementptr inbounds i8, i8* %11, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %14, i64 5
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = add nuw nsw i32 %24, 1
  %35 = add nuw nsw i32 %34, %33
  %36 = lshr i32 %35, 1
  %37 = getelementptr inbounds i8, i8* %11, i64 1
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %14, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %39, 1
  %44 = add nuw nsw i32 %43, %42
  %45 = lshr i32 %44, 1
  %46 = getelementptr inbounds i8, i8* %11, i64 4
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = getelementptr inbounds i8, i8* %14, i64 4
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %48, 1
  %53 = add nuw nsw i32 %52, %51
  %54 = lshr i32 %53, 1
  %55 = add nuw nsw i32 %45, 1
  %56 = add nuw nsw i32 %55, %54
  %57 = lshr i32 %56, 1
  %58 = load i8, i8* %11, align 1
  %59 = zext i8 %58 to i32
  %60 = load i8, i8* %14, align 1
  %61 = zext i8 %60 to i32
  %62 = add nuw nsw i32 %59, 1
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 1
  %65 = getelementptr inbounds i8, i8* %11, i64 3
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %14, i64 3
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = add nuw nsw i32 %64, 1
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 1
  %77 = and i32 %36, 255
  %78 = mul nuw nsw i32 %77, 112
  %79 = and i32 %57, 255
  %80 = mul nsw i32 %79, -74
  %81 = and i32 %76, 255
  %82 = mul nsw i32 %81, -38
  %83 = or i32 %78, 32768
  %84 = add nsw i32 %83, %80
  %85 = add nsw i32 %84, %82
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %12, align 1
  %88 = mul nuw nsw i32 %81, 112
  %89 = mul nsw i32 %79, -94
  %90 = mul nsw i32 %77, -18
  %91 = or i32 %88, 32768
  %92 = add nsw i32 %89, %90
  %93 = add nsw i32 %92, %91
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %13, align 1
  %96 = getelementptr inbounds i8, i8* %11, i64 6
  %97 = getelementptr inbounds i8, i8* %14, i64 6
  %98 = getelementptr inbounds i8, i8* %12, i64 1
  %99 = getelementptr inbounds i8, i8* %13, i64 1
  %100 = add nuw nsw i32 %15, 2
  %101 = icmp slt i32 %100, %8
  br i1 %101, label %10, label %102

102:                                              ; preds = %10, %5
  %103 = phi i8* [ %7, %5 ], [ %97, %10 ]
  %104 = phi i8* [ %3, %5 ], [ %99, %10 ]
  %105 = phi i8* [ %2, %5 ], [ %98, %10 ]
  %106 = phi i8* [ %0, %5 ], [ %96, %10 ]
  %107 = and i32 %4, 1
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %154, label %109

109:                                              ; preds = %102
  %110 = getelementptr inbounds i8, i8* %106, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds i8, i8* %103, i64 2
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = getelementptr inbounds i8, i8* %106, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %103, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = add nuw nsw i32 %121, 1
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 1
  %128 = load i8, i8* %106, align 1
  %129 = zext i8 %128 to i32
  %130 = load i8, i8* %103, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %129, 1
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 1
  %135 = and i32 %118, 255
  %136 = mul nuw nsw i32 %135, 112
  %137 = and i32 %127, 255
  %138 = mul nsw i32 %137, -74
  %139 = and i32 %134, 255
  %140 = mul nsw i32 %139, -38
  %141 = or i32 %136, 32768
  %142 = add nsw i32 %141, %138
  %143 = add nsw i32 %142, %140
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %105, align 1
  %146 = mul nuw nsw i32 %139, 112
  %147 = mul nsw i32 %137, -94
  %148 = mul nsw i32 %135, -18
  %149 = or i32 %146, 32768
  %150 = add nsw i32 %147, %148
  %151 = add nsw i32 %150, %149
  %152 = lshr i32 %151, 8
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %104, align 1
  br label %154

154:                                              ; preds = %102, %109
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToYJRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = load i8, i8* %11, align 1
  %19 = zext i8 %15 to i32
  %20 = mul nuw nsw i32 %19, 77
  %21 = zext i8 %17 to i32
  %22 = mul nuw nsw i32 %21, 150
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 29
  %25 = add nuw nsw i32 %20, 128
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 4
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 6
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 5
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %30, align 1
  %37 = zext i8 %33 to i32
  %38 = mul nuw nsw i32 %37, 77
  %39 = zext i8 %35 to i32
  %40 = mul nuw nsw i32 %39, 150
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 29
  %43 = add nuw nsw i32 %38, 128
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 8
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %53, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = load i8, i8* %53, align 1
  %62 = zext i8 %58 to i32
  %63 = mul nuw nsw i32 %62, 77
  %64 = zext i8 %60 to i32
  %65 = mul nuw nsw i32 %64, 150
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 29
  %68 = add nuw nsw i32 %63, 128
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToUVJRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %245

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %147, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = shl nuw nsw i64 %19, 3
  %24 = add nsw i64 %23, %6
  %25 = add nsw i64 %24, 7
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = or i64 %23, 7
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = icmp ugt i8* %22, %2
  %30 = icmp ugt i8* %21, %3
  %31 = and i1 %29, %30
  %32 = icmp ugt i8* %26, %2
  %33 = icmp ult i8* %7, %21
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %21, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %26, %3
  %41 = icmp ult i8* %7, %22
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  %44 = icmp ugt i8* %28, %3
  %45 = icmp ugt i8* %22, %0
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  br i1 %47, label %147, label %48

48:                                               ; preds = %16
  %49 = and i64 %14, 15
  %50 = icmp eq i64 %49, 0
  %51 = select i1 %50, i64 16, i64 %49
  %52 = sub nsw i64 %14, %51
  %53 = shl nsw i64 %52, 3
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = getelementptr i8, i8* %2, i64 %52
  %56 = getelementptr i8, i8* %3, i64 %52
  %57 = shl nsw i64 %52, 3
  %58 = getelementptr i8, i8* %7, i64 %57
  %59 = trunc i64 %52 to i32
  %60 = shl i32 %59, 1
  br label %61

61:                                               ; preds = %61, %48
  %62 = phi i64 [ 0, %48 ], [ %145, %61 ]
  %63 = shl i64 %62, 3
  %64 = getelementptr i8, i8* %0, i64 %63
  %65 = getelementptr i8, i8* %2, i64 %62
  %66 = getelementptr i8, i8* %3, i64 %62
  %67 = shl i64 %62, 3
  %68 = getelementptr i8, i8* %7, i64 %67
  %69 = bitcast i8* %64 to <128 x i8>*
  %70 = load <128 x i8>, <128 x i8>* %69, align 1
  %71 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %72 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %73 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %74 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %75 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %76 = shufflevector <128 x i8> %70, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %77 = zext <16 x i8> %71 to <16 x i32>
  %78 = bitcast i8* %68 to <128 x i8>*
  %79 = load <128 x i8>, <128 x i8>* %78, align 1
  %80 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %81 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %82 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %83 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %84 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %85 = shufflevector <128 x i8> %79, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %86 = zext <16 x i8> %80 to <16 x i32>
  %87 = add nuw nsw <16 x i32> %77, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = add nuw nsw <16 x i32> %87, %86
  %89 = lshr <16 x i32> %88, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %90 = zext <16 x i8> %74 to <16 x i32>
  %91 = zext <16 x i8> %83 to <16 x i32>
  %92 = add nuw nsw <16 x i32> %90, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = add nuw nsw <16 x i32> %92, %91
  %94 = lshr <16 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = add nuw nsw <16 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = add nuw nsw <16 x i32> %95, %94
  %97 = lshr <16 x i32> %96, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = zext <16 x i8> %72 to <16 x i32>
  %99 = zext <16 x i8> %81 to <16 x i32>
  %100 = add nuw nsw <16 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <16 x i32> %100, %99
  %102 = lshr <16 x i32> %101, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = zext <16 x i8> %75 to <16 x i32>
  %104 = zext <16 x i8> %84 to <16 x i32>
  %105 = add nuw nsw <16 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %106 = add nuw nsw <16 x i32> %105, %104
  %107 = lshr <16 x i32> %106, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = add nuw nsw <16 x i32> %102, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %109 = add nuw nsw <16 x i32> %108, %107
  %110 = lshr <16 x i32> %109, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = zext <16 x i8> %73 to <16 x i32>
  %112 = zext <16 x i8> %82 to <16 x i32>
  %113 = add nuw nsw <16 x i32> %111, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = add nuw nsw <16 x i32> %113, %112
  %115 = lshr <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = zext <16 x i8> %76 to <16 x i32>
  %117 = zext <16 x i8> %85 to <16 x i32>
  %118 = add nuw nsw <16 x i32> %116, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = add nuw nsw <16 x i32> %118, %117
  %120 = lshr <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %121 = add nuw nsw <16 x i32> %115, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %122 = add nuw nsw <16 x i32> %121, %120
  %123 = lshr <16 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = and <16 x i32> %97, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %125 = mul nuw nsw <16 x i32> %124, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %126 = and <16 x i32> %110, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = mul nsw <16 x i32> %126, <i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84>
  %128 = and <16 x i32> %123, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = mul nsw <16 x i32> %128, <i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43>
  %130 = add nuw nsw <16 x i32> %125, <i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896>
  %131 = add nsw <16 x i32> %130, %127
  %132 = add nsw <16 x i32> %131, %129
  %133 = lshr <16 x i32> %132, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %134 = trunc <16 x i32> %133 to <16 x i8>
  %135 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %135, align 1, !alias.scope !117, !noalias !120
  %136 = mul nuw nsw <16 x i32> %128, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %137 = mul nsw <16 x i32> %126, <i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107>
  %138 = mul nsw <16 x i32> %124, <i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20>
  %139 = add nsw <16 x i32> %138, <i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896>
  %140 = add nsw <16 x i32> %139, %137
  %141 = add nuw nsw <16 x i32> %140, %136
  %142 = lshr <16 x i32> %141, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %143 = trunc <16 x i32> %142 to <16 x i8>
  %144 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %143, <16 x i8>* %144, align 1, !alias.scope !124, !noalias !125
  %145 = add i64 %62, 16
  %146 = icmp eq i64 %145, %52
  br i1 %146, label %147, label %61, !llvm.loop !126

147:                                              ; preds = %61, %16, %10
  %148 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %54, %61 ]
  %149 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %55, %61 ]
  %150 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %56, %61 ]
  %151 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %58, %61 ]
  %152 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %60, %61 ]
  br label %153

153:                                              ; preds = %147, %153
  %154 = phi i8* [ %239, %153 ], [ %148, %147 ]
  %155 = phi i8* [ %241, %153 ], [ %149, %147 ]
  %156 = phi i8* [ %242, %153 ], [ %150, %147 ]
  %157 = phi i8* [ %240, %153 ], [ %151, %147 ]
  %158 = phi i32 [ %243, %153 ], [ %152, %147 ]
  %159 = load i8, i8* %154, align 1
  %160 = zext i8 %159 to i32
  %161 = load i8, i8* %157, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %160, 1
  %164 = add nuw nsw i32 %163, %162
  %165 = lshr i32 %164, 1
  %166 = getelementptr inbounds i8, i8* %154, i64 4
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i32
  %169 = getelementptr inbounds i8, i8* %157, i64 4
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = add nuw nsw i32 %168, 1
  %173 = add nuw nsw i32 %172, %171
  %174 = lshr i32 %173, 1
  %175 = add nuw nsw i32 %165, 1
  %176 = add nuw nsw i32 %175, %174
  %177 = lshr i32 %176, 1
  %178 = getelementptr inbounds i8, i8* %154, i64 1
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = getelementptr inbounds i8, i8* %157, i64 1
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = add nuw nsw i32 %180, 1
  %185 = add nuw nsw i32 %184, %183
  %186 = lshr i32 %185, 1
  %187 = getelementptr inbounds i8, i8* %154, i64 5
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = getelementptr inbounds i8, i8* %157, i64 5
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = add nuw nsw i32 %189, 1
  %194 = add nuw nsw i32 %193, %192
  %195 = lshr i32 %194, 1
  %196 = add nuw nsw i32 %186, 1
  %197 = add nuw nsw i32 %196, %195
  %198 = lshr i32 %197, 1
  %199 = getelementptr inbounds i8, i8* %154, i64 2
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = getelementptr inbounds i8, i8* %157, i64 2
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = add nuw nsw i32 %201, 1
  %206 = add nuw nsw i32 %205, %204
  %207 = lshr i32 %206, 1
  %208 = getelementptr inbounds i8, i8* %154, i64 6
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = getelementptr inbounds i8, i8* %157, i64 6
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = add nuw nsw i32 %210, 1
  %215 = add nuw nsw i32 %214, %213
  %216 = lshr i32 %215, 1
  %217 = add nuw nsw i32 %207, 1
  %218 = add nuw nsw i32 %217, %216
  %219 = lshr i32 %218, 1
  %220 = and i32 %177, 255
  %221 = mul nuw nsw i32 %220, 127
  %222 = and i32 %198, 255
  %223 = mul nsw i32 %222, -84
  %224 = and i32 %219, 255
  %225 = mul nsw i32 %224, -43
  %226 = add nuw nsw i32 %221, 32896
  %227 = add nsw i32 %226, %223
  %228 = add nsw i32 %227, %225
  %229 = lshr i32 %228, 8
  %230 = trunc i32 %229 to i8
  store i8 %230, i8* %155, align 1
  %231 = mul nuw nsw i32 %224, 127
  %232 = mul nsw i32 %222, -107
  %233 = mul nsw i32 %220, -20
  %234 = add nsw i32 %233, 32896
  %235 = add nsw i32 %234, %232
  %236 = add nuw nsw i32 %235, %231
  %237 = lshr i32 %236, 8
  %238 = trunc i32 %237 to i8
  store i8 %238, i8* %156, align 1
  %239 = getelementptr inbounds i8, i8* %154, i64 8
  %240 = getelementptr inbounds i8, i8* %157, i64 8
  %241 = getelementptr inbounds i8, i8* %155, i64 1
  %242 = getelementptr inbounds i8, i8* %156, i64 1
  %243 = add nuw nsw i32 %158, 2
  %244 = icmp slt i32 %243, %8
  br i1 %244, label %153, label %245, !llvm.loop !127

245:                                              ; preds = %153, %5
  %246 = phi i8* [ %7, %5 ], [ %240, %153 ]
  %247 = phi i8* [ %3, %5 ], [ %242, %153 ]
  %248 = phi i8* [ %2, %5 ], [ %241, %153 ]
  %249 = phi i8* [ %0, %5 ], [ %239, %153 ]
  %250 = and i32 %4, 1
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %297, label %252

252:                                              ; preds = %245
  %253 = load i8, i8* %249, align 1
  %254 = zext i8 %253 to i32
  %255 = load i8, i8* %246, align 1
  %256 = zext i8 %255 to i32
  %257 = add nuw nsw i32 %254, 1
  %258 = add nuw nsw i32 %257, %256
  %259 = lshr i32 %258, 1
  %260 = getelementptr inbounds i8, i8* %249, i64 1
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i32
  %263 = getelementptr inbounds i8, i8* %246, i64 1
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = add nuw nsw i32 %262, 1
  %267 = add nuw nsw i32 %266, %265
  %268 = lshr i32 %267, 1
  %269 = getelementptr inbounds i8, i8* %249, i64 2
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = getelementptr inbounds i8, i8* %246, i64 2
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = add nuw nsw i32 %271, 1
  %276 = add nuw nsw i32 %275, %274
  %277 = lshr i32 %276, 1
  %278 = and i32 %259, 255
  %279 = mul nuw nsw i32 %278, 127
  %280 = and i32 %268, 255
  %281 = mul nsw i32 %280, -84
  %282 = and i32 %277, 255
  %283 = mul nsw i32 %282, -43
  %284 = add nuw nsw i32 %279, 32896
  %285 = add nsw i32 %284, %281
  %286 = add nsw i32 %285, %283
  %287 = lshr i32 %286, 8
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %248, align 1
  %289 = mul nuw nsw i32 %282, 127
  %290 = mul nsw i32 %280, -107
  %291 = mul nsw i32 %278, -20
  %292 = add nsw i32 %291, 32896
  %293 = add nsw i32 %292, %290
  %294 = add nuw nsw i32 %293, %289
  %295 = lshr i32 %294, 8
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %247, align 1
  br label %297

297:                                              ; preds = %245, %252
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGBAToYJRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %75

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %53, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %49, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %50, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %51, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 3
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %15 to i32
  %21 = mul nuw nsw i32 %20, 77
  %22 = zext i8 %17 to i32
  %23 = mul nuw nsw i32 %22, 150
  %24 = zext i8 %19 to i32
  %25 = mul nuw nsw i32 %24, 29
  %26 = add nuw nsw i32 %21, 128
  %27 = add nuw nsw i32 %26, %23
  %28 = add nuw nsw i32 %27, %25
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %12, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 7
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 6
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %11, i64 5
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %33 to i32
  %39 = mul nuw nsw i32 %38, 77
  %40 = zext i8 %35 to i32
  %41 = mul nuw nsw i32 %40, 150
  %42 = zext i8 %37 to i32
  %43 = mul nuw nsw i32 %42, 29
  %44 = add nuw nsw i32 %39, 128
  %45 = add nuw nsw i32 %44, %41
  %46 = add nuw nsw i32 %45, %43
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %31, align 1
  %49 = getelementptr inbounds i8, i8* %11, i64 8
  %50 = getelementptr inbounds i8, i8* %12, i64 2
  %51 = add i32 %13, -2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %10

53:                                               ; preds = %10, %5
  %54 = phi i8* [ %0, %5 ], [ %49, %10 ]
  %55 = phi i8* [ %1, %5 ], [ %50, %10 ]
  %56 = icmp eq i32 %6, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds i8, i8* %54, i64 3
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %54, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %54, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %59 to i32
  %65 = mul nuw nsw i32 %64, 77
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 150
  %68 = zext i8 %63 to i32
  %69 = mul nuw nsw i32 %68, 29
  %70 = add nuw nsw i32 %65, 128
  %71 = add nuw nsw i32 %70, %67
  %72 = add nuw nsw i32 %71, %69
  %73 = lshr i32 %72, 8
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %55, align 1
  br label %75

75:                                               ; preds = %57, %53, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGBAToUVJRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %252

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %152, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = add nsw i64 %6, 1
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = shl nuw nsw i64 %19, 3
  %26 = add nsw i64 %25, %6
  %27 = add nsw i64 %26, 8
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 1
  %30 = add nuw nsw i64 %25, 8
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = icmp ugt i8* %22, %2
  %33 = icmp ugt i8* %21, %3
  %34 = and i1 %32, %33
  %35 = icmp ugt i8* %28, %2
  %36 = icmp ult i8* %24, %21
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  %39 = icmp ugt i8* %31, %2
  %40 = icmp ult i8* %29, %21
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = icmp ugt i8* %28, %3
  %44 = icmp ult i8* %24, %22
  %45 = and i1 %43, %44
  %46 = or i1 %42, %45
  %47 = icmp ugt i8* %31, %3
  %48 = icmp ult i8* %29, %22
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  br i1 %50, label %152, label %51

51:                                               ; preds = %16
  %52 = and i64 %14, 15
  %53 = icmp eq i64 %52, 0
  %54 = select i1 %53, i64 16, i64 %52
  %55 = sub nsw i64 %14, %54
  %56 = shl nsw i64 %55, 3
  %57 = getelementptr i8, i8* %0, i64 %56
  %58 = getelementptr i8, i8* %2, i64 %55
  %59 = getelementptr i8, i8* %3, i64 %55
  %60 = shl nsw i64 %55, 3
  %61 = getelementptr i8, i8* %7, i64 %60
  %62 = trunc i64 %55 to i32
  %63 = shl i32 %62, 1
  %64 = getelementptr i8, i8* %0, i64 1
  %65 = getelementptr i8, i8* %7, i64 1
  br label %66

66:                                               ; preds = %66, %51
  %67 = phi i64 [ 0, %51 ], [ %150, %66 ]
  %68 = shl i64 %67, 3
  %69 = getelementptr i8, i8* %2, i64 %67
  %70 = getelementptr i8, i8* %3, i64 %67
  %71 = shl i64 %67, 3
  %72 = getelementptr inbounds i8, i8* %64, i64 %68
  %73 = bitcast i8* %72 to <128 x i8>*
  %74 = load <128 x i8>, <128 x i8>* %73, align 1
  %75 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %76 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %77 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %78 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %79 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %80 = shufflevector <128 x i8> %74, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %81 = zext <16 x i8> %75 to <16 x i32>
  %82 = getelementptr inbounds i8, i8* %65, i64 %71
  %83 = bitcast i8* %82 to <128 x i8>*
  %84 = load <128 x i8>, <128 x i8>* %83, align 1
  %85 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %86 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %87 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %88 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %89 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %90 = shufflevector <128 x i8> %84, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %91 = zext <16 x i8> %85 to <16 x i32>
  %92 = add nuw nsw <16 x i32> %81, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = add nuw nsw <16 x i32> %92, %91
  %94 = lshr <16 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = zext <16 x i8> %78 to <16 x i32>
  %96 = zext <16 x i8> %88 to <16 x i32>
  %97 = add nuw nsw <16 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = add nuw nsw <16 x i32> %97, %96
  %99 = lshr <16 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nuw nsw <16 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <16 x i32> %100, %99
  %102 = lshr <16 x i32> %101, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = zext <16 x i8> %76 to <16 x i32>
  %104 = zext <16 x i8> %86 to <16 x i32>
  %105 = add nuw nsw <16 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %106 = add nuw nsw <16 x i32> %105, %104
  %107 = lshr <16 x i32> %106, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = zext <16 x i8> %79 to <16 x i32>
  %109 = zext <16 x i8> %89 to <16 x i32>
  %110 = add nuw nsw <16 x i32> %108, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = add nuw nsw <16 x i32> %110, %109
  %112 = lshr <16 x i32> %111, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %113 = add nuw nsw <16 x i32> %107, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %114 = add nuw nsw <16 x i32> %113, %112
  %115 = lshr <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = zext <16 x i8> %77 to <16 x i32>
  %117 = zext <16 x i8> %87 to <16 x i32>
  %118 = add nuw nsw <16 x i32> %116, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = add nuw nsw <16 x i32> %118, %117
  %120 = lshr <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %121 = zext <16 x i8> %80 to <16 x i32>
  %122 = zext <16 x i8> %90 to <16 x i32>
  %123 = add nuw nsw <16 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = add nuw nsw <16 x i32> %123, %122
  %125 = lshr <16 x i32> %124, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %126 = add nuw nsw <16 x i32> %120, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %127 = add nuw nsw <16 x i32> %126, %125
  %128 = lshr <16 x i32> %127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %129 = and <16 x i32> %102, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %130 = mul nuw nsw <16 x i32> %129, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %131 = and <16 x i32> %115, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = mul nsw <16 x i32> %131, <i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84, i32 -84>
  %133 = and <16 x i32> %128, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %134 = mul nsw <16 x i32> %133, <i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43, i32 -43>
  %135 = add nuw nsw <16 x i32> %130, <i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896>
  %136 = add nsw <16 x i32> %135, %132
  %137 = add nsw <16 x i32> %136, %134
  %138 = lshr <16 x i32> %137, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %139 = trunc <16 x i32> %138 to <16 x i8>
  %140 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %139, <16 x i8>* %140, align 1, !alias.scope !128, !noalias !131
  %141 = mul nuw nsw <16 x i32> %133, <i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127, i32 127>
  %142 = mul nsw <16 x i32> %131, <i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107, i32 -107>
  %143 = mul nsw <16 x i32> %129, <i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20>
  %144 = add nsw <16 x i32> %143, <i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896, i32 32896>
  %145 = add nsw <16 x i32> %144, %142
  %146 = add nuw nsw <16 x i32> %145, %141
  %147 = lshr <16 x i32> %146, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %148 = trunc <16 x i32> %147 to <16 x i8>
  %149 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %149, align 1, !alias.scope !135, !noalias !136
  %150 = add i64 %67, 16
  %151 = icmp eq i64 %150, %55
  br i1 %151, label %152, label %66, !llvm.loop !137

152:                                              ; preds = %66, %16, %10
  %153 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %57, %66 ]
  %154 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %58, %66 ]
  %155 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %59, %66 ]
  %156 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %61, %66 ]
  %157 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %63, %66 ]
  br label %158

158:                                              ; preds = %152, %158
  %159 = phi i8* [ %246, %158 ], [ %153, %152 ]
  %160 = phi i8* [ %248, %158 ], [ %154, %152 ]
  %161 = phi i8* [ %249, %158 ], [ %155, %152 ]
  %162 = phi i8* [ %247, %158 ], [ %156, %152 ]
  %163 = phi i32 [ %250, %158 ], [ %157, %152 ]
  %164 = getelementptr inbounds i8, i8* %159, i64 1
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = getelementptr inbounds i8, i8* %162, i64 1
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = add nuw nsw i32 %166, 1
  %171 = add nuw nsw i32 %170, %169
  %172 = lshr i32 %171, 1
  %173 = getelementptr inbounds i8, i8* %159, i64 5
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = getelementptr inbounds i8, i8* %162, i64 5
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = add nuw nsw i32 %175, 1
  %180 = add nuw nsw i32 %179, %178
  %181 = lshr i32 %180, 1
  %182 = add nuw nsw i32 %172, 1
  %183 = add nuw nsw i32 %182, %181
  %184 = lshr i32 %183, 1
  %185 = getelementptr inbounds i8, i8* %159, i64 2
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = getelementptr inbounds i8, i8* %162, i64 2
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nuw nsw i32 %187, 1
  %192 = add nuw nsw i32 %191, %190
  %193 = lshr i32 %192, 1
  %194 = getelementptr inbounds i8, i8* %159, i64 6
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = getelementptr inbounds i8, i8* %162, i64 6
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = add nuw nsw i32 %196, 1
  %201 = add nuw nsw i32 %200, %199
  %202 = lshr i32 %201, 1
  %203 = add nuw nsw i32 %193, 1
  %204 = add nuw nsw i32 %203, %202
  %205 = lshr i32 %204, 1
  %206 = getelementptr inbounds i8, i8* %159, i64 3
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = getelementptr inbounds i8, i8* %162, i64 3
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = add nuw nsw i32 %208, 1
  %213 = add nuw nsw i32 %212, %211
  %214 = lshr i32 %213, 1
  %215 = getelementptr inbounds i8, i8* %159, i64 7
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = getelementptr inbounds i8, i8* %162, i64 7
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nuw nsw i32 %217, 1
  %222 = add nuw nsw i32 %221, %220
  %223 = lshr i32 %222, 1
  %224 = add nuw nsw i32 %214, 1
  %225 = add nuw nsw i32 %224, %223
  %226 = lshr i32 %225, 1
  %227 = and i32 %184, 255
  %228 = mul nuw nsw i32 %227, 127
  %229 = and i32 %205, 255
  %230 = mul nsw i32 %229, -84
  %231 = and i32 %226, 255
  %232 = mul nsw i32 %231, -43
  %233 = add nuw nsw i32 %228, 32896
  %234 = add nsw i32 %233, %230
  %235 = add nsw i32 %234, %232
  %236 = lshr i32 %235, 8
  %237 = trunc i32 %236 to i8
  store i8 %237, i8* %160, align 1
  %238 = mul nuw nsw i32 %231, 127
  %239 = mul nsw i32 %229, -107
  %240 = mul nsw i32 %227, -20
  %241 = add nsw i32 %240, 32896
  %242 = add nsw i32 %241, %239
  %243 = add nuw nsw i32 %242, %238
  %244 = lshr i32 %243, 8
  %245 = trunc i32 %244 to i8
  store i8 %245, i8* %161, align 1
  %246 = getelementptr inbounds i8, i8* %159, i64 8
  %247 = getelementptr inbounds i8, i8* %162, i64 8
  %248 = getelementptr inbounds i8, i8* %160, i64 1
  %249 = getelementptr inbounds i8, i8* %161, i64 1
  %250 = add nuw nsw i32 %163, 2
  %251 = icmp slt i32 %250, %8
  br i1 %251, label %158, label %252, !llvm.loop !138

252:                                              ; preds = %158, %5
  %253 = phi i8* [ %7, %5 ], [ %247, %158 ]
  %254 = phi i8* [ %3, %5 ], [ %249, %158 ]
  %255 = phi i8* [ %2, %5 ], [ %248, %158 ]
  %256 = phi i8* [ %0, %5 ], [ %246, %158 ]
  %257 = and i32 %4, 1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %306, label %259

259:                                              ; preds = %252
  %260 = getelementptr inbounds i8, i8* %256, i64 1
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i32
  %263 = getelementptr inbounds i8, i8* %253, i64 1
  %264 = load i8, i8* %263, align 1
  %265 = zext i8 %264 to i32
  %266 = add nuw nsw i32 %262, 1
  %267 = add nuw nsw i32 %266, %265
  %268 = lshr i32 %267, 1
  %269 = getelementptr inbounds i8, i8* %256, i64 2
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = getelementptr inbounds i8, i8* %253, i64 2
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = add nuw nsw i32 %271, 1
  %276 = add nuw nsw i32 %275, %274
  %277 = lshr i32 %276, 1
  %278 = getelementptr inbounds i8, i8* %256, i64 3
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = getelementptr inbounds i8, i8* %253, i64 3
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = add nuw nsw i32 %280, 1
  %285 = add nuw nsw i32 %284, %283
  %286 = lshr i32 %285, 1
  %287 = and i32 %268, 255
  %288 = mul nuw nsw i32 %287, 127
  %289 = and i32 %277, 255
  %290 = mul nsw i32 %289, -84
  %291 = and i32 %286, 255
  %292 = mul nsw i32 %291, -43
  %293 = add nuw nsw i32 %288, 32896
  %294 = add nsw i32 %293, %290
  %295 = add nsw i32 %294, %292
  %296 = lshr i32 %295, 8
  %297 = trunc i32 %296 to i8
  store i8 %297, i8* %255, align 1
  %298 = mul nuw nsw i32 %291, 127
  %299 = mul nsw i32 %289, -107
  %300 = mul nsw i32 %287, -20
  %301 = add nsw i32 %300, 32896
  %302 = add nsw i32 %301, %299
  %303 = add nuw nsw i32 %302, %298
  %304 = lshr i32 %303, 8
  %305 = trunc i32 %304 to i8
  store i8 %305, i8* %254, align 1
  br label %306

306:                                              ; preds = %252, %259
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB24ToYJRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = getelementptr inbounds i8, i8* %11, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = load i8, i8* %11, align 1
  %19 = zext i8 %15 to i32
  %20 = mul nuw nsw i32 %19, 77
  %21 = zext i8 %17 to i32
  %22 = mul nuw nsw i32 %21, 150
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 29
  %25 = add nuw nsw i32 %20, 128
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 3
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = getelementptr inbounds i8, i8* %11, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %11, i64 4
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %30, align 1
  %37 = zext i8 %33 to i32
  %38 = mul nuw nsw i32 %37, 77
  %39 = zext i8 %35 to i32
  %40 = mul nuw nsw i32 %39, 150
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 29
  %43 = add nuw nsw i32 %38, 128
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 6
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds i8, i8* %53, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = load i8, i8* %53, align 1
  %62 = zext i8 %58 to i32
  %63 = mul nuw nsw i32 %62, 77
  %64 = zext i8 %60 to i32
  %65 = mul nuw nsw i32 %64, 150
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 29
  %68 = add nuw nsw i32 %63, 128
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB24ToUVJRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %102

10:                                               ; preds = %5, %10
  %11 = phi i8* [ %96, %10 ], [ %0, %5 ]
  %12 = phi i8* [ %98, %10 ], [ %2, %5 ]
  %13 = phi i8* [ %99, %10 ], [ %3, %5 ]
  %14 = phi i8* [ %97, %10 ], [ %7, %5 ]
  %15 = phi i32 [ %100, %10 ], [ 0, %5 ]
  %16 = load i8, i8* %11, align 1
  %17 = zext i8 %16 to i32
  %18 = load i8, i8* %14, align 1
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %17, 1
  %21 = add nuw nsw i32 %20, %19
  %22 = lshr i32 %21, 1
  %23 = getelementptr inbounds i8, i8* %11, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %14, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %25, 1
  %30 = add nuw nsw i32 %29, %28
  %31 = lshr i32 %30, 1
  %32 = add nuw nsw i32 %22, 1
  %33 = add nuw nsw i32 %32, %31
  %34 = lshr i32 %33, 1
  %35 = getelementptr inbounds i8, i8* %11, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %14, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %37, 1
  %42 = add nuw nsw i32 %41, %40
  %43 = lshr i32 %42, 1
  %44 = getelementptr inbounds i8, i8* %11, i64 4
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %14, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = add nuw nsw i32 %46, 1
  %51 = add nuw nsw i32 %50, %49
  %52 = lshr i32 %51, 1
  %53 = add nuw nsw i32 %43, 1
  %54 = add nuw nsw i32 %53, %52
  %55 = lshr i32 %54, 1
  %56 = getelementptr inbounds i8, i8* %11, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %14, i64 2
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = add nuw nsw i32 %58, 1
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 1
  %65 = getelementptr inbounds i8, i8* %11, i64 5
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %14, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = add nuw nsw i32 %64, 1
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 1
  %77 = and i32 %34, 255
  %78 = mul nuw nsw i32 %77, 127
  %79 = and i32 %55, 255
  %80 = mul nsw i32 %79, -84
  %81 = and i32 %76, 255
  %82 = mul nsw i32 %81, -43
  %83 = add nuw nsw i32 %78, 32896
  %84 = add nsw i32 %83, %80
  %85 = add nsw i32 %84, %82
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %12, align 1
  %88 = mul nuw nsw i32 %81, 127
  %89 = mul nsw i32 %79, -107
  %90 = mul nsw i32 %77, -20
  %91 = add nsw i32 %90, 32896
  %92 = add nsw i32 %91, %89
  %93 = add nuw nsw i32 %92, %88
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %13, align 1
  %96 = getelementptr inbounds i8, i8* %11, i64 6
  %97 = getelementptr inbounds i8, i8* %14, i64 6
  %98 = getelementptr inbounds i8, i8* %12, i64 1
  %99 = getelementptr inbounds i8, i8* %13, i64 1
  %100 = add nuw nsw i32 %15, 2
  %101 = icmp slt i32 %100, %8
  br i1 %101, label %10, label %102

102:                                              ; preds = %10, %5
  %103 = phi i8* [ %7, %5 ], [ %97, %10 ]
  %104 = phi i8* [ %3, %5 ], [ %99, %10 ]
  %105 = phi i8* [ %2, %5 ], [ %98, %10 ]
  %106 = phi i8* [ %0, %5 ], [ %96, %10 ]
  %107 = and i32 %4, 1
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %154, label %109

109:                                              ; preds = %102
  %110 = load i8, i8* %106, align 1
  %111 = zext i8 %110 to i32
  %112 = load i8, i8* %103, align 1
  %113 = zext i8 %112 to i32
  %114 = add nuw nsw i32 %111, 1
  %115 = add nuw nsw i32 %114, %113
  %116 = lshr i32 %115, 1
  %117 = getelementptr inbounds i8, i8* %106, i64 1
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds i8, i8* %103, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = add nuw nsw i32 %119, 1
  %124 = add nuw nsw i32 %123, %122
  %125 = lshr i32 %124, 1
  %126 = getelementptr inbounds i8, i8* %106, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = getelementptr inbounds i8, i8* %103, i64 2
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %128, 1
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 1
  %135 = and i32 %116, 255
  %136 = mul nuw nsw i32 %135, 127
  %137 = and i32 %125, 255
  %138 = mul nsw i32 %137, -84
  %139 = and i32 %134, 255
  %140 = mul nsw i32 %139, -43
  %141 = add nuw nsw i32 %136, 32896
  %142 = add nsw i32 %141, %138
  %143 = add nsw i32 %142, %140
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %105, align 1
  %146 = mul nuw nsw i32 %139, 127
  %147 = mul nsw i32 %137, -107
  %148 = mul nsw i32 %135, -20
  %149 = add nsw i32 %148, 32896
  %150 = add nsw i32 %149, %147
  %151 = add nuw nsw i32 %150, %146
  %152 = lshr i32 %151, 8
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %104, align 1
  br label %154

154:                                              ; preds = %102, %109
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToYJRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %73

5:                                                ; preds = %3
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %52, label %8

8:                                                ; preds = %5
  %9 = sub i32 %2, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i8* [ %0, %8 ], [ %48, %10 ]
  %12 = phi i8* [ %1, %8 ], [ %49, %10 ]
  %13 = phi i32 [ %9, %8 ], [ %50, %10 ]
  %14 = load i8, i8* %11, align 1
  %15 = getelementptr inbounds i8, i8* %11, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %14 to i32
  %20 = mul nuw nsw i32 %19, 77
  %21 = zext i8 %16 to i32
  %22 = mul nuw nsw i32 %21, 150
  %23 = zext i8 %18 to i32
  %24 = mul nuw nsw i32 %23, 29
  %25 = add nuw nsw i32 %20, 128
  %26 = add nuw nsw i32 %25, %22
  %27 = add nuw nsw i32 %26, %24
  %28 = lshr i32 %27, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %12, align 1
  %30 = getelementptr inbounds i8, i8* %11, i64 3
  %31 = getelementptr inbounds i8, i8* %12, i64 1
  %32 = load i8, i8* %30, align 1
  %33 = getelementptr inbounds i8, i8* %11, i64 4
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %11, i64 5
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %32 to i32
  %38 = mul nuw nsw i32 %37, 77
  %39 = zext i8 %34 to i32
  %40 = mul nuw nsw i32 %39, 150
  %41 = zext i8 %36 to i32
  %42 = mul nuw nsw i32 %41, 29
  %43 = add nuw nsw i32 %38, 128
  %44 = add nuw nsw i32 %43, %40
  %45 = add nuw nsw i32 %44, %42
  %46 = lshr i32 %45, 8
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %31, align 1
  %48 = getelementptr inbounds i8, i8* %11, i64 6
  %49 = getelementptr inbounds i8, i8* %12, i64 2
  %50 = add i32 %13, -2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %10

52:                                               ; preds = %10, %5
  %53 = phi i8* [ %0, %5 ], [ %48, %10 ]
  %54 = phi i8* [ %1, %5 ], [ %49, %10 ]
  %55 = icmp eq i32 %6, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %52
  %57 = load i8, i8* %53, align 1
  %58 = getelementptr inbounds i8, i8* %53, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 2
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %57 to i32
  %63 = mul nuw nsw i32 %62, 77
  %64 = zext i8 %59 to i32
  %65 = mul nuw nsw i32 %64, 150
  %66 = zext i8 %61 to i32
  %67 = mul nuw nsw i32 %66, 29
  %68 = add nuw nsw i32 %63, 128
  %69 = add nuw nsw i32 %68, %65
  %70 = add nuw nsw i32 %69, %67
  %71 = lshr i32 %70, 8
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %54, align 1
  br label %73

73:                                               ; preds = %56, %52, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RAWToUVJRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %102

10:                                               ; preds = %5, %10
  %11 = phi i8* [ %96, %10 ], [ %0, %5 ]
  %12 = phi i8* [ %98, %10 ], [ %2, %5 ]
  %13 = phi i8* [ %99, %10 ], [ %3, %5 ]
  %14 = phi i8* [ %97, %10 ], [ %7, %5 ]
  %15 = phi i32 [ %100, %10 ], [ 0, %5 ]
  %16 = getelementptr inbounds i8, i8* %11, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %14, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = add nuw nsw i32 %18, 1
  %23 = add nuw nsw i32 %22, %21
  %24 = lshr i32 %23, 1
  %25 = getelementptr inbounds i8, i8* %11, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %14, i64 5
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %27, 1
  %32 = add nuw nsw i32 %31, %30
  %33 = lshr i32 %32, 1
  %34 = add nuw nsw i32 %24, 1
  %35 = add nuw nsw i32 %34, %33
  %36 = lshr i32 %35, 1
  %37 = getelementptr inbounds i8, i8* %11, i64 1
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %14, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %39, 1
  %44 = add nuw nsw i32 %43, %42
  %45 = lshr i32 %44, 1
  %46 = getelementptr inbounds i8, i8* %11, i64 4
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = getelementptr inbounds i8, i8* %14, i64 4
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %48, 1
  %53 = add nuw nsw i32 %52, %51
  %54 = lshr i32 %53, 1
  %55 = add nuw nsw i32 %45, 1
  %56 = add nuw nsw i32 %55, %54
  %57 = lshr i32 %56, 1
  %58 = load i8, i8* %11, align 1
  %59 = zext i8 %58 to i32
  %60 = load i8, i8* %14, align 1
  %61 = zext i8 %60 to i32
  %62 = add nuw nsw i32 %59, 1
  %63 = add nuw nsw i32 %62, %61
  %64 = lshr i32 %63, 1
  %65 = getelementptr inbounds i8, i8* %11, i64 3
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %14, i64 3
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %67, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = add nuw nsw i32 %64, 1
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 1
  %77 = and i32 %36, 255
  %78 = mul nuw nsw i32 %77, 127
  %79 = and i32 %57, 255
  %80 = mul nsw i32 %79, -84
  %81 = and i32 %76, 255
  %82 = mul nsw i32 %81, -43
  %83 = add nuw nsw i32 %78, 32896
  %84 = add nsw i32 %83, %80
  %85 = add nsw i32 %84, %82
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i8
  store i8 %87, i8* %12, align 1
  %88 = mul nuw nsw i32 %81, 127
  %89 = mul nsw i32 %79, -107
  %90 = mul nsw i32 %77, -20
  %91 = add nsw i32 %90, 32896
  %92 = add nsw i32 %91, %89
  %93 = add nuw nsw i32 %92, %88
  %94 = lshr i32 %93, 8
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %13, align 1
  %96 = getelementptr inbounds i8, i8* %11, i64 6
  %97 = getelementptr inbounds i8, i8* %14, i64 6
  %98 = getelementptr inbounds i8, i8* %12, i64 1
  %99 = getelementptr inbounds i8, i8* %13, i64 1
  %100 = add nuw nsw i32 %15, 2
  %101 = icmp slt i32 %100, %8
  br i1 %101, label %10, label %102

102:                                              ; preds = %10, %5
  %103 = phi i8* [ %7, %5 ], [ %97, %10 ]
  %104 = phi i8* [ %3, %5 ], [ %99, %10 ]
  %105 = phi i8* [ %2, %5 ], [ %98, %10 ]
  %106 = phi i8* [ %0, %5 ], [ %96, %10 ]
  %107 = and i32 %4, 1
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %154, label %109

109:                                              ; preds = %102
  %110 = getelementptr inbounds i8, i8* %106, i64 2
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = getelementptr inbounds i8, i8* %103, i64 2
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nuw nsw i32 %112, 1
  %117 = add nuw nsw i32 %116, %115
  %118 = lshr i32 %117, 1
  %119 = getelementptr inbounds i8, i8* %106, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %103, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = add nuw nsw i32 %121, 1
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 1
  %128 = load i8, i8* %106, align 1
  %129 = zext i8 %128 to i32
  %130 = load i8, i8* %103, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %129, 1
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 1
  %135 = and i32 %118, 255
  %136 = mul nuw nsw i32 %135, 127
  %137 = and i32 %127, 255
  %138 = mul nsw i32 %137, -84
  %139 = and i32 %134, 255
  %140 = mul nsw i32 %139, -43
  %141 = add nuw nsw i32 %136, 32896
  %142 = add nsw i32 %141, %138
  %143 = add nsw i32 %142, %140
  %144 = lshr i32 %143, 8
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %105, align 1
  %146 = mul nuw nsw i32 %139, 127
  %147 = mul nsw i32 %137, -107
  %148 = mul nsw i32 %135, -20
  %149 = add nsw i32 %148, 32896
  %150 = add nsw i32 %149, %147
  %151 = add nuw nsw i32 %150, %146
  %152 = lshr i32 %151, 8
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %104, align 1
  br label %154

154:                                              ; preds = %102, %109
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB565ToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %106

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %66, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = getelementptr i8, i8* %1, i64 %13
  %15 = shl nuw nsw i64 %12, 1
  %16 = add nuw nsw i64 %15, 2
  %17 = getelementptr i8, i8* %0, i64 %16
  %18 = icmp ugt i8* %17, %1
  %19 = icmp ugt i8* %14, %0
  %20 = and i1 %18, %19
  br i1 %20, label %66, label %21

21:                                               ; preds = %10
  %22 = and i64 %8, 8589934576
  %23 = shl nuw nsw i64 %22, 1
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %1, i64 %22
  %26 = trunc i64 %22 to i32
  br label %27

27:                                               ; preds = %27, %21
  %28 = phi i64 [ 0, %21 ], [ %62, %27 ]
  %29 = shl i64 %28, 1
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %28
  %32 = bitcast i8* %30 to <32 x i8>*
  %33 = load <32 x i8>, <32 x i8>* %32, align 1
  %34 = shufflevector <32 x i8> %33, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %35 = shufflevector <32 x i8> %33, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %36 = lshr <16 x i8> %34, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %37 = shl <16 x i8> %35, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %38 = and <16 x i8> %37, <i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56>
  %39 = or <16 x i8> %38, %36
  %40 = lshr <16 x i8> %35, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %41 = shl <16 x i8> %34, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %42 = lshr <16 x i8> %34, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %43 = and <16 x i8> %42, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %44 = or <16 x i8> %43, %41
  %45 = shl nuw <16 x i8> %39, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %46 = lshr <16 x i8> %38, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %47 = or <16 x i8> %45, %46
  %48 = and <16 x i8> %35, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %49 = or <16 x i8> %48, %40
  %50 = zext <16 x i8> %49 to <16 x i32>
  %51 = mul nuw nsw <16 x i32> %50, <i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66>
  %52 = zext <16 x i8> %47 to <16 x i32>
  %53 = mul nuw nsw <16 x i32> %52, <i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129>
  %54 = zext <16 x i8> %44 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25>
  %56 = add nuw nsw <16 x i32> %51, <i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224>
  %57 = add nuw nsw <16 x i32> %56, %55
  %58 = add nuw nsw <16 x i32> %57, %53
  %59 = lshr <16 x i32> %58, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %60 = trunc <16 x i32> %59 to <16 x i8>
  %61 = bitcast i8* %31 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1, !alias.scope !139, !noalias !142
  %62 = add i64 %28, 16
  %63 = icmp eq i64 %62, %22
  br i1 %63, label %64, label %27, !llvm.loop !144

64:                                               ; preds = %27
  %65 = icmp eq i64 %8, %22
  br i1 %65, label %106, label %66

66:                                               ; preds = %64, %10, %5
  %67 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %24, %64 ]
  %68 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %64 ]
  %69 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %64 ]
  br label %70

70:                                               ; preds = %66, %70
  %71 = phi i8* [ %102, %70 ], [ %67, %66 ]
  %72 = phi i8* [ %103, %70 ], [ %68, %66 ]
  %73 = phi i32 [ %104, %70 ], [ %69, %66 ]
  %74 = load i8, i8* %71, align 1
  %75 = lshr i8 %74, 5
  %76 = getelementptr inbounds i8, i8* %71, i64 1
  %77 = load i8, i8* %76, align 1
  %78 = shl i8 %77, 3
  %79 = and i8 %78, 56
  %80 = or i8 %79, %75
  %81 = lshr i8 %77, 5
  %82 = shl i8 %74, 3
  %83 = lshr i8 %74, 2
  %84 = and i8 %83, 7
  %85 = or i8 %84, %82
  %86 = shl nuw i8 %80, 2
  %87 = lshr i8 %79, 4
  %88 = or i8 %86, %87
  %89 = and i8 %77, -8
  %90 = or i8 %89, %81
  %91 = zext i8 %90 to i32
  %92 = mul nuw nsw i32 %91, 66
  %93 = zext i8 %88 to i32
  %94 = mul nuw nsw i32 %93, 129
  %95 = zext i8 %85 to i32
  %96 = mul nuw nsw i32 %95, 25
  %97 = add nuw nsw i32 %92, 4224
  %98 = add nuw nsw i32 %97, %96
  %99 = add nuw nsw i32 %98, %94
  %100 = lshr i32 %99, 8
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %72, align 1
  %102 = getelementptr inbounds i8, i8* %71, i64 2
  %103 = getelementptr inbounds i8, i8* %72, i64 1
  %104 = add nuw nsw i32 %73, 1
  %105 = icmp eq i32 %104, %2
  br i1 %105, label %106, label %70, !llvm.loop !145

106:                                              ; preds = %70, %64, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGB1555ToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %110

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %68, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = getelementptr i8, i8* %1, i64 %13
  %15 = shl nuw nsw i64 %12, 1
  %16 = add nuw nsw i64 %15, 2
  %17 = getelementptr i8, i8* %0, i64 %16
  %18 = icmp ugt i8* %17, %1
  %19 = icmp ugt i8* %14, %0
  %20 = and i1 %18, %19
  br i1 %20, label %68, label %21

21:                                               ; preds = %10
  %22 = and i64 %8, 8589934576
  %23 = shl nuw nsw i64 %22, 1
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %1, i64 %22
  %26 = trunc i64 %22 to i32
  br label %27

27:                                               ; preds = %27, %21
  %28 = phi i64 [ 0, %21 ], [ %64, %27 ]
  %29 = shl i64 %28, 1
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %28
  %32 = bitcast i8* %30 to <32 x i8>*
  %33 = load <32 x i8>, <32 x i8>* %32, align 1
  %34 = shufflevector <32 x i8> %33, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %35 = shufflevector <32 x i8> %33, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %36 = lshr <16 x i8> %34, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %37 = shl <16 x i8> %35, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %38 = and <16 x i8> %37, <i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24>
  %39 = or <16 x i8> %38, %36
  %40 = lshr <16 x i8> %35, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %41 = shl <16 x i8> %34, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %42 = lshr <16 x i8> %34, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %43 = and <16 x i8> %42, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %44 = or <16 x i8> %43, %41
  %45 = shl nuw <16 x i8> %39, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %46 = lshr <16 x i8> %39, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %47 = or <16 x i8> %45, %46
  %48 = shl <16 x i8> %40, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %49 = lshr <16 x i8> %35, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %50 = and <16 x i8> %49, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %51 = or <16 x i8> %48, %50
  %52 = zext <16 x i8> %51 to <16 x i32>
  %53 = mul nuw nsw <16 x i32> %52, <i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66>
  %54 = zext <16 x i8> %47 to <16 x i32>
  %55 = mul nuw nsw <16 x i32> %54, <i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129>
  %56 = zext <16 x i8> %44 to <16 x i32>
  %57 = mul nuw nsw <16 x i32> %56, <i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25>
  %58 = add nuw nsw <16 x i32> %57, <i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224>
  %59 = add nuw nsw <16 x i32> %58, %53
  %60 = add nuw nsw <16 x i32> %59, %55
  %61 = lshr <16 x i32> %60, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %62 = trunc <16 x i32> %61 to <16 x i8>
  %63 = bitcast i8* %31 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %63, align 1, !alias.scope !146, !noalias !149
  %64 = add i64 %28, 16
  %65 = icmp eq i64 %64, %22
  br i1 %65, label %66, label %27, !llvm.loop !151

66:                                               ; preds = %27
  %67 = icmp eq i64 %8, %22
  br i1 %67, label %110, label %68

68:                                               ; preds = %66, %10, %5
  %69 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %24, %66 ]
  %70 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %66 ]
  %71 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %66 ]
  br label %72

72:                                               ; preds = %68, %72
  %73 = phi i8* [ %106, %72 ], [ %69, %68 ]
  %74 = phi i8* [ %107, %72 ], [ %70, %68 ]
  %75 = phi i32 [ %108, %72 ], [ %71, %68 ]
  %76 = load i8, i8* %73, align 1
  %77 = lshr i8 %76, 5
  %78 = getelementptr inbounds i8, i8* %73, i64 1
  %79 = load i8, i8* %78, align 1
  %80 = shl i8 %79, 3
  %81 = and i8 %80, 24
  %82 = or i8 %81, %77
  %83 = lshr i8 %79, 2
  %84 = shl i8 %76, 3
  %85 = lshr i8 %76, 2
  %86 = and i8 %85, 7
  %87 = or i8 %86, %84
  %88 = shl nuw i8 %82, 3
  %89 = lshr i8 %82, 2
  %90 = or i8 %88, %89
  %91 = shl i8 %83, 3
  %92 = lshr i8 %79, 4
  %93 = and i8 %92, 7
  %94 = or i8 %91, %93
  %95 = zext i8 %94 to i32
  %96 = mul nuw nsw i32 %95, 66
  %97 = zext i8 %90 to i32
  %98 = mul nuw nsw i32 %97, 129
  %99 = zext i8 %87 to i32
  %100 = mul nuw nsw i32 %99, 25
  %101 = add nuw nsw i32 %100, 4224
  %102 = add nuw nsw i32 %101, %96
  %103 = add nuw nsw i32 %102, %98
  %104 = lshr i32 %103, 8
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %74, align 1
  %106 = getelementptr inbounds i8, i8* %73, i64 2
  %107 = getelementptr inbounds i8, i8* %74, i64 1
  %108 = add nuw nsw i32 %75, 1
  %109 = icmp eq i32 %108, %2
  br i1 %109, label %110, label %72, !llvm.loop !152

110:                                              ; preds = %72, %66, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGB4444ToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %96

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 16
  br i1 %9, label %61, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = getelementptr i8, i8* %1, i64 %13
  %15 = shl nuw nsw i64 %12, 1
  %16 = add nuw nsw i64 %15, 2
  %17 = getelementptr i8, i8* %0, i64 %16
  %18 = icmp ugt i8* %17, %1
  %19 = icmp ugt i8* %14, %0
  %20 = and i1 %18, %19
  br i1 %20, label %61, label %21

21:                                               ; preds = %10
  %22 = and i64 %8, 8589934576
  %23 = shl nuw nsw i64 %22, 1
  %24 = getelementptr i8, i8* %0, i64 %23
  %25 = getelementptr i8, i8* %1, i64 %22
  %26 = trunc i64 %22 to i32
  br label %27

27:                                               ; preds = %27, %21
  %28 = phi i64 [ 0, %21 ], [ %57, %27 ]
  %29 = shl i64 %28, 1
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %28
  %32 = bitcast i8* %30 to <32 x i8>*
  %33 = load <32 x i8>, <32 x i8>* %32, align 1
  %34 = shufflevector <32 x i8> %33, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %35 = shufflevector <32 x i8> %33, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %36 = and <16 x i8> %34, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %37 = lshr <16 x i8> %34, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %38 = and <16 x i8> %35, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %39 = shl <16 x i8> %34, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %40 = or <16 x i8> %39, %36
  %41 = and <16 x i8> %34, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %42 = or <16 x i8> %41, %37
  %43 = shl <16 x i8> %35, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %44 = or <16 x i8> %43, %38
  %45 = zext <16 x i8> %44 to <16 x i32>
  %46 = mul nuw nsw <16 x i32> %45, <i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66, i32 66>
  %47 = zext <16 x i8> %42 to <16 x i32>
  %48 = mul nuw nsw <16 x i32> %47, <i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129, i32 129>
  %49 = zext <16 x i8> %40 to <16 x i32>
  %50 = mul nuw nsw <16 x i32> %49, <i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25, i32 25>
  %51 = add nuw nsw <16 x i32> %48, <i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224, i32 4224>
  %52 = add nuw nsw <16 x i32> %51, %50
  %53 = add nuw nsw <16 x i32> %52, %46
  %54 = lshr <16 x i32> %53, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = trunc <16 x i32> %54 to <16 x i8>
  %56 = bitcast i8* %31 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %56, align 1, !alias.scope !153, !noalias !156
  %57 = add i64 %28, 16
  %58 = icmp eq i64 %57, %22
  br i1 %58, label %59, label %27, !llvm.loop !158

59:                                               ; preds = %27
  %60 = icmp eq i64 %8, %22
  br i1 %60, label %96, label %61

61:                                               ; preds = %59, %10, %5
  %62 = phi i8* [ %0, %10 ], [ %0, %5 ], [ %24, %59 ]
  %63 = phi i8* [ %1, %10 ], [ %1, %5 ], [ %25, %59 ]
  %64 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %26, %59 ]
  br label %65

65:                                               ; preds = %61, %65
  %66 = phi i8* [ %92, %65 ], [ %62, %61 ]
  %67 = phi i8* [ %93, %65 ], [ %63, %61 ]
  %68 = phi i32 [ %94, %65 ], [ %64, %61 ]
  %69 = load i8, i8* %66, align 1
  %70 = and i8 %69, 15
  %71 = lshr i8 %69, 4
  %72 = getelementptr inbounds i8, i8* %66, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = and i8 %73, 15
  %75 = shl i8 %69, 4
  %76 = or i8 %75, %70
  %77 = and i8 %69, -16
  %78 = or i8 %77, %71
  %79 = shl i8 %73, 4
  %80 = or i8 %79, %74
  %81 = zext i8 %80 to i32
  %82 = mul nuw nsw i32 %81, 66
  %83 = zext i8 %78 to i32
  %84 = mul nuw nsw i32 %83, 129
  %85 = zext i8 %76 to i32
  %86 = mul nuw nsw i32 %85, 25
  %87 = add nuw nsw i32 %84, 4224
  %88 = add nuw nsw i32 %87, %86
  %89 = add nuw nsw i32 %88, %82
  %90 = lshr i32 %89, 8
  %91 = trunc i32 %90 to i8
  store i8 %91, i8* %67, align 1
  %92 = getelementptr inbounds i8, i8* %66, i64 2
  %93 = getelementptr inbounds i8, i8* %67, i64 1
  %94 = add nuw nsw i32 %68, 1
  %95 = icmp eq i32 %94, %2
  br i1 %95, label %96, label %65, !llvm.loop !159

96:                                               ; preds = %65, %59, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB565ToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %344

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 16
  br i1 %15, label %198, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = shl nuw nsw i64 %19, 2
  %24 = add nsw i64 %23, %6
  %25 = add nsw i64 %24, 4
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add nuw nsw i64 %23, 4
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = icmp ugt i8* %22, %2
  %30 = icmp ugt i8* %21, %3
  %31 = and i1 %29, %30
  %32 = icmp ugt i8* %26, %2
  %33 = icmp ult i8* %7, %21
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %21, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %26, %3
  %41 = icmp ult i8* %7, %22
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  %44 = icmp ugt i8* %28, %3
  %45 = icmp ugt i8* %22, %0
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  br i1 %47, label %198, label %48

48:                                               ; preds = %16
  %49 = and i64 %14, 4294967280
  %50 = shl nuw nsw i64 %49, 2
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = getelementptr i8, i8* %2, i64 %49
  %53 = getelementptr i8, i8* %3, i64 %49
  %54 = shl nuw nsw i64 %49, 2
  %55 = getelementptr i8, i8* %7, i64 %54
  %56 = trunc i64 %49 to i32
  %57 = shl i32 %56, 1
  br label %58

58:                                               ; preds = %58, %48
  %59 = phi i64 [ 0, %48 ], [ %194, %58 ]
  %60 = shl i64 %59, 2
  %61 = getelementptr i8, i8* %0, i64 %60
  %62 = getelementptr i8, i8* %2, i64 %59
  %63 = getelementptr i8, i8* %3, i64 %59
  %64 = shl i64 %59, 2
  %65 = getelementptr i8, i8* %7, i64 %64
  %66 = bitcast i8* %61 to <64 x i8>*
  %67 = load <64 x i8>, <64 x i8>* %66, align 1
  %68 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %69 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %70 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %71 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %72 = lshr <16 x i8> %68, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %73 = shl <16 x i8> %69, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %74 = and <16 x i8> %73, <i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56>
  %75 = or <16 x i8> %74, %72
  %76 = lshr <16 x i8> %69, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %77 = lshr <16 x i8> %70, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %78 = shl <16 x i8> %71, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %79 = and <16 x i8> %78, <i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56>
  %80 = or <16 x i8> %79, %77
  %81 = lshr <16 x i8> %71, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %82 = bitcast i8* %65 to <64 x i8>*
  %83 = load <64 x i8>, <64 x i8>* %82, align 1
  %84 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %85 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %86 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %87 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %88 = lshr <16 x i8> %84, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %89 = shl <16 x i8> %85, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %90 = and <16 x i8> %89, <i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56>
  %91 = or <16 x i8> %90, %88
  %92 = lshr <16 x i8> %85, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %93 = lshr <16 x i8> %86, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %94 = shl <16 x i8> %87, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %95 = and <16 x i8> %94, <i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56, i8 56>
  %96 = or <16 x i8> %95, %93
  %97 = lshr <16 x i8> %87, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %98 = shl <16 x i8> %68, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %99 = lshr <16 x i8> %68, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %100 = and <16 x i8> %99, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %101 = or <16 x i8> %100, %98
  %102 = shl nuw <16 x i8> %75, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %103 = lshr <16 x i8> %74, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %104 = or <16 x i8> %102, %103
  %105 = and <16 x i8> %69, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %106 = or <16 x i8> %105, %76
  %107 = shl <16 x i8> %70, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %108 = lshr <16 x i8> %70, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %109 = and <16 x i8> %108, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %110 = or <16 x i8> %109, %107
  %111 = shl nuw <16 x i8> %80, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %112 = lshr <16 x i8> %79, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %113 = or <16 x i8> %111, %112
  %114 = and <16 x i8> %71, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %115 = or <16 x i8> %114, %81
  %116 = shl <16 x i8> %84, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %117 = lshr <16 x i8> %84, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %118 = and <16 x i8> %117, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %119 = or <16 x i8> %118, %116
  %120 = shl nuw <16 x i8> %91, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %121 = lshr <16 x i8> %90, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %122 = or <16 x i8> %120, %121
  %123 = and <16 x i8> %85, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %124 = or <16 x i8> %123, %92
  %125 = shl <16 x i8> %86, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %126 = lshr <16 x i8> %86, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %127 = and <16 x i8> %126, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %128 = or <16 x i8> %127, %125
  %129 = shl nuw <16 x i8> %96, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %130 = lshr <16 x i8> %95, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %131 = or <16 x i8> %129, %130
  %132 = and <16 x i8> %87, <i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8, i8 -8>
  %133 = or <16 x i8> %132, %97
  %134 = zext <16 x i8> %101 to <16 x i32>
  %135 = zext <16 x i8> %119 to <16 x i32>
  %136 = add nuw nsw <16 x i32> %134, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %137 = add nuw nsw <16 x i32> %136, %135
  %138 = lshr <16 x i32> %137, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %139 = zext <16 x i8> %110 to <16 x i32>
  %140 = zext <16 x i8> %128 to <16 x i32>
  %141 = add nuw nsw <16 x i32> %139, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %142 = add nuw nsw <16 x i32> %141, %140
  %143 = lshr <16 x i32> %142, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %144 = add nuw nsw <16 x i32> %138, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %145 = add nuw nsw <16 x i32> %144, %143
  %146 = lshr <16 x i32> %145, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %147 = zext <16 x i8> %104 to <16 x i32>
  %148 = zext <16 x i8> %122 to <16 x i32>
  %149 = add nuw nsw <16 x i32> %147, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %150 = add nuw nsw <16 x i32> %149, %148
  %151 = lshr <16 x i32> %150, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %152 = zext <16 x i8> %113 to <16 x i32>
  %153 = zext <16 x i8> %131 to <16 x i32>
  %154 = add nuw nsw <16 x i32> %152, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %155 = add nuw nsw <16 x i32> %154, %153
  %156 = lshr <16 x i32> %155, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %157 = add nuw nsw <16 x i32> %151, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %158 = add nuw nsw <16 x i32> %157, %156
  %159 = lshr <16 x i32> %158, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %160 = zext <16 x i8> %106 to <16 x i32>
  %161 = zext <16 x i8> %124 to <16 x i32>
  %162 = add nuw nsw <16 x i32> %160, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %163 = add nuw nsw <16 x i32> %162, %161
  %164 = lshr <16 x i32> %163, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %165 = zext <16 x i8> %115 to <16 x i32>
  %166 = zext <16 x i8> %133 to <16 x i32>
  %167 = add nuw nsw <16 x i32> %165, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %168 = add nuw nsw <16 x i32> %167, %166
  %169 = lshr <16 x i32> %168, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %170 = add nuw nsw <16 x i32> %164, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %171 = add nuw nsw <16 x i32> %170, %169
  %172 = lshr <16 x i32> %171, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %173 = and <16 x i32> %146, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %174 = mul nuw nsw <16 x i32> %173, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %175 = and <16 x i32> %159, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %176 = mul nsw <16 x i32> %175, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %177 = and <16 x i32> %172, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %178 = mul nsw <16 x i32> %177, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %179 = add nsw <16 x i32> %178, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %180 = add nuw nsw <16 x i32> %179, %174
  %181 = add nsw <16 x i32> %180, %176
  %182 = lshr <16 x i32> %181, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %183 = trunc <16 x i32> %182 to <16 x i8>
  %184 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %184, align 1, !alias.scope !160, !noalias !163
  %185 = mul nuw nsw <16 x i32> %177, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %186 = mul nsw <16 x i32> %175, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %187 = mul nsw <16 x i32> %173, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %188 = or <16 x i32> %185, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %189 = add nsw <16 x i32> %188, %187
  %190 = add nsw <16 x i32> %189, %186
  %191 = lshr <16 x i32> %190, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %192 = trunc <16 x i32> %191 to <16 x i8>
  %193 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %192, <16 x i8>* %193, align 1, !alias.scope !167, !noalias !168
  %194 = add i64 %59, 16
  %195 = icmp eq i64 %194, %49
  br i1 %195, label %196, label %58, !llvm.loop !169

196:                                              ; preds = %58
  %197 = icmp eq i64 %49, %14
  br i1 %197, label %344, label %198

198:                                              ; preds = %196, %16, %10
  %199 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %51, %196 ]
  %200 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %52, %196 ]
  %201 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %53, %196 ]
  %202 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %55, %196 ]
  %203 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %57, %196 ]
  br label %204

204:                                              ; preds = %198, %204
  %205 = phi i8* [ %338, %204 ], [ %199, %198 ]
  %206 = phi i8* [ %340, %204 ], [ %200, %198 ]
  %207 = phi i8* [ %341, %204 ], [ %201, %198 ]
  %208 = phi i8* [ %339, %204 ], [ %202, %198 ]
  %209 = phi i32 [ %342, %204 ], [ %203, %198 ]
  %210 = load i8, i8* %205, align 1
  %211 = lshr i8 %210, 5
  %212 = getelementptr inbounds i8, i8* %205, i64 1
  %213 = load i8, i8* %212, align 1
  %214 = shl i8 %213, 3
  %215 = and i8 %214, 56
  %216 = or i8 %215, %211
  %217 = lshr i8 %213, 5
  %218 = getelementptr inbounds i8, i8* %205, i64 2
  %219 = load i8, i8* %218, align 1
  %220 = lshr i8 %219, 5
  %221 = getelementptr inbounds i8, i8* %205, i64 3
  %222 = load i8, i8* %221, align 1
  %223 = shl i8 %222, 3
  %224 = and i8 %223, 56
  %225 = or i8 %224, %220
  %226 = lshr i8 %222, 5
  %227 = load i8, i8* %208, align 1
  %228 = lshr i8 %227, 5
  %229 = getelementptr inbounds i8, i8* %208, i64 1
  %230 = load i8, i8* %229, align 1
  %231 = shl i8 %230, 3
  %232 = and i8 %231, 56
  %233 = or i8 %232, %228
  %234 = lshr i8 %230, 5
  %235 = getelementptr inbounds i8, i8* %208, i64 2
  %236 = load i8, i8* %235, align 1
  %237 = lshr i8 %236, 5
  %238 = getelementptr inbounds i8, i8* %208, i64 3
  %239 = load i8, i8* %238, align 1
  %240 = shl i8 %239, 3
  %241 = and i8 %240, 56
  %242 = or i8 %241, %237
  %243 = lshr i8 %239, 5
  %244 = shl i8 %210, 3
  %245 = lshr i8 %210, 2
  %246 = and i8 %245, 7
  %247 = or i8 %246, %244
  %248 = shl nuw i8 %216, 2
  %249 = lshr i8 %215, 4
  %250 = or i8 %248, %249
  %251 = and i8 %213, -8
  %252 = or i8 %251, %217
  %253 = shl i8 %219, 3
  %254 = lshr i8 %219, 2
  %255 = and i8 %254, 7
  %256 = or i8 %255, %253
  %257 = shl nuw i8 %225, 2
  %258 = lshr i8 %224, 4
  %259 = or i8 %257, %258
  %260 = and i8 %222, -8
  %261 = or i8 %260, %226
  %262 = shl i8 %227, 3
  %263 = lshr i8 %227, 2
  %264 = and i8 %263, 7
  %265 = or i8 %264, %262
  %266 = shl nuw i8 %233, 2
  %267 = lshr i8 %232, 4
  %268 = or i8 %266, %267
  %269 = and i8 %230, -8
  %270 = or i8 %269, %234
  %271 = shl i8 %236, 3
  %272 = lshr i8 %236, 2
  %273 = and i8 %272, 7
  %274 = or i8 %273, %271
  %275 = shl nuw i8 %242, 2
  %276 = lshr i8 %241, 4
  %277 = or i8 %275, %276
  %278 = and i8 %239, -8
  %279 = or i8 %278, %243
  %280 = zext i8 %247 to i32
  %281 = zext i8 %265 to i32
  %282 = add nuw nsw i32 %280, 1
  %283 = add nuw nsw i32 %282, %281
  %284 = lshr i32 %283, 1
  %285 = zext i8 %256 to i32
  %286 = zext i8 %274 to i32
  %287 = add nuw nsw i32 %285, 1
  %288 = add nuw nsw i32 %287, %286
  %289 = lshr i32 %288, 1
  %290 = add nuw nsw i32 %284, 1
  %291 = add nuw nsw i32 %290, %289
  %292 = lshr i32 %291, 1
  %293 = zext i8 %250 to i32
  %294 = zext i8 %268 to i32
  %295 = add nuw nsw i32 %293, 1
  %296 = add nuw nsw i32 %295, %294
  %297 = lshr i32 %296, 1
  %298 = zext i8 %259 to i32
  %299 = zext i8 %277 to i32
  %300 = add nuw nsw i32 %298, 1
  %301 = add nuw nsw i32 %300, %299
  %302 = lshr i32 %301, 1
  %303 = add nuw nsw i32 %297, 1
  %304 = add nuw nsw i32 %303, %302
  %305 = lshr i32 %304, 1
  %306 = zext i8 %252 to i32
  %307 = zext i8 %270 to i32
  %308 = add nuw nsw i32 %306, 1
  %309 = add nuw nsw i32 %308, %307
  %310 = lshr i32 %309, 1
  %311 = zext i8 %261 to i32
  %312 = zext i8 %279 to i32
  %313 = add nuw nsw i32 %311, 1
  %314 = add nuw nsw i32 %313, %312
  %315 = lshr i32 %314, 1
  %316 = add nuw nsw i32 %310, 1
  %317 = add nuw nsw i32 %316, %315
  %318 = lshr i32 %317, 1
  %319 = and i32 %292, 255
  %320 = mul nuw nsw i32 %319, 112
  %321 = and i32 %305, 255
  %322 = mul nsw i32 %321, -74
  %323 = and i32 %318, 255
  %324 = mul nsw i32 %323, -38
  %325 = add nsw i32 %324, 32768
  %326 = add nuw nsw i32 %325, %320
  %327 = add nsw i32 %326, %322
  %328 = lshr i32 %327, 8
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %206, align 1
  %330 = mul nuw nsw i32 %323, 112
  %331 = mul nsw i32 %321, -94
  %332 = mul nsw i32 %319, -18
  %333 = or i32 %330, 32768
  %334 = add nsw i32 %333, %332
  %335 = add nsw i32 %334, %331
  %336 = lshr i32 %335, 8
  %337 = trunc i32 %336 to i8
  store i8 %337, i8* %207, align 1
  %338 = getelementptr inbounds i8, i8* %205, i64 4
  %339 = getelementptr inbounds i8, i8* %208, i64 4
  %340 = getelementptr inbounds i8, i8* %206, i64 1
  %341 = getelementptr inbounds i8, i8* %207, i64 1
  %342 = add nuw nsw i32 %209, 2
  %343 = icmp slt i32 %342, %8
  br i1 %343, label %204, label %344, !llvm.loop !170

344:                                              ; preds = %204, %196, %5
  %345 = phi i8* [ %7, %5 ], [ %55, %196 ], [ %339, %204 ]
  %346 = phi i8* [ %3, %5 ], [ %53, %196 ], [ %341, %204 ]
  %347 = phi i8* [ %2, %5 ], [ %52, %196 ], [ %340, %204 ]
  %348 = phi i8* [ %0, %5 ], [ %51, %196 ], [ %338, %204 ]
  %349 = and i32 %4, 1
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %420, label %351

351:                                              ; preds = %344
  %352 = load i8, i8* %348, align 1
  %353 = lshr i8 %352, 5
  %354 = getelementptr inbounds i8, i8* %348, i64 1
  %355 = load i8, i8* %354, align 1
  %356 = shl i8 %355, 3
  %357 = and i8 %356, 56
  %358 = or i8 %357, %353
  %359 = lshr i8 %355, 5
  %360 = load i8, i8* %345, align 1
  %361 = lshr i8 %360, 5
  %362 = getelementptr inbounds i8, i8* %345, i64 1
  %363 = load i8, i8* %362, align 1
  %364 = shl i8 %363, 3
  %365 = and i8 %364, 56
  %366 = or i8 %365, %361
  %367 = lshr i8 %363, 5
  %368 = shl i8 %352, 3
  %369 = lshr i8 %352, 2
  %370 = and i8 %369, 7
  %371 = or i8 %370, %368
  %372 = shl nuw i8 %358, 2
  %373 = lshr i8 %357, 4
  %374 = or i8 %372, %373
  %375 = and i8 %355, -8
  %376 = or i8 %375, %359
  %377 = shl i8 %360, 3
  %378 = lshr i8 %360, 2
  %379 = and i8 %378, 7
  %380 = or i8 %379, %377
  %381 = shl nuw i8 %366, 2
  %382 = lshr i8 %365, 4
  %383 = or i8 %381, %382
  %384 = and i8 %363, -8
  %385 = or i8 %384, %367
  %386 = zext i8 %371 to i32
  %387 = zext i8 %380 to i32
  %388 = add nuw nsw i32 %386, 1
  %389 = add nuw nsw i32 %388, %387
  %390 = lshr i32 %389, 1
  %391 = zext i8 %374 to i32
  %392 = zext i8 %383 to i32
  %393 = add nuw nsw i32 %391, 1
  %394 = add nuw nsw i32 %393, %392
  %395 = lshr i32 %394, 1
  %396 = zext i8 %376 to i32
  %397 = zext i8 %385 to i32
  %398 = add nuw nsw i32 %396, 1
  %399 = add nuw nsw i32 %398, %397
  %400 = lshr i32 %399, 1
  %401 = and i32 %390, 255
  %402 = mul nuw nsw i32 %401, 112
  %403 = and i32 %395, 255
  %404 = mul nsw i32 %403, -74
  %405 = and i32 %400, 255
  %406 = mul nsw i32 %405, -38
  %407 = add nsw i32 %406, 32768
  %408 = add nuw nsw i32 %407, %402
  %409 = add nsw i32 %408, %404
  %410 = lshr i32 %409, 8
  %411 = trunc i32 %410 to i8
  store i8 %411, i8* %347, align 1
  %412 = mul nuw nsw i32 %405, 112
  %413 = mul nsw i32 %403, -94
  %414 = mul nsw i32 %401, -18
  %415 = or i32 %412, 32768
  %416 = add nsw i32 %415, %414
  %417 = add nsw i32 %416, %413
  %418 = lshr i32 %417, 8
  %419 = trunc i32 %418 to i8
  store i8 %419, i8* %346, align 1
  br label %420

420:                                              ; preds = %344, %351
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGB1555ToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %360

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 16
  br i1 %15, label %206, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = shl nuw nsw i64 %19, 2
  %24 = add nsw i64 %23, %6
  %25 = add nsw i64 %24, 4
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add nuw nsw i64 %23, 4
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = icmp ugt i8* %22, %2
  %30 = icmp ugt i8* %21, %3
  %31 = and i1 %29, %30
  %32 = icmp ugt i8* %26, %2
  %33 = icmp ult i8* %7, %21
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %21, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %26, %3
  %41 = icmp ult i8* %7, %22
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  %44 = icmp ugt i8* %28, %3
  %45 = icmp ugt i8* %22, %0
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  br i1 %47, label %206, label %48

48:                                               ; preds = %16
  %49 = and i64 %14, 4294967280
  %50 = shl nuw nsw i64 %49, 2
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = getelementptr i8, i8* %2, i64 %49
  %53 = getelementptr i8, i8* %3, i64 %49
  %54 = shl nuw nsw i64 %49, 2
  %55 = getelementptr i8, i8* %7, i64 %54
  %56 = trunc i64 %49 to i32
  %57 = shl i32 %56, 1
  br label %58

58:                                               ; preds = %58, %48
  %59 = phi i64 [ 0, %48 ], [ %202, %58 ]
  %60 = shl i64 %59, 2
  %61 = getelementptr i8, i8* %0, i64 %60
  %62 = getelementptr i8, i8* %2, i64 %59
  %63 = getelementptr i8, i8* %3, i64 %59
  %64 = shl i64 %59, 2
  %65 = getelementptr i8, i8* %7, i64 %64
  %66 = bitcast i8* %61 to <64 x i8>*
  %67 = load <64 x i8>, <64 x i8>* %66, align 1
  %68 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %69 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %70 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %71 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %72 = lshr <16 x i8> %68, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %73 = shl <16 x i8> %69, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %74 = and <16 x i8> %73, <i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24>
  %75 = or <16 x i8> %74, %72
  %76 = lshr <16 x i8> %69, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %77 = lshr <16 x i8> %70, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %78 = shl <16 x i8> %71, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %79 = and <16 x i8> %78, <i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24>
  %80 = or <16 x i8> %79, %77
  %81 = lshr <16 x i8> %71, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %82 = bitcast i8* %65 to <64 x i8>*
  %83 = load <64 x i8>, <64 x i8>* %82, align 1
  %84 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %85 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %86 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %87 = shufflevector <64 x i8> %83, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %88 = lshr <16 x i8> %84, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %89 = shl <16 x i8> %85, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %90 = and <16 x i8> %89, <i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24>
  %91 = or <16 x i8> %90, %88
  %92 = lshr <16 x i8> %85, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %93 = lshr <16 x i8> %86, <i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5, i8 5>
  %94 = shl <16 x i8> %87, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %95 = and <16 x i8> %94, <i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24, i8 24>
  %96 = or <16 x i8> %95, %93
  %97 = lshr <16 x i8> %87, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %98 = shl <16 x i8> %68, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %99 = lshr <16 x i8> %68, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %100 = and <16 x i8> %99, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %101 = or <16 x i8> %100, %98
  %102 = shl nuw <16 x i8> %75, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %103 = lshr <16 x i8> %75, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %104 = or <16 x i8> %102, %103
  %105 = shl <16 x i8> %76, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %106 = lshr <16 x i8> %69, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %107 = and <16 x i8> %106, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %108 = or <16 x i8> %105, %107
  %109 = shl <16 x i8> %70, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %110 = lshr <16 x i8> %70, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %111 = and <16 x i8> %110, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %112 = or <16 x i8> %111, %109
  %113 = shl nuw <16 x i8> %80, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %114 = lshr <16 x i8> %80, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %115 = or <16 x i8> %113, %114
  %116 = shl <16 x i8> %81, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %117 = lshr <16 x i8> %71, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %118 = and <16 x i8> %117, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %119 = or <16 x i8> %116, %118
  %120 = shl <16 x i8> %84, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %121 = lshr <16 x i8> %84, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %122 = and <16 x i8> %121, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %123 = or <16 x i8> %122, %120
  %124 = shl nuw <16 x i8> %91, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %125 = lshr <16 x i8> %91, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %126 = or <16 x i8> %124, %125
  %127 = shl <16 x i8> %92, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %128 = lshr <16 x i8> %85, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %129 = and <16 x i8> %128, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %130 = or <16 x i8> %127, %129
  %131 = shl <16 x i8> %86, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %132 = lshr <16 x i8> %86, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %133 = and <16 x i8> %132, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %134 = or <16 x i8> %133, %131
  %135 = shl nuw <16 x i8> %96, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %136 = lshr <16 x i8> %96, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %137 = or <16 x i8> %135, %136
  %138 = shl <16 x i8> %97, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  %139 = lshr <16 x i8> %87, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %140 = and <16 x i8> %139, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %141 = or <16 x i8> %138, %140
  %142 = zext <16 x i8> %101 to <16 x i32>
  %143 = zext <16 x i8> %123 to <16 x i32>
  %144 = add nuw nsw <16 x i32> %142, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %145 = add nuw nsw <16 x i32> %144, %143
  %146 = lshr <16 x i32> %145, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %147 = zext <16 x i8> %112 to <16 x i32>
  %148 = zext <16 x i8> %134 to <16 x i32>
  %149 = add nuw nsw <16 x i32> %147, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %150 = add nuw nsw <16 x i32> %149, %148
  %151 = lshr <16 x i32> %150, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %152 = add nuw nsw <16 x i32> %146, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %153 = add nuw nsw <16 x i32> %152, %151
  %154 = lshr <16 x i32> %153, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %155 = zext <16 x i8> %104 to <16 x i32>
  %156 = zext <16 x i8> %126 to <16 x i32>
  %157 = add nuw nsw <16 x i32> %155, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %158 = add nuw nsw <16 x i32> %157, %156
  %159 = lshr <16 x i32> %158, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %160 = zext <16 x i8> %115 to <16 x i32>
  %161 = zext <16 x i8> %137 to <16 x i32>
  %162 = add nuw nsw <16 x i32> %160, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %163 = add nuw nsw <16 x i32> %162, %161
  %164 = lshr <16 x i32> %163, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %165 = add nuw nsw <16 x i32> %159, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %166 = add nuw nsw <16 x i32> %165, %164
  %167 = lshr <16 x i32> %166, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %168 = zext <16 x i8> %108 to <16 x i32>
  %169 = zext <16 x i8> %130 to <16 x i32>
  %170 = add nuw nsw <16 x i32> %168, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %171 = add nuw nsw <16 x i32> %170, %169
  %172 = lshr <16 x i32> %171, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %173 = zext <16 x i8> %119 to <16 x i32>
  %174 = zext <16 x i8> %141 to <16 x i32>
  %175 = add nuw nsw <16 x i32> %173, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %176 = add nuw nsw <16 x i32> %175, %174
  %177 = lshr <16 x i32> %176, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %178 = add nuw nsw <16 x i32> %172, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %179 = add nuw nsw <16 x i32> %178, %177
  %180 = lshr <16 x i32> %179, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %181 = and <16 x i32> %154, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %182 = mul nuw nsw <16 x i32> %181, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %183 = and <16 x i32> %167, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %184 = mul nsw <16 x i32> %183, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %185 = and <16 x i32> %180, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %186 = mul nsw <16 x i32> %185, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %187 = or <16 x i32> %182, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %188 = add nsw <16 x i32> %187, %186
  %189 = add nsw <16 x i32> %188, %184
  %190 = lshr <16 x i32> %189, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %191 = trunc <16 x i32> %190 to <16 x i8>
  %192 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %192, align 1, !alias.scope !171, !noalias !174
  %193 = mul nuw nsw <16 x i32> %185, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %194 = mul nsw <16 x i32> %183, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %195 = mul nsw <16 x i32> %181, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %196 = or <16 x i32> %193, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %197 = add nsw <16 x i32> %196, %195
  %198 = add nsw <16 x i32> %197, %194
  %199 = lshr <16 x i32> %198, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %200 = trunc <16 x i32> %199 to <16 x i8>
  %201 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %200, <16 x i8>* %201, align 1, !alias.scope !178, !noalias !179
  %202 = add i64 %59, 16
  %203 = icmp eq i64 %202, %49
  br i1 %203, label %204, label %58, !llvm.loop !180

204:                                              ; preds = %58
  %205 = icmp eq i64 %49, %14
  br i1 %205, label %360, label %206

206:                                              ; preds = %204, %16, %10
  %207 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %51, %204 ]
  %208 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %52, %204 ]
  %209 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %53, %204 ]
  %210 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %55, %204 ]
  %211 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %57, %204 ]
  br label %212

212:                                              ; preds = %206, %212
  %213 = phi i8* [ %354, %212 ], [ %207, %206 ]
  %214 = phi i8* [ %356, %212 ], [ %208, %206 ]
  %215 = phi i8* [ %357, %212 ], [ %209, %206 ]
  %216 = phi i8* [ %355, %212 ], [ %210, %206 ]
  %217 = phi i32 [ %358, %212 ], [ %211, %206 ]
  %218 = load i8, i8* %213, align 1
  %219 = lshr i8 %218, 5
  %220 = getelementptr inbounds i8, i8* %213, i64 1
  %221 = load i8, i8* %220, align 1
  %222 = shl i8 %221, 3
  %223 = and i8 %222, 24
  %224 = or i8 %223, %219
  %225 = lshr i8 %221, 2
  %226 = getelementptr inbounds i8, i8* %213, i64 2
  %227 = load i8, i8* %226, align 1
  %228 = lshr i8 %227, 5
  %229 = getelementptr inbounds i8, i8* %213, i64 3
  %230 = load i8, i8* %229, align 1
  %231 = shl i8 %230, 3
  %232 = and i8 %231, 24
  %233 = or i8 %232, %228
  %234 = lshr i8 %230, 2
  %235 = load i8, i8* %216, align 1
  %236 = lshr i8 %235, 5
  %237 = getelementptr inbounds i8, i8* %216, i64 1
  %238 = load i8, i8* %237, align 1
  %239 = shl i8 %238, 3
  %240 = and i8 %239, 24
  %241 = or i8 %240, %236
  %242 = lshr i8 %238, 2
  %243 = getelementptr inbounds i8, i8* %216, i64 2
  %244 = load i8, i8* %243, align 1
  %245 = lshr i8 %244, 5
  %246 = getelementptr inbounds i8, i8* %216, i64 3
  %247 = load i8, i8* %246, align 1
  %248 = shl i8 %247, 3
  %249 = and i8 %248, 24
  %250 = or i8 %249, %245
  %251 = lshr i8 %247, 2
  %252 = shl i8 %218, 3
  %253 = lshr i8 %218, 2
  %254 = and i8 %253, 7
  %255 = or i8 %254, %252
  %256 = shl nuw i8 %224, 3
  %257 = lshr i8 %224, 2
  %258 = or i8 %256, %257
  %259 = shl i8 %225, 3
  %260 = lshr i8 %221, 4
  %261 = and i8 %260, 7
  %262 = or i8 %259, %261
  %263 = shl i8 %227, 3
  %264 = lshr i8 %227, 2
  %265 = and i8 %264, 7
  %266 = or i8 %265, %263
  %267 = shl nuw i8 %233, 3
  %268 = lshr i8 %233, 2
  %269 = or i8 %267, %268
  %270 = shl i8 %234, 3
  %271 = lshr i8 %230, 4
  %272 = and i8 %271, 7
  %273 = or i8 %270, %272
  %274 = shl i8 %235, 3
  %275 = lshr i8 %235, 2
  %276 = and i8 %275, 7
  %277 = or i8 %276, %274
  %278 = shl nuw i8 %241, 3
  %279 = lshr i8 %241, 2
  %280 = or i8 %278, %279
  %281 = shl i8 %242, 3
  %282 = lshr i8 %238, 4
  %283 = and i8 %282, 7
  %284 = or i8 %281, %283
  %285 = shl i8 %244, 3
  %286 = lshr i8 %244, 2
  %287 = and i8 %286, 7
  %288 = or i8 %287, %285
  %289 = shl nuw i8 %250, 3
  %290 = lshr i8 %250, 2
  %291 = or i8 %289, %290
  %292 = shl i8 %251, 3
  %293 = lshr i8 %247, 4
  %294 = and i8 %293, 7
  %295 = or i8 %292, %294
  %296 = zext i8 %255 to i32
  %297 = zext i8 %277 to i32
  %298 = add nuw nsw i32 %296, 1
  %299 = add nuw nsw i32 %298, %297
  %300 = lshr i32 %299, 1
  %301 = zext i8 %266 to i32
  %302 = zext i8 %288 to i32
  %303 = add nuw nsw i32 %301, 1
  %304 = add nuw nsw i32 %303, %302
  %305 = lshr i32 %304, 1
  %306 = add nuw nsw i32 %300, 1
  %307 = add nuw nsw i32 %306, %305
  %308 = lshr i32 %307, 1
  %309 = zext i8 %258 to i32
  %310 = zext i8 %280 to i32
  %311 = add nuw nsw i32 %309, 1
  %312 = add nuw nsw i32 %311, %310
  %313 = lshr i32 %312, 1
  %314 = zext i8 %269 to i32
  %315 = zext i8 %291 to i32
  %316 = add nuw nsw i32 %314, 1
  %317 = add nuw nsw i32 %316, %315
  %318 = lshr i32 %317, 1
  %319 = add nuw nsw i32 %313, 1
  %320 = add nuw nsw i32 %319, %318
  %321 = lshr i32 %320, 1
  %322 = zext i8 %262 to i32
  %323 = zext i8 %284 to i32
  %324 = add nuw nsw i32 %322, 1
  %325 = add nuw nsw i32 %324, %323
  %326 = lshr i32 %325, 1
  %327 = zext i8 %273 to i32
  %328 = zext i8 %295 to i32
  %329 = add nuw nsw i32 %327, 1
  %330 = add nuw nsw i32 %329, %328
  %331 = lshr i32 %330, 1
  %332 = add nuw nsw i32 %326, 1
  %333 = add nuw nsw i32 %332, %331
  %334 = lshr i32 %333, 1
  %335 = and i32 %308, 255
  %336 = mul nuw nsw i32 %335, 112
  %337 = and i32 %321, 255
  %338 = mul nsw i32 %337, -74
  %339 = and i32 %334, 255
  %340 = mul nsw i32 %339, -38
  %341 = or i32 %336, 32768
  %342 = add nsw i32 %341, %340
  %343 = add nsw i32 %342, %338
  %344 = lshr i32 %343, 8
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %214, align 1
  %346 = mul nuw nsw i32 %339, 112
  %347 = mul nsw i32 %337, -94
  %348 = mul nsw i32 %335, -18
  %349 = or i32 %346, 32768
  %350 = add nsw i32 %349, %348
  %351 = add nsw i32 %350, %347
  %352 = lshr i32 %351, 8
  %353 = trunc i32 %352 to i8
  store i8 %353, i8* %215, align 1
  %354 = getelementptr inbounds i8, i8* %213, i64 4
  %355 = getelementptr inbounds i8, i8* %216, i64 4
  %356 = getelementptr inbounds i8, i8* %214, i64 1
  %357 = getelementptr inbounds i8, i8* %215, i64 1
  %358 = add nuw nsw i32 %217, 2
  %359 = icmp slt i32 %358, %8
  br i1 %359, label %212, label %360, !llvm.loop !181

360:                                              ; preds = %212, %204, %5
  %361 = phi i8* [ %7, %5 ], [ %55, %204 ], [ %355, %212 ]
  %362 = phi i8* [ %3, %5 ], [ %53, %204 ], [ %357, %212 ]
  %363 = phi i8* [ %2, %5 ], [ %52, %204 ], [ %356, %212 ]
  %364 = phi i8* [ %0, %5 ], [ %51, %204 ], [ %354, %212 ]
  %365 = and i32 %4, 1
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %438, label %367

367:                                              ; preds = %360
  %368 = load i8, i8* %364, align 1
  %369 = lshr i8 %368, 5
  %370 = getelementptr inbounds i8, i8* %364, i64 1
  %371 = load i8, i8* %370, align 1
  %372 = shl i8 %371, 3
  %373 = and i8 %372, 24
  %374 = or i8 %373, %369
  %375 = lshr i8 %371, 2
  %376 = load i8, i8* %361, align 1
  %377 = lshr i8 %376, 5
  %378 = getelementptr inbounds i8, i8* %361, i64 1
  %379 = load i8, i8* %378, align 1
  %380 = shl i8 %379, 3
  %381 = and i8 %380, 24
  %382 = or i8 %381, %377
  %383 = lshr i8 %379, 5
  %384 = shl i8 %368, 3
  %385 = lshr i8 %368, 2
  %386 = and i8 %385, 7
  %387 = or i8 %386, %384
  %388 = shl nuw i8 %374, 3
  %389 = lshr i8 %374, 2
  %390 = or i8 %388, %389
  %391 = shl i8 %375, 3
  %392 = lshr i8 %371, 4
  %393 = and i8 %392, 7
  %394 = or i8 %391, %393
  %395 = shl i8 %376, 3
  %396 = lshr i8 %376, 2
  %397 = and i8 %396, 7
  %398 = or i8 %397, %395
  %399 = shl nuw i8 %382, 3
  %400 = lshr i8 %382, 2
  %401 = or i8 %399, %400
  %402 = and i8 %379, -8
  %403 = or i8 %402, %383
  %404 = zext i8 %387 to i32
  %405 = zext i8 %398 to i32
  %406 = add nuw nsw i32 %404, 1
  %407 = add nuw nsw i32 %406, %405
  %408 = lshr i32 %407, 1
  %409 = zext i8 %390 to i32
  %410 = zext i8 %401 to i32
  %411 = add nuw nsw i32 %409, 1
  %412 = add nuw nsw i32 %411, %410
  %413 = lshr i32 %412, 1
  %414 = zext i8 %394 to i32
  %415 = zext i8 %403 to i32
  %416 = add nuw nsw i32 %414, 1
  %417 = add nuw nsw i32 %416, %415
  %418 = lshr i32 %417, 1
  %419 = and i32 %408, 255
  %420 = mul nuw nsw i32 %419, 112
  %421 = and i32 %413, 255
  %422 = mul nsw i32 %421, -74
  %423 = and i32 %418, 255
  %424 = mul nsw i32 %423, -38
  %425 = add nsw i32 %424, 32768
  %426 = add nuw nsw i32 %425, %420
  %427 = add nsw i32 %426, %422
  %428 = lshr i32 %427, 8
  %429 = trunc i32 %428 to i8
  store i8 %429, i8* %363, align 1
  %430 = mul nuw nsw i32 %423, 112
  %431 = mul nsw i32 %421, -94
  %432 = mul nsw i32 %419, -18
  %433 = or i32 %430, 32768
  %434 = add nsw i32 %433, %432
  %435 = add nsw i32 %434, %431
  %436 = lshr i32 %435, 8
  %437 = trunc i32 %436 to i8
  store i8 %437, i8* %362, align 1
  br label %438

438:                                              ; preds = %360, %367
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGB4444ToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i8, i8* %0, i64 %6
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %304

10:                                               ; preds = %5
  %11 = add i32 %4, -2
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 16
  br i1 %15, label %178, label %16

16:                                               ; preds = %10
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = shl nuw nsw i64 %19, 2
  %24 = add nsw i64 %23, %6
  %25 = add nsw i64 %24, 4
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add nuw nsw i64 %23, 4
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = icmp ugt i8* %22, %2
  %30 = icmp ugt i8* %21, %3
  %31 = and i1 %29, %30
  %32 = icmp ugt i8* %26, %2
  %33 = icmp ult i8* %7, %21
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %21, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %26, %3
  %41 = icmp ult i8* %7, %22
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  %44 = icmp ugt i8* %28, %3
  %45 = icmp ugt i8* %22, %0
  %46 = and i1 %44, %45
  %47 = or i1 %43, %46
  br i1 %47, label %178, label %48

48:                                               ; preds = %16
  %49 = and i64 %14, 4294967280
  %50 = shl nuw nsw i64 %49, 2
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = getelementptr i8, i8* %2, i64 %49
  %53 = getelementptr i8, i8* %3, i64 %49
  %54 = shl nuw nsw i64 %49, 2
  %55 = getelementptr i8, i8* %7, i64 %54
  %56 = trunc i64 %49 to i32
  %57 = shl i32 %56, 1
  br label %58

58:                                               ; preds = %58, %48
  %59 = phi i64 [ 0, %48 ], [ %174, %58 ]
  %60 = shl i64 %59, 2
  %61 = getelementptr i8, i8* %0, i64 %60
  %62 = getelementptr i8, i8* %2, i64 %59
  %63 = getelementptr i8, i8* %3, i64 %59
  %64 = shl i64 %59, 2
  %65 = getelementptr i8, i8* %7, i64 %64
  %66 = bitcast i8* %61 to <64 x i8>*
  %67 = load <64 x i8>, <64 x i8>* %66, align 1
  %68 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %69 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %70 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %71 = shufflevector <64 x i8> %67, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %72 = and <16 x i8> %68, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %73 = lshr <16 x i8> %68, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %74 = and <16 x i8> %69, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %75 = and <16 x i8> %70, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %76 = lshr <16 x i8> %70, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %77 = and <16 x i8> %71, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %78 = bitcast i8* %65 to <64 x i8>*
  %79 = load <64 x i8>, <64 x i8>* %78, align 1
  %80 = shufflevector <64 x i8> %79, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %81 = shufflevector <64 x i8> %79, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %82 = shufflevector <64 x i8> %79, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %83 = shufflevector <64 x i8> %79, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %84 = and <16 x i8> %80, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %85 = lshr <16 x i8> %80, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %86 = and <16 x i8> %81, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %87 = and <16 x i8> %82, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %88 = lshr <16 x i8> %82, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %89 = and <16 x i8> %83, <i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15, i8 15>
  %90 = shl <16 x i8> %68, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %91 = or <16 x i8> %90, %72
  %92 = and <16 x i8> %68, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %93 = or <16 x i8> %92, %73
  %94 = shl <16 x i8> %69, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %95 = or <16 x i8> %94, %74
  %96 = shl <16 x i8> %70, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %97 = or <16 x i8> %96, %75
  %98 = and <16 x i8> %70, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %99 = or <16 x i8> %98, %76
  %100 = shl <16 x i8> %71, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %101 = or <16 x i8> %100, %77
  %102 = shl <16 x i8> %80, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %103 = or <16 x i8> %102, %84
  %104 = and <16 x i8> %80, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %105 = or <16 x i8> %104, %85
  %106 = shl <16 x i8> %81, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %107 = or <16 x i8> %106, %86
  %108 = shl <16 x i8> %82, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %109 = or <16 x i8> %108, %87
  %110 = and <16 x i8> %82, <i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16, i8 -16>
  %111 = or <16 x i8> %110, %88
  %112 = shl <16 x i8> %83, <i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4, i8 4>
  %113 = or <16 x i8> %112, %89
  %114 = zext <16 x i8> %91 to <16 x i32>
  %115 = zext <16 x i8> %103 to <16 x i32>
  %116 = add nuw nsw <16 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %117 = add nuw nsw <16 x i32> %116, %115
  %118 = lshr <16 x i32> %117, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = zext <16 x i8> %97 to <16 x i32>
  %120 = zext <16 x i8> %109 to <16 x i32>
  %121 = add nuw nsw <16 x i32> %119, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %122 = add nuw nsw <16 x i32> %121, %120
  %123 = lshr <16 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = add nuw nsw <16 x i32> %118, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %125 = add nuw nsw <16 x i32> %124, %123
  %126 = lshr <16 x i32> %125, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %127 = zext <16 x i8> %93 to <16 x i32>
  %128 = zext <16 x i8> %105 to <16 x i32>
  %129 = add nuw nsw <16 x i32> %127, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %130 = add nuw nsw <16 x i32> %129, %128
  %131 = lshr <16 x i32> %130, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %132 = zext <16 x i8> %99 to <16 x i32>
  %133 = zext <16 x i8> %111 to <16 x i32>
  %134 = add nuw nsw <16 x i32> %132, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %135 = add nuw nsw <16 x i32> %134, %133
  %136 = lshr <16 x i32> %135, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %137 = add nuw nsw <16 x i32> %131, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %138 = add nuw nsw <16 x i32> %137, %136
  %139 = lshr <16 x i32> %138, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %140 = zext <16 x i8> %95 to <16 x i32>
  %141 = zext <16 x i8> %107 to <16 x i32>
  %142 = add nuw nsw <16 x i32> %140, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %143 = add nuw nsw <16 x i32> %142, %141
  %144 = lshr <16 x i32> %143, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %145 = zext <16 x i8> %101 to <16 x i32>
  %146 = zext <16 x i8> %113 to <16 x i32>
  %147 = add nuw nsw <16 x i32> %145, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %148 = add nuw nsw <16 x i32> %147, %146
  %149 = lshr <16 x i32> %148, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %150 = add nuw nsw <16 x i32> %144, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %151 = add nuw nsw <16 x i32> %150, %149
  %152 = lshr <16 x i32> %151, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %153 = and <16 x i32> %126, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %154 = mul nuw nsw <16 x i32> %153, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %155 = and <16 x i32> %139, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %156 = mul nsw <16 x i32> %155, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %157 = and <16 x i32> %152, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %158 = mul nsw <16 x i32> %157, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %159 = add nsw <16 x i32> %156, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %160 = add nuw nsw <16 x i32> %159, %154
  %161 = add nsw <16 x i32> %160, %158
  %162 = lshr <16 x i32> %161, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %163 = trunc <16 x i32> %162 to <16 x i8>
  %164 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %163, <16 x i8>* %164, align 1, !alias.scope !182, !noalias !185
  %165 = mul nuw nsw <16 x i32> %157, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %166 = mul nsw <16 x i32> %155, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %167 = mul nsw <16 x i32> %153, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %168 = or <16 x i32> %165, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %169 = add nsw <16 x i32> %167, %166
  %170 = add nsw <16 x i32> %169, %168
  %171 = lshr <16 x i32> %170, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %172 = trunc <16 x i32> %171 to <16 x i8>
  %173 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %172, <16 x i8>* %173, align 1, !alias.scope !189, !noalias !190
  %174 = add i64 %59, 16
  %175 = icmp eq i64 %174, %49
  br i1 %175, label %176, label %58, !llvm.loop !191

176:                                              ; preds = %58
  %177 = icmp eq i64 %49, %14
  br i1 %177, label %304, label %178

178:                                              ; preds = %176, %16, %10
  %179 = phi i8* [ %0, %16 ], [ %0, %10 ], [ %51, %176 ]
  %180 = phi i8* [ %2, %16 ], [ %2, %10 ], [ %52, %176 ]
  %181 = phi i8* [ %3, %16 ], [ %3, %10 ], [ %53, %176 ]
  %182 = phi i8* [ %7, %16 ], [ %7, %10 ], [ %55, %176 ]
  %183 = phi i32 [ 0, %16 ], [ 0, %10 ], [ %57, %176 ]
  br label %184

184:                                              ; preds = %178, %184
  %185 = phi i8* [ %298, %184 ], [ %179, %178 ]
  %186 = phi i8* [ %300, %184 ], [ %180, %178 ]
  %187 = phi i8* [ %301, %184 ], [ %181, %178 ]
  %188 = phi i8* [ %299, %184 ], [ %182, %178 ]
  %189 = phi i32 [ %302, %184 ], [ %183, %178 ]
  %190 = load i8, i8* %185, align 1
  %191 = and i8 %190, 15
  %192 = lshr i8 %190, 4
  %193 = getelementptr inbounds i8, i8* %185, i64 1
  %194 = load i8, i8* %193, align 1
  %195 = and i8 %194, 15
  %196 = getelementptr inbounds i8, i8* %185, i64 2
  %197 = load i8, i8* %196, align 1
  %198 = and i8 %197, 15
  %199 = lshr i8 %197, 4
  %200 = getelementptr inbounds i8, i8* %185, i64 3
  %201 = load i8, i8* %200, align 1
  %202 = and i8 %201, 15
  %203 = load i8, i8* %188, align 1
  %204 = and i8 %203, 15
  %205 = lshr i8 %203, 4
  %206 = getelementptr inbounds i8, i8* %188, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = and i8 %207, 15
  %209 = getelementptr inbounds i8, i8* %188, i64 2
  %210 = load i8, i8* %209, align 1
  %211 = and i8 %210, 15
  %212 = lshr i8 %210, 4
  %213 = getelementptr inbounds i8, i8* %188, i64 3
  %214 = load i8, i8* %213, align 1
  %215 = and i8 %214, 15
  %216 = shl i8 %190, 4
  %217 = or i8 %216, %191
  %218 = and i8 %190, -16
  %219 = or i8 %218, %192
  %220 = shl i8 %194, 4
  %221 = or i8 %220, %195
  %222 = shl i8 %197, 4
  %223 = or i8 %222, %198
  %224 = and i8 %197, -16
  %225 = or i8 %224, %199
  %226 = shl i8 %201, 4
  %227 = or i8 %226, %202
  %228 = shl i8 %203, 4
  %229 = or i8 %228, %204
  %230 = and i8 %203, -16
  %231 = or i8 %230, %205
  %232 = shl i8 %207, 4
  %233 = or i8 %232, %208
  %234 = shl i8 %210, 4
  %235 = or i8 %234, %211
  %236 = and i8 %210, -16
  %237 = or i8 %236, %212
  %238 = shl i8 %214, 4
  %239 = or i8 %238, %215
  %240 = zext i8 %217 to i32
  %241 = zext i8 %229 to i32
  %242 = add nuw nsw i32 %240, 1
  %243 = add nuw nsw i32 %242, %241
  %244 = lshr i32 %243, 1
  %245 = zext i8 %223 to i32
  %246 = zext i8 %235 to i32
  %247 = add nuw nsw i32 %245, 1
  %248 = add nuw nsw i32 %247, %246
  %249 = lshr i32 %248, 1
  %250 = add nuw nsw i32 %244, 1
  %251 = add nuw nsw i32 %250, %249
  %252 = lshr i32 %251, 1
  %253 = zext i8 %219 to i32
  %254 = zext i8 %231 to i32
  %255 = add nuw nsw i32 %253, 1
  %256 = add nuw nsw i32 %255, %254
  %257 = lshr i32 %256, 1
  %258 = zext i8 %225 to i32
  %259 = zext i8 %237 to i32
  %260 = add nuw nsw i32 %258, 1
  %261 = add nuw nsw i32 %260, %259
  %262 = lshr i32 %261, 1
  %263 = add nuw nsw i32 %257, 1
  %264 = add nuw nsw i32 %263, %262
  %265 = lshr i32 %264, 1
  %266 = zext i8 %221 to i32
  %267 = zext i8 %233 to i32
  %268 = add nuw nsw i32 %266, 1
  %269 = add nuw nsw i32 %268, %267
  %270 = lshr i32 %269, 1
  %271 = zext i8 %227 to i32
  %272 = zext i8 %239 to i32
  %273 = add nuw nsw i32 %271, 1
  %274 = add nuw nsw i32 %273, %272
  %275 = lshr i32 %274, 1
  %276 = add nuw nsw i32 %270, 1
  %277 = add nuw nsw i32 %276, %275
  %278 = lshr i32 %277, 1
  %279 = and i32 %252, 255
  %280 = mul nuw nsw i32 %279, 112
  %281 = and i32 %265, 255
  %282 = mul nsw i32 %281, -74
  %283 = and i32 %278, 255
  %284 = mul nsw i32 %283, -38
  %285 = add nsw i32 %282, 32768
  %286 = add nuw nsw i32 %285, %280
  %287 = add nsw i32 %286, %284
  %288 = lshr i32 %287, 8
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %186, align 1
  %290 = mul nuw nsw i32 %283, 112
  %291 = mul nsw i32 %281, -94
  %292 = mul nsw i32 %279, -18
  %293 = or i32 %290, 32768
  %294 = add nsw i32 %292, %291
  %295 = add nsw i32 %294, %293
  %296 = lshr i32 %295, 8
  %297 = trunc i32 %296 to i8
  store i8 %297, i8* %187, align 1
  %298 = getelementptr inbounds i8, i8* %185, i64 4
  %299 = getelementptr inbounds i8, i8* %188, i64 4
  %300 = getelementptr inbounds i8, i8* %186, i64 1
  %301 = getelementptr inbounds i8, i8* %187, i64 1
  %302 = add nuw nsw i32 %189, 2
  %303 = icmp slt i32 %302, %8
  br i1 %303, label %184, label %304, !llvm.loop !192

304:                                              ; preds = %184, %176, %5
  %305 = phi i8* [ %7, %5 ], [ %55, %176 ], [ %299, %184 ]
  %306 = phi i8* [ %3, %5 ], [ %53, %176 ], [ %301, %184 ]
  %307 = phi i8* [ %2, %5 ], [ %52, %176 ], [ %300, %184 ]
  %308 = phi i8* [ %0, %5 ], [ %51, %176 ], [ %298, %184 ]
  %309 = and i32 %4, 1
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %370, label %311

311:                                              ; preds = %304
  %312 = load i8, i8* %308, align 1
  %313 = and i8 %312, 15
  %314 = lshr i8 %312, 4
  %315 = getelementptr inbounds i8, i8* %308, i64 1
  %316 = load i8, i8* %315, align 1
  %317 = and i8 %316, 15
  %318 = load i8, i8* %305, align 1
  %319 = and i8 %318, 15
  %320 = lshr i8 %318, 4
  %321 = getelementptr inbounds i8, i8* %305, i64 1
  %322 = load i8, i8* %321, align 1
  %323 = and i8 %322, 15
  %324 = shl i8 %312, 4
  %325 = or i8 %324, %313
  %326 = and i8 %312, -16
  %327 = or i8 %326, %314
  %328 = shl i8 %316, 4
  %329 = or i8 %328, %317
  %330 = shl i8 %318, 4
  %331 = or i8 %330, %319
  %332 = and i8 %318, -16
  %333 = or i8 %332, %320
  %334 = shl i8 %322, 4
  %335 = or i8 %334, %323
  %336 = zext i8 %325 to i32
  %337 = zext i8 %331 to i32
  %338 = add nuw nsw i32 %336, 1
  %339 = add nuw nsw i32 %338, %337
  %340 = lshr i32 %339, 1
  %341 = zext i8 %327 to i32
  %342 = zext i8 %333 to i32
  %343 = add nuw nsw i32 %341, 1
  %344 = add nuw nsw i32 %343, %342
  %345 = lshr i32 %344, 1
  %346 = zext i8 %329 to i32
  %347 = zext i8 %335 to i32
  %348 = add nuw nsw i32 %346, 1
  %349 = add nuw nsw i32 %348, %347
  %350 = lshr i32 %349, 1
  %351 = and i32 %340, 255
  %352 = mul nuw nsw i32 %351, 112
  %353 = and i32 %345, 255
  %354 = mul nsw i32 %353, -74
  %355 = and i32 %350, 255
  %356 = mul nsw i32 %355, -38
  %357 = add nsw i32 %354, 32768
  %358 = add nuw nsw i32 %357, %352
  %359 = add nsw i32 %358, %356
  %360 = lshr i32 %359, 8
  %361 = trunc i32 %360 to i8
  store i8 %361, i8* %307, align 1
  %362 = mul nuw nsw i32 %355, 112
  %363 = mul nsw i32 %353, -94
  %364 = mul nsw i32 %351, -18
  %365 = or i32 %362, 32768
  %366 = add nsw i32 %364, %363
  %367 = add nsw i32 %366, %365
  %368 = lshr i32 %367, 8
  %369 = trunc i32 %368 to i8
  store i8 %369, i8* %306, align 1
  br label %370

370:                                              ; preds = %304, %311
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBToUV444Row_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %114

6:                                                ; preds = %4
  %7 = add i32 %3, -1
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %8, 1
  %10 = icmp ult i64 %9, 17
  br i1 %10, label %75, label %11

11:                                               ; preds = %6
  %12 = add i32 %3, -1
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %13, 1
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = getelementptr i8, i8* %2, i64 %14
  %17 = shl nuw nsw i64 %13, 2
  %18 = or i64 %17, 3
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = icmp ugt i8* %16, %1
  %21 = icmp ugt i8* %15, %2
  %22 = and i1 %20, %21
  %23 = icmp ugt i8* %19, %1
  %24 = icmp ugt i8* %15, %0
  %25 = and i1 %23, %24
  %26 = or i1 %22, %25
  %27 = icmp ugt i8* %19, %2
  %28 = icmp ugt i8* %16, %0
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %75, label %31

31:                                               ; preds = %11
  %32 = and i64 %9, 15
  %33 = icmp eq i64 %32, 0
  %34 = select i1 %33, i64 16, i64 %32
  %35 = sub nsw i64 %9, %34
  %36 = shl nsw i64 %35, 2
  %37 = getelementptr i8, i8* %0, i64 %36
  %38 = getelementptr i8, i8* %1, i64 %35
  %39 = getelementptr i8, i8* %2, i64 %35
  %40 = trunc i64 %35 to i32
  br label %41

41:                                               ; preds = %41, %31
  %42 = phi i64 [ 0, %31 ], [ %73, %41 ]
  %43 = shl i64 %42, 2
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = getelementptr i8, i8* %1, i64 %42
  %46 = getelementptr i8, i8* %2, i64 %42
  %47 = bitcast i8* %44 to <64 x i8>*
  %48 = load <64 x i8>, <64 x i8>* %47, align 1
  %49 = shufflevector <64 x i8> %48, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %50 = shufflevector <64 x i8> %48, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %51 = shufflevector <64 x i8> %48, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %52 = zext <16 x i8> %49 to <16 x i32>
  %53 = mul nuw nsw <16 x i32> %52, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %54 = zext <16 x i8> %50 to <16 x i32>
  %55 = mul nsw <16 x i32> %54, <i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74, i32 -74>
  %56 = zext <16 x i8> %51 to <16 x i32>
  %57 = mul nsw <16 x i32> %56, <i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38, i32 -38>
  %58 = or <16 x i32> %53, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %59 = add nsw <16 x i32> %58, %55
  %60 = add nsw <16 x i32> %59, %57
  %61 = lshr <16 x i32> %60, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %62 = trunc <16 x i32> %61 to <16 x i8>
  %63 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %63, align 1, !alias.scope !193, !noalias !196
  %64 = mul nuw nsw <16 x i32> %56, <i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112, i32 112>
  %65 = mul nsw <16 x i32> %54, <i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94, i32 -94>
  %66 = mul nsw <16 x i32> %52, <i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18, i32 -18>
  %67 = or <16 x i32> %64, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %68 = add nsw <16 x i32> %65, %66
  %69 = add nsw <16 x i32> %68, %67
  %70 = lshr <16 x i32> %69, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %71 = trunc <16 x i32> %70 to <16 x i8>
  %72 = bitcast i8* %46 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %72, align 1, !alias.scope !199, !noalias !200
  %73 = add i64 %42, 16
  %74 = icmp eq i64 %73, %35
  br i1 %74, label %75, label %41, !llvm.loop !201

75:                                               ; preds = %41, %11, %6
  %76 = phi i8* [ %0, %11 ], [ %0, %6 ], [ %37, %41 ]
  %77 = phi i8* [ %1, %11 ], [ %1, %6 ], [ %38, %41 ]
  %78 = phi i8* [ %2, %11 ], [ %2, %6 ], [ %39, %41 ]
  %79 = phi i32 [ 0, %11 ], [ 0, %6 ], [ %40, %41 ]
  br label %80

80:                                               ; preds = %75, %80
  %81 = phi i8* [ %109, %80 ], [ %76, %75 ]
  %82 = phi i8* [ %110, %80 ], [ %77, %75 ]
  %83 = phi i8* [ %111, %80 ], [ %78, %75 ]
  %84 = phi i32 [ %112, %80 ], [ %79, %75 ]
  %85 = load i8, i8* %81, align 1
  %86 = getelementptr inbounds i8, i8* %81, i64 1
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %81, i64 2
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %85 to i32
  %91 = mul nuw nsw i32 %90, 112
  %92 = zext i8 %87 to i32
  %93 = mul nsw i32 %92, -74
  %94 = zext i8 %89 to i32
  %95 = mul nsw i32 %94, -38
  %96 = or i32 %91, 32768
  %97 = add nsw i32 %96, %93
  %98 = add nsw i32 %97, %95
  %99 = lshr i32 %98, 8
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %82, align 1
  %101 = mul nuw nsw i32 %94, 112
  %102 = mul nsw i32 %92, -94
  %103 = mul nsw i32 %90, -18
  %104 = or i32 %101, 32768
  %105 = add nsw i32 %102, %103
  %106 = add nsw i32 %105, %104
  %107 = lshr i32 %106, 8
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %83, align 1
  %109 = getelementptr inbounds i8, i8* %81, i64 4
  %110 = getelementptr inbounds i8, i8* %82, i64 1
  %111 = getelementptr inbounds i8, i8* %83, i64 1
  %112 = add nuw nsw i32 %84, 1
  %113 = icmp eq i32 %112, %3
  br i1 %113, label %114, label %80, !llvm.loop !202

114:                                              ; preds = %80, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBGrayRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %34

5:                                                ; preds = %3, %5
  %6 = phi i8* [ %31, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %32, %5 ], [ 0, %3 ]
  %8 = phi i8* [ %30, %5 ], [ %1, %3 ]
  %9 = getelementptr inbounds i8, i8* %6, i64 2
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds i8, i8* %6, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = load i8, i8* %6, align 1
  %14 = zext i8 %10 to i32
  %15 = mul nuw nsw i32 %14, 77
  %16 = zext i8 %12 to i32
  %17 = mul nuw nsw i32 %16, 150
  %18 = zext i8 %13 to i32
  %19 = mul nuw nsw i32 %18, 29
  %20 = add nuw nsw i32 %15, 128
  %21 = add nuw nsw i32 %20, %17
  %22 = add nuw nsw i32 %21, %19
  %23 = lshr i32 %22, 8
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %8, align 1
  %25 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %8, i64 2
  store i8 %24, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %6, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %8, i64 3
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %8, i64 4
  %31 = getelementptr inbounds i8, i8* %6, i64 4
  %32 = add nuw nsw i32 %7, 1
  %33 = icmp eq i32 %32, %2
  br i1 %33, label %34, label %5

34:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBSepiaRow_C(i8* nocapture, i32) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %43

4:                                                ; preds = %2, %4
  %5 = phi i8* [ %40, %4 ], [ %0, %2 ]
  %6 = phi i32 [ %41, %4 ], [ 0, %2 ]
  %7 = load i8, i8* %5, align 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds i8, i8* %5, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %5, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = mul nuw nsw i32 %8, 17
  %16 = mul nuw nsw i32 %11, 68
  %17 = add nuw nsw i32 %16, %15
  %18 = mul nuw nsw i32 %14, 35
  %19 = add nuw nsw i32 %17, %18
  %20 = lshr i32 %19, 7
  %21 = mul nuw nsw i32 %8, 22
  %22 = mul nuw nsw i32 %11, 88
  %23 = add nuw nsw i32 %22, %21
  %24 = mul nuw nsw i32 %14, 45
  %25 = add nuw nsw i32 %23, %24
  %26 = lshr i32 %25, 7
  %27 = mul nuw nsw i32 %8, 24
  %28 = mul nuw nsw i32 %11, 98
  %29 = add nuw nsw i32 %28, %27
  %30 = mul nuw nsw i32 %14, 50
  %31 = add nuw nsw i32 %29, %30
  %32 = lshr i32 %31, 7
  %33 = trunc i32 %20 to i8
  store i8 %33, i8* %5, align 1
  %34 = icmp ugt i32 %25, 32639
  %35 = select i1 %34, i32 255, i32 %26
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %9, align 1
  %37 = icmp ugt i32 %31, 32639
  %38 = select i1 %37, i32 255, i32 %32
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %12, align 1
  %40 = getelementptr inbounds i8, i8* %5, i64 4
  %41 = add nuw nsw i32 %6, 1
  %42 = icmp eq i32 %41, %1
  br i1 %42, label %43, label %4

43:                                               ; preds = %4, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBColorMatrixRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %314

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %2, i64 1
  %8 = getelementptr inbounds i8, i8* %2, i64 2
  %9 = getelementptr inbounds i8, i8* %2, i64 3
  %10 = getelementptr inbounds i8, i8* %2, i64 4
  %11 = getelementptr inbounds i8, i8* %2, i64 5
  %12 = getelementptr inbounds i8, i8* %2, i64 6
  %13 = getelementptr inbounds i8, i8* %2, i64 7
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = getelementptr inbounds i8, i8* %2, i64 9
  %16 = getelementptr inbounds i8, i8* %2, i64 10
  %17 = getelementptr inbounds i8, i8* %2, i64 11
  %18 = getelementptr inbounds i8, i8* %2, i64 12
  %19 = getelementptr inbounds i8, i8* %2, i64 13
  %20 = getelementptr inbounds i8, i8* %2, i64 14
  %21 = getelementptr inbounds i8, i8* %2, i64 15
  %22 = add i32 %3, -1
  %23 = zext i32 %22 to i64
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 16
  br i1 %25, label %196, label %26

26:                                               ; preds = %6
  %27 = add i32 %3, -1
  %28 = zext i32 %27 to i64
  %29 = shl nuw nsw i64 %28, 2
  %30 = add nuw nsw i64 %29, 4
  %31 = getelementptr i8, i8* %1, i64 %30
  %32 = getelementptr i8, i8* %0, i64 %30
  %33 = getelementptr i8, i8* %2, i64 16
  %34 = icmp ugt i8* %32, %1
  %35 = icmp ugt i8* %31, %0
  %36 = and i1 %34, %35
  %37 = icmp ugt i8* %33, %1
  %38 = icmp ult i8* %21, %31
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %196, label %41

41:                                               ; preds = %26
  %42 = and i64 %24, 8589934576
  %43 = shl nuw nsw i64 %42, 2
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = shl nuw nsw i64 %42, 2
  %46 = getelementptr i8, i8* %1, i64 %45
  %47 = trunc i64 %42 to i32
  br label %48

48:                                               ; preds = %48, %41
  %49 = phi i64 [ 0, %41 ], [ %192, %48 ]
  %50 = shl i64 %49, 2
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = shl i64 %49, 2
  %53 = bitcast i8* %51 to <64 x i8>*
  %54 = load <64 x i8>, <64 x i8>* %53, align 1
  %55 = shufflevector <64 x i8> %54, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %56 = shufflevector <64 x i8> %54, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %57 = shufflevector <64 x i8> %54, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %58 = shufflevector <64 x i8> %54, <64 x i8> undef, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31, i32 35, i32 39, i32 43, i32 47, i32 51, i32 55, i32 59, i32 63>
  %59 = zext <16 x i8> %55 to <16 x i32>
  %60 = zext <16 x i8> %56 to <16 x i32>
  %61 = zext <16 x i8> %57 to <16 x i32>
  %62 = zext <16 x i8> %58 to <16 x i32>
  %63 = load i8, i8* %2, align 1, !alias.scope !203
  %64 = insertelement <16 x i8> undef, i8 %63, i32 0
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> zeroinitializer
  %66 = sext <16 x i8> %65 to <16 x i32>
  %67 = mul nsw <16 x i32> %66, %59
  %68 = load i8, i8* %7, align 1, !alias.scope !203
  %69 = insertelement <16 x i8> undef, i8 %68, i32 0
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <16 x i32> zeroinitializer
  %71 = sext <16 x i8> %70 to <16 x i32>
  %72 = mul nsw <16 x i32> %71, %60
  %73 = add nsw <16 x i32> %72, %67
  %74 = load i8, i8* %8, align 1, !alias.scope !203
  %75 = insertelement <16 x i8> undef, i8 %74, i32 0
  %76 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> zeroinitializer
  %77 = sext <16 x i8> %76 to <16 x i32>
  %78 = mul nsw <16 x i32> %77, %61
  %79 = add nsw <16 x i32> %73, %78
  %80 = load i8, i8* %9, align 1, !alias.scope !203
  %81 = insertelement <16 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> zeroinitializer
  %83 = sext <16 x i8> %82 to <16 x i32>
  %84 = mul nsw <16 x i32> %83, %62
  %85 = add nsw <16 x i32> %79, %84
  %86 = ashr <16 x i32> %85, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %87 = load i8, i8* %10, align 1, !alias.scope !203
  %88 = insertelement <16 x i8> undef, i8 %87, i32 0
  %89 = shufflevector <16 x i8> %88, <16 x i8> undef, <16 x i32> zeroinitializer
  %90 = sext <16 x i8> %89 to <16 x i32>
  %91 = mul nsw <16 x i32> %90, %59
  %92 = load i8, i8* %11, align 1, !alias.scope !203
  %93 = insertelement <16 x i8> undef, i8 %92, i32 0
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> zeroinitializer
  %95 = sext <16 x i8> %94 to <16 x i32>
  %96 = mul nsw <16 x i32> %95, %60
  %97 = add nsw <16 x i32> %96, %91
  %98 = load i8, i8* %12, align 1, !alias.scope !203
  %99 = insertelement <16 x i8> undef, i8 %98, i32 0
  %100 = shufflevector <16 x i8> %99, <16 x i8> undef, <16 x i32> zeroinitializer
  %101 = sext <16 x i8> %100 to <16 x i32>
  %102 = mul nsw <16 x i32> %101, %61
  %103 = add nsw <16 x i32> %97, %102
  %104 = load i8, i8* %13, align 1, !alias.scope !203
  %105 = insertelement <16 x i8> undef, i8 %104, i32 0
  %106 = shufflevector <16 x i8> %105, <16 x i8> undef, <16 x i32> zeroinitializer
  %107 = sext <16 x i8> %106 to <16 x i32>
  %108 = mul nsw <16 x i32> %107, %62
  %109 = add nsw <16 x i32> %103, %108
  %110 = ashr <16 x i32> %109, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %111 = load i8, i8* %14, align 1, !alias.scope !203
  %112 = insertelement <16 x i8> undef, i8 %111, i32 0
  %113 = shufflevector <16 x i8> %112, <16 x i8> undef, <16 x i32> zeroinitializer
  %114 = sext <16 x i8> %113 to <16 x i32>
  %115 = mul nsw <16 x i32> %114, %59
  %116 = load i8, i8* %15, align 1, !alias.scope !203
  %117 = insertelement <16 x i8> undef, i8 %116, i32 0
  %118 = shufflevector <16 x i8> %117, <16 x i8> undef, <16 x i32> zeroinitializer
  %119 = sext <16 x i8> %118 to <16 x i32>
  %120 = mul nsw <16 x i32> %119, %60
  %121 = add nsw <16 x i32> %120, %115
  %122 = load i8, i8* %16, align 1, !alias.scope !203
  %123 = insertelement <16 x i8> undef, i8 %122, i32 0
  %124 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> zeroinitializer
  %125 = sext <16 x i8> %124 to <16 x i32>
  %126 = mul nsw <16 x i32> %125, %61
  %127 = add nsw <16 x i32> %121, %126
  %128 = load i8, i8* %17, align 1, !alias.scope !203
  %129 = insertelement <16 x i8> undef, i8 %128, i32 0
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> zeroinitializer
  %131 = sext <16 x i8> %130 to <16 x i32>
  %132 = mul nsw <16 x i32> %131, %62
  %133 = add nsw <16 x i32> %127, %132
  %134 = ashr <16 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %135 = load i8, i8* %18, align 1, !alias.scope !203
  %136 = insertelement <16 x i8> undef, i8 %135, i32 0
  %137 = shufflevector <16 x i8> %136, <16 x i8> undef, <16 x i32> zeroinitializer
  %138 = sext <16 x i8> %137 to <16 x i32>
  %139 = mul nsw <16 x i32> %138, %59
  %140 = load i8, i8* %19, align 1, !alias.scope !203
  %141 = insertelement <16 x i8> undef, i8 %140, i32 0
  %142 = shufflevector <16 x i8> %141, <16 x i8> undef, <16 x i32> zeroinitializer
  %143 = sext <16 x i8> %142 to <16 x i32>
  %144 = mul nsw <16 x i32> %143, %60
  %145 = add nsw <16 x i32> %144, %139
  %146 = load i8, i8* %20, align 1, !alias.scope !203
  %147 = insertelement <16 x i8> undef, i8 %146, i32 0
  %148 = shufflevector <16 x i8> %147, <16 x i8> undef, <16 x i32> zeroinitializer
  %149 = sext <16 x i8> %148 to <16 x i32>
  %150 = mul nsw <16 x i32> %149, %61
  %151 = add nsw <16 x i32> %145, %150
  %152 = load i8, i8* %21, align 1, !alias.scope !203
  %153 = insertelement <16 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> zeroinitializer
  %155 = sext <16 x i8> %154 to <16 x i32>
  %156 = mul nsw <16 x i32> %155, %62
  %157 = add nsw <16 x i32> %151, %156
  %158 = ashr <16 x i32> %157, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %159 = lshr <16 x i32> %86, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %160 = xor <16 x i32> %159, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %161 = sub nsw <16 x i32> zeroinitializer, %160
  %162 = and <16 x i32> %86, %161
  %163 = icmp slt <16 x i32> %162, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %164 = select <16 x i1> %163, <16 x i32> %162, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %165 = trunc <16 x i32> %164 to <16 x i8>
  %166 = lshr <16 x i32> %110, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %167 = xor <16 x i32> %166, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %168 = sub nsw <16 x i32> zeroinitializer, %167
  %169 = and <16 x i32> %110, %168
  %170 = icmp slt <16 x i32> %169, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %171 = select <16 x i1> %170, <16 x i32> %169, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %172 = trunc <16 x i32> %171 to <16 x i8>
  %173 = lshr <16 x i32> %134, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %174 = xor <16 x i32> %173, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %175 = sub nsw <16 x i32> zeroinitializer, %174
  %176 = and <16 x i32> %134, %175
  %177 = icmp slt <16 x i32> %176, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %178 = select <16 x i1> %177, <16 x i32> %176, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %179 = trunc <16 x i32> %178 to <16 x i8>
  %180 = lshr <16 x i32> %158, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %181 = xor <16 x i32> %180, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %182 = sub nsw <16 x i32> zeroinitializer, %181
  %183 = and <16 x i32> %158, %182
  %184 = icmp slt <16 x i32> %183, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %185 = select <16 x i1> %184, <16 x i32> %183, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %186 = trunc <16 x i32> %185 to <16 x i8>
  %187 = getelementptr inbounds i8, i8* %1, i64 %52
  %188 = bitcast i8* %187 to <64 x i8>*
  %189 = shufflevector <16 x i8> %165, <16 x i8> %172, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %190 = shufflevector <16 x i8> %179, <16 x i8> %186, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %191 = shufflevector <32 x i8> %189, <32 x i8> %190, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %191, <64 x i8>* %188, align 1
  %192 = add i64 %49, 16
  %193 = icmp eq i64 %192, %42
  br i1 %193, label %194, label %48, !llvm.loop !206

194:                                              ; preds = %48
  %195 = icmp eq i64 %24, %42
  br i1 %195, label %314, label %196

196:                                              ; preds = %194, %26, %6
  %197 = phi i8* [ %0, %26 ], [ %0, %6 ], [ %44, %194 ]
  %198 = phi i8* [ %1, %26 ], [ %1, %6 ], [ %46, %194 ]
  %199 = phi i32 [ 0, %26 ], [ 0, %6 ], [ %47, %194 ]
  br label %200

200:                                              ; preds = %196, %200
  %201 = phi i8* [ %310, %200 ], [ %197, %196 ]
  %202 = phi i8* [ %311, %200 ], [ %198, %196 ]
  %203 = phi i32 [ %312, %200 ], [ %199, %196 ]
  %204 = load i8, i8* %201, align 1
  %205 = zext i8 %204 to i32
  %206 = getelementptr inbounds i8, i8* %201, i64 1
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = getelementptr inbounds i8, i8* %201, i64 2
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = getelementptr inbounds i8, i8* %201, i64 3
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = load i8, i8* %2, align 1
  %216 = sext i8 %215 to i32
  %217 = mul nsw i32 %216, %205
  %218 = load i8, i8* %7, align 1
  %219 = sext i8 %218 to i32
  %220 = mul nsw i32 %219, %208
  %221 = add nsw i32 %220, %217
  %222 = load i8, i8* %8, align 1
  %223 = sext i8 %222 to i32
  %224 = mul nsw i32 %223, %211
  %225 = add nsw i32 %221, %224
  %226 = load i8, i8* %9, align 1
  %227 = sext i8 %226 to i32
  %228 = mul nsw i32 %227, %214
  %229 = add nsw i32 %225, %228
  %230 = ashr i32 %229, 6
  %231 = load i8, i8* %10, align 1
  %232 = sext i8 %231 to i32
  %233 = mul nsw i32 %232, %205
  %234 = load i8, i8* %11, align 1
  %235 = sext i8 %234 to i32
  %236 = mul nsw i32 %235, %208
  %237 = add nsw i32 %236, %233
  %238 = load i8, i8* %12, align 1
  %239 = sext i8 %238 to i32
  %240 = mul nsw i32 %239, %211
  %241 = add nsw i32 %237, %240
  %242 = load i8, i8* %13, align 1
  %243 = sext i8 %242 to i32
  %244 = mul nsw i32 %243, %214
  %245 = add nsw i32 %241, %244
  %246 = ashr i32 %245, 6
  %247 = load i8, i8* %14, align 1
  %248 = sext i8 %247 to i32
  %249 = mul nsw i32 %248, %205
  %250 = load i8, i8* %15, align 1
  %251 = sext i8 %250 to i32
  %252 = mul nsw i32 %251, %208
  %253 = add nsw i32 %252, %249
  %254 = load i8, i8* %16, align 1
  %255 = sext i8 %254 to i32
  %256 = mul nsw i32 %255, %211
  %257 = add nsw i32 %253, %256
  %258 = load i8, i8* %17, align 1
  %259 = sext i8 %258 to i32
  %260 = mul nsw i32 %259, %214
  %261 = add nsw i32 %257, %260
  %262 = ashr i32 %261, 6
  %263 = load i8, i8* %18, align 1
  %264 = sext i8 %263 to i32
  %265 = mul nsw i32 %264, %205
  %266 = load i8, i8* %19, align 1
  %267 = sext i8 %266 to i32
  %268 = mul nsw i32 %267, %208
  %269 = add nsw i32 %268, %265
  %270 = load i8, i8* %20, align 1
  %271 = sext i8 %270 to i32
  %272 = mul nsw i32 %271, %211
  %273 = add nsw i32 %269, %272
  %274 = load i8, i8* %21, align 1
  %275 = sext i8 %274 to i32
  %276 = mul nsw i32 %275, %214
  %277 = add nsw i32 %273, %276
  %278 = ashr i32 %277, 6
  %279 = lshr i32 %230, 31
  %280 = xor i32 %279, 1
  %281 = sub nsw i32 0, %280
  %282 = and i32 %230, %281
  %283 = icmp slt i32 %282, 255
  %284 = select i1 %283, i32 %282, i32 255
  %285 = trunc i32 %284 to i8
  store i8 %285, i8* %202, align 1
  %286 = lshr i32 %246, 31
  %287 = xor i32 %286, 1
  %288 = sub nsw i32 0, %287
  %289 = and i32 %246, %288
  %290 = icmp slt i32 %289, 255
  %291 = select i1 %290, i32 %289, i32 255
  %292 = trunc i32 %291 to i8
  %293 = getelementptr inbounds i8, i8* %202, i64 1
  store i8 %292, i8* %293, align 1
  %294 = lshr i32 %262, 31
  %295 = xor i32 %294, 1
  %296 = sub nsw i32 0, %295
  %297 = and i32 %262, %296
  %298 = icmp slt i32 %297, 255
  %299 = select i1 %298, i32 %297, i32 255
  %300 = trunc i32 %299 to i8
  %301 = getelementptr inbounds i8, i8* %202, i64 2
  store i8 %300, i8* %301, align 1
  %302 = lshr i32 %278, 31
  %303 = xor i32 %302, 1
  %304 = sub nsw i32 0, %303
  %305 = and i32 %278, %304
  %306 = icmp slt i32 %305, 255
  %307 = select i1 %306, i32 %305, i32 255
  %308 = trunc i32 %307 to i8
  %309 = getelementptr inbounds i8, i8* %202, i64 3
  store i8 %308, i8* %309, align 1
  %310 = getelementptr inbounds i8, i8* %201, i64 4
  %311 = getelementptr inbounds i8, i8* %202, i64 4
  %312 = add nuw nsw i32 %203, 1
  %313 = icmp eq i32 %312, %3
  br i1 %313, label %314, label %200, !llvm.loop !207

314:                                              ; preds = %200, %194, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBColorTableRow_C(i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %37

5:                                                ; preds = %3, %5
  %6 = phi i8* [ %34, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %35, %5 ], [ 0, %3 ]
  %8 = load i8, i8* %6, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds i8, i8* %6, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds i8, i8* %6, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, i8* %6, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = shl nuw nsw i64 %9, 2
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  %21 = load i8, i8* %20, align 1
  store i8 %21, i8* %6, align 1
  %22 = shl nuw nsw i64 %12, 2
  %23 = or i64 %22, 1
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = load i8, i8* %24, align 1
  store i8 %25, i8* %10, align 1
  %26 = shl nuw nsw i64 %15, 2
  %27 = or i64 %26, 2
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %13, align 1
  %30 = shl nuw nsw i64 %18, 2
  %31 = or i64 %30, 3
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %16, align 1
  %34 = getelementptr inbounds i8, i8* %6, i64 4
  %35 = add nuw nsw i32 %7, 1
  %36 = icmp eq i32 %35, %2
  br i1 %36, label %37, label %5

37:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGBColorTableRow_C(i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %30

5:                                                ; preds = %3, %5
  %6 = phi i8* [ %27, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %28, %5 ], [ 0, %3 ]
  %8 = load i8, i8* %6, align 1
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds i8, i8* %6, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds i8, i8* %6, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i64
  %16 = shl nuw nsw i64 %9, 2
  %17 = getelementptr inbounds i8, i8* %1, i64 %16
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %6, align 1
  %19 = shl nuw nsw i64 %12, 2
  %20 = or i64 %19, 1
  %21 = getelementptr inbounds i8, i8* %1, i64 %20
  %22 = load i8, i8* %21, align 1
  store i8 %22, i8* %10, align 1
  %23 = shl nuw nsw i64 %15, 2
  %24 = or i64 %23, 2
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  %26 = load i8, i8* %25, align 1
  store i8 %26, i8* %13, align 1
  %27 = getelementptr inbounds i8, i8* %6, i64 4
  %28 = add nuw nsw i32 %7, 1
  %29 = icmp eq i32 %28, %2
  br i1 %29, label %30, label %5

30:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBQuantizeRow_C(i8* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %36

7:                                                ; preds = %5, %7
  %8 = phi i8* [ %33, %7 ], [ %0, %5 ]
  %9 = phi i32 [ %34, %7 ], [ 0, %5 ]
  %10 = load i8, i8* %8, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %8, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds i8, i8* %8, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nsw i32 %11, %1
  %19 = ashr i32 %18, 16
  %20 = mul nsw i32 %19, %2
  %21 = add nsw i32 %20, %3
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %8, align 1
  %23 = mul nsw i32 %14, %1
  %24 = ashr i32 %23, 16
  %25 = mul nsw i32 %24, %2
  %26 = add nsw i32 %25, %3
  %27 = trunc i32 %26 to i8
  store i8 %27, i8* %12, align 1
  %28 = mul nsw i32 %17, %1
  %29 = ashr i32 %28, 16
  %30 = mul nsw i32 %29, %2
  %31 = add nsw i32 %30, %3
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %15, align 1
  %33 = getelementptr inbounds i8, i8* %8, i64 4
  %34 = add nuw nsw i32 %9, 1
  %35 = icmp eq i32 %34, %4
  br i1 %35, label %36, label %7

36:                                               ; preds = %7, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBShadeRow_C(i8* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = and i32 %3, 255
  %6 = shl nuw nsw i32 %5, 8
  %7 = or i32 %6, %5
  %8 = lshr i32 %3, 8
  %9 = and i32 %8, 255
  %10 = shl nuw nsw i32 %9, 8
  %11 = or i32 %10, %9
  %12 = lshr i32 %3, 16
  %13 = and i32 %12, 255
  %14 = shl nuw nsw i32 %13, 8
  %15 = or i32 %14, %13
  %16 = lshr i32 %3, 24
  %17 = shl nuw nsw i32 %16, 8
  %18 = or i32 %17, %16
  %19 = icmp sgt i32 %2, 0
  br i1 %19, label %20, label %62

20:                                               ; preds = %4, %20
  %21 = phi i8* [ %58, %20 ], [ %0, %4 ]
  %22 = phi i8* [ %59, %20 ], [ %1, %4 ]
  %23 = phi i32 [ %60, %20 ], [ 0, %4 ]
  %24 = load i8, i8* %21, align 1
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 8
  %27 = or i32 %26, %25
  %28 = getelementptr inbounds i8, i8* %21, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 8
  %32 = or i32 %31, %30
  %33 = getelementptr inbounds i8, i8* %21, i64 2
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 8
  %37 = or i32 %36, %35
  %38 = getelementptr inbounds i8, i8* %21, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = or i32 %41, %40
  %43 = mul nuw i32 %27, %7
  %44 = lshr i32 %43, 24
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %22, align 1
  %46 = mul nuw i32 %32, %11
  %47 = lshr i32 %46, 24
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %22, i64 1
  store i8 %48, i8* %49, align 1
  %50 = mul nuw i32 %37, %15
  %51 = lshr i32 %50, 24
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %22, i64 2
  store i8 %52, i8* %53, align 1
  %54 = mul nuw i32 %42, %18
  %55 = lshr i32 %54, 24
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %22, i64 3
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %21, i64 4
  %59 = getelementptr inbounds i8, i8* %22, i64 4
  %60 = add nuw nsw i32 %23, 1
  %61 = icmp eq i32 %60, %2
  br i1 %61, label %62, label %20

62:                                               ; preds = %20, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBMultiplyRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %61

6:                                                ; preds = %4, %6
  %7 = phi i8* [ %56, %6 ], [ %0, %4 ]
  %8 = phi i8* [ %57, %6 ], [ %1, %4 ]
  %9 = phi i8* [ %58, %6 ], [ %2, %4 ]
  %10 = phi i32 [ %59, %6 ], [ 0, %4 ]
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 8
  %14 = or i32 %13, %12
  %15 = getelementptr inbounds i8, i8* %7, i64 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %18, %17
  %20 = getelementptr inbounds i8, i8* %7, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = shl nuw nsw i32 %22, 8
  %24 = or i32 %23, %22
  %25 = getelementptr inbounds i8, i8* %7, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = shl nuw nsw i32 %27, 8
  %29 = or i32 %28, %27
  %30 = load i8, i8* %8, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %8, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = getelementptr inbounds i8, i8* %8, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8, i8* %8, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nuw nsw i32 %14, %31
  %42 = lshr i32 %41, 16
  %43 = trunc i32 %42 to i8
  store i8 %43, i8* %9, align 1
  %44 = mul nuw nsw i32 %19, %34
  %45 = lshr i32 %44, 16
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %46, i8* %47, align 1
  %48 = mul nuw nsw i32 %24, %37
  %49 = lshr i32 %48, 16
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %50, i8* %51, align 1
  %52 = mul nuw nsw i32 %29, %40
  %53 = lshr i32 %52, 16
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %7, i64 4
  %57 = getelementptr inbounds i8, i8* %8, i64 4
  %58 = getelementptr inbounds i8, i8* %9, i64 4
  %59 = add nuw nsw i32 %10, 1
  %60 = icmp eq i32 %59, %3
  br i1 %60, label %61, label %6

61:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBAddRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %57

6:                                                ; preds = %4, %6
  %7 = phi i8* [ %52, %6 ], [ %0, %4 ]
  %8 = phi i8* [ %53, %6 ], [ %1, %4 ]
  %9 = phi i8* [ %54, %6 ], [ %2, %4 ]
  %10 = phi i32 [ %55, %6 ], [ 0, %4 ]
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %7, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %7, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %7, i64 3
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = load i8, i8* %8, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %8, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %8, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %8, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %23, %12
  %34 = icmp ult i32 %33, 255
  %35 = select i1 %34, i32 %33, i32 255
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %9, align 1
  %37 = add nuw nsw i32 %26, %15
  %38 = icmp ult i32 %37, 255
  %39 = select i1 %38, i32 %37, i32 255
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %40, i8* %41, align 1
  %42 = add nuw nsw i32 %29, %18
  %43 = icmp ult i32 %42, 255
  %44 = select i1 %43, i32 %42, i32 255
  %45 = trunc i32 %44 to i8
  %46 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %45, i8* %46, align 1
  %47 = add nuw nsw i32 %32, %21
  %48 = icmp ult i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %7, i64 4
  %53 = getelementptr inbounds i8, i8* %8, i64 4
  %54 = getelementptr inbounds i8, i8* %9, i64 4
  %55 = add nuw nsw i32 %10, 1
  %56 = icmp eq i32 %55, %3
  br i1 %56, label %57, label %6

57:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBSubtractRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %65

6:                                                ; preds = %4, %6
  %7 = phi i8* [ %60, %6 ], [ %0, %4 ]
  %8 = phi i8* [ %61, %6 ], [ %1, %4 ]
  %9 = phi i8* [ %62, %6 ], [ %2, %4 ]
  %10 = phi i32 [ %63, %6 ], [ 0, %4 ]
  %11 = load i8, i8* %7, align 1
  %12 = zext i8 %11 to i32
  %13 = getelementptr inbounds i8, i8* %7, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %7, i64 2
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %7, i64 3
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = load i8, i8* %8, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %8, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %8, i64 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %8, i64 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = sub nsw i32 %12, %23
  %34 = lshr i32 %33, 31
  %35 = xor i32 %34, 1
  %36 = sub nsw i32 0, %35
  %37 = and i32 %33, %36
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %9, align 1
  %39 = sub nsw i32 %15, %26
  %40 = lshr i32 %39, 31
  %41 = xor i32 %40, 1
  %42 = sub nsw i32 0, %41
  %43 = and i32 %39, %42
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %44, i8* %45, align 1
  %46 = sub nsw i32 %18, %29
  %47 = lshr i32 %46, 31
  %48 = xor i32 %47, 1
  %49 = sub nsw i32 0, %48
  %50 = and i32 %46, %49
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %51, i8* %52, align 1
  %53 = sub nsw i32 %21, %32
  %54 = lshr i32 %53, 31
  %55 = xor i32 %54, 1
  %56 = sub nsw i32 0, %55
  %57 = and i32 %53, %56
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %58, i8* %59, align 1
  %60 = getelementptr inbounds i8, i8* %7, i64 4
  %61 = getelementptr inbounds i8, i8* %8, i64 4
  %62 = getelementptr inbounds i8, i8* %9, i64 4
  %63 = add nuw nsw i32 %10, 1
  %64 = icmp eq i32 %63, %3
  br i1 %64, label %65, label %6

65:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SobelXRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %112

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = icmp ult i32 %4, 16
  br i1 %9, label %74, label %10

10:                                               ; preds = %7
  %11 = getelementptr i8, i8* %3, i64 %8
  %12 = add nuw nsw i64 %8, 2
  %13 = getelementptr i8, i8* %0, i64 %12
  %14 = getelementptr i8, i8* %1, i64 %12
  %15 = getelementptr i8, i8* %2, i64 %12
  %16 = icmp ugt i8* %13, %3
  %17 = icmp ugt i8* %11, %0
  %18 = and i1 %16, %17
  %19 = icmp ugt i8* %14, %3
  %20 = icmp ugt i8* %11, %1
  %21 = and i1 %19, %20
  %22 = or i1 %18, %21
  %23 = icmp ugt i8* %15, %3
  %24 = icmp ugt i8* %11, %2
  %25 = and i1 %23, %24
  %26 = or i1 %22, %25
  br i1 %26, label %74, label %27

27:                                               ; preds = %10
  %28 = and i64 %8, 4294967280
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %70, %29 ]
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = bitcast i8* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1, !alias.scope !208
  %34 = zext <16 x i8> %33 to <16 x i32>
  %35 = getelementptr inbounds i8, i8* %1, i64 %30
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1, !alias.scope !211
  %38 = zext <16 x i8> %37 to <16 x i32>
  %39 = getelementptr inbounds i8, i8* %2, i64 %30
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1, !alias.scope !213
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = or i64 %30, 2
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1, !alias.scope !208
  %47 = zext <16 x i8> %46 to <16 x i32>
  %48 = getelementptr inbounds i8, i8* %1, i64 %43
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !211
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = getelementptr inbounds i8, i8* %2, i64 %43
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !213
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = sub nsw <16 x i32> %34, %47
  %57 = sub nsw <16 x i32> %38, %51
  %58 = sub nsw <16 x i32> %42, %55
  %59 = shl nsw <16 x i32> %57, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %60 = add nsw <16 x i32> %56, %59
  %61 = add nsw <16 x i32> %60, %58
  %62 = icmp slt <16 x i32> %61, zeroinitializer
  %63 = sub nsw <16 x i32> zeroinitializer, %61
  %64 = select <16 x i1> %62, <16 x i32> %63, <16 x i32> %61
  %65 = icmp slt <16 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = select <16 x i1> %65, <16 x i32> %64, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = trunc <16 x i32> %66 to <16 x i8>
  %68 = getelementptr inbounds i8, i8* %3, i64 %30
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %69, align 1, !alias.scope !215, !noalias !217
  %70 = add i64 %30, 16
  %71 = icmp eq i64 %70, %28
  br i1 %71, label %72, label %29, !llvm.loop !218

72:                                               ; preds = %29
  %73 = icmp eq i64 %28, %8
  br i1 %73, label %112, label %74

74:                                               ; preds = %72, %10, %7
  %75 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %28, %72 ]
  br label %76

76:                                               ; preds = %74, %76
  %77 = phi i64 [ %110, %76 ], [ %75, %74 ]
  %78 = getelementptr inbounds i8, i8* %0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds i8, i8* %1, i64 %77
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds i8, i8* %2, i64 %77
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = add nuw nsw i64 %77, 2
  %88 = getelementptr inbounds i8, i8* %0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds i8, i8* %1, i64 %87
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = getelementptr inbounds i8, i8* %2, i64 %87
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = sub nsw i32 %80, %90
  %98 = sub nsw i32 %83, %93
  %99 = sub nsw i32 %86, %96
  %100 = shl nsw i32 %98, 1
  %101 = add nsw i32 %97, %100
  %102 = add nsw i32 %101, %99
  %103 = icmp slt i32 %102, 0
  %104 = sub nsw i32 0, %102
  %105 = select i1 %103, i32 %104, i32 %102
  %106 = icmp slt i32 %105, 255
  %107 = select i1 %106, i32 %105, i32 255
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds i8, i8* %3, i64 %77
  store i8 %108, i8* %109, align 1
  %110 = add nuw nsw i64 %77, 1
  %111 = icmp eq i64 %110, %8
  br i1 %111, label %112, label %76, !llvm.loop !219

112:                                              ; preds = %76, %72, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SobelYRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %107

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 16
  br i1 %8, label %69, label %9

9:                                                ; preds = %6
  %10 = getelementptr i8, i8* %2, i64 %7
  %11 = add nuw nsw i64 %7, 2
  %12 = getelementptr i8, i8* %0, i64 %11
  %13 = getelementptr i8, i8* %1, i64 %11
  %14 = icmp ugt i8* %12, %2
  %15 = icmp ugt i8* %10, %0
  %16 = and i1 %14, %15
  %17 = icmp ugt i8* %13, %2
  %18 = icmp ugt i8* %10, %1
  %19 = and i1 %17, %18
  %20 = or i1 %16, %19
  br i1 %20, label %69, label %21

21:                                               ; preds = %9
  %22 = and i64 %7, 4294967280
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %65, %23 ]
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 1, !alias.scope !220
  %28 = zext <16 x i8> %27 to <16 x i32>
  %29 = or i64 %24, 1
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1, !alias.scope !220
  %33 = zext <16 x i8> %32 to <16 x i32>
  %34 = or i64 %24, 2
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1, !alias.scope !220
  %38 = zext <16 x i8> %37 to <16 x i32>
  %39 = getelementptr inbounds i8, i8* %1, i64 %24
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1, !alias.scope !223
  %42 = zext <16 x i8> %41 to <16 x i32>
  %43 = getelementptr inbounds i8, i8* %1, i64 %29
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1, !alias.scope !223
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = getelementptr inbounds i8, i8* %1, i64 %34
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !223
  %50 = zext <16 x i8> %49 to <16 x i32>
  %51 = sub nsw <16 x i32> %28, %42
  %52 = sub nsw <16 x i32> %33, %46
  %53 = sub nsw <16 x i32> %38, %50
  %54 = shl nsw <16 x i32> %52, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %55 = add nsw <16 x i32> %51, %54
  %56 = add nsw <16 x i32> %55, %53
  %57 = icmp slt <16 x i32> %56, zeroinitializer
  %58 = sub nsw <16 x i32> zeroinitializer, %56
  %59 = select <16 x i1> %57, <16 x i32> %58, <16 x i32> %56
  %60 = icmp slt <16 x i32> %59, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %61 = select <16 x i1> %60, <16 x i32> %59, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %62 = trunc <16 x i32> %61 to <16 x i8>
  %63 = getelementptr inbounds i8, i8* %2, i64 %24
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %64, align 1, !alias.scope !225, !noalias !227
  %65 = add i64 %24, 16
  %66 = icmp eq i64 %65, %22
  br i1 %66, label %67, label %23, !llvm.loop !228

67:                                               ; preds = %23
  %68 = icmp eq i64 %22, %7
  br i1 %68, label %107, label %69

69:                                               ; preds = %67, %9, %6
  %70 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %22, %67 ]
  br label %71

71:                                               ; preds = %69, %71
  %72 = phi i64 [ %76, %71 ], [ %70, %69 ]
  %73 = getelementptr inbounds i8, i8* %0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = add nuw nsw i64 %72, 1
  %77 = getelementptr inbounds i8, i8* %0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = add nuw nsw i64 %72, 2
  %81 = getelementptr inbounds i8, i8* %0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds i8, i8* %1, i64 %72
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = getelementptr inbounds i8, i8* %1, i64 %76
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds i8, i8* %1, i64 %80
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = sub nsw i32 %75, %86
  %94 = sub nsw i32 %79, %89
  %95 = sub nsw i32 %83, %92
  %96 = shl nsw i32 %94, 1
  %97 = add nsw i32 %93, %96
  %98 = add nsw i32 %97, %95
  %99 = icmp slt i32 %98, 0
  %100 = sub nsw i32 0, %98
  %101 = select i1 %99, i32 %100, i32 %98
  %102 = icmp slt i32 %101, 255
  %103 = select i1 %102, i32 %101, i32 255
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %2, i64 %72
  store i8 %104, i8* %105, align 1
  %106 = icmp eq i64 %76, %7
  br i1 %106, label %107, label %71, !llvm.loop !229

107:                                              ; preds = %71, %67, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SobelRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %66

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %48, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %45, %12 ]
  %14 = phi i8* [ %2, %10 ], [ %44, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %46, %12 ]
  %16 = getelementptr inbounds i8, i8* %0, i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %1, i64 %13
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = add nuw nsw i32 %21, %18
  %23 = icmp ult i32 %22, 255
  %24 = select i1 %23, i32 %22, i32 255
  %25 = trunc i32 %24 to i8
  store i8 %25, i8* %14, align 1
  %26 = getelementptr inbounds i8, i8* %14, i64 1
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %14, i64 2
  store i8 %25, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %14, i64 3
  store i8 -1, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %14, i64 4
  %30 = or i64 %13, 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds i8, i8* %1, i64 %30
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %36, %33
  %38 = icmp ult i32 %37, 255
  %39 = select i1 %38, i32 %37, i32 255
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 1
  %41 = getelementptr inbounds i8, i8* %14, i64 5
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %14, i64 6
  store i8 %40, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %14, i64 7
  store i8 -1, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %14, i64 8
  %45 = add nuw nsw i64 %13, 2
  %46 = add i64 %15, -2
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %12

48:                                               ; preds = %12, %6
  %49 = phi i64 [ 0, %6 ], [ %45, %12 ]
  %50 = phi i8* [ %2, %6 ], [ %44, %12 ]
  %51 = icmp eq i64 %8, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %0, i64 %49
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds i8, i8* %1, i64 %49
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %58, %55
  %60 = icmp ult i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %50, align 1
  %63 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %62, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %62, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %50, i64 3
  store i8 -1, i8* %65, align 1
  br label %66

66:                                               ; preds = %52, %48, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SobelToPlaneRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %133

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 16
  br i1 %8, label %84, label %9

9:                                                ; preds = %6
  %10 = getelementptr i8, i8* %2, i64 %7
  %11 = getelementptr i8, i8* %0, i64 %7
  %12 = getelementptr i8, i8* %1, i64 %7
  %13 = icmp ugt i8* %11, %2
  %14 = icmp ugt i8* %10, %0
  %15 = and i1 %13, %14
  %16 = icmp ugt i8* %12, %2
  %17 = icmp ugt i8* %10, %1
  %18 = and i1 %16, %17
  %19 = or i1 %15, %18
  br i1 %19, label %84, label %20

20:                                               ; preds = %9
  %21 = and i64 %7, 4294967280
  %22 = add nsw i64 %21, -16
  %23 = lshr exact i64 %22, 4
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %64, label %27

27:                                               ; preds = %20
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %61, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %62, %29 ]
  %32 = getelementptr inbounds i8, i8* %0, i64 %30
  %33 = bitcast i8* %32 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 1, !alias.scope !230
  %35 = zext <16 x i8> %34 to <16 x i32>
  %36 = getelementptr inbounds i8, i8* %1, i64 %30
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1, !alias.scope !233
  %39 = zext <16 x i8> %38 to <16 x i32>
  %40 = add nuw nsw <16 x i32> %39, %35
  %41 = icmp ult <16 x i32> %40, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %42 = select <16 x i1> %41, <16 x i32> %40, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %43 = trunc <16 x i32> %42 to <16 x i8>
  %44 = getelementptr inbounds i8, i8* %2, i64 %30
  %45 = bitcast i8* %44 to <16 x i8>*
  store <16 x i8> %43, <16 x i8>* %45, align 1, !alias.scope !235, !noalias !237
  %46 = or i64 %30, 16
  %47 = getelementptr inbounds i8, i8* %0, i64 %46
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !230
  %50 = zext <16 x i8> %49 to <16 x i32>
  %51 = getelementptr inbounds i8, i8* %1, i64 %46
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1, !alias.scope !233
  %54 = zext <16 x i8> %53 to <16 x i32>
  %55 = add nuw nsw <16 x i32> %54, %50
  %56 = icmp ult <16 x i32> %55, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %57 = select <16 x i1> %56, <16 x i32> %55, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %58 = trunc <16 x i32> %57 to <16 x i8>
  %59 = getelementptr inbounds i8, i8* %2, i64 %46
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !235, !noalias !237
  %61 = add i64 %30, 32
  %62 = add i64 %31, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %29, !llvm.loop !238

64:                                               ; preds = %29, %20
  %65 = phi i64 [ 0, %20 ], [ %61, %29 ]
  %66 = icmp eq i64 %25, 0
  br i1 %66, label %82, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds i8, i8* %0, i64 %65
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !230
  %71 = zext <16 x i8> %70 to <16 x i32>
  %72 = getelementptr inbounds i8, i8* %1, i64 %65
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1, !alias.scope !233
  %75 = zext <16 x i8> %74 to <16 x i32>
  %76 = add nuw nsw <16 x i32> %75, %71
  %77 = icmp ult <16 x i32> %76, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %78 = select <16 x i1> %77, <16 x i32> %76, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %79 = trunc <16 x i32> %78 to <16 x i8>
  %80 = getelementptr inbounds i8, i8* %2, i64 %65
  %81 = bitcast i8* %80 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %81, align 1, !alias.scope !235, !noalias !237
  br label %82

82:                                               ; preds = %64, %67
  %83 = icmp eq i64 %21, %7
  br i1 %83, label %133, label %84

84:                                               ; preds = %82, %9, %6
  %85 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %21, %82 ]
  %86 = xor i64 %85, -1
  %87 = and i64 %7, 1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %102, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds i8, i8* %0, i64 %85
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds i8, i8* %1, i64 %85
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nuw nsw i32 %95, %92
  %97 = icmp ult i32 %96, 255
  %98 = select i1 %97, i32 %96, i32 255
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %2, i64 %85
  store i8 %99, i8* %100, align 1
  %101 = or i64 %85, 1
  br label %102

102:                                              ; preds = %84, %89
  %103 = phi i64 [ %85, %84 ], [ %101, %89 ]
  %104 = sub nsw i64 0, %7
  %105 = icmp eq i64 %86, %104
  br i1 %105, label %133, label %106

106:                                              ; preds = %102, %106
  %107 = phi i64 [ %131, %106 ], [ %103, %102 ]
  %108 = getelementptr inbounds i8, i8* %0, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = getelementptr inbounds i8, i8* %1, i64 %107
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = add nuw nsw i32 %113, %110
  %115 = icmp ult i32 %114, 255
  %116 = select i1 %115, i32 %114, i32 255
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %2, i64 %107
  store i8 %117, i8* %118, align 1
  %119 = add nuw nsw i64 %107, 1
  %120 = getelementptr inbounds i8, i8* %0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = getelementptr inbounds i8, i8* %1, i64 %119
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = add nuw nsw i32 %125, %122
  %127 = icmp ult i32 %126, 255
  %128 = select i1 %127, i32 %126, i32 255
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds i8, i8* %2, i64 %119
  store i8 %129, i8* %130, align 1
  %131 = add nuw nsw i64 %107, 2
  %132 = icmp eq i64 %131, %7
  br i1 %132, label %133, label %106, !llvm.loop !239

133:                                              ; preds = %102, %106, %82, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SobelXYRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %66

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %48, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %45, %12 ]
  %14 = phi i8* [ %2, %10 ], [ %44, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %46, %12 ]
  %16 = getelementptr inbounds i8, i8* %0, i64 %13
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %1, i64 %13
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = add nuw nsw i32 %21, %18
  %23 = icmp ult i32 %22, 255
  %24 = select i1 %23, i32 %22, i32 255
  store i8 %20, i8* %14, align 1
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds i8, i8* %14, i64 1
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %14, i64 2
  store i8 %17, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %14, i64 3
  store i8 -1, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %14, i64 4
  %30 = or i64 %13, 1
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds i8, i8* %1, i64 %30
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = add nuw nsw i32 %36, %33
  %38 = icmp ult i32 %37, 255
  %39 = select i1 %38, i32 %37, i32 255
  store i8 %35, i8* %29, align 1
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %14, i64 5
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %14, i64 6
  store i8 %32, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %14, i64 7
  store i8 -1, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %14, i64 8
  %45 = add nuw nsw i64 %13, 2
  %46 = add i64 %15, -2
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %12

48:                                               ; preds = %12, %6
  %49 = phi i64 [ 0, %6 ], [ %45, %12 ]
  %50 = phi i8* [ %2, %6 ], [ %44, %12 ]
  %51 = icmp eq i64 %8, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %0, i64 %49
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds i8, i8* %1, i64 %49
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = add nuw nsw i32 %58, %55
  %60 = icmp ult i32 %59, 255
  %61 = select i1 %60, i32 %59, i32 255
  store i8 %57, i8* %50, align 1
  %62 = trunc i32 %61 to i8
  %63 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %62, i8* %63, align 1
  %64 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %54, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %50, i64 3
  store i8 -1, i8* %65, align 1
  br label %66

66:                                               ; preds = %52, %48, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @J400ToARGBRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %57

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = and i32 %2, 3
  %8 = icmp ult i32 %6, 3
  br i1 %8, label %41, label %9

9:                                                ; preds = %5
  %10 = sub i32 %2, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %0, %9 ], [ %38, %11 ]
  %13 = phi i8* [ %1, %9 ], [ %37, %11 ]
  %14 = phi i32 [ %10, %9 ], [ %39, %11 ]
  %15 = load i8, i8* %12, align 1
  store i8 %15, i8* %13, align 1
  %16 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds i8, i8* %13, i64 2
  store i8 %15, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 -1, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %13, i64 4
  %20 = getelementptr inbounds i8, i8* %12, i64 1
  %21 = load i8, i8* %20, align 1
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds i8, i8* %13, i64 5
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %13, i64 6
  store i8 %21, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %13, i64 7
  store i8 -1, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %13, i64 8
  %26 = getelementptr inbounds i8, i8* %12, i64 2
  %27 = load i8, i8* %26, align 1
  store i8 %27, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %13, i64 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %13, i64 10
  store i8 %27, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %13, i64 11
  store i8 -1, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %13, i64 12
  %32 = getelementptr inbounds i8, i8* %12, i64 3
  %33 = load i8, i8* %32, align 1
  store i8 %33, i8* %31, align 1
  %34 = getelementptr inbounds i8, i8* %13, i64 13
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %13, i64 14
  store i8 %33, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %13, i64 15
  store i8 -1, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %13, i64 16
  %38 = getelementptr inbounds i8, i8* %12, i64 4
  %39 = add i32 %14, -4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %11

41:                                               ; preds = %11, %5
  %42 = phi i8* [ %0, %5 ], [ %38, %11 ]
  %43 = phi i8* [ %1, %5 ], [ %37, %11 ]
  %44 = icmp eq i32 %7, 0
  br i1 %44, label %57, label %45

45:                                               ; preds = %41, %45
  %46 = phi i8* [ %54, %45 ], [ %42, %41 ]
  %47 = phi i8* [ %53, %45 ], [ %43, %41 ]
  %48 = phi i32 [ %55, %45 ], [ %7, %41 ]
  %49 = load i8, i8* %46, align 1
  store i8 %49, i8* %47, align 1
  %50 = getelementptr inbounds i8, i8* %47, i64 1
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %47, i64 2
  store i8 %49, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %47, i64 3
  store i8 -1, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %47, i64 4
  %54 = getelementptr inbounds i8, i8* %46, i64 1
  %55 = add i32 %48, -1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %45, !llvm.loop !240

57:                                               ; preds = %41, %45, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I444ToARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %219

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %15 = add i32 %5, -1
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %17, 8
  br i1 %18, label %142, label %19

19:                                               ; preds = %8
  %20 = add i32 %5, -1
  %21 = zext i32 %20 to i64
  %22 = shl nuw nsw i64 %21, 2
  %23 = add nuw nsw i64 %22, 4
  %24 = getelementptr i8, i8* %3, i64 %23
  %25 = add nuw nsw i64 %21, 1
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = getelementptr i8, i8* %1, i64 %25
  %28 = getelementptr i8, i8* %2, i64 %25
  %29 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i8, i8* %30, i64 1
  %32 = icmp ugt i8* %26, %3
  %33 = icmp ugt i8* %24, %0
  %34 = and i1 %32, %33
  %35 = icmp ugt i8* %27, %3
  %36 = icmp ugt i8* %24, %1
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  %39 = icmp ugt i8* %28, %3
  %40 = icmp ugt i8* %24, %2
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = bitcast i16* %14 to i8*
  %44 = icmp ugt i8* %31, %3
  %45 = icmp ugt i8* %24, %43
  %46 = and i1 %44, %45
  %47 = or i1 %42, %46
  br i1 %47, label %142, label %48

48:                                               ; preds = %19
  %49 = and i64 %17, 8589934584
  %50 = trunc i64 %49 to i32
  %51 = getelementptr i8, i8* %0, i64 %49
  %52 = getelementptr i8, i8* %1, i64 %49
  %53 = shl nuw nsw i64 %49, 2
  %54 = getelementptr i8, i8* %3, i64 %53
  %55 = getelementptr i8, i8* %2, i64 %49
  br label %56

56:                                               ; preds = %56, %48
  %57 = phi i64 [ 0, %48 ], [ %138, %56 ]
  %58 = getelementptr i8, i8* %0, i64 %57
  %59 = getelementptr i8, i8* %1, i64 %57
  %60 = shl i64 %57, 2
  %61 = getelementptr i8, i8* %2, i64 %57
  %62 = bitcast i8* %58 to <8 x i8>*
  %63 = load <8 x i8>, <8 x i8>* %62, align 1, !alias.scope !242
  %64 = bitcast i8* %59 to <8 x i8>*
  %65 = load <8 x i8>, <8 x i8>* %64, align 1, !alias.scope !245
  %66 = bitcast i8* %61 to <8 x i8>*
  %67 = load <8 x i8>, <8 x i8>* %66, align 1, !alias.scope !247
  %68 = load i8, i8* %9, align 2, !alias.scope !249
  %69 = insertelement <8 x i8> undef, i8 %68, i32 0
  %70 = shufflevector <8 x i8> %69, <8 x i8> undef, <8 x i32> zeroinitializer
  %71 = zext <8 x i8> %70 to <8 x i32>
  %72 = load i8, i8* %10, align 2, !alias.scope !249
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %11, align 1, !alias.scope !249
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %12, align 1, !alias.scope !249
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i16, i16* %13, align 2, !alias.scope !249
  %85 = insertelement <8 x i16> undef, i16 %84, i32 0
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> zeroinitializer
  %87 = sext <8 x i16> %86 to <8 x i32>
  %88 = load i16, i16* %14, align 2, !alias.scope !249
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = zext <8 x i8> %63 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %92, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %94 = mul <8 x i32> %93, %87
  %95 = lshr <8 x i32> %94, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %96 = add nsw <8 x i32> %95, %91
  %97 = xor <8 x i8> %65, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %98 = xor <8 x i8> %67, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %99 = sext <8 x i8> %97 to <8 x i32>
  %100 = mul nsw <8 x i32> %71, %99
  %101 = add nsw <8 x i32> %96, %100
  %102 = sext <8 x i8> %98 to <8 x i32>
  %103 = mul nsw <8 x i32> %75, %99
  %104 = mul nsw <8 x i32> %79, %102
  %105 = add nsw <8 x i32> %104, %103
  %106 = sub nsw <8 x i32> %96, %105
  %107 = mul nsw <8 x i32> %83, %102
  %108 = add nsw <8 x i32> %96, %107
  %109 = ashr <8 x i32> %101, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %110 = lshr <8 x i32> %109, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %111 = xor <8 x i32> %110, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %112 = sub nsw <8 x i32> zeroinitializer, %111
  %113 = and <8 x i32> %109, %112
  %114 = icmp slt <8 x i32> %113, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = select <8 x i1> %114, <8 x i32> %113, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = ashr <8 x i32> %106, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %118 = lshr <8 x i32> %117, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %119 = xor <8 x i32> %118, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %120 = sub nsw <8 x i32> zeroinitializer, %119
  %121 = and <8 x i32> %117, %120
  %122 = icmp slt <8 x i32> %121, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %123 = select <8 x i1> %122, <8 x i32> %121, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %124 = trunc <8 x i32> %123 to <8 x i8>
  %125 = ashr <8 x i32> %108, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = lshr <8 x i32> %125, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %127 = xor <8 x i32> %126, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = sub nsw <8 x i32> zeroinitializer, %127
  %129 = and <8 x i32> %125, %128
  %130 = icmp slt <8 x i32> %129, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = select <8 x i1> %130, <8 x i32> %129, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = trunc <8 x i32> %131 to <8 x i8>
  %133 = getelementptr inbounds i8, i8* %3, i64 %60
  %134 = bitcast i8* %133 to <32 x i8>*
  %135 = shufflevector <8 x i8> %116, <8 x i8> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %136 = shufflevector <8 x i8> %132, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %137 = shufflevector <16 x i8> %135, <16 x i8> %136, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %137, <32 x i8>* %134, align 1
  %138 = add i64 %57, 8
  %139 = icmp eq i64 %138, %49
  br i1 %139, label %140, label %56, !llvm.loop !251

140:                                              ; preds = %56
  %141 = icmp eq i64 %17, %49
  br i1 %141, label %219, label %142

142:                                              ; preds = %140, %19, %8
  %143 = phi i32 [ 0, %19 ], [ 0, %8 ], [ %50, %140 ]
  %144 = phi i8* [ %0, %19 ], [ %0, %8 ], [ %51, %140 ]
  %145 = phi i8* [ %1, %19 ], [ %1, %8 ], [ %52, %140 ]
  %146 = phi i8* [ %3, %19 ], [ %3, %8 ], [ %54, %140 ]
  %147 = phi i8* [ %2, %19 ], [ %2, %8 ], [ %55, %140 ]
  br label %148

148:                                              ; preds = %142, %148
  %149 = phi i32 [ %217, %148 ], [ %143, %142 ]
  %150 = phi i8* [ %213, %148 ], [ %144, %142 ]
  %151 = phi i8* [ %214, %148 ], [ %145, %142 ]
  %152 = phi i8* [ %216, %148 ], [ %146, %142 ]
  %153 = phi i8* [ %215, %148 ], [ %147, %142 ]
  %154 = load i8, i8* %150, align 1
  %155 = load i8, i8* %151, align 1
  %156 = load i8, i8* %153, align 1
  %157 = getelementptr inbounds i8, i8* %152, i64 1
  %158 = getelementptr inbounds i8, i8* %152, i64 2
  %159 = load i8, i8* %9, align 2
  %160 = zext i8 %159 to i32
  %161 = load i8, i8* %10, align 2
  %162 = zext i8 %161 to i32
  %163 = load i8, i8* %11, align 1
  %164 = zext i8 %163 to i32
  %165 = load i8, i8* %12, align 1
  %166 = zext i8 %165 to i32
  %167 = load i16, i16* %13, align 2
  %168 = sext i16 %167 to i32
  %169 = load i16, i16* %14, align 2
  %170 = sext i16 %169 to i32
  %171 = zext i8 %154 to i32
  %172 = mul nuw nsw i32 %171, 257
  %173 = mul i32 %172, %168
  %174 = lshr i32 %173, 16
  %175 = add nsw i32 %174, %170
  %176 = xor i8 %155, -128
  %177 = xor i8 %156, -128
  %178 = sext i8 %176 to i32
  %179 = mul nsw i32 %160, %178
  %180 = add nsw i32 %175, %179
  %181 = sext i8 %177 to i32
  %182 = mul nsw i32 %162, %178
  %183 = mul nsw i32 %164, %181
  %184 = add nsw i32 %183, %182
  %185 = sub nsw i32 %175, %184
  %186 = mul nsw i32 %166, %181
  %187 = add nsw i32 %175, %186
  %188 = ashr i32 %180, 6
  %189 = lshr i32 %188, 31
  %190 = xor i32 %189, 1
  %191 = sub nsw i32 0, %190
  %192 = and i32 %188, %191
  %193 = icmp slt i32 %192, 255
  %194 = select i1 %193, i32 %192, i32 255
  %195 = trunc i32 %194 to i8
  store i8 %195, i8* %152, align 1
  %196 = ashr i32 %185, 6
  %197 = lshr i32 %196, 31
  %198 = xor i32 %197, 1
  %199 = sub nsw i32 0, %198
  %200 = and i32 %196, %199
  %201 = icmp slt i32 %200, 255
  %202 = select i1 %201, i32 %200, i32 255
  %203 = trunc i32 %202 to i8
  store i8 %203, i8* %157, align 1
  %204 = ashr i32 %187, 6
  %205 = lshr i32 %204, 31
  %206 = xor i32 %205, 1
  %207 = sub nsw i32 0, %206
  %208 = and i32 %204, %207
  %209 = icmp slt i32 %208, 255
  %210 = select i1 %209, i32 %208, i32 255
  %211 = trunc i32 %210 to i8
  store i8 %211, i8* %158, align 1
  %212 = getelementptr inbounds i8, i8* %152, i64 3
  store i8 -1, i8* %212, align 1
  %213 = getelementptr inbounds i8, i8* %150, i64 1
  %214 = getelementptr inbounds i8, i8* %151, i64 1
  %215 = getelementptr inbounds i8, i8* %153, i64 1
  %216 = getelementptr inbounds i8, i8* %152, i64 4
  %217 = add nuw nsw i32 %149, 1
  %218 = icmp eq i32 %217, %5
  br i1 %218, label %219, label %148, !llvm.loop !252

219:                                              ; preds = %148, %140, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I422ToARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %364

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 8
  br i1 %20, label %226, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 3
  %26 = add nuw nsw i64 %25, 8
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %226, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967288
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = shl nuw nsw i64 %55, 3
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %222, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = shl i64 %65, 3
  %70 = getelementptr i8, i8* %2, i64 %65
  %71 = bitcast i8* %67 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %75 = bitcast i8* %68 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !253
  %77 = bitcast i8* %70 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !256
  %79 = load i8, i8* %10, align 2, !alias.scope !258
  %80 = insertelement <8 x i8> undef, i8 %79, i32 0
  %81 = shufflevector <8 x i8> %80, <8 x i8> undef, <8 x i32> zeroinitializer
  %82 = zext <8 x i8> %81 to <8 x i32>
  %83 = load i8, i8* %11, align 2, !alias.scope !258
  %84 = insertelement <8 x i8> undef, i8 %83, i32 0
  %85 = shufflevector <8 x i8> %84, <8 x i8> undef, <8 x i32> zeroinitializer
  %86 = zext <8 x i8> %85 to <8 x i32>
  %87 = load i8, i8* %12, align 1, !alias.scope !258
  %88 = insertelement <8 x i8> undef, i8 %87, i32 0
  %89 = shufflevector <8 x i8> %88, <8 x i8> undef, <8 x i32> zeroinitializer
  %90 = zext <8 x i8> %89 to <8 x i32>
  %91 = load i8, i8* %13, align 1, !alias.scope !258
  %92 = insertelement <8 x i8> undef, i8 %91, i32 0
  %93 = shufflevector <8 x i8> %92, <8 x i8> undef, <8 x i32> zeroinitializer
  %94 = zext <8 x i8> %93 to <8 x i32>
  %95 = load i16, i16* %14, align 2, !alias.scope !258
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = load i16, i16* %15, align 2, !alias.scope !258
  %100 = insertelement <8 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> zeroinitializer
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = zext <8 x i8> %73 to <8 x i32>
  %104 = mul nuw nsw <8 x i32> %103, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %105 = mul <8 x i32> %104, %98
  %106 = lshr <8 x i32> %105, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %107 = add nsw <8 x i32> %106, %102
  %108 = xor <8 x i8> %76, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %109 = xor <8 x i8> %78, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = sext <8 x i8> %108 to <8 x i32>
  %111 = mul nsw <8 x i32> %82, %110
  %112 = add nsw <8 x i32> %107, %111
  %113 = sext <8 x i8> %109 to <8 x i32>
  %114 = mul nsw <8 x i32> %86, %110
  %115 = mul nsw <8 x i32> %90, %113
  %116 = add nsw <8 x i32> %115, %114
  %117 = sub nsw <8 x i32> %107, %116
  %118 = mul nsw <8 x i32> %94, %113
  %119 = add nsw <8 x i32> %107, %118
  %120 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %121 = lshr <8 x i32> %120, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %122 = xor <8 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %123 = sub nsw <8 x i32> zeroinitializer, %122
  %124 = and <8 x i32> %120, %123
  %125 = icmp slt <8 x i32> %124, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %126 = select <8 x i1> %125, <8 x i32> %124, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = ashr <8 x i32> %117, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <8 x i32> %128, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %130 = xor <8 x i32> %129, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <8 x i32> zeroinitializer, %130
  %132 = and <8 x i32> %128, %131
  %133 = icmp slt <8 x i32> %132, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %134 = select <8 x i1> %133, <8 x i32> %132, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = trunc <8 x i32> %134 to <8 x i8>
  %136 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = lshr <8 x i32> %136, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %138 = xor <8 x i32> %137, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %139 = sub nsw <8 x i32> zeroinitializer, %138
  %140 = and <8 x i32> %136, %139
  %141 = icmp slt <8 x i32> %140, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = select <8 x i1> %141, <8 x i32> %140, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %143 = trunc <8 x i32> %142 to <8 x i8>
  %144 = bitcast i8* %68 to <8 x i8>*
  %145 = load <8 x i8>, <8 x i8>* %144, align 1, !alias.scope !253
  %146 = bitcast i8* %70 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !256
  %148 = load i8, i8* %10, align 2, !alias.scope !258
  %149 = insertelement <8 x i8> undef, i8 %148, i32 0
  %150 = shufflevector <8 x i8> %149, <8 x i8> undef, <8 x i32> zeroinitializer
  %151 = zext <8 x i8> %150 to <8 x i32>
  %152 = load i8, i8* %11, align 2, !alias.scope !258
  %153 = insertelement <8 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <8 x i8> %153, <8 x i8> undef, <8 x i32> zeroinitializer
  %155 = zext <8 x i8> %154 to <8 x i32>
  %156 = load i8, i8* %12, align 1, !alias.scope !258
  %157 = insertelement <8 x i8> undef, i8 %156, i32 0
  %158 = shufflevector <8 x i8> %157, <8 x i8> undef, <8 x i32> zeroinitializer
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = load i8, i8* %13, align 1, !alias.scope !258
  %161 = insertelement <8 x i8> undef, i8 %160, i32 0
  %162 = shufflevector <8 x i8> %161, <8 x i8> undef, <8 x i32> zeroinitializer
  %163 = zext <8 x i8> %162 to <8 x i32>
  %164 = load i16, i16* %14, align 2, !alias.scope !258
  %165 = insertelement <8 x i16> undef, i16 %164, i32 0
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <8 x i32> zeroinitializer
  %167 = sext <8 x i16> %166 to <8 x i32>
  %168 = load i16, i16* %15, align 2, !alias.scope !258
  %169 = insertelement <8 x i16> undef, i16 %168, i32 0
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> zeroinitializer
  %171 = sext <8 x i16> %170 to <8 x i32>
  %172 = zext <8 x i8> %74 to <8 x i32>
  %173 = mul nuw nsw <8 x i32> %172, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %174 = mul <8 x i32> %173, %167
  %175 = lshr <8 x i32> %174, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %176 = add nsw <8 x i32> %175, %171
  %177 = xor <8 x i8> %145, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %178 = xor <8 x i8> %147, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %179 = sext <8 x i8> %177 to <8 x i32>
  %180 = mul nsw <8 x i32> %151, %179
  %181 = add nsw <8 x i32> %176, %180
  %182 = sext <8 x i8> %178 to <8 x i32>
  %183 = mul nsw <8 x i32> %155, %179
  %184 = mul nsw <8 x i32> %159, %182
  %185 = add nsw <8 x i32> %184, %183
  %186 = sub nsw <8 x i32> %176, %185
  %187 = mul nsw <8 x i32> %163, %182
  %188 = add nsw <8 x i32> %176, %187
  %189 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %190 = lshr <8 x i32> %189, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %191 = xor <8 x i32> %190, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %192 = sub nsw <8 x i32> zeroinitializer, %191
  %193 = and <8 x i32> %189, %192
  %194 = icmp slt <8 x i32> %193, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %195 = select <8 x i1> %194, <8 x i32> %193, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = trunc <8 x i32> %195 to <8 x i8>
  %197 = ashr <8 x i32> %186, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %198 = lshr <8 x i32> %197, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %199 = xor <8 x i32> %198, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %200 = sub nsw <8 x i32> zeroinitializer, %199
  %201 = and <8 x i32> %197, %200
  %202 = icmp slt <8 x i32> %201, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %203 = select <8 x i1> %202, <8 x i32> %201, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = trunc <8 x i32> %203 to <8 x i8>
  %205 = ashr <8 x i32> %188, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %206 = lshr <8 x i32> %205, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %207 = xor <8 x i32> %206, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %208 = sub nsw <8 x i32> zeroinitializer, %207
  %209 = and <8 x i32> %205, %208
  %210 = icmp slt <8 x i32> %209, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %211 = select <8 x i1> %210, <8 x i32> %209, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %212 = trunc <8 x i32> %211 to <8 x i8>
  %213 = getelementptr inbounds i8, i8* %3, i64 %69
  %214 = bitcast i8* %213 to <64 x i8>*
  %215 = shufflevector <8 x i8> %127, <8 x i8> %135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %216 = shufflevector <8 x i8> %143, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %217 = shufflevector <8 x i8> %196, <8 x i8> %204, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %218 = shufflevector <8 x i8> %212, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %219 = shufflevector <16 x i8> %215, <16 x i8> %216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %220 = shufflevector <16 x i8> %217, <16 x i8> %218, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %221 = shufflevector <32 x i8> %219, <32 x i8> %220, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %221, <64 x i8>* %214, align 1
  %222 = add i64 %65, 8
  %223 = icmp eq i64 %222, %55
  br i1 %223, label %224, label %64, !llvm.loop !260

224:                                              ; preds = %64
  %225 = icmp eq i64 %55, %19
  br i1 %225, label %364, label %226

226:                                              ; preds = %224, %21, %9
  %227 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %224 ]
  %228 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %224 ]
  %229 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %224 ]
  %230 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %224 ]
  %231 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %224 ]
  br label %232

232:                                              ; preds = %226, %232
  %233 = phi i32 [ %362, %232 ], [ %227, %226 ]
  %234 = phi i8* [ %358, %232 ], [ %228, %226 ]
  %235 = phi i8* [ %359, %232 ], [ %229, %226 ]
  %236 = phi i8* [ %361, %232 ], [ %230, %226 ]
  %237 = phi i8* [ %360, %232 ], [ %231, %226 ]
  %238 = load i8, i8* %234, align 1
  %239 = load i8, i8* %235, align 1
  %240 = load i8, i8* %237, align 1
  %241 = getelementptr inbounds i8, i8* %236, i64 1
  %242 = getelementptr inbounds i8, i8* %236, i64 2
  %243 = load i8, i8* %10, align 2
  %244 = zext i8 %243 to i32
  %245 = load i8, i8* %11, align 2
  %246 = zext i8 %245 to i32
  %247 = load i8, i8* %12, align 1
  %248 = zext i8 %247 to i32
  %249 = load i8, i8* %13, align 1
  %250 = zext i8 %249 to i32
  %251 = load i16, i16* %14, align 2
  %252 = sext i16 %251 to i32
  %253 = load i16, i16* %15, align 2
  %254 = sext i16 %253 to i32
  %255 = zext i8 %238 to i32
  %256 = mul nuw nsw i32 %255, 257
  %257 = mul i32 %256, %252
  %258 = lshr i32 %257, 16
  %259 = add nsw i32 %258, %254
  %260 = xor i8 %239, -128
  %261 = xor i8 %240, -128
  %262 = sext i8 %260 to i32
  %263 = mul nsw i32 %244, %262
  %264 = add nsw i32 %259, %263
  %265 = sext i8 %261 to i32
  %266 = mul nsw i32 %246, %262
  %267 = mul nsw i32 %248, %265
  %268 = add nsw i32 %267, %266
  %269 = sub nsw i32 %259, %268
  %270 = mul nsw i32 %250, %265
  %271 = add nsw i32 %259, %270
  %272 = ashr i32 %264, 6
  %273 = lshr i32 %272, 31
  %274 = xor i32 %273, 1
  %275 = sub nsw i32 0, %274
  %276 = and i32 %272, %275
  %277 = icmp slt i32 %276, 255
  %278 = select i1 %277, i32 %276, i32 255
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %236, align 1
  %280 = ashr i32 %269, 6
  %281 = lshr i32 %280, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %280, %283
  %285 = icmp slt i32 %284, 255
  %286 = select i1 %285, i32 %284, i32 255
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %241, align 1
  %288 = ashr i32 %271, 6
  %289 = lshr i32 %288, 31
  %290 = xor i32 %289, 1
  %291 = sub nsw i32 0, %290
  %292 = and i32 %288, %291
  %293 = icmp slt i32 %292, 255
  %294 = select i1 %293, i32 %292, i32 255
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %242, align 1
  %296 = getelementptr inbounds i8, i8* %236, i64 3
  store i8 -1, i8* %296, align 1
  %297 = getelementptr inbounds i8, i8* %234, i64 1
  %298 = load i8, i8* %297, align 1
  %299 = load i8, i8* %235, align 1
  %300 = load i8, i8* %237, align 1
  %301 = getelementptr inbounds i8, i8* %236, i64 4
  %302 = getelementptr inbounds i8, i8* %236, i64 5
  %303 = getelementptr inbounds i8, i8* %236, i64 6
  %304 = load i8, i8* %10, align 2
  %305 = zext i8 %304 to i32
  %306 = load i8, i8* %11, align 2
  %307 = zext i8 %306 to i32
  %308 = load i8, i8* %12, align 1
  %309 = zext i8 %308 to i32
  %310 = load i8, i8* %13, align 1
  %311 = zext i8 %310 to i32
  %312 = load i16, i16* %14, align 2
  %313 = sext i16 %312 to i32
  %314 = load i16, i16* %15, align 2
  %315 = sext i16 %314 to i32
  %316 = zext i8 %298 to i32
  %317 = mul nuw nsw i32 %316, 257
  %318 = mul i32 %317, %313
  %319 = lshr i32 %318, 16
  %320 = add nsw i32 %319, %315
  %321 = xor i8 %299, -128
  %322 = xor i8 %300, -128
  %323 = sext i8 %321 to i32
  %324 = mul nsw i32 %305, %323
  %325 = add nsw i32 %320, %324
  %326 = sext i8 %322 to i32
  %327 = mul nsw i32 %307, %323
  %328 = mul nsw i32 %309, %326
  %329 = add nsw i32 %328, %327
  %330 = sub nsw i32 %320, %329
  %331 = mul nsw i32 %311, %326
  %332 = add nsw i32 %320, %331
  %333 = ashr i32 %325, 6
  %334 = lshr i32 %333, 31
  %335 = xor i32 %334, 1
  %336 = sub nsw i32 0, %335
  %337 = and i32 %333, %336
  %338 = icmp slt i32 %337, 255
  %339 = select i1 %338, i32 %337, i32 255
  %340 = trunc i32 %339 to i8
  store i8 %340, i8* %301, align 1
  %341 = ashr i32 %330, 6
  %342 = lshr i32 %341, 31
  %343 = xor i32 %342, 1
  %344 = sub nsw i32 0, %343
  %345 = and i32 %341, %344
  %346 = icmp slt i32 %345, 255
  %347 = select i1 %346, i32 %345, i32 255
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %302, align 1
  %349 = ashr i32 %332, 6
  %350 = lshr i32 %349, 31
  %351 = xor i32 %350, 1
  %352 = sub nsw i32 0, %351
  %353 = and i32 %349, %352
  %354 = icmp slt i32 %353, 255
  %355 = select i1 %354, i32 %353, i32 255
  %356 = trunc i32 %355 to i8
  store i8 %356, i8* %303, align 1
  %357 = getelementptr inbounds i8, i8* %236, i64 7
  store i8 -1, i8* %357, align 1
  %358 = getelementptr inbounds i8, i8* %234, i64 2
  %359 = getelementptr inbounds i8, i8* %235, i64 1
  %360 = getelementptr inbounds i8, i8* %237, i64 1
  %361 = getelementptr inbounds i8, i8* %236, i64 8
  %362 = add nuw nsw i32 %233, 2
  %363 = icmp slt i32 %362, %7
  br i1 %363, label %232, label %364, !llvm.loop !261

364:                                              ; preds = %232, %224, %6
  %365 = phi i8* [ %2, %6 ], [ %63, %224 ], [ %360, %232 ]
  %366 = phi i8* [ %3, %6 ], [ %62, %224 ], [ %361, %232 ]
  %367 = phi i8* [ %1, %6 ], [ %60, %224 ], [ %359, %232 ]
  %368 = phi i8* [ %0, %6 ], [ %59, %224 ], [ %358, %232 ]
  %369 = and i32 %5, 1
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %437, label %371

371:                                              ; preds = %364
  %372 = load i8, i8* %368, align 1
  %373 = load i8, i8* %367, align 1
  %374 = load i8, i8* %365, align 1
  %375 = getelementptr inbounds i8, i8* %366, i64 1
  %376 = getelementptr inbounds i8, i8* %366, i64 2
  %377 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %378 = load i8, i8* %377, align 2
  %379 = zext i8 %378 to i32
  %380 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %381 = load i8, i8* %380, align 2
  %382 = zext i8 %381 to i32
  %383 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i32
  %389 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %390 = load i16, i16* %389, align 2
  %391 = sext i16 %390 to i32
  %392 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %393 = load i16, i16* %392, align 2
  %394 = sext i16 %393 to i32
  %395 = zext i8 %372 to i32
  %396 = mul nuw nsw i32 %395, 257
  %397 = mul i32 %396, %391
  %398 = lshr i32 %397, 16
  %399 = add nsw i32 %398, %394
  %400 = xor i8 %373, -128
  %401 = xor i8 %374, -128
  %402 = sext i8 %400 to i32
  %403 = mul nsw i32 %379, %402
  %404 = add nsw i32 %399, %403
  %405 = sext i8 %401 to i32
  %406 = mul nsw i32 %382, %402
  %407 = mul nsw i32 %385, %405
  %408 = add nsw i32 %407, %406
  %409 = sub nsw i32 %399, %408
  %410 = mul nsw i32 %388, %405
  %411 = add nsw i32 %399, %410
  %412 = ashr i32 %404, 6
  %413 = lshr i32 %412, 31
  %414 = xor i32 %413, 1
  %415 = sub nsw i32 0, %414
  %416 = and i32 %412, %415
  %417 = icmp slt i32 %416, 255
  %418 = select i1 %417, i32 %416, i32 255
  %419 = trunc i32 %418 to i8
  store i8 %419, i8* %366, align 1
  %420 = ashr i32 %409, 6
  %421 = lshr i32 %420, 31
  %422 = xor i32 %421, 1
  %423 = sub nsw i32 0, %422
  %424 = and i32 %420, %423
  %425 = icmp slt i32 %424, 255
  %426 = select i1 %425, i32 %424, i32 255
  %427 = trunc i32 %426 to i8
  store i8 %427, i8* %375, align 1
  %428 = ashr i32 %411, 6
  %429 = lshr i32 %428, 31
  %430 = xor i32 %429, 1
  %431 = sub nsw i32 0, %430
  %432 = and i32 %428, %431
  %433 = icmp slt i32 %432, 255
  %434 = select i1 %433, i32 %432, i32 255
  %435 = trunc i32 %434 to i8
  store i8 %435, i8* %376, align 1
  %436 = getelementptr inbounds i8, i8* %366, i64 3
  store i8 -1, i8* %436, align 1
  br label %437

437:                                              ; preds = %364, %371
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I210ToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = add nsw i32 %5, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %410

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %18 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %19 = add i32 %5, -2
  %20 = lshr i32 %19, 1
  %21 = add nuw i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = icmp ult i32 %21, 8
  br i1 %23, label %252, label %24

24:                                               ; preds = %12
  %25 = add i32 %5, -2
  %26 = lshr i32 %25, 1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = add nuw nsw i64 %28, 8
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = and i32 %25, -2
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %32, 2
  %34 = getelementptr i16, i16* %0, i64 %33
  %35 = bitcast i16* %34 to i8*
  %36 = add nuw nsw i64 %27, 1
  %37 = getelementptr i16, i16* %1, i64 %36
  %38 = bitcast i16* %37 to i8*
  %39 = getelementptr i16, i16* %2, i64 %36
  %40 = bitcast i16* %39 to i8*
  %41 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %42 = bitcast i16* %41 to i8*
  %43 = getelementptr i8, i8* %42, i64 1
  %44 = icmp ugt i8* %35, %3
  %45 = icmp ugt i8* %30, %7
  %46 = and i1 %44, %45
  %47 = icmp ugt i8* %38, %3
  %48 = icmp ugt i8* %30, %8
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  %51 = icmp ugt i8* %40, %3
  %52 = icmp ugt i8* %30, %9
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = bitcast i16* %18 to i8*
  %56 = icmp ugt i8* %43, %3
  %57 = icmp ugt i8* %30, %55
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  br i1 %59, label %252, label %60

60:                                               ; preds = %24
  %61 = and i64 %22, 4294967288
  %62 = trunc i64 %61 to i32
  %63 = shl i32 %62, 1
  %64 = shl nuw nsw i64 %61, 1
  %65 = getelementptr i16, i16* %0, i64 %64
  %66 = getelementptr i16, i16* %1, i64 %61
  %67 = shl nuw nsw i64 %61, 3
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = getelementptr i16, i16* %2, i64 %61
  br label %70

70:                                               ; preds = %70, %60
  %71 = phi i64 [ 0, %60 ], [ %248, %70 ]
  %72 = shl i64 %71, 1
  %73 = getelementptr i16, i16* %0, i64 %72
  %74 = getelementptr i16, i16* %1, i64 %71
  %75 = shl i64 %71, 3
  %76 = getelementptr i16, i16* %2, i64 %71
  %77 = bitcast i16* %73 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 2
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %80 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %81 = bitcast i16* %74 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !262
  %83 = bitcast i16* %76 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !265
  %85 = load i8, i8* %13, align 2, !alias.scope !267
  %86 = insertelement <8 x i8> undef, i8 %85, i32 0
  %87 = shufflevector <8 x i8> %86, <8 x i8> undef, <8 x i32> zeroinitializer
  %88 = zext <8 x i8> %87 to <8 x i32>
  %89 = load i8, i8* %14, align 2, !alias.scope !267
  %90 = insertelement <8 x i8> undef, i8 %89, i32 0
  %91 = shufflevector <8 x i8> %90, <8 x i8> undef, <8 x i32> zeroinitializer
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = load i8, i8* %15, align 1, !alias.scope !267
  %94 = insertelement <8 x i8> undef, i8 %93, i32 0
  %95 = shufflevector <8 x i8> %94, <8 x i8> undef, <8 x i32> zeroinitializer
  %96 = zext <8 x i8> %95 to <8 x i32>
  %97 = load i8, i8* %16, align 1, !alias.scope !267
  %98 = insertelement <8 x i8> undef, i8 %97, i32 0
  %99 = shufflevector <8 x i8> %98, <8 x i8> undef, <8 x i32> zeroinitializer
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = load i16, i16* %17, align 2, !alias.scope !267
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  %104 = sext <8 x i16> %103 to <8 x i32>
  %105 = load i16, i16* %18, align 2, !alias.scope !267
  %106 = insertelement <8 x i16> undef, i16 %105, i32 0
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> zeroinitializer
  %108 = sext <8 x i16> %107 to <8 x i32>
  %109 = zext <8 x i16> %79 to <8 x i32>
  %110 = shl nuw nsw <8 x i32> %109, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %111 = lshr <8 x i16> %82, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %112 = icmp ugt <8 x i16> %82, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %113 = select <8 x i1> %112, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %111
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = lshr <8 x i16> %84, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %116 = icmp ugt <8 x i16> %84, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %117 = select <8 x i1> %116, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %115
  %118 = zext <8 x i16> %117 to <8 x i32>
  %119 = mul <8 x i32> %110, %104
  %120 = lshr <8 x i32> %119, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %121 = add nsw <8 x i32> %120, %108
  %122 = shl <8 x i32> %114, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %123 = ashr exact <8 x i32> %122, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %124 = xor <8 x i32> %123, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %125 = mul nsw <8 x i32> %124, %88
  %126 = add nsw <8 x i32> %121, %125
  %127 = shl <8 x i32> %118, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %128 = ashr exact <8 x i32> %127, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %129 = xor <8 x i32> %128, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %130 = mul nsw <8 x i32> %124, %92
  %131 = mul nsw <8 x i32> %129, %96
  %132 = add nsw <8 x i32> %131, %130
  %133 = sub nsw <8 x i32> %121, %132
  %134 = mul nsw <8 x i32> %129, %100
  %135 = add nsw <8 x i32> %121, %134
  %136 = ashr <8 x i32> %126, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = lshr <8 x i32> %136, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %138 = xor <8 x i32> %137, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %139 = sub nsw <8 x i32> zeroinitializer, %138
  %140 = and <8 x i32> %136, %139
  %141 = icmp slt <8 x i32> %140, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = select <8 x i1> %141, <8 x i32> %140, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %143 = trunc <8 x i32> %142 to <8 x i8>
  %144 = ashr <8 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %145 = lshr <8 x i32> %144, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %146 = xor <8 x i32> %145, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %147 = sub nsw <8 x i32> zeroinitializer, %146
  %148 = and <8 x i32> %144, %147
  %149 = icmp slt <8 x i32> %148, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %150 = select <8 x i1> %149, <8 x i32> %148, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %151 = trunc <8 x i32> %150 to <8 x i8>
  %152 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %153 = lshr <8 x i32> %152, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %154 = xor <8 x i32> %153, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %155 = sub nsw <8 x i32> zeroinitializer, %154
  %156 = and <8 x i32> %152, %155
  %157 = icmp slt <8 x i32> %156, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %158 = select <8 x i1> %157, <8 x i32> %156, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %159 = trunc <8 x i32> %158 to <8 x i8>
  %160 = bitcast i16* %74 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !262
  %162 = bitcast i16* %76 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !265
  %164 = load i8, i8* %13, align 2, !alias.scope !267
  %165 = insertelement <8 x i8> undef, i8 %164, i32 0
  %166 = shufflevector <8 x i8> %165, <8 x i8> undef, <8 x i32> zeroinitializer
  %167 = zext <8 x i8> %166 to <8 x i32>
  %168 = load i8, i8* %14, align 2, !alias.scope !267
  %169 = insertelement <8 x i8> undef, i8 %168, i32 0
  %170 = shufflevector <8 x i8> %169, <8 x i8> undef, <8 x i32> zeroinitializer
  %171 = zext <8 x i8> %170 to <8 x i32>
  %172 = load i8, i8* %15, align 1, !alias.scope !267
  %173 = insertelement <8 x i8> undef, i8 %172, i32 0
  %174 = shufflevector <8 x i8> %173, <8 x i8> undef, <8 x i32> zeroinitializer
  %175 = zext <8 x i8> %174 to <8 x i32>
  %176 = load i8, i8* %16, align 1, !alias.scope !267
  %177 = insertelement <8 x i8> undef, i8 %176, i32 0
  %178 = shufflevector <8 x i8> %177, <8 x i8> undef, <8 x i32> zeroinitializer
  %179 = zext <8 x i8> %178 to <8 x i32>
  %180 = load i16, i16* %17, align 2, !alias.scope !267
  %181 = insertelement <8 x i16> undef, i16 %180, i32 0
  %182 = shufflevector <8 x i16> %181, <8 x i16> undef, <8 x i32> zeroinitializer
  %183 = sext <8 x i16> %182 to <8 x i32>
  %184 = load i16, i16* %18, align 2, !alias.scope !267
  %185 = insertelement <8 x i16> undef, i16 %184, i32 0
  %186 = shufflevector <8 x i16> %185, <8 x i16> undef, <8 x i32> zeroinitializer
  %187 = sext <8 x i16> %186 to <8 x i32>
  %188 = zext <8 x i16> %80 to <8 x i32>
  %189 = shl nuw nsw <8 x i32> %188, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %190 = lshr <8 x i16> %161, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %191 = icmp ugt <8 x i16> %161, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %192 = select <8 x i1> %191, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %190
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = lshr <8 x i16> %163, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %195 = icmp ugt <8 x i16> %163, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %196 = select <8 x i1> %195, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %194
  %197 = zext <8 x i16> %196 to <8 x i32>
  %198 = mul <8 x i32> %189, %183
  %199 = lshr <8 x i32> %198, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %200 = add nsw <8 x i32> %199, %187
  %201 = shl <8 x i32> %193, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %202 = ashr exact <8 x i32> %201, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %203 = xor <8 x i32> %202, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %204 = mul nsw <8 x i32> %203, %167
  %205 = add nsw <8 x i32> %200, %204
  %206 = shl <8 x i32> %197, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %207 = ashr exact <8 x i32> %206, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %208 = xor <8 x i32> %207, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %209 = mul nsw <8 x i32> %203, %171
  %210 = mul nsw <8 x i32> %208, %175
  %211 = add nsw <8 x i32> %210, %209
  %212 = sub nsw <8 x i32> %200, %211
  %213 = mul nsw <8 x i32> %208, %179
  %214 = add nsw <8 x i32> %200, %213
  %215 = ashr <8 x i32> %205, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %216 = lshr <8 x i32> %215, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %217 = xor <8 x i32> %216, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %218 = sub nsw <8 x i32> zeroinitializer, %217
  %219 = and <8 x i32> %215, %218
  %220 = icmp slt <8 x i32> %219, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %221 = select <8 x i1> %220, <8 x i32> %219, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %222 = trunc <8 x i32> %221 to <8 x i8>
  %223 = ashr <8 x i32> %212, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %224 = lshr <8 x i32> %223, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %225 = xor <8 x i32> %224, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %226 = sub nsw <8 x i32> zeroinitializer, %225
  %227 = and <8 x i32> %223, %226
  %228 = icmp slt <8 x i32> %227, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %229 = select <8 x i1> %228, <8 x i32> %227, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %230 = trunc <8 x i32> %229 to <8 x i8>
  %231 = ashr <8 x i32> %214, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %232 = lshr <8 x i32> %231, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %233 = xor <8 x i32> %232, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %234 = sub nsw <8 x i32> zeroinitializer, %233
  %235 = and <8 x i32> %231, %234
  %236 = icmp slt <8 x i32> %235, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %237 = select <8 x i1> %236, <8 x i32> %235, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %238 = trunc <8 x i32> %237 to <8 x i8>
  %239 = getelementptr inbounds i8, i8* %3, i64 %75
  %240 = bitcast i8* %239 to <64 x i8>*
  %241 = shufflevector <8 x i8> %143, <8 x i8> %151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %242 = shufflevector <8 x i8> %159, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %243 = shufflevector <8 x i8> %222, <8 x i8> %230, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %244 = shufflevector <8 x i8> %238, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %245 = shufflevector <16 x i8> %241, <16 x i8> %242, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %246 = shufflevector <16 x i8> %243, <16 x i8> %244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %247 = shufflevector <32 x i8> %245, <32 x i8> %246, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %247, <64 x i8>* %240, align 1
  %248 = add i64 %71, 8
  %249 = icmp eq i64 %248, %61
  br i1 %249, label %250, label %70, !llvm.loop !269

250:                                              ; preds = %70
  %251 = icmp eq i64 %61, %22
  br i1 %251, label %410, label %252

252:                                              ; preds = %250, %24, %12
  %253 = phi i32 [ 0, %24 ], [ 0, %12 ], [ %63, %250 ]
  %254 = phi i16* [ %0, %24 ], [ %0, %12 ], [ %65, %250 ]
  %255 = phi i16* [ %1, %24 ], [ %1, %12 ], [ %66, %250 ]
  %256 = phi i8* [ %3, %24 ], [ %3, %12 ], [ %68, %250 ]
  %257 = phi i16* [ %2, %24 ], [ %2, %12 ], [ %69, %250 ]
  br label %258

258:                                              ; preds = %252, %258
  %259 = phi i32 [ %408, %258 ], [ %253, %252 ]
  %260 = phi i16* [ %404, %258 ], [ %254, %252 ]
  %261 = phi i16* [ %405, %258 ], [ %255, %252 ]
  %262 = phi i8* [ %407, %258 ], [ %256, %252 ]
  %263 = phi i16* [ %406, %258 ], [ %257, %252 ]
  %264 = load i16, i16* %260, align 2
  %265 = load i16, i16* %261, align 2
  %266 = load i16, i16* %263, align 2
  %267 = getelementptr inbounds i8, i8* %262, i64 1
  %268 = getelementptr inbounds i8, i8* %262, i64 2
  %269 = load i8, i8* %13, align 2
  %270 = zext i8 %269 to i32
  %271 = load i8, i8* %14, align 2
  %272 = zext i8 %271 to i32
  %273 = load i8, i8* %15, align 1
  %274 = zext i8 %273 to i32
  %275 = load i8, i8* %16, align 1
  %276 = zext i8 %275 to i32
  %277 = load i16, i16* %17, align 2
  %278 = sext i16 %277 to i32
  %279 = load i16, i16* %18, align 2
  %280 = sext i16 %279 to i32
  %281 = zext i16 %264 to i32
  %282 = shl nuw nsw i32 %281, 6
  %283 = lshr i16 %265, 2
  %284 = icmp ugt i16 %265, 1019
  %285 = select i1 %284, i16 255, i16 %283
  %286 = zext i16 %285 to i32
  %287 = lshr i16 %266, 2
  %288 = icmp ugt i16 %266, 1019
  %289 = select i1 %288, i16 255, i16 %287
  %290 = zext i16 %289 to i32
  %291 = mul i32 %282, %278
  %292 = lshr i32 %291, 16
  %293 = add nsw i32 %292, %280
  %294 = shl i32 %286, 24
  %295 = ashr exact i32 %294, 24
  %296 = xor i32 %295, -128
  %297 = mul nsw i32 %296, %270
  %298 = add nsw i32 %293, %297
  %299 = shl i32 %290, 24
  %300 = ashr exact i32 %299, 24
  %301 = xor i32 %300, -128
  %302 = mul nsw i32 %296, %272
  %303 = mul nsw i32 %301, %274
  %304 = add nsw i32 %303, %302
  %305 = sub nsw i32 %293, %304
  %306 = mul nsw i32 %301, %276
  %307 = add nsw i32 %293, %306
  %308 = ashr i32 %298, 6
  %309 = lshr i32 %308, 31
  %310 = xor i32 %309, 1
  %311 = sub nsw i32 0, %310
  %312 = and i32 %308, %311
  %313 = icmp slt i32 %312, 255
  %314 = select i1 %313, i32 %312, i32 255
  %315 = trunc i32 %314 to i8
  store i8 %315, i8* %262, align 1
  %316 = ashr i32 %305, 6
  %317 = lshr i32 %316, 31
  %318 = xor i32 %317, 1
  %319 = sub nsw i32 0, %318
  %320 = and i32 %316, %319
  %321 = icmp slt i32 %320, 255
  %322 = select i1 %321, i32 %320, i32 255
  %323 = trunc i32 %322 to i8
  store i8 %323, i8* %267, align 1
  %324 = ashr i32 %307, 6
  %325 = lshr i32 %324, 31
  %326 = xor i32 %325, 1
  %327 = sub nsw i32 0, %326
  %328 = and i32 %324, %327
  %329 = icmp slt i32 %328, 255
  %330 = select i1 %329, i32 %328, i32 255
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %268, align 1
  %332 = getelementptr inbounds i8, i8* %262, i64 3
  store i8 -1, i8* %332, align 1
  %333 = getelementptr inbounds i16, i16* %260, i64 1
  %334 = load i16, i16* %333, align 2
  %335 = load i16, i16* %261, align 2
  %336 = load i16, i16* %263, align 2
  %337 = getelementptr inbounds i8, i8* %262, i64 4
  %338 = getelementptr inbounds i8, i8* %262, i64 5
  %339 = getelementptr inbounds i8, i8* %262, i64 6
  %340 = load i8, i8* %13, align 2
  %341 = zext i8 %340 to i32
  %342 = load i8, i8* %14, align 2
  %343 = zext i8 %342 to i32
  %344 = load i8, i8* %15, align 1
  %345 = zext i8 %344 to i32
  %346 = load i8, i8* %16, align 1
  %347 = zext i8 %346 to i32
  %348 = load i16, i16* %17, align 2
  %349 = sext i16 %348 to i32
  %350 = load i16, i16* %18, align 2
  %351 = sext i16 %350 to i32
  %352 = zext i16 %334 to i32
  %353 = shl nuw nsw i32 %352, 6
  %354 = lshr i16 %335, 2
  %355 = icmp ugt i16 %335, 1019
  %356 = select i1 %355, i16 255, i16 %354
  %357 = zext i16 %356 to i32
  %358 = lshr i16 %336, 2
  %359 = icmp ugt i16 %336, 1019
  %360 = select i1 %359, i16 255, i16 %358
  %361 = zext i16 %360 to i32
  %362 = mul i32 %353, %349
  %363 = lshr i32 %362, 16
  %364 = add nsw i32 %363, %351
  %365 = shl i32 %357, 24
  %366 = ashr exact i32 %365, 24
  %367 = xor i32 %366, -128
  %368 = mul nsw i32 %367, %341
  %369 = add nsw i32 %364, %368
  %370 = shl i32 %361, 24
  %371 = ashr exact i32 %370, 24
  %372 = xor i32 %371, -128
  %373 = mul nsw i32 %367, %343
  %374 = mul nsw i32 %372, %345
  %375 = add nsw i32 %374, %373
  %376 = sub nsw i32 %364, %375
  %377 = mul nsw i32 %372, %347
  %378 = add nsw i32 %364, %377
  %379 = ashr i32 %369, 6
  %380 = lshr i32 %379, 31
  %381 = xor i32 %380, 1
  %382 = sub nsw i32 0, %381
  %383 = and i32 %379, %382
  %384 = icmp slt i32 %383, 255
  %385 = select i1 %384, i32 %383, i32 255
  %386 = trunc i32 %385 to i8
  store i8 %386, i8* %337, align 1
  %387 = ashr i32 %376, 6
  %388 = lshr i32 %387, 31
  %389 = xor i32 %388, 1
  %390 = sub nsw i32 0, %389
  %391 = and i32 %387, %390
  %392 = icmp slt i32 %391, 255
  %393 = select i1 %392, i32 %391, i32 255
  %394 = trunc i32 %393 to i8
  store i8 %394, i8* %338, align 1
  %395 = ashr i32 %378, 6
  %396 = lshr i32 %395, 31
  %397 = xor i32 %396, 1
  %398 = sub nsw i32 0, %397
  %399 = and i32 %395, %398
  %400 = icmp slt i32 %399, 255
  %401 = select i1 %400, i32 %399, i32 255
  %402 = trunc i32 %401 to i8
  store i8 %402, i8* %339, align 1
  %403 = getelementptr inbounds i8, i8* %262, i64 7
  store i8 -1, i8* %403, align 1
  %404 = getelementptr inbounds i16, i16* %260, i64 2
  %405 = getelementptr inbounds i16, i16* %261, i64 1
  %406 = getelementptr inbounds i16, i16* %263, i64 1
  %407 = getelementptr inbounds i8, i8* %262, i64 8
  %408 = add nuw nsw i32 %259, 2
  %409 = icmp slt i32 %408, %10
  br i1 %409, label %258, label %410, !llvm.loop !270

410:                                              ; preds = %258, %250, %6
  %411 = phi i16* [ %2, %6 ], [ %69, %250 ], [ %406, %258 ]
  %412 = phi i8* [ %3, %6 ], [ %68, %250 ], [ %407, %258 ]
  %413 = phi i16* [ %1, %6 ], [ %66, %250 ], [ %405, %258 ]
  %414 = phi i16* [ %0, %6 ], [ %65, %250 ], [ %404, %258 ]
  %415 = and i32 %5, 1
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %493, label %417

417:                                              ; preds = %410
  %418 = load i16, i16* %414, align 2
  %419 = load i16, i16* %413, align 2
  %420 = load i16, i16* %411, align 2
  %421 = getelementptr inbounds i8, i8* %412, i64 1
  %422 = getelementptr inbounds i8, i8* %412, i64 2
  %423 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %424 = load i8, i8* %423, align 2
  %425 = zext i8 %424 to i32
  %426 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %427 = load i8, i8* %426, align 2
  %428 = zext i8 %427 to i32
  %429 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i32
  %432 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i32
  %435 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %436 = load i16, i16* %435, align 2
  %437 = sext i16 %436 to i32
  %438 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %439 = load i16, i16* %438, align 2
  %440 = sext i16 %439 to i32
  %441 = zext i16 %418 to i32
  %442 = shl nuw nsw i32 %441, 6
  %443 = lshr i16 %419, 2
  %444 = icmp ugt i16 %419, 1019
  %445 = select i1 %444, i16 255, i16 %443
  %446 = zext i16 %445 to i32
  %447 = lshr i16 %420, 2
  %448 = icmp ugt i16 %420, 1019
  %449 = select i1 %448, i16 255, i16 %447
  %450 = zext i16 %449 to i32
  %451 = mul i32 %442, %437
  %452 = lshr i32 %451, 16
  %453 = add nsw i32 %452, %440
  %454 = shl i32 %446, 24
  %455 = ashr exact i32 %454, 24
  %456 = xor i32 %455, -128
  %457 = mul nsw i32 %456, %425
  %458 = add nsw i32 %453, %457
  %459 = shl i32 %450, 24
  %460 = ashr exact i32 %459, 24
  %461 = xor i32 %460, -128
  %462 = mul nsw i32 %456, %428
  %463 = mul nsw i32 %461, %431
  %464 = add nsw i32 %463, %462
  %465 = sub nsw i32 %453, %464
  %466 = mul nsw i32 %461, %434
  %467 = add nsw i32 %453, %466
  %468 = ashr i32 %458, 6
  %469 = lshr i32 %468, 31
  %470 = xor i32 %469, 1
  %471 = sub nsw i32 0, %470
  %472 = and i32 %468, %471
  %473 = icmp slt i32 %472, 255
  %474 = select i1 %473, i32 %472, i32 255
  %475 = trunc i32 %474 to i8
  store i8 %475, i8* %412, align 1
  %476 = ashr i32 %465, 6
  %477 = lshr i32 %476, 31
  %478 = xor i32 %477, 1
  %479 = sub nsw i32 0, %478
  %480 = and i32 %476, %479
  %481 = icmp slt i32 %480, 255
  %482 = select i1 %481, i32 %480, i32 255
  %483 = trunc i32 %482 to i8
  store i8 %483, i8* %421, align 1
  %484 = ashr i32 %467, 6
  %485 = lshr i32 %484, 31
  %486 = xor i32 %485, 1
  %487 = sub nsw i32 0, %486
  %488 = and i32 %484, %487
  %489 = icmp slt i32 %488, 255
  %490 = select i1 %489, i32 %488, i32 255
  %491 = trunc i32 %490 to i8
  store i8 %491, i8* %422, align 1
  %492 = getelementptr inbounds i8, i8* %412, i64 3
  store i8 -1, i8* %492, align 1
  br label %493

493:                                              ; preds = %410, %417
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I410ToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = icmp sgt i32 %5, 0
  br i1 %10, label %11, label %245

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %18 = add i32 %5, -1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i64 %20, 8
  br i1 %21, label %158, label %22

22:                                               ; preds = %11
  %23 = add i32 %5, -1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  %26 = add nuw nsw i64 %25, 4
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = add nuw nsw i64 %24, 1
  %29 = getelementptr i16, i16* %0, i64 %28
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i16, i16* %1, i64 %28
  %32 = bitcast i16* %31 to i8*
  %33 = getelementptr i16, i16* %2, i64 %28
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %30, %3
  %39 = icmp ugt i8* %27, %7
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %32, %3
  %42 = icmp ugt i8* %27, %8
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %9
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %17 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %158, label %54

54:                                               ; preds = %22
  %55 = and i64 %20, 8589934584
  %56 = trunc i64 %55 to i32
  %57 = getelementptr i16, i16* %0, i64 %55
  %58 = getelementptr i16, i16* %1, i64 %55
  %59 = shl nuw nsw i64 %55, 2
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = getelementptr i16, i16* %2, i64 %55
  br label %62

62:                                               ; preds = %62, %54
  %63 = phi i64 [ 0, %54 ], [ %154, %62 ]
  %64 = getelementptr i16, i16* %0, i64 %63
  %65 = getelementptr i16, i16* %1, i64 %63
  %66 = shl i64 %63, 2
  %67 = getelementptr i16, i16* %2, i64 %63
  %68 = bitcast i16* %64 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !271
  %70 = bitcast i16* %65 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !274
  %72 = bitcast i16* %67 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !276
  %74 = load i8, i8* %12, align 2, !alias.scope !278
  %75 = insertelement <8 x i8> undef, i8 %74, i32 0
  %76 = shufflevector <8 x i8> %75, <8 x i8> undef, <8 x i32> zeroinitializer
  %77 = zext <8 x i8> %76 to <8 x i32>
  %78 = load i8, i8* %13, align 2, !alias.scope !278
  %79 = insertelement <8 x i8> undef, i8 %78, i32 0
  %80 = shufflevector <8 x i8> %79, <8 x i8> undef, <8 x i32> zeroinitializer
  %81 = zext <8 x i8> %80 to <8 x i32>
  %82 = load i8, i8* %14, align 1, !alias.scope !278
  %83 = insertelement <8 x i8> undef, i8 %82, i32 0
  %84 = shufflevector <8 x i8> %83, <8 x i8> undef, <8 x i32> zeroinitializer
  %85 = zext <8 x i8> %84 to <8 x i32>
  %86 = load i8, i8* %15, align 1, !alias.scope !278
  %87 = insertelement <8 x i8> undef, i8 %86, i32 0
  %88 = shufflevector <8 x i8> %87, <8 x i8> undef, <8 x i32> zeroinitializer
  %89 = zext <8 x i8> %88 to <8 x i32>
  %90 = load i16, i16* %16, align 2, !alias.scope !278
  %91 = insertelement <8 x i16> undef, i16 %90, i32 0
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> zeroinitializer
  %93 = sext <8 x i16> %92 to <8 x i32>
  %94 = load i16, i16* %17, align 2, !alias.scope !278
  %95 = insertelement <8 x i16> undef, i16 %94, i32 0
  %96 = shufflevector <8 x i16> %95, <8 x i16> undef, <8 x i32> zeroinitializer
  %97 = sext <8 x i16> %96 to <8 x i32>
  %98 = zext <8 x i16> %69 to <8 x i32>
  %99 = shl nuw nsw <8 x i32> %98, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %100 = lshr <8 x i16> %71, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %101 = icmp ugt <8 x i16> %71, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %102 = select <8 x i1> %101, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %100
  %103 = zext <8 x i16> %102 to <8 x i32>
  %104 = lshr <8 x i16> %73, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %105 = icmp ugt <8 x i16> %73, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %106 = select <8 x i1> %105, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %104
  %107 = zext <8 x i16> %106 to <8 x i32>
  %108 = mul <8 x i32> %99, %93
  %109 = lshr <8 x i32> %108, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %110 = add nsw <8 x i32> %109, %97
  %111 = shl <8 x i32> %103, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %112 = ashr exact <8 x i32> %111, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %113 = xor <8 x i32> %112, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %114 = mul nsw <8 x i32> %113, %77
  %115 = add nsw <8 x i32> %110, %114
  %116 = shl <8 x i32> %107, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %117 = ashr exact <8 x i32> %116, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %118 = xor <8 x i32> %117, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %119 = mul nsw <8 x i32> %113, %81
  %120 = mul nsw <8 x i32> %118, %85
  %121 = add nsw <8 x i32> %120, %119
  %122 = sub nsw <8 x i32> %110, %121
  %123 = mul nsw <8 x i32> %118, %89
  %124 = add nsw <8 x i32> %110, %123
  %125 = ashr <8 x i32> %115, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = lshr <8 x i32> %125, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %127 = xor <8 x i32> %126, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = sub nsw <8 x i32> zeroinitializer, %127
  %129 = and <8 x i32> %125, %128
  %130 = icmp slt <8 x i32> %129, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = select <8 x i1> %130, <8 x i32> %129, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = trunc <8 x i32> %131 to <8 x i8>
  %133 = ashr <8 x i32> %122, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %134 = lshr <8 x i32> %133, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %135 = xor <8 x i32> %134, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %136 = sub nsw <8 x i32> zeroinitializer, %135
  %137 = and <8 x i32> %133, %136
  %138 = icmp slt <8 x i32> %137, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %139 = select <8 x i1> %138, <8 x i32> %137, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %140 = trunc <8 x i32> %139 to <8 x i8>
  %141 = ashr <8 x i32> %124, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %142 = lshr <8 x i32> %141, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %143 = xor <8 x i32> %142, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %144 = sub nsw <8 x i32> zeroinitializer, %143
  %145 = and <8 x i32> %141, %144
  %146 = icmp slt <8 x i32> %145, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %147 = select <8 x i1> %146, <8 x i32> %145, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %148 = trunc <8 x i32> %147 to <8 x i8>
  %149 = getelementptr inbounds i8, i8* %3, i64 %66
  %150 = bitcast i8* %149 to <32 x i8>*
  %151 = shufflevector <8 x i8> %132, <8 x i8> %140, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %152 = shufflevector <8 x i8> %148, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %153 = shufflevector <16 x i8> %151, <16 x i8> %152, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %153, <32 x i8>* %150, align 1
  %154 = add i64 %63, 8
  %155 = icmp eq i64 %154, %55
  br i1 %155, label %156, label %62, !llvm.loop !280

156:                                              ; preds = %62
  %157 = icmp eq i64 %20, %55
  br i1 %157, label %245, label %158

158:                                              ; preds = %156, %22, %11
  %159 = phi i32 [ 0, %22 ], [ 0, %11 ], [ %56, %156 ]
  %160 = phi i16* [ %0, %22 ], [ %0, %11 ], [ %57, %156 ]
  %161 = phi i16* [ %1, %22 ], [ %1, %11 ], [ %58, %156 ]
  %162 = phi i8* [ %3, %22 ], [ %3, %11 ], [ %60, %156 ]
  %163 = phi i16* [ %2, %22 ], [ %2, %11 ], [ %61, %156 ]
  br label %164

164:                                              ; preds = %158, %164
  %165 = phi i32 [ %243, %164 ], [ %159, %158 ]
  %166 = phi i16* [ %239, %164 ], [ %160, %158 ]
  %167 = phi i16* [ %240, %164 ], [ %161, %158 ]
  %168 = phi i8* [ %242, %164 ], [ %162, %158 ]
  %169 = phi i16* [ %241, %164 ], [ %163, %158 ]
  %170 = load i16, i16* %166, align 2
  %171 = load i16, i16* %167, align 2
  %172 = load i16, i16* %169, align 2
  %173 = getelementptr inbounds i8, i8* %168, i64 1
  %174 = getelementptr inbounds i8, i8* %168, i64 2
  %175 = load i8, i8* %12, align 2
  %176 = zext i8 %175 to i32
  %177 = load i8, i8* %13, align 2
  %178 = zext i8 %177 to i32
  %179 = load i8, i8* %14, align 1
  %180 = zext i8 %179 to i32
  %181 = load i8, i8* %15, align 1
  %182 = zext i8 %181 to i32
  %183 = load i16, i16* %16, align 2
  %184 = sext i16 %183 to i32
  %185 = load i16, i16* %17, align 2
  %186 = sext i16 %185 to i32
  %187 = zext i16 %170 to i32
  %188 = shl nuw nsw i32 %187, 6
  %189 = lshr i16 %171, 2
  %190 = icmp ugt i16 %171, 1019
  %191 = select i1 %190, i16 255, i16 %189
  %192 = zext i16 %191 to i32
  %193 = lshr i16 %172, 2
  %194 = icmp ugt i16 %172, 1019
  %195 = select i1 %194, i16 255, i16 %193
  %196 = zext i16 %195 to i32
  %197 = mul i32 %188, %184
  %198 = lshr i32 %197, 16
  %199 = add nsw i32 %198, %186
  %200 = shl i32 %192, 24
  %201 = ashr exact i32 %200, 24
  %202 = xor i32 %201, -128
  %203 = mul nsw i32 %202, %176
  %204 = add nsw i32 %199, %203
  %205 = shl i32 %196, 24
  %206 = ashr exact i32 %205, 24
  %207 = xor i32 %206, -128
  %208 = mul nsw i32 %202, %178
  %209 = mul nsw i32 %207, %180
  %210 = add nsw i32 %209, %208
  %211 = sub nsw i32 %199, %210
  %212 = mul nsw i32 %207, %182
  %213 = add nsw i32 %199, %212
  %214 = ashr i32 %204, 6
  %215 = lshr i32 %214, 31
  %216 = xor i32 %215, 1
  %217 = sub nsw i32 0, %216
  %218 = and i32 %214, %217
  %219 = icmp slt i32 %218, 255
  %220 = select i1 %219, i32 %218, i32 255
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %168, align 1
  %222 = ashr i32 %211, 6
  %223 = lshr i32 %222, 31
  %224 = xor i32 %223, 1
  %225 = sub nsw i32 0, %224
  %226 = and i32 %222, %225
  %227 = icmp slt i32 %226, 255
  %228 = select i1 %227, i32 %226, i32 255
  %229 = trunc i32 %228 to i8
  store i8 %229, i8* %173, align 1
  %230 = ashr i32 %213, 6
  %231 = lshr i32 %230, 31
  %232 = xor i32 %231, 1
  %233 = sub nsw i32 0, %232
  %234 = and i32 %230, %233
  %235 = icmp slt i32 %234, 255
  %236 = select i1 %235, i32 %234, i32 255
  %237 = trunc i32 %236 to i8
  store i8 %237, i8* %174, align 1
  %238 = getelementptr inbounds i8, i8* %168, i64 3
  store i8 -1, i8* %238, align 1
  %239 = getelementptr inbounds i16, i16* %166, i64 1
  %240 = getelementptr inbounds i16, i16* %167, i64 1
  %241 = getelementptr inbounds i16, i16* %169, i64 1
  %242 = getelementptr inbounds i8, i8* %168, i64 4
  %243 = add nuw nsw i32 %165, 1
  %244 = icmp eq i32 %243, %5
  br i1 %244, label %245, label %164, !llvm.loop !281

245:                                              ; preds = %164, %156, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I210AlphaToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = bitcast i16* %0 to i8*
  %9 = bitcast i16* %1 to i8*
  %10 = bitcast i16* %2 to i8*
  %11 = bitcast i16* %3 to i8*
  %12 = add nsw i32 %6, -1
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %448

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 0, i64 0
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 0
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 1
  %18 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 2, i64 1
  %19 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 3, i64 0
  %20 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %21 = add i32 %6, -2
  %22 = lshr i32 %21, 1
  %23 = add nuw i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = icmp ult i32 %23, 8
  br i1 %25, label %276, label %26

26:                                               ; preds = %14
  %27 = add i32 %6, -2
  %28 = lshr i32 %27, 1
  %29 = zext i32 %28 to i64
  %30 = shl nuw nsw i64 %29, 3
  %31 = add nuw nsw i64 %30, 8
  %32 = getelementptr i8, i8* %4, i64 %31
  %33 = and i32 %27, -2
  %34 = zext i32 %33 to i64
  %35 = add nuw nsw i64 %34, 2
  %36 = getelementptr i16, i16* %0, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = add nuw nsw i64 %29, 1
  %39 = getelementptr i16, i16* %1, i64 %38
  %40 = bitcast i16* %39 to i8*
  %41 = getelementptr i16, i16* %2, i64 %38
  %42 = bitcast i16* %41 to i8*
  %43 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %44 = bitcast i16* %43 to i8*
  %45 = getelementptr i8, i8* %44, i64 1
  %46 = getelementptr i16, i16* %3, i64 %35
  %47 = bitcast i16* %46 to i8*
  %48 = icmp ugt i8* %37, %4
  %49 = icmp ugt i8* %32, %8
  %50 = and i1 %48, %49
  %51 = icmp ugt i8* %40, %4
  %52 = icmp ugt i8* %32, %9
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = icmp ugt i8* %42, %4
  %56 = icmp ugt i8* %32, %10
  %57 = and i1 %55, %56
  %58 = or i1 %54, %57
  %59 = bitcast i16* %20 to i8*
  %60 = icmp ugt i8* %45, %4
  %61 = icmp ugt i8* %32, %59
  %62 = and i1 %60, %61
  %63 = or i1 %58, %62
  %64 = icmp ugt i8* %47, %4
  %65 = icmp ugt i8* %32, %11
  %66 = and i1 %64, %65
  %67 = or i1 %63, %66
  br i1 %67, label %276, label %68

68:                                               ; preds = %26
  %69 = and i64 %24, 4294967288
  %70 = trunc i64 %69 to i32
  %71 = shl i32 %70, 1
  %72 = shl nuw nsw i64 %69, 1
  %73 = getelementptr i16, i16* %0, i64 %72
  %74 = getelementptr i16, i16* %1, i64 %69
  %75 = shl nuw nsw i64 %69, 3
  %76 = getelementptr i8, i8* %4, i64 %75
  %77 = shl nuw nsw i64 %69, 1
  %78 = getelementptr i16, i16* %3, i64 %77
  %79 = getelementptr i16, i16* %2, i64 %69
  br label %80

80:                                               ; preds = %80, %68
  %81 = phi i64 [ 0, %68 ], [ %272, %80 ]
  %82 = shl i64 %81, 1
  %83 = getelementptr i16, i16* %0, i64 %82
  %84 = getelementptr i16, i16* %1, i64 %81
  %85 = shl i64 %81, 3
  %86 = shl i64 %81, 1
  %87 = getelementptr i16, i16* %3, i64 %86
  %88 = getelementptr i16, i16* %2, i64 %81
  %89 = bitcast i16* %83 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 2
  %91 = shufflevector <16 x i16> %90, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %92 = shufflevector <16 x i16> %90, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %93 = bitcast i16* %84 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !282
  %95 = bitcast i16* %88 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !285
  %97 = load i8, i8* %15, align 2, !alias.scope !287
  %98 = insertelement <8 x i8> undef, i8 %97, i32 0
  %99 = shufflevector <8 x i8> %98, <8 x i8> undef, <8 x i32> zeroinitializer
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = load i8, i8* %16, align 2, !alias.scope !287
  %102 = insertelement <8 x i8> undef, i8 %101, i32 0
  %103 = shufflevector <8 x i8> %102, <8 x i8> undef, <8 x i32> zeroinitializer
  %104 = zext <8 x i8> %103 to <8 x i32>
  %105 = load i8, i8* %17, align 1, !alias.scope !287
  %106 = insertelement <8 x i8> undef, i8 %105, i32 0
  %107 = shufflevector <8 x i8> %106, <8 x i8> undef, <8 x i32> zeroinitializer
  %108 = zext <8 x i8> %107 to <8 x i32>
  %109 = load i8, i8* %18, align 1, !alias.scope !287
  %110 = insertelement <8 x i8> undef, i8 %109, i32 0
  %111 = shufflevector <8 x i8> %110, <8 x i8> undef, <8 x i32> zeroinitializer
  %112 = zext <8 x i8> %111 to <8 x i32>
  %113 = load i16, i16* %19, align 2, !alias.scope !287
  %114 = insertelement <8 x i16> undef, i16 %113, i32 0
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <8 x i32> zeroinitializer
  %116 = sext <8 x i16> %115 to <8 x i32>
  %117 = load i16, i16* %20, align 2, !alias.scope !287
  %118 = insertelement <8 x i16> undef, i16 %117, i32 0
  %119 = shufflevector <8 x i16> %118, <8 x i16> undef, <8 x i32> zeroinitializer
  %120 = sext <8 x i16> %119 to <8 x i32>
  %121 = zext <8 x i16> %91 to <8 x i32>
  %122 = shl nuw nsw <8 x i32> %121, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %123 = lshr <8 x i16> %94, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %124 = icmp ugt <8 x i16> %94, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %125 = select <8 x i1> %124, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %123
  %126 = zext <8 x i16> %125 to <8 x i32>
  %127 = lshr <8 x i16> %96, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %128 = icmp ugt <8 x i16> %96, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %129 = select <8 x i1> %128, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %127
  %130 = zext <8 x i16> %129 to <8 x i32>
  %131 = mul <8 x i32> %122, %116
  %132 = lshr <8 x i32> %131, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %133 = add nsw <8 x i32> %132, %120
  %134 = shl <8 x i32> %126, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %135 = ashr exact <8 x i32> %134, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %136 = xor <8 x i32> %135, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %137 = mul nsw <8 x i32> %136, %100
  %138 = add nsw <8 x i32> %133, %137
  %139 = shl <8 x i32> %130, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %140 = ashr exact <8 x i32> %139, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %141 = xor <8 x i32> %140, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %142 = mul nsw <8 x i32> %136, %104
  %143 = mul nsw <8 x i32> %141, %108
  %144 = add nsw <8 x i32> %143, %142
  %145 = sub nsw <8 x i32> %133, %144
  %146 = mul nsw <8 x i32> %141, %112
  %147 = add nsw <8 x i32> %133, %146
  %148 = ashr <8 x i32> %138, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %149 = lshr <8 x i32> %148, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %150 = xor <8 x i32> %149, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %151 = sub nsw <8 x i32> zeroinitializer, %150
  %152 = and <8 x i32> %148, %151
  %153 = icmp slt <8 x i32> %152, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %154 = select <8 x i1> %153, <8 x i32> %152, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %155 = trunc <8 x i32> %154 to <8 x i8>
  %156 = ashr <8 x i32> %145, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %157 = lshr <8 x i32> %156, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %158 = xor <8 x i32> %157, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %159 = sub nsw <8 x i32> zeroinitializer, %158
  %160 = and <8 x i32> %156, %159
  %161 = icmp slt <8 x i32> %160, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %162 = select <8 x i1> %161, <8 x i32> %160, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %163 = trunc <8 x i32> %162 to <8 x i8>
  %164 = ashr <8 x i32> %147, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %165 = lshr <8 x i32> %164, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %166 = xor <8 x i32> %165, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %167 = sub nsw <8 x i32> zeroinitializer, %166
  %168 = and <8 x i32> %164, %167
  %169 = icmp slt <8 x i32> %168, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %170 = select <8 x i1> %169, <8 x i32> %168, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %171 = trunc <8 x i32> %170 to <8 x i8>
  %172 = bitcast i16* %87 to <16 x i16>*
  %173 = load <16 x i16>, <16 x i16>* %172, align 2
  %174 = shufflevector <16 x i16> %173, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %175 = shufflevector <16 x i16> %173, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %176 = lshr <8 x i16> %174, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %177 = icmp ugt <8 x i16> %174, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %178 = select <8 x i1> %177, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %176
  %179 = trunc <8 x i16> %178 to <8 x i8>
  %180 = bitcast i16* %84 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2, !alias.scope !282
  %182 = bitcast i16* %88 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2, !alias.scope !285
  %184 = load i8, i8* %15, align 2, !alias.scope !287
  %185 = insertelement <8 x i8> undef, i8 %184, i32 0
  %186 = shufflevector <8 x i8> %185, <8 x i8> undef, <8 x i32> zeroinitializer
  %187 = zext <8 x i8> %186 to <8 x i32>
  %188 = load i8, i8* %16, align 2, !alias.scope !287
  %189 = insertelement <8 x i8> undef, i8 %188, i32 0
  %190 = shufflevector <8 x i8> %189, <8 x i8> undef, <8 x i32> zeroinitializer
  %191 = zext <8 x i8> %190 to <8 x i32>
  %192 = load i8, i8* %17, align 1, !alias.scope !287
  %193 = insertelement <8 x i8> undef, i8 %192, i32 0
  %194 = shufflevector <8 x i8> %193, <8 x i8> undef, <8 x i32> zeroinitializer
  %195 = zext <8 x i8> %194 to <8 x i32>
  %196 = load i8, i8* %18, align 1, !alias.scope !287
  %197 = insertelement <8 x i8> undef, i8 %196, i32 0
  %198 = shufflevector <8 x i8> %197, <8 x i8> undef, <8 x i32> zeroinitializer
  %199 = zext <8 x i8> %198 to <8 x i32>
  %200 = load i16, i16* %19, align 2, !alias.scope !287
  %201 = insertelement <8 x i16> undef, i16 %200, i32 0
  %202 = shufflevector <8 x i16> %201, <8 x i16> undef, <8 x i32> zeroinitializer
  %203 = sext <8 x i16> %202 to <8 x i32>
  %204 = load i16, i16* %20, align 2, !alias.scope !287
  %205 = insertelement <8 x i16> undef, i16 %204, i32 0
  %206 = shufflevector <8 x i16> %205, <8 x i16> undef, <8 x i32> zeroinitializer
  %207 = sext <8 x i16> %206 to <8 x i32>
  %208 = zext <8 x i16> %92 to <8 x i32>
  %209 = shl nuw nsw <8 x i32> %208, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %210 = lshr <8 x i16> %181, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %211 = icmp ugt <8 x i16> %181, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %212 = select <8 x i1> %211, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %210
  %213 = zext <8 x i16> %212 to <8 x i32>
  %214 = lshr <8 x i16> %183, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %215 = icmp ugt <8 x i16> %183, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %216 = select <8 x i1> %215, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %214
  %217 = zext <8 x i16> %216 to <8 x i32>
  %218 = mul <8 x i32> %209, %203
  %219 = lshr <8 x i32> %218, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %220 = add nsw <8 x i32> %219, %207
  %221 = shl <8 x i32> %213, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %222 = ashr exact <8 x i32> %221, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %223 = xor <8 x i32> %222, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %224 = mul nsw <8 x i32> %223, %187
  %225 = add nsw <8 x i32> %220, %224
  %226 = shl <8 x i32> %217, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %227 = ashr exact <8 x i32> %226, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %228 = xor <8 x i32> %227, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %229 = mul nsw <8 x i32> %223, %191
  %230 = mul nsw <8 x i32> %228, %195
  %231 = add nsw <8 x i32> %230, %229
  %232 = sub nsw <8 x i32> %220, %231
  %233 = mul nsw <8 x i32> %228, %199
  %234 = add nsw <8 x i32> %220, %233
  %235 = ashr <8 x i32> %225, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %236 = lshr <8 x i32> %235, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %237 = xor <8 x i32> %236, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %238 = sub nsw <8 x i32> zeroinitializer, %237
  %239 = and <8 x i32> %235, %238
  %240 = icmp slt <8 x i32> %239, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %241 = select <8 x i1> %240, <8 x i32> %239, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %242 = trunc <8 x i32> %241 to <8 x i8>
  %243 = ashr <8 x i32> %232, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %244 = lshr <8 x i32> %243, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %245 = xor <8 x i32> %244, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %246 = sub nsw <8 x i32> zeroinitializer, %245
  %247 = and <8 x i32> %243, %246
  %248 = icmp slt <8 x i32> %247, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %249 = select <8 x i1> %248, <8 x i32> %247, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %250 = trunc <8 x i32> %249 to <8 x i8>
  %251 = ashr <8 x i32> %234, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %252 = lshr <8 x i32> %251, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %253 = xor <8 x i32> %252, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %254 = sub nsw <8 x i32> zeroinitializer, %253
  %255 = and <8 x i32> %251, %254
  %256 = icmp slt <8 x i32> %255, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %257 = select <8 x i1> %256, <8 x i32> %255, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %258 = trunc <8 x i32> %257 to <8 x i8>
  %259 = lshr <8 x i16> %175, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %260 = icmp ugt <8 x i16> %175, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %261 = select <8 x i1> %260, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %259
  %262 = trunc <8 x i16> %261 to <8 x i8>
  %263 = getelementptr inbounds i8, i8* %4, i64 %85
  %264 = bitcast i8* %263 to <64 x i8>*
  %265 = shufflevector <8 x i8> %155, <8 x i8> %163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %266 = shufflevector <8 x i8> %171, <8 x i8> %179, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %267 = shufflevector <8 x i8> %242, <8 x i8> %250, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %268 = shufflevector <8 x i8> %258, <8 x i8> %262, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %269 = shufflevector <16 x i8> %265, <16 x i8> %266, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %270 = shufflevector <16 x i8> %267, <16 x i8> %268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %271 = shufflevector <32 x i8> %269, <32 x i8> %270, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %271, <64 x i8>* %264, align 1
  %272 = add i64 %81, 8
  %273 = icmp eq i64 %272, %69
  br i1 %273, label %274, label %80, !llvm.loop !289

274:                                              ; preds = %80
  %275 = icmp eq i64 %69, %24
  br i1 %275, label %448, label %276

276:                                              ; preds = %274, %26, %14
  %277 = phi i32 [ 0, %26 ], [ 0, %14 ], [ %71, %274 ]
  %278 = phi i16* [ %0, %26 ], [ %0, %14 ], [ %73, %274 ]
  %279 = phi i16* [ %1, %26 ], [ %1, %14 ], [ %74, %274 ]
  %280 = phi i8* [ %4, %26 ], [ %4, %14 ], [ %76, %274 ]
  %281 = phi i16* [ %3, %26 ], [ %3, %14 ], [ %78, %274 ]
  %282 = phi i16* [ %2, %26 ], [ %2, %14 ], [ %79, %274 ]
  br label %283

283:                                              ; preds = %276, %283
  %284 = phi i32 [ %446, %283 ], [ %277, %276 ]
  %285 = phi i16* [ %441, %283 ], [ %278, %276 ]
  %286 = phi i16* [ %442, %283 ], [ %279, %276 ]
  %287 = phi i8* [ %445, %283 ], [ %280, %276 ]
  %288 = phi i16* [ %444, %283 ], [ %281, %276 ]
  %289 = phi i16* [ %443, %283 ], [ %282, %276 ]
  %290 = load i16, i16* %285, align 2
  %291 = load i16, i16* %286, align 2
  %292 = load i16, i16* %289, align 2
  %293 = getelementptr inbounds i8, i8* %287, i64 1
  %294 = getelementptr inbounds i8, i8* %287, i64 2
  %295 = load i8, i8* %15, align 2
  %296 = zext i8 %295 to i32
  %297 = load i8, i8* %16, align 2
  %298 = zext i8 %297 to i32
  %299 = load i8, i8* %17, align 1
  %300 = zext i8 %299 to i32
  %301 = load i8, i8* %18, align 1
  %302 = zext i8 %301 to i32
  %303 = load i16, i16* %19, align 2
  %304 = sext i16 %303 to i32
  %305 = load i16, i16* %20, align 2
  %306 = sext i16 %305 to i32
  %307 = zext i16 %290 to i32
  %308 = shl nuw nsw i32 %307, 6
  %309 = lshr i16 %291, 2
  %310 = icmp ugt i16 %291, 1019
  %311 = select i1 %310, i16 255, i16 %309
  %312 = zext i16 %311 to i32
  %313 = lshr i16 %292, 2
  %314 = icmp ugt i16 %292, 1019
  %315 = select i1 %314, i16 255, i16 %313
  %316 = zext i16 %315 to i32
  %317 = mul i32 %308, %304
  %318 = lshr i32 %317, 16
  %319 = add nsw i32 %318, %306
  %320 = shl i32 %312, 24
  %321 = ashr exact i32 %320, 24
  %322 = xor i32 %321, -128
  %323 = mul nsw i32 %322, %296
  %324 = add nsw i32 %319, %323
  %325 = shl i32 %316, 24
  %326 = ashr exact i32 %325, 24
  %327 = xor i32 %326, -128
  %328 = mul nsw i32 %322, %298
  %329 = mul nsw i32 %327, %300
  %330 = add nsw i32 %329, %328
  %331 = sub nsw i32 %319, %330
  %332 = mul nsw i32 %327, %302
  %333 = add nsw i32 %319, %332
  %334 = ashr i32 %324, 6
  %335 = lshr i32 %334, 31
  %336 = xor i32 %335, 1
  %337 = sub nsw i32 0, %336
  %338 = and i32 %334, %337
  %339 = icmp slt i32 %338, 255
  %340 = select i1 %339, i32 %338, i32 255
  %341 = trunc i32 %340 to i8
  store i8 %341, i8* %287, align 1
  %342 = ashr i32 %331, 6
  %343 = lshr i32 %342, 31
  %344 = xor i32 %343, 1
  %345 = sub nsw i32 0, %344
  %346 = and i32 %342, %345
  %347 = icmp slt i32 %346, 255
  %348 = select i1 %347, i32 %346, i32 255
  %349 = trunc i32 %348 to i8
  store i8 %349, i8* %293, align 1
  %350 = ashr i32 %333, 6
  %351 = lshr i32 %350, 31
  %352 = xor i32 %351, 1
  %353 = sub nsw i32 0, %352
  %354 = and i32 %350, %353
  %355 = icmp slt i32 %354, 255
  %356 = select i1 %355, i32 %354, i32 255
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %294, align 1
  %358 = load i16, i16* %288, align 2
  %359 = lshr i16 %358, 2
  %360 = icmp ugt i16 %358, 1019
  %361 = select i1 %360, i16 255, i16 %359
  %362 = trunc i16 %361 to i8
  %363 = getelementptr inbounds i8, i8* %287, i64 3
  store i8 %362, i8* %363, align 1
  %364 = getelementptr inbounds i16, i16* %285, i64 1
  %365 = load i16, i16* %364, align 2
  %366 = load i16, i16* %286, align 2
  %367 = load i16, i16* %289, align 2
  %368 = getelementptr inbounds i8, i8* %287, i64 4
  %369 = getelementptr inbounds i8, i8* %287, i64 5
  %370 = getelementptr inbounds i8, i8* %287, i64 6
  %371 = load i8, i8* %15, align 2
  %372 = zext i8 %371 to i32
  %373 = load i8, i8* %16, align 2
  %374 = zext i8 %373 to i32
  %375 = load i8, i8* %17, align 1
  %376 = zext i8 %375 to i32
  %377 = load i8, i8* %18, align 1
  %378 = zext i8 %377 to i32
  %379 = load i16, i16* %19, align 2
  %380 = sext i16 %379 to i32
  %381 = load i16, i16* %20, align 2
  %382 = sext i16 %381 to i32
  %383 = zext i16 %365 to i32
  %384 = shl nuw nsw i32 %383, 6
  %385 = lshr i16 %366, 2
  %386 = icmp ugt i16 %366, 1019
  %387 = select i1 %386, i16 255, i16 %385
  %388 = zext i16 %387 to i32
  %389 = lshr i16 %367, 2
  %390 = icmp ugt i16 %367, 1019
  %391 = select i1 %390, i16 255, i16 %389
  %392 = zext i16 %391 to i32
  %393 = mul i32 %384, %380
  %394 = lshr i32 %393, 16
  %395 = add nsw i32 %394, %382
  %396 = shl i32 %388, 24
  %397 = ashr exact i32 %396, 24
  %398 = xor i32 %397, -128
  %399 = mul nsw i32 %398, %372
  %400 = add nsw i32 %395, %399
  %401 = shl i32 %392, 24
  %402 = ashr exact i32 %401, 24
  %403 = xor i32 %402, -128
  %404 = mul nsw i32 %398, %374
  %405 = mul nsw i32 %403, %376
  %406 = add nsw i32 %405, %404
  %407 = sub nsw i32 %395, %406
  %408 = mul nsw i32 %403, %378
  %409 = add nsw i32 %395, %408
  %410 = ashr i32 %400, 6
  %411 = lshr i32 %410, 31
  %412 = xor i32 %411, 1
  %413 = sub nsw i32 0, %412
  %414 = and i32 %410, %413
  %415 = icmp slt i32 %414, 255
  %416 = select i1 %415, i32 %414, i32 255
  %417 = trunc i32 %416 to i8
  store i8 %417, i8* %368, align 1
  %418 = ashr i32 %407, 6
  %419 = lshr i32 %418, 31
  %420 = xor i32 %419, 1
  %421 = sub nsw i32 0, %420
  %422 = and i32 %418, %421
  %423 = icmp slt i32 %422, 255
  %424 = select i1 %423, i32 %422, i32 255
  %425 = trunc i32 %424 to i8
  store i8 %425, i8* %369, align 1
  %426 = ashr i32 %409, 6
  %427 = lshr i32 %426, 31
  %428 = xor i32 %427, 1
  %429 = sub nsw i32 0, %428
  %430 = and i32 %426, %429
  %431 = icmp slt i32 %430, 255
  %432 = select i1 %431, i32 %430, i32 255
  %433 = trunc i32 %432 to i8
  store i8 %433, i8* %370, align 1
  %434 = getelementptr inbounds i16, i16* %288, i64 1
  %435 = load i16, i16* %434, align 2
  %436 = lshr i16 %435, 2
  %437 = icmp ugt i16 %435, 1019
  %438 = select i1 %437, i16 255, i16 %436
  %439 = trunc i16 %438 to i8
  %440 = getelementptr inbounds i8, i8* %287, i64 7
  store i8 %439, i8* %440, align 1
  %441 = getelementptr inbounds i16, i16* %285, i64 2
  %442 = getelementptr inbounds i16, i16* %286, i64 1
  %443 = getelementptr inbounds i16, i16* %289, i64 1
  %444 = getelementptr inbounds i16, i16* %288, i64 2
  %445 = getelementptr inbounds i8, i8* %287, i64 8
  %446 = add nuw nsw i32 %284, 2
  %447 = icmp slt i32 %446, %12
  br i1 %447, label %283, label %448, !llvm.loop !290

448:                                              ; preds = %283, %274, %7
  %449 = phi i16* [ %2, %7 ], [ %79, %274 ], [ %443, %283 ]
  %450 = phi i16* [ %3, %7 ], [ %78, %274 ], [ %444, %283 ]
  %451 = phi i8* [ %4, %7 ], [ %76, %274 ], [ %445, %283 ]
  %452 = phi i16* [ %1, %7 ], [ %74, %274 ], [ %442, %283 ]
  %453 = phi i16* [ %0, %7 ], [ %73, %274 ], [ %441, %283 ]
  %454 = and i32 %6, 1
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %537, label %456

456:                                              ; preds = %448
  %457 = load i16, i16* %453, align 2
  %458 = load i16, i16* %452, align 2
  %459 = load i16, i16* %449, align 2
  %460 = getelementptr inbounds i8, i8* %451, i64 1
  %461 = getelementptr inbounds i8, i8* %451, i64 2
  %462 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 0, i64 0
  %463 = load i8, i8* %462, align 2
  %464 = zext i8 %463 to i32
  %465 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 0
  %466 = load i8, i8* %465, align 2
  %467 = zext i8 %466 to i32
  %468 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 1
  %469 = load i8, i8* %468, align 1
  %470 = zext i8 %469 to i32
  %471 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 2, i64 1
  %472 = load i8, i8* %471, align 1
  %473 = zext i8 %472 to i32
  %474 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 3, i64 0
  %475 = load i16, i16* %474, align 2
  %476 = sext i16 %475 to i32
  %477 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %478 = load i16, i16* %477, align 2
  %479 = sext i16 %478 to i32
  %480 = zext i16 %457 to i32
  %481 = shl nuw nsw i32 %480, 6
  %482 = lshr i16 %458, 2
  %483 = icmp ugt i16 %458, 1019
  %484 = select i1 %483, i16 255, i16 %482
  %485 = zext i16 %484 to i32
  %486 = lshr i16 %459, 2
  %487 = icmp ugt i16 %459, 1019
  %488 = select i1 %487, i16 255, i16 %486
  %489 = zext i16 %488 to i32
  %490 = mul i32 %481, %476
  %491 = lshr i32 %490, 16
  %492 = add nsw i32 %491, %479
  %493 = shl i32 %485, 24
  %494 = ashr exact i32 %493, 24
  %495 = xor i32 %494, -128
  %496 = mul nsw i32 %495, %464
  %497 = add nsw i32 %492, %496
  %498 = shl i32 %489, 24
  %499 = ashr exact i32 %498, 24
  %500 = xor i32 %499, -128
  %501 = mul nsw i32 %495, %467
  %502 = mul nsw i32 %500, %470
  %503 = add nsw i32 %502, %501
  %504 = sub nsw i32 %492, %503
  %505 = mul nsw i32 %500, %473
  %506 = add nsw i32 %492, %505
  %507 = ashr i32 %497, 6
  %508 = lshr i32 %507, 31
  %509 = xor i32 %508, 1
  %510 = sub nsw i32 0, %509
  %511 = and i32 %507, %510
  %512 = icmp slt i32 %511, 255
  %513 = select i1 %512, i32 %511, i32 255
  %514 = trunc i32 %513 to i8
  store i8 %514, i8* %451, align 1
  %515 = ashr i32 %504, 6
  %516 = lshr i32 %515, 31
  %517 = xor i32 %516, 1
  %518 = sub nsw i32 0, %517
  %519 = and i32 %515, %518
  %520 = icmp slt i32 %519, 255
  %521 = select i1 %520, i32 %519, i32 255
  %522 = trunc i32 %521 to i8
  store i8 %522, i8* %460, align 1
  %523 = ashr i32 %506, 6
  %524 = lshr i32 %523, 31
  %525 = xor i32 %524, 1
  %526 = sub nsw i32 0, %525
  %527 = and i32 %523, %526
  %528 = icmp slt i32 %527, 255
  %529 = select i1 %528, i32 %527, i32 255
  %530 = trunc i32 %529 to i8
  store i8 %530, i8* %461, align 1
  %531 = load i16, i16* %450, align 2
  %532 = lshr i16 %531, 2
  %533 = icmp ugt i16 %531, 1019
  %534 = select i1 %533, i16 255, i16 %532
  %535 = trunc i16 %534 to i8
  %536 = getelementptr inbounds i8, i8* %451, i64 3
  store i8 %535, i8* %536, align 1
  br label %537

537:                                              ; preds = %448, %456
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I410AlphaToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = bitcast i16* %0 to i8*
  %9 = bitcast i16* %1 to i8*
  %10 = bitcast i16* %2 to i8*
  %11 = bitcast i16* %3 to i8*
  %12 = icmp sgt i32 %6, 0
  br i1 %12, label %13, label %269

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 0, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 0
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 1
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 2, i64 1
  %18 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 3, i64 0
  %19 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %20 = add i32 %6, -1
  %21 = zext i32 %20 to i64
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i64 %22, 8
  br i1 %23, label %174, label %24

24:                                               ; preds = %13
  %25 = add i32 %6, -1
  %26 = zext i32 %25 to i64
  %27 = shl nuw nsw i64 %26, 2
  %28 = add nuw nsw i64 %27, 4
  %29 = getelementptr i8, i8* %4, i64 %28
  %30 = add nuw nsw i64 %26, 1
  %31 = getelementptr i16, i16* %0, i64 %30
  %32 = bitcast i16* %31 to i8*
  %33 = getelementptr i16, i16* %1, i64 %30
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr i16, i16* %2, i64 %30
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %38 = bitcast i16* %37 to i8*
  %39 = getelementptr i8, i8* %38, i64 1
  %40 = getelementptr i16, i16* %3, i64 %30
  %41 = bitcast i16* %40 to i8*
  %42 = icmp ugt i8* %32, %4
  %43 = icmp ugt i8* %29, %8
  %44 = and i1 %42, %43
  %45 = icmp ugt i8* %34, %4
  %46 = icmp ugt i8* %29, %9
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = icmp ugt i8* %36, %4
  %50 = icmp ugt i8* %29, %10
  %51 = and i1 %49, %50
  %52 = or i1 %48, %51
  %53 = bitcast i16* %19 to i8*
  %54 = icmp ugt i8* %39, %4
  %55 = icmp ugt i8* %29, %53
  %56 = and i1 %54, %55
  %57 = or i1 %52, %56
  %58 = icmp ugt i8* %41, %4
  %59 = icmp ugt i8* %29, %11
  %60 = and i1 %58, %59
  %61 = or i1 %57, %60
  br i1 %61, label %174, label %62

62:                                               ; preds = %24
  %63 = and i64 %22, 8589934584
  %64 = trunc i64 %63 to i32
  %65 = getelementptr i16, i16* %0, i64 %63
  %66 = getelementptr i16, i16* %1, i64 %63
  %67 = shl nuw nsw i64 %63, 2
  %68 = getelementptr i8, i8* %4, i64 %67
  %69 = getelementptr i16, i16* %3, i64 %63
  %70 = getelementptr i16, i16* %2, i64 %63
  br label %71

71:                                               ; preds = %71, %62
  %72 = phi i64 [ 0, %62 ], [ %170, %71 ]
  %73 = getelementptr i16, i16* %0, i64 %72
  %74 = getelementptr i16, i16* %1, i64 %72
  %75 = shl i64 %72, 2
  %76 = getelementptr i16, i16* %3, i64 %72
  %77 = getelementptr i16, i16* %2, i64 %72
  %78 = bitcast i16* %73 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !291
  %80 = bitcast i16* %74 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !294
  %82 = bitcast i16* %77 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !296
  %84 = load i8, i8* %14, align 2, !alias.scope !298
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i8, i8* %15, align 2, !alias.scope !298
  %89 = insertelement <8 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <8 x i8> %89, <8 x i8> undef, <8 x i32> zeroinitializer
  %91 = zext <8 x i8> %90 to <8 x i32>
  %92 = load i8, i8* %16, align 1, !alias.scope !298
  %93 = insertelement <8 x i8> undef, i8 %92, i32 0
  %94 = shufflevector <8 x i8> %93, <8 x i8> undef, <8 x i32> zeroinitializer
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = load i8, i8* %17, align 1, !alias.scope !298
  %97 = insertelement <8 x i8> undef, i8 %96, i32 0
  %98 = shufflevector <8 x i8> %97, <8 x i8> undef, <8 x i32> zeroinitializer
  %99 = zext <8 x i8> %98 to <8 x i32>
  %100 = load i16, i16* %18, align 2, !alias.scope !298
  %101 = insertelement <8 x i16> undef, i16 %100, i32 0
  %102 = shufflevector <8 x i16> %101, <8 x i16> undef, <8 x i32> zeroinitializer
  %103 = sext <8 x i16> %102 to <8 x i32>
  %104 = load i16, i16* %19, align 2, !alias.scope !298
  %105 = insertelement <8 x i16> undef, i16 %104, i32 0
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <8 x i32> zeroinitializer
  %107 = sext <8 x i16> %106 to <8 x i32>
  %108 = zext <8 x i16> %79 to <8 x i32>
  %109 = shl nuw nsw <8 x i32> %108, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %110 = lshr <8 x i16> %81, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %111 = icmp ugt <8 x i16> %81, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %112 = select <8 x i1> %111, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %110
  %113 = zext <8 x i16> %112 to <8 x i32>
  %114 = lshr <8 x i16> %83, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %115 = icmp ugt <8 x i16> %83, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %116 = select <8 x i1> %115, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %114
  %117 = zext <8 x i16> %116 to <8 x i32>
  %118 = mul <8 x i32> %109, %103
  %119 = lshr <8 x i32> %118, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %120 = add nsw <8 x i32> %119, %107
  %121 = shl <8 x i32> %113, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %122 = ashr exact <8 x i32> %121, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %123 = xor <8 x i32> %122, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %124 = mul nsw <8 x i32> %123, %87
  %125 = add nsw <8 x i32> %120, %124
  %126 = shl <8 x i32> %117, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %127 = ashr exact <8 x i32> %126, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %128 = xor <8 x i32> %127, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %129 = mul nsw <8 x i32> %123, %91
  %130 = mul nsw <8 x i32> %128, %95
  %131 = add nsw <8 x i32> %130, %129
  %132 = sub nsw <8 x i32> %120, %131
  %133 = mul nsw <8 x i32> %128, %99
  %134 = add nsw <8 x i32> %120, %133
  %135 = ashr <8 x i32> %125, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %136 = lshr <8 x i32> %135, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %137 = xor <8 x i32> %136, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %138 = sub nsw <8 x i32> zeroinitializer, %137
  %139 = and <8 x i32> %135, %138
  %140 = icmp slt <8 x i32> %139, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %141 = select <8 x i1> %140, <8 x i32> %139, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = trunc <8 x i32> %141 to <8 x i8>
  %143 = ashr <8 x i32> %132, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %144 = lshr <8 x i32> %143, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %145 = xor <8 x i32> %144, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %146 = sub nsw <8 x i32> zeroinitializer, %145
  %147 = and <8 x i32> %143, %146
  %148 = icmp slt <8 x i32> %147, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %149 = select <8 x i1> %148, <8 x i32> %147, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %150 = trunc <8 x i32> %149 to <8 x i8>
  %151 = ashr <8 x i32> %134, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %152 = lshr <8 x i32> %151, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %153 = xor <8 x i32> %152, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %154 = sub nsw <8 x i32> zeroinitializer, %153
  %155 = and <8 x i32> %151, %154
  %156 = icmp slt <8 x i32> %155, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %157 = select <8 x i1> %156, <8 x i32> %155, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %158 = trunc <8 x i32> %157 to <8 x i8>
  %159 = bitcast i16* %76 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !300
  %161 = lshr <8 x i16> %160, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %162 = icmp ugt <8 x i16> %160, <i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019, i16 1019>
  %163 = select <8 x i1> %162, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %161
  %164 = trunc <8 x i16> %163 to <8 x i8>
  %165 = getelementptr inbounds i8, i8* %4, i64 %75
  %166 = bitcast i8* %165 to <32 x i8>*
  %167 = shufflevector <8 x i8> %142, <8 x i8> %150, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %168 = shufflevector <8 x i8> %158, <8 x i8> %164, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %169 = shufflevector <16 x i8> %167, <16 x i8> %168, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %169, <32 x i8>* %166, align 1
  %170 = add i64 %72, 8
  %171 = icmp eq i64 %170, %63
  br i1 %171, label %172, label %71, !llvm.loop !302

172:                                              ; preds = %71
  %173 = icmp eq i64 %22, %63
  br i1 %173, label %269, label %174

174:                                              ; preds = %172, %24, %13
  %175 = phi i32 [ 0, %24 ], [ 0, %13 ], [ %64, %172 ]
  %176 = phi i16* [ %0, %24 ], [ %0, %13 ], [ %65, %172 ]
  %177 = phi i16* [ %1, %24 ], [ %1, %13 ], [ %66, %172 ]
  %178 = phi i8* [ %4, %24 ], [ %4, %13 ], [ %68, %172 ]
  %179 = phi i16* [ %3, %24 ], [ %3, %13 ], [ %69, %172 ]
  %180 = phi i16* [ %2, %24 ], [ %2, %13 ], [ %70, %172 ]
  br label %181

181:                                              ; preds = %174, %181
  %182 = phi i32 [ %267, %181 ], [ %175, %174 ]
  %183 = phi i16* [ %262, %181 ], [ %176, %174 ]
  %184 = phi i16* [ %263, %181 ], [ %177, %174 ]
  %185 = phi i8* [ %266, %181 ], [ %178, %174 ]
  %186 = phi i16* [ %265, %181 ], [ %179, %174 ]
  %187 = phi i16* [ %264, %181 ], [ %180, %174 ]
  %188 = load i16, i16* %183, align 2
  %189 = load i16, i16* %184, align 2
  %190 = load i16, i16* %187, align 2
  %191 = getelementptr inbounds i8, i8* %185, i64 1
  %192 = getelementptr inbounds i8, i8* %185, i64 2
  %193 = load i8, i8* %14, align 2
  %194 = zext i8 %193 to i32
  %195 = load i8, i8* %15, align 2
  %196 = zext i8 %195 to i32
  %197 = load i8, i8* %16, align 1
  %198 = zext i8 %197 to i32
  %199 = load i8, i8* %17, align 1
  %200 = zext i8 %199 to i32
  %201 = load i16, i16* %18, align 2
  %202 = sext i16 %201 to i32
  %203 = load i16, i16* %19, align 2
  %204 = sext i16 %203 to i32
  %205 = zext i16 %188 to i32
  %206 = shl nuw nsw i32 %205, 6
  %207 = lshr i16 %189, 2
  %208 = icmp ugt i16 %189, 1019
  %209 = select i1 %208, i16 255, i16 %207
  %210 = zext i16 %209 to i32
  %211 = lshr i16 %190, 2
  %212 = icmp ugt i16 %190, 1019
  %213 = select i1 %212, i16 255, i16 %211
  %214 = zext i16 %213 to i32
  %215 = mul i32 %206, %202
  %216 = lshr i32 %215, 16
  %217 = add nsw i32 %216, %204
  %218 = shl i32 %210, 24
  %219 = ashr exact i32 %218, 24
  %220 = xor i32 %219, -128
  %221 = mul nsw i32 %220, %194
  %222 = add nsw i32 %217, %221
  %223 = shl i32 %214, 24
  %224 = ashr exact i32 %223, 24
  %225 = xor i32 %224, -128
  %226 = mul nsw i32 %220, %196
  %227 = mul nsw i32 %225, %198
  %228 = add nsw i32 %227, %226
  %229 = sub nsw i32 %217, %228
  %230 = mul nsw i32 %225, %200
  %231 = add nsw i32 %217, %230
  %232 = ashr i32 %222, 6
  %233 = lshr i32 %232, 31
  %234 = xor i32 %233, 1
  %235 = sub nsw i32 0, %234
  %236 = and i32 %232, %235
  %237 = icmp slt i32 %236, 255
  %238 = select i1 %237, i32 %236, i32 255
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %185, align 1
  %240 = ashr i32 %229, 6
  %241 = lshr i32 %240, 31
  %242 = xor i32 %241, 1
  %243 = sub nsw i32 0, %242
  %244 = and i32 %240, %243
  %245 = icmp slt i32 %244, 255
  %246 = select i1 %245, i32 %244, i32 255
  %247 = trunc i32 %246 to i8
  store i8 %247, i8* %191, align 1
  %248 = ashr i32 %231, 6
  %249 = lshr i32 %248, 31
  %250 = xor i32 %249, 1
  %251 = sub nsw i32 0, %250
  %252 = and i32 %248, %251
  %253 = icmp slt i32 %252, 255
  %254 = select i1 %253, i32 %252, i32 255
  %255 = trunc i32 %254 to i8
  store i8 %255, i8* %192, align 1
  %256 = load i16, i16* %186, align 2
  %257 = lshr i16 %256, 2
  %258 = icmp ugt i16 %256, 1019
  %259 = select i1 %258, i16 255, i16 %257
  %260 = trunc i16 %259 to i8
  %261 = getelementptr inbounds i8, i8* %185, i64 3
  store i8 %260, i8* %261, align 1
  %262 = getelementptr inbounds i16, i16* %183, i64 1
  %263 = getelementptr inbounds i16, i16* %184, i64 1
  %264 = getelementptr inbounds i16, i16* %187, i64 1
  %265 = getelementptr inbounds i16, i16* %186, i64 1
  %266 = getelementptr inbounds i8, i8* %185, i64 4
  %267 = add nuw nsw i32 %182, 1
  %268 = icmp eq i32 %267, %6
  br i1 %268, label %269, label %181, !llvm.loop !303

269:                                              ; preds = %181, %172, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I212ToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = add nsw i32 %5, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %410

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %18 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %19 = add i32 %5, -2
  %20 = lshr i32 %19, 1
  %21 = add nuw i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = icmp ult i32 %21, 8
  br i1 %23, label %252, label %24

24:                                               ; preds = %12
  %25 = add i32 %5, -2
  %26 = lshr i32 %25, 1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = add nuw nsw i64 %28, 8
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = and i32 %25, -2
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %32, 2
  %34 = getelementptr i16, i16* %0, i64 %33
  %35 = bitcast i16* %34 to i8*
  %36 = add nuw nsw i64 %27, 1
  %37 = getelementptr i16, i16* %1, i64 %36
  %38 = bitcast i16* %37 to i8*
  %39 = getelementptr i16, i16* %2, i64 %36
  %40 = bitcast i16* %39 to i8*
  %41 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %42 = bitcast i16* %41 to i8*
  %43 = getelementptr i8, i8* %42, i64 1
  %44 = icmp ugt i8* %35, %3
  %45 = icmp ugt i8* %30, %7
  %46 = and i1 %44, %45
  %47 = icmp ugt i8* %38, %3
  %48 = icmp ugt i8* %30, %8
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  %51 = icmp ugt i8* %40, %3
  %52 = icmp ugt i8* %30, %9
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = bitcast i16* %18 to i8*
  %56 = icmp ugt i8* %43, %3
  %57 = icmp ugt i8* %30, %55
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  br i1 %59, label %252, label %60

60:                                               ; preds = %24
  %61 = and i64 %22, 4294967288
  %62 = trunc i64 %61 to i32
  %63 = shl i32 %62, 1
  %64 = shl nuw nsw i64 %61, 1
  %65 = getelementptr i16, i16* %0, i64 %64
  %66 = getelementptr i16, i16* %1, i64 %61
  %67 = shl nuw nsw i64 %61, 3
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = getelementptr i16, i16* %2, i64 %61
  br label %70

70:                                               ; preds = %70, %60
  %71 = phi i64 [ 0, %60 ], [ %248, %70 ]
  %72 = shl i64 %71, 1
  %73 = getelementptr i16, i16* %0, i64 %72
  %74 = getelementptr i16, i16* %1, i64 %71
  %75 = shl i64 %71, 3
  %76 = getelementptr i16, i16* %2, i64 %71
  %77 = bitcast i16* %73 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 2
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %80 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %81 = bitcast i16* %74 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !304
  %83 = bitcast i16* %76 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2, !alias.scope !307
  %85 = load i8, i8* %13, align 2, !alias.scope !309
  %86 = insertelement <8 x i8> undef, i8 %85, i32 0
  %87 = shufflevector <8 x i8> %86, <8 x i8> undef, <8 x i32> zeroinitializer
  %88 = zext <8 x i8> %87 to <8 x i32>
  %89 = load i8, i8* %14, align 2, !alias.scope !309
  %90 = insertelement <8 x i8> undef, i8 %89, i32 0
  %91 = shufflevector <8 x i8> %90, <8 x i8> undef, <8 x i32> zeroinitializer
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = load i8, i8* %15, align 1, !alias.scope !309
  %94 = insertelement <8 x i8> undef, i8 %93, i32 0
  %95 = shufflevector <8 x i8> %94, <8 x i8> undef, <8 x i32> zeroinitializer
  %96 = zext <8 x i8> %95 to <8 x i32>
  %97 = load i8, i8* %16, align 1, !alias.scope !309
  %98 = insertelement <8 x i8> undef, i8 %97, i32 0
  %99 = shufflevector <8 x i8> %98, <8 x i8> undef, <8 x i32> zeroinitializer
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = load i16, i16* %17, align 2, !alias.scope !309
  %102 = insertelement <8 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> zeroinitializer
  %104 = sext <8 x i16> %103 to <8 x i32>
  %105 = load i16, i16* %18, align 2, !alias.scope !309
  %106 = insertelement <8 x i16> undef, i16 %105, i32 0
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> zeroinitializer
  %108 = sext <8 x i16> %107 to <8 x i32>
  %109 = sext <8 x i16> %79 to <8 x i32>
  %110 = shl nsw <8 x i32> %109, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %111 = lshr <8 x i16> %82, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %112 = icmp sgt <8 x i16> %82, <i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079>
  %113 = select <8 x i1> %112, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %111
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = lshr <8 x i16> %84, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %116 = icmp sgt <8 x i16> %84, <i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079>
  %117 = select <8 x i1> %116, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %115
  %118 = zext <8 x i16> %117 to <8 x i32>
  %119 = mul <8 x i32> %110, %104
  %120 = lshr <8 x i32> %119, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %121 = add nsw <8 x i32> %120, %108
  %122 = shl <8 x i32> %114, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %123 = ashr exact <8 x i32> %122, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %124 = xor <8 x i32> %123, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %125 = mul nsw <8 x i32> %124, %88
  %126 = add nsw <8 x i32> %121, %125
  %127 = shl <8 x i32> %118, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %128 = ashr exact <8 x i32> %127, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %129 = xor <8 x i32> %128, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %130 = mul nsw <8 x i32> %124, %92
  %131 = mul nsw <8 x i32> %129, %96
  %132 = add nsw <8 x i32> %131, %130
  %133 = sub nsw <8 x i32> %121, %132
  %134 = mul nsw <8 x i32> %129, %100
  %135 = add nsw <8 x i32> %121, %134
  %136 = ashr <8 x i32> %126, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = lshr <8 x i32> %136, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %138 = xor <8 x i32> %137, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %139 = sub nsw <8 x i32> zeroinitializer, %138
  %140 = and <8 x i32> %136, %139
  %141 = icmp slt <8 x i32> %140, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = select <8 x i1> %141, <8 x i32> %140, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %143 = trunc <8 x i32> %142 to <8 x i8>
  %144 = ashr <8 x i32> %133, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %145 = lshr <8 x i32> %144, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %146 = xor <8 x i32> %145, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %147 = sub nsw <8 x i32> zeroinitializer, %146
  %148 = and <8 x i32> %144, %147
  %149 = icmp slt <8 x i32> %148, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %150 = select <8 x i1> %149, <8 x i32> %148, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %151 = trunc <8 x i32> %150 to <8 x i8>
  %152 = ashr <8 x i32> %135, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %153 = lshr <8 x i32> %152, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %154 = xor <8 x i32> %153, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %155 = sub nsw <8 x i32> zeroinitializer, %154
  %156 = and <8 x i32> %152, %155
  %157 = icmp slt <8 x i32> %156, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %158 = select <8 x i1> %157, <8 x i32> %156, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %159 = trunc <8 x i32> %158 to <8 x i8>
  %160 = bitcast i16* %74 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !304
  %162 = bitcast i16* %76 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !307
  %164 = load i8, i8* %13, align 2, !alias.scope !309
  %165 = insertelement <8 x i8> undef, i8 %164, i32 0
  %166 = shufflevector <8 x i8> %165, <8 x i8> undef, <8 x i32> zeroinitializer
  %167 = zext <8 x i8> %166 to <8 x i32>
  %168 = load i8, i8* %14, align 2, !alias.scope !309
  %169 = insertelement <8 x i8> undef, i8 %168, i32 0
  %170 = shufflevector <8 x i8> %169, <8 x i8> undef, <8 x i32> zeroinitializer
  %171 = zext <8 x i8> %170 to <8 x i32>
  %172 = load i8, i8* %15, align 1, !alias.scope !309
  %173 = insertelement <8 x i8> undef, i8 %172, i32 0
  %174 = shufflevector <8 x i8> %173, <8 x i8> undef, <8 x i32> zeroinitializer
  %175 = zext <8 x i8> %174 to <8 x i32>
  %176 = load i8, i8* %16, align 1, !alias.scope !309
  %177 = insertelement <8 x i8> undef, i8 %176, i32 0
  %178 = shufflevector <8 x i8> %177, <8 x i8> undef, <8 x i32> zeroinitializer
  %179 = zext <8 x i8> %178 to <8 x i32>
  %180 = load i16, i16* %17, align 2, !alias.scope !309
  %181 = insertelement <8 x i16> undef, i16 %180, i32 0
  %182 = shufflevector <8 x i16> %181, <8 x i16> undef, <8 x i32> zeroinitializer
  %183 = sext <8 x i16> %182 to <8 x i32>
  %184 = load i16, i16* %18, align 2, !alias.scope !309
  %185 = insertelement <8 x i16> undef, i16 %184, i32 0
  %186 = shufflevector <8 x i16> %185, <8 x i16> undef, <8 x i32> zeroinitializer
  %187 = sext <8 x i16> %186 to <8 x i32>
  %188 = sext <8 x i16> %80 to <8 x i32>
  %189 = shl nsw <8 x i32> %188, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %190 = lshr <8 x i16> %161, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %191 = icmp sgt <8 x i16> %161, <i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079>
  %192 = select <8 x i1> %191, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %190
  %193 = zext <8 x i16> %192 to <8 x i32>
  %194 = lshr <8 x i16> %163, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %195 = icmp sgt <8 x i16> %163, <i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079, i16 4079>
  %196 = select <8 x i1> %195, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <8 x i16> %194
  %197 = zext <8 x i16> %196 to <8 x i32>
  %198 = mul <8 x i32> %189, %183
  %199 = lshr <8 x i32> %198, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %200 = add nsw <8 x i32> %199, %187
  %201 = shl <8 x i32> %193, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %202 = ashr exact <8 x i32> %201, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %203 = xor <8 x i32> %202, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %204 = mul nsw <8 x i32> %203, %167
  %205 = add nsw <8 x i32> %200, %204
  %206 = shl <8 x i32> %197, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %207 = ashr exact <8 x i32> %206, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %208 = xor <8 x i32> %207, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %209 = mul nsw <8 x i32> %203, %171
  %210 = mul nsw <8 x i32> %208, %175
  %211 = add nsw <8 x i32> %210, %209
  %212 = sub nsw <8 x i32> %200, %211
  %213 = mul nsw <8 x i32> %208, %179
  %214 = add nsw <8 x i32> %200, %213
  %215 = ashr <8 x i32> %205, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %216 = lshr <8 x i32> %215, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %217 = xor <8 x i32> %216, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %218 = sub nsw <8 x i32> zeroinitializer, %217
  %219 = and <8 x i32> %215, %218
  %220 = icmp slt <8 x i32> %219, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %221 = select <8 x i1> %220, <8 x i32> %219, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %222 = trunc <8 x i32> %221 to <8 x i8>
  %223 = ashr <8 x i32> %212, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %224 = lshr <8 x i32> %223, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %225 = xor <8 x i32> %224, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %226 = sub nsw <8 x i32> zeroinitializer, %225
  %227 = and <8 x i32> %223, %226
  %228 = icmp slt <8 x i32> %227, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %229 = select <8 x i1> %228, <8 x i32> %227, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %230 = trunc <8 x i32> %229 to <8 x i8>
  %231 = ashr <8 x i32> %214, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %232 = lshr <8 x i32> %231, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %233 = xor <8 x i32> %232, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %234 = sub nsw <8 x i32> zeroinitializer, %233
  %235 = and <8 x i32> %231, %234
  %236 = icmp slt <8 x i32> %235, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %237 = select <8 x i1> %236, <8 x i32> %235, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %238 = trunc <8 x i32> %237 to <8 x i8>
  %239 = getelementptr inbounds i8, i8* %3, i64 %75
  %240 = bitcast i8* %239 to <64 x i8>*
  %241 = shufflevector <8 x i8> %143, <8 x i8> %151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %242 = shufflevector <8 x i8> %159, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %243 = shufflevector <8 x i8> %222, <8 x i8> %230, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %244 = shufflevector <8 x i8> %238, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %245 = shufflevector <16 x i8> %241, <16 x i8> %242, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %246 = shufflevector <16 x i8> %243, <16 x i8> %244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %247 = shufflevector <32 x i8> %245, <32 x i8> %246, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %247, <64 x i8>* %240, align 1
  %248 = add i64 %71, 8
  %249 = icmp eq i64 %248, %61
  br i1 %249, label %250, label %70, !llvm.loop !311

250:                                              ; preds = %70
  %251 = icmp eq i64 %61, %22
  br i1 %251, label %410, label %252

252:                                              ; preds = %250, %24, %12
  %253 = phi i32 [ 0, %24 ], [ 0, %12 ], [ %63, %250 ]
  %254 = phi i16* [ %0, %24 ], [ %0, %12 ], [ %65, %250 ]
  %255 = phi i16* [ %1, %24 ], [ %1, %12 ], [ %66, %250 ]
  %256 = phi i8* [ %3, %24 ], [ %3, %12 ], [ %68, %250 ]
  %257 = phi i16* [ %2, %24 ], [ %2, %12 ], [ %69, %250 ]
  br label %258

258:                                              ; preds = %252, %258
  %259 = phi i32 [ %408, %258 ], [ %253, %252 ]
  %260 = phi i16* [ %404, %258 ], [ %254, %252 ]
  %261 = phi i16* [ %405, %258 ], [ %255, %252 ]
  %262 = phi i8* [ %407, %258 ], [ %256, %252 ]
  %263 = phi i16* [ %406, %258 ], [ %257, %252 ]
  %264 = load i16, i16* %260, align 2
  %265 = load i16, i16* %261, align 2
  %266 = load i16, i16* %263, align 2
  %267 = getelementptr inbounds i8, i8* %262, i64 1
  %268 = getelementptr inbounds i8, i8* %262, i64 2
  %269 = load i8, i8* %13, align 2
  %270 = zext i8 %269 to i32
  %271 = load i8, i8* %14, align 2
  %272 = zext i8 %271 to i32
  %273 = load i8, i8* %15, align 1
  %274 = zext i8 %273 to i32
  %275 = load i8, i8* %16, align 1
  %276 = zext i8 %275 to i32
  %277 = load i16, i16* %17, align 2
  %278 = sext i16 %277 to i32
  %279 = load i16, i16* %18, align 2
  %280 = sext i16 %279 to i32
  %281 = sext i16 %264 to i32
  %282 = shl nsw i32 %281, 4
  %283 = lshr i16 %265, 4
  %284 = icmp sgt i16 %265, 4079
  %285 = select i1 %284, i16 255, i16 %283
  %286 = zext i16 %285 to i32
  %287 = lshr i16 %266, 4
  %288 = icmp sgt i16 %266, 4079
  %289 = select i1 %288, i16 255, i16 %287
  %290 = zext i16 %289 to i32
  %291 = mul i32 %282, %278
  %292 = lshr i32 %291, 16
  %293 = add nsw i32 %292, %280
  %294 = shl i32 %286, 24
  %295 = ashr exact i32 %294, 24
  %296 = xor i32 %295, -128
  %297 = mul nsw i32 %296, %270
  %298 = add nsw i32 %293, %297
  %299 = shl i32 %290, 24
  %300 = ashr exact i32 %299, 24
  %301 = xor i32 %300, -128
  %302 = mul nsw i32 %296, %272
  %303 = mul nsw i32 %301, %274
  %304 = add nsw i32 %303, %302
  %305 = sub nsw i32 %293, %304
  %306 = mul nsw i32 %301, %276
  %307 = add nsw i32 %293, %306
  %308 = ashr i32 %298, 6
  %309 = lshr i32 %308, 31
  %310 = xor i32 %309, 1
  %311 = sub nsw i32 0, %310
  %312 = and i32 %308, %311
  %313 = icmp slt i32 %312, 255
  %314 = select i1 %313, i32 %312, i32 255
  %315 = trunc i32 %314 to i8
  store i8 %315, i8* %262, align 1
  %316 = ashr i32 %305, 6
  %317 = lshr i32 %316, 31
  %318 = xor i32 %317, 1
  %319 = sub nsw i32 0, %318
  %320 = and i32 %316, %319
  %321 = icmp slt i32 %320, 255
  %322 = select i1 %321, i32 %320, i32 255
  %323 = trunc i32 %322 to i8
  store i8 %323, i8* %267, align 1
  %324 = ashr i32 %307, 6
  %325 = lshr i32 %324, 31
  %326 = xor i32 %325, 1
  %327 = sub nsw i32 0, %326
  %328 = and i32 %324, %327
  %329 = icmp slt i32 %328, 255
  %330 = select i1 %329, i32 %328, i32 255
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %268, align 1
  %332 = getelementptr inbounds i8, i8* %262, i64 3
  store i8 -1, i8* %332, align 1
  %333 = getelementptr inbounds i16, i16* %260, i64 1
  %334 = load i16, i16* %333, align 2
  %335 = load i16, i16* %261, align 2
  %336 = load i16, i16* %263, align 2
  %337 = getelementptr inbounds i8, i8* %262, i64 4
  %338 = getelementptr inbounds i8, i8* %262, i64 5
  %339 = getelementptr inbounds i8, i8* %262, i64 6
  %340 = load i8, i8* %13, align 2
  %341 = zext i8 %340 to i32
  %342 = load i8, i8* %14, align 2
  %343 = zext i8 %342 to i32
  %344 = load i8, i8* %15, align 1
  %345 = zext i8 %344 to i32
  %346 = load i8, i8* %16, align 1
  %347 = zext i8 %346 to i32
  %348 = load i16, i16* %17, align 2
  %349 = sext i16 %348 to i32
  %350 = load i16, i16* %18, align 2
  %351 = sext i16 %350 to i32
  %352 = sext i16 %334 to i32
  %353 = shl nsw i32 %352, 4
  %354 = lshr i16 %335, 4
  %355 = icmp sgt i16 %335, 4079
  %356 = select i1 %355, i16 255, i16 %354
  %357 = zext i16 %356 to i32
  %358 = lshr i16 %336, 4
  %359 = icmp sgt i16 %336, 4079
  %360 = select i1 %359, i16 255, i16 %358
  %361 = zext i16 %360 to i32
  %362 = mul i32 %353, %349
  %363 = lshr i32 %362, 16
  %364 = add nsw i32 %363, %351
  %365 = shl i32 %357, 24
  %366 = ashr exact i32 %365, 24
  %367 = xor i32 %366, -128
  %368 = mul nsw i32 %367, %341
  %369 = add nsw i32 %364, %368
  %370 = shl i32 %361, 24
  %371 = ashr exact i32 %370, 24
  %372 = xor i32 %371, -128
  %373 = mul nsw i32 %367, %343
  %374 = mul nsw i32 %372, %345
  %375 = add nsw i32 %374, %373
  %376 = sub nsw i32 %364, %375
  %377 = mul nsw i32 %372, %347
  %378 = add nsw i32 %364, %377
  %379 = ashr i32 %369, 6
  %380 = lshr i32 %379, 31
  %381 = xor i32 %380, 1
  %382 = sub nsw i32 0, %381
  %383 = and i32 %379, %382
  %384 = icmp slt i32 %383, 255
  %385 = select i1 %384, i32 %383, i32 255
  %386 = trunc i32 %385 to i8
  store i8 %386, i8* %337, align 1
  %387 = ashr i32 %376, 6
  %388 = lshr i32 %387, 31
  %389 = xor i32 %388, 1
  %390 = sub nsw i32 0, %389
  %391 = and i32 %387, %390
  %392 = icmp slt i32 %391, 255
  %393 = select i1 %392, i32 %391, i32 255
  %394 = trunc i32 %393 to i8
  store i8 %394, i8* %338, align 1
  %395 = ashr i32 %378, 6
  %396 = lshr i32 %395, 31
  %397 = xor i32 %396, 1
  %398 = sub nsw i32 0, %397
  %399 = and i32 %395, %398
  %400 = icmp slt i32 %399, 255
  %401 = select i1 %400, i32 %399, i32 255
  %402 = trunc i32 %401 to i8
  store i8 %402, i8* %339, align 1
  %403 = getelementptr inbounds i8, i8* %262, i64 7
  store i8 -1, i8* %403, align 1
  %404 = getelementptr inbounds i16, i16* %260, i64 2
  %405 = getelementptr inbounds i16, i16* %261, i64 1
  %406 = getelementptr inbounds i16, i16* %263, i64 1
  %407 = getelementptr inbounds i8, i8* %262, i64 8
  %408 = add nuw nsw i32 %259, 2
  %409 = icmp slt i32 %408, %10
  br i1 %409, label %258, label %410, !llvm.loop !312

410:                                              ; preds = %258, %250, %6
  %411 = phi i16* [ %2, %6 ], [ %69, %250 ], [ %406, %258 ]
  %412 = phi i8* [ %3, %6 ], [ %68, %250 ], [ %407, %258 ]
  %413 = phi i16* [ %1, %6 ], [ %66, %250 ], [ %405, %258 ]
  %414 = phi i16* [ %0, %6 ], [ %65, %250 ], [ %404, %258 ]
  %415 = and i32 %5, 1
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %493, label %417

417:                                              ; preds = %410
  %418 = load i16, i16* %414, align 2
  %419 = load i16, i16* %413, align 2
  %420 = load i16, i16* %411, align 2
  %421 = getelementptr inbounds i8, i8* %412, i64 1
  %422 = getelementptr inbounds i8, i8* %412, i64 2
  %423 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %424 = load i8, i8* %423, align 2
  %425 = zext i8 %424 to i32
  %426 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %427 = load i8, i8* %426, align 2
  %428 = zext i8 %427 to i32
  %429 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i32
  %432 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i32
  %435 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %436 = load i16, i16* %435, align 2
  %437 = sext i16 %436 to i32
  %438 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %439 = load i16, i16* %438, align 2
  %440 = sext i16 %439 to i32
  %441 = sext i16 %418 to i32
  %442 = shl nsw i32 %441, 4
  %443 = lshr i16 %419, 4
  %444 = icmp sgt i16 %419, 4079
  %445 = select i1 %444, i16 255, i16 %443
  %446 = zext i16 %445 to i32
  %447 = lshr i16 %420, 4
  %448 = icmp sgt i16 %420, 4079
  %449 = select i1 %448, i16 255, i16 %447
  %450 = zext i16 %449 to i32
  %451 = mul i32 %442, %437
  %452 = lshr i32 %451, 16
  %453 = add nsw i32 %452, %440
  %454 = shl i32 %446, 24
  %455 = ashr exact i32 %454, 24
  %456 = xor i32 %455, -128
  %457 = mul nsw i32 %456, %425
  %458 = add nsw i32 %453, %457
  %459 = shl i32 %450, 24
  %460 = ashr exact i32 %459, 24
  %461 = xor i32 %460, -128
  %462 = mul nsw i32 %456, %428
  %463 = mul nsw i32 %461, %431
  %464 = add nsw i32 %463, %462
  %465 = sub nsw i32 %453, %464
  %466 = mul nsw i32 %461, %434
  %467 = add nsw i32 %453, %466
  %468 = ashr i32 %458, 6
  %469 = lshr i32 %468, 31
  %470 = xor i32 %469, 1
  %471 = sub nsw i32 0, %470
  %472 = and i32 %468, %471
  %473 = icmp slt i32 %472, 255
  %474 = select i1 %473, i32 %472, i32 255
  %475 = trunc i32 %474 to i8
  store i8 %475, i8* %412, align 1
  %476 = ashr i32 %465, 6
  %477 = lshr i32 %476, 31
  %478 = xor i32 %477, 1
  %479 = sub nsw i32 0, %478
  %480 = and i32 %476, %479
  %481 = icmp slt i32 %480, 255
  %482 = select i1 %481, i32 %480, i32 255
  %483 = trunc i32 %482 to i8
  store i8 %483, i8* %421, align 1
  %484 = ashr i32 %467, 6
  %485 = lshr i32 %484, 31
  %486 = xor i32 %485, 1
  %487 = sub nsw i32 0, %486
  %488 = and i32 %484, %487
  %489 = icmp slt i32 %488, 255
  %490 = select i1 %489, i32 %488, i32 255
  %491 = trunc i32 %490 to i8
  store i8 %491, i8* %422, align 1
  %492 = getelementptr inbounds i8, i8* %412, i64 3
  store i8 -1, i8* %492, align 1
  br label %493

493:                                              ; preds = %410, %417
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I210ToAR30Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = add nsw i32 %5, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %416

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %18 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %19 = add i32 %5, -2
  %20 = lshr i32 %19, 1
  %21 = add nuw i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = icmp ult i32 %21, 4
  br i1 %23, label %254, label %24

24:                                               ; preds = %12
  %25 = add i32 %5, -2
  %26 = lshr i32 %25, 1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = add nuw nsw i64 %28, 8
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = and i32 %25, -2
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %32, 2
  %34 = getelementptr i16, i16* %0, i64 %33
  %35 = bitcast i16* %34 to i8*
  %36 = add nuw nsw i64 %27, 1
  %37 = getelementptr i16, i16* %1, i64 %36
  %38 = bitcast i16* %37 to i8*
  %39 = getelementptr i16, i16* %2, i64 %36
  %40 = bitcast i16* %39 to i8*
  %41 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %42 = bitcast i16* %41 to i8*
  %43 = getelementptr i8, i8* %42, i64 1
  %44 = icmp ugt i8* %35, %3
  %45 = icmp ugt i8* %30, %7
  %46 = and i1 %44, %45
  %47 = icmp ugt i8* %38, %3
  %48 = icmp ugt i8* %30, %8
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  %51 = icmp ugt i8* %40, %3
  %52 = icmp ugt i8* %30, %9
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = bitcast i16* %18 to i8*
  %56 = icmp ugt i8* %43, %3
  %57 = icmp ugt i8* %30, %55
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  br i1 %59, label %254, label %60

60:                                               ; preds = %24
  %61 = and i64 %22, 4294967292
  %62 = trunc i64 %61 to i32
  %63 = shl i32 %62, 1
  %64 = shl nuw nsw i64 %61, 1
  %65 = getelementptr i16, i16* %0, i64 %64
  %66 = getelementptr i16, i16* %1, i64 %61
  %67 = shl nuw nsw i64 %61, 3
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = getelementptr i16, i16* %2, i64 %61
  br label %70

70:                                               ; preds = %70, %60
  %71 = phi i64 [ 0, %60 ], [ %250, %70 ]
  %72 = shl i64 %71, 1
  %73 = getelementptr i16, i16* %0, i64 %72
  %74 = getelementptr i16, i16* %1, i64 %71
  %75 = shl i64 %71, 3
  %76 = getelementptr i16, i16* %2, i64 %71
  %77 = bitcast i16* %73 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %80 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %81 = bitcast i16* %74 to <4 x i16>*
  %82 = load <4 x i16>, <4 x i16>* %81, align 2, !alias.scope !313
  %83 = bitcast i16* %76 to <4 x i16>*
  %84 = load <4 x i16>, <4 x i16>* %83, align 2, !alias.scope !316
  %85 = load i8, i8* %13, align 2, !alias.scope !318
  %86 = insertelement <4 x i8> undef, i8 %85, i32 0
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <4 x i32> zeroinitializer
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = load i8, i8* %14, align 2, !alias.scope !318
  %90 = insertelement <4 x i8> undef, i8 %89, i32 0
  %91 = shufflevector <4 x i8> %90, <4 x i8> undef, <4 x i32> zeroinitializer
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = load i8, i8* %15, align 1, !alias.scope !318
  %94 = insertelement <4 x i8> undef, i8 %93, i32 0
  %95 = shufflevector <4 x i8> %94, <4 x i8> undef, <4 x i32> zeroinitializer
  %96 = zext <4 x i8> %95 to <4 x i32>
  %97 = load i8, i8* %16, align 1, !alias.scope !318
  %98 = insertelement <4 x i8> undef, i8 %97, i32 0
  %99 = shufflevector <4 x i8> %98, <4 x i8> undef, <4 x i32> zeroinitializer
  %100 = zext <4 x i8> %99 to <4 x i32>
  %101 = load i16, i16* %17, align 2, !alias.scope !318
  %102 = insertelement <4 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <4 x i16> %102, <4 x i16> undef, <4 x i32> zeroinitializer
  %104 = sext <4 x i16> %103 to <4 x i32>
  %105 = load i16, i16* %18, align 2, !alias.scope !318
  %106 = insertelement <4 x i16> undef, i16 %105, i32 0
  %107 = shufflevector <4 x i16> %106, <4 x i16> undef, <4 x i32> zeroinitializer
  %108 = sext <4 x i16> %107 to <4 x i32>
  %109 = zext <4 x i16> %79 to <4 x i32>
  %110 = shl nuw nsw <4 x i32> %109, <i32 6, i32 6, i32 6, i32 6>
  %111 = lshr <4 x i16> %82, <i16 2, i16 2, i16 2, i16 2>
  %112 = icmp ugt <4 x i16> %82, <i16 1019, i16 1019, i16 1019, i16 1019>
  %113 = select <4 x i1> %112, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %111
  %114 = zext <4 x i16> %113 to <4 x i32>
  %115 = lshr <4 x i16> %84, <i16 2, i16 2, i16 2, i16 2>
  %116 = icmp ugt <4 x i16> %84, <i16 1019, i16 1019, i16 1019, i16 1019>
  %117 = select <4 x i1> %116, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %115
  %118 = zext <4 x i16> %117 to <4 x i32>
  %119 = mul <4 x i32> %110, %104
  %120 = lshr <4 x i32> %119, <i32 16, i32 16, i32 16, i32 16>
  %121 = add nsw <4 x i32> %120, %108
  %122 = shl <4 x i32> %114, <i32 24, i32 24, i32 24, i32 24>
  %123 = ashr exact <4 x i32> %122, <i32 24, i32 24, i32 24, i32 24>
  %124 = xor <4 x i32> %123, <i32 -128, i32 -128, i32 -128, i32 -128>
  %125 = mul nsw <4 x i32> %124, %88
  %126 = add nsw <4 x i32> %121, %125
  %127 = shl <4 x i32> %118, <i32 24, i32 24, i32 24, i32 24>
  %128 = ashr exact <4 x i32> %127, <i32 24, i32 24, i32 24, i32 24>
  %129 = xor <4 x i32> %128, <i32 -128, i32 -128, i32 -128, i32 -128>
  %130 = mul nsw <4 x i32> %124, %92
  %131 = mul nsw <4 x i32> %129, %96
  %132 = add nsw <4 x i32> %131, %130
  %133 = sub nsw <4 x i32> %121, %132
  %134 = mul nsw <4 x i32> %129, %100
  %135 = add nsw <4 x i32> %121, %134
  %136 = ashr <4 x i32> %126, <i32 4, i32 4, i32 4, i32 4>
  %137 = ashr <4 x i32> %133, <i32 4, i32 4, i32 4, i32 4>
  %138 = ashr <4 x i32> %135, <i32 4, i32 4, i32 4, i32 4>
  %139 = lshr <4 x i32> %136, <i32 31, i32 31, i32 31, i32 31>
  %140 = xor <4 x i32> %139, <i32 1, i32 1, i32 1, i32 1>
  %141 = sub nsw <4 x i32> zeroinitializer, %140
  %142 = and <4 x i32> %136, %141
  %143 = icmp sgt <4 x i32> %142, <i32 1022, i32 1022, i32 1022, i32 1022>
  %144 = and <4 x i32> %142, <i32 1023, i32 1023, i32 1023, i32 1023>
  %145 = lshr <4 x i32> %137, <i32 31, i32 31, i32 31, i32 31>
  %146 = xor <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %147 = sub nsw <4 x i32> zeroinitializer, %146
  %148 = and <4 x i32> %137, %147
  %149 = icmp sgt <4 x i32> %148, <i32 1022, i32 1022, i32 1022, i32 1022>
  %150 = lshr <4 x i32> %138, <i32 31, i32 31, i32 31, i32 31>
  %151 = xor <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = sub nsw <4 x i32> zeroinitializer, %151
  %153 = and <4 x i32> %138, %152
  %154 = icmp sgt <4 x i32> %153, <i32 1022, i32 1022, i32 1022, i32 1022>
  %155 = shl <4 x i32> %148, <i32 10, i32 10, i32 10, i32 10>
  %156 = and <4 x i32> %155, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %157 = select <4 x i1> %149, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %156
  %158 = shl <4 x i32> %153, <i32 20, i32 20, i32 20, i32 20>
  %159 = select <4 x i1> %154, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %158
  %160 = or <4 x i32> %144, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %161 = select <4 x i1> %143, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %160
  %162 = or <4 x i32> %157, %159
  %163 = or <4 x i32> %162, %161
  %164 = bitcast i16* %74 to <4 x i16>*
  %165 = load <4 x i16>, <4 x i16>* %164, align 2, !alias.scope !313
  %166 = bitcast i16* %76 to <4 x i16>*
  %167 = load <4 x i16>, <4 x i16>* %166, align 2, !alias.scope !316
  %168 = load i8, i8* %13, align 2, !alias.scope !318
  %169 = insertelement <4 x i8> undef, i8 %168, i32 0
  %170 = shufflevector <4 x i8> %169, <4 x i8> undef, <4 x i32> zeroinitializer
  %171 = zext <4 x i8> %170 to <4 x i32>
  %172 = load i8, i8* %14, align 2, !alias.scope !318
  %173 = insertelement <4 x i8> undef, i8 %172, i32 0
  %174 = shufflevector <4 x i8> %173, <4 x i8> undef, <4 x i32> zeroinitializer
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = load i8, i8* %15, align 1, !alias.scope !318
  %177 = insertelement <4 x i8> undef, i8 %176, i32 0
  %178 = shufflevector <4 x i8> %177, <4 x i8> undef, <4 x i32> zeroinitializer
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = load i8, i8* %16, align 1, !alias.scope !318
  %181 = insertelement <4 x i8> undef, i8 %180, i32 0
  %182 = shufflevector <4 x i8> %181, <4 x i8> undef, <4 x i32> zeroinitializer
  %183 = zext <4 x i8> %182 to <4 x i32>
  %184 = load i16, i16* %17, align 2, !alias.scope !318
  %185 = insertelement <4 x i16> undef, i16 %184, i32 0
  %186 = shufflevector <4 x i16> %185, <4 x i16> undef, <4 x i32> zeroinitializer
  %187 = sext <4 x i16> %186 to <4 x i32>
  %188 = load i16, i16* %18, align 2, !alias.scope !318
  %189 = insertelement <4 x i16> undef, i16 %188, i32 0
  %190 = shufflevector <4 x i16> %189, <4 x i16> undef, <4 x i32> zeroinitializer
  %191 = sext <4 x i16> %190 to <4 x i32>
  %192 = zext <4 x i16> %80 to <4 x i32>
  %193 = shl nuw nsw <4 x i32> %192, <i32 6, i32 6, i32 6, i32 6>
  %194 = lshr <4 x i16> %165, <i16 2, i16 2, i16 2, i16 2>
  %195 = icmp ugt <4 x i16> %165, <i16 1019, i16 1019, i16 1019, i16 1019>
  %196 = select <4 x i1> %195, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %194
  %197 = zext <4 x i16> %196 to <4 x i32>
  %198 = lshr <4 x i16> %167, <i16 2, i16 2, i16 2, i16 2>
  %199 = icmp ugt <4 x i16> %167, <i16 1019, i16 1019, i16 1019, i16 1019>
  %200 = select <4 x i1> %199, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %198
  %201 = zext <4 x i16> %200 to <4 x i32>
  %202 = mul <4 x i32> %193, %187
  %203 = lshr <4 x i32> %202, <i32 16, i32 16, i32 16, i32 16>
  %204 = add nsw <4 x i32> %203, %191
  %205 = shl <4 x i32> %197, <i32 24, i32 24, i32 24, i32 24>
  %206 = ashr exact <4 x i32> %205, <i32 24, i32 24, i32 24, i32 24>
  %207 = xor <4 x i32> %206, <i32 -128, i32 -128, i32 -128, i32 -128>
  %208 = mul nsw <4 x i32> %207, %171
  %209 = add nsw <4 x i32> %204, %208
  %210 = shl <4 x i32> %201, <i32 24, i32 24, i32 24, i32 24>
  %211 = ashr exact <4 x i32> %210, <i32 24, i32 24, i32 24, i32 24>
  %212 = xor <4 x i32> %211, <i32 -128, i32 -128, i32 -128, i32 -128>
  %213 = mul nsw <4 x i32> %207, %175
  %214 = mul nsw <4 x i32> %212, %179
  %215 = add nsw <4 x i32> %214, %213
  %216 = sub nsw <4 x i32> %204, %215
  %217 = mul nsw <4 x i32> %212, %183
  %218 = add nsw <4 x i32> %204, %217
  %219 = ashr <4 x i32> %209, <i32 4, i32 4, i32 4, i32 4>
  %220 = ashr <4 x i32> %216, <i32 4, i32 4, i32 4, i32 4>
  %221 = ashr <4 x i32> %218, <i32 4, i32 4, i32 4, i32 4>
  %222 = lshr <4 x i32> %219, <i32 31, i32 31, i32 31, i32 31>
  %223 = xor <4 x i32> %222, <i32 1, i32 1, i32 1, i32 1>
  %224 = sub nsw <4 x i32> zeroinitializer, %223
  %225 = and <4 x i32> %219, %224
  %226 = icmp sgt <4 x i32> %225, <i32 1022, i32 1022, i32 1022, i32 1022>
  %227 = and <4 x i32> %225, <i32 1023, i32 1023, i32 1023, i32 1023>
  %228 = lshr <4 x i32> %220, <i32 31, i32 31, i32 31, i32 31>
  %229 = xor <4 x i32> %228, <i32 1, i32 1, i32 1, i32 1>
  %230 = sub nsw <4 x i32> zeroinitializer, %229
  %231 = and <4 x i32> %220, %230
  %232 = icmp sgt <4 x i32> %231, <i32 1022, i32 1022, i32 1022, i32 1022>
  %233 = lshr <4 x i32> %221, <i32 31, i32 31, i32 31, i32 31>
  %234 = xor <4 x i32> %233, <i32 1, i32 1, i32 1, i32 1>
  %235 = sub nsw <4 x i32> zeroinitializer, %234
  %236 = and <4 x i32> %221, %235
  %237 = icmp sgt <4 x i32> %236, <i32 1022, i32 1022, i32 1022, i32 1022>
  %238 = shl <4 x i32> %231, <i32 10, i32 10, i32 10, i32 10>
  %239 = and <4 x i32> %238, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %240 = select <4 x i1> %232, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %239
  %241 = shl <4 x i32> %236, <i32 20, i32 20, i32 20, i32 20>
  %242 = select <4 x i1> %237, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %241
  %243 = or <4 x i32> %227, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %244 = select <4 x i1> %226, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %243
  %245 = or <4 x i32> %240, %242
  %246 = or <4 x i32> %245, %244
  %247 = getelementptr inbounds i8, i8* %3, i64 %75
  %248 = bitcast i8* %247 to <8 x i32>*
  %249 = shufflevector <4 x i32> %163, <4 x i32> %246, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %249, <8 x i32>* %248, align 4
  %250 = add i64 %71, 4
  %251 = icmp eq i64 %250, %61
  br i1 %251, label %252, label %70, !llvm.loop !320

252:                                              ; preds = %70
  %253 = icmp eq i64 %61, %22
  br i1 %253, label %416, label %254

254:                                              ; preds = %252, %24, %12
  %255 = phi i32 [ 0, %24 ], [ 0, %12 ], [ %63, %252 ]
  %256 = phi i16* [ %0, %24 ], [ %0, %12 ], [ %65, %252 ]
  %257 = phi i16* [ %1, %24 ], [ %1, %12 ], [ %66, %252 ]
  %258 = phi i8* [ %3, %24 ], [ %3, %12 ], [ %68, %252 ]
  %259 = phi i16* [ %2, %24 ], [ %2, %12 ], [ %69, %252 ]
  br label %260

260:                                              ; preds = %254, %260
  %261 = phi i32 [ %414, %260 ], [ %255, %254 ]
  %262 = phi i16* [ %410, %260 ], [ %256, %254 ]
  %263 = phi i16* [ %411, %260 ], [ %257, %254 ]
  %264 = phi i8* [ %413, %260 ], [ %258, %254 ]
  %265 = phi i16* [ %412, %260 ], [ %259, %254 ]
  %266 = load i16, i16* %262, align 2
  %267 = load i16, i16* %263, align 2
  %268 = load i16, i16* %265, align 2
  %269 = load i8, i8* %13, align 2
  %270 = zext i8 %269 to i32
  %271 = load i8, i8* %14, align 2
  %272 = zext i8 %271 to i32
  %273 = load i8, i8* %15, align 1
  %274 = zext i8 %273 to i32
  %275 = load i8, i8* %16, align 1
  %276 = zext i8 %275 to i32
  %277 = load i16, i16* %17, align 2
  %278 = sext i16 %277 to i32
  %279 = load i16, i16* %18, align 2
  %280 = sext i16 %279 to i32
  %281 = zext i16 %266 to i32
  %282 = shl nuw nsw i32 %281, 6
  %283 = lshr i16 %267, 2
  %284 = icmp ugt i16 %267, 1019
  %285 = select i1 %284, i16 255, i16 %283
  %286 = zext i16 %285 to i32
  %287 = lshr i16 %268, 2
  %288 = icmp ugt i16 %268, 1019
  %289 = select i1 %288, i16 255, i16 %287
  %290 = zext i16 %289 to i32
  %291 = mul i32 %282, %278
  %292 = lshr i32 %291, 16
  %293 = add nsw i32 %292, %280
  %294 = shl i32 %286, 24
  %295 = ashr exact i32 %294, 24
  %296 = xor i32 %295, -128
  %297 = mul nsw i32 %296, %270
  %298 = add nsw i32 %293, %297
  %299 = shl i32 %290, 24
  %300 = ashr exact i32 %299, 24
  %301 = xor i32 %300, -128
  %302 = mul nsw i32 %296, %272
  %303 = mul nsw i32 %301, %274
  %304 = add nsw i32 %303, %302
  %305 = sub nsw i32 %293, %304
  %306 = mul nsw i32 %301, %276
  %307 = add nsw i32 %293, %306
  %308 = ashr i32 %298, 4
  %309 = ashr i32 %305, 4
  %310 = ashr i32 %307, 4
  %311 = lshr i32 %308, 31
  %312 = xor i32 %311, 1
  %313 = sub nsw i32 0, %312
  %314 = and i32 %308, %313
  %315 = icmp sgt i32 %314, 1022
  %316 = and i32 %314, 1023
  %317 = lshr i32 %309, 31
  %318 = xor i32 %317, 1
  %319 = sub nsw i32 0, %318
  %320 = and i32 %309, %319
  %321 = icmp sgt i32 %320, 1022
  %322 = lshr i32 %310, 31
  %323 = xor i32 %322, 1
  %324 = sub nsw i32 0, %323
  %325 = and i32 %310, %324
  %326 = icmp sgt i32 %325, 1022
  %327 = shl i32 %320, 10
  %328 = and i32 %327, 1047552
  %329 = select i1 %321, i32 1047552, i32 %328
  %330 = shl i32 %325, 20
  %331 = select i1 %326, i32 1072693248, i32 %330
  %332 = or i32 %316, -1073741824
  %333 = select i1 %315, i32 -1073740801, i32 %332
  %334 = or i32 %329, %331
  %335 = or i32 %334, %333
  %336 = bitcast i8* %264 to i32*
  store i32 %335, i32* %336, align 4
  %337 = getelementptr inbounds i16, i16* %262, i64 1
  %338 = load i16, i16* %337, align 2
  %339 = load i16, i16* %263, align 2
  %340 = load i16, i16* %265, align 2
  %341 = load i8, i8* %13, align 2
  %342 = zext i8 %341 to i32
  %343 = load i8, i8* %14, align 2
  %344 = zext i8 %343 to i32
  %345 = load i8, i8* %15, align 1
  %346 = zext i8 %345 to i32
  %347 = load i8, i8* %16, align 1
  %348 = zext i8 %347 to i32
  %349 = load i16, i16* %17, align 2
  %350 = sext i16 %349 to i32
  %351 = load i16, i16* %18, align 2
  %352 = sext i16 %351 to i32
  %353 = zext i16 %338 to i32
  %354 = shl nuw nsw i32 %353, 6
  %355 = lshr i16 %339, 2
  %356 = icmp ugt i16 %339, 1019
  %357 = select i1 %356, i16 255, i16 %355
  %358 = zext i16 %357 to i32
  %359 = lshr i16 %340, 2
  %360 = icmp ugt i16 %340, 1019
  %361 = select i1 %360, i16 255, i16 %359
  %362 = zext i16 %361 to i32
  %363 = mul i32 %354, %350
  %364 = lshr i32 %363, 16
  %365 = add nsw i32 %364, %352
  %366 = shl i32 %358, 24
  %367 = ashr exact i32 %366, 24
  %368 = xor i32 %367, -128
  %369 = mul nsw i32 %368, %342
  %370 = add nsw i32 %365, %369
  %371 = shl i32 %362, 24
  %372 = ashr exact i32 %371, 24
  %373 = xor i32 %372, -128
  %374 = mul nsw i32 %368, %344
  %375 = mul nsw i32 %373, %346
  %376 = add nsw i32 %375, %374
  %377 = sub nsw i32 %365, %376
  %378 = mul nsw i32 %373, %348
  %379 = add nsw i32 %365, %378
  %380 = getelementptr inbounds i8, i8* %264, i64 4
  %381 = ashr i32 %370, 4
  %382 = ashr i32 %377, 4
  %383 = ashr i32 %379, 4
  %384 = lshr i32 %381, 31
  %385 = xor i32 %384, 1
  %386 = sub nsw i32 0, %385
  %387 = and i32 %381, %386
  %388 = icmp sgt i32 %387, 1022
  %389 = and i32 %387, 1023
  %390 = lshr i32 %382, 31
  %391 = xor i32 %390, 1
  %392 = sub nsw i32 0, %391
  %393 = and i32 %382, %392
  %394 = icmp sgt i32 %393, 1022
  %395 = lshr i32 %383, 31
  %396 = xor i32 %395, 1
  %397 = sub nsw i32 0, %396
  %398 = and i32 %383, %397
  %399 = icmp sgt i32 %398, 1022
  %400 = shl i32 %393, 10
  %401 = and i32 %400, 1047552
  %402 = select i1 %394, i32 1047552, i32 %401
  %403 = shl i32 %398, 20
  %404 = select i1 %399, i32 1072693248, i32 %403
  %405 = or i32 %389, -1073741824
  %406 = select i1 %388, i32 -1073740801, i32 %405
  %407 = or i32 %402, %404
  %408 = or i32 %407, %406
  %409 = bitcast i8* %380 to i32*
  store i32 %408, i32* %409, align 4
  %410 = getelementptr inbounds i16, i16* %262, i64 2
  %411 = getelementptr inbounds i16, i16* %263, i64 1
  %412 = getelementptr inbounds i16, i16* %265, i64 1
  %413 = getelementptr inbounds i8, i8* %264, i64 8
  %414 = add nuw nsw i32 %261, 2
  %415 = icmp slt i32 %414, %10
  br i1 %415, label %260, label %416, !llvm.loop !321

416:                                              ; preds = %260, %252, %6
  %417 = phi i16* [ %2, %6 ], [ %69, %252 ], [ %412, %260 ]
  %418 = phi i8* [ %3, %6 ], [ %68, %252 ], [ %413, %260 ]
  %419 = phi i16* [ %1, %6 ], [ %66, %252 ], [ %411, %260 ]
  %420 = phi i16* [ %0, %6 ], [ %65, %252 ], [ %410, %260 ]
  %421 = and i32 %5, 1
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %501, label %423

423:                                              ; preds = %416
  %424 = load i16, i16* %420, align 2
  %425 = load i16, i16* %419, align 2
  %426 = load i16, i16* %417, align 2
  %427 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %428 = load i8, i8* %427, align 2
  %429 = zext i8 %428 to i32
  %430 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %431 = load i8, i8* %430, align 2
  %432 = zext i8 %431 to i32
  %433 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i32
  %439 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %440 = load i16, i16* %439, align 2
  %441 = sext i16 %440 to i32
  %442 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %443 = load i16, i16* %442, align 2
  %444 = sext i16 %443 to i32
  %445 = zext i16 %424 to i32
  %446 = shl nuw nsw i32 %445, 6
  %447 = lshr i16 %425, 2
  %448 = icmp ugt i16 %425, 1019
  %449 = select i1 %448, i16 255, i16 %447
  %450 = zext i16 %449 to i32
  %451 = lshr i16 %426, 2
  %452 = icmp ugt i16 %426, 1019
  %453 = select i1 %452, i16 255, i16 %451
  %454 = zext i16 %453 to i32
  %455 = mul i32 %446, %441
  %456 = lshr i32 %455, 16
  %457 = add nsw i32 %456, %444
  %458 = shl i32 %450, 24
  %459 = ashr exact i32 %458, 24
  %460 = xor i32 %459, -128
  %461 = mul nsw i32 %460, %429
  %462 = add nsw i32 %457, %461
  %463 = shl i32 %454, 24
  %464 = ashr exact i32 %463, 24
  %465 = xor i32 %464, -128
  %466 = mul nsw i32 %460, %432
  %467 = mul nsw i32 %465, %435
  %468 = add nsw i32 %467, %466
  %469 = sub nsw i32 %457, %468
  %470 = mul nsw i32 %465, %438
  %471 = add nsw i32 %457, %470
  %472 = ashr i32 %462, 4
  %473 = ashr i32 %469, 4
  %474 = ashr i32 %471, 4
  %475 = lshr i32 %472, 31
  %476 = xor i32 %475, 1
  %477 = sub nsw i32 0, %476
  %478 = and i32 %472, %477
  %479 = icmp sgt i32 %478, 1022
  %480 = and i32 %478, 1023
  %481 = lshr i32 %473, 31
  %482 = xor i32 %481, 1
  %483 = sub nsw i32 0, %482
  %484 = and i32 %473, %483
  %485 = icmp sgt i32 %484, 1022
  %486 = lshr i32 %474, 31
  %487 = xor i32 %486, 1
  %488 = sub nsw i32 0, %487
  %489 = and i32 %474, %488
  %490 = icmp sgt i32 %489, 1022
  %491 = shl i32 %484, 10
  %492 = and i32 %491, 1047552
  %493 = select i1 %485, i32 1047552, i32 %492
  %494 = shl i32 %489, 20
  %495 = select i1 %490, i32 1072693248, i32 %494
  %496 = or i32 %480, -1073741824
  %497 = select i1 %479, i32 -1073740801, i32 %496
  %498 = or i32 %493, %495
  %499 = or i32 %498, %497
  %500 = bitcast i8* %418 to i32*
  store i32 %499, i32* %500, align 4
  br label %501

501:                                              ; preds = %416, %423
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I212ToAR30Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = add nsw i32 %5, -1
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %416

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %18 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %19 = add i32 %5, -2
  %20 = lshr i32 %19, 1
  %21 = add nuw i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = icmp ult i32 %21, 4
  br i1 %23, label %254, label %24

24:                                               ; preds = %12
  %25 = add i32 %5, -2
  %26 = lshr i32 %25, 1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = add nuw nsw i64 %28, 8
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = and i32 %25, -2
  %32 = zext i32 %31 to i64
  %33 = add nuw nsw i64 %32, 2
  %34 = getelementptr i16, i16* %0, i64 %33
  %35 = bitcast i16* %34 to i8*
  %36 = add nuw nsw i64 %27, 1
  %37 = getelementptr i16, i16* %1, i64 %36
  %38 = bitcast i16* %37 to i8*
  %39 = getelementptr i16, i16* %2, i64 %36
  %40 = bitcast i16* %39 to i8*
  %41 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %42 = bitcast i16* %41 to i8*
  %43 = getelementptr i8, i8* %42, i64 1
  %44 = icmp ugt i8* %35, %3
  %45 = icmp ugt i8* %30, %7
  %46 = and i1 %44, %45
  %47 = icmp ugt i8* %38, %3
  %48 = icmp ugt i8* %30, %8
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  %51 = icmp ugt i8* %40, %3
  %52 = icmp ugt i8* %30, %9
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = bitcast i16* %18 to i8*
  %56 = icmp ugt i8* %43, %3
  %57 = icmp ugt i8* %30, %55
  %58 = and i1 %56, %57
  %59 = or i1 %54, %58
  br i1 %59, label %254, label %60

60:                                               ; preds = %24
  %61 = and i64 %22, 4294967292
  %62 = trunc i64 %61 to i32
  %63 = shl i32 %62, 1
  %64 = shl nuw nsw i64 %61, 1
  %65 = getelementptr i16, i16* %0, i64 %64
  %66 = getelementptr i16, i16* %1, i64 %61
  %67 = shl nuw nsw i64 %61, 3
  %68 = getelementptr i8, i8* %3, i64 %67
  %69 = getelementptr i16, i16* %2, i64 %61
  br label %70

70:                                               ; preds = %70, %60
  %71 = phi i64 [ 0, %60 ], [ %250, %70 ]
  %72 = shl i64 %71, 1
  %73 = getelementptr i16, i16* %0, i64 %72
  %74 = getelementptr i16, i16* %1, i64 %71
  %75 = shl i64 %71, 3
  %76 = getelementptr i16, i16* %2, i64 %71
  %77 = bitcast i16* %73 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %80 = shufflevector <8 x i16> %78, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %81 = bitcast i16* %74 to <4 x i16>*
  %82 = load <4 x i16>, <4 x i16>* %81, align 2, !alias.scope !322
  %83 = bitcast i16* %76 to <4 x i16>*
  %84 = load <4 x i16>, <4 x i16>* %83, align 2, !alias.scope !325
  %85 = load i8, i8* %13, align 2, !alias.scope !327
  %86 = insertelement <4 x i8> undef, i8 %85, i32 0
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <4 x i32> zeroinitializer
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = load i8, i8* %14, align 2, !alias.scope !327
  %90 = insertelement <4 x i8> undef, i8 %89, i32 0
  %91 = shufflevector <4 x i8> %90, <4 x i8> undef, <4 x i32> zeroinitializer
  %92 = zext <4 x i8> %91 to <4 x i32>
  %93 = load i8, i8* %15, align 1, !alias.scope !327
  %94 = insertelement <4 x i8> undef, i8 %93, i32 0
  %95 = shufflevector <4 x i8> %94, <4 x i8> undef, <4 x i32> zeroinitializer
  %96 = zext <4 x i8> %95 to <4 x i32>
  %97 = load i8, i8* %16, align 1, !alias.scope !327
  %98 = insertelement <4 x i8> undef, i8 %97, i32 0
  %99 = shufflevector <4 x i8> %98, <4 x i8> undef, <4 x i32> zeroinitializer
  %100 = zext <4 x i8> %99 to <4 x i32>
  %101 = load i16, i16* %17, align 2, !alias.scope !327
  %102 = insertelement <4 x i16> undef, i16 %101, i32 0
  %103 = shufflevector <4 x i16> %102, <4 x i16> undef, <4 x i32> zeroinitializer
  %104 = sext <4 x i16> %103 to <4 x i32>
  %105 = load i16, i16* %18, align 2, !alias.scope !327
  %106 = insertelement <4 x i16> undef, i16 %105, i32 0
  %107 = shufflevector <4 x i16> %106, <4 x i16> undef, <4 x i32> zeroinitializer
  %108 = sext <4 x i16> %107 to <4 x i32>
  %109 = sext <4 x i16> %79 to <4 x i32>
  %110 = shl nsw <4 x i32> %109, <i32 4, i32 4, i32 4, i32 4>
  %111 = lshr <4 x i16> %82, <i16 4, i16 4, i16 4, i16 4>
  %112 = icmp sgt <4 x i16> %82, <i16 4079, i16 4079, i16 4079, i16 4079>
  %113 = select <4 x i1> %112, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %111
  %114 = zext <4 x i16> %113 to <4 x i32>
  %115 = lshr <4 x i16> %84, <i16 4, i16 4, i16 4, i16 4>
  %116 = icmp sgt <4 x i16> %84, <i16 4079, i16 4079, i16 4079, i16 4079>
  %117 = select <4 x i1> %116, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %115
  %118 = zext <4 x i16> %117 to <4 x i32>
  %119 = mul <4 x i32> %110, %104
  %120 = lshr <4 x i32> %119, <i32 16, i32 16, i32 16, i32 16>
  %121 = add nsw <4 x i32> %120, %108
  %122 = shl <4 x i32> %114, <i32 24, i32 24, i32 24, i32 24>
  %123 = ashr exact <4 x i32> %122, <i32 24, i32 24, i32 24, i32 24>
  %124 = xor <4 x i32> %123, <i32 -128, i32 -128, i32 -128, i32 -128>
  %125 = mul nsw <4 x i32> %124, %88
  %126 = add nsw <4 x i32> %121, %125
  %127 = shl <4 x i32> %118, <i32 24, i32 24, i32 24, i32 24>
  %128 = ashr exact <4 x i32> %127, <i32 24, i32 24, i32 24, i32 24>
  %129 = xor <4 x i32> %128, <i32 -128, i32 -128, i32 -128, i32 -128>
  %130 = mul nsw <4 x i32> %124, %92
  %131 = mul nsw <4 x i32> %129, %96
  %132 = add nsw <4 x i32> %131, %130
  %133 = sub nsw <4 x i32> %121, %132
  %134 = mul nsw <4 x i32> %129, %100
  %135 = add nsw <4 x i32> %121, %134
  %136 = ashr <4 x i32> %126, <i32 4, i32 4, i32 4, i32 4>
  %137 = ashr <4 x i32> %133, <i32 4, i32 4, i32 4, i32 4>
  %138 = ashr <4 x i32> %135, <i32 4, i32 4, i32 4, i32 4>
  %139 = lshr <4 x i32> %136, <i32 31, i32 31, i32 31, i32 31>
  %140 = xor <4 x i32> %139, <i32 1, i32 1, i32 1, i32 1>
  %141 = sub nsw <4 x i32> zeroinitializer, %140
  %142 = and <4 x i32> %136, %141
  %143 = icmp sgt <4 x i32> %142, <i32 1022, i32 1022, i32 1022, i32 1022>
  %144 = and <4 x i32> %142, <i32 1023, i32 1023, i32 1023, i32 1023>
  %145 = lshr <4 x i32> %137, <i32 31, i32 31, i32 31, i32 31>
  %146 = xor <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %147 = sub nsw <4 x i32> zeroinitializer, %146
  %148 = and <4 x i32> %137, %147
  %149 = icmp sgt <4 x i32> %148, <i32 1022, i32 1022, i32 1022, i32 1022>
  %150 = lshr <4 x i32> %138, <i32 31, i32 31, i32 31, i32 31>
  %151 = xor <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = sub nsw <4 x i32> zeroinitializer, %151
  %153 = and <4 x i32> %138, %152
  %154 = icmp sgt <4 x i32> %153, <i32 1022, i32 1022, i32 1022, i32 1022>
  %155 = shl <4 x i32> %148, <i32 10, i32 10, i32 10, i32 10>
  %156 = and <4 x i32> %155, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %157 = select <4 x i1> %149, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %156
  %158 = shl <4 x i32> %153, <i32 20, i32 20, i32 20, i32 20>
  %159 = select <4 x i1> %154, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %158
  %160 = or <4 x i32> %144, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %161 = select <4 x i1> %143, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %160
  %162 = or <4 x i32> %157, %159
  %163 = or <4 x i32> %162, %161
  %164 = bitcast i16* %74 to <4 x i16>*
  %165 = load <4 x i16>, <4 x i16>* %164, align 2, !alias.scope !322
  %166 = bitcast i16* %76 to <4 x i16>*
  %167 = load <4 x i16>, <4 x i16>* %166, align 2, !alias.scope !325
  %168 = load i8, i8* %13, align 2, !alias.scope !327
  %169 = insertelement <4 x i8> undef, i8 %168, i32 0
  %170 = shufflevector <4 x i8> %169, <4 x i8> undef, <4 x i32> zeroinitializer
  %171 = zext <4 x i8> %170 to <4 x i32>
  %172 = load i8, i8* %14, align 2, !alias.scope !327
  %173 = insertelement <4 x i8> undef, i8 %172, i32 0
  %174 = shufflevector <4 x i8> %173, <4 x i8> undef, <4 x i32> zeroinitializer
  %175 = zext <4 x i8> %174 to <4 x i32>
  %176 = load i8, i8* %15, align 1, !alias.scope !327
  %177 = insertelement <4 x i8> undef, i8 %176, i32 0
  %178 = shufflevector <4 x i8> %177, <4 x i8> undef, <4 x i32> zeroinitializer
  %179 = zext <4 x i8> %178 to <4 x i32>
  %180 = load i8, i8* %16, align 1, !alias.scope !327
  %181 = insertelement <4 x i8> undef, i8 %180, i32 0
  %182 = shufflevector <4 x i8> %181, <4 x i8> undef, <4 x i32> zeroinitializer
  %183 = zext <4 x i8> %182 to <4 x i32>
  %184 = load i16, i16* %17, align 2, !alias.scope !327
  %185 = insertelement <4 x i16> undef, i16 %184, i32 0
  %186 = shufflevector <4 x i16> %185, <4 x i16> undef, <4 x i32> zeroinitializer
  %187 = sext <4 x i16> %186 to <4 x i32>
  %188 = load i16, i16* %18, align 2, !alias.scope !327
  %189 = insertelement <4 x i16> undef, i16 %188, i32 0
  %190 = shufflevector <4 x i16> %189, <4 x i16> undef, <4 x i32> zeroinitializer
  %191 = sext <4 x i16> %190 to <4 x i32>
  %192 = sext <4 x i16> %80 to <4 x i32>
  %193 = shl nsw <4 x i32> %192, <i32 4, i32 4, i32 4, i32 4>
  %194 = lshr <4 x i16> %165, <i16 4, i16 4, i16 4, i16 4>
  %195 = icmp sgt <4 x i16> %165, <i16 4079, i16 4079, i16 4079, i16 4079>
  %196 = select <4 x i1> %195, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %194
  %197 = zext <4 x i16> %196 to <4 x i32>
  %198 = lshr <4 x i16> %167, <i16 4, i16 4, i16 4, i16 4>
  %199 = icmp sgt <4 x i16> %167, <i16 4079, i16 4079, i16 4079, i16 4079>
  %200 = select <4 x i1> %199, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %198
  %201 = zext <4 x i16> %200 to <4 x i32>
  %202 = mul <4 x i32> %193, %187
  %203 = lshr <4 x i32> %202, <i32 16, i32 16, i32 16, i32 16>
  %204 = add nsw <4 x i32> %203, %191
  %205 = shl <4 x i32> %197, <i32 24, i32 24, i32 24, i32 24>
  %206 = ashr exact <4 x i32> %205, <i32 24, i32 24, i32 24, i32 24>
  %207 = xor <4 x i32> %206, <i32 -128, i32 -128, i32 -128, i32 -128>
  %208 = mul nsw <4 x i32> %207, %171
  %209 = add nsw <4 x i32> %204, %208
  %210 = shl <4 x i32> %201, <i32 24, i32 24, i32 24, i32 24>
  %211 = ashr exact <4 x i32> %210, <i32 24, i32 24, i32 24, i32 24>
  %212 = xor <4 x i32> %211, <i32 -128, i32 -128, i32 -128, i32 -128>
  %213 = mul nsw <4 x i32> %207, %175
  %214 = mul nsw <4 x i32> %212, %179
  %215 = add nsw <4 x i32> %214, %213
  %216 = sub nsw <4 x i32> %204, %215
  %217 = mul nsw <4 x i32> %212, %183
  %218 = add nsw <4 x i32> %204, %217
  %219 = ashr <4 x i32> %209, <i32 4, i32 4, i32 4, i32 4>
  %220 = ashr <4 x i32> %216, <i32 4, i32 4, i32 4, i32 4>
  %221 = ashr <4 x i32> %218, <i32 4, i32 4, i32 4, i32 4>
  %222 = lshr <4 x i32> %219, <i32 31, i32 31, i32 31, i32 31>
  %223 = xor <4 x i32> %222, <i32 1, i32 1, i32 1, i32 1>
  %224 = sub nsw <4 x i32> zeroinitializer, %223
  %225 = and <4 x i32> %219, %224
  %226 = icmp sgt <4 x i32> %225, <i32 1022, i32 1022, i32 1022, i32 1022>
  %227 = and <4 x i32> %225, <i32 1023, i32 1023, i32 1023, i32 1023>
  %228 = lshr <4 x i32> %220, <i32 31, i32 31, i32 31, i32 31>
  %229 = xor <4 x i32> %228, <i32 1, i32 1, i32 1, i32 1>
  %230 = sub nsw <4 x i32> zeroinitializer, %229
  %231 = and <4 x i32> %220, %230
  %232 = icmp sgt <4 x i32> %231, <i32 1022, i32 1022, i32 1022, i32 1022>
  %233 = lshr <4 x i32> %221, <i32 31, i32 31, i32 31, i32 31>
  %234 = xor <4 x i32> %233, <i32 1, i32 1, i32 1, i32 1>
  %235 = sub nsw <4 x i32> zeroinitializer, %234
  %236 = and <4 x i32> %221, %235
  %237 = icmp sgt <4 x i32> %236, <i32 1022, i32 1022, i32 1022, i32 1022>
  %238 = shl <4 x i32> %231, <i32 10, i32 10, i32 10, i32 10>
  %239 = and <4 x i32> %238, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %240 = select <4 x i1> %232, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %239
  %241 = shl <4 x i32> %236, <i32 20, i32 20, i32 20, i32 20>
  %242 = select <4 x i1> %237, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %241
  %243 = or <4 x i32> %227, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %244 = select <4 x i1> %226, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %243
  %245 = or <4 x i32> %240, %242
  %246 = or <4 x i32> %245, %244
  %247 = getelementptr inbounds i8, i8* %3, i64 %75
  %248 = bitcast i8* %247 to <8 x i32>*
  %249 = shufflevector <4 x i32> %163, <4 x i32> %246, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %249, <8 x i32>* %248, align 4
  %250 = add i64 %71, 4
  %251 = icmp eq i64 %250, %61
  br i1 %251, label %252, label %70, !llvm.loop !329

252:                                              ; preds = %70
  %253 = icmp eq i64 %61, %22
  br i1 %253, label %416, label %254

254:                                              ; preds = %252, %24, %12
  %255 = phi i32 [ 0, %24 ], [ 0, %12 ], [ %63, %252 ]
  %256 = phi i16* [ %0, %24 ], [ %0, %12 ], [ %65, %252 ]
  %257 = phi i16* [ %1, %24 ], [ %1, %12 ], [ %66, %252 ]
  %258 = phi i8* [ %3, %24 ], [ %3, %12 ], [ %68, %252 ]
  %259 = phi i16* [ %2, %24 ], [ %2, %12 ], [ %69, %252 ]
  br label %260

260:                                              ; preds = %254, %260
  %261 = phi i32 [ %414, %260 ], [ %255, %254 ]
  %262 = phi i16* [ %410, %260 ], [ %256, %254 ]
  %263 = phi i16* [ %411, %260 ], [ %257, %254 ]
  %264 = phi i8* [ %413, %260 ], [ %258, %254 ]
  %265 = phi i16* [ %412, %260 ], [ %259, %254 ]
  %266 = load i16, i16* %262, align 2
  %267 = load i16, i16* %263, align 2
  %268 = load i16, i16* %265, align 2
  %269 = load i8, i8* %13, align 2
  %270 = zext i8 %269 to i32
  %271 = load i8, i8* %14, align 2
  %272 = zext i8 %271 to i32
  %273 = load i8, i8* %15, align 1
  %274 = zext i8 %273 to i32
  %275 = load i8, i8* %16, align 1
  %276 = zext i8 %275 to i32
  %277 = load i16, i16* %17, align 2
  %278 = sext i16 %277 to i32
  %279 = load i16, i16* %18, align 2
  %280 = sext i16 %279 to i32
  %281 = sext i16 %266 to i32
  %282 = shl nsw i32 %281, 4
  %283 = lshr i16 %267, 4
  %284 = icmp sgt i16 %267, 4079
  %285 = select i1 %284, i16 255, i16 %283
  %286 = zext i16 %285 to i32
  %287 = lshr i16 %268, 4
  %288 = icmp sgt i16 %268, 4079
  %289 = select i1 %288, i16 255, i16 %287
  %290 = zext i16 %289 to i32
  %291 = mul i32 %282, %278
  %292 = lshr i32 %291, 16
  %293 = add nsw i32 %292, %280
  %294 = shl i32 %286, 24
  %295 = ashr exact i32 %294, 24
  %296 = xor i32 %295, -128
  %297 = mul nsw i32 %296, %270
  %298 = add nsw i32 %293, %297
  %299 = shl i32 %290, 24
  %300 = ashr exact i32 %299, 24
  %301 = xor i32 %300, -128
  %302 = mul nsw i32 %296, %272
  %303 = mul nsw i32 %301, %274
  %304 = add nsw i32 %303, %302
  %305 = sub nsw i32 %293, %304
  %306 = mul nsw i32 %301, %276
  %307 = add nsw i32 %293, %306
  %308 = ashr i32 %298, 4
  %309 = ashr i32 %305, 4
  %310 = ashr i32 %307, 4
  %311 = lshr i32 %308, 31
  %312 = xor i32 %311, 1
  %313 = sub nsw i32 0, %312
  %314 = and i32 %308, %313
  %315 = icmp sgt i32 %314, 1022
  %316 = and i32 %314, 1023
  %317 = lshr i32 %309, 31
  %318 = xor i32 %317, 1
  %319 = sub nsw i32 0, %318
  %320 = and i32 %309, %319
  %321 = icmp sgt i32 %320, 1022
  %322 = lshr i32 %310, 31
  %323 = xor i32 %322, 1
  %324 = sub nsw i32 0, %323
  %325 = and i32 %310, %324
  %326 = icmp sgt i32 %325, 1022
  %327 = shl i32 %320, 10
  %328 = and i32 %327, 1047552
  %329 = select i1 %321, i32 1047552, i32 %328
  %330 = shl i32 %325, 20
  %331 = select i1 %326, i32 1072693248, i32 %330
  %332 = or i32 %316, -1073741824
  %333 = select i1 %315, i32 -1073740801, i32 %332
  %334 = or i32 %329, %331
  %335 = or i32 %334, %333
  %336 = bitcast i8* %264 to i32*
  store i32 %335, i32* %336, align 4
  %337 = getelementptr inbounds i16, i16* %262, i64 1
  %338 = load i16, i16* %337, align 2
  %339 = load i16, i16* %263, align 2
  %340 = load i16, i16* %265, align 2
  %341 = load i8, i8* %13, align 2
  %342 = zext i8 %341 to i32
  %343 = load i8, i8* %14, align 2
  %344 = zext i8 %343 to i32
  %345 = load i8, i8* %15, align 1
  %346 = zext i8 %345 to i32
  %347 = load i8, i8* %16, align 1
  %348 = zext i8 %347 to i32
  %349 = load i16, i16* %17, align 2
  %350 = sext i16 %349 to i32
  %351 = load i16, i16* %18, align 2
  %352 = sext i16 %351 to i32
  %353 = sext i16 %338 to i32
  %354 = shl nsw i32 %353, 4
  %355 = lshr i16 %339, 4
  %356 = icmp sgt i16 %339, 4079
  %357 = select i1 %356, i16 255, i16 %355
  %358 = zext i16 %357 to i32
  %359 = lshr i16 %340, 4
  %360 = icmp sgt i16 %340, 4079
  %361 = select i1 %360, i16 255, i16 %359
  %362 = zext i16 %361 to i32
  %363 = mul i32 %354, %350
  %364 = lshr i32 %363, 16
  %365 = add nsw i32 %364, %352
  %366 = shl i32 %358, 24
  %367 = ashr exact i32 %366, 24
  %368 = xor i32 %367, -128
  %369 = mul nsw i32 %368, %342
  %370 = add nsw i32 %365, %369
  %371 = shl i32 %362, 24
  %372 = ashr exact i32 %371, 24
  %373 = xor i32 %372, -128
  %374 = mul nsw i32 %368, %344
  %375 = mul nsw i32 %373, %346
  %376 = add nsw i32 %375, %374
  %377 = sub nsw i32 %365, %376
  %378 = mul nsw i32 %373, %348
  %379 = add nsw i32 %365, %378
  %380 = getelementptr inbounds i8, i8* %264, i64 4
  %381 = ashr i32 %370, 4
  %382 = ashr i32 %377, 4
  %383 = ashr i32 %379, 4
  %384 = lshr i32 %381, 31
  %385 = xor i32 %384, 1
  %386 = sub nsw i32 0, %385
  %387 = and i32 %381, %386
  %388 = icmp sgt i32 %387, 1022
  %389 = and i32 %387, 1023
  %390 = lshr i32 %382, 31
  %391 = xor i32 %390, 1
  %392 = sub nsw i32 0, %391
  %393 = and i32 %382, %392
  %394 = icmp sgt i32 %393, 1022
  %395 = lshr i32 %383, 31
  %396 = xor i32 %395, 1
  %397 = sub nsw i32 0, %396
  %398 = and i32 %383, %397
  %399 = icmp sgt i32 %398, 1022
  %400 = shl i32 %393, 10
  %401 = and i32 %400, 1047552
  %402 = select i1 %394, i32 1047552, i32 %401
  %403 = shl i32 %398, 20
  %404 = select i1 %399, i32 1072693248, i32 %403
  %405 = or i32 %389, -1073741824
  %406 = select i1 %388, i32 -1073740801, i32 %405
  %407 = or i32 %402, %404
  %408 = or i32 %407, %406
  %409 = bitcast i8* %380 to i32*
  store i32 %408, i32* %409, align 4
  %410 = getelementptr inbounds i16, i16* %262, i64 2
  %411 = getelementptr inbounds i16, i16* %263, i64 1
  %412 = getelementptr inbounds i16, i16* %265, i64 1
  %413 = getelementptr inbounds i8, i8* %264, i64 8
  %414 = add nuw nsw i32 %261, 2
  %415 = icmp slt i32 %414, %10
  br i1 %415, label %260, label %416, !llvm.loop !330

416:                                              ; preds = %260, %252, %6
  %417 = phi i16* [ %2, %6 ], [ %69, %252 ], [ %412, %260 ]
  %418 = phi i8* [ %3, %6 ], [ %68, %252 ], [ %413, %260 ]
  %419 = phi i16* [ %1, %6 ], [ %66, %252 ], [ %411, %260 ]
  %420 = phi i16* [ %0, %6 ], [ %65, %252 ], [ %410, %260 ]
  %421 = and i32 %5, 1
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %501, label %423

423:                                              ; preds = %416
  %424 = load i16, i16* %420, align 2
  %425 = load i16, i16* %419, align 2
  %426 = load i16, i16* %417, align 2
  %427 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %428 = load i8, i8* %427, align 2
  %429 = zext i8 %428 to i32
  %430 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %431 = load i8, i8* %430, align 2
  %432 = zext i8 %431 to i32
  %433 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i32
  %439 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %440 = load i16, i16* %439, align 2
  %441 = sext i16 %440 to i32
  %442 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %443 = load i16, i16* %442, align 2
  %444 = sext i16 %443 to i32
  %445 = sext i16 %424 to i32
  %446 = shl nsw i32 %445, 4
  %447 = lshr i16 %425, 4
  %448 = icmp sgt i16 %425, 4079
  %449 = select i1 %448, i16 255, i16 %447
  %450 = zext i16 %449 to i32
  %451 = lshr i16 %426, 4
  %452 = icmp sgt i16 %426, 4079
  %453 = select i1 %452, i16 255, i16 %451
  %454 = zext i16 %453 to i32
  %455 = mul i32 %446, %441
  %456 = lshr i32 %455, 16
  %457 = add nsw i32 %456, %444
  %458 = shl i32 %450, 24
  %459 = ashr exact i32 %458, 24
  %460 = xor i32 %459, -128
  %461 = mul nsw i32 %460, %429
  %462 = add nsw i32 %457, %461
  %463 = shl i32 %454, 24
  %464 = ashr exact i32 %463, 24
  %465 = xor i32 %464, -128
  %466 = mul nsw i32 %460, %432
  %467 = mul nsw i32 %465, %435
  %468 = add nsw i32 %467, %466
  %469 = sub nsw i32 %457, %468
  %470 = mul nsw i32 %465, %438
  %471 = add nsw i32 %457, %470
  %472 = ashr i32 %462, 4
  %473 = ashr i32 %469, 4
  %474 = ashr i32 %471, 4
  %475 = lshr i32 %472, 31
  %476 = xor i32 %475, 1
  %477 = sub nsw i32 0, %476
  %478 = and i32 %472, %477
  %479 = icmp sgt i32 %478, 1022
  %480 = and i32 %478, 1023
  %481 = lshr i32 %473, 31
  %482 = xor i32 %481, 1
  %483 = sub nsw i32 0, %482
  %484 = and i32 %473, %483
  %485 = icmp sgt i32 %484, 1022
  %486 = lshr i32 %474, 31
  %487 = xor i32 %486, 1
  %488 = sub nsw i32 0, %487
  %489 = and i32 %474, %488
  %490 = icmp sgt i32 %489, 1022
  %491 = shl i32 %484, 10
  %492 = and i32 %491, 1047552
  %493 = select i1 %485, i32 1047552, i32 %492
  %494 = shl i32 %489, 20
  %495 = select i1 %490, i32 1072693248, i32 %494
  %496 = or i32 %480, -1073741824
  %497 = select i1 %479, i32 -1073740801, i32 %496
  %498 = or i32 %493, %495
  %499 = or i32 %498, %497
  %500 = bitcast i8* %418 to i32*
  store i32 %499, i32* %500, align 4
  br label %501

501:                                              ; preds = %416, %423
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I410ToAR30Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = icmp sgt i32 %5, 0
  br i1 %10, label %11, label %248

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %17 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %18 = add i32 %5, -1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i64 %20, 4
  br i1 %21, label %159, label %22

22:                                               ; preds = %11
  %23 = add i32 %5, -1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  %26 = add nuw nsw i64 %25, 4
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = add nuw nsw i64 %24, 1
  %29 = getelementptr i16, i16* %0, i64 %28
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i16, i16* %1, i64 %28
  %32 = bitcast i16* %31 to i8*
  %33 = getelementptr i16, i16* %2, i64 %28
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %30, %3
  %39 = icmp ugt i8* %27, %7
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %32, %3
  %42 = icmp ugt i8* %27, %8
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %9
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %17 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %159, label %54

54:                                               ; preds = %22
  %55 = and i64 %20, 8589934588
  %56 = trunc i64 %55 to i32
  %57 = getelementptr i16, i16* %0, i64 %55
  %58 = getelementptr i16, i16* %1, i64 %55
  %59 = shl nuw nsw i64 %55, 2
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = getelementptr i16, i16* %2, i64 %55
  %62 = load i8, i8* %12, align 2, !alias.scope !331
  %63 = insertelement <4 x i8> undef, i8 %62, i32 0
  %64 = shufflevector <4 x i8> %63, <4 x i8> undef, <4 x i32> zeroinitializer
  %65 = zext <4 x i8> %64 to <4 x i32>
  %66 = load i8, i8* %13, align 2, !alias.scope !331
  %67 = insertelement <4 x i8> undef, i8 %66, i32 0
  %68 = shufflevector <4 x i8> %67, <4 x i8> undef, <4 x i32> zeroinitializer
  %69 = zext <4 x i8> %68 to <4 x i32>
  %70 = load i8, i8* %14, align 1, !alias.scope !331
  %71 = insertelement <4 x i8> undef, i8 %70, i32 0
  %72 = shufflevector <4 x i8> %71, <4 x i8> undef, <4 x i32> zeroinitializer
  %73 = zext <4 x i8> %72 to <4 x i32>
  %74 = load i8, i8* %15, align 1, !alias.scope !331
  %75 = insertelement <4 x i8> undef, i8 %74, i32 0
  %76 = shufflevector <4 x i8> %75, <4 x i8> undef, <4 x i32> zeroinitializer
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = load i16, i16* %16, align 2, !alias.scope !331
  %79 = insertelement <4 x i16> undef, i16 %78, i32 0
  %80 = shufflevector <4 x i16> %79, <4 x i16> undef, <4 x i32> zeroinitializer
  %81 = sext <4 x i16> %80 to <4 x i32>
  %82 = load i16, i16* %17, align 2, !alias.scope !331
  %83 = insertelement <4 x i16> undef, i16 %82, i32 0
  %84 = shufflevector <4 x i16> %83, <4 x i16> undef, <4 x i32> zeroinitializer
  %85 = sext <4 x i16> %84 to <4 x i32>
  br label %86

86:                                               ; preds = %86, %54
  %87 = phi i64 [ 0, %54 ], [ %155, %86 ]
  %88 = getelementptr i16, i16* %0, i64 %87
  %89 = getelementptr i16, i16* %1, i64 %87
  %90 = shl i64 %87, 2
  %91 = getelementptr i8, i8* %3, i64 %90
  %92 = getelementptr i16, i16* %2, i64 %87
  %93 = bitcast i16* %88 to <4 x i16>*
  %94 = load <4 x i16>, <4 x i16>* %93, align 2, !alias.scope !334
  %95 = bitcast i16* %89 to <4 x i16>*
  %96 = load <4 x i16>, <4 x i16>* %95, align 2, !alias.scope !336
  %97 = bitcast i16* %92 to <4 x i16>*
  %98 = load <4 x i16>, <4 x i16>* %97, align 2, !alias.scope !338
  %99 = zext <4 x i16> %94 to <4 x i32>
  %100 = shl nuw nsw <4 x i32> %99, <i32 6, i32 6, i32 6, i32 6>
  %101 = lshr <4 x i16> %96, <i16 2, i16 2, i16 2, i16 2>
  %102 = icmp ugt <4 x i16> %96, <i16 1019, i16 1019, i16 1019, i16 1019>
  %103 = select <4 x i1> %102, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %101
  %104 = zext <4 x i16> %103 to <4 x i32>
  %105 = lshr <4 x i16> %98, <i16 2, i16 2, i16 2, i16 2>
  %106 = icmp ugt <4 x i16> %98, <i16 1019, i16 1019, i16 1019, i16 1019>
  %107 = select <4 x i1> %106, <4 x i16> <i16 255, i16 255, i16 255, i16 255>, <4 x i16> %105
  %108 = zext <4 x i16> %107 to <4 x i32>
  %109 = mul <4 x i32> %100, %81
  %110 = lshr <4 x i32> %109, <i32 16, i32 16, i32 16, i32 16>
  %111 = add nsw <4 x i32> %110, %85
  %112 = shl <4 x i32> %104, <i32 24, i32 24, i32 24, i32 24>
  %113 = ashr exact <4 x i32> %112, <i32 24, i32 24, i32 24, i32 24>
  %114 = xor <4 x i32> %113, <i32 -128, i32 -128, i32 -128, i32 -128>
  %115 = mul nsw <4 x i32> %114, %65
  %116 = add nsw <4 x i32> %111, %115
  %117 = shl <4 x i32> %108, <i32 24, i32 24, i32 24, i32 24>
  %118 = ashr exact <4 x i32> %117, <i32 24, i32 24, i32 24, i32 24>
  %119 = xor <4 x i32> %118, <i32 -128, i32 -128, i32 -128, i32 -128>
  %120 = mul nsw <4 x i32> %114, %69
  %121 = mul nsw <4 x i32> %119, %73
  %122 = add nsw <4 x i32> %121, %120
  %123 = sub nsw <4 x i32> %111, %122
  %124 = mul nsw <4 x i32> %119, %77
  %125 = add nsw <4 x i32> %111, %124
  %126 = ashr <4 x i32> %116, <i32 4, i32 4, i32 4, i32 4>
  %127 = ashr <4 x i32> %123, <i32 4, i32 4, i32 4, i32 4>
  %128 = ashr <4 x i32> %125, <i32 4, i32 4, i32 4, i32 4>
  %129 = lshr <4 x i32> %126, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %126, %131
  %133 = icmp sgt <4 x i32> %132, <i32 1022, i32 1022, i32 1022, i32 1022>
  %134 = and <4 x i32> %132, <i32 1023, i32 1023, i32 1023, i32 1023>
  %135 = lshr <4 x i32> %127, <i32 31, i32 31, i32 31, i32 31>
  %136 = xor <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %137 = sub nsw <4 x i32> zeroinitializer, %136
  %138 = and <4 x i32> %127, %137
  %139 = icmp sgt <4 x i32> %138, <i32 1022, i32 1022, i32 1022, i32 1022>
  %140 = lshr <4 x i32> %128, <i32 31, i32 31, i32 31, i32 31>
  %141 = xor <4 x i32> %140, <i32 1, i32 1, i32 1, i32 1>
  %142 = sub nsw <4 x i32> zeroinitializer, %141
  %143 = and <4 x i32> %128, %142
  %144 = icmp sgt <4 x i32> %143, <i32 1022, i32 1022, i32 1022, i32 1022>
  %145 = shl <4 x i32> %138, <i32 10, i32 10, i32 10, i32 10>
  %146 = and <4 x i32> %145, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %147 = select <4 x i1> %139, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %146
  %148 = shl <4 x i32> %143, <i32 20, i32 20, i32 20, i32 20>
  %149 = select <4 x i1> %144, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %148
  %150 = or <4 x i32> %134, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %151 = select <4 x i1> %133, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %150
  %152 = or <4 x i32> %147, %149
  %153 = or <4 x i32> %152, %151
  %154 = bitcast i8* %91 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 4, !alias.scope !340, !noalias !342
  %155 = add i64 %87, 4
  %156 = icmp eq i64 %155, %55
  br i1 %156, label %157, label %86, !llvm.loop !343

157:                                              ; preds = %86
  %158 = icmp eq i64 %20, %55
  br i1 %158, label %248, label %159

159:                                              ; preds = %157, %22, %11
  %160 = phi i32 [ 0, %22 ], [ 0, %11 ], [ %56, %157 ]
  %161 = phi i16* [ %0, %22 ], [ %0, %11 ], [ %57, %157 ]
  %162 = phi i16* [ %1, %22 ], [ %1, %11 ], [ %58, %157 ]
  %163 = phi i8* [ %3, %22 ], [ %3, %11 ], [ %60, %157 ]
  %164 = phi i16* [ %2, %22 ], [ %2, %11 ], [ %61, %157 ]
  br label %165

165:                                              ; preds = %159, %165
  %166 = phi i32 [ %246, %165 ], [ %160, %159 ]
  %167 = phi i16* [ %242, %165 ], [ %161, %159 ]
  %168 = phi i16* [ %243, %165 ], [ %162, %159 ]
  %169 = phi i8* [ %245, %165 ], [ %163, %159 ]
  %170 = phi i16* [ %244, %165 ], [ %164, %159 ]
  %171 = load i16, i16* %167, align 2
  %172 = load i16, i16* %168, align 2
  %173 = load i16, i16* %170, align 2
  %174 = load i8, i8* %12, align 2
  %175 = zext i8 %174 to i32
  %176 = load i8, i8* %13, align 2
  %177 = zext i8 %176 to i32
  %178 = load i8, i8* %14, align 1
  %179 = zext i8 %178 to i32
  %180 = load i8, i8* %15, align 1
  %181 = zext i8 %180 to i32
  %182 = load i16, i16* %16, align 2
  %183 = sext i16 %182 to i32
  %184 = load i16, i16* %17, align 2
  %185 = sext i16 %184 to i32
  %186 = zext i16 %171 to i32
  %187 = shl nuw nsw i32 %186, 6
  %188 = lshr i16 %172, 2
  %189 = icmp ugt i16 %172, 1019
  %190 = select i1 %189, i16 255, i16 %188
  %191 = zext i16 %190 to i32
  %192 = lshr i16 %173, 2
  %193 = icmp ugt i16 %173, 1019
  %194 = select i1 %193, i16 255, i16 %192
  %195 = zext i16 %194 to i32
  %196 = mul i32 %187, %183
  %197 = lshr i32 %196, 16
  %198 = add nsw i32 %197, %185
  %199 = shl i32 %191, 24
  %200 = ashr exact i32 %199, 24
  %201 = xor i32 %200, -128
  %202 = mul nsw i32 %201, %175
  %203 = add nsw i32 %198, %202
  %204 = shl i32 %195, 24
  %205 = ashr exact i32 %204, 24
  %206 = xor i32 %205, -128
  %207 = mul nsw i32 %201, %177
  %208 = mul nsw i32 %206, %179
  %209 = add nsw i32 %208, %207
  %210 = sub nsw i32 %198, %209
  %211 = mul nsw i32 %206, %181
  %212 = add nsw i32 %198, %211
  %213 = ashr i32 %203, 4
  %214 = ashr i32 %210, 4
  %215 = ashr i32 %212, 4
  %216 = lshr i32 %213, 31
  %217 = xor i32 %216, 1
  %218 = sub nsw i32 0, %217
  %219 = and i32 %213, %218
  %220 = icmp sgt i32 %219, 1022
  %221 = and i32 %219, 1023
  %222 = lshr i32 %214, 31
  %223 = xor i32 %222, 1
  %224 = sub nsw i32 0, %223
  %225 = and i32 %214, %224
  %226 = icmp sgt i32 %225, 1022
  %227 = lshr i32 %215, 31
  %228 = xor i32 %227, 1
  %229 = sub nsw i32 0, %228
  %230 = and i32 %215, %229
  %231 = icmp sgt i32 %230, 1022
  %232 = shl i32 %225, 10
  %233 = and i32 %232, 1047552
  %234 = select i1 %226, i32 1047552, i32 %233
  %235 = shl i32 %230, 20
  %236 = select i1 %231, i32 1072693248, i32 %235
  %237 = or i32 %221, -1073741824
  %238 = select i1 %220, i32 -1073740801, i32 %237
  %239 = or i32 %234, %236
  %240 = or i32 %239, %238
  %241 = bitcast i8* %169 to i32*
  store i32 %240, i32* %241, align 4
  %242 = getelementptr inbounds i16, i16* %167, i64 1
  %243 = getelementptr inbounds i16, i16* %168, i64 1
  %244 = getelementptr inbounds i16, i16* %170, i64 1
  %245 = getelementptr inbounds i8, i8* %169, i64 4
  %246 = add nuw nsw i32 %166, 1
  %247 = icmp eq i32 %246, %5
  br i1 %247, label %248, label %165, !llvm.loop !344

248:                                              ; preds = %165, %157, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @P210ToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = bitcast i16* %0 to i8*
  %7 = bitcast i16* %1 to i8*
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %379

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = add nuw i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = icmp ult i32 %19, 8
  br i1 %21, label %233, label %22

22:                                               ; preds = %10
  %23 = add i32 %4, -2
  %24 = lshr i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = shl nuw nsw i64 %25, 3
  %27 = add nuw nsw i64 %26, 8
  %28 = getelementptr i8, i8* %2, i64 %27
  %29 = and i32 %23, -2
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %30, 2
  %32 = getelementptr i16, i16* %0, i64 %31
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i16, i16* %1, i64 %31
  %35 = bitcast i16* %34 to i8*
  %36 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr i8, i8* %37, i64 1
  %39 = icmp ugt i8* %33, %2
  %40 = icmp ugt i8* %28, %6
  %41 = and i1 %39, %40
  %42 = icmp ugt i8* %35, %2
  %43 = icmp ugt i8* %28, %7
  %44 = and i1 %42, %43
  %45 = or i1 %41, %44
  %46 = bitcast i16* %16 to i8*
  %47 = icmp ugt i8* %38, %2
  %48 = icmp ugt i8* %28, %46
  %49 = and i1 %47, %48
  %50 = or i1 %45, %49
  br i1 %50, label %233, label %51

51:                                               ; preds = %22
  %52 = and i64 %20, 4294967288
  %53 = trunc i64 %52 to i32
  %54 = shl i32 %53, 1
  %55 = shl nuw nsw i64 %52, 1
  %56 = getelementptr i16, i16* %0, i64 %55
  %57 = shl nuw nsw i64 %52, 1
  %58 = getelementptr i16, i16* %1, i64 %57
  %59 = shl nuw nsw i64 %52, 3
  %60 = getelementptr i8, i8* %2, i64 %59
  br label %61

61:                                               ; preds = %61, %51
  %62 = phi i64 [ 0, %51 ], [ %229, %61 ]
  %63 = shl i64 %62, 1
  %64 = getelementptr i16, i16* %0, i64 %63
  %65 = shl i64 %62, 1
  %66 = getelementptr i16, i16* %1, i64 %65
  %67 = shl i64 %62, 3
  %68 = bitcast i16* %64 to <16 x i16>*
  %69 = load <16 x i16>, <16 x i16>* %68, align 2
  %70 = shufflevector <16 x i16> %69, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = shufflevector <16 x i16> %69, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = bitcast i16* %66 to <16 x i16>*
  %73 = load <16 x i16>, <16 x i16>* %72, align 2
  %74 = shufflevector <16 x i16> %73, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %75 = shufflevector <16 x i16> %73, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %76 = load i8, i8* %11, align 2, !alias.scope !345
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %12, align 2, !alias.scope !345
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i8, i8* %13, align 1, !alias.scope !345
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i8, i8* %14, align 1, !alias.scope !345
  %89 = insertelement <8 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <8 x i8> %89, <8 x i8> undef, <8 x i32> zeroinitializer
  %91 = zext <8 x i8> %90 to <8 x i32>
  %92 = load i16, i16* %15, align 2, !alias.scope !345
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = load i16, i16* %16, align 2, !alias.scope !345
  %97 = insertelement <8 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> zeroinitializer
  %99 = sext <8 x i16> %98 to <8 x i32>
  %100 = zext <8 x i16> %70 to <8 x i32>
  %101 = lshr <8 x i16> %74, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %102 = zext <8 x i16> %101 to <8 x i32>
  %103 = lshr <8 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %104 = zext <8 x i16> %103 to <8 x i32>
  %105 = mul nsw <8 x i32> %95, %100
  %106 = lshr <8 x i32> %105, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %107 = add nsw <8 x i32> %106, %99
  %108 = shl nuw <8 x i32> %102, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %109 = ashr exact <8 x i32> %108, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %110 = xor <8 x i32> %109, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %111 = mul nsw <8 x i32> %110, %79
  %112 = add nsw <8 x i32> %107, %111
  %113 = shl nuw <8 x i32> %104, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %114 = ashr exact <8 x i32> %113, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %115 = xor <8 x i32> %114, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %116 = mul nsw <8 x i32> %110, %83
  %117 = mul nsw <8 x i32> %115, %87
  %118 = add nsw <8 x i32> %117, %116
  %119 = sub nsw <8 x i32> %107, %118
  %120 = mul nsw <8 x i32> %115, %91
  %121 = add nsw <8 x i32> %107, %120
  %122 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %123 = lshr <8 x i32> %122, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %124 = xor <8 x i32> %123, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %125 = sub nsw <8 x i32> zeroinitializer, %124
  %126 = and <8 x i32> %122, %125
  %127 = icmp slt <8 x i32> %126, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = select <8 x i1> %127, <8 x i32> %126, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = trunc <8 x i32> %128 to <8 x i8>
  %130 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %131 = lshr <8 x i32> %130, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %132 = xor <8 x i32> %131, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %133 = sub nsw <8 x i32> zeroinitializer, %132
  %134 = and <8 x i32> %130, %133
  %135 = icmp slt <8 x i32> %134, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = select <8 x i1> %135, <8 x i32> %134, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %137 = trunc <8 x i32> %136 to <8 x i8>
  %138 = ashr <8 x i32> %121, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %139 = lshr <8 x i32> %138, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %140 = xor <8 x i32> %139, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %141 = sub nsw <8 x i32> zeroinitializer, %140
  %142 = and <8 x i32> %138, %141
  %143 = icmp slt <8 x i32> %142, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %144 = select <8 x i1> %143, <8 x i32> %142, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %145 = trunc <8 x i32> %144 to <8 x i8>
  %146 = bitcast i16* %66 to <16 x i16>*
  %147 = load <16 x i16>, <16 x i16>* %146, align 2
  %148 = shufflevector <16 x i16> %147, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %149 = shufflevector <16 x i16> %147, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %150 = load i8, i8* %11, align 2, !alias.scope !345
  %151 = insertelement <8 x i8> undef, i8 %150, i32 0
  %152 = shufflevector <8 x i8> %151, <8 x i8> undef, <8 x i32> zeroinitializer
  %153 = zext <8 x i8> %152 to <8 x i32>
  %154 = load i8, i8* %12, align 2, !alias.scope !345
  %155 = insertelement <8 x i8> undef, i8 %154, i32 0
  %156 = shufflevector <8 x i8> %155, <8 x i8> undef, <8 x i32> zeroinitializer
  %157 = zext <8 x i8> %156 to <8 x i32>
  %158 = load i8, i8* %13, align 1, !alias.scope !345
  %159 = insertelement <8 x i8> undef, i8 %158, i32 0
  %160 = shufflevector <8 x i8> %159, <8 x i8> undef, <8 x i32> zeroinitializer
  %161 = zext <8 x i8> %160 to <8 x i32>
  %162 = load i8, i8* %14, align 1, !alias.scope !345
  %163 = insertelement <8 x i8> undef, i8 %162, i32 0
  %164 = shufflevector <8 x i8> %163, <8 x i8> undef, <8 x i32> zeroinitializer
  %165 = zext <8 x i8> %164 to <8 x i32>
  %166 = load i16, i16* %15, align 2, !alias.scope !345
  %167 = insertelement <8 x i16> undef, i16 %166, i32 0
  %168 = shufflevector <8 x i16> %167, <8 x i16> undef, <8 x i32> zeroinitializer
  %169 = sext <8 x i16> %168 to <8 x i32>
  %170 = load i16, i16* %16, align 2, !alias.scope !345
  %171 = insertelement <8 x i16> undef, i16 %170, i32 0
  %172 = shufflevector <8 x i16> %171, <8 x i16> undef, <8 x i32> zeroinitializer
  %173 = sext <8 x i16> %172 to <8 x i32>
  %174 = zext <8 x i16> %71 to <8 x i32>
  %175 = lshr <8 x i16> %148, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %176 = zext <8 x i16> %175 to <8 x i32>
  %177 = lshr <8 x i16> %149, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %178 = zext <8 x i16> %177 to <8 x i32>
  %179 = mul nsw <8 x i32> %169, %174
  %180 = lshr <8 x i32> %179, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %181 = add nsw <8 x i32> %180, %173
  %182 = shl nuw <8 x i32> %176, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %183 = ashr exact <8 x i32> %182, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %184 = xor <8 x i32> %183, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %185 = mul nsw <8 x i32> %184, %153
  %186 = add nsw <8 x i32> %181, %185
  %187 = shl nuw <8 x i32> %178, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %188 = ashr exact <8 x i32> %187, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %189 = xor <8 x i32> %188, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %190 = mul nsw <8 x i32> %184, %157
  %191 = mul nsw <8 x i32> %189, %161
  %192 = add nsw <8 x i32> %191, %190
  %193 = sub nsw <8 x i32> %181, %192
  %194 = mul nsw <8 x i32> %189, %165
  %195 = add nsw <8 x i32> %181, %194
  %196 = ashr <8 x i32> %186, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %197 = lshr <8 x i32> %196, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %198 = xor <8 x i32> %197, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %199 = sub nsw <8 x i32> zeroinitializer, %198
  %200 = and <8 x i32> %196, %199
  %201 = icmp slt <8 x i32> %200, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %202 = select <8 x i1> %201, <8 x i32> %200, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %203 = trunc <8 x i32> %202 to <8 x i8>
  %204 = ashr <8 x i32> %193, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %205 = lshr <8 x i32> %204, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %206 = xor <8 x i32> %205, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %207 = sub nsw <8 x i32> zeroinitializer, %206
  %208 = and <8 x i32> %204, %207
  %209 = icmp slt <8 x i32> %208, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %210 = select <8 x i1> %209, <8 x i32> %208, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %211 = trunc <8 x i32> %210 to <8 x i8>
  %212 = ashr <8 x i32> %195, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %213 = lshr <8 x i32> %212, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %214 = xor <8 x i32> %213, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %215 = sub nsw <8 x i32> zeroinitializer, %214
  %216 = and <8 x i32> %212, %215
  %217 = icmp slt <8 x i32> %216, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %218 = select <8 x i1> %217, <8 x i32> %216, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %219 = trunc <8 x i32> %218 to <8 x i8>
  %220 = getelementptr inbounds i8, i8* %2, i64 %67
  %221 = bitcast i8* %220 to <64 x i8>*
  %222 = shufflevector <8 x i8> %129, <8 x i8> %137, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %223 = shufflevector <8 x i8> %145, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %224 = shufflevector <8 x i8> %203, <8 x i8> %211, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %225 = shufflevector <8 x i8> %219, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %226 = shufflevector <16 x i8> %222, <16 x i8> %223, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %227 = shufflevector <16 x i8> %224, <16 x i8> %225, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %228 = shufflevector <32 x i8> %226, <32 x i8> %227, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %228, <64 x i8>* %221, align 1
  %229 = add i64 %62, 8
  %230 = icmp eq i64 %229, %52
  br i1 %230, label %231, label %61, !llvm.loop !348

231:                                              ; preds = %61
  %232 = icmp eq i64 %52, %20
  br i1 %232, label %379, label %233

233:                                              ; preds = %231, %22, %10
  %234 = phi i32 [ 0, %22 ], [ 0, %10 ], [ %54, %231 ]
  %235 = phi i16* [ %0, %22 ], [ %0, %10 ], [ %56, %231 ]
  %236 = phi i16* [ %1, %22 ], [ %1, %10 ], [ %58, %231 ]
  %237 = phi i8* [ %2, %22 ], [ %2, %10 ], [ %60, %231 ]
  br label %238

238:                                              ; preds = %233, %238
  %239 = phi i32 [ %377, %238 ], [ %234, %233 ]
  %240 = phi i16* [ %374, %238 ], [ %235, %233 ]
  %241 = phi i16* [ %375, %238 ], [ %236, %233 ]
  %242 = phi i8* [ %376, %238 ], [ %237, %233 ]
  %243 = load i16, i16* %240, align 2
  %244 = load i16, i16* %241, align 2
  %245 = getelementptr inbounds i16, i16* %241, i64 1
  %246 = load i16, i16* %245, align 2
  %247 = getelementptr inbounds i8, i8* %242, i64 1
  %248 = getelementptr inbounds i8, i8* %242, i64 2
  %249 = load i8, i8* %11, align 2
  %250 = zext i8 %249 to i32
  %251 = load i8, i8* %12, align 2
  %252 = zext i8 %251 to i32
  %253 = load i8, i8* %13, align 1
  %254 = zext i8 %253 to i32
  %255 = load i8, i8* %14, align 1
  %256 = zext i8 %255 to i32
  %257 = load i16, i16* %15, align 2
  %258 = sext i16 %257 to i32
  %259 = load i16, i16* %16, align 2
  %260 = sext i16 %259 to i32
  %261 = zext i16 %243 to i32
  %262 = lshr i16 %244, 8
  %263 = zext i16 %262 to i32
  %264 = lshr i16 %246, 8
  %265 = zext i16 %264 to i32
  %266 = mul nsw i32 %258, %261
  %267 = lshr i32 %266, 16
  %268 = add nsw i32 %267, %260
  %269 = shl nuw i32 %263, 24
  %270 = ashr exact i32 %269, 24
  %271 = xor i32 %270, -128
  %272 = mul nsw i32 %271, %250
  %273 = add nsw i32 %268, %272
  %274 = shl nuw i32 %265, 24
  %275 = ashr exact i32 %274, 24
  %276 = xor i32 %275, -128
  %277 = mul nsw i32 %271, %252
  %278 = mul nsw i32 %276, %254
  %279 = add nsw i32 %278, %277
  %280 = sub nsw i32 %268, %279
  %281 = mul nsw i32 %276, %256
  %282 = add nsw i32 %268, %281
  %283 = ashr i32 %273, 6
  %284 = lshr i32 %283, 31
  %285 = xor i32 %284, 1
  %286 = sub nsw i32 0, %285
  %287 = and i32 %283, %286
  %288 = icmp slt i32 %287, 255
  %289 = select i1 %288, i32 %287, i32 255
  %290 = trunc i32 %289 to i8
  store i8 %290, i8* %242, align 1
  %291 = ashr i32 %280, 6
  %292 = lshr i32 %291, 31
  %293 = xor i32 %292, 1
  %294 = sub nsw i32 0, %293
  %295 = and i32 %291, %294
  %296 = icmp slt i32 %295, 255
  %297 = select i1 %296, i32 %295, i32 255
  %298 = trunc i32 %297 to i8
  store i8 %298, i8* %247, align 1
  %299 = ashr i32 %282, 6
  %300 = lshr i32 %299, 31
  %301 = xor i32 %300, 1
  %302 = sub nsw i32 0, %301
  %303 = and i32 %299, %302
  %304 = icmp slt i32 %303, 255
  %305 = select i1 %304, i32 %303, i32 255
  %306 = trunc i32 %305 to i8
  store i8 %306, i8* %248, align 1
  %307 = getelementptr inbounds i8, i8* %242, i64 3
  store i8 -1, i8* %307, align 1
  %308 = getelementptr inbounds i16, i16* %240, i64 1
  %309 = load i16, i16* %308, align 2
  %310 = load i16, i16* %241, align 2
  %311 = load i16, i16* %245, align 2
  %312 = getelementptr inbounds i8, i8* %242, i64 4
  %313 = getelementptr inbounds i8, i8* %242, i64 5
  %314 = getelementptr inbounds i8, i8* %242, i64 6
  %315 = load i8, i8* %11, align 2
  %316 = zext i8 %315 to i32
  %317 = load i8, i8* %12, align 2
  %318 = zext i8 %317 to i32
  %319 = load i8, i8* %13, align 1
  %320 = zext i8 %319 to i32
  %321 = load i8, i8* %14, align 1
  %322 = zext i8 %321 to i32
  %323 = load i16, i16* %15, align 2
  %324 = sext i16 %323 to i32
  %325 = load i16, i16* %16, align 2
  %326 = sext i16 %325 to i32
  %327 = zext i16 %309 to i32
  %328 = lshr i16 %310, 8
  %329 = zext i16 %328 to i32
  %330 = lshr i16 %311, 8
  %331 = zext i16 %330 to i32
  %332 = mul nsw i32 %324, %327
  %333 = lshr i32 %332, 16
  %334 = add nsw i32 %333, %326
  %335 = shl nuw i32 %329, 24
  %336 = ashr exact i32 %335, 24
  %337 = xor i32 %336, -128
  %338 = mul nsw i32 %337, %316
  %339 = add nsw i32 %334, %338
  %340 = shl nuw i32 %331, 24
  %341 = ashr exact i32 %340, 24
  %342 = xor i32 %341, -128
  %343 = mul nsw i32 %337, %318
  %344 = mul nsw i32 %342, %320
  %345 = add nsw i32 %344, %343
  %346 = sub nsw i32 %334, %345
  %347 = mul nsw i32 %342, %322
  %348 = add nsw i32 %334, %347
  %349 = ashr i32 %339, 6
  %350 = lshr i32 %349, 31
  %351 = xor i32 %350, 1
  %352 = sub nsw i32 0, %351
  %353 = and i32 %349, %352
  %354 = icmp slt i32 %353, 255
  %355 = select i1 %354, i32 %353, i32 255
  %356 = trunc i32 %355 to i8
  store i8 %356, i8* %312, align 1
  %357 = ashr i32 %346, 6
  %358 = lshr i32 %357, 31
  %359 = xor i32 %358, 1
  %360 = sub nsw i32 0, %359
  %361 = and i32 %357, %360
  %362 = icmp slt i32 %361, 255
  %363 = select i1 %362, i32 %361, i32 255
  %364 = trunc i32 %363 to i8
  store i8 %364, i8* %313, align 1
  %365 = ashr i32 %348, 6
  %366 = lshr i32 %365, 31
  %367 = xor i32 %366, 1
  %368 = sub nsw i32 0, %367
  %369 = and i32 %365, %368
  %370 = icmp slt i32 %369, 255
  %371 = select i1 %370, i32 %369, i32 255
  %372 = trunc i32 %371 to i8
  store i8 %372, i8* %314, align 1
  %373 = getelementptr inbounds i8, i8* %242, i64 7
  store i8 -1, i8* %373, align 1
  %374 = getelementptr inbounds i16, i16* %240, i64 2
  %375 = getelementptr inbounds i16, i16* %241, i64 2
  %376 = getelementptr inbounds i8, i8* %242, i64 8
  %377 = add nuw nsw i32 %239, 2
  %378 = icmp slt i32 %377, %8
  br i1 %378, label %238, label %379, !llvm.loop !349

379:                                              ; preds = %238, %231, %5
  %380 = phi i8* [ %2, %5 ], [ %60, %231 ], [ %376, %238 ]
  %381 = phi i16* [ %1, %5 ], [ %58, %231 ], [ %375, %238 ]
  %382 = phi i16* [ %0, %5 ], [ %56, %231 ], [ %374, %238 ]
  %383 = and i32 %4, 1
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %457, label %385

385:                                              ; preds = %379
  %386 = load i16, i16* %382, align 2
  %387 = load i16, i16* %381, align 2
  %388 = getelementptr inbounds i16, i16* %381, i64 1
  %389 = load i16, i16* %388, align 2
  %390 = getelementptr inbounds i8, i8* %380, i64 1
  %391 = getelementptr inbounds i8, i8* %380, i64 2
  %392 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %393 = load i8, i8* %392, align 2
  %394 = zext i8 %393 to i32
  %395 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %396 = load i8, i8* %395, align 2
  %397 = zext i8 %396 to i32
  %398 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %399 = load i8, i8* %398, align 1
  %400 = zext i8 %399 to i32
  %401 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %402 = load i8, i8* %401, align 1
  %403 = zext i8 %402 to i32
  %404 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %405 = load i16, i16* %404, align 2
  %406 = sext i16 %405 to i32
  %407 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %408 = load i16, i16* %407, align 2
  %409 = sext i16 %408 to i32
  %410 = zext i16 %386 to i32
  %411 = lshr i16 %387, 8
  %412 = zext i16 %411 to i32
  %413 = lshr i16 %389, 8
  %414 = zext i16 %413 to i32
  %415 = mul nsw i32 %406, %410
  %416 = lshr i32 %415, 16
  %417 = add nsw i32 %416, %409
  %418 = shl nuw i32 %412, 24
  %419 = ashr exact i32 %418, 24
  %420 = xor i32 %419, -128
  %421 = mul nsw i32 %420, %394
  %422 = add nsw i32 %417, %421
  %423 = shl nuw i32 %414, 24
  %424 = ashr exact i32 %423, 24
  %425 = xor i32 %424, -128
  %426 = mul nsw i32 %420, %397
  %427 = mul nsw i32 %425, %400
  %428 = add nsw i32 %427, %426
  %429 = sub nsw i32 %417, %428
  %430 = mul nsw i32 %425, %403
  %431 = add nsw i32 %417, %430
  %432 = ashr i32 %422, 6
  %433 = lshr i32 %432, 31
  %434 = xor i32 %433, 1
  %435 = sub nsw i32 0, %434
  %436 = and i32 %432, %435
  %437 = icmp slt i32 %436, 255
  %438 = select i1 %437, i32 %436, i32 255
  %439 = trunc i32 %438 to i8
  store i8 %439, i8* %380, align 1
  %440 = ashr i32 %429, 6
  %441 = lshr i32 %440, 31
  %442 = xor i32 %441, 1
  %443 = sub nsw i32 0, %442
  %444 = and i32 %440, %443
  %445 = icmp slt i32 %444, 255
  %446 = select i1 %445, i32 %444, i32 255
  %447 = trunc i32 %446 to i8
  store i8 %447, i8* %390, align 1
  %448 = ashr i32 %431, 6
  %449 = lshr i32 %448, 31
  %450 = xor i32 %449, 1
  %451 = sub nsw i32 0, %450
  %452 = and i32 %448, %451
  %453 = icmp slt i32 %452, 255
  %454 = select i1 %453, i32 %452, i32 255
  %455 = trunc i32 %454 to i8
  store i8 %455, i8* %391, align 1
  %456 = getelementptr inbounds i8, i8* %380, i64 3
  store i8 -1, i8* %456, align 1
  br label %457

457:                                              ; preds = %379, %385
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @P410ToARGBRow_C(i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = bitcast i16* %0 to i8*
  %7 = bitcast i16* %1 to i8*
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %227

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %16 = add i32 %4, -1
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %18, 8
  br i1 %19, label %147, label %20

20:                                               ; preds = %9
  %21 = add i32 %4, -1
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 2
  %24 = add nuw nsw i64 %23, 4
  %25 = getelementptr i8, i8* %2, i64 %24
  %26 = add nuw nsw i64 %22, 1
  %27 = getelementptr i16, i16* %0, i64 %26
  %28 = bitcast i16* %27 to i8*
  %29 = shl nuw nsw i64 %22, 1
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i16, i16* %1, i64 %30
  %32 = bitcast i16* %31 to i8*
  %33 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr i8, i8* %34, i64 1
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %25, %6
  %38 = and i1 %36, %37
  %39 = icmp ugt i8* %32, %2
  %40 = icmp ugt i8* %25, %7
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = bitcast i16* %15 to i8*
  %44 = icmp ugt i8* %35, %2
  %45 = icmp ugt i8* %25, %43
  %46 = and i1 %44, %45
  %47 = or i1 %42, %46
  br i1 %47, label %147, label %48

48:                                               ; preds = %20
  %49 = and i64 %18, 8589934584
  %50 = trunc i64 %49 to i32
  %51 = getelementptr i16, i16* %0, i64 %49
  %52 = shl nuw nsw i64 %49, 1
  %53 = getelementptr i16, i16* %1, i64 %52
  %54 = shl nuw nsw i64 %49, 2
  %55 = getelementptr i8, i8* %2, i64 %54
  br label %56

56:                                               ; preds = %56, %48
  %57 = phi i64 [ 0, %48 ], [ %143, %56 ]
  %58 = getelementptr i16, i16* %0, i64 %57
  %59 = shl i64 %57, 1
  %60 = getelementptr i16, i16* %1, i64 %59
  %61 = shl i64 %57, 2
  %62 = bitcast i16* %58 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !350
  %64 = bitcast i16* %60 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 2
  %66 = shufflevector <16 x i16> %65, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %67 = shufflevector <16 x i16> %65, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %68 = load i8, i8* %10, align 2, !alias.scope !353
  %69 = insertelement <8 x i8> undef, i8 %68, i32 0
  %70 = shufflevector <8 x i8> %69, <8 x i8> undef, <8 x i32> zeroinitializer
  %71 = zext <8 x i8> %70 to <8 x i32>
  %72 = load i8, i8* %11, align 2, !alias.scope !353
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %12, align 1, !alias.scope !353
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %13, align 1, !alias.scope !353
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i16, i16* %14, align 2, !alias.scope !353
  %85 = insertelement <8 x i16> undef, i16 %84, i32 0
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> zeroinitializer
  %87 = sext <8 x i16> %86 to <8 x i32>
  %88 = load i16, i16* %15, align 2, !alias.scope !353
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = zext <8 x i16> %63 to <8 x i32>
  %93 = lshr <8 x i16> %66, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = lshr <8 x i16> %67, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %96 = zext <8 x i16> %95 to <8 x i32>
  %97 = mul nsw <8 x i32> %87, %92
  %98 = lshr <8 x i32> %97, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %99 = add nsw <8 x i32> %98, %91
  %100 = shl nuw <8 x i32> %94, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %101 = ashr exact <8 x i32> %100, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %102 = xor <8 x i32> %101, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %103 = mul nsw <8 x i32> %102, %71
  %104 = add nsw <8 x i32> %99, %103
  %105 = shl nuw <8 x i32> %96, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %106 = ashr exact <8 x i32> %105, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %107 = xor <8 x i32> %106, <i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128, i32 -128>
  %108 = mul nsw <8 x i32> %102, %75
  %109 = mul nsw <8 x i32> %107, %79
  %110 = add nsw <8 x i32> %109, %108
  %111 = sub nsw <8 x i32> %99, %110
  %112 = mul nsw <8 x i32> %107, %83
  %113 = add nsw <8 x i32> %99, %112
  %114 = ashr <8 x i32> %104, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %115 = lshr <8 x i32> %114, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %116 = xor <8 x i32> %115, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %117 = sub nsw <8 x i32> zeroinitializer, %116
  %118 = and <8 x i32> %114, %117
  %119 = icmp slt <8 x i32> %118, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %120 = select <8 x i1> %119, <8 x i32> %118, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %121 = trunc <8 x i32> %120 to <8 x i8>
  %122 = ashr <8 x i32> %111, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %123 = lshr <8 x i32> %122, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %124 = xor <8 x i32> %123, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %125 = sub nsw <8 x i32> zeroinitializer, %124
  %126 = and <8 x i32> %122, %125
  %127 = icmp slt <8 x i32> %126, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = select <8 x i1> %127, <8 x i32> %126, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = trunc <8 x i32> %128 to <8 x i8>
  %130 = ashr <8 x i32> %113, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %131 = lshr <8 x i32> %130, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %132 = xor <8 x i32> %131, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %133 = sub nsw <8 x i32> zeroinitializer, %132
  %134 = and <8 x i32> %130, %133
  %135 = icmp slt <8 x i32> %134, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = select <8 x i1> %135, <8 x i32> %134, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %137 = trunc <8 x i32> %136 to <8 x i8>
  %138 = getelementptr inbounds i8, i8* %2, i64 %61
  %139 = bitcast i8* %138 to <32 x i8>*
  %140 = shufflevector <8 x i8> %121, <8 x i8> %129, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %141 = shufflevector <8 x i8> %137, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %142 = shufflevector <16 x i8> %140, <16 x i8> %141, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %142, <32 x i8>* %139, align 1
  %143 = add i64 %57, 8
  %144 = icmp eq i64 %143, %49
  br i1 %144, label %145, label %56, !llvm.loop !355

145:                                              ; preds = %56
  %146 = icmp eq i64 %18, %49
  br i1 %146, label %227, label %147

147:                                              ; preds = %145, %20, %9
  %148 = phi i32 [ 0, %20 ], [ 0, %9 ], [ %50, %145 ]
  %149 = phi i16* [ %0, %20 ], [ %0, %9 ], [ %51, %145 ]
  %150 = phi i16* [ %1, %20 ], [ %1, %9 ], [ %53, %145 ]
  %151 = phi i8* [ %2, %20 ], [ %2, %9 ], [ %55, %145 ]
  br label %152

152:                                              ; preds = %147, %152
  %153 = phi i32 [ %225, %152 ], [ %148, %147 ]
  %154 = phi i16* [ %222, %152 ], [ %149, %147 ]
  %155 = phi i16* [ %223, %152 ], [ %150, %147 ]
  %156 = phi i8* [ %224, %152 ], [ %151, %147 ]
  %157 = load i16, i16* %154, align 2
  %158 = load i16, i16* %155, align 2
  %159 = getelementptr inbounds i16, i16* %155, i64 1
  %160 = load i16, i16* %159, align 2
  %161 = getelementptr inbounds i8, i8* %156, i64 1
  %162 = getelementptr inbounds i8, i8* %156, i64 2
  %163 = load i8, i8* %10, align 2
  %164 = zext i8 %163 to i32
  %165 = load i8, i8* %11, align 2
  %166 = zext i8 %165 to i32
  %167 = load i8, i8* %12, align 1
  %168 = zext i8 %167 to i32
  %169 = load i8, i8* %13, align 1
  %170 = zext i8 %169 to i32
  %171 = load i16, i16* %14, align 2
  %172 = sext i16 %171 to i32
  %173 = load i16, i16* %15, align 2
  %174 = sext i16 %173 to i32
  %175 = zext i16 %157 to i32
  %176 = lshr i16 %158, 8
  %177 = zext i16 %176 to i32
  %178 = lshr i16 %160, 8
  %179 = zext i16 %178 to i32
  %180 = mul nsw i32 %172, %175
  %181 = lshr i32 %180, 16
  %182 = add nsw i32 %181, %174
  %183 = shl nuw i32 %177, 24
  %184 = ashr exact i32 %183, 24
  %185 = xor i32 %184, -128
  %186 = mul nsw i32 %185, %164
  %187 = add nsw i32 %182, %186
  %188 = shl nuw i32 %179, 24
  %189 = ashr exact i32 %188, 24
  %190 = xor i32 %189, -128
  %191 = mul nsw i32 %185, %166
  %192 = mul nsw i32 %190, %168
  %193 = add nsw i32 %192, %191
  %194 = sub nsw i32 %182, %193
  %195 = mul nsw i32 %190, %170
  %196 = add nsw i32 %182, %195
  %197 = ashr i32 %187, 6
  %198 = lshr i32 %197, 31
  %199 = xor i32 %198, 1
  %200 = sub nsw i32 0, %199
  %201 = and i32 %197, %200
  %202 = icmp slt i32 %201, 255
  %203 = select i1 %202, i32 %201, i32 255
  %204 = trunc i32 %203 to i8
  store i8 %204, i8* %156, align 1
  %205 = ashr i32 %194, 6
  %206 = lshr i32 %205, 31
  %207 = xor i32 %206, 1
  %208 = sub nsw i32 0, %207
  %209 = and i32 %205, %208
  %210 = icmp slt i32 %209, 255
  %211 = select i1 %210, i32 %209, i32 255
  %212 = trunc i32 %211 to i8
  store i8 %212, i8* %161, align 1
  %213 = ashr i32 %196, 6
  %214 = lshr i32 %213, 31
  %215 = xor i32 %214, 1
  %216 = sub nsw i32 0, %215
  %217 = and i32 %213, %216
  %218 = icmp slt i32 %217, 255
  %219 = select i1 %218, i32 %217, i32 255
  %220 = trunc i32 %219 to i8
  store i8 %220, i8* %162, align 1
  %221 = getelementptr inbounds i8, i8* %156, i64 3
  store i8 -1, i8* %221, align 1
  %222 = getelementptr inbounds i16, i16* %154, i64 1
  %223 = getelementptr inbounds i16, i16* %155, i64 2
  %224 = getelementptr inbounds i8, i8* %156, i64 4
  %225 = add nuw nsw i32 %153, 1
  %226 = icmp eq i32 %225, %4
  br i1 %226, label %227, label %152, !llvm.loop !356

227:                                              ; preds = %152, %145, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @P210ToAR30Row_C(i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %6 = bitcast i16* %0 to i8*
  %7 = bitcast i16* %1 to i8*
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %385

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %17 = add i32 %4, -2
  %18 = lshr i32 %17, 1
  %19 = add nuw i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = icmp ult i32 %19, 4
  br i1 %21, label %235, label %22

22:                                               ; preds = %10
  %23 = add i32 %4, -2
  %24 = lshr i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = shl nuw nsw i64 %25, 3
  %27 = add nuw nsw i64 %26, 8
  %28 = getelementptr i8, i8* %2, i64 %27
  %29 = and i32 %23, -2
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %30, 2
  %32 = getelementptr i16, i16* %0, i64 %31
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i16, i16* %1, i64 %31
  %35 = bitcast i16* %34 to i8*
  %36 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr i8, i8* %37, i64 1
  %39 = icmp ugt i8* %33, %2
  %40 = icmp ugt i8* %28, %6
  %41 = and i1 %39, %40
  %42 = icmp ugt i8* %35, %2
  %43 = icmp ugt i8* %28, %7
  %44 = and i1 %42, %43
  %45 = or i1 %41, %44
  %46 = bitcast i16* %16 to i8*
  %47 = icmp ugt i8* %38, %2
  %48 = icmp ugt i8* %28, %46
  %49 = and i1 %47, %48
  %50 = or i1 %45, %49
  br i1 %50, label %235, label %51

51:                                               ; preds = %22
  %52 = and i64 %20, 4294967292
  %53 = trunc i64 %52 to i32
  %54 = shl i32 %53, 1
  %55 = shl nuw nsw i64 %52, 1
  %56 = getelementptr i16, i16* %0, i64 %55
  %57 = shl nuw nsw i64 %52, 1
  %58 = getelementptr i16, i16* %1, i64 %57
  %59 = shl nuw nsw i64 %52, 3
  %60 = getelementptr i8, i8* %2, i64 %59
  br label %61

61:                                               ; preds = %61, %51
  %62 = phi i64 [ 0, %51 ], [ %231, %61 ]
  %63 = shl i64 %62, 1
  %64 = getelementptr i16, i16* %0, i64 %63
  %65 = shl i64 %62, 1
  %66 = getelementptr i16, i16* %1, i64 %65
  %67 = shl i64 %62, 3
  %68 = bitcast i16* %64 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %71 = shufflevector <8 x i16> %69, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %72 = bitcast i16* %66 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2
  %74 = shufflevector <8 x i16> %73, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %75 = shufflevector <8 x i16> %73, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %76 = load i8, i8* %11, align 2, !alias.scope !357
  %77 = insertelement <4 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <4 x i8> %77, <4 x i8> undef, <4 x i32> zeroinitializer
  %79 = zext <4 x i8> %78 to <4 x i32>
  %80 = load i8, i8* %12, align 2, !alias.scope !357
  %81 = insertelement <4 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <4 x i8> %81, <4 x i8> undef, <4 x i32> zeroinitializer
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = load i8, i8* %13, align 1, !alias.scope !357
  %85 = insertelement <4 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <4 x i8> %85, <4 x i8> undef, <4 x i32> zeroinitializer
  %87 = zext <4 x i8> %86 to <4 x i32>
  %88 = load i8, i8* %14, align 1, !alias.scope !357
  %89 = insertelement <4 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <4 x i8> %89, <4 x i8> undef, <4 x i32> zeroinitializer
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = load i16, i16* %15, align 2, !alias.scope !357
  %93 = insertelement <4 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <4 x i16> %93, <4 x i16> undef, <4 x i32> zeroinitializer
  %95 = sext <4 x i16> %94 to <4 x i32>
  %96 = load i16, i16* %16, align 2, !alias.scope !357
  %97 = insertelement <4 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <4 x i16> %97, <4 x i16> undef, <4 x i32> zeroinitializer
  %99 = sext <4 x i16> %98 to <4 x i32>
  %100 = zext <4 x i16> %70 to <4 x i32>
  %101 = lshr <4 x i16> %74, <i16 8, i16 8, i16 8, i16 8>
  %102 = zext <4 x i16> %101 to <4 x i32>
  %103 = lshr <4 x i16> %75, <i16 8, i16 8, i16 8, i16 8>
  %104 = zext <4 x i16> %103 to <4 x i32>
  %105 = mul nsw <4 x i32> %95, %100
  %106 = lshr <4 x i32> %105, <i32 16, i32 16, i32 16, i32 16>
  %107 = add nsw <4 x i32> %106, %99
  %108 = shl nuw <4 x i32> %102, <i32 24, i32 24, i32 24, i32 24>
  %109 = ashr exact <4 x i32> %108, <i32 24, i32 24, i32 24, i32 24>
  %110 = xor <4 x i32> %109, <i32 -128, i32 -128, i32 -128, i32 -128>
  %111 = mul nsw <4 x i32> %110, %79
  %112 = add nsw <4 x i32> %107, %111
  %113 = shl nuw <4 x i32> %104, <i32 24, i32 24, i32 24, i32 24>
  %114 = ashr exact <4 x i32> %113, <i32 24, i32 24, i32 24, i32 24>
  %115 = xor <4 x i32> %114, <i32 -128, i32 -128, i32 -128, i32 -128>
  %116 = mul nsw <4 x i32> %110, %83
  %117 = mul nsw <4 x i32> %115, %87
  %118 = add nsw <4 x i32> %117, %116
  %119 = sub nsw <4 x i32> %107, %118
  %120 = mul nsw <4 x i32> %115, %91
  %121 = add nsw <4 x i32> %107, %120
  %122 = ashr <4 x i32> %112, <i32 4, i32 4, i32 4, i32 4>
  %123 = ashr <4 x i32> %119, <i32 4, i32 4, i32 4, i32 4>
  %124 = ashr <4 x i32> %121, <i32 4, i32 4, i32 4, i32 4>
  %125 = lshr <4 x i32> %122, <i32 31, i32 31, i32 31, i32 31>
  %126 = xor <4 x i32> %125, <i32 1, i32 1, i32 1, i32 1>
  %127 = sub nsw <4 x i32> zeroinitializer, %126
  %128 = and <4 x i32> %122, %127
  %129 = icmp sgt <4 x i32> %128, <i32 1022, i32 1022, i32 1022, i32 1022>
  %130 = and <4 x i32> %128, <i32 1023, i32 1023, i32 1023, i32 1023>
  %131 = lshr <4 x i32> %123, <i32 31, i32 31, i32 31, i32 31>
  %132 = xor <4 x i32> %131, <i32 1, i32 1, i32 1, i32 1>
  %133 = sub nsw <4 x i32> zeroinitializer, %132
  %134 = and <4 x i32> %123, %133
  %135 = icmp sgt <4 x i32> %134, <i32 1022, i32 1022, i32 1022, i32 1022>
  %136 = lshr <4 x i32> %124, <i32 31, i32 31, i32 31, i32 31>
  %137 = xor <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %138 = sub nsw <4 x i32> zeroinitializer, %137
  %139 = and <4 x i32> %124, %138
  %140 = icmp sgt <4 x i32> %139, <i32 1022, i32 1022, i32 1022, i32 1022>
  %141 = shl <4 x i32> %134, <i32 10, i32 10, i32 10, i32 10>
  %142 = and <4 x i32> %141, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %143 = select <4 x i1> %135, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %142
  %144 = shl <4 x i32> %139, <i32 20, i32 20, i32 20, i32 20>
  %145 = select <4 x i1> %140, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %144
  %146 = or <4 x i32> %130, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %147 = select <4 x i1> %129, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %146
  %148 = or <4 x i32> %143, %145
  %149 = or <4 x i32> %148, %147
  %150 = bitcast i16* %66 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = shufflevector <8 x i16> %151, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %153 = shufflevector <8 x i16> %151, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %154 = load i8, i8* %11, align 2, !alias.scope !357
  %155 = insertelement <4 x i8> undef, i8 %154, i32 0
  %156 = shufflevector <4 x i8> %155, <4 x i8> undef, <4 x i32> zeroinitializer
  %157 = zext <4 x i8> %156 to <4 x i32>
  %158 = load i8, i8* %12, align 2, !alias.scope !357
  %159 = insertelement <4 x i8> undef, i8 %158, i32 0
  %160 = shufflevector <4 x i8> %159, <4 x i8> undef, <4 x i32> zeroinitializer
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = load i8, i8* %13, align 1, !alias.scope !357
  %163 = insertelement <4 x i8> undef, i8 %162, i32 0
  %164 = shufflevector <4 x i8> %163, <4 x i8> undef, <4 x i32> zeroinitializer
  %165 = zext <4 x i8> %164 to <4 x i32>
  %166 = load i8, i8* %14, align 1, !alias.scope !357
  %167 = insertelement <4 x i8> undef, i8 %166, i32 0
  %168 = shufflevector <4 x i8> %167, <4 x i8> undef, <4 x i32> zeroinitializer
  %169 = zext <4 x i8> %168 to <4 x i32>
  %170 = load i16, i16* %15, align 2, !alias.scope !357
  %171 = insertelement <4 x i16> undef, i16 %170, i32 0
  %172 = shufflevector <4 x i16> %171, <4 x i16> undef, <4 x i32> zeroinitializer
  %173 = sext <4 x i16> %172 to <4 x i32>
  %174 = load i16, i16* %16, align 2, !alias.scope !357
  %175 = insertelement <4 x i16> undef, i16 %174, i32 0
  %176 = shufflevector <4 x i16> %175, <4 x i16> undef, <4 x i32> zeroinitializer
  %177 = sext <4 x i16> %176 to <4 x i32>
  %178 = zext <4 x i16> %71 to <4 x i32>
  %179 = lshr <4 x i16> %152, <i16 8, i16 8, i16 8, i16 8>
  %180 = zext <4 x i16> %179 to <4 x i32>
  %181 = lshr <4 x i16> %153, <i16 8, i16 8, i16 8, i16 8>
  %182 = zext <4 x i16> %181 to <4 x i32>
  %183 = mul nsw <4 x i32> %173, %178
  %184 = lshr <4 x i32> %183, <i32 16, i32 16, i32 16, i32 16>
  %185 = add nsw <4 x i32> %184, %177
  %186 = shl nuw <4 x i32> %180, <i32 24, i32 24, i32 24, i32 24>
  %187 = ashr exact <4 x i32> %186, <i32 24, i32 24, i32 24, i32 24>
  %188 = xor <4 x i32> %187, <i32 -128, i32 -128, i32 -128, i32 -128>
  %189 = mul nsw <4 x i32> %188, %157
  %190 = add nsw <4 x i32> %185, %189
  %191 = shl nuw <4 x i32> %182, <i32 24, i32 24, i32 24, i32 24>
  %192 = ashr exact <4 x i32> %191, <i32 24, i32 24, i32 24, i32 24>
  %193 = xor <4 x i32> %192, <i32 -128, i32 -128, i32 -128, i32 -128>
  %194 = mul nsw <4 x i32> %188, %161
  %195 = mul nsw <4 x i32> %193, %165
  %196 = add nsw <4 x i32> %195, %194
  %197 = sub nsw <4 x i32> %185, %196
  %198 = mul nsw <4 x i32> %193, %169
  %199 = add nsw <4 x i32> %185, %198
  %200 = ashr <4 x i32> %190, <i32 4, i32 4, i32 4, i32 4>
  %201 = ashr <4 x i32> %197, <i32 4, i32 4, i32 4, i32 4>
  %202 = ashr <4 x i32> %199, <i32 4, i32 4, i32 4, i32 4>
  %203 = lshr <4 x i32> %200, <i32 31, i32 31, i32 31, i32 31>
  %204 = xor <4 x i32> %203, <i32 1, i32 1, i32 1, i32 1>
  %205 = sub nsw <4 x i32> zeroinitializer, %204
  %206 = and <4 x i32> %200, %205
  %207 = icmp sgt <4 x i32> %206, <i32 1022, i32 1022, i32 1022, i32 1022>
  %208 = and <4 x i32> %206, <i32 1023, i32 1023, i32 1023, i32 1023>
  %209 = lshr <4 x i32> %201, <i32 31, i32 31, i32 31, i32 31>
  %210 = xor <4 x i32> %209, <i32 1, i32 1, i32 1, i32 1>
  %211 = sub nsw <4 x i32> zeroinitializer, %210
  %212 = and <4 x i32> %201, %211
  %213 = icmp sgt <4 x i32> %212, <i32 1022, i32 1022, i32 1022, i32 1022>
  %214 = lshr <4 x i32> %202, <i32 31, i32 31, i32 31, i32 31>
  %215 = xor <4 x i32> %214, <i32 1, i32 1, i32 1, i32 1>
  %216 = sub nsw <4 x i32> zeroinitializer, %215
  %217 = and <4 x i32> %202, %216
  %218 = icmp sgt <4 x i32> %217, <i32 1022, i32 1022, i32 1022, i32 1022>
  %219 = shl <4 x i32> %212, <i32 10, i32 10, i32 10, i32 10>
  %220 = and <4 x i32> %219, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %221 = select <4 x i1> %213, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %220
  %222 = shl <4 x i32> %217, <i32 20, i32 20, i32 20, i32 20>
  %223 = select <4 x i1> %218, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %222
  %224 = or <4 x i32> %208, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %225 = select <4 x i1> %207, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %224
  %226 = or <4 x i32> %221, %223
  %227 = or <4 x i32> %226, %225
  %228 = getelementptr inbounds i8, i8* %2, i64 %67
  %229 = bitcast i8* %228 to <8 x i32>*
  %230 = shufflevector <4 x i32> %149, <4 x i32> %227, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %230, <8 x i32>* %229, align 4
  %231 = add i64 %62, 4
  %232 = icmp eq i64 %231, %52
  br i1 %232, label %233, label %61, !llvm.loop !360

233:                                              ; preds = %61
  %234 = icmp eq i64 %52, %20
  br i1 %234, label %385, label %235

235:                                              ; preds = %233, %22, %10
  %236 = phi i32 [ 0, %22 ], [ 0, %10 ], [ %54, %233 ]
  %237 = phi i16* [ %0, %22 ], [ %0, %10 ], [ %56, %233 ]
  %238 = phi i16* [ %1, %22 ], [ %1, %10 ], [ %58, %233 ]
  %239 = phi i8* [ %2, %22 ], [ %2, %10 ], [ %60, %233 ]
  br label %240

240:                                              ; preds = %235, %240
  %241 = phi i32 [ %383, %240 ], [ %236, %235 ]
  %242 = phi i16* [ %380, %240 ], [ %237, %235 ]
  %243 = phi i16* [ %381, %240 ], [ %238, %235 ]
  %244 = phi i8* [ %382, %240 ], [ %239, %235 ]
  %245 = load i16, i16* %242, align 2
  %246 = load i16, i16* %243, align 2
  %247 = getelementptr inbounds i16, i16* %243, i64 1
  %248 = load i16, i16* %247, align 2
  %249 = load i8, i8* %11, align 2
  %250 = zext i8 %249 to i32
  %251 = load i8, i8* %12, align 2
  %252 = zext i8 %251 to i32
  %253 = load i8, i8* %13, align 1
  %254 = zext i8 %253 to i32
  %255 = load i8, i8* %14, align 1
  %256 = zext i8 %255 to i32
  %257 = load i16, i16* %15, align 2
  %258 = sext i16 %257 to i32
  %259 = load i16, i16* %16, align 2
  %260 = sext i16 %259 to i32
  %261 = zext i16 %245 to i32
  %262 = lshr i16 %246, 8
  %263 = zext i16 %262 to i32
  %264 = lshr i16 %248, 8
  %265 = zext i16 %264 to i32
  %266 = mul nsw i32 %258, %261
  %267 = lshr i32 %266, 16
  %268 = add nsw i32 %267, %260
  %269 = shl nuw i32 %263, 24
  %270 = ashr exact i32 %269, 24
  %271 = xor i32 %270, -128
  %272 = mul nsw i32 %271, %250
  %273 = add nsw i32 %268, %272
  %274 = shl nuw i32 %265, 24
  %275 = ashr exact i32 %274, 24
  %276 = xor i32 %275, -128
  %277 = mul nsw i32 %271, %252
  %278 = mul nsw i32 %276, %254
  %279 = add nsw i32 %278, %277
  %280 = sub nsw i32 %268, %279
  %281 = mul nsw i32 %276, %256
  %282 = add nsw i32 %268, %281
  %283 = ashr i32 %273, 4
  %284 = ashr i32 %280, 4
  %285 = ashr i32 %282, 4
  %286 = lshr i32 %283, 31
  %287 = xor i32 %286, 1
  %288 = sub nsw i32 0, %287
  %289 = and i32 %283, %288
  %290 = icmp sgt i32 %289, 1022
  %291 = and i32 %289, 1023
  %292 = lshr i32 %284, 31
  %293 = xor i32 %292, 1
  %294 = sub nsw i32 0, %293
  %295 = and i32 %284, %294
  %296 = icmp sgt i32 %295, 1022
  %297 = lshr i32 %285, 31
  %298 = xor i32 %297, 1
  %299 = sub nsw i32 0, %298
  %300 = and i32 %285, %299
  %301 = icmp sgt i32 %300, 1022
  %302 = shl i32 %295, 10
  %303 = and i32 %302, 1047552
  %304 = select i1 %296, i32 1047552, i32 %303
  %305 = shl i32 %300, 20
  %306 = select i1 %301, i32 1072693248, i32 %305
  %307 = or i32 %291, -1073741824
  %308 = select i1 %290, i32 -1073740801, i32 %307
  %309 = or i32 %304, %306
  %310 = or i32 %309, %308
  %311 = bitcast i8* %244 to i32*
  store i32 %310, i32* %311, align 4
  %312 = getelementptr inbounds i16, i16* %242, i64 1
  %313 = load i16, i16* %312, align 2
  %314 = load i16, i16* %243, align 2
  %315 = load i16, i16* %247, align 2
  %316 = load i8, i8* %11, align 2
  %317 = zext i8 %316 to i32
  %318 = load i8, i8* %12, align 2
  %319 = zext i8 %318 to i32
  %320 = load i8, i8* %13, align 1
  %321 = zext i8 %320 to i32
  %322 = load i8, i8* %14, align 1
  %323 = zext i8 %322 to i32
  %324 = load i16, i16* %15, align 2
  %325 = sext i16 %324 to i32
  %326 = load i16, i16* %16, align 2
  %327 = sext i16 %326 to i32
  %328 = zext i16 %313 to i32
  %329 = lshr i16 %314, 8
  %330 = zext i16 %329 to i32
  %331 = lshr i16 %315, 8
  %332 = zext i16 %331 to i32
  %333 = mul nsw i32 %325, %328
  %334 = lshr i32 %333, 16
  %335 = add nsw i32 %334, %327
  %336 = shl nuw i32 %330, 24
  %337 = ashr exact i32 %336, 24
  %338 = xor i32 %337, -128
  %339 = mul nsw i32 %338, %317
  %340 = add nsw i32 %335, %339
  %341 = shl nuw i32 %332, 24
  %342 = ashr exact i32 %341, 24
  %343 = xor i32 %342, -128
  %344 = mul nsw i32 %338, %319
  %345 = mul nsw i32 %343, %321
  %346 = add nsw i32 %345, %344
  %347 = sub nsw i32 %335, %346
  %348 = mul nsw i32 %343, %323
  %349 = add nsw i32 %335, %348
  %350 = getelementptr inbounds i8, i8* %244, i64 4
  %351 = ashr i32 %340, 4
  %352 = ashr i32 %347, 4
  %353 = ashr i32 %349, 4
  %354 = lshr i32 %351, 31
  %355 = xor i32 %354, 1
  %356 = sub nsw i32 0, %355
  %357 = and i32 %351, %356
  %358 = icmp sgt i32 %357, 1022
  %359 = and i32 %357, 1023
  %360 = lshr i32 %352, 31
  %361 = xor i32 %360, 1
  %362 = sub nsw i32 0, %361
  %363 = and i32 %352, %362
  %364 = icmp sgt i32 %363, 1022
  %365 = lshr i32 %353, 31
  %366 = xor i32 %365, 1
  %367 = sub nsw i32 0, %366
  %368 = and i32 %353, %367
  %369 = icmp sgt i32 %368, 1022
  %370 = shl i32 %363, 10
  %371 = and i32 %370, 1047552
  %372 = select i1 %364, i32 1047552, i32 %371
  %373 = shl i32 %368, 20
  %374 = select i1 %369, i32 1072693248, i32 %373
  %375 = or i32 %359, -1073741824
  %376 = select i1 %358, i32 -1073740801, i32 %375
  %377 = or i32 %372, %374
  %378 = or i32 %377, %376
  %379 = bitcast i8* %350 to i32*
  store i32 %378, i32* %379, align 4
  %380 = getelementptr inbounds i16, i16* %242, i64 2
  %381 = getelementptr inbounds i16, i16* %243, i64 2
  %382 = getelementptr inbounds i8, i8* %244, i64 8
  %383 = add nuw nsw i32 %241, 2
  %384 = icmp slt i32 %383, %8
  br i1 %384, label %240, label %385, !llvm.loop !361

385:                                              ; preds = %240, %233, %5
  %386 = phi i8* [ %2, %5 ], [ %60, %233 ], [ %382, %240 ]
  %387 = phi i16* [ %1, %5 ], [ %58, %233 ], [ %381, %240 ]
  %388 = phi i16* [ %0, %5 ], [ %56, %233 ], [ %380, %240 ]
  %389 = and i32 %4, 1
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %465, label %391

391:                                              ; preds = %385
  %392 = load i16, i16* %388, align 2
  %393 = load i16, i16* %387, align 2
  %394 = getelementptr inbounds i16, i16* %387, i64 1
  %395 = load i16, i16* %394, align 2
  %396 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %397 = load i8, i8* %396, align 2
  %398 = zext i8 %397 to i32
  %399 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %400 = load i8, i8* %399, align 2
  %401 = zext i8 %400 to i32
  %402 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %409 = load i16, i16* %408, align 2
  %410 = sext i16 %409 to i32
  %411 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = zext i16 %392 to i32
  %415 = lshr i16 %393, 8
  %416 = zext i16 %415 to i32
  %417 = lshr i16 %395, 8
  %418 = zext i16 %417 to i32
  %419 = mul nsw i32 %410, %414
  %420 = lshr i32 %419, 16
  %421 = add nsw i32 %420, %413
  %422 = shl nuw i32 %416, 24
  %423 = ashr exact i32 %422, 24
  %424 = xor i32 %423, -128
  %425 = mul nsw i32 %424, %398
  %426 = add nsw i32 %421, %425
  %427 = shl nuw i32 %418, 24
  %428 = ashr exact i32 %427, 24
  %429 = xor i32 %428, -128
  %430 = mul nsw i32 %424, %401
  %431 = mul nsw i32 %429, %404
  %432 = add nsw i32 %431, %430
  %433 = sub nsw i32 %421, %432
  %434 = mul nsw i32 %429, %407
  %435 = add nsw i32 %421, %434
  %436 = ashr i32 %426, 4
  %437 = ashr i32 %433, 4
  %438 = ashr i32 %435, 4
  %439 = lshr i32 %436, 31
  %440 = xor i32 %439, 1
  %441 = sub nsw i32 0, %440
  %442 = and i32 %436, %441
  %443 = icmp sgt i32 %442, 1022
  %444 = and i32 %442, 1023
  %445 = lshr i32 %437, 31
  %446 = xor i32 %445, 1
  %447 = sub nsw i32 0, %446
  %448 = and i32 %437, %447
  %449 = icmp sgt i32 %448, 1022
  %450 = lshr i32 %438, 31
  %451 = xor i32 %450, 1
  %452 = sub nsw i32 0, %451
  %453 = and i32 %438, %452
  %454 = icmp sgt i32 %453, 1022
  %455 = shl i32 %448, 10
  %456 = and i32 %455, 1047552
  %457 = select i1 %449, i32 1047552, i32 %456
  %458 = shl i32 %453, 20
  %459 = select i1 %454, i32 1072693248, i32 %458
  %460 = or i32 %444, -1073741824
  %461 = select i1 %443, i32 -1073740801, i32 %460
  %462 = or i32 %457, %459
  %463 = or i32 %462, %461
  %464 = bitcast i8* %386 to i32*
  store i32 %463, i32* %464, align 4
  br label %465

465:                                              ; preds = %385, %391
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @P410ToAR30Row_C(i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %6 = bitcast i16* %0 to i8*
  %7 = bitcast i16* %1 to i8*
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %230

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %16 = add i32 %4, -1
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %18, 4
  br i1 %19, label %148, label %20

20:                                               ; preds = %9
  %21 = add i32 %4, -1
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 2
  %24 = add nuw nsw i64 %23, 4
  %25 = getelementptr i8, i8* %2, i64 %24
  %26 = add nuw nsw i64 %22, 1
  %27 = getelementptr i16, i16* %0, i64 %26
  %28 = bitcast i16* %27 to i8*
  %29 = shl nuw nsw i64 %22, 1
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i16, i16* %1, i64 %30
  %32 = bitcast i16* %31 to i8*
  %33 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %34 = bitcast i16* %33 to i8*
  %35 = getelementptr i8, i8* %34, i64 1
  %36 = icmp ugt i8* %28, %2
  %37 = icmp ugt i8* %25, %6
  %38 = and i1 %36, %37
  %39 = icmp ugt i8* %32, %2
  %40 = icmp ugt i8* %25, %7
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = bitcast i16* %15 to i8*
  %44 = icmp ugt i8* %35, %2
  %45 = icmp ugt i8* %25, %43
  %46 = and i1 %44, %45
  %47 = or i1 %42, %46
  br i1 %47, label %148, label %48

48:                                               ; preds = %20
  %49 = and i64 %18, 8589934588
  %50 = trunc i64 %49 to i32
  %51 = getelementptr i16, i16* %0, i64 %49
  %52 = shl nuw nsw i64 %49, 1
  %53 = getelementptr i16, i16* %1, i64 %52
  %54 = shl nuw nsw i64 %49, 2
  %55 = getelementptr i8, i8* %2, i64 %54
  br label %56

56:                                               ; preds = %56, %48
  %57 = phi i64 [ 0, %48 ], [ %144, %56 ]
  %58 = getelementptr i16, i16* %0, i64 %57
  %59 = shl i64 %57, 1
  %60 = getelementptr i16, i16* %1, i64 %59
  %61 = shl i64 %57, 2
  %62 = getelementptr i8, i8* %2, i64 %61
  %63 = bitcast i16* %58 to <4 x i16>*
  %64 = load <4 x i16>, <4 x i16>* %63, align 2, !alias.scope !362
  %65 = bitcast i16* %60 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %68 = shufflevector <8 x i16> %66, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %69 = load i8, i8* %10, align 2, !alias.scope !365
  %70 = insertelement <4 x i8> undef, i8 %69, i32 0
  %71 = shufflevector <4 x i8> %70, <4 x i8> undef, <4 x i32> zeroinitializer
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = load i8, i8* %11, align 2, !alias.scope !365
  %74 = insertelement <4 x i8> undef, i8 %73, i32 0
  %75 = shufflevector <4 x i8> %74, <4 x i8> undef, <4 x i32> zeroinitializer
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = load i8, i8* %12, align 1, !alias.scope !365
  %78 = insertelement <4 x i8> undef, i8 %77, i32 0
  %79 = shufflevector <4 x i8> %78, <4 x i8> undef, <4 x i32> zeroinitializer
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = load i8, i8* %13, align 1, !alias.scope !365
  %82 = insertelement <4 x i8> undef, i8 %81, i32 0
  %83 = shufflevector <4 x i8> %82, <4 x i8> undef, <4 x i32> zeroinitializer
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = load i16, i16* %14, align 2, !alias.scope !365
  %86 = insertelement <4 x i16> undef, i16 %85, i32 0
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <4 x i32> zeroinitializer
  %88 = sext <4 x i16> %87 to <4 x i32>
  %89 = load i16, i16* %15, align 2, !alias.scope !365
  %90 = insertelement <4 x i16> undef, i16 %89, i32 0
  %91 = shufflevector <4 x i16> %90, <4 x i16> undef, <4 x i32> zeroinitializer
  %92 = sext <4 x i16> %91 to <4 x i32>
  %93 = zext <4 x i16> %64 to <4 x i32>
  %94 = lshr <4 x i16> %67, <i16 8, i16 8, i16 8, i16 8>
  %95 = zext <4 x i16> %94 to <4 x i32>
  %96 = lshr <4 x i16> %68, <i16 8, i16 8, i16 8, i16 8>
  %97 = zext <4 x i16> %96 to <4 x i32>
  %98 = mul nsw <4 x i32> %88, %93
  %99 = lshr <4 x i32> %98, <i32 16, i32 16, i32 16, i32 16>
  %100 = add nsw <4 x i32> %99, %92
  %101 = shl nuw <4 x i32> %95, <i32 24, i32 24, i32 24, i32 24>
  %102 = ashr exact <4 x i32> %101, <i32 24, i32 24, i32 24, i32 24>
  %103 = xor <4 x i32> %102, <i32 -128, i32 -128, i32 -128, i32 -128>
  %104 = mul nsw <4 x i32> %103, %72
  %105 = add nsw <4 x i32> %100, %104
  %106 = shl nuw <4 x i32> %97, <i32 24, i32 24, i32 24, i32 24>
  %107 = ashr exact <4 x i32> %106, <i32 24, i32 24, i32 24, i32 24>
  %108 = xor <4 x i32> %107, <i32 -128, i32 -128, i32 -128, i32 -128>
  %109 = mul nsw <4 x i32> %103, %76
  %110 = mul nsw <4 x i32> %108, %80
  %111 = add nsw <4 x i32> %110, %109
  %112 = sub nsw <4 x i32> %100, %111
  %113 = mul nsw <4 x i32> %108, %84
  %114 = add nsw <4 x i32> %100, %113
  %115 = ashr <4 x i32> %105, <i32 4, i32 4, i32 4, i32 4>
  %116 = ashr <4 x i32> %112, <i32 4, i32 4, i32 4, i32 4>
  %117 = ashr <4 x i32> %114, <i32 4, i32 4, i32 4, i32 4>
  %118 = lshr <4 x i32> %115, <i32 31, i32 31, i32 31, i32 31>
  %119 = xor <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  %120 = sub nsw <4 x i32> zeroinitializer, %119
  %121 = and <4 x i32> %115, %120
  %122 = icmp sgt <4 x i32> %121, <i32 1022, i32 1022, i32 1022, i32 1022>
  %123 = and <4 x i32> %121, <i32 1023, i32 1023, i32 1023, i32 1023>
  %124 = lshr <4 x i32> %116, <i32 31, i32 31, i32 31, i32 31>
  %125 = xor <4 x i32> %124, <i32 1, i32 1, i32 1, i32 1>
  %126 = sub nsw <4 x i32> zeroinitializer, %125
  %127 = and <4 x i32> %116, %126
  %128 = icmp sgt <4 x i32> %127, <i32 1022, i32 1022, i32 1022, i32 1022>
  %129 = lshr <4 x i32> %117, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %117, %131
  %133 = icmp sgt <4 x i32> %132, <i32 1022, i32 1022, i32 1022, i32 1022>
  %134 = shl <4 x i32> %127, <i32 10, i32 10, i32 10, i32 10>
  %135 = and <4 x i32> %134, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %136 = select <4 x i1> %128, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %135
  %137 = shl <4 x i32> %132, <i32 20, i32 20, i32 20, i32 20>
  %138 = select <4 x i1> %133, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %137
  %139 = or <4 x i32> %123, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %140 = select <4 x i1> %122, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %139
  %141 = or <4 x i32> %136, %138
  %142 = or <4 x i32> %141, %140
  %143 = bitcast i8* %62 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %143, align 4, !alias.scope !367, !noalias !369
  %144 = add i64 %57, 4
  %145 = icmp eq i64 %144, %49
  br i1 %145, label %146, label %56, !llvm.loop !371

146:                                              ; preds = %56
  %147 = icmp eq i64 %18, %49
  br i1 %147, label %230, label %148

148:                                              ; preds = %146, %20, %9
  %149 = phi i32 [ 0, %20 ], [ 0, %9 ], [ %50, %146 ]
  %150 = phi i16* [ %0, %20 ], [ %0, %9 ], [ %51, %146 ]
  %151 = phi i16* [ %1, %20 ], [ %1, %9 ], [ %53, %146 ]
  %152 = phi i8* [ %2, %20 ], [ %2, %9 ], [ %55, %146 ]
  br label %153

153:                                              ; preds = %148, %153
  %154 = phi i32 [ %228, %153 ], [ %149, %148 ]
  %155 = phi i16* [ %225, %153 ], [ %150, %148 ]
  %156 = phi i16* [ %226, %153 ], [ %151, %148 ]
  %157 = phi i8* [ %227, %153 ], [ %152, %148 ]
  %158 = load i16, i16* %155, align 2
  %159 = load i16, i16* %156, align 2
  %160 = getelementptr inbounds i16, i16* %156, i64 1
  %161 = load i16, i16* %160, align 2
  %162 = load i8, i8* %10, align 2
  %163 = zext i8 %162 to i32
  %164 = load i8, i8* %11, align 2
  %165 = zext i8 %164 to i32
  %166 = load i8, i8* %12, align 1
  %167 = zext i8 %166 to i32
  %168 = load i8, i8* %13, align 1
  %169 = zext i8 %168 to i32
  %170 = load i16, i16* %14, align 2
  %171 = sext i16 %170 to i32
  %172 = load i16, i16* %15, align 2
  %173 = sext i16 %172 to i32
  %174 = zext i16 %158 to i32
  %175 = lshr i16 %159, 8
  %176 = zext i16 %175 to i32
  %177 = lshr i16 %161, 8
  %178 = zext i16 %177 to i32
  %179 = mul nsw i32 %171, %174
  %180 = lshr i32 %179, 16
  %181 = add nsw i32 %180, %173
  %182 = shl nuw i32 %176, 24
  %183 = ashr exact i32 %182, 24
  %184 = xor i32 %183, -128
  %185 = mul nsw i32 %184, %163
  %186 = add nsw i32 %181, %185
  %187 = shl nuw i32 %178, 24
  %188 = ashr exact i32 %187, 24
  %189 = xor i32 %188, -128
  %190 = mul nsw i32 %184, %165
  %191 = mul nsw i32 %189, %167
  %192 = add nsw i32 %191, %190
  %193 = sub nsw i32 %181, %192
  %194 = mul nsw i32 %189, %169
  %195 = add nsw i32 %181, %194
  %196 = ashr i32 %186, 4
  %197 = ashr i32 %193, 4
  %198 = ashr i32 %195, 4
  %199 = lshr i32 %196, 31
  %200 = xor i32 %199, 1
  %201 = sub nsw i32 0, %200
  %202 = and i32 %196, %201
  %203 = icmp sgt i32 %202, 1022
  %204 = and i32 %202, 1023
  %205 = lshr i32 %197, 31
  %206 = xor i32 %205, 1
  %207 = sub nsw i32 0, %206
  %208 = and i32 %197, %207
  %209 = icmp sgt i32 %208, 1022
  %210 = lshr i32 %198, 31
  %211 = xor i32 %210, 1
  %212 = sub nsw i32 0, %211
  %213 = and i32 %198, %212
  %214 = icmp sgt i32 %213, 1022
  %215 = shl i32 %208, 10
  %216 = and i32 %215, 1047552
  %217 = select i1 %209, i32 1047552, i32 %216
  %218 = shl i32 %213, 20
  %219 = select i1 %214, i32 1072693248, i32 %218
  %220 = or i32 %204, -1073741824
  %221 = select i1 %203, i32 -1073740801, i32 %220
  %222 = or i32 %217, %219
  %223 = or i32 %222, %221
  %224 = bitcast i8* %157 to i32*
  store i32 %223, i32* %224, align 4
  %225 = getelementptr inbounds i16, i16* %155, i64 1
  %226 = getelementptr inbounds i16, i16* %156, i64 2
  %227 = getelementptr inbounds i8, i8* %157, i64 4
  %228 = add nuw nsw i32 %154, 1
  %229 = icmp eq i32 %228, %4
  br i1 %229, label %230, label %153, !llvm.loop !372

230:                                              ; preds = %153, %146, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToAR30Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %370

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 4
  br i1 %20, label %228, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 3
  %26 = add nuw nsw i64 %25, 8
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %228, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967292
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = shl nuw nsw i64 %55, 3
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %224, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = shl i64 %65, 3
  %70 = getelementptr i8, i8* %2, i64 %65
  %71 = bitcast i8* %67 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1
  %73 = shufflevector <8 x i8> %72, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %74 = shufflevector <8 x i8> %72, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %75 = bitcast i8* %68 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1, !alias.scope !373
  %77 = bitcast i8* %70 to <4 x i8>*
  %78 = load <4 x i8>, <4 x i8>* %77, align 1, !alias.scope !376
  %79 = load i8, i8* %10, align 2, !alias.scope !378
  %80 = insertelement <4 x i8> undef, i8 %79, i32 0
  %81 = shufflevector <4 x i8> %80, <4 x i8> undef, <4 x i32> zeroinitializer
  %82 = zext <4 x i8> %81 to <4 x i32>
  %83 = load i8, i8* %11, align 2, !alias.scope !378
  %84 = insertelement <4 x i8> undef, i8 %83, i32 0
  %85 = shufflevector <4 x i8> %84, <4 x i8> undef, <4 x i32> zeroinitializer
  %86 = zext <4 x i8> %85 to <4 x i32>
  %87 = load i8, i8* %12, align 1, !alias.scope !378
  %88 = insertelement <4 x i8> undef, i8 %87, i32 0
  %89 = shufflevector <4 x i8> %88, <4 x i8> undef, <4 x i32> zeroinitializer
  %90 = zext <4 x i8> %89 to <4 x i32>
  %91 = load i8, i8* %13, align 1, !alias.scope !378
  %92 = insertelement <4 x i8> undef, i8 %91, i32 0
  %93 = shufflevector <4 x i8> %92, <4 x i8> undef, <4 x i32> zeroinitializer
  %94 = zext <4 x i8> %93 to <4 x i32>
  %95 = load i16, i16* %14, align 2, !alias.scope !378
  %96 = insertelement <4 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <4 x i16> %96, <4 x i16> undef, <4 x i32> zeroinitializer
  %98 = sext <4 x i16> %97 to <4 x i32>
  %99 = load i16, i16* %15, align 2, !alias.scope !378
  %100 = insertelement <4 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <4 x i16> %100, <4 x i16> undef, <4 x i32> zeroinitializer
  %102 = sext <4 x i16> %101 to <4 x i32>
  %103 = zext <4 x i8> %73 to <4 x i32>
  %104 = mul nuw nsw <4 x i32> %103, <i32 257, i32 257, i32 257, i32 257>
  %105 = mul <4 x i32> %104, %98
  %106 = lshr <4 x i32> %105, <i32 16, i32 16, i32 16, i32 16>
  %107 = add nsw <4 x i32> %106, %102
  %108 = xor <4 x i8> %76, <i8 -128, i8 -128, i8 -128, i8 -128>
  %109 = xor <4 x i8> %78, <i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = sext <4 x i8> %108 to <4 x i32>
  %111 = mul nsw <4 x i32> %82, %110
  %112 = add nsw <4 x i32> %107, %111
  %113 = sext <4 x i8> %109 to <4 x i32>
  %114 = mul nsw <4 x i32> %86, %110
  %115 = mul nsw <4 x i32> %90, %113
  %116 = add nsw <4 x i32> %115, %114
  %117 = sub nsw <4 x i32> %107, %116
  %118 = mul nsw <4 x i32> %94, %113
  %119 = add nsw <4 x i32> %107, %118
  %120 = ashr <4 x i32> %112, <i32 4, i32 4, i32 4, i32 4>
  %121 = ashr <4 x i32> %117, <i32 4, i32 4, i32 4, i32 4>
  %122 = ashr <4 x i32> %119, <i32 4, i32 4, i32 4, i32 4>
  %123 = lshr <4 x i32> %120, <i32 31, i32 31, i32 31, i32 31>
  %124 = xor <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>
  %125 = sub nsw <4 x i32> zeroinitializer, %124
  %126 = and <4 x i32> %120, %125
  %127 = icmp sgt <4 x i32> %126, <i32 1022, i32 1022, i32 1022, i32 1022>
  %128 = and <4 x i32> %126, <i32 1023, i32 1023, i32 1023, i32 1023>
  %129 = lshr <4 x i32> %121, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %121, %131
  %133 = icmp sgt <4 x i32> %132, <i32 1022, i32 1022, i32 1022, i32 1022>
  %134 = lshr <4 x i32> %122, <i32 31, i32 31, i32 31, i32 31>
  %135 = xor <4 x i32> %134, <i32 1, i32 1, i32 1, i32 1>
  %136 = sub nsw <4 x i32> zeroinitializer, %135
  %137 = and <4 x i32> %122, %136
  %138 = icmp sgt <4 x i32> %137, <i32 1022, i32 1022, i32 1022, i32 1022>
  %139 = shl nsw <4 x i32> %132, <i32 10, i32 10, i32 10, i32 10>
  %140 = and <4 x i32> %139, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %141 = select <4 x i1> %133, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %140
  %142 = shl <4 x i32> %137, <i32 20, i32 20, i32 20, i32 20>
  %143 = select <4 x i1> %138, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %142
  %144 = or <4 x i32> %128, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %145 = select <4 x i1> %127, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %144
  %146 = or <4 x i32> %141, %143
  %147 = or <4 x i32> %146, %145
  %148 = bitcast i8* %68 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1, !alias.scope !373
  %150 = bitcast i8* %70 to <4 x i8>*
  %151 = load <4 x i8>, <4 x i8>* %150, align 1, !alias.scope !376
  %152 = load i8, i8* %10, align 2, !alias.scope !378
  %153 = insertelement <4 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <4 x i8> %153, <4 x i8> undef, <4 x i32> zeroinitializer
  %155 = zext <4 x i8> %154 to <4 x i32>
  %156 = load i8, i8* %11, align 2, !alias.scope !378
  %157 = insertelement <4 x i8> undef, i8 %156, i32 0
  %158 = shufflevector <4 x i8> %157, <4 x i8> undef, <4 x i32> zeroinitializer
  %159 = zext <4 x i8> %158 to <4 x i32>
  %160 = load i8, i8* %12, align 1, !alias.scope !378
  %161 = insertelement <4 x i8> undef, i8 %160, i32 0
  %162 = shufflevector <4 x i8> %161, <4 x i8> undef, <4 x i32> zeroinitializer
  %163 = zext <4 x i8> %162 to <4 x i32>
  %164 = load i8, i8* %13, align 1, !alias.scope !378
  %165 = insertelement <4 x i8> undef, i8 %164, i32 0
  %166 = shufflevector <4 x i8> %165, <4 x i8> undef, <4 x i32> zeroinitializer
  %167 = zext <4 x i8> %166 to <4 x i32>
  %168 = load i16, i16* %14, align 2, !alias.scope !378
  %169 = insertelement <4 x i16> undef, i16 %168, i32 0
  %170 = shufflevector <4 x i16> %169, <4 x i16> undef, <4 x i32> zeroinitializer
  %171 = sext <4 x i16> %170 to <4 x i32>
  %172 = load i16, i16* %15, align 2, !alias.scope !378
  %173 = insertelement <4 x i16> undef, i16 %172, i32 0
  %174 = shufflevector <4 x i16> %173, <4 x i16> undef, <4 x i32> zeroinitializer
  %175 = sext <4 x i16> %174 to <4 x i32>
  %176 = zext <4 x i8> %74 to <4 x i32>
  %177 = mul nuw nsw <4 x i32> %176, <i32 257, i32 257, i32 257, i32 257>
  %178 = mul <4 x i32> %177, %171
  %179 = lshr <4 x i32> %178, <i32 16, i32 16, i32 16, i32 16>
  %180 = add nsw <4 x i32> %179, %175
  %181 = xor <4 x i8> %149, <i8 -128, i8 -128, i8 -128, i8 -128>
  %182 = xor <4 x i8> %151, <i8 -128, i8 -128, i8 -128, i8 -128>
  %183 = sext <4 x i8> %181 to <4 x i32>
  %184 = mul nsw <4 x i32> %155, %183
  %185 = add nsw <4 x i32> %180, %184
  %186 = sext <4 x i8> %182 to <4 x i32>
  %187 = mul nsw <4 x i32> %159, %183
  %188 = mul nsw <4 x i32> %163, %186
  %189 = add nsw <4 x i32> %188, %187
  %190 = sub nsw <4 x i32> %180, %189
  %191 = mul nsw <4 x i32> %167, %186
  %192 = add nsw <4 x i32> %180, %191
  %193 = ashr <4 x i32> %185, <i32 4, i32 4, i32 4, i32 4>
  %194 = ashr <4 x i32> %190, <i32 4, i32 4, i32 4, i32 4>
  %195 = ashr <4 x i32> %192, <i32 4, i32 4, i32 4, i32 4>
  %196 = lshr <4 x i32> %193, <i32 31, i32 31, i32 31, i32 31>
  %197 = xor <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  %198 = sub nsw <4 x i32> zeroinitializer, %197
  %199 = and <4 x i32> %193, %198
  %200 = icmp sgt <4 x i32> %199, <i32 1022, i32 1022, i32 1022, i32 1022>
  %201 = and <4 x i32> %199, <i32 1023, i32 1023, i32 1023, i32 1023>
  %202 = lshr <4 x i32> %194, <i32 31, i32 31, i32 31, i32 31>
  %203 = xor <4 x i32> %202, <i32 1, i32 1, i32 1, i32 1>
  %204 = sub nsw <4 x i32> zeroinitializer, %203
  %205 = and <4 x i32> %194, %204
  %206 = icmp sgt <4 x i32> %205, <i32 1022, i32 1022, i32 1022, i32 1022>
  %207 = lshr <4 x i32> %195, <i32 31, i32 31, i32 31, i32 31>
  %208 = xor <4 x i32> %207, <i32 1, i32 1, i32 1, i32 1>
  %209 = sub nsw <4 x i32> zeroinitializer, %208
  %210 = and <4 x i32> %195, %209
  %211 = icmp sgt <4 x i32> %210, <i32 1022, i32 1022, i32 1022, i32 1022>
  %212 = shl nsw <4 x i32> %205, <i32 10, i32 10, i32 10, i32 10>
  %213 = and <4 x i32> %212, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %214 = select <4 x i1> %206, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %213
  %215 = shl <4 x i32> %210, <i32 20, i32 20, i32 20, i32 20>
  %216 = select <4 x i1> %211, <4 x i32> <i32 1072693248, i32 1072693248, i32 1072693248, i32 1072693248>, <4 x i32> %215
  %217 = or <4 x i32> %201, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %218 = select <4 x i1> %200, <4 x i32> <i32 -1073740801, i32 -1073740801, i32 -1073740801, i32 -1073740801>, <4 x i32> %217
  %219 = or <4 x i32> %214, %216
  %220 = or <4 x i32> %219, %218
  %221 = getelementptr inbounds i8, i8* %3, i64 %69
  %222 = bitcast i8* %221 to <8 x i32>*
  %223 = shufflevector <4 x i32> %147, <4 x i32> %220, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %223, <8 x i32>* %222, align 4
  %224 = add i64 %65, 4
  %225 = icmp eq i64 %224, %55
  br i1 %225, label %226, label %64, !llvm.loop !380

226:                                              ; preds = %64
  %227 = icmp eq i64 %55, %19
  br i1 %227, label %370, label %228

228:                                              ; preds = %226, %21, %9
  %229 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %226 ]
  %230 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %226 ]
  %231 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %226 ]
  %232 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %226 ]
  %233 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %226 ]
  br label %234

234:                                              ; preds = %228, %234
  %235 = phi i32 [ %368, %234 ], [ %229, %228 ]
  %236 = phi i8* [ %364, %234 ], [ %230, %228 ]
  %237 = phi i8* [ %365, %234 ], [ %231, %228 ]
  %238 = phi i8* [ %367, %234 ], [ %232, %228 ]
  %239 = phi i8* [ %366, %234 ], [ %233, %228 ]
  %240 = load i8, i8* %236, align 1
  %241 = load i8, i8* %237, align 1
  %242 = load i8, i8* %239, align 1
  %243 = load i8, i8* %10, align 2
  %244 = zext i8 %243 to i32
  %245 = load i8, i8* %11, align 2
  %246 = zext i8 %245 to i32
  %247 = load i8, i8* %12, align 1
  %248 = zext i8 %247 to i32
  %249 = load i8, i8* %13, align 1
  %250 = zext i8 %249 to i32
  %251 = load i16, i16* %14, align 2
  %252 = sext i16 %251 to i32
  %253 = load i16, i16* %15, align 2
  %254 = sext i16 %253 to i32
  %255 = zext i8 %240 to i32
  %256 = mul nuw nsw i32 %255, 257
  %257 = mul i32 %256, %252
  %258 = lshr i32 %257, 16
  %259 = add nsw i32 %258, %254
  %260 = xor i8 %241, -128
  %261 = xor i8 %242, -128
  %262 = sext i8 %260 to i32
  %263 = mul nsw i32 %244, %262
  %264 = add nsw i32 %259, %263
  %265 = sext i8 %261 to i32
  %266 = mul nsw i32 %246, %262
  %267 = mul nsw i32 %248, %265
  %268 = add nsw i32 %267, %266
  %269 = sub nsw i32 %259, %268
  %270 = mul nsw i32 %250, %265
  %271 = add nsw i32 %259, %270
  %272 = ashr i32 %264, 4
  %273 = ashr i32 %269, 4
  %274 = ashr i32 %271, 4
  %275 = lshr i32 %272, 31
  %276 = xor i32 %275, 1
  %277 = sub nsw i32 0, %276
  %278 = and i32 %272, %277
  %279 = icmp sgt i32 %278, 1022
  %280 = and i32 %278, 1023
  %281 = lshr i32 %273, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %273, %283
  %285 = icmp sgt i32 %284, 1022
  %286 = lshr i32 %274, 31
  %287 = xor i32 %286, 1
  %288 = sub nsw i32 0, %287
  %289 = and i32 %274, %288
  %290 = icmp sgt i32 %289, 1022
  %291 = shl nsw i32 %284, 10
  %292 = and i32 %291, 1047552
  %293 = select i1 %285, i32 1047552, i32 %292
  %294 = shl i32 %289, 20
  %295 = select i1 %290, i32 1072693248, i32 %294
  %296 = or i32 %280, -1073741824
  %297 = select i1 %279, i32 -1073740801, i32 %296
  %298 = or i32 %293, %295
  %299 = or i32 %298, %297
  %300 = bitcast i8* %238 to i32*
  store i32 %299, i32* %300, align 4
  %301 = getelementptr inbounds i8, i8* %236, i64 1
  %302 = load i8, i8* %301, align 1
  %303 = load i8, i8* %237, align 1
  %304 = load i8, i8* %239, align 1
  %305 = load i8, i8* %10, align 2
  %306 = zext i8 %305 to i32
  %307 = load i8, i8* %11, align 2
  %308 = zext i8 %307 to i32
  %309 = load i8, i8* %12, align 1
  %310 = zext i8 %309 to i32
  %311 = load i8, i8* %13, align 1
  %312 = zext i8 %311 to i32
  %313 = load i16, i16* %14, align 2
  %314 = sext i16 %313 to i32
  %315 = load i16, i16* %15, align 2
  %316 = sext i16 %315 to i32
  %317 = zext i8 %302 to i32
  %318 = mul nuw nsw i32 %317, 257
  %319 = mul i32 %318, %314
  %320 = lshr i32 %319, 16
  %321 = add nsw i32 %320, %316
  %322 = xor i8 %303, -128
  %323 = xor i8 %304, -128
  %324 = sext i8 %322 to i32
  %325 = mul nsw i32 %306, %324
  %326 = add nsw i32 %321, %325
  %327 = sext i8 %323 to i32
  %328 = mul nsw i32 %308, %324
  %329 = mul nsw i32 %310, %327
  %330 = add nsw i32 %329, %328
  %331 = sub nsw i32 %321, %330
  %332 = mul nsw i32 %312, %327
  %333 = add nsw i32 %321, %332
  %334 = getelementptr inbounds i8, i8* %238, i64 4
  %335 = ashr i32 %326, 4
  %336 = ashr i32 %331, 4
  %337 = ashr i32 %333, 4
  %338 = lshr i32 %335, 31
  %339 = xor i32 %338, 1
  %340 = sub nsw i32 0, %339
  %341 = and i32 %335, %340
  %342 = icmp sgt i32 %341, 1022
  %343 = and i32 %341, 1023
  %344 = lshr i32 %336, 31
  %345 = xor i32 %344, 1
  %346 = sub nsw i32 0, %345
  %347 = and i32 %336, %346
  %348 = icmp sgt i32 %347, 1022
  %349 = lshr i32 %337, 31
  %350 = xor i32 %349, 1
  %351 = sub nsw i32 0, %350
  %352 = and i32 %337, %351
  %353 = icmp sgt i32 %352, 1022
  %354 = shl nsw i32 %347, 10
  %355 = and i32 %354, 1047552
  %356 = select i1 %348, i32 1047552, i32 %355
  %357 = shl i32 %352, 20
  %358 = select i1 %353, i32 1072693248, i32 %357
  %359 = or i32 %343, -1073741824
  %360 = select i1 %342, i32 -1073740801, i32 %359
  %361 = or i32 %356, %358
  %362 = or i32 %361, %360
  %363 = bitcast i8* %334 to i32*
  store i32 %362, i32* %363, align 4
  %364 = getelementptr inbounds i8, i8* %236, i64 2
  %365 = getelementptr inbounds i8, i8* %237, i64 1
  %366 = getelementptr inbounds i8, i8* %239, i64 1
  %367 = getelementptr inbounds i8, i8* %238, i64 8
  %368 = add nuw nsw i32 %235, 2
  %369 = icmp slt i32 %368, %7
  br i1 %369, label %234, label %370, !llvm.loop !381

370:                                              ; preds = %234, %226, %6
  %371 = phi i8* [ %2, %6 ], [ %63, %226 ], [ %366, %234 ]
  %372 = phi i8* [ %3, %6 ], [ %62, %226 ], [ %367, %234 ]
  %373 = phi i8* [ %1, %6 ], [ %60, %226 ], [ %365, %234 ]
  %374 = phi i8* [ %0, %6 ], [ %59, %226 ], [ %364, %234 ]
  %375 = and i32 %5, 1
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %445, label %377

377:                                              ; preds = %370
  %378 = load i8, i8* %374, align 1
  %379 = load i8, i8* %373, align 1
  %380 = load i8, i8* %371, align 1
  %381 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %382 = load i8, i8* %381, align 2
  %383 = zext i8 %382 to i32
  %384 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %385 = load i8, i8* %384, align 2
  %386 = zext i8 %385 to i32
  %387 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i32
  %390 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i32
  %393 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %394 = load i16, i16* %393, align 2
  %395 = sext i16 %394 to i32
  %396 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %397 = load i16, i16* %396, align 2
  %398 = sext i16 %397 to i32
  %399 = zext i8 %378 to i32
  %400 = mul nuw nsw i32 %399, 257
  %401 = mul i32 %400, %395
  %402 = lshr i32 %401, 16
  %403 = add nsw i32 %402, %398
  %404 = xor i8 %379, -128
  %405 = xor i8 %380, -128
  %406 = sext i8 %404 to i32
  %407 = mul nsw i32 %383, %406
  %408 = add nsw i32 %403, %407
  %409 = sext i8 %405 to i32
  %410 = mul nsw i32 %386, %406
  %411 = mul nsw i32 %389, %409
  %412 = add nsw i32 %411, %410
  %413 = sub nsw i32 %403, %412
  %414 = mul nsw i32 %392, %409
  %415 = add nsw i32 %403, %414
  %416 = ashr i32 %408, 4
  %417 = ashr i32 %413, 4
  %418 = ashr i32 %415, 4
  %419 = lshr i32 %416, 31
  %420 = xor i32 %419, 1
  %421 = sub nsw i32 0, %420
  %422 = and i32 %416, %421
  %423 = icmp sgt i32 %422, 1022
  %424 = and i32 %422, 1023
  %425 = lshr i32 %417, 31
  %426 = xor i32 %425, 1
  %427 = sub nsw i32 0, %426
  %428 = and i32 %417, %427
  %429 = icmp sgt i32 %428, 1022
  %430 = lshr i32 %418, 31
  %431 = xor i32 %430, 1
  %432 = sub nsw i32 0, %431
  %433 = and i32 %418, %432
  %434 = icmp sgt i32 %433, 1022
  %435 = shl nsw i32 %428, 10
  %436 = and i32 %435, 1047552
  %437 = select i1 %429, i32 1047552, i32 %436
  %438 = shl i32 %433, 20
  %439 = select i1 %434, i32 1072693248, i32 %438
  %440 = or i32 %424, -1073741824
  %441 = select i1 %423, i32 -1073740801, i32 %440
  %442 = or i32 %437, %439
  %443 = or i32 %442, %441
  %444 = bitcast i8* %372 to i32*
  store i32 %443, i32* %444, align 4
  br label %445

445:                                              ; preds = %370, %377
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I444AlphaToARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %233

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %16 = add i32 %6, -1
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %18, 8
  br i1 %19, label %152, label %20

20:                                               ; preds = %9
  %21 = add i32 %6, -1
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 2
  %24 = add nuw nsw i64 %23, 4
  %25 = getelementptr i8, i8* %4, i64 %24
  %26 = add nuw nsw i64 %22, 1
  %27 = getelementptr i8, i8* %0, i64 %26
  %28 = getelementptr i8, i8* %1, i64 %26
  %29 = getelementptr i8, i8* %2, i64 %26
  %30 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %31 = bitcast i16* %30 to i8*
  %32 = getelementptr i8, i8* %31, i64 1
  %33 = getelementptr i8, i8* %3, i64 %26
  %34 = icmp ugt i8* %27, %4
  %35 = icmp ugt i8* %25, %0
  %36 = and i1 %34, %35
  %37 = icmp ugt i8* %28, %4
  %38 = icmp ugt i8* %25, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  %41 = icmp ugt i8* %29, %4
  %42 = icmp ugt i8* %25, %2
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = bitcast i16* %15 to i8*
  %46 = icmp ugt i8* %32, %4
  %47 = icmp ugt i8* %25, %45
  %48 = and i1 %46, %47
  %49 = or i1 %44, %48
  %50 = icmp ugt i8* %33, %4
  %51 = icmp ugt i8* %25, %3
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  br i1 %53, label %152, label %54

54:                                               ; preds = %20
  %55 = and i64 %18, 8589934584
  %56 = trunc i64 %55 to i32
  %57 = getelementptr i8, i8* %0, i64 %55
  %58 = getelementptr i8, i8* %1, i64 %55
  %59 = shl nuw nsw i64 %55, 2
  %60 = getelementptr i8, i8* %4, i64 %59
  %61 = getelementptr i8, i8* %3, i64 %55
  %62 = getelementptr i8, i8* %2, i64 %55
  br label %63

63:                                               ; preds = %63, %54
  %64 = phi i64 [ 0, %54 ], [ %148, %63 ]
  %65 = getelementptr i8, i8* %0, i64 %64
  %66 = getelementptr i8, i8* %1, i64 %64
  %67 = shl i64 %64, 2
  %68 = getelementptr i8, i8* %3, i64 %64
  %69 = getelementptr i8, i8* %2, i64 %64
  %70 = bitcast i8* %65 to <8 x i8>*
  %71 = load <8 x i8>, <8 x i8>* %70, align 1, !alias.scope !382
  %72 = bitcast i8* %66 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1, !alias.scope !385
  %74 = bitcast i8* %69 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !387
  %76 = load i8, i8* %10, align 2, !alias.scope !389
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %11, align 2, !alias.scope !389
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i8, i8* %12, align 1, !alias.scope !389
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i8, i8* %13, align 1, !alias.scope !389
  %89 = insertelement <8 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <8 x i8> %89, <8 x i8> undef, <8 x i32> zeroinitializer
  %91 = zext <8 x i8> %90 to <8 x i32>
  %92 = load i16, i16* %14, align 2, !alias.scope !389
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = load i16, i16* %15, align 2, !alias.scope !389
  %97 = insertelement <8 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <8 x i16> %97, <8 x i16> undef, <8 x i32> zeroinitializer
  %99 = sext <8 x i16> %98 to <8 x i32>
  %100 = zext <8 x i8> %71 to <8 x i32>
  %101 = mul nuw nsw <8 x i32> %100, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %102 = mul <8 x i32> %101, %95
  %103 = lshr <8 x i32> %102, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %104 = add nsw <8 x i32> %103, %99
  %105 = xor <8 x i8> %73, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %106 = xor <8 x i8> %75, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %107 = sext <8 x i8> %105 to <8 x i32>
  %108 = mul nsw <8 x i32> %79, %107
  %109 = add nsw <8 x i32> %104, %108
  %110 = sext <8 x i8> %106 to <8 x i32>
  %111 = mul nsw <8 x i32> %83, %107
  %112 = mul nsw <8 x i32> %87, %110
  %113 = add nsw <8 x i32> %112, %111
  %114 = sub nsw <8 x i32> %104, %113
  %115 = mul nsw <8 x i32> %91, %110
  %116 = add nsw <8 x i32> %104, %115
  %117 = ashr <8 x i32> %109, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %118 = lshr <8 x i32> %117, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %119 = xor <8 x i32> %118, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %120 = sub nsw <8 x i32> zeroinitializer, %119
  %121 = and <8 x i32> %117, %120
  %122 = icmp slt <8 x i32> %121, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %123 = select <8 x i1> %122, <8 x i32> %121, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %124 = trunc <8 x i32> %123 to <8 x i8>
  %125 = ashr <8 x i32> %114, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = lshr <8 x i32> %125, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %127 = xor <8 x i32> %126, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = sub nsw <8 x i32> zeroinitializer, %127
  %129 = and <8 x i32> %125, %128
  %130 = icmp slt <8 x i32> %129, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = select <8 x i1> %130, <8 x i32> %129, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = trunc <8 x i32> %131 to <8 x i8>
  %133 = ashr <8 x i32> %116, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %134 = lshr <8 x i32> %133, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %135 = xor <8 x i32> %134, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %136 = sub nsw <8 x i32> zeroinitializer, %135
  %137 = and <8 x i32> %133, %136
  %138 = icmp slt <8 x i32> %137, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %139 = select <8 x i1> %138, <8 x i32> %137, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %140 = trunc <8 x i32> %139 to <8 x i8>
  %141 = bitcast i8* %68 to <8 x i8>*
  %142 = load <8 x i8>, <8 x i8>* %141, align 1, !alias.scope !391
  %143 = getelementptr inbounds i8, i8* %4, i64 %67
  %144 = bitcast i8* %143 to <32 x i8>*
  %145 = shufflevector <8 x i8> %124, <8 x i8> %132, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %146 = shufflevector <8 x i8> %140, <8 x i8> %142, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %147 = shufflevector <16 x i8> %145, <16 x i8> %146, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %147, <32 x i8>* %144, align 1
  %148 = add i64 %64, 8
  %149 = icmp eq i64 %148, %55
  br i1 %149, label %150, label %63, !llvm.loop !393

150:                                              ; preds = %63
  %151 = icmp eq i64 %18, %55
  br i1 %151, label %233, label %152

152:                                              ; preds = %150, %20, %9
  %153 = phi i32 [ 0, %20 ], [ 0, %9 ], [ %56, %150 ]
  %154 = phi i8* [ %0, %20 ], [ %0, %9 ], [ %57, %150 ]
  %155 = phi i8* [ %1, %20 ], [ %1, %9 ], [ %58, %150 ]
  %156 = phi i8* [ %4, %20 ], [ %4, %9 ], [ %60, %150 ]
  %157 = phi i8* [ %3, %20 ], [ %3, %9 ], [ %61, %150 ]
  %158 = phi i8* [ %2, %20 ], [ %2, %9 ], [ %62, %150 ]
  br label %159

159:                                              ; preds = %152, %159
  %160 = phi i32 [ %231, %159 ], [ %153, %152 ]
  %161 = phi i8* [ %226, %159 ], [ %154, %152 ]
  %162 = phi i8* [ %227, %159 ], [ %155, %152 ]
  %163 = phi i8* [ %230, %159 ], [ %156, %152 ]
  %164 = phi i8* [ %229, %159 ], [ %157, %152 ]
  %165 = phi i8* [ %228, %159 ], [ %158, %152 ]
  %166 = load i8, i8* %161, align 1
  %167 = load i8, i8* %162, align 1
  %168 = load i8, i8* %165, align 1
  %169 = getelementptr inbounds i8, i8* %163, i64 1
  %170 = getelementptr inbounds i8, i8* %163, i64 2
  %171 = load i8, i8* %10, align 2
  %172 = zext i8 %171 to i32
  %173 = load i8, i8* %11, align 2
  %174 = zext i8 %173 to i32
  %175 = load i8, i8* %12, align 1
  %176 = zext i8 %175 to i32
  %177 = load i8, i8* %13, align 1
  %178 = zext i8 %177 to i32
  %179 = load i16, i16* %14, align 2
  %180 = sext i16 %179 to i32
  %181 = load i16, i16* %15, align 2
  %182 = sext i16 %181 to i32
  %183 = zext i8 %166 to i32
  %184 = mul nuw nsw i32 %183, 257
  %185 = mul i32 %184, %180
  %186 = lshr i32 %185, 16
  %187 = add nsw i32 %186, %182
  %188 = xor i8 %167, -128
  %189 = xor i8 %168, -128
  %190 = sext i8 %188 to i32
  %191 = mul nsw i32 %172, %190
  %192 = add nsw i32 %187, %191
  %193 = sext i8 %189 to i32
  %194 = mul nsw i32 %174, %190
  %195 = mul nsw i32 %176, %193
  %196 = add nsw i32 %195, %194
  %197 = sub nsw i32 %187, %196
  %198 = mul nsw i32 %178, %193
  %199 = add nsw i32 %187, %198
  %200 = ashr i32 %192, 6
  %201 = lshr i32 %200, 31
  %202 = xor i32 %201, 1
  %203 = sub nsw i32 0, %202
  %204 = and i32 %200, %203
  %205 = icmp slt i32 %204, 255
  %206 = select i1 %205, i32 %204, i32 255
  %207 = trunc i32 %206 to i8
  store i8 %207, i8* %163, align 1
  %208 = ashr i32 %197, 6
  %209 = lshr i32 %208, 31
  %210 = xor i32 %209, 1
  %211 = sub nsw i32 0, %210
  %212 = and i32 %208, %211
  %213 = icmp slt i32 %212, 255
  %214 = select i1 %213, i32 %212, i32 255
  %215 = trunc i32 %214 to i8
  store i8 %215, i8* %169, align 1
  %216 = ashr i32 %199, 6
  %217 = lshr i32 %216, 31
  %218 = xor i32 %217, 1
  %219 = sub nsw i32 0, %218
  %220 = and i32 %216, %219
  %221 = icmp slt i32 %220, 255
  %222 = select i1 %221, i32 %220, i32 255
  %223 = trunc i32 %222 to i8
  store i8 %223, i8* %170, align 1
  %224 = load i8, i8* %164, align 1
  %225 = getelementptr inbounds i8, i8* %163, i64 3
  store i8 %224, i8* %225, align 1
  %226 = getelementptr inbounds i8, i8* %161, i64 1
  %227 = getelementptr inbounds i8, i8* %162, i64 1
  %228 = getelementptr inbounds i8, i8* %165, i64 1
  %229 = getelementptr inbounds i8, i8* %164, i64 1
  %230 = getelementptr inbounds i8, i8* %163, i64 4
  %231 = add nuw nsw i32 %160, 1
  %232 = icmp eq i32 %231, %6
  br i1 %232, label %233, label %159, !llvm.loop !394

233:                                              ; preds = %159, %150, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I422AlphaToARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %8 = add nsw i32 %6, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %384

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 0, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 2, i64 1
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 3, i64 0
  %16 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %17 = add i32 %6, -2
  %18 = lshr i32 %17, 1
  %19 = add nuw i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = icmp ult i32 %19, 8
  br i1 %21, label %240, label %22

22:                                               ; preds = %10
  %23 = add i32 %6, -2
  %24 = lshr i32 %23, 1
  %25 = zext i32 %24 to i64
  %26 = shl nuw nsw i64 %25, 3
  %27 = add nuw nsw i64 %26, 8
  %28 = getelementptr i8, i8* %4, i64 %27
  %29 = and i32 %23, -2
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %30, 2
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = add nuw nsw i64 %25, 1
  %34 = getelementptr i8, i8* %1, i64 %33
  %35 = getelementptr i8, i8* %2, i64 %33
  %36 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %37 = bitcast i16* %36 to i8*
  %38 = getelementptr i8, i8* %37, i64 1
  %39 = getelementptr i8, i8* %3, i64 %31
  %40 = icmp ugt i8* %32, %4
  %41 = icmp ugt i8* %28, %0
  %42 = and i1 %40, %41
  %43 = icmp ugt i8* %34, %4
  %44 = icmp ugt i8* %28, %1
  %45 = and i1 %43, %44
  %46 = or i1 %42, %45
  %47 = icmp ugt i8* %35, %4
  %48 = icmp ugt i8* %28, %2
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  %51 = bitcast i16* %16 to i8*
  %52 = icmp ugt i8* %38, %4
  %53 = icmp ugt i8* %28, %51
  %54 = and i1 %52, %53
  %55 = or i1 %50, %54
  %56 = icmp ugt i8* %39, %4
  %57 = icmp ugt i8* %28, %3
  %58 = and i1 %56, %57
  %59 = or i1 %55, %58
  br i1 %59, label %240, label %60

60:                                               ; preds = %22
  %61 = and i64 %20, 4294967288
  %62 = trunc i64 %61 to i32
  %63 = shl i32 %62, 1
  %64 = shl nuw nsw i64 %61, 1
  %65 = getelementptr i8, i8* %0, i64 %64
  %66 = getelementptr i8, i8* %1, i64 %61
  %67 = shl nuw nsw i64 %61, 3
  %68 = getelementptr i8, i8* %4, i64 %67
  %69 = shl nuw nsw i64 %61, 1
  %70 = getelementptr i8, i8* %3, i64 %69
  %71 = getelementptr i8, i8* %2, i64 %61
  br label %72

72:                                               ; preds = %72, %60
  %73 = phi i64 [ 0, %60 ], [ %236, %72 ]
  %74 = shl i64 %73, 1
  %75 = getelementptr i8, i8* %0, i64 %74
  %76 = getelementptr i8, i8* %1, i64 %73
  %77 = shl i64 %73, 3
  %78 = shl i64 %73, 1
  %79 = getelementptr i8, i8* %3, i64 %78
  %80 = getelementptr i8, i8* %2, i64 %73
  %81 = bitcast i8* %75 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1
  %83 = shufflevector <16 x i8> %82, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %84 = shufflevector <16 x i8> %82, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %85 = bitcast i8* %76 to <8 x i8>*
  %86 = load <8 x i8>, <8 x i8>* %85, align 1, !alias.scope !395
  %87 = bitcast i8* %80 to <8 x i8>*
  %88 = load <8 x i8>, <8 x i8>* %87, align 1, !alias.scope !398
  %89 = load i8, i8* %11, align 2, !alias.scope !400
  %90 = insertelement <8 x i8> undef, i8 %89, i32 0
  %91 = shufflevector <8 x i8> %90, <8 x i8> undef, <8 x i32> zeroinitializer
  %92 = zext <8 x i8> %91 to <8 x i32>
  %93 = load i8, i8* %12, align 2, !alias.scope !400
  %94 = insertelement <8 x i8> undef, i8 %93, i32 0
  %95 = shufflevector <8 x i8> %94, <8 x i8> undef, <8 x i32> zeroinitializer
  %96 = zext <8 x i8> %95 to <8 x i32>
  %97 = load i8, i8* %13, align 1, !alias.scope !400
  %98 = insertelement <8 x i8> undef, i8 %97, i32 0
  %99 = shufflevector <8 x i8> %98, <8 x i8> undef, <8 x i32> zeroinitializer
  %100 = zext <8 x i8> %99 to <8 x i32>
  %101 = load i8, i8* %14, align 1, !alias.scope !400
  %102 = insertelement <8 x i8> undef, i8 %101, i32 0
  %103 = shufflevector <8 x i8> %102, <8 x i8> undef, <8 x i32> zeroinitializer
  %104 = zext <8 x i8> %103 to <8 x i32>
  %105 = load i16, i16* %15, align 2, !alias.scope !400
  %106 = insertelement <8 x i16> undef, i16 %105, i32 0
  %107 = shufflevector <8 x i16> %106, <8 x i16> undef, <8 x i32> zeroinitializer
  %108 = sext <8 x i16> %107 to <8 x i32>
  %109 = load i16, i16* %16, align 2, !alias.scope !400
  %110 = insertelement <8 x i16> undef, i16 %109, i32 0
  %111 = shufflevector <8 x i16> %110, <8 x i16> undef, <8 x i32> zeroinitializer
  %112 = sext <8 x i16> %111 to <8 x i32>
  %113 = zext <8 x i8> %83 to <8 x i32>
  %114 = mul nuw nsw <8 x i32> %113, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %115 = mul <8 x i32> %114, %108
  %116 = lshr <8 x i32> %115, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %117 = add nsw <8 x i32> %116, %112
  %118 = xor <8 x i8> %86, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %119 = xor <8 x i8> %88, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %120 = sext <8 x i8> %118 to <8 x i32>
  %121 = mul nsw <8 x i32> %92, %120
  %122 = add nsw <8 x i32> %117, %121
  %123 = sext <8 x i8> %119 to <8 x i32>
  %124 = mul nsw <8 x i32> %96, %120
  %125 = mul nsw <8 x i32> %100, %123
  %126 = add nsw <8 x i32> %125, %124
  %127 = sub nsw <8 x i32> %117, %126
  %128 = mul nsw <8 x i32> %104, %123
  %129 = add nsw <8 x i32> %117, %128
  %130 = ashr <8 x i32> %122, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %131 = lshr <8 x i32> %130, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %132 = xor <8 x i32> %131, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %133 = sub nsw <8 x i32> zeroinitializer, %132
  %134 = and <8 x i32> %130, %133
  %135 = icmp slt <8 x i32> %134, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = select <8 x i1> %135, <8 x i32> %134, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %137 = trunc <8 x i32> %136 to <8 x i8>
  %138 = ashr <8 x i32> %127, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %139 = lshr <8 x i32> %138, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %140 = xor <8 x i32> %139, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %141 = sub nsw <8 x i32> zeroinitializer, %140
  %142 = and <8 x i32> %138, %141
  %143 = icmp slt <8 x i32> %142, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %144 = select <8 x i1> %143, <8 x i32> %142, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %145 = trunc <8 x i32> %144 to <8 x i8>
  %146 = ashr <8 x i32> %129, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %147 = lshr <8 x i32> %146, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %148 = xor <8 x i32> %147, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %149 = sub nsw <8 x i32> zeroinitializer, %148
  %150 = and <8 x i32> %146, %149
  %151 = icmp slt <8 x i32> %150, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %152 = select <8 x i1> %151, <8 x i32> %150, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %153 = trunc <8 x i32> %152 to <8 x i8>
  %154 = bitcast i8* %79 to <16 x i8>*
  %155 = load <16 x i8>, <16 x i8>* %154, align 1
  %156 = shufflevector <16 x i8> %155, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %157 = shufflevector <16 x i8> %155, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %158 = bitcast i8* %76 to <8 x i8>*
  %159 = load <8 x i8>, <8 x i8>* %158, align 1, !alias.scope !395
  %160 = bitcast i8* %80 to <8 x i8>*
  %161 = load <8 x i8>, <8 x i8>* %160, align 1, !alias.scope !398
  %162 = load i8, i8* %11, align 2, !alias.scope !400
  %163 = insertelement <8 x i8> undef, i8 %162, i32 0
  %164 = shufflevector <8 x i8> %163, <8 x i8> undef, <8 x i32> zeroinitializer
  %165 = zext <8 x i8> %164 to <8 x i32>
  %166 = load i8, i8* %12, align 2, !alias.scope !400
  %167 = insertelement <8 x i8> undef, i8 %166, i32 0
  %168 = shufflevector <8 x i8> %167, <8 x i8> undef, <8 x i32> zeroinitializer
  %169 = zext <8 x i8> %168 to <8 x i32>
  %170 = load i8, i8* %13, align 1, !alias.scope !400
  %171 = insertelement <8 x i8> undef, i8 %170, i32 0
  %172 = shufflevector <8 x i8> %171, <8 x i8> undef, <8 x i32> zeroinitializer
  %173 = zext <8 x i8> %172 to <8 x i32>
  %174 = load i8, i8* %14, align 1, !alias.scope !400
  %175 = insertelement <8 x i8> undef, i8 %174, i32 0
  %176 = shufflevector <8 x i8> %175, <8 x i8> undef, <8 x i32> zeroinitializer
  %177 = zext <8 x i8> %176 to <8 x i32>
  %178 = load i16, i16* %15, align 2, !alias.scope !400
  %179 = insertelement <8 x i16> undef, i16 %178, i32 0
  %180 = shufflevector <8 x i16> %179, <8 x i16> undef, <8 x i32> zeroinitializer
  %181 = sext <8 x i16> %180 to <8 x i32>
  %182 = load i16, i16* %16, align 2, !alias.scope !400
  %183 = insertelement <8 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <8 x i16> %183, <8 x i16> undef, <8 x i32> zeroinitializer
  %185 = sext <8 x i16> %184 to <8 x i32>
  %186 = zext <8 x i8> %84 to <8 x i32>
  %187 = mul nuw nsw <8 x i32> %186, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %188 = mul <8 x i32> %187, %181
  %189 = lshr <8 x i32> %188, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %190 = add nsw <8 x i32> %189, %185
  %191 = xor <8 x i8> %159, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %192 = xor <8 x i8> %161, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %193 = sext <8 x i8> %191 to <8 x i32>
  %194 = mul nsw <8 x i32> %165, %193
  %195 = add nsw <8 x i32> %190, %194
  %196 = sext <8 x i8> %192 to <8 x i32>
  %197 = mul nsw <8 x i32> %169, %193
  %198 = mul nsw <8 x i32> %173, %196
  %199 = add nsw <8 x i32> %198, %197
  %200 = sub nsw <8 x i32> %190, %199
  %201 = mul nsw <8 x i32> %177, %196
  %202 = add nsw <8 x i32> %190, %201
  %203 = ashr <8 x i32> %195, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %204 = lshr <8 x i32> %203, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %205 = xor <8 x i32> %204, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %206 = sub nsw <8 x i32> zeroinitializer, %205
  %207 = and <8 x i32> %203, %206
  %208 = icmp slt <8 x i32> %207, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %209 = select <8 x i1> %208, <8 x i32> %207, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %210 = trunc <8 x i32> %209 to <8 x i8>
  %211 = ashr <8 x i32> %200, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %212 = lshr <8 x i32> %211, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %213 = xor <8 x i32> %212, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %214 = sub nsw <8 x i32> zeroinitializer, %213
  %215 = and <8 x i32> %211, %214
  %216 = icmp slt <8 x i32> %215, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %217 = select <8 x i1> %216, <8 x i32> %215, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %218 = trunc <8 x i32> %217 to <8 x i8>
  %219 = ashr <8 x i32> %202, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %220 = lshr <8 x i32> %219, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %221 = xor <8 x i32> %220, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %222 = sub nsw <8 x i32> zeroinitializer, %221
  %223 = and <8 x i32> %219, %222
  %224 = icmp slt <8 x i32> %223, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %225 = select <8 x i1> %224, <8 x i32> %223, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %226 = trunc <8 x i32> %225 to <8 x i8>
  %227 = getelementptr inbounds i8, i8* %4, i64 %77
  %228 = bitcast i8* %227 to <64 x i8>*
  %229 = shufflevector <8 x i8> %137, <8 x i8> %145, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %230 = shufflevector <8 x i8> %153, <8 x i8> %156, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %231 = shufflevector <8 x i8> %210, <8 x i8> %218, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %232 = shufflevector <8 x i8> %226, <8 x i8> %157, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %233 = shufflevector <16 x i8> %229, <16 x i8> %230, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %234 = shufflevector <16 x i8> %231, <16 x i8> %232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %235 = shufflevector <32 x i8> %233, <32 x i8> %234, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %235, <64 x i8>* %228, align 1
  %236 = add i64 %73, 8
  %237 = icmp eq i64 %236, %61
  br i1 %237, label %238, label %72, !llvm.loop !402

238:                                              ; preds = %72
  %239 = icmp eq i64 %61, %20
  br i1 %239, label %384, label %240

240:                                              ; preds = %238, %22, %10
  %241 = phi i32 [ 0, %22 ], [ 0, %10 ], [ %63, %238 ]
  %242 = phi i8* [ %0, %22 ], [ %0, %10 ], [ %65, %238 ]
  %243 = phi i8* [ %1, %22 ], [ %1, %10 ], [ %66, %238 ]
  %244 = phi i8* [ %4, %22 ], [ %4, %10 ], [ %68, %238 ]
  %245 = phi i8* [ %3, %22 ], [ %3, %10 ], [ %70, %238 ]
  %246 = phi i8* [ %2, %22 ], [ %2, %10 ], [ %71, %238 ]
  br label %247

247:                                              ; preds = %240, %247
  %248 = phi i32 [ %382, %247 ], [ %241, %240 ]
  %249 = phi i8* [ %377, %247 ], [ %242, %240 ]
  %250 = phi i8* [ %378, %247 ], [ %243, %240 ]
  %251 = phi i8* [ %381, %247 ], [ %244, %240 ]
  %252 = phi i8* [ %380, %247 ], [ %245, %240 ]
  %253 = phi i8* [ %379, %247 ], [ %246, %240 ]
  %254 = load i8, i8* %249, align 1
  %255 = load i8, i8* %250, align 1
  %256 = load i8, i8* %253, align 1
  %257 = getelementptr inbounds i8, i8* %251, i64 1
  %258 = getelementptr inbounds i8, i8* %251, i64 2
  %259 = load i8, i8* %11, align 2
  %260 = zext i8 %259 to i32
  %261 = load i8, i8* %12, align 2
  %262 = zext i8 %261 to i32
  %263 = load i8, i8* %13, align 1
  %264 = zext i8 %263 to i32
  %265 = load i8, i8* %14, align 1
  %266 = zext i8 %265 to i32
  %267 = load i16, i16* %15, align 2
  %268 = sext i16 %267 to i32
  %269 = load i16, i16* %16, align 2
  %270 = sext i16 %269 to i32
  %271 = zext i8 %254 to i32
  %272 = mul nuw nsw i32 %271, 257
  %273 = mul i32 %272, %268
  %274 = lshr i32 %273, 16
  %275 = add nsw i32 %274, %270
  %276 = xor i8 %255, -128
  %277 = xor i8 %256, -128
  %278 = sext i8 %276 to i32
  %279 = mul nsw i32 %260, %278
  %280 = add nsw i32 %275, %279
  %281 = sext i8 %277 to i32
  %282 = mul nsw i32 %262, %278
  %283 = mul nsw i32 %264, %281
  %284 = add nsw i32 %283, %282
  %285 = sub nsw i32 %275, %284
  %286 = mul nsw i32 %266, %281
  %287 = add nsw i32 %275, %286
  %288 = ashr i32 %280, 6
  %289 = lshr i32 %288, 31
  %290 = xor i32 %289, 1
  %291 = sub nsw i32 0, %290
  %292 = and i32 %288, %291
  %293 = icmp slt i32 %292, 255
  %294 = select i1 %293, i32 %292, i32 255
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %251, align 1
  %296 = ashr i32 %285, 6
  %297 = lshr i32 %296, 31
  %298 = xor i32 %297, 1
  %299 = sub nsw i32 0, %298
  %300 = and i32 %296, %299
  %301 = icmp slt i32 %300, 255
  %302 = select i1 %301, i32 %300, i32 255
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %257, align 1
  %304 = ashr i32 %287, 6
  %305 = lshr i32 %304, 31
  %306 = xor i32 %305, 1
  %307 = sub nsw i32 0, %306
  %308 = and i32 %304, %307
  %309 = icmp slt i32 %308, 255
  %310 = select i1 %309, i32 %308, i32 255
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %258, align 1
  %312 = load i8, i8* %252, align 1
  %313 = getelementptr inbounds i8, i8* %251, i64 3
  store i8 %312, i8* %313, align 1
  %314 = getelementptr inbounds i8, i8* %249, i64 1
  %315 = load i8, i8* %314, align 1
  %316 = load i8, i8* %250, align 1
  %317 = load i8, i8* %253, align 1
  %318 = getelementptr inbounds i8, i8* %251, i64 4
  %319 = getelementptr inbounds i8, i8* %251, i64 5
  %320 = getelementptr inbounds i8, i8* %251, i64 6
  %321 = load i8, i8* %11, align 2
  %322 = zext i8 %321 to i32
  %323 = load i8, i8* %12, align 2
  %324 = zext i8 %323 to i32
  %325 = load i8, i8* %13, align 1
  %326 = zext i8 %325 to i32
  %327 = load i8, i8* %14, align 1
  %328 = zext i8 %327 to i32
  %329 = load i16, i16* %15, align 2
  %330 = sext i16 %329 to i32
  %331 = load i16, i16* %16, align 2
  %332 = sext i16 %331 to i32
  %333 = zext i8 %315 to i32
  %334 = mul nuw nsw i32 %333, 257
  %335 = mul i32 %334, %330
  %336 = lshr i32 %335, 16
  %337 = add nsw i32 %336, %332
  %338 = xor i8 %316, -128
  %339 = xor i8 %317, -128
  %340 = sext i8 %338 to i32
  %341 = mul nsw i32 %322, %340
  %342 = add nsw i32 %337, %341
  %343 = sext i8 %339 to i32
  %344 = mul nsw i32 %324, %340
  %345 = mul nsw i32 %326, %343
  %346 = add nsw i32 %345, %344
  %347 = sub nsw i32 %337, %346
  %348 = mul nsw i32 %328, %343
  %349 = add nsw i32 %337, %348
  %350 = ashr i32 %342, 6
  %351 = lshr i32 %350, 31
  %352 = xor i32 %351, 1
  %353 = sub nsw i32 0, %352
  %354 = and i32 %350, %353
  %355 = icmp slt i32 %354, 255
  %356 = select i1 %355, i32 %354, i32 255
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %318, align 1
  %358 = ashr i32 %347, 6
  %359 = lshr i32 %358, 31
  %360 = xor i32 %359, 1
  %361 = sub nsw i32 0, %360
  %362 = and i32 %358, %361
  %363 = icmp slt i32 %362, 255
  %364 = select i1 %363, i32 %362, i32 255
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %319, align 1
  %366 = ashr i32 %349, 6
  %367 = lshr i32 %366, 31
  %368 = xor i32 %367, 1
  %369 = sub nsw i32 0, %368
  %370 = and i32 %366, %369
  %371 = icmp slt i32 %370, 255
  %372 = select i1 %371, i32 %370, i32 255
  %373 = trunc i32 %372 to i8
  store i8 %373, i8* %320, align 1
  %374 = getelementptr inbounds i8, i8* %252, i64 1
  %375 = load i8, i8* %374, align 1
  %376 = getelementptr inbounds i8, i8* %251, i64 7
  store i8 %375, i8* %376, align 1
  %377 = getelementptr inbounds i8, i8* %249, i64 2
  %378 = getelementptr inbounds i8, i8* %250, i64 1
  %379 = getelementptr inbounds i8, i8* %253, i64 1
  %380 = getelementptr inbounds i8, i8* %252, i64 2
  %381 = getelementptr inbounds i8, i8* %251, i64 8
  %382 = add nuw nsw i32 %248, 2
  %383 = icmp slt i32 %382, %8
  br i1 %383, label %247, label %384, !llvm.loop !403

384:                                              ; preds = %247, %238, %7
  %385 = phi i8* [ %2, %7 ], [ %71, %238 ], [ %379, %247 ]
  %386 = phi i8* [ %3, %7 ], [ %70, %238 ], [ %380, %247 ]
  %387 = phi i8* [ %4, %7 ], [ %68, %238 ], [ %381, %247 ]
  %388 = phi i8* [ %1, %7 ], [ %66, %238 ], [ %378, %247 ]
  %389 = phi i8* [ %0, %7 ], [ %65, %238 ], [ %377, %247 ]
  %390 = and i32 %6, 1
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %459, label %392

392:                                              ; preds = %384
  %393 = load i8, i8* %389, align 1
  %394 = load i8, i8* %388, align 1
  %395 = load i8, i8* %385, align 1
  %396 = getelementptr inbounds i8, i8* %387, i64 1
  %397 = getelementptr inbounds i8, i8* %387, i64 2
  %398 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 0, i64 0
  %399 = load i8, i8* %398, align 2
  %400 = zext i8 %399 to i32
  %401 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 0
  %402 = load i8, i8* %401, align 2
  %403 = zext i8 %402 to i32
  %404 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 1, i64 1
  %405 = load i8, i8* %404, align 1
  %406 = zext i8 %405 to i32
  %407 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 2, i64 1
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 3, i64 0
  %411 = load i16, i16* %410, align 2
  %412 = sext i16 %411 to i32
  %413 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %5, i64 0, i32 4, i64 0
  %414 = load i16, i16* %413, align 2
  %415 = sext i16 %414 to i32
  %416 = zext i8 %393 to i32
  %417 = mul nuw nsw i32 %416, 257
  %418 = mul i32 %417, %412
  %419 = lshr i32 %418, 16
  %420 = add nsw i32 %419, %415
  %421 = xor i8 %394, -128
  %422 = xor i8 %395, -128
  %423 = sext i8 %421 to i32
  %424 = mul nsw i32 %400, %423
  %425 = add nsw i32 %420, %424
  %426 = sext i8 %422 to i32
  %427 = mul nsw i32 %403, %423
  %428 = mul nsw i32 %406, %426
  %429 = add nsw i32 %428, %427
  %430 = sub nsw i32 %420, %429
  %431 = mul nsw i32 %409, %426
  %432 = add nsw i32 %420, %431
  %433 = ashr i32 %425, 6
  %434 = lshr i32 %433, 31
  %435 = xor i32 %434, 1
  %436 = sub nsw i32 0, %435
  %437 = and i32 %433, %436
  %438 = icmp slt i32 %437, 255
  %439 = select i1 %438, i32 %437, i32 255
  %440 = trunc i32 %439 to i8
  store i8 %440, i8* %387, align 1
  %441 = ashr i32 %430, 6
  %442 = lshr i32 %441, 31
  %443 = xor i32 %442, 1
  %444 = sub nsw i32 0, %443
  %445 = and i32 %441, %444
  %446 = icmp slt i32 %445, 255
  %447 = select i1 %446, i32 %445, i32 255
  %448 = trunc i32 %447 to i8
  store i8 %448, i8* %396, align 1
  %449 = ashr i32 %432, 6
  %450 = lshr i32 %449, 31
  %451 = xor i32 %450, 1
  %452 = sub nsw i32 0, %451
  %453 = and i32 %449, %452
  %454 = icmp slt i32 %453, 255
  %455 = select i1 %454, i32 %453, i32 255
  %456 = trunc i32 %455 to i8
  store i8 %456, i8* %397, align 1
  %457 = load i8, i8* %386, align 1
  %458 = getelementptr inbounds i8, i8* %387, i64 3
  store i8 %457, i8* %458, align 1
  br label %459

459:                                              ; preds = %384, %392
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I422ToRGB24Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %360

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 8
  br i1 %20, label %224, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = mul nuw nsw i64 %24, 6
  %26 = add nuw nsw i64 %25, 6
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %224, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967288
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = mul nuw nsw i64 %55, 6
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %220, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = mul i64 %65, 6
  %70 = getelementptr i8, i8* %2, i64 %65
  %71 = bitcast i8* %67 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %75 = bitcast i8* %68 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !404
  %77 = bitcast i8* %70 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !407
  %79 = load i8, i8* %10, align 2, !alias.scope !409
  %80 = insertelement <8 x i8> undef, i8 %79, i32 0
  %81 = shufflevector <8 x i8> %80, <8 x i8> undef, <8 x i32> zeroinitializer
  %82 = zext <8 x i8> %81 to <8 x i32>
  %83 = load i8, i8* %11, align 2, !alias.scope !409
  %84 = insertelement <8 x i8> undef, i8 %83, i32 0
  %85 = shufflevector <8 x i8> %84, <8 x i8> undef, <8 x i32> zeroinitializer
  %86 = zext <8 x i8> %85 to <8 x i32>
  %87 = load i8, i8* %12, align 1, !alias.scope !409
  %88 = insertelement <8 x i8> undef, i8 %87, i32 0
  %89 = shufflevector <8 x i8> %88, <8 x i8> undef, <8 x i32> zeroinitializer
  %90 = zext <8 x i8> %89 to <8 x i32>
  %91 = load i8, i8* %13, align 1, !alias.scope !409
  %92 = insertelement <8 x i8> undef, i8 %91, i32 0
  %93 = shufflevector <8 x i8> %92, <8 x i8> undef, <8 x i32> zeroinitializer
  %94 = zext <8 x i8> %93 to <8 x i32>
  %95 = load i16, i16* %14, align 2, !alias.scope !409
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = load i16, i16* %15, align 2, !alias.scope !409
  %100 = insertelement <8 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> zeroinitializer
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = zext <8 x i8> %73 to <8 x i32>
  %104 = mul nuw nsw <8 x i32> %103, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %105 = mul <8 x i32> %104, %98
  %106 = lshr <8 x i32> %105, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %107 = add nsw <8 x i32> %106, %102
  %108 = xor <8 x i8> %76, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %109 = xor <8 x i8> %78, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = sext <8 x i8> %108 to <8 x i32>
  %111 = mul nsw <8 x i32> %82, %110
  %112 = add nsw <8 x i32> %107, %111
  %113 = sext <8 x i8> %109 to <8 x i32>
  %114 = mul nsw <8 x i32> %86, %110
  %115 = mul nsw <8 x i32> %90, %113
  %116 = add nsw <8 x i32> %115, %114
  %117 = sub nsw <8 x i32> %107, %116
  %118 = mul nsw <8 x i32> %94, %113
  %119 = add nsw <8 x i32> %107, %118
  %120 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %121 = lshr <8 x i32> %120, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %122 = xor <8 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %123 = sub nsw <8 x i32> zeroinitializer, %122
  %124 = and <8 x i32> %120, %123
  %125 = icmp slt <8 x i32> %124, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %126 = select <8 x i1> %125, <8 x i32> %124, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = ashr <8 x i32> %117, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <8 x i32> %128, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %130 = xor <8 x i32> %129, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <8 x i32> zeroinitializer, %130
  %132 = and <8 x i32> %128, %131
  %133 = icmp slt <8 x i32> %132, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %134 = select <8 x i1> %133, <8 x i32> %132, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = trunc <8 x i32> %134 to <8 x i8>
  %136 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = lshr <8 x i32> %136, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %138 = xor <8 x i32> %137, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %139 = sub nsw <8 x i32> zeroinitializer, %138
  %140 = and <8 x i32> %136, %139
  %141 = icmp slt <8 x i32> %140, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = select <8 x i1> %141, <8 x i32> %140, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %143 = trunc <8 x i32> %142 to <8 x i8>
  %144 = bitcast i8* %68 to <8 x i8>*
  %145 = load <8 x i8>, <8 x i8>* %144, align 1, !alias.scope !404
  %146 = bitcast i8* %70 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !407
  %148 = load i8, i8* %10, align 2, !alias.scope !409
  %149 = insertelement <8 x i8> undef, i8 %148, i32 0
  %150 = shufflevector <8 x i8> %149, <8 x i8> undef, <8 x i32> zeroinitializer
  %151 = zext <8 x i8> %150 to <8 x i32>
  %152 = load i8, i8* %11, align 2, !alias.scope !409
  %153 = insertelement <8 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <8 x i8> %153, <8 x i8> undef, <8 x i32> zeroinitializer
  %155 = zext <8 x i8> %154 to <8 x i32>
  %156 = load i8, i8* %12, align 1, !alias.scope !409
  %157 = insertelement <8 x i8> undef, i8 %156, i32 0
  %158 = shufflevector <8 x i8> %157, <8 x i8> undef, <8 x i32> zeroinitializer
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = load i8, i8* %13, align 1, !alias.scope !409
  %161 = insertelement <8 x i8> undef, i8 %160, i32 0
  %162 = shufflevector <8 x i8> %161, <8 x i8> undef, <8 x i32> zeroinitializer
  %163 = zext <8 x i8> %162 to <8 x i32>
  %164 = load i16, i16* %14, align 2, !alias.scope !409
  %165 = insertelement <8 x i16> undef, i16 %164, i32 0
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <8 x i32> zeroinitializer
  %167 = sext <8 x i16> %166 to <8 x i32>
  %168 = load i16, i16* %15, align 2, !alias.scope !409
  %169 = insertelement <8 x i16> undef, i16 %168, i32 0
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> zeroinitializer
  %171 = sext <8 x i16> %170 to <8 x i32>
  %172 = zext <8 x i8> %74 to <8 x i32>
  %173 = mul nuw nsw <8 x i32> %172, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %174 = mul <8 x i32> %173, %167
  %175 = lshr <8 x i32> %174, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %176 = add nsw <8 x i32> %175, %171
  %177 = xor <8 x i8> %145, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %178 = xor <8 x i8> %147, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %179 = sext <8 x i8> %177 to <8 x i32>
  %180 = mul nsw <8 x i32> %151, %179
  %181 = add nsw <8 x i32> %176, %180
  %182 = sext <8 x i8> %178 to <8 x i32>
  %183 = mul nsw <8 x i32> %155, %179
  %184 = mul nsw <8 x i32> %159, %182
  %185 = add nsw <8 x i32> %184, %183
  %186 = sub nsw <8 x i32> %176, %185
  %187 = mul nsw <8 x i32> %163, %182
  %188 = add nsw <8 x i32> %176, %187
  %189 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %190 = lshr <8 x i32> %189, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %191 = xor <8 x i32> %190, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %192 = sub nsw <8 x i32> zeroinitializer, %191
  %193 = and <8 x i32> %189, %192
  %194 = icmp slt <8 x i32> %193, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %195 = select <8 x i1> %194, <8 x i32> %193, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = trunc <8 x i32> %195 to <8 x i8>
  %197 = ashr <8 x i32> %186, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %198 = lshr <8 x i32> %197, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %199 = xor <8 x i32> %198, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %200 = sub nsw <8 x i32> zeroinitializer, %199
  %201 = and <8 x i32> %197, %200
  %202 = icmp slt <8 x i32> %201, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %203 = select <8 x i1> %202, <8 x i32> %201, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = trunc <8 x i32> %203 to <8 x i8>
  %205 = ashr <8 x i32> %188, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %206 = lshr <8 x i32> %205, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %207 = xor <8 x i32> %206, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %208 = sub nsw <8 x i32> zeroinitializer, %207
  %209 = and <8 x i32> %205, %208
  %210 = icmp slt <8 x i32> %209, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %211 = select <8 x i1> %210, <8 x i32> %209, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %212 = trunc <8 x i32> %211 to <8 x i8>
  %213 = getelementptr inbounds i8, i8* %3, i64 %69
  %214 = bitcast i8* %213 to <48 x i8>*
  %215 = shufflevector <8 x i8> %127, <8 x i8> %135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %216 = shufflevector <8 x i8> %143, <8 x i8> %196, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %217 = shufflevector <16 x i8> %215, <16 x i8> %216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %218 = shufflevector <8 x i8> %204, <8 x i8> %212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %219 = shufflevector <32 x i8> %217, <32 x i8> %218, <48 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47>
  store <48 x i8> %219, <48 x i8>* %214, align 1
  %220 = add i64 %65, 8
  %221 = icmp eq i64 %220, %55
  br i1 %221, label %222, label %64, !llvm.loop !411

222:                                              ; preds = %64
  %223 = icmp eq i64 %55, %19
  br i1 %223, label %360, label %224

224:                                              ; preds = %222, %21, %9
  %225 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %222 ]
  %226 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %222 ]
  %227 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %222 ]
  %228 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %222 ]
  %229 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %222 ]
  br label %230

230:                                              ; preds = %224, %230
  %231 = phi i32 [ %358, %230 ], [ %225, %224 ]
  %232 = phi i8* [ %354, %230 ], [ %226, %224 ]
  %233 = phi i8* [ %355, %230 ], [ %227, %224 ]
  %234 = phi i8* [ %357, %230 ], [ %228, %224 ]
  %235 = phi i8* [ %356, %230 ], [ %229, %224 ]
  %236 = load i8, i8* %232, align 1
  %237 = load i8, i8* %233, align 1
  %238 = load i8, i8* %235, align 1
  %239 = getelementptr inbounds i8, i8* %234, i64 1
  %240 = getelementptr inbounds i8, i8* %234, i64 2
  %241 = load i8, i8* %10, align 2
  %242 = zext i8 %241 to i32
  %243 = load i8, i8* %11, align 2
  %244 = zext i8 %243 to i32
  %245 = load i8, i8* %12, align 1
  %246 = zext i8 %245 to i32
  %247 = load i8, i8* %13, align 1
  %248 = zext i8 %247 to i32
  %249 = load i16, i16* %14, align 2
  %250 = sext i16 %249 to i32
  %251 = load i16, i16* %15, align 2
  %252 = sext i16 %251 to i32
  %253 = zext i8 %236 to i32
  %254 = mul nuw nsw i32 %253, 257
  %255 = mul i32 %254, %250
  %256 = lshr i32 %255, 16
  %257 = add nsw i32 %256, %252
  %258 = xor i8 %237, -128
  %259 = xor i8 %238, -128
  %260 = sext i8 %258 to i32
  %261 = mul nsw i32 %242, %260
  %262 = add nsw i32 %257, %261
  %263 = sext i8 %259 to i32
  %264 = mul nsw i32 %244, %260
  %265 = mul nsw i32 %246, %263
  %266 = add nsw i32 %265, %264
  %267 = sub nsw i32 %257, %266
  %268 = mul nsw i32 %248, %263
  %269 = add nsw i32 %257, %268
  %270 = ashr i32 %262, 6
  %271 = lshr i32 %270, 31
  %272 = xor i32 %271, 1
  %273 = sub nsw i32 0, %272
  %274 = and i32 %270, %273
  %275 = icmp slt i32 %274, 255
  %276 = select i1 %275, i32 %274, i32 255
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %234, align 1
  %278 = ashr i32 %267, 6
  %279 = lshr i32 %278, 31
  %280 = xor i32 %279, 1
  %281 = sub nsw i32 0, %280
  %282 = and i32 %278, %281
  %283 = icmp slt i32 %282, 255
  %284 = select i1 %283, i32 %282, i32 255
  %285 = trunc i32 %284 to i8
  store i8 %285, i8* %239, align 1
  %286 = ashr i32 %269, 6
  %287 = lshr i32 %286, 31
  %288 = xor i32 %287, 1
  %289 = sub nsw i32 0, %288
  %290 = and i32 %286, %289
  %291 = icmp slt i32 %290, 255
  %292 = select i1 %291, i32 %290, i32 255
  %293 = trunc i32 %292 to i8
  store i8 %293, i8* %240, align 1
  %294 = getelementptr inbounds i8, i8* %232, i64 1
  %295 = load i8, i8* %294, align 1
  %296 = load i8, i8* %233, align 1
  %297 = load i8, i8* %235, align 1
  %298 = getelementptr inbounds i8, i8* %234, i64 3
  %299 = getelementptr inbounds i8, i8* %234, i64 4
  %300 = getelementptr inbounds i8, i8* %234, i64 5
  %301 = load i8, i8* %10, align 2
  %302 = zext i8 %301 to i32
  %303 = load i8, i8* %11, align 2
  %304 = zext i8 %303 to i32
  %305 = load i8, i8* %12, align 1
  %306 = zext i8 %305 to i32
  %307 = load i8, i8* %13, align 1
  %308 = zext i8 %307 to i32
  %309 = load i16, i16* %14, align 2
  %310 = sext i16 %309 to i32
  %311 = load i16, i16* %15, align 2
  %312 = sext i16 %311 to i32
  %313 = zext i8 %295 to i32
  %314 = mul nuw nsw i32 %313, 257
  %315 = mul i32 %314, %310
  %316 = lshr i32 %315, 16
  %317 = add nsw i32 %316, %312
  %318 = xor i8 %296, -128
  %319 = xor i8 %297, -128
  %320 = sext i8 %318 to i32
  %321 = mul nsw i32 %302, %320
  %322 = add nsw i32 %317, %321
  %323 = sext i8 %319 to i32
  %324 = mul nsw i32 %304, %320
  %325 = mul nsw i32 %306, %323
  %326 = add nsw i32 %325, %324
  %327 = sub nsw i32 %317, %326
  %328 = mul nsw i32 %308, %323
  %329 = add nsw i32 %317, %328
  %330 = ashr i32 %322, 6
  %331 = lshr i32 %330, 31
  %332 = xor i32 %331, 1
  %333 = sub nsw i32 0, %332
  %334 = and i32 %330, %333
  %335 = icmp slt i32 %334, 255
  %336 = select i1 %335, i32 %334, i32 255
  %337 = trunc i32 %336 to i8
  store i8 %337, i8* %298, align 1
  %338 = ashr i32 %327, 6
  %339 = lshr i32 %338, 31
  %340 = xor i32 %339, 1
  %341 = sub nsw i32 0, %340
  %342 = and i32 %338, %341
  %343 = icmp slt i32 %342, 255
  %344 = select i1 %343, i32 %342, i32 255
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %299, align 1
  %346 = ashr i32 %329, 6
  %347 = lshr i32 %346, 31
  %348 = xor i32 %347, 1
  %349 = sub nsw i32 0, %348
  %350 = and i32 %346, %349
  %351 = icmp slt i32 %350, 255
  %352 = select i1 %351, i32 %350, i32 255
  %353 = trunc i32 %352 to i8
  store i8 %353, i8* %300, align 1
  %354 = getelementptr inbounds i8, i8* %232, i64 2
  %355 = getelementptr inbounds i8, i8* %233, i64 1
  %356 = getelementptr inbounds i8, i8* %235, i64 1
  %357 = getelementptr inbounds i8, i8* %234, i64 6
  %358 = add nuw nsw i32 %231, 2
  %359 = icmp slt i32 %358, %7
  br i1 %359, label %230, label %360, !llvm.loop !412

360:                                              ; preds = %230, %222, %6
  %361 = phi i8* [ %2, %6 ], [ %63, %222 ], [ %356, %230 ]
  %362 = phi i8* [ %3, %6 ], [ %62, %222 ], [ %357, %230 ]
  %363 = phi i8* [ %1, %6 ], [ %60, %222 ], [ %355, %230 ]
  %364 = phi i8* [ %0, %6 ], [ %59, %222 ], [ %354, %230 ]
  %365 = and i32 %5, 1
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %432, label %367

367:                                              ; preds = %360
  %368 = load i8, i8* %364, align 1
  %369 = load i8, i8* %363, align 1
  %370 = load i8, i8* %361, align 1
  %371 = getelementptr inbounds i8, i8* %362, i64 1
  %372 = getelementptr inbounds i8, i8* %362, i64 2
  %373 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %374 = load i8, i8* %373, align 2
  %375 = zext i8 %374 to i32
  %376 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %377 = load i8, i8* %376, align 2
  %378 = zext i8 %377 to i32
  %379 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %380 = load i8, i8* %379, align 1
  %381 = zext i8 %380 to i32
  %382 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %383 = load i8, i8* %382, align 1
  %384 = zext i8 %383 to i32
  %385 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %386 = load i16, i16* %385, align 2
  %387 = sext i16 %386 to i32
  %388 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %389 = load i16, i16* %388, align 2
  %390 = sext i16 %389 to i32
  %391 = zext i8 %368 to i32
  %392 = mul nuw nsw i32 %391, 257
  %393 = mul i32 %392, %387
  %394 = lshr i32 %393, 16
  %395 = add nsw i32 %394, %390
  %396 = xor i8 %369, -128
  %397 = xor i8 %370, -128
  %398 = sext i8 %396 to i32
  %399 = mul nsw i32 %375, %398
  %400 = add nsw i32 %395, %399
  %401 = sext i8 %397 to i32
  %402 = mul nsw i32 %378, %398
  %403 = mul nsw i32 %381, %401
  %404 = add nsw i32 %403, %402
  %405 = sub nsw i32 %395, %404
  %406 = mul nsw i32 %384, %401
  %407 = add nsw i32 %395, %406
  %408 = ashr i32 %400, 6
  %409 = lshr i32 %408, 31
  %410 = xor i32 %409, 1
  %411 = sub nsw i32 0, %410
  %412 = and i32 %408, %411
  %413 = icmp slt i32 %412, 255
  %414 = select i1 %413, i32 %412, i32 255
  %415 = trunc i32 %414 to i8
  store i8 %415, i8* %362, align 1
  %416 = ashr i32 %405, 6
  %417 = lshr i32 %416, 31
  %418 = xor i32 %417, 1
  %419 = sub nsw i32 0, %418
  %420 = and i32 %416, %419
  %421 = icmp slt i32 %420, 255
  %422 = select i1 %421, i32 %420, i32 255
  %423 = trunc i32 %422 to i8
  store i8 %423, i8* %371, align 1
  %424 = ashr i32 %407, 6
  %425 = lshr i32 %424, 31
  %426 = xor i32 %425, 1
  %427 = sub nsw i32 0, %426
  %428 = and i32 %424, %427
  %429 = icmp slt i32 %428, 255
  %430 = select i1 %429, i32 %428, i32 255
  %431 = trunc i32 %430 to i8
  store i8 %431, i8* %372, align 1
  br label %432

432:                                              ; preds = %360, %367
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToARGB4444Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %311

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 4
  br i1 %20, label %192, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  %26 = add nuw nsw i64 %25, 4
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %192, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967292
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = shl nuw nsw i64 %55, 2
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %188, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = shl i64 %65, 2
  %70 = getelementptr i8, i8* %3, i64 %69
  %71 = getelementptr i8, i8* %2, i64 %65
  %72 = bitcast i8* %67 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %75 = shufflevector <8 x i8> %73, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %76 = bitcast i8* %68 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1, !alias.scope !413
  %78 = bitcast i8* %71 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1, !alias.scope !416
  %80 = load i8, i8* %10, align 2, !alias.scope !418
  %81 = insertelement <4 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <4 x i8> %81, <4 x i8> undef, <4 x i32> zeroinitializer
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = load i8, i8* %11, align 2, !alias.scope !418
  %85 = insertelement <4 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <4 x i8> %85, <4 x i8> undef, <4 x i32> zeroinitializer
  %87 = zext <4 x i8> %86 to <4 x i32>
  %88 = load i8, i8* %12, align 1, !alias.scope !418
  %89 = insertelement <4 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <4 x i8> %89, <4 x i8> undef, <4 x i32> zeroinitializer
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = load i8, i8* %13, align 1, !alias.scope !418
  %93 = insertelement <4 x i8> undef, i8 %92, i32 0
  %94 = shufflevector <4 x i8> %93, <4 x i8> undef, <4 x i32> zeroinitializer
  %95 = zext <4 x i8> %94 to <4 x i32>
  %96 = load i16, i16* %14, align 2, !alias.scope !418
  %97 = insertelement <4 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <4 x i16> %97, <4 x i16> undef, <4 x i32> zeroinitializer
  %99 = sext <4 x i16> %98 to <4 x i32>
  %100 = load i16, i16* %15, align 2, !alias.scope !418
  %101 = insertelement <4 x i16> undef, i16 %100, i32 0
  %102 = shufflevector <4 x i16> %101, <4 x i16> undef, <4 x i32> zeroinitializer
  %103 = sext <4 x i16> %102 to <4 x i32>
  %104 = zext <4 x i8> %74 to <4 x i32>
  %105 = mul nsw <4 x i32> %99, <i32 257, i32 257, i32 257, i32 257>
  %106 = mul <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 16, i32 16, i32 16, i32 16>
  %108 = add nsw <4 x i32> %107, %103
  %109 = xor <4 x i8> %77, <i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = xor <4 x i8> %79, <i8 -128, i8 -128, i8 -128, i8 -128>
  %111 = sext <4 x i8> %109 to <4 x i32>
  %112 = mul nsw <4 x i32> %83, %111
  %113 = add nsw <4 x i32> %108, %112
  %114 = sext <4 x i8> %110 to <4 x i32>
  %115 = mul nsw <4 x i32> %87, %111
  %116 = mul nsw <4 x i32> %91, %114
  %117 = add nsw <4 x i32> %116, %115
  %118 = sub nsw <4 x i32> %108, %117
  %119 = mul nsw <4 x i32> %95, %114
  %120 = add nsw <4 x i32> %108, %119
  %121 = ashr <4 x i32> %113, <i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <4 x i32> %121, <i32 31, i32 31, i32 31, i32 31>
  %123 = xor <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <4 x i32> zeroinitializer, %123
  %125 = and <4 x i32> %121, %124
  %126 = icmp slt <4 x i32> %125, <i32 255, i32 255, i32 255, i32 255>
  %127 = select <4 x i1> %126, <4 x i32> %125, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %128 = ashr <4 x i32> %118, <i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <4 x i32> %128, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %128, %131
  %133 = icmp slt <4 x i32> %132, <i32 255, i32 255, i32 255, i32 255>
  %134 = select <4 x i1> %133, <4 x i32> %132, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %135 = ashr <4 x i32> %120, <i32 6, i32 6, i32 6, i32 6>
  %136 = lshr <4 x i32> %135, <i32 31, i32 31, i32 31, i32 31>
  %137 = xor <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %138 = sub nsw <4 x i32> zeroinitializer, %137
  %139 = and <4 x i32> %135, %138
  %140 = icmp slt <4 x i32> %139, <i32 255, i32 255, i32 255, i32 255>
  %141 = select <4 x i1> %140, <4 x i32> %139, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %142 = zext <4 x i8> %75 to <4 x i32>
  %143 = mul <4 x i32> %105, %142
  %144 = lshr <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = add nsw <4 x i32> %144, %103
  %146 = add nsw <4 x i32> %145, %112
  %147 = sub nsw <4 x i32> %145, %117
  %148 = add nsw <4 x i32> %145, %119
  %149 = ashr <4 x i32> %146, <i32 6, i32 6, i32 6, i32 6>
  %150 = lshr <4 x i32> %149, <i32 31, i32 31, i32 31, i32 31>
  %151 = xor <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = sub nsw <4 x i32> zeroinitializer, %151
  %153 = and <4 x i32> %149, %152
  %154 = icmp slt <4 x i32> %153, <i32 255, i32 255, i32 255, i32 255>
  %155 = select <4 x i1> %154, <4 x i32> %153, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %156 = ashr <4 x i32> %147, <i32 6, i32 6, i32 6, i32 6>
  %157 = lshr <4 x i32> %156, <i32 31, i32 31, i32 31, i32 31>
  %158 = xor <4 x i32> %157, <i32 1, i32 1, i32 1, i32 1>
  %159 = sub nsw <4 x i32> zeroinitializer, %158
  %160 = and <4 x i32> %156, %159
  %161 = icmp slt <4 x i32> %160, <i32 255, i32 255, i32 255, i32 255>
  %162 = select <4 x i1> %161, <4 x i32> %160, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %163 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %164 = lshr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = xor <4 x i32> %164, <i32 1, i32 1, i32 1, i32 1>
  %166 = sub nsw <4 x i32> zeroinitializer, %165
  %167 = and <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, <i32 255, i32 255, i32 255, i32 255>
  %169 = select <4 x i1> %168, <4 x i32> %167, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %170 = lshr <4 x i32> %127, <i32 4, i32 4, i32 4, i32 4>
  %171 = and <4 x i32> %170, <i32 15, i32 15, i32 15, i32 15>
  %172 = and <4 x i32> %134, <i32 240, i32 240, i32 240, i32 240>
  %173 = shl nsw <4 x i32> %141, <i32 4, i32 4, i32 4, i32 4>
  %174 = and <4 x i32> %173, <i32 3840, i32 3840, i32 3840, i32 3840>
  %175 = shl nsw <4 x i32> %155, <i32 12, i32 12, i32 12, i32 12>
  %176 = and <4 x i32> %175, <i32 983040, i32 983040, i32 983040, i32 983040>
  %177 = shl <4 x i32> %162, <i32 16, i32 16, i32 16, i32 16>
  %178 = and <4 x i32> %177, <i32 15728640, i32 15728640, i32 15728640, i32 15728640>
  %179 = shl <4 x i32> %169, <i32 20, i32 20, i32 20, i32 20>
  %180 = and <4 x i32> %179, <i32 251658240, i32 251658240, i32 251658240, i32 251658240>
  %181 = or <4 x i32> %172, %171
  %182 = or <4 x i32> %181, %174
  %183 = or <4 x i32> %182, %176
  %184 = or <4 x i32> %183, %178
  %185 = or <4 x i32> %184, %180
  %186 = or <4 x i32> %185, <i32 -268374016, i32 -268374016, i32 -268374016, i32 -268374016>
  %187 = bitcast i8* %70 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 4, !alias.scope !420, !noalias !422
  %188 = add i64 %65, 4
  %189 = icmp eq i64 %188, %55
  br i1 %189, label %190, label %64, !llvm.loop !424

190:                                              ; preds = %64
  %191 = icmp eq i64 %55, %19
  br i1 %191, label %311, label %192

192:                                              ; preds = %190, %21, %9
  %193 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %190 ]
  %194 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %190 ]
  %195 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %190 ]
  %196 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %190 ]
  %197 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %190 ]
  br label %198

198:                                              ; preds = %192, %198
  %199 = phi i32 [ %309, %198 ], [ %193, %192 ]
  %200 = phi i8* [ %305, %198 ], [ %194, %192 ]
  %201 = phi i8* [ %306, %198 ], [ %195, %192 ]
  %202 = phi i8* [ %308, %198 ], [ %196, %192 ]
  %203 = phi i8* [ %307, %198 ], [ %197, %192 ]
  %204 = load i8, i8* %200, align 1
  %205 = load i8, i8* %201, align 1
  %206 = load i8, i8* %203, align 1
  %207 = load i8, i8* %10, align 2
  %208 = zext i8 %207 to i32
  %209 = load i8, i8* %11, align 2
  %210 = zext i8 %209 to i32
  %211 = load i8, i8* %12, align 1
  %212 = zext i8 %211 to i32
  %213 = load i8, i8* %13, align 1
  %214 = zext i8 %213 to i32
  %215 = load i16, i16* %14, align 2
  %216 = sext i16 %215 to i32
  %217 = load i16, i16* %15, align 2
  %218 = sext i16 %217 to i32
  %219 = zext i8 %204 to i32
  %220 = mul nsw i32 %216, 257
  %221 = mul i32 %220, %219
  %222 = lshr i32 %221, 16
  %223 = add nsw i32 %222, %218
  %224 = xor i8 %205, -128
  %225 = xor i8 %206, -128
  %226 = sext i8 %224 to i32
  %227 = mul nsw i32 %208, %226
  %228 = add nsw i32 %223, %227
  %229 = sext i8 %225 to i32
  %230 = mul nsw i32 %210, %226
  %231 = mul nsw i32 %212, %229
  %232 = add nsw i32 %231, %230
  %233 = sub nsw i32 %223, %232
  %234 = mul nsw i32 %214, %229
  %235 = add nsw i32 %223, %234
  %236 = ashr i32 %228, 6
  %237 = lshr i32 %236, 31
  %238 = xor i32 %237, 1
  %239 = sub nsw i32 0, %238
  %240 = and i32 %236, %239
  %241 = icmp slt i32 %240, 255
  %242 = select i1 %241, i32 %240, i32 255
  %243 = ashr i32 %233, 6
  %244 = lshr i32 %243, 31
  %245 = xor i32 %244, 1
  %246 = sub nsw i32 0, %245
  %247 = and i32 %243, %246
  %248 = icmp slt i32 %247, 255
  %249 = select i1 %248, i32 %247, i32 255
  %250 = ashr i32 %235, 6
  %251 = lshr i32 %250, 31
  %252 = xor i32 %251, 1
  %253 = sub nsw i32 0, %252
  %254 = and i32 %250, %253
  %255 = icmp slt i32 %254, 255
  %256 = select i1 %255, i32 %254, i32 255
  %257 = getelementptr inbounds i8, i8* %200, i64 1
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = mul i32 %220, %259
  %261 = lshr i32 %260, 16
  %262 = add nsw i32 %261, %218
  %263 = add nsw i32 %262, %227
  %264 = sub nsw i32 %262, %232
  %265 = add nsw i32 %262, %234
  %266 = ashr i32 %263, 6
  %267 = lshr i32 %266, 31
  %268 = xor i32 %267, 1
  %269 = sub nsw i32 0, %268
  %270 = and i32 %266, %269
  %271 = icmp slt i32 %270, 255
  %272 = select i1 %271, i32 %270, i32 255
  %273 = ashr i32 %264, 6
  %274 = lshr i32 %273, 31
  %275 = xor i32 %274, 1
  %276 = sub nsw i32 0, %275
  %277 = and i32 %273, %276
  %278 = icmp slt i32 %277, 255
  %279 = select i1 %278, i32 %277, i32 255
  %280 = ashr i32 %265, 6
  %281 = lshr i32 %280, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %280, %283
  %285 = icmp slt i32 %284, 255
  %286 = select i1 %285, i32 %284, i32 255
  %287 = lshr i32 %242, 4
  %288 = and i32 %287, 15
  %289 = and i32 %249, 240
  %290 = shl nsw i32 %256, 4
  %291 = and i32 %290, 3840
  %292 = shl nsw i32 %272, 12
  %293 = and i32 %292, 983040
  %294 = shl i32 %279, 16
  %295 = and i32 %294, 15728640
  %296 = shl i32 %286, 20
  %297 = and i32 %296, 251658240
  %298 = or i32 %289, %288
  %299 = or i32 %298, %291
  %300 = or i32 %299, %293
  %301 = or i32 %300, %295
  %302 = or i32 %301, %297
  %303 = or i32 %302, -268374016
  %304 = bitcast i8* %202 to i32*
  store i32 %303, i32* %304, align 4
  %305 = getelementptr inbounds i8, i8* %200, i64 2
  %306 = getelementptr inbounds i8, i8* %201, i64 1
  %307 = getelementptr inbounds i8, i8* %203, i64 1
  %308 = getelementptr inbounds i8, i8* %202, i64 4
  %309 = add nuw nsw i32 %199, 2
  %310 = icmp slt i32 %309, %7
  br i1 %310, label %198, label %311, !llvm.loop !425

311:                                              ; preds = %198, %190, %6
  %312 = phi i8* [ %2, %6 ], [ %63, %190 ], [ %307, %198 ]
  %313 = phi i8* [ %3, %6 ], [ %62, %190 ], [ %308, %198 ]
  %314 = phi i8* [ %1, %6 ], [ %60, %190 ], [ %306, %198 ]
  %315 = phi i8* [ %0, %6 ], [ %59, %190 ], [ %305, %198 ]
  %316 = and i32 %5, 1
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %390, label %318

318:                                              ; preds = %311
  %319 = load i8, i8* %315, align 1
  %320 = load i8, i8* %314, align 1
  %321 = load i8, i8* %312, align 1
  %322 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %323 = load i8, i8* %322, align 2
  %324 = zext i8 %323 to i32
  %325 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %326 = load i8, i8* %325, align 2
  %327 = zext i8 %326 to i32
  %328 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %335 = load i16, i16* %334, align 2
  %336 = sext i16 %335 to i32
  %337 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %338 = load i16, i16* %337, align 2
  %339 = sext i16 %338 to i32
  %340 = zext i8 %319 to i32
  %341 = mul nuw nsw i32 %340, 257
  %342 = mul i32 %341, %336
  %343 = lshr i32 %342, 16
  %344 = add nsw i32 %343, %339
  %345 = xor i8 %320, -128
  %346 = xor i8 %321, -128
  %347 = sext i8 %345 to i32
  %348 = mul nsw i32 %324, %347
  %349 = add nsw i32 %344, %348
  %350 = sext i8 %346 to i32
  %351 = mul nsw i32 %327, %347
  %352 = mul nsw i32 %330, %350
  %353 = add nsw i32 %352, %351
  %354 = sub nsw i32 %344, %353
  %355 = mul nsw i32 %333, %350
  %356 = add nsw i32 %344, %355
  %357 = ashr i32 %349, 6
  %358 = lshr i32 %357, 31
  %359 = xor i32 %358, 1
  %360 = sub nsw i32 0, %359
  %361 = and i32 %357, %360
  %362 = icmp slt i32 %361, 255
  %363 = select i1 %362, i32 %361, i32 255
  %364 = trunc i32 %363 to i8
  %365 = ashr i32 %354, 6
  %366 = lshr i32 %365, 31
  %367 = xor i32 %366, 1
  %368 = sub nsw i32 0, %367
  %369 = and i32 %365, %368
  %370 = icmp slt i32 %369, 255
  %371 = select i1 %370, i32 %369, i32 255
  %372 = trunc i32 %371 to i8
  %373 = ashr i32 %356, 6
  %374 = lshr i32 %373, 31
  %375 = xor i32 %374, 1
  %376 = sub nsw i32 0, %375
  %377 = and i32 %373, %376
  %378 = icmp slt i32 %377, 255
  %379 = select i1 %378, i32 %377, i32 255
  %380 = trunc i32 %379 to i16
  %381 = lshr i8 %364, 4
  %382 = and i8 %372, -16
  %383 = or i8 %381, %382
  %384 = zext i8 %383 to i16
  %385 = shl i16 %380, 4
  %386 = and i16 %385, 3840
  %387 = or i16 %386, %384
  %388 = or i16 %387, -4096
  %389 = bitcast i8* %313 to i16*
  store i16 %388, i16* %389, align 2
  br label %390

390:                                              ; preds = %311, %318
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToARGB1555Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %313

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 4
  br i1 %20, label %193, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  %26 = add nuw nsw i64 %25, 4
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %193, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967292
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = shl nuw nsw i64 %55, 2
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %189, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = shl i64 %65, 2
  %70 = getelementptr i8, i8* %3, i64 %69
  %71 = getelementptr i8, i8* %2, i64 %65
  %72 = bitcast i8* %67 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %75 = shufflevector <8 x i8> %73, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %76 = bitcast i8* %68 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1, !alias.scope !426
  %78 = bitcast i8* %71 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1, !alias.scope !429
  %80 = load i8, i8* %10, align 2, !alias.scope !431
  %81 = insertelement <4 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <4 x i8> %81, <4 x i8> undef, <4 x i32> zeroinitializer
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = load i8, i8* %11, align 2, !alias.scope !431
  %85 = insertelement <4 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <4 x i8> %85, <4 x i8> undef, <4 x i32> zeroinitializer
  %87 = zext <4 x i8> %86 to <4 x i32>
  %88 = load i8, i8* %12, align 1, !alias.scope !431
  %89 = insertelement <4 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <4 x i8> %89, <4 x i8> undef, <4 x i32> zeroinitializer
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = load i8, i8* %13, align 1, !alias.scope !431
  %93 = insertelement <4 x i8> undef, i8 %92, i32 0
  %94 = shufflevector <4 x i8> %93, <4 x i8> undef, <4 x i32> zeroinitializer
  %95 = zext <4 x i8> %94 to <4 x i32>
  %96 = load i16, i16* %14, align 2, !alias.scope !431
  %97 = insertelement <4 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <4 x i16> %97, <4 x i16> undef, <4 x i32> zeroinitializer
  %99 = sext <4 x i16> %98 to <4 x i32>
  %100 = load i16, i16* %15, align 2, !alias.scope !431
  %101 = insertelement <4 x i16> undef, i16 %100, i32 0
  %102 = shufflevector <4 x i16> %101, <4 x i16> undef, <4 x i32> zeroinitializer
  %103 = sext <4 x i16> %102 to <4 x i32>
  %104 = zext <4 x i8> %74 to <4 x i32>
  %105 = mul nsw <4 x i32> %99, <i32 257, i32 257, i32 257, i32 257>
  %106 = mul <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 16, i32 16, i32 16, i32 16>
  %108 = add nsw <4 x i32> %107, %103
  %109 = xor <4 x i8> %77, <i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = xor <4 x i8> %79, <i8 -128, i8 -128, i8 -128, i8 -128>
  %111 = sext <4 x i8> %109 to <4 x i32>
  %112 = mul nsw <4 x i32> %83, %111
  %113 = add nsw <4 x i32> %108, %112
  %114 = sext <4 x i8> %110 to <4 x i32>
  %115 = mul nsw <4 x i32> %87, %111
  %116 = mul nsw <4 x i32> %91, %114
  %117 = add nsw <4 x i32> %116, %115
  %118 = sub nsw <4 x i32> %108, %117
  %119 = mul nsw <4 x i32> %95, %114
  %120 = add nsw <4 x i32> %108, %119
  %121 = ashr <4 x i32> %113, <i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <4 x i32> %121, <i32 31, i32 31, i32 31, i32 31>
  %123 = xor <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <4 x i32> zeroinitializer, %123
  %125 = and <4 x i32> %121, %124
  %126 = icmp slt <4 x i32> %125, <i32 255, i32 255, i32 255, i32 255>
  %127 = select <4 x i1> %126, <4 x i32> %125, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %128 = ashr <4 x i32> %118, <i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <4 x i32> %128, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %128, %131
  %133 = icmp slt <4 x i32> %132, <i32 255, i32 255, i32 255, i32 255>
  %134 = select <4 x i1> %133, <4 x i32> %132, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %135 = ashr <4 x i32> %120, <i32 6, i32 6, i32 6, i32 6>
  %136 = lshr <4 x i32> %135, <i32 31, i32 31, i32 31, i32 31>
  %137 = xor <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %138 = sub nsw <4 x i32> zeroinitializer, %137
  %139 = and <4 x i32> %135, %138
  %140 = icmp slt <4 x i32> %139, <i32 255, i32 255, i32 255, i32 255>
  %141 = select <4 x i1> %140, <4 x i32> %139, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %142 = zext <4 x i8> %75 to <4 x i32>
  %143 = mul <4 x i32> %105, %142
  %144 = lshr <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = add nsw <4 x i32> %144, %103
  %146 = add nsw <4 x i32> %145, %112
  %147 = sub nsw <4 x i32> %145, %117
  %148 = add nsw <4 x i32> %145, %119
  %149 = ashr <4 x i32> %146, <i32 6, i32 6, i32 6, i32 6>
  %150 = lshr <4 x i32> %149, <i32 31, i32 31, i32 31, i32 31>
  %151 = xor <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = sub nsw <4 x i32> zeroinitializer, %151
  %153 = and <4 x i32> %149, %152
  %154 = icmp slt <4 x i32> %153, <i32 255, i32 255, i32 255, i32 255>
  %155 = select <4 x i1> %154, <4 x i32> %153, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %156 = ashr <4 x i32> %147, <i32 6, i32 6, i32 6, i32 6>
  %157 = lshr <4 x i32> %156, <i32 31, i32 31, i32 31, i32 31>
  %158 = xor <4 x i32> %157, <i32 1, i32 1, i32 1, i32 1>
  %159 = sub nsw <4 x i32> zeroinitializer, %158
  %160 = and <4 x i32> %156, %159
  %161 = icmp slt <4 x i32> %160, <i32 255, i32 255, i32 255, i32 255>
  %162 = select <4 x i1> %161, <4 x i32> %160, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %163 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %164 = lshr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = xor <4 x i32> %164, <i32 1, i32 1, i32 1, i32 1>
  %166 = sub nsw <4 x i32> zeroinitializer, %165
  %167 = and <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, <i32 255, i32 255, i32 255, i32 255>
  %169 = select <4 x i1> %168, <4 x i32> %167, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %170 = lshr <4 x i32> %127, <i32 3, i32 3, i32 3, i32 3>
  %171 = and <4 x i32> %170, <i32 31, i32 31, i32 31, i32 31>
  %172 = shl nsw <4 x i32> %134, <i32 2, i32 2, i32 2, i32 2>
  %173 = and <4 x i32> %172, <i32 992, i32 992, i32 992, i32 992>
  %174 = shl nsw <4 x i32> %141, <i32 7, i32 7, i32 7, i32 7>
  %175 = and <4 x i32> %174, <i32 31744, i32 31744, i32 31744, i32 31744>
  %176 = shl nsw <4 x i32> %155, <i32 13, i32 13, i32 13, i32 13>
  %177 = and <4 x i32> %176, <i32 2031616, i32 2031616, i32 2031616, i32 2031616>
  %178 = shl <4 x i32> %162, <i32 18, i32 18, i32 18, i32 18>
  %179 = and <4 x i32> %178, <i32 65011712, i32 65011712, i32 65011712, i32 65011712>
  %180 = shl <4 x i32> %169, <i32 23, i32 23, i32 23, i32 23>
  %181 = and <4 x i32> %180, <i32 2080374784, i32 2080374784, i32 2080374784, i32 2080374784>
  %182 = or <4 x i32> %171, %173
  %183 = or <4 x i32> %182, %175
  %184 = or <4 x i32> %183, %177
  %185 = or <4 x i32> %184, %179
  %186 = or <4 x i32> %185, %181
  %187 = or <4 x i32> %186, <i32 -2147450880, i32 -2147450880, i32 -2147450880, i32 -2147450880>
  %188 = bitcast i8* %70 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %188, align 4, !alias.scope !433, !noalias !435
  %189 = add i64 %65, 4
  %190 = icmp eq i64 %189, %55
  br i1 %190, label %191, label %64, !llvm.loop !437

191:                                              ; preds = %64
  %192 = icmp eq i64 %55, %19
  br i1 %192, label %313, label %193

193:                                              ; preds = %191, %21, %9
  %194 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %191 ]
  %195 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %191 ]
  %196 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %191 ]
  %197 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %191 ]
  %198 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %191 ]
  br label %199

199:                                              ; preds = %193, %199
  %200 = phi i32 [ %311, %199 ], [ %194, %193 ]
  %201 = phi i8* [ %307, %199 ], [ %195, %193 ]
  %202 = phi i8* [ %308, %199 ], [ %196, %193 ]
  %203 = phi i8* [ %310, %199 ], [ %197, %193 ]
  %204 = phi i8* [ %309, %199 ], [ %198, %193 ]
  %205 = load i8, i8* %201, align 1
  %206 = load i8, i8* %202, align 1
  %207 = load i8, i8* %204, align 1
  %208 = load i8, i8* %10, align 2
  %209 = zext i8 %208 to i32
  %210 = load i8, i8* %11, align 2
  %211 = zext i8 %210 to i32
  %212 = load i8, i8* %12, align 1
  %213 = zext i8 %212 to i32
  %214 = load i8, i8* %13, align 1
  %215 = zext i8 %214 to i32
  %216 = load i16, i16* %14, align 2
  %217 = sext i16 %216 to i32
  %218 = load i16, i16* %15, align 2
  %219 = sext i16 %218 to i32
  %220 = zext i8 %205 to i32
  %221 = mul nsw i32 %217, 257
  %222 = mul i32 %221, %220
  %223 = lshr i32 %222, 16
  %224 = add nsw i32 %223, %219
  %225 = xor i8 %206, -128
  %226 = xor i8 %207, -128
  %227 = sext i8 %225 to i32
  %228 = mul nsw i32 %209, %227
  %229 = add nsw i32 %224, %228
  %230 = sext i8 %226 to i32
  %231 = mul nsw i32 %211, %227
  %232 = mul nsw i32 %213, %230
  %233 = add nsw i32 %232, %231
  %234 = sub nsw i32 %224, %233
  %235 = mul nsw i32 %215, %230
  %236 = add nsw i32 %224, %235
  %237 = ashr i32 %229, 6
  %238 = lshr i32 %237, 31
  %239 = xor i32 %238, 1
  %240 = sub nsw i32 0, %239
  %241 = and i32 %237, %240
  %242 = icmp slt i32 %241, 255
  %243 = select i1 %242, i32 %241, i32 255
  %244 = ashr i32 %234, 6
  %245 = lshr i32 %244, 31
  %246 = xor i32 %245, 1
  %247 = sub nsw i32 0, %246
  %248 = and i32 %244, %247
  %249 = icmp slt i32 %248, 255
  %250 = select i1 %249, i32 %248, i32 255
  %251 = ashr i32 %236, 6
  %252 = lshr i32 %251, 31
  %253 = xor i32 %252, 1
  %254 = sub nsw i32 0, %253
  %255 = and i32 %251, %254
  %256 = icmp slt i32 %255, 255
  %257 = select i1 %256, i32 %255, i32 255
  %258 = getelementptr inbounds i8, i8* %201, i64 1
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = mul i32 %221, %260
  %262 = lshr i32 %261, 16
  %263 = add nsw i32 %262, %219
  %264 = add nsw i32 %263, %228
  %265 = sub nsw i32 %263, %233
  %266 = add nsw i32 %263, %235
  %267 = ashr i32 %264, 6
  %268 = lshr i32 %267, 31
  %269 = xor i32 %268, 1
  %270 = sub nsw i32 0, %269
  %271 = and i32 %267, %270
  %272 = icmp slt i32 %271, 255
  %273 = select i1 %272, i32 %271, i32 255
  %274 = ashr i32 %265, 6
  %275 = lshr i32 %274, 31
  %276 = xor i32 %275, 1
  %277 = sub nsw i32 0, %276
  %278 = and i32 %274, %277
  %279 = icmp slt i32 %278, 255
  %280 = select i1 %279, i32 %278, i32 255
  %281 = ashr i32 %266, 6
  %282 = lshr i32 %281, 31
  %283 = xor i32 %282, 1
  %284 = sub nsw i32 0, %283
  %285 = and i32 %281, %284
  %286 = icmp slt i32 %285, 255
  %287 = select i1 %286, i32 %285, i32 255
  %288 = lshr i32 %243, 3
  %289 = and i32 %288, 31
  %290 = shl nsw i32 %250, 2
  %291 = and i32 %290, 992
  %292 = shl nsw i32 %257, 7
  %293 = and i32 %292, 31744
  %294 = shl nsw i32 %273, 13
  %295 = and i32 %294, 2031616
  %296 = shl i32 %280, 18
  %297 = and i32 %296, 65011712
  %298 = shl i32 %287, 23
  %299 = and i32 %298, 2080374784
  %300 = or i32 %289, %291
  %301 = or i32 %300, %293
  %302 = or i32 %301, %295
  %303 = or i32 %302, %297
  %304 = or i32 %303, %299
  %305 = or i32 %304, -2147450880
  %306 = bitcast i8* %203 to i32*
  store i32 %305, i32* %306, align 4
  %307 = getelementptr inbounds i8, i8* %201, i64 2
  %308 = getelementptr inbounds i8, i8* %202, i64 1
  %309 = getelementptr inbounds i8, i8* %204, i64 1
  %310 = getelementptr inbounds i8, i8* %203, i64 4
  %311 = add nuw nsw i32 %200, 2
  %312 = icmp slt i32 %311, %7
  br i1 %312, label %199, label %313, !llvm.loop !438

313:                                              ; preds = %199, %191, %6
  %314 = phi i8* [ %2, %6 ], [ %63, %191 ], [ %309, %199 ]
  %315 = phi i8* [ %3, %6 ], [ %62, %191 ], [ %310, %199 ]
  %316 = phi i8* [ %1, %6 ], [ %60, %191 ], [ %308, %199 ]
  %317 = phi i8* [ %0, %6 ], [ %59, %191 ], [ %307, %199 ]
  %318 = and i32 %5, 1
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %393, label %320

320:                                              ; preds = %313
  %321 = load i8, i8* %317, align 1
  %322 = load i8, i8* %316, align 1
  %323 = load i8, i8* %314, align 1
  %324 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %325 = load i8, i8* %324, align 2
  %326 = zext i8 %325 to i32
  %327 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %328 = load i8, i8* %327, align 2
  %329 = zext i8 %328 to i32
  %330 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i32
  %333 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %337 = load i16, i16* %336, align 2
  %338 = sext i16 %337 to i32
  %339 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %340 = load i16, i16* %339, align 2
  %341 = sext i16 %340 to i32
  %342 = zext i8 %321 to i32
  %343 = mul nuw nsw i32 %342, 257
  %344 = mul i32 %343, %338
  %345 = lshr i32 %344, 16
  %346 = add nsw i32 %345, %341
  %347 = xor i8 %322, -128
  %348 = xor i8 %323, -128
  %349 = sext i8 %347 to i32
  %350 = mul nsw i32 %326, %349
  %351 = add nsw i32 %346, %350
  %352 = sext i8 %348 to i32
  %353 = mul nsw i32 %329, %349
  %354 = mul nsw i32 %332, %352
  %355 = add nsw i32 %354, %353
  %356 = sub nsw i32 %346, %355
  %357 = mul nsw i32 %335, %352
  %358 = add nsw i32 %346, %357
  %359 = ashr i32 %351, 6
  %360 = lshr i32 %359, 31
  %361 = xor i32 %360, 1
  %362 = sub nsw i32 0, %361
  %363 = and i32 %359, %362
  %364 = icmp slt i32 %363, 255
  %365 = select i1 %364, i32 %363, i32 255
  %366 = trunc i32 %365 to i16
  %367 = ashr i32 %356, 6
  %368 = lshr i32 %367, 31
  %369 = xor i32 %368, 1
  %370 = sub nsw i32 0, %369
  %371 = and i32 %367, %370
  %372 = icmp slt i32 %371, 255
  %373 = select i1 %372, i32 %371, i32 255
  %374 = trunc i32 %373 to i16
  %375 = ashr i32 %358, 6
  %376 = lshr i32 %375, 31
  %377 = xor i32 %376, 1
  %378 = sub nsw i32 0, %377
  %379 = and i32 %375, %378
  %380 = icmp slt i32 %379, 255
  %381 = select i1 %380, i32 %379, i32 255
  %382 = trunc i32 %381 to i16
  %383 = lshr i16 %366, 3
  %384 = and i16 %383, 31
  %385 = shl i16 %374, 2
  %386 = and i16 %385, 992
  %387 = shl i16 %382, 7
  %388 = and i16 %387, 31744
  %389 = or i16 %384, %386
  %390 = or i16 %389, %388
  %391 = or i16 %390, -32768
  %392 = bitcast i8* %315 to i16*
  store i16 %391, i16* %392, align 2
  br label %393

393:                                              ; preds = %313, %320
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToRGB565Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %311

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 4
  br i1 %20, label %192, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 2
  %26 = add nuw nsw i64 %25, 4
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %192, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967292
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = shl nuw nsw i64 %55, 2
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %188, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = shl i64 %65, 2
  %70 = getelementptr i8, i8* %3, i64 %69
  %71 = getelementptr i8, i8* %2, i64 %65
  %72 = bitcast i8* %67 to <8 x i8>*
  %73 = load <8 x i8>, <8 x i8>* %72, align 1
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %75 = shufflevector <8 x i8> %73, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %76 = bitcast i8* %68 to <4 x i8>*
  %77 = load <4 x i8>, <4 x i8>* %76, align 1, !alias.scope !439
  %78 = bitcast i8* %71 to <4 x i8>*
  %79 = load <4 x i8>, <4 x i8>* %78, align 1, !alias.scope !442
  %80 = load i8, i8* %10, align 2, !alias.scope !444
  %81 = insertelement <4 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <4 x i8> %81, <4 x i8> undef, <4 x i32> zeroinitializer
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = load i8, i8* %11, align 2, !alias.scope !444
  %85 = insertelement <4 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <4 x i8> %85, <4 x i8> undef, <4 x i32> zeroinitializer
  %87 = zext <4 x i8> %86 to <4 x i32>
  %88 = load i8, i8* %12, align 1, !alias.scope !444
  %89 = insertelement <4 x i8> undef, i8 %88, i32 0
  %90 = shufflevector <4 x i8> %89, <4 x i8> undef, <4 x i32> zeroinitializer
  %91 = zext <4 x i8> %90 to <4 x i32>
  %92 = load i8, i8* %13, align 1, !alias.scope !444
  %93 = insertelement <4 x i8> undef, i8 %92, i32 0
  %94 = shufflevector <4 x i8> %93, <4 x i8> undef, <4 x i32> zeroinitializer
  %95 = zext <4 x i8> %94 to <4 x i32>
  %96 = load i16, i16* %14, align 2, !alias.scope !444
  %97 = insertelement <4 x i16> undef, i16 %96, i32 0
  %98 = shufflevector <4 x i16> %97, <4 x i16> undef, <4 x i32> zeroinitializer
  %99 = sext <4 x i16> %98 to <4 x i32>
  %100 = load i16, i16* %15, align 2, !alias.scope !444
  %101 = insertelement <4 x i16> undef, i16 %100, i32 0
  %102 = shufflevector <4 x i16> %101, <4 x i16> undef, <4 x i32> zeroinitializer
  %103 = sext <4 x i16> %102 to <4 x i32>
  %104 = zext <4 x i8> %74 to <4 x i32>
  %105 = mul nsw <4 x i32> %99, <i32 257, i32 257, i32 257, i32 257>
  %106 = mul <4 x i32> %105, %104
  %107 = lshr <4 x i32> %106, <i32 16, i32 16, i32 16, i32 16>
  %108 = add nsw <4 x i32> %107, %103
  %109 = xor <4 x i8> %77, <i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = xor <4 x i8> %79, <i8 -128, i8 -128, i8 -128, i8 -128>
  %111 = sext <4 x i8> %109 to <4 x i32>
  %112 = mul nsw <4 x i32> %83, %111
  %113 = add nsw <4 x i32> %108, %112
  %114 = sext <4 x i8> %110 to <4 x i32>
  %115 = mul nsw <4 x i32> %87, %111
  %116 = mul nsw <4 x i32> %91, %114
  %117 = add nsw <4 x i32> %116, %115
  %118 = sub nsw <4 x i32> %108, %117
  %119 = mul nsw <4 x i32> %95, %114
  %120 = add nsw <4 x i32> %108, %119
  %121 = ashr <4 x i32> %113, <i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <4 x i32> %121, <i32 31, i32 31, i32 31, i32 31>
  %123 = xor <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <4 x i32> zeroinitializer, %123
  %125 = and <4 x i32> %121, %124
  %126 = icmp slt <4 x i32> %125, <i32 255, i32 255, i32 255, i32 255>
  %127 = select <4 x i1> %126, <4 x i32> %125, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %128 = ashr <4 x i32> %118, <i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <4 x i32> %128, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %128, %131
  %133 = icmp slt <4 x i32> %132, <i32 255, i32 255, i32 255, i32 255>
  %134 = select <4 x i1> %133, <4 x i32> %132, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %135 = ashr <4 x i32> %120, <i32 6, i32 6, i32 6, i32 6>
  %136 = lshr <4 x i32> %135, <i32 31, i32 31, i32 31, i32 31>
  %137 = xor <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %138 = sub nsw <4 x i32> zeroinitializer, %137
  %139 = and <4 x i32> %135, %138
  %140 = icmp slt <4 x i32> %139, <i32 255, i32 255, i32 255, i32 255>
  %141 = select <4 x i1> %140, <4 x i32> %139, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %142 = zext <4 x i8> %75 to <4 x i32>
  %143 = mul <4 x i32> %105, %142
  %144 = lshr <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = add nsw <4 x i32> %144, %103
  %146 = add nsw <4 x i32> %145, %112
  %147 = sub nsw <4 x i32> %145, %117
  %148 = add nsw <4 x i32> %145, %119
  %149 = ashr <4 x i32> %146, <i32 6, i32 6, i32 6, i32 6>
  %150 = lshr <4 x i32> %149, <i32 31, i32 31, i32 31, i32 31>
  %151 = xor <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = sub nsw <4 x i32> zeroinitializer, %151
  %153 = and <4 x i32> %149, %152
  %154 = icmp slt <4 x i32> %153, <i32 255, i32 255, i32 255, i32 255>
  %155 = select <4 x i1> %154, <4 x i32> %153, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %156 = ashr <4 x i32> %147, <i32 6, i32 6, i32 6, i32 6>
  %157 = lshr <4 x i32> %156, <i32 31, i32 31, i32 31, i32 31>
  %158 = xor <4 x i32> %157, <i32 1, i32 1, i32 1, i32 1>
  %159 = sub nsw <4 x i32> zeroinitializer, %158
  %160 = and <4 x i32> %156, %159
  %161 = icmp slt <4 x i32> %160, <i32 255, i32 255, i32 255, i32 255>
  %162 = select <4 x i1> %161, <4 x i32> %160, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %163 = ashr <4 x i32> %148, <i32 6, i32 6, i32 6, i32 6>
  %164 = lshr <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %165 = xor <4 x i32> %164, <i32 1, i32 1, i32 1, i32 1>
  %166 = sub nsw <4 x i32> zeroinitializer, %165
  %167 = and <4 x i32> %163, %166
  %168 = icmp slt <4 x i32> %167, <i32 255, i32 255, i32 255, i32 255>
  %169 = select <4 x i1> %168, <4 x i32> %167, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %170 = lshr <4 x i32> %127, <i32 3, i32 3, i32 3, i32 3>
  %171 = lshr <4 x i32> %169, <i32 3, i32 3, i32 3, i32 3>
  %172 = and <4 x i32> %170, <i32 31, i32 31, i32 31, i32 31>
  %173 = shl nsw <4 x i32> %134, <i32 3, i32 3, i32 3, i32 3>
  %174 = and <4 x i32> %173, <i32 2016, i32 2016, i32 2016, i32 2016>
  %175 = or <4 x i32> %174, %172
  %176 = shl nsw <4 x i32> %141, <i32 8, i32 8, i32 8, i32 8>
  %177 = and <4 x i32> %176, <i32 63488, i32 63488, i32 63488, i32 63488>
  %178 = or <4 x i32> %175, %177
  %179 = shl nsw <4 x i32> %155, <i32 13, i32 13, i32 13, i32 13>
  %180 = and <4 x i32> %179, <i32 2031616, i32 2031616, i32 2031616, i32 2031616>
  %181 = or <4 x i32> %178, %180
  %182 = shl <4 x i32> %162, <i32 19, i32 19, i32 19, i32 19>
  %183 = and <4 x i32> %182, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %184 = or <4 x i32> %181, %183
  %185 = shl <4 x i32> %171, <i32 27, i32 27, i32 27, i32 27>
  %186 = or <4 x i32> %184, %185
  %187 = bitcast i8* %70 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 4, !alias.scope !446, !noalias !448
  %188 = add i64 %65, 4
  %189 = icmp eq i64 %188, %55
  br i1 %189, label %190, label %64, !llvm.loop !450

190:                                              ; preds = %64
  %191 = icmp eq i64 %55, %19
  br i1 %191, label %311, label %192

192:                                              ; preds = %190, %21, %9
  %193 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %190 ]
  %194 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %190 ]
  %195 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %190 ]
  %196 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %190 ]
  %197 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %190 ]
  br label %198

198:                                              ; preds = %192, %198
  %199 = phi i32 [ %309, %198 ], [ %193, %192 ]
  %200 = phi i8* [ %305, %198 ], [ %194, %192 ]
  %201 = phi i8* [ %306, %198 ], [ %195, %192 ]
  %202 = phi i8* [ %308, %198 ], [ %196, %192 ]
  %203 = phi i8* [ %307, %198 ], [ %197, %192 ]
  %204 = load i8, i8* %200, align 1
  %205 = load i8, i8* %201, align 1
  %206 = load i8, i8* %203, align 1
  %207 = load i8, i8* %10, align 2
  %208 = zext i8 %207 to i32
  %209 = load i8, i8* %11, align 2
  %210 = zext i8 %209 to i32
  %211 = load i8, i8* %12, align 1
  %212 = zext i8 %211 to i32
  %213 = load i8, i8* %13, align 1
  %214 = zext i8 %213 to i32
  %215 = load i16, i16* %14, align 2
  %216 = sext i16 %215 to i32
  %217 = load i16, i16* %15, align 2
  %218 = sext i16 %217 to i32
  %219 = zext i8 %204 to i32
  %220 = mul nsw i32 %216, 257
  %221 = mul i32 %220, %219
  %222 = lshr i32 %221, 16
  %223 = add nsw i32 %222, %218
  %224 = xor i8 %205, -128
  %225 = xor i8 %206, -128
  %226 = sext i8 %224 to i32
  %227 = mul nsw i32 %208, %226
  %228 = add nsw i32 %223, %227
  %229 = sext i8 %225 to i32
  %230 = mul nsw i32 %210, %226
  %231 = mul nsw i32 %212, %229
  %232 = add nsw i32 %231, %230
  %233 = sub nsw i32 %223, %232
  %234 = mul nsw i32 %214, %229
  %235 = add nsw i32 %223, %234
  %236 = ashr i32 %228, 6
  %237 = lshr i32 %236, 31
  %238 = xor i32 %237, 1
  %239 = sub nsw i32 0, %238
  %240 = and i32 %236, %239
  %241 = icmp slt i32 %240, 255
  %242 = select i1 %241, i32 %240, i32 255
  %243 = ashr i32 %233, 6
  %244 = lshr i32 %243, 31
  %245 = xor i32 %244, 1
  %246 = sub nsw i32 0, %245
  %247 = and i32 %243, %246
  %248 = icmp slt i32 %247, 255
  %249 = select i1 %248, i32 %247, i32 255
  %250 = ashr i32 %235, 6
  %251 = lshr i32 %250, 31
  %252 = xor i32 %251, 1
  %253 = sub nsw i32 0, %252
  %254 = and i32 %250, %253
  %255 = icmp slt i32 %254, 255
  %256 = select i1 %255, i32 %254, i32 255
  %257 = getelementptr inbounds i8, i8* %200, i64 1
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = mul i32 %220, %259
  %261 = lshr i32 %260, 16
  %262 = add nsw i32 %261, %218
  %263 = add nsw i32 %262, %227
  %264 = sub nsw i32 %262, %232
  %265 = add nsw i32 %262, %234
  %266 = ashr i32 %263, 6
  %267 = lshr i32 %266, 31
  %268 = xor i32 %267, 1
  %269 = sub nsw i32 0, %268
  %270 = and i32 %266, %269
  %271 = icmp slt i32 %270, 255
  %272 = select i1 %271, i32 %270, i32 255
  %273 = ashr i32 %264, 6
  %274 = lshr i32 %273, 31
  %275 = xor i32 %274, 1
  %276 = sub nsw i32 0, %275
  %277 = and i32 %273, %276
  %278 = icmp slt i32 %277, 255
  %279 = select i1 %278, i32 %277, i32 255
  %280 = ashr i32 %265, 6
  %281 = lshr i32 %280, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %280, %283
  %285 = icmp slt i32 %284, 255
  %286 = select i1 %285, i32 %284, i32 255
  %287 = lshr i32 %242, 3
  %288 = lshr i32 %286, 3
  %289 = and i32 %287, 31
  %290 = shl nsw i32 %249, 3
  %291 = and i32 %290, 2016
  %292 = or i32 %291, %289
  %293 = shl nsw i32 %256, 8
  %294 = and i32 %293, 63488
  %295 = or i32 %292, %294
  %296 = shl nsw i32 %272, 13
  %297 = and i32 %296, 2031616
  %298 = or i32 %295, %297
  %299 = shl i32 %279, 19
  %300 = and i32 %299, 132120576
  %301 = or i32 %298, %300
  %302 = shl i32 %288, 27
  %303 = or i32 %301, %302
  %304 = bitcast i8* %202 to i32*
  store i32 %303, i32* %304, align 4
  %305 = getelementptr inbounds i8, i8* %200, i64 2
  %306 = getelementptr inbounds i8, i8* %201, i64 1
  %307 = getelementptr inbounds i8, i8* %203, i64 1
  %308 = getelementptr inbounds i8, i8* %202, i64 4
  %309 = add nuw nsw i32 %199, 2
  %310 = icmp slt i32 %309, %7
  br i1 %310, label %198, label %311, !llvm.loop !451

311:                                              ; preds = %198, %190, %6
  %312 = phi i8* [ %2, %6 ], [ %63, %190 ], [ %307, %198 ]
  %313 = phi i8* [ %3, %6 ], [ %62, %190 ], [ %308, %198 ]
  %314 = phi i8* [ %1, %6 ], [ %60, %190 ], [ %306, %198 ]
  %315 = phi i8* [ %0, %6 ], [ %59, %190 ], [ %305, %198 ]
  %316 = and i32 %5, 1
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %390, label %318

318:                                              ; preds = %311
  %319 = load i8, i8* %315, align 1
  %320 = load i8, i8* %314, align 1
  %321 = load i8, i8* %312, align 1
  %322 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %323 = load i8, i8* %322, align 2
  %324 = zext i8 %323 to i32
  %325 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %326 = load i8, i8* %325, align 2
  %327 = zext i8 %326 to i32
  %328 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i32
  %331 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %335 = load i16, i16* %334, align 2
  %336 = sext i16 %335 to i32
  %337 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %338 = load i16, i16* %337, align 2
  %339 = sext i16 %338 to i32
  %340 = zext i8 %319 to i32
  %341 = mul nuw nsw i32 %340, 257
  %342 = mul i32 %341, %336
  %343 = lshr i32 %342, 16
  %344 = add nsw i32 %343, %339
  %345 = xor i8 %320, -128
  %346 = xor i8 %321, -128
  %347 = sext i8 %345 to i32
  %348 = mul nsw i32 %324, %347
  %349 = add nsw i32 %344, %348
  %350 = sext i8 %346 to i32
  %351 = mul nsw i32 %327, %347
  %352 = mul nsw i32 %330, %350
  %353 = add nsw i32 %352, %351
  %354 = sub nsw i32 %344, %353
  %355 = mul nsw i32 %333, %350
  %356 = add nsw i32 %344, %355
  %357 = ashr i32 %349, 6
  %358 = lshr i32 %357, 31
  %359 = xor i32 %358, 1
  %360 = sub nsw i32 0, %359
  %361 = and i32 %357, %360
  %362 = icmp slt i32 %361, 255
  %363 = select i1 %362, i32 %361, i32 255
  %364 = trunc i32 %363 to i16
  %365 = ashr i32 %354, 6
  %366 = lshr i32 %365, 31
  %367 = xor i32 %366, 1
  %368 = sub nsw i32 0, %367
  %369 = and i32 %365, %368
  %370 = icmp slt i32 %369, 255
  %371 = select i1 %370, i32 %369, i32 255
  %372 = trunc i32 %371 to i16
  %373 = ashr i32 %356, 6
  %374 = lshr i32 %373, 31
  %375 = xor i32 %374, 1
  %376 = sub nsw i32 0, %375
  %377 = and i32 %373, %376
  %378 = icmp slt i32 %377, 255
  %379 = select i1 %378, i32 %377, i32 255
  %380 = trunc i32 %379 to i16
  %381 = lshr i16 %364, 3
  %382 = lshr i16 %380, 3
  %383 = and i16 %381, 31
  %384 = shl i16 %372, 3
  %385 = and i16 %384, 2016
  %386 = or i16 %385, %383
  %387 = shl i16 %382, 11
  %388 = or i16 %386, %387
  %389 = bitcast i8* %313 to i16*
  store i16 %388, i16* %389, align 2
  br label %390

390:                                              ; preds = %311, %318
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @NV12ToARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %4, -1
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %355

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %15 = add i32 %4, -2
  %16 = lshr i32 %15, 1
  %17 = add nuw i32 %16, 1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i32 %17, 8
  br i1 %19, label %219, label %20

20:                                               ; preds = %8
  %21 = add i32 %4, -2
  %22 = lshr i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = shl nuw nsw i64 %23, 3
  %25 = add nuw nsw i64 %24, 8
  %26 = getelementptr i8, i8* %2, i64 %25
  %27 = and i32 %21, -2
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %29
  %32 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i8, i8* %33, i64 1
  %35 = icmp ugt i8* %30, %2
  %36 = icmp ugt i8* %26, %0
  %37 = and i1 %35, %36
  %38 = icmp ugt i8* %31, %2
  %39 = icmp ugt i8* %26, %1
  %40 = and i1 %38, %39
  %41 = or i1 %37, %40
  %42 = bitcast i16* %14 to i8*
  %43 = icmp ugt i8* %34, %2
  %44 = icmp ugt i8* %26, %42
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  br i1 %46, label %219, label %47

47:                                               ; preds = %20
  %48 = and i64 %18, 4294967288
  %49 = trunc i64 %48 to i32
  %50 = shl i32 %49, 1
  %51 = shl nuw nsw i64 %48, 1
  %52 = getelementptr i8, i8* %0, i64 %51
  %53 = shl nuw nsw i64 %48, 1
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = shl nuw nsw i64 %48, 3
  %56 = getelementptr i8, i8* %2, i64 %55
  br label %57

57:                                               ; preds = %57, %47
  %58 = phi i64 [ 0, %47 ], [ %215, %57 ]
  %59 = shl i64 %58, 1
  %60 = getelementptr i8, i8* %0, i64 %59
  %61 = shl i64 %58, 1
  %62 = getelementptr i8, i8* %1, i64 %61
  %63 = shl i64 %58, 3
  %64 = bitcast i8* %60 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %67 = shufflevector <16 x i8> %65, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %68 = bitcast i8* %62 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = load i8, i8* %9, align 2, !alias.scope !452
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %10, align 2, !alias.scope !452
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %11, align 1, !alias.scope !452
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i8, i8* %12, align 1, !alias.scope !452
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i16, i16* %13, align 2, !alias.scope !452
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = load i16, i16* %14, align 2, !alias.scope !452
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = zext <8 x i8> %66 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %96, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %98 = mul <8 x i32> %97, %91
  %99 = lshr <8 x i32> %98, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %100 = add nsw <8 x i32> %99, %95
  %101 = xor <8 x i8> %70, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %102 = xor <8 x i8> %71, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %103 = sext <8 x i8> %101 to <8 x i32>
  %104 = mul nsw <8 x i32> %75, %103
  %105 = add nsw <8 x i32> %100, %104
  %106 = sext <8 x i8> %102 to <8 x i32>
  %107 = mul nsw <8 x i32> %79, %103
  %108 = mul nsw <8 x i32> %83, %106
  %109 = add nsw <8 x i32> %108, %107
  %110 = sub nsw <8 x i32> %100, %109
  %111 = mul nsw <8 x i32> %87, %106
  %112 = add nsw <8 x i32> %100, %111
  %113 = ashr <8 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %114 = lshr <8 x i32> %113, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %115 = xor <8 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = sub nsw <8 x i32> zeroinitializer, %115
  %117 = and <8 x i32> %113, %116
  %118 = icmp slt <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = select <8 x i1> %118, <8 x i32> %117, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %120 = trunc <8 x i32> %119 to <8 x i8>
  %121 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <8 x i32> %121, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %123 = xor <8 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <8 x i32> zeroinitializer, %123
  %125 = and <8 x i32> %121, %124
  %126 = icmp slt <8 x i32> %125, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = select <8 x i1> %126, <8 x i32> %125, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = trunc <8 x i32> %127 to <8 x i8>
  %129 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = lshr <8 x i32> %129, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %131 = xor <8 x i32> %130, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %132 = sub nsw <8 x i32> zeroinitializer, %131
  %133 = and <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = select <8 x i1> %134, <8 x i32> %133, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = trunc <8 x i32> %135 to <8 x i8>
  %137 = bitcast i8* %62 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %140 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %141 = load i8, i8* %9, align 2, !alias.scope !452
  %142 = insertelement <8 x i8> undef, i8 %141, i32 0
  %143 = shufflevector <8 x i8> %142, <8 x i8> undef, <8 x i32> zeroinitializer
  %144 = zext <8 x i8> %143 to <8 x i32>
  %145 = load i8, i8* %10, align 2, !alias.scope !452
  %146 = insertelement <8 x i8> undef, i8 %145, i32 0
  %147 = shufflevector <8 x i8> %146, <8 x i8> undef, <8 x i32> zeroinitializer
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = load i8, i8* %11, align 1, !alias.scope !452
  %150 = insertelement <8 x i8> undef, i8 %149, i32 0
  %151 = shufflevector <8 x i8> %150, <8 x i8> undef, <8 x i32> zeroinitializer
  %152 = zext <8 x i8> %151 to <8 x i32>
  %153 = load i8, i8* %12, align 1, !alias.scope !452
  %154 = insertelement <8 x i8> undef, i8 %153, i32 0
  %155 = shufflevector <8 x i8> %154, <8 x i8> undef, <8 x i32> zeroinitializer
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = load i16, i16* %13, align 2, !alias.scope !452
  %158 = insertelement <8 x i16> undef, i16 %157, i32 0
  %159 = shufflevector <8 x i16> %158, <8 x i16> undef, <8 x i32> zeroinitializer
  %160 = sext <8 x i16> %159 to <8 x i32>
  %161 = load i16, i16* %14, align 2, !alias.scope !452
  %162 = insertelement <8 x i16> undef, i16 %161, i32 0
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> zeroinitializer
  %164 = sext <8 x i16> %163 to <8 x i32>
  %165 = zext <8 x i8> %67 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %165, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %167 = mul <8 x i32> %166, %160
  %168 = lshr <8 x i32> %167, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %169 = add nsw <8 x i32> %168, %164
  %170 = xor <8 x i8> %139, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %171 = xor <8 x i8> %140, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %172 = sext <8 x i8> %170 to <8 x i32>
  %173 = mul nsw <8 x i32> %144, %172
  %174 = add nsw <8 x i32> %169, %173
  %175 = sext <8 x i8> %171 to <8 x i32>
  %176 = mul nsw <8 x i32> %148, %172
  %177 = mul nsw <8 x i32> %152, %175
  %178 = add nsw <8 x i32> %177, %176
  %179 = sub nsw <8 x i32> %169, %178
  %180 = mul nsw <8 x i32> %156, %175
  %181 = add nsw <8 x i32> %169, %180
  %182 = ashr <8 x i32> %174, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %183 = lshr <8 x i32> %182, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %184 = xor <8 x i32> %183, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %185 = sub nsw <8 x i32> zeroinitializer, %184
  %186 = and <8 x i32> %182, %185
  %187 = icmp slt <8 x i32> %186, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = select <8 x i1> %187, <8 x i32> %186, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %189 = trunc <8 x i32> %188 to <8 x i8>
  %190 = ashr <8 x i32> %179, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %191 = lshr <8 x i32> %190, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %192 = xor <8 x i32> %191, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %193 = sub nsw <8 x i32> zeroinitializer, %192
  %194 = and <8 x i32> %190, %193
  %195 = icmp slt <8 x i32> %194, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = select <8 x i1> %195, <8 x i32> %194, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %197 = trunc <8 x i32> %196 to <8 x i8>
  %198 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %199 = lshr <8 x i32> %198, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %200 = xor <8 x i32> %199, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %201 = sub nsw <8 x i32> zeroinitializer, %200
  %202 = and <8 x i32> %198, %201
  %203 = icmp slt <8 x i32> %202, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = select <8 x i1> %203, <8 x i32> %202, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %205 = trunc <8 x i32> %204 to <8 x i8>
  %206 = getelementptr inbounds i8, i8* %2, i64 %63
  %207 = bitcast i8* %206 to <64 x i8>*
  %208 = shufflevector <8 x i8> %120, <8 x i8> %128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %209 = shufflevector <8 x i8> %136, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %210 = shufflevector <8 x i8> %189, <8 x i8> %197, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %211 = shufflevector <8 x i8> %205, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %212 = shufflevector <16 x i8> %208, <16 x i8> %209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %213 = shufflevector <16 x i8> %210, <16 x i8> %211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %214 = shufflevector <32 x i8> %212, <32 x i8> %213, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %214, <64 x i8>* %207, align 1
  %215 = add i64 %58, 8
  %216 = icmp eq i64 %215, %48
  br i1 %216, label %217, label %57, !llvm.loop !455

217:                                              ; preds = %57
  %218 = icmp eq i64 %48, %18
  br i1 %218, label %355, label %219

219:                                              ; preds = %217, %20, %8
  %220 = phi i32 [ 0, %20 ], [ 0, %8 ], [ %50, %217 ]
  %221 = phi i8* [ %0, %20 ], [ %0, %8 ], [ %52, %217 ]
  %222 = phi i8* [ %1, %20 ], [ %1, %8 ], [ %54, %217 ]
  %223 = phi i8* [ %2, %20 ], [ %2, %8 ], [ %56, %217 ]
  br label %224

224:                                              ; preds = %219, %224
  %225 = phi i32 [ %353, %224 ], [ %220, %219 ]
  %226 = phi i8* [ %350, %224 ], [ %221, %219 ]
  %227 = phi i8* [ %351, %224 ], [ %222, %219 ]
  %228 = phi i8* [ %352, %224 ], [ %223, %219 ]
  %229 = load i8, i8* %226, align 1
  %230 = load i8, i8* %227, align 1
  %231 = getelementptr inbounds i8, i8* %227, i64 1
  %232 = load i8, i8* %231, align 1
  %233 = getelementptr inbounds i8, i8* %228, i64 1
  %234 = getelementptr inbounds i8, i8* %228, i64 2
  %235 = load i8, i8* %9, align 2
  %236 = zext i8 %235 to i32
  %237 = load i8, i8* %10, align 2
  %238 = zext i8 %237 to i32
  %239 = load i8, i8* %11, align 1
  %240 = zext i8 %239 to i32
  %241 = load i8, i8* %12, align 1
  %242 = zext i8 %241 to i32
  %243 = load i16, i16* %13, align 2
  %244 = sext i16 %243 to i32
  %245 = load i16, i16* %14, align 2
  %246 = sext i16 %245 to i32
  %247 = zext i8 %229 to i32
  %248 = mul nuw nsw i32 %247, 257
  %249 = mul i32 %248, %244
  %250 = lshr i32 %249, 16
  %251 = add nsw i32 %250, %246
  %252 = xor i8 %230, -128
  %253 = xor i8 %232, -128
  %254 = sext i8 %252 to i32
  %255 = mul nsw i32 %236, %254
  %256 = add nsw i32 %251, %255
  %257 = sext i8 %253 to i32
  %258 = mul nsw i32 %238, %254
  %259 = mul nsw i32 %240, %257
  %260 = add nsw i32 %259, %258
  %261 = sub nsw i32 %251, %260
  %262 = mul nsw i32 %242, %257
  %263 = add nsw i32 %251, %262
  %264 = ashr i32 %256, 6
  %265 = lshr i32 %264, 31
  %266 = xor i32 %265, 1
  %267 = sub nsw i32 0, %266
  %268 = and i32 %264, %267
  %269 = icmp slt i32 %268, 255
  %270 = select i1 %269, i32 %268, i32 255
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %228, align 1
  %272 = ashr i32 %261, 6
  %273 = lshr i32 %272, 31
  %274 = xor i32 %273, 1
  %275 = sub nsw i32 0, %274
  %276 = and i32 %272, %275
  %277 = icmp slt i32 %276, 255
  %278 = select i1 %277, i32 %276, i32 255
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %233, align 1
  %280 = ashr i32 %263, 6
  %281 = lshr i32 %280, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %280, %283
  %285 = icmp slt i32 %284, 255
  %286 = select i1 %285, i32 %284, i32 255
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %234, align 1
  %288 = getelementptr inbounds i8, i8* %228, i64 3
  store i8 -1, i8* %288, align 1
  %289 = getelementptr inbounds i8, i8* %226, i64 1
  %290 = load i8, i8* %289, align 1
  %291 = load i8, i8* %227, align 1
  %292 = load i8, i8* %231, align 1
  %293 = getelementptr inbounds i8, i8* %228, i64 4
  %294 = getelementptr inbounds i8, i8* %228, i64 5
  %295 = getelementptr inbounds i8, i8* %228, i64 6
  %296 = load i8, i8* %9, align 2
  %297 = zext i8 %296 to i32
  %298 = load i8, i8* %10, align 2
  %299 = zext i8 %298 to i32
  %300 = load i8, i8* %11, align 1
  %301 = zext i8 %300 to i32
  %302 = load i8, i8* %12, align 1
  %303 = zext i8 %302 to i32
  %304 = load i16, i16* %13, align 2
  %305 = sext i16 %304 to i32
  %306 = load i16, i16* %14, align 2
  %307 = sext i16 %306 to i32
  %308 = zext i8 %290 to i32
  %309 = mul nuw nsw i32 %308, 257
  %310 = mul i32 %309, %305
  %311 = lshr i32 %310, 16
  %312 = add nsw i32 %311, %307
  %313 = xor i8 %291, -128
  %314 = xor i8 %292, -128
  %315 = sext i8 %313 to i32
  %316 = mul nsw i32 %297, %315
  %317 = add nsw i32 %312, %316
  %318 = sext i8 %314 to i32
  %319 = mul nsw i32 %299, %315
  %320 = mul nsw i32 %301, %318
  %321 = add nsw i32 %320, %319
  %322 = sub nsw i32 %312, %321
  %323 = mul nsw i32 %303, %318
  %324 = add nsw i32 %312, %323
  %325 = ashr i32 %317, 6
  %326 = lshr i32 %325, 31
  %327 = xor i32 %326, 1
  %328 = sub nsw i32 0, %327
  %329 = and i32 %325, %328
  %330 = icmp slt i32 %329, 255
  %331 = select i1 %330, i32 %329, i32 255
  %332 = trunc i32 %331 to i8
  store i8 %332, i8* %293, align 1
  %333 = ashr i32 %322, 6
  %334 = lshr i32 %333, 31
  %335 = xor i32 %334, 1
  %336 = sub nsw i32 0, %335
  %337 = and i32 %333, %336
  %338 = icmp slt i32 %337, 255
  %339 = select i1 %338, i32 %337, i32 255
  %340 = trunc i32 %339 to i8
  store i8 %340, i8* %294, align 1
  %341 = ashr i32 %324, 6
  %342 = lshr i32 %341, 31
  %343 = xor i32 %342, 1
  %344 = sub nsw i32 0, %343
  %345 = and i32 %341, %344
  %346 = icmp slt i32 %345, 255
  %347 = select i1 %346, i32 %345, i32 255
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %295, align 1
  %349 = getelementptr inbounds i8, i8* %228, i64 7
  store i8 -1, i8* %349, align 1
  %350 = getelementptr inbounds i8, i8* %226, i64 2
  %351 = getelementptr inbounds i8, i8* %227, i64 2
  %352 = getelementptr inbounds i8, i8* %228, i64 8
  %353 = add nuw nsw i32 %225, 2
  %354 = icmp slt i32 %353, %6
  br i1 %354, label %224, label %355, !llvm.loop !456

355:                                              ; preds = %224, %217, %5
  %356 = phi i8* [ %2, %5 ], [ %56, %217 ], [ %352, %224 ]
  %357 = phi i8* [ %1, %5 ], [ %54, %217 ], [ %351, %224 ]
  %358 = phi i8* [ %0, %5 ], [ %52, %217 ], [ %350, %224 ]
  %359 = and i32 %4, 1
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %428, label %361

361:                                              ; preds = %355
  %362 = load i8, i8* %358, align 1
  %363 = load i8, i8* %357, align 1
  %364 = getelementptr inbounds i8, i8* %357, i64 1
  %365 = load i8, i8* %364, align 1
  %366 = getelementptr inbounds i8, i8* %356, i64 1
  %367 = getelementptr inbounds i8, i8* %356, i64 2
  %368 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %369 = load i8, i8* %368, align 2
  %370 = zext i8 %369 to i32
  %371 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %372 = load i8, i8* %371, align 2
  %373 = zext i8 %372 to i32
  %374 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %378 = load i8, i8* %377, align 1
  %379 = zext i8 %378 to i32
  %380 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %381 = load i16, i16* %380, align 2
  %382 = sext i16 %381 to i32
  %383 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %384 = load i16, i16* %383, align 2
  %385 = sext i16 %384 to i32
  %386 = zext i8 %362 to i32
  %387 = mul nuw nsw i32 %386, 257
  %388 = mul i32 %387, %382
  %389 = lshr i32 %388, 16
  %390 = add nsw i32 %389, %385
  %391 = xor i8 %363, -128
  %392 = xor i8 %365, -128
  %393 = sext i8 %391 to i32
  %394 = mul nsw i32 %370, %393
  %395 = add nsw i32 %390, %394
  %396 = sext i8 %392 to i32
  %397 = mul nsw i32 %373, %393
  %398 = mul nsw i32 %376, %396
  %399 = add nsw i32 %398, %397
  %400 = sub nsw i32 %390, %399
  %401 = mul nsw i32 %379, %396
  %402 = add nsw i32 %390, %401
  %403 = ashr i32 %395, 6
  %404 = lshr i32 %403, 31
  %405 = xor i32 %404, 1
  %406 = sub nsw i32 0, %405
  %407 = and i32 %403, %406
  %408 = icmp slt i32 %407, 255
  %409 = select i1 %408, i32 %407, i32 255
  %410 = trunc i32 %409 to i8
  store i8 %410, i8* %356, align 1
  %411 = ashr i32 %400, 6
  %412 = lshr i32 %411, 31
  %413 = xor i32 %412, 1
  %414 = sub nsw i32 0, %413
  %415 = and i32 %411, %414
  %416 = icmp slt i32 %415, 255
  %417 = select i1 %416, i32 %415, i32 255
  %418 = trunc i32 %417 to i8
  store i8 %418, i8* %366, align 1
  %419 = ashr i32 %402, 6
  %420 = lshr i32 %419, 31
  %421 = xor i32 %420, 1
  %422 = sub nsw i32 0, %421
  %423 = and i32 %419, %422
  %424 = icmp slt i32 %423, 255
  %425 = select i1 %424, i32 %423, i32 255
  %426 = trunc i32 %425 to i8
  store i8 %426, i8* %367, align 1
  %427 = getelementptr inbounds i8, i8* %356, i64 3
  store i8 -1, i8* %427, align 1
  br label %428

428:                                              ; preds = %355, %361
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @NV21ToARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %4, -1
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %355

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %15 = add i32 %4, -2
  %16 = lshr i32 %15, 1
  %17 = add nuw i32 %16, 1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i32 %17, 8
  br i1 %19, label %219, label %20

20:                                               ; preds = %8
  %21 = add i32 %4, -2
  %22 = lshr i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = shl nuw nsw i64 %23, 3
  %25 = add nuw nsw i64 %24, 8
  %26 = getelementptr i8, i8* %2, i64 %25
  %27 = and i32 %21, -2
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %29
  %32 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i8, i8* %33, i64 1
  %35 = icmp ugt i8* %30, %2
  %36 = icmp ugt i8* %26, %0
  %37 = and i1 %35, %36
  %38 = icmp ugt i8* %31, %2
  %39 = icmp ugt i8* %26, %1
  %40 = and i1 %38, %39
  %41 = or i1 %37, %40
  %42 = bitcast i16* %14 to i8*
  %43 = icmp ugt i8* %34, %2
  %44 = icmp ugt i8* %26, %42
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  br i1 %46, label %219, label %47

47:                                               ; preds = %20
  %48 = and i64 %18, 4294967288
  %49 = trunc i64 %48 to i32
  %50 = shl i32 %49, 1
  %51 = shl nuw nsw i64 %48, 1
  %52 = getelementptr i8, i8* %0, i64 %51
  %53 = shl nuw nsw i64 %48, 1
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = shl nuw nsw i64 %48, 3
  %56 = getelementptr i8, i8* %2, i64 %55
  br label %57

57:                                               ; preds = %57, %47
  %58 = phi i64 [ 0, %47 ], [ %215, %57 ]
  %59 = shl i64 %58, 1
  %60 = getelementptr i8, i8* %0, i64 %59
  %61 = shl i64 %58, 1
  %62 = shl i64 %58, 3
  %63 = bitcast i8* %60 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %67 = getelementptr inbounds i8, i8* %1, i64 %61
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = load i8, i8* %9, align 2, !alias.scope !457
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %10, align 2, !alias.scope !457
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %11, align 1, !alias.scope !457
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i8, i8* %12, align 1, !alias.scope !457
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i16, i16* %13, align 2, !alias.scope !457
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = load i16, i16* %14, align 2, !alias.scope !457
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = zext <8 x i8> %65 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %96, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %98 = mul <8 x i32> %97, %91
  %99 = lshr <8 x i32> %98, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %100 = add nsw <8 x i32> %99, %95
  %101 = xor <8 x i8> %71, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %102 = xor <8 x i8> %70, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %103 = sext <8 x i8> %101 to <8 x i32>
  %104 = mul nsw <8 x i32> %75, %103
  %105 = add nsw <8 x i32> %100, %104
  %106 = sext <8 x i8> %102 to <8 x i32>
  %107 = mul nsw <8 x i32> %79, %103
  %108 = mul nsw <8 x i32> %83, %106
  %109 = add nsw <8 x i32> %108, %107
  %110 = sub nsw <8 x i32> %100, %109
  %111 = mul nsw <8 x i32> %87, %106
  %112 = add nsw <8 x i32> %100, %111
  %113 = ashr <8 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %114 = lshr <8 x i32> %113, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %115 = xor <8 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = sub nsw <8 x i32> zeroinitializer, %115
  %117 = and <8 x i32> %113, %116
  %118 = icmp slt <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = select <8 x i1> %118, <8 x i32> %117, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %120 = trunc <8 x i32> %119 to <8 x i8>
  %121 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <8 x i32> %121, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %123 = xor <8 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <8 x i32> zeroinitializer, %123
  %125 = and <8 x i32> %121, %124
  %126 = icmp slt <8 x i32> %125, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = select <8 x i1> %126, <8 x i32> %125, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = trunc <8 x i32> %127 to <8 x i8>
  %129 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = lshr <8 x i32> %129, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %131 = xor <8 x i32> %130, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %132 = sub nsw <8 x i32> zeroinitializer, %131
  %133 = and <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = select <8 x i1> %134, <8 x i32> %133, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = trunc <8 x i32> %135 to <8 x i8>
  %137 = bitcast i8* %67 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %140 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %141 = load i8, i8* %9, align 2, !alias.scope !457
  %142 = insertelement <8 x i8> undef, i8 %141, i32 0
  %143 = shufflevector <8 x i8> %142, <8 x i8> undef, <8 x i32> zeroinitializer
  %144 = zext <8 x i8> %143 to <8 x i32>
  %145 = load i8, i8* %10, align 2, !alias.scope !457
  %146 = insertelement <8 x i8> undef, i8 %145, i32 0
  %147 = shufflevector <8 x i8> %146, <8 x i8> undef, <8 x i32> zeroinitializer
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = load i8, i8* %11, align 1, !alias.scope !457
  %150 = insertelement <8 x i8> undef, i8 %149, i32 0
  %151 = shufflevector <8 x i8> %150, <8 x i8> undef, <8 x i32> zeroinitializer
  %152 = zext <8 x i8> %151 to <8 x i32>
  %153 = load i8, i8* %12, align 1, !alias.scope !457
  %154 = insertelement <8 x i8> undef, i8 %153, i32 0
  %155 = shufflevector <8 x i8> %154, <8 x i8> undef, <8 x i32> zeroinitializer
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = load i16, i16* %13, align 2, !alias.scope !457
  %158 = insertelement <8 x i16> undef, i16 %157, i32 0
  %159 = shufflevector <8 x i16> %158, <8 x i16> undef, <8 x i32> zeroinitializer
  %160 = sext <8 x i16> %159 to <8 x i32>
  %161 = load i16, i16* %14, align 2, !alias.scope !457
  %162 = insertelement <8 x i16> undef, i16 %161, i32 0
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> zeroinitializer
  %164 = sext <8 x i16> %163 to <8 x i32>
  %165 = zext <8 x i8> %66 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %165, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %167 = mul <8 x i32> %166, %160
  %168 = lshr <8 x i32> %167, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %169 = add nsw <8 x i32> %168, %164
  %170 = xor <8 x i8> %140, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %171 = xor <8 x i8> %139, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %172 = sext <8 x i8> %170 to <8 x i32>
  %173 = mul nsw <8 x i32> %144, %172
  %174 = add nsw <8 x i32> %169, %173
  %175 = sext <8 x i8> %171 to <8 x i32>
  %176 = mul nsw <8 x i32> %148, %172
  %177 = mul nsw <8 x i32> %152, %175
  %178 = add nsw <8 x i32> %177, %176
  %179 = sub nsw <8 x i32> %169, %178
  %180 = mul nsw <8 x i32> %156, %175
  %181 = add nsw <8 x i32> %169, %180
  %182 = ashr <8 x i32> %174, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %183 = lshr <8 x i32> %182, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %184 = xor <8 x i32> %183, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %185 = sub nsw <8 x i32> zeroinitializer, %184
  %186 = and <8 x i32> %182, %185
  %187 = icmp slt <8 x i32> %186, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = select <8 x i1> %187, <8 x i32> %186, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %189 = trunc <8 x i32> %188 to <8 x i8>
  %190 = ashr <8 x i32> %179, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %191 = lshr <8 x i32> %190, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %192 = xor <8 x i32> %191, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %193 = sub nsw <8 x i32> zeroinitializer, %192
  %194 = and <8 x i32> %190, %193
  %195 = icmp slt <8 x i32> %194, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = select <8 x i1> %195, <8 x i32> %194, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %197 = trunc <8 x i32> %196 to <8 x i8>
  %198 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %199 = lshr <8 x i32> %198, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %200 = xor <8 x i32> %199, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %201 = sub nsw <8 x i32> zeroinitializer, %200
  %202 = and <8 x i32> %198, %201
  %203 = icmp slt <8 x i32> %202, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = select <8 x i1> %203, <8 x i32> %202, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %205 = trunc <8 x i32> %204 to <8 x i8>
  %206 = getelementptr inbounds i8, i8* %2, i64 %62
  %207 = bitcast i8* %206 to <64 x i8>*
  %208 = shufflevector <8 x i8> %120, <8 x i8> %128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %209 = shufflevector <8 x i8> %136, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %210 = shufflevector <8 x i8> %189, <8 x i8> %197, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %211 = shufflevector <8 x i8> %205, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %212 = shufflevector <16 x i8> %208, <16 x i8> %209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %213 = shufflevector <16 x i8> %210, <16 x i8> %211, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %214 = shufflevector <32 x i8> %212, <32 x i8> %213, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %214, <64 x i8>* %207, align 1
  %215 = add i64 %58, 8
  %216 = icmp eq i64 %215, %48
  br i1 %216, label %217, label %57, !llvm.loop !460

217:                                              ; preds = %57
  %218 = icmp eq i64 %48, %18
  br i1 %218, label %355, label %219

219:                                              ; preds = %217, %20, %8
  %220 = phi i32 [ 0, %20 ], [ 0, %8 ], [ %50, %217 ]
  %221 = phi i8* [ %0, %20 ], [ %0, %8 ], [ %52, %217 ]
  %222 = phi i8* [ %1, %20 ], [ %1, %8 ], [ %54, %217 ]
  %223 = phi i8* [ %2, %20 ], [ %2, %8 ], [ %56, %217 ]
  br label %224

224:                                              ; preds = %219, %224
  %225 = phi i32 [ %353, %224 ], [ %220, %219 ]
  %226 = phi i8* [ %350, %224 ], [ %221, %219 ]
  %227 = phi i8* [ %351, %224 ], [ %222, %219 ]
  %228 = phi i8* [ %352, %224 ], [ %223, %219 ]
  %229 = load i8, i8* %226, align 1
  %230 = getelementptr inbounds i8, i8* %227, i64 1
  %231 = load i8, i8* %230, align 1
  %232 = load i8, i8* %227, align 1
  %233 = getelementptr inbounds i8, i8* %228, i64 1
  %234 = getelementptr inbounds i8, i8* %228, i64 2
  %235 = load i8, i8* %9, align 2
  %236 = zext i8 %235 to i32
  %237 = load i8, i8* %10, align 2
  %238 = zext i8 %237 to i32
  %239 = load i8, i8* %11, align 1
  %240 = zext i8 %239 to i32
  %241 = load i8, i8* %12, align 1
  %242 = zext i8 %241 to i32
  %243 = load i16, i16* %13, align 2
  %244 = sext i16 %243 to i32
  %245 = load i16, i16* %14, align 2
  %246 = sext i16 %245 to i32
  %247 = zext i8 %229 to i32
  %248 = mul nuw nsw i32 %247, 257
  %249 = mul i32 %248, %244
  %250 = lshr i32 %249, 16
  %251 = add nsw i32 %250, %246
  %252 = xor i8 %231, -128
  %253 = xor i8 %232, -128
  %254 = sext i8 %252 to i32
  %255 = mul nsw i32 %236, %254
  %256 = add nsw i32 %251, %255
  %257 = sext i8 %253 to i32
  %258 = mul nsw i32 %238, %254
  %259 = mul nsw i32 %240, %257
  %260 = add nsw i32 %259, %258
  %261 = sub nsw i32 %251, %260
  %262 = mul nsw i32 %242, %257
  %263 = add nsw i32 %251, %262
  %264 = ashr i32 %256, 6
  %265 = lshr i32 %264, 31
  %266 = xor i32 %265, 1
  %267 = sub nsw i32 0, %266
  %268 = and i32 %264, %267
  %269 = icmp slt i32 %268, 255
  %270 = select i1 %269, i32 %268, i32 255
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %228, align 1
  %272 = ashr i32 %261, 6
  %273 = lshr i32 %272, 31
  %274 = xor i32 %273, 1
  %275 = sub nsw i32 0, %274
  %276 = and i32 %272, %275
  %277 = icmp slt i32 %276, 255
  %278 = select i1 %277, i32 %276, i32 255
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %233, align 1
  %280 = ashr i32 %263, 6
  %281 = lshr i32 %280, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %280, %283
  %285 = icmp slt i32 %284, 255
  %286 = select i1 %285, i32 %284, i32 255
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %234, align 1
  %288 = getelementptr inbounds i8, i8* %228, i64 3
  store i8 -1, i8* %288, align 1
  %289 = getelementptr inbounds i8, i8* %226, i64 1
  %290 = load i8, i8* %289, align 1
  %291 = load i8, i8* %230, align 1
  %292 = load i8, i8* %227, align 1
  %293 = getelementptr inbounds i8, i8* %228, i64 4
  %294 = getelementptr inbounds i8, i8* %228, i64 5
  %295 = getelementptr inbounds i8, i8* %228, i64 6
  %296 = load i8, i8* %9, align 2
  %297 = zext i8 %296 to i32
  %298 = load i8, i8* %10, align 2
  %299 = zext i8 %298 to i32
  %300 = load i8, i8* %11, align 1
  %301 = zext i8 %300 to i32
  %302 = load i8, i8* %12, align 1
  %303 = zext i8 %302 to i32
  %304 = load i16, i16* %13, align 2
  %305 = sext i16 %304 to i32
  %306 = load i16, i16* %14, align 2
  %307 = sext i16 %306 to i32
  %308 = zext i8 %290 to i32
  %309 = mul nuw nsw i32 %308, 257
  %310 = mul i32 %309, %305
  %311 = lshr i32 %310, 16
  %312 = add nsw i32 %311, %307
  %313 = xor i8 %291, -128
  %314 = xor i8 %292, -128
  %315 = sext i8 %313 to i32
  %316 = mul nsw i32 %297, %315
  %317 = add nsw i32 %312, %316
  %318 = sext i8 %314 to i32
  %319 = mul nsw i32 %299, %315
  %320 = mul nsw i32 %301, %318
  %321 = add nsw i32 %320, %319
  %322 = sub nsw i32 %312, %321
  %323 = mul nsw i32 %303, %318
  %324 = add nsw i32 %312, %323
  %325 = ashr i32 %317, 6
  %326 = lshr i32 %325, 31
  %327 = xor i32 %326, 1
  %328 = sub nsw i32 0, %327
  %329 = and i32 %325, %328
  %330 = icmp slt i32 %329, 255
  %331 = select i1 %330, i32 %329, i32 255
  %332 = trunc i32 %331 to i8
  store i8 %332, i8* %293, align 1
  %333 = ashr i32 %322, 6
  %334 = lshr i32 %333, 31
  %335 = xor i32 %334, 1
  %336 = sub nsw i32 0, %335
  %337 = and i32 %333, %336
  %338 = icmp slt i32 %337, 255
  %339 = select i1 %338, i32 %337, i32 255
  %340 = trunc i32 %339 to i8
  store i8 %340, i8* %294, align 1
  %341 = ashr i32 %324, 6
  %342 = lshr i32 %341, 31
  %343 = xor i32 %342, 1
  %344 = sub nsw i32 0, %343
  %345 = and i32 %341, %344
  %346 = icmp slt i32 %345, 255
  %347 = select i1 %346, i32 %345, i32 255
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %295, align 1
  %349 = getelementptr inbounds i8, i8* %228, i64 7
  store i8 -1, i8* %349, align 1
  %350 = getelementptr inbounds i8, i8* %226, i64 2
  %351 = getelementptr inbounds i8, i8* %227, i64 2
  %352 = getelementptr inbounds i8, i8* %228, i64 8
  %353 = add nuw nsw i32 %225, 2
  %354 = icmp slt i32 %353, %6
  br i1 %354, label %224, label %355, !llvm.loop !461

355:                                              ; preds = %224, %217, %5
  %356 = phi i8* [ %2, %5 ], [ %56, %217 ], [ %352, %224 ]
  %357 = phi i8* [ %1, %5 ], [ %54, %217 ], [ %351, %224 ]
  %358 = phi i8* [ %0, %5 ], [ %52, %217 ], [ %350, %224 ]
  %359 = and i32 %4, 1
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %428, label %361

361:                                              ; preds = %355
  %362 = load i8, i8* %358, align 1
  %363 = getelementptr inbounds i8, i8* %357, i64 1
  %364 = load i8, i8* %363, align 1
  %365 = load i8, i8* %357, align 1
  %366 = getelementptr inbounds i8, i8* %356, i64 1
  %367 = getelementptr inbounds i8, i8* %356, i64 2
  %368 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %369 = load i8, i8* %368, align 2
  %370 = zext i8 %369 to i32
  %371 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %372 = load i8, i8* %371, align 2
  %373 = zext i8 %372 to i32
  %374 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %375 = load i8, i8* %374, align 1
  %376 = zext i8 %375 to i32
  %377 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %378 = load i8, i8* %377, align 1
  %379 = zext i8 %378 to i32
  %380 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %381 = load i16, i16* %380, align 2
  %382 = sext i16 %381 to i32
  %383 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %384 = load i16, i16* %383, align 2
  %385 = sext i16 %384 to i32
  %386 = zext i8 %362 to i32
  %387 = mul nuw nsw i32 %386, 257
  %388 = mul i32 %387, %382
  %389 = lshr i32 %388, 16
  %390 = add nsw i32 %389, %385
  %391 = xor i8 %364, -128
  %392 = xor i8 %365, -128
  %393 = sext i8 %391 to i32
  %394 = mul nsw i32 %370, %393
  %395 = add nsw i32 %390, %394
  %396 = sext i8 %392 to i32
  %397 = mul nsw i32 %373, %393
  %398 = mul nsw i32 %376, %396
  %399 = add nsw i32 %398, %397
  %400 = sub nsw i32 %390, %399
  %401 = mul nsw i32 %379, %396
  %402 = add nsw i32 %390, %401
  %403 = ashr i32 %395, 6
  %404 = lshr i32 %403, 31
  %405 = xor i32 %404, 1
  %406 = sub nsw i32 0, %405
  %407 = and i32 %403, %406
  %408 = icmp slt i32 %407, 255
  %409 = select i1 %408, i32 %407, i32 255
  %410 = trunc i32 %409 to i8
  store i8 %410, i8* %356, align 1
  %411 = ashr i32 %400, 6
  %412 = lshr i32 %411, 31
  %413 = xor i32 %412, 1
  %414 = sub nsw i32 0, %413
  %415 = and i32 %411, %414
  %416 = icmp slt i32 %415, 255
  %417 = select i1 %416, i32 %415, i32 255
  %418 = trunc i32 %417 to i8
  store i8 %418, i8* %366, align 1
  %419 = ashr i32 %402, 6
  %420 = lshr i32 %419, 31
  %421 = xor i32 %420, 1
  %422 = sub nsw i32 0, %421
  %423 = and i32 %419, %422
  %424 = icmp slt i32 %423, 255
  %425 = select i1 %424, i32 %423, i32 255
  %426 = trunc i32 %425 to i8
  store i8 %426, i8* %367, align 1
  %427 = getelementptr inbounds i8, i8* %356, i64 3
  store i8 -1, i8* %427, align 1
  br label %428

428:                                              ; preds = %355, %361
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @NV12ToRGB24Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %4, -1
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %351

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %15 = add i32 %4, -2
  %16 = lshr i32 %15, 1
  %17 = add nuw i32 %16, 1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i32 %17, 8
  br i1 %19, label %217, label %20

20:                                               ; preds = %8
  %21 = add i32 %4, -2
  %22 = lshr i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = mul nuw nsw i64 %23, 6
  %25 = add nuw nsw i64 %24, 6
  %26 = getelementptr i8, i8* %2, i64 %25
  %27 = and i32 %21, -2
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %29
  %32 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i8, i8* %33, i64 1
  %35 = icmp ugt i8* %30, %2
  %36 = icmp ugt i8* %26, %0
  %37 = and i1 %35, %36
  %38 = icmp ugt i8* %31, %2
  %39 = icmp ugt i8* %26, %1
  %40 = and i1 %38, %39
  %41 = or i1 %37, %40
  %42 = bitcast i16* %14 to i8*
  %43 = icmp ugt i8* %34, %2
  %44 = icmp ugt i8* %26, %42
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  br i1 %46, label %217, label %47

47:                                               ; preds = %20
  %48 = and i64 %18, 4294967288
  %49 = trunc i64 %48 to i32
  %50 = shl i32 %49, 1
  %51 = shl nuw nsw i64 %48, 1
  %52 = getelementptr i8, i8* %0, i64 %51
  %53 = shl nuw nsw i64 %48, 1
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = mul nuw nsw i64 %48, 6
  %56 = getelementptr i8, i8* %2, i64 %55
  br label %57

57:                                               ; preds = %57, %47
  %58 = phi i64 [ 0, %47 ], [ %213, %57 ]
  %59 = shl i64 %58, 1
  %60 = getelementptr i8, i8* %0, i64 %59
  %61 = shl i64 %58, 1
  %62 = getelementptr i8, i8* %1, i64 %61
  %63 = mul i64 %58, 6
  %64 = bitcast i8* %60 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %67 = shufflevector <16 x i8> %65, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %68 = bitcast i8* %62 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = load i8, i8* %9, align 2, !alias.scope !462
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %10, align 2, !alias.scope !462
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %11, align 1, !alias.scope !462
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i8, i8* %12, align 1, !alias.scope !462
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i16, i16* %13, align 2, !alias.scope !462
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = load i16, i16* %14, align 2, !alias.scope !462
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = zext <8 x i8> %66 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %96, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %98 = mul <8 x i32> %97, %91
  %99 = lshr <8 x i32> %98, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %100 = add nsw <8 x i32> %99, %95
  %101 = xor <8 x i8> %70, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %102 = xor <8 x i8> %71, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %103 = sext <8 x i8> %101 to <8 x i32>
  %104 = mul nsw <8 x i32> %75, %103
  %105 = add nsw <8 x i32> %100, %104
  %106 = sext <8 x i8> %102 to <8 x i32>
  %107 = mul nsw <8 x i32> %79, %103
  %108 = mul nsw <8 x i32> %83, %106
  %109 = add nsw <8 x i32> %108, %107
  %110 = sub nsw <8 x i32> %100, %109
  %111 = mul nsw <8 x i32> %87, %106
  %112 = add nsw <8 x i32> %100, %111
  %113 = ashr <8 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %114 = lshr <8 x i32> %113, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %115 = xor <8 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = sub nsw <8 x i32> zeroinitializer, %115
  %117 = and <8 x i32> %113, %116
  %118 = icmp slt <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = select <8 x i1> %118, <8 x i32> %117, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %120 = trunc <8 x i32> %119 to <8 x i8>
  %121 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <8 x i32> %121, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %123 = xor <8 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <8 x i32> zeroinitializer, %123
  %125 = and <8 x i32> %121, %124
  %126 = icmp slt <8 x i32> %125, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = select <8 x i1> %126, <8 x i32> %125, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = trunc <8 x i32> %127 to <8 x i8>
  %129 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = lshr <8 x i32> %129, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %131 = xor <8 x i32> %130, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %132 = sub nsw <8 x i32> zeroinitializer, %131
  %133 = and <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = select <8 x i1> %134, <8 x i32> %133, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = trunc <8 x i32> %135 to <8 x i8>
  %137 = bitcast i8* %62 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %140 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %141 = load i8, i8* %9, align 2, !alias.scope !462
  %142 = insertelement <8 x i8> undef, i8 %141, i32 0
  %143 = shufflevector <8 x i8> %142, <8 x i8> undef, <8 x i32> zeroinitializer
  %144 = zext <8 x i8> %143 to <8 x i32>
  %145 = load i8, i8* %10, align 2, !alias.scope !462
  %146 = insertelement <8 x i8> undef, i8 %145, i32 0
  %147 = shufflevector <8 x i8> %146, <8 x i8> undef, <8 x i32> zeroinitializer
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = load i8, i8* %11, align 1, !alias.scope !462
  %150 = insertelement <8 x i8> undef, i8 %149, i32 0
  %151 = shufflevector <8 x i8> %150, <8 x i8> undef, <8 x i32> zeroinitializer
  %152 = zext <8 x i8> %151 to <8 x i32>
  %153 = load i8, i8* %12, align 1, !alias.scope !462
  %154 = insertelement <8 x i8> undef, i8 %153, i32 0
  %155 = shufflevector <8 x i8> %154, <8 x i8> undef, <8 x i32> zeroinitializer
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = load i16, i16* %13, align 2, !alias.scope !462
  %158 = insertelement <8 x i16> undef, i16 %157, i32 0
  %159 = shufflevector <8 x i16> %158, <8 x i16> undef, <8 x i32> zeroinitializer
  %160 = sext <8 x i16> %159 to <8 x i32>
  %161 = load i16, i16* %14, align 2, !alias.scope !462
  %162 = insertelement <8 x i16> undef, i16 %161, i32 0
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> zeroinitializer
  %164 = sext <8 x i16> %163 to <8 x i32>
  %165 = zext <8 x i8> %67 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %165, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %167 = mul <8 x i32> %166, %160
  %168 = lshr <8 x i32> %167, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %169 = add nsw <8 x i32> %168, %164
  %170 = xor <8 x i8> %139, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %171 = xor <8 x i8> %140, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %172 = sext <8 x i8> %170 to <8 x i32>
  %173 = mul nsw <8 x i32> %144, %172
  %174 = add nsw <8 x i32> %169, %173
  %175 = sext <8 x i8> %171 to <8 x i32>
  %176 = mul nsw <8 x i32> %148, %172
  %177 = mul nsw <8 x i32> %152, %175
  %178 = add nsw <8 x i32> %177, %176
  %179 = sub nsw <8 x i32> %169, %178
  %180 = mul nsw <8 x i32> %156, %175
  %181 = add nsw <8 x i32> %169, %180
  %182 = ashr <8 x i32> %174, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %183 = lshr <8 x i32> %182, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %184 = xor <8 x i32> %183, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %185 = sub nsw <8 x i32> zeroinitializer, %184
  %186 = and <8 x i32> %182, %185
  %187 = icmp slt <8 x i32> %186, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = select <8 x i1> %187, <8 x i32> %186, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %189 = trunc <8 x i32> %188 to <8 x i8>
  %190 = ashr <8 x i32> %179, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %191 = lshr <8 x i32> %190, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %192 = xor <8 x i32> %191, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %193 = sub nsw <8 x i32> zeroinitializer, %192
  %194 = and <8 x i32> %190, %193
  %195 = icmp slt <8 x i32> %194, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = select <8 x i1> %195, <8 x i32> %194, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %197 = trunc <8 x i32> %196 to <8 x i8>
  %198 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %199 = lshr <8 x i32> %198, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %200 = xor <8 x i32> %199, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %201 = sub nsw <8 x i32> zeroinitializer, %200
  %202 = and <8 x i32> %198, %201
  %203 = icmp slt <8 x i32> %202, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = select <8 x i1> %203, <8 x i32> %202, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %205 = trunc <8 x i32> %204 to <8 x i8>
  %206 = getelementptr inbounds i8, i8* %2, i64 %63
  %207 = bitcast i8* %206 to <48 x i8>*
  %208 = shufflevector <8 x i8> %120, <8 x i8> %128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %209 = shufflevector <8 x i8> %136, <8 x i8> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %210 = shufflevector <16 x i8> %208, <16 x i8> %209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %211 = shufflevector <8 x i8> %197, <8 x i8> %205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %212 = shufflevector <32 x i8> %210, <32 x i8> %211, <48 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47>
  store <48 x i8> %212, <48 x i8>* %207, align 1
  %213 = add i64 %58, 8
  %214 = icmp eq i64 %213, %48
  br i1 %214, label %215, label %57, !llvm.loop !465

215:                                              ; preds = %57
  %216 = icmp eq i64 %48, %18
  br i1 %216, label %351, label %217

217:                                              ; preds = %215, %20, %8
  %218 = phi i32 [ 0, %20 ], [ 0, %8 ], [ %50, %215 ]
  %219 = phi i8* [ %0, %20 ], [ %0, %8 ], [ %52, %215 ]
  %220 = phi i8* [ %1, %20 ], [ %1, %8 ], [ %54, %215 ]
  %221 = phi i8* [ %2, %20 ], [ %2, %8 ], [ %56, %215 ]
  br label %222

222:                                              ; preds = %217, %222
  %223 = phi i32 [ %349, %222 ], [ %218, %217 ]
  %224 = phi i8* [ %346, %222 ], [ %219, %217 ]
  %225 = phi i8* [ %347, %222 ], [ %220, %217 ]
  %226 = phi i8* [ %348, %222 ], [ %221, %217 ]
  %227 = load i8, i8* %224, align 1
  %228 = load i8, i8* %225, align 1
  %229 = getelementptr inbounds i8, i8* %225, i64 1
  %230 = load i8, i8* %229, align 1
  %231 = getelementptr inbounds i8, i8* %226, i64 1
  %232 = getelementptr inbounds i8, i8* %226, i64 2
  %233 = load i8, i8* %9, align 2
  %234 = zext i8 %233 to i32
  %235 = load i8, i8* %10, align 2
  %236 = zext i8 %235 to i32
  %237 = load i8, i8* %11, align 1
  %238 = zext i8 %237 to i32
  %239 = load i8, i8* %12, align 1
  %240 = zext i8 %239 to i32
  %241 = load i16, i16* %13, align 2
  %242 = sext i16 %241 to i32
  %243 = load i16, i16* %14, align 2
  %244 = sext i16 %243 to i32
  %245 = zext i8 %227 to i32
  %246 = mul nuw nsw i32 %245, 257
  %247 = mul i32 %246, %242
  %248 = lshr i32 %247, 16
  %249 = add nsw i32 %248, %244
  %250 = xor i8 %228, -128
  %251 = xor i8 %230, -128
  %252 = sext i8 %250 to i32
  %253 = mul nsw i32 %234, %252
  %254 = add nsw i32 %249, %253
  %255 = sext i8 %251 to i32
  %256 = mul nsw i32 %236, %252
  %257 = mul nsw i32 %238, %255
  %258 = add nsw i32 %257, %256
  %259 = sub nsw i32 %249, %258
  %260 = mul nsw i32 %240, %255
  %261 = add nsw i32 %249, %260
  %262 = ashr i32 %254, 6
  %263 = lshr i32 %262, 31
  %264 = xor i32 %263, 1
  %265 = sub nsw i32 0, %264
  %266 = and i32 %262, %265
  %267 = icmp slt i32 %266, 255
  %268 = select i1 %267, i32 %266, i32 255
  %269 = trunc i32 %268 to i8
  store i8 %269, i8* %226, align 1
  %270 = ashr i32 %259, 6
  %271 = lshr i32 %270, 31
  %272 = xor i32 %271, 1
  %273 = sub nsw i32 0, %272
  %274 = and i32 %270, %273
  %275 = icmp slt i32 %274, 255
  %276 = select i1 %275, i32 %274, i32 255
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %231, align 1
  %278 = ashr i32 %261, 6
  %279 = lshr i32 %278, 31
  %280 = xor i32 %279, 1
  %281 = sub nsw i32 0, %280
  %282 = and i32 %278, %281
  %283 = icmp slt i32 %282, 255
  %284 = select i1 %283, i32 %282, i32 255
  %285 = trunc i32 %284 to i8
  store i8 %285, i8* %232, align 1
  %286 = getelementptr inbounds i8, i8* %224, i64 1
  %287 = load i8, i8* %286, align 1
  %288 = load i8, i8* %225, align 1
  %289 = load i8, i8* %229, align 1
  %290 = getelementptr inbounds i8, i8* %226, i64 3
  %291 = getelementptr inbounds i8, i8* %226, i64 4
  %292 = getelementptr inbounds i8, i8* %226, i64 5
  %293 = load i8, i8* %9, align 2
  %294 = zext i8 %293 to i32
  %295 = load i8, i8* %10, align 2
  %296 = zext i8 %295 to i32
  %297 = load i8, i8* %11, align 1
  %298 = zext i8 %297 to i32
  %299 = load i8, i8* %12, align 1
  %300 = zext i8 %299 to i32
  %301 = load i16, i16* %13, align 2
  %302 = sext i16 %301 to i32
  %303 = load i16, i16* %14, align 2
  %304 = sext i16 %303 to i32
  %305 = zext i8 %287 to i32
  %306 = mul nuw nsw i32 %305, 257
  %307 = mul i32 %306, %302
  %308 = lshr i32 %307, 16
  %309 = add nsw i32 %308, %304
  %310 = xor i8 %288, -128
  %311 = xor i8 %289, -128
  %312 = sext i8 %310 to i32
  %313 = mul nsw i32 %294, %312
  %314 = add nsw i32 %309, %313
  %315 = sext i8 %311 to i32
  %316 = mul nsw i32 %296, %312
  %317 = mul nsw i32 %298, %315
  %318 = add nsw i32 %317, %316
  %319 = sub nsw i32 %309, %318
  %320 = mul nsw i32 %300, %315
  %321 = add nsw i32 %309, %320
  %322 = ashr i32 %314, 6
  %323 = lshr i32 %322, 31
  %324 = xor i32 %323, 1
  %325 = sub nsw i32 0, %324
  %326 = and i32 %322, %325
  %327 = icmp slt i32 %326, 255
  %328 = select i1 %327, i32 %326, i32 255
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %290, align 1
  %330 = ashr i32 %319, 6
  %331 = lshr i32 %330, 31
  %332 = xor i32 %331, 1
  %333 = sub nsw i32 0, %332
  %334 = and i32 %330, %333
  %335 = icmp slt i32 %334, 255
  %336 = select i1 %335, i32 %334, i32 255
  %337 = trunc i32 %336 to i8
  store i8 %337, i8* %291, align 1
  %338 = ashr i32 %321, 6
  %339 = lshr i32 %338, 31
  %340 = xor i32 %339, 1
  %341 = sub nsw i32 0, %340
  %342 = and i32 %338, %341
  %343 = icmp slt i32 %342, 255
  %344 = select i1 %343, i32 %342, i32 255
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %292, align 1
  %346 = getelementptr inbounds i8, i8* %224, i64 2
  %347 = getelementptr inbounds i8, i8* %225, i64 2
  %348 = getelementptr inbounds i8, i8* %226, i64 6
  %349 = add nuw nsw i32 %223, 2
  %350 = icmp slt i32 %349, %6
  br i1 %350, label %222, label %351, !llvm.loop !466

351:                                              ; preds = %222, %215, %5
  %352 = phi i8* [ %2, %5 ], [ %56, %215 ], [ %348, %222 ]
  %353 = phi i8* [ %1, %5 ], [ %54, %215 ], [ %347, %222 ]
  %354 = phi i8* [ %0, %5 ], [ %52, %215 ], [ %346, %222 ]
  %355 = and i32 %4, 1
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %423, label %357

357:                                              ; preds = %351
  %358 = load i8, i8* %354, align 1
  %359 = load i8, i8* %353, align 1
  %360 = getelementptr inbounds i8, i8* %353, i64 1
  %361 = load i8, i8* %360, align 1
  %362 = getelementptr inbounds i8, i8* %352, i64 1
  %363 = getelementptr inbounds i8, i8* %352, i64 2
  %364 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %365 = load i8, i8* %364, align 2
  %366 = zext i8 %365 to i32
  %367 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %368 = load i8, i8* %367, align 2
  %369 = zext i8 %368 to i32
  %370 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  %373 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i32
  %376 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %377 = load i16, i16* %376, align 2
  %378 = sext i16 %377 to i32
  %379 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %380 = load i16, i16* %379, align 2
  %381 = sext i16 %380 to i32
  %382 = zext i8 %358 to i32
  %383 = mul nuw nsw i32 %382, 257
  %384 = mul i32 %383, %378
  %385 = lshr i32 %384, 16
  %386 = add nsw i32 %385, %381
  %387 = xor i8 %359, -128
  %388 = xor i8 %361, -128
  %389 = sext i8 %387 to i32
  %390 = mul nsw i32 %366, %389
  %391 = add nsw i32 %386, %390
  %392 = sext i8 %388 to i32
  %393 = mul nsw i32 %369, %389
  %394 = mul nsw i32 %372, %392
  %395 = add nsw i32 %394, %393
  %396 = sub nsw i32 %386, %395
  %397 = mul nsw i32 %375, %392
  %398 = add nsw i32 %386, %397
  %399 = ashr i32 %391, 6
  %400 = lshr i32 %399, 31
  %401 = xor i32 %400, 1
  %402 = sub nsw i32 0, %401
  %403 = and i32 %399, %402
  %404 = icmp slt i32 %403, 255
  %405 = select i1 %404, i32 %403, i32 255
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %352, align 1
  %407 = ashr i32 %396, 6
  %408 = lshr i32 %407, 31
  %409 = xor i32 %408, 1
  %410 = sub nsw i32 0, %409
  %411 = and i32 %407, %410
  %412 = icmp slt i32 %411, 255
  %413 = select i1 %412, i32 %411, i32 255
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %362, align 1
  %415 = ashr i32 %398, 6
  %416 = lshr i32 %415, 31
  %417 = xor i32 %416, 1
  %418 = sub nsw i32 0, %417
  %419 = and i32 %415, %418
  %420 = icmp slt i32 %419, 255
  %421 = select i1 %420, i32 %419, i32 255
  %422 = trunc i32 %421 to i8
  store i8 %422, i8* %363, align 1
  br label %423

423:                                              ; preds = %351, %357
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @NV21ToRGB24Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %4, -1
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %351

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %15 = add i32 %4, -2
  %16 = lshr i32 %15, 1
  %17 = add nuw i32 %16, 1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i32 %17, 8
  br i1 %19, label %217, label %20

20:                                               ; preds = %8
  %21 = add i32 %4, -2
  %22 = lshr i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = mul nuw nsw i64 %23, 6
  %25 = add nuw nsw i64 %24, 6
  %26 = getelementptr i8, i8* %2, i64 %25
  %27 = and i32 %21, -2
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %29
  %32 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i8, i8* %33, i64 1
  %35 = icmp ugt i8* %30, %2
  %36 = icmp ugt i8* %26, %0
  %37 = and i1 %35, %36
  %38 = icmp ugt i8* %31, %2
  %39 = icmp ugt i8* %26, %1
  %40 = and i1 %38, %39
  %41 = or i1 %37, %40
  %42 = bitcast i16* %14 to i8*
  %43 = icmp ugt i8* %34, %2
  %44 = icmp ugt i8* %26, %42
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  br i1 %46, label %217, label %47

47:                                               ; preds = %20
  %48 = and i64 %18, 4294967288
  %49 = trunc i64 %48 to i32
  %50 = shl i32 %49, 1
  %51 = shl nuw nsw i64 %48, 1
  %52 = getelementptr i8, i8* %0, i64 %51
  %53 = shl nuw nsw i64 %48, 1
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = mul nuw nsw i64 %48, 6
  %56 = getelementptr i8, i8* %2, i64 %55
  br label %57

57:                                               ; preds = %57, %47
  %58 = phi i64 [ 0, %47 ], [ %213, %57 ]
  %59 = shl i64 %58, 1
  %60 = getelementptr i8, i8* %0, i64 %59
  %61 = shl i64 %58, 1
  %62 = mul i64 %58, 6
  %63 = bitcast i8* %60 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %67 = getelementptr inbounds i8, i8* %1, i64 %61
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %71 = shufflevector <16 x i8> %69, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %72 = load i8, i8* %9, align 2, !alias.scope !467
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %10, align 2, !alias.scope !467
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %11, align 1, !alias.scope !467
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i8, i8* %12, align 1, !alias.scope !467
  %85 = insertelement <8 x i8> undef, i8 %84, i32 0
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <8 x i32> zeroinitializer
  %87 = zext <8 x i8> %86 to <8 x i32>
  %88 = load i16, i16* %13, align 2, !alias.scope !467
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = load i16, i16* %14, align 2, !alias.scope !467
  %93 = insertelement <8 x i16> undef, i16 %92, i32 0
  %94 = shufflevector <8 x i16> %93, <8 x i16> undef, <8 x i32> zeroinitializer
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = zext <8 x i8> %65 to <8 x i32>
  %97 = mul nuw nsw <8 x i32> %96, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %98 = mul <8 x i32> %97, %91
  %99 = lshr <8 x i32> %98, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %100 = add nsw <8 x i32> %99, %95
  %101 = xor <8 x i8> %71, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %102 = xor <8 x i8> %70, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %103 = sext <8 x i8> %101 to <8 x i32>
  %104 = mul nsw <8 x i32> %75, %103
  %105 = add nsw <8 x i32> %100, %104
  %106 = sext <8 x i8> %102 to <8 x i32>
  %107 = mul nsw <8 x i32> %79, %103
  %108 = mul nsw <8 x i32> %83, %106
  %109 = add nsw <8 x i32> %108, %107
  %110 = sub nsw <8 x i32> %100, %109
  %111 = mul nsw <8 x i32> %87, %106
  %112 = add nsw <8 x i32> %100, %111
  %113 = ashr <8 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %114 = lshr <8 x i32> %113, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %115 = xor <8 x i32> %114, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %116 = sub nsw <8 x i32> zeroinitializer, %115
  %117 = and <8 x i32> %113, %116
  %118 = icmp slt <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = select <8 x i1> %118, <8 x i32> %117, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %120 = trunc <8 x i32> %119 to <8 x i8>
  %121 = ashr <8 x i32> %110, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <8 x i32> %121, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %123 = xor <8 x i32> %122, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <8 x i32> zeroinitializer, %123
  %125 = and <8 x i32> %121, %124
  %126 = icmp slt <8 x i32> %125, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = select <8 x i1> %126, <8 x i32> %125, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = trunc <8 x i32> %127 to <8 x i8>
  %129 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %130 = lshr <8 x i32> %129, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %131 = xor <8 x i32> %130, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %132 = sub nsw <8 x i32> zeroinitializer, %131
  %133 = and <8 x i32> %129, %132
  %134 = icmp slt <8 x i32> %133, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = select <8 x i1> %134, <8 x i32> %133, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %136 = trunc <8 x i32> %135 to <8 x i8>
  %137 = bitcast i8* %67 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %140 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %141 = load i8, i8* %9, align 2, !alias.scope !467
  %142 = insertelement <8 x i8> undef, i8 %141, i32 0
  %143 = shufflevector <8 x i8> %142, <8 x i8> undef, <8 x i32> zeroinitializer
  %144 = zext <8 x i8> %143 to <8 x i32>
  %145 = load i8, i8* %10, align 2, !alias.scope !467
  %146 = insertelement <8 x i8> undef, i8 %145, i32 0
  %147 = shufflevector <8 x i8> %146, <8 x i8> undef, <8 x i32> zeroinitializer
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = load i8, i8* %11, align 1, !alias.scope !467
  %150 = insertelement <8 x i8> undef, i8 %149, i32 0
  %151 = shufflevector <8 x i8> %150, <8 x i8> undef, <8 x i32> zeroinitializer
  %152 = zext <8 x i8> %151 to <8 x i32>
  %153 = load i8, i8* %12, align 1, !alias.scope !467
  %154 = insertelement <8 x i8> undef, i8 %153, i32 0
  %155 = shufflevector <8 x i8> %154, <8 x i8> undef, <8 x i32> zeroinitializer
  %156 = zext <8 x i8> %155 to <8 x i32>
  %157 = load i16, i16* %13, align 2, !alias.scope !467
  %158 = insertelement <8 x i16> undef, i16 %157, i32 0
  %159 = shufflevector <8 x i16> %158, <8 x i16> undef, <8 x i32> zeroinitializer
  %160 = sext <8 x i16> %159 to <8 x i32>
  %161 = load i16, i16* %14, align 2, !alias.scope !467
  %162 = insertelement <8 x i16> undef, i16 %161, i32 0
  %163 = shufflevector <8 x i16> %162, <8 x i16> undef, <8 x i32> zeroinitializer
  %164 = sext <8 x i16> %163 to <8 x i32>
  %165 = zext <8 x i8> %66 to <8 x i32>
  %166 = mul nuw nsw <8 x i32> %165, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %167 = mul <8 x i32> %166, %160
  %168 = lshr <8 x i32> %167, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %169 = add nsw <8 x i32> %168, %164
  %170 = xor <8 x i8> %140, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %171 = xor <8 x i8> %139, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %172 = sext <8 x i8> %170 to <8 x i32>
  %173 = mul nsw <8 x i32> %144, %172
  %174 = add nsw <8 x i32> %169, %173
  %175 = sext <8 x i8> %171 to <8 x i32>
  %176 = mul nsw <8 x i32> %148, %172
  %177 = mul nsw <8 x i32> %152, %175
  %178 = add nsw <8 x i32> %177, %176
  %179 = sub nsw <8 x i32> %169, %178
  %180 = mul nsw <8 x i32> %156, %175
  %181 = add nsw <8 x i32> %169, %180
  %182 = ashr <8 x i32> %174, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %183 = lshr <8 x i32> %182, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %184 = xor <8 x i32> %183, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %185 = sub nsw <8 x i32> zeroinitializer, %184
  %186 = and <8 x i32> %182, %185
  %187 = icmp slt <8 x i32> %186, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = select <8 x i1> %187, <8 x i32> %186, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %189 = trunc <8 x i32> %188 to <8 x i8>
  %190 = ashr <8 x i32> %179, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %191 = lshr <8 x i32> %190, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %192 = xor <8 x i32> %191, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %193 = sub nsw <8 x i32> zeroinitializer, %192
  %194 = and <8 x i32> %190, %193
  %195 = icmp slt <8 x i32> %194, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = select <8 x i1> %195, <8 x i32> %194, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %197 = trunc <8 x i32> %196 to <8 x i8>
  %198 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %199 = lshr <8 x i32> %198, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %200 = xor <8 x i32> %199, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %201 = sub nsw <8 x i32> zeroinitializer, %200
  %202 = and <8 x i32> %198, %201
  %203 = icmp slt <8 x i32> %202, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = select <8 x i1> %203, <8 x i32> %202, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %205 = trunc <8 x i32> %204 to <8 x i8>
  %206 = getelementptr inbounds i8, i8* %2, i64 %62
  %207 = bitcast i8* %206 to <48 x i8>*
  %208 = shufflevector <8 x i8> %120, <8 x i8> %128, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %209 = shufflevector <8 x i8> %136, <8 x i8> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %210 = shufflevector <16 x i8> %208, <16 x i8> %209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %211 = shufflevector <8 x i8> %197, <8 x i8> %205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %212 = shufflevector <32 x i8> %210, <32 x i8> %211, <48 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47>
  store <48 x i8> %212, <48 x i8>* %207, align 1
  %213 = add i64 %58, 8
  %214 = icmp eq i64 %213, %48
  br i1 %214, label %215, label %57, !llvm.loop !470

215:                                              ; preds = %57
  %216 = icmp eq i64 %48, %18
  br i1 %216, label %351, label %217

217:                                              ; preds = %215, %20, %8
  %218 = phi i32 [ 0, %20 ], [ 0, %8 ], [ %50, %215 ]
  %219 = phi i8* [ %0, %20 ], [ %0, %8 ], [ %52, %215 ]
  %220 = phi i8* [ %1, %20 ], [ %1, %8 ], [ %54, %215 ]
  %221 = phi i8* [ %2, %20 ], [ %2, %8 ], [ %56, %215 ]
  br label %222

222:                                              ; preds = %217, %222
  %223 = phi i32 [ %349, %222 ], [ %218, %217 ]
  %224 = phi i8* [ %346, %222 ], [ %219, %217 ]
  %225 = phi i8* [ %347, %222 ], [ %220, %217 ]
  %226 = phi i8* [ %348, %222 ], [ %221, %217 ]
  %227 = load i8, i8* %224, align 1
  %228 = getelementptr inbounds i8, i8* %225, i64 1
  %229 = load i8, i8* %228, align 1
  %230 = load i8, i8* %225, align 1
  %231 = getelementptr inbounds i8, i8* %226, i64 1
  %232 = getelementptr inbounds i8, i8* %226, i64 2
  %233 = load i8, i8* %9, align 2
  %234 = zext i8 %233 to i32
  %235 = load i8, i8* %10, align 2
  %236 = zext i8 %235 to i32
  %237 = load i8, i8* %11, align 1
  %238 = zext i8 %237 to i32
  %239 = load i8, i8* %12, align 1
  %240 = zext i8 %239 to i32
  %241 = load i16, i16* %13, align 2
  %242 = sext i16 %241 to i32
  %243 = load i16, i16* %14, align 2
  %244 = sext i16 %243 to i32
  %245 = zext i8 %227 to i32
  %246 = mul nuw nsw i32 %245, 257
  %247 = mul i32 %246, %242
  %248 = lshr i32 %247, 16
  %249 = add nsw i32 %248, %244
  %250 = xor i8 %229, -128
  %251 = xor i8 %230, -128
  %252 = sext i8 %250 to i32
  %253 = mul nsw i32 %234, %252
  %254 = add nsw i32 %249, %253
  %255 = sext i8 %251 to i32
  %256 = mul nsw i32 %236, %252
  %257 = mul nsw i32 %238, %255
  %258 = add nsw i32 %257, %256
  %259 = sub nsw i32 %249, %258
  %260 = mul nsw i32 %240, %255
  %261 = add nsw i32 %249, %260
  %262 = ashr i32 %254, 6
  %263 = lshr i32 %262, 31
  %264 = xor i32 %263, 1
  %265 = sub nsw i32 0, %264
  %266 = and i32 %262, %265
  %267 = icmp slt i32 %266, 255
  %268 = select i1 %267, i32 %266, i32 255
  %269 = trunc i32 %268 to i8
  store i8 %269, i8* %226, align 1
  %270 = ashr i32 %259, 6
  %271 = lshr i32 %270, 31
  %272 = xor i32 %271, 1
  %273 = sub nsw i32 0, %272
  %274 = and i32 %270, %273
  %275 = icmp slt i32 %274, 255
  %276 = select i1 %275, i32 %274, i32 255
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %231, align 1
  %278 = ashr i32 %261, 6
  %279 = lshr i32 %278, 31
  %280 = xor i32 %279, 1
  %281 = sub nsw i32 0, %280
  %282 = and i32 %278, %281
  %283 = icmp slt i32 %282, 255
  %284 = select i1 %283, i32 %282, i32 255
  %285 = trunc i32 %284 to i8
  store i8 %285, i8* %232, align 1
  %286 = getelementptr inbounds i8, i8* %224, i64 1
  %287 = load i8, i8* %286, align 1
  %288 = load i8, i8* %228, align 1
  %289 = load i8, i8* %225, align 1
  %290 = getelementptr inbounds i8, i8* %226, i64 3
  %291 = getelementptr inbounds i8, i8* %226, i64 4
  %292 = getelementptr inbounds i8, i8* %226, i64 5
  %293 = load i8, i8* %9, align 2
  %294 = zext i8 %293 to i32
  %295 = load i8, i8* %10, align 2
  %296 = zext i8 %295 to i32
  %297 = load i8, i8* %11, align 1
  %298 = zext i8 %297 to i32
  %299 = load i8, i8* %12, align 1
  %300 = zext i8 %299 to i32
  %301 = load i16, i16* %13, align 2
  %302 = sext i16 %301 to i32
  %303 = load i16, i16* %14, align 2
  %304 = sext i16 %303 to i32
  %305 = zext i8 %287 to i32
  %306 = mul nuw nsw i32 %305, 257
  %307 = mul i32 %306, %302
  %308 = lshr i32 %307, 16
  %309 = add nsw i32 %308, %304
  %310 = xor i8 %288, -128
  %311 = xor i8 %289, -128
  %312 = sext i8 %310 to i32
  %313 = mul nsw i32 %294, %312
  %314 = add nsw i32 %309, %313
  %315 = sext i8 %311 to i32
  %316 = mul nsw i32 %296, %312
  %317 = mul nsw i32 %298, %315
  %318 = add nsw i32 %317, %316
  %319 = sub nsw i32 %309, %318
  %320 = mul nsw i32 %300, %315
  %321 = add nsw i32 %309, %320
  %322 = ashr i32 %314, 6
  %323 = lshr i32 %322, 31
  %324 = xor i32 %323, 1
  %325 = sub nsw i32 0, %324
  %326 = and i32 %322, %325
  %327 = icmp slt i32 %326, 255
  %328 = select i1 %327, i32 %326, i32 255
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %290, align 1
  %330 = ashr i32 %319, 6
  %331 = lshr i32 %330, 31
  %332 = xor i32 %331, 1
  %333 = sub nsw i32 0, %332
  %334 = and i32 %330, %333
  %335 = icmp slt i32 %334, 255
  %336 = select i1 %335, i32 %334, i32 255
  %337 = trunc i32 %336 to i8
  store i8 %337, i8* %291, align 1
  %338 = ashr i32 %321, 6
  %339 = lshr i32 %338, 31
  %340 = xor i32 %339, 1
  %341 = sub nsw i32 0, %340
  %342 = and i32 %338, %341
  %343 = icmp slt i32 %342, 255
  %344 = select i1 %343, i32 %342, i32 255
  %345 = trunc i32 %344 to i8
  store i8 %345, i8* %292, align 1
  %346 = getelementptr inbounds i8, i8* %224, i64 2
  %347 = getelementptr inbounds i8, i8* %225, i64 2
  %348 = getelementptr inbounds i8, i8* %226, i64 6
  %349 = add nuw nsw i32 %223, 2
  %350 = icmp slt i32 %349, %6
  br i1 %350, label %222, label %351, !llvm.loop !471

351:                                              ; preds = %222, %215, %5
  %352 = phi i8* [ %2, %5 ], [ %56, %215 ], [ %348, %222 ]
  %353 = phi i8* [ %1, %5 ], [ %54, %215 ], [ %347, %222 ]
  %354 = phi i8* [ %0, %5 ], [ %52, %215 ], [ %346, %222 ]
  %355 = and i32 %4, 1
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %423, label %357

357:                                              ; preds = %351
  %358 = load i8, i8* %354, align 1
  %359 = getelementptr inbounds i8, i8* %353, i64 1
  %360 = load i8, i8* %359, align 1
  %361 = load i8, i8* %353, align 1
  %362 = getelementptr inbounds i8, i8* %352, i64 1
  %363 = getelementptr inbounds i8, i8* %352, i64 2
  %364 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %365 = load i8, i8* %364, align 2
  %366 = zext i8 %365 to i32
  %367 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %368 = load i8, i8* %367, align 2
  %369 = zext i8 %368 to i32
  %370 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  %373 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i32
  %376 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %377 = load i16, i16* %376, align 2
  %378 = sext i16 %377 to i32
  %379 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %380 = load i16, i16* %379, align 2
  %381 = sext i16 %380 to i32
  %382 = zext i8 %358 to i32
  %383 = mul nuw nsw i32 %382, 257
  %384 = mul i32 %383, %378
  %385 = lshr i32 %384, 16
  %386 = add nsw i32 %385, %381
  %387 = xor i8 %360, -128
  %388 = xor i8 %361, -128
  %389 = sext i8 %387 to i32
  %390 = mul nsw i32 %366, %389
  %391 = add nsw i32 %386, %390
  %392 = sext i8 %388 to i32
  %393 = mul nsw i32 %369, %389
  %394 = mul nsw i32 %372, %392
  %395 = add nsw i32 %394, %393
  %396 = sub nsw i32 %386, %395
  %397 = mul nsw i32 %375, %392
  %398 = add nsw i32 %386, %397
  %399 = ashr i32 %391, 6
  %400 = lshr i32 %399, 31
  %401 = xor i32 %400, 1
  %402 = sub nsw i32 0, %401
  %403 = and i32 %399, %402
  %404 = icmp slt i32 %403, 255
  %405 = select i1 %404, i32 %403, i32 255
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %352, align 1
  %407 = ashr i32 %396, 6
  %408 = lshr i32 %407, 31
  %409 = xor i32 %408, 1
  %410 = sub nsw i32 0, %409
  %411 = and i32 %407, %410
  %412 = icmp slt i32 %411, 255
  %413 = select i1 %412, i32 %411, i32 255
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %362, align 1
  %415 = ashr i32 %398, 6
  %416 = lshr i32 %415, 31
  %417 = xor i32 %416, 1
  %418 = sub nsw i32 0, %417
  %419 = and i32 %415, %418
  %420 = icmp slt i32 %419, 255
  %421 = select i1 %420, i32 %419, i32 255
  %422 = trunc i32 %421 to i8
  store i8 %422, i8* %363, align 1
  br label %423

423:                                              ; preds = %351, %357
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NV12ToRGB565Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #2 {
  %6 = add nsw i32 %4, -1
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %302

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %15 = add i32 %4, -2
  %16 = lshr i32 %15, 1
  %17 = add nuw i32 %16, 1
  %18 = zext i32 %17 to i64
  %19 = icmp ult i32 %17, 4
  br i1 %19, label %185, label %20

20:                                               ; preds = %8
  %21 = add i32 %4, -2
  %22 = lshr i32 %21, 1
  %23 = zext i32 %22 to i64
  %24 = shl nuw nsw i64 %23, 2
  %25 = add nuw nsw i64 %24, 4
  %26 = getelementptr i8, i8* %2, i64 %25
  %27 = and i32 %21, -2
  %28 = zext i32 %27 to i64
  %29 = add nuw nsw i64 %28, 2
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = getelementptr i8, i8* %1, i64 %29
  %32 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %33 = bitcast i16* %32 to i8*
  %34 = getelementptr i8, i8* %33, i64 1
  %35 = icmp ugt i8* %30, %2
  %36 = icmp ugt i8* %26, %0
  %37 = and i1 %35, %36
  %38 = icmp ugt i8* %31, %2
  %39 = icmp ugt i8* %26, %1
  %40 = and i1 %38, %39
  %41 = or i1 %37, %40
  %42 = bitcast i16* %14 to i8*
  %43 = icmp ugt i8* %34, %2
  %44 = icmp ugt i8* %26, %42
  %45 = and i1 %43, %44
  %46 = or i1 %41, %45
  br i1 %46, label %185, label %47

47:                                               ; preds = %20
  %48 = and i64 %18, 4294967292
  %49 = trunc i64 %48 to i32
  %50 = shl i32 %49, 1
  %51 = shl nuw nsw i64 %48, 1
  %52 = getelementptr i8, i8* %0, i64 %51
  %53 = shl nuw nsw i64 %48, 1
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = shl nuw nsw i64 %48, 2
  %56 = getelementptr i8, i8* %2, i64 %55
  br label %57

57:                                               ; preds = %57, %47
  %58 = phi i64 [ 0, %47 ], [ %181, %57 ]
  %59 = shl i64 %58, 1
  %60 = getelementptr i8, i8* %0, i64 %59
  %61 = shl i64 %58, 1
  %62 = getelementptr i8, i8* %1, i64 %61
  %63 = shl i64 %58, 2
  %64 = getelementptr i8, i8* %2, i64 %63
  %65 = bitcast i8* %60 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1
  %67 = shufflevector <8 x i8> %66, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %68 = shufflevector <8 x i8> %66, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %69 = bitcast i8* %62 to <8 x i8>*
  %70 = load <8 x i8>, <8 x i8>* %69, align 1
  %71 = shufflevector <8 x i8> %70, <8 x i8> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %72 = shufflevector <8 x i8> %70, <8 x i8> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %73 = load i8, i8* %9, align 2, !alias.scope !472
  %74 = insertelement <4 x i8> undef, i8 %73, i32 0
  %75 = shufflevector <4 x i8> %74, <4 x i8> undef, <4 x i32> zeroinitializer
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = load i8, i8* %10, align 2, !alias.scope !472
  %78 = insertelement <4 x i8> undef, i8 %77, i32 0
  %79 = shufflevector <4 x i8> %78, <4 x i8> undef, <4 x i32> zeroinitializer
  %80 = zext <4 x i8> %79 to <4 x i32>
  %81 = load i8, i8* %11, align 1, !alias.scope !472
  %82 = insertelement <4 x i8> undef, i8 %81, i32 0
  %83 = shufflevector <4 x i8> %82, <4 x i8> undef, <4 x i32> zeroinitializer
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = load i8, i8* %12, align 1, !alias.scope !472
  %86 = insertelement <4 x i8> undef, i8 %85, i32 0
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <4 x i32> zeroinitializer
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = load i16, i16* %13, align 2, !alias.scope !472
  %90 = insertelement <4 x i16> undef, i16 %89, i32 0
  %91 = shufflevector <4 x i16> %90, <4 x i16> undef, <4 x i32> zeroinitializer
  %92 = sext <4 x i16> %91 to <4 x i32>
  %93 = load i16, i16* %14, align 2, !alias.scope !472
  %94 = insertelement <4 x i16> undef, i16 %93, i32 0
  %95 = shufflevector <4 x i16> %94, <4 x i16> undef, <4 x i32> zeroinitializer
  %96 = sext <4 x i16> %95 to <4 x i32>
  %97 = zext <4 x i8> %67 to <4 x i32>
  %98 = mul nsw <4 x i32> %92, <i32 257, i32 257, i32 257, i32 257>
  %99 = mul <4 x i32> %98, %97
  %100 = lshr <4 x i32> %99, <i32 16, i32 16, i32 16, i32 16>
  %101 = add nsw <4 x i32> %100, %96
  %102 = xor <4 x i8> %71, <i8 -128, i8 -128, i8 -128, i8 -128>
  %103 = xor <4 x i8> %72, <i8 -128, i8 -128, i8 -128, i8 -128>
  %104 = sext <4 x i8> %102 to <4 x i32>
  %105 = mul nsw <4 x i32> %76, %104
  %106 = add nsw <4 x i32> %101, %105
  %107 = sext <4 x i8> %103 to <4 x i32>
  %108 = mul nsw <4 x i32> %80, %104
  %109 = mul nsw <4 x i32> %84, %107
  %110 = add nsw <4 x i32> %109, %108
  %111 = sub nsw <4 x i32> %101, %110
  %112 = mul nsw <4 x i32> %88, %107
  %113 = add nsw <4 x i32> %101, %112
  %114 = ashr <4 x i32> %106, <i32 6, i32 6, i32 6, i32 6>
  %115 = lshr <4 x i32> %114, <i32 31, i32 31, i32 31, i32 31>
  %116 = xor <4 x i32> %115, <i32 1, i32 1, i32 1, i32 1>
  %117 = sub nsw <4 x i32> zeroinitializer, %116
  %118 = and <4 x i32> %114, %117
  %119 = icmp slt <4 x i32> %118, <i32 255, i32 255, i32 255, i32 255>
  %120 = select <4 x i1> %119, <4 x i32> %118, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %121 = ashr <4 x i32> %111, <i32 6, i32 6, i32 6, i32 6>
  %122 = lshr <4 x i32> %121, <i32 31, i32 31, i32 31, i32 31>
  %123 = xor <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>
  %124 = sub nsw <4 x i32> zeroinitializer, %123
  %125 = and <4 x i32> %121, %124
  %126 = icmp slt <4 x i32> %125, <i32 255, i32 255, i32 255, i32 255>
  %127 = select <4 x i1> %126, <4 x i32> %125, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %128 = ashr <4 x i32> %113, <i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <4 x i32> %128, <i32 31, i32 31, i32 31, i32 31>
  %130 = xor <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <4 x i32> zeroinitializer, %130
  %132 = and <4 x i32> %128, %131
  %133 = icmp slt <4 x i32> %132, <i32 255, i32 255, i32 255, i32 255>
  %134 = select <4 x i1> %133, <4 x i32> %132, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %135 = zext <4 x i8> %68 to <4 x i32>
  %136 = mul <4 x i32> %98, %135
  %137 = lshr <4 x i32> %136, <i32 16, i32 16, i32 16, i32 16>
  %138 = add nsw <4 x i32> %137, %96
  %139 = add nsw <4 x i32> %138, %105
  %140 = sub nsw <4 x i32> %138, %110
  %141 = add nsw <4 x i32> %138, %112
  %142 = ashr <4 x i32> %139, <i32 6, i32 6, i32 6, i32 6>
  %143 = lshr <4 x i32> %142, <i32 31, i32 31, i32 31, i32 31>
  %144 = xor <4 x i32> %143, <i32 1, i32 1, i32 1, i32 1>
  %145 = sub nsw <4 x i32> zeroinitializer, %144
  %146 = and <4 x i32> %142, %145
  %147 = icmp slt <4 x i32> %146, <i32 255, i32 255, i32 255, i32 255>
  %148 = select <4 x i1> %147, <4 x i32> %146, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %149 = ashr <4 x i32> %140, <i32 6, i32 6, i32 6, i32 6>
  %150 = lshr <4 x i32> %149, <i32 31, i32 31, i32 31, i32 31>
  %151 = xor <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  %152 = sub nsw <4 x i32> zeroinitializer, %151
  %153 = and <4 x i32> %149, %152
  %154 = icmp slt <4 x i32> %153, <i32 255, i32 255, i32 255, i32 255>
  %155 = select <4 x i1> %154, <4 x i32> %153, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %156 = ashr <4 x i32> %141, <i32 6, i32 6, i32 6, i32 6>
  %157 = lshr <4 x i32> %156, <i32 31, i32 31, i32 31, i32 31>
  %158 = xor <4 x i32> %157, <i32 1, i32 1, i32 1, i32 1>
  %159 = sub nsw <4 x i32> zeroinitializer, %158
  %160 = and <4 x i32> %156, %159
  %161 = icmp slt <4 x i32> %160, <i32 255, i32 255, i32 255, i32 255>
  %162 = select <4 x i1> %161, <4 x i32> %160, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %163 = lshr <4 x i32> %120, <i32 3, i32 3, i32 3, i32 3>
  %164 = lshr <4 x i32> %162, <i32 3, i32 3, i32 3, i32 3>
  %165 = and <4 x i32> %163, <i32 31, i32 31, i32 31, i32 31>
  %166 = shl nsw <4 x i32> %127, <i32 3, i32 3, i32 3, i32 3>
  %167 = and <4 x i32> %166, <i32 2016, i32 2016, i32 2016, i32 2016>
  %168 = or <4 x i32> %167, %165
  %169 = shl nsw <4 x i32> %134, <i32 8, i32 8, i32 8, i32 8>
  %170 = and <4 x i32> %169, <i32 63488, i32 63488, i32 63488, i32 63488>
  %171 = or <4 x i32> %168, %170
  %172 = shl nsw <4 x i32> %148, <i32 13, i32 13, i32 13, i32 13>
  %173 = and <4 x i32> %172, <i32 2031616, i32 2031616, i32 2031616, i32 2031616>
  %174 = or <4 x i32> %171, %173
  %175 = shl <4 x i32> %155, <i32 19, i32 19, i32 19, i32 19>
  %176 = and <4 x i32> %175, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %177 = or <4 x i32> %174, %176
  %178 = shl <4 x i32> %164, <i32 27, i32 27, i32 27, i32 27>
  %179 = or <4 x i32> %177, %178
  %180 = bitcast i8* %64 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %180, align 4, !alias.scope !475, !noalias !477
  %181 = add i64 %58, 4
  %182 = icmp eq i64 %181, %48
  br i1 %182, label %183, label %57, !llvm.loop !480

183:                                              ; preds = %57
  %184 = icmp eq i64 %48, %18
  br i1 %184, label %302, label %185

185:                                              ; preds = %183, %20, %8
  %186 = phi i32 [ 0, %20 ], [ 0, %8 ], [ %50, %183 ]
  %187 = phi i8* [ %0, %20 ], [ %0, %8 ], [ %52, %183 ]
  %188 = phi i8* [ %1, %20 ], [ %1, %8 ], [ %54, %183 ]
  %189 = phi i8* [ %2, %20 ], [ %2, %8 ], [ %56, %183 ]
  br label %190

190:                                              ; preds = %185, %190
  %191 = phi i32 [ %300, %190 ], [ %186, %185 ]
  %192 = phi i8* [ %297, %190 ], [ %187, %185 ]
  %193 = phi i8* [ %298, %190 ], [ %188, %185 ]
  %194 = phi i8* [ %299, %190 ], [ %189, %185 ]
  %195 = load i8, i8* %192, align 1
  %196 = load i8, i8* %193, align 1
  %197 = getelementptr inbounds i8, i8* %193, i64 1
  %198 = load i8, i8* %197, align 1
  %199 = load i8, i8* %9, align 2
  %200 = zext i8 %199 to i32
  %201 = load i8, i8* %10, align 2
  %202 = zext i8 %201 to i32
  %203 = load i8, i8* %11, align 1
  %204 = zext i8 %203 to i32
  %205 = load i8, i8* %12, align 1
  %206 = zext i8 %205 to i32
  %207 = load i16, i16* %13, align 2
  %208 = sext i16 %207 to i32
  %209 = load i16, i16* %14, align 2
  %210 = sext i16 %209 to i32
  %211 = zext i8 %195 to i32
  %212 = mul nsw i32 %208, 257
  %213 = mul i32 %212, %211
  %214 = lshr i32 %213, 16
  %215 = add nsw i32 %214, %210
  %216 = xor i8 %196, -128
  %217 = xor i8 %198, -128
  %218 = sext i8 %216 to i32
  %219 = mul nsw i32 %200, %218
  %220 = add nsw i32 %215, %219
  %221 = sext i8 %217 to i32
  %222 = mul nsw i32 %202, %218
  %223 = mul nsw i32 %204, %221
  %224 = add nsw i32 %223, %222
  %225 = sub nsw i32 %215, %224
  %226 = mul nsw i32 %206, %221
  %227 = add nsw i32 %215, %226
  %228 = ashr i32 %220, 6
  %229 = lshr i32 %228, 31
  %230 = xor i32 %229, 1
  %231 = sub nsw i32 0, %230
  %232 = and i32 %228, %231
  %233 = icmp slt i32 %232, 255
  %234 = select i1 %233, i32 %232, i32 255
  %235 = ashr i32 %225, 6
  %236 = lshr i32 %235, 31
  %237 = xor i32 %236, 1
  %238 = sub nsw i32 0, %237
  %239 = and i32 %235, %238
  %240 = icmp slt i32 %239, 255
  %241 = select i1 %240, i32 %239, i32 255
  %242 = ashr i32 %227, 6
  %243 = lshr i32 %242, 31
  %244 = xor i32 %243, 1
  %245 = sub nsw i32 0, %244
  %246 = and i32 %242, %245
  %247 = icmp slt i32 %246, 255
  %248 = select i1 %247, i32 %246, i32 255
  %249 = getelementptr inbounds i8, i8* %192, i64 1
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = mul i32 %212, %251
  %253 = lshr i32 %252, 16
  %254 = add nsw i32 %253, %210
  %255 = add nsw i32 %254, %219
  %256 = sub nsw i32 %254, %224
  %257 = add nsw i32 %254, %226
  %258 = ashr i32 %255, 6
  %259 = lshr i32 %258, 31
  %260 = xor i32 %259, 1
  %261 = sub nsw i32 0, %260
  %262 = and i32 %258, %261
  %263 = icmp slt i32 %262, 255
  %264 = select i1 %263, i32 %262, i32 255
  %265 = ashr i32 %256, 6
  %266 = lshr i32 %265, 31
  %267 = xor i32 %266, 1
  %268 = sub nsw i32 0, %267
  %269 = and i32 %265, %268
  %270 = icmp slt i32 %269, 255
  %271 = select i1 %270, i32 %269, i32 255
  %272 = ashr i32 %257, 6
  %273 = lshr i32 %272, 31
  %274 = xor i32 %273, 1
  %275 = sub nsw i32 0, %274
  %276 = and i32 %272, %275
  %277 = icmp slt i32 %276, 255
  %278 = select i1 %277, i32 %276, i32 255
  %279 = lshr i32 %234, 3
  %280 = lshr i32 %278, 3
  %281 = and i32 %279, 31
  %282 = shl nsw i32 %241, 3
  %283 = and i32 %282, 2016
  %284 = or i32 %283, %281
  %285 = shl nsw i32 %248, 8
  %286 = and i32 %285, 63488
  %287 = or i32 %284, %286
  %288 = shl nsw i32 %264, 13
  %289 = and i32 %288, 2031616
  %290 = or i32 %287, %289
  %291 = shl i32 %271, 19
  %292 = and i32 %291, 132120576
  %293 = or i32 %290, %292
  %294 = shl i32 %280, 27
  %295 = or i32 %293, %294
  %296 = bitcast i8* %194 to i32*
  store i32 %295, i32* %296, align 4
  %297 = getelementptr inbounds i8, i8* %192, i64 2
  %298 = getelementptr inbounds i8, i8* %193, i64 2
  %299 = getelementptr inbounds i8, i8* %194, i64 4
  %300 = add nuw nsw i32 %191, 2
  %301 = icmp slt i32 %300, %6
  br i1 %301, label %190, label %302, !llvm.loop !481

302:                                              ; preds = %190, %183, %5
  %303 = phi i8* [ %2, %5 ], [ %56, %183 ], [ %299, %190 ]
  %304 = phi i8* [ %1, %5 ], [ %54, %183 ], [ %298, %190 ]
  %305 = phi i8* [ %0, %5 ], [ %52, %183 ], [ %297, %190 ]
  %306 = and i32 %4, 1
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %381, label %308

308:                                              ; preds = %302
  %309 = load i8, i8* %305, align 1
  %310 = load i8, i8* %304, align 1
  %311 = getelementptr inbounds i8, i8* %304, i64 1
  %312 = load i8, i8* %311, align 1
  %313 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 0, i64 0
  %314 = load i8, i8* %313, align 2
  %315 = zext i8 %314 to i32
  %316 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 0
  %317 = load i8, i8* %316, align 2
  %318 = zext i8 %317 to i32
  %319 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 1, i64 1
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 2, i64 1
  %323 = load i8, i8* %322, align 1
  %324 = zext i8 %323 to i32
  %325 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 3, i64 0
  %326 = load i16, i16* %325, align 2
  %327 = sext i16 %326 to i32
  %328 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %3, i64 0, i32 4, i64 0
  %329 = load i16, i16* %328, align 2
  %330 = sext i16 %329 to i32
  %331 = zext i8 %309 to i32
  %332 = mul nuw nsw i32 %331, 257
  %333 = mul i32 %332, %327
  %334 = lshr i32 %333, 16
  %335 = add nsw i32 %334, %330
  %336 = xor i8 %310, -128
  %337 = xor i8 %312, -128
  %338 = sext i8 %336 to i32
  %339 = mul nsw i32 %315, %338
  %340 = add nsw i32 %335, %339
  %341 = sext i8 %337 to i32
  %342 = mul nsw i32 %318, %338
  %343 = mul nsw i32 %321, %341
  %344 = add nsw i32 %343, %342
  %345 = sub nsw i32 %335, %344
  %346 = mul nsw i32 %324, %341
  %347 = add nsw i32 %335, %346
  %348 = ashr i32 %340, 6
  %349 = lshr i32 %348, 31
  %350 = xor i32 %349, 1
  %351 = sub nsw i32 0, %350
  %352 = and i32 %348, %351
  %353 = icmp slt i32 %352, 255
  %354 = select i1 %353, i32 %352, i32 255
  %355 = trunc i32 %354 to i16
  %356 = ashr i32 %345, 6
  %357 = lshr i32 %356, 31
  %358 = xor i32 %357, 1
  %359 = sub nsw i32 0, %358
  %360 = and i32 %356, %359
  %361 = icmp slt i32 %360, 255
  %362 = select i1 %361, i32 %360, i32 255
  %363 = trunc i32 %362 to i16
  %364 = ashr i32 %347, 6
  %365 = lshr i32 %364, 31
  %366 = xor i32 %365, 1
  %367 = sub nsw i32 0, %366
  %368 = and i32 %364, %367
  %369 = icmp slt i32 %368, 255
  %370 = select i1 %369, i32 %368, i32 255
  %371 = trunc i32 %370 to i16
  %372 = lshr i16 %355, 3
  %373 = lshr i16 %371, 3
  %374 = and i16 %372, 31
  %375 = shl i16 %363, 3
  %376 = and i16 %375, 2016
  %377 = or i16 %376, %374
  %378 = shl i16 %373, 11
  %379 = or i16 %377, %378
  %380 = bitcast i8* %303 to i16*
  store i16 %379, i16* %380, align 2
  br label %381

381:                                              ; preds = %302, %308
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @YUY2ToARGBRow_C(i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %342

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 1
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 2, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 3, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %14 = add i32 %3, -2
  %15 = lshr i32 %14, 1
  %16 = add nuw i32 %15, 1
  %17 = zext i32 %16 to i64
  %18 = icmp ult i32 %16, 9
  br i1 %18, label %208, label %19

19:                                               ; preds = %7
  %20 = add i32 %3, -2
  %21 = lshr i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 3
  %24 = add nuw nsw i64 %23, 8
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = shl nuw nsw i64 %22, 2
  %27 = add nuw nsw i64 %26, 4
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i8, i8* %30, i64 1
  %32 = icmp ugt i8* %28, %1
  %33 = icmp ugt i8* %25, %0
  %34 = and i1 %32, %33
  %35 = bitcast i16* %13 to i8*
  %36 = icmp ugt i8* %31, %1
  %37 = icmp ugt i8* %25, %35
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  br i1 %39, label %208, label %40

40:                                               ; preds = %19
  %41 = and i64 %17, 7
  %42 = icmp eq i64 %41, 0
  %43 = select i1 %42, i64 8, i64 %41
  %44 = sub nsw i64 %17, %43
  %45 = trunc i64 %44 to i32
  %46 = shl i32 %45, 1
  %47 = shl nsw i64 %44, 2
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl nsw i64 %44, 3
  %50 = getelementptr i8, i8* %1, i64 %49
  br label %51

51:                                               ; preds = %51, %40
  %52 = phi i64 [ 0, %40 ], [ %206, %51 ]
  %53 = shl i64 %52, 2
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = shl i64 %52, 3
  %56 = bitcast i8* %54 to <32 x i8>*
  %57 = load <32 x i8>, <32 x i8>* %56, align 1
  %58 = shufflevector <32 x i8> %57, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %59 = shufflevector <32 x i8> %57, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %60 = shufflevector <32 x i8> %57, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %61 = shufflevector <32 x i8> %57, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %62 = getelementptr inbounds i8, i8* %54, i64 1
  %63 = bitcast i8* %62 to <32 x i8>*
  %64 = load <32 x i8>, <32 x i8>* %63, align 1
  %65 = shufflevector <32 x i8> %64, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %66 = shufflevector <32 x i8> %64, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %67 = load i8, i8* %8, align 2, !alias.scope !482
  %68 = insertelement <8 x i8> undef, i8 %67, i32 0
  %69 = shufflevector <8 x i8> %68, <8 x i8> undef, <8 x i32> zeroinitializer
  %70 = zext <8 x i8> %69 to <8 x i32>
  %71 = load i8, i8* %9, align 2, !alias.scope !482
  %72 = insertelement <8 x i8> undef, i8 %71, i32 0
  %73 = shufflevector <8 x i8> %72, <8 x i8> undef, <8 x i32> zeroinitializer
  %74 = zext <8 x i8> %73 to <8 x i32>
  %75 = load i8, i8* %10, align 1, !alias.scope !482
  %76 = insertelement <8 x i8> undef, i8 %75, i32 0
  %77 = shufflevector <8 x i8> %76, <8 x i8> undef, <8 x i32> zeroinitializer
  %78 = zext <8 x i8> %77 to <8 x i32>
  %79 = load i8, i8* %11, align 1, !alias.scope !482
  %80 = insertelement <8 x i8> undef, i8 %79, i32 0
  %81 = shufflevector <8 x i8> %80, <8 x i8> undef, <8 x i32> zeroinitializer
  %82 = zext <8 x i8> %81 to <8 x i32>
  %83 = load i16, i16* %12, align 2, !alias.scope !482
  %84 = insertelement <8 x i16> undef, i16 %83, i32 0
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> zeroinitializer
  %86 = sext <8 x i16> %85 to <8 x i32>
  %87 = load i16, i16* %13, align 2, !alias.scope !482
  %88 = insertelement <8 x i16> undef, i16 %87, i32 0
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <8 x i32> zeroinitializer
  %90 = sext <8 x i16> %89 to <8 x i32>
  %91 = zext <8 x i8> %58 to <8 x i32>
  %92 = mul nuw nsw <8 x i32> %91, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %93 = mul <8 x i32> %92, %86
  %94 = lshr <8 x i32> %93, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %95 = add nsw <8 x i32> %94, %90
  %96 = xor <8 x i8> %65, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %97 = xor <8 x i8> %66, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %98 = sext <8 x i8> %96 to <8 x i32>
  %99 = mul nsw <8 x i32> %70, %98
  %100 = add nsw <8 x i32> %95, %99
  %101 = sext <8 x i8> %97 to <8 x i32>
  %102 = mul nsw <8 x i32> %74, %98
  %103 = mul nsw <8 x i32> %78, %101
  %104 = add nsw <8 x i32> %103, %102
  %105 = sub nsw <8 x i32> %95, %104
  %106 = mul nsw <8 x i32> %82, %101
  %107 = add nsw <8 x i32> %95, %106
  %108 = ashr <8 x i32> %100, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %109 = lshr <8 x i32> %108, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %110 = xor <8 x i32> %109, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %111 = sub nsw <8 x i32> zeroinitializer, %110
  %112 = and <8 x i32> %108, %111
  %113 = icmp slt <8 x i32> %112, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %114 = select <8 x i1> %113, <8 x i32> %112, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = trunc <8 x i32> %114 to <8 x i8>
  %116 = ashr <8 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %117 = lshr <8 x i32> %116, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %118 = xor <8 x i32> %117, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %119 = sub nsw <8 x i32> zeroinitializer, %118
  %120 = and <8 x i32> %116, %119
  %121 = icmp slt <8 x i32> %120, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %122 = select <8 x i1> %121, <8 x i32> %120, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %123 = trunc <8 x i32> %122 to <8 x i8>
  %124 = ashr <8 x i32> %107, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %125 = lshr <8 x i32> %124, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %126 = xor <8 x i32> %125, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %127 = sub nsw <8 x i32> zeroinitializer, %126
  %128 = and <8 x i32> %124, %127
  %129 = icmp slt <8 x i32> %128, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %130 = select <8 x i1> %129, <8 x i32> %128, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = trunc <8 x i32> %130 to <8 x i8>
  %132 = load i8, i8* %8, align 2, !alias.scope !482
  %133 = insertelement <8 x i8> undef, i8 %132, i32 0
  %134 = shufflevector <8 x i8> %133, <8 x i8> undef, <8 x i32> zeroinitializer
  %135 = zext <8 x i8> %134 to <8 x i32>
  %136 = load i8, i8* %9, align 2, !alias.scope !482
  %137 = insertelement <8 x i8> undef, i8 %136, i32 0
  %138 = shufflevector <8 x i8> %137, <8 x i8> undef, <8 x i32> zeroinitializer
  %139 = zext <8 x i8> %138 to <8 x i32>
  %140 = load i8, i8* %10, align 1, !alias.scope !482
  %141 = insertelement <8 x i8> undef, i8 %140, i32 0
  %142 = shufflevector <8 x i8> %141, <8 x i8> undef, <8 x i32> zeroinitializer
  %143 = zext <8 x i8> %142 to <8 x i32>
  %144 = load i8, i8* %11, align 1, !alias.scope !482
  %145 = insertelement <8 x i8> undef, i8 %144, i32 0
  %146 = shufflevector <8 x i8> %145, <8 x i8> undef, <8 x i32> zeroinitializer
  %147 = zext <8 x i8> %146 to <8 x i32>
  %148 = load i16, i16* %12, align 2, !alias.scope !482
  %149 = insertelement <8 x i16> undef, i16 %148, i32 0
  %150 = shufflevector <8 x i16> %149, <8 x i16> undef, <8 x i32> zeroinitializer
  %151 = sext <8 x i16> %150 to <8 x i32>
  %152 = load i16, i16* %13, align 2, !alias.scope !482
  %153 = insertelement <8 x i16> undef, i16 %152, i32 0
  %154 = shufflevector <8 x i16> %153, <8 x i16> undef, <8 x i32> zeroinitializer
  %155 = sext <8 x i16> %154 to <8 x i32>
  %156 = zext <8 x i8> %60 to <8 x i32>
  %157 = mul nuw nsw <8 x i32> %156, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %158 = mul <8 x i32> %157, %151
  %159 = lshr <8 x i32> %158, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %160 = add nsw <8 x i32> %159, %155
  %161 = xor <8 x i8> %59, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %162 = xor <8 x i8> %61, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %163 = sext <8 x i8> %161 to <8 x i32>
  %164 = mul nsw <8 x i32> %135, %163
  %165 = add nsw <8 x i32> %160, %164
  %166 = sext <8 x i8> %162 to <8 x i32>
  %167 = mul nsw <8 x i32> %139, %163
  %168 = mul nsw <8 x i32> %143, %166
  %169 = add nsw <8 x i32> %168, %167
  %170 = sub nsw <8 x i32> %160, %169
  %171 = mul nsw <8 x i32> %147, %166
  %172 = add nsw <8 x i32> %160, %171
  %173 = ashr <8 x i32> %165, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %174 = lshr <8 x i32> %173, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %175 = xor <8 x i32> %174, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %176 = sub nsw <8 x i32> zeroinitializer, %175
  %177 = and <8 x i32> %173, %176
  %178 = icmp slt <8 x i32> %177, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %179 = select <8 x i1> %178, <8 x i32> %177, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %180 = trunc <8 x i32> %179 to <8 x i8>
  %181 = ashr <8 x i32> %170, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %182 = lshr <8 x i32> %181, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %183 = xor <8 x i32> %182, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %184 = sub nsw <8 x i32> zeroinitializer, %183
  %185 = and <8 x i32> %181, %184
  %186 = icmp slt <8 x i32> %185, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %187 = select <8 x i1> %186, <8 x i32> %185, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = trunc <8 x i32> %187 to <8 x i8>
  %189 = ashr <8 x i32> %172, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %190 = lshr <8 x i32> %189, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %191 = xor <8 x i32> %190, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %192 = sub nsw <8 x i32> zeroinitializer, %191
  %193 = and <8 x i32> %189, %192
  %194 = icmp slt <8 x i32> %193, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %195 = select <8 x i1> %194, <8 x i32> %193, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = trunc <8 x i32> %195 to <8 x i8>
  %197 = getelementptr inbounds i8, i8* %1, i64 %55
  %198 = bitcast i8* %197 to <64 x i8>*
  %199 = shufflevector <8 x i8> %115, <8 x i8> %123, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %200 = shufflevector <8 x i8> %131, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %201 = shufflevector <8 x i8> %180, <8 x i8> %188, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %202 = shufflevector <8 x i8> %196, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %203 = shufflevector <16 x i8> %199, <16 x i8> %200, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %204 = shufflevector <16 x i8> %201, <16 x i8> %202, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %205 = shufflevector <32 x i8> %203, <32 x i8> %204, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %205, <64 x i8>* %198, align 1
  %206 = add i64 %52, 8
  %207 = icmp eq i64 %206, %44
  br i1 %207, label %208, label %51, !llvm.loop !485

208:                                              ; preds = %51, %19, %7
  %209 = phi i32 [ 0, %19 ], [ 0, %7 ], [ %46, %51 ]
  %210 = phi i8* [ %0, %19 ], [ %0, %7 ], [ %48, %51 ]
  %211 = phi i8* [ %1, %19 ], [ %1, %7 ], [ %50, %51 ]
  br label %212

212:                                              ; preds = %208, %212
  %213 = phi i32 [ %340, %212 ], [ %209, %208 ]
  %214 = phi i8* [ %338, %212 ], [ %210, %208 ]
  %215 = phi i8* [ %339, %212 ], [ %211, %208 ]
  %216 = load i8, i8* %214, align 1
  %217 = getelementptr inbounds i8, i8* %214, i64 1
  %218 = load i8, i8* %217, align 1
  %219 = getelementptr inbounds i8, i8* %214, i64 3
  %220 = load i8, i8* %219, align 1
  %221 = getelementptr inbounds i8, i8* %215, i64 1
  %222 = getelementptr inbounds i8, i8* %215, i64 2
  %223 = load i8, i8* %8, align 2
  %224 = zext i8 %223 to i32
  %225 = load i8, i8* %9, align 2
  %226 = zext i8 %225 to i32
  %227 = load i8, i8* %10, align 1
  %228 = zext i8 %227 to i32
  %229 = load i8, i8* %11, align 1
  %230 = zext i8 %229 to i32
  %231 = load i16, i16* %12, align 2
  %232 = sext i16 %231 to i32
  %233 = load i16, i16* %13, align 2
  %234 = sext i16 %233 to i32
  %235 = zext i8 %216 to i32
  %236 = mul nuw nsw i32 %235, 257
  %237 = mul i32 %236, %232
  %238 = lshr i32 %237, 16
  %239 = add nsw i32 %238, %234
  %240 = xor i8 %218, -128
  %241 = xor i8 %220, -128
  %242 = sext i8 %240 to i32
  %243 = mul nsw i32 %224, %242
  %244 = add nsw i32 %239, %243
  %245 = sext i8 %241 to i32
  %246 = mul nsw i32 %226, %242
  %247 = mul nsw i32 %228, %245
  %248 = add nsw i32 %247, %246
  %249 = sub nsw i32 %239, %248
  %250 = mul nsw i32 %230, %245
  %251 = add nsw i32 %239, %250
  %252 = ashr i32 %244, 6
  %253 = lshr i32 %252, 31
  %254 = xor i32 %253, 1
  %255 = sub nsw i32 0, %254
  %256 = and i32 %252, %255
  %257 = icmp slt i32 %256, 255
  %258 = select i1 %257, i32 %256, i32 255
  %259 = trunc i32 %258 to i8
  store i8 %259, i8* %215, align 1
  %260 = ashr i32 %249, 6
  %261 = lshr i32 %260, 31
  %262 = xor i32 %261, 1
  %263 = sub nsw i32 0, %262
  %264 = and i32 %260, %263
  %265 = icmp slt i32 %264, 255
  %266 = select i1 %265, i32 %264, i32 255
  %267 = trunc i32 %266 to i8
  store i8 %267, i8* %221, align 1
  %268 = ashr i32 %251, 6
  %269 = lshr i32 %268, 31
  %270 = xor i32 %269, 1
  %271 = sub nsw i32 0, %270
  %272 = and i32 %268, %271
  %273 = icmp slt i32 %272, 255
  %274 = select i1 %273, i32 %272, i32 255
  %275 = trunc i32 %274 to i8
  store i8 %275, i8* %222, align 1
  %276 = getelementptr inbounds i8, i8* %215, i64 3
  store i8 -1, i8* %276, align 1
  %277 = getelementptr inbounds i8, i8* %214, i64 2
  %278 = load i8, i8* %277, align 1
  %279 = load i8, i8* %217, align 1
  %280 = load i8, i8* %219, align 1
  %281 = getelementptr inbounds i8, i8* %215, i64 4
  %282 = getelementptr inbounds i8, i8* %215, i64 5
  %283 = getelementptr inbounds i8, i8* %215, i64 6
  %284 = load i8, i8* %8, align 2
  %285 = zext i8 %284 to i32
  %286 = load i8, i8* %9, align 2
  %287 = zext i8 %286 to i32
  %288 = load i8, i8* %10, align 1
  %289 = zext i8 %288 to i32
  %290 = load i8, i8* %11, align 1
  %291 = zext i8 %290 to i32
  %292 = load i16, i16* %12, align 2
  %293 = sext i16 %292 to i32
  %294 = load i16, i16* %13, align 2
  %295 = sext i16 %294 to i32
  %296 = zext i8 %278 to i32
  %297 = mul nuw nsw i32 %296, 257
  %298 = mul i32 %297, %293
  %299 = lshr i32 %298, 16
  %300 = add nsw i32 %299, %295
  %301 = xor i8 %279, -128
  %302 = xor i8 %280, -128
  %303 = sext i8 %301 to i32
  %304 = mul nsw i32 %285, %303
  %305 = add nsw i32 %300, %304
  %306 = sext i8 %302 to i32
  %307 = mul nsw i32 %287, %303
  %308 = mul nsw i32 %289, %306
  %309 = add nsw i32 %308, %307
  %310 = sub nsw i32 %300, %309
  %311 = mul nsw i32 %291, %306
  %312 = add nsw i32 %300, %311
  %313 = ashr i32 %305, 6
  %314 = lshr i32 %313, 31
  %315 = xor i32 %314, 1
  %316 = sub nsw i32 0, %315
  %317 = and i32 %313, %316
  %318 = icmp slt i32 %317, 255
  %319 = select i1 %318, i32 %317, i32 255
  %320 = trunc i32 %319 to i8
  store i8 %320, i8* %281, align 1
  %321 = ashr i32 %310, 6
  %322 = lshr i32 %321, 31
  %323 = xor i32 %322, 1
  %324 = sub nsw i32 0, %323
  %325 = and i32 %321, %324
  %326 = icmp slt i32 %325, 255
  %327 = select i1 %326, i32 %325, i32 255
  %328 = trunc i32 %327 to i8
  store i8 %328, i8* %282, align 1
  %329 = ashr i32 %312, 6
  %330 = lshr i32 %329, 31
  %331 = xor i32 %330, 1
  %332 = sub nsw i32 0, %331
  %333 = and i32 %329, %332
  %334 = icmp slt i32 %333, 255
  %335 = select i1 %334, i32 %333, i32 255
  %336 = trunc i32 %335 to i8
  store i8 %336, i8* %283, align 1
  %337 = getelementptr inbounds i8, i8* %215, i64 7
  store i8 -1, i8* %337, align 1
  %338 = getelementptr inbounds i8, i8* %214, i64 4
  %339 = getelementptr inbounds i8, i8* %215, i64 8
  %340 = add nuw nsw i32 %213, 2
  %341 = icmp slt i32 %340, %5
  br i1 %341, label %212, label %342, !llvm.loop !486

342:                                              ; preds = %212, %4
  %343 = phi i8* [ %1, %4 ], [ %339, %212 ]
  %344 = phi i8* [ %0, %4 ], [ %338, %212 ]
  %345 = and i32 %3, 1
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %415, label %347

347:                                              ; preds = %342
  %348 = load i8, i8* %344, align 1
  %349 = getelementptr inbounds i8, i8* %344, i64 1
  %350 = load i8, i8* %349, align 1
  %351 = getelementptr inbounds i8, i8* %344, i64 3
  %352 = load i8, i8* %351, align 1
  %353 = getelementptr inbounds i8, i8* %343, i64 1
  %354 = getelementptr inbounds i8, i8* %343, i64 2
  %355 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 0, i64 0
  %356 = load i8, i8* %355, align 2
  %357 = zext i8 %356 to i32
  %358 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 0
  %359 = load i8, i8* %358, align 2
  %360 = zext i8 %359 to i32
  %361 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 1
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 2, i64 1
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 3, i64 0
  %368 = load i16, i16* %367, align 2
  %369 = sext i16 %368 to i32
  %370 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %371 = load i16, i16* %370, align 2
  %372 = sext i16 %371 to i32
  %373 = zext i8 %348 to i32
  %374 = mul nuw nsw i32 %373, 257
  %375 = mul i32 %374, %369
  %376 = lshr i32 %375, 16
  %377 = add nsw i32 %376, %372
  %378 = xor i8 %350, -128
  %379 = xor i8 %352, -128
  %380 = sext i8 %378 to i32
  %381 = mul nsw i32 %357, %380
  %382 = add nsw i32 %377, %381
  %383 = sext i8 %379 to i32
  %384 = mul nsw i32 %360, %380
  %385 = mul nsw i32 %363, %383
  %386 = add nsw i32 %385, %384
  %387 = sub nsw i32 %377, %386
  %388 = mul nsw i32 %366, %383
  %389 = add nsw i32 %377, %388
  %390 = ashr i32 %382, 6
  %391 = lshr i32 %390, 31
  %392 = xor i32 %391, 1
  %393 = sub nsw i32 0, %392
  %394 = and i32 %390, %393
  %395 = icmp slt i32 %394, 255
  %396 = select i1 %395, i32 %394, i32 255
  %397 = trunc i32 %396 to i8
  store i8 %397, i8* %343, align 1
  %398 = ashr i32 %387, 6
  %399 = lshr i32 %398, 31
  %400 = xor i32 %399, 1
  %401 = sub nsw i32 0, %400
  %402 = and i32 %398, %401
  %403 = icmp slt i32 %402, 255
  %404 = select i1 %403, i32 %402, i32 255
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %353, align 1
  %406 = ashr i32 %389, 6
  %407 = lshr i32 %406, 31
  %408 = xor i32 %407, 1
  %409 = sub nsw i32 0, %408
  %410 = and i32 %406, %409
  %411 = icmp slt i32 %410, 255
  %412 = select i1 %411, i32 %410, i32 255
  %413 = trunc i32 %412 to i8
  store i8 %413, i8* %354, align 1
  %414 = getelementptr inbounds i8, i8* %343, i64 3
  store i8 -1, i8* %414, align 1
  br label %415

415:                                              ; preds = %342, %347
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @UYVYToARGBRow_C(i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %343

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 0
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 1
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 2, i64 1
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 3, i64 0
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %14 = add i32 %3, -2
  %15 = lshr i32 %14, 1
  %16 = add nuw i32 %15, 1
  %17 = zext i32 %16 to i64
  %18 = icmp ult i32 %16, 9
  br i1 %18, label %209, label %19

19:                                               ; preds = %7
  %20 = add i32 %3, -2
  %21 = lshr i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = shl nuw nsw i64 %22, 3
  %24 = add nuw nsw i64 %23, 8
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = shl nuw nsw i64 %22, 2
  %27 = add nuw nsw i64 %26, 4
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %30 = bitcast i16* %29 to i8*
  %31 = getelementptr i8, i8* %30, i64 1
  %32 = icmp ugt i8* %28, %1
  %33 = icmp ugt i8* %25, %0
  %34 = and i1 %32, %33
  %35 = bitcast i16* %13 to i8*
  %36 = icmp ugt i8* %31, %1
  %37 = icmp ugt i8* %25, %35
  %38 = and i1 %36, %37
  %39 = or i1 %34, %38
  br i1 %39, label %209, label %40

40:                                               ; preds = %19
  %41 = and i64 %17, 7
  %42 = icmp eq i64 %41, 0
  %43 = select i1 %42, i64 8, i64 %41
  %44 = sub nsw i64 %17, %43
  %45 = trunc i64 %44 to i32
  %46 = shl i32 %45, 1
  %47 = shl nsw i64 %44, 2
  %48 = getelementptr i8, i8* %0, i64 %47
  %49 = shl nsw i64 %44, 3
  %50 = getelementptr i8, i8* %1, i64 %49
  br label %51

51:                                               ; preds = %51, %40
  %52 = phi i64 [ 0, %40 ], [ %207, %51 ]
  %53 = shl i64 %52, 2
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = shl i64 %52, 3
  %56 = getelementptr inbounds i8, i8* %54, i64 1
  %57 = getelementptr inbounds i8, i8* %56, i64 -1
  %58 = bitcast i8* %57 to <32 x i8>*
  %59 = load <32 x i8>, <32 x i8>* %58, align 1
  %60 = shufflevector <32 x i8> %59, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %61 = shufflevector <32 x i8> %59, <32 x i8> undef, <8 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29>
  %62 = shufflevector <32 x i8> %59, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %63 = shufflevector <32 x i8> %59, <32 x i8> undef, <8 x i32> <i32 3, i32 7, i32 11, i32 15, i32 19, i32 23, i32 27, i32 31>
  %64 = bitcast i8* %54 to <32 x i8>*
  %65 = load <32 x i8>, <32 x i8>* %64, align 1
  %66 = shufflevector <32 x i8> %65, <32 x i8> undef, <8 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28>
  %67 = shufflevector <32 x i8> %65, <32 x i8> undef, <8 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30>
  %68 = load i8, i8* %8, align 2, !alias.scope !487
  %69 = insertelement <8 x i8> undef, i8 %68, i32 0
  %70 = shufflevector <8 x i8> %69, <8 x i8> undef, <8 x i32> zeroinitializer
  %71 = zext <8 x i8> %70 to <8 x i32>
  %72 = load i8, i8* %9, align 2, !alias.scope !487
  %73 = insertelement <8 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <8 x i32> zeroinitializer
  %75 = zext <8 x i8> %74 to <8 x i32>
  %76 = load i8, i8* %10, align 1, !alias.scope !487
  %77 = insertelement <8 x i8> undef, i8 %76, i32 0
  %78 = shufflevector <8 x i8> %77, <8 x i8> undef, <8 x i32> zeroinitializer
  %79 = zext <8 x i8> %78 to <8 x i32>
  %80 = load i8, i8* %11, align 1, !alias.scope !487
  %81 = insertelement <8 x i8> undef, i8 %80, i32 0
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <8 x i32> zeroinitializer
  %83 = zext <8 x i8> %82 to <8 x i32>
  %84 = load i16, i16* %12, align 2, !alias.scope !487
  %85 = insertelement <8 x i16> undef, i16 %84, i32 0
  %86 = shufflevector <8 x i16> %85, <8 x i16> undef, <8 x i32> zeroinitializer
  %87 = sext <8 x i16> %86 to <8 x i32>
  %88 = load i16, i16* %13, align 2, !alias.scope !487
  %89 = insertelement <8 x i16> undef, i16 %88, i32 0
  %90 = shufflevector <8 x i16> %89, <8 x i16> undef, <8 x i32> zeroinitializer
  %91 = sext <8 x i16> %90 to <8 x i32>
  %92 = zext <8 x i8> %61 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %92, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %94 = mul <8 x i32> %93, %87
  %95 = lshr <8 x i32> %94, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %96 = add nsw <8 x i32> %95, %91
  %97 = xor <8 x i8> %66, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %98 = xor <8 x i8> %67, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %99 = sext <8 x i8> %97 to <8 x i32>
  %100 = mul nsw <8 x i32> %71, %99
  %101 = add nsw <8 x i32> %96, %100
  %102 = sext <8 x i8> %98 to <8 x i32>
  %103 = mul nsw <8 x i32> %75, %99
  %104 = mul nsw <8 x i32> %79, %102
  %105 = add nsw <8 x i32> %104, %103
  %106 = sub nsw <8 x i32> %96, %105
  %107 = mul nsw <8 x i32> %83, %102
  %108 = add nsw <8 x i32> %96, %107
  %109 = ashr <8 x i32> %101, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %110 = lshr <8 x i32> %109, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %111 = xor <8 x i32> %110, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %112 = sub nsw <8 x i32> zeroinitializer, %111
  %113 = and <8 x i32> %109, %112
  %114 = icmp slt <8 x i32> %113, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = select <8 x i1> %114, <8 x i32> %113, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %116 = trunc <8 x i32> %115 to <8 x i8>
  %117 = ashr <8 x i32> %106, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %118 = lshr <8 x i32> %117, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %119 = xor <8 x i32> %118, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %120 = sub nsw <8 x i32> zeroinitializer, %119
  %121 = and <8 x i32> %117, %120
  %122 = icmp slt <8 x i32> %121, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %123 = select <8 x i1> %122, <8 x i32> %121, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %124 = trunc <8 x i32> %123 to <8 x i8>
  %125 = ashr <8 x i32> %108, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %126 = lshr <8 x i32> %125, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %127 = xor <8 x i32> %126, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %128 = sub nsw <8 x i32> zeroinitializer, %127
  %129 = and <8 x i32> %125, %128
  %130 = icmp slt <8 x i32> %129, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = select <8 x i1> %130, <8 x i32> %129, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %132 = trunc <8 x i32> %131 to <8 x i8>
  %133 = load i8, i8* %8, align 2, !alias.scope !487
  %134 = insertelement <8 x i8> undef, i8 %133, i32 0
  %135 = shufflevector <8 x i8> %134, <8 x i8> undef, <8 x i32> zeroinitializer
  %136 = zext <8 x i8> %135 to <8 x i32>
  %137 = load i8, i8* %9, align 2, !alias.scope !487
  %138 = insertelement <8 x i8> undef, i8 %137, i32 0
  %139 = shufflevector <8 x i8> %138, <8 x i8> undef, <8 x i32> zeroinitializer
  %140 = zext <8 x i8> %139 to <8 x i32>
  %141 = load i8, i8* %10, align 1, !alias.scope !487
  %142 = insertelement <8 x i8> undef, i8 %141, i32 0
  %143 = shufflevector <8 x i8> %142, <8 x i8> undef, <8 x i32> zeroinitializer
  %144 = zext <8 x i8> %143 to <8 x i32>
  %145 = load i8, i8* %11, align 1, !alias.scope !487
  %146 = insertelement <8 x i8> undef, i8 %145, i32 0
  %147 = shufflevector <8 x i8> %146, <8 x i8> undef, <8 x i32> zeroinitializer
  %148 = zext <8 x i8> %147 to <8 x i32>
  %149 = load i16, i16* %12, align 2, !alias.scope !487
  %150 = insertelement <8 x i16> undef, i16 %149, i32 0
  %151 = shufflevector <8 x i16> %150, <8 x i16> undef, <8 x i32> zeroinitializer
  %152 = sext <8 x i16> %151 to <8 x i32>
  %153 = load i16, i16* %13, align 2, !alias.scope !487
  %154 = insertelement <8 x i16> undef, i16 %153, i32 0
  %155 = shufflevector <8 x i16> %154, <8 x i16> undef, <8 x i32> zeroinitializer
  %156 = sext <8 x i16> %155 to <8 x i32>
  %157 = zext <8 x i8> %63 to <8 x i32>
  %158 = mul nuw nsw <8 x i32> %157, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %159 = mul <8 x i32> %158, %152
  %160 = lshr <8 x i32> %159, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %161 = add nsw <8 x i32> %160, %156
  %162 = xor <8 x i8> %60, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %163 = xor <8 x i8> %62, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %164 = sext <8 x i8> %162 to <8 x i32>
  %165 = mul nsw <8 x i32> %136, %164
  %166 = add nsw <8 x i32> %161, %165
  %167 = sext <8 x i8> %163 to <8 x i32>
  %168 = mul nsw <8 x i32> %140, %164
  %169 = mul nsw <8 x i32> %144, %167
  %170 = add nsw <8 x i32> %169, %168
  %171 = sub nsw <8 x i32> %161, %170
  %172 = mul nsw <8 x i32> %148, %167
  %173 = add nsw <8 x i32> %161, %172
  %174 = ashr <8 x i32> %166, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %175 = lshr <8 x i32> %174, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %176 = xor <8 x i32> %175, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %177 = sub nsw <8 x i32> zeroinitializer, %176
  %178 = and <8 x i32> %174, %177
  %179 = icmp slt <8 x i32> %178, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %180 = select <8 x i1> %179, <8 x i32> %178, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %181 = trunc <8 x i32> %180 to <8 x i8>
  %182 = ashr <8 x i32> %171, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %183 = lshr <8 x i32> %182, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %184 = xor <8 x i32> %183, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %185 = sub nsw <8 x i32> zeroinitializer, %184
  %186 = and <8 x i32> %182, %185
  %187 = icmp slt <8 x i32> %186, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = select <8 x i1> %187, <8 x i32> %186, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %189 = trunc <8 x i32> %188 to <8 x i8>
  %190 = ashr <8 x i32> %173, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %191 = lshr <8 x i32> %190, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %192 = xor <8 x i32> %191, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %193 = sub nsw <8 x i32> zeroinitializer, %192
  %194 = and <8 x i32> %190, %193
  %195 = icmp slt <8 x i32> %194, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = select <8 x i1> %195, <8 x i32> %194, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %197 = trunc <8 x i32> %196 to <8 x i8>
  %198 = getelementptr inbounds i8, i8* %1, i64 %55
  %199 = bitcast i8* %198 to <64 x i8>*
  %200 = shufflevector <8 x i8> %116, <8 x i8> %124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %201 = shufflevector <8 x i8> %132, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %202 = shufflevector <8 x i8> %181, <8 x i8> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %203 = shufflevector <8 x i8> %197, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %204 = shufflevector <16 x i8> %200, <16 x i8> %201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %205 = shufflevector <16 x i8> %202, <16 x i8> %203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %206 = shufflevector <32 x i8> %204, <32 x i8> %205, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %206, <64 x i8>* %199, align 1
  %207 = add i64 %52, 8
  %208 = icmp eq i64 %207, %44
  br i1 %208, label %209, label %51, !llvm.loop !490

209:                                              ; preds = %51, %19, %7
  %210 = phi i32 [ 0, %19 ], [ 0, %7 ], [ %46, %51 ]
  %211 = phi i8* [ %0, %19 ], [ %0, %7 ], [ %48, %51 ]
  %212 = phi i8* [ %1, %19 ], [ %1, %7 ], [ %50, %51 ]
  br label %213

213:                                              ; preds = %209, %213
  %214 = phi i32 [ %341, %213 ], [ %210, %209 ]
  %215 = phi i8* [ %339, %213 ], [ %211, %209 ]
  %216 = phi i8* [ %340, %213 ], [ %212, %209 ]
  %217 = getelementptr inbounds i8, i8* %215, i64 1
  %218 = load i8, i8* %217, align 1
  %219 = load i8, i8* %215, align 1
  %220 = getelementptr inbounds i8, i8* %215, i64 2
  %221 = load i8, i8* %220, align 1
  %222 = getelementptr inbounds i8, i8* %216, i64 1
  %223 = getelementptr inbounds i8, i8* %216, i64 2
  %224 = load i8, i8* %8, align 2
  %225 = zext i8 %224 to i32
  %226 = load i8, i8* %9, align 2
  %227 = zext i8 %226 to i32
  %228 = load i8, i8* %10, align 1
  %229 = zext i8 %228 to i32
  %230 = load i8, i8* %11, align 1
  %231 = zext i8 %230 to i32
  %232 = load i16, i16* %12, align 2
  %233 = sext i16 %232 to i32
  %234 = load i16, i16* %13, align 2
  %235 = sext i16 %234 to i32
  %236 = zext i8 %218 to i32
  %237 = mul nuw nsw i32 %236, 257
  %238 = mul i32 %237, %233
  %239 = lshr i32 %238, 16
  %240 = add nsw i32 %239, %235
  %241 = xor i8 %219, -128
  %242 = xor i8 %221, -128
  %243 = sext i8 %241 to i32
  %244 = mul nsw i32 %225, %243
  %245 = add nsw i32 %240, %244
  %246 = sext i8 %242 to i32
  %247 = mul nsw i32 %227, %243
  %248 = mul nsw i32 %229, %246
  %249 = add nsw i32 %248, %247
  %250 = sub nsw i32 %240, %249
  %251 = mul nsw i32 %231, %246
  %252 = add nsw i32 %240, %251
  %253 = ashr i32 %245, 6
  %254 = lshr i32 %253, 31
  %255 = xor i32 %254, 1
  %256 = sub nsw i32 0, %255
  %257 = and i32 %253, %256
  %258 = icmp slt i32 %257, 255
  %259 = select i1 %258, i32 %257, i32 255
  %260 = trunc i32 %259 to i8
  store i8 %260, i8* %216, align 1
  %261 = ashr i32 %250, 6
  %262 = lshr i32 %261, 31
  %263 = xor i32 %262, 1
  %264 = sub nsw i32 0, %263
  %265 = and i32 %261, %264
  %266 = icmp slt i32 %265, 255
  %267 = select i1 %266, i32 %265, i32 255
  %268 = trunc i32 %267 to i8
  store i8 %268, i8* %222, align 1
  %269 = ashr i32 %252, 6
  %270 = lshr i32 %269, 31
  %271 = xor i32 %270, 1
  %272 = sub nsw i32 0, %271
  %273 = and i32 %269, %272
  %274 = icmp slt i32 %273, 255
  %275 = select i1 %274, i32 %273, i32 255
  %276 = trunc i32 %275 to i8
  store i8 %276, i8* %223, align 1
  %277 = getelementptr inbounds i8, i8* %216, i64 3
  store i8 -1, i8* %277, align 1
  %278 = getelementptr inbounds i8, i8* %215, i64 3
  %279 = load i8, i8* %278, align 1
  %280 = load i8, i8* %215, align 1
  %281 = load i8, i8* %220, align 1
  %282 = getelementptr inbounds i8, i8* %216, i64 4
  %283 = getelementptr inbounds i8, i8* %216, i64 5
  %284 = getelementptr inbounds i8, i8* %216, i64 6
  %285 = load i8, i8* %8, align 2
  %286 = zext i8 %285 to i32
  %287 = load i8, i8* %9, align 2
  %288 = zext i8 %287 to i32
  %289 = load i8, i8* %10, align 1
  %290 = zext i8 %289 to i32
  %291 = load i8, i8* %11, align 1
  %292 = zext i8 %291 to i32
  %293 = load i16, i16* %12, align 2
  %294 = sext i16 %293 to i32
  %295 = load i16, i16* %13, align 2
  %296 = sext i16 %295 to i32
  %297 = zext i8 %279 to i32
  %298 = mul nuw nsw i32 %297, 257
  %299 = mul i32 %298, %294
  %300 = lshr i32 %299, 16
  %301 = add nsw i32 %300, %296
  %302 = xor i8 %280, -128
  %303 = xor i8 %281, -128
  %304 = sext i8 %302 to i32
  %305 = mul nsw i32 %286, %304
  %306 = add nsw i32 %301, %305
  %307 = sext i8 %303 to i32
  %308 = mul nsw i32 %288, %304
  %309 = mul nsw i32 %290, %307
  %310 = add nsw i32 %309, %308
  %311 = sub nsw i32 %301, %310
  %312 = mul nsw i32 %292, %307
  %313 = add nsw i32 %301, %312
  %314 = ashr i32 %306, 6
  %315 = lshr i32 %314, 31
  %316 = xor i32 %315, 1
  %317 = sub nsw i32 0, %316
  %318 = and i32 %314, %317
  %319 = icmp slt i32 %318, 255
  %320 = select i1 %319, i32 %318, i32 255
  %321 = trunc i32 %320 to i8
  store i8 %321, i8* %282, align 1
  %322 = ashr i32 %311, 6
  %323 = lshr i32 %322, 31
  %324 = xor i32 %323, 1
  %325 = sub nsw i32 0, %324
  %326 = and i32 %322, %325
  %327 = icmp slt i32 %326, 255
  %328 = select i1 %327, i32 %326, i32 255
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %283, align 1
  %330 = ashr i32 %313, 6
  %331 = lshr i32 %330, 31
  %332 = xor i32 %331, 1
  %333 = sub nsw i32 0, %332
  %334 = and i32 %330, %333
  %335 = icmp slt i32 %334, 255
  %336 = select i1 %335, i32 %334, i32 255
  %337 = trunc i32 %336 to i8
  store i8 %337, i8* %284, align 1
  %338 = getelementptr inbounds i8, i8* %216, i64 7
  store i8 -1, i8* %338, align 1
  %339 = getelementptr inbounds i8, i8* %215, i64 4
  %340 = getelementptr inbounds i8, i8* %216, i64 8
  %341 = add nuw nsw i32 %214, 2
  %342 = icmp slt i32 %341, %5
  br i1 %342, label %213, label %343, !llvm.loop !491

343:                                              ; preds = %213, %4
  %344 = phi i8* [ %1, %4 ], [ %340, %213 ]
  %345 = phi i8* [ %0, %4 ], [ %339, %213 ]
  %346 = and i32 %3, 1
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %416, label %348

348:                                              ; preds = %343
  %349 = getelementptr inbounds i8, i8* %345, i64 1
  %350 = load i8, i8* %349, align 1
  %351 = load i8, i8* %345, align 1
  %352 = getelementptr inbounds i8, i8* %345, i64 2
  %353 = load i8, i8* %352, align 1
  %354 = getelementptr inbounds i8, i8* %344, i64 1
  %355 = getelementptr inbounds i8, i8* %344, i64 2
  %356 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 0, i64 0
  %357 = load i8, i8* %356, align 2
  %358 = zext i8 %357 to i32
  %359 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 0
  %360 = load i8, i8* %359, align 2
  %361 = zext i8 %360 to i32
  %362 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 1, i64 1
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i32
  %365 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 2, i64 1
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i32
  %368 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 3, i64 0
  %369 = load i16, i16* %368, align 2
  %370 = sext i16 %369 to i32
  %371 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %372 = load i16, i16* %371, align 2
  %373 = sext i16 %372 to i32
  %374 = zext i8 %350 to i32
  %375 = mul nuw nsw i32 %374, 257
  %376 = mul i32 %375, %370
  %377 = lshr i32 %376, 16
  %378 = add nsw i32 %377, %373
  %379 = xor i8 %351, -128
  %380 = xor i8 %353, -128
  %381 = sext i8 %379 to i32
  %382 = mul nsw i32 %358, %381
  %383 = add nsw i32 %378, %382
  %384 = sext i8 %380 to i32
  %385 = mul nsw i32 %361, %381
  %386 = mul nsw i32 %364, %384
  %387 = add nsw i32 %386, %385
  %388 = sub nsw i32 %378, %387
  %389 = mul nsw i32 %367, %384
  %390 = add nsw i32 %378, %389
  %391 = ashr i32 %383, 6
  %392 = lshr i32 %391, 31
  %393 = xor i32 %392, 1
  %394 = sub nsw i32 0, %393
  %395 = and i32 %391, %394
  %396 = icmp slt i32 %395, 255
  %397 = select i1 %396, i32 %395, i32 255
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %344, align 1
  %399 = ashr i32 %388, 6
  %400 = lshr i32 %399, 31
  %401 = xor i32 %400, 1
  %402 = sub nsw i32 0, %401
  %403 = and i32 %399, %402
  %404 = icmp slt i32 %403, 255
  %405 = select i1 %404, i32 %403, i32 255
  %406 = trunc i32 %405 to i8
  store i8 %406, i8* %354, align 1
  %407 = ashr i32 %390, 6
  %408 = lshr i32 %407, 31
  %409 = xor i32 %408, 1
  %410 = sub nsw i32 0, %409
  %411 = and i32 %407, %410
  %412 = icmp slt i32 %411, 255
  %413 = select i1 %412, i32 %411, i32 255
  %414 = trunc i32 %413 to i8
  store i8 %414, i8* %355, align 1
  %415 = getelementptr inbounds i8, i8* %344, i64 3
  store i8 -1, i8* %415, align 1
  br label %416

416:                                              ; preds = %343, %348
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I422ToRGBARow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %364

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %13 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %14 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %15 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %16 = add i32 %5, -2
  %17 = lshr i32 %16, 1
  %18 = add nuw i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 8
  br i1 %20, label %226, label %21

21:                                               ; preds = %9
  %22 = add i32 %5, -2
  %23 = lshr i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 3
  %26 = add nuw nsw i64 %25, 8
  %27 = getelementptr i8, i8* %3, i64 %26
  %28 = and i32 %22, -2
  %29 = zext i32 %28 to i64
  %30 = add nuw nsw i64 %29, 2
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = getelementptr i8, i8* %2, i64 %32
  %35 = getelementptr %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %36 = bitcast i16* %35 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = icmp ugt i8* %31, %3
  %39 = icmp ugt i8* %27, %0
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %33, %3
  %42 = icmp ugt i8* %27, %1
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %34, %3
  %46 = icmp ugt i8* %27, %2
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = bitcast i16* %15 to i8*
  %50 = icmp ugt i8* %37, %3
  %51 = icmp ugt i8* %27, %49
  %52 = and i1 %50, %51
  %53 = or i1 %48, %52
  br i1 %53, label %226, label %54

54:                                               ; preds = %21
  %55 = and i64 %19, 4294967288
  %56 = trunc i64 %55 to i32
  %57 = shl i32 %56, 1
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %0, i64 %58
  %60 = getelementptr i8, i8* %1, i64 %55
  %61 = shl nuw nsw i64 %55, 3
  %62 = getelementptr i8, i8* %3, i64 %61
  %63 = getelementptr i8, i8* %2, i64 %55
  br label %64

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %222, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i8, i8* %0, i64 %66
  %68 = getelementptr i8, i8* %1, i64 %65
  %69 = shl i64 %65, 3
  %70 = getelementptr i8, i8* %2, i64 %65
  %71 = bitcast i8* %67 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %75 = bitcast i8* %68 to <8 x i8>*
  %76 = load <8 x i8>, <8 x i8>* %75, align 1, !alias.scope !492
  %77 = bitcast i8* %70 to <8 x i8>*
  %78 = load <8 x i8>, <8 x i8>* %77, align 1, !alias.scope !495
  %79 = load i8, i8* %10, align 2, !alias.scope !497
  %80 = insertelement <8 x i8> undef, i8 %79, i32 0
  %81 = shufflevector <8 x i8> %80, <8 x i8> undef, <8 x i32> zeroinitializer
  %82 = zext <8 x i8> %81 to <8 x i32>
  %83 = load i8, i8* %11, align 2, !alias.scope !497
  %84 = insertelement <8 x i8> undef, i8 %83, i32 0
  %85 = shufflevector <8 x i8> %84, <8 x i8> undef, <8 x i32> zeroinitializer
  %86 = zext <8 x i8> %85 to <8 x i32>
  %87 = load i8, i8* %12, align 1, !alias.scope !497
  %88 = insertelement <8 x i8> undef, i8 %87, i32 0
  %89 = shufflevector <8 x i8> %88, <8 x i8> undef, <8 x i32> zeroinitializer
  %90 = zext <8 x i8> %89 to <8 x i32>
  %91 = load i8, i8* %13, align 1, !alias.scope !497
  %92 = insertelement <8 x i8> undef, i8 %91, i32 0
  %93 = shufflevector <8 x i8> %92, <8 x i8> undef, <8 x i32> zeroinitializer
  %94 = zext <8 x i8> %93 to <8 x i32>
  %95 = load i16, i16* %14, align 2, !alias.scope !497
  %96 = insertelement <8 x i16> undef, i16 %95, i32 0
  %97 = shufflevector <8 x i16> %96, <8 x i16> undef, <8 x i32> zeroinitializer
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = load i16, i16* %15, align 2, !alias.scope !497
  %100 = insertelement <8 x i16> undef, i16 %99, i32 0
  %101 = shufflevector <8 x i16> %100, <8 x i16> undef, <8 x i32> zeroinitializer
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = zext <8 x i8> %73 to <8 x i32>
  %104 = mul nuw nsw <8 x i32> %103, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %105 = mul <8 x i32> %104, %98
  %106 = lshr <8 x i32> %105, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %107 = add nsw <8 x i32> %106, %102
  %108 = xor <8 x i8> %76, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %109 = xor <8 x i8> %78, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %110 = sext <8 x i8> %108 to <8 x i32>
  %111 = mul nsw <8 x i32> %82, %110
  %112 = add nsw <8 x i32> %107, %111
  %113 = sext <8 x i8> %109 to <8 x i32>
  %114 = mul nsw <8 x i32> %86, %110
  %115 = mul nsw <8 x i32> %90, %113
  %116 = add nsw <8 x i32> %115, %114
  %117 = sub nsw <8 x i32> %107, %116
  %118 = mul nsw <8 x i32> %94, %113
  %119 = add nsw <8 x i32> %107, %118
  %120 = ashr <8 x i32> %112, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %121 = lshr <8 x i32> %120, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %122 = xor <8 x i32> %121, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %123 = sub nsw <8 x i32> zeroinitializer, %122
  %124 = and <8 x i32> %120, %123
  %125 = icmp slt <8 x i32> %124, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %126 = select <8 x i1> %125, <8 x i32> %124, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = ashr <8 x i32> %117, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %129 = lshr <8 x i32> %128, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %130 = xor <8 x i32> %129, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %131 = sub nsw <8 x i32> zeroinitializer, %130
  %132 = and <8 x i32> %128, %131
  %133 = icmp slt <8 x i32> %132, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %134 = select <8 x i1> %133, <8 x i32> %132, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %135 = trunc <8 x i32> %134 to <8 x i8>
  %136 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %137 = lshr <8 x i32> %136, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %138 = xor <8 x i32> %137, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %139 = sub nsw <8 x i32> zeroinitializer, %138
  %140 = and <8 x i32> %136, %139
  %141 = icmp slt <8 x i32> %140, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = select <8 x i1> %141, <8 x i32> %140, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %143 = trunc <8 x i32> %142 to <8 x i8>
  %144 = bitcast i8* %68 to <8 x i8>*
  %145 = load <8 x i8>, <8 x i8>* %144, align 1, !alias.scope !492
  %146 = bitcast i8* %70 to <8 x i8>*
  %147 = load <8 x i8>, <8 x i8>* %146, align 1, !alias.scope !495
  %148 = load i8, i8* %10, align 2, !alias.scope !497
  %149 = insertelement <8 x i8> undef, i8 %148, i32 0
  %150 = shufflevector <8 x i8> %149, <8 x i8> undef, <8 x i32> zeroinitializer
  %151 = zext <8 x i8> %150 to <8 x i32>
  %152 = load i8, i8* %11, align 2, !alias.scope !497
  %153 = insertelement <8 x i8> undef, i8 %152, i32 0
  %154 = shufflevector <8 x i8> %153, <8 x i8> undef, <8 x i32> zeroinitializer
  %155 = zext <8 x i8> %154 to <8 x i32>
  %156 = load i8, i8* %12, align 1, !alias.scope !497
  %157 = insertelement <8 x i8> undef, i8 %156, i32 0
  %158 = shufflevector <8 x i8> %157, <8 x i8> undef, <8 x i32> zeroinitializer
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = load i8, i8* %13, align 1, !alias.scope !497
  %161 = insertelement <8 x i8> undef, i8 %160, i32 0
  %162 = shufflevector <8 x i8> %161, <8 x i8> undef, <8 x i32> zeroinitializer
  %163 = zext <8 x i8> %162 to <8 x i32>
  %164 = load i16, i16* %14, align 2, !alias.scope !497
  %165 = insertelement <8 x i16> undef, i16 %164, i32 0
  %166 = shufflevector <8 x i16> %165, <8 x i16> undef, <8 x i32> zeroinitializer
  %167 = sext <8 x i16> %166 to <8 x i32>
  %168 = load i16, i16* %15, align 2, !alias.scope !497
  %169 = insertelement <8 x i16> undef, i16 %168, i32 0
  %170 = shufflevector <8 x i16> %169, <8 x i16> undef, <8 x i32> zeroinitializer
  %171 = sext <8 x i16> %170 to <8 x i32>
  %172 = zext <8 x i8> %74 to <8 x i32>
  %173 = mul nuw nsw <8 x i32> %172, <i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257, i32 257>
  %174 = mul <8 x i32> %173, %167
  %175 = lshr <8 x i32> %174, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %176 = add nsw <8 x i32> %175, %171
  %177 = xor <8 x i8> %145, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %178 = xor <8 x i8> %147, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %179 = sext <8 x i8> %177 to <8 x i32>
  %180 = mul nsw <8 x i32> %151, %179
  %181 = add nsw <8 x i32> %176, %180
  %182 = sext <8 x i8> %178 to <8 x i32>
  %183 = mul nsw <8 x i32> %155, %179
  %184 = mul nsw <8 x i32> %159, %182
  %185 = add nsw <8 x i32> %184, %183
  %186 = sub nsw <8 x i32> %176, %185
  %187 = mul nsw <8 x i32> %163, %182
  %188 = add nsw <8 x i32> %176, %187
  %189 = ashr <8 x i32> %181, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %190 = lshr <8 x i32> %189, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %191 = xor <8 x i32> %190, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %192 = sub nsw <8 x i32> zeroinitializer, %191
  %193 = and <8 x i32> %189, %192
  %194 = icmp slt <8 x i32> %193, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %195 = select <8 x i1> %194, <8 x i32> %193, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %196 = trunc <8 x i32> %195 to <8 x i8>
  %197 = ashr <8 x i32> %186, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %198 = lshr <8 x i32> %197, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %199 = xor <8 x i32> %198, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %200 = sub nsw <8 x i32> zeroinitializer, %199
  %201 = and <8 x i32> %197, %200
  %202 = icmp slt <8 x i32> %201, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %203 = select <8 x i1> %202, <8 x i32> %201, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %204 = trunc <8 x i32> %203 to <8 x i8>
  %205 = ashr <8 x i32> %188, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %206 = lshr <8 x i32> %205, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %207 = xor <8 x i32> %206, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %208 = sub nsw <8 x i32> zeroinitializer, %207
  %209 = and <8 x i32> %205, %208
  %210 = icmp slt <8 x i32> %209, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %211 = select <8 x i1> %210, <8 x i32> %209, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %212 = trunc <8 x i32> %211 to <8 x i8>
  %213 = getelementptr inbounds i8, i8* %3, i64 %69
  %214 = bitcast i8* %213 to <64 x i8>*
  %215 = shufflevector <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <8 x i8> %127, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %216 = shufflevector <8 x i8> %135, <8 x i8> %143, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %217 = shufflevector <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <8 x i8> %196, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %218 = shufflevector <8 x i8> %204, <8 x i8> %212, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %219 = shufflevector <16 x i8> %215, <16 x i8> %216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %220 = shufflevector <16 x i8> %217, <16 x i8> %218, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %221 = shufflevector <32 x i8> %219, <32 x i8> %220, <64 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>
  store <64 x i8> %221, <64 x i8>* %214, align 1
  %222 = add i64 %65, 8
  %223 = icmp eq i64 %222, %55
  br i1 %223, label %224, label %64, !llvm.loop !499

224:                                              ; preds = %64
  %225 = icmp eq i64 %55, %19
  br i1 %225, label %364, label %226

226:                                              ; preds = %224, %21, %9
  %227 = phi i32 [ 0, %21 ], [ 0, %9 ], [ %57, %224 ]
  %228 = phi i8* [ %0, %21 ], [ %0, %9 ], [ %59, %224 ]
  %229 = phi i8* [ %1, %21 ], [ %1, %9 ], [ %60, %224 ]
  %230 = phi i8* [ %3, %21 ], [ %3, %9 ], [ %62, %224 ]
  %231 = phi i8* [ %2, %21 ], [ %2, %9 ], [ %63, %224 ]
  br label %232

232:                                              ; preds = %226, %232
  %233 = phi i32 [ %362, %232 ], [ %227, %226 ]
  %234 = phi i8* [ %358, %232 ], [ %228, %226 ]
  %235 = phi i8* [ %359, %232 ], [ %229, %226 ]
  %236 = phi i8* [ %361, %232 ], [ %230, %226 ]
  %237 = phi i8* [ %360, %232 ], [ %231, %226 ]
  %238 = load i8, i8* %234, align 1
  %239 = load i8, i8* %235, align 1
  %240 = load i8, i8* %237, align 1
  %241 = getelementptr inbounds i8, i8* %236, i64 1
  %242 = getelementptr inbounds i8, i8* %236, i64 2
  %243 = getelementptr inbounds i8, i8* %236, i64 3
  %244 = load i8, i8* %10, align 2
  %245 = zext i8 %244 to i32
  %246 = load i8, i8* %11, align 2
  %247 = zext i8 %246 to i32
  %248 = load i8, i8* %12, align 1
  %249 = zext i8 %248 to i32
  %250 = load i8, i8* %13, align 1
  %251 = zext i8 %250 to i32
  %252 = load i16, i16* %14, align 2
  %253 = sext i16 %252 to i32
  %254 = load i16, i16* %15, align 2
  %255 = sext i16 %254 to i32
  %256 = zext i8 %238 to i32
  %257 = mul nuw nsw i32 %256, 257
  %258 = mul i32 %257, %253
  %259 = lshr i32 %258, 16
  %260 = add nsw i32 %259, %255
  %261 = xor i8 %239, -128
  %262 = xor i8 %240, -128
  %263 = sext i8 %261 to i32
  %264 = mul nsw i32 %245, %263
  %265 = add nsw i32 %260, %264
  %266 = sext i8 %262 to i32
  %267 = mul nsw i32 %247, %263
  %268 = mul nsw i32 %249, %266
  %269 = add nsw i32 %268, %267
  %270 = sub nsw i32 %260, %269
  %271 = mul nsw i32 %251, %266
  %272 = add nsw i32 %260, %271
  %273 = ashr i32 %265, 6
  %274 = lshr i32 %273, 31
  %275 = xor i32 %274, 1
  %276 = sub nsw i32 0, %275
  %277 = and i32 %273, %276
  %278 = icmp slt i32 %277, 255
  %279 = select i1 %278, i32 %277, i32 255
  %280 = trunc i32 %279 to i8
  store i8 %280, i8* %241, align 1
  %281 = ashr i32 %270, 6
  %282 = lshr i32 %281, 31
  %283 = xor i32 %282, 1
  %284 = sub nsw i32 0, %283
  %285 = and i32 %281, %284
  %286 = icmp slt i32 %285, 255
  %287 = select i1 %286, i32 %285, i32 255
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %242, align 1
  %289 = ashr i32 %272, 6
  %290 = lshr i32 %289, 31
  %291 = xor i32 %290, 1
  %292 = sub nsw i32 0, %291
  %293 = and i32 %289, %292
  %294 = icmp slt i32 %293, 255
  %295 = select i1 %294, i32 %293, i32 255
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %243, align 1
  store i8 -1, i8* %236, align 1
  %297 = getelementptr inbounds i8, i8* %234, i64 1
  %298 = load i8, i8* %297, align 1
  %299 = load i8, i8* %235, align 1
  %300 = load i8, i8* %237, align 1
  %301 = getelementptr inbounds i8, i8* %236, i64 5
  %302 = getelementptr inbounds i8, i8* %236, i64 6
  %303 = getelementptr inbounds i8, i8* %236, i64 7
  %304 = load i8, i8* %10, align 2
  %305 = zext i8 %304 to i32
  %306 = load i8, i8* %11, align 2
  %307 = zext i8 %306 to i32
  %308 = load i8, i8* %12, align 1
  %309 = zext i8 %308 to i32
  %310 = load i8, i8* %13, align 1
  %311 = zext i8 %310 to i32
  %312 = load i16, i16* %14, align 2
  %313 = sext i16 %312 to i32
  %314 = load i16, i16* %15, align 2
  %315 = sext i16 %314 to i32
  %316 = zext i8 %298 to i32
  %317 = mul nuw nsw i32 %316, 257
  %318 = mul i32 %317, %313
  %319 = lshr i32 %318, 16
  %320 = add nsw i32 %319, %315
  %321 = xor i8 %299, -128
  %322 = xor i8 %300, -128
  %323 = sext i8 %321 to i32
  %324 = mul nsw i32 %305, %323
  %325 = add nsw i32 %320, %324
  %326 = sext i8 %322 to i32
  %327 = mul nsw i32 %307, %323
  %328 = mul nsw i32 %309, %326
  %329 = add nsw i32 %328, %327
  %330 = sub nsw i32 %320, %329
  %331 = mul nsw i32 %311, %326
  %332 = add nsw i32 %320, %331
  %333 = ashr i32 %325, 6
  %334 = lshr i32 %333, 31
  %335 = xor i32 %334, 1
  %336 = sub nsw i32 0, %335
  %337 = and i32 %333, %336
  %338 = icmp slt i32 %337, 255
  %339 = select i1 %338, i32 %337, i32 255
  %340 = trunc i32 %339 to i8
  store i8 %340, i8* %301, align 1
  %341 = ashr i32 %330, 6
  %342 = lshr i32 %341, 31
  %343 = xor i32 %342, 1
  %344 = sub nsw i32 0, %343
  %345 = and i32 %341, %344
  %346 = icmp slt i32 %345, 255
  %347 = select i1 %346, i32 %345, i32 255
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %302, align 1
  %349 = ashr i32 %332, 6
  %350 = lshr i32 %349, 31
  %351 = xor i32 %350, 1
  %352 = sub nsw i32 0, %351
  %353 = and i32 %349, %352
  %354 = icmp slt i32 %353, 255
  %355 = select i1 %354, i32 %353, i32 255
  %356 = trunc i32 %355 to i8
  store i8 %356, i8* %303, align 1
  %357 = getelementptr inbounds i8, i8* %236, i64 4
  store i8 -1, i8* %357, align 1
  %358 = getelementptr inbounds i8, i8* %234, i64 2
  %359 = getelementptr inbounds i8, i8* %235, i64 1
  %360 = getelementptr inbounds i8, i8* %237, i64 1
  %361 = getelementptr inbounds i8, i8* %236, i64 8
  %362 = add nuw nsw i32 %233, 2
  %363 = icmp slt i32 %362, %7
  br i1 %363, label %232, label %364, !llvm.loop !500

364:                                              ; preds = %232, %224, %6
  %365 = phi i8* [ %2, %6 ], [ %63, %224 ], [ %360, %232 ]
  %366 = phi i8* [ %3, %6 ], [ %62, %224 ], [ %361, %232 ]
  %367 = phi i8* [ %1, %6 ], [ %60, %224 ], [ %359, %232 ]
  %368 = phi i8* [ %0, %6 ], [ %59, %224 ], [ %358, %232 ]
  %369 = and i32 %5, 1
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %437, label %371

371:                                              ; preds = %364
  %372 = load i8, i8* %368, align 1
  %373 = load i8, i8* %367, align 1
  %374 = load i8, i8* %365, align 1
  %375 = getelementptr inbounds i8, i8* %366, i64 1
  %376 = getelementptr inbounds i8, i8* %366, i64 2
  %377 = getelementptr inbounds i8, i8* %366, i64 3
  %378 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 0, i64 0
  %379 = load i8, i8* %378, align 2
  %380 = zext i8 %379 to i32
  %381 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 0
  %382 = load i8, i8* %381, align 2
  %383 = zext i8 %382 to i32
  %384 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 1, i64 1
  %385 = load i8, i8* %384, align 1
  %386 = zext i8 %385 to i32
  %387 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 2, i64 1
  %388 = load i8, i8* %387, align 1
  %389 = zext i8 %388 to i32
  %390 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 3, i64 0
  %391 = load i16, i16* %390, align 2
  %392 = sext i16 %391 to i32
  %393 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %4, i64 0, i32 4, i64 0
  %394 = load i16, i16* %393, align 2
  %395 = sext i16 %394 to i32
  %396 = zext i8 %372 to i32
  %397 = mul nuw nsw i32 %396, 257
  %398 = mul i32 %397, %392
  %399 = lshr i32 %398, 16
  %400 = add nsw i32 %399, %395
  %401 = xor i8 %373, -128
  %402 = xor i8 %374, -128
  %403 = sext i8 %401 to i32
  %404 = mul nsw i32 %380, %403
  %405 = add nsw i32 %400, %404
  %406 = sext i8 %402 to i32
  %407 = mul nsw i32 %383, %403
  %408 = mul nsw i32 %386, %406
  %409 = add nsw i32 %408, %407
  %410 = sub nsw i32 %400, %409
  %411 = mul nsw i32 %389, %406
  %412 = add nsw i32 %400, %411
  %413 = ashr i32 %405, 6
  %414 = lshr i32 %413, 31
  %415 = xor i32 %414, 1
  %416 = sub nsw i32 0, %415
  %417 = and i32 %413, %416
  %418 = icmp slt i32 %417, 255
  %419 = select i1 %418, i32 %417, i32 255
  %420 = trunc i32 %419 to i8
  store i8 %420, i8* %375, align 1
  %421 = ashr i32 %410, 6
  %422 = lshr i32 %421, 31
  %423 = xor i32 %422, 1
  %424 = sub nsw i32 0, %423
  %425 = and i32 %421, %424
  %426 = icmp slt i32 %425, 255
  %427 = select i1 %426, i32 %425, i32 255
  %428 = trunc i32 %427 to i8
  store i8 %428, i8* %376, align 1
  %429 = ashr i32 %412, 6
  %430 = lshr i32 %429, 31
  %431 = xor i32 %430, 1
  %432 = sub nsw i32 0, %431
  %433 = and i32 %429, %432
  %434 = icmp slt i32 %433, 255
  %435 = select i1 %434, i32 %433, i32 255
  %436 = trunc i32 %435 to i8
  store i8 %436, i8* %377, align 1
  store i8 -1, i8* %366, align 1
  br label %437

437:                                              ; preds = %364, %371
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I400ToARGBRow_C(i8* nocapture readonly, i8* nocapture, %"struct.libyuv::YuvConstants"* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %62

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %9 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 3, i64 0
  br label %10

10:                                               ; preds = %7, %10
  %11 = phi i32 [ 0, %7 ], [ %60, %10 ]
  %12 = phi i8* [ %0, %7 ], [ %58, %10 ]
  %13 = phi i8* [ %1, %7 ], [ %59, %10 ]
  %14 = load i8, i8* %12, align 1
  %15 = getelementptr inbounds i8, i8* %13, i64 1
  %16 = getelementptr inbounds i8, i8* %13, i64 2
  %17 = load i16, i16* %8, align 2
  %18 = sext i16 %17 to i32
  %19 = load i16, i16* %9, align 2
  %20 = sext i16 %19 to i32
  %21 = zext i8 %14 to i32
  %22 = mul nuw nsw i32 %21, 257
  %23 = mul nsw i32 %22, %20
  %24 = lshr i32 %23, 16
  %25 = add nsw i32 %24, %18
  %26 = ashr i32 %25, 6
  %27 = lshr i32 %26, 31
  %28 = xor i32 %27, 1
  %29 = sub nsw i32 0, %28
  %30 = and i32 %26, %29
  %31 = icmp slt i32 %30, 255
  %32 = select i1 %31, i32 %30, i32 255
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* %13, align 1
  store i8 %33, i8* %15, align 1
  store i8 %33, i8* %16, align 1
  %34 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 -1, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %12, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds i8, i8* %13, i64 4
  %38 = getelementptr inbounds i8, i8* %13, i64 5
  %39 = getelementptr inbounds i8, i8* %13, i64 6
  %40 = load i16, i16* %8, align 2
  %41 = sext i16 %40 to i32
  %42 = load i16, i16* %9, align 2
  %43 = sext i16 %42 to i32
  %44 = zext i8 %36 to i32
  %45 = mul nuw nsw i32 %44, 257
  %46 = mul nsw i32 %45, %43
  %47 = lshr i32 %46, 16
  %48 = add nsw i32 %47, %41
  %49 = ashr i32 %48, 6
  %50 = lshr i32 %49, 31
  %51 = xor i32 %50, 1
  %52 = sub nsw i32 0, %51
  %53 = and i32 %49, %52
  %54 = icmp slt i32 %53, 255
  %55 = select i1 %54, i32 %53, i32 255
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %37, align 1
  store i8 %56, i8* %38, align 1
  store i8 %56, i8* %39, align 1
  %57 = getelementptr inbounds i8, i8* %13, i64 7
  store i8 -1, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %12, i64 2
  %59 = getelementptr inbounds i8, i8* %13, i64 8
  %60 = add nuw nsw i32 %11, 2
  %61 = icmp slt i32 %60, %5
  br i1 %61, label %10, label %62

62:                                               ; preds = %10, %4
  %63 = phi i8* [ %1, %4 ], [ %59, %10 ]
  %64 = phi i8* [ %0, %4 ], [ %58, %10 ]
  %65 = and i32 %3, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %91, label %67

67:                                               ; preds = %62
  %68 = load i8, i8* %64, align 1
  %69 = getelementptr inbounds i8, i8* %63, i64 1
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  %71 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 4, i64 0
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = getelementptr inbounds %"struct.libyuv::YuvConstants", %"struct.libyuv::YuvConstants"* %2, i64 0, i32 3, i64 0
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = zext i8 %68 to i32
  %78 = mul nuw nsw i32 %77, 257
  %79 = mul nsw i32 %78, %76
  %80 = lshr i32 %79, 16
  %81 = add nsw i32 %80, %73
  %82 = ashr i32 %81, 6
  %83 = lshr i32 %82, 31
  %84 = xor i32 %83, 1
  %85 = sub nsw i32 0, %84
  %86 = and i32 %82, %85
  %87 = icmp slt i32 %86, 255
  %88 = select i1 %87, i32 %86, i32 255
  %89 = trunc i32 %88 to i8
  store i8 %89, i8* %63, align 1
  store i8 %89, i8* %69, align 1
  store i8 %89, i8* %70, align 1
  %90 = getelementptr inbounds i8, i8* %63, i64 3
  store i8 -1, i8* %90, align 1
  br label %91

91:                                               ; preds = %62, %67
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MirrorRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = sext i32 %4 to i64
  %6 = getelementptr inbounds i8, i8* %0, i64 %5
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %51

8:                                                ; preds = %3
  %9 = add nsw i64 %5, -1
  %10 = lshr i64 %9, 1
  %11 = add nuw i64 %10, 1
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %10, 0
  br i1 %13, label %38, label %14

14:                                               ; preds = %8
  %15 = sub nuw i64 %11, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %35, %16 ]
  %18 = phi i8* [ %6, %14 ], [ %34, %16 ]
  %19 = phi i64 [ %15, %14 ], [ %36, %16 ]
  %20 = load i8, i8* %18, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 %17
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %18, i64 -1
  %23 = load i8, i8* %22, align 1
  %24 = or i64 %17, 1
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  store i8 %23, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %18, i64 -2
  %27 = or i64 %17, 2
  %28 = load i8, i8* %26, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %27
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %18, i64 -3
  %31 = load i8, i8* %30, align 1
  %32 = or i64 %17, 3
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  store i8 %31, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %18, i64 -4
  %35 = add nuw nsw i64 %17, 4
  %36 = add i64 %19, -2
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %16

38:                                               ; preds = %16, %8
  %39 = phi i8* [ undef, %8 ], [ %34, %16 ]
  %40 = phi i64 [ 0, %8 ], [ %35, %16 ]
  %41 = phi i8* [ %6, %8 ], [ %34, %16 ]
  %42 = icmp eq i64 %12, 0
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = load i8, i8* %41, align 1
  %45 = getelementptr inbounds i8, i8* %1, i64 %40
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %41, i64 -1
  %47 = load i8, i8* %46, align 1
  %48 = or i64 %40, 1
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  store i8 %47, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %41, i64 -2
  br label %51

51:                                               ; preds = %43, %38, %3
  %52 = phi i8* [ %6, %3 ], [ %39, %38 ], [ %50, %43 ]
  %53 = and i32 %2, 1
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = load i8, i8* %52, align 1
  %57 = getelementptr inbounds i8, i8* %1, i64 %5
  store i8 %56, i8* %57, align 1
  br label %58

58:                                               ; preds = %51, %55
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MirrorUVRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %61

5:                                                ; preds = %3
  %6 = shl i32 %2, 1
  %7 = add i32 %6, -2
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = add i32 %2, -1
  %11 = and i32 %2, 3
  %12 = icmp ult i32 %10, 3
  br i1 %12, label %45, label %13

13:                                               ; preds = %5
  %14 = sub i32 %2, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8* [ %9, %13 ], [ %41, %15 ]
  %17 = phi i8* [ %1, %13 ], [ %42, %15 ]
  %18 = phi i32 [ %14, %13 ], [ %43, %15 ]
  %19 = load i8, i8* %16, align 1
  store i8 %19, i8* %17, align 1
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %16, i64 -2
  %24 = getelementptr inbounds i8, i8* %17, i64 2
  %25 = load i8, i8* %23, align 1
  store i8 %25, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %16, i64 -1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %16, i64 -4
  %30 = getelementptr inbounds i8, i8* %17, i64 4
  %31 = load i8, i8* %29, align 1
  store i8 %31, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %16, i64 -3
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %16, i64 -6
  %36 = getelementptr inbounds i8, i8* %17, i64 6
  %37 = load i8, i8* %35, align 1
  store i8 %37, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %16, i64 -5
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %17, i64 7
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %16, i64 -8
  %42 = getelementptr inbounds i8, i8* %17, i64 8
  %43 = add i32 %18, -4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %15

45:                                               ; preds = %15, %5
  %46 = phi i8* [ %9, %5 ], [ %41, %15 ]
  %47 = phi i8* [ %1, %5 ], [ %42, %15 ]
  %48 = icmp eq i32 %11, 0
  br i1 %48, label %61, label %49

49:                                               ; preds = %45, %49
  %50 = phi i8* [ %57, %49 ], [ %46, %45 ]
  %51 = phi i8* [ %58, %49 ], [ %47, %45 ]
  %52 = phi i32 [ %59, %49 ], [ %11, %45 ]
  %53 = load i8, i8* %50, align 1
  store i8 %53, i8* %51, align 1
  %54 = getelementptr inbounds i8, i8* %50, i64 1
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %51, i64 1
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds i8, i8* %50, i64 -2
  %58 = getelementptr inbounds i8, i8* %51, i64 2
  %59 = add i32 %52, -1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %49, !llvm.loop !501

61:                                               ; preds = %45, %49, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MirrorSplitUVRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = shl i32 %5, 1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %30

10:                                               ; preds = %4
  %11 = sext i32 %5 to i64
  br label %12

12:                                               ; preds = %10, %12
  %13 = phi i64 [ 0, %10 ], [ %28, %12 ]
  %14 = phi i8* [ %8, %10 ], [ %27, %12 ]
  %15 = load i8, i8* %14, align 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %13
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds i8, i8* %14, i64 -2
  %18 = load i8, i8* %17, align 1
  %19 = or i64 %13, 1
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  store i8 %18, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %14, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 %13
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %14, i64 -1
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %2, i64 %19
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %14, i64 -4
  %28 = add nuw nsw i64 %13, 2
  %29 = icmp slt i64 %28, %11
  br i1 %29, label %12, label %30

30:                                               ; preds = %12, %4
  %31 = phi i8* [ %8, %4 ], [ %27, %12 ]
  %32 = and i32 %3, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %30
  %35 = load i8, i8* %31, align 1
  %36 = sext i32 %5 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  store i8 %35, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %31, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %2, i64 %36
  store i8 %39, i8* %40, align 1
  br label %41

41:                                               ; preds = %30, %34
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBMirrorRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = bitcast i8* %0 to i32*
  %5 = bitcast i8* %1 to i32*
  %6 = add nsw i32 %2, -1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i32, i32* %4, i64 %7
  %9 = icmp sgt i32 %6, 0
  br i1 %9, label %10, label %53

10:                                               ; preds = %3
  %11 = add nsw i64 %7, -1
  %12 = lshr i64 %11, 1
  %13 = add nuw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %12, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %10
  %17 = sub nuw i64 %13, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %37, %18 ]
  %20 = phi i32* [ %8, %16 ], [ %36, %18 ]
  %21 = phi i64 [ %17, %16 ], [ %38, %18 ]
  %22 = load i32, i32* %20, align 4
  %23 = getelementptr inbounds i32, i32* %5, i64 %19
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds i32, i32* %20, i64 -1
  %25 = load i32, i32* %24, align 4
  %26 = or i64 %19, 1
  %27 = getelementptr inbounds i32, i32* %5, i64 %26
  store i32 %25, i32* %27, align 4
  %28 = getelementptr inbounds i32, i32* %20, i64 -2
  %29 = or i64 %19, 2
  %30 = load i32, i32* %28, align 4
  %31 = getelementptr inbounds i32, i32* %5, i64 %29
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds i32, i32* %20, i64 -3
  %33 = load i32, i32* %32, align 4
  %34 = or i64 %19, 3
  %35 = getelementptr inbounds i32, i32* %5, i64 %34
  store i32 %33, i32* %35, align 4
  %36 = getelementptr inbounds i32, i32* %20, i64 -4
  %37 = add nuw nsw i64 %19, 4
  %38 = add i64 %21, -2
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %18

40:                                               ; preds = %18, %10
  %41 = phi i32* [ undef, %10 ], [ %36, %18 ]
  %42 = phi i64 [ 0, %10 ], [ %37, %18 ]
  %43 = phi i32* [ %8, %10 ], [ %36, %18 ]
  %44 = icmp eq i64 %14, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %40
  %46 = load i32, i32* %43, align 4
  %47 = getelementptr inbounds i32, i32* %5, i64 %42
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds i32, i32* %43, i64 -1
  %49 = load i32, i32* %48, align 4
  %50 = or i64 %42, 1
  %51 = getelementptr inbounds i32, i32* %5, i64 %50
  store i32 %49, i32* %51, align 4
  %52 = getelementptr inbounds i32, i32* %43, i64 -2
  br label %53

53:                                               ; preds = %45, %40, %3
  %54 = phi i32* [ %8, %3 ], [ %41, %40 ], [ %52, %45 ]
  %55 = and i32 %2, 1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = load i32, i32* %54, align 4
  %59 = getelementptr inbounds i32, i32* %5, i64 %7
  store i32 %58, i32* %59, align 4
  br label %60

60:                                               ; preds = %53, %57
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @RGB24MirrorRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %50

5:                                                ; preds = %3
  %6 = mul nsw i32 %2, 3
  %7 = add nsw i32 %6, -3
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = and i32 %2, 1
  %11 = icmp eq i32 %2, 1
  br i1 %11, label %38, label %12

12:                                               ; preds = %5
  %13 = sub i32 %2, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i8* [ %9, %12 ], [ %34, %14 ]
  %16 = phi i8* [ %1, %12 ], [ %35, %14 ]
  %17 = phi i32 [ %13, %12 ], [ %36, %14 ]
  %18 = load i8, i8* %15, align 1
  %19 = getelementptr inbounds i8, i8* %15, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 2
  %22 = load i8, i8* %21, align 1
  store i8 %18, i8* %16, align 1
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %20, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %16, i64 2
  store i8 %22, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %15, i64 -3
  %26 = getelementptr inbounds i8, i8* %16, i64 3
  %27 = load i8, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 -2
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %15, i64 -1
  %31 = load i8, i8* %30, align 1
  store i8 %27, i8* %26, align 1
  %32 = getelementptr inbounds i8, i8* %16, i64 4
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %16, i64 5
  store i8 %31, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %15, i64 -6
  %35 = getelementptr inbounds i8, i8* %16, i64 6
  %36 = add i32 %17, -2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %14

38:                                               ; preds = %14, %5
  %39 = phi i8* [ %9, %5 ], [ %34, %14 ]
  %40 = phi i8* [ %1, %5 ], [ %35, %14 ]
  %41 = icmp eq i32 %10, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %38
  %43 = load i8, i8* %39, align 1
  %44 = getelementptr inbounds i8, i8* %39, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %39, i64 2
  %47 = load i8, i8* %46, align 1
  store i8 %43, i8* %40, align 1
  %48 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %45, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %40, i64 2
  store i8 %47, i8* %49, align 1
  br label %50

50:                                               ; preds = %42, %38, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SplitUVRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %4
  %8 = sext i32 %5 to i64
  br label %9

9:                                                ; preds = %7, %9
  %10 = phi i64 [ 0, %7 ], [ %25, %9 ]
  %11 = phi i8* [ %0, %7 ], [ %24, %9 ]
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds i8, i8* %1, i64 %10
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = or i64 %10, 1
  %17 = getelementptr inbounds i8, i8* %1, i64 %16
  store i8 %15, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds i8, i8* %2, i64 %10
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %11, i64 3
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 %16
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %11, i64 4
  %25 = add nuw nsw i64 %10, 2
  %26 = icmp slt i64 %25, %8
  br i1 %26, label %9, label %27

27:                                               ; preds = %9, %4
  %28 = phi i8* [ %0, %4 ], [ %24, %9 ]
  %29 = and i32 %3, 1
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %38, label %31

31:                                               ; preds = %27
  %32 = load i8, i8* %28, align 1
  %33 = sext i32 %5 to i64
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  store i8 %32, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %28, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds i8, i8* %2, i64 %33
  store i8 %36, i8* %37, align 1
  br label %38

38:                                               ; preds = %27, %31
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeUVRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %69

7:                                                ; preds = %4
  %8 = sext i32 %3 to i64
  %9 = add nsw i64 %8, -2
  %10 = lshr i64 %9, 1
  %11 = add nuw i64 %10, 1
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %10, 0
  br i1 %13, label %50, label %14

14:                                               ; preds = %7
  %15 = sub nuw i64 %11, %12
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %47, %16 ]
  %18 = phi i8* [ %2, %14 ], [ %46, %16 ]
  %19 = phi i64 [ %15, %14 ], [ %48, %16 ]
  %20 = getelementptr inbounds i8, i8* %0, i64 %17
  %21 = load i8, i8* %20, align 1
  store i8 %21, i8* %18, align 1
  %22 = getelementptr inbounds i8, i8* %1, i64 %17
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %23, i8* %24, align 1
  %25 = or i64 %17, 1
  %26 = getelementptr inbounds i8, i8* %0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %18, i64 2
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %25
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %18, i64 3
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %18, i64 4
  %33 = or i64 %17, 2
  %34 = getelementptr inbounds i8, i8* %0, i64 %33
  %35 = load i8, i8* %34, align 1
  store i8 %35, i8* %32, align 1
  %36 = getelementptr inbounds i8, i8* %1, i64 %33
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %18, i64 5
  store i8 %37, i8* %38, align 1
  %39 = or i64 %17, 3
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %18, i64 6
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %1, i64 %39
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %18, i64 7
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %18, i64 8
  %47 = add nuw nsw i64 %17, 4
  %48 = add i64 %19, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %16

50:                                               ; preds = %16, %7
  %51 = phi i8* [ undef, %7 ], [ %46, %16 ]
  %52 = phi i64 [ 0, %7 ], [ %47, %16 ]
  %53 = phi i8* [ %2, %7 ], [ %46, %16 ]
  %54 = icmp eq i64 %12, 0
  br i1 %54, label %69, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds i8, i8* %0, i64 %52
  %57 = load i8, i8* %56, align 1
  store i8 %57, i8* %53, align 1
  %58 = getelementptr inbounds i8, i8* %1, i64 %52
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 1
  store i8 %59, i8* %60, align 1
  %61 = or i64 %52, 1
  %62 = getelementptr inbounds i8, i8* %0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds i8, i8* %1, i64 %61
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %53, i64 3
  store i8 %66, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %53, i64 4
  br label %69

69:                                               ; preds = %55, %50, %4
  %70 = phi i8* [ %2, %4 ], [ %51, %50 ], [ %68, %55 ]
  %71 = and i32 %3, 1
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %69
  %74 = sext i32 %5 to i64
  %75 = getelementptr inbounds i8, i8* %0, i64 %74
  %76 = load i8, i8* %75, align 1
  store i8 %76, i8* %70, align 1
  %77 = getelementptr inbounds i8, i8* %1, i64 %74
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %78, i8* %79, align 1
  br label %80

80:                                               ; preds = %69, %73
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SplitRGBRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %52

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %4, 1
  br i1 %10, label %39, label %11

11:                                               ; preds = %7
  %12 = sub nsw i64 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %36, %13 ]
  %15 = phi i8* [ %0, %11 ], [ %35, %13 ]
  %16 = phi i64 [ %12, %11 ], [ %37, %13 ]
  %17 = load i8, i8* %15, align 1
  %18 = getelementptr inbounds i8, i8* %1, i64 %14
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %15, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %2, i64 %14
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %15, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %3, i64 %14
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %15, i64 3
  %26 = or i64 %14, 1
  %27 = load i8, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %1, i64 %26
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %15, i64 4
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %2, i64 %26
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %15, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %3, i64 %26
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %15, i64 6
  %36 = add nuw nsw i64 %14, 2
  %37 = add i64 %16, -2
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %13

39:                                               ; preds = %13, %7
  %40 = phi i64 [ 0, %7 ], [ %36, %13 ]
  %41 = phi i8* [ %0, %7 ], [ %35, %13 ]
  %42 = icmp eq i64 %9, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %39
  %44 = load i8, i8* %41, align 1
  %45 = getelementptr inbounds i8, i8* %1, i64 %40
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %41, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %2, i64 %40
  store i8 %47, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %41, i64 2
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr inbounds i8, i8* %3, i64 %40
  store i8 %50, i8* %51, align 1
  br label %52

52:                                               ; preds = %43, %39, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeRGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %52

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %4, 1
  br i1 %10, label %39, label %11

11:                                               ; preds = %7
  %12 = sub nsw i64 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ 0, %11 ], [ %36, %13 ]
  %15 = phi i8* [ %3, %11 ], [ %35, %13 ]
  %16 = phi i64 [ %12, %11 ], [ %37, %13 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %14
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %15, align 1
  %19 = getelementptr inbounds i8, i8* %1, i64 %14
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %2, i64 %14
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %15, i64 3
  %26 = or i64 %14, 1
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = load i8, i8* %27, align 1
  store i8 %28, i8* %25, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %26
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %15, i64 4
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %2, i64 %26
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %15, i64 5
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %15, i64 6
  %36 = add nuw nsw i64 %14, 2
  %37 = add i64 %16, -2
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %13

39:                                               ; preds = %13, %7
  %40 = phi i64 [ 0, %7 ], [ %36, %13 ]
  %41 = phi i8* [ %3, %7 ], [ %35, %13 ]
  %42 = icmp eq i64 %9, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, i8* %0, i64 %40
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %41, align 1
  %46 = getelementptr inbounds i8, i8* %1, i64 %40
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %47, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %2, i64 %40
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr inbounds i8, i8* %41, i64 2
  store i8 %50, i8* %51, align 1
  br label %52

52:                                               ; preds = %43, %39, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SplitARGBRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %62

8:                                                ; preds = %6
  %9 = zext i32 %5 to i64
  %10 = and i64 %9, 1
  %11 = icmp eq i32 %5, 1
  br i1 %11, label %46, label %12

12:                                               ; preds = %8
  %13 = sub nsw i64 %9, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %43, %14 ]
  %16 = phi i8* [ %0, %12 ], [ %42, %14 ]
  %17 = phi i64 [ %13, %12 ], [ %44, %14 ]
  %18 = load i8, i8* %16, align 1
  %19 = getelementptr inbounds i8, i8* %3, i64 %15
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %16, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %2, i64 %15
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %16, i64 2
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %1, i64 %15
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %16, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %4, i64 %15
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %16, i64 4
  %30 = or i64 %15, 1
  %31 = load i8, i8* %29, align 1
  %32 = getelementptr inbounds i8, i8* %3, i64 %30
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %16, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %2, i64 %30
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %16, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %1, i64 %30
  store i8 %37, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %16, i64 7
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %4, i64 %30
  store i8 %40, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %16, i64 8
  %43 = add nuw nsw i64 %15, 2
  %44 = add i64 %17, -2
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %14

46:                                               ; preds = %14, %8
  %47 = phi i64 [ 0, %8 ], [ %43, %14 ]
  %48 = phi i8* [ %0, %8 ], [ %42, %14 ]
  %49 = icmp eq i64 %10, 0
  br i1 %49, label %62, label %50

50:                                               ; preds = %46
  %51 = load i8, i8* %48, align 1
  %52 = getelementptr inbounds i8, i8* %3, i64 %47
  store i8 %51, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %48, i64 1
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds i8, i8* %2, i64 %47
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %48, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %1, i64 %47
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %48, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %4, i64 %47
  store i8 %60, i8* %61, align 1
  br label %62

62:                                               ; preds = %50, %46, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeARGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %166

8:                                                ; preds = %6
  %9 = zext i32 %5 to i64
  %10 = icmp ult i32 %5, 16
  br i1 %10, label %111, label %11

11:                                               ; preds = %8
  %12 = shl nuw nsw i64 %9, 2
  %13 = getelementptr i8, i8* %4, i64 %12
  %14 = getelementptr i8, i8* %2, i64 %9
  %15 = getelementptr i8, i8* %1, i64 %9
  %16 = getelementptr i8, i8* %0, i64 %9
  %17 = getelementptr i8, i8* %3, i64 %9
  %18 = icmp ugt i8* %14, %4
  %19 = icmp ugt i8* %13, %2
  %20 = and i1 %18, %19
  %21 = icmp ugt i8* %15, %4
  %22 = icmp ugt i8* %13, %1
  %23 = and i1 %21, %22
  %24 = or i1 %20, %23
  %25 = icmp ugt i8* %16, %4
  %26 = icmp ugt i8* %13, %0
  %27 = and i1 %25, %26
  %28 = or i1 %24, %27
  %29 = icmp ugt i8* %17, %4
  %30 = icmp ugt i8* %13, %3
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %111, label %33

33:                                               ; preds = %11
  %34 = and i64 %9, 4294967280
  %35 = shl nuw nsw i64 %34, 2
  %36 = getelementptr i8, i8* %4, i64 %35
  %37 = add nsw i64 %34, -16
  %38 = lshr exact i64 %37, 4
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %37, 0
  br i1 %41, label %87, label %42

42:                                               ; preds = %33
  %43 = sub nuw nsw i64 %39, %40
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi i64 [ 0, %42 ], [ %84, %44 ]
  %46 = phi i64 [ %43, %42 ], [ %85, %44 ]
  %47 = shl i64 %45, 2
  %48 = getelementptr inbounds i8, i8* %2, i64 %45
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !502
  %51 = getelementptr inbounds i8, i8* %1, i64 %45
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1, !alias.scope !505
  %54 = getelementptr inbounds i8, i8* %0, i64 %45
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1, !alias.scope !507
  %57 = getelementptr inbounds i8, i8* %3, i64 %45
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !509
  %60 = getelementptr inbounds i8, i8* %4, i64 %47
  %61 = bitcast i8* %60 to <64 x i8>*
  %62 = shufflevector <16 x i8> %50, <16 x i8> %53, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %63 = shufflevector <16 x i8> %56, <16 x i8> %59, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %64 = shufflevector <32 x i8> %62, <32 x i8> %63, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %64, <64 x i8>* %61, align 1
  %65 = or i64 %45, 16
  %66 = shl i64 %65, 2
  %67 = getelementptr inbounds i8, i8* %2, i64 %65
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !502
  %70 = getelementptr inbounds i8, i8* %1, i64 %65
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !505
  %73 = getelementptr inbounds i8, i8* %0, i64 %65
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !507
  %76 = getelementptr inbounds i8, i8* %3, i64 %65
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !509
  %79 = getelementptr inbounds i8, i8* %4, i64 %66
  %80 = bitcast i8* %79 to <64 x i8>*
  %81 = shufflevector <16 x i8> %69, <16 x i8> %72, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %82 = shufflevector <16 x i8> %75, <16 x i8> %78, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %83 = shufflevector <32 x i8> %81, <32 x i8> %82, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %83, <64 x i8>* %80, align 1
  %84 = add i64 %45, 32
  %85 = add i64 %46, -2
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %44, !llvm.loop !511

87:                                               ; preds = %44, %33
  %88 = phi i64 [ 0, %33 ], [ %84, %44 ]
  %89 = icmp eq i64 %40, 0
  br i1 %89, label %109, label %90

90:                                               ; preds = %87
  %91 = shl i64 %88, 2
  %92 = getelementptr inbounds i8, i8* %2, i64 %88
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !502
  %95 = getelementptr inbounds i8, i8* %1, i64 %88
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1, !alias.scope !505
  %98 = getelementptr inbounds i8, i8* %0, i64 %88
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1, !alias.scope !507
  %101 = getelementptr inbounds i8, i8* %3, i64 %88
  %102 = bitcast i8* %101 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !509
  %104 = getelementptr inbounds i8, i8* %4, i64 %91
  %105 = bitcast i8* %104 to <64 x i8>*
  %106 = shufflevector <16 x i8> %94, <16 x i8> %97, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %107 = shufflevector <16 x i8> %100, <16 x i8> %103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %108 = shufflevector <32 x i8> %106, <32 x i8> %107, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %108, <64 x i8>* %105, align 1
  br label %109

109:                                              ; preds = %87, %90
  %110 = icmp eq i64 %34, %9
  br i1 %110, label %166, label %111

111:                                              ; preds = %109, %11, %8
  %112 = phi i64 [ 0, %11 ], [ 0, %8 ], [ %34, %109 ]
  %113 = phi i8* [ %4, %11 ], [ %4, %8 ], [ %36, %109 ]
  %114 = xor i64 %112, -1
  %115 = and i64 %9, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %131, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds i8, i8* %2, i64 %112
  %119 = load i8, i8* %118, align 1
  store i8 %119, i8* %113, align 1
  %120 = getelementptr inbounds i8, i8* %1, i64 %112
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %113, i64 1
  store i8 %121, i8* %122, align 1
  %123 = getelementptr inbounds i8, i8* %0, i64 %112
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %113, i64 2
  store i8 %124, i8* %125, align 1
  %126 = getelementptr inbounds i8, i8* %3, i64 %112
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %113, i64 3
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds i8, i8* %113, i64 4
  %130 = or i64 %112, 1
  br label %131

131:                                              ; preds = %111, %117
  %132 = phi i64 [ %112, %111 ], [ %130, %117 ]
  %133 = phi i8* [ %113, %111 ], [ %129, %117 ]
  %134 = sub nsw i64 0, %9
  %135 = icmp eq i64 %114, %134
  br i1 %135, label %166, label %136

136:                                              ; preds = %131, %136
  %137 = phi i64 [ %164, %136 ], [ %132, %131 ]
  %138 = phi i8* [ %163, %136 ], [ %133, %131 ]
  %139 = getelementptr inbounds i8, i8* %2, i64 %137
  %140 = load i8, i8* %139, align 1
  store i8 %140, i8* %138, align 1
  %141 = getelementptr inbounds i8, i8* %1, i64 %137
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds i8, i8* %138, i64 1
  store i8 %142, i8* %143, align 1
  %144 = getelementptr inbounds i8, i8* %0, i64 %137
  %145 = load i8, i8* %144, align 1
  %146 = getelementptr inbounds i8, i8* %138, i64 2
  store i8 %145, i8* %146, align 1
  %147 = getelementptr inbounds i8, i8* %3, i64 %137
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %138, i64 3
  store i8 %148, i8* %149, align 1
  %150 = getelementptr inbounds i8, i8* %138, i64 4
  %151 = add nuw nsw i64 %137, 1
  %152 = getelementptr inbounds i8, i8* %2, i64 %151
  %153 = load i8, i8* %152, align 1
  store i8 %153, i8* %150, align 1
  %154 = getelementptr inbounds i8, i8* %1, i64 %151
  %155 = load i8, i8* %154, align 1
  %156 = getelementptr inbounds i8, i8* %138, i64 5
  store i8 %155, i8* %156, align 1
  %157 = getelementptr inbounds i8, i8* %0, i64 %151
  %158 = load i8, i8* %157, align 1
  %159 = getelementptr inbounds i8, i8* %138, i64 6
  store i8 %158, i8* %159, align 1
  %160 = getelementptr inbounds i8, i8* %3, i64 %151
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds i8, i8* %138, i64 7
  store i8 %161, i8* %162, align 1
  %163 = getelementptr inbounds i8, i8* %138, i64 8
  %164 = add nuw nsw i64 %137, 2
  %165 = icmp eq i64 %164, %9
  br i1 %165, label %166, label %136, !llvm.loop !512

166:                                              ; preds = %131, %136, %109, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeXR30Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %7 = bitcast i16* %0 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %2 to i8*
  %10 = add nsw i32 %4, -10
  %11 = bitcast i8* %3 to i32*
  %12 = icmp sgt i32 %5, 0
  br i1 %12, label %13, label %108

13:                                               ; preds = %6
  %14 = zext i32 %5 to i64
  %15 = icmp ult i32 %5, 4
  br i1 %15, label %76, label %16

16:                                               ; preds = %13
  %17 = shl nuw nsw i64 %14, 2
  %18 = getelementptr i8, i8* %3, i64 %17
  %19 = getelementptr i16, i16* %0, i64 %14
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr i16, i16* %1, i64 %14
  %22 = bitcast i16* %21 to i8*
  %23 = getelementptr i16, i16* %2, i64 %14
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ugt i8* %20, %3
  %26 = icmp ugt i8* %18, %7
  %27 = and i1 %25, %26
  %28 = icmp ugt i8* %22, %3
  %29 = icmp ugt i8* %18, %8
  %30 = and i1 %28, %29
  %31 = or i1 %27, %30
  %32 = icmp ugt i8* %24, %3
  %33 = icmp ugt i8* %18, %9
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  br i1 %35, label %76, label %36

36:                                               ; preds = %16
  %37 = and i64 %14, 4294967292
  %38 = insertelement <4 x i32> undef, i32 %10, i32 0
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %40

40:                                               ; preds = %40, %36
  %41 = phi i64 [ 0, %36 ], [ %72, %40 ]
  %42 = getelementptr inbounds i16, i16* %0, i64 %41
  %43 = bitcast i16* %42 to <4 x i16>*
  %44 = load <4 x i16>, <4 x i16>* %43, align 2, !alias.scope !513
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = lshr <4 x i32> %45, %39
  %47 = icmp sgt <4 x i32> %46, <i32 1022, i32 1022, i32 1022, i32 1022>
  %48 = getelementptr inbounds i16, i16* %1, i64 %41
  %49 = bitcast i16* %48 to <4 x i16>*
  %50 = load <4 x i16>, <4 x i16>* %49, align 2, !alias.scope !516
  %51 = zext <4 x i16> %50 to <4 x i32>
  %52 = lshr <4 x i32> %51, %39
  %53 = icmp sgt <4 x i32> %52, <i32 1022, i32 1022, i32 1022, i32 1022>
  %54 = getelementptr inbounds i16, i16* %2, i64 %41
  %55 = bitcast i16* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 2, !alias.scope !518
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = lshr <4 x i32> %57, %39
  %59 = icmp sgt <4 x i32> %58, <i32 1022, i32 1022, i32 1022, i32 1022>
  %60 = and <4 x i32> %58, <i32 1023, i32 1023, i32 1023, i32 1023>
  %61 = select <4 x i1> %59, <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, <4 x i32> %60
  %62 = shl <4 x i32> %52, <i32 10, i32 10, i32 10, i32 10>
  %63 = and <4 x i32> %62, <i32 1047552, i32 1047552, i32 1047552, i32 1047552>
  %64 = select <4 x i1> %53, <4 x i32> <i32 1047552, i32 1047552, i32 1047552, i32 1047552>, <4 x i32> %63
  %65 = shl <4 x i32> %46, <i32 20, i32 20, i32 20, i32 20>
  %66 = or <4 x i32> %65, <i32 -1073741824, i32 -1073741824, i32 -1073741824, i32 -1073741824>
  %67 = select <4 x i1> %47, <4 x i32> <i32 -1048576, i32 -1048576, i32 -1048576, i32 -1048576>, <4 x i32> %66
  %68 = or <4 x i32> %67, %64
  %69 = or <4 x i32> %68, %61
  %70 = getelementptr inbounds i32, i32* %11, i64 %41
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %71, align 4, !alias.scope !520, !noalias !522
  %72 = add i64 %41, 4
  %73 = icmp eq i64 %72, %37
  br i1 %73, label %74, label %40, !llvm.loop !523

74:                                               ; preds = %40
  %75 = icmp eq i64 %37, %14
  br i1 %75, label %108, label %76

76:                                               ; preds = %74, %16, %13
  %77 = phi i64 [ 0, %16 ], [ 0, %13 ], [ %37, %74 ]
  br label %78

78:                                               ; preds = %76, %78
  %79 = phi i64 [ %106, %78 ], [ %77, %76 ]
  %80 = getelementptr inbounds i16, i16* %0, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = lshr i32 %82, %10
  %84 = icmp sgt i32 %83, 1022
  %85 = getelementptr inbounds i16, i16* %1, i64 %79
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i32
  %88 = lshr i32 %87, %10
  %89 = icmp sgt i32 %88, 1022
  %90 = getelementptr inbounds i16, i16* %2, i64 %79
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = lshr i32 %92, %10
  %94 = icmp sgt i32 %93, 1022
  %95 = and i32 %93, 1023
  %96 = select i1 %94, i32 1023, i32 %95
  %97 = shl i32 %88, 10
  %98 = and i32 %97, 1047552
  %99 = select i1 %89, i32 1047552, i32 %98
  %100 = shl i32 %83, 20
  %101 = or i32 %100, -1073741824
  %102 = select i1 %84, i32 -1048576, i32 %101
  %103 = or i32 %102, %99
  %104 = or i32 %103, %96
  %105 = getelementptr inbounds i32, i32* %11, i64 %79
  store i32 %104, i32* %105, align 4
  %106 = add nuw nsw i64 %79, 1
  %107 = icmp eq i64 %106, %14
  br i1 %107, label %108, label %78, !llvm.loop !524

108:                                              ; preds = %78, %74, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeAR64Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %8 = sub nsw i32 16, %5
  %9 = shl nsw i32 -1, %5
  %10 = xor i32 %9, -1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %137

12:                                               ; preds = %7
  %13 = zext i32 %6 to i64
  %14 = icmp ult i32 %6, 8
  br i1 %14, label %93, label %15

15:                                               ; preds = %12
  %16 = shl nuw nsw i64 %13, 2
  %17 = getelementptr i16, i16* %4, i64 %16
  %18 = getelementptr i16, i16* %2, i64 %13
  %19 = getelementptr i16, i16* %1, i64 %13
  %20 = getelementptr i16, i16* %0, i64 %13
  %21 = getelementptr i16, i16* %3, i64 %13
  %22 = icmp ugt i16* %18, %4
  %23 = icmp ugt i16* %17, %2
  %24 = and i1 %22, %23
  %25 = icmp ugt i16* %19, %4
  %26 = icmp ugt i16* %17, %1
  %27 = and i1 %25, %26
  %28 = or i1 %24, %27
  %29 = icmp ugt i16* %20, %4
  %30 = icmp ugt i16* %17, %0
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  %33 = icmp ugt i16* %21, %4
  %34 = icmp ugt i16* %17, %3
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  br i1 %36, label %93, label %37

37:                                               ; preds = %15
  %38 = and i64 %13, 4294967288
  %39 = shl nuw nsw i64 %38, 2
  %40 = getelementptr i16, i16* %4, i64 %39
  %41 = insertelement <8 x i32> undef, i32 %10, i32 0
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> zeroinitializer
  %43 = insertelement <8 x i32> undef, i32 %8, i32 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %45

45:                                               ; preds = %45, %37
  %46 = phi i64 [ 0, %37 ], [ %89, %45 ]
  %47 = shl i64 %46, 2
  %48 = getelementptr inbounds i16, i16* %2, i64 %46
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !525
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = icmp sgt <8 x i32> %42, %51
  %53 = select <8 x i1> %52, <8 x i32> %51, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %54 = and <8 x i32> %53, %42
  %55 = shl <8 x i32> %54, %44
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = getelementptr inbounds i16, i16* %1, i64 %46
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !528
  %60 = zext <8 x i16> %59 to <8 x i32>
  %61 = icmp sgt <8 x i32> %42, %60
  %62 = select <8 x i1> %61, <8 x i32> %60, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %63 = and <8 x i32> %62, %42
  %64 = shl <8 x i32> %63, %44
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = getelementptr inbounds i16, i16* %0, i64 %46
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !530
  %69 = zext <8 x i16> %68 to <8 x i32>
  %70 = icmp sgt <8 x i32> %42, %69
  %71 = select <8 x i1> %70, <8 x i32> %69, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %72 = and <8 x i32> %71, %42
  %73 = shl <8 x i32> %72, %44
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %3, i64 %46
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !alias.scope !532
  %78 = zext <8 x i16> %77 to <8 x i32>
  %79 = icmp sgt <8 x i32> %42, %78
  %80 = select <8 x i1> %79, <8 x i32> %78, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %81 = and <8 x i32> %80, %42
  %82 = shl <8 x i32> %81, %44
  %83 = trunc <8 x i32> %82 to <8 x i16>
  %84 = getelementptr inbounds i16, i16* %4, i64 %47
  %85 = bitcast i16* %84 to <32 x i16>*
  %86 = shufflevector <8 x i16> %56, <8 x i16> %65, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %87 = shufflevector <8 x i16> %74, <8 x i16> %83, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %88 = shufflevector <16 x i16> %86, <16 x i16> %87, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %88, <32 x i16>* %85, align 2
  %89 = add i64 %46, 8
  %90 = icmp eq i64 %89, %38
  br i1 %90, label %91, label %45, !llvm.loop !534

91:                                               ; preds = %45
  %92 = icmp eq i64 %38, %13
  br i1 %92, label %137, label %93

93:                                               ; preds = %91, %15, %12
  %94 = phi i64 [ 0, %15 ], [ 0, %12 ], [ %38, %91 ]
  %95 = phi i16* [ %4, %15 ], [ %4, %12 ], [ %40, %91 ]
  br label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %135, %96 ], [ %94, %93 ]
  %98 = phi i16* [ %134, %96 ], [ %95, %93 ]
  %99 = getelementptr inbounds i16, i16* %2, i64 %97
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = icmp slt i32 %101, %10
  %103 = select i1 %102, i32 %101, i32 -1
  %104 = and i32 %103, %10
  %105 = shl i32 %104, %8
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %98, align 2
  %107 = getelementptr inbounds i16, i16* %1, i64 %97
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = icmp slt i32 %109, %10
  %111 = select i1 %110, i32 %109, i32 -1
  %112 = and i32 %111, %10
  %113 = shl i32 %112, %8
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %98, i64 1
  store i16 %114, i16* %115, align 2
  %116 = getelementptr inbounds i16, i16* %0, i64 %97
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = icmp slt i32 %118, %10
  %120 = select i1 %119, i32 %118, i32 -1
  %121 = and i32 %120, %10
  %122 = shl i32 %121, %8
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %98, i64 2
  store i16 %123, i16* %124, align 2
  %125 = getelementptr inbounds i16, i16* %3, i64 %97
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = icmp slt i32 %127, %10
  %129 = select i1 %128, i32 %127, i32 -1
  %130 = and i32 %129, %10
  %131 = shl i32 %130, %8
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %98, i64 3
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %98, i64 4
  %135 = add nuw nsw i64 %97, 1
  %136 = icmp eq i64 %135, %13
  br i1 %136, label %137, label %96, !llvm.loop !535

137:                                              ; preds = %96, %91, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeARGB16To8Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %8 = bitcast i16* %2 to i8*
  %9 = bitcast i16* %1 to i8*
  %10 = bitcast i16* %0 to i8*
  %11 = bitcast i16* %3 to i8*
  %12 = add nsw i32 %5, -8
  %13 = icmp sgt i32 %6, 0
  br i1 %13, label %14, label %133

14:                                               ; preds = %7
  %15 = zext i32 %6 to i64
  %16 = icmp ult i32 %6, 8
  br i1 %16, label %93, label %17

17:                                               ; preds = %14
  %18 = shl nuw nsw i64 %15, 2
  %19 = getelementptr i8, i8* %4, i64 %18
  %20 = getelementptr i16, i16* %2, i64 %15
  %21 = bitcast i16* %20 to i8*
  %22 = getelementptr i16, i16* %1, i64 %15
  %23 = bitcast i16* %22 to i8*
  %24 = getelementptr i16, i16* %0, i64 %15
  %25 = bitcast i16* %24 to i8*
  %26 = getelementptr i16, i16* %3, i64 %15
  %27 = bitcast i16* %26 to i8*
  %28 = icmp ugt i8* %21, %4
  %29 = icmp ugt i8* %19, %8
  %30 = and i1 %28, %29
  %31 = icmp ugt i8* %23, %4
  %32 = icmp ugt i8* %19, %9
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  %35 = icmp ugt i8* %25, %4
  %36 = icmp ugt i8* %19, %10
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  %39 = icmp ugt i8* %27, %4
  %40 = icmp ugt i8* %19, %11
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %93, label %43

43:                                               ; preds = %17
  %44 = and i64 %15, 4294967288
  %45 = shl nuw nsw i64 %44, 2
  %46 = getelementptr i8, i8* %4, i64 %45
  %47 = insertelement <8 x i32> undef, i32 %12, i32 0
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %49

49:                                               ; preds = %49, %43
  %50 = phi i64 [ 0, %43 ], [ %89, %49 ]
  %51 = shl i64 %50, 2
  %52 = getelementptr inbounds i16, i16* %2, i64 %50
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2, !alias.scope !536
  %55 = zext <8 x i16> %54 to <8 x i32>
  %56 = lshr <8 x i32> %55, %48
  %57 = icmp slt <8 x i32> %56, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %58 = select <8 x i1> %57, <8 x i32> %56, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %59 = trunc <8 x i32> %58 to <8 x i8>
  %60 = getelementptr inbounds i16, i16* %1, i64 %50
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !539
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = lshr <8 x i32> %63, %48
  %65 = icmp slt <8 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = select <8 x i1> %65, <8 x i32> %64, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = trunc <8 x i32> %66 to <8 x i8>
  %68 = getelementptr inbounds i16, i16* %0, i64 %50
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !541
  %71 = zext <8 x i16> %70 to <8 x i32>
  %72 = lshr <8 x i32> %71, %48
  %73 = icmp slt <8 x i32> %72, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %74 = select <8 x i1> %73, <8 x i32> %72, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %75 = trunc <8 x i32> %74 to <8 x i8>
  %76 = getelementptr inbounds i16, i16* %3, i64 %50
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !543
  %79 = zext <8 x i16> %78 to <8 x i32>
  %80 = lshr <8 x i32> %79, %48
  %81 = icmp slt <8 x i32> %80, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %82 = select <8 x i1> %81, <8 x i32> %80, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %83 = trunc <8 x i32> %82 to <8 x i8>
  %84 = getelementptr inbounds i8, i8* %4, i64 %51
  %85 = bitcast i8* %84 to <32 x i8>*
  %86 = shufflevector <8 x i8> %59, <8 x i8> %67, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %87 = shufflevector <8 x i8> %75, <8 x i8> %83, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %88 = shufflevector <16 x i8> %86, <16 x i8> %87, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %88, <32 x i8>* %85, align 1
  %89 = add i64 %50, 8
  %90 = icmp eq i64 %89, %44
  br i1 %90, label %91, label %49, !llvm.loop !545

91:                                               ; preds = %49
  %92 = icmp eq i64 %44, %15
  br i1 %92, label %133, label %93

93:                                               ; preds = %91, %17, %14
  %94 = phi i64 [ 0, %17 ], [ 0, %14 ], [ %44, %91 ]
  %95 = phi i8* [ %4, %17 ], [ %4, %14 ], [ %46, %91 ]
  br label %96

96:                                               ; preds = %93, %96
  %97 = phi i64 [ %131, %96 ], [ %94, %93 ]
  %98 = phi i8* [ %130, %96 ], [ %95, %93 ]
  %99 = getelementptr inbounds i16, i16* %2, i64 %97
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = lshr i32 %101, %12
  %103 = icmp slt i32 %102, 255
  %104 = select i1 %103, i32 %102, i32 255
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %98, align 1
  %106 = getelementptr inbounds i16, i16* %1, i64 %97
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = lshr i32 %108, %12
  %110 = icmp slt i32 %109, 255
  %111 = select i1 %110, i32 %109, i32 255
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds i16, i16* %0, i64 %97
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = lshr i32 %116, %12
  %118 = icmp slt i32 %117, 255
  %119 = select i1 %118, i32 %117, i32 255
  %120 = trunc i32 %119 to i8
  %121 = getelementptr inbounds i8, i8* %98, i64 2
  store i8 %120, i8* %121, align 1
  %122 = getelementptr inbounds i16, i16* %3, i64 %97
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = lshr i32 %124, %12
  %126 = icmp slt i32 %125, 255
  %127 = select i1 %126, i32 %125, i32 255
  %128 = trunc i32 %127 to i8
  %129 = getelementptr inbounds i8, i8* %98, i64 3
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %98, i64 4
  %131 = add nuw nsw i64 %97, 1
  %132 = icmp eq i64 %131, %15
  br i1 %132, label %133, label %96, !llvm.loop !546

133:                                              ; preds = %96, %91, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeXR64Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %7 = sub nsw i32 16, %4
  %8 = shl nsw i32 -1, %4
  %9 = xor i32 %8, -1
  %10 = icmp sgt i32 %5, 0
  br i1 %10, label %11, label %114

11:                                               ; preds = %6
  %12 = zext i32 %5 to i64
  %13 = icmp ult i32 %5, 8
  br i1 %13, label %78, label %14

14:                                               ; preds = %11
  %15 = shl nuw nsw i64 %12, 2
  %16 = getelementptr i16, i16* %3, i64 %15
  %17 = getelementptr i16, i16* %2, i64 %12
  %18 = getelementptr i16, i16* %1, i64 %12
  %19 = getelementptr i16, i16* %0, i64 %12
  %20 = icmp ugt i16* %17, %3
  %21 = icmp ugt i16* %16, %2
  %22 = and i1 %20, %21
  %23 = icmp ugt i16* %18, %3
  %24 = icmp ugt i16* %16, %1
  %25 = and i1 %23, %24
  %26 = or i1 %22, %25
  %27 = icmp ugt i16* %19, %3
  %28 = icmp ugt i16* %16, %0
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %78, label %31

31:                                               ; preds = %14
  %32 = and i64 %12, 4294967288
  %33 = shl nuw nsw i64 %32, 2
  %34 = getelementptr i16, i16* %3, i64 %33
  %35 = insertelement <8 x i32> undef, i32 %9, i32 0
  %36 = shufflevector <8 x i32> %35, <8 x i32> undef, <8 x i32> zeroinitializer
  %37 = insertelement <8 x i32> undef, i32 %7, i32 0
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %39

39:                                               ; preds = %39, %31
  %40 = phi i64 [ 0, %31 ], [ %74, %39 ]
  %41 = shl i64 %40, 2
  %42 = getelementptr inbounds i16, i16* %2, i64 %40
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2, !alias.scope !547
  %45 = zext <8 x i16> %44 to <8 x i32>
  %46 = icmp sgt <8 x i32> %36, %45
  %47 = select <8 x i1> %46, <8 x i32> %45, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = and <8 x i32> %47, %36
  %49 = shl <8 x i32> %48, %38
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = getelementptr inbounds i16, i16* %1, i64 %40
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !550
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = icmp sgt <8 x i32> %36, %54
  %56 = select <8 x i1> %55, <8 x i32> %54, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = and <8 x i32> %56, %36
  %58 = shl <8 x i32> %57, %38
  %59 = trunc <8 x i32> %58 to <8 x i16>
  %60 = getelementptr inbounds i16, i16* %0, i64 %40
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !552
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = icmp sgt <8 x i32> %36, %63
  %65 = select <8 x i1> %64, <8 x i32> %63, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %66 = and <8 x i32> %65, %36
  %67 = shl <8 x i32> %66, %38
  %68 = trunc <8 x i32> %67 to <8 x i16>
  %69 = getelementptr inbounds i16, i16* %3, i64 %41
  %70 = bitcast i16* %69 to <32 x i16>*
  %71 = shufflevector <8 x i16> %50, <8 x i16> %59, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %72 = shufflevector <8 x i16> %68, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %73 = shufflevector <16 x i16> %71, <16 x i16> %72, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i16> %73, <32 x i16>* %70, align 2
  %74 = add i64 %40, 8
  %75 = icmp eq i64 %74, %32
  br i1 %75, label %76, label %39, !llvm.loop !554

76:                                               ; preds = %39
  %77 = icmp eq i64 %32, %12
  br i1 %77, label %114, label %78

78:                                               ; preds = %76, %14, %11
  %79 = phi i64 [ 0, %14 ], [ 0, %11 ], [ %32, %76 ]
  %80 = phi i16* [ %3, %14 ], [ %3, %11 ], [ %34, %76 ]
  br label %81

81:                                               ; preds = %78, %81
  %82 = phi i64 [ %112, %81 ], [ %79, %78 ]
  %83 = phi i16* [ %111, %81 ], [ %80, %78 ]
  %84 = getelementptr inbounds i16, i16* %2, i64 %82
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = icmp slt i32 %86, %9
  %88 = select i1 %87, i32 %86, i32 -1
  %89 = and i32 %88, %9
  %90 = shl i32 %89, %7
  %91 = trunc i32 %90 to i16
  store i16 %91, i16* %83, align 2
  %92 = getelementptr inbounds i16, i16* %1, i64 %82
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = icmp slt i32 %94, %9
  %96 = select i1 %95, i32 %94, i32 -1
  %97 = and i32 %96, %9
  %98 = shl i32 %97, %7
  %99 = trunc i32 %98 to i16
  %100 = getelementptr inbounds i16, i16* %83, i64 1
  store i16 %99, i16* %100, align 2
  %101 = getelementptr inbounds i16, i16* %0, i64 %82
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = icmp slt i32 %103, %9
  %105 = select i1 %104, i32 %103, i32 -1
  %106 = and i32 %105, %9
  %107 = shl i32 %106, %7
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds i16, i16* %83, i64 2
  store i16 %108, i16* %109, align 2
  %110 = getelementptr inbounds i16, i16* %83, i64 3
  store i16 -1, i16* %110, align 2
  %111 = getelementptr inbounds i16, i16* %83, i64 4
  %112 = add nuw nsw i64 %82, 1
  %113 = icmp eq i64 %112, %12
  br i1 %113, label %114, label %81, !llvm.loop !555

114:                                              ; preds = %81, %76, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeXRGB16To8Row_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %7 = bitcast i16* %2 to i8*
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %0 to i8*
  %10 = add nsw i32 %4, -8
  %11 = icmp sgt i32 %5, 0
  br i1 %11, label %12, label %110

12:                                               ; preds = %6
  %13 = zext i32 %5 to i64
  %14 = icmp ult i32 %5, 8
  br i1 %14, label %77, label %15

15:                                               ; preds = %12
  %16 = shl nuw nsw i64 %13, 2
  %17 = getelementptr i8, i8* %3, i64 %16
  %18 = getelementptr i16, i16* %2, i64 %13
  %19 = bitcast i16* %18 to i8*
  %20 = getelementptr i16, i16* %1, i64 %13
  %21 = bitcast i16* %20 to i8*
  %22 = getelementptr i16, i16* %0, i64 %13
  %23 = bitcast i16* %22 to i8*
  %24 = icmp ugt i8* %19, %3
  %25 = icmp ugt i8* %17, %7
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %21, %3
  %28 = icmp ugt i8* %17, %8
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  %31 = icmp ugt i8* %23, %3
  %32 = icmp ugt i8* %17, %9
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  br i1 %34, label %77, label %35

35:                                               ; preds = %15
  %36 = and i64 %13, 4294967288
  %37 = shl nuw nsw i64 %36, 2
  %38 = getelementptr i8, i8* %3, i64 %37
  %39 = insertelement <8 x i32> undef, i32 %10, i32 0
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %41

41:                                               ; preds = %41, %35
  %42 = phi i64 [ 0, %35 ], [ %73, %41 ]
  %43 = shl i64 %42, 2
  %44 = getelementptr inbounds i16, i16* %2, i64 %42
  %45 = bitcast i16* %44 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2, !alias.scope !556
  %47 = zext <8 x i16> %46 to <8 x i32>
  %48 = lshr <8 x i32> %47, %40
  %49 = icmp slt <8 x i32> %48, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %50 = select <8 x i1> %49, <8 x i32> %48, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %51 = trunc <8 x i32> %50 to <8 x i8>
  %52 = getelementptr inbounds i16, i16* %1, i64 %42
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 2, !alias.scope !559
  %55 = zext <8 x i16> %54 to <8 x i32>
  %56 = lshr <8 x i32> %55, %40
  %57 = icmp slt <8 x i32> %56, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %58 = select <8 x i1> %57, <8 x i32> %56, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %59 = trunc <8 x i32> %58 to <8 x i8>
  %60 = getelementptr inbounds i16, i16* %0, i64 %42
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 2, !alias.scope !561
  %63 = zext <8 x i16> %62 to <8 x i32>
  %64 = lshr <8 x i32> %63, %40
  %65 = icmp slt <8 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = select <8 x i1> %65, <8 x i32> %64, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = trunc <8 x i32> %66 to <8 x i8>
  %68 = getelementptr inbounds i8, i8* %3, i64 %43
  %69 = bitcast i8* %68 to <32 x i8>*
  %70 = shufflevector <8 x i8> %51, <8 x i8> %59, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %71 = shufflevector <8 x i8> %67, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %72 = shufflevector <16 x i8> %70, <16 x i8> %71, <32 x i32> <i32 0, i32 8, i32 16, i32 24, i32 1, i32 9, i32 17, i32 25, i32 2, i32 10, i32 18, i32 26, i32 3, i32 11, i32 19, i32 27, i32 4, i32 12, i32 20, i32 28, i32 5, i32 13, i32 21, i32 29, i32 6, i32 14, i32 22, i32 30, i32 7, i32 15, i32 23, i32 31>
  store <32 x i8> %72, <32 x i8>* %69, align 1
  %73 = add i64 %42, 8
  %74 = icmp eq i64 %73, %36
  br i1 %74, label %75, label %41, !llvm.loop !563

75:                                               ; preds = %41
  %76 = icmp eq i64 %36, %13
  br i1 %76, label %110, label %77

77:                                               ; preds = %75, %15, %12
  %78 = phi i64 [ 0, %15 ], [ 0, %12 ], [ %36, %75 ]
  %79 = phi i8* [ %3, %15 ], [ %3, %12 ], [ %38, %75 ]
  br label %80

80:                                               ; preds = %77, %80
  %81 = phi i64 [ %108, %80 ], [ %78, %77 ]
  %82 = phi i8* [ %107, %80 ], [ %79, %77 ]
  %83 = getelementptr inbounds i16, i16* %2, i64 %81
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = lshr i32 %85, %10
  %87 = icmp slt i32 %86, 255
  %88 = select i1 %87, i32 %86, i32 255
  %89 = trunc i32 %88 to i8
  store i8 %89, i8* %82, align 1
  %90 = getelementptr inbounds i16, i16* %1, i64 %81
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = lshr i32 %92, %10
  %94 = icmp slt i32 %93, 255
  %95 = select i1 %94, i32 %93, i32 255
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds i8, i8* %82, i64 1
  store i8 %96, i8* %97, align 1
  %98 = getelementptr inbounds i16, i16* %0, i64 %81
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = lshr i32 %100, %10
  %102 = icmp slt i32 %101, 255
  %103 = select i1 %102, i32 %101, i32 255
  %104 = trunc i32 %103 to i8
  %105 = getelementptr inbounds i8, i8* %82, i64 2
  store i8 %104, i8* %105, align 1
  %106 = getelementptr inbounds i8, i8* %82, i64 3
  store i8 -1, i8* %106, align 1
  %107 = getelementptr inbounds i8, i8* %82, i64 4
  %108 = add nuw nsw i64 %81, 1
  %109 = icmp eq i64 %108, %13
  br i1 %109, label %110, label %80, !llvm.loop !564

110:                                              ; preds = %80, %75, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SplitXRGBRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %111

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = icmp ult i32 %4, 17
  br i1 %9, label %64, label %10

10:                                               ; preds = %7
  %11 = getelementptr i8, i8* %3, i64 %8
  %12 = getelementptr i8, i8* %2, i64 %8
  %13 = getelementptr i8, i8* %1, i64 %8
  %14 = shl nuw nsw i64 %8, 2
  %15 = add nsw i64 %14, -1
  %16 = getelementptr i8, i8* %0, i64 %15
  %17 = icmp ugt i8* %12, %3
  %18 = icmp ugt i8* %11, %2
  %19 = and i1 %17, %18
  %20 = icmp ugt i8* %13, %3
  %21 = icmp ugt i8* %11, %1
  %22 = and i1 %20, %21
  %23 = or i1 %19, %22
  %24 = icmp ugt i8* %16, %3
  %25 = icmp ugt i8* %11, %0
  %26 = and i1 %24, %25
  %27 = or i1 %23, %26
  %28 = icmp ugt i8* %13, %2
  %29 = icmp ugt i8* %12, %1
  %30 = and i1 %28, %29
  %31 = or i1 %27, %30
  %32 = icmp ugt i8* %16, %2
  %33 = icmp ugt i8* %12, %0
  %34 = and i1 %32, %33
  %35 = or i1 %31, %34
  %36 = icmp ugt i8* %16, %1
  %37 = icmp ugt i8* %13, %0
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  br i1 %39, label %64, label %40

40:                                               ; preds = %10
  %41 = and i64 %8, 15
  %42 = icmp eq i64 %41, 0
  %43 = select i1 %42, i64 16, i64 %41
  %44 = sub nsw i64 %8, %43
  %45 = shl nsw i64 %44, 2
  %46 = getelementptr i8, i8* %0, i64 %45
  br label %47

47:                                               ; preds = %47, %40
  %48 = phi i64 [ 0, %40 ], [ %62, %47 ]
  %49 = shl i64 %48, 2
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = bitcast i8* %50 to <64 x i8>*
  %52 = load <64 x i8>, <64 x i8>* %51, align 1
  %53 = shufflevector <64 x i8> %52, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %54 = shufflevector <64 x i8> %52, <64 x i8> undef, <16 x i32> <i32 1, i32 5, i32 9, i32 13, i32 17, i32 21, i32 25, i32 29, i32 33, i32 37, i32 41, i32 45, i32 49, i32 53, i32 57, i32 61>
  %55 = shufflevector <64 x i8> %52, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %56 = getelementptr inbounds i8, i8* %3, i64 %48
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %57, align 1, !alias.scope !565, !noalias !568
  %58 = getelementptr inbounds i8, i8* %2, i64 %48
  %59 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %59, align 1, !alias.scope !572, !noalias !573
  %60 = getelementptr inbounds i8, i8* %1, i64 %48
  %61 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %61, align 1, !alias.scope !574, !noalias !575
  %62 = add i64 %48, 16
  %63 = icmp eq i64 %62, %44
  br i1 %63, label %64, label %47, !llvm.loop !576

64:                                               ; preds = %47, %10, %7
  %65 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %44, %47 ]
  %66 = phi i8* [ %0, %10 ], [ %0, %7 ], [ %46, %47 ]
  %67 = sub nsw i64 %8, %65
  %68 = xor i64 %65, -1
  %69 = and i64 %67, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %64
  %72 = load i8, i8* %66, align 1
  %73 = getelementptr inbounds i8, i8* %3, i64 %65
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %66, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds i8, i8* %2, i64 %65
  store i8 %75, i8* %76, align 1
  %77 = getelementptr inbounds i8, i8* %66, i64 2
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %1, i64 %65
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %66, i64 4
  %81 = add nuw nsw i64 %65, 1
  br label %82

82:                                               ; preds = %64, %71
  %83 = phi i64 [ %65, %64 ], [ %81, %71 ]
  %84 = phi i8* [ %66, %64 ], [ %80, %71 ]
  %85 = sub nsw i64 0, %8
  %86 = icmp eq i64 %68, %85
  br i1 %86, label %111, label %87

87:                                               ; preds = %82, %87
  %88 = phi i64 [ %109, %87 ], [ %83, %82 ]
  %89 = phi i8* [ %108, %87 ], [ %84, %82 ]
  %90 = load i8, i8* %89, align 1
  %91 = getelementptr inbounds i8, i8* %3, i64 %88
  store i8 %90, i8* %91, align 1
  %92 = getelementptr inbounds i8, i8* %89, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %2, i64 %88
  store i8 %93, i8* %94, align 1
  %95 = getelementptr inbounds i8, i8* %89, i64 2
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds i8, i8* %1, i64 %88
  store i8 %96, i8* %97, align 1
  %98 = getelementptr inbounds i8, i8* %89, i64 4
  %99 = add nuw nsw i64 %88, 1
  %100 = load i8, i8* %98, align 1
  %101 = getelementptr inbounds i8, i8* %3, i64 %99
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds i8, i8* %89, i64 5
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds i8, i8* %2, i64 %99
  store i8 %103, i8* %104, align 1
  %105 = getelementptr inbounds i8, i8* %89, i64 6
  %106 = load i8, i8* %105, align 1
  %107 = getelementptr inbounds i8, i8* %1, i64 %99
  store i8 %106, i8* %107, align 1
  %108 = getelementptr inbounds i8, i8* %89, i64 8
  %109 = add nuw nsw i64 %88, 2
  %110 = icmp eq i64 %109, %8
  br i1 %110, label %111, label %87, !llvm.loop !577

111:                                              ; preds = %82, %87, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeXRGBRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %145

7:                                                ; preds = %5
  %8 = zext i32 %4 to i64
  %9 = icmp ult i32 %4, 16
  br i1 %9, label %96, label %10

10:                                               ; preds = %7
  %11 = shl nuw nsw i64 %8, 2
  %12 = getelementptr i8, i8* %3, i64 %11
  %13 = getelementptr i8, i8* %2, i64 %8
  %14 = getelementptr i8, i8* %1, i64 %8
  %15 = getelementptr i8, i8* %0, i64 %8
  %16 = icmp ugt i8* %13, %3
  %17 = icmp ugt i8* %12, %2
  %18 = and i1 %16, %17
  %19 = icmp ugt i8* %14, %3
  %20 = icmp ugt i8* %12, %1
  %21 = and i1 %19, %20
  %22 = or i1 %18, %21
  %23 = icmp ugt i8* %15, %3
  %24 = icmp ugt i8* %12, %0
  %25 = and i1 %23, %24
  %26 = or i1 %22, %25
  br i1 %26, label %96, label %27

27:                                               ; preds = %10
  %28 = and i64 %8, 4294967280
  %29 = shl nuw nsw i64 %28, 2
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = add nsw i64 %28, -16
  %32 = lshr exact i64 %31, 4
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %31, 0
  br i1 %35, label %75, label %36

36:                                               ; preds = %27
  %37 = sub nuw nsw i64 %33, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %72, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %73, %38 ]
  %41 = shl i64 %39, 2
  %42 = getelementptr inbounds i8, i8* %2, i64 %39
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1, !alias.scope !578
  %45 = getelementptr inbounds i8, i8* %1, i64 %39
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !alias.scope !581
  %48 = getelementptr inbounds i8, i8* %0, i64 %39
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !583
  %51 = getelementptr inbounds i8, i8* %3, i64 %41
  %52 = bitcast i8* %51 to <64 x i8>*
  %53 = shufflevector <16 x i8> %44, <16 x i8> %47, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %54 = shufflevector <16 x i8> %50, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %55 = shufflevector <32 x i8> %53, <32 x i8> %54, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %55, <64 x i8>* %52, align 1
  %56 = or i64 %39, 16
  %57 = shl i64 %56, 2
  %58 = getelementptr inbounds i8, i8* %2, i64 %56
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !578
  %61 = getelementptr inbounds i8, i8* %1, i64 %56
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !581
  %64 = getelementptr inbounds i8, i8* %0, i64 %56
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !583
  %67 = getelementptr inbounds i8, i8* %3, i64 %57
  %68 = bitcast i8* %67 to <64 x i8>*
  %69 = shufflevector <16 x i8> %60, <16 x i8> %63, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %70 = shufflevector <16 x i8> %66, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %71 = shufflevector <32 x i8> %69, <32 x i8> %70, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %71, <64 x i8>* %68, align 1
  %72 = add i64 %39, 32
  %73 = add i64 %40, -2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %38, !llvm.loop !585

75:                                               ; preds = %38, %27
  %76 = phi i64 [ 0, %27 ], [ %72, %38 ]
  %77 = icmp eq i64 %34, 0
  br i1 %77, label %94, label %78

78:                                               ; preds = %75
  %79 = shl i64 %76, 2
  %80 = getelementptr inbounds i8, i8* %2, i64 %76
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !578
  %83 = getelementptr inbounds i8, i8* %1, i64 %76
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !581
  %86 = getelementptr inbounds i8, i8* %0, i64 %76
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !583
  %89 = getelementptr inbounds i8, i8* %3, i64 %79
  %90 = bitcast i8* %89 to <64 x i8>*
  %91 = shufflevector <16 x i8> %82, <16 x i8> %85, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %92 = shufflevector <16 x i8> %88, <16 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %93 = shufflevector <32 x i8> %91, <32 x i8> %92, <64 x i32> <i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 5, i32 21, i32 37, i32 53, i32 6, i32 22, i32 38, i32 54, i32 7, i32 23, i32 39, i32 55, i32 8, i32 24, i32 40, i32 56, i32 9, i32 25, i32 41, i32 57, i32 10, i32 26, i32 42, i32 58, i32 11, i32 27, i32 43, i32 59, i32 12, i32 28, i32 44, i32 60, i32 13, i32 29, i32 45, i32 61, i32 14, i32 30, i32 46, i32 62, i32 15, i32 31, i32 47, i32 63>
  store <64 x i8> %93, <64 x i8>* %90, align 1
  br label %94

94:                                               ; preds = %75, %78
  %95 = icmp eq i64 %28, %8
  br i1 %95, label %145, label %96

96:                                               ; preds = %94, %10, %7
  %97 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %28, %94 ]
  %98 = phi i8* [ %3, %10 ], [ %3, %7 ], [ %30, %94 ]
  %99 = xor i64 %97, -1
  %100 = and i64 %8, 1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %114, label %102

102:                                              ; preds = %96
  %103 = getelementptr inbounds i8, i8* %2, i64 %97
  %104 = load i8, i8* %103, align 1
  store i8 %104, i8* %98, align 1
  %105 = getelementptr inbounds i8, i8* %1, i64 %97
  %106 = load i8, i8* %105, align 1
  %107 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 %106, i8* %107, align 1
  %108 = getelementptr inbounds i8, i8* %0, i64 %97
  %109 = load i8, i8* %108, align 1
  %110 = getelementptr inbounds i8, i8* %98, i64 2
  store i8 %109, i8* %110, align 1
  %111 = getelementptr inbounds i8, i8* %98, i64 3
  store i8 -1, i8* %111, align 1
  %112 = getelementptr inbounds i8, i8* %98, i64 4
  %113 = or i64 %97, 1
  br label %114

114:                                              ; preds = %96, %102
  %115 = phi i64 [ %97, %96 ], [ %113, %102 ]
  %116 = phi i8* [ %98, %96 ], [ %112, %102 ]
  %117 = sub nsw i64 0, %8
  %118 = icmp eq i64 %99, %117
  br i1 %118, label %145, label %119

119:                                              ; preds = %114, %119
  %120 = phi i64 [ %143, %119 ], [ %115, %114 ]
  %121 = phi i8* [ %142, %119 ], [ %116, %114 ]
  %122 = getelementptr inbounds i8, i8* %2, i64 %120
  %123 = load i8, i8* %122, align 1
  store i8 %123, i8* %121, align 1
  %124 = getelementptr inbounds i8, i8* %1, i64 %120
  %125 = load i8, i8* %124, align 1
  %126 = getelementptr inbounds i8, i8* %121, i64 1
  store i8 %125, i8* %126, align 1
  %127 = getelementptr inbounds i8, i8* %0, i64 %120
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %121, i64 2
  store i8 %128, i8* %129, align 1
  %130 = getelementptr inbounds i8, i8* %121, i64 3
  store i8 -1, i8* %130, align 1
  %131 = getelementptr inbounds i8, i8* %121, i64 4
  %132 = add nuw nsw i64 %120, 1
  %133 = getelementptr inbounds i8, i8* %2, i64 %132
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %131, align 1
  %135 = getelementptr inbounds i8, i8* %1, i64 %132
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds i8, i8* %121, i64 5
  store i8 %136, i8* %137, align 1
  %138 = getelementptr inbounds i8, i8* %0, i64 %132
  %139 = load i8, i8* %138, align 1
  %140 = getelementptr inbounds i8, i8* %121, i64 6
  store i8 %139, i8* %140, align 1
  %141 = getelementptr inbounds i8, i8* %121, i64 7
  store i8 -1, i8* %141, align 1
  %142 = getelementptr inbounds i8, i8* %121, i64 8
  %143 = add nuw nsw i64 %120, 2
  %144 = icmp eq i64 %143, %8
  br i1 %144, label %145, label %119, !llvm.loop !586

145:                                              ; preds = %114, %119, %94, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MergeUVRow_16_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = sub nsw i32 16, %3
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %152

8:                                                ; preds = %5
  %9 = zext i32 %4 to i64
  %10 = icmp ult i32 %4, 8
  br i1 %10, label %97, label %11

11:                                               ; preds = %8
  %12 = shl nuw nsw i64 %9, 1
  %13 = getelementptr i16, i16* %2, i64 %12
  %14 = getelementptr i16, i16* %0, i64 %9
  %15 = getelementptr i16, i16* %1, i64 %9
  %16 = icmp ugt i16* %14, %2
  %17 = icmp ugt i16* %13, %0
  %18 = and i1 %16, %17
  %19 = icmp ugt i16* %15, %2
  %20 = icmp ugt i16* %13, %1
  %21 = and i1 %19, %20
  %22 = or i1 %18, %21
  br i1 %22, label %97, label %23

23:                                               ; preds = %11
  %24 = and i64 %9, 4294967288
  %25 = shl nuw nsw i64 %24, 1
  %26 = getelementptr i16, i16* %2, i64 %25
  %27 = insertelement <8 x i32> undef, i32 %6, i32 0
  %28 = shufflevector <8 x i32> %27, <8 x i32> undef, <8 x i32> zeroinitializer
  %29 = add nsw i64 %24, -8
  %30 = lshr exact i64 %29, 3
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %75, label %34

34:                                               ; preds = %23
  %35 = sub nuw nsw i64 %31, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %72, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %73, %36 ]
  %39 = shl i64 %37, 1
  %40 = getelementptr inbounds i16, i16* %0, i64 %37
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 2, !alias.scope !587
  %43 = zext <8 x i16> %42 to <8 x i32>
  %44 = shl <8 x i32> %43, %28
  %45 = trunc <8 x i32> %44 to <8 x i16>
  %46 = getelementptr inbounds i16, i16* %1, i64 %37
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !590
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = shl <8 x i32> %49, %28
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %2, i64 %39
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = shufflevector <8 x i16> %45, <8 x i16> %51, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %54, <16 x i16>* %53, align 2
  %55 = or i64 %37, 8
  %56 = shl i64 %55, 1
  %57 = getelementptr inbounds i16, i16* %0, i64 %55
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !587
  %60 = zext <8 x i16> %59 to <8 x i32>
  %61 = shl <8 x i32> %60, %28
  %62 = trunc <8 x i32> %61 to <8 x i16>
  %63 = getelementptr inbounds i16, i16* %1, i64 %55
  %64 = bitcast i16* %63 to <8 x i16>*
  %65 = load <8 x i16>, <8 x i16>* %64, align 2, !alias.scope !590
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = shl <8 x i32> %66, %28
  %68 = trunc <8 x i32> %67 to <8 x i16>
  %69 = getelementptr inbounds i16, i16* %2, i64 %56
  %70 = bitcast i16* %69 to <16 x i16>*
  %71 = shufflevector <8 x i16> %62, <8 x i16> %68, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %71, <16 x i16>* %70, align 2
  %72 = add i64 %37, 16
  %73 = add i64 %38, -2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %36, !llvm.loop !592

75:                                               ; preds = %36, %23
  %76 = phi i64 [ 0, %23 ], [ %72, %36 ]
  %77 = icmp eq i64 %32, 0
  br i1 %77, label %95, label %78

78:                                               ; preds = %75
  %79 = shl i64 %76, 1
  %80 = getelementptr inbounds i16, i16* %0, i64 %76
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !587
  %83 = zext <8 x i16> %82 to <8 x i32>
  %84 = shl <8 x i32> %83, %28
  %85 = trunc <8 x i32> %84 to <8 x i16>
  %86 = getelementptr inbounds i16, i16* %1, i64 %76
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !590
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = shl <8 x i32> %89, %28
  %91 = trunc <8 x i32> %90 to <8 x i16>
  %92 = getelementptr inbounds i16, i16* %2, i64 %79
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = shufflevector <8 x i16> %85, <8 x i16> %91, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %94, <16 x i16>* %93, align 2
  br label %95

95:                                               ; preds = %75, %78
  %96 = icmp eq i64 %24, %9
  br i1 %96, label %152, label %97

97:                                               ; preds = %95, %11, %8
  %98 = phi i64 [ 0, %11 ], [ 0, %8 ], [ %24, %95 ]
  %99 = phi i16* [ %2, %11 ], [ %2, %8 ], [ %26, %95 ]
  %100 = xor i64 %98, -1
  %101 = and i64 %9, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %117, label %103

103:                                              ; preds = %97
  %104 = getelementptr inbounds i16, i16* %0, i64 %98
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = shl i32 %106, %6
  %108 = trunc i32 %107 to i16
  store i16 %108, i16* %99, align 2
  %109 = getelementptr inbounds i16, i16* %1, i64 %98
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = shl i32 %111, %6
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds i16, i16* %99, i64 1
  store i16 %113, i16* %114, align 2
  %115 = getelementptr inbounds i16, i16* %99, i64 2
  %116 = or i64 %98, 1
  br label %117

117:                                              ; preds = %97, %103
  %118 = phi i64 [ %98, %97 ], [ %116, %103 ]
  %119 = phi i16* [ %99, %97 ], [ %115, %103 ]
  %120 = sub nsw i64 0, %9
  %121 = icmp eq i64 %100, %120
  br i1 %121, label %152, label %122

122:                                              ; preds = %117, %122
  %123 = phi i64 [ %150, %122 ], [ %118, %117 ]
  %124 = phi i16* [ %149, %122 ], [ %119, %117 ]
  %125 = getelementptr inbounds i16, i16* %0, i64 %123
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = shl i32 %127, %6
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %124, align 2
  %130 = getelementptr inbounds i16, i16* %1, i64 %123
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = shl i32 %132, %6
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %124, i64 1
  store i16 %134, i16* %135, align 2
  %136 = getelementptr inbounds i16, i16* %124, i64 2
  %137 = add nuw nsw i64 %123, 1
  %138 = getelementptr inbounds i16, i16* %0, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = shl i32 %140, %6
  %142 = trunc i32 %141 to i16
  store i16 %142, i16* %136, align 2
  %143 = getelementptr inbounds i16, i16* %1, i64 %137
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = shl i32 %145, %6
  %147 = trunc i32 %146 to i16
  %148 = getelementptr inbounds i16, i16* %124, i64 3
  store i16 %147, i16* %148, align 2
  %149 = getelementptr inbounds i16, i16* %124, i64 4
  %150 = add nuw nsw i64 %123, 2
  %151 = icmp eq i64 %150, %9
  br i1 %151, label %152, label %122, !llvm.loop !593

152:                                              ; preds = %117, %122, %95, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SplitUVRow_16_C(i16* nocapture readonly, i16* nocapture, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = sub nsw i32 16, %3
  %7 = icmp sgt i32 %4, 0
  br i1 %7, label %8, label %156

8:                                                ; preds = %5
  %9 = zext i32 %4 to i64
  %10 = icmp ult i32 %4, 8
  br i1 %10, label %101, label %11

11:                                               ; preds = %8
  %12 = getelementptr i16, i16* %1, i64 %9
  %13 = getelementptr i16, i16* %2, i64 %9
  %14 = shl nuw nsw i64 %9, 1
  %15 = getelementptr i16, i16* %0, i64 %14
  %16 = icmp ugt i16* %13, %1
  %17 = icmp ugt i16* %12, %2
  %18 = and i1 %16, %17
  %19 = icmp ugt i16* %15, %1
  %20 = icmp ugt i16* %12, %0
  %21 = and i1 %19, %20
  %22 = or i1 %18, %21
  %23 = icmp ugt i16* %15, %2
  %24 = icmp ugt i16* %13, %0
  %25 = and i1 %23, %24
  %26 = or i1 %22, %25
  br i1 %26, label %101, label %27

27:                                               ; preds = %11
  %28 = and i64 %9, 4294967288
  %29 = shl nuw nsw i64 %28, 1
  %30 = getelementptr i16, i16* %0, i64 %29
  %31 = insertelement <8 x i32> undef, i32 %6, i32 0
  %32 = shufflevector <8 x i32> %31, <8 x i32> undef, <8 x i32> zeroinitializer
  %33 = add nsw i64 %28, -8
  %34 = lshr exact i64 %33, 3
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %79, label %38

38:                                               ; preds = %27
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %76, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %77, %40 ]
  %43 = shl i64 %41, 1
  %44 = getelementptr i16, i16* %0, i64 %43
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 2
  %47 = shufflevector <16 x i16> %46, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %48 = shufflevector <16 x i16> %46, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %49 = zext <8 x i16> %47 to <8 x i32>
  %50 = lshr <8 x i32> %49, %32
  %51 = trunc <8 x i32> %50 to <8 x i16>
  %52 = getelementptr inbounds i16, i16* %1, i64 %41
  %53 = bitcast i16* %52 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %53, align 2, !alias.scope !594, !noalias !597
  %54 = zext <8 x i16> %48 to <8 x i32>
  %55 = lshr <8 x i32> %54, %32
  %56 = trunc <8 x i32> %55 to <8 x i16>
  %57 = getelementptr inbounds i16, i16* %2, i64 %41
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %58, align 2, !alias.scope !600, !noalias !601
  %59 = or i64 %41, 8
  %60 = shl i64 %59, 1
  %61 = getelementptr i16, i16* %0, i64 %60
  %62 = bitcast i16* %61 to <16 x i16>*
  %63 = load <16 x i16>, <16 x i16>* %62, align 2
  %64 = shufflevector <16 x i16> %63, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %65 = shufflevector <16 x i16> %63, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %66 = zext <8 x i16> %64 to <8 x i32>
  %67 = lshr <8 x i32> %66, %32
  %68 = trunc <8 x i32> %67 to <8 x i16>
  %69 = getelementptr inbounds i16, i16* %1, i64 %59
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %70, align 2, !alias.scope !594, !noalias !597
  %71 = zext <8 x i16> %65 to <8 x i32>
  %72 = lshr <8 x i32> %71, %32
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %2, i64 %59
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !600, !noalias !601
  %76 = add i64 %41, 16
  %77 = add i64 %42, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !602

79:                                               ; preds = %40, %27
  %80 = phi i64 [ 0, %27 ], [ %76, %40 ]
  %81 = icmp eq i64 %36, 0
  br i1 %81, label %99, label %82

82:                                               ; preds = %79
  %83 = shl i64 %80, 1
  %84 = getelementptr i16, i16* %0, i64 %83
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 2
  %87 = shufflevector <16 x i16> %86, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %88 = shufflevector <16 x i16> %86, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %89 = zext <8 x i16> %87 to <8 x i32>
  %90 = lshr <8 x i32> %89, %32
  %91 = trunc <8 x i32> %90 to <8 x i16>
  %92 = getelementptr inbounds i16, i16* %1, i64 %80
  %93 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %93, align 2, !alias.scope !594, !noalias !597
  %94 = zext <8 x i16> %88 to <8 x i32>
  %95 = lshr <8 x i32> %94, %32
  %96 = trunc <8 x i32> %95 to <8 x i16>
  %97 = getelementptr inbounds i16, i16* %2, i64 %80
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %98, align 2, !alias.scope !600, !noalias !601
  br label %99

99:                                               ; preds = %79, %82
  %100 = icmp eq i64 %28, %9
  br i1 %100, label %156, label %101

101:                                              ; preds = %99, %11, %8
  %102 = phi i64 [ 0, %11 ], [ 0, %8 ], [ %28, %99 ]
  %103 = phi i16* [ %0, %11 ], [ %0, %8 ], [ %30, %99 ]
  %104 = xor i64 %102, -1
  %105 = and i64 %9, 1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %121, label %107

107:                                              ; preds = %101
  %108 = load i16, i16* %103, align 2
  %109 = zext i16 %108 to i32
  %110 = lshr i32 %109, %6
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %1, i64 %102
  store i16 %111, i16* %112, align 2
  %113 = getelementptr inbounds i16, i16* %103, i64 1
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  %116 = lshr i32 %115, %6
  %117 = trunc i32 %116 to i16
  %118 = getelementptr inbounds i16, i16* %2, i64 %102
  store i16 %117, i16* %118, align 2
  %119 = getelementptr inbounds i16, i16* %103, i64 2
  %120 = or i64 %102, 1
  br label %121

121:                                              ; preds = %101, %107
  %122 = phi i64 [ %102, %101 ], [ %120, %107 ]
  %123 = phi i16* [ %103, %101 ], [ %119, %107 ]
  %124 = sub nsw i64 0, %9
  %125 = icmp eq i64 %104, %124
  br i1 %125, label %156, label %126

126:                                              ; preds = %121, %126
  %127 = phi i64 [ %154, %126 ], [ %122, %121 ]
  %128 = phi i16* [ %153, %126 ], [ %123, %121 ]
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = lshr i32 %130, %6
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %1, i64 %127
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %128, i64 1
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = lshr i32 %136, %6
  %138 = trunc i32 %137 to i16
  %139 = getelementptr inbounds i16, i16* %2, i64 %127
  store i16 %138, i16* %139, align 2
  %140 = getelementptr inbounds i16, i16* %128, i64 2
  %141 = add nuw nsw i64 %127, 1
  %142 = load i16, i16* %140, align 2
  %143 = zext i16 %142 to i32
  %144 = lshr i32 %143, %6
  %145 = trunc i32 %144 to i16
  %146 = getelementptr inbounds i16, i16* %1, i64 %141
  store i16 %145, i16* %146, align 2
  %147 = getelementptr inbounds i16, i16* %128, i64 3
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i32
  %150 = lshr i32 %149, %6
  %151 = trunc i32 %150 to i16
  %152 = getelementptr inbounds i16, i16* %2, i64 %141
  store i16 %151, i16* %152, align 2
  %153 = getelementptr inbounds i16, i16* %128, i64 4
  %154 = add nuw nsw i64 %127, 2
  %155 = icmp eq i64 %154, %9
  br i1 %155, label %156, label %126, !llvm.loop !603

156:                                              ; preds = %121, %126, %99, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @MultiplyRow_16_C(i16* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %120

6:                                                ; preds = %4
  %7 = trunc i32 %2 to i16
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 16
  br i1 %9, label %78, label %10

10:                                               ; preds = %6
  %11 = getelementptr i16, i16* %1, i64 %8
  %12 = getelementptr i16, i16* %0, i64 %8
  %13 = icmp ugt i16* %12, %1
  %14 = icmp ugt i16* %11, %0
  %15 = and i1 %13, %14
  br i1 %15, label %78, label %16

16:                                               ; preds = %10
  %17 = and i64 %8, 4294967280
  %18 = insertelement <8 x i16> undef, i16 %7, i32 0
  %19 = shufflevector <8 x i16> %18, <8 x i16> undef, <8 x i32> zeroinitializer
  %20 = insertelement <8 x i16> undef, i16 %7, i32 0
  %21 = shufflevector <8 x i16> %20, <8 x i16> undef, <8 x i32> zeroinitializer
  %22 = add nsw i64 %17, -16
  %23 = lshr exact i64 %22, 4
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %60, label %27

27:                                               ; preds = %16
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %57, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %58, %29 ]
  %32 = getelementptr inbounds i16, i16* %0, i64 %30
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2, !alias.scope !604
  %35 = getelementptr inbounds i16, i16* %32, i64 8
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 2, !alias.scope !604
  %38 = mul <8 x i16> %34, %19
  %39 = mul <8 x i16> %37, %21
  %40 = getelementptr inbounds i16, i16* %1, i64 %30
  %41 = bitcast i16* %40 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %41, align 2, !alias.scope !607, !noalias !604
  %42 = getelementptr inbounds i16, i16* %40, i64 8
  %43 = bitcast i16* %42 to <8 x i16>*
  store <8 x i16> %39, <8 x i16>* %43, align 2, !alias.scope !607, !noalias !604
  %44 = or i64 %30, 16
  %45 = getelementptr inbounds i16, i16* %0, i64 %44
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 2, !alias.scope !604
  %48 = getelementptr inbounds i16, i16* %45, i64 8
  %49 = bitcast i16* %48 to <8 x i16>*
  %50 = load <8 x i16>, <8 x i16>* %49, align 2, !alias.scope !604
  %51 = mul <8 x i16> %47, %19
  %52 = mul <8 x i16> %50, %21
  %53 = getelementptr inbounds i16, i16* %1, i64 %44
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %51, <8 x i16>* %54, align 2, !alias.scope !607, !noalias !604
  %55 = getelementptr inbounds i16, i16* %53, i64 8
  %56 = bitcast i16* %55 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %56, align 2, !alias.scope !607, !noalias !604
  %57 = add i64 %30, 32
  %58 = add i64 %31, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %29, !llvm.loop !609

60:                                               ; preds = %29, %16
  %61 = phi i64 [ 0, %16 ], [ %57, %29 ]
  %62 = icmp eq i64 %25, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds i16, i16* %0, i64 %61
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !604
  %67 = getelementptr inbounds i16, i16* %64, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !604
  %70 = mul <8 x i16> %66, %19
  %71 = mul <8 x i16> %69, %21
  %72 = getelementptr inbounds i16, i16* %1, i64 %61
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !607, !noalias !604
  %74 = getelementptr inbounds i16, i16* %72, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !607, !noalias !604
  br label %76

76:                                               ; preds = %60, %63
  %77 = icmp eq i64 %17, %8
  br i1 %77, label %120, label %78

78:                                               ; preds = %76, %10, %6
  %79 = phi i64 [ 0, %10 ], [ 0, %6 ], [ %17, %76 ]
  %80 = xor i64 %79, -1
  %81 = add nsw i64 %80, %8
  %82 = and i64 %8, 3
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %94, label %84

84:                                               ; preds = %78, %84
  %85 = phi i64 [ %91, %84 ], [ %79, %78 ]
  %86 = phi i64 [ %92, %84 ], [ %82, %78 ]
  %87 = getelementptr inbounds i16, i16* %0, i64 %85
  %88 = load i16, i16* %87, align 2
  %89 = mul i16 %88, %7
  %90 = getelementptr inbounds i16, i16* %1, i64 %85
  store i16 %89, i16* %90, align 2
  %91 = add nuw nsw i64 %85, 1
  %92 = add i64 %86, -1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %84, !llvm.loop !610

94:                                               ; preds = %84, %78
  %95 = phi i64 [ %79, %78 ], [ %91, %84 ]
  %96 = icmp ult i64 %81, 3
  br i1 %96, label %120, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %118, %97 ], [ %95, %94 ]
  %99 = getelementptr inbounds i16, i16* %0, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = mul i16 %100, %7
  %102 = getelementptr inbounds i16, i16* %1, i64 %98
  store i16 %101, i16* %102, align 2
  %103 = add nuw nsw i64 %98, 1
  %104 = getelementptr inbounds i16, i16* %0, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = mul i16 %105, %7
  %107 = getelementptr inbounds i16, i16* %1, i64 %103
  store i16 %106, i16* %107, align 2
  %108 = add nuw nsw i64 %98, 2
  %109 = getelementptr inbounds i16, i16* %0, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = mul i16 %110, %7
  %112 = getelementptr inbounds i16, i16* %1, i64 %108
  store i16 %111, i16* %112, align 2
  %113 = add nuw nsw i64 %98, 3
  %114 = getelementptr inbounds i16, i16* %0, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = mul i16 %115, %7
  %117 = getelementptr inbounds i16, i16* %1, i64 %113
  store i16 %116, i16* %117, align 2
  %118 = add nuw nsw i64 %98, 4
  %119 = icmp eq i64 %118, %8
  br i1 %119, label %120, label %97, !llvm.loop !611

120:                                              ; preds = %94, %97, %76, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @DivideRow_16_C(i16* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %123

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 8
  br i1 %8, label %66, label %9

9:                                                ; preds = %6
  %10 = getelementptr i16, i16* %1, i64 %7
  %11 = getelementptr i16, i16* %0, i64 %7
  %12 = icmp ugt i16* %11, %1
  %13 = icmp ugt i16* %10, %0
  %14 = and i1 %12, %13
  br i1 %14, label %66, label %15

15:                                               ; preds = %9
  %16 = and i64 %7, 4294967288
  %17 = insertelement <8 x i32> undef, i32 %2, i32 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> undef, <8 x i32> zeroinitializer
  %19 = add nsw i64 %16, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %51, label %24

24:                                               ; preds = %15
  %25 = sub nuw nsw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %48, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %49, %26 ]
  %29 = getelementptr inbounds i16, i16* %0, i64 %27
  %30 = bitcast i16* %29 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 2, !alias.scope !612
  %32 = zext <8 x i16> %31 to <8 x i32>
  %33 = mul nsw <8 x i32> %18, %32
  %34 = lshr <8 x i32> %33, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %35 = trunc <8 x i32> %34 to <8 x i16>
  %36 = getelementptr inbounds i16, i16* %1, i64 %27
  %37 = bitcast i16* %36 to <8 x i16>*
  store <8 x i16> %35, <8 x i16>* %37, align 2, !alias.scope !615, !noalias !612
  %38 = or i64 %27, 8
  %39 = getelementptr inbounds i16, i16* %0, i64 %38
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 2, !alias.scope !612
  %42 = zext <8 x i16> %41 to <8 x i32>
  %43 = mul nsw <8 x i32> %18, %42
  %44 = lshr <8 x i32> %43, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %45 = trunc <8 x i32> %44 to <8 x i16>
  %46 = getelementptr inbounds i16, i16* %1, i64 %38
  %47 = bitcast i16* %46 to <8 x i16>*
  store <8 x i16> %45, <8 x i16>* %47, align 2, !alias.scope !615, !noalias !612
  %48 = add i64 %27, 16
  %49 = add i64 %28, -2
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %26, !llvm.loop !617

51:                                               ; preds = %26, %15
  %52 = phi i64 [ 0, %15 ], [ %48, %26 ]
  %53 = icmp eq i64 %22, 0
  br i1 %53, label %64, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds i16, i16* %0, i64 %52
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2, !alias.scope !612
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = mul nsw <8 x i32> %18, %58
  %60 = lshr <8 x i32> %59, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %61 = trunc <8 x i32> %60 to <8 x i16>
  %62 = getelementptr inbounds i16, i16* %1, i64 %52
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %63, align 2, !alias.scope !615, !noalias !612
  br label %64

64:                                               ; preds = %51, %54
  %65 = icmp eq i64 %16, %7
  br i1 %65, label %123, label %66

66:                                               ; preds = %64, %9, %6
  %67 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %16, %64 ]
  %68 = xor i64 %67, -1
  %69 = add nsw i64 %68, %7
  %70 = and i64 %7, 3
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %85, label %72

72:                                               ; preds = %66, %72
  %73 = phi i64 [ %82, %72 ], [ %67, %66 ]
  %74 = phi i64 [ %83, %72 ], [ %70, %66 ]
  %75 = getelementptr inbounds i16, i16* %0, i64 %73
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = mul nsw i32 %77, %2
  %79 = lshr i32 %78, 16
  %80 = trunc i32 %79 to i16
  %81 = getelementptr inbounds i16, i16* %1, i64 %73
  store i16 %80, i16* %81, align 2
  %82 = add nuw nsw i64 %73, 1
  %83 = add i64 %74, -1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %72, !llvm.loop !618

85:                                               ; preds = %72, %66
  %86 = phi i64 [ %67, %66 ], [ %82, %72 ]
  %87 = icmp ult i64 %69, 3
  br i1 %87, label %123, label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %121, %88 ], [ %86, %85 ]
  %90 = getelementptr inbounds i16, i16* %0, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = mul nsw i32 %92, %2
  %94 = lshr i32 %93, 16
  %95 = trunc i32 %94 to i16
  %96 = getelementptr inbounds i16, i16* %1, i64 %89
  store i16 %95, i16* %96, align 2
  %97 = add nuw nsw i64 %89, 1
  %98 = getelementptr inbounds i16, i16* %0, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = mul nsw i32 %100, %2
  %102 = lshr i32 %101, 16
  %103 = trunc i32 %102 to i16
  %104 = getelementptr inbounds i16, i16* %1, i64 %97
  store i16 %103, i16* %104, align 2
  %105 = add nuw nsw i64 %89, 2
  %106 = getelementptr inbounds i16, i16* %0, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nsw i32 %108, %2
  %110 = lshr i32 %109, 16
  %111 = trunc i32 %110 to i16
  %112 = getelementptr inbounds i16, i16* %1, i64 %105
  store i16 %111, i16* %112, align 2
  %113 = add nuw nsw i64 %89, 3
  %114 = getelementptr inbounds i16, i16* %0, i64 %113
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nsw i32 %116, %2
  %118 = lshr i32 %117, 16
  %119 = trunc i32 %118 to i16
  %120 = getelementptr inbounds i16, i16* %1, i64 %113
  store i16 %119, i16* %120, align 2
  %121 = add nuw nsw i64 %89, 4
  %122 = icmp eq i64 %121, %7
  br i1 %122, label %123, label %88, !llvm.loop !619

123:                                              ; preds = %85, %88, %64, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @Convert16To8Row_C(i16* nocapture readonly, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = bitcast i16* %0 to i8*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %117

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 8
  br i1 %9, label %74, label %10

10:                                               ; preds = %7
  %11 = getelementptr i8, i8* %1, i64 %8
  %12 = getelementptr i16, i16* %0, i64 %8
  %13 = bitcast i16* %12 to i8*
  %14 = icmp ugt i8* %13, %1
  %15 = icmp ugt i8* %11, %5
  %16 = and i1 %14, %15
  br i1 %16, label %74, label %17

17:                                               ; preds = %10
  %18 = and i64 %8, 4294967288
  %19 = insertelement <8 x i32> undef, i32 %2, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = add nsw i64 %18, -8
  %22 = lshr exact i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %57, label %26

26:                                               ; preds = %17
  %27 = sub nuw nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %54, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %55, %28 ]
  %31 = getelementptr inbounds i16, i16* %0, i64 %29
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 2, !alias.scope !620
  %34 = zext <8 x i16> %33 to <8 x i32>
  %35 = mul nsw <8 x i32> %20, %34
  %36 = lshr <8 x i32> %35, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %37 = icmp sgt <8 x i32> %35, <i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679>
  %38 = select <8 x i1> %37, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, <8 x i32> %36
  %39 = trunc <8 x i32> %38 to <8 x i8>
  %40 = getelementptr inbounds i8, i8* %1, i64 %29
  %41 = bitcast i8* %40 to <8 x i8>*
  store <8 x i8> %39, <8 x i8>* %41, align 1, !alias.scope !623, !noalias !620
  %42 = or i64 %29, 8
  %43 = getelementptr inbounds i16, i16* %0, i64 %42
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 2, !alias.scope !620
  %46 = zext <8 x i16> %45 to <8 x i32>
  %47 = mul nsw <8 x i32> %20, %46
  %48 = lshr <8 x i32> %47, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %49 = icmp sgt <8 x i32> %47, <i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679>
  %50 = select <8 x i1> %49, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, <8 x i32> %48
  %51 = trunc <8 x i32> %50 to <8 x i8>
  %52 = getelementptr inbounds i8, i8* %1, i64 %42
  %53 = bitcast i8* %52 to <8 x i8>*
  store <8 x i8> %51, <8 x i8>* %53, align 1, !alias.scope !623, !noalias !620
  %54 = add i64 %29, 16
  %55 = add i64 %30, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %28, !llvm.loop !625

57:                                               ; preds = %28, %17
  %58 = phi i64 [ 0, %17 ], [ %54, %28 ]
  %59 = icmp eq i64 %24, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds i16, i16* %0, i64 %58
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !620
  %64 = zext <8 x i16> %63 to <8 x i32>
  %65 = mul nsw <8 x i32> %20, %64
  %66 = lshr <8 x i32> %65, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %67 = icmp sgt <8 x i32> %65, <i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679, i32 16711679>
  %68 = select <8 x i1> %67, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>, <8 x i32> %66
  %69 = trunc <8 x i32> %68 to <8 x i8>
  %70 = getelementptr inbounds i8, i8* %1, i64 %58
  %71 = bitcast i8* %70 to <8 x i8>*
  store <8 x i8> %69, <8 x i8>* %71, align 1, !alias.scope !623, !noalias !620
  br label %72

72:                                               ; preds = %57, %60
  %73 = icmp eq i64 %18, %8
  br i1 %73, label %117, label %74

74:                                               ; preds = %72, %10, %7
  %75 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %18, %72 ]
  %76 = xor i64 %75, -1
  %77 = and i64 %8, 1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %90, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds i16, i16* %0, i64 %75
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = mul nsw i32 %82, %2
  %84 = lshr i32 %83, 16
  %85 = icmp sgt i32 %83, 16711679
  %86 = select i1 %85, i32 255, i32 %84
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %1, i64 %75
  store i8 %87, i8* %88, align 1
  %89 = or i64 %75, 1
  br label %90

90:                                               ; preds = %74, %79
  %91 = phi i64 [ %75, %74 ], [ %89, %79 ]
  %92 = sub nsw i64 0, %8
  %93 = icmp eq i64 %76, %92
  br i1 %93, label %117, label %94

94:                                               ; preds = %90, %94
  %95 = phi i64 [ %115, %94 ], [ %91, %90 ]
  %96 = getelementptr inbounds i16, i16* %0, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  %99 = mul nsw i32 %98, %2
  %100 = lshr i32 %99, 16
  %101 = icmp sgt i32 %99, 16711679
  %102 = select i1 %101, i32 255, i32 %100
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds i8, i8* %1, i64 %95
  store i8 %103, i8* %104, align 1
  %105 = add nuw nsw i64 %95, 1
  %106 = getelementptr inbounds i16, i16* %0, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = mul nsw i32 %108, %2
  %110 = lshr i32 %109, 16
  %111 = icmp sgt i32 %109, 16711679
  %112 = select i1 %111, i32 255, i32 %110
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %1, i64 %105
  store i8 %113, i8* %114, align 1
  %115 = add nuw nsw i64 %95, 2
  %116 = icmp eq i64 %115, %8
  br i1 %116, label %117, label %94, !llvm.loop !626

117:                                              ; preds = %90, %94, %72, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @Convert8To16Row_C(i8* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = bitcast i16* %1 to i8*
  %6 = mul nsw i32 %2, 257
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %126

8:                                                ; preds = %4
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 8
  br i1 %10, label %69, label %11

11:                                               ; preds = %8
  %12 = getelementptr i16, i16* %1, i64 %9
  %13 = bitcast i16* %12 to i8*
  %14 = getelementptr i8, i8* %0, i64 %9
  %15 = icmp ugt i8* %14, %5
  %16 = icmp ugt i8* %13, %0
  %17 = and i1 %15, %16
  br i1 %17, label %69, label %18

18:                                               ; preds = %11
  %19 = and i64 %9, 4294967288
  %20 = insertelement <8 x i32> undef, i32 %6, i32 0
  %21 = shufflevector <8 x i32> %20, <8 x i32> undef, <8 x i32> zeroinitializer
  %22 = add nsw i64 %19, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %54, label %27

27:                                               ; preds = %18
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %51, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %52, %29 ]
  %32 = getelementptr inbounds i8, i8* %0, i64 %30
  %33 = bitcast i8* %32 to <8 x i8>*
  %34 = load <8 x i8>, <8 x i8>* %33, align 1, !alias.scope !627
  %35 = zext <8 x i8> %34 to <8 x i32>
  %36 = mul nsw <8 x i32> %21, %35
  %37 = lshr <8 x i32> %36, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %38 = trunc <8 x i32> %37 to <8 x i16>
  %39 = getelementptr inbounds i16, i16* %1, i64 %30
  %40 = bitcast i16* %39 to <8 x i16>*
  store <8 x i16> %38, <8 x i16>* %40, align 2, !alias.scope !630, !noalias !627
  %41 = or i64 %30, 8
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = bitcast i8* %42 to <8 x i8>*
  %44 = load <8 x i8>, <8 x i8>* %43, align 1, !alias.scope !627
  %45 = zext <8 x i8> %44 to <8 x i32>
  %46 = mul nsw <8 x i32> %21, %45
  %47 = lshr <8 x i32> %46, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %48 = trunc <8 x i32> %47 to <8 x i16>
  %49 = getelementptr inbounds i16, i16* %1, i64 %41
  %50 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %50, align 2, !alias.scope !630, !noalias !627
  %51 = add i64 %30, 16
  %52 = add i64 %31, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %29, !llvm.loop !632

54:                                               ; preds = %29, %18
  %55 = phi i64 [ 0, %18 ], [ %51, %29 ]
  %56 = icmp eq i64 %25, 0
  br i1 %56, label %67, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds i8, i8* %0, i64 %55
  %59 = bitcast i8* %58 to <8 x i8>*
  %60 = load <8 x i8>, <8 x i8>* %59, align 1, !alias.scope !627
  %61 = zext <8 x i8> %60 to <8 x i32>
  %62 = mul nsw <8 x i32> %21, %61
  %63 = lshr <8 x i32> %62, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %64 = trunc <8 x i32> %63 to <8 x i16>
  %65 = getelementptr inbounds i16, i16* %1, i64 %55
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %66, align 2, !alias.scope !630, !noalias !627
  br label %67

67:                                               ; preds = %54, %57
  %68 = icmp eq i64 %19, %9
  br i1 %68, label %126, label %69

69:                                               ; preds = %67, %11, %8
  %70 = phi i64 [ 0, %11 ], [ 0, %8 ], [ %19, %67 ]
  %71 = xor i64 %70, -1
  %72 = add nsw i64 %71, %9
  %73 = and i64 %9, 3
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %88, label %75

75:                                               ; preds = %69, %75
  %76 = phi i64 [ %85, %75 ], [ %70, %69 ]
  %77 = phi i64 [ %86, %75 ], [ %73, %69 ]
  %78 = getelementptr inbounds i8, i8* %0, i64 %76
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nsw i32 %6, %80
  %82 = lshr i32 %81, 16
  %83 = trunc i32 %82 to i16
  %84 = getelementptr inbounds i16, i16* %1, i64 %76
  store i16 %83, i16* %84, align 2
  %85 = add nuw nsw i64 %76, 1
  %86 = add i64 %77, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %75, !llvm.loop !633

88:                                               ; preds = %75, %69
  %89 = phi i64 [ %70, %69 ], [ %85, %75 ]
  %90 = icmp ult i64 %72, 3
  br i1 %90, label %126, label %91

91:                                               ; preds = %88, %91
  %92 = phi i64 [ %124, %91 ], [ %89, %88 ]
  %93 = getelementptr inbounds i8, i8* %0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = mul nsw i32 %6, %95
  %97 = lshr i32 %96, 16
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %1, i64 %92
  store i16 %98, i16* %99, align 2
  %100 = add nuw nsw i64 %92, 1
  %101 = getelementptr inbounds i8, i8* %0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nsw i32 %6, %103
  %105 = lshr i32 %104, 16
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %1, i64 %100
  store i16 %106, i16* %107, align 2
  %108 = add nuw nsw i64 %92, 2
  %109 = getelementptr inbounds i8, i8* %0, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = mul nsw i32 %6, %111
  %113 = lshr i32 %112, 16
  %114 = trunc i32 %113 to i16
  %115 = getelementptr inbounds i16, i16* %1, i64 %108
  store i16 %114, i16* %115, align 2
  %116 = add nuw nsw i64 %92, 3
  %117 = getelementptr inbounds i8, i8* %0, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nsw i32 %6, %119
  %121 = lshr i32 %120, 16
  %122 = trunc i32 %121 to i16
  %123 = getelementptr inbounds i16, i16* %1, i64 %116
  store i16 %122, i16* %123, align 2
  %124 = add nuw nsw i64 %92, 4
  %125 = icmp eq i64 %124, %9
  br i1 %125, label %126, label %91, !llvm.loop !634

126:                                              ; preds = %88, %91, %67, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CopyRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #2 {
  %4 = sext i32 %2 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %0, i64 %4, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CopyRow_16_C(i16* nocapture readonly, i16* nocapture, i32) local_unnamed_addr #2 {
  %4 = bitcast i16* %1 to i8*
  %5 = bitcast i16* %0 to i8*
  %6 = shl nsw i32 %2, 1
  %7 = sext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %4, i8* align 2 %5, i64 %7, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @SetRow_C(i8* nocapture, i8 zeroext, i32) local_unnamed_addr #2 {
  %4 = sext i32 %2 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 %1, i64 %4, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @ARGBSetRow_C(i8* nocapture, i32, i32) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %75

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 8
  br i1 %7, label %66, label %8

8:                                                ; preds = %5
  %9 = and i64 %6, 4294967288
  %10 = insertelement <4 x i32> undef, i32 %1, i32 0
  %11 = shufflevector <4 x i32> %10, <4 x i32> undef, <4 x i32> zeroinitializer
  %12 = insertelement <4 x i32> undef, i32 %1, i32 0
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> zeroinitializer
  %14 = add nsw i64 %9, -8
  %15 = lshr exact i64 %14, 3
  %16 = add nuw nsw i64 %15, 1
  %17 = and i64 %16, 3
  %18 = icmp ult i64 %14, 24
  br i1 %18, label %50, label %19

19:                                               ; preds = %8
  %20 = sub nsw i64 %16, %17
  br label %21

21:                                               ; preds = %21, %19
  %22 = phi i64 [ 0, %19 ], [ %47, %21 ]
  %23 = phi i64 [ %20, %19 ], [ %48, %21 ]
  %24 = shl nuw nsw i64 %22, 2
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = bitcast i8* %25 to <4 x i32>*
  store <4 x i32> %11, <4 x i32>* %26, align 1
  %27 = getelementptr inbounds i8, i8* %25, i64 16
  %28 = bitcast i8* %27 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %28, align 1
  %29 = shl i64 %22, 2
  %30 = or i64 %29, 32
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = bitcast i8* %31 to <4 x i32>*
  store <4 x i32> %11, <4 x i32>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %31, i64 16
  %34 = bitcast i8* %33 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %34, align 1
  %35 = shl i64 %22, 2
  %36 = or i64 %35, 64
  %37 = getelementptr inbounds i8, i8* %0, i64 %36
  %38 = bitcast i8* %37 to <4 x i32>*
  store <4 x i32> %11, <4 x i32>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %37, i64 16
  %40 = bitcast i8* %39 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %40, align 1
  %41 = shl i64 %22, 2
  %42 = or i64 %41, 96
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = bitcast i8* %43 to <4 x i32>*
  store <4 x i32> %11, <4 x i32>* %44, align 1
  %45 = getelementptr inbounds i8, i8* %43, i64 16
  %46 = bitcast i8* %45 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %46, align 1
  %47 = add i64 %22, 32
  %48 = add i64 %23, -4
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %21, !llvm.loop !635

50:                                               ; preds = %21, %8
  %51 = phi i64 [ 0, %8 ], [ %47, %21 ]
  %52 = icmp eq i64 %17, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %50, %53
  %54 = phi i64 [ %61, %53 ], [ %51, %50 ]
  %55 = phi i64 [ %62, %53 ], [ %17, %50 ]
  %56 = shl nuw nsw i64 %54, 2
  %57 = getelementptr inbounds i8, i8* %0, i64 %56
  %58 = bitcast i8* %57 to <4 x i32>*
  store <4 x i32> %11, <4 x i32>* %58, align 1
  %59 = getelementptr inbounds i8, i8* %57, i64 16
  %60 = bitcast i8* %59 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %60, align 1
  %61 = add i64 %54, 8
  %62 = add i64 %55, -1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %53, !llvm.loop !636

64:                                               ; preds = %53, %50
  %65 = icmp eq i64 %9, %6
  br i1 %65, label %75, label %66

66:                                               ; preds = %64, %5
  %67 = phi i64 [ 0, %5 ], [ %9, %64 ]
  br label %68

68:                                               ; preds = %66, %68
  %69 = phi i64 [ %73, %68 ], [ %67, %66 ]
  %70 = shl nuw nsw i64 %69, 2
  %71 = getelementptr inbounds i8, i8* %0, i64 %70
  %72 = bitcast i8* %71 to i32*
  store i32 %1, i32* %72, align 1
  %73 = add nuw nsw i64 %69, 1
  %74 = icmp eq i64 %73, %6
  br i1 %74, label %75, label %68, !llvm.loop !637

75:                                               ; preds = %68, %64, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @YUY2ToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %144

7:                                                ; preds = %5
  %8 = add nsw i32 %1, 1
  %9 = sext i32 %8 to i64
  %10 = add nsw i32 %1, 3
  %11 = sext i32 %10 to i64
  %12 = add i32 %4, -1
  %13 = lshr i32 %12, 1
  %14 = add nuw i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = icmp ult i32 %14, 17
  br i1 %16, label %109, label %17

17:                                               ; preds = %7
  %18 = add i32 %4, -1
  %19 = lshr i32 %18, 1
  %20 = zext i32 %19 to i64
  %21 = add nuw nsw i64 %20, 1
  %22 = getelementptr i8, i8* %2, i64 %21
  %23 = getelementptr i8, i8* %3, i64 %21
  %24 = getelementptr i8, i8* %0, i64 %11
  %25 = shl nuw nsw i64 %20, 2
  %26 = add nsw i64 %25, %11
  %27 = add nsw i64 %26, 1
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = getelementptr i8, i8* %0, i64 1
  %30 = add nuw nsw i64 %25, 4
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = getelementptr i8, i8* %0, i64 %9
  %33 = add nsw i64 %25, %9
  %34 = add nsw i64 %33, 1
  %35 = getelementptr i8, i8* %0, i64 %34
  %36 = icmp ugt i8* %23, %2
  %37 = icmp ugt i8* %22, %3
  %38 = and i1 %36, %37
  %39 = icmp ugt i8* %28, %2
  %40 = icmp ult i8* %24, %22
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  %43 = icmp ugt i8* %31, %2
  %44 = icmp ult i8* %29, %22
  %45 = and i1 %43, %44
  %46 = or i1 %42, %45
  %47 = icmp ugt i8* %35, %2
  %48 = icmp ult i8* %32, %22
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  %51 = icmp ugt i8* %28, %3
  %52 = icmp ult i8* %24, %23
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = icmp ugt i8* %31, %3
  %56 = icmp ult i8* %29, %23
  %57 = and i1 %55, %56
  %58 = or i1 %54, %57
  %59 = icmp ugt i8* %35, %3
  %60 = icmp ult i8* %32, %23
  %61 = and i1 %59, %60
  %62 = or i1 %58, %61
  br i1 %62, label %109, label %63

63:                                               ; preds = %17
  %64 = and i64 %15, 15
  %65 = icmp eq i64 %64, 0
  %66 = select i1 %65, i64 16, i64 %64
  %67 = sub nsw i64 %15, %66
  %68 = trunc i64 %67 to i32
  %69 = shl i32 %68, 1
  %70 = shl nsw i64 %67, 2
  %71 = getelementptr i8, i8* %0, i64 %70
  %72 = getelementptr i8, i8* %3, i64 %67
  %73 = getelementptr i8, i8* %2, i64 %67
  br label %74

74:                                               ; preds = %74, %63
  %75 = phi i64 [ 0, %63 ], [ %107, %74 ]
  %76 = shl i64 %75, 2
  %77 = getelementptr i8, i8* %0, i64 %76
  %78 = getelementptr i8, i8* %3, i64 %75
  %79 = getelementptr i8, i8* %2, i64 %75
  %80 = getelementptr inbounds i8, i8* %77, i64 1
  %81 = bitcast i8* %80 to <64 x i8>*
  %82 = load <64 x i8>, <64 x i8>* %81, align 1
  %83 = shufflevector <64 x i8> %82, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %84 = shufflevector <64 x i8> %82, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %85 = zext <16 x i8> %83 to <16 x i32>
  %86 = getelementptr inbounds i8, i8* %77, i64 %9
  %87 = bitcast i8* %86 to <64 x i8>*
  %88 = load <64 x i8>, <64 x i8>* %87, align 1
  %89 = shufflevector <64 x i8> %88, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %90 = zext <16 x i8> %89 to <16 x i32>
  %91 = add nuw nsw <16 x i32> %85, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %92 = add nuw nsw <16 x i32> %91, %90
  %93 = lshr <16 x i32> %92, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %94 = trunc <16 x i32> %93 to <16 x i8>
  %95 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %94, <16 x i8>* %95, align 1, !alias.scope !639, !noalias !642
  %96 = zext <16 x i8> %84 to <16 x i32>
  %97 = getelementptr inbounds i8, i8* %77, i64 %11
  %98 = bitcast i8* %97 to <64 x i8>*
  %99 = load <64 x i8>, <64 x i8>* %98, align 1
  %100 = shufflevector <64 x i8> %99, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %101 = zext <16 x i8> %100 to <16 x i32>
  %102 = add nuw nsw <16 x i32> %96, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %103 = add nuw nsw <16 x i32> %102, %101
  %104 = lshr <16 x i32> %103, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %105 = trunc <16 x i32> %104 to <16 x i8>
  %106 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %105, <16 x i8>* %106, align 1, !alias.scope !647, !noalias !648
  %107 = add i64 %75, 16
  %108 = icmp eq i64 %107, %67
  br i1 %108, label %109, label %74, !llvm.loop !649

109:                                              ; preds = %74, %17, %7
  %110 = phi i32 [ 0, %17 ], [ 0, %7 ], [ %69, %74 ]
  %111 = phi i8* [ %0, %17 ], [ %0, %7 ], [ %71, %74 ]
  %112 = phi i8* [ %3, %17 ], [ %3, %7 ], [ %72, %74 ]
  %113 = phi i8* [ %2, %17 ], [ %2, %7 ], [ %73, %74 ]
  br label %114

114:                                              ; preds = %109, %114
  %115 = phi i32 [ %142, %114 ], [ %110, %109 ]
  %116 = phi i8* [ %139, %114 ], [ %111, %109 ]
  %117 = phi i8* [ %141, %114 ], [ %112, %109 ]
  %118 = phi i8* [ %140, %114 ], [ %113, %109 ]
  %119 = getelementptr inbounds i8, i8* %116, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %116, i64 %9
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = add nuw nsw i32 %121, 1
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 1
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %118, align 1
  %129 = getelementptr inbounds i8, i8* %116, i64 3
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = getelementptr inbounds i8, i8* %116, i64 %11
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = add nuw nsw i32 %131, 1
  %136 = add nuw nsw i32 %135, %134
  %137 = lshr i32 %136, 1
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %117, align 1
  %139 = getelementptr inbounds i8, i8* %116, i64 4
  %140 = getelementptr inbounds i8, i8* %118, i64 1
  %141 = getelementptr inbounds i8, i8* %117, i64 1
  %142 = add nuw nsw i32 %115, 2
  %143 = icmp slt i32 %142, %4
  br i1 %143, label %114, label %144, !llvm.loop !650

144:                                              ; preds = %114, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @YUY2ToUV422Row_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %79

6:                                                ; preds = %4
  %7 = add i32 %3, -1
  %8 = lshr i32 %7, 1
  %9 = add nuw i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = icmp ult i32 %9, 17
  br i1 %11, label %60, label %12

12:                                               ; preds = %6
  %13 = add i32 %3, -1
  %14 = lshr i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = add nuw nsw i64 %15, 1
  %17 = getelementptr i8, i8* %1, i64 %16
  %18 = getelementptr i8, i8* %2, i64 %16
  %19 = getelementptr i8, i8* %0, i64 1
  %20 = shl nuw nsw i64 %15, 2
  %21 = add nuw nsw i64 %20, 4
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = icmp ugt i8* %18, %1
  %24 = icmp ugt i8* %17, %2
  %25 = and i1 %23, %24
  %26 = icmp ugt i8* %22, %1
  %27 = icmp ult i8* %19, %17
  %28 = and i1 %26, %27
  %29 = or i1 %25, %28
  %30 = icmp ugt i8* %22, %2
  %31 = icmp ult i8* %19, %18
  %32 = and i1 %30, %31
  %33 = or i1 %29, %32
  br i1 %33, label %60, label %34

34:                                               ; preds = %12
  %35 = and i64 %10, 15
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i64 16, i64 %35
  %38 = sub nsw i64 %10, %37
  %39 = trunc i64 %38 to i32
  %40 = shl i32 %39, 1
  %41 = shl nsw i64 %38, 2
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = getelementptr i8, i8* %2, i64 %38
  %44 = getelementptr i8, i8* %1, i64 %38
  %45 = getelementptr i8, i8* %0, i64 1
  br label %46

46:                                               ; preds = %46, %34
  %47 = phi i64 [ 0, %34 ], [ %58, %46 ]
  %48 = shl i64 %47, 2
  %49 = getelementptr i8, i8* %2, i64 %47
  %50 = getelementptr i8, i8* %1, i64 %47
  %51 = getelementptr inbounds i8, i8* %45, i64 %48
  %52 = bitcast i8* %51 to <64 x i8>*
  %53 = load <64 x i8>, <64 x i8>* %52, align 1
  %54 = shufflevector <64 x i8> %53, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %55 = shufflevector <64 x i8> %53, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %56 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %56, align 1, !alias.scope !651, !noalias !654
  %57 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %57, align 1, !alias.scope !657, !noalias !658
  %58 = add i64 %47, 16
  %59 = icmp eq i64 %58, %38
  br i1 %59, label %60, label %46, !llvm.loop !659

60:                                               ; preds = %46, %12, %6
  %61 = phi i32 [ 0, %12 ], [ 0, %6 ], [ %40, %46 ]
  %62 = phi i8* [ %0, %12 ], [ %0, %6 ], [ %42, %46 ]
  %63 = phi i8* [ %2, %12 ], [ %2, %6 ], [ %43, %46 ]
  %64 = phi i8* [ %1, %12 ], [ %1, %6 ], [ %44, %46 ]
  br label %65

65:                                               ; preds = %60, %65
  %66 = phi i32 [ %77, %65 ], [ %61, %60 ]
  %67 = phi i8* [ %74, %65 ], [ %62, %60 ]
  %68 = phi i8* [ %76, %65 ], [ %63, %60 ]
  %69 = phi i8* [ %75, %65 ], [ %64, %60 ]
  %70 = getelementptr inbounds i8, i8* %67, i64 1
  %71 = load i8, i8* %70, align 1
  store i8 %71, i8* %69, align 1
  %72 = getelementptr inbounds i8, i8* %67, i64 3
  %73 = load i8, i8* %72, align 1
  store i8 %73, i8* %68, align 1
  %74 = getelementptr inbounds i8, i8* %67, i64 4
  %75 = getelementptr inbounds i8, i8* %69, i64 1
  %76 = getelementptr inbounds i8, i8* %68, i64 1
  %77 = add nuw nsw i32 %66, 2
  %78 = icmp slt i32 %77, %3
  br i1 %78, label %65, label %79, !llvm.loop !660

79:                                               ; preds = %65, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @YUY2ToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %50

6:                                                ; preds = %3
  %7 = sext i32 %2 to i64
  %8 = add nsw i64 %7, -2
  %9 = lshr i64 %8, 1
  %10 = add nuw i64 %9, 1
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %6
  %14 = sub nuw i64 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %34, %15 ]
  %17 = phi i8* [ %0, %13 ], [ %33, %15 ]
  %18 = phi i64 [ %14, %13 ], [ %35, %15 ]
  %19 = load i8, i8* %17, align 1
  %20 = getelementptr inbounds i8, i8* %1, i64 %16
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %17, i64 2
  %22 = load i8, i8* %21, align 1
  %23 = or i64 %16, 1
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  store i8 %22, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %17, i64 4
  %26 = or i64 %16, 2
  %27 = load i8, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %1, i64 %26
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %17, i64 6
  %30 = load i8, i8* %29, align 1
  %31 = or i64 %16, 3
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  store i8 %30, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %17, i64 8
  %34 = add nuw nsw i64 %16, 4
  %35 = add i64 %18, -2
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %15

37:                                               ; preds = %15, %6
  %38 = phi i8* [ undef, %6 ], [ %33, %15 ]
  %39 = phi i64 [ 0, %6 ], [ %34, %15 ]
  %40 = phi i8* [ %0, %6 ], [ %33, %15 ]
  %41 = icmp eq i64 %11, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  %43 = load i8, i8* %40, align 1
  %44 = getelementptr inbounds i8, i8* %1, i64 %39
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %40, i64 2
  %46 = load i8, i8* %45, align 1
  %47 = or i64 %39, 1
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  store i8 %46, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %40, i64 4
  br label %50

50:                                               ; preds = %42, %37, %3
  %51 = phi i8* [ %0, %3 ], [ %38, %37 ], [ %49, %42 ]
  %52 = and i32 %2, 1
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = load i8, i8* %51, align 1
  %56 = sext i32 %4 to i64
  %57 = getelementptr inbounds i8, i8* %1, i64 %56
  store i8 %55, i8* %57, align 1
  br label %58

58:                                               ; preds = %50, %54
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @UYVYToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %140

7:                                                ; preds = %5
  %8 = sext i32 %1 to i64
  %9 = add nsw i32 %1, 2
  %10 = sext i32 %9 to i64
  %11 = add i32 %4, -1
  %12 = lshr i32 %11, 1
  %13 = add nuw i32 %12, 1
  %14 = zext i32 %13 to i64
  %15 = icmp ult i32 %13, 17
  br i1 %15, label %106, label %16

16:                                               ; preds = %7
  %17 = add i32 %4, -1
  %18 = lshr i32 %17, 1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = getelementptr i8, i8* %2, i64 %20
  %22 = getelementptr i8, i8* %3, i64 %20
  %23 = getelementptr i8, i8* %0, i64 %10
  %24 = shl nuw nsw i64 %19, 2
  %25 = add nsw i64 %24, %10
  %26 = add nsw i64 %25, 1
  %27 = getelementptr i8, i8* %0, i64 %26
  %28 = or i64 %24, 3
  %29 = getelementptr i8, i8* %0, i64 %28
  %30 = getelementptr i8, i8* %0, i64 %8
  %31 = add nsw i64 %24, %8
  %32 = add nsw i64 %31, 1
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = icmp ugt i8* %22, %2
  %35 = icmp ugt i8* %21, %3
  %36 = and i1 %34, %35
  %37 = icmp ugt i8* %27, %2
  %38 = icmp ult i8* %23, %21
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  %41 = icmp ugt i8* %29, %2
  %42 = icmp ugt i8* %21, %0
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  %45 = icmp ugt i8* %33, %2
  %46 = icmp ult i8* %30, %21
  %47 = and i1 %45, %46
  %48 = or i1 %44, %47
  %49 = icmp ugt i8* %27, %3
  %50 = icmp ult i8* %23, %22
  %51 = and i1 %49, %50
  %52 = or i1 %48, %51
  %53 = icmp ugt i8* %29, %3
  %54 = icmp ugt i8* %22, %0
  %55 = and i1 %53, %54
  %56 = or i1 %52, %55
  %57 = icmp ugt i8* %33, %3
  %58 = icmp ult i8* %30, %22
  %59 = and i1 %57, %58
  %60 = or i1 %56, %59
  br i1 %60, label %106, label %61

61:                                               ; preds = %16
  %62 = and i64 %14, 15
  %63 = icmp eq i64 %62, 0
  %64 = select i1 %63, i64 16, i64 %62
  %65 = sub nsw i64 %14, %64
  %66 = trunc i64 %65 to i32
  %67 = shl i32 %66, 1
  %68 = shl nsw i64 %65, 2
  %69 = getelementptr i8, i8* %0, i64 %68
  %70 = getelementptr i8, i8* %3, i64 %65
  %71 = getelementptr i8, i8* %2, i64 %65
  br label %72

72:                                               ; preds = %72, %61
  %73 = phi i64 [ 0, %61 ], [ %104, %72 ]
  %74 = shl i64 %73, 2
  %75 = getelementptr i8, i8* %0, i64 %74
  %76 = getelementptr i8, i8* %3, i64 %73
  %77 = getelementptr i8, i8* %2, i64 %73
  %78 = bitcast i8* %75 to <64 x i8>*
  %79 = load <64 x i8>, <64 x i8>* %78, align 1
  %80 = shufflevector <64 x i8> %79, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %81 = shufflevector <64 x i8> %79, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %82 = zext <16 x i8> %80 to <16 x i32>
  %83 = getelementptr inbounds i8, i8* %75, i64 %8
  %84 = bitcast i8* %83 to <64 x i8>*
  %85 = load <64 x i8>, <64 x i8>* %84, align 1
  %86 = shufflevector <64 x i8> %85, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %87 = zext <16 x i8> %86 to <16 x i32>
  %88 = add nuw nsw <16 x i32> %82, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %89 = add nuw nsw <16 x i32> %88, %87
  %90 = lshr <16 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %91 = trunc <16 x i32> %90 to <16 x i8>
  %92 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %92, align 1, !alias.scope !661, !noalias !664
  %93 = zext <16 x i8> %81 to <16 x i32>
  %94 = getelementptr inbounds i8, i8* %75, i64 %10
  %95 = bitcast i8* %94 to <64 x i8>*
  %96 = load <64 x i8>, <64 x i8>* %95, align 1
  %97 = shufflevector <64 x i8> %96, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %98 = zext <16 x i8> %97 to <16 x i32>
  %99 = add nuw nsw <16 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nuw nsw <16 x i32> %99, %98
  %101 = lshr <16 x i32> %100, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %102 = trunc <16 x i32> %101 to <16 x i8>
  %103 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %103, align 1, !alias.scope !669, !noalias !670
  %104 = add i64 %73, 16
  %105 = icmp eq i64 %104, %65
  br i1 %105, label %106, label %72, !llvm.loop !671

106:                                              ; preds = %72, %16, %7
  %107 = phi i32 [ 0, %16 ], [ 0, %7 ], [ %67, %72 ]
  %108 = phi i8* [ %0, %16 ], [ %0, %7 ], [ %69, %72 ]
  %109 = phi i8* [ %3, %16 ], [ %3, %7 ], [ %70, %72 ]
  %110 = phi i8* [ %2, %16 ], [ %2, %7 ], [ %71, %72 ]
  br label %111

111:                                              ; preds = %106, %111
  %112 = phi i32 [ %138, %111 ], [ %107, %106 ]
  %113 = phi i8* [ %135, %111 ], [ %108, %106 ]
  %114 = phi i8* [ %137, %111 ], [ %109, %106 ]
  %115 = phi i8* [ %136, %111 ], [ %110, %106 ]
  %116 = load i8, i8* %113, align 1
  %117 = zext i8 %116 to i32
  %118 = getelementptr inbounds i8, i8* %113, i64 %8
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = add nuw nsw i32 %117, 1
  %122 = add nuw nsw i32 %121, %120
  %123 = lshr i32 %122, 1
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %115, align 1
  %125 = getelementptr inbounds i8, i8* %113, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, i8* %113, i64 %10
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nuw nsw i32 %127, 1
  %132 = add nuw nsw i32 %131, %130
  %133 = lshr i32 %132, 1
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %114, align 1
  %135 = getelementptr inbounds i8, i8* %113, i64 4
  %136 = getelementptr inbounds i8, i8* %115, i64 1
  %137 = getelementptr inbounds i8, i8* %114, i64 1
  %138 = add nuw nsw i32 %112, 2
  %139 = icmp slt i32 %138, %4
  br i1 %139, label %111, label %140, !llvm.loop !672

140:                                              ; preds = %111, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @UYVYToUV422Row_C(i8* nocapture readonly, i8* nocapture, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %76

6:                                                ; preds = %4
  %7 = add i32 %3, -1
  %8 = lshr i32 %7, 1
  %9 = add nuw i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = icmp ult i32 %9, 17
  br i1 %11, label %58, label %12

12:                                               ; preds = %6
  %13 = add i32 %3, -1
  %14 = lshr i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = add nuw nsw i64 %15, 1
  %17 = getelementptr i8, i8* %1, i64 %16
  %18 = getelementptr i8, i8* %2, i64 %16
  %19 = shl nuw nsw i64 %15, 2
  %20 = or i64 %19, 3
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = icmp ugt i8* %18, %1
  %23 = icmp ugt i8* %17, %2
  %24 = and i1 %22, %23
  %25 = icmp ugt i8* %21, %1
  %26 = icmp ugt i8* %17, %0
  %27 = and i1 %25, %26
  %28 = or i1 %24, %27
  %29 = icmp ugt i8* %21, %2
  %30 = icmp ugt i8* %18, %0
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %58, label %33

33:                                               ; preds = %12
  %34 = and i64 %10, 15
  %35 = icmp eq i64 %34, 0
  %36 = select i1 %35, i64 16, i64 %34
  %37 = sub nsw i64 %10, %36
  %38 = trunc i64 %37 to i32
  %39 = shl i32 %38, 1
  %40 = shl nsw i64 %37, 2
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = getelementptr i8, i8* %2, i64 %37
  %43 = getelementptr i8, i8* %1, i64 %37
  br label %44

44:                                               ; preds = %44, %33
  %45 = phi i64 [ 0, %33 ], [ %56, %44 ]
  %46 = shl i64 %45, 2
  %47 = getelementptr i8, i8* %0, i64 %46
  %48 = getelementptr i8, i8* %2, i64 %45
  %49 = getelementptr i8, i8* %1, i64 %45
  %50 = bitcast i8* %47 to <64 x i8>*
  %51 = load <64 x i8>, <64 x i8>* %50, align 1
  %52 = shufflevector <64 x i8> %51, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %53 = shufflevector <64 x i8> %51, <64 x i8> undef, <16 x i32> <i32 2, i32 6, i32 10, i32 14, i32 18, i32 22, i32 26, i32 30, i32 34, i32 38, i32 42, i32 46, i32 50, i32 54, i32 58, i32 62>
  %54 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %52, <16 x i8>* %54, align 1, !alias.scope !673, !noalias !676
  %55 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %55, align 1, !alias.scope !679, !noalias !680
  %56 = add i64 %45, 16
  %57 = icmp eq i64 %56, %37
  br i1 %57, label %58, label %44, !llvm.loop !681

58:                                               ; preds = %44, %12, %6
  %59 = phi i32 [ 0, %12 ], [ 0, %6 ], [ %39, %44 ]
  %60 = phi i8* [ %0, %12 ], [ %0, %6 ], [ %41, %44 ]
  %61 = phi i8* [ %2, %12 ], [ %2, %6 ], [ %42, %44 ]
  %62 = phi i8* [ %1, %12 ], [ %1, %6 ], [ %43, %44 ]
  br label %63

63:                                               ; preds = %58, %63
  %64 = phi i32 [ %74, %63 ], [ %59, %58 ]
  %65 = phi i8* [ %71, %63 ], [ %60, %58 ]
  %66 = phi i8* [ %73, %63 ], [ %61, %58 ]
  %67 = phi i8* [ %72, %63 ], [ %62, %58 ]
  %68 = load i8, i8* %65, align 1
  store i8 %68, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %65, i64 2
  %70 = load i8, i8* %69, align 1
  store i8 %70, i8* %66, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 4
  %72 = getelementptr inbounds i8, i8* %67, i64 1
  %73 = getelementptr inbounds i8, i8* %66, i64 1
  %74 = add nuw nsw i32 %64, 2
  %75 = icmp slt i32 %74, %3
  br i1 %75, label %63, label %76, !llvm.loop !682

76:                                               ; preds = %63, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @UYVYToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %52

6:                                                ; preds = %3
  %7 = sext i32 %2 to i64
  %8 = add nsw i64 %7, -2
  %9 = lshr i64 %8, 1
  %10 = add nuw i64 %9, 1
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %38, label %13

13:                                               ; preds = %6
  %14 = sub nuw i64 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %35, %15 ]
  %17 = phi i8* [ %0, %13 ], [ %34, %15 ]
  %18 = phi i64 [ %14, %13 ], [ %36, %15 ]
  %19 = getelementptr inbounds i8, i8* %17, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 %16
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %17, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = or i64 %16, 1
  %25 = getelementptr inbounds i8, i8* %1, i64 %24
  store i8 %23, i8* %25, align 1
  %26 = or i64 %16, 2
  %27 = getelementptr inbounds i8, i8* %17, i64 5
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %26
  store i8 %28, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %17, i64 7
  %31 = load i8, i8* %30, align 1
  %32 = or i64 %16, 3
  %33 = getelementptr inbounds i8, i8* %1, i64 %32
  store i8 %31, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %17, i64 8
  %35 = add nuw nsw i64 %16, 4
  %36 = add i64 %18, -2
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %15

38:                                               ; preds = %15, %6
  %39 = phi i8* [ undef, %6 ], [ %34, %15 ]
  %40 = phi i64 [ 0, %6 ], [ %35, %15 ]
  %41 = phi i8* [ %0, %6 ], [ %34, %15 ]
  %42 = icmp eq i64 %11, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds i8, i8* %41, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %1, i64 %40
  store i8 %45, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %41, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = or i64 %40, 1
  %50 = getelementptr inbounds i8, i8* %1, i64 %49
  store i8 %48, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %41, i64 4
  br label %52

52:                                               ; preds = %43, %38, %3
  %53 = phi i8* [ %0, %3 ], [ %39, %38 ], [ %51, %43 ]
  %54 = and i32 %2, 1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i8, i8* %53, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = sext i32 %4 to i64
  %60 = getelementptr inbounds i8, i8* %1, i64 %59
  store i8 %58, i8* %60, align 1
  br label %61

61:                                               ; preds = %52, %56
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBBlendRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %102

7:                                                ; preds = %4, %7
  %8 = phi i8* [ %97, %7 ], [ %0, %4 ]
  %9 = phi i8* [ %98, %7 ], [ %1, %4 ]
  %10 = phi i8* [ %99, %7 ], [ %2, %4 ]
  %11 = phi i32 [ %100, %7 ], [ 0, %4 ]
  %12 = load i8, i8* %8, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %8, i64 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %8, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, i8* %8, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %9, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %9, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %9, i64 2
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = sub nuw nsw i32 256, %22
  %32 = mul nuw nsw i32 %31, %24
  %33 = lshr i32 %32, 8
  %34 = add nuw nsw i32 %33, %13
  %35 = icmp ult i32 %34, 255
  %36 = select i1 %35, i32 %34, i32 255
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %10, align 1
  %38 = mul nuw nsw i32 %31, %27
  %39 = lshr i32 %38, 8
  %40 = add nuw nsw i32 %39, %16
  %41 = icmp ult i32 %40, 255
  %42 = select i1 %41, i32 %40, i32 255
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 %43, i8* %44, align 1
  %45 = mul nuw nsw i32 %31, %30
  %46 = lshr i32 %45, 8
  %47 = add nuw nsw i32 %46, %19
  %48 = icmp ult i32 %47, 255
  %49 = select i1 %48, i32 %47, i32 255
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds i8, i8* %10, i64 2
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %10, i64 3
  store i8 -1, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %8, i64 4
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = getelementptr inbounds i8, i8* %8, i64 5
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %8, i64 6
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %8, i64 7
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = getelementptr inbounds i8, i8* %9, i64 4
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %9, i64 5
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds i8, i8* %9, i64 6
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = sub nuw nsw i32 256, %64
  %75 = mul nuw nsw i32 %74, %67
  %76 = lshr i32 %75, 8
  %77 = add nuw nsw i32 %76, %55
  %78 = icmp ult i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds i8, i8* %10, i64 4
  store i8 %80, i8* %81, align 1
  %82 = mul nuw nsw i32 %74, %70
  %83 = lshr i32 %82, 8
  %84 = add nuw nsw i32 %83, %58
  %85 = icmp ult i32 %84, 255
  %86 = select i1 %85, i32 %84, i32 255
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %10, i64 5
  store i8 %87, i8* %88, align 1
  %89 = mul nuw nsw i32 %74, %73
  %90 = lshr i32 %89, 8
  %91 = add nuw nsw i32 %90, %61
  %92 = icmp ult i32 %91, 255
  %93 = select i1 %92, i32 %91, i32 255
  %94 = trunc i32 %93 to i8
  %95 = getelementptr inbounds i8, i8* %10, i64 6
  store i8 %94, i8* %95, align 1
  %96 = getelementptr inbounds i8, i8* %10, i64 7
  store i8 -1, i8* %96, align 1
  %97 = getelementptr inbounds i8, i8* %8, i64 8
  %98 = getelementptr inbounds i8, i8* %9, i64 8
  %99 = getelementptr inbounds i8, i8* %10, i64 8
  %100 = add nuw nsw i32 %11, 2
  %101 = icmp slt i32 %100, %5
  br i1 %101, label %7, label %102

102:                                              ; preds = %7, %4
  %103 = phi i8* [ %2, %4 ], [ %99, %7 ]
  %104 = phi i8* [ %1, %4 ], [ %98, %7 ]
  %105 = phi i8* [ %0, %4 ], [ %97, %7 ]
  %106 = and i32 %3, 1
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %150, label %108

108:                                              ; preds = %102
  %109 = load i8, i8* %105, align 1
  %110 = zext i8 %109 to i32
  %111 = getelementptr inbounds i8, i8* %105, i64 1
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr inbounds i8, i8* %105, i64 2
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = getelementptr inbounds i8, i8* %105, i64 3
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = load i8, i8* %104, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %104, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %104, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = sub nuw nsw i32 256, %119
  %129 = mul nuw nsw i32 %128, %121
  %130 = lshr i32 %129, 8
  %131 = add nuw nsw i32 %130, %110
  %132 = icmp ult i32 %131, 255
  %133 = select i1 %132, i32 %131, i32 255
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %103, align 1
  %135 = mul nuw nsw i32 %128, %124
  %136 = lshr i32 %135, 8
  %137 = add nuw nsw i32 %136, %113
  %138 = icmp ult i32 %137, 255
  %139 = select i1 %138, i32 %137, i32 255
  %140 = trunc i32 %139 to i8
  %141 = getelementptr inbounds i8, i8* %103, i64 1
  store i8 %140, i8* %141, align 1
  %142 = mul nuw nsw i32 %128, %127
  %143 = lshr i32 %142, 8
  %144 = add nuw nsw i32 %143, %116
  %145 = icmp ult i32 %144, 255
  %146 = select i1 %145, i32 %144, i32 255
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds i8, i8* %103, i64 2
  store i8 %147, i8* %148, align 1
  %149 = getelementptr inbounds i8, i8* %103, i64 3
  store i8 -1, i8* %149, align 1
  br label %150

150:                                              ; preds = %102, %108
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @BlendPlaneRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %4, -1
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %50

8:                                                ; preds = %5, %8
  %9 = phi i32 [ %48, %8 ], [ 0, %5 ]
  %10 = phi i8* [ %44, %8 ], [ %0, %5 ]
  %11 = phi i8* [ %47, %8 ], [ %3, %5 ]
  %12 = phi i8* [ %46, %8 ], [ %2, %5 ]
  %13 = phi i8* [ %45, %8 ], [ %1, %5 ]
  %14 = load i8, i8* %12, align 1
  %15 = zext i8 %14 to i32
  %16 = load i8, i8* %10, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nuw nsw i32 %17, %15
  %19 = xor i32 %15, 255
  %20 = load i8, i8* %13, align 1
  %21 = zext i8 %20 to i32
  %22 = mul nuw nsw i32 %19, %21
  %23 = add nuw nsw i32 %18, 255
  %24 = add nuw nsw i32 %23, %22
  %25 = lshr i32 %24, 8
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %11, align 1
  %27 = getelementptr inbounds i8, i8* %12, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %10, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = mul nuw nsw i32 %32, %29
  %34 = xor i32 %29, 255
  %35 = getelementptr inbounds i8, i8* %13, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = mul nuw nsw i32 %34, %37
  %39 = add nuw nsw i32 %33, 255
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 8
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds i8, i8* %10, i64 2
  %45 = getelementptr inbounds i8, i8* %13, i64 2
  %46 = getelementptr inbounds i8, i8* %12, i64 2
  %47 = getelementptr inbounds i8, i8* %11, i64 2
  %48 = add nuw nsw i32 %9, 2
  %49 = icmp slt i32 %48, %6
  br i1 %49, label %8, label %50

50:                                               ; preds = %8, %5
  %51 = phi i8* [ %1, %5 ], [ %45, %8 ]
  %52 = phi i8* [ %2, %5 ], [ %46, %8 ]
  %53 = phi i8* [ %3, %5 ], [ %47, %8 ]
  %54 = phi i8* [ %0, %5 ], [ %44, %8 ]
  %55 = and i32 %4, 1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %71, label %57

57:                                               ; preds = %50
  %58 = load i8, i8* %52, align 1
  %59 = zext i8 %58 to i32
  %60 = load i8, i8* %54, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nuw nsw i32 %61, %59
  %63 = xor i32 %59, 255
  %64 = load i8, i8* %51, align 1
  %65 = zext i8 %64 to i32
  %66 = mul nuw nsw i32 %63, %65
  %67 = add nuw nsw i32 %62, 255
  %68 = add nuw nsw i32 %67, %66
  %69 = lshr i32 %68, 8
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %53, align 1
  br label %71

71:                                               ; preds = %50, %57
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBAttenuateRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -1
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %78

6:                                                ; preds = %3, %6
  %7 = phi i8* [ %74, %6 ], [ %0, %3 ]
  %8 = phi i8* [ %75, %6 ], [ %1, %3 ]
  %9 = phi i32 [ %76, %6 ], [ 0, %3 ]
  %10 = load i8, i8* %7, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds i8, i8* %7, i64 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds i8, i8* %7, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8, i8* %7, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = shl nuw nsw i32 %20, 8
  %22 = or i32 %21, %20
  %23 = shl nuw nsw i32 %11, 8
  %24 = or i32 %23, %11
  %25 = mul nuw i32 %22, %24
  %26 = lshr i32 %25, 24
  %27 = trunc i32 %26 to i8
  store i8 %27, i8* %8, align 1
  %28 = shl nuw nsw i32 %14, 8
  %29 = or i32 %28, %14
  %30 = mul nuw i32 %22, %29
  %31 = lshr i32 %30, 24
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %32, i8* %33, align 1
  %34 = shl nuw nsw i32 %17, 8
  %35 = or i32 %34, %17
  %36 = mul nuw i32 %22, %35
  %37 = lshr i32 %36, 24
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %8, i64 2
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %8, i64 3
  store i8 %19, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %7, i64 4
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i8, i8* %7, i64 5
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %7, i64 6
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %7, i64 7
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = shl nuw nsw i32 %52, 8
  %54 = or i32 %53, %52
  %55 = shl nuw nsw i32 %43, 8
  %56 = or i32 %55, %43
  %57 = mul nuw i32 %54, %56
  %58 = lshr i32 %57, 24
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %8, i64 4
  store i8 %59, i8* %60, align 1
  %61 = shl nuw nsw i32 %46, 8
  %62 = or i32 %61, %46
  %63 = mul nuw i32 %54, %62
  %64 = lshr i32 %63, 24
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds i8, i8* %8, i64 5
  store i8 %65, i8* %66, align 1
  %67 = shl nuw nsw i32 %49, 8
  %68 = or i32 %67, %49
  %69 = mul nuw i32 %54, %68
  %70 = lshr i32 %69, 24
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %8, i64 6
  store i8 %71, i8* %72, align 1
  %73 = getelementptr inbounds i8, i8* %8, i64 7
  store i8 %51, i8* %73, align 1
  %74 = getelementptr inbounds i8, i8* %7, i64 8
  %75 = getelementptr inbounds i8, i8* %8, i64 8
  %76 = add nuw nsw i32 %9, 2
  %77 = icmp slt i32 %76, %4
  br i1 %77, label %6, label %78

78:                                               ; preds = %6, %3
  %79 = phi i8* [ %1, %3 ], [ %75, %6 ]
  %80 = phi i8* [ %0, %3 ], [ %74, %6 ]
  %81 = and i32 %2, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %115, label %83

83:                                               ; preds = %78
  %84 = load i8, i8* %80, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i8, i8* %80, i64 1
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds i8, i8* %80, i64 2
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds i8, i8* %80, i64 3
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 8
  %96 = or i32 %95, %94
  %97 = shl nuw nsw i32 %85, 8
  %98 = or i32 %97, %85
  %99 = mul nuw i32 %96, %98
  %100 = lshr i32 %99, 24
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %79, align 1
  %102 = shl nuw nsw i32 %88, 8
  %103 = or i32 %102, %88
  %104 = mul nuw i32 %96, %103
  %105 = lshr i32 %104, 24
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds i8, i8* %79, i64 1
  store i8 %106, i8* %107, align 1
  %108 = shl nuw nsw i32 %91, 8
  %109 = or i32 %108, %91
  %110 = mul nuw i32 %96, %109
  %111 = lshr i32 %110, 24
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %79, i64 2
  store i8 %112, i8* %113, align 1
  %114 = getelementptr inbounds i8, i8* %79, i64 3
  store i8 %93, i8* %114, align 1
  br label %115

115:                                              ; preds = %78, %83
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBUnattenuateRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %45

5:                                                ; preds = %3, %5
  %6 = phi i8* [ %41, %5 ], [ %0, %3 ]
  %7 = phi i8* [ %42, %5 ], [ %1, %3 ]
  %8 = phi i32 [ %43, %5 ], [ 0, %3 ]
  %9 = load i8, i8* %6, align 1
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8, i8* %6, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %6, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = getelementptr inbounds i8, i8* %6, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [256 x i32], [256 x i32]* @fixed_invtbl8, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 65535
  %23 = mul nuw nsw i32 %22, %10
  %24 = lshr i32 %23, 8
  %25 = mul nuw nsw i32 %22, %13
  %26 = lshr i32 %25, 8
  %27 = mul nuw nsw i32 %22, %16
  %28 = lshr i32 %27, 8
  %29 = icmp ugt i32 %23, 65279
  %30 = select i1 %29, i32 255, i32 %24
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %7, align 1
  %32 = icmp ugt i32 %25, 65279
  %33 = select i1 %32, i32 255, i32 %26
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %7, i64 1
  store i8 %34, i8* %35, align 1
  %36 = icmp ugt i32 %27, 65279
  %37 = select i1 %36, i32 255, i32 %28
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %7, i64 2
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %7, i64 3
  store i8 %18, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %6, i64 4
  %42 = getelementptr inbounds i8, i8* %7, i64 4
  %43 = add nuw nsw i32 %8, 1
  %44 = icmp eq i32 %43, %2
  br i1 %44, label %45, label %5

45:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ComputeCumulativeSumRow_C(i8* nocapture readonly, i32* nocapture, i32* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %57

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %6
  %9 = phi i64 [ 0, %6 ], [ %55, %8 ]
  %10 = phi i32 [ 0, %6 ], [ %38, %8 ]
  %11 = phi i32 [ 0, %6 ], [ %32, %8 ]
  %12 = phi i32 [ 0, %6 ], [ %26, %8 ]
  %13 = phi i32 [ 0, %6 ], [ %20, %8 ]
  %14 = trunc i64 %9 to i32
  %15 = shl nsw i32 %14, 2
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %13, %19
  %21 = or i32 %15, 1
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %12, %25
  %27 = or i32 %15, 2
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %11, %31
  %33 = or i32 %15, 3
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = add nuw nsw i32 %10, %37
  %39 = getelementptr inbounds i32, i32* %2, i64 %16
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %40, %20
  %42 = getelementptr inbounds i32, i32* %1, i64 %16
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds i32, i32* %2, i64 %22
  %44 = load i32, i32* %43, align 4
  %45 = add nsw i32 %44, %26
  %46 = getelementptr inbounds i32, i32* %1, i64 %22
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds i32, i32* %2, i64 %28
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, %32
  %50 = getelementptr inbounds i32, i32* %1, i64 %28
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds i32, i32* %2, i64 %34
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %52, %38
  %54 = getelementptr inbounds i32, i32* %1, i64 %34
  store i32 %53, i32* %54, align 4
  %55 = add nuw nsw i64 %9, 1
  %56 = icmp eq i64 %55, %7
  br i1 %56, label %57, label %8

57:                                               ; preds = %8, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @CumulativeSumToAverageRow_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = sitofp i32 %3 to float
  %8 = fdiv float 1.000000e+00, %7
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %85

10:                                               ; preds = %6
  %11 = sext i32 %2 to i64
  %12 = add nsw i32 %2, 1
  %13 = sext i32 %12 to i64
  %14 = add nsw i32 %2, 2
  %15 = sext i32 %14 to i64
  %16 = add nsw i32 %2, 3
  %17 = sext i32 %16 to i64
  br label %18

18:                                               ; preds = %18, %10
  %19 = phi i32 [ 0, %10 ], [ %83, %18 ]
  %20 = phi i32* [ %0, %10 ], [ %81, %18 ]
  %21 = phi i8* [ %4, %10 ], [ %80, %18 ]
  %22 = phi i32* [ %1, %10 ], [ %82, %18 ]
  %23 = getelementptr inbounds i32, i32* %22, i64 %11
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* %20, align 4
  %26 = add nsw i32 %25, %24
  %27 = load i32, i32* %22, align 4
  %28 = sub i32 %26, %27
  %29 = getelementptr inbounds i32, i32* %20, i64 %11
  %30 = load i32, i32* %29, align 4
  %31 = sub i32 %28, %30
  %32 = sitofp i32 %31 to float
  %33 = fmul contract float %8, %32
  %34 = fptoui float %33 to i8
  store i8 %34, i8* %21, align 1
  %35 = getelementptr inbounds i32, i32* %22, i64 %13
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds i32, i32* %20, i64 1
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, %36
  %40 = getelementptr inbounds i32, i32* %22, i64 1
  %41 = load i32, i32* %40, align 4
  %42 = sub i32 %39, %41
  %43 = getelementptr inbounds i32, i32* %20, i64 %13
  %44 = load i32, i32* %43, align 4
  %45 = sub i32 %42, %44
  %46 = sitofp i32 %45 to float
  %47 = fmul contract float %8, %46
  %48 = fptoui float %47 to i8
  %49 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %48, i8* %49, align 1
  %50 = getelementptr inbounds i32, i32* %22, i64 %15
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds i32, i32* %20, i64 2
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i32 %53, %51
  %55 = getelementptr inbounds i32, i32* %22, i64 2
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 %54, %56
  %58 = getelementptr inbounds i32, i32* %20, i64 %15
  %59 = load i32, i32* %58, align 4
  %60 = sub i32 %57, %59
  %61 = sitofp i32 %60 to float
  %62 = fmul contract float %8, %61
  %63 = fptoui float %62 to i8
  %64 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds i32, i32* %22, i64 %17
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds i32, i32* %20, i64 3
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, %66
  %70 = getelementptr inbounds i32, i32* %22, i64 3
  %71 = load i32, i32* %70, align 4
  %72 = sub i32 %69, %71
  %73 = getelementptr inbounds i32, i32* %20, i64 %17
  %74 = load i32, i32* %73, align 4
  %75 = sub i32 %72, %74
  %76 = sitofp i32 %75 to float
  %77 = fmul contract float %8, %76
  %78 = fptoui float %77 to i8
  %79 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %21, i64 4
  %81 = getelementptr inbounds i32, i32* %20, i64 4
  %82 = getelementptr inbounds i32, i32* %22, i64 4
  %83 = add nuw nsw i32 %19, 1
  %84 = icmp eq i32 %83, %5
  br i1 %84, label %85, label %18

85:                                               ; preds = %18, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBAffineRow_C(i8* nocapture readonly, i32, i8* nocapture, float* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  br i1 %6, label %7, label %73

7:                                                ; preds = %5
  %8 = bitcast float* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds float, float* %3, i64 2
  %11 = and i32 %4, 1
  %12 = icmp eq i32 %4, 1
  br i1 %12, label %55, label %13

13:                                               ; preds = %7
  %14 = sub i32 %4, %11
  %15 = bitcast float* %10 to <2 x float>*
  %16 = bitcast float* %10 to <2 x float>*
  br label %17

17:                                               ; preds = %17, %13
  %18 = phi i8* [ %2, %13 ], [ %50, %17 ]
  %19 = phi <2 x float> [ %9, %13 ], [ %52, %17 ]
  %20 = phi i32 [ %14, %13 ], [ %53, %17 ]
  %21 = extractelement <2 x float> %19, i32 0
  %22 = fptosi float %21 to i32
  %23 = extractelement <2 x float> %19, i32 1
  %24 = fptosi float %23 to i32
  %25 = mul nsw i32 %24, %1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = shl nsw i32 %22, 2
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = bitcast i8* %18 to i32*
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds i8, i8* %18, i64 4
  %35 = load <2 x float>, <2 x float>* %15, align 4
  %36 = fadd contract <2 x float> %19, %35
  %37 = extractelement <2 x float> %36, i32 0
  %38 = fptosi float %37 to i32
  %39 = extractelement <2 x float> %36, i32 1
  %40 = fptosi float %39 to i32
  %41 = mul nsw i32 %40, %1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %0, i64 %42
  %44 = shl nsw i32 %38, 2
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = bitcast i8* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = bitcast i8* %34 to i32*
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds i8, i8* %18, i64 8
  %51 = load <2 x float>, <2 x float>* %16, align 4
  %52 = fadd contract <2 x float> %36, %51
  %53 = add i32 %20, -2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %17

55:                                               ; preds = %17, %7
  %56 = phi i8* [ %2, %7 ], [ %50, %17 ]
  %57 = phi <2 x float> [ %9, %7 ], [ %52, %17 ]
  %58 = icmp eq i32 %11, 0
  br i1 %58, label %73, label %59

59:                                               ; preds = %55
  %60 = extractelement <2 x float> %57, i32 0
  %61 = fptosi float %60 to i32
  %62 = extractelement <2 x float> %57, i32 1
  %63 = fptosi float %62 to i32
  %64 = mul nsw i32 %63, %1
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %0, i64 %65
  %67 = shl nsw i32 %61, 2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = bitcast i8* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = bitcast i8* %56 to i32*
  store i32 %71, i32* %72, align 4
  br label %73

73:                                               ; preds = %59, %55, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @InterpolateRow_C(i8* nocapture, i8* nocapture readonly, i64, i32, i32) local_unnamed_addr #2 {
  %6 = sub nsw i32 256, %4
  %7 = getelementptr inbounds i8, i8* %1, i64 %2
  switch i32 %4, label %8 [
    i32 0, label %11
    i32 128, label %13
  ]

8:                                                ; preds = %5
  %9 = add nsw i32 %3, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %150, label %183

11:                                               ; preds = %5
  %12 = sext i32 %3 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %12, i1 false)
  br label %200

13:                                               ; preds = %5
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %200

15:                                               ; preds = %13
  %16 = zext i32 %3 to i64
  %17 = icmp ult i32 %3, 16
  br i1 %17, label %98, label %18

18:                                               ; preds = %15
  %19 = getelementptr i8, i8* %0, i64 %16
  %20 = getelementptr i8, i8* %1, i64 %2
  %21 = add i64 %16, %2
  %22 = getelementptr i8, i8* %1, i64 %21
  %23 = getelementptr i8, i8* %1, i64 %16
  %24 = icmp ugt i8* %22, %0
  %25 = icmp ult i8* %20, %19
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %23, %0
  %28 = icmp ugt i8* %19, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %98, label %31

31:                                               ; preds = %18
  %32 = and i64 %16, 4294967280
  %33 = add nsw i64 %32, -16
  %34 = lshr exact i64 %33, 4
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %77, label %38

38:                                               ; preds = %31
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %74, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %75, %40 ]
  %43 = getelementptr inbounds i8, i8* %1, i64 %41
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1, !alias.scope !683
  %46 = zext <16 x i8> %45 to <16 x i32>
  %47 = add nsw i64 %41, %2
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !686
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = add nuw nsw <16 x i32> %46, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %53 = add nuw nsw <16 x i32> %52, %51
  %54 = lshr <16 x i32> %53, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %55 = trunc <16 x i32> %54 to <16 x i8>
  %56 = getelementptr inbounds i8, i8* %0, i64 %41
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %57, align 1, !alias.scope !688, !noalias !690
  %58 = or i64 %41, 16
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1, !alias.scope !683
  %62 = zext <16 x i8> %61 to <16 x i32>
  %63 = add nsw i64 %58, %2
  %64 = getelementptr inbounds i8, i8* %1, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !686
  %67 = zext <16 x i8> %66 to <16 x i32>
  %68 = add nuw nsw <16 x i32> %62, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %69 = add nuw nsw <16 x i32> %68, %67
  %70 = lshr <16 x i32> %69, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = trunc <16 x i32> %70 to <16 x i8>
  %72 = getelementptr inbounds i8, i8* %0, i64 %58
  %73 = bitcast i8* %72 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %73, align 1, !alias.scope !688, !noalias !690
  %74 = add i64 %41, 32
  %75 = add i64 %42, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %40, !llvm.loop !691

77:                                               ; preds = %40, %31
  %78 = phi i64 [ 0, %31 ], [ %74, %40 ]
  %79 = icmp eq i64 %36, 0
  br i1 %79, label %96, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds i8, i8* %1, i64 %78
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !alias.scope !683
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = add nsw i64 %78, %2
  %86 = getelementptr inbounds i8, i8* %1, i64 %85
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !686
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = add nuw nsw <16 x i32> %84, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %91 = add nuw nsw <16 x i32> %90, %89
  %92 = lshr <16 x i32> %91, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = trunc <16 x i32> %92 to <16 x i8>
  %94 = getelementptr inbounds i8, i8* %0, i64 %78
  %95 = bitcast i8* %94 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %95, align 1, !alias.scope !688, !noalias !690
  br label %96

96:                                               ; preds = %77, %80
  %97 = icmp eq i64 %32, %16
  br i1 %97, label %200, label %98

98:                                               ; preds = %96, %18, %15
  %99 = phi i64 [ 0, %18 ], [ 0, %15 ], [ %32, %96 ]
  %100 = xor i64 %99, -1
  %101 = and i64 %16, 1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %117, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds i8, i8* %1, i64 %99
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add nsw i64 %99, %2
  %108 = getelementptr inbounds i8, i8* %1, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %106, 1
  %112 = add nuw nsw i32 %111, %110
  %113 = lshr i32 %112, 1
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %0, i64 %99
  store i8 %114, i8* %115, align 1
  %116 = or i64 %99, 1
  br label %117

117:                                              ; preds = %98, %103
  %118 = phi i64 [ %99, %98 ], [ %116, %103 ]
  %119 = sub nsw i64 0, %16
  %120 = icmp eq i64 %100, %119
  br i1 %120, label %200, label %121

121:                                              ; preds = %117, %121
  %122 = phi i64 [ %148, %121 ], [ %118, %117 ]
  %123 = getelementptr inbounds i8, i8* %1, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = add nsw i64 %122, %2
  %127 = getelementptr inbounds i8, i8* %1, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = add nuw nsw i32 %125, 1
  %131 = add nuw nsw i32 %130, %129
  %132 = lshr i32 %131, 1
  %133 = trunc i32 %132 to i8
  %134 = getelementptr inbounds i8, i8* %0, i64 %122
  store i8 %133, i8* %134, align 1
  %135 = add nuw nsw i64 %122, 1
  %136 = getelementptr inbounds i8, i8* %1, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = add nsw i64 %135, %2
  %140 = getelementptr inbounds i8, i8* %1, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %138, 1
  %144 = add nuw nsw i32 %143, %142
  %145 = lshr i32 %144, 1
  %146 = trunc i32 %145 to i8
  %147 = getelementptr inbounds i8, i8* %0, i64 %135
  store i8 %146, i8* %147, align 1
  %148 = add nuw nsw i64 %122, 2
  %149 = icmp eq i64 %148, %16
  br i1 %149, label %200, label %121, !llvm.loop !692

150:                                              ; preds = %8, %150
  %151 = phi i32 [ %181, %150 ], [ 0, %8 ]
  %152 = phi i8* [ %179, %150 ], [ %7, %8 ]
  %153 = phi i8* [ %180, %150 ], [ %0, %8 ]
  %154 = phi i8* [ %178, %150 ], [ %1, %8 ]
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = mul nsw i32 %6, %156
  %158 = load i8, i8* %152, align 1
  %159 = zext i8 %158 to i32
  %160 = mul nsw i32 %159, %4
  %161 = add i32 %157, 128
  %162 = add i32 %161, %160
  %163 = lshr i32 %162, 8
  %164 = trunc i32 %163 to i8
  store i8 %164, i8* %153, align 1
  %165 = getelementptr inbounds i8, i8* %154, i64 1
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i32
  %168 = mul nsw i32 %6, %167
  %169 = getelementptr inbounds i8, i8* %152, i64 1
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = mul nsw i32 %171, %4
  %173 = add i32 %168, 128
  %174 = add i32 %173, %172
  %175 = lshr i32 %174, 8
  %176 = trunc i32 %175 to i8
  %177 = getelementptr inbounds i8, i8* %153, i64 1
  store i8 %176, i8* %177, align 1
  %178 = getelementptr inbounds i8, i8* %154, i64 2
  %179 = getelementptr inbounds i8, i8* %152, i64 2
  %180 = getelementptr inbounds i8, i8* %153, i64 2
  %181 = add nuw nsw i32 %151, 2
  %182 = icmp slt i32 %181, %9
  br i1 %182, label %150, label %183

183:                                              ; preds = %150, %8
  %184 = phi i8* [ %1, %8 ], [ %178, %150 ]
  %185 = phi i8* [ %0, %8 ], [ %180, %150 ]
  %186 = phi i8* [ %7, %8 ], [ %179, %150 ]
  %187 = and i32 %3, 1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %200, label %189

189:                                              ; preds = %183
  %190 = load i8, i8* %184, align 1
  %191 = zext i8 %190 to i32
  %192 = mul nsw i32 %6, %191
  %193 = load i8, i8* %186, align 1
  %194 = zext i8 %193 to i32
  %195 = mul nsw i32 %194, %4
  %196 = add i32 %192, 128
  %197 = add i32 %196, %195
  %198 = lshr i32 %197, 8
  %199 = trunc i32 %198 to i8
  store i8 %199, i8* %185, align 1
  br label %200

200:                                              ; preds = %117, %121, %96, %13, %189, %183, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @InterpolateRow_16_C(i16* nocapture, i16* nocapture readonly, i64, i32, i32) local_unnamed_addr #2 {
  %6 = sub nsw i32 256, %4
  %7 = getelementptr inbounds i16, i16* %1, i64 %2
  switch i32 %4, label %8 [
    i32 0, label %11
    i32 128, label %16
  ]

8:                                                ; preds = %5
  %9 = add nsw i32 %3, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %153, label %184

11:                                               ; preds = %5
  %12 = bitcast i16* %1 to i8*
  %13 = bitcast i16* %0 to i8*
  %14 = shl nsw i32 %3, 1
  %15 = sext i32 %14 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %13, i8* align 2 %12, i64 %15, i1 false)
  br label %200

16:                                               ; preds = %5
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %200

18:                                               ; preds = %16
  %19 = zext i32 %3 to i64
  %20 = icmp ult i32 %3, 8
  br i1 %20, label %101, label %21

21:                                               ; preds = %18
  %22 = getelementptr i16, i16* %0, i64 %19
  %23 = getelementptr i16, i16* %1, i64 %2
  %24 = add i64 %19, %2
  %25 = getelementptr i16, i16* %1, i64 %24
  %26 = getelementptr i16, i16* %1, i64 %19
  %27 = icmp ugt i16* %25, %0
  %28 = icmp ult i16* %23, %22
  %29 = and i1 %27, %28
  %30 = icmp ugt i16* %26, %0
  %31 = icmp ugt i16* %22, %1
  %32 = and i1 %30, %31
  %33 = or i1 %29, %32
  br i1 %33, label %101, label %34

34:                                               ; preds = %21
  %35 = and i64 %19, 4294967288
  %36 = add nsw i64 %35, -8
  %37 = lshr exact i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %80, label %41

41:                                               ; preds = %34
  %42 = sub nuw nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %77, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %78, %43 ]
  %46 = getelementptr inbounds i16, i16* %1, i64 %44
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !693
  %49 = zext <8 x i16> %48 to <8 x i32>
  %50 = add nsw i64 %44, %2
  %51 = getelementptr inbounds i16, i16* %1, i64 %50
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2, !alias.scope !696
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = add nuw nsw <8 x i32> %49, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %56 = add nuw nsw <8 x i32> %55, %54
  %57 = lshr <8 x i32> %56, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %58 = trunc <8 x i32> %57 to <8 x i16>
  %59 = getelementptr inbounds i16, i16* %0, i64 %44
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %60, align 2, !alias.scope !698, !noalias !700
  %61 = or i64 %44, 8
  %62 = getelementptr inbounds i16, i16* %1, i64 %61
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2, !alias.scope !693
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = add nsw i64 %61, %2
  %67 = getelementptr inbounds i16, i16* %1, i64 %66
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !696
  %70 = zext <8 x i16> %69 to <8 x i32>
  %71 = add nuw nsw <8 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %72 = add nuw nsw <8 x i32> %71, %70
  %73 = lshr <8 x i32> %72, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = trunc <8 x i32> %73 to <8 x i16>
  %75 = getelementptr inbounds i16, i16* %0, i64 %61
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !698, !noalias !700
  %77 = add i64 %44, 16
  %78 = add i64 %45, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %43, !llvm.loop !701

80:                                               ; preds = %43, %34
  %81 = phi i64 [ 0, %34 ], [ %77, %43 ]
  %82 = icmp eq i64 %39, 0
  br i1 %82, label %99, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds i16, i16* %1, i64 %81
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !693
  %87 = zext <8 x i16> %86 to <8 x i32>
  %88 = add nsw i64 %81, %2
  %89 = getelementptr inbounds i16, i16* %1, i64 %88
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !696
  %92 = zext <8 x i16> %91 to <8 x i32>
  %93 = add nuw nsw <8 x i32> %87, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %94 = add nuw nsw <8 x i32> %93, %92
  %95 = lshr <8 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = trunc <8 x i32> %95 to <8 x i16>
  %97 = getelementptr inbounds i16, i16* %0, i64 %81
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %98, align 2, !alias.scope !698, !noalias !700
  br label %99

99:                                               ; preds = %80, %83
  %100 = icmp eq i64 %35, %19
  br i1 %100, label %200, label %101

101:                                              ; preds = %99, %21, %18
  %102 = phi i64 [ 0, %21 ], [ 0, %18 ], [ %35, %99 ]
  %103 = xor i64 %102, -1
  %104 = and i64 %19, 1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %120, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds i16, i16* %1, i64 %102
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = add nsw i64 %102, %2
  %111 = getelementptr inbounds i16, i16* %1, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = add nuw nsw i32 %109, 1
  %115 = add nuw nsw i32 %114, %113
  %116 = lshr i32 %115, 1
  %117 = trunc i32 %116 to i16
  %118 = getelementptr inbounds i16, i16* %0, i64 %102
  store i16 %117, i16* %118, align 2
  %119 = or i64 %102, 1
  br label %120

120:                                              ; preds = %101, %106
  %121 = phi i64 [ %102, %101 ], [ %119, %106 ]
  %122 = sub nsw i64 0, %19
  %123 = icmp eq i64 %103, %122
  br i1 %123, label %200, label %124

124:                                              ; preds = %120, %124
  %125 = phi i64 [ %151, %124 ], [ %121, %120 ]
  %126 = getelementptr inbounds i16, i16* %1, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = add nsw i64 %125, %2
  %130 = getelementptr inbounds i16, i16* %1, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = add nuw nsw i32 %128, 1
  %134 = add nuw nsw i32 %133, %132
  %135 = lshr i32 %134, 1
  %136 = trunc i32 %135 to i16
  %137 = getelementptr inbounds i16, i16* %0, i64 %125
  store i16 %136, i16* %137, align 2
  %138 = add nuw nsw i64 %125, 1
  %139 = getelementptr inbounds i16, i16* %1, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nsw i64 %138, %2
  %143 = getelementptr inbounds i16, i16* %1, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = add nuw nsw i32 %141, 1
  %147 = add nuw nsw i32 %146, %145
  %148 = lshr i32 %147, 1
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds i16, i16* %0, i64 %138
  store i16 %149, i16* %150, align 2
  %151 = add nuw nsw i64 %125, 2
  %152 = icmp eq i64 %151, %19
  br i1 %152, label %200, label %124, !llvm.loop !702

153:                                              ; preds = %8, %153
  %154 = phi i32 [ %182, %153 ], [ 0, %8 ]
  %155 = phi i16* [ %180, %153 ], [ %7, %8 ]
  %156 = phi i16* [ %181, %153 ], [ %0, %8 ]
  %157 = phi i16* [ %179, %153 ], [ %1, %8 ]
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = mul nsw i32 %6, %159
  %161 = load i16, i16* %155, align 2
  %162 = zext i16 %161 to i32
  %163 = mul nsw i32 %162, %4
  %164 = add nsw i32 %163, %160
  %165 = lshr i32 %164, 8
  %166 = trunc i32 %165 to i16
  store i16 %166, i16* %156, align 2
  %167 = getelementptr inbounds i16, i16* %157, i64 1
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = mul nsw i32 %6, %169
  %171 = getelementptr inbounds i16, i16* %155, i64 1
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul nsw i32 %173, %4
  %175 = add nsw i32 %174, %170
  %176 = lshr i32 %175, 8
  %177 = trunc i32 %176 to i16
  %178 = getelementptr inbounds i16, i16* %156, i64 1
  store i16 %177, i16* %178, align 2
  %179 = getelementptr inbounds i16, i16* %157, i64 2
  %180 = getelementptr inbounds i16, i16* %155, i64 2
  %181 = getelementptr inbounds i16, i16* %156, i64 2
  %182 = add nuw nsw i32 %154, 2
  %183 = icmp slt i32 %182, %9
  br i1 %183, label %153, label %184

184:                                              ; preds = %153, %8
  %185 = phi i16* [ %1, %8 ], [ %179, %153 ]
  %186 = phi i16* [ %0, %8 ], [ %181, %153 ]
  %187 = phi i16* [ %7, %8 ], [ %180, %153 ]
  %188 = and i32 %3, 1
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %200, label %190

190:                                              ; preds = %184
  %191 = load i16, i16* %185, align 2
  %192 = zext i16 %191 to i32
  %193 = mul nsw i32 %6, %192
  %194 = load i16, i16* %187, align 2
  %195 = zext i16 %194 to i32
  %196 = mul nsw i32 %195, %4
  %197 = add nsw i32 %196, %193
  %198 = lshr i32 %197, 8
  %199 = trunc i32 %198 to i16
  store i16 %199, i16* %186, align 2
  br label %200

200:                                              ; preds = %120, %124, %99, %16, %190, %184, %11
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBShuffleRow_C(i8* nocapture readonly, i8* nocapture, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %70

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %2, i64 3
  %8 = load i8, i8* %7, align 1
  %9 = getelementptr inbounds i8, i8* %2, i64 2
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = load i8, i8* %2, align 1
  %14 = zext i8 %13 to i64
  %15 = zext i8 %12 to i64
  %16 = zext i8 %10 to i64
  %17 = zext i8 %8 to i64
  %18 = and i32 %3, 1
  %19 = icmp eq i32 %3, 1
  br i1 %19, label %54, label %20

20:                                               ; preds = %6
  %21 = sub i32 %3, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i8* [ %0, %20 ], [ %50, %22 ]
  %24 = phi i8* [ %1, %20 ], [ %51, %22 ]
  %25 = phi i32 [ %21, %20 ], [ %52, %22 ]
  %26 = getelementptr inbounds i8, i8* %23, i64 %14
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %23, i64 %15
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %23, i64 %16
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %23, i64 %17
  %33 = load i8, i8* %32, align 1
  store i8 %27, i8* %24, align 1
  %34 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %29, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %31, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %24, i64 3
  store i8 %33, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %23, i64 4
  %38 = getelementptr inbounds i8, i8* %24, i64 4
  %39 = getelementptr inbounds i8, i8* %37, i64 %14
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %37, i64 %15
  %42 = load i8, i8* %41, align 1
  %43 = getelementptr inbounds i8, i8* %37, i64 %16
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %37, i64 %17
  %46 = load i8, i8* %45, align 1
  store i8 %40, i8* %38, align 1
  %47 = getelementptr inbounds i8, i8* %24, i64 5
  store i8 %42, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %24, i64 6
  store i8 %44, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %24, i64 7
  store i8 %46, i8* %49, align 1
  %50 = getelementptr inbounds i8, i8* %23, i64 8
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = add i32 %25, -2
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %22

54:                                               ; preds = %22, %6
  %55 = phi i8* [ %0, %6 ], [ %50, %22 ]
  %56 = phi i8* [ %1, %6 ], [ %51, %22 ]
  %57 = icmp eq i32 %18, 0
  br i1 %57, label %70, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds i8, i8* %55, i64 %14
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds i8, i8* %55, i64 %15
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds i8, i8* %55, i64 %16
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %55, i64 %17
  %66 = load i8, i8* %65, align 1
  store i8 %60, i8* %56, align 1
  %67 = getelementptr inbounds i8, i8* %56, i64 1
  store i8 %62, i8* %67, align 1
  %68 = getelementptr inbounds i8, i8* %56, i64 2
  store i8 %64, i8* %68, align 1
  %69 = getelementptr inbounds i8, i8* %56, i64 3
  store i8 %66, i8* %69, align 1
  br label %70

70:                                               ; preds = %58, %54, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I422ToYUY2Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 1
  br i1 %6, label %7, label %70

7:                                                ; preds = %5
  %8 = add i32 %4, -2
  %9 = lshr i32 %8, 1
  %10 = add nuw i32 %9, 1
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %47, label %13

13:                                               ; preds = %7
  %14 = sub nuw i32 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8* [ %0, %13 ], [ %42, %15 ]
  %17 = phi i8* [ %3, %13 ], [ %41, %15 ]
  %18 = phi i8* [ %2, %13 ], [ %44, %15 ]
  %19 = phi i8* [ %1, %13 ], [ %43, %15 ]
  %20 = phi i32 [ %14, %13 ], [ %45, %15 ]
  %21 = load i8, i8* %16, align 1
  store i8 %21, i8* %17, align 1
  %22 = load i8, i8* %19, align 1
  %23 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %16, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %25, i8* %26, align 1
  %27 = load i8, i8* %18, align 1
  %28 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %17, i64 4
  %30 = getelementptr inbounds i8, i8* %16, i64 2
  %31 = getelementptr inbounds i8, i8* %19, i64 1
  %32 = getelementptr inbounds i8, i8* %18, i64 1
  %33 = load i8, i8* %30, align 1
  store i8 %33, i8* %29, align 1
  %34 = load i8, i8* %31, align 1
  %35 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %34, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %16, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %17, i64 6
  store i8 %37, i8* %38, align 1
  %39 = load i8, i8* %32, align 1
  %40 = getelementptr inbounds i8, i8* %17, i64 7
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %17, i64 8
  %42 = getelementptr inbounds i8, i8* %16, i64 4
  %43 = getelementptr inbounds i8, i8* %19, i64 2
  %44 = getelementptr inbounds i8, i8* %18, i64 2
  %45 = add i32 %20, -2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %15

47:                                               ; preds = %15, %7
  %48 = phi i8* [ undef, %7 ], [ %41, %15 ]
  %49 = phi i8* [ undef, %7 ], [ %42, %15 ]
  %50 = phi i8* [ undef, %7 ], [ %43, %15 ]
  %51 = phi i8* [ undef, %7 ], [ %44, %15 ]
  %52 = phi i8* [ %0, %7 ], [ %42, %15 ]
  %53 = phi i8* [ %3, %7 ], [ %41, %15 ]
  %54 = phi i8* [ %2, %7 ], [ %44, %15 ]
  %55 = phi i8* [ %1, %7 ], [ %43, %15 ]
  %56 = icmp eq i32 %11, 0
  br i1 %56, label %70, label %57

57:                                               ; preds = %47
  %58 = load i8, i8* %52, align 1
  store i8 %58, i8* %53, align 1
  %59 = load i8, i8* %55, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 1
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %52, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %62, i8* %63, align 1
  %64 = load i8, i8* %54, align 1
  %65 = getelementptr inbounds i8, i8* %53, i64 3
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %54, i64 1
  %67 = getelementptr inbounds i8, i8* %55, i64 1
  %68 = getelementptr inbounds i8, i8* %52, i64 2
  %69 = getelementptr inbounds i8, i8* %53, i64 4
  br label %70

70:                                               ; preds = %57, %47, %5
  %71 = phi i8* [ %1, %5 ], [ %50, %47 ], [ %67, %57 ]
  %72 = phi i8* [ %2, %5 ], [ %51, %47 ], [ %66, %57 ]
  %73 = phi i8* [ %3, %5 ], [ %48, %47 ], [ %69, %57 ]
  %74 = phi i8* [ %0, %5 ], [ %49, %47 ], [ %68, %57 ]
  %75 = and i32 %4, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %84, label %77

77:                                               ; preds = %70
  %78 = load i8, i8* %74, align 1
  store i8 %78, i8* %73, align 1
  %79 = load i8, i8* %71, align 1
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %79, i8* %80, align 1
  %81 = getelementptr inbounds i8, i8* %73, i64 2
  store i8 0, i8* %81, align 1
  %82 = load i8, i8* %72, align 1
  %83 = getelementptr inbounds i8, i8* %73, i64 3
  store i8 %82, i8* %83, align 1
  br label %84

84:                                               ; preds = %70, %77
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @I422ToUYVYRow_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 1
  br i1 %6, label %7, label %70

7:                                                ; preds = %5
  %8 = add i32 %4, -2
  %9 = lshr i32 %8, 1
  %10 = add nuw i32 %9, 1
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %9, 0
  br i1 %12, label %47, label %13

13:                                               ; preds = %7
  %14 = sub nuw i32 %10, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i8* [ %0, %13 ], [ %42, %15 ]
  %17 = phi i8* [ %3, %13 ], [ %41, %15 ]
  %18 = phi i8* [ %2, %13 ], [ %44, %15 ]
  %19 = phi i8* [ %1, %13 ], [ %43, %15 ]
  %20 = phi i32 [ %14, %13 ], [ %45, %15 ]
  %21 = load i8, i8* %19, align 1
  store i8 %21, i8* %17, align 1
  %22 = load i8, i8* %16, align 1
  %23 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %22, i8* %23, align 1
  %24 = load i8, i8* %18, align 1
  %25 = getelementptr inbounds i8, i8* %17, i64 2
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %16, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %17, i64 3
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %17, i64 4
  %30 = getelementptr inbounds i8, i8* %16, i64 2
  %31 = getelementptr inbounds i8, i8* %19, i64 1
  %32 = getelementptr inbounds i8, i8* %18, i64 1
  %33 = load i8, i8* %31, align 1
  store i8 %33, i8* %29, align 1
  %34 = load i8, i8* %30, align 1
  %35 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 %34, i8* %35, align 1
  %36 = load i8, i8* %32, align 1
  %37 = getelementptr inbounds i8, i8* %17, i64 6
  store i8 %36, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %16, i64 3
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %17, i64 7
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %17, i64 8
  %42 = getelementptr inbounds i8, i8* %16, i64 4
  %43 = getelementptr inbounds i8, i8* %19, i64 2
  %44 = getelementptr inbounds i8, i8* %18, i64 2
  %45 = add i32 %20, -2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %15

47:                                               ; preds = %15, %7
  %48 = phi i8* [ undef, %7 ], [ %41, %15 ]
  %49 = phi i8* [ undef, %7 ], [ %42, %15 ]
  %50 = phi i8* [ undef, %7 ], [ %43, %15 ]
  %51 = phi i8* [ undef, %7 ], [ %44, %15 ]
  %52 = phi i8* [ %0, %7 ], [ %42, %15 ]
  %53 = phi i8* [ %3, %7 ], [ %41, %15 ]
  %54 = phi i8* [ %2, %7 ], [ %44, %15 ]
  %55 = phi i8* [ %1, %7 ], [ %43, %15 ]
  %56 = icmp eq i32 %11, 0
  br i1 %56, label %70, label %57

57:                                               ; preds = %47
  %58 = load i8, i8* %55, align 1
  store i8 %58, i8* %53, align 1
  %59 = load i8, i8* %52, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 1
  store i8 %59, i8* %60, align 1
  %61 = load i8, i8* %54, align 1
  %62 = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %61, i8* %62, align 1
  %63 = getelementptr inbounds i8, i8* %52, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %53, i64 3
  store i8 %64, i8* %65, align 1
  %66 = getelementptr inbounds i8, i8* %54, i64 1
  %67 = getelementptr inbounds i8, i8* %55, i64 1
  %68 = getelementptr inbounds i8, i8* %52, i64 2
  %69 = getelementptr inbounds i8, i8* %53, i64 4
  br label %70

70:                                               ; preds = %57, %47, %5
  %71 = phi i8* [ %1, %5 ], [ %50, %47 ], [ %67, %57 ]
  %72 = phi i8* [ %2, %5 ], [ %51, %47 ], [ %66, %57 ]
  %73 = phi i8* [ %3, %5 ], [ %48, %47 ], [ %69, %57 ]
  %74 = phi i8* [ %0, %5 ], [ %49, %47 ], [ %68, %57 ]
  %75 = and i32 %4, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %84, label %77

77:                                               ; preds = %70
  %78 = load i8, i8* %71, align 1
  store i8 %78, i8* %73, align 1
  %79 = load i8, i8* %74, align 1
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %79, i8* %80, align 1
  %81 = load i8, i8* %72, align 1
  %82 = getelementptr inbounds i8, i8* %73, i64 2
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i8, i8* %73, i64 3
  store i8 0, i8* %83, align 1
  br label %84

84:                                               ; preds = %70, %77
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBPolynomialRow_C(i8* nocapture readonly, i8* nocapture, float* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %293

6:                                                ; preds = %4
  %7 = getelementptr inbounds float, float* %2, i64 4
  %8 = getelementptr inbounds float, float* %2, i64 1
  %9 = getelementptr inbounds float, float* %2, i64 5
  %10 = getelementptr inbounds float, float* %2, i64 2
  %11 = getelementptr inbounds float, float* %2, i64 6
  %12 = getelementptr inbounds float, float* %2, i64 3
  %13 = getelementptr inbounds float, float* %2, i64 7
  %14 = getelementptr inbounds float, float* %2, i64 8
  %15 = getelementptr inbounds float, float* %2, i64 9
  %16 = getelementptr inbounds float, float* %2, i64 10
  %17 = getelementptr inbounds float, float* %2, i64 11
  %18 = getelementptr inbounds float, float* %2, i64 12
  %19 = getelementptr inbounds float, float* %2, i64 13
  %20 = getelementptr inbounds float, float* %2, i64 14
  %21 = getelementptr inbounds float, float* %2, i64 15
  %22 = add i32 %3, -1
  %23 = zext i32 %22 to i64
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 4
  br i1 %25, label %187, label %26

26:                                               ; preds = %6
  %27 = add i32 %3, -1
  %28 = zext i32 %27 to i64
  %29 = shl nuw nsw i64 %28, 2
  %30 = add nuw nsw i64 %29, 4
  %31 = getelementptr i8, i8* %1, i64 %30
  %32 = getelementptr i8, i8* %0, i64 %30
  %33 = getelementptr float, float* %2, i64 15
  %34 = bitcast float* %33 to i8*
  %35 = getelementptr i8, i8* %34, i64 1
  %36 = icmp ugt i8* %32, %1
  %37 = icmp ugt i8* %31, %0
  %38 = and i1 %36, %37
  %39 = bitcast float* %21 to i8*
  %40 = icmp ugt i8* %35, %1
  %41 = icmp ugt i8* %31, %39
  %42 = and i1 %40, %41
  %43 = or i1 %38, %42
  br i1 %43, label %187, label %44

44:                                               ; preds = %26
  %45 = and i64 %24, 8589934588
  %46 = shl nuw nsw i64 %45, 2
  %47 = getelementptr i8, i8* %0, i64 %46
  %48 = shl nuw nsw i64 %45, 2
  %49 = getelementptr i8, i8* %1, i64 %48
  %50 = trunc i64 %45 to i32
  br label %51

51:                                               ; preds = %51, %44
  %52 = phi i64 [ 0, %44 ], [ %183, %51 ]
  %53 = shl i64 %52, 2
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = shl i64 %52, 2
  %56 = bitcast i8* %54 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %59 = shufflevector <16 x i8> %57, <16 x i8> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %60 = shufflevector <16 x i8> %57, <16 x i8> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %61 = shufflevector <16 x i8> %57, <16 x i8> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %62 = uitofp <4 x i8> %58 to <4 x float>
  %63 = uitofp <4 x i8> %59 to <4 x float>
  %64 = uitofp <4 x i8> %60 to <4 x float>
  %65 = uitofp <4 x i8> %61 to <4 x float>
  %66 = fmul contract <4 x float> %62, %62
  %67 = fmul contract <4 x float> %63, %63
  %68 = fmul contract <4 x float> %64, %64
  %69 = fmul contract <4 x float> %65, %65
  %70 = load float, float* %2, align 4, !alias.scope !703
  %71 = insertelement <4 x float> undef, float %70, i32 0
  %72 = shufflevector <4 x float> %71, <4 x float> undef, <4 x i32> zeroinitializer
  %73 = load float, float* %7, align 4, !alias.scope !703
  %74 = insertelement <4 x float> undef, float %73, i32 0
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <4 x i32> zeroinitializer
  %76 = fmul contract <4 x float> %75, %62
  %77 = fadd contract <4 x float> %72, %76
  %78 = load float, float* %8, align 4, !alias.scope !703
  %79 = insertelement <4 x float> undef, float %78, i32 0
  %80 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> zeroinitializer
  %81 = load float, float* %9, align 4, !alias.scope !703
  %82 = insertelement <4 x float> undef, float %81, i32 0
  %83 = shufflevector <4 x float> %82, <4 x float> undef, <4 x i32> zeroinitializer
  %84 = fmul contract <4 x float> %83, %63
  %85 = fadd contract <4 x float> %80, %84
  %86 = load float, float* %10, align 4, !alias.scope !703
  %87 = insertelement <4 x float> undef, float %86, i32 0
  %88 = shufflevector <4 x float> %87, <4 x float> undef, <4 x i32> zeroinitializer
  %89 = load float, float* %11, align 4, !alias.scope !703
  %90 = insertelement <4 x float> undef, float %89, i32 0
  %91 = shufflevector <4 x float> %90, <4 x float> undef, <4 x i32> zeroinitializer
  %92 = fmul contract <4 x float> %91, %64
  %93 = fadd contract <4 x float> %88, %92
  %94 = load float, float* %12, align 4, !alias.scope !703
  %95 = insertelement <4 x float> undef, float %94, i32 0
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <4 x i32> zeroinitializer
  %97 = load float, float* %13, align 4, !alias.scope !703
  %98 = insertelement <4 x float> undef, float %97, i32 0
  %99 = shufflevector <4 x float> %98, <4 x float> undef, <4 x i32> zeroinitializer
  %100 = fmul contract <4 x float> %99, %65
  %101 = fadd contract <4 x float> %96, %100
  %102 = fmul contract <4 x float> %66, %62
  %103 = fmul contract <4 x float> %67, %63
  %104 = fmul contract <4 x float> %68, %64
  %105 = fmul contract <4 x float> %69, %65
  %106 = load float, float* %14, align 4, !alias.scope !703
  %107 = insertelement <4 x float> undef, float %106, i32 0
  %108 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> zeroinitializer
  %109 = fmul contract <4 x float> %66, %108
  %110 = fadd contract <4 x float> %77, %109
  %111 = load float, float* %15, align 4, !alias.scope !703
  %112 = insertelement <4 x float> undef, float %111, i32 0
  %113 = shufflevector <4 x float> %112, <4 x float> undef, <4 x i32> zeroinitializer
  %114 = fmul contract <4 x float> %67, %113
  %115 = fadd contract <4 x float> %85, %114
  %116 = load float, float* %16, align 4, !alias.scope !703
  %117 = insertelement <4 x float> undef, float %116, i32 0
  %118 = shufflevector <4 x float> %117, <4 x float> undef, <4 x i32> zeroinitializer
  %119 = fmul contract <4 x float> %68, %118
  %120 = fadd contract <4 x float> %93, %119
  %121 = load float, float* %17, align 4, !alias.scope !703
  %122 = insertelement <4 x float> undef, float %121, i32 0
  %123 = shufflevector <4 x float> %122, <4 x float> undef, <4 x i32> zeroinitializer
  %124 = fmul contract <4 x float> %69, %123
  %125 = fadd contract <4 x float> %101, %124
  %126 = load float, float* %18, align 4, !alias.scope !703
  %127 = insertelement <4 x float> undef, float %126, i32 0
  %128 = shufflevector <4 x float> %127, <4 x float> undef, <4 x i32> zeroinitializer
  %129 = fmul contract <4 x float> %102, %128
  %130 = fadd contract <4 x float> %110, %129
  %131 = load float, float* %19, align 4, !alias.scope !703
  %132 = insertelement <4 x float> undef, float %131, i32 0
  %133 = shufflevector <4 x float> %132, <4 x float> undef, <4 x i32> zeroinitializer
  %134 = fmul contract <4 x float> %103, %133
  %135 = fadd contract <4 x float> %115, %134
  %136 = load float, float* %20, align 4, !alias.scope !703
  %137 = insertelement <4 x float> undef, float %136, i32 0
  %138 = shufflevector <4 x float> %137, <4 x float> undef, <4 x i32> zeroinitializer
  %139 = fmul contract <4 x float> %104, %138
  %140 = fadd contract <4 x float> %120, %139
  %141 = load float, float* %21, align 4, !alias.scope !703
  %142 = insertelement <4 x float> undef, float %141, i32 0
  %143 = shufflevector <4 x float> %142, <4 x float> undef, <4 x i32> zeroinitializer
  %144 = fmul contract <4 x float> %105, %143
  %145 = fadd contract <4 x float> %125, %144
  %146 = fptosi <4 x float> %130 to <4 x i32>
  %147 = lshr <4 x i32> %146, <i32 31, i32 31, i32 31, i32 31>
  %148 = xor <4 x i32> %147, <i32 1, i32 1, i32 1, i32 1>
  %149 = sub nsw <4 x i32> zeroinitializer, %148
  %150 = and <4 x i32> %149, %146
  %151 = icmp slt <4 x i32> %150, <i32 255, i32 255, i32 255, i32 255>
  %152 = select <4 x i1> %151, <4 x i32> %150, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %153 = trunc <4 x i32> %152 to <4 x i8>
  %154 = fptosi <4 x float> %135 to <4 x i32>
  %155 = lshr <4 x i32> %154, <i32 31, i32 31, i32 31, i32 31>
  %156 = xor <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>
  %157 = sub nsw <4 x i32> zeroinitializer, %156
  %158 = and <4 x i32> %157, %154
  %159 = icmp slt <4 x i32> %158, <i32 255, i32 255, i32 255, i32 255>
  %160 = select <4 x i1> %159, <4 x i32> %158, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %161 = trunc <4 x i32> %160 to <4 x i8>
  %162 = fptosi <4 x float> %140 to <4 x i32>
  %163 = lshr <4 x i32> %162, <i32 31, i32 31, i32 31, i32 31>
  %164 = xor <4 x i32> %163, <i32 1, i32 1, i32 1, i32 1>
  %165 = sub nsw <4 x i32> zeroinitializer, %164
  %166 = and <4 x i32> %165, %162
  %167 = icmp slt <4 x i32> %166, <i32 255, i32 255, i32 255, i32 255>
  %168 = select <4 x i1> %167, <4 x i32> %166, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %169 = trunc <4 x i32> %168 to <4 x i8>
  %170 = fptosi <4 x float> %145 to <4 x i32>
  %171 = lshr <4 x i32> %170, <i32 31, i32 31, i32 31, i32 31>
  %172 = xor <4 x i32> %171, <i32 1, i32 1, i32 1, i32 1>
  %173 = sub nsw <4 x i32> zeroinitializer, %172
  %174 = and <4 x i32> %173, %170
  %175 = icmp slt <4 x i32> %174, <i32 255, i32 255, i32 255, i32 255>
  %176 = select <4 x i1> %175, <4 x i32> %174, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %177 = trunc <4 x i32> %176 to <4 x i8>
  %178 = getelementptr inbounds i8, i8* %1, i64 %55
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = shufflevector <4 x i8> %153, <4 x i8> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %181 = shufflevector <4 x i8> %169, <4 x i8> %177, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %182 = shufflevector <8 x i8> %180, <8 x i8> %181, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x i8> %182, <16 x i8>* %179, align 1
  %183 = add i64 %52, 4
  %184 = icmp eq i64 %183, %45
  br i1 %184, label %185, label %51, !llvm.loop !706

185:                                              ; preds = %51
  %186 = icmp eq i64 %24, %45
  br i1 %186, label %293, label %187

187:                                              ; preds = %185, %26, %6
  %188 = phi i8* [ %0, %26 ], [ %0, %6 ], [ %47, %185 ]
  %189 = phi i8* [ %1, %26 ], [ %1, %6 ], [ %49, %185 ]
  %190 = phi i32 [ 0, %26 ], [ 0, %6 ], [ %50, %185 ]
  br label %191

191:                                              ; preds = %187, %191
  %192 = phi i8* [ %289, %191 ], [ %188, %187 ]
  %193 = phi i8* [ %290, %191 ], [ %189, %187 ]
  %194 = phi i32 [ %291, %191 ], [ %190, %187 ]
  %195 = load i8, i8* %192, align 1
  %196 = uitofp i8 %195 to float
  %197 = getelementptr inbounds i8, i8* %192, i64 1
  %198 = load i8, i8* %197, align 1
  %199 = uitofp i8 %198 to float
  %200 = getelementptr inbounds i8, i8* %192, i64 2
  %201 = load i8, i8* %200, align 1
  %202 = uitofp i8 %201 to float
  %203 = getelementptr inbounds i8, i8* %192, i64 3
  %204 = load i8, i8* %203, align 1
  %205 = uitofp i8 %204 to float
  %206 = fmul contract float %196, %196
  %207 = fmul contract float %199, %199
  %208 = fmul contract float %202, %202
  %209 = fmul contract float %205, %205
  %210 = load float, float* %2, align 4
  %211 = load float, float* %7, align 4
  %212 = fmul contract float %211, %196
  %213 = fadd contract float %210, %212
  %214 = load float, float* %8, align 4
  %215 = load float, float* %9, align 4
  %216 = fmul contract float %215, %199
  %217 = fadd contract float %214, %216
  %218 = load float, float* %10, align 4
  %219 = load float, float* %11, align 4
  %220 = fmul contract float %219, %202
  %221 = fadd contract float %218, %220
  %222 = load float, float* %12, align 4
  %223 = load float, float* %13, align 4
  %224 = fmul contract float %223, %205
  %225 = fadd contract float %222, %224
  %226 = fmul contract float %206, %196
  %227 = fmul contract float %207, %199
  %228 = fmul contract float %208, %202
  %229 = fmul contract float %209, %205
  %230 = load float, float* %14, align 4
  %231 = fmul contract float %206, %230
  %232 = fadd contract float %213, %231
  %233 = load float, float* %15, align 4
  %234 = fmul contract float %207, %233
  %235 = fadd contract float %217, %234
  %236 = load float, float* %16, align 4
  %237 = fmul contract float %208, %236
  %238 = fadd contract float %221, %237
  %239 = load float, float* %17, align 4
  %240 = fmul contract float %209, %239
  %241 = fadd contract float %225, %240
  %242 = load float, float* %18, align 4
  %243 = fmul contract float %226, %242
  %244 = fadd contract float %232, %243
  %245 = load float, float* %19, align 4
  %246 = fmul contract float %227, %245
  %247 = fadd contract float %235, %246
  %248 = load float, float* %20, align 4
  %249 = fmul contract float %228, %248
  %250 = fadd contract float %238, %249
  %251 = load float, float* %21, align 4
  %252 = fmul contract float %229, %251
  %253 = fadd contract float %241, %252
  %254 = fptosi float %244 to i32
  %255 = lshr i32 %254, 31
  %256 = xor i32 %255, 1
  %257 = sub nsw i32 0, %256
  %258 = and i32 %257, %254
  %259 = icmp slt i32 %258, 255
  %260 = select i1 %259, i32 %258, i32 255
  %261 = trunc i32 %260 to i8
  store i8 %261, i8* %193, align 1
  %262 = fptosi float %247 to i32
  %263 = lshr i32 %262, 31
  %264 = xor i32 %263, 1
  %265 = sub nsw i32 0, %264
  %266 = and i32 %265, %262
  %267 = icmp slt i32 %266, 255
  %268 = select i1 %267, i32 %266, i32 255
  %269 = trunc i32 %268 to i8
  %270 = getelementptr inbounds i8, i8* %193, i64 1
  store i8 %269, i8* %270, align 1
  %271 = fptosi float %250 to i32
  %272 = lshr i32 %271, 31
  %273 = xor i32 %272, 1
  %274 = sub nsw i32 0, %273
  %275 = and i32 %274, %271
  %276 = icmp slt i32 %275, 255
  %277 = select i1 %276, i32 %275, i32 255
  %278 = trunc i32 %277 to i8
  %279 = getelementptr inbounds i8, i8* %193, i64 2
  store i8 %278, i8* %279, align 1
  %280 = fptosi float %253 to i32
  %281 = lshr i32 %280, 31
  %282 = xor i32 %281, 1
  %283 = sub nsw i32 0, %282
  %284 = and i32 %283, %280
  %285 = icmp slt i32 %284, 255
  %286 = select i1 %285, i32 %284, i32 255
  %287 = trunc i32 %286 to i8
  %288 = getelementptr inbounds i8, i8* %193, i64 3
  store i8 %287, i8* %288, align 1
  %289 = getelementptr inbounds i8, i8* %192, i64 4
  %290 = getelementptr inbounds i8, i8* %193, i64 4
  %291 = add nuw nsw i32 %194, 1
  %292 = icmp eq i32 %291, %3
  br i1 %292, label %293, label %191, !llvm.loop !707

293:                                              ; preds = %191, %185, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @HalfFloatRow_C(i16* nocapture readonly, i16* nocapture, float, i32) local_unnamed_addr #0 {
  %5 = fmul contract float %2, 0x38F0000000000000
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %110

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 8
  br i1 %9, label %70, label %10

10:                                               ; preds = %7
  %11 = getelementptr i16, i16* %1, i64 %8
  %12 = getelementptr i16, i16* %0, i64 %8
  %13 = icmp ugt i16* %12, %1
  %14 = icmp ugt i16* %11, %0
  %15 = and i1 %13, %14
  br i1 %15, label %70, label %16

16:                                               ; preds = %10
  %17 = and i64 %8, 4294967288
  %18 = insertelement <8 x float> undef, float %5, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = add nsw i64 %17, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %54, label %25

25:                                               ; preds = %16
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %51, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %52, %27 ]
  %30 = getelementptr inbounds i16, i16* %0, i64 %28
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 2, !alias.scope !708
  %33 = uitofp <8 x i16> %32 to <8 x float>
  %34 = fmul contract <8 x float> %19, %33
  %35 = bitcast <8 x float> %34 to <8 x i32>
  %36 = lshr <8 x i32> %35, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %37 = trunc <8 x i32> %36 to <8 x i16>
  %38 = getelementptr inbounds i16, i16* %1, i64 %28
  %39 = bitcast i16* %38 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %39, align 2, !alias.scope !711, !noalias !708
  %40 = or i64 %28, 8
  %41 = getelementptr inbounds i16, i16* %0, i64 %40
  %42 = bitcast i16* %41 to <8 x i16>*
  %43 = load <8 x i16>, <8 x i16>* %42, align 2, !alias.scope !708
  %44 = uitofp <8 x i16> %43 to <8 x float>
  %45 = fmul contract <8 x float> %19, %44
  %46 = bitcast <8 x float> %45 to <8 x i32>
  %47 = lshr <8 x i32> %46, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %48 = trunc <8 x i32> %47 to <8 x i16>
  %49 = getelementptr inbounds i16, i16* %1, i64 %40
  %50 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %48, <8 x i16>* %50, align 2, !alias.scope !711, !noalias !708
  %51 = add i64 %28, 16
  %52 = add i64 %29, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %27, !llvm.loop !713

54:                                               ; preds = %27, %16
  %55 = phi i64 [ 0, %16 ], [ %51, %27 ]
  %56 = icmp eq i64 %23, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds i16, i16* %0, i64 %55
  %59 = bitcast i16* %58 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !708
  %61 = uitofp <8 x i16> %60 to <8 x float>
  %62 = fmul contract <8 x float> %19, %61
  %63 = bitcast <8 x float> %62 to <8 x i32>
  %64 = lshr <8 x i32> %63, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %65 = trunc <8 x i32> %64 to <8 x i16>
  %66 = getelementptr inbounds i16, i16* %1, i64 %55
  %67 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %65, <8 x i16>* %67, align 2, !alias.scope !711, !noalias !708
  br label %68

68:                                               ; preds = %54, %57
  %69 = icmp eq i64 %17, %8
  br i1 %69, label %110, label %70

70:                                               ; preds = %68, %10, %7
  %71 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %17, %68 ]
  %72 = xor i64 %71, -1
  %73 = and i64 %8, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds i16, i16* %0, i64 %71
  %77 = load i16, i16* %76, align 2
  %78 = uitofp i16 %77 to float
  %79 = fmul contract float %5, %78
  %80 = bitcast float %79 to i32
  %81 = lshr i32 %80, 13
  %82 = trunc i32 %81 to i16
  %83 = getelementptr inbounds i16, i16* %1, i64 %71
  store i16 %82, i16* %83, align 2
  %84 = or i64 %71, 1
  br label %85

85:                                               ; preds = %70, %75
  %86 = phi i64 [ %71, %70 ], [ %84, %75 ]
  %87 = sub nsw i64 0, %8
  %88 = icmp eq i64 %72, %87
  br i1 %88, label %110, label %89

89:                                               ; preds = %85, %89
  %90 = phi i64 [ %108, %89 ], [ %86, %85 ]
  %91 = getelementptr inbounds i16, i16* %0, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = uitofp i16 %92 to float
  %94 = fmul contract float %5, %93
  %95 = bitcast float %94 to i32
  %96 = lshr i32 %95, 13
  %97 = trunc i32 %96 to i16
  %98 = getelementptr inbounds i16, i16* %1, i64 %90
  store i16 %97, i16* %98, align 2
  %99 = add nuw nsw i64 %90, 1
  %100 = getelementptr inbounds i16, i16* %0, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = uitofp i16 %101 to float
  %103 = fmul contract float %5, %102
  %104 = bitcast float %103 to i32
  %105 = lshr i32 %104, 13
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %1, i64 %99
  store i16 %106, i16* %107, align 2
  %108 = add nuw nsw i64 %90, 2
  %109 = icmp eq i64 %108, %8
  br i1 %109, label %110, label %89, !llvm.loop !714

110:                                              ; preds = %85, %89, %68, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ByteToFloatRow_C(i8* nocapture readonly, float* nocapture, float, i32) local_unnamed_addr #0 {
  %5 = bitcast float* %1 to i8*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %132

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 8
  br i1 %9, label %85, label %10

10:                                               ; preds = %7
  %11 = getelementptr float, float* %1, i64 %8
  %12 = bitcast float* %11 to i8*
  %13 = getelementptr i8, i8* %0, i64 %8
  %14 = icmp ugt i8* %13, %5
  %15 = icmp ugt i8* %12, %0
  %16 = and i1 %14, %15
  br i1 %16, label %85, label %17

17:                                               ; preds = %10
  %18 = and i64 %8, 4294967288
  %19 = insertelement <4 x float> undef, float %2, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x float> undef, float %2, i32 0
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <4 x i32> zeroinitializer
  %23 = add nsw i64 %18, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %65, label %28

28:                                               ; preds = %17
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %62, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %63, %30 ]
  %33 = getelementptr inbounds i8, i8* %0, i64 %31
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = load <4 x i8>, <4 x i8>* %34, align 1, !alias.scope !715
  %36 = getelementptr inbounds i8, i8* %33, i64 4
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1, !alias.scope !715
  %39 = uitofp <4 x i8> %35 to <4 x float>
  %40 = uitofp <4 x i8> %38 to <4 x float>
  %41 = fmul contract <4 x float> %20, %39
  %42 = fmul contract <4 x float> %22, %40
  %43 = getelementptr inbounds float, float* %1, i64 %31
  %44 = bitcast float* %43 to <4 x float>*
  store <4 x float> %41, <4 x float>* %44, align 4, !alias.scope !718, !noalias !715
  %45 = getelementptr inbounds float, float* %43, i64 4
  %46 = bitcast float* %45 to <4 x float>*
  store <4 x float> %42, <4 x float>* %46, align 4, !alias.scope !718, !noalias !715
  %47 = or i64 %31, 8
  %48 = getelementptr inbounds i8, i8* %0, i64 %47
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1, !alias.scope !715
  %51 = getelementptr inbounds i8, i8* %48, i64 4
  %52 = bitcast i8* %51 to <4 x i8>*
  %53 = load <4 x i8>, <4 x i8>* %52, align 1, !alias.scope !715
  %54 = uitofp <4 x i8> %50 to <4 x float>
  %55 = uitofp <4 x i8> %53 to <4 x float>
  %56 = fmul contract <4 x float> %20, %54
  %57 = fmul contract <4 x float> %22, %55
  %58 = getelementptr inbounds float, float* %1, i64 %47
  %59 = bitcast float* %58 to <4 x float>*
  store <4 x float> %56, <4 x float>* %59, align 4, !alias.scope !718, !noalias !715
  %60 = getelementptr inbounds float, float* %58, i64 4
  %61 = bitcast float* %60 to <4 x float>*
  store <4 x float> %57, <4 x float>* %61, align 4, !alias.scope !718, !noalias !715
  %62 = add i64 %31, 16
  %63 = add i64 %32, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %30, !llvm.loop !720

65:                                               ; preds = %30, %17
  %66 = phi i64 [ 0, %17 ], [ %62, %30 ]
  %67 = icmp eq i64 %26, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds i8, i8* %0, i64 %66
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1, !alias.scope !715
  %72 = getelementptr inbounds i8, i8* %69, i64 4
  %73 = bitcast i8* %72 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !alias.scope !715
  %75 = uitofp <4 x i8> %71 to <4 x float>
  %76 = uitofp <4 x i8> %74 to <4 x float>
  %77 = fmul contract <4 x float> %20, %75
  %78 = fmul contract <4 x float> %22, %76
  %79 = getelementptr inbounds float, float* %1, i64 %66
  %80 = bitcast float* %79 to <4 x float>*
  store <4 x float> %77, <4 x float>* %80, align 4, !alias.scope !718, !noalias !715
  %81 = getelementptr inbounds float, float* %79, i64 4
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> %78, <4 x float>* %82, align 4, !alias.scope !718, !noalias !715
  br label %83

83:                                               ; preds = %65, %68
  %84 = icmp eq i64 %18, %8
  br i1 %84, label %132, label %85

85:                                               ; preds = %83, %10, %7
  %86 = phi i64 [ 0, %10 ], [ 0, %7 ], [ %18, %83 ]
  %87 = xor i64 %86, -1
  %88 = add nsw i64 %87, %8
  %89 = and i64 %8, 3
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %102, label %91

91:                                               ; preds = %85, %91
  %92 = phi i64 [ %99, %91 ], [ %86, %85 ]
  %93 = phi i64 [ %100, %91 ], [ %89, %85 ]
  %94 = getelementptr inbounds i8, i8* %0, i64 %92
  %95 = load i8, i8* %94, align 1
  %96 = uitofp i8 %95 to float
  %97 = fmul contract float %96, %2
  %98 = getelementptr inbounds float, float* %1, i64 %92
  store float %97, float* %98, align 4
  %99 = add nuw nsw i64 %92, 1
  %100 = add i64 %93, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %91, !llvm.loop !721

102:                                              ; preds = %91, %85
  %103 = phi i64 [ %86, %85 ], [ %99, %91 ]
  %104 = icmp ult i64 %88, 3
  br i1 %104, label %132, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %130, %105 ], [ %103, %102 ]
  %107 = getelementptr inbounds i8, i8* %0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = uitofp i8 %108 to float
  %110 = fmul contract float %109, %2
  %111 = getelementptr inbounds float, float* %1, i64 %106
  store float %110, float* %111, align 4
  %112 = add nuw nsw i64 %106, 1
  %113 = getelementptr inbounds i8, i8* %0, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = uitofp i8 %114 to float
  %116 = fmul contract float %115, %2
  %117 = getelementptr inbounds float, float* %1, i64 %112
  store float %116, float* %117, align 4
  %118 = add nuw nsw i64 %106, 2
  %119 = getelementptr inbounds i8, i8* %0, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = uitofp i8 %120 to float
  %122 = fmul contract float %121, %2
  %123 = getelementptr inbounds float, float* %1, i64 %118
  store float %122, float* %123, align 4
  %124 = add nuw nsw i64 %106, 3
  %125 = getelementptr inbounds i8, i8* %0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = uitofp i8 %126 to float
  %128 = fmul contract float %127, %2
  %129 = getelementptr inbounds float, float* %1, i64 %124
  store float %128, float* %129, align 4
  %130 = add nuw nsw i64 %106, 4
  %131 = icmp eq i64 %130, %8
  br i1 %131, label %132, label %105, !llvm.loop !722

132:                                              ; preds = %102, %105, %83, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBLumaColorTableRow_C(i8* nocapture readonly, i8* nocapture, i32, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %6 = and i32 %4, 255
  %7 = lshr i32 %4, 8
  %8 = and i32 %7, 255
  %9 = lshr i32 %4, 16
  %10 = and i32 %9, 255
  %11 = add nsw i32 %2, -1
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %87

13:                                               ; preds = %5, %13
  %14 = phi i8* [ %83, %13 ], [ %0, %5 ]
  %15 = phi i8* [ %84, %13 ], [ %1, %5 ]
  %16 = phi i32 [ %85, %13 ], [ 0, %5 ]
  %17 = load i8, i8* %14, align 1
  %18 = zext i8 %17 to i32
  %19 = mul nuw nsw i32 %6, %18
  %20 = getelementptr inbounds i8, i8* %14, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = mul nuw nsw i32 %8, %22
  %24 = add nuw nsw i32 %23, %19
  %25 = getelementptr inbounds i8, i8* %14, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = mul nuw nsw i32 %10, %27
  %29 = add nuw nsw i32 %24, %28
  %30 = and i32 %29, 32512
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %3, i64 %31
  %33 = zext i8 %17 to i64
  %34 = getelementptr inbounds i8, i8* %32, i64 %33
  %35 = load i8, i8* %34, align 1
  store i8 %35, i8* %15, align 1
  %36 = load i8, i8* %20, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %39, i8* %40, align 1
  %41 = load i8, i8* %25, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds i8, i8* %32, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %14, i64 3
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %47, i8* %48, align 1
  %49 = getelementptr inbounds i8, i8* %14, i64 4
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nuw nsw i32 %6, %51
  %53 = getelementptr inbounds i8, i8* %14, i64 5
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = mul nuw nsw i32 %8, %55
  %57 = add nuw nsw i32 %56, %52
  %58 = getelementptr inbounds i8, i8* %14, i64 6
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nuw nsw i32 %10, %60
  %62 = add nuw nsw i32 %57, %61
  %63 = and i32 %62, 32512
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %3, i64 %64
  %66 = zext i8 %50 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds i8, i8* %15, i64 4
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %53, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds i8, i8* %65, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds i8, i8* %15, i64 5
  store i8 %73, i8* %74, align 1
  %75 = load i8, i8* %58, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds i8, i8* %65, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %15, i64 6
  store i8 %78, i8* %79, align 1
  %80 = getelementptr inbounds i8, i8* %14, i64 7
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %15, i64 7
  store i8 %81, i8* %82, align 1
  %83 = getelementptr inbounds i8, i8* %14, i64 8
  %84 = getelementptr inbounds i8, i8* %15, i64 8
  %85 = add nuw nsw i32 %16, 2
  %86 = icmp slt i32 %85, %11
  br i1 %86, label %13, label %87

87:                                               ; preds = %13, %5
  %88 = phi i8* [ %1, %5 ], [ %84, %13 ]
  %89 = phi i8* [ %0, %5 ], [ %83, %13 ]
  %90 = and i32 %2, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %125, label %92

92:                                               ; preds = %87
  %93 = load i8, i8* %89, align 1
  %94 = zext i8 %93 to i32
  %95 = mul nuw nsw i32 %6, %94
  %96 = getelementptr inbounds i8, i8* %89, i64 1
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = mul nuw nsw i32 %8, %98
  %100 = add nuw nsw i32 %99, %95
  %101 = getelementptr inbounds i8, i8* %89, i64 2
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %10, %103
  %105 = add nuw nsw i32 %100, %104
  %106 = and i32 %105, 32512
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %3, i64 %107
  %109 = zext i8 %93 to i64
  %110 = getelementptr inbounds i8, i8* %108, i64 %109
  %111 = load i8, i8* %110, align 1
  store i8 %111, i8* %88, align 1
  %112 = load i8, i8* %96, align 1
  %113 = zext i8 %112 to i64
  %114 = getelementptr inbounds i8, i8* %108, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = getelementptr inbounds i8, i8* %88, i64 1
  store i8 %115, i8* %116, align 1
  %117 = load i8, i8* %101, align 1
  %118 = zext i8 %117 to i64
  %119 = getelementptr inbounds i8, i8* %108, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr inbounds i8, i8* %88, i64 2
  store i8 %120, i8* %121, align 1
  %122 = getelementptr inbounds i8, i8* %89, i64 3
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds i8, i8* %88, i64 3
  store i8 %123, i8* %124, align 1
  br label %125

125:                                              ; preds = %87, %92
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBCopyAlphaRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 1
  br i1 %4, label %5, label %65

5:                                                ; preds = %3
  %6 = add i32 %2, -2
  %7 = lshr i32 %6, 1
  %8 = add nuw i32 %7, 1
  %9 = and i32 %8, 3
  %10 = icmp ult i32 %6, 6
  br i1 %10, label %45, label %11

11:                                               ; preds = %5
  %12 = sub i32 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i8* [ %0, %11 ], [ %42, %13 ]
  %15 = phi i8* [ %1, %11 ], [ %41, %13 ]
  %16 = phi i32 [ %12, %11 ], [ %43, %13 ]
  %17 = getelementptr inbounds i8, i8* %14, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %14, i64 7
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %15, i64 7
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %14, i64 11
  %24 = load i8, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %15, i64 11
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %14, i64 15
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 15
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %14, i64 19
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %15, i64 19
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %14, i64 23
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds i8, i8* %15, i64 23
  store i8 %33, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %14, i64 27
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds i8, i8* %15, i64 27
  store i8 %36, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %14, i64 31
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %15, i64 31
  store i8 %39, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %15, i64 32
  %42 = getelementptr inbounds i8, i8* %14, i64 32
  %43 = add i32 %16, -4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %13

45:                                               ; preds = %13, %5
  %46 = phi i8* [ undef, %5 ], [ %41, %13 ]
  %47 = phi i8* [ undef, %5 ], [ %42, %13 ]
  %48 = phi i8* [ %0, %5 ], [ %42, %13 ]
  %49 = phi i8* [ %1, %5 ], [ %41, %13 ]
  %50 = icmp eq i32 %9, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %45, %51
  %52 = phi i8* [ %62, %51 ], [ %48, %45 ]
  %53 = phi i8* [ %61, %51 ], [ %49, %45 ]
  %54 = phi i32 [ %63, %51 ], [ %9, %45 ]
  %55 = getelementptr inbounds i8, i8* %52, i64 3
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds i8, i8* %53, i64 3
  store i8 %56, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %52, i64 7
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %53, i64 7
  store i8 %59, i8* %60, align 1
  %61 = getelementptr inbounds i8, i8* %53, i64 8
  %62 = getelementptr inbounds i8, i8* %52, i64 8
  %63 = add i32 %54, -1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %51, !llvm.loop !723

65:                                               ; preds = %45, %51, %3
  %66 = phi i8* [ %1, %3 ], [ %46, %45 ], [ %61, %51 ]
  %67 = phi i8* [ %0, %3 ], [ %47, %45 ], [ %62, %51 ]
  %68 = and i32 %2, 1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %67, i64 3
  %72 = load i8, i8* %71, align 1
  %73 = getelementptr inbounds i8, i8* %66, i64 3
  store i8 %72, i8* %73, align 1
  br label %74

74:                                               ; preds = %65, %70
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBExtractAlphaRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 1
  br i1 %4, label %5, label %63

5:                                                ; preds = %3
  %6 = add i32 %2, -2
  %7 = lshr i32 %6, 1
  %8 = add nuw i32 %7, 1
  %9 = and i32 %8, 3
  %10 = icmp ult i32 %6, 6
  br i1 %10, label %44, label %11

11:                                               ; preds = %5
  %12 = sub i32 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i8* [ %0, %11 ], [ %41, %13 ]
  %15 = phi i8* [ %1, %11 ], [ %40, %13 ]
  %16 = phi i32 [ %12, %11 ], [ %42, %13 ]
  %17 = getelementptr inbounds i8, i8* %14, i64 3
  %18 = load i8, i8* %17, align 1
  store i8 %18, i8* %15, align 1
  %19 = getelementptr inbounds i8, i8* %14, i64 7
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %15, i64 2
  %23 = getelementptr inbounds i8, i8* %14, i64 11
  %24 = load i8, i8* %23, align 1
  store i8 %24, i8* %22, align 1
  %25 = getelementptr inbounds i8, i8* %14, i64 15
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 4
  %29 = getelementptr inbounds i8, i8* %14, i64 19
  %30 = load i8, i8* %29, align 1
  store i8 %30, i8* %28, align 1
  %31 = getelementptr inbounds i8, i8* %14, i64 23
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds i8, i8* %15, i64 5
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %15, i64 6
  %35 = getelementptr inbounds i8, i8* %14, i64 27
  %36 = load i8, i8* %35, align 1
  store i8 %36, i8* %34, align 1
  %37 = getelementptr inbounds i8, i8* %14, i64 31
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %15, i64 7
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %15, i64 8
  %41 = getelementptr inbounds i8, i8* %14, i64 32
  %42 = add i32 %16, -4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %13

44:                                               ; preds = %13, %5
  %45 = phi i8* [ undef, %5 ], [ %40, %13 ]
  %46 = phi i8* [ undef, %5 ], [ %41, %13 ]
  %47 = phi i8* [ %0, %5 ], [ %41, %13 ]
  %48 = phi i8* [ %1, %5 ], [ %40, %13 ]
  %49 = icmp eq i32 %9, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %44, %50
  %51 = phi i8* [ %60, %50 ], [ %47, %44 ]
  %52 = phi i8* [ %59, %50 ], [ %48, %44 ]
  %53 = phi i32 [ %61, %50 ], [ %9, %44 ]
  %54 = getelementptr inbounds i8, i8* %51, i64 3
  %55 = load i8, i8* %54, align 1
  store i8 %55, i8* %52, align 1
  %56 = getelementptr inbounds i8, i8* %51, i64 7
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %52, i64 1
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %52, i64 2
  %60 = getelementptr inbounds i8, i8* %51, i64 8
  %61 = add i32 %53, -1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %50, !llvm.loop !724

63:                                               ; preds = %44, %50, %3
  %64 = phi i8* [ %1, %3 ], [ %45, %44 ], [ %59, %50 ]
  %65 = phi i8* [ %0, %3 ], [ %46, %44 ], [ %60, %50 ]
  %66 = and i32 %2, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds i8, i8* %65, i64 3
  %70 = load i8, i8* %69, align 1
  store i8 %70, i8* %64, align 1
  br label %71

71:                                               ; preds = %63, %68
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ARGBCopyYToAlphaRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 1
  br i1 %4, label %5, label %63

5:                                                ; preds = %3
  %6 = add i32 %2, -2
  %7 = lshr i32 %6, 1
  %8 = add nuw i32 %7, 1
  %9 = and i32 %8, 3
  %10 = icmp ult i32 %6, 6
  br i1 %10, label %44, label %11

11:                                               ; preds = %5
  %12 = sub i32 %8, %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i8* [ %0, %11 ], [ %41, %13 ]
  %15 = phi i8* [ %1, %11 ], [ %40, %13 ]
  %16 = phi i32 [ %12, %11 ], [ %42, %13 ]
  %17 = load i8, i8* %14, align 1
  %18 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %14, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 7
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %14, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds i8, i8* %15, i64 11
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %14, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %15, i64 15
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds i8, i8* %14, i64 4
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds i8, i8* %15, i64 19
  store i8 %29, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %14, i64 5
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds i8, i8* %15, i64 23
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %14, i64 6
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %15, i64 27
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %14, i64 7
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds i8, i8* %15, i64 31
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %15, i64 32
  %41 = getelementptr inbounds i8, i8* %14, i64 8
  %42 = add i32 %16, -4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %13

44:                                               ; preds = %13, %5
  %45 = phi i8* [ undef, %5 ], [ %40, %13 ]
  %46 = phi i8* [ undef, %5 ], [ %41, %13 ]
  %47 = phi i8* [ %0, %5 ], [ %41, %13 ]
  %48 = phi i8* [ %1, %5 ], [ %40, %13 ]
  %49 = icmp eq i32 %9, 0
  br i1 %49, label %63, label %50

50:                                               ; preds = %44, %50
  %51 = phi i8* [ %60, %50 ], [ %47, %44 ]
  %52 = phi i8* [ %59, %50 ], [ %48, %44 ]
  %53 = phi i32 [ %61, %50 ], [ %9, %44 ]
  %54 = load i8, i8* %51, align 1
  %55 = getelementptr inbounds i8, i8* %52, i64 3
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %51, i64 1
  %57 = load i8, i8* %56, align 1
  %58 = getelementptr inbounds i8, i8* %52, i64 7
  store i8 %57, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %52, i64 8
  %60 = getelementptr inbounds i8, i8* %51, i64 2
  %61 = add i32 %53, -1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %50, !llvm.loop !725

63:                                               ; preds = %44, %50, %3
  %64 = phi i8* [ %1, %3 ], [ %45, %44 ], [ %59, %50 ]
  %65 = phi i8* [ %0, %3 ], [ %46, %44 ], [ %60, %50 ]
  %66 = and i32 %2, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %63
  %69 = load i8, i8* %65, align 1
  %70 = getelementptr inbounds i8, i8* %64, i64 3
  store i8 %69, i8* %70, align 1
  br label %71

71:                                               ; preds = %63, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToRGB565Row_SSSE3(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_SSSE3(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToRGB565Row_SSE2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = shl nsw i32 %17, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

declare void @I422ToARGBRow_SSSE3(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #4

declare void @ARGBToRGB565Row_SSE2(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToARGB1555Row_SSSE3(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_SSSE3(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToARGB1555Row_SSE2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = shl nsw i32 %17, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

declare void @ARGBToARGB1555Row_SSE2(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToARGB4444Row_SSSE3(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_SSSE3(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToARGB4444Row_SSE2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = shl nsw i32 %17, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

declare void @ARGBToARGB4444Row_SSE2(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @NV12ToRGB565Row_SSSE3(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %6 = alloca [8192 x i8], align 32
  %7 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 8192, i1 false)
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %5, %9
  %10 = phi i8* [ %17, %9 ], [ %0, %5 ]
  %11 = phi i32 [ %22, %9 ], [ %4, %5 ]
  %12 = phi i8* [ %18, %9 ], [ %1, %5 ]
  %13 = phi i8* [ %21, %9 ], [ %2, %5 ]
  %14 = icmp slt i32 %11, 2048
  %15 = select i1 %14, i32 %11, i32 2048
  call void @NV12ToARGBRow_SSSE3(i8* %10, i8* %12, i8* nonnull %7, %"struct.libyuv::YuvConstants"* %3, i32 %15) #5
  call void @ARGBToRGB565Row_SSE2(i8* nonnull %7, i8* %13, i32 %15) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = shl nsw i32 %15, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %13, i64 %20
  %22 = sub nsw i32 %11, %15
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #5
  ret void
}

declare void @NV12ToARGBRow_SSSE3(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @NV12ToRGB24Row_SSSE3(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %6 = alloca [8192 x i8], align 32
  %7 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 8192, i1 false)
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %5, %9
  %10 = phi i8* [ %17, %9 ], [ %0, %5 ]
  %11 = phi i32 [ %22, %9 ], [ %4, %5 ]
  %12 = phi i8* [ %18, %9 ], [ %1, %5 ]
  %13 = phi i8* [ %21, %9 ], [ %2, %5 ]
  %14 = icmp slt i32 %11, 2048
  %15 = select i1 %14, i32 %11, i32 2048
  call void @NV12ToARGBRow_SSSE3(i8* %10, i8* %12, i8* nonnull %7, %"struct.libyuv::YuvConstants"* %3, i32 %15) #5
  call void @ARGBToRGB24Row_SSSE3(i8* nonnull %7, i8* %13, i32 %15) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = mul nsw i32 %15, 3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %13, i64 %20
  %22 = sub nsw i32 %11, %15
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #5
  ret void
}

declare void @ARGBToRGB24Row_SSSE3(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @NV21ToRGB24Row_SSSE3(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %6 = alloca [8192 x i8], align 32
  %7 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 8192, i1 false)
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %5, %9
  %10 = phi i8* [ %17, %9 ], [ %0, %5 ]
  %11 = phi i32 [ %22, %9 ], [ %4, %5 ]
  %12 = phi i8* [ %18, %9 ], [ %1, %5 ]
  %13 = phi i8* [ %21, %9 ], [ %2, %5 ]
  %14 = icmp slt i32 %11, 2048
  %15 = select i1 %14, i32 %11, i32 2048
  call void @NV21ToARGBRow_SSSE3(i8* %10, i8* %12, i8* nonnull %7, %"struct.libyuv::YuvConstants"* %3, i32 %15) #5
  call void @ARGBToRGB24Row_SSSE3(i8* nonnull %7, i8* %13, i32 %15) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = mul nsw i32 %15, 3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %13, i64 %20
  %22 = sub nsw i32 %11, %15
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #5
  ret void
}

declare void @NV21ToARGBRow_SSSE3(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @NV12ToRGB24Row_AVX2(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %6 = alloca [8192 x i8], align 32
  %7 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 8192, i1 false)
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %5, %9
  %10 = phi i8* [ %17, %9 ], [ %0, %5 ]
  %11 = phi i32 [ %22, %9 ], [ %4, %5 ]
  %12 = phi i8* [ %18, %9 ], [ %1, %5 ]
  %13 = phi i8* [ %21, %9 ], [ %2, %5 ]
  %14 = icmp slt i32 %11, 2048
  %15 = select i1 %14, i32 %11, i32 2048
  call void @NV12ToARGBRow_AVX2(i8* %10, i8* %12, i8* nonnull %7, %"struct.libyuv::YuvConstants"* %3, i32 %15) #5
  call void @ARGBToRGB24Row_AVX2(i8* nonnull %7, i8* %13, i32 %15) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = mul nsw i32 %15, 3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %13, i64 %20
  %22 = sub nsw i32 %11, %15
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #5
  ret void
}

declare void @NV12ToARGBRow_AVX2(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #4

declare void @ARGBToRGB24Row_AVX2(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @NV21ToRGB24Row_AVX2(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %6 = alloca [8192 x i8], align 32
  %7 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 8192, i1 false)
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %5, %9
  %10 = phi i8* [ %17, %9 ], [ %0, %5 ]
  %11 = phi i32 [ %22, %9 ], [ %4, %5 ]
  %12 = phi i8* [ %18, %9 ], [ %1, %5 ]
  %13 = phi i8* [ %21, %9 ], [ %2, %5 ]
  %14 = icmp slt i32 %11, 2048
  %15 = select i1 %14, i32 %11, i32 2048
  call void @NV21ToARGBRow_AVX2(i8* %10, i8* %12, i8* nonnull %7, %"struct.libyuv::YuvConstants"* %3, i32 %15) #5
  call void @ARGBToRGB24Row_AVX2(i8* nonnull %7, i8* %13, i32 %15) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = mul nsw i32 %15, 3
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %13, i64 %20
  %22 = sub nsw i32 %11, %15
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #5
  ret void
}

declare void @NV21ToARGBRow_AVX2(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToRGB565Row_AVX2(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_AVX2(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToRGB565Row_SSE2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = shl nsw i32 %17, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

declare void @I422ToARGBRow_AVX2(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToARGB1555Row_AVX2(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_AVX2(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToARGB1555Row_SSE2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = shl nsw i32 %17, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToARGB4444Row_AVX2(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_AVX2(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToARGB4444Row_SSE2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = shl nsw i32 %17, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @I422ToRGB24Row_AVX2(i8*, i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %7 = alloca [8192 x i8], align 32
  %8 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 -86, i64 8192, i1 false)
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %29

10:                                               ; preds = %6, %10
  %11 = phi i8* [ %19, %10 ], [ %0, %6 ]
  %12 = phi i32 [ %27, %10 ], [ %5, %6 ]
  %13 = phi i8* [ %22, %10 ], [ %1, %6 ]
  %14 = phi i8* [ %26, %10 ], [ %3, %6 ]
  %15 = phi i8* [ %23, %10 ], [ %2, %6 ]
  %16 = icmp slt i32 %12, 2048
  %17 = select i1 %16, i32 %12, i32 2048
  call void @I422ToARGBRow_AVX2(i8* %11, i8* %13, i8* %15, i8* nonnull %8, %"struct.libyuv::YuvConstants"* %4, i32 %17) #5
  call void @ARGBToRGB24Row_AVX2(i8* nonnull %8, i8* %14, i32 %17) #5
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %11, i64 %18
  %20 = sdiv i32 %17, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %13, i64 %21
  %23 = getelementptr inbounds i8, i8* %15, i64 %21
  %24 = mul nsw i32 %17, 3
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %14, i64 %25
  %27 = sub nsw i32 %12, %17
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %10, label %29

29:                                               ; preds = %10, %6
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @NV12ToRGB565Row_AVX2(i8*, i8*, i8*, %"struct.libyuv::YuvConstants"*, i32) local_unnamed_addr #2 {
  %6 = alloca [8192 x i8], align 32
  %7 = getelementptr inbounds [8192 x i8], [8192 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 8192, i1 false)
  %8 = icmp sgt i32 %4, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %5, %9
  %10 = phi i8* [ %17, %9 ], [ %0, %5 ]
  %11 = phi i32 [ %22, %9 ], [ %4, %5 ]
  %12 = phi i8* [ %18, %9 ], [ %1, %5 ]
  %13 = phi i8* [ %21, %9 ], [ %2, %5 ]
  %14 = icmp slt i32 %11, 2048
  %15 = select i1 %14, i32 %11, i32 2048
  call void @NV12ToARGBRow_AVX2(i8* %10, i8* %12, i8* nonnull %7, %"struct.libyuv::YuvConstants"* %3, i32 %15) #5
  call void @ARGBToRGB565Row_SSE2(i8* nonnull %7, i8* %13, i32 %15) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = getelementptr inbounds i8, i8* %12, i64 %16
  %19 = shl nsw i32 %15, 1
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %13, i64 %20
  %22 = sub nsw i32 %11, %15
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %9, label %24

24:                                               ; preds = %9, %5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @RGB24ToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2 {
  %4 = alloca [8192 x i8], align 32
  %5 = getelementptr inbounds [8192 x i8], [8192 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5, i8 -86, i64 8192, i1 false)
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %20

7:                                                ; preds = %3, %7
  %8 = phi i8* [ %15, %7 ], [ %0, %3 ]
  %9 = phi i32 [ %18, %7 ], [ %2, %3 ]
  %10 = phi i8* [ %17, %7 ], [ %1, %3 ]
  %11 = icmp slt i32 %9, 2048
  %12 = select i1 %11, i32 %9, i32 2048
  call void @RGB24ToARGBRow_SSSE3(i8* %8, i8* nonnull %5, i32 %12) #5
  call void @ARGBToYJRow_AVX2(i8* nonnull %5, i8* %10, i32 %12) #5
  %13 = mul nsw i32 %12, 3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %8, i64 %14
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = sub nsw i32 %9, %12
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %7, label %20

20:                                               ; preds = %7, %3
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %5) #5
  ret void
}

declare void @RGB24ToARGBRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #4

declare void @ARGBToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @RAWToYJRow_AVX2(i8*, i8*, i32) local_unnamed_addr #2 {
  %4 = alloca [8192 x i8], align 32
  %5 = getelementptr inbounds [8192 x i8], [8192 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5, i8 -86, i64 8192, i1 false)
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %20

7:                                                ; preds = %3, %7
  %8 = phi i8* [ %15, %7 ], [ %0, %3 ]
  %9 = phi i32 [ %18, %7 ], [ %2, %3 ]
  %10 = phi i8* [ %17, %7 ], [ %1, %3 ]
  %11 = icmp slt i32 %9, 2048
  %12 = select i1 %11, i32 %9, i32 2048
  call void @RAWToARGBRow_SSSE3(i8* %8, i8* nonnull %5, i32 %12) #5
  call void @ARGBToYJRow_AVX2(i8* nonnull %5, i8* %10, i32 %12) #5
  %13 = mul nsw i32 %12, 3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %8, i64 %14
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = sub nsw i32 %9, %12
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %7, label %20

20:                                               ; preds = %7, %3
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %5) #5
  ret void
}

declare void @RAWToARGBRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @RGB24ToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2 {
  %4 = alloca [8192 x i8], align 32
  %5 = getelementptr inbounds [8192 x i8], [8192 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5, i8 -86, i64 8192, i1 false)
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %20

7:                                                ; preds = %3, %7
  %8 = phi i8* [ %15, %7 ], [ %0, %3 ]
  %9 = phi i32 [ %18, %7 ], [ %2, %3 ]
  %10 = phi i8* [ %17, %7 ], [ %1, %3 ]
  %11 = icmp slt i32 %9, 2048
  %12 = select i1 %11, i32 %9, i32 2048
  call void @RGB24ToARGBRow_SSSE3(i8* %8, i8* nonnull %5, i32 %12) #5
  call void @ARGBToYJRow_SSSE3(i8* nonnull %5, i8* %10, i32 %12) #5
  %13 = mul nsw i32 %12, 3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %8, i64 %14
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = sub nsw i32 %9, %12
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %7, label %20

20:                                               ; preds = %7, %3
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %5) #5
  ret void
}

declare void @ARGBToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @RAWToYJRow_SSSE3(i8*, i8*, i32) local_unnamed_addr #2 {
  %4 = alloca [8192 x i8], align 32
  %5 = getelementptr inbounds [8192 x i8], [8192 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %5, i8 -86, i64 8192, i1 false)
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %20

7:                                                ; preds = %3, %7
  %8 = phi i8* [ %15, %7 ], [ %0, %3 ]
  %9 = phi i32 [ %18, %7 ], [ %2, %3 ]
  %10 = phi i8* [ %17, %7 ], [ %1, %3 ]
  %11 = icmp slt i32 %9, 2048
  %12 = select i1 %11, i32 %9, i32 2048
  call void @RAWToARGBRow_SSSE3(i8* %8, i8* nonnull %5, i32 %12) #5
  call void @ARGBToYJRow_SSSE3(i8* nonnull %5, i8* %10, i32 %12) #5
  %13 = mul nsw i32 %12, 3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %8, i64 %14
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds i8, i8* %10, i64 %16
  %18 = sub nsw i32 %9, %12
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %7, label %20

20:                                               ; preds = %7, %3
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %5) #5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden float @ScaleSumSamples_C(float* nocapture readonly, float* nocapture, float, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %62

6:                                                ; preds = %4
  %7 = add i32 %3, -1
  %8 = and i32 %3, 3
  %9 = icmp ult i32 %7, 3
  br i1 %9, label %43, label %10

10:                                               ; preds = %6
  %11 = sub i32 %3, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi float* [ %0, %10 ], [ %35, %12 ]
  %14 = phi float [ 0.000000e+00, %10 ], [ %38, %12 ]
  %15 = phi float* [ %1, %10 ], [ %40, %12 ]
  %16 = phi i32 [ %11, %10 ], [ %41, %12 ]
  %17 = getelementptr inbounds float, float* %13, i64 1
  %18 = load float, float* %13, align 4
  %19 = fmul contract float %18, %18
  %20 = fadd contract float %14, %19
  %21 = fmul contract float %18, %2
  %22 = getelementptr inbounds float, float* %15, i64 1
  store float %21, float* %15, align 4
  %23 = getelementptr inbounds float, float* %13, i64 2
  %24 = load float, float* %17, align 4
  %25 = fmul contract float %24, %24
  %26 = fadd contract float %20, %25
  %27 = fmul contract float %24, %2
  %28 = getelementptr inbounds float, float* %15, i64 2
  store float %27, float* %22, align 4
  %29 = getelementptr inbounds float, float* %13, i64 3
  %30 = load float, float* %23, align 4
  %31 = fmul contract float %30, %30
  %32 = fadd contract float %26, %31
  %33 = fmul contract float %30, %2
  %34 = getelementptr inbounds float, float* %15, i64 3
  store float %33, float* %28, align 4
  %35 = getelementptr inbounds float, float* %13, i64 4
  %36 = load float, float* %29, align 4
  %37 = fmul contract float %36, %36
  %38 = fadd contract float %32, %37
  %39 = fmul contract float %36, %2
  %40 = getelementptr inbounds float, float* %15, i64 4
  store float %39, float* %34, align 4
  %41 = add i32 %16, -4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %12

43:                                               ; preds = %12, %6
  %44 = phi float [ undef, %6 ], [ %38, %12 ]
  %45 = phi float* [ %0, %6 ], [ %35, %12 ]
  %46 = phi float [ 0.000000e+00, %6 ], [ %38, %12 ]
  %47 = phi float* [ %1, %6 ], [ %40, %12 ]
  %48 = icmp eq i32 %8, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %43, %49
  %50 = phi float* [ %54, %49 ], [ %45, %43 ]
  %51 = phi float [ %57, %49 ], [ %46, %43 ]
  %52 = phi float* [ %59, %49 ], [ %47, %43 ]
  %53 = phi i32 [ %60, %49 ], [ %8, %43 ]
  %54 = getelementptr inbounds float, float* %50, i64 1
  %55 = load float, float* %50, align 4
  %56 = fmul contract float %55, %55
  %57 = fadd contract float %51, %56
  %58 = fmul contract float %55, %2
  %59 = getelementptr inbounds float, float* %52, i64 1
  store float %58, float* %52, align 4
  %60 = add i32 %53, -1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %49, !llvm.loop !726

62:                                               ; preds = %43, %49, %4
  %63 = phi float [ 0.000000e+00, %4 ], [ %44, %43 ], [ %57, %49 ]
  ret float %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden float @ScaleMaxSamples_C(float* nocapture readonly, float* nocapture, float, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %62

6:                                                ; preds = %4
  %7 = add i32 %3, -1
  %8 = and i32 %3, 3
  %9 = icmp ult i32 %7, 3
  br i1 %9, label %43, label %10

10:                                               ; preds = %6
  %11 = sub i32 %3, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi float* [ %0, %10 ], [ %35, %12 ]
  %14 = phi float* [ %1, %10 ], [ %40, %12 ]
  %15 = phi float [ 0.000000e+00, %10 ], [ %39, %12 ]
  %16 = phi i32 [ %11, %10 ], [ %41, %12 ]
  %17 = getelementptr inbounds float, float* %13, i64 1
  %18 = load float, float* %13, align 4
  %19 = fmul contract float %18, %2
  %20 = fcmp ogt float %18, %15
  %21 = select i1 %20, float %18, float %15
  %22 = getelementptr inbounds float, float* %14, i64 1
  store float %19, float* %14, align 4
  %23 = getelementptr inbounds float, float* %13, i64 2
  %24 = load float, float* %17, align 4
  %25 = fmul contract float %24, %2
  %26 = fcmp ogt float %24, %21
  %27 = select i1 %26, float %24, float %21
  %28 = getelementptr inbounds float, float* %14, i64 2
  store float %25, float* %22, align 4
  %29 = getelementptr inbounds float, float* %13, i64 3
  %30 = load float, float* %23, align 4
  %31 = fmul contract float %30, %2
  %32 = fcmp ogt float %30, %27
  %33 = select i1 %32, float %30, float %27
  %34 = getelementptr inbounds float, float* %14, i64 3
  store float %31, float* %28, align 4
  %35 = getelementptr inbounds float, float* %13, i64 4
  %36 = load float, float* %29, align 4
  %37 = fmul contract float %36, %2
  %38 = fcmp ogt float %36, %33
  %39 = select i1 %38, float %36, float %33
  %40 = getelementptr inbounds float, float* %14, i64 4
  store float %37, float* %34, align 4
  %41 = add i32 %16, -4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %12

43:                                               ; preds = %12, %6
  %44 = phi float [ undef, %6 ], [ %39, %12 ]
  %45 = phi float* [ %0, %6 ], [ %35, %12 ]
  %46 = phi float* [ %1, %6 ], [ %40, %12 ]
  %47 = phi float [ 0.000000e+00, %6 ], [ %39, %12 ]
  %48 = icmp eq i32 %8, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %43, %49
  %50 = phi float* [ %54, %49 ], [ %45, %43 ]
  %51 = phi float* [ %59, %49 ], [ %46, %43 ]
  %52 = phi float [ %58, %49 ], [ %47, %43 ]
  %53 = phi i32 [ %60, %49 ], [ %8, %43 ]
  %54 = getelementptr inbounds float, float* %50, i64 1
  %55 = load float, float* %50, align 4
  %56 = fmul contract float %55, %2
  %57 = fcmp ogt float %55, %52
  %58 = select i1 %57, float %55, float %52
  %59 = getelementptr inbounds float, float* %51, i64 1
  store float %56, float* %51, align 4
  %60 = add i32 %53, -1
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %49, !llvm.loop !727

62:                                               ; preds = %43, %49, %4
  %63 = phi float [ 0.000000e+00, %4 ], [ %44, %43 ], [ %58, %49 ]
  ret float %63
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @ScaleSamples_C(float* nocapture readonly, float* nocapture, float, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %133

6:                                                ; preds = %4
  %7 = add i32 %3, -1
  %8 = zext i32 %7 to i64
  %9 = add nuw nsw i64 %8, 1
  %10 = icmp ult i64 %9, 8
  br i1 %10, label %85, label %11

11:                                               ; preds = %6
  %12 = add i32 %3, -1
  %13 = zext i32 %12 to i64
  %14 = add nuw nsw i64 %13, 1
  %15 = getelementptr float, float* %1, i64 %14
  %16 = getelementptr float, float* %0, i64 %14
  %17 = icmp ugt float* %16, %1
  %18 = icmp ugt float* %15, %0
  %19 = and i1 %17, %18
  br i1 %19, label %85, label %20

20:                                               ; preds = %11
  %21 = and i64 %9, 8589934584
  %22 = trunc i64 %21 to i32
  %23 = getelementptr float, float* %0, i64 %21
  %24 = getelementptr float, float* %1, i64 %21
  %25 = insertelement <4 x float> undef, float %2, i32 0
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> zeroinitializer
  %27 = insertelement <4 x float> undef, float %2, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = add nsw i64 %21, -8
  %30 = lshr exact i64 %29, 3
  %31 = add nuw nsw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %29, 0
  br i1 %33, label %67, label %34

34:                                               ; preds = %20
  %35 = sub nuw nsw i64 %31, %32
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %64, %36 ]
  %38 = phi i64 [ %35, %34 ], [ %65, %36 ]
  %39 = getelementptr float, float* %0, i64 %37
  %40 = getelementptr float, float* %1, i64 %37
  %41 = bitcast float* %39 to <4 x float>*
  %42 = load <4 x float>, <4 x float>* %41, align 4, !alias.scope !728
  %43 = getelementptr float, float* %39, i64 4
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 4, !alias.scope !728
  %46 = fmul contract <4 x float> %42, %26
  %47 = fmul contract <4 x float> %45, %28
  %48 = bitcast float* %40 to <4 x float>*
  store <4 x float> %46, <4 x float>* %48, align 4, !alias.scope !731, !noalias !728
  %49 = getelementptr float, float* %40, i64 4
  %50 = bitcast float* %49 to <4 x float>*
  store <4 x float> %47, <4 x float>* %50, align 4, !alias.scope !731, !noalias !728
  %51 = or i64 %37, 8
  %52 = getelementptr float, float* %0, i64 %51
  %53 = getelementptr float, float* %1, i64 %51
  %54 = bitcast float* %52 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 4, !alias.scope !728
  %56 = getelementptr float, float* %52, i64 4
  %57 = bitcast float* %56 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 4, !alias.scope !728
  %59 = fmul contract <4 x float> %55, %26
  %60 = fmul contract <4 x float> %58, %28
  %61 = bitcast float* %53 to <4 x float>*
  store <4 x float> %59, <4 x float>* %61, align 4, !alias.scope !731, !noalias !728
  %62 = getelementptr float, float* %53, i64 4
  %63 = bitcast float* %62 to <4 x float>*
  store <4 x float> %60, <4 x float>* %63, align 4, !alias.scope !731, !noalias !728
  %64 = add i64 %37, 16
  %65 = add i64 %38, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %36, !llvm.loop !733

67:                                               ; preds = %36, %20
  %68 = phi i64 [ 0, %20 ], [ %64, %36 ]
  %69 = icmp eq i64 %32, 0
  br i1 %69, label %83, label %70

70:                                               ; preds = %67
  %71 = getelementptr float, float* %0, i64 %68
  %72 = getelementptr float, float* %1, i64 %68
  %73 = bitcast float* %71 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 4, !alias.scope !728
  %75 = getelementptr float, float* %71, i64 4
  %76 = bitcast float* %75 to <4 x float>*
  %77 = load <4 x float>, <4 x float>* %76, align 4, !alias.scope !728
  %78 = fmul contract <4 x float> %74, %26
  %79 = fmul contract <4 x float> %77, %28
  %80 = bitcast float* %72 to <4 x float>*
  store <4 x float> %78, <4 x float>* %80, align 4, !alias.scope !731, !noalias !728
  %81 = getelementptr float, float* %72, i64 4
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> %79, <4 x float>* %82, align 4, !alias.scope !731, !noalias !728
  br label %83

83:                                               ; preds = %67, %70
  %84 = icmp eq i64 %9, %21
  br i1 %84, label %133, label %85

85:                                               ; preds = %83, %11, %6
  %86 = phi i32 [ 0, %11 ], [ 0, %6 ], [ %22, %83 ]
  %87 = phi float* [ %0, %11 ], [ %0, %6 ], [ %23, %83 ]
  %88 = phi float* [ %1, %11 ], [ %1, %6 ], [ %24, %83 ]
  %89 = sub i32 %3, %86
  %90 = xor i32 %86, -1
  %91 = add i32 %90, %3
  %92 = and i32 %89, 3
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %106, label %94

94:                                               ; preds = %85, %94
  %95 = phi i32 [ %103, %94 ], [ %86, %85 ]
  %96 = phi float* [ %99, %94 ], [ %87, %85 ]
  %97 = phi float* [ %102, %94 ], [ %88, %85 ]
  %98 = phi i32 [ %104, %94 ], [ %92, %85 ]
  %99 = getelementptr inbounds float, float* %96, i64 1
  %100 = load float, float* %96, align 4
  %101 = fmul contract float %100, %2
  %102 = getelementptr inbounds float, float* %97, i64 1
  store float %101, float* %97, align 4
  %103 = add nuw nsw i32 %95, 1
  %104 = add i32 %98, -1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %94, !llvm.loop !734

106:                                              ; preds = %94, %85
  %107 = phi i32 [ %86, %85 ], [ %103, %94 ]
  %108 = phi float* [ %87, %85 ], [ %99, %94 ]
  %109 = phi float* [ %88, %85 ], [ %102, %94 ]
  %110 = icmp ult i32 %91, 3
  br i1 %110, label %133, label %111

111:                                              ; preds = %106, %111
  %112 = phi i32 [ %131, %111 ], [ %107, %106 ]
  %113 = phi float* [ %127, %111 ], [ %108, %106 ]
  %114 = phi float* [ %130, %111 ], [ %109, %106 ]
  %115 = getelementptr inbounds float, float* %113, i64 1
  %116 = load float, float* %113, align 4
  %117 = fmul contract float %116, %2
  %118 = getelementptr inbounds float, float* %114, i64 1
  store float %117, float* %114, align 4
  %119 = getelementptr inbounds float, float* %113, i64 2
  %120 = load float, float* %115, align 4
  %121 = fmul contract float %120, %2
  %122 = getelementptr inbounds float, float* %114, i64 2
  store float %121, float* %118, align 4
  %123 = getelementptr inbounds float, float* %113, i64 3
  %124 = load float, float* %119, align 4
  %125 = fmul contract float %124, %2
  %126 = getelementptr inbounds float, float* %114, i64 3
  store float %125, float* %122, align 4
  %127 = getelementptr inbounds float, float* %113, i64 4
  %128 = load float, float* %123, align 4
  %129 = fmul contract float %128, %2
  %130 = getelementptr inbounds float, float* %114, i64 4
  store float %129, float* %126, align 4
  %131 = add nuw nsw i32 %112, 4
  %132 = icmp eq i32 %131, %3
  br i1 %132, label %133, label %111, !llvm.loop !735

133:                                              ; preds = %106, %111, %83, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @GaussRow_C(i32* nocapture readonly, i16* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %88

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %59, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = getelementptr i16, i16* %1, i64 %13
  %15 = add nuw nsw i64 %12, 5
  %16 = getelementptr i32, i32* %0, i64 %15
  %17 = bitcast i32* %16 to i16*
  %18 = icmp ugt i16* %17, %1
  %19 = bitcast i16* %14 to i32*
  %20 = icmp ugt i32* %19, %0
  %21 = and i1 %18, %20
  br i1 %21, label %59, label %22

22:                                               ; preds = %10
  %23 = and i64 %8, 8589934588
  %24 = trunc i64 %23 to i32
  %25 = getelementptr i32, i32* %0, i64 %23
  %26 = getelementptr i16, i16* %1, i64 %23
  br label %27

27:                                               ; preds = %27, %22
  %28 = phi i64 [ 0, %22 ], [ %55, %27 ]
  %29 = getelementptr i32, i32* %0, i64 %28
  %30 = getelementptr i16, i16* %1, i64 %28
  %31 = bitcast i32* %29 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !alias.scope !736
  %33 = getelementptr inbounds i32, i32* %29, i64 1
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4, !alias.scope !736
  %36 = getelementptr inbounds i32, i32* %29, i64 2
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4, !alias.scope !736
  %39 = mul <4 x i32> %38, <i32 6, i32 6, i32 6, i32 6>
  %40 = getelementptr inbounds i32, i32* %29, i64 3
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4, !alias.scope !736
  %43 = getelementptr inbounds i32, i32* %29, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !alias.scope !736
  %46 = add <4 x i32> %42, %35
  %47 = shl <4 x i32> %46, <i32 2, i32 2, i32 2, i32 2>
  %48 = add <4 x i32> %32, <i32 128, i32 128, i32 128, i32 128>
  %49 = add <4 x i32> %48, %39
  %50 = add <4 x i32> %49, %45
  %51 = add <4 x i32> %50, %47
  %52 = lshr <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %53 = trunc <4 x i32> %52 to <4 x i16>
  %54 = bitcast i16* %30 to <4 x i16>*
  store <4 x i16> %53, <4 x i16>* %54, align 2, !alias.scope !739, !noalias !736
  %55 = add i64 %28, 4
  %56 = icmp eq i64 %55, %23
  br i1 %56, label %57, label %27, !llvm.loop !741

57:                                               ; preds = %27
  %58 = icmp eq i64 %8, %23
  br i1 %58, label %88, label %59

59:                                               ; preds = %57, %10, %5
  %60 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %24, %57 ]
  %61 = phi i32* [ %0, %10 ], [ %0, %5 ], [ %25, %57 ]
  %62 = phi i16* [ %1, %10 ], [ %1, %5 ], [ %26, %57 ]
  br label %63

63:                                               ; preds = %59, %63
  %64 = phi i32 [ %86, %63 ], [ %60, %59 ]
  %65 = phi i32* [ %68, %63 ], [ %61, %59 ]
  %66 = phi i16* [ %85, %63 ], [ %62, %59 ]
  %67 = load i32, i32* %65, align 4
  %68 = getelementptr inbounds i32, i32* %65, i64 1
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds i32, i32* %65, i64 2
  %71 = load i32, i32* %70, align 4
  %72 = mul i32 %71, 6
  %73 = getelementptr inbounds i32, i32* %65, i64 3
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds i32, i32* %65, i64 4
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %74, %69
  %78 = shl i32 %77, 2
  %79 = add i32 %67, 128
  %80 = add i32 %79, %72
  %81 = add i32 %80, %76
  %82 = add i32 %81, %78
  %83 = lshr i32 %82, 8
  %84 = trunc i32 %83 to i16
  %85 = getelementptr inbounds i16, i16* %66, i64 1
  store i16 %84, i16* %66, align 2
  %86 = add nuw nsw i32 %64, 1
  %87 = icmp eq i32 %86, %2
  br i1 %87, label %88, label %63, !llvm.loop !742

88:                                               ; preds = %63, %57, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @GaussCol_C(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %196

9:                                                ; preds = %7
  %10 = add i32 %6, -1
  %11 = zext i32 %10 to i64
  %12 = add nuw nsw i64 %11, 1
  %13 = icmp ult i64 %12, 4
  br i1 %13, label %96, label %14

14:                                               ; preds = %9
  %15 = add i32 %6, -1
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %18 = getelementptr i32, i32* %5, i64 %17
  %19 = getelementptr i16, i16* %0, i64 %17
  %20 = getelementptr i16, i16* %1, i64 %17
  %21 = getelementptr i16, i16* %2, i64 %17
  %22 = getelementptr i16, i16* %3, i64 %17
  %23 = getelementptr i16, i16* %4, i64 %17
  %24 = bitcast i16* %19 to i32*
  %25 = icmp ugt i32* %24, %5
  %26 = bitcast i32* %18 to i16*
  %27 = icmp ugt i16* %26, %0
  %28 = and i1 %25, %27
  %29 = bitcast i16* %20 to i32*
  %30 = icmp ugt i32* %29, %5
  %31 = bitcast i32* %18 to i16*
  %32 = icmp ugt i16* %31, %1
  %33 = and i1 %30, %32
  %34 = or i1 %28, %33
  %35 = bitcast i16* %21 to i32*
  %36 = icmp ugt i32* %35, %5
  %37 = bitcast i32* %18 to i16*
  %38 = icmp ugt i16* %37, %2
  %39 = and i1 %36, %38
  %40 = or i1 %34, %39
  %41 = bitcast i16* %22 to i32*
  %42 = icmp ugt i32* %41, %5
  %43 = bitcast i32* %18 to i16*
  %44 = icmp ugt i16* %43, %3
  %45 = and i1 %42, %44
  %46 = or i1 %40, %45
  %47 = bitcast i16* %23 to i32*
  %48 = icmp ugt i32* %47, %5
  %49 = bitcast i32* %18 to i16*
  %50 = icmp ugt i16* %49, %4
  %51 = and i1 %48, %50
  %52 = or i1 %46, %51
  br i1 %52, label %96, label %53

53:                                               ; preds = %14
  %54 = and i64 %12, 8589934588
  %55 = trunc i64 %54 to i32
  %56 = getelementptr i16, i16* %0, i64 %54
  %57 = getelementptr i32, i32* %5, i64 %54
  %58 = getelementptr i16, i16* %4, i64 %54
  %59 = getelementptr i16, i16* %3, i64 %54
  %60 = getelementptr i16, i16* %2, i64 %54
  %61 = getelementptr i16, i16* %1, i64 %54
  br label %62

62:                                               ; preds = %62, %53
  %63 = phi i64 [ 0, %53 ], [ %92, %62 ]
  %64 = getelementptr i16, i16* %0, i64 %63
  %65 = getelementptr i32, i32* %5, i64 %63
  %66 = getelementptr i16, i16* %4, i64 %63
  %67 = getelementptr i16, i16* %3, i64 %63
  %68 = getelementptr i16, i16* %2, i64 %63
  %69 = getelementptr i16, i16* %1, i64 %63
  %70 = bitcast i16* %64 to <4 x i16>*
  %71 = load <4 x i16>, <4 x i16>* %70, align 2, !alias.scope !743
  %72 = zext <4 x i16> %71 to <4 x i32>
  %73 = bitcast i16* %69 to <4 x i16>*
  %74 = load <4 x i16>, <4 x i16>* %73, align 2, !alias.scope !746
  %75 = zext <4 x i16> %74 to <4 x i32>
  %76 = bitcast i16* %68 to <4 x i16>*
  %77 = load <4 x i16>, <4 x i16>* %76, align 2, !alias.scope !748
  %78 = zext <4 x i16> %77 to <4 x i32>
  %79 = mul nuw nsw <4 x i32> %78, <i32 6, i32 6, i32 6, i32 6>
  %80 = bitcast i16* %67 to <4 x i16>*
  %81 = load <4 x i16>, <4 x i16>* %80, align 2, !alias.scope !750
  %82 = zext <4 x i16> %81 to <4 x i32>
  %83 = bitcast i16* %66 to <4 x i16>*
  %84 = load <4 x i16>, <4 x i16>* %83, align 2, !alias.scope !752
  %85 = zext <4 x i16> %84 to <4 x i32>
  %86 = add nuw nsw <4 x i32> %82, %75
  %87 = shl nuw nsw <4 x i32> %86, <i32 2, i32 2, i32 2, i32 2>
  %88 = add nuw nsw <4 x i32> %79, %72
  %89 = add nuw nsw <4 x i32> %88, %85
  %90 = add nuw nsw <4 x i32> %89, %87
  %91 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %91, align 4, !alias.scope !754, !noalias !756
  %92 = add i64 %63, 4
  %93 = icmp eq i64 %92, %54
  br i1 %93, label %94, label %62, !llvm.loop !757

94:                                               ; preds = %62
  %95 = icmp eq i64 %12, %54
  br i1 %95, label %196, label %96

96:                                               ; preds = %94, %14, %9
  %97 = phi i32 [ 0, %14 ], [ 0, %9 ], [ %55, %94 ]
  %98 = phi i16* [ %0, %14 ], [ %0, %9 ], [ %56, %94 ]
  %99 = phi i32* [ %5, %14 ], [ %5, %9 ], [ %57, %94 ]
  %100 = phi i16* [ %4, %14 ], [ %4, %9 ], [ %58, %94 ]
  %101 = phi i16* [ %3, %14 ], [ %3, %9 ], [ %59, %94 ]
  %102 = phi i16* [ %2, %14 ], [ %2, %9 ], [ %60, %94 ]
  %103 = phi i16* [ %1, %14 ], [ %1, %9 ], [ %61, %94 ]
  %104 = sub i32 %6, %97
  %105 = xor i32 %97, -1
  %106 = and i32 %104, 1
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %132, label %108

108:                                              ; preds = %96
  %109 = getelementptr inbounds i16, i16* %98, i64 1
  %110 = load i16, i16* %98, align 2
  %111 = zext i16 %110 to i32
  %112 = getelementptr inbounds i16, i16* %103, i64 1
  %113 = load i16, i16* %103, align 2
  %114 = zext i16 %113 to i32
  %115 = getelementptr inbounds i16, i16* %102, i64 1
  %116 = load i16, i16* %102, align 2
  %117 = zext i16 %116 to i32
  %118 = mul nuw nsw i32 %117, 6
  %119 = getelementptr inbounds i16, i16* %101, i64 1
  %120 = load i16, i16* %101, align 2
  %121 = zext i16 %120 to i32
  %122 = getelementptr inbounds i16, i16* %100, i64 1
  %123 = load i16, i16* %100, align 2
  %124 = zext i16 %123 to i32
  %125 = add nuw nsw i32 %121, %114
  %126 = shl nuw nsw i32 %125, 2
  %127 = add nuw nsw i32 %118, %111
  %128 = add nuw nsw i32 %127, %124
  %129 = add nuw nsw i32 %128, %126
  %130 = getelementptr inbounds i32, i32* %99, i64 1
  store i32 %129, i32* %99, align 4
  %131 = add nuw nsw i32 %97, 1
  br label %132

132:                                              ; preds = %96, %108
  %133 = phi i32 [ %97, %96 ], [ %131, %108 ]
  %134 = phi i16* [ %98, %96 ], [ %109, %108 ]
  %135 = phi i32* [ %99, %96 ], [ %130, %108 ]
  %136 = phi i16* [ %100, %96 ], [ %122, %108 ]
  %137 = phi i16* [ %101, %96 ], [ %119, %108 ]
  %138 = phi i16* [ %102, %96 ], [ %115, %108 ]
  %139 = phi i16* [ %103, %96 ], [ %112, %108 ]
  %140 = sub i32 0, %6
  %141 = icmp eq i32 %105, %140
  br i1 %141, label %196, label %142

142:                                              ; preds = %132, %142
  %143 = phi i32 [ %194, %142 ], [ %133, %132 ]
  %144 = phi i16* [ %172, %142 ], [ %134, %132 ]
  %145 = phi i32* [ %193, %142 ], [ %135, %132 ]
  %146 = phi i16* [ %185, %142 ], [ %136, %132 ]
  %147 = phi i16* [ %182, %142 ], [ %137, %132 ]
  %148 = phi i16* [ %178, %142 ], [ %138, %132 ]
  %149 = phi i16* [ %175, %142 ], [ %139, %132 ]
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = load i16, i16* %144, align 2
  %152 = zext i16 %151 to i32
  %153 = getelementptr inbounds i16, i16* %149, i64 1
  %154 = load i16, i16* %149, align 2
  %155 = zext i16 %154 to i32
  %156 = getelementptr inbounds i16, i16* %148, i64 1
  %157 = load i16, i16* %148, align 2
  %158 = zext i16 %157 to i32
  %159 = mul nuw nsw i32 %158, 6
  %160 = getelementptr inbounds i16, i16* %147, i64 1
  %161 = load i16, i16* %147, align 2
  %162 = zext i16 %161 to i32
  %163 = getelementptr inbounds i16, i16* %146, i64 1
  %164 = load i16, i16* %146, align 2
  %165 = zext i16 %164 to i32
  %166 = add nuw nsw i32 %162, %155
  %167 = shl nuw nsw i32 %166, 2
  %168 = add nuw nsw i32 %159, %152
  %169 = add nuw nsw i32 %168, %165
  %170 = add nuw nsw i32 %169, %167
  %171 = getelementptr inbounds i32, i32* %145, i64 1
  store i32 %170, i32* %145, align 4
  %172 = getelementptr inbounds i16, i16* %144, i64 2
  %173 = load i16, i16* %150, align 2
  %174 = zext i16 %173 to i32
  %175 = getelementptr inbounds i16, i16* %149, i64 2
  %176 = load i16, i16* %153, align 2
  %177 = zext i16 %176 to i32
  %178 = getelementptr inbounds i16, i16* %148, i64 2
  %179 = load i16, i16* %156, align 2
  %180 = zext i16 %179 to i32
  %181 = mul nuw nsw i32 %180, 6
  %182 = getelementptr inbounds i16, i16* %147, i64 2
  %183 = load i16, i16* %160, align 2
  %184 = zext i16 %183 to i32
  %185 = getelementptr inbounds i16, i16* %146, i64 2
  %186 = load i16, i16* %163, align 2
  %187 = zext i16 %186 to i32
  %188 = add nuw nsw i32 %184, %177
  %189 = shl nuw nsw i32 %188, 2
  %190 = add nuw nsw i32 %181, %174
  %191 = add nuw nsw i32 %190, %187
  %192 = add nuw nsw i32 %191, %189
  %193 = getelementptr inbounds i32, i32* %145, i64 2
  store i32 %192, i32* %171, align 4
  %194 = add nuw nsw i32 %143, 2
  %195 = icmp eq i32 %194, %6
  br i1 %195, label %196, label %142, !llvm.loop !758

196:                                              ; preds = %132, %142, %94, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @GaussRow_F32_C(float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %84

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = zext i32 %6 to i64
  %8 = add nuw nsw i64 %7, 1
  %9 = icmp ult i64 %8, 4
  br i1 %9, label %56, label %10

10:                                               ; preds = %5
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = getelementptr float, float* %1, i64 %13
  %15 = add nuw nsw i64 %12, 5
  %16 = getelementptr float, float* %0, i64 %15
  %17 = icmp ugt float* %16, %1
  %18 = icmp ugt float* %14, %0
  %19 = and i1 %17, %18
  br i1 %19, label %56, label %20

20:                                               ; preds = %10
  %21 = and i64 %8, 8589934588
  %22 = trunc i64 %21 to i32
  %23 = getelementptr float, float* %0, i64 %21
  %24 = getelementptr float, float* %1, i64 %21
  br label %25

25:                                               ; preds = %25, %20
  %26 = phi i64 [ 0, %20 ], [ %52, %25 ]
  %27 = getelementptr float, float* %0, i64 %26
  %28 = getelementptr float, float* %1, i64 %26
  %29 = bitcast float* %27 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 4, !alias.scope !759
  %31 = getelementptr inbounds float, float* %27, i64 1
  %32 = bitcast float* %31 to <4 x float>*
  %33 = load <4 x float>, <4 x float>* %32, align 4, !alias.scope !759
  %34 = fmul contract <4 x float> %33, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %35 = fadd contract <4 x float> %30, %34
  %36 = getelementptr inbounds float, float* %27, i64 2
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4, !alias.scope !759
  %39 = fmul contract <4 x float> %38, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %40 = fadd contract <4 x float> %35, %39
  %41 = getelementptr inbounds float, float* %27, i64 3
  %42 = bitcast float* %41 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 4, !alias.scope !759
  %44 = fmul contract <4 x float> %43, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %45 = fadd contract <4 x float> %40, %44
  %46 = getelementptr inbounds float, float* %27, i64 4
  %47 = bitcast float* %46 to <4 x float>*
  %48 = load <4 x float>, <4 x float>* %47, align 4, !alias.scope !759
  %49 = fadd contract <4 x float> %48, %45
  %50 = fmul contract <4 x float> %49, <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>
  %51 = bitcast float* %28 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 4, !alias.scope !762, !noalias !759
  %52 = add i64 %26, 4
  %53 = icmp eq i64 %52, %21
  br i1 %53, label %54, label %25, !llvm.loop !764

54:                                               ; preds = %25
  %55 = icmp eq i64 %8, %21
  br i1 %55, label %84, label %56

56:                                               ; preds = %54, %10, %5
  %57 = phi i32 [ 0, %10 ], [ 0, %5 ], [ %22, %54 ]
  %58 = phi float* [ %0, %10 ], [ %0, %5 ], [ %23, %54 ]
  %59 = phi float* [ %1, %10 ], [ %1, %5 ], [ %24, %54 ]
  br label %60

60:                                               ; preds = %56, %60
  %61 = phi i32 [ %82, %60 ], [ %57, %56 ]
  %62 = phi float* [ %65, %60 ], [ %58, %56 ]
  %63 = phi float* [ %81, %60 ], [ %59, %56 ]
  %64 = load float, float* %62, align 4
  %65 = getelementptr inbounds float, float* %62, i64 1
  %66 = load float, float* %65, align 4
  %67 = fmul contract float %66, 4.000000e+00
  %68 = fadd contract float %64, %67
  %69 = getelementptr inbounds float, float* %62, i64 2
  %70 = load float, float* %69, align 4
  %71 = fmul contract float %70, 6.000000e+00
  %72 = fadd contract float %68, %71
  %73 = getelementptr inbounds float, float* %62, i64 3
  %74 = load float, float* %73, align 4
  %75 = fmul contract float %74, 4.000000e+00
  %76 = fadd contract float %72, %75
  %77 = getelementptr inbounds float, float* %62, i64 4
  %78 = load float, float* %77, align 4
  %79 = fadd contract float %78, %76
  %80 = fmul contract float %79, 3.906250e-03
  %81 = getelementptr inbounds float, float* %63, i64 1
  store float %80, float* %63, align 4
  %82 = add nuw nsw i32 %61, 1
  %83 = icmp eq i32 %82, %2
  br i1 %83, label %84, label %60, !llvm.loop !765

84:                                               ; preds = %60, %54, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @GaussCol_F32_C(float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %118

9:                                                ; preds = %7
  %10 = add i32 %6, -1
  %11 = zext i32 %10 to i64
  %12 = add nuw nsw i64 %11, 1
  %13 = icmp ult i64 %12, 4
  br i1 %13, label %82, label %14

14:                                               ; preds = %9
  %15 = add i32 %6, -1
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %18 = getelementptr float, float* %5, i64 %17
  %19 = getelementptr float, float* %0, i64 %17
  %20 = getelementptr float, float* %1, i64 %17
  %21 = getelementptr float, float* %2, i64 %17
  %22 = getelementptr float, float* %3, i64 %17
  %23 = getelementptr float, float* %4, i64 %17
  %24 = icmp ugt float* %19, %5
  %25 = icmp ugt float* %18, %0
  %26 = and i1 %24, %25
  %27 = icmp ugt float* %20, %5
  %28 = icmp ugt float* %18, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  %31 = icmp ugt float* %21, %5
  %32 = icmp ugt float* %18, %2
  %33 = and i1 %31, %32
  %34 = or i1 %30, %33
  %35 = icmp ugt float* %22, %5
  %36 = icmp ugt float* %18, %3
  %37 = and i1 %35, %36
  %38 = or i1 %34, %37
  %39 = icmp ugt float* %23, %5
  %40 = icmp ugt float* %18, %4
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %82, label %43

43:                                               ; preds = %14
  %44 = and i64 %12, 8589934588
  %45 = trunc i64 %44 to i32
  %46 = getelementptr float, float* %0, i64 %44
  %47 = getelementptr float, float* %5, i64 %44
  %48 = getelementptr float, float* %4, i64 %44
  %49 = getelementptr float, float* %3, i64 %44
  %50 = getelementptr float, float* %2, i64 %44
  %51 = getelementptr float, float* %1, i64 %44
  br label %52

52:                                               ; preds = %52, %43
  %53 = phi i64 [ 0, %43 ], [ %78, %52 ]
  %54 = getelementptr float, float* %0, i64 %53
  %55 = getelementptr float, float* %5, i64 %53
  %56 = getelementptr float, float* %4, i64 %53
  %57 = getelementptr float, float* %3, i64 %53
  %58 = getelementptr float, float* %2, i64 %53
  %59 = getelementptr float, float* %1, i64 %53
  %60 = bitcast float* %54 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4, !alias.scope !766
  %62 = bitcast float* %59 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 4, !alias.scope !769
  %64 = fmul contract <4 x float> %63, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %65 = fadd contract <4 x float> %61, %64
  %66 = bitcast float* %58 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 4, !alias.scope !771
  %68 = fmul contract <4 x float> %67, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %69 = fadd contract <4 x float> %65, %68
  %70 = bitcast float* %57 to <4 x float>*
  %71 = load <4 x float>, <4 x float>* %70, align 4, !alias.scope !773
  %72 = fmul contract <4 x float> %71, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %73 = fadd contract <4 x float> %69, %72
  %74 = bitcast float* %56 to <4 x float>*
  %75 = load <4 x float>, <4 x float>* %74, align 4, !alias.scope !775
  %76 = fadd contract <4 x float> %75, %73
  %77 = bitcast float* %55 to <4 x float>*
  store <4 x float> %76, <4 x float>* %77, align 4, !alias.scope !777, !noalias !779
  %78 = add i64 %53, 4
  %79 = icmp eq i64 %78, %44
  br i1 %79, label %80, label %52, !llvm.loop !780

80:                                               ; preds = %52
  %81 = icmp eq i64 %12, %44
  br i1 %81, label %118, label %82

82:                                               ; preds = %80, %14, %9
  %83 = phi i32 [ 0, %14 ], [ 0, %9 ], [ %45, %80 ]
  %84 = phi float* [ %0, %14 ], [ %0, %9 ], [ %46, %80 ]
  %85 = phi float* [ %5, %14 ], [ %5, %9 ], [ %47, %80 ]
  %86 = phi float* [ %4, %14 ], [ %4, %9 ], [ %48, %80 ]
  %87 = phi float* [ %3, %14 ], [ %3, %9 ], [ %49, %80 ]
  %88 = phi float* [ %2, %14 ], [ %2, %9 ], [ %50, %80 ]
  %89 = phi float* [ %1, %14 ], [ %1, %9 ], [ %51, %80 ]
  br label %90

90:                                               ; preds = %82, %90
  %91 = phi i32 [ %116, %90 ], [ %83, %82 ]
  %92 = phi float* [ %98, %90 ], [ %84, %82 ]
  %93 = phi float* [ %115, %90 ], [ %85, %82 ]
  %94 = phi float* [ %112, %90 ], [ %86, %82 ]
  %95 = phi float* [ %108, %90 ], [ %87, %82 ]
  %96 = phi float* [ %104, %90 ], [ %88, %82 ]
  %97 = phi float* [ %100, %90 ], [ %89, %82 ]
  %98 = getelementptr inbounds float, float* %92, i64 1
  %99 = load float, float* %92, align 4
  %100 = getelementptr inbounds float, float* %97, i64 1
  %101 = load float, float* %97, align 4
  %102 = fmul contract float %101, 4.000000e+00
  %103 = fadd contract float %99, %102
  %104 = getelementptr inbounds float, float* %96, i64 1
  %105 = load float, float* %96, align 4
  %106 = fmul contract float %105, 6.000000e+00
  %107 = fadd contract float %103, %106
  %108 = getelementptr inbounds float, float* %95, i64 1
  %109 = load float, float* %95, align 4
  %110 = fmul contract float %109, 4.000000e+00
  %111 = fadd contract float %107, %110
  %112 = getelementptr inbounds float, float* %94, i64 1
  %113 = load float, float* %94, align 4
  %114 = fadd contract float %113, %111
  %115 = getelementptr inbounds float, float* %93, i64 1
  store float %114, float* %93, align 4
  %116 = add nuw nsw i32 %91, 1
  %117 = icmp eq i32 %116, %6
  br i1 %117, label %118, label %90, !llvm.loop !781

118:                                              ; preds = %90, %80, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @NV21ToYUV24Row_C(i8* nocapture readonly, i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, 1
  br i1 %5, label %6, label %78

6:                                                ; preds = %4
  %7 = add i32 %3, -2
  %8 = lshr i32 %7, 1
  %9 = add nuw i32 %8, 1
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %53, label %12

12:                                               ; preds = %6
  %13 = sub nuw i32 %9, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i8* [ %0, %12 ], [ %48, %14 ]
  %16 = phi i8* [ %2, %12 ], [ %50, %14 ]
  %17 = phi i8* [ %1, %12 ], [ %49, %14 ]
  %18 = phi i32 [ %13, %12 ], [ %51, %14 ]
  %19 = load i8, i8* %17, align 1
  store i8 %19, i8* %16, align 1
  %20 = getelementptr inbounds i8, i8* %17, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %21, i8* %22, align 1
  %23 = load i8, i8* %15, align 1
  %24 = getelementptr inbounds i8, i8* %16, i64 2
  store i8 %23, i8* %24, align 1
  %25 = load i8, i8* %17, align 1
  %26 = getelementptr inbounds i8, i8* %16, i64 3
  store i8 %25, i8* %26, align 1
  %27 = load i8, i8* %20, align 1
  %28 = getelementptr inbounds i8, i8* %16, i64 4
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %15, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = getelementptr inbounds i8, i8* %16, i64 5
  store i8 %30, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %15, i64 2
  %33 = getelementptr inbounds i8, i8* %17, i64 2
  %34 = getelementptr inbounds i8, i8* %16, i64 6
  %35 = load i8, i8* %33, align 1
  store i8 %35, i8* %34, align 1
  %36 = getelementptr inbounds i8, i8* %17, i64 3
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %16, i64 7
  store i8 %37, i8* %38, align 1
  %39 = load i8, i8* %32, align 1
  %40 = getelementptr inbounds i8, i8* %16, i64 8
  store i8 %39, i8* %40, align 1
  %41 = load i8, i8* %33, align 1
  %42 = getelementptr inbounds i8, i8* %16, i64 9
  store i8 %41, i8* %42, align 1
  %43 = load i8, i8* %36, align 1
  %44 = getelementptr inbounds i8, i8* %16, i64 10
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %15, i64 3
  %46 = load i8, i8* %45, align 1
  %47 = getelementptr inbounds i8, i8* %16, i64 11
  store i8 %46, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %15, i64 4
  %49 = getelementptr inbounds i8, i8* %17, i64 4
  %50 = getelementptr inbounds i8, i8* %16, i64 12
  %51 = add i32 %18, -2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %14

53:                                               ; preds = %14, %6
  %54 = phi i8* [ undef, %6 ], [ %48, %14 ]
  %55 = phi i8* [ undef, %6 ], [ %49, %14 ]
  %56 = phi i8* [ undef, %6 ], [ %50, %14 ]
  %57 = phi i8* [ %0, %6 ], [ %48, %14 ]
  %58 = phi i8* [ %2, %6 ], [ %50, %14 ]
  %59 = phi i8* [ %1, %6 ], [ %49, %14 ]
  %60 = icmp eq i32 %10, 0
  br i1 %60, label %78, label %61

61:                                               ; preds = %53
  %62 = load i8, i8* %59, align 1
  store i8 %62, i8* %58, align 1
  %63 = getelementptr inbounds i8, i8* %59, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %58, i64 1
  store i8 %64, i8* %65, align 1
  %66 = load i8, i8* %57, align 1
  %67 = getelementptr inbounds i8, i8* %58, i64 2
  store i8 %66, i8* %67, align 1
  %68 = load i8, i8* %59, align 1
  %69 = getelementptr inbounds i8, i8* %58, i64 3
  store i8 %68, i8* %69, align 1
  %70 = load i8, i8* %63, align 1
  %71 = getelementptr inbounds i8, i8* %58, i64 4
  store i8 %70, i8* %71, align 1
  %72 = getelementptr inbounds i8, i8* %57, i64 1
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds i8, i8* %58, i64 5
  store i8 %73, i8* %74, align 1
  %75 = getelementptr inbounds i8, i8* %58, i64 6
  %76 = getelementptr inbounds i8, i8* %59, i64 2
  %77 = getelementptr inbounds i8, i8* %57, i64 2
  br label %78

78:                                               ; preds = %61, %53, %4
  %79 = phi i8* [ %1, %4 ], [ %55, %53 ], [ %76, %61 ]
  %80 = phi i8* [ %2, %4 ], [ %56, %53 ], [ %75, %61 ]
  %81 = phi i8* [ %0, %4 ], [ %54, %53 ], [ %77, %61 ]
  %82 = and i32 %3, 1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %91, label %84

84:                                               ; preds = %78
  %85 = load i8, i8* %79, align 1
  store i8 %85, i8* %80, align 1
  %86 = getelementptr inbounds i8, i8* %79, i64 1
  %87 = load i8, i8* %86, align 1
  %88 = getelementptr inbounds i8, i8* %80, i64 1
  store i8 %87, i8* %88, align 1
  %89 = load i8, i8* %81, align 1
  %90 = getelementptr inbounds i8, i8* %80, i64 2
  store i8 %89, i8* %90, align 1
  br label %91

91:                                               ; preds = %78, %84
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AYUVToUVRow_C(i8* nocapture readonly, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %59

7:                                                ; preds = %4
  %8 = add nsw i32 %1, 1
  %9 = sext i32 %8 to i64
  %10 = add nsw i32 %1, 5
  %11 = sext i32 %10 to i64
  %12 = sext i32 %1 to i64
  %13 = add nsw i32 %1, 4
  %14 = sext i32 %13 to i64
  br label %15

15:                                               ; preds = %7, %15
  %16 = phi i32 [ 0, %7 ], [ %57, %15 ]
  %17 = phi i8* [ %0, %7 ], [ %55, %15 ]
  %18 = phi i8* [ %2, %7 ], [ %56, %15 ]
  %19 = getelementptr inbounds i8, i8* %17, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %17, i64 5
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds i8, i8* %17, i64 %9
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %17, i64 %11
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %21, 2
  %32 = add nuw nsw i32 %31, %24
  %33 = add nuw nsw i32 %32, %27
  %34 = add nuw nsw i32 %33, %30
  %35 = lshr i32 %34, 2
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %18, align 1
  %37 = load i8, i8* %17, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds i8, i8* %17, i64 4
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i8, i8* %17, i64 %12
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %17, i64 %14
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nuw nsw i32 %38, 2
  %49 = add nuw nsw i32 %48, %41
  %50 = add nuw nsw i32 %49, %44
  %51 = add nuw nsw i32 %50, %47
  %52 = lshr i32 %51, 2
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %53, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %17, i64 8
  %56 = getelementptr inbounds i8, i8* %18, i64 2
  %57 = add nuw nsw i32 %16, 2
  %58 = icmp slt i32 %57, %5
  br i1 %58, label %15, label %59

59:                                               ; preds = %15, %4
  %60 = phi i8* [ %2, %4 ], [ %56, %15 ]
  %61 = phi i8* [ %0, %4 ], [ %55, %15 ]
  %62 = and i32 %3, 1
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %88, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds i8, i8* %61, i64 1
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add nsw i32 %1, 1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %61, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = add nuw nsw i32 %67, 1
  %74 = add nuw nsw i32 %73, %72
  %75 = lshr i32 %74, 1
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %60, align 1
  %77 = load i8, i8* %61, align 1
  %78 = zext i8 %77 to i32
  %79 = sext i32 %1 to i64
  %80 = getelementptr inbounds i8, i8* %61, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %78, 1
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 1
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %60, i64 1
  store i8 %86, i8* %87, align 1
  br label %88

88:                                               ; preds = %59, %64
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AYUVToVURow_C(i8* nocapture readonly, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, -1
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %59

7:                                                ; preds = %4
  %8 = sext i32 %1 to i64
  %9 = add nsw i32 %1, 4
  %10 = sext i32 %9 to i64
  %11 = add nsw i32 %1, 1
  %12 = sext i32 %11 to i64
  %13 = add nsw i32 %1, 5
  %14 = sext i32 %13 to i64
  br label %15

15:                                               ; preds = %7, %15
  %16 = phi i32 [ 0, %7 ], [ %57, %15 ]
  %17 = phi i8* [ %0, %7 ], [ %55, %15 ]
  %18 = phi i8* [ %2, %7 ], [ %56, %15 ]
  %19 = load i8, i8* %17, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %17, i64 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %17, i64 %8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %17, i64 %10
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = add nuw nsw i32 %20, 2
  %31 = add nuw nsw i32 %30, %23
  %32 = add nuw nsw i32 %31, %26
  %33 = add nuw nsw i32 %32, %29
  %34 = lshr i32 %33, 2
  %35 = trunc i32 %34 to i8
  store i8 %35, i8* %18, align 1
  %36 = getelementptr inbounds i8, i8* %17, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds i8, i8* %17, i64 5
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds i8, i8* %17, i64 %12
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %17, i64 %14
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nuw nsw i32 %38, 2
  %49 = add nuw nsw i32 %48, %41
  %50 = add nuw nsw i32 %49, %44
  %51 = add nuw nsw i32 %50, %47
  %52 = lshr i32 %51, 2
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %53, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %17, i64 8
  %56 = getelementptr inbounds i8, i8* %18, i64 2
  %57 = add nuw nsw i32 %16, 2
  %58 = icmp slt i32 %57, %5
  br i1 %58, label %15, label %59

59:                                               ; preds = %15, %4
  %60 = phi i8* [ %2, %4 ], [ %56, %15 ]
  %61 = phi i8* [ %0, %4 ], [ %55, %15 ]
  %62 = and i32 %3, 1
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %88, label %64

64:                                               ; preds = %59
  %65 = load i8, i8* %61, align 1
  %66 = zext i8 %65 to i32
  %67 = sext i32 %1 to i64
  %68 = getelementptr inbounds i8, i8* %61, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %66, 1
  %72 = add nuw nsw i32 %71, %70
  %73 = lshr i32 %72, 1
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %60, align 1
  %75 = getelementptr inbounds i8, i8* %61, i64 1
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = add nsw i32 %1, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %61, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = add nuw nsw i32 %77, 1
  %84 = add nuw nsw i32 %83, %82
  %85 = lshr i32 %84, 1
  %86 = trunc i32 %85 to i8
  %87 = getelementptr inbounds i8, i8* %60, i64 1
  store i8 %86, i8* %87, align 1
  br label %88

88:                                               ; preds = %59, %64
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @AYUVToYRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %80

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = icmp ult i32 %2, 17
  br i1 %7, label %36, label %8

8:                                                ; preds = %5
  %9 = getelementptr i8, i8* %1, i64 %6
  %10 = getelementptr i8, i8* %0, i64 2
  %11 = shl nuw nsw i64 %6, 2
  %12 = add nsw i64 %11, -1
  %13 = getelementptr i8, i8* %0, i64 %12
  %14 = icmp ugt i8* %13, %1
  %15 = icmp ult i8* %10, %9
  %16 = and i1 %14, %15
  br i1 %16, label %36, label %17

17:                                               ; preds = %8
  %18 = and i64 %6, 15
  %19 = icmp eq i64 %18, 0
  %20 = select i1 %19, i64 16, i64 %18
  %21 = sub nsw i64 %6, %20
  %22 = shl nsw i64 %21, 2
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %0, i64 2
  br label %25

25:                                               ; preds = %25, %17
  %26 = phi i64 [ 0, %17 ], [ %34, %25 ]
  %27 = shl i64 %26, 2
  %28 = getelementptr inbounds i8, i8* %24, i64 %27
  %29 = bitcast i8* %28 to <64 x i8>*
  %30 = load <64 x i8>, <64 x i8>* %29, align 1
  %31 = shufflevector <64 x i8> %30, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %32 = getelementptr inbounds i8, i8* %1, i64 %26
  %33 = bitcast i8* %32 to <16 x i8>*
  store <16 x i8> %31, <16 x i8>* %33, align 1, !alias.scope !782, !noalias !785
  %34 = add i64 %26, 16
  %35 = icmp eq i64 %34, %21
  br i1 %35, label %36, label %25, !llvm.loop !787

36:                                               ; preds = %25, %8, %5
  %37 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %21, %25 ]
  %38 = phi i8* [ %0, %8 ], [ %0, %5 ], [ %23, %25 ]
  %39 = sub nsw i64 %6, %37
  %40 = xor i64 %37, -1
  %41 = add nsw i64 %40, %6
  %42 = and i64 %39, 3
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %55, label %44

44:                                               ; preds = %36, %44
  %45 = phi i64 [ %52, %44 ], [ %37, %36 ]
  %46 = phi i8* [ %51, %44 ], [ %38, %36 ]
  %47 = phi i64 [ %53, %44 ], [ %42, %36 ]
  %48 = getelementptr inbounds i8, i8* %46, i64 2
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %1, i64 %45
  store i8 %49, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %46, i64 4
  %52 = add nuw nsw i64 %45, 1
  %53 = add i64 %47, -1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %44, !llvm.loop !788

55:                                               ; preds = %44, %36
  %56 = phi i64 [ %37, %36 ], [ %52, %44 ]
  %57 = phi i8* [ %38, %36 ], [ %51, %44 ]
  %58 = icmp ult i64 %41, 3
  br i1 %58, label %80, label %59

59:                                               ; preds = %55, %59
  %60 = phi i64 [ %78, %59 ], [ %56, %55 ]
  %61 = phi i8* [ %77, %59 ], [ %57, %55 ]
  %62 = getelementptr inbounds i8, i8* %61, i64 2
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %1, i64 %60
  store i8 %63, i8* %64, align 1
  %65 = add nuw nsw i64 %60, 1
  %66 = getelementptr inbounds i8, i8* %61, i64 6
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds i8, i8* %1, i64 %65
  store i8 %67, i8* %68, align 1
  %69 = add nuw nsw i64 %60, 2
  %70 = getelementptr inbounds i8, i8* %61, i64 10
  %71 = load i8, i8* %70, align 1
  %72 = getelementptr inbounds i8, i8* %1, i64 %69
  store i8 %71, i8* %72, align 1
  %73 = add nuw nsw i64 %60, 3
  %74 = getelementptr inbounds i8, i8* %61, i64 14
  %75 = load i8, i8* %74, align 1
  %76 = getelementptr inbounds i8, i8* %1, i64 %73
  store i8 %75, i8* %76, align 1
  %77 = getelementptr inbounds i8, i8* %61, i64 16
  %78 = add nuw nsw i64 %60, 4
  %79 = icmp eq i64 %78, %6
  br i1 %79, label %80, label %59, !llvm.loop !789

80:                                               ; preds = %55, %59, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @SwapUVRow_C(i8* nocapture readonly, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %57

5:                                                ; preds = %3
  %6 = add i32 %2, -1
  %7 = and i32 %2, 3
  %8 = icmp ult i32 %6, 3
  br i1 %8, label %41, label %9

9:                                                ; preds = %5
  %10 = sub i32 %2, %7
  br label %11

11:                                               ; preds = %11, %9
  %12 = phi i8* [ %0, %9 ], [ %37, %11 ]
  %13 = phi i8* [ %1, %9 ], [ %38, %11 ]
  %14 = phi i32 [ %10, %9 ], [ %39, %11 ]
  %15 = load i8, i8* %12, align 1
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  %17 = load i8, i8* %16, align 1
  store i8 %17, i8* %13, align 1
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %15, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %12, i64 2
  %20 = getelementptr inbounds i8, i8* %13, i64 2
  %21 = load i8, i8* %19, align 1
  %22 = getelementptr inbounds i8, i8* %12, i64 3
  %23 = load i8, i8* %22, align 1
  store i8 %23, i8* %20, align 1
  %24 = getelementptr inbounds i8, i8* %13, i64 3
  store i8 %21, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %12, i64 4
  %26 = getelementptr inbounds i8, i8* %13, i64 4
  %27 = load i8, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %12, i64 5
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %26, align 1
  %30 = getelementptr inbounds i8, i8* %13, i64 5
  store i8 %27, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %12, i64 6
  %32 = getelementptr inbounds i8, i8* %13, i64 6
  %33 = load i8, i8* %31, align 1
  %34 = getelementptr inbounds i8, i8* %12, i64 7
  %35 = load i8, i8* %34, align 1
  store i8 %35, i8* %32, align 1
  %36 = getelementptr inbounds i8, i8* %13, i64 7
  store i8 %33, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %12, i64 8
  %38 = getelementptr inbounds i8, i8* %13, i64 8
  %39 = add i32 %14, -4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %11

41:                                               ; preds = %11, %5
  %42 = phi i8* [ %0, %5 ], [ %37, %11 ]
  %43 = phi i8* [ %1, %5 ], [ %38, %11 ]
  %44 = icmp eq i32 %7, 0
  br i1 %44, label %57, label %45

45:                                               ; preds = %41, %45
  %46 = phi i8* [ %53, %45 ], [ %42, %41 ]
  %47 = phi i8* [ %54, %45 ], [ %43, %41 ]
  %48 = phi i32 [ %55, %45 ], [ %7, %41 ]
  %49 = load i8, i8* %46, align 1
  %50 = getelementptr inbounds i8, i8* %46, i64 1
  %51 = load i8, i8* %50, align 1
  store i8 %51, i8* %47, align 1
  %52 = getelementptr inbounds i8, i8* %47, i64 1
  store i8 %49, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %46, i64 2
  %54 = getelementptr inbounds i8, i8* %47, i64 2
  %55 = add i32 %48, -1
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %45, !llvm.loop !790

57:                                               ; preds = %41, %45, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @HalfMergeUVRow_C(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture, i32) local_unnamed_addr #0 {
  %7 = add nsw i32 %5, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %61

9:                                                ; preds = %6
  %10 = sext i32 %1 to i64
  %11 = add nsw i32 %1, 1
  %12 = sext i32 %11 to i64
  %13 = sext i32 %3 to i64
  %14 = add nsw i32 %3, 1
  %15 = sext i32 %14 to i64
  br label %16

16:                                               ; preds = %9, %16
  %17 = phi i32 [ 0, %9 ], [ %59, %16 ]
  %18 = phi i8* [ %0, %9 ], [ %56, %16 ]
  %19 = phi i8* [ %4, %9 ], [ %58, %16 ]
  %20 = phi i8* [ %2, %9 ], [ %57, %16 ]
  %21 = load i8, i8* %18, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %18, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %18, i64 %10
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, i8* %18, i64 %12
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nuw nsw i32 %22, 2
  %33 = add nuw nsw i32 %32, %25
  %34 = add nuw nsw i32 %33, %28
  %35 = add nuw nsw i32 %34, %31
  %36 = lshr i32 %35, 2
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %19, align 1
  %38 = load i8, i8* %20, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %20, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds i8, i8* %20, i64 %13
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds i8, i8* %20, i64 %15
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = add nuw nsw i32 %39, 2
  %50 = add nuw nsw i32 %49, %42
  %51 = add nuw nsw i32 %50, %45
  %52 = add nuw nsw i32 %51, %48
  %53 = lshr i32 %52, 2
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %19, i64 1
  store i8 %54, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %18, i64 2
  %57 = getelementptr inbounds i8, i8* %20, i64 2
  %58 = getelementptr inbounds i8, i8* %19, i64 2
  %59 = add nuw nsw i32 %17, 2
  %60 = icmp slt i32 %59, %7
  br i1 %60, label %16, label %61

61:                                               ; preds = %16, %6
  %62 = phi i8* [ %2, %6 ], [ %57, %16 ]
  %63 = phi i8* [ %4, %6 ], [ %58, %16 ]
  %64 = phi i8* [ %0, %6 ], [ %56, %16 ]
  %65 = and i32 %5, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %89, label %67

67:                                               ; preds = %61
  %68 = load i8, i8* %64, align 1
  %69 = zext i8 %68 to i32
  %70 = sext i32 %1 to i64
  %71 = getelementptr inbounds i8, i8* %64, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = add nuw nsw i32 %69, 1
  %75 = add nuw nsw i32 %74, %73
  %76 = lshr i32 %75, 1
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %63, align 1
  %78 = load i8, i8* %62, align 1
  %79 = zext i8 %78 to i32
  %80 = sext i32 %3 to i64
  %81 = getelementptr inbounds i8, i8* %62, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = add nuw nsw i32 %79, 1
  %85 = add nuw nsw i32 %84, %83
  %86 = lshr i32 %85, 1
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %63, i64 1
  store i8 %87, i8* %88, align 1
  br label %89

89:                                               ; preds = %61, %67
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !3}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !3}
!36 = distinct !{!36, !3}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41, !42}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !39}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !3}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !3}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !3}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !3}
!65 = distinct !{!65, !3}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !3}
!72 = distinct !{!72, !3}
!73 = !{!74}
!74 = distinct !{!74, !75}
!75 = distinct !{!75, !"LVerDomain"}
!76 = !{!77, !78, !79}
!77 = distinct !{!77, !75}
!78 = distinct !{!78, !75}
!79 = distinct !{!79, !75}
!80 = !{!77}
!81 = !{!78, !79}
!82 = distinct !{!82, !3}
!83 = distinct !{!83, !3}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88, !89, !90}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !86}
!90 = distinct !{!90, !86}
!91 = !{!88}
!92 = !{!89, !90}
!93 = distinct !{!93, !3}
!94 = distinct !{!94, !3}
!95 = !{!96}
!96 = distinct !{!96, !97}
!97 = distinct !{!97, !"LVerDomain"}
!98 = !{!99, !100, !101}
!99 = distinct !{!99, !97}
!100 = distinct !{!100, !97}
!101 = distinct !{!101, !97}
!102 = !{!99}
!103 = !{!100, !101}
!104 = distinct !{!104, !3}
!105 = distinct !{!105, !3}
!106 = !{!107}
!107 = distinct !{!107, !108}
!108 = distinct !{!108, !"LVerDomain"}
!109 = !{!110, !111, !112}
!110 = distinct !{!110, !108}
!111 = distinct !{!111, !108}
!112 = distinct !{!112, !108}
!113 = !{!110}
!114 = !{!111, !112}
!115 = distinct !{!115, !3}
!116 = distinct !{!116, !3}
!117 = !{!118}
!118 = distinct !{!118, !119}
!119 = distinct !{!119, !"LVerDomain"}
!120 = !{!121, !122, !123}
!121 = distinct !{!121, !119}
!122 = distinct !{!122, !119}
!123 = distinct !{!123, !119}
!124 = !{!121}
!125 = !{!122, !123}
!126 = distinct !{!126, !3}
!127 = distinct !{!127, !3}
!128 = !{!129}
!129 = distinct !{!129, !130}
!130 = distinct !{!130, !"LVerDomain"}
!131 = !{!132, !133, !134}
!132 = distinct !{!132, !130}
!133 = distinct !{!133, !130}
!134 = distinct !{!134, !130}
!135 = !{!132}
!136 = !{!133, !134}
!137 = distinct !{!137, !3}
!138 = distinct !{!138, !3}
!139 = !{!140}
!140 = distinct !{!140, !141}
!141 = distinct !{!141, !"LVerDomain"}
!142 = !{!143}
!143 = distinct !{!143, !141}
!144 = distinct !{!144, !3}
!145 = distinct !{!145, !3}
!146 = !{!147}
!147 = distinct !{!147, !148}
!148 = distinct !{!148, !"LVerDomain"}
!149 = !{!150}
!150 = distinct !{!150, !148}
!151 = distinct !{!151, !3}
!152 = distinct !{!152, !3}
!153 = !{!154}
!154 = distinct !{!154, !155}
!155 = distinct !{!155, !"LVerDomain"}
!156 = !{!157}
!157 = distinct !{!157, !155}
!158 = distinct !{!158, !3}
!159 = distinct !{!159, !3}
!160 = !{!161}
!161 = distinct !{!161, !162}
!162 = distinct !{!162, !"LVerDomain"}
!163 = !{!164, !165, !166}
!164 = distinct !{!164, !162}
!165 = distinct !{!165, !162}
!166 = distinct !{!166, !162}
!167 = !{!164}
!168 = !{!165, !166}
!169 = distinct !{!169, !3}
!170 = distinct !{!170, !3}
!171 = !{!172}
!172 = distinct !{!172, !173}
!173 = distinct !{!173, !"LVerDomain"}
!174 = !{!175, !176, !177}
!175 = distinct !{!175, !173}
!176 = distinct !{!176, !173}
!177 = distinct !{!177, !173}
!178 = !{!175}
!179 = !{!176, !177}
!180 = distinct !{!180, !3}
!181 = distinct !{!181, !3}
!182 = !{!183}
!183 = distinct !{!183, !184}
!184 = distinct !{!184, !"LVerDomain"}
!185 = !{!186, !187, !188}
!186 = distinct !{!186, !184}
!187 = distinct !{!187, !184}
!188 = distinct !{!188, !184}
!189 = !{!186}
!190 = !{!187, !188}
!191 = distinct !{!191, !3}
!192 = distinct !{!192, !3}
!193 = !{!194}
!194 = distinct !{!194, !195}
!195 = distinct !{!195, !"LVerDomain"}
!196 = !{!197, !198}
!197 = distinct !{!197, !195}
!198 = distinct !{!198, !195}
!199 = !{!197}
!200 = !{!198}
!201 = distinct !{!201, !3}
!202 = distinct !{!202, !3}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = distinct !{!206, !3}
!207 = distinct !{!207, !3}
!208 = !{!209}
!209 = distinct !{!209, !210}
!210 = distinct !{!210, !"LVerDomain"}
!211 = !{!212}
!212 = distinct !{!212, !210}
!213 = !{!214}
!214 = distinct !{!214, !210}
!215 = !{!216}
!216 = distinct !{!216, !210}
!217 = !{!209, !212, !214}
!218 = distinct !{!218, !3}
!219 = distinct !{!219, !3}
!220 = !{!221}
!221 = distinct !{!221, !222}
!222 = distinct !{!222, !"LVerDomain"}
!223 = !{!224}
!224 = distinct !{!224, !222}
!225 = !{!226}
!226 = distinct !{!226, !222}
!227 = !{!221, !224}
!228 = distinct !{!228, !3}
!229 = distinct !{!229, !3}
!230 = !{!231}
!231 = distinct !{!231, !232}
!232 = distinct !{!232, !"LVerDomain"}
!233 = !{!234}
!234 = distinct !{!234, !232}
!235 = !{!236}
!236 = distinct !{!236, !232}
!237 = !{!231, !234}
!238 = distinct !{!238, !3}
!239 = distinct !{!239, !3}
!240 = distinct !{!240, !241}
!241 = !{!"llvm.loop.unroll.disable"}
!242 = !{!243}
!243 = distinct !{!243, !244}
!244 = distinct !{!244, !"LVerDomain"}
!245 = !{!246}
!246 = distinct !{!246, !244}
!247 = !{!248}
!248 = distinct !{!248, !244}
!249 = !{!250}
!250 = distinct !{!250, !244}
!251 = distinct !{!251, !3}
!252 = distinct !{!252, !3}
!253 = !{!254}
!254 = distinct !{!254, !255}
!255 = distinct !{!255, !"LVerDomain"}
!256 = !{!257}
!257 = distinct !{!257, !255}
!258 = !{!259}
!259 = distinct !{!259, !255}
!260 = distinct !{!260, !3}
!261 = distinct !{!261, !3}
!262 = !{!263}
!263 = distinct !{!263, !264}
!264 = distinct !{!264, !"LVerDomain"}
!265 = !{!266}
!266 = distinct !{!266, !264}
!267 = !{!268}
!268 = distinct !{!268, !264}
!269 = distinct !{!269, !3}
!270 = distinct !{!270, !3}
!271 = !{!272}
!272 = distinct !{!272, !273}
!273 = distinct !{!273, !"LVerDomain"}
!274 = !{!275}
!275 = distinct !{!275, !273}
!276 = !{!277}
!277 = distinct !{!277, !273}
!278 = !{!279}
!279 = distinct !{!279, !273}
!280 = distinct !{!280, !3}
!281 = distinct !{!281, !3}
!282 = !{!283}
!283 = distinct !{!283, !284}
!284 = distinct !{!284, !"LVerDomain"}
!285 = !{!286}
!286 = distinct !{!286, !284}
!287 = !{!288}
!288 = distinct !{!288, !284}
!289 = distinct !{!289, !3}
!290 = distinct !{!290, !3}
!291 = !{!292}
!292 = distinct !{!292, !293}
!293 = distinct !{!293, !"LVerDomain"}
!294 = !{!295}
!295 = distinct !{!295, !293}
!296 = !{!297}
!297 = distinct !{!297, !293}
!298 = !{!299}
!299 = distinct !{!299, !293}
!300 = !{!301}
!301 = distinct !{!301, !293}
!302 = distinct !{!302, !3}
!303 = distinct !{!303, !3}
!304 = !{!305}
!305 = distinct !{!305, !306}
!306 = distinct !{!306, !"LVerDomain"}
!307 = !{!308}
!308 = distinct !{!308, !306}
!309 = !{!310}
!310 = distinct !{!310, !306}
!311 = distinct !{!311, !3}
!312 = distinct !{!312, !3}
!313 = !{!314}
!314 = distinct !{!314, !315}
!315 = distinct !{!315, !"LVerDomain"}
!316 = !{!317}
!317 = distinct !{!317, !315}
!318 = !{!319}
!319 = distinct !{!319, !315}
!320 = distinct !{!320, !3}
!321 = distinct !{!321, !3}
!322 = !{!323}
!323 = distinct !{!323, !324}
!324 = distinct !{!324, !"LVerDomain"}
!325 = !{!326}
!326 = distinct !{!326, !324}
!327 = !{!328}
!328 = distinct !{!328, !324}
!329 = distinct !{!329, !3}
!330 = distinct !{!330, !3}
!331 = !{!332}
!332 = distinct !{!332, !333}
!333 = distinct !{!333, !"LVerDomain"}
!334 = !{!335}
!335 = distinct !{!335, !333}
!336 = !{!337}
!337 = distinct !{!337, !333}
!338 = !{!339}
!339 = distinct !{!339, !333}
!340 = !{!341}
!341 = distinct !{!341, !333}
!342 = !{!335, !337, !339, !332}
!343 = distinct !{!343, !3}
!344 = distinct !{!344, !3}
!345 = !{!346}
!346 = distinct !{!346, !347}
!347 = distinct !{!347, !"LVerDomain"}
!348 = distinct !{!348, !3}
!349 = distinct !{!349, !3}
!350 = !{!351}
!351 = distinct !{!351, !352}
!352 = distinct !{!352, !"LVerDomain"}
!353 = !{!354}
!354 = distinct !{!354, !352}
!355 = distinct !{!355, !3}
!356 = distinct !{!356, !3}
!357 = !{!358}
!358 = distinct !{!358, !359}
!359 = distinct !{!359, !"LVerDomain"}
!360 = distinct !{!360, !3}
!361 = distinct !{!361, !3}
!362 = !{!363}
!363 = distinct !{!363, !364}
!364 = distinct !{!364, !"LVerDomain"}
!365 = !{!366}
!366 = distinct !{!366, !364}
!367 = !{!368}
!368 = distinct !{!368, !364}
!369 = !{!363, !370, !366}
!370 = distinct !{!370, !364}
!371 = distinct !{!371, !3}
!372 = distinct !{!372, !3}
!373 = !{!374}
!374 = distinct !{!374, !375}
!375 = distinct !{!375, !"LVerDomain"}
!376 = !{!377}
!377 = distinct !{!377, !375}
!378 = !{!379}
!379 = distinct !{!379, !375}
!380 = distinct !{!380, !3}
!381 = distinct !{!381, !3}
!382 = !{!383}
!383 = distinct !{!383, !384}
!384 = distinct !{!384, !"LVerDomain"}
!385 = !{!386}
!386 = distinct !{!386, !384}
!387 = !{!388}
!388 = distinct !{!388, !384}
!389 = !{!390}
!390 = distinct !{!390, !384}
!391 = !{!392}
!392 = distinct !{!392, !384}
!393 = distinct !{!393, !3}
!394 = distinct !{!394, !3}
!395 = !{!396}
!396 = distinct !{!396, !397}
!397 = distinct !{!397, !"LVerDomain"}
!398 = !{!399}
!399 = distinct !{!399, !397}
!400 = !{!401}
!401 = distinct !{!401, !397}
!402 = distinct !{!402, !3}
!403 = distinct !{!403, !3}
!404 = !{!405}
!405 = distinct !{!405, !406}
!406 = distinct !{!406, !"LVerDomain"}
!407 = !{!408}
!408 = distinct !{!408, !406}
!409 = !{!410}
!410 = distinct !{!410, !406}
!411 = distinct !{!411, !3}
!412 = distinct !{!412, !3}
!413 = !{!414}
!414 = distinct !{!414, !415}
!415 = distinct !{!415, !"LVerDomain"}
!416 = !{!417}
!417 = distinct !{!417, !415}
!418 = !{!419}
!419 = distinct !{!419, !415}
!420 = !{!421}
!421 = distinct !{!421, !415}
!422 = !{!423, !414, !417, !419}
!423 = distinct !{!423, !415}
!424 = distinct !{!424, !3}
!425 = distinct !{!425, !3}
!426 = !{!427}
!427 = distinct !{!427, !428}
!428 = distinct !{!428, !"LVerDomain"}
!429 = !{!430}
!430 = distinct !{!430, !428}
!431 = !{!432}
!432 = distinct !{!432, !428}
!433 = !{!434}
!434 = distinct !{!434, !428}
!435 = !{!436, !427, !430, !432}
!436 = distinct !{!436, !428}
!437 = distinct !{!437, !3}
!438 = distinct !{!438, !3}
!439 = !{!440}
!440 = distinct !{!440, !441}
!441 = distinct !{!441, !"LVerDomain"}
!442 = !{!443}
!443 = distinct !{!443, !441}
!444 = !{!445}
!445 = distinct !{!445, !441}
!446 = !{!447}
!447 = distinct !{!447, !441}
!448 = !{!449, !440, !443, !445}
!449 = distinct !{!449, !441}
!450 = distinct !{!450, !3}
!451 = distinct !{!451, !3}
!452 = !{!453}
!453 = distinct !{!453, !454}
!454 = distinct !{!454, !"LVerDomain"}
!455 = distinct !{!455, !3}
!456 = distinct !{!456, !3}
!457 = !{!458}
!458 = distinct !{!458, !459}
!459 = distinct !{!459, !"LVerDomain"}
!460 = distinct !{!460, !3}
!461 = distinct !{!461, !3}
!462 = !{!463}
!463 = distinct !{!463, !464}
!464 = distinct !{!464, !"LVerDomain"}
!465 = distinct !{!465, !3}
!466 = distinct !{!466, !3}
!467 = !{!468}
!468 = distinct !{!468, !469}
!469 = distinct !{!469, !"LVerDomain"}
!470 = distinct !{!470, !3}
!471 = distinct !{!471, !3}
!472 = !{!473}
!473 = distinct !{!473, !474}
!474 = distinct !{!474, !"LVerDomain"}
!475 = !{!476}
!476 = distinct !{!476, !474}
!477 = !{!478, !479, !473}
!478 = distinct !{!478, !474}
!479 = distinct !{!479, !474}
!480 = distinct !{!480, !3}
!481 = distinct !{!481, !3}
!482 = !{!483}
!483 = distinct !{!483, !484}
!484 = distinct !{!484, !"LVerDomain"}
!485 = distinct !{!485, !3}
!486 = distinct !{!486, !3}
!487 = !{!488}
!488 = distinct !{!488, !489}
!489 = distinct !{!489, !"LVerDomain"}
!490 = distinct !{!490, !3}
!491 = distinct !{!491, !3}
!492 = !{!493}
!493 = distinct !{!493, !494}
!494 = distinct !{!494, !"LVerDomain"}
!495 = !{!496}
!496 = distinct !{!496, !494}
!497 = !{!498}
!498 = distinct !{!498, !494}
!499 = distinct !{!499, !3}
!500 = distinct !{!500, !3}
!501 = distinct !{!501, !241}
!502 = !{!503}
!503 = distinct !{!503, !504}
!504 = distinct !{!504, !"LVerDomain"}
!505 = !{!506}
!506 = distinct !{!506, !504}
!507 = !{!508}
!508 = distinct !{!508, !504}
!509 = !{!510}
!510 = distinct !{!510, !504}
!511 = distinct !{!511, !3}
!512 = distinct !{!512, !3}
!513 = !{!514}
!514 = distinct !{!514, !515}
!515 = distinct !{!515, !"LVerDomain"}
!516 = !{!517}
!517 = distinct !{!517, !515}
!518 = !{!519}
!519 = distinct !{!519, !515}
!520 = !{!521}
!521 = distinct !{!521, !515}
!522 = !{!514, !517, !519}
!523 = distinct !{!523, !3}
!524 = distinct !{!524, !3}
!525 = !{!526}
!526 = distinct !{!526, !527}
!527 = distinct !{!527, !"LVerDomain"}
!528 = !{!529}
!529 = distinct !{!529, !527}
!530 = !{!531}
!531 = distinct !{!531, !527}
!532 = !{!533}
!533 = distinct !{!533, !527}
!534 = distinct !{!534, !3}
!535 = distinct !{!535, !3}
!536 = !{!537}
!537 = distinct !{!537, !538}
!538 = distinct !{!538, !"LVerDomain"}
!539 = !{!540}
!540 = distinct !{!540, !538}
!541 = !{!542}
!542 = distinct !{!542, !538}
!543 = !{!544}
!544 = distinct !{!544, !538}
!545 = distinct !{!545, !3}
!546 = distinct !{!546, !3}
!547 = !{!548}
!548 = distinct !{!548, !549}
!549 = distinct !{!549, !"LVerDomain"}
!550 = !{!551}
!551 = distinct !{!551, !549}
!552 = !{!553}
!553 = distinct !{!553, !549}
!554 = distinct !{!554, !3}
!555 = distinct !{!555, !3}
!556 = !{!557}
!557 = distinct !{!557, !558}
!558 = distinct !{!558, !"LVerDomain"}
!559 = !{!560}
!560 = distinct !{!560, !558}
!561 = !{!562}
!562 = distinct !{!562, !558}
!563 = distinct !{!563, !3}
!564 = distinct !{!564, !3}
!565 = !{!566}
!566 = distinct !{!566, !567}
!567 = distinct !{!567, !"LVerDomain"}
!568 = !{!569, !570, !571}
!569 = distinct !{!569, !567}
!570 = distinct !{!570, !567}
!571 = distinct !{!571, !567}
!572 = !{!569}
!573 = !{!570, !571}
!574 = !{!570}
!575 = !{!571}
!576 = distinct !{!576, !3}
!577 = distinct !{!577, !3}
!578 = !{!579}
!579 = distinct !{!579, !580}
!580 = distinct !{!580, !"LVerDomain"}
!581 = !{!582}
!582 = distinct !{!582, !580}
!583 = !{!584}
!584 = distinct !{!584, !580}
!585 = distinct !{!585, !3}
!586 = distinct !{!586, !3}
!587 = !{!588}
!588 = distinct !{!588, !589}
!589 = distinct !{!589, !"LVerDomain"}
!590 = !{!591}
!591 = distinct !{!591, !589}
!592 = distinct !{!592, !3}
!593 = distinct !{!593, !3}
!594 = !{!595}
!595 = distinct !{!595, !596}
!596 = distinct !{!596, !"LVerDomain"}
!597 = !{!598, !599}
!598 = distinct !{!598, !596}
!599 = distinct !{!599, !596}
!600 = !{!598}
!601 = !{!599}
!602 = distinct !{!602, !3}
!603 = distinct !{!603, !3}
!604 = !{!605}
!605 = distinct !{!605, !606}
!606 = distinct !{!606, !"LVerDomain"}
!607 = !{!608}
!608 = distinct !{!608, !606}
!609 = distinct !{!609, !3}
!610 = distinct !{!610, !241}
!611 = distinct !{!611, !3}
!612 = !{!613}
!613 = distinct !{!613, !614}
!614 = distinct !{!614, !"LVerDomain"}
!615 = !{!616}
!616 = distinct !{!616, !614}
!617 = distinct !{!617, !3}
!618 = distinct !{!618, !241}
!619 = distinct !{!619, !3}
!620 = !{!621}
!621 = distinct !{!621, !622}
!622 = distinct !{!622, !"LVerDomain"}
!623 = !{!624}
!624 = distinct !{!624, !622}
!625 = distinct !{!625, !3}
!626 = distinct !{!626, !3}
!627 = !{!628}
!628 = distinct !{!628, !629}
!629 = distinct !{!629, !"LVerDomain"}
!630 = !{!631}
!631 = distinct !{!631, !629}
!632 = distinct !{!632, !3}
!633 = distinct !{!633, !241}
!634 = distinct !{!634, !3}
!635 = distinct !{!635, !3}
!636 = distinct !{!636, !241}
!637 = distinct !{!637, !638, !3}
!638 = !{!"llvm.loop.unroll.runtime.disable"}
!639 = !{!640}
!640 = distinct !{!640, !641}
!641 = distinct !{!641, !"LVerDomain"}
!642 = !{!643, !644, !645, !646}
!643 = distinct !{!643, !641}
!644 = distinct !{!644, !641}
!645 = distinct !{!645, !641}
!646 = distinct !{!646, !641}
!647 = !{!643}
!648 = !{!644, !645, !646}
!649 = distinct !{!649, !3}
!650 = distinct !{!650, !3}
!651 = !{!652}
!652 = distinct !{!652, !653}
!653 = distinct !{!653, !"LVerDomain"}
!654 = !{!655, !656}
!655 = distinct !{!655, !653}
!656 = distinct !{!656, !653}
!657 = !{!655}
!658 = !{!656}
!659 = distinct !{!659, !3}
!660 = distinct !{!660, !3}
!661 = !{!662}
!662 = distinct !{!662, !663}
!663 = distinct !{!663, !"LVerDomain"}
!664 = !{!665, !666, !667, !668}
!665 = distinct !{!665, !663}
!666 = distinct !{!666, !663}
!667 = distinct !{!667, !663}
!668 = distinct !{!668, !663}
!669 = !{!665}
!670 = !{!666, !667, !668}
!671 = distinct !{!671, !3}
!672 = distinct !{!672, !3}
!673 = !{!674}
!674 = distinct !{!674, !675}
!675 = distinct !{!675, !"LVerDomain"}
!676 = !{!677, !678}
!677 = distinct !{!677, !675}
!678 = distinct !{!678, !675}
!679 = !{!677}
!680 = !{!678}
!681 = distinct !{!681, !3}
!682 = distinct !{!682, !3}
!683 = !{!684}
!684 = distinct !{!684, !685}
!685 = distinct !{!685, !"LVerDomain"}
!686 = !{!687}
!687 = distinct !{!687, !685}
!688 = !{!689}
!689 = distinct !{!689, !685}
!690 = !{!687, !684}
!691 = distinct !{!691, !3}
!692 = distinct !{!692, !3}
!693 = !{!694}
!694 = distinct !{!694, !695}
!695 = distinct !{!695, !"LVerDomain"}
!696 = !{!697}
!697 = distinct !{!697, !695}
!698 = !{!699}
!699 = distinct !{!699, !695}
!700 = !{!697, !694}
!701 = distinct !{!701, !3}
!702 = distinct !{!702, !3}
!703 = !{!704}
!704 = distinct !{!704, !705}
!705 = distinct !{!705, !"LVerDomain"}
!706 = distinct !{!706, !3}
!707 = distinct !{!707, !3}
!708 = !{!709}
!709 = distinct !{!709, !710}
!710 = distinct !{!710, !"LVerDomain"}
!711 = !{!712}
!712 = distinct !{!712, !710}
!713 = distinct !{!713, !3}
!714 = distinct !{!714, !3}
!715 = !{!716}
!716 = distinct !{!716, !717}
!717 = distinct !{!717, !"LVerDomain"}
!718 = !{!719}
!719 = distinct !{!719, !717}
!720 = distinct !{!720, !3}
!721 = distinct !{!721, !241}
!722 = distinct !{!722, !3}
!723 = distinct !{!723, !241}
!724 = distinct !{!724, !241}
!725 = distinct !{!725, !241}
!726 = distinct !{!726, !241}
!727 = distinct !{!727, !241}
!728 = !{!729}
!729 = distinct !{!729, !730}
!730 = distinct !{!730, !"LVerDomain"}
!731 = !{!732}
!732 = distinct !{!732, !730}
!733 = distinct !{!733, !3}
!734 = distinct !{!734, !241}
!735 = distinct !{!735, !3}
!736 = !{!737}
!737 = distinct !{!737, !738}
!738 = distinct !{!738, !"LVerDomain"}
!739 = !{!740}
!740 = distinct !{!740, !738}
!741 = distinct !{!741, !3}
!742 = distinct !{!742, !3}
!743 = !{!744}
!744 = distinct !{!744, !745}
!745 = distinct !{!745, !"LVerDomain"}
!746 = !{!747}
!747 = distinct !{!747, !745}
!748 = !{!749}
!749 = distinct !{!749, !745}
!750 = !{!751}
!751 = distinct !{!751, !745}
!752 = !{!753}
!753 = distinct !{!753, !745}
!754 = !{!755}
!755 = distinct !{!755, !745}
!756 = !{!744, !747, !749, !751, !753}
!757 = distinct !{!757, !3}
!758 = distinct !{!758, !3}
!759 = !{!760}
!760 = distinct !{!760, !761}
!761 = distinct !{!761, !"LVerDomain"}
!762 = !{!763}
!763 = distinct !{!763, !761}
!764 = distinct !{!764, !3}
!765 = distinct !{!765, !3}
!766 = !{!767}
!767 = distinct !{!767, !768}
!768 = distinct !{!768, !"LVerDomain"}
!769 = !{!770}
!770 = distinct !{!770, !768}
!771 = !{!772}
!772 = distinct !{!772, !768}
!773 = !{!774}
!774 = distinct !{!774, !768}
!775 = !{!776}
!776 = distinct !{!776, !768}
!777 = !{!778}
!778 = distinct !{!778, !768}
!779 = !{!767, !770, !772, !774, !776}
!780 = distinct !{!780, !3}
!781 = distinct !{!781, !3}
!782 = !{!783}
!783 = distinct !{!783, !784}
!784 = distinct !{!784, !"LVerDomain"}
!785 = !{!786}
!786 = distinct !{!786, !784}
!787 = distinct !{!787, !3}
!788 = distinct !{!788, !241}
!789 = distinct !{!789, !3}
!790 = distinct !{!790, !241}
