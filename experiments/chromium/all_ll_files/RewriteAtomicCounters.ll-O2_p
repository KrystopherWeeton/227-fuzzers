; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteAtomicCounters.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/RewriteAtomicCounters.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.66", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.97", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.131", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.124", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { i32*, i32*, %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.46" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.37, i32 }
%union.anon.37 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.29" }
%"class.sh::TVector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.26" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.32 }
%union.anon.32 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { i32*, i32*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { i32* }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.58", %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i64 }
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.68" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.73", %"class.std::__1::vector.80", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.88", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.std::__1::unique_ptr.82"*, %"class.std::__1::unique_ptr.82"*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::unique_ptr.82" = type opaque
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.std::__1::unique_ptr.82"* }
%"class.std::__1::map.88" = type { %"class.std::__1::__tree.89" }
%"class.std::__1::__tree.89" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.std::__1::map.97" = type { %"class.std::__1::__tree.98" }
%"class.std::__1::__tree.98" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.99", %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.108", %"class.std::__1::map", %"class.std::__1::vector.46", %"class.std::__1::vector.117" }
%"class.std::__1::map.108" = type { %"class.std::__1::__tree.109" }
%"class.std::__1::__tree.109" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.124" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.131" = type { %"class.std::__1::__tree.132" }
%"class.std::__1::__tree.132" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.133", %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.38" = type { %"class.std::__1::vector.39" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser" = type { %"class.sh::TIntermTraverser", %"class.sh::TVariable"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.142", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.149", %"class.std::__1::vector.156", %"class.sh::TVector.38", %"class.std::__1::vector.163" }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.38" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.38", %"class.sh::TVector.38" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.163" = type { %"class.std::__1::__vector_base.164" }
%"class.std::__1::__vector_base.164" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.165" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.172", i8, [7 x i8] }>
%"class.sh::TVector.172" = type { %"class.std::__1::vector.173" }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { i32*, i32*, %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.38" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

@_ZN2sh12_GLOBAL__N_123kAtomicCounterFieldNameE = internal unnamed_addr constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i64 8 }, align 8
@_ZN2sh2vk24kAtomicCountersBlockNameE = external constant [0 x i8], align 1
@_ZN2sh12_GLOBAL__N_122kAtomicCountersVarNameE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i64 14 }, align 8
@.str = private unnamed_addr constant [9 x i8] c"counters\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"atomicCounters\00", align 1
@_ZTVN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*)* @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [27 x i8] c"memoryBarrierAtomicCounter\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"memoryBarrierBuffer\00", align 1
@_ZZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser22convertBuiltinFunctionEPNS_16TIntermAggregateEE18kAtomicAddFunction = internal constant [10 x i8] c"atomicAdd\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"atomicCounterIncrement\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"atomicCounterDecrement\00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh21RewriteAtomicCountersEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableEPKNS_12TIntermTypedE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 {
  %5 = alloca %"struct.sh::TMemoryQualifier", align 1
  %6 = alloca %"struct.sh::TLayoutQualifier", align 16
  %7 = alloca %"class.sh::ImmutableString", align 8
  %8 = alloca %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", align 8
  %9 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %10 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %9, i64 24) #10
  %11 = bitcast i8* %10 to %"class.sh::TVector.23"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #10
  %12 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %13 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %12, i64 184) #10
  %14 = bitcast i8* %13 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"* %14, i32 4, i8 zeroext 1, i8 zeroext 1) #10
  tail call void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"* %14, i32 0) #10
  %15 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %16 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %15, i64 48) #10
  %17 = bitcast i8* %16 to i8**
  store i8* %13, i8** %17, align 8
  %18 = getelementptr inbounds i8, i8* %16, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 bitcast (%"class.sh::ImmutableString"* @_ZN2sh12_GLOBAL__N_123kAtomicCounterFieldNameE to i8*), i64 16, i1 false) #10
  %19 = getelementptr inbounds i8, i8* %16, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 16, i1 false) #10
  %20 = getelementptr inbounds i8, i8* %16, i64 40
  store i8 2, i8* %20, align 8
  %21 = ptrtoint i8* %16 to i64
  %22 = getelementptr inbounds i8, i8* %10, i64 8
  %23 = bitcast i8* %22 to %"class.sh::TField"***
  %24 = load %"class.sh::TField"**, %"class.sh::TField"*** %23, align 8
  %25 = getelementptr inbounds i8, i8* %10, i64 16
  %26 = bitcast i8* %25 to %"class.sh::TField"***
  %27 = load %"class.sh::TField"**, %"class.sh::TField"*** %26, align 8
  %28 = icmp eq %"class.sh::TField"** %24, %27
  %29 = ptrtoint %"class.sh::TField"** %27 to i64
  br i1 %28, label %35, label %30

30:                                               ; preds = %4
  %31 = bitcast %"class.sh::TField"** %24 to i64*
  store i64 %21, i64* %31, align 8
  %32 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %24, i64 1
  %33 = ptrtoint %"class.sh::TField"** %32 to i64
  %34 = bitcast i8* %22 to i64*
  store i64 %33, i64* %34, align 8
  br label %248

35:                                               ; preds = %4
  %36 = ptrtoint %"class.sh::TField"** %24 to i64
  %37 = bitcast i8* %22 to i64*
  %38 = bitcast i8* %10 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %36, %39
  %41 = ashr exact i64 %40, 3
  %42 = add nsw i64 %41, 1
  %43 = icmp ugt i64 %42, 2305843009213693951
  br i1 %43, label %44, label %46

44:                                               ; preds = %35
  %45 = bitcast i8* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %45) #11
  unreachable

46:                                               ; preds = %35
  %47 = bitcast i8* %25 to i64*
  %48 = sub i64 %29, %39
  %49 = ashr exact i64 %48, 3
  %50 = icmp ult i64 %49, 1152921504606846975
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = ashr exact i64 %48, 2
  %53 = icmp ult i64 %52, %42
  %54 = select i1 %53, i64 %42, i64 %52
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %62, label %56

56:                                               ; preds = %51, %46
  %57 = phi i64 [ %54, %51 ], [ 2305843009213693951, %46 ]
  %58 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %59 = shl i64 %57, 3
  %60 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %58, i64 %59) #10
  %61 = bitcast i8* %60 to %"class.sh::TField"**
  br label %62

62:                                               ; preds = %56, %51
  %63 = phi i64 [ %57, %56 ], [ 0, %51 ]
  %64 = phi %"class.sh::TField"** [ %61, %56 ], [ null, %51 ]
  %65 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %64, i64 %41
  %66 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %64, i64 %63
  %67 = ptrtoint %"class.sh::TField"** %66 to i64
  %68 = bitcast %"class.sh::TField"** %65 to i64*
  store i64 %21, i64* %68, align 8
  %69 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %65, i64 1
  %70 = ptrtoint %"class.sh::TField"** %69 to i64
  %71 = bitcast i8* %10 to %"class.sh::TField"***
  %72 = load %"class.sh::TField"**, %"class.sh::TField"*** %71, align 8
  %73 = ptrtoint %"class.sh::TField"** %72 to i64
  %74 = load %"class.sh::TField"**, %"class.sh::TField"*** %23, align 8
  %75 = icmp eq %"class.sh::TField"** %74, %72
  br i1 %75, label %245, label %76

76:                                               ; preds = %62
  %77 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 -1
  %78 = ptrtoint %"class.sh::TField"** %77 to i64
  %79 = sub i64 %78, %73
  %80 = lshr i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = icmp ult i64 %81, 4
  br i1 %82, label %175, label %83

83:                                               ; preds = %76
  %84 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 -1
  %85 = ptrtoint %"class.sh::TField"** %84 to i64
  %86 = sub i64 %85, %73
  %87 = lshr i64 %86, 3
  %88 = xor i64 %87, -1
  %89 = add nsw i64 %41, %88
  %90 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %64, i64 %89
  %91 = xor i64 %87, -1
  %92 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 %91
  %93 = icmp ult %"class.sh::TField"** %90, %74
  %94 = icmp ult %"class.sh::TField"** %92, %65
  %95 = and i1 %93, %94
  br i1 %95, label %175, label %96

96:                                               ; preds = %83
  %97 = and i64 %81, 4611686018427387900
  %98 = sub nsw i64 0, %97
  %99 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %65, i64 %98
  %100 = sub nsw i64 0, %97
  %101 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 %100
  %102 = add nsw i64 %97, -4
  %103 = lshr exact i64 %102, 2
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %102, 0
  br i1 %106, label %153, label %107

107:                                              ; preds = %96
  %108 = sub nuw nsw i64 %104, %105
  %109 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %65, i64 -1
  %110 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 -1
  %111 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %65, i64 -1
  %112 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 -1
  br label %113

113:                                              ; preds = %113, %107
  %114 = phi i64 [ 0, %107 ], [ %148, %113 ]
  %115 = phi i64 [ %108, %107 ], [ %149, %113 ]
  %116 = sub i64 0, %114
  %117 = sub i64 0, %114
  %118 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %109, i64 %116
  %119 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %110, i64 %117
  %120 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %119, i64 -1
  %121 = bitcast %"class.sh::TField"** %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !2
  %123 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %119, i64 -2
  %124 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %123, i64 -1
  %125 = bitcast %"class.sh::TField"** %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !2
  %127 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %118, i64 -1
  %128 = bitcast %"class.sh::TField"** %127 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %128, align 8, !alias.scope !5, !noalias !2
  %129 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %118, i64 -2
  %130 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %129, i64 -1
  %131 = bitcast %"class.sh::TField"** %130 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %131, align 8, !alias.scope !5, !noalias !2
  %132 = sub nuw nsw i64 -4, %114
  %133 = sub nuw nsw i64 -4, %114
  %134 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %111, i64 %132
  %135 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %112, i64 %133
  %136 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %135, i64 -1
  %137 = bitcast %"class.sh::TField"** %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 8, !alias.scope !2
  %139 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %135, i64 -2
  %140 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %139, i64 -1
  %141 = bitcast %"class.sh::TField"** %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 8, !alias.scope !2
  %143 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %134, i64 -1
  %144 = bitcast %"class.sh::TField"** %143 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %144, align 8, !alias.scope !5, !noalias !2
  %145 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %134, i64 -2
  %146 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %145, i64 -1
  %147 = bitcast %"class.sh::TField"** %146 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %147, align 8, !alias.scope !5, !noalias !2
  %148 = add i64 %114, 8
  %149 = add i64 %115, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %113, !llvm.loop !7

151:                                              ; preds = %113
  %152 = sub nuw nsw i64 -8, %114
  br label %153

153:                                              ; preds = %151, %96
  %154 = phi i64 [ 0, %96 ], [ %152, %151 ]
  %155 = icmp eq i64 %105, 0
  br i1 %155, label %173, label %156

156:                                              ; preds = %153
  %157 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %65, i64 -1
  %158 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %74, i64 -1
  %159 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %157, i64 %154
  %160 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %158, i64 %154
  %161 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 -1
  %162 = bitcast %"class.sh::TField"** %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 8, !alias.scope !2
  %164 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %160, i64 -2
  %165 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %164, i64 -1
  %166 = bitcast %"class.sh::TField"** %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !alias.scope !2
  %168 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %159, i64 -1
  %169 = bitcast %"class.sh::TField"** %168 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %169, align 8, !alias.scope !5, !noalias !2
  %170 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %159, i64 -2
  %171 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %170, i64 -1
  %172 = bitcast %"class.sh::TField"** %171 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %172, align 8, !alias.scope !5, !noalias !2
  br label %173

173:                                              ; preds = %153, %156
  %174 = icmp eq i64 %81, %97
  br i1 %174, label %245, label %175

175:                                              ; preds = %173, %83, %76
  %176 = phi %"class.sh::TField"** [ %65, %83 ], [ %65, %76 ], [ %99, %173 ]
  %177 = phi %"class.sh::TField"** [ %74, %83 ], [ %74, %76 ], [ %101, %173 ]
  %178 = getelementptr %"class.sh::TField"*, %"class.sh::TField"** %177, i64 -1
  %179 = ptrtoint %"class.sh::TField"** %178 to i64
  %180 = sub i64 %179, %73
  %181 = lshr i64 %180, 3
  %182 = add nuw nsw i64 %181, 1
  %183 = and i64 %182, 7
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %196, label %185

185:                                              ; preds = %175, %185
  %186 = phi %"class.sh::TField"** [ %189, %185 ], [ %176, %175 ]
  %187 = phi %"class.sh::TField"** [ %190, %185 ], [ %177, %175 ]
  %188 = phi i64 [ %194, %185 ], [ %183, %175 ]
  %189 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %186, i64 -1
  %190 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %187, i64 -1
  %191 = bitcast %"class.sh::TField"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = bitcast %"class.sh::TField"** %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = add i64 %188, -1
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %185, !llvm.loop !9

196:                                              ; preds = %185, %175
  %197 = phi %"class.sh::TField"** [ undef, %175 ], [ %189, %185 ]
  %198 = phi %"class.sh::TField"** [ %176, %175 ], [ %189, %185 ]
  %199 = phi %"class.sh::TField"** [ %177, %175 ], [ %190, %185 ]
  %200 = icmp ult i64 %180, 56
  br i1 %200, label %245, label %201

201:                                              ; preds = %196, %201
  %202 = phi %"class.sh::TField"** [ %239, %201 ], [ %198, %196 ]
  %203 = phi %"class.sh::TField"** [ %240, %201 ], [ %199, %196 ]
  %204 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -1
  %205 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -1
  %206 = bitcast %"class.sh::TField"** %205 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.sh::TField"** %204 to i64*
  store i64 %207, i64* %208, align 8
  %209 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -2
  %210 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -2
  %211 = bitcast %"class.sh::TField"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = bitcast %"class.sh::TField"** %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -3
  %215 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -3
  %216 = bitcast %"class.sh::TField"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.sh::TField"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -4
  %220 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -4
  %221 = bitcast %"class.sh::TField"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.sh::TField"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -5
  %225 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -5
  %226 = bitcast %"class.sh::TField"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.sh::TField"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -6
  %230 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -6
  %231 = bitcast %"class.sh::TField"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.sh::TField"** %229 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -7
  %235 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -7
  %236 = bitcast %"class.sh::TField"** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.sh::TField"** %234 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %202, i64 -8
  %240 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %203, i64 -8
  %241 = bitcast %"class.sh::TField"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.sh::TField"** %239 to i64*
  store i64 %242, i64* %243, align 8
  %244 = icmp eq %"class.sh::TField"** %240, %72
  br i1 %244, label %245, label %201, !llvm.loop !11

245:                                              ; preds = %196, %201, %173, %62
  %246 = phi %"class.sh::TField"** [ %65, %62 ], [ %99, %173 ], [ %197, %196 ], [ %239, %201 ]
  %247 = ptrtoint %"class.sh::TField"** %246 to i64
  store i64 %247, i64* %38, align 8
  store i64 %70, i64* %37, align 8
  store i64 %67, i64* %47, align 8
  br label %248

248:                                              ; preds = %245, %30
  %249 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %249) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %249, i8 0, i64 5, i1 false) #10
  %250 = getelementptr inbounds %"struct.sh::TMemoryQualifier", %"struct.sh::TMemoryQualifier"* %5, i64 0, i32 2
  store i8 1, i8* %250, align 1
  %251 = bitcast %"struct.sh::TLayoutQualifier"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 92, i8* nonnull %251) #10
  %252 = bitcast %"struct.sh::TLayoutQualifier"* %6 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, <4 x i32>* %252, align 16, !alias.scope !12
  %253 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 4, i32 0, i64 0
  %254 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 7
  %255 = bitcast i32* %253 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %255, i8 -1, i64 20, i1 false) #10, !alias.scope !12
  store i32 0, i32* %254, align 4, !alias.scope !12
  %256 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 8
  store i32 -1, i32* %256, align 8, !alias.scope !12
  %257 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 9
  store i8 0, i8* %257, align 4, !alias.scope !12
  %258 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 10
  store i8 0, i8* %258, align 1, !alias.scope !12
  %259 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 12
  store i32 0, i32* %259, align 16, !alias.scope !12
  %260 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 13
  store i32 0, i32* %260, align 4, !alias.scope !12
  %261 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 14
  store i32 -1, i32* %261, align 8, !alias.scope !12
  %262 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 15
  %263 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 20
  %264 = bitcast i32* %262 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %264, i8 0, i64 20, i1 false) #10, !alias.scope !12
  store i32 -1, i32* %263, align 16, !alias.scope !12
  %265 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 21
  store i32 -1, i32* %265, align 4, !alias.scope !12
  %266 = getelementptr inbounds %"struct.sh::TLayoutQualifier", %"struct.sh::TLayoutQualifier"* %6, i64 0, i32 22
  store i8 0, i8* %266, align 8, !alias.scope !12
  %267 = bitcast %"class.sh::ImmutableString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %267) #10
  %268 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN2sh2vk24kAtomicCountersBlockNameE, i64 0, i64 0), i8** %268, align 8
  br label %269

269:                                              ; preds = %269, %248
  %270 = phi i64 [ %274, %269 ], [ 0, %248 ]
  %271 = getelementptr inbounds [0 x i8], [0 x i8]* @_ZN2sh2vk24kAtomicCountersBlockNameE, i64 0, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = icmp eq i8 %272, 0
  %274 = add i64 %270, 1
  br i1 %273, label %275, label %269

275:                                              ; preds = %269
  %276 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %7, i64 0, i32 1
  store i64 %270, i64* %276, align 8
  %277 = call %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"* %1, %"class.sh::TSymbolTable"* %2, %"class.sh::TVector.23"* %11, i32 7, %"struct.sh::TLayoutQualifier"* nonnull dereferenceable(92) %6, %"struct.sh::TMemoryQualifier"* nonnull dereferenceable(5) %5, i32 8, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %7, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2sh12_GLOBAL__N_122kAtomicCountersVarNameE) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %267) #10
  call void @llvm.lifetime.end.p0i8(i64 92, i8* nonnull %251) #10
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %249) #10
  %278 = bitcast %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %278) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %278, i8 -86, i64 168, i1 false)
  %279 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %8, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %279, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #10
  %280 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %8, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %280, align 8
  %281 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %8, i64 0, i32 1
  store %"class.sh::TVariable"* %277, %"class.sh::TVariable"** %281, align 8
  %282 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %8, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %282, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %279) #10
  %283 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %284 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %279, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %283) #10
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %279) #10
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %278) #10
  ret i1 %284
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeEhh(%"class.sh::TType"*, i32, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh5TType9makeArrayEj(%"class.sh::TType"*, i32) local_unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh21DeclareInterfaceBlockEPNS_12TIntermBlockEPNS_12TSymbolTableEPNS_7TVectorIPNS_6TFieldEEENS_10TQualifierERKNS_16TLayoutQualifierERKNS_16TMemoryQualifierEjRKNS_15ImmutableStringESI_(%"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*, %"class.sh::TVector.23"*, i32, %"struct.sh::TLayoutQualifier"* dereferenceable(92), %"struct.sh::TMemoryQualifier"* dereferenceable(5), i32, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::ImmutableString"* dereferenceable(16)) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverserD0Ev(%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #10
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* nocapture, %"class.sh::TIntermSymbol"* nocapture) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* nocapture readnone, i32, %"class.sh::TIntermBinary"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector.38", align 8
  %5 = alloca %"class.sh::TVector.38", align 8
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 1
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 3
  br i1 %8, label %9, label %610

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 5
  %11 = bitcast %"class.sh::TFunction"** %10 to %"class.sh::TSymbol"**
  %12 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %11, align 8
  %13 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %12) #10
  %14 = extractvalue { i8*, i64 } %13, 0
  %15 = icmp eq i8* %14, null
  %16 = select i1 %15, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), i8* %14
  %17 = tail call i32 @strcmp(i8* %16, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0)) #12
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %9
  %20 = bitcast %"class.sh::TVector.38"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #10
  %21 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %4, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #10
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0
  %23 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 8
  %24 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %23, align 8
  %25 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), %"class.sh::TVector.38"* nonnull %4, %"class.sh::TSymbolTable"* dereferenceable(1720) %24, i32 310) #10
  %26 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %25, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %22, %"class.sh::TIntermNode"* %26, i32 1) #10
  %27 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %28 = icmp eq %"class.sh::TIntermNode"** %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %19
  %30 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %4, i64 0, i32 0, i32 0, i32 1
  %31 = ptrtoint %"class.sh::TIntermNode"** %27 to i64
  %32 = bitcast %"class.sh::TIntermNode"*** %30 to i64*
  store i64 %31, i64* %32, align 8
  br label %33

33:                                               ; preds = %29, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  br label %610

34:                                               ; preds = %9
  %35 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %10, align 8
  %36 = tail call zeroext i1 @_ZNK2sh9TFunction23isAtomicCounterFunctionEv(%"class.sh::TFunction"* %35) #10
  br i1 %36, label %37, label %610

37:                                               ; preds = %34
  %38 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %11, align 8
  %39 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %38) #10
  %40 = extractvalue { i8*, i64 } %39, 0
  %41 = icmp eq i8* %40, null
  %42 = select i1 %41, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i64 0, i64 0), i8* %40
  %43 = tail call i32 @strcmp(i8* %42, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0)) #12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %37
  %46 = tail call i32 @strcmp(i8* %42, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0)) #12
  %47 = icmp eq i32 %46, 0
  %48 = sext i1 %47 to i32
  br label %49

49:                                               ; preds = %45, %37
  %50 = phi i32 [ 1, %37 ], [ %48, %45 ]
  %51 = phi i1 [ false, %37 ], [ %47, %45 ]
  %52 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)***
  %53 = load %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)*** %52, align 8
  %54 = getelementptr inbounds %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)** %53, i64 32
  %55 = load %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.38"* (%"class.sh::TIntermAggregate"*)** %54, align 8
  %56 = tail call %"class.sh::TVector.38"* %55(%"class.sh::TIntermAggregate"* %2) #10
  %57 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %57, align 8
  %59 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %58, align 8
  %60 = bitcast %"class.sh::TIntermNode"* %59 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %61 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %60, align 8
  %62 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %61, i64 4
  %63 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %62, align 8
  %64 = tail call %"class.sh::TIntermTyped"* %63(%"class.sh::TIntermNode"* %59) #10
  %65 = bitcast %"class.sh::TVector.38"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #10
  %66 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %5, i64 0, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %5, i64 0, i32 0, i32 0, i32 1
  %68 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #10
  %69 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 1
  %70 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %69, align 8
  %71 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 2
  %72 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %71, align 8
  %73 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %64, i64 0, i32 0
  %74 = bitcast %"class.sh::TIntermTyped"* %64 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %75 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %74, align 8
  %76 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %75, i64 19
  %77 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %76, align 8
  %78 = tail call %"class.sh::TIntermSymbol"* %77(%"class.sh::TIntermNode"* %73) #10
  %79 = bitcast %"class.sh::TIntermTyped"* %64 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  %80 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %79, align 8
  %81 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %80, i64 13
  %82 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %81, align 8
  %83 = tail call %"class.sh::TIntermBinary"* %82(%"class.sh::TIntermNode"* %73) #10
  %84 = icmp eq %"class.sh::TIntermBinary"* %83, null
  br i1 %84, label %113, label %85

85:                                               ; preds = %49
  %86 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %83, i64 0, i32 2
  %87 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %86, align 8
  %88 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %87, i64 0, i32 0
  %89 = bitcast %"class.sh::TIntermTyped"* %87 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %90 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %89, align 8
  %91 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %90, i64 19
  %92 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %91, align 8
  %93 = tail call %"class.sh::TIntermSymbol"* %92(%"class.sh::TIntermNode"* %88) #10
  %94 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %83, i64 0, i32 0, i32 1
  %95 = load i8, i8* %94, align 8
  switch i8 %95, label %113 [
    i8 44, label %96
    i8 45, label %110
  ]

96:                                               ; preds = %85
  %97 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %83, i64 0, i32 3
  %98 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %97, align 8
  %99 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %98, i64 0, i32 0
  %100 = bitcast %"class.sh::TIntermTyped"* %98 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %101 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %100, align 8
  %102 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %101, i64 5
  %103 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %102, align 8
  %104 = tail call %"class.sh::TIntermConstantUnion"* %103(%"class.sh::TIntermNode"* %99) #10
  %105 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %104, i64 0, i32 1
  %106 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %105, align 8
  %107 = icmp eq %"class.sh::TConstantUnion"* %106, null
  br i1 %107, label %113, label %108

108:                                              ; preds = %96
  %109 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %106) #10
  br label %113

110:                                              ; preds = %85
  %111 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %83, i64 0, i32 3
  %112 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %111, align 8
  br label %113

113:                                              ; preds = %110, %108, %96, %85, %49
  %114 = phi i32 [ 0, %85 ], [ 0, %110 ], [ 0, %49 ], [ %109, %108 ], [ 0, %96 ]
  %115 = phi %"class.sh::TIntermTyped"* [ null, %85 ], [ %112, %110 ], [ null, %49 ], [ null, %108 ], [ null, %96 ]
  %116 = phi %"class.sh::TIntermSymbol"* [ %93, %85 ], [ %93, %110 ], [ %78, %49 ], [ %93, %108 ], [ %93, %96 ]
  %117 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %116, i64 0, i32 1
  %118 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %117, align 8
  %119 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %118, i64 0, i32 1
  %120 = load %"class.sh::TType"*, %"class.sh::TType"** %119, align 8
  %121 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %120, i64 0, i32 7, i32 5
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %120, i64 0, i32 7, i32 6
  %124 = load i32, i32* %123, align 4
  %125 = sdiv i32 %124, 4
  %126 = add nsw i32 %125, %114
  %127 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %128 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %127, i64 240) #10
  %129 = bitcast i8* %128 to %"class.sh::TIntermBinary"*
  %130 = bitcast %"class.sh::TIntermTyped"* %72 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %131 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %130, align 8
  %132 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %131, i64 23
  %133 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %132, align 8
  %134 = tail call %"class.sh::TIntermTyped"* %133(%"class.sh::TIntermTyped"* %72) #10
  %135 = sdiv i32 %122, 4
  %136 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %135) #10
  %137 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %136, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %129, i8 zeroext 44, %"class.sh::TIntermTyped"* %134, %"class.sh::TIntermTyped"* %137) #10
  %138 = srem i32 %122, 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %148, label %140

140:                                              ; preds = %113
  %141 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %142 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %141, i64 240) #10
  %143 = bitcast i8* %142 to %"class.sh::TIntermBinary"*
  %144 = bitcast i8* %128 to %"class.sh::TIntermTyped"*
  %145 = shl nsw i32 %138, 3
  %146 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32 %145) #10
  %147 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %146, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %143, i8 zeroext 40, %"class.sh::TIntermTyped"* %144, %"class.sh::TIntermTyped"* %147) #10
  br label %148

148:                                              ; preds = %140, %113
  %149 = phi %"class.sh::TIntermBinary"* [ %143, %140 ], [ %129, %113 ]
  %150 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %151 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %150, i64 240) #10
  %152 = bitcast i8* %151 to %"class.sh::TIntermBinary"*
  %153 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %149, i64 0, i32 0, i32 0, i32 0
  %154 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32 255) #10
  %155 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %154, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %152, i8 zeroext 41, %"class.sh::TIntermTyped"* %153, %"class.sh::TIntermTyped"* %155) #10
  %156 = bitcast i8* %151 to %"class.sh::TIntermTyped"*
  %157 = icmp eq %"class.sh::TIntermTyped"* %115, null
  br i1 %157, label %163, label %158

158:                                              ; preds = %148
  %159 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %160 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %159, i64 240) #10
  %161 = bitcast i8* %160 to %"class.sh::TIntermBinary"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %161, i8 zeroext 13, %"class.sh::TIntermTyped"* %156, %"class.sh::TIntermTyped"* nonnull %115) #10
  %162 = bitcast i8* %160 to %"class.sh::TIntermTyped"*
  br label %163

163:                                              ; preds = %158, %148
  %164 = phi %"class.sh::TIntermTyped"* [ %162, %158 ], [ %156, %148 ]
  %165 = icmp eq i32 %126, 0
  br i1 %165, label %173, label %166

166:                                              ; preds = %163
  %167 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %168 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %167, i64 240) #10
  %169 = bitcast i8* %168 to %"class.sh::TIntermBinary"*
  %170 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %126) #10
  %171 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %170, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %169, i8 zeroext 13, %"class.sh::TIntermTyped"* %164, %"class.sh::TIntermTyped"* %171) #10
  %172 = bitcast i8* %168 to %"class.sh::TIntermTyped"*
  br label %173

173:                                              ; preds = %166, %163
  %174 = phi %"class.sh::TIntermTyped"* [ %172, %166 ], [ %164, %163 ]
  %175 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %176 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %175, i64 32) #10
  %177 = bitcast i8* %176 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %177, %"class.sh::TVariable"* %70) #10
  %178 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %179 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %178, i64 240) #10
  %180 = bitcast i8* %179 to %"class.sh::TIntermBinary"*
  %181 = bitcast i8* %176 to %"class.sh::TIntermTyped"*
  %182 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %122) #10
  %183 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %182, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %180, i8 zeroext 44, %"class.sh::TIntermTyped"* %181, %"class.sh::TIntermTyped"* %183) #10
  %184 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %185 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %184, i64 240) #10
  %186 = bitcast i8* %185 to %"class.sh::TIntermBinary"*
  %187 = bitcast i8* %179 to %"class.sh::TIntermTyped"*
  %188 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 0) #10
  %189 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %188, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %186, i8 zeroext 47, %"class.sh::TIntermTyped"* %187, %"class.sh::TIntermTyped"* %189) #10
  %190 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %191 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %190, i64 240) #10
  %192 = bitcast i8* %191 to %"class.sh::TIntermBinary"*
  %193 = bitcast i8* %185 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %192, i8 zeroext 45, %"class.sh::TIntermTyped"* %193, %"class.sh::TIntermTyped"* %174) #10
  %194 = ptrtoint i8* %191 to i64
  %195 = bitcast %"class.sh::TIntermNode"*** %67 to i64*
  %196 = bitcast %"class.sh::TVector.38"* %5 to i64*
  %197 = bitcast %"class.sh::TIntermNode"*** %68 to i64*
  %198 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %199 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %198, i64 8) #10
  %200 = bitcast i8* %199 to %"class.sh::TIntermNode"**
  %201 = getelementptr inbounds i8, i8* %199, i64 8
  %202 = ptrtoint i8* %201 to i64
  %203 = bitcast i8* %199 to i64*
  store i64 %194, i64* %203, align 8
  %204 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %66, align 8
  %205 = ptrtoint %"class.sh::TIntermNode"** %204 to i64
  %206 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %67, align 8
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i8*
  %208 = icmp eq %"class.sh::TIntermNode"** %206, %204
  br i1 %208, label %382, label %209

209:                                              ; preds = %173
  %210 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  %211 = ptrtoint %"class.sh::TIntermNode"** %210 to i64
  %212 = sub i64 %211, %205
  %213 = lshr i64 %212, 3
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 4
  br i1 %215, label %312, label %216

216:                                              ; preds = %209
  %217 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  %218 = ptrtoint %"class.sh::TIntermNode"** %217 to i64
  %219 = sub i64 %218, %205
  %220 = lshr i64 %219, 3
  %221 = and i64 %219, -8
  %222 = xor i64 %221, -8
  %223 = getelementptr i8, i8* %199, i64 %222
  %224 = xor i64 %220, -1
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 %224
  %226 = bitcast %"class.sh::TIntermNode"** %225 to i8*
  %227 = icmp ult i8* %223, %207
  %228 = icmp ugt i8* %199, %226
  %229 = and i1 %227, %228
  br i1 %229, label %312, label %230

230:                                              ; preds = %216
  %231 = and i64 %214, 4611686018427387900
  %232 = sub nsw i64 0, %231
  %233 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 %232
  %234 = sub nsw i64 0, %231
  %235 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 %234
  %236 = add nsw i64 %231, -4
  %237 = lshr exact i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 1
  %240 = icmp eq i64 %236, 0
  br i1 %240, label %287, label %241

241:                                              ; preds = %230
  %242 = sub nuw nsw i64 %238, %239
  %243 = getelementptr i8, i8* %199, i64 -8
  %244 = bitcast i8* %243 to %"class.sh::TIntermNode"**
  %245 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  %246 = getelementptr i8, i8* %199, i64 -8
  %247 = bitcast i8* %246 to %"class.sh::TIntermNode"**
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  br label %249

249:                                              ; preds = %249, %241
  %250 = phi i64 [ 0, %241 ], [ %284, %249 ]
  %251 = phi i64 [ %242, %241 ], [ %285, %249 ]
  %252 = sub i64 0, %250
  %253 = sub i64 0, %250
  %254 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %244, i64 %252
  %255 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %245, i64 %253
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -1
  %257 = bitcast %"class.sh::TIntermNode"** %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 8, !alias.scope !15
  %259 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -2
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %259, i64 -1
  %261 = bitcast %"class.sh::TIntermNode"** %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 8, !alias.scope !15
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -1
  %264 = bitcast %"class.sh::TIntermNode"** %263 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %264, align 8, !alias.scope !18, !noalias !15
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -2
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %265, i64 -1
  %267 = bitcast %"class.sh::TIntermNode"** %266 to <2 x i64>*
  store <2 x i64> %262, <2 x i64>* %267, align 8, !alias.scope !18, !noalias !15
  %268 = sub nuw nsw i64 -4, %250
  %269 = sub nuw nsw i64 -4, %250
  %270 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 %268
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 %269
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %271, i64 -1
  %273 = bitcast %"class.sh::TIntermNode"** %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 8, !alias.scope !15
  %275 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %271, i64 -2
  %276 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %275, i64 -1
  %277 = bitcast %"class.sh::TIntermNode"** %276 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 8, !alias.scope !15
  %279 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -1
  %280 = bitcast %"class.sh::TIntermNode"** %279 to <2 x i64>*
  store <2 x i64> %274, <2 x i64>* %280, align 8, !alias.scope !18, !noalias !15
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 -2
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %281, i64 -1
  %283 = bitcast %"class.sh::TIntermNode"** %282 to <2 x i64>*
  store <2 x i64> %278, <2 x i64>* %283, align 8, !alias.scope !18, !noalias !15
  %284 = add i64 %250, 8
  %285 = add i64 %251, -2
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %287, label %249, !llvm.loop !20

287:                                              ; preds = %249, %230
  %288 = phi i64 [ 0, %230 ], [ %284, %249 ]
  %289 = icmp eq i64 %239, 0
  br i1 %289, label %310, label %290

290:                                              ; preds = %287
  %291 = sub i64 0, %288
  %292 = getelementptr i8, i8* %199, i64 -8
  %293 = bitcast i8* %292 to %"class.sh::TIntermNode"**
  %294 = sub i64 0, %288
  %295 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 -1
  %296 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %293, i64 %291
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, i64 %294
  %298 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %297, i64 -1
  %299 = bitcast %"class.sh::TIntermNode"** %298 to <2 x i64>*
  %300 = load <2 x i64>, <2 x i64>* %299, align 8, !alias.scope !15
  %301 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %297, i64 -2
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 -1
  %303 = bitcast %"class.sh::TIntermNode"** %302 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 8, !alias.scope !15
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -1
  %306 = bitcast %"class.sh::TIntermNode"** %305 to <2 x i64>*
  store <2 x i64> %300, <2 x i64>* %306, align 8, !alias.scope !18, !noalias !15
  %307 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %296, i64 -2
  %308 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %307, i64 -1
  %309 = bitcast %"class.sh::TIntermNode"** %308 to <2 x i64>*
  store <2 x i64> %304, <2 x i64>* %309, align 8, !alias.scope !18, !noalias !15
  br label %310

310:                                              ; preds = %287, %290
  %311 = icmp eq i64 %214, %231
  br i1 %311, label %382, label %312

312:                                              ; preds = %310, %216, %209
  %313 = phi %"class.sh::TIntermNode"** [ %200, %216 ], [ %200, %209 ], [ %233, %310 ]
  %314 = phi %"class.sh::TIntermNode"** [ %206, %216 ], [ %206, %209 ], [ %235, %310 ]
  %315 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %314, i64 -1
  %316 = ptrtoint %"class.sh::TIntermNode"** %315 to i64
  %317 = sub i64 %316, %205
  %318 = lshr i64 %317, 3
  %319 = add nuw nsw i64 %318, 1
  %320 = and i64 %319, 7
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %333, label %322

322:                                              ; preds = %312, %322
  %323 = phi %"class.sh::TIntermNode"** [ %326, %322 ], [ %313, %312 ]
  %324 = phi %"class.sh::TIntermNode"** [ %327, %322 ], [ %314, %312 ]
  %325 = phi i64 [ %331, %322 ], [ %320, %312 ]
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %323, i64 -1
  %327 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %324, i64 -1
  %328 = bitcast %"class.sh::TIntermNode"** %327 to i64*
  %329 = load i64, i64* %328, align 8
  %330 = bitcast %"class.sh::TIntermNode"** %326 to i64*
  store i64 %329, i64* %330, align 8
  %331 = add i64 %325, -1
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %322, !llvm.loop !21

333:                                              ; preds = %322, %312
  %334 = phi %"class.sh::TIntermNode"** [ undef, %312 ], [ %326, %322 ]
  %335 = phi %"class.sh::TIntermNode"** [ %313, %312 ], [ %326, %322 ]
  %336 = phi %"class.sh::TIntermNode"** [ %314, %312 ], [ %327, %322 ]
  %337 = icmp ult i64 %317, 56
  br i1 %337, label %382, label %338

338:                                              ; preds = %333, %338
  %339 = phi %"class.sh::TIntermNode"** [ %376, %338 ], [ %335, %333 ]
  %340 = phi %"class.sh::TIntermNode"** [ %377, %338 ], [ %336, %333 ]
  %341 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -1
  %342 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -1
  %343 = bitcast %"class.sh::TIntermNode"** %342 to i64*
  %344 = load i64, i64* %343, align 8
  %345 = bitcast %"class.sh::TIntermNode"** %341 to i64*
  store i64 %344, i64* %345, align 8
  %346 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -2
  %347 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -2
  %348 = bitcast %"class.sh::TIntermNode"** %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  store i64 %349, i64* %350, align 8
  %351 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -3
  %352 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -3
  %353 = bitcast %"class.sh::TIntermNode"** %352 to i64*
  %354 = load i64, i64* %353, align 8
  %355 = bitcast %"class.sh::TIntermNode"** %351 to i64*
  store i64 %354, i64* %355, align 8
  %356 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -4
  %357 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -4
  %358 = bitcast %"class.sh::TIntermNode"** %357 to i64*
  %359 = load i64, i64* %358, align 8
  %360 = bitcast %"class.sh::TIntermNode"** %356 to i64*
  store i64 %359, i64* %360, align 8
  %361 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -5
  %362 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -5
  %363 = bitcast %"class.sh::TIntermNode"** %362 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = bitcast %"class.sh::TIntermNode"** %361 to i64*
  store i64 %364, i64* %365, align 8
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -6
  %367 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -6
  %368 = bitcast %"class.sh::TIntermNode"** %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast %"class.sh::TIntermNode"** %366 to i64*
  store i64 %369, i64* %370, align 8
  %371 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -7
  %372 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -7
  %373 = bitcast %"class.sh::TIntermNode"** %372 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = bitcast %"class.sh::TIntermNode"** %371 to i64*
  store i64 %374, i64* %375, align 8
  %376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %339, i64 -8
  %377 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %340, i64 -8
  %378 = bitcast %"class.sh::TIntermNode"** %377 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = bitcast %"class.sh::TIntermNode"** %376 to i64*
  store i64 %379, i64* %380, align 8
  %381 = icmp eq %"class.sh::TIntermNode"** %377, %204
  br i1 %381, label %382, label %338, !llvm.loop !22

382:                                              ; preds = %333, %338, %310, %173
  %383 = phi %"class.sh::TIntermNode"** [ %200, %173 ], [ %233, %310 ], [ %334, %333 ], [ %376, %338 ]
  %384 = ptrtoint %"class.sh::TIntermNode"** %383 to i64
  store i64 %384, i64* %196, align 8
  store i64 %202, i64* %195, align 8
  store i64 %202, i64* %197, align 8
  %385 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32 %50) #10
  %386 = ptrtoint %"class.sh::TIntermConstantUnion"* %385 to i64
  %387 = sub i64 %202, %384
  %388 = ashr exact i64 %387, 3
  %389 = add nsw i64 %388, 1
  %390 = icmp ugt i64 %389, 2305843009213693951
  br i1 %390, label %391, label %393

391:                                              ; preds = %382
  %392 = bitcast %"class.sh::TVector.38"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %392) #11
  unreachable

393:                                              ; preds = %382
  %394 = icmp ult i64 %388, 1152921504606846975
  br i1 %394, label %395, label %400

395:                                              ; preds = %393
  %396 = ashr exact i64 %387, 2
  %397 = icmp ult i64 %396, %389
  %398 = select i1 %397, i64 %389, i64 %396
  %399 = icmp eq i64 %398, 0
  br i1 %399, label %406, label %400

400:                                              ; preds = %395, %393
  %401 = phi i64 [ %398, %395 ], [ 2305843009213693951, %393 ]
  %402 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %403 = shl i64 %401, 3
  %404 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %402, i64 %403) #10
  %405 = bitcast i8* %404 to %"class.sh::TIntermNode"**
  br label %406

406:                                              ; preds = %400, %395
  %407 = phi i64 [ %401, %400 ], [ 0, %395 ]
  %408 = phi %"class.sh::TIntermNode"** [ %405, %400 ], [ null, %395 ]
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 %388
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 %407
  %411 = ptrtoint %"class.sh::TIntermNode"** %410 to i64
  %412 = bitcast %"class.sh::TIntermNode"** %409 to i64*
  store i64 %386, i64* %412, align 8
  %413 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 1
  %414 = ptrtoint %"class.sh::TIntermNode"** %413 to i64
  %415 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %66, align 8
  %416 = ptrtoint %"class.sh::TIntermNode"** %415 to i64
  %417 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %67, align 8
  %418 = icmp eq %"class.sh::TIntermNode"** %417, %415
  br i1 %418, label %588, label %419

419:                                              ; preds = %406
  %420 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  %421 = ptrtoint %"class.sh::TIntermNode"** %420 to i64
  %422 = sub i64 %421, %416
  %423 = lshr i64 %422, 3
  %424 = add nuw nsw i64 %423, 1
  %425 = icmp ult i64 %424, 4
  br i1 %425, label %518, label %426

426:                                              ; preds = %419
  %427 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  %428 = ptrtoint %"class.sh::TIntermNode"** %427 to i64
  %429 = sub i64 %428, %416
  %430 = lshr i64 %429, 3
  %431 = xor i64 %430, -1
  %432 = add nsw i64 %388, %431
  %433 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %408, i64 %432
  %434 = xor i64 %430, -1
  %435 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 %434
  %436 = icmp ult %"class.sh::TIntermNode"** %433, %417
  %437 = icmp ult %"class.sh::TIntermNode"** %435, %409
  %438 = and i1 %436, %437
  br i1 %438, label %518, label %439

439:                                              ; preds = %426
  %440 = and i64 %424, 4611686018427387900
  %441 = sub nsw i64 0, %440
  %442 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 %441
  %443 = sub nsw i64 0, %440
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 %443
  %445 = add nsw i64 %440, -4
  %446 = lshr exact i64 %445, 2
  %447 = add nuw nsw i64 %446, 1
  %448 = and i64 %447, 1
  %449 = icmp eq i64 %445, 0
  br i1 %449, label %496, label %450

450:                                              ; preds = %439
  %451 = sub nuw nsw i64 %447, %448
  %452 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %453 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  %454 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %455 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  br label %456

456:                                              ; preds = %456, %450
  %457 = phi i64 [ 0, %450 ], [ %491, %456 ]
  %458 = phi i64 [ %451, %450 ], [ %492, %456 ]
  %459 = sub i64 0, %457
  %460 = sub i64 0, %457
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %452, i64 %459
  %462 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %453, i64 %460
  %463 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 -1
  %464 = bitcast %"class.sh::TIntermNode"** %463 to <2 x i64>*
  %465 = load <2 x i64>, <2 x i64>* %464, align 8, !alias.scope !23
  %466 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %462, i64 -2
  %467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -1
  %468 = bitcast %"class.sh::TIntermNode"** %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 8, !alias.scope !23
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %461, i64 -1
  %471 = bitcast %"class.sh::TIntermNode"** %470 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %471, align 8, !alias.scope !26, !noalias !23
  %472 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %461, i64 -2
  %473 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %472, i64 -1
  %474 = bitcast %"class.sh::TIntermNode"** %473 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %474, align 8, !alias.scope !26, !noalias !23
  %475 = sub nuw nsw i64 -4, %457
  %476 = sub nuw nsw i64 -4, %457
  %477 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %454, i64 %475
  %478 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %455, i64 %476
  %479 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %478, i64 -1
  %480 = bitcast %"class.sh::TIntermNode"** %479 to <2 x i64>*
  %481 = load <2 x i64>, <2 x i64>* %480, align 8, !alias.scope !23
  %482 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %478, i64 -2
  %483 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -1
  %484 = bitcast %"class.sh::TIntermNode"** %483 to <2 x i64>*
  %485 = load <2 x i64>, <2 x i64>* %484, align 8, !alias.scope !23
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %477, i64 -1
  %487 = bitcast %"class.sh::TIntermNode"** %486 to <2 x i64>*
  store <2 x i64> %481, <2 x i64>* %487, align 8, !alias.scope !26, !noalias !23
  %488 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %477, i64 -2
  %489 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %488, i64 -1
  %490 = bitcast %"class.sh::TIntermNode"** %489 to <2 x i64>*
  store <2 x i64> %485, <2 x i64>* %490, align 8, !alias.scope !26, !noalias !23
  %491 = add i64 %457, 8
  %492 = add i64 %458, -2
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %456, !llvm.loop !28

494:                                              ; preds = %456
  %495 = sub nuw nsw i64 -8, %457
  br label %496

496:                                              ; preds = %494, %439
  %497 = phi i64 [ 0, %439 ], [ %495, %494 ]
  %498 = icmp eq i64 %448, 0
  br i1 %498, label %516, label %499

499:                                              ; preds = %496
  %500 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %501 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %417, i64 -1
  %502 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %500, i64 %497
  %503 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %501, i64 %497
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %503, i64 -1
  %505 = bitcast %"class.sh::TIntermNode"** %504 to <2 x i64>*
  %506 = load <2 x i64>, <2 x i64>* %505, align 8, !alias.scope !23
  %507 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %503, i64 -2
  %508 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %507, i64 -1
  %509 = bitcast %"class.sh::TIntermNode"** %508 to <2 x i64>*
  %510 = load <2 x i64>, <2 x i64>* %509, align 8, !alias.scope !23
  %511 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %502, i64 -1
  %512 = bitcast %"class.sh::TIntermNode"** %511 to <2 x i64>*
  store <2 x i64> %506, <2 x i64>* %512, align 8, !alias.scope !26, !noalias !23
  %513 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %502, i64 -2
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %513, i64 -1
  %515 = bitcast %"class.sh::TIntermNode"** %514 to <2 x i64>*
  store <2 x i64> %510, <2 x i64>* %515, align 8, !alias.scope !26, !noalias !23
  br label %516

516:                                              ; preds = %496, %499
  %517 = icmp eq i64 %424, %440
  br i1 %517, label %588, label %518

518:                                              ; preds = %516, %426, %419
  %519 = phi %"class.sh::TIntermNode"** [ %409, %426 ], [ %409, %419 ], [ %442, %516 ]
  %520 = phi %"class.sh::TIntermNode"** [ %417, %426 ], [ %417, %419 ], [ %444, %516 ]
  %521 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %520, i64 -1
  %522 = ptrtoint %"class.sh::TIntermNode"** %521 to i64
  %523 = sub i64 %522, %416
  %524 = lshr i64 %523, 3
  %525 = add nuw nsw i64 %524, 1
  %526 = and i64 %525, 7
  %527 = icmp eq i64 %526, 0
  br i1 %527, label %539, label %528

528:                                              ; preds = %518, %528
  %529 = phi %"class.sh::TIntermNode"** [ %532, %528 ], [ %519, %518 ]
  %530 = phi %"class.sh::TIntermNode"** [ %533, %528 ], [ %520, %518 ]
  %531 = phi i64 [ %537, %528 ], [ %526, %518 ]
  %532 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %529, i64 -1
  %533 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %530, i64 -1
  %534 = bitcast %"class.sh::TIntermNode"** %533 to i64*
  %535 = load i64, i64* %534, align 8
  %536 = bitcast %"class.sh::TIntermNode"** %532 to i64*
  store i64 %535, i64* %536, align 8
  %537 = add i64 %531, -1
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %539, label %528, !llvm.loop !29

539:                                              ; preds = %528, %518
  %540 = phi %"class.sh::TIntermNode"** [ undef, %518 ], [ %532, %528 ]
  %541 = phi %"class.sh::TIntermNode"** [ %519, %518 ], [ %532, %528 ]
  %542 = phi %"class.sh::TIntermNode"** [ %520, %518 ], [ %533, %528 ]
  %543 = icmp ult i64 %523, 56
  br i1 %543, label %588, label %544

544:                                              ; preds = %539, %544
  %545 = phi %"class.sh::TIntermNode"** [ %582, %544 ], [ %541, %539 ]
  %546 = phi %"class.sh::TIntermNode"** [ %583, %544 ], [ %542, %539 ]
  %547 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -1
  %548 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -1
  %549 = bitcast %"class.sh::TIntermNode"** %548 to i64*
  %550 = load i64, i64* %549, align 8
  %551 = bitcast %"class.sh::TIntermNode"** %547 to i64*
  store i64 %550, i64* %551, align 8
  %552 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -2
  %553 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -2
  %554 = bitcast %"class.sh::TIntermNode"** %553 to i64*
  %555 = load i64, i64* %554, align 8
  %556 = bitcast %"class.sh::TIntermNode"** %552 to i64*
  store i64 %555, i64* %556, align 8
  %557 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -3
  %558 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -3
  %559 = bitcast %"class.sh::TIntermNode"** %558 to i64*
  %560 = load i64, i64* %559, align 8
  %561 = bitcast %"class.sh::TIntermNode"** %557 to i64*
  store i64 %560, i64* %561, align 8
  %562 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -4
  %563 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -4
  %564 = bitcast %"class.sh::TIntermNode"** %563 to i64*
  %565 = load i64, i64* %564, align 8
  %566 = bitcast %"class.sh::TIntermNode"** %562 to i64*
  store i64 %565, i64* %566, align 8
  %567 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -5
  %568 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -5
  %569 = bitcast %"class.sh::TIntermNode"** %568 to i64*
  %570 = load i64, i64* %569, align 8
  %571 = bitcast %"class.sh::TIntermNode"** %567 to i64*
  store i64 %570, i64* %571, align 8
  %572 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -6
  %573 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -6
  %574 = bitcast %"class.sh::TIntermNode"** %573 to i64*
  %575 = load i64, i64* %574, align 8
  %576 = bitcast %"class.sh::TIntermNode"** %572 to i64*
  store i64 %575, i64* %576, align 8
  %577 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -7
  %578 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -7
  %579 = bitcast %"class.sh::TIntermNode"** %578 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = bitcast %"class.sh::TIntermNode"** %577 to i64*
  store i64 %580, i64* %581, align 8
  %582 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %545, i64 -8
  %583 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %546, i64 -8
  %584 = bitcast %"class.sh::TIntermNode"** %583 to i64*
  %585 = load i64, i64* %584, align 8
  %586 = bitcast %"class.sh::TIntermNode"** %582 to i64*
  store i64 %585, i64* %586, align 8
  %587 = icmp eq %"class.sh::TIntermNode"** %583, %415
  br i1 %587, label %588, label %544, !llvm.loop !30

588:                                              ; preds = %539, %544, %516, %406
  %589 = phi %"class.sh::TIntermNode"** [ %409, %406 ], [ %442, %516 ], [ %540, %539 ], [ %582, %544 ]
  %590 = ptrtoint %"class.sh::TIntermNode"** %589 to i64
  store i64 %590, i64* %196, align 8
  store i64 %414, i64* %195, align 8
  store i64 %411, i64* %197, align 8
  %591 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0
  %592 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 8
  %593 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %592, align 8
  %594 = call %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser22convertBuiltinFunctionEPNS_16TIntermAggregateEE18kAtomicAddFunction, i64 0, i64 0), %"class.sh::TVector.38"* nonnull %5, %"class.sh::TSymbolTable"* dereferenceable(1720) %593, i32 310) #10
  br i1 %51, label %595, label %602

595:                                              ; preds = %588
  %596 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #10
  %597 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %596, i64 240) #10
  %598 = bitcast i8* %597 to %"class.sh::TIntermBinary"*
  %599 = call %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32 1) #10
  %600 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %599, i64 0, i32 0, i32 0
  call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %598, i8 zeroext 14, %"class.sh::TIntermTyped"* %594, %"class.sh::TIntermTyped"* %600) #10
  %601 = bitcast i8* %597 to %"class.sh::TIntermTyped"*
  br label %602

602:                                              ; preds = %595, %588
  %603 = phi %"class.sh::TIntermTyped"* [ %601, %595 ], [ %594, %588 ]
  %604 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %603, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %591, %"class.sh::TIntermNode"* %604, i32 1) #10
  %605 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %66, align 8
  %606 = icmp eq %"class.sh::TIntermNode"** %605, null
  br i1 %606, label %609, label %607

607:                                              ; preds = %602
  %608 = ptrtoint %"class.sh::TIntermNode"** %605 to i64
  store i64 %608, i64* %195, align 8
  br label %609

609:                                              ; preds = %607, %602
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #10
  br label %610

610:                                              ; preds = %609, %34, %33, %3
  %611 = phi i1 [ true, %3 ], [ false, %33 ], [ false, %609 ], [ true, %34 ]
  ret i1 %611
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_130RewriteAtomicCountersTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::TVector.38", align 16
  %6 = alloca %"class.sh::TIntermBlock"*, align 8
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 6
  %8 = load i8, i8* %7, align 4, !range !31
  %9 = icmp eq i8 %8, 0
  %10 = ptrtoint %"class.sh::TIntermDeclaration"* %2 to i64
  br i1 %9, label %92, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)***
  %13 = load %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)** %13, i64 27
  %15 = load %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.38"* (%"class.sh::TIntermDeclaration"*)** %14, align 8
  %16 = tail call %"class.sh::TVector.38"* %15(%"class.sh::TIntermDeclaration"* %2) #10
  %17 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, align 8
  %20 = bitcast %"class.sh::TIntermNode"* %19 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %21 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %21, i64 4
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermTyped"* %23(%"class.sh::TIntermNode"* %19) #10
  %25 = bitcast %"class.sh::TIntermTyped"* %24 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %26 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, i64 31
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call dereferenceable(184) %"class.sh::TType"* %28(%"class.sh::TIntermTyped"* %24) #10
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 6
  br i1 %32, label %33, label %92

33:                                               ; preds = %11
  %34 = bitcast %"class.sh::TVector.38"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %5, i64 0, i32 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %5, i64 0, i32 0, i32 0, i32 1
  %37 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 0, i64 24, i1 false) #10
  %38 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 7
  %39 = bitcast %"class.sh::TIntermBlock"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #10
  %40 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %41 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %42 = bitcast %"class.sh::TIntermNode"*** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.39"* %40 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %43, %45
  %47 = ashr exact i64 %46, 3
  %48 = icmp ult i64 %47, 2
  br i1 %48, label %55, label %49

49:                                               ; preds = %33
  %50 = inttoptr i64 %45 to %"class.sh::TIntermNode"**
  %51 = add nsw i64 %47, -2
  %52 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 %51
  %53 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %52, align 8
  %54 = bitcast %"class.sh::TIntermNode"* %53 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %55

55:                                               ; preds = %33, %49
  %56 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %54, %49 ], [ null, %33 ]
  %57 = phi %"class.sh::TIntermNode"* [ %53, %49 ], [ null, %33 ]
  %58 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %56, align 8
  %59 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %58, i64 8
  %60 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %59, align 8
  %61 = tail call %"class.sh::TIntermBlock"* %60(%"class.sh::TIntermNode"* %57) #10
  store %"class.sh::TIntermBlock"* %61, %"class.sh::TIntermBlock"** %6, align 8
  %62 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %63 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %62, align 8
  %64 = getelementptr inbounds %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser", %"class.sh::(anonymous namespace)::RewriteAtomicCountersTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %65 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %64, align 8
  %66 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %63, %65
  br i1 %66, label %67, label %85

67:                                               ; preds = %55
  %68 = icmp eq %"class.sh::TIntermBlock"* %61, null
  %69 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %61, i64 0, i32 1
  %70 = select i1 %68, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %69
  %71 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %63, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %70, %"class.sh::TIntermAggregateBase"** %71, align 8
  %72 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %63, i64 0, i32 1
  %73 = bitcast %"class.sh::TIntermNode"** %72 to i64*
  store i64 %10, i64* %73, align 8
  %74 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %63, i64 0, i32 2
  %75 = bitcast %"class.sh::TVector.38"* %5 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 16
  %77 = bitcast %"class.sh::TVector.38"* %74 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = bitcast %"class.sh::TIntermNode"*** %37 to i64*
  %79 = load i64, i64* %78, align 16
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %63, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast %"class.sh::TIntermNode"*** %80 to i64*
  store i64 %79, i64* %81, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 0, i64 24, i1 false) #10
  %82 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %63, i64 1
  %83 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %82 to i64
  %84 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %62 to i64*
  store i64 %83, i64* %84, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  br label %91

85:                                               ; preds = %55
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.142"* %38, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %6, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TVector.38"* nonnull dereferenceable(24) %5) #10
  %86 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #10
  %87 = icmp eq %"class.sh::TIntermNode"** %86, null
  br i1 %87, label %91, label %88

88:                                               ; preds = %85
  %89 = ptrtoint %"class.sh::TIntermNode"** %86 to i64
  %90 = bitcast %"class.sh::TIntermNode"*** %36 to i64*
  store i64 %89, i64* %90, align 8
  br label %91

91:                                               ; preds = %67, %85, %88
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #10
  br label %92

92:                                               ; preds = %91, %11, %3
  %93 = phi i1 [ true, %3 ], [ false, %91 ], [ true, %11 ]
  ret i1 %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #2

declare %"class.sh::TIntermTyped"* @_ZN2sh29CreateBuiltInFunctionCallNodeEPKcPNS_7TVectorIPNS_11TIntermNodeEEERKNS_12TSymbolTableEi(i8*, %"class.sh::TVector.38"*, %"class.sh::TSymbolTable"* dereferenceable(1720), i32) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh9TFunction23isAtomicCounterFunctionEv(%"class.sh::TFunction"*) local_unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh14CreateUIntNodeEj(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.142"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector.38"* dereferenceable(24)) local_unnamed_addr #5 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.142"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.142"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #11
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #13
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector.38"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #10
  %50 = bitcast %"class.sh::TVector.38"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector.38"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector.38", %"class.sh::TVector.38"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector.38"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #10
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.142", %"class.std::__1::vector.142"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #10
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector.38"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #10
  %82 = bitcast %"class.sh::TVector.38"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector.38"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector.38"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #10
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #13
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readonly }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN2sh16TLayoutQualifier6CreateEv: argument 0"}
!14 = distinct !{!14, !"_ZN2sh16TLayoutQualifier6CreateEv"}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !8}
!21 = distinct !{!21, !10}
!22 = distinct !{!22, !8}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !10}
!30 = distinct !{!30, !8}
!31 = !{i8 0, i8 2}
