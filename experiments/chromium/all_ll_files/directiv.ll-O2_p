; ModuleID = '../../third_party/nasm/asm/directiv.c'
source_filename = "../../third_party/nasm/asm/directiv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type opaque
%struct.src_location = type { i8*, i32 }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.location = type { i64, i32, i32 }
%struct.iflag_t = type { [4 x i32] }
%struct.perfect_hash = type { i64, i32, i32, i32, i32, i16*, i8** }
%struct.cpunames = type { i8*, i32 }
%struct.tokenval = type { i8*, i64, i64, i32, i8 }
%struct.expr = type { i32, i64 }
%struct.eval_hints = type { i64, i32 }

@.str = private unnamed_addr constant [23 x i8] c"invalid directive line\00", align 1
@ofmt = external local_unnamed_addr global %struct.ofmt*, align 8
@.str.1 = private unnamed_addr constant [38 x i8] c"../../third_party/nasm/asm/directiv.c\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"unrecognized directive [%s]\00", align 1
@globalbits = external local_unnamed_addr global i32, align 4
@.str.3 = private unnamed_addr constant [33 x i8] c"segment name `%s' not recognized\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"segment alignment `%s' is not power of two\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"absurdly large segment alignment `%s' (2^%d)\00", align 1
@location = external local_unnamed_addr global %struct.location, align 8
@.str.6 = private unnamed_addr constant [39 x i8] c"identifier expected after %s, got `%s'\00", align 1
@.str.7 = private unnamed_addr constant [40 x i8] c"%s size specified in common declaration\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"invalid syntax in %s declaration\00", align 1
@.str.11 = private unnamed_addr constant [58 x i8] c"cannot use non-relocatable expression as ABSOLUTE address\00", align 1
@absolute = external local_unnamed_addr global %struct.location, align 8
@.str.12 = private unnamed_addr constant [25 x i8] c"invalid ABSOLUTE address\00", align 1
@in_absolute = external local_unnamed_addr global i8, align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"identifier expected after DEBUG\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"DEBUG identifier too long\00", align 1
@dfmt = external local_unnamed_addr global %struct.dfmt*, align 8
@.str.15 = private unnamed_addr constant [5 x i8] c"push\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"pop\00", align 1
@cpu = external local_unnamed_addr global %struct.iflag_t, align 4
@user_nolist = external local_unnamed_addr global i8, align 1
@globalrel = external local_unnamed_addr global i32, align 4
@globalbnd = external local_unnamed_addr global i32, align 4
@.str.17 = private unnamed_addr constant [30 x i8] c"unknown 'float' directive: %s\00", align 1
@.str.18 = private unnamed_addr constant [36 x i8] c"invalid parameter to [%s] directive\00", align 1
@directive_hash = external constant %struct.perfect_hash, align 8
@.str.19 = private unnamed_addr constant [55 x i8] c"cannot specify 32-bit segment on processor below a 386\00", align 1
@.str.20 = private unnamed_addr constant [59 x i8] c"cannot specify 64-bit segment on processor below an x86-64\00", align 1
@.str.21 = private unnamed_addr constant [55 x i8] c"`%s' is not a valid segment size; must be 16, 32 or 64\00", align 1
@nasm_ctype_tab = external local_unnamed_addr global [256 x i16], align 16
@_pass_type = external local_unnamed_addr global i32, align 4
@get_cpu.cpunames = internal unnamed_addr constant [34 x %struct.cpunames] [%struct.cpunames { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i32 96 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 97 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i32 98 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i32 99 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i32 100 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), i32 101 }, %struct.cpunames { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i32 0, i32 0), i32 101 }, %struct.cpunames { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i32 0, i32 0), i32 101 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i32 0, i32 0), i32 102 }, %struct.cpunames { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 102 }, %struct.cpunames { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i32 102 }, %struct.cpunames { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), i32 102 }, %struct.cpunames { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 102 }, %struct.cpunames { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i32 102 }, %struct.cpunames { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0), i32 103 }, %struct.cpunames { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i32 103 }, %struct.cpunames { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0), i32 104 }, %struct.cpunames { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i32 0, i32 0), i32 104 }, %struct.cpunames { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i32 0, i32 0), i32 105 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i32 106 }, %struct.cpunames { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i32 0, i32 0), i32 106 }, %struct.cpunames { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 111 }, %struct.cpunames { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0), i32 111 }, %struct.cpunames { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i32 111 }, %struct.cpunames { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i32 111 }, %struct.cpunames { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i32 111 }, %struct.cpunames { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.48, i32 0, i32 0), i32 107 }, %struct.cpunames { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.49, i32 0, i32 0), i32 108 }, %struct.cpunames { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), i32 109 }, %struct.cpunames { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), i32 110 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i32 0, i32 0), i32 112 }, %struct.cpunames { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.53, i32 0, i32 0), i32 112 }, %struct.cpunames { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i32 0, i32 0), i32 112 }, %struct.cpunames { i8* null, i32 112 }], align 16
@.str.22 = private unnamed_addr constant [5 x i8] c"8086\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"186\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"286\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"386\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"486\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"586\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"pentium\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"pentiummmx\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"686\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"p6\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"ppro\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"pentiumpro\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"p2\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"pentiumii\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"p3\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"katmai\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"p4\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"willamette\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"prescott\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"x64\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c"x86-64\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"ia64\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"ia-64\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"itanium\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"itanic\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"merced\00", align 1
@.str.48 = private unnamed_addr constant [8 x i8] c"nehalem\00", align 1
@.str.49 = private unnamed_addr constant [9 x i8] c"westmere\00", align 1
@.str.50 = private unnamed_addr constant [12 x i8] c"sandybridge\00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"ivybridge\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"any\00", align 1
@.str.53 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.55 = private unnamed_addr constant [24 x i8] c"unknown 'cpu' type '%s'\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @process_directives(i8*) local_unnamed_addr #0 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca %struct.tokenval, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca [128 x i8], align 16
  %7 = bitcast %struct.tokenval* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = tail call i8* @nasm_skip_spaces(i8* %0) #7
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 91
  br i1 %10, label %11, label %313

11:                                               ; preds = %1
  %12 = tail call i8* @strchr(i8* %8, i32 93) #8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %31, label %14

14:                                               ; preds = %11
  %15 = tail call i8* @strchr(i8* %8, i32 59) #8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %14
  %18 = icmp ult i8* %15, %12
  br i1 %18, label %31, label %19

19:                                               ; preds = %17
  store i8 0, i8* %15, align 1
  br label %20

20:                                               ; preds = %19, %14
  store i8 0, i8* %12, align 1
  %21 = getelementptr inbounds i8, i8* %12, i64 -1
  %22 = tail call i8* @nasm_zap_spaces_rev(i8* %21) #7
  %23 = getelementptr inbounds i8, i8* %8, i64 1
  %24 = tail call i8* @nasm_skip_spaces(i8* %23) #7
  %25 = tail call i8* @nasm_skip_word(i8* %24) #7
  %26 = icmp eq i8* %25, null
  br i1 %26, label %31, label %27

27:                                               ; preds = %20
  store i8 0, i8* %25, align 1
  %28 = getelementptr inbounds i8, i8* %25, i64 1
  %29 = tail call i8* @nasm_skip_spaces(i8* %28) #7
  %30 = tail call i32 @perfhash_find(%struct.perfect_hash* nonnull @directive_hash, i8* %24) #7
  switch i32 %30, label %32 [
    i32 0, label %313
    i32 2, label %31
    i32 1, label %38
    i32 15, label %39
    i32 14, label %39
    i32 17, label %52
    i32 4, label %78
    i32 11, label %98
    i32 12, label %94
    i32 9, label %95
    i32 19, label %96
    i32 5, label %97
    i32 3, label %170
    i32 7, label %187
    i32 16, label %243
    i32 6, label %258
    i32 13, label %288
    i32 8, label %293
    i32 10, label %304
    i32 18, label %308
  ]

31:                                               ; preds = %20, %17, %11, %27
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0)) #7
  br label %310

32:                                               ; preds = %27
  %33 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %34 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %33, i64 0, i32 17
  %35 = load i32 (i32, i8*)*, i32 (i32, i8*)** %34, align 8
  %36 = tail call i32 %35(i32 %30, i8* %29) #7
  switch i32 %36, label %37 [
    i32 0, label %38
    i32 1, label %310
    i32 2, label %310
    i32 3, label %309
  ]

37:                                               ; preds = %32
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 230) #9
  unreachable

38:                                               ; preds = %27, %32
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* %24) #7
  br label %310

39:                                               ; preds = %27, %27
  %40 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %40) #7
  %41 = load i32, i32* @globalbits, align 4
  store i32 %41, i32* %4, align 4
  %42 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %43 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %42, i64 0, i32 13
  %44 = load i32 (i8*, i32*)*, i32 (i8*, i32*)** %43, align 8
  %45 = call i32 %44(i8* %29, i32* nonnull %4) #7
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %47, label %48

47:                                               ; preds = %39
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %29) #7
  br label %51

48:                                               ; preds = %39
  %49 = load i32, i32* %4, align 4
  store i32 %49, i32* @globalbits, align 4
  %50 = call i64 @switch_segment(i32 %45) #7
  br label %51

51:                                               ; preds = %48, %47
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %40) #7
  br label %310

52:                                               ; preds = %27
  %53 = load i8, i8* %29, align 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %310, label %55

55:                                               ; preds = %52
  tail call void @stdscan_reset() #7
  tail call void @stdscan_set(i8* %29) #7
  %56 = getelementptr inbounds %struct.tokenval, %struct.tokenval* %3, i64 0, i32 3
  store i32 -1, i32* %56, align 8
  %57 = call %struct.expr* @evaluate(i32 (i8*, %struct.tokenval*)* nonnull @stdscan, i8* null, %struct.tokenval* nonnull %3, i32* null, i1 zeroext true, %struct.eval_hints* null) #7
  %58 = icmp eq %struct.expr* %57, null
  br i1 %58, label %310, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.expr, %struct.expr* %57, i64 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = call i64 @llvm.ctpop.i64(i64 %61), !range !2
  %63 = icmp eq i64 %62, 1
  br i1 %63, label %65, label %64

64:                                               ; preds = %59
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i64 0, i64 0), i8* %29) #7
  br label %70

65:                                               ; preds = %59
  %66 = icmp ugt i64 %61, 2147483647
  br i1 %66, label %67, label %70

67:                                               ; preds = %65
  %68 = call i64 asm "bsrq $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %61, i64 0) #8, !srcloc !3
  %69 = trunc i64 %68 to i32
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0), i8* %29, i32 %69) #7
  br label %70

70:                                               ; preds = %65, %67, %64
  %71 = load i32, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %310, label %73

73:                                               ; preds = %70
  %74 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %75 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %74, i64 0, i32 15
  %76 = load void (i32, i32)*, void (i32, i32)** %75, align 8
  %77 = trunc i64 %61 to i32
  call void %76(i32 %71, i32 %77) #7
  br label %310

78:                                               ; preds = %27
  %79 = tail call i64 @strtol(i8* nocapture %29, i8** null, i32 10) #7
  %80 = trunc i64 %79 to i32
  switch i32 %80, label %91 [
    i32 16, label %92
    i32 32, label %81
    i32 64, label %86
  ]

81:                                               ; preds = %78
  %82 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  %83 = and i32 %82, 131064
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %92

85:                                               ; preds = %81
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.19, i64 0, i64 0)) #7
  br label %92

86:                                               ; preds = %78
  %87 = load i32, i32* getelementptr inbounds (%struct.iflag_t, %struct.iflag_t* @cpu, i64 0, i32 0, i64 3), align 4
  %88 = and i32 %87, 130048
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %86
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20, i64 0, i64 0)) #7
  br label %92

91:                                               ; preds = %78
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.21, i64 0, i64 0), i8* %29) #7
  br label %92

92:                                               ; preds = %78, %81, %85, %86, %90, %91
  %93 = phi i32 [ 16, %91 ], [ 64, %86 ], [ 16, %90 ], [ 32, %81 ], [ 16, %85 ], [ %80, %78 ]
  store i32 %93, i32* @globalbits, align 4
  br label %310

94:                                               ; preds = %27
  br label %98

95:                                               ; preds = %27
  br label %98

96:                                               ; preds = %27
  br label %98

97:                                               ; preds = %27
  br label %98

98:                                               ; preds = %27, %97, %96, %95, %94
  %99 = phi i32 [ 5, %97 ], [ 4, %96 ], [ 3, %95 ], [ 1, %94 ], [ 2, %27 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #7
  store i8 -86, i8* %5, align 1
  %100 = load i8, i8* %29, align 1
  %101 = icmp eq i8 %100, 36
  %102 = getelementptr inbounds i8, i8* %29, i64 1
  %103 = select i1 %101, i8* %102, i8* %29
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = and i16 %107, 256
  %109 = icmp eq i16 %108, 0
  br i1 %109, label %128, label %110

110:                                              ; preds = %98, %121
  %111 = phi i8* [ %113, %121 ], [ %103, %98 ]
  %112 = phi i8 [ %124, %121 ], [ 1, %98 ]
  %113 = getelementptr inbounds i8, i8* %111, i64 1
  %114 = load i8, i8* %113, align 1
  switch i8 %114, label %115 [
    i8 0, label %125
    i8 58, label %125
  ]

115:                                              ; preds = %110
  %116 = zext i8 %114 to i64
  %117 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = and i16 %118, 2
  %120 = icmp eq i16 %119, 0
  br i1 %120, label %121, label %125

121:                                              ; preds = %115
  %122 = trunc i16 %118 to i8
  %123 = icmp slt i8 %122, 0
  %124 = select i1 %123, i8 %112, i8 0
  br label %110

125:                                              ; preds = %115, %110, %110
  %126 = and i8 %112, 1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %98, %125
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0), i8* %24, i8* %103) #7
  br label %169

129:                                              ; preds = %125
  %130 = zext i8 %114 to i64
  %131 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = and i16 %132, 2
  %134 = icmp eq i16 %133, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds i8, i8* %111, i64 2
  store i8 0, i8* %113, align 1
  %137 = tail call i8* @nasm_skip_spaces(i8* %136) #7
  %138 = tail call i8* @strchr(i8* %137, i32 58) #8
  br label %139

139:                                              ; preds = %129, %135
  %140 = phi i8* [ %138, %135 ], [ %113, %129 ]
  %141 = phi i8* [ %137, %135 ], [ null, %129 ]
  %142 = icmp eq i8* %140, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = load i8, i8* %140, align 1
  %145 = icmp eq i8 %144, 58
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  %147 = getelementptr inbounds i8, i8* %140, i64 1
  store i8 0, i8* %140, align 1
  br label %148

148:                                              ; preds = %143, %139, %146
  %149 = phi i8* [ %147, %146 ], [ null, %139 ], [ null, %143 ]
  %150 = icmp eq i32 %99, 5
  %151 = icmp ne i8* %141, null
  br i1 %150, label %152, label %160

152:                                              ; preds = %148
  br i1 %151, label %153, label %157

153:                                              ; preds = %152
  %154 = call i64 @readnum(i8* nonnull %141, i8* nonnull %5) #7
  %155 = load i8, i8* %5, align 1
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %162, label %157

157:                                              ; preds = %152, %153
  %158 = phi i64 [ %154, %153 ], [ 0, %152 ]
  %159 = select i1 %151, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0)
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0), i8* %159) #7
  br label %162

160:                                              ; preds = %148
  br i1 %151, label %161, label %162

161:                                              ; preds = %160
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i64 0, i64 0), i8* %24) #7
  br label %162

162:                                              ; preds = %153, %160, %161, %157
  %163 = phi i64 [ %158, %157 ], [ 0, %161 ], [ 0, %160 ], [ %154, %153 ]
  %164 = call zeroext i1 @declare_label(i8* %103, i32 %99, i8* %149) #7
  %165 = add nsw i32 %99, -3
  %166 = icmp ult i32 %165, 3
  %167 = and i1 %166, %164
  br i1 %167, label %168, label %169

168:                                              ; preds = %162
  call void @define_label(i8* %103, i32 0, i64 %163, i1 zeroext false) #7
  br label %169

169:                                              ; preds = %168, %162, %128
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #7
  br label %310

170:                                              ; preds = %27
  tail call void @stdscan_reset() #7
  tail call void @stdscan_set(i8* %29) #7
  %171 = getelementptr inbounds %struct.tokenval, %struct.tokenval* %3, i64 0, i32 3
  store i32 -1, i32* %171, align 8
  %172 = call %struct.expr* @evaluate(i32 (i8*, %struct.tokenval*)* nonnull @stdscan, i8* null, %struct.tokenval* nonnull %3, i32* null, i1 zeroext true, %struct.eval_hints* null) #7
  %173 = icmp eq %struct.expr* %172, null
  br i1 %173, label %180, label %174

174:                                              ; preds = %170
  %175 = call zeroext i1 @is_reloc(%struct.expr* nonnull %172) #7
  br i1 %175, label %177, label %176

176:                                              ; preds = %174
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.11, i64 0, i64 0)) #7
  br label %185

177:                                              ; preds = %174
  %178 = call i32 @reloc_seg(%struct.expr* nonnull %172) #7
  store i32 %178, i32* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 1), align 8
  %179 = call i64 @reloc_value(%struct.expr* nonnull %172) #7
  store i64 %179, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %185

180:                                              ; preds = %170
  %181 = load i32, i32* @_pass_type, align 4
  %182 = icmp ult i32 %181, 3
  br i1 %182, label %183, label %184

183:                                              ; preds = %180
  store i64 256, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  br label %185

184:                                              ; preds = %180
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0)) #7
  br label %185

185:                                              ; preds = %183, %184, %176, %177
  store i8 1, i8* @in_absolute, align 1
  store i32 -1, i32* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 1), align 8
  %186 = load i64, i64* getelementptr inbounds (%struct.location, %struct.location* @absolute, i64 0, i32 0), align 8
  store i64 %186, i64* getelementptr inbounds (%struct.location, %struct.location* @location, i64 0, i32 0), align 8
  br label %310

187:                                              ; preds = %27
  %188 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %188) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %188, i8 -86, i64 128, i1 false)
  %189 = load i8, i8* %29, align 1
  %190 = zext i8 %189 to i64
  %191 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = and i16 %192, 256
  %194 = icmp eq i16 %193, 0
  br i1 %194, label %230, label %195

195:                                              ; preds = %187
  %196 = getelementptr inbounds [128 x i8], [128 x i8]* %6, i64 0, i64 127
  %197 = icmp eq i8 %189, 0
  br i1 %197, label %201, label %198

198:                                              ; preds = %195
  %199 = and i16 %192, 2
  %200 = icmp eq i16 %199, 0
  br i1 %200, label %202, label %223

201:                                              ; preds = %195
  store i8 0, i8* %188, align 16
  br label %233

202:                                              ; preds = %198, %217
  %203 = phi i8* [ %213, %217 ], [ %29, %198 ]
  %204 = phi i8* [ %214, %217 ], [ %188, %198 ]
  %205 = phi i8 [ %212, %217 ], [ 0, %198 ]
  %206 = phi i8 [ %215, %217 ], [ %189, %198 ]
  %207 = phi i16 [ %220, %217 ], [ %192, %198 ]
  %208 = icmp ult i8* %204, %196
  br i1 %208, label %209, label %223

209:                                              ; preds = %202
  %210 = trunc i16 %207 to i8
  %211 = icmp slt i8 %210, 0
  %212 = select i1 %211, i8 %205, i8 1
  %213 = getelementptr inbounds i8, i8* %203, i64 1
  %214 = getelementptr inbounds i8, i8* %204, i64 1
  store i8 %206, i8* %204, align 1
  %215 = load i8, i8* %213, align 1
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %223, label %217

217:                                              ; preds = %209
  %218 = zext i8 %215 to i64
  %219 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %218
  %220 = load i16, i16* %219, align 2
  %221 = and i16 %220, 2
  %222 = icmp eq i16 %221, 0
  br i1 %222, label %202, label %223

223:                                              ; preds = %217, %209, %202, %198
  %224 = phi i8* [ %29, %198 ], [ %213, %217 ], [ %213, %209 ], [ %203, %202 ]
  %225 = phi i8* [ %188, %198 ], [ %214, %217 ], [ %214, %209 ], [ %204, %202 ]
  %226 = phi i8 [ 0, %198 ], [ %212, %217 ], [ %212, %209 ], [ %205, %202 ]
  %227 = phi i1 [ false, %198 ], [ false, %217 ], [ false, %209 ], [ true, %202 ]
  store i8 0, i8* %225, align 1
  %228 = and i8 %226, 1
  %229 = icmp eq i8 %228, 0
  br i1 %229, label %231, label %230

230:                                              ; preds = %187, %223
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0)) #7
  br label %242

231:                                              ; preds = %223
  br i1 %227, label %232, label %233

232:                                              ; preds = %231
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0)) #7
  br label %242

233:                                              ; preds = %201, %231
  %234 = phi i8* [ %29, %201 ], [ %224, %231 ]
  %235 = call i8* @nasm_skip_spaces(i8* %234) #7
  %236 = load i32, i32* @_pass_type, align 4
  %237 = icmp ugt i32 %236, 4
  br i1 %237, label %238, label %242

238:                                              ; preds = %233
  %239 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %240 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %239, i64 0, i32 5
  %241 = load void (i8*, i8*)*, void (i8*, i8*)** %240, align 8
  call void %241(i8* nonnull %188, i8* %235) #7
  br label %242

242:                                              ; preds = %233, %238, %232, %230
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %188) #7
  br label %310

243:                                              ; preds = %27
  %244 = tail call i8* @nasm_skip_spaces(i8* %29) #7
  %245 = load i8, i8* %244, align 1
  %246 = or i8 %245, 32
  %247 = icmp eq i8 %246, 112
  br i1 %247, label %248, label %256

248:                                              ; preds = %243
  %249 = tail call i32 @strcasecmp(i8* %244, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0)) #8
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %252

251:                                              ; preds = %248
  tail call void @push_warnings() #7
  br label %256

252:                                              ; preds = %248
  %253 = tail call i32 @strcasecmp(i8* %244, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0)) #8
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %256

255:                                              ; preds = %252
  tail call void @pop_warnings() #7
  br label %256

256:                                              ; preds = %252, %251, %255, %243
  %257 = tail call zeroext i1 @set_warning_status(i8* %244) #7
  br label %310

258:                                              ; preds = %27
  %259 = bitcast <2 x i64>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %259)
  %260 = bitcast <2 x i64>* %2 to %struct.iflag_t*
  %261 = bitcast <2 x i64>* %2 to i32*
  %262 = getelementptr inbounds %struct.iflag_t, %struct.iflag_t* %260, i64 0, i32 0, i64 1
  %263 = getelementptr inbounds %struct.iflag_t, %struct.iflag_t* %260, i64 0, i32 0, i64 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %259, i8 0, i64 16, i1 false) #7
  br label %264

264:                                              ; preds = %269, %258
  %265 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), %258 ], [ %272, %269 ]
  %266 = phi %struct.cpunames* [ getelementptr inbounds ([34 x %struct.cpunames], [34 x %struct.cpunames]* @get_cpu.cpunames, i64 0, i64 0), %258 ], [ %270, %269 ]
  %267 = tail call i32 @strcasecmp(i8* %29, i8* nonnull %265) #8
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %275, label %269

269:                                              ; preds = %264
  %270 = getelementptr inbounds %struct.cpunames, %struct.cpunames* %266, i64 1
  %271 = getelementptr inbounds %struct.cpunames, %struct.cpunames* %270, i64 0, i32 0
  %272 = load i8*, i8** %271, align 8
  %273 = icmp eq i8* %272, null
  br i1 %273, label %274, label %264

274:                                              ; preds = %269
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.55, i64 0, i64 0), i8* %29) #7
  br label %275

275:                                              ; preds = %264, %274
  %276 = phi %struct.cpunames* [ %270, %274 ], [ %266, %264 ]
  %277 = getelementptr inbounds %struct.cpunames, %struct.cpunames* %276, i64 0, i32 1
  %278 = load i32, i32* %277, align 8
  store i32 0, i32* %261, align 16
  %279 = bitcast i32* %262 to i64*
  store i64 -1, i64* %279, align 4
  store i32 0, i32* %263, align 4
  %280 = and i32 %278, 31
  %281 = shl i32 1, %280
  %282 = lshr i32 %278, 5
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds %struct.iflag_t, %struct.iflag_t* %260, i64 0, i32 0, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = or i32 %285, %281
  store i32 %286, i32* %284, align 4
  %287 = load <2 x i64>, <2 x i64>* %2, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %259)
  store <2 x i64> %287, <2 x i64>* bitcast (%struct.iflag_t* @cpu to <2 x i64>*), align 4
  br label %310

288:                                              ; preds = %27
  %289 = tail call i8* @nasm_skip_spaces(i8* %29) #7
  %290 = load i8, i8* %289, align 1
  switch i8 %290, label %309 [
    i8 43, label %291
    i8 45, label %292
  ]

291:                                              ; preds = %288
  store i8 0, i8* @user_nolist, align 1
  br label %310

292:                                              ; preds = %288
  store i8 1, i8* @user_nolist, align 1
  br label %310

293:                                              ; preds = %27
  tail call void @stdscan_reset() #7
  tail call void @stdscan_set(i8* %29) #7
  %294 = getelementptr inbounds %struct.tokenval, %struct.tokenval* %3, i64 0, i32 3
  store i32 -1, i32* %294, align 8
  %295 = call i32 @stdscan(i8* null, %struct.tokenval* nonnull %3) #7
  %296 = icmp eq i32 %295, -1
  br i1 %296, label %309, label %297

297:                                              ; preds = %293
  %298 = getelementptr inbounds %struct.tokenval, %struct.tokenval* %3, i64 0, i32 1
  %299 = load i64, i64* %298, align 8
  switch i64 %299, label %309 [
    i64 277, label %300
    i64 272, label %301
    i64 259, label %302
    i64 260, label %303
  ]

300:                                              ; preds = %297
  store i32 1, i32* @globalrel, align 4
  br label %310

301:                                              ; preds = %297
  store i32 0, i32* @globalrel, align 4
  br label %310

302:                                              ; preds = %297
  store i32 1, i32* @globalbnd, align 4
  br label %310

303:                                              ; preds = %297
  store i32 0, i32* @globalbnd, align 4
  br label %310

304:                                              ; preds = %27
  %305 = tail call i32 @float_option(i8* %29) #7
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %310, label %307

307:                                              ; preds = %304
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i64 0, i64 0), i8* %29) #7
  br label %310

308:                                              ; preds = %27
  tail call void @process_pragma(i8* %29) #7
  br label %310

309:                                              ; preds = %32, %288, %297, %293
  call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18, i64 0, i64 0), i8* %24) #7
  br label %310

310:                                              ; preds = %52, %55, %70, %304, %32, %32, %73, %31, %51, %92, %169, %185, %242, %256, %275, %292, %291, %300, %301, %302, %303, %307, %308, %38, %309
  %311 = phi i32 [ 17, %52 ], [ 17, %55 ], [ 17, %70 ], [ 17, %304 ], [ %30, %32 ], [ %30, %32 ], [ 17, %73 ], [ 17, %31 ], [ %30, %51 ], [ 17, %92 ], [ %30, %169 ], [ 17, %185 ], [ 17, %242 ], [ 17, %256 ], [ 17, %275 ], [ 17, %292 ], [ 17, %291 ], [ 17, %300 ], [ 17, %301 ], [ 17, %302 ], [ 17, %303 ], [ 17, %307 ], [ 17, %308 ], [ %30, %38 ], [ %30, %309 ]
  %312 = icmp ne i32 %311, 0
  br label %313

313:                                              ; preds = %1, %27, %310
  %314 = phi i1 [ %312, %310 ], [ false, %27 ], [ false, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #7
  ret i1 %314
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #2

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #3

declare i64 @switch_segment(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @stdscan_reset() local_unnamed_addr #2

declare void @stdscan_set(i8*) local_unnamed_addr #2

declare %struct.expr* @evaluate(i32 (i8*, %struct.tokenval*)*, i8*, %struct.tokenval*, i32*, i1 zeroext, %struct.eval_hints*) local_unnamed_addr #2

declare i32 @stdscan(i8*, %struct.tokenval*) #2

declare i8* @nasm_skip_spaces(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #4

declare i64 @readnum(i8*, i8*) local_unnamed_addr #2

declare zeroext i1 @declare_label(i8*, i32, i8*) local_unnamed_addr #2

declare void @define_label(i8*, i32, i64, i1 zeroext) local_unnamed_addr #2

declare zeroext i1 @is_reloc(%struct.expr*) local_unnamed_addr #2

declare i32 @reloc_seg(%struct.expr*) local_unnamed_addr #2

declare i64 @reloc_value(%struct.expr*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

declare void @push_warnings() local_unnamed_addr #2

declare void @pop_warnings() local_unnamed_addr #2

declare zeroext i1 @set_warning_status(i8*) local_unnamed_addr #2

declare i32 @float_option(i8*) local_unnamed_addr #2

declare void @process_pragma(i8*) local_unnamed_addr #2

declare i8* @nasm_zap_spaces_rev(i8*) local_unnamed_addr #2

declare i8* @nasm_skip_word(i8*) local_unnamed_addr #2

declare i32 @perfhash_find(%struct.perfect_hash*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly }
attributes #9 = { cold noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
!3 = !{i32 660164}
