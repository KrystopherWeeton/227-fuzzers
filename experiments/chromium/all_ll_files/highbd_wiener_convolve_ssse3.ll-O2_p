; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/highbd_wiener_convolve_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/highbd_wiener_convolve_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_wiener_convolve_add_src_ssse3(i8*, i64, i8*, i64, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %13 = alloca [17280 x i16], align 16
  %14 = ptrtoint i8* %0 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  %17 = ptrtoint i8* %2 to i64
  %18 = shl i64 %17, 1
  %19 = inttoptr i64 %18 to i16*
  %20 = bitcast [17280 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 34560, i8* nonnull %20) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 34560, i1 false)
  %21 = add i32 %9, 7
  %22 = mul i64 %1, -3
  %23 = getelementptr inbounds i16, i16* %16, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 -3
  %25 = bitcast i16* %4 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 1
  %27 = add <8 x i16> %26, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %28 = bitcast <8 x i16> %27 to <4 x i32>
  %29 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %30 = bitcast <4 x i32> %29 to <2 x i64>
  %31 = shufflevector <4 x i32> %28, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, -1
  %36 = shl i32 1, %35
  %37 = add nsw i32 %11, 6
  %38 = shl i32 1, %37
  %39 = add nsw i32 %36, %38
  %40 = insertelement <4 x i32> undef, i32 %39, i32 0
  %41 = shufflevector <4 x i32> %40, <4 x i32> undef, <4 x i32> zeroinitializer
  %42 = icmp sgt i32 %21, 0
  br i1 %42, label %43, label %125

43:                                               ; preds = %12
  %44 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %45 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> zeroinitializer
  %46 = shufflevector <2 x i64> %30, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %47 = shufflevector <2 x i64> %30, <2 x i64> undef, <2 x i32> zeroinitializer
  %48 = icmp sgt i32 %8, 0
  %49 = bitcast <2 x i64> %47 to <8 x i16>
  %50 = bitcast <2 x i64> %46 to <8 x i16>
  %51 = bitcast <2 x i64> %45 to <8 x i16>
  %52 = bitcast <2 x i64> %44 to <8 x i16>
  %53 = add nsw i32 %11, 8
  %54 = sub i32 %53, %34
  %55 = shl nsw i32 -1, %54
  %56 = trunc i32 %55 to i16
  %57 = xor i16 %56, -1
  %58 = insertelement <8 x i16> undef, i16 %57, i32 0
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <8 x i32> zeroinitializer
  %60 = sext i32 %8 to i64
  %61 = zext i32 %21 to i64
  br label %62

62:                                               ; preds = %122, %43
  %63 = phi i64 [ 0, %43 ], [ %123, %122 ]
  br i1 %48, label %64, label %122

64:                                               ; preds = %62
  %65 = mul nsw i64 %63, %1
  %66 = shl i64 %63, 7
  %67 = and i64 %66, 4294967168
  br label %68

68:                                               ; preds = %64, %68
  %69 = phi i64 [ 0, %64 ], [ %120, %68 ]
  %70 = add nsw i64 %65, %69
  %71 = getelementptr inbounds i16, i16* %24, i64 %70
  %72 = bitcast i16* %71 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 2
  %74 = add nsw i64 %70, 8
  %75 = getelementptr inbounds i16, i16* %24, i64 %74
  %76 = bitcast i16* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 2
  %78 = bitcast <2 x i64> %73 to <8 x i16>
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %78, <8 x i16> %49) #3
  %80 = bitcast <2 x i64> %73 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %82 = bitcast <16 x i8> %81 to <8 x i16>
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %50) #3
  %84 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %85 = bitcast <16 x i8> %84 to <8 x i16>
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %51) #3
  %87 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
  %88 = bitcast <16 x i8> %87 to <8 x i16>
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %52) #3
  %90 = add <4 x i32> %79, %41
  %91 = add <4 x i32> %90, %83
  %92 = add <4 x i32> %91, %86
  %93 = add <4 x i32> %92, %89
  %94 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %93, i32 %34) #3
  %95 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %96 = bitcast <16 x i8> %95 to <8 x i16>
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %96, <8 x i16> %49) #3
  %98 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21>
  %99 = bitcast <16 x i8> %98 to <8 x i16>
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> %50) #3
  %101 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %102 = bitcast <16 x i8> %101 to <8 x i16>
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %51) #3
  %104 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29>
  %105 = bitcast <16 x i8> %104 to <8 x i16>
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> %52) #3
  %107 = add <4 x i32> %97, %41
  %108 = add <4 x i32> %107, %100
  %109 = add <4 x i32> %108, %103
  %110 = add <4 x i32> %109, %106
  %111 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %110, i32 %34) #3
  %112 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %94, <4 x i32> %111) #3
  %113 = icmp sgt <8 x i16> %112, zeroinitializer
  %114 = select <8 x i1> %113, <8 x i16> %112, <8 x i16> zeroinitializer
  %115 = icmp slt <8 x i16> %114, %59
  %116 = select <8 x i1> %115, <8 x i16> %114, <8 x i16> %59
  %117 = add nuw nsw i64 %69, %67
  %118 = getelementptr inbounds [17280 x i16], [17280 x i16]* %13, i64 0, i64 %117
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 16
  %120 = add nuw nsw i64 %69, 8
  %121 = icmp slt i64 %120, %60
  br i1 %121, label %68, label %122

122:                                              ; preds = %68, %62
  %123 = add nuw nsw i64 %63, 1
  %124 = icmp eq i64 %123, %61
  br i1 %124, label %125, label %62

125:                                              ; preds = %122, %12
  %126 = bitcast i16* %6 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 1
  %128 = add <8 x i16> %127, <i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  %134 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %10, i64 0, i32 4
  %135 = load i32, i32* %134, align 8
  %136 = add i32 %135, -1
  %137 = shl i32 1, %136
  %138 = add i32 %136, %11
  %139 = shl i32 1, %138
  %140 = sub nsw i32 %137, %139
  %141 = insertelement <4 x i32> undef, i32 %140, i32 0
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> zeroinitializer
  %143 = icmp sgt i32 %9, 0
  br i1 %143, label %144, label %236

144:                                              ; preds = %125
  %145 = shufflevector <2 x i64> %133, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %146 = shufflevector <2 x i64> %133, <2 x i64> undef, <2 x i32> zeroinitializer
  %147 = shufflevector <2 x i64> %131, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %148 = shufflevector <2 x i64> %131, <2 x i64> undef, <2 x i32> zeroinitializer
  %149 = icmp sgt i32 %8, 0
  %150 = bitcast <2 x i64> %148 to <8 x i16>
  %151 = bitcast <2 x i64> %147 to <8 x i16>
  %152 = bitcast <2 x i64> %146 to <8 x i16>
  %153 = bitcast <2 x i64> %145 to <8 x i16>
  %154 = shl nsw i32 -1, %11
  %155 = trunc i32 %154 to i16
  %156 = xor i16 %155, -1
  %157 = insertelement <8 x i16> undef, i16 %156, i32 0
  %158 = shufflevector <8 x i16> %157, <8 x i16> undef, <8 x i32> zeroinitializer
  %159 = sext i32 %8 to i64
  %160 = zext i32 %9 to i64
  br label %161

161:                                              ; preds = %233, %144
  %162 = phi i64 [ 0, %144 ], [ %234, %233 ]
  br i1 %149, label %163, label %233

163:                                              ; preds = %161
  %164 = shl i64 %162, 7
  %165 = mul nsw i64 %162, %3
  %166 = and i64 %164, 4294967168
  br label %167

167:                                              ; preds = %163, %167
  %168 = phi i64 [ 0, %163 ], [ %231, %167 ]
  %169 = add nuw nsw i64 %168, %166
  %170 = getelementptr inbounds [17280 x i16], [17280 x i16]* %13, i64 0, i64 %169
  %171 = bitcast i16* %170 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 16
  %173 = getelementptr inbounds i16, i16* %170, i64 128
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 16
  %176 = shufflevector <8 x i16> %172, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %177 = getelementptr inbounds i16, i16* %170, i64 256
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 16
  %180 = getelementptr inbounds i16, i16* %170, i64 384
  %181 = bitcast i16* %180 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 16
  %183 = shufflevector <8 x i16> %179, <8 x i16> %182, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %184 = getelementptr inbounds i16, i16* %170, i64 512
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 16
  %187 = getelementptr inbounds i16, i16* %170, i64 640
  %188 = bitcast i16* %187 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 16
  %190 = shufflevector <8 x i16> %186, <8 x i16> %189, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %191 = getelementptr inbounds i16, i16* %170, i64 768
  %192 = bitcast i16* %191 to <8 x i16>*
  %193 = load <8 x i16>, <8 x i16>* %192, align 16
  %194 = getelementptr inbounds i16, i16* %170, i64 896
  %195 = bitcast i16* %194 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 16
  %197 = shufflevector <8 x i16> %193, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %176, <8 x i16> %150) #3
  %199 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %183, <8 x i16> %151) #3
  %200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %190, <8 x i16> %152) #3
  %201 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %197, <8 x i16> %153) #3
  %202 = add <4 x i32> %199, %198
  %203 = add <4 x i32> %202, %200
  %204 = add <4 x i32> %203, %201
  %205 = shufflevector <8 x i16> %172, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %206 = shufflevector <8 x i16> %179, <8 x i16> %182, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %207 = shufflevector <8 x i16> %186, <8 x i16> %189, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %208 = shufflevector <8 x i16> %193, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %209 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %205, <8 x i16> %150) #3
  %210 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %151) #3
  %211 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %207, <8 x i16> %152) #3
  %212 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %208, <8 x i16> %153) #3
  %213 = add <4 x i32> %210, %209
  %214 = add <4 x i32> %213, %211
  %215 = add <4 x i32> %214, %212
  %216 = shufflevector <4 x i32> %204, <4 x i32> %215, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %217 = shufflevector <4 x i32> %204, <4 x i32> %215, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %218 = add <4 x i32> %216, %142
  %219 = load i32, i32* %134, align 8
  %220 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %218, i32 %219) #3
  %221 = add <4 x i32> %217, %142
  %222 = tail call <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32> %221, i32 %219) #3
  %223 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %220, <4 x i32> %222) #3
  %224 = icmp sgt <8 x i16> %223, zeroinitializer
  %225 = select <8 x i1> %224, <8 x i16> %223, <8 x i16> zeroinitializer
  %226 = icmp slt <8 x i16> %225, %158
  %227 = select <8 x i1> %226, <8 x i16> %225, <8 x i16> %158
  %228 = add nsw i64 %165, %168
  %229 = getelementptr inbounds i16, i16* %19, i64 %228
  %230 = bitcast i16* %229 to <8 x i16>*
  store <8 x i16> %227, <8 x i16>* %230, align 2
  %231 = add nuw nsw i64 %168, 8
  %232 = icmp slt i64 %231, %159
  br i1 %232, label %167, label %233

233:                                              ; preds = %167, %161
  %234 = add nuw nsw i64 %162, 1
  %235 = icmp eq i64 %234, %160
  br i1 %235, label %236, label %161

236:                                              ; preds = %233, %125
  call void @llvm.lifetime.end.p0i8(i64 34560, i8* nonnull %20) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psrai.d(<4 x i32>, i32) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
