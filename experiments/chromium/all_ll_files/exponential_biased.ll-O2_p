; ModuleID = '../../third_party/abseil-cpp/absl/base/internal/exponential_biased.cc'
source_filename = "../../third_party/abseil-cpp/absl/base/internal/exponential_biased.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::base_internal::ExponentialBiased" = type <{ i64, double, i8, [7 x i8] }>

@_ZZN4absl13base_internal17ExponentialBiased10InitializeEvE11global_rand = internal global { { i32 } } zeroinitializer, align 4

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZN4absl13base_internal17ExponentialBiased12GetSkipCountEl(%"class.absl::base_internal::ExponentialBiased"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 2
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %6, label %9, !prof !3

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  br label %75

9:                                                ; preds = %2
  %10 = ptrtoint %"class.absl::base_internal::ExponentialBiased"* %0 to i64
  %11 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN4absl13base_internal17ExponentialBiased10InitializeEvE11global_rand, i64 0, i32 0, i32 0), i32 1 monotonic
  %12 = zext i32 %11 to i64
  %13 = add i64 %12, %10
  %14 = mul i64 %13, 25214903917
  %15 = add i64 %14, 11
  %16 = and i64 %15, 281474976710655
  %17 = mul i64 %16, 25214903917
  %18 = add i64 %17, 11
  %19 = and i64 %18, 281474976710655
  %20 = mul i64 %19, 25214903917
  %21 = add i64 %20, 11
  %22 = and i64 %21, 281474976710655
  %23 = mul i64 %22, 25214903917
  %24 = add i64 %23, 11
  %25 = and i64 %24, 281474976710655
  %26 = mul i64 %25, 25214903917
  %27 = add i64 %26, 11
  %28 = and i64 %27, 281474976710655
  %29 = mul i64 %28, 25214903917
  %30 = add i64 %29, 11
  %31 = and i64 %30, 281474976710655
  %32 = mul i64 %31, 25214903917
  %33 = add i64 %32, 11
  %34 = and i64 %33, 281474976710655
  %35 = mul i64 %34, 25214903917
  %36 = add i64 %35, 11
  %37 = and i64 %36, 281474976710655
  %38 = mul i64 %37, 25214903917
  %39 = add i64 %38, 11
  %40 = and i64 %39, 281474976710655
  %41 = mul i64 %40, 25214903917
  %42 = add i64 %41, 11
  %43 = and i64 %42, 281474976710655
  %44 = mul i64 %43, 25214903917
  %45 = add i64 %44, 11
  %46 = and i64 %45, 281474976710655
  %47 = mul i64 %46, 25214903917
  %48 = add i64 %47, 11
  %49 = and i64 %48, 281474976710655
  %50 = mul i64 %49, 25214903917
  %51 = add i64 %50, 11
  %52 = and i64 %51, 281474976710655
  %53 = mul i64 %52, 25214903917
  %54 = add i64 %53, 11
  %55 = and i64 %54, 281474976710655
  %56 = mul i64 %55, 25214903917
  %57 = add i64 %56, 11
  %58 = and i64 %57, 281474976710655
  %59 = mul i64 %58, 25214903917
  %60 = add i64 %59, 11
  %61 = and i64 %60, 281474976710655
  %62 = mul i64 %61, 25214903917
  %63 = add i64 %62, 11
  %64 = and i64 %63, 281474976710655
  %65 = mul i64 %64, 25214903917
  %66 = add i64 %65, 11
  %67 = and i64 %66, 281474976710655
  %68 = mul i64 %67, 25214903917
  %69 = add i64 %68, 11
  %70 = and i64 %69, 281474976710655
  %71 = mul i64 %70, 25214903917
  %72 = add i64 %71, 11
  %73 = and i64 %72, 281474976710655
  %74 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 0
  store i64 %73, i64* %74, align 8
  store i8 1, i8* %3, align 8
  br label %75

75:                                               ; preds = %6, %9
  %76 = phi i64 [ %8, %6 ], [ %73, %9 ]
  %77 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 0
  %78 = mul i64 %76, 25214903917
  %79 = add i64 %78, 11
  %80 = and i64 %79, 281474976710655
  store i64 %80, i64* %77, align 8
  %81 = lshr i64 %80, 22
  %82 = trunc i64 %81 to i32
  %83 = uitofp i32 %82 to double
  %84 = fadd double %83, 1.000000e+00
  %85 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 1
  %86 = load double, double* %85, align 8
  %87 = tail call double @log2(double %84) #4
  %88 = fadd double %87, -2.600000e+01
  %89 = sitofp i64 %1 to double
  %90 = fmul double %89, 0xBFE62E42FEFA39EF
  %91 = fmul double %90, %88
  %92 = fadd double %86, %91
  %93 = fcmp ogt double %92, 0x43D0000000000000
  br i1 %93, label %98, label %94

94:                                               ; preds = %75
  %95 = tail call double @llvm.round.f64(double %92)
  %96 = fsub double %92, %95
  store double %96, double* %85, align 8
  %97 = fptosi double %95 to i64
  br label %98

98:                                               ; preds = %75, %94
  %99 = phi i64 [ %97, %94 ], [ 4611686018427387903, %75 ]
  ret i64 %99
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4absl13base_internal17ExponentialBiased10InitializeEv(%"class.absl::base_internal::ExponentialBiased"*) local_unnamed_addr #1 align 2 {
  %2 = ptrtoint %"class.absl::base_internal::ExponentialBiased"* %0 to i64
  %3 = atomicrmw add i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN4absl13base_internal17ExponentialBiased10InitializeEvE11global_rand, i64 0, i32 0, i32 0), i32 1 monotonic
  %4 = zext i32 %3 to i64
  %5 = add i64 %4, %2
  %6 = mul i64 %5, 25214903917
  %7 = add i64 %6, 11
  %8 = and i64 %7, 281474976710655
  %9 = mul i64 %8, 25214903917
  %10 = add i64 %9, 11
  %11 = and i64 %10, 281474976710655
  %12 = mul i64 %11, 25214903917
  %13 = add i64 %12, 11
  %14 = and i64 %13, 281474976710655
  %15 = mul i64 %14, 25214903917
  %16 = add i64 %15, 11
  %17 = and i64 %16, 281474976710655
  %18 = mul i64 %17, 25214903917
  %19 = add i64 %18, 11
  %20 = and i64 %19, 281474976710655
  %21 = mul i64 %20, 25214903917
  %22 = add i64 %21, 11
  %23 = and i64 %22, 281474976710655
  %24 = mul i64 %23, 25214903917
  %25 = add i64 %24, 11
  %26 = and i64 %25, 281474976710655
  %27 = mul i64 %26, 25214903917
  %28 = add i64 %27, 11
  %29 = and i64 %28, 281474976710655
  %30 = mul i64 %29, 25214903917
  %31 = add i64 %30, 11
  %32 = and i64 %31, 281474976710655
  %33 = mul i64 %32, 25214903917
  %34 = add i64 %33, 11
  %35 = and i64 %34, 281474976710655
  %36 = mul i64 %35, 25214903917
  %37 = add i64 %36, 11
  %38 = and i64 %37, 281474976710655
  %39 = mul i64 %38, 25214903917
  %40 = add i64 %39, 11
  %41 = and i64 %40, 281474976710655
  %42 = mul i64 %41, 25214903917
  %43 = add i64 %42, 11
  %44 = and i64 %43, 281474976710655
  %45 = mul i64 %44, 25214903917
  %46 = add i64 %45, 11
  %47 = and i64 %46, 281474976710655
  %48 = mul i64 %47, 25214903917
  %49 = add i64 %48, 11
  %50 = and i64 %49, 281474976710655
  %51 = mul i64 %50, 25214903917
  %52 = add i64 %51, 11
  %53 = and i64 %52, 281474976710655
  %54 = mul i64 %53, 25214903917
  %55 = add i64 %54, 11
  %56 = and i64 %55, 281474976710655
  %57 = mul i64 %56, 25214903917
  %58 = add i64 %57, 11
  %59 = and i64 %58, 281474976710655
  %60 = mul i64 %59, 25214903917
  %61 = add i64 %60, 11
  %62 = and i64 %61, 281474976710655
  %63 = mul i64 %62, 25214903917
  %64 = add i64 %63, 11
  %65 = and i64 %64, 281474976710655
  %66 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 0
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.absl::base_internal::ExponentialBiased", %"class.absl::base_internal::ExponentialBiased"* %0, i64 0, i32 2
  store i8 1, i8* %67, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @log2(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.round.f64(double) #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden i64 @_ZN4absl13base_internal17ExponentialBiased9GetStrideEl(%"class.absl::base_internal::ExponentialBiased"*, i64) local_unnamed_addr #0 align 2 {
  %3 = add nsw i64 %1, -1
  %4 = tail call i64 @_ZN4absl13base_internal17ExponentialBiased12GetSkipCountEl(%"class.absl::base_internal::ExponentialBiased"* %0, i64 %3)
  %5 = add nsw i64 %4, 1
  ret i64 %5
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
