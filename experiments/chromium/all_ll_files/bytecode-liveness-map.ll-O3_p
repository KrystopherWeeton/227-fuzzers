; ModuleID = '../../v8/src/compiler/bytecode-liveness-map.cc'
source_filename = "../../v8/src/compiler/bytecode-liveness-map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.v8::internal::compiler::BytecodeLiveness" = type { %"class.v8::internal::compiler::BytecodeLivenessState"*, %"class.v8::internal::compiler::BytecodeLivenessState"* }
%"class.v8::internal::compiler::BytecodeLivenessState" = type { [8 x i8], %"class.v8::internal::BitVector" }
%"class.v8::internal::BitVector" = type { i32, i32, %"union.v8::internal::BitVector::DataStorage" }
%"union.v8::internal::BitVector::DataStorage" = type { i64* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::compiler::BytecodeLivenessMap" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<int, v8::internal::compiler::BytecodeLiveness, v8::base::KeyEqualityMatcher<int>, v8::internal::ZoneAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<int, v8::internal::compiler::BytecodeLiveness, v8::base::KeyEqualityMatcher<int>, v8::internal::ZoneAllocationPolicy>::Impl" = type { %"class.v8::internal::ZoneAllocationPolicy", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"class.v8::internal::ZoneAllocationPolicy" = type { %"class.v8::internal::Zone"* }
%"struct.v8::base::TemplateHashMapEntry" = type <{ i32, [4 x i8], %"struct.v8::internal::compiler::BytecodeLiveness", i32, i8, [3 x i8] }>

$_ZN2v84base19TemplateHashMapImplIiNS_8internal8compiler16BytecodeLivenessENS0_18KeyEqualityMatcherIiEENS2_20ZoneAllocationPolicyEE6ResizeEv = comdat any

@.str = private unnamed_addr constant [35 x i8] c"Out of memory: HashMap::Initialize\00", align 1

@_ZN2v88internal8compiler16BytecodeLivenessC1EiPNS0_4ZoneE = hidden unnamed_addr alias void (%"struct.v8::internal::compiler::BytecodeLiveness"*, i32, %"class.v8::internal::Zone"*), void (%"struct.v8::internal::compiler::BytecodeLiveness"*, i32, %"class.v8::internal::Zone"*)* @_ZN2v88internal8compiler16BytecodeLivenessC2EiPNS0_4ZoneE
@_ZN2v88internal8compiler19BytecodeLivenessMapC1EiPNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::BytecodeLivenessMap"*, i32, %"class.v8::internal::Zone"*), void (%"class.v8::internal::compiler::BytecodeLivenessMap"*, i32, %"class.v8::internal::Zone"*)* @_ZN2v88internal8compiler19BytecodeLivenessMapC2EiPNS0_4ZoneE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler16BytecodeLivenessC2EiPNS0_4ZoneE(%"struct.v8::internal::compiler::BytecodeLiveness"* nocapture, i32, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.v8::internal::compiler::BytecodeLiveness", %"struct.v8::internal::compiler::BytecodeLiveness"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 24
  br i1 %10, label %11, label %13, !prof !2

11:                                               ; preds = %3
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 24) #6
  br label %15

13:                                               ; preds = %3
  %14 = add i64 %6, 24
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::compiler::BytecodeLivenessState"*
  %18 = add nsw i32 %1, 1
  %19 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %17, i64 0, i32 1, i32 0
  store i32 %18, i32* %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %17, i64 0, i32 1, i32 1
  %21 = icmp slt i32 %18, 65
  br i1 %21, label %22, label %25

22:                                               ; preds = %15
  store i32 1, i32* %20, align 4
  %23 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %17, i64 0, i32 1, i32 2
  %24 = bitcast %"union.v8::internal::BitVector::DataStorage"* %23 to i64*
  store i64 0, i64* %24, align 8
  br label %61

25:                                               ; preds = %15
  %26 = lshr i32 %1, 6
  %27 = add nuw nsw i32 %26, 1
  store i32 %27, i32* %20, align 4
  %28 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %17, i64 0, i32 1, i32 2
  %29 = bitcast %"union.v8::internal::BitVector::DataStorage"* %28 to i64*
  store i64 0, i64* %29, align 8
  %30 = shl nuw nsw i32 %27, 3
  %31 = zext i32 %30 to i64
  %32 = load i64, i64* %5, align 8
  %33 = load i64, i64* %7, align 8
  %34 = sub i64 %33, %32
  %35 = icmp ult i64 %34, %31
  br i1 %35, label %36, label %38, !prof !2

36:                                               ; preds = %25
  %37 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %31) #6
  br label %40

38:                                               ; preds = %25
  %39 = add i64 %32, %31
  store i64 %39, i64* %5, align 8
  br label %40

40:                                               ; preds = %38, %36
  %41 = phi i64 [ %37, %36 ], [ %32, %38 ]
  %42 = inttoptr i64 %41 to i64*
  %43 = getelementptr inbounds %"union.v8::internal::BitVector::DataStorage", %"union.v8::internal::BitVector::DataStorage"* %28, i64 0, i32 0
  store i64* %42, i64** %43, align 8
  %44 = load i32, i32* %20, align 4
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %52, label %46

46:                                               ; preds = %40
  %47 = icmp sgt i32 %44, 0
  br i1 %47, label %48, label %61

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %17, i64 0, i32 1, i32 2, i32 0
  store i64 0, i64* %42, align 8
  %50 = load i32, i32* %20, align 4
  %51 = icmp sgt i32 %50, 1
  br i1 %51, label %53, label %61

52:                                               ; preds = %40
  store i64 0, i64* %29, align 8
  br label %61

53:                                               ; preds = %48, %53
  %54 = phi i64 [ %57, %53 ], [ 1, %48 ]
  %55 = load i64*, i64** %49, align 8
  %56 = getelementptr inbounds i64, i64* %55, i64 %54
  store i64 0, i64* %56, align 8
  %57 = add nuw nsw i64 %54, 1
  %58 = load i32, i32* %20, align 4
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %57, %59
  br i1 %60, label %53, label %61

61:                                               ; preds = %53, %22, %46, %48, %52
  store %"class.v8::internal::compiler::BytecodeLivenessState"* %17, %"class.v8::internal::compiler::BytecodeLivenessState"** %4, align 8
  %62 = getelementptr inbounds %"struct.v8::internal::compiler::BytecodeLiveness", %"struct.v8::internal::compiler::BytecodeLiveness"* %0, i64 0, i32 1
  %63 = load i64, i64* %5, align 8
  %64 = load i64, i64* %7, align 8
  %65 = sub i64 %64, %63
  %66 = icmp ult i64 %65, 24
  br i1 %66, label %67, label %69, !prof !2

67:                                               ; preds = %61
  %68 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 24) #6
  br label %71

69:                                               ; preds = %61
  %70 = add i64 %63, 24
  store i64 %70, i64* %5, align 8
  br label %71

71:                                               ; preds = %69, %67
  %72 = phi i64 [ %68, %67 ], [ %63, %69 ]
  %73 = inttoptr i64 %72 to %"class.v8::internal::compiler::BytecodeLivenessState"*
  %74 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %73, i64 0, i32 1, i32 0
  store i32 %18, i32* %74, align 8
  %75 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %73, i64 0, i32 1, i32 1
  br i1 %21, label %76, label %79

76:                                               ; preds = %71
  store i32 1, i32* %75, align 4
  %77 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %73, i64 0, i32 1, i32 2
  %78 = bitcast %"union.v8::internal::BitVector::DataStorage"* %77 to i64*
  store i64 0, i64* %78, align 8
  br label %115

79:                                               ; preds = %71
  %80 = lshr i32 %1, 6
  %81 = add nuw nsw i32 %80, 1
  store i32 %81, i32* %75, align 4
  %82 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %73, i64 0, i32 1, i32 2
  %83 = bitcast %"union.v8::internal::BitVector::DataStorage"* %82 to i64*
  store i64 0, i64* %83, align 8
  %84 = shl nuw nsw i32 %81, 3
  %85 = zext i32 %84 to i64
  %86 = load i64, i64* %5, align 8
  %87 = load i64, i64* %7, align 8
  %88 = sub i64 %87, %86
  %89 = icmp ult i64 %88, %85
  br i1 %89, label %90, label %92, !prof !2

90:                                               ; preds = %79
  %91 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %85) #6
  br label %94

92:                                               ; preds = %79
  %93 = add i64 %86, %85
  store i64 %93, i64* %5, align 8
  br label %94

94:                                               ; preds = %92, %90
  %95 = phi i64 [ %91, %90 ], [ %86, %92 ]
  %96 = inttoptr i64 %95 to i64*
  %97 = getelementptr inbounds %"union.v8::internal::BitVector::DataStorage", %"union.v8::internal::BitVector::DataStorage"* %82, i64 0, i32 0
  store i64* %96, i64** %97, align 8
  %98 = load i32, i32* %75, align 4
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %106, label %100

100:                                              ; preds = %94
  %101 = icmp sgt i32 %98, 0
  br i1 %101, label %102, label %115

102:                                              ; preds = %100
  %103 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessState", %"class.v8::internal::compiler::BytecodeLivenessState"* %73, i64 0, i32 1, i32 2, i32 0
  store i64 0, i64* %96, align 8
  %104 = load i32, i32* %75, align 4
  %105 = icmp sgt i32 %104, 1
  br i1 %105, label %107, label %115

106:                                              ; preds = %94
  store i64 0, i64* %83, align 8
  br label %115

107:                                              ; preds = %102, %107
  %108 = phi i64 [ %111, %107 ], [ 1, %102 ]
  %109 = load i64*, i64** %103, align 8
  %110 = getelementptr inbounds i64, i64* %109, i64 %108
  store i64 0, i64* %110, align 8
  %111 = add nuw nsw i64 %108, 1
  %112 = load i32, i32* %75, align 4
  %113 = sext i32 %112 to i64
  %114 = icmp slt i64 %111, %113
  br i1 %114, label %107, label %115

115:                                              ; preds = %107, %76, %100, %102, %106
  store %"class.v8::internal::compiler::BytecodeLivenessState"* %73, %"class.v8::internal::compiler::BytecodeLivenessState"** %62, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler19BytecodeLivenessMapC2EiPNS0_4ZoneE(%"class.v8::internal::compiler::BytecodeLivenessMap"* nocapture, i32, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %4 = sdiv i32 %1, 4
  %5 = add nsw i32 %4, 1
  %6 = tail call i32 @_ZN2v84base4bits21RoundUpToPowerOfTwo32Ej(i32 %5) #6
  %7 = ptrtoint %"class.v8::internal::Zone"* %2 to i64
  %8 = bitcast %"class.v8::internal::compiler::BytecodeLivenessMap"* %0 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"struct.v8::base::TemplateHashMapEntry"** %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #6
  %11 = zext i32 %6 to i64
  %12 = shl nuw nsw i64 %11, 5
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %14
  %18 = icmp ugt i64 %12, %17
  br i1 %18, label %19, label %21, !prof !2

19:                                               ; preds = %3
  %20 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %12) #6
  br label %23

21:                                               ; preds = %3
  %22 = add i64 %14, %12
  store i64 %22, i64* %13, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i64 [ %20, %19 ], [ %14, %21 ]
  %25 = inttoptr i64 %24 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %25, %"struct.v8::base::TemplateHashMapEntry"** %9, align 8
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 2
  store i32 %6, i32* %29, align 8
  %30 = icmp eq i32 %6, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %25, i64 0, i32 4
  store i8 0, i8* %32, align 4
  %33 = load i32, i32* %29, align 8
  %34 = icmp ugt i32 %33, 1
  br i1 %34, label %35, label %43

35:                                               ; preds = %31, %35
  %36 = phi i64 [ %39, %35 ], [ 1, %31 ]
  %37 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %9, align 8
  %38 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %37, i64 %36, i32 4
  store i8 0, i8* %38, align 4
  %39 = add nuw nsw i64 %36, 1
  %40 = load i32, i32* %29, align 8
  %41 = zext i32 %40 to i64
  %42 = icmp ult i64 %39, %41
  br i1 %42, label %35, label %43

43:                                               ; preds = %35, %28, %31
  %44 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 3
  store i32 0, i32* %44, align 4
  ret void
}

declare i32 @_ZN2v84base4bits21RoundUpToPowerOfTwo32Ej(i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2v88internal8compiler10OffsetHashEi(i32 returned) local_unnamed_addr #2 {
  ret i32 %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(16) %"struct.v8::internal::compiler::BytecodeLiveness"* @_ZN2v88internal8compiler19BytecodeLivenessMap18InitializeLivenessEiiPNS0_4ZoneE(%"class.v8::internal::compiler::BytecodeLivenessMap"*, i32, i32, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"struct.v8::internal::compiler::BytecodeLiveness"*
  %7 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = and i32 %10, %1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %13, align 8
  %15 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %14, i64 %12
  %16 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %14, i64 %12, i32 4
  %17 = load i8, i8* %16, align 4, !range !3
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %34, label %19

19:                                               ; preds = %4
  %20 = zext i32 %10 to i64
  br label %21

21:                                               ; preds = %27, %19
  %22 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %15, %19 ], [ %30, %27 ]
  %23 = phi i64 [ %12, %19 ], [ %29, %27 ]
  %24 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %22, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, %1
  br i1 %26, label %34, label %27

27:                                               ; preds = %21
  %28 = add nuw nsw i64 %23, 1
  %29 = and i64 %28, %20
  %30 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %14, i64 %29
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %14, i64 %29, i32 4
  %32 = load i8, i8* %31, align 4, !range !3
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %21

34:                                               ; preds = %27, %21, %4
  %35 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %15, %4 ], [ %22, %21 ], [ %30, %27 ]
  %36 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %35, i64 0, i32 4
  %37 = load i8, i8* %36, align 4, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %78

39:                                               ; preds = %34
  %40 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #6
  call void @_ZN2v88internal8compiler16BytecodeLivenessC2EiPNS0_4ZoneE(%"struct.v8::internal::compiler::BytecodeLiveness"* nonnull %6, i32 %2, %"class.v8::internal::Zone"* %3) #6
  %41 = load <2 x i64>, <2 x i64>* %5, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #6
  %42 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %35, i64 0, i32 0
  store i32 %1, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %35, i64 0, i32 2, i32 0
  %44 = bitcast %"class.v8::internal::compiler::BytecodeLivenessState"** %43 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %44, align 8
  %45 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %35, i64 0, i32 3
  store i32 %1, i32* %45, align 8
  store i8 1, i8* %36, align 4
  %46 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = add i32 %47, 1
  store i32 %48, i32* %46, align 4
  %49 = lshr i32 %48, 2
  %50 = add i32 %49, %48
  %51 = load i32, i32* %8, align 8
  %52 = icmp ult i32 %50, %51
  br i1 %52, label %78, label %53

53:                                               ; preds = %39
  tail call void @_ZN2v84base19TemplateHashMapImplIiNS_8internal8compiler16BytecodeLivenessENS0_18KeyEqualityMatcherIiEENS2_20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"* %7) #6
  %54 = load i32, i32* %8, align 8
  %55 = add i32 %54, -1
  %56 = and i32 %55, %1
  %57 = zext i32 %56 to i64
  %58 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %13, align 8
  %59 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %58, i64 %57
  %60 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %58, i64 %57, i32 4
  %61 = load i8, i8* %60, align 4, !range !3
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %78, label %63

63:                                               ; preds = %53
  %64 = zext i32 %55 to i64
  br label %65

65:                                               ; preds = %71, %63
  %66 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %59, %63 ], [ %74, %71 ]
  %67 = phi i64 [ %57, %63 ], [ %73, %71 ]
  %68 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %66, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, %1
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  %72 = add nuw nsw i64 %67, 1
  %73 = and i64 %72, %64
  %74 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %58, i64 %73
  %75 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %58, i64 %73, i32 4
  %76 = load i8, i8* %75, align 4, !range !3
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %65

78:                                               ; preds = %65, %71, %34, %39, %53
  %79 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %35, %34 ], [ %35, %39 ], [ %59, %53 ], [ %74, %71 ], [ %66, %65 ]
  %80 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %79, i64 0, i32 2
  ret %"struct.v8::internal::compiler::BytecodeLiveness"* %80
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(16) %"struct.v8::internal::compiler::BytecodeLiveness"* @_ZN2v88internal8compiler19BytecodeLivenessMap11GetLivenessEi(%"class.v8::internal::compiler::BytecodeLivenessMap"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, -1
  %6 = and i32 %5, %1
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %8, align 8
  %10 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %7
  %11 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %7, i32 4
  %12 = load i8, i8* %11, align 4, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %2
  %15 = zext i32 %5 to i64
  br label %16

16:                                               ; preds = %22, %14
  %17 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %10, %14 ], [ %25, %22 ]
  %18 = phi i64 [ %7, %14 ], [ %24, %22 ]
  %19 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %17, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, %1
  br i1 %21, label %29, label %22

22:                                               ; preds = %16
  %23 = add nuw nsw i64 %18, 1
  %24 = and i64 %23, %15
  %25 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %24
  %26 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %24, i32 4
  %27 = load i8, i8* %26, align 4, !range !3
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %16

29:                                               ; preds = %16, %22, %2
  %30 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %10, %2 ], [ %25, %22 ], [ %17, %16 ]
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %30, i64 0, i32 4
  %32 = load i8, i8* %31, align 4, !range !3
  %33 = icmp eq i8 %32, 0
  %34 = select i1 %33, %"struct.v8::base::TemplateHashMapEntry"* null, %"struct.v8::base::TemplateHashMapEntry"* %30
  %35 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %34, i64 0, i32 2
  ret %"struct.v8::internal::compiler::BytecodeLiveness"* %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(16) %"struct.v8::internal::compiler::BytecodeLiveness"* @_ZNK2v88internal8compiler19BytecodeLivenessMap11GetLivenessEi(%"class.v8::internal::compiler::BytecodeLivenessMap"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, -1
  %6 = and i32 %5, %1
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %"class.v8::internal::compiler::BytecodeLivenessMap", %"class.v8::internal::compiler::BytecodeLivenessMap"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %8, align 8
  %10 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %7
  %11 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %7, i32 4
  %12 = load i8, i8* %11, align 4, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %2
  %15 = zext i32 %5 to i64
  br label %16

16:                                               ; preds = %22, %14
  %17 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %10, %14 ], [ %25, %22 ]
  %18 = phi i64 [ %7, %14 ], [ %24, %22 ]
  %19 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %17, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, %1
  br i1 %21, label %29, label %22

22:                                               ; preds = %16
  %23 = add nuw nsw i64 %18, 1
  %24 = and i64 %23, %15
  %25 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %24
  %26 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %9, i64 %24, i32 4
  %27 = load i8, i8* %26, align 4, !range !3
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %16

29:                                               ; preds = %16, %22, %2
  %30 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %10, %2 ], [ %25, %22 ], [ %17, %16 ]
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %30, i64 0, i32 4
  %32 = load i8, i8* %31, align 4, !range !3
  %33 = icmp eq i8 %32, 0
  %34 = select i1 %33, %"struct.v8::base::TemplateHashMapEntry"* null, %"struct.v8::base::TemplateHashMapEntry"* %30
  %35 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %34, i64 0, i32 2
  ret %"struct.v8::internal::compiler::BytecodeLiveness"* %35
}

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base19TemplateHashMapImplIiNS_8internal8compiler16BytecodeLivenessENS0_18KeyEqualityMatcherIiEENS2_20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %5, 1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl", %"class.v8::base::TemplateHashMapImpl"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %10, align 8
  %12 = shl nuw nsw i64 %9, 5
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %11, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %14
  %18 = icmp ugt i64 %12, %17
  br i1 %18, label %19, label %21, !prof !2

19:                                               ; preds = %1
  %20 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %11, i64 %12) #6
  br label %23

21:                                               ; preds = %1
  %22 = add i64 %14, %12
  store i64 %22, i64* %13, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i64 [ %20, %19 ], [ %14, %21 ]
  %25 = inttoptr i64 %24 to %"struct.v8::base::TemplateHashMapEntry"*
  store %"struct.v8::base::TemplateHashMapEntry"* %25, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

28:                                               ; preds = %23
  store i32 %8, i32* %4, align 8
  %29 = icmp eq i32 %8, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %25, i64 0, i32 4
  store i8 0, i8* %31, align 4
  %32 = load i32, i32* %4, align 8
  %33 = icmp ugt i32 %32, 1
  br i1 %33, label %34, label %42

34:                                               ; preds = %30, %34
  %35 = phi i64 [ %38, %34 ], [ 1, %30 ]
  %36 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %37 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %36, i64 %35, i32 4
  store i8 0, i8* %37, align 4
  %38 = add nuw nsw i64 %35, 1
  %39 = load i32, i32* %4, align 8
  %40 = zext i32 %39 to i64
  %41 = icmp ult i64 %38, %40
  br i1 %41, label %34, label %42

42:                                               ; preds = %34, %30, %28
  %43 = phi i32 [ %32, %30 ], [ 0, %28 ], [ %39, %34 ]
  store i32 0, i32* %6, align 4
  %44 = icmp eq i32 %7, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %123, %42
  ret void

46:                                               ; preds = %42, %123
  %47 = phi i32 [ %124, %123 ], [ %43, %42 ]
  %48 = phi i32 [ %125, %123 ], [ %7, %42 ]
  %49 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %126, %123 ], [ %3, %42 ]
  %50 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 4
  %51 = load i8, i8* %50, align 4, !range !3
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %123, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 0
  %55 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = add i32 %47, -1
  %58 = and i32 %57, %56
  %59 = zext i32 %58 to i64
  %60 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %61 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %59
  %62 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %59, i32 4
  %63 = load i8, i8* %62, align 4, !range !3
  %64 = icmp eq i8 %63, 0
  %65 = load i32, i32* %54, align 4
  br i1 %64, label %81, label %66

66:                                               ; preds = %53
  %67 = zext i32 %57 to i64
  br label %68

68:                                               ; preds = %74, %66
  %69 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %61, %66 ], [ %77, %74 ]
  %70 = phi i64 [ %59, %66 ], [ %76, %74 ]
  %71 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %69, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %65, %72
  br i1 %73, label %81, label %74

74:                                               ; preds = %68
  %75 = add nuw nsw i64 %70, 1
  %76 = and i64 %75, %67
  %77 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %76
  %78 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %60, i64 %76, i32 4
  %79 = load i8, i8* %78, align 4, !range !3
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %68

81:                                               ; preds = %68, %74, %53
  %82 = phi %"struct.v8::base::TemplateHashMapEntry"* [ %61, %53 ], [ %69, %68 ], [ %77, %74 ]
  %83 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 0, i32 2
  %84 = bitcast %"struct.v8::internal::compiler::BytecodeLiveness"* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 8
  %86 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 0
  store i32 %65, i32* %86, align 8
  %87 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 2, i32 0
  %88 = bitcast %"class.v8::internal::compiler::BytecodeLivenessState"** %87 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %88, align 8
  %89 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 3
  store i32 %56, i32* %89, align 8
  %90 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %82, i64 0, i32 4
  store i8 1, i8* %90, align 4
  %91 = load i32, i32* %6, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %6, align 4
  %93 = lshr i32 %92, 2
  %94 = add i32 %93, %92
  %95 = load i32, i32* %4, align 8
  %96 = icmp ult i32 %94, %95
  br i1 %96, label %120, label %97

97:                                               ; preds = %81
  tail call void @_ZN2v84base19TemplateHashMapImplIiNS_8internal8compiler16BytecodeLivenessENS0_18KeyEqualityMatcherIiEENS2_20ZoneAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl"* %0) #6
  %98 = load i32, i32* %4, align 8
  %99 = add i32 %98, -1
  %100 = and i32 %99, %56
  %101 = zext i32 %100 to i64
  %102 = load %"struct.v8::base::TemplateHashMapEntry"*, %"struct.v8::base::TemplateHashMapEntry"** %2, align 8
  %103 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %102, i64 %101, i32 4
  %104 = load i8, i8* %103, align 4, !range !3
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %120, label %106

106:                                              ; preds = %97
  %107 = load i32, i32* %54, align 4
  %108 = zext i32 %99 to i64
  br label %109

109:                                              ; preds = %114, %106
  %110 = phi i64 [ %101, %106 ], [ %116, %114 ]
  %111 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %102, i64 %110, i32 0
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %107, %112
  br i1 %113, label %120, label %114

114:                                              ; preds = %109
  %115 = add nuw nsw i64 %110, 1
  %116 = and i64 %115, %108
  %117 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %102, i64 %116, i32 4
  %118 = load i8, i8* %117, align 4, !range !3
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %120, label %109

120:                                              ; preds = %109, %114, %97, %81
  %121 = phi i32 [ %98, %97 ], [ %95, %81 ], [ %98, %114 ], [ %98, %109 ]
  %122 = add i32 %48, -1
  br label %123

123:                                              ; preds = %46, %120
  %124 = phi i32 [ %121, %120 ], [ %47, %46 ]
  %125 = phi i32 [ %122, %120 ], [ %48, %46 ]
  %126 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry", %"struct.v8::base::TemplateHashMapEntry"* %49, i64 1
  %127 = icmp eq i32 %125, 0
  br i1 %127, label %45, label %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
