; ModuleID = '../../ui/views/controls/menu/new_badge.cc'
source_filename = "../../ui/views/controls/menu/new_badge.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::PaintFlags" = type <{ %class.sk_sp.189, %class.sk_sp.190, %class.sk_sp.220, %class.sk_sp.221, %class.sk_sp.222, %class.sk_sp.223, i32, float, float, i32, %union.anon.224, [4 x i8] }>
%class.sk_sp.189 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.190 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional.191", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.122, i32, %"class.absl::optional.200", %"class.std::__1::vector.205", %"class.std::__1::vector.212", %class.sk_sp.219, %class.sk_sp.196, i32, [4 x i8] }>
%"class.absl::optional.191" = type { %"class.absl::optional_internal::optional_data.192" }
%"class.absl::optional_internal::optional_data.192" = type { %"class.absl::optional_internal::optional_data_base.193" }
%"class.absl::optional_internal::optional_data_base.193" = type { %"class.absl::optional_internal::optional_data_dtor_base.194" }
%"class.absl::optional_internal::optional_data_dtor_base.194" = type { i8, %union.anon.195 }
%union.anon.195 = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.196, %class.sk_sp.122, %"class.gfx::Rect", i32, %class.sk_sp.197, %class.sk_sp.198, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.196, %class.scoped_refptr.199 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.197 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.198 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.scoped_refptr.199 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.122 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.123", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { i8* }
%"class.absl::optional.200" = type { %"class.absl::optional_internal::optional_data.201" }
%"class.absl::optional_internal::optional_data.201" = type { %"class.absl::optional_internal::optional_data_base.202" }
%"class.absl::optional_internal::optional_data_base.202" = type { %"class.absl::optional_internal::optional_data_dtor_base.203" }
%"class.absl::optional_internal::optional_data_dtor_base.203" = type { i8, %union.anon.204 }
%union.anon.204 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { i32*, i32*, %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { i32* }
%"class.std::__1::vector.212" = type { %"class.std::__1::__vector_base.213" }
%"class.std::__1::__vector_base.213" = type { float*, float*, %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { float* }
%class.sk_sp.219 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.95", [7 x i8] }>
%"struct.std::__1::atomic.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__cxx_atomic_impl.97" }
%"struct.std::__1::__cxx_atomic_impl.97" = type { %"struct.std::__1::__cxx_atomic_base_impl.98" }
%"struct.std::__1::__cxx_atomic_base_impl.98" = type { i8 }
%class.sk_sp.196 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.220 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.221 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.222 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.223 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type opaque
%union.anon.224 = type { i32 }
%"class.gfx::Canvas" = type { i32 (...)**, float, %"class.absl::optional", %"class.absl::optional.8", %"class.cc::PaintCanvas"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkBitmap }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.absl::optional.8" = type { %"class.absl::optional_internal::optional_data.9" }
%"class.absl::optional_internal::optional_data.9" = type { %"class.absl::optional_internal::optional_data_base.10" }
%"class.absl::optional_internal::optional_data_base.10" = type { %"class.absl::optional_internal::optional_data_dtor_base.11" }
%"class.absl::optional_internal::optional_data_dtor_base.11" = type { i8, [7 x i8], %union.anon.12 }
%union.anon.12 = type { %"class.cc::SkiaPaintCanvas" }
%"class.cc::SkiaPaintCanvas" = type <{ %"class.cc::PaintCanvas", %class.SkCanvas*, %class.SkBitmap, %"class.std::__1::unique_ptr.22", %"class.cc::ImageProvider"*, %"struct.cc::SkiaPaintCanvas::ContextFlushes", i32, [4 x i8] }>
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.13, [384 x i64], %class.sk_sp.14, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.16" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.13 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.14 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %class.SkCanvas* }
%"class.cc::ImageProvider" = type opaque
%"struct.cc::SkiaPaintCanvas::ContextFlushes" = type { i8, i32 }
%"class.views::View" = type <{ %"class.ui::LayerDelegate", %"class.ui::LayerObserver", %"class.ui::LayerOwner", %"class.ui::AcceleratorTarget", %"class.ui::EventTarget", %"class.ui::EventHandler", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", i8, [3 x i8], i32, i32, [4 x i8], %"class.views::View"*, %"class.std::__1::vector.72", i8, [3 x i8], %"class.absl::optional.79", %"class.gfx::Rect", i8, i8, i8, i8, [4 x i8], %"class.std::__1::unique_ptr.84", %class.SkPath, i8, [7 x i8], %"class.std::__1::unique_ptr.99", %"class.absl::optional.105", i8, [7 x i8], %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.116", %"class.ui::PaintCache", i8, [7 x i8], %"class.ui::NativeTheme"*, i8, %"class.absl::optional.142", i8, i8, [3 x i8], %"class.std::__1::vector.147", %"class.std::__1::unique_ptr.154", %"class.views::FocusManager"*, %"class.std::__1::unique_ptr.160", i64, %"class.views::View"*, %"class.views::View"*, i32, [4 x i8], %"class.views::ContextMenuController"*, %"class.views::DragController"*, %"class.std::__1::unique_ptr.167", %"class.std::__1::unique_ptr.173", %"class.base::ObserverList.179", i32, [4 x i8] }>
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerObserver" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr.32", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.38" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::AcceleratorTarget" = type { i32 (...)** }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.41", %"class.std::__1::vector.48", %"class.ui::EventHandler"* }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.43" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { i64 }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.63" }
%"class.std::__1::map.63" = type { %"class.std::__1::__tree.64" }
%"class.std::__1::__tree.64" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.65", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"class.views::View"**, %"class.views::View"**, %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.views::View"** }
%"class.absl::optional.79" = type { %"class.absl::optional_internal::optional_data.80" }
%"class.absl::optional_internal::optional_data.80" = type { %"class.absl::optional_internal::optional_data_base.81" }
%"class.absl::optional_internal::optional_data_base.81" = type { %"class.absl::optional_internal::optional_data_dtor_base.82" }
%"class.absl::optional_internal::optional_data_dtor_base.82" = type { i8, %union.anon.83 }
%union.anon.83 = type { %"class.gfx::Size" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.std::__1::vector.72"* }
%class.SkPath = type <{ %class.sk_sp.90, i32, %"struct.std::__1::atomic.2", %"struct.std::__1::atomic.2", i8, i8 }>
%class.sk_sp.90 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.91, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.92, %class.SkTDArray.93, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.91 = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.92 = type { i8*, i32, i32 }
%class.SkTDArray.93 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.94 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.94 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.95", [3 x i8] }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.views::LayoutManager"* }
%"class.views::LayoutManager" = type { i32 (...)**, %"class.views::View"* }
%"class.absl::optional.105" = type { %"class.absl::optional_internal::optional_data.106" }
%"class.absl::optional_internal::optional_data.106" = type { %"class.absl::optional_internal::optional_data_base.107" }
%"class.absl::optional_internal::optional_data_base.107" = type { %"class.absl::optional_internal::optional_data_dtor_base.108" }
%"class.absl::optional_internal::optional_data_dtor_base.108" = type { i8, %union.anon.109 }
%union.anon.109 = type { %"class.views::View::DefaultFillLayout" }
%"class.views::View::DefaultFillLayout" = type { %"class.views::LayoutManager" }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.views::Background"* }
%"class.views::Background" = type opaque
%"class.std::__1::unique_ptr.116" = type { %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"class.views::Border"* }
%"class.views::Border" = type opaque
%"class.ui::PaintCache" = type <{ %class.sk_sp.122, float, [4 x i8] }>
%"class.ui::NativeTheme" = type <{ i32 (...)**, %"class.std::__1::map.127", %"class.base::ObserverList.138", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::map.127" = type { %"class.std::__1::__tree.128" }
%"class.std::__1::__tree.128" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.129", %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"class.base::ObserverList.138" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.139", i64, i32, [4 x i8] }>
%"class.base::LinkedList.139" = type { %"class.base::LinkNode.140" }
%"class.base::LinkNode.140" = type { %"class.base::internal::LinkNodeBase" }
%"class.absl::optional.142" = type { %"class.absl::optional_internal::optional_data.143" }
%"class.absl::optional_internal::optional_data.143" = type { %"class.absl::optional_internal::optional_data_base.144" }
%"class.absl::optional_internal::optional_data_base.144" = type { %"class.absl::optional_internal::optional_data_dtor_base.145" }
%"class.absl::optional_internal::optional_data_dtor_base.145" = type { i8, %union.anon.146 }
%union.anon.146 = type { i8 }
%"class.std::__1::vector.147" = type { %"class.std::__1::__vector_base.148" }
%"class.std::__1::__vector_base.148" = type { %"class.ui::Layer"**, %"class.ui::Layer"**, %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.ui::Layer"** }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.views::ViewMaskLayer"* }
%"class.views::ViewMaskLayer" = type opaque
%"class.views::FocusManager" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::vector.163"* }
%"class.std::__1::vector.163" = type opaque
%"class.views::ContextMenuController" = type opaque
%"class.views::DragController" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.views::ViewTargeter"* }
%"class.views::ViewTargeter" = type { %"class.ui::EventTargeter", %"class.views::ViewTargeterDelegate"* }
%"class.ui::EventTargeter" = type { i32 (...)** }
%"class.views::ViewTargeterDelegate" = type opaque
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.views::ViewAccessibility"* }
%"class.views::ViewAccessibility" = type opaque
%"class.base::ObserverList.179" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.180", i64, i32, [4 x i8] }>
%"class.base::LinkedList.180" = type { %"class.base::LinkNode.181" }
%"class.base::LinkNode.181" = type { %"class.base::internal::LinkNodeBase" }
%"class.gfx::FontList" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gfx::FontListImpl"* }
%"class.gfx::FontListImpl" = type opaque
%"class.gfx::Insets" = type { i32, i32, i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.185 }
%union.anon.185 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }

$_ZNK3gfx6InsetsngEv = comdat any

@__const._ZN5views8NewBadge12DrawNewBadgeEPN3gfx6CanvasEPKNS_4ViewEiiRKNS1_8FontListE.new_flags = private unnamed_addr constant %"class.cc::PaintFlags" <{ %class.sk_sp.189 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.190 { %"class.cc::PaintShader"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintShader"*) }, %class.sk_sp.220 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.221 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.222 { %class.SkDrawLooper* inttoptr (i64 -6148914691236517206 to %class.SkDrawLooper*) }, %class.sk_sp.223 { %"class.cc::PaintFilter"* inttoptr (i64 -6148914691236517206 to %"class.cc::PaintFilter"*) }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, %union.anon.224 { i32 -1431655766 }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views8NewBadge12DrawNewBadgeEPN3gfx6CanvasEPKNS_4ViewEiiRKNS1_8FontListE(%"class.gfx::Canvas"*, %"class.views::View"*, i32, i32, %"class.gfx::FontList"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca <2 x i64>, align 16
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = bitcast <4 x i32>* %9 to %"class.gfx::Insets"*
  %11 = alloca %"class.gfx::FontList", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = alloca %"class.gfx::Rect", align 8
  %14 = alloca %"class.cc::PaintFlags", align 8
  %15 = alloca <2 x i64>, align 16
  %16 = bitcast <2 x i64>* %15 to %"class.gfx::Rect"*
  %17 = bitcast %"class.gfx::FontList"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  %18 = getelementptr inbounds %"class.gfx::FontList", %"class.gfx::FontList"* %11, i64 0, i32 0, i32 0
  store %"class.gfx::FontListImpl"* inttoptr (i64 -6148914691236517206 to %"class.gfx::FontListImpl"*), %"class.gfx::FontListImpl"** %18, align 8
  call void @_ZNK3gfx8FontList6DeriveEiiNS_4Font6WeightE(%"class.gfx::FontList"* nonnull sret %11, %"class.gfx::FontList"* %4, i32 -1, i32 0, i32 500) #7
  %19 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #7
  %20 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 24, i1 false)
  call void @_ZN9l10n_util14GetStringUTF16Ei(%"class.std::__1::basic_string"* nonnull sret %12, i32 28989) #7
  %21 = add nsw i32 %2, 4
  %22 = call i32 @_ZN3gfx28GetFontCapHeightCenterOffsetERKNS_8FontListES2_(%"class.gfx::FontList"* dereferenceable(8) %4, %"class.gfx::FontList"* nonnull dereferenceable(8) %11) #7
  %23 = add nsw i32 %22, %3
  %24 = bitcast %"class.gfx::Rect"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #7
  %25 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %13, i64 0, i32 1, i32 0
  %26 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %13, i64 0, i32 1, i32 1
  %27 = call i64 @_ZN3gfx13GetStringSizeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %12, %"class.gfx::FontList"* nonnull dereferenceable(8) %11) #7
  %28 = trunc i64 %27 to i32
  %29 = lshr i64 %27, 32
  %30 = trunc i64 %29 to i32
  %31 = bitcast %"class.gfx::Rect"* %13 to i64*
  %32 = zext i32 %23 to i64
  %33 = shl nuw i64 %32, 32
  %34 = zext i32 %21 to i64
  %35 = or i64 %33, %34
  store i64 %35, i64* %31, align 8
  %36 = icmp sgt i32 %21, 0
  %37 = icmp sgt i32 %28, 0
  %38 = and i1 %36, %37
  %39 = sub i32 2147483643, %2
  %40 = icmp ult i32 %39, %28
  %41 = and i1 %40, %38
  %42 = select i1 %41, i32 %39, i32 %28
  %43 = icmp sgt i32 %23, 0
  %44 = icmp sgt i32 %30, 0
  %45 = and i1 %43, %44
  %46 = sub nuw nsw i32 2147483647, %23
  %47 = icmp ult i32 %46, %30
  %48 = and i1 %47, %45
  %49 = select i1 %48, i32 %46, i32 %30
  %50 = icmp sgt i32 %42, 0
  %51 = select i1 %50, i32 %42, i32 0
  store i32 %51, i32* %25, align 8
  %52 = icmp sgt i32 %49, 0
  %53 = select i1 %52, i32 %49, i32 0
  store i32 %53, i32* %26, align 4
  %54 = call zeroext i1 @_ZN4base4i18n5IsRTLEv() #7
  br i1 %54, label %55, label %68

55:                                               ; preds = %5
  %56 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %13, i64 0, i32 0, i32 0
  %57 = call i32 @_ZNK5views4View19GetMirroredXForRectERKN3gfx4RectE(%"class.views::View"* %1, %"class.gfx::Rect"* nonnull dereferenceable(16) %13) #7
  store i32 %57, i32* %56, align 8
  %58 = load i32, i32* %25, align 8
  %59 = icmp sgt i32 %57, 0
  %60 = icmp sgt i32 %58, 0
  %61 = and i1 %59, %60
  %62 = sub nuw nsw i32 2147483647, %57
  %63 = icmp ult i32 %62, %58
  %64 = and i1 %63, %61
  %65 = select i1 %64, i32 %62, i32 %58
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  store i32 %67, i32* %25, align 8
  br label %68

68:                                               ; preds = %55, %5
  %69 = bitcast %"class.cc::PaintFlags"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %69) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %69, i8* align 8 bitcast (%"class.cc::PaintFlags"* @__const._ZN5views8NewBadge12DrawNewBadgeEPN3gfx6CanvasEPKNS_4ViewEiiRKNS1_8FontListE.new_flags to i8*), i64 72, i1 false)
  call void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"* nonnull %14) #7
  %70 = call %"class.ui::NativeTheme"* @_ZNK5views4View14GetNativeThemeEv(%"class.views::View"* %1) #7
  %71 = call i32 @_ZNK2ui11NativeTheme14GetSystemColorENS0_7ColorIdENS0_11ColorSchemeE(%"class.ui::NativeTheme"* %70, i32 17, i32 0) #7
  %72 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %14, i64 0, i32 6
  store i32 %71, i32* %72, align 8
  %73 = bitcast <2 x i64>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #7
  %74 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %74)
  %75 = bitcast <2 x i64>* %6 to %"class.gfx::Rect"*
  %76 = bitcast { i64, i64 }* %7 to %"class.gfx::Insets"*
  %77 = bitcast { i64, i64 }* %8 to %"class.gfx::Insets"*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %74, i8* nonnull align 8 %24, i64 16, i1 false) #7
  %78 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #7
  %79 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %79) #7
  %80 = bitcast <4 x i32>* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %80) #7
  store <4 x i32> <i32 4, i32 4, i32 4, i32 4>, <4 x i32>* %9, align 16
  %81 = call { i64, i64 } @_ZN3gfx25AdjustVisualBorderForFontERKNS_8FontListERKNS_6InsetsE(%"class.gfx::FontList"* nonnull dereferenceable(8) %11, %"class.gfx::Insets"* nonnull dereferenceable(16) %10) #7
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %83 = extractvalue { i64, i64 } %81, 0
  store i64 %83, i64* %82, align 8
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %85 = extractvalue { i64, i64 } %81, 1
  store i64 %85, i64* %84, align 8
  %86 = call { i64, i64 } @_ZNK3gfx6InsetsngEv(%"class.gfx::Insets"* nonnull %77) #7
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  %88 = extractvalue { i64, i64 } %86, 0
  store i64 %88, i64* %87, align 8
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  %90 = extractvalue { i64, i64 } %86, 1
  store i64 %90, i64* %89, align 8
  call void @_ZN3gfx4Rect5InsetERKNS_6InsetsE(%"class.gfx::Rect"* nonnull %75, %"class.gfx::Insets"* nonnull dereferenceable(16) %76) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %80) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %79) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #7
  %91 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %74)
  store <2 x i64> %91, <2 x i64>* %15, align 16
  call void @_ZN3gfx6Canvas13DrawRoundRectERKNS_4RectEiRKN2cc10PaintFlagsE(%"class.gfx::Canvas"* %0, %"class.gfx::Rect"* nonnull dereferenceable(16) %16, i32 3, %"class.cc::PaintFlags"* nonnull dereferenceable(72) %14) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #7
  %92 = call %"class.ui::NativeTheme"* @_ZNK5views4View14GetNativeThemeEv(%"class.views::View"* %1) #7
  %93 = call i32 @_ZNK2ui11NativeTheme14GetSystemColorENS0_7ColorIdENS0_11ColorSchemeE(%"class.ui::NativeTheme"* %92, i32 20, i32 0) #7
  call void @_ZN3gfx6Canvas14DrawStringRectERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS_8FontListEjRKNS_4RectE(%"class.gfx::Canvas"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %12, %"class.gfx::FontList"* nonnull dereferenceable(8) %11, i32 %93, %"class.gfx::Rect"* nonnull dereferenceable(16) %13) #7
  call void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %69) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #7
  %94 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %95 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %94, i64 0, i32 1, i32 1
  %96 = load i8, i8* %95, align 1
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %68
  %99 = bitcast %"class.std::__1::basic_string"* %12 to i8**
  %100 = load i8*, i8** %99, align 8
  call void @_ZdlPv(i8* %100) #8
  br label %101

101:                                              ; preds = %68, %98
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #7
  call void @_ZN3gfx8FontListD1Ev(%"class.gfx::FontList"* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN9l10n_util14GetStringUTF16Ei(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #2

declare i32 @_ZN3gfx28GetFontCapHeightCenterOffsetERKNS_8FontListES2_(%"class.gfx::FontList"* dereferenceable(8), %"class.gfx::FontList"* dereferenceable(8)) local_unnamed_addr #2

declare i64 @_ZN3gfx13GetStringSizeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* dereferenceable(24), %"class.gfx::FontList"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4base4i18n5IsRTLEv() local_unnamed_addr #2

declare i32 @_ZNK5views4View19GetMirroredXForRectERKN3gfx4RectE(%"class.views::View"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN2cc10PaintFlagsC1Ev(%"class.cc::PaintFlags"*) unnamed_addr #2

declare %"class.ui::NativeTheme"* @_ZNK5views4View14GetNativeThemeEv(%"class.views::View"*) local_unnamed_addr #2

declare i32 @_ZNK2ui11NativeTheme14GetSystemColorENS0_7ColorIdENS0_11ColorSchemeE(%"class.ui::NativeTheme"*, i32, i32) local_unnamed_addr #2

declare void @_ZN3gfx6Canvas13DrawRoundRectERKNS_4RectEiRKN2cc10PaintFlagsE(%"class.gfx::Canvas"*, %"class.gfx::Rect"* dereferenceable(16), i32, %"class.cc::PaintFlags"* dereferenceable(72)) local_unnamed_addr #2

declare void @_ZN3gfx6Canvas14DrawStringRectERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEERKNS_8FontListEjRKNS_4RectE(%"class.gfx::Canvas"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.gfx::FontList"* dereferenceable(8), i32, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2cc10PaintFlagsD1Ev(%"class.cc::PaintFlags"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3gfx8FontListD1Ev(%"class.gfx::FontList"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5views8NewBadge15GetNewBadgeSizeERKN3gfx8FontListE(%"class.gfx::FontList"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = bitcast <4 x i32>* %5 to %"class.gfx::Insets"*
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.gfx::FontList", align 8
  %9 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #7
  %10 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  call void @_ZN9l10n_util14GetStringUTF16Ei(%"class.std::__1::basic_string"* nonnull sret %7, i32 28989) #7
  %11 = bitcast %"class.gfx::FontList"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"class.gfx::FontList", %"class.gfx::FontList"* %8, i64 0, i32 0, i32 0
  store %"class.gfx::FontListImpl"* inttoptr (i64 -6148914691236517206 to %"class.gfx::FontListImpl"*), %"class.gfx::FontListImpl"** %12, align 8
  call void @_ZNK3gfx8FontList6DeriveEiiNS_4Font6WeightE(%"class.gfx::FontList"* nonnull sret %8, %"class.gfx::FontList"* %0, i32 -1, i32 0, i32 500) #7
  %13 = call i64 @_ZN3gfx13GetStringSizeERKNSt3__112basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEERKNS_8FontListE(%"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, %"class.gfx::FontList"* nonnull dereferenceable(8) %8) #7
  %14 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14)
  %15 = bitcast { i64, i64 }* %2 to %"class.gfx::Rect"*
  %16 = bitcast { i64, i64 }* %3 to %"class.gfx::Insets"*
  %17 = bitcast { i64, i64 }* %4 to %"class.gfx::Insets"*
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %19 = bitcast { i64, i64 }* %2 to i32*
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to i32*
  store i32 0, i32* %21, align 4
  store i64 %13, i64* %18, align 8
  %22 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #7
  %23 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #7
  %24 = bitcast <4 x i32>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #7
  store <4 x i32> <i32 4, i32 4, i32 4, i32 4>, <4 x i32>* %5, align 16
  %25 = call { i64, i64 } @_ZN3gfx25AdjustVisualBorderForFontERKNS_8FontListERKNS_6InsetsE(%"class.gfx::FontList"* nonnull dereferenceable(8) %8, %"class.gfx::Insets"* nonnull dereferenceable(16) %6) #7
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %27 = extractvalue { i64, i64 } %25, 0
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %29 = extractvalue { i64, i64 } %25, 1
  store i64 %29, i64* %28, align 8
  %30 = call { i64, i64 } @_ZNK3gfx6InsetsngEv(%"class.gfx::Insets"* nonnull %17) #7
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %32 = extractvalue { i64, i64 } %30, 0
  store i64 %32, i64* %31, align 8
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %34 = extractvalue { i64, i64 } %30, 1
  store i64 %34, i64* %33, align 8
  call void @_ZN3gfx4Rect5InsetERKNS_6InsetsE(%"class.gfx::Rect"* nonnull %15, %"class.gfx::Insets"* nonnull dereferenceable(16) %16) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #7
  %35 = load i64, i64* %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14)
  call void @_ZN3gfx8FontListD1Ev(%"class.gfx::FontList"* nonnull %8) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7
  %36 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %36, i64 0, i32 1, i32 1
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %1
  %41 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #8
  br label %43

43:                                               ; preds = %1, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #7
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5views8NewBadge32GetNewBadgeAccessibleDescriptionEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 align 2 {
  tail call void @_ZN9l10n_util14GetStringUTF16Ei(%"class.std::__1::basic_string"* sret %0, i32 28990) #7
  ret void
}

declare void @_ZNK3gfx8FontList6DeriveEiiNS_4Font6WeightE(%"class.gfx::FontList"* sret, %"class.gfx::FontList"*, i32, i32, i32) local_unnamed_addr #2

declare void @_ZN3gfx4Rect5InsetERKNS_6InsetsE(%"class.gfx::Rect"*, %"class.gfx::Insets"* dereferenceable(16)) local_unnamed_addr #2

declare { i64, i64 } @_ZN3gfx25AdjustVisualBorderForFontERKNS_8FontListERKNS_6InsetsE(%"class.gfx::FontList"* dereferenceable(8), %"class.gfx::Insets"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZNK3gfx6InsetsngEv(%"class.gfx::Insets"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = tail call i1 @llvm.is.constant.i32(i32 %3) #7
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = sub i32 0, %3
  %7 = icmp eq i32 %6, -2147483648
  %8 = select i1 %7, i32 2147483647, i32 %6
  br label %14

9:                                                ; preds = %1
  %10 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %3) #7
  %11 = extractvalue { i32, i1 } %10, 1
  %12 = extractvalue { i32, i1 } %10, 0
  %13 = select i1 %11, i32 2147483647, i32 %12
  br label %14

14:                                               ; preds = %5, %9
  %15 = phi i32 [ %8, %5 ], [ %13, %9 ]
  %16 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = tail call i1 @llvm.is.constant.i32(i32 %17) #7
  br i1 %18, label %19, label %23

19:                                               ; preds = %14
  %20 = sub i32 0, %17
  %21 = icmp eq i32 %20, -2147483648
  %22 = select i1 %21, i32 2147483647, i32 %20
  br label %28

23:                                               ; preds = %14
  %24 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %17) #7
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 2147483647, i32 %26
  br label %28

28:                                               ; preds = %19, %23
  %29 = phi i32 [ %22, %19 ], [ %27, %23 ]
  %30 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = tail call i1 @llvm.is.constant.i32(i32 %31) #7
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = sub i32 0, %31
  %35 = icmp eq i32 %34, -2147483648
  %36 = select i1 %35, i32 2147483647, i32 %34
  br label %42

37:                                               ; preds = %28
  %38 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %31) #7
  %39 = extractvalue { i32, i1 } %38, 1
  %40 = extractvalue { i32, i1 } %38, 0
  %41 = select i1 %39, i32 2147483647, i32 %40
  br label %42

42:                                               ; preds = %33, %37
  %43 = phi i32 [ %36, %33 ], [ %41, %37 ]
  %44 = getelementptr inbounds %"class.gfx::Insets", %"class.gfx::Insets"* %0, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = tail call i1 @llvm.is.constant.i32(i32 %45) #7
  br i1 %46, label %47, label %51

47:                                               ; preds = %42
  %48 = sub i32 0, %45
  %49 = icmp eq i32 %48, -2147483648
  %50 = select i1 %49, i32 2147483647, i32 %48
  br label %56

51:                                               ; preds = %42
  %52 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %45) #7
  %53 = extractvalue { i32, i1 } %52, 1
  %54 = extractvalue { i32, i1 } %52, 0
  %55 = select i1 %53, i32 2147483647, i32 %54
  br label %56

56:                                               ; preds = %47, %51
  %57 = phi i32 [ %50, %47 ], [ %55, %51 ]
  %58 = icmp sgt i32 %15, 0
  %59 = icmp sgt i32 %43, 0
  %60 = and i1 %58, %59
  %61 = sub nuw nsw i32 2147483647, %15
  %62 = icmp ult i32 %61, %43
  %63 = and i1 %62, %60
  br i1 %63, label %71, label %64

64:                                               ; preds = %56
  %65 = and i32 %43, %15
  %66 = icmp slt i32 %65, 0
  %67 = sub nsw i32 -2147483648, %15
  %68 = icmp sgt i32 %67, %43
  %69 = and i1 %68, %66
  %70 = select i1 %69, i32 %67, i32 %43
  br label %71

71:                                               ; preds = %64, %56
  %72 = phi i32 [ %70, %64 ], [ %61, %56 ]
  %73 = icmp sgt i32 %29, 0
  %74 = icmp sgt i32 %57, 0
  %75 = and i1 %73, %74
  %76 = sub nuw nsw i32 2147483647, %29
  %77 = icmp ult i32 %76, %57
  %78 = and i1 %77, %75
  br i1 %78, label %86, label %79

79:                                               ; preds = %71
  %80 = and i32 %57, %29
  %81 = icmp slt i32 %80, 0
  %82 = sub nsw i32 -2147483648, %29
  %83 = icmp sgt i32 %82, %57
  %84 = and i1 %83, %81
  %85 = select i1 %84, i32 %82, i32 %57
  br label %86

86:                                               ; preds = %71, %79
  %87 = phi i32 [ %85, %79 ], [ %76, %71 ]
  %88 = zext i32 %29 to i64
  %89 = shl nuw i64 %88, 32
  %90 = zext i32 %15 to i64
  %91 = or i64 %89, %90
  %92 = insertvalue { i64, i64 } undef, i64 %91, 0
  %93 = zext i32 %87 to i64
  %94 = shl nuw i64 %93, 32
  %95 = zext i32 %72 to i64
  %96 = or i64 %94, %95
  %97 = insertvalue { i64, i64 } %92, i64 %96, 1
  ret { i64, i64 } %97
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
