; ModuleID = '../../third_party/pdfium/xfa/fwl/cfwl_messagemousewheel.cpp'
source_filename = "../../third_party/pdfium/xfa/fwl/cfwl_messagemousewheel.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFWL_MessageMouseWheel = type { %class.CFWL_Message, %class.CFX_PTemplate, %class.CFX_VTemplate }
%class.CFWL_Message = type { i32 (...)**, i32, %"class.fxcrt::UnownedPtr", %"class.fxcrt::UnownedPtr" }
%"class.fxcrt::UnownedPtr" = type { %class.CFWL_Widget* }
%class.CFX_PTemplate = type { float, float }
%class.CFX_VTemplate = type { %class.CFX_PTemplate.0 }
%class.CFX_PTemplate.0 = type { i32, i32 }
%class.CFWL_Widget = type opaque

@_ZTV22CFWL_MessageMouseWheel = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFWL_MessageMouseWheel*)* @_ZN22CFWL_MessageMouseWheelD2Ev to i8*), i8* bitcast (void (%class.CFWL_MessageMouseWheel*)* @_ZN22CFWL_MessageMouseWheelD0Ev to i8*)] }, align 8

@_ZN22CFWL_MessageMouseWheelC1EP11CFWL_WidgetRK13CFX_PTemplateIfERK13CFX_VTemplateIiE = hidden unnamed_addr alias void (%class.CFWL_MessageMouseWheel*, %class.CFWL_Widget*, %class.CFX_PTemplate*, %class.CFX_VTemplate*), void (%class.CFWL_MessageMouseWheel*, %class.CFWL_Widget*, %class.CFX_PTemplate*, %class.CFX_VTemplate*)* @_ZN22CFWL_MessageMouseWheelC2EP11CFWL_WidgetRK13CFX_PTemplateIfERK13CFX_VTemplateIiE
@_ZN22CFWL_MessageMouseWheelD1Ev = hidden unnamed_addr alias void (%class.CFWL_MessageMouseWheel*), void (%class.CFWL_MessageMouseWheel*)* @_ZN22CFWL_MessageMouseWheelD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFWL_MessageMouseWheelC2EP11CFWL_WidgetRK13CFX_PTemplateIfERK13CFX_VTemplateIiE(%class.CFWL_MessageMouseWheel*, %class.CFWL_Widget*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_VTemplate* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 0
  tail call void @_ZN12CFWL_MessageC2ENS_4TypeEP11CFWL_WidgetS2_(%class.CFWL_Message* %5, i32 3, %class.CFWL_Widget* null, %class.CFWL_Widget* %1) #4
  %6 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV22CFWL_MessageMouseWheel, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 1
  %8 = bitcast %class.CFX_PTemplate* %2 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %class.CFX_PTemplate* %7 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 1, i32 1
  %12 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 1
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = bitcast float* %11 to i32*
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 2, i32 0, i32 0
  %17 = getelementptr inbounds %class.CFX_VTemplate, %class.CFX_VTemplate* %3, i64 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %16, align 4
  %19 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 2, i32 0, i32 1
  %20 = getelementptr inbounds %class.CFX_VTemplate, %class.CFX_VTemplate* %3, i64 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %19, align 4
  ret void
}

declare void @_ZN12CFWL_MessageC2ENS_4TypeEP11CFWL_WidgetS2_(%class.CFWL_Message*, i32, %class.CFWL_Widget*, %class.CFWL_Widget*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN12CFWL_MessageD2Ev(%class.CFWL_Message*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFWL_MessageMouseWheelD2Ev(%class.CFWL_MessageMouseWheel*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 0
  tail call void @_ZN12CFWL_MessageD2Ev(%class.CFWL_Message* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFWL_MessageMouseWheelD0Ev(%class.CFWL_MessageMouseWheel*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_MessageMouseWheel, %class.CFWL_MessageMouseWheel* %0, i64 0, i32 0
  tail call void @_ZN12CFWL_MessageD2Ev(%class.CFWL_Message* %2) #4
  %3 = bitcast %class.CFWL_MessageMouseWheel* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
