; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/numeric_verify.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/numeric_verify.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { {}*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"struct.tflite::ops::custom::numeric_verify::OpData" = type { float, float, i8, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"struct.Eigen::half" = type { %"struct.Eigen::half_impl::half_base" }
%"struct.Eigen::half_impl::half_base" = type { %"struct.Eigen::half_impl::__half_raw" }
%"struct.Eigen::half_impl::__half_raw" = type { i16 }

$_ZN6tflite3ops6custom14numeric_verify4EvalILNS0_7builtin10dequantize10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops6custom14numeric_verify4EvalILNS0_7builtin10dequantize10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_ = comdat any

$_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [71 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/numeric_verify.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.9 = private unnamed_addr constant [166 x i8] c"op_context.input->type == kTfLiteUInt8 || op_context.input->type == kTfLiteInt8 || op_context.input->type == kTfLiteInt16 || op_context.input->type == kTfLiteFloat16\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"op_context.ref->type == kTfLiteFloat32\00", align 1
@_ZZN6tflite3ops6custom27Register_NUMERIC_VERIFY_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops6custom14numeric_verify4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops6custom14numeric_verify4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops6custom14numeric_verify7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops6custom14numeric_verify4EvalILNS0_7builtin10dequantize10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops6custom27Register_NUMERIC_VERIFY_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops6custom14numeric_verify4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops6custom14numeric_verify4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops6custom14numeric_verify7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops6custom14numeric_verify4EvalILNS0_7builtin10dequantize10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.12 = private unnamed_addr constant [62 x i8] c"std: %f, mean: %f, max_diff: %f (scale: %f, zero_point: %d).\0A\00", align 1
@.str.13 = private unnamed_addr constant [104 x i8] c"Mismatch: %f is quantized to %d with (%f, %d). abs(%f - %f) = %f > %f (tolerance) range percentage %f.\0A\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"Type %d not supported.\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops6custom14numeric_verify4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readonly, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 16) #10
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 16, i1 false)
  %5 = getelementptr inbounds i8, i8* %4, i64 12
  %6 = bitcast i8* %5 to i32*
  store i32 -1, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %4, i64 8
  store i8 0, i8* %7, align 4
  %8 = bitcast i8* %1 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast i8* %4 to i32*
  store i32 %9, i32* %10, align 4
  ret i8* %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops6custom14numeric_verify4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #10
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops6custom14numeric_verify7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i64 0, i64 0), i32 77, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 2) #11
  br label %103

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %15, i32 0) #11
  br label %103

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %22 = bitcast i8** %21 to %"struct.tflite::ops::custom::numeric_verify::OpData"**
  %23 = load %"struct.tflite::ops::custom::numeric_verify::OpData"*, %"struct.tflite::ops::custom::numeric_verify::OpData"** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  br label %32

32:                                               ; preds = %27, %20
  %33 = phi %struct.TfLiteTensor* [ %31, %27 ], [ null, %20 ]
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %42, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %39 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %38, align 8
  %40 = sext i32 %35 to i64
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %39, i64 %40
  br label %42

42:                                               ; preds = %32, %37
  %43 = phi %struct.TfLiteTensor* [ %41, %37 ], [ null, %32 ]
  %44 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 0
  %45 = load i32, i32* %44, align 8
  switch i32 %45, label %46 [
    i32 3, label %49
    i32 9, label %49
    i32 7, label %49
    i32 10, label %49
  ]

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i64 0, i64 0), i32 86, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.9, i64 0, i64 0)) #11
  br label %103

49:                                               ; preds = %42, %42, %42, %42
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %55 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %54, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %55(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.3, i64 0, i64 0), i32 87, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0)) #11
  br label %103

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %23, i64 0, i32 0
  %58 = load float, float* %57, align 4
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 3, i32 0
  %60 = load float, float* %59, align 8
  %61 = fmul float %58, %60
  %62 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %23, i64 0, i32 1
  store float %61, float* %62, align 4
  %63 = load i32, i32* %44, align 8
  switch i32 %63, label %68 [
    i32 3, label %65
    i32 9, label %65
    i32 7, label %64
  ]

64:                                               ; preds = %56
  br label %65

65:                                               ; preds = %56, %56, %64
  %66 = phi float [ 6.553600e+04, %64 ], [ 2.560000e+02, %56 ], [ 2.560000e+02, %56 ]
  %67 = fmul float %61, %66
  store float %67, float* %62, align 4
  br label %68

68:                                               ; preds = %65, %56
  %69 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %23, i64 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, -1
  br i1 %71, label %72, label %77

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 6
  %74 = load i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, i32*)** %73, align 8
  %75 = tail call i32 %74(%struct.TfLiteContext* %0, i32 1, i32* %69) #11
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %103

77:                                               ; preds = %72, %68
  %78 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %79 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %78, align 8
  tail call void @TfLiteIntArrayFree(%struct.TfLiteIntArray* %79) #11
  %80 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 1) #11
  store %struct.TfLiteIntArray* %80, %struct.TfLiteIntArray** %78, align 8
  %81 = load i32, i32* %69, align 4
  %82 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %80, i64 0, i32 1, i64 0
  store i32 %81, i32* %82, align 4
  %83 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %78, align 8
  %84 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %83, i64 0, i32 1, i64 0
  %85 = load i32, i32* %84, align 4
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %92, label %87

87:                                               ; preds = %77
  %88 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %89 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %88, align 8
  %90 = sext i32 %85 to i64
  %91 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %89, i64 %90
  br label %92

92:                                               ; preds = %77, %87
  %93 = phi %struct.TfLiteTensor* [ %91, %87 ], [ null, %77 ]
  %94 = load i32, i32* %50, align 8
  %95 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %93, i64 0, i32 0
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %93, i64 0, i32 4
  store i32 4, i32* %96, align 8
  %97 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %98 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %97, align 8
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %33, i64 0, i32 2
  %100 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %99, align 8
  %101 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %100) #11
  %102 = tail call i32 %98(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %93, %struct.TfLiteIntArray* %101) #11
  br label %103

103:                                              ; preds = %46, %53, %72, %92, %17, %8
  %104 = phi i32 [ 1, %8 ], [ 1, %17 ], [ %75, %72 ], [ 1, %53 ], [ 1, %46 ], [ %102, %92 ]
  ret i32 %104
}

declare void @TfLiteIntArrayFree(%struct.TfLiteIntArray*) local_unnamed_addr #4

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #4

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops6custom27Register_NUMERIC_VERIFY_OPTEv() local_unnamed_addr #5 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops6custom27Register_NUMERIC_VERIFY_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops6custom14numeric_verify4EvalILNS0_7builtin10dequantize10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %5 = bitcast i8** %4 to %"struct.tflite::ops::custom::numeric_verify::OpData"**
  %6 = load %"struct.tflite::ops::custom::numeric_verify::OpData"*, %"struct.tflite::ops::custom::numeric_verify::OpData"** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %8 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 1, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %14 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 %15
  br label %17

17:                                               ; preds = %12, %2
  %18 = phi %struct.TfLiteTensor* [ %16, %12 ], [ null, %2 ]
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 1, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %17, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %17 ]
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %6, i64 0, i32 2
  %34 = load i8, i8* %33, align 4, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %710

36:                                               ; preds = %32, %27
  %37 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %44 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %43, align 8
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 %45
  br label %47

47:                                               ; preds = %36, %42
  %48 = phi %struct.TfLiteTensor* [ %46, %42 ], [ null, %36 ]
  %49 = tail call i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteTensor* %18, %struct.TfLiteTensor* %48)
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %710

51:                                               ; preds = %47
  %52 = load i32, i32* %29, align 8
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %6, i64 0, i32 2
  store i8 1, i8* %55, align 4
  br label %56

56:                                               ; preds = %54, %51
  %57 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %6, i64 0, i32 0
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = fcmp olt double %59, 1.000000e-01
  br i1 %60, label %61, label %563

61:                                               ; preds = %56
  %62 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #11
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 24, i1 false) #11
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 2
  %67 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = bitcast double** %65 to i64*
  %73 = bitcast %"class.std::__1::vector"* %3 to i64*
  br label %151

74:                                               ; preds = %61
  %75 = sext i32 %69 to i64
  %76 = add nsw i64 %75, -1
  %77 = and i64 %75, 7
  %78 = icmp ult i64 %76, 7
  br i1 %78, label %127, label %79

79:                                               ; preds = %74
  %80 = sub nsw i64 %75, %77
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ 0, %79 ], [ %124, %81 ]
  %83 = phi i64 [ 1, %79 ], [ %123, %81 ]
  %84 = phi i64 [ %80, %79 ], [ %125, %81 ]
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %82
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = mul nsw i64 %83, %87
  %89 = or i64 %82, 1
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %88, %92
  %94 = or i64 %82, 2
  %95 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %93, %97
  %99 = or i64 %82, 3
  %100 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %98, %102
  %104 = or i64 %82, 4
  %105 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %103, %107
  %109 = or i64 %82, 5
  %110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = sext i32 %111 to i64
  %113 = mul nsw i64 %108, %112
  %114 = or i64 %82, 6
  %115 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %116 to i64
  %118 = mul nsw i64 %113, %117
  %119 = or i64 %82, 7
  %120 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = sext i32 %121 to i64
  %123 = mul nsw i64 %118, %122
  %124 = add nuw nsw i64 %82, 8
  %125 = add i64 %84, -8
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %81

127:                                              ; preds = %81, %74
  %128 = phi i64 [ undef, %74 ], [ %123, %81 ]
  %129 = phi i64 [ 0, %74 ], [ %124, %81 ]
  %130 = phi i64 [ 1, %74 ], [ %123, %81 ]
  %131 = icmp eq i64 %77, 0
  br i1 %131, label %143, label %132

132:                                              ; preds = %127, %132
  %133 = phi i64 [ %140, %132 ], [ %129, %127 ]
  %134 = phi i64 [ %139, %132 ], [ %130, %127 ]
  %135 = phi i64 [ %141, %132 ], [ %77, %127 ]
  %136 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %133
  %137 = load i32, i32* %136, align 4
  %138 = sext i32 %137 to i64
  %139 = mul nsw i64 %134, %138
  %140 = add nuw nsw i64 %133, 1
  %141 = add i64 %135, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %132, !llvm.loop !3

143:                                              ; preds = %132, %127
  %144 = phi i64 [ %128, %127 ], [ %139, %132 ]
  %145 = bitcast double** %65 to i64*
  %146 = bitcast %"class.std::__1::vector"* %3 to i64*
  %147 = icmp eq i64 %144, 0
  br i1 %147, label %166, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %144, 2305843009213693951
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #12
  unreachable

151:                                              ; preds = %71, %148
  %152 = phi i64 [ 1, %71 ], [ %144, %148 ]
  %153 = phi i64* [ %72, %71 ], [ %145, %148 ]
  %154 = phi i64* [ %73, %71 ], [ %146, %148 ]
  %155 = bitcast double** %64 to i64*
  %156 = shl i64 %152, 3
  %157 = tail call i8* @_Znwm(i64 %156) #10
  %158 = bitcast i8* %157 to double*
  %159 = ptrtoint i8* %157 to i64
  %160 = getelementptr inbounds double, double* %158, i64 %152
  %161 = ptrtoint double* %160 to i64
  %162 = ptrtoint i8* %157 to i64
  store i64 %162, i64* %154, align 8
  store i64 %159, i64* %155, align 8
  store i64 %161, i64* %153, align 8
  %163 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8
  %164 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %163, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  br label %166

166:                                              ; preds = %143, %151
  %167 = phi i64* [ %154, %151 ], [ %146, %143 ]
  %168 = phi i64* [ %153, %151 ], [ %145, %143 ]
  %169 = phi double* [ %158, %151 ], [ null, %143 ]
  %170 = phi i64 [ %159, %151 ], [ 0, %143 ]
  %171 = phi i32 [ %165, %151 ], [ %69, %143 ]
  %172 = phi %struct.TfLiteIntArray* [ %163, %151 ], [ %67, %143 ]
  %173 = icmp sgt i32 %171, 0
  br i1 %173, label %174, label %249

174:                                              ; preds = %166
  %175 = sext i32 %171 to i64
  %176 = add nsw i64 %175, -1
  %177 = and i64 %175, 7
  %178 = icmp ult i64 %176, 7
  br i1 %178, label %227, label %179

179:                                              ; preds = %174
  %180 = sub nsw i64 %175, %177
  br label %181

181:                                              ; preds = %181, %179
  %182 = phi i64 [ 0, %179 ], [ %224, %181 ]
  %183 = phi i64 [ 1, %179 ], [ %223, %181 ]
  %184 = phi i64 [ %180, %179 ], [ %225, %181 ]
  %185 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %182
  %186 = load i32, i32* %185, align 4
  %187 = sext i32 %186 to i64
  %188 = mul nsw i64 %183, %187
  %189 = or i64 %182, 1
  %190 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = mul nsw i64 %188, %192
  %194 = or i64 %182, 2
  %195 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = mul nsw i64 %193, %197
  %199 = or i64 %182, 3
  %200 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %198, %202
  %204 = or i64 %182, 4
  %205 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = sext i32 %206 to i64
  %208 = mul nsw i64 %203, %207
  %209 = or i64 %182, 5
  %210 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = mul nsw i64 %208, %212
  %214 = or i64 %182, 6
  %215 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %214
  %216 = load i32, i32* %215, align 4
  %217 = sext i32 %216 to i64
  %218 = mul nsw i64 %213, %217
  %219 = or i64 %182, 7
  %220 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %218, %222
  %224 = add nuw nsw i64 %182, 8
  %225 = add i64 %184, -8
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %181

227:                                              ; preds = %181, %174
  %228 = phi i64 [ undef, %174 ], [ %223, %181 ]
  %229 = phi i64 [ 0, %174 ], [ %224, %181 ]
  %230 = phi i64 [ 1, %174 ], [ %223, %181 ]
  %231 = icmp eq i64 %177, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %227, %232
  %233 = phi i64 [ %240, %232 ], [ %229, %227 ]
  %234 = phi i64 [ %239, %232 ], [ %230, %227 ]
  %235 = phi i64 [ %241, %232 ], [ %177, %227 ]
  %236 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %233
  %237 = load i32, i32* %236, align 4
  %238 = sext i32 %237 to i64
  %239 = mul nsw i64 %234, %238
  %240 = add nuw nsw i64 %233, 1
  %241 = add i64 %235, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !5

243:                                              ; preds = %232, %227
  %244 = phi i64 [ %228, %227 ], [ %239, %232 ]
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %254, label %246

246:                                              ; preds = %243
  %247 = icmp ugt i64 %244, 2305843009213693951
  br i1 %247, label %248, label %249

248:                                              ; preds = %246
  tail call void @abort() #12
  unreachable

249:                                              ; preds = %166, %246
  %250 = phi i64 [ %244, %246 ], [ 1, %166 ]
  %251 = shl i64 %250, 3
  %252 = tail call i8* @_Znwm(i64 %251) #10
  %253 = bitcast i8* %252 to double*
  br label %254

254:                                              ; preds = %243, %249
  %255 = phi i8* [ %252, %249 ], [ null, %243 ]
  %256 = phi double* [ %253, %249 ], [ null, %243 ]
  %257 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %258 = icmp eq %struct.TfLiteTensor* %48, null
  %259 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 1
  %260 = bitcast %union.TfLitePtrUnion* %259 to float**
  %261 = icmp eq %struct.TfLiteTensor* %28, null
  %262 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %263 = bitcast %union.TfLitePtrUnion* %262 to float**
  %264 = bitcast double** %64 to i64*
  br label %265

265:                                              ; preds = %559, %254
  %266 = phi double* [ %560, %559 ], [ %169, %254 ]
  %267 = phi i64 [ %561, %559 ], [ %170, %254 ]
  %268 = phi i64 [ %562, %559 ], [ 0, %254 ]
  %269 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %257, align 8
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 0
  %271 = load i32, i32* %270, align 4
  %272 = icmp sgt i32 %271, 0
  br i1 %272, label %273, label %342

273:                                              ; preds = %265
  %274 = sext i32 %271 to i64
  %275 = add nsw i64 %274, -1
  %276 = and i64 %274, 7
  %277 = icmp ult i64 %275, 7
  br i1 %277, label %326, label %278

278:                                              ; preds = %273
  %279 = sub nsw i64 %274, %276
  br label %280

280:                                              ; preds = %280, %278
  %281 = phi i64 [ 0, %278 ], [ %323, %280 ]
  %282 = phi i64 [ 1, %278 ], [ %322, %280 ]
  %283 = phi i64 [ %279, %278 ], [ %324, %280 ]
  %284 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %281
  %285 = load i32, i32* %284, align 4
  %286 = sext i32 %285 to i64
  %287 = mul nsw i64 %282, %286
  %288 = or i64 %281, 1
  %289 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %288
  %290 = load i32, i32* %289, align 4
  %291 = sext i32 %290 to i64
  %292 = mul nsw i64 %287, %291
  %293 = or i64 %281, 2
  %294 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %293
  %295 = load i32, i32* %294, align 4
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %292, %296
  %298 = or i64 %281, 3
  %299 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %297, %301
  %303 = or i64 %281, 4
  %304 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %302, %306
  %308 = or i64 %281, 5
  %309 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = sext i32 %310 to i64
  %312 = mul nsw i64 %307, %311
  %313 = or i64 %281, 6
  %314 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %312, %316
  %318 = or i64 %281, 7
  %319 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %320 to i64
  %322 = mul nsw i64 %317, %321
  %323 = add nuw nsw i64 %281, 8
  %324 = add i64 %283, -8
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %326, label %280

326:                                              ; preds = %280, %273
  %327 = phi i64 [ undef, %273 ], [ %322, %280 ]
  %328 = phi i64 [ 0, %273 ], [ %323, %280 ]
  %329 = phi i64 [ 1, %273 ], [ %322, %280 ]
  %330 = icmp eq i64 %276, 0
  br i1 %330, label %342, label %331

331:                                              ; preds = %326, %331
  %332 = phi i64 [ %339, %331 ], [ %328, %326 ]
  %333 = phi i64 [ %338, %331 ], [ %329, %326 ]
  %334 = phi i64 [ %340, %331 ], [ %276, %326 ]
  %335 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %332
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %336 to i64
  %338 = mul nsw i64 %333, %337
  %339 = add nuw nsw i64 %332, 1
  %340 = add i64 %334, -1
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %331, !llvm.loop !6

342:                                              ; preds = %326, %331, %265
  %343 = phi i64 [ 1, %265 ], [ %327, %326 ], [ %338, %331 ]
  %344 = icmp sgt i64 %343, %268
  br i1 %344, label %491, label %345

345:                                              ; preds = %342
  %346 = load double*, double** %63, align 8
  %347 = ptrtoint double* %346 to i64
  %348 = icmp eq double* %346, %266
  br i1 %348, label %371, label %349

349:                                              ; preds = %345
  %350 = getelementptr double, double* %266, i64 -1
  %351 = ptrtoint double* %350 to i64
  %352 = sub i64 %351, %347
  %353 = lshr i64 %352, 3
  %354 = add nuw nsw i64 %353, 1
  %355 = and i64 %354, 7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %366, label %357

357:                                              ; preds = %349, %357
  %358 = phi double [ %362, %357 ], [ 0.000000e+00, %349 ]
  %359 = phi double* [ %363, %357 ], [ %346, %349 ]
  %360 = phi i64 [ %364, %357 ], [ %355, %349 ]
  %361 = load double, double* %359, align 8
  %362 = fadd double %358, %361
  %363 = getelementptr inbounds double, double* %359, i64 1
  %364 = add i64 %360, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %357, !llvm.loop !7

366:                                              ; preds = %357, %349
  %367 = phi double [ undef, %349 ], [ %362, %357 ]
  %368 = phi double [ 0.000000e+00, %349 ], [ %362, %357 ]
  %369 = phi double* [ %346, %349 ], [ %363, %357 ]
  %370 = icmp ult i64 %352, 56
  br i1 %370, label %404, label %376

371:                                              ; preds = %345
  %372 = sub i64 %267, %347
  %373 = ashr exact i64 %372, 3
  %374 = uitofp i64 %373 to double
  %375 = fdiv double 0.000000e+00, %374
  br label %471

376:                                              ; preds = %366, %376
  %377 = phi double [ %401, %376 ], [ %368, %366 ]
  %378 = phi double* [ %402, %376 ], [ %369, %366 ]
  %379 = load double, double* %378, align 8
  %380 = fadd double %377, %379
  %381 = getelementptr inbounds double, double* %378, i64 1
  %382 = load double, double* %381, align 8
  %383 = fadd double %380, %382
  %384 = getelementptr inbounds double, double* %378, i64 2
  %385 = load double, double* %384, align 8
  %386 = fadd double %383, %385
  %387 = getelementptr inbounds double, double* %378, i64 3
  %388 = load double, double* %387, align 8
  %389 = fadd double %386, %388
  %390 = getelementptr inbounds double, double* %378, i64 4
  %391 = load double, double* %390, align 8
  %392 = fadd double %389, %391
  %393 = getelementptr inbounds double, double* %378, i64 5
  %394 = load double, double* %393, align 8
  %395 = fadd double %392, %394
  %396 = getelementptr inbounds double, double* %378, i64 6
  %397 = load double, double* %396, align 8
  %398 = fadd double %395, %397
  %399 = getelementptr inbounds double, double* %378, i64 7
  %400 = load double, double* %399, align 8
  %401 = fadd double %398, %400
  %402 = getelementptr inbounds double, double* %378, i64 8
  %403 = icmp eq double* %402, %266
  br i1 %403, label %404, label %376

404:                                              ; preds = %376, %366
  %405 = phi double [ %367, %366 ], [ %401, %376 ]
  %406 = sub i64 %267, %347
  %407 = ashr exact i64 %406, 3
  %408 = uitofp i64 %407 to double
  %409 = fdiv double %405, %408
  br i1 %348, label %471, label %410

410:                                              ; preds = %404
  %411 = getelementptr double, double* %266, i64 -1
  %412 = ptrtoint double* %411 to i64
  %413 = sub i64 %412, %347
  %414 = lshr i64 %413, 3
  %415 = add nuw nsw i64 %414, 1
  %416 = and i64 %415, 3
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %432, label %418

418:                                              ; preds = %410, %418
  %419 = phi double [ %426, %418 ], [ 0.000000e+00, %410 ]
  %420 = phi double* [ %428, %418 ], [ %346, %410 ]
  %421 = phi double* [ %429, %418 ], [ %256, %410 ]
  %422 = phi i64 [ %430, %418 ], [ %416, %410 ]
  %423 = load double, double* %420, align 8
  %424 = tail call double @llvm.fabs.f64(double %423) #11
  %425 = fcmp olt double %419, %424
  %426 = select i1 %425, double %424, double %419
  %427 = fsub double %423, %409
  store double %427, double* %421, align 8
  %428 = getelementptr inbounds double, double* %420, i64 1
  %429 = getelementptr inbounds double, double* %421, i64 1
  %430 = add i64 %422, -1
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %432, label %418, !llvm.loop !8

432:                                              ; preds = %418, %410
  %433 = phi double [ undef, %410 ], [ %426, %418 ]
  %434 = phi double [ 0.000000e+00, %410 ], [ %426, %418 ]
  %435 = phi double* [ %346, %410 ], [ %428, %418 ]
  %436 = phi double* [ %256, %410 ], [ %429, %418 ]
  %437 = icmp ult i64 %413, 24
  br i1 %437, label %471, label %438

438:                                              ; preds = %432, %438
  %439 = phi double [ %466, %438 ], [ %434, %432 ]
  %440 = phi double* [ %468, %438 ], [ %435, %432 ]
  %441 = phi double* [ %469, %438 ], [ %436, %432 ]
  %442 = load double, double* %440, align 8
  %443 = tail call double @llvm.fabs.f64(double %442) #11
  %444 = fcmp olt double %439, %443
  %445 = select i1 %444, double %443, double %439
  %446 = fsub double %442, %409
  store double %446, double* %441, align 8
  %447 = getelementptr inbounds double, double* %440, i64 1
  %448 = getelementptr inbounds double, double* %441, i64 1
  %449 = load double, double* %447, align 8
  %450 = tail call double @llvm.fabs.f64(double %449) #11
  %451 = fcmp olt double %445, %450
  %452 = select i1 %451, double %450, double %445
  %453 = fsub double %449, %409
  store double %453, double* %448, align 8
  %454 = getelementptr inbounds double, double* %440, i64 2
  %455 = getelementptr inbounds double, double* %441, i64 2
  %456 = load double, double* %454, align 8
  %457 = tail call double @llvm.fabs.f64(double %456) #11
  %458 = fcmp olt double %452, %457
  %459 = select i1 %458, double %457, double %452
  %460 = fsub double %456, %409
  store double %460, double* %455, align 8
  %461 = getelementptr inbounds double, double* %440, i64 3
  %462 = getelementptr inbounds double, double* %441, i64 3
  %463 = load double, double* %461, align 8
  %464 = tail call double @llvm.fabs.f64(double %463) #11
  %465 = fcmp olt double %459, %464
  %466 = select i1 %465, double %464, double %459
  %467 = fsub double %463, %409
  store double %467, double* %462, align 8
  %468 = getelementptr inbounds double, double* %440, i64 4
  %469 = getelementptr inbounds double, double* %441, i64 4
  %470 = icmp eq double* %468, %266
  br i1 %470, label %471, label %438

471:                                              ; preds = %432, %438, %404, %371
  %472 = phi double [ %409, %404 ], [ %375, %371 ], [ %409, %438 ], [ %409, %432 ]
  %473 = phi double [ %408, %404 ], [ %374, %371 ], [ %408, %438 ], [ %408, %432 ]
  %474 = phi double [ 0.000000e+00, %404 ], [ 0.000000e+00, %371 ], [ %433, %432 ], [ %466, %438 ]
  %475 = fdiv double 0.000000e+00, %473
  %476 = tail call double @sqrt(double %475) #11
  %477 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %478 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %477, align 8
  %479 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 0
  %480 = load float, float* %479, align 8
  %481 = fpext float %480 to double
  %482 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 1
  %483 = load i32, i32* %482, align 4
  tail call void (%struct.TfLiteContext*, i8*, ...) %478(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.12, i64 0, i64 0), double %476, double %472, double %474, double %481, i32 %483) #11
  %484 = icmp eq double* %256, null
  br i1 %484, label %486, label %485

485:                                              ; preds = %471
  tail call void @_ZdlPv(i8* %255) #10
  br label %486

486:                                              ; preds = %471, %485
  %487 = icmp eq double* %346, null
  br i1 %487, label %490, label %488

488:                                              ; preds = %486
  store i64 %347, i64* %264, align 8
  %489 = bitcast double* %346 to i8*
  tail call void @_ZdlPv(i8* %489) #10
  br label %490

490:                                              ; preds = %486, %488
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #11
  br label %710

491:                                              ; preds = %342
  br i1 %258, label %494, label %492

492:                                              ; preds = %491
  %493 = load float*, float** %260, align 8
  br label %494

494:                                              ; preds = %491, %492
  %495 = phi float* [ %493, %492 ], [ null, %491 ]
  %496 = getelementptr inbounds float, float* %495, i64 %268
  %497 = load float, float* %496, align 4
  br i1 %261, label %500, label %498

498:                                              ; preds = %494
  %499 = load float*, float** %263, align 8
  br label %500

500:                                              ; preds = %494, %498
  %501 = phi float* [ %499, %498 ], [ null, %494 ]
  %502 = getelementptr inbounds float, float* %501, i64 %268
  %503 = load float, float* %502, align 4
  %504 = fsub float %497, %503
  %505 = fpext float %504 to double
  %506 = load double*, double** %65, align 8
  %507 = icmp ult double* %266, %506
  %508 = ptrtoint double* %506 to i64
  br i1 %507, label %509, label %512

509:                                              ; preds = %500
  store double %505, double* %266, align 8
  %510 = getelementptr inbounds double, double* %266, i64 1
  %511 = ptrtoint double* %510 to i64
  store i64 %511, i64* %264, align 8
  br label %559

512:                                              ; preds = %500
  %513 = ptrtoint double* %266 to i64
  %514 = load i64, i64* %167, align 8
  %515 = sub i64 %513, %514
  %516 = ashr exact i64 %515, 3
  %517 = add nsw i64 %516, 1
  %518 = icmp ugt i64 %517, 2305843009213693951
  br i1 %518, label %519, label %521

519:                                              ; preds = %512
  %520 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %520) #12
  unreachable

521:                                              ; preds = %512
  %522 = sub i64 %508, %514
  %523 = ashr exact i64 %522, 3
  %524 = icmp ult i64 %523, 1152921504606846975
  br i1 %524, label %525, label %533

525:                                              ; preds = %521
  %526 = ashr exact i64 %522, 2
  %527 = icmp ult i64 %526, %517
  %528 = select i1 %527, i64 %517, i64 %526
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %538, label %530

530:                                              ; preds = %525
  %531 = icmp ugt i64 %528, 2305843009213693951
  br i1 %531, label %532, label %533

532:                                              ; preds = %530
  tail call void @abort() #12
  unreachable

533:                                              ; preds = %530, %521
  %534 = phi i64 [ %528, %530 ], [ 2305843009213693951, %521 ]
  %535 = shl i64 %534, 3
  %536 = tail call i8* @_Znwm(i64 %535) #10
  %537 = bitcast i8* %536 to double*
  br label %538

538:                                              ; preds = %533, %525
  %539 = phi i64 [ %534, %533 ], [ 0, %525 ]
  %540 = phi double* [ %537, %533 ], [ null, %525 ]
  %541 = getelementptr inbounds double, double* %540, i64 %516
  %542 = getelementptr inbounds double, double* %540, i64 %539
  %543 = ptrtoint double* %542 to i64
  store double %505, double* %541, align 8
  %544 = getelementptr inbounds double, double* %541, i64 1
  %545 = ptrtoint double* %544 to i64
  %546 = sub i64 %267, %514
  %547 = ashr exact i64 %546, 3
  %548 = sub nsw i64 0, %547
  %549 = getelementptr inbounds double, double* %541, i64 %548
  %550 = ptrtoint double* %549 to i64
  %551 = icmp sgt i64 %546, 0
  br i1 %551, label %552, label %555

552:                                              ; preds = %538
  %553 = bitcast double* %549 to i8*
  %554 = inttoptr i64 %514 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %553, i8* align 8 %554, i64 %546, i1 false) #11
  br label %555

555:                                              ; preds = %552, %538
  store i64 %550, i64* %167, align 8
  store i64 %545, i64* %264, align 8
  store i64 %543, i64* %168, align 8
  %556 = icmp eq i64 %514, 0
  br i1 %556, label %559, label %557

557:                                              ; preds = %555
  %558 = inttoptr i64 %514 to i8*
  tail call void @_ZdlPv(i8* %558) #10
  br label %559

559:                                              ; preds = %509, %555, %557
  %560 = phi double* [ %510, %509 ], [ %544, %555 ], [ %544, %557 ]
  %561 = phi i64 [ %511, %509 ], [ %545, %555 ], [ %545, %557 ]
  %562 = add nuw nsw i64 %268, 1
  br label %265

563:                                              ; preds = %56
  %564 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 0
  %565 = load float, float* %564, align 8
  %566 = fmul float %58, %565
  %567 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %568 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %567, align 8
  %569 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 0
  %570 = load i32, i32* %569, align 4
  %571 = icmp sgt i32 %570, 0
  %572 = sext i32 %570 to i64
  %573 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 0
  %574 = icmp eq %struct.TfLiteTensor* %18, null
  %575 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1
  %576 = bitcast %union.TfLitePtrUnion* %575 to i16**
  %577 = bitcast %union.TfLitePtrUnion* %575 to i8**
  %578 = icmp eq %struct.TfLiteTensor* %48, null
  %579 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 1
  %580 = bitcast %union.TfLitePtrUnion* %579 to float**
  %581 = icmp eq %struct.TfLiteTensor* %28, null
  %582 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %583 = bitcast %union.TfLitePtrUnion* %582 to float**
  %584 = add nsw i64 %572, -1
  %585 = and i64 %572, 7
  %586 = icmp ult i64 %584, 7
  %587 = sub nsw i64 %572, %585
  %588 = icmp eq i64 %585, 0
  br label %589

589:                                              ; preds = %692, %563
  %590 = phi i64 [ %699, %692 ], [ 0, %563 ]
  br i1 %571, label %591, label %653

591:                                              ; preds = %589
  br i1 %586, label %638, label %592

592:                                              ; preds = %591, %592
  %593 = phi i64 [ %635, %592 ], [ 0, %591 ]
  %594 = phi i64 [ %634, %592 ], [ 1, %591 ]
  %595 = phi i64 [ %636, %592 ], [ %587, %591 ]
  %596 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %593
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %594, %598
  %600 = or i64 %593, 1
  %601 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %600
  %602 = load i32, i32* %601, align 4
  %603 = sext i32 %602 to i64
  %604 = mul nsw i64 %599, %603
  %605 = or i64 %593, 2
  %606 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %605
  %607 = load i32, i32* %606, align 4
  %608 = sext i32 %607 to i64
  %609 = mul nsw i64 %604, %608
  %610 = or i64 %593, 3
  %611 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %610
  %612 = load i32, i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = mul nsw i64 %609, %613
  %615 = or i64 %593, 4
  %616 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %615
  %617 = load i32, i32* %616, align 4
  %618 = sext i32 %617 to i64
  %619 = mul nsw i64 %614, %618
  %620 = or i64 %593, 5
  %621 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %620
  %622 = load i32, i32* %621, align 4
  %623 = sext i32 %622 to i64
  %624 = mul nsw i64 %619, %623
  %625 = or i64 %593, 6
  %626 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %625
  %627 = load i32, i32* %626, align 4
  %628 = sext i32 %627 to i64
  %629 = mul nsw i64 %624, %628
  %630 = or i64 %593, 7
  %631 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %630
  %632 = load i32, i32* %631, align 4
  %633 = sext i32 %632 to i64
  %634 = mul nsw i64 %629, %633
  %635 = add nuw nsw i64 %593, 8
  %636 = add i64 %595, -8
  %637 = icmp eq i64 %636, 0
  br i1 %637, label %638, label %592

638:                                              ; preds = %592, %591
  %639 = phi i64 [ undef, %591 ], [ %634, %592 ]
  %640 = phi i64 [ 0, %591 ], [ %635, %592 ]
  %641 = phi i64 [ 1, %591 ], [ %634, %592 ]
  br i1 %588, label %653, label %642

642:                                              ; preds = %638, %642
  %643 = phi i64 [ %650, %642 ], [ %640, %638 ]
  %644 = phi i64 [ %649, %642 ], [ %641, %638 ]
  %645 = phi i64 [ %651, %642 ], [ %585, %638 ]
  %646 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %643
  %647 = load i32, i32* %646, align 4
  %648 = sext i32 %647 to i64
  %649 = mul nsw i64 %644, %648
  %650 = add nuw nsw i64 %643, 1
  %651 = add i64 %645, -1
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %653, label %642, !llvm.loop !9

653:                                              ; preds = %638, %642, %589
  %654 = phi i64 [ 1, %589 ], [ %639, %638 ], [ %649, %642 ]
  %655 = icmp sgt i64 %654, %590
  br i1 %655, label %656, label %710

656:                                              ; preds = %653
  %657 = load i32, i32* %573, align 8
  switch i32 %657, label %682 [
    i32 3, label %658
    i32 9, label %666
    i32 7, label %674
  ]

658:                                              ; preds = %656
  br i1 %574, label %661, label %659

659:                                              ; preds = %658
  %660 = load i8*, i8** %577, align 8
  br label %661

661:                                              ; preds = %659, %658
  %662 = phi i8* [ %660, %659 ], [ null, %658 ]
  %663 = getelementptr inbounds i8, i8* %662, i64 %590
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i32
  br label %682

666:                                              ; preds = %656
  br i1 %574, label %669, label %667

667:                                              ; preds = %666
  %668 = load i8*, i8** %577, align 8
  br label %669

669:                                              ; preds = %667, %666
  %670 = phi i8* [ %668, %667 ], [ null, %666 ]
  %671 = getelementptr inbounds i8, i8* %670, i64 %590
  %672 = load i8, i8* %671, align 1
  %673 = sext i8 %672 to i32
  br label %682

674:                                              ; preds = %656
  br i1 %574, label %677, label %675

675:                                              ; preds = %674
  %676 = load i16*, i16** %576, align 8
  br label %677

677:                                              ; preds = %675, %674
  %678 = phi i16* [ %676, %675 ], [ null, %674 ]
  %679 = getelementptr inbounds i16, i16* %678, i64 %590
  %680 = load i16, i16* %679, align 2
  %681 = sext i16 %680 to i32
  br label %682

682:                                              ; preds = %656, %661, %669, %677
  %683 = phi i32 [ %681, %677 ], [ %673, %669 ], [ %665, %661 ], [ 0, %656 ]
  br i1 %578, label %686, label %684

684:                                              ; preds = %682
  %685 = load float*, float** %580, align 8
  br label %686

686:                                              ; preds = %682, %684
  %687 = phi float* [ %685, %684 ], [ null, %682 ]
  %688 = getelementptr inbounds float, float* %687, i64 %590
  %689 = load float, float* %688, align 4
  br i1 %581, label %692, label %690

690:                                              ; preds = %686
  %691 = load float*, float** %583, align 8
  br label %692

692:                                              ; preds = %686, %690
  %693 = phi float* [ %691, %690 ], [ null, %686 ]
  %694 = getelementptr inbounds float, float* %693, i64 %590
  %695 = load float, float* %694, align 4
  %696 = fsub float %695, %689
  %697 = tail call float @llvm.fabs.f32(float %696) #11
  %698 = fcmp ogt float %697, %566
  %699 = add nuw nsw i64 %590, 1
  br i1 %698, label %700, label %589

700:                                              ; preds = %692
  %701 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %702 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %701, align 8
  %703 = fpext float %695 to double
  %704 = fpext float %565 to double
  %705 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 1
  %706 = load i32, i32* %705, align 4
  %707 = fpext float %689 to double
  %708 = fpext float %697 to double
  %709 = fpext float %566 to double
  tail call void (%struct.TfLiteContext*, i8*, ...) %702(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.13, i64 0, i64 0), double %703, i32 %683, double %704, i32 %706, double %703, double %707, double %708, double %709, double %59) #11
  br label %710

710:                                              ; preds = %653, %700, %490, %47, %32
  %711 = phi i32 [ 0, %32 ], [ 0, %490 ], [ %49, %47 ], [ 1, %700 ], [ 0, %653 ]
  ret i32 %711
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops6custom27Register_NUMERIC_VERIFY_REFEv() local_unnamed_addr #5 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops6custom27Register_NUMERIC_VERIFY_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops6custom14numeric_verify4EvalILNS0_7builtin10dequantize10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #0 comdat {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %5 = bitcast i8** %4 to %"struct.tflite::ops::custom::numeric_verify::OpData"**
  %6 = load %"struct.tflite::ops::custom::numeric_verify::OpData"*, %"struct.tflite::ops::custom::numeric_verify::OpData"** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %8 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 1, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %14 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %13, align 8
  %15 = sext i32 %10 to i64
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 %15
  br label %17

17:                                               ; preds = %12, %2
  %18 = phi %struct.TfLiteTensor* [ %16, %12 ], [ null, %2 ]
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %8, i64 0, i32 1, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %17, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %17 ]
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 4
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %6, i64 0, i32 2
  %34 = load i8, i8* %33, align 4, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %710

36:                                               ; preds = %32, %27
  %37 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %44 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %43, align 8
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 %45
  br label %47

47:                                               ; preds = %36, %42
  %48 = phi %struct.TfLiteTensor* [ %46, %42 ], [ null, %36 ]
  %49 = tail call i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteTensor* %18, %struct.TfLiteTensor* %48)
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %710

51:                                               ; preds = %47
  %52 = load i32, i32* %29, align 8
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %6, i64 0, i32 2
  store i8 1, i8* %55, align 4
  br label %56

56:                                               ; preds = %54, %51
  %57 = getelementptr inbounds %"struct.tflite::ops::custom::numeric_verify::OpData", %"struct.tflite::ops::custom::numeric_verify::OpData"* %6, i64 0, i32 0
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = fcmp olt double %59, 1.000000e-01
  br i1 %60, label %61, label %563

61:                                               ; preds = %56
  %62 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %62) #11
  %63 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 0, i64 24, i1 false) #11
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 2
  %67 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = bitcast double** %65 to i64*
  %73 = bitcast %"class.std::__1::vector"* %3 to i64*
  br label %151

74:                                               ; preds = %61
  %75 = sext i32 %69 to i64
  %76 = add nsw i64 %75, -1
  %77 = and i64 %75, 7
  %78 = icmp ult i64 %76, 7
  br i1 %78, label %127, label %79

79:                                               ; preds = %74
  %80 = sub nsw i64 %75, %77
  br label %81

81:                                               ; preds = %81, %79
  %82 = phi i64 [ 0, %79 ], [ %124, %81 ]
  %83 = phi i64 [ 1, %79 ], [ %123, %81 ]
  %84 = phi i64 [ %80, %79 ], [ %125, %81 ]
  %85 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %82
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = mul nsw i64 %83, %87
  %89 = or i64 %82, 1
  %90 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %88, %92
  %94 = or i64 %82, 2
  %95 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %93, %97
  %99 = or i64 %82, 3
  %100 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %98, %102
  %104 = or i64 %82, 4
  %105 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = mul nsw i64 %103, %107
  %109 = or i64 %82, 5
  %110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = sext i32 %111 to i64
  %113 = mul nsw i64 %108, %112
  %114 = or i64 %82, 6
  %115 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %116 to i64
  %118 = mul nsw i64 %113, %117
  %119 = or i64 %82, 7
  %120 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = sext i32 %121 to i64
  %123 = mul nsw i64 %118, %122
  %124 = add nuw nsw i64 %82, 8
  %125 = add i64 %84, -8
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %81

127:                                              ; preds = %81, %74
  %128 = phi i64 [ undef, %74 ], [ %123, %81 ]
  %129 = phi i64 [ 0, %74 ], [ %124, %81 ]
  %130 = phi i64 [ 1, %74 ], [ %123, %81 ]
  %131 = icmp eq i64 %77, 0
  br i1 %131, label %143, label %132

132:                                              ; preds = %127, %132
  %133 = phi i64 [ %140, %132 ], [ %129, %127 ]
  %134 = phi i64 [ %139, %132 ], [ %130, %127 ]
  %135 = phi i64 [ %141, %132 ], [ %77, %127 ]
  %136 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 %133
  %137 = load i32, i32* %136, align 4
  %138 = sext i32 %137 to i64
  %139 = mul nsw i64 %134, %138
  %140 = add nuw nsw i64 %133, 1
  %141 = add i64 %135, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %132, !llvm.loop !10

143:                                              ; preds = %132, %127
  %144 = phi i64 [ %128, %127 ], [ %139, %132 ]
  %145 = bitcast double** %65 to i64*
  %146 = bitcast %"class.std::__1::vector"* %3 to i64*
  %147 = icmp eq i64 %144, 0
  br i1 %147, label %166, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %144, 2305843009213693951
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #12
  unreachable

151:                                              ; preds = %71, %148
  %152 = phi i64 [ 1, %71 ], [ %144, %148 ]
  %153 = phi i64* [ %72, %71 ], [ %145, %148 ]
  %154 = phi i64* [ %73, %71 ], [ %146, %148 ]
  %155 = bitcast double** %64 to i64*
  %156 = shl i64 %152, 3
  %157 = tail call i8* @_Znwm(i64 %156) #10
  %158 = bitcast i8* %157 to double*
  %159 = ptrtoint i8* %157 to i64
  %160 = getelementptr inbounds double, double* %158, i64 %152
  %161 = ptrtoint double* %160 to i64
  %162 = ptrtoint i8* %157 to i64
  store i64 %162, i64* %154, align 8
  store i64 %159, i64* %155, align 8
  store i64 %161, i64* %153, align 8
  %163 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8
  %164 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %163, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  br label %166

166:                                              ; preds = %143, %151
  %167 = phi i64* [ %154, %151 ], [ %146, %143 ]
  %168 = phi i64* [ %153, %151 ], [ %145, %143 ]
  %169 = phi double* [ %158, %151 ], [ null, %143 ]
  %170 = phi i64 [ %159, %151 ], [ 0, %143 ]
  %171 = phi i32 [ %165, %151 ], [ %69, %143 ]
  %172 = phi %struct.TfLiteIntArray* [ %163, %151 ], [ %67, %143 ]
  %173 = icmp sgt i32 %171, 0
  br i1 %173, label %174, label %249

174:                                              ; preds = %166
  %175 = sext i32 %171 to i64
  %176 = add nsw i64 %175, -1
  %177 = and i64 %175, 7
  %178 = icmp ult i64 %176, 7
  br i1 %178, label %227, label %179

179:                                              ; preds = %174
  %180 = sub nsw i64 %175, %177
  br label %181

181:                                              ; preds = %181, %179
  %182 = phi i64 [ 0, %179 ], [ %224, %181 ]
  %183 = phi i64 [ 1, %179 ], [ %223, %181 ]
  %184 = phi i64 [ %180, %179 ], [ %225, %181 ]
  %185 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %182
  %186 = load i32, i32* %185, align 4
  %187 = sext i32 %186 to i64
  %188 = mul nsw i64 %183, %187
  %189 = or i64 %182, 1
  %190 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = mul nsw i64 %188, %192
  %194 = or i64 %182, 2
  %195 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = mul nsw i64 %193, %197
  %199 = or i64 %182, 3
  %200 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = sext i32 %201 to i64
  %203 = mul nsw i64 %198, %202
  %204 = or i64 %182, 4
  %205 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = sext i32 %206 to i64
  %208 = mul nsw i64 %203, %207
  %209 = or i64 %182, 5
  %210 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = mul nsw i64 %208, %212
  %214 = or i64 %182, 6
  %215 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %214
  %216 = load i32, i32* %215, align 4
  %217 = sext i32 %216 to i64
  %218 = mul nsw i64 %213, %217
  %219 = or i64 %182, 7
  %220 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %218, %222
  %224 = add nuw nsw i64 %182, 8
  %225 = add i64 %184, -8
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %181

227:                                              ; preds = %181, %174
  %228 = phi i64 [ undef, %174 ], [ %223, %181 ]
  %229 = phi i64 [ 0, %174 ], [ %224, %181 ]
  %230 = phi i64 [ 1, %174 ], [ %223, %181 ]
  %231 = icmp eq i64 %177, 0
  br i1 %231, label %243, label %232

232:                                              ; preds = %227, %232
  %233 = phi i64 [ %240, %232 ], [ %229, %227 ]
  %234 = phi i64 [ %239, %232 ], [ %230, %227 ]
  %235 = phi i64 [ %241, %232 ], [ %177, %227 ]
  %236 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %172, i64 0, i32 1, i64 %233
  %237 = load i32, i32* %236, align 4
  %238 = sext i32 %237 to i64
  %239 = mul nsw i64 %234, %238
  %240 = add nuw nsw i64 %233, 1
  %241 = add i64 %235, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %232, !llvm.loop !11

243:                                              ; preds = %232, %227
  %244 = phi i64 [ %228, %227 ], [ %239, %232 ]
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %254, label %246

246:                                              ; preds = %243
  %247 = icmp ugt i64 %244, 2305843009213693951
  br i1 %247, label %248, label %249

248:                                              ; preds = %246
  tail call void @abort() #12
  unreachable

249:                                              ; preds = %166, %246
  %250 = phi i64 [ %244, %246 ], [ 1, %166 ]
  %251 = shl i64 %250, 3
  %252 = tail call i8* @_Znwm(i64 %251) #10
  %253 = bitcast i8* %252 to double*
  br label %254

254:                                              ; preds = %243, %249
  %255 = phi i8* [ %252, %249 ], [ null, %243 ]
  %256 = phi double* [ %253, %249 ], [ null, %243 ]
  %257 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %258 = icmp eq %struct.TfLiteTensor* %48, null
  %259 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 1
  %260 = bitcast %union.TfLitePtrUnion* %259 to float**
  %261 = icmp eq %struct.TfLiteTensor* %28, null
  %262 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %263 = bitcast %union.TfLitePtrUnion* %262 to float**
  %264 = bitcast double** %64 to i64*
  br label %265

265:                                              ; preds = %559, %254
  %266 = phi double* [ %560, %559 ], [ %169, %254 ]
  %267 = phi i64 [ %561, %559 ], [ %170, %254 ]
  %268 = phi i64 [ %562, %559 ], [ 0, %254 ]
  %269 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %257, align 8
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 0
  %271 = load i32, i32* %270, align 4
  %272 = icmp sgt i32 %271, 0
  br i1 %272, label %273, label %342

273:                                              ; preds = %265
  %274 = sext i32 %271 to i64
  %275 = add nsw i64 %274, -1
  %276 = and i64 %274, 7
  %277 = icmp ult i64 %275, 7
  br i1 %277, label %326, label %278

278:                                              ; preds = %273
  %279 = sub nsw i64 %274, %276
  br label %280

280:                                              ; preds = %280, %278
  %281 = phi i64 [ 0, %278 ], [ %323, %280 ]
  %282 = phi i64 [ 1, %278 ], [ %322, %280 ]
  %283 = phi i64 [ %279, %278 ], [ %324, %280 ]
  %284 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %281
  %285 = load i32, i32* %284, align 4
  %286 = sext i32 %285 to i64
  %287 = mul nsw i64 %282, %286
  %288 = or i64 %281, 1
  %289 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %288
  %290 = load i32, i32* %289, align 4
  %291 = sext i32 %290 to i64
  %292 = mul nsw i64 %287, %291
  %293 = or i64 %281, 2
  %294 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %293
  %295 = load i32, i32* %294, align 4
  %296 = sext i32 %295 to i64
  %297 = mul nsw i64 %292, %296
  %298 = or i64 %281, 3
  %299 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %298
  %300 = load i32, i32* %299, align 4
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %297, %301
  %303 = or i64 %281, 4
  %304 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = sext i32 %305 to i64
  %307 = mul nsw i64 %302, %306
  %308 = or i64 %281, 5
  %309 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = sext i32 %310 to i64
  %312 = mul nsw i64 %307, %311
  %313 = or i64 %281, 6
  %314 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %312, %316
  %318 = or i64 %281, 7
  %319 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %320 to i64
  %322 = mul nsw i64 %317, %321
  %323 = add nuw nsw i64 %281, 8
  %324 = add i64 %283, -8
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %326, label %280

326:                                              ; preds = %280, %273
  %327 = phi i64 [ undef, %273 ], [ %322, %280 ]
  %328 = phi i64 [ 0, %273 ], [ %323, %280 ]
  %329 = phi i64 [ 1, %273 ], [ %322, %280 ]
  %330 = icmp eq i64 %276, 0
  br i1 %330, label %342, label %331

331:                                              ; preds = %326, %331
  %332 = phi i64 [ %339, %331 ], [ %328, %326 ]
  %333 = phi i64 [ %338, %331 ], [ %329, %326 ]
  %334 = phi i64 [ %340, %331 ], [ %276, %326 ]
  %335 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 %332
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %336 to i64
  %338 = mul nsw i64 %333, %337
  %339 = add nuw nsw i64 %332, 1
  %340 = add i64 %334, -1
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %331, !llvm.loop !12

342:                                              ; preds = %326, %331, %265
  %343 = phi i64 [ 1, %265 ], [ %327, %326 ], [ %338, %331 ]
  %344 = icmp sgt i64 %343, %268
  br i1 %344, label %491, label %345

345:                                              ; preds = %342
  %346 = load double*, double** %63, align 8
  %347 = ptrtoint double* %346 to i64
  %348 = icmp eq double* %346, %266
  br i1 %348, label %371, label %349

349:                                              ; preds = %345
  %350 = getelementptr double, double* %266, i64 -1
  %351 = ptrtoint double* %350 to i64
  %352 = sub i64 %351, %347
  %353 = lshr i64 %352, 3
  %354 = add nuw nsw i64 %353, 1
  %355 = and i64 %354, 7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %366, label %357

357:                                              ; preds = %349, %357
  %358 = phi double [ %362, %357 ], [ 0.000000e+00, %349 ]
  %359 = phi double* [ %363, %357 ], [ %346, %349 ]
  %360 = phi i64 [ %364, %357 ], [ %355, %349 ]
  %361 = load double, double* %359, align 8
  %362 = fadd double %358, %361
  %363 = getelementptr inbounds double, double* %359, i64 1
  %364 = add i64 %360, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %357, !llvm.loop !13

366:                                              ; preds = %357, %349
  %367 = phi double [ undef, %349 ], [ %362, %357 ]
  %368 = phi double [ 0.000000e+00, %349 ], [ %362, %357 ]
  %369 = phi double* [ %346, %349 ], [ %363, %357 ]
  %370 = icmp ult i64 %352, 56
  br i1 %370, label %404, label %376

371:                                              ; preds = %345
  %372 = sub i64 %267, %347
  %373 = ashr exact i64 %372, 3
  %374 = uitofp i64 %373 to double
  %375 = fdiv double 0.000000e+00, %374
  br label %471

376:                                              ; preds = %366, %376
  %377 = phi double [ %401, %376 ], [ %368, %366 ]
  %378 = phi double* [ %402, %376 ], [ %369, %366 ]
  %379 = load double, double* %378, align 8
  %380 = fadd double %377, %379
  %381 = getelementptr inbounds double, double* %378, i64 1
  %382 = load double, double* %381, align 8
  %383 = fadd double %380, %382
  %384 = getelementptr inbounds double, double* %378, i64 2
  %385 = load double, double* %384, align 8
  %386 = fadd double %383, %385
  %387 = getelementptr inbounds double, double* %378, i64 3
  %388 = load double, double* %387, align 8
  %389 = fadd double %386, %388
  %390 = getelementptr inbounds double, double* %378, i64 4
  %391 = load double, double* %390, align 8
  %392 = fadd double %389, %391
  %393 = getelementptr inbounds double, double* %378, i64 5
  %394 = load double, double* %393, align 8
  %395 = fadd double %392, %394
  %396 = getelementptr inbounds double, double* %378, i64 6
  %397 = load double, double* %396, align 8
  %398 = fadd double %395, %397
  %399 = getelementptr inbounds double, double* %378, i64 7
  %400 = load double, double* %399, align 8
  %401 = fadd double %398, %400
  %402 = getelementptr inbounds double, double* %378, i64 8
  %403 = icmp eq double* %402, %266
  br i1 %403, label %404, label %376

404:                                              ; preds = %376, %366
  %405 = phi double [ %367, %366 ], [ %401, %376 ]
  %406 = sub i64 %267, %347
  %407 = ashr exact i64 %406, 3
  %408 = uitofp i64 %407 to double
  %409 = fdiv double %405, %408
  br i1 %348, label %471, label %410

410:                                              ; preds = %404
  %411 = getelementptr double, double* %266, i64 -1
  %412 = ptrtoint double* %411 to i64
  %413 = sub i64 %412, %347
  %414 = lshr i64 %413, 3
  %415 = add nuw nsw i64 %414, 1
  %416 = and i64 %415, 3
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %432, label %418

418:                                              ; preds = %410, %418
  %419 = phi double [ %426, %418 ], [ 0.000000e+00, %410 ]
  %420 = phi double* [ %428, %418 ], [ %346, %410 ]
  %421 = phi double* [ %429, %418 ], [ %256, %410 ]
  %422 = phi i64 [ %430, %418 ], [ %416, %410 ]
  %423 = load double, double* %420, align 8
  %424 = tail call double @llvm.fabs.f64(double %423) #11
  %425 = fcmp olt double %419, %424
  %426 = select i1 %425, double %424, double %419
  %427 = fsub double %423, %409
  store double %427, double* %421, align 8
  %428 = getelementptr inbounds double, double* %420, i64 1
  %429 = getelementptr inbounds double, double* %421, i64 1
  %430 = add i64 %422, -1
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %432, label %418, !llvm.loop !14

432:                                              ; preds = %418, %410
  %433 = phi double [ undef, %410 ], [ %426, %418 ]
  %434 = phi double [ 0.000000e+00, %410 ], [ %426, %418 ]
  %435 = phi double* [ %346, %410 ], [ %428, %418 ]
  %436 = phi double* [ %256, %410 ], [ %429, %418 ]
  %437 = icmp ult i64 %413, 24
  br i1 %437, label %471, label %438

438:                                              ; preds = %432, %438
  %439 = phi double [ %466, %438 ], [ %434, %432 ]
  %440 = phi double* [ %468, %438 ], [ %435, %432 ]
  %441 = phi double* [ %469, %438 ], [ %436, %432 ]
  %442 = load double, double* %440, align 8
  %443 = tail call double @llvm.fabs.f64(double %442) #11
  %444 = fcmp olt double %439, %443
  %445 = select i1 %444, double %443, double %439
  %446 = fsub double %442, %409
  store double %446, double* %441, align 8
  %447 = getelementptr inbounds double, double* %440, i64 1
  %448 = getelementptr inbounds double, double* %441, i64 1
  %449 = load double, double* %447, align 8
  %450 = tail call double @llvm.fabs.f64(double %449) #11
  %451 = fcmp olt double %445, %450
  %452 = select i1 %451, double %450, double %445
  %453 = fsub double %449, %409
  store double %453, double* %448, align 8
  %454 = getelementptr inbounds double, double* %440, i64 2
  %455 = getelementptr inbounds double, double* %441, i64 2
  %456 = load double, double* %454, align 8
  %457 = tail call double @llvm.fabs.f64(double %456) #11
  %458 = fcmp olt double %452, %457
  %459 = select i1 %458, double %457, double %452
  %460 = fsub double %456, %409
  store double %460, double* %455, align 8
  %461 = getelementptr inbounds double, double* %440, i64 3
  %462 = getelementptr inbounds double, double* %441, i64 3
  %463 = load double, double* %461, align 8
  %464 = tail call double @llvm.fabs.f64(double %463) #11
  %465 = fcmp olt double %459, %464
  %466 = select i1 %465, double %464, double %459
  %467 = fsub double %463, %409
  store double %467, double* %462, align 8
  %468 = getelementptr inbounds double, double* %440, i64 4
  %469 = getelementptr inbounds double, double* %441, i64 4
  %470 = icmp eq double* %468, %266
  br i1 %470, label %471, label %438

471:                                              ; preds = %432, %438, %404, %371
  %472 = phi double [ %409, %404 ], [ %375, %371 ], [ %409, %438 ], [ %409, %432 ]
  %473 = phi double [ %408, %404 ], [ %374, %371 ], [ %408, %438 ], [ %408, %432 ]
  %474 = phi double [ 0.000000e+00, %404 ], [ 0.000000e+00, %371 ], [ %433, %432 ], [ %466, %438 ]
  %475 = fdiv double 0.000000e+00, %473
  %476 = tail call double @sqrt(double %475) #11
  %477 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %478 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %477, align 8
  %479 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 0
  %480 = load float, float* %479, align 8
  %481 = fpext float %480 to double
  %482 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 1
  %483 = load i32, i32* %482, align 4
  tail call void (%struct.TfLiteContext*, i8*, ...) %478(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.12, i64 0, i64 0), double %476, double %472, double %474, double %481, i32 %483) #11
  %484 = icmp eq double* %256, null
  br i1 %484, label %486, label %485

485:                                              ; preds = %471
  tail call void @_ZdlPv(i8* %255) #10
  br label %486

486:                                              ; preds = %471, %485
  %487 = icmp eq double* %346, null
  br i1 %487, label %490, label %488

488:                                              ; preds = %486
  store i64 %347, i64* %264, align 8
  %489 = bitcast double* %346 to i8*
  tail call void @_ZdlPv(i8* %489) #10
  br label %490

490:                                              ; preds = %486, %488
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %62) #11
  br label %710

491:                                              ; preds = %342
  br i1 %258, label %494, label %492

492:                                              ; preds = %491
  %493 = load float*, float** %260, align 8
  br label %494

494:                                              ; preds = %491, %492
  %495 = phi float* [ %493, %492 ], [ null, %491 ]
  %496 = getelementptr inbounds float, float* %495, i64 %268
  %497 = load float, float* %496, align 4
  br i1 %261, label %500, label %498

498:                                              ; preds = %494
  %499 = load float*, float** %263, align 8
  br label %500

500:                                              ; preds = %494, %498
  %501 = phi float* [ %499, %498 ], [ null, %494 ]
  %502 = getelementptr inbounds float, float* %501, i64 %268
  %503 = load float, float* %502, align 4
  %504 = fsub float %497, %503
  %505 = fpext float %504 to double
  %506 = load double*, double** %65, align 8
  %507 = icmp ult double* %266, %506
  %508 = ptrtoint double* %506 to i64
  br i1 %507, label %509, label %512

509:                                              ; preds = %500
  store double %505, double* %266, align 8
  %510 = getelementptr inbounds double, double* %266, i64 1
  %511 = ptrtoint double* %510 to i64
  store i64 %511, i64* %264, align 8
  br label %559

512:                                              ; preds = %500
  %513 = ptrtoint double* %266 to i64
  %514 = load i64, i64* %167, align 8
  %515 = sub i64 %513, %514
  %516 = ashr exact i64 %515, 3
  %517 = add nsw i64 %516, 1
  %518 = icmp ugt i64 %517, 2305843009213693951
  br i1 %518, label %519, label %521

519:                                              ; preds = %512
  %520 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %520) #12
  unreachable

521:                                              ; preds = %512
  %522 = sub i64 %508, %514
  %523 = ashr exact i64 %522, 3
  %524 = icmp ult i64 %523, 1152921504606846975
  br i1 %524, label %525, label %533

525:                                              ; preds = %521
  %526 = ashr exact i64 %522, 2
  %527 = icmp ult i64 %526, %517
  %528 = select i1 %527, i64 %517, i64 %526
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %538, label %530

530:                                              ; preds = %525
  %531 = icmp ugt i64 %528, 2305843009213693951
  br i1 %531, label %532, label %533

532:                                              ; preds = %530
  tail call void @abort() #12
  unreachable

533:                                              ; preds = %530, %521
  %534 = phi i64 [ %528, %530 ], [ 2305843009213693951, %521 ]
  %535 = shl i64 %534, 3
  %536 = tail call i8* @_Znwm(i64 %535) #10
  %537 = bitcast i8* %536 to double*
  br label %538

538:                                              ; preds = %533, %525
  %539 = phi i64 [ %534, %533 ], [ 0, %525 ]
  %540 = phi double* [ %537, %533 ], [ null, %525 ]
  %541 = getelementptr inbounds double, double* %540, i64 %516
  %542 = getelementptr inbounds double, double* %540, i64 %539
  %543 = ptrtoint double* %542 to i64
  store double %505, double* %541, align 8
  %544 = getelementptr inbounds double, double* %541, i64 1
  %545 = ptrtoint double* %544 to i64
  %546 = sub i64 %267, %514
  %547 = ashr exact i64 %546, 3
  %548 = sub nsw i64 0, %547
  %549 = getelementptr inbounds double, double* %541, i64 %548
  %550 = ptrtoint double* %549 to i64
  %551 = icmp sgt i64 %546, 0
  br i1 %551, label %552, label %555

552:                                              ; preds = %538
  %553 = bitcast double* %549 to i8*
  %554 = inttoptr i64 %514 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %553, i8* align 8 %554, i64 %546, i1 false) #11
  br label %555

555:                                              ; preds = %552, %538
  store i64 %550, i64* %167, align 8
  store i64 %545, i64* %264, align 8
  store i64 %543, i64* %168, align 8
  %556 = icmp eq i64 %514, 0
  br i1 %556, label %559, label %557

557:                                              ; preds = %555
  %558 = inttoptr i64 %514 to i8*
  tail call void @_ZdlPv(i8* %558) #10
  br label %559

559:                                              ; preds = %509, %555, %557
  %560 = phi double* [ %510, %509 ], [ %544, %555 ], [ %544, %557 ]
  %561 = phi i64 [ %511, %509 ], [ %545, %555 ], [ %545, %557 ]
  %562 = add nuw nsw i64 %268, 1
  br label %265

563:                                              ; preds = %56
  %564 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 0
  %565 = load float, float* %564, align 8
  %566 = fmul float %58, %565
  %567 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %568 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %567, align 8
  %569 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 0
  %570 = load i32, i32* %569, align 4
  %571 = icmp sgt i32 %570, 0
  %572 = sext i32 %570 to i64
  %573 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 0
  %574 = icmp eq %struct.TfLiteTensor* %18, null
  %575 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 1
  %576 = bitcast %union.TfLitePtrUnion* %575 to i16**
  %577 = bitcast %union.TfLitePtrUnion* %575 to i8**
  %578 = icmp eq %struct.TfLiteTensor* %48, null
  %579 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %48, i64 0, i32 1
  %580 = bitcast %union.TfLitePtrUnion* %579 to float**
  %581 = icmp eq %struct.TfLiteTensor* %28, null
  %582 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %583 = bitcast %union.TfLitePtrUnion* %582 to float**
  %584 = add nsw i64 %572, -1
  %585 = and i64 %572, 7
  %586 = icmp ult i64 %584, 7
  %587 = sub nsw i64 %572, %585
  %588 = icmp eq i64 %585, 0
  br label %589

589:                                              ; preds = %692, %563
  %590 = phi i64 [ %699, %692 ], [ 0, %563 ]
  br i1 %571, label %591, label %653

591:                                              ; preds = %589
  br i1 %586, label %638, label %592

592:                                              ; preds = %591, %592
  %593 = phi i64 [ %635, %592 ], [ 0, %591 ]
  %594 = phi i64 [ %634, %592 ], [ 1, %591 ]
  %595 = phi i64 [ %636, %592 ], [ %587, %591 ]
  %596 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %593
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %597 to i64
  %599 = mul nsw i64 %594, %598
  %600 = or i64 %593, 1
  %601 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %600
  %602 = load i32, i32* %601, align 4
  %603 = sext i32 %602 to i64
  %604 = mul nsw i64 %599, %603
  %605 = or i64 %593, 2
  %606 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %605
  %607 = load i32, i32* %606, align 4
  %608 = sext i32 %607 to i64
  %609 = mul nsw i64 %604, %608
  %610 = or i64 %593, 3
  %611 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %610
  %612 = load i32, i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = mul nsw i64 %609, %613
  %615 = or i64 %593, 4
  %616 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %615
  %617 = load i32, i32* %616, align 4
  %618 = sext i32 %617 to i64
  %619 = mul nsw i64 %614, %618
  %620 = or i64 %593, 5
  %621 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %620
  %622 = load i32, i32* %621, align 4
  %623 = sext i32 %622 to i64
  %624 = mul nsw i64 %619, %623
  %625 = or i64 %593, 6
  %626 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %625
  %627 = load i32, i32* %626, align 4
  %628 = sext i32 %627 to i64
  %629 = mul nsw i64 %624, %628
  %630 = or i64 %593, 7
  %631 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %630
  %632 = load i32, i32* %631, align 4
  %633 = sext i32 %632 to i64
  %634 = mul nsw i64 %629, %633
  %635 = add nuw nsw i64 %593, 8
  %636 = add i64 %595, -8
  %637 = icmp eq i64 %636, 0
  br i1 %637, label %638, label %592

638:                                              ; preds = %592, %591
  %639 = phi i64 [ undef, %591 ], [ %634, %592 ]
  %640 = phi i64 [ 0, %591 ], [ %635, %592 ]
  %641 = phi i64 [ 1, %591 ], [ %634, %592 ]
  br i1 %588, label %653, label %642

642:                                              ; preds = %638, %642
  %643 = phi i64 [ %650, %642 ], [ %640, %638 ]
  %644 = phi i64 [ %649, %642 ], [ %641, %638 ]
  %645 = phi i64 [ %651, %642 ], [ %585, %638 ]
  %646 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %568, i64 0, i32 1, i64 %643
  %647 = load i32, i32* %646, align 4
  %648 = sext i32 %647 to i64
  %649 = mul nsw i64 %644, %648
  %650 = add nuw nsw i64 %643, 1
  %651 = add i64 %645, -1
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %653, label %642, !llvm.loop !15

653:                                              ; preds = %638, %642, %589
  %654 = phi i64 [ 1, %589 ], [ %639, %638 ], [ %649, %642 ]
  %655 = icmp sgt i64 %654, %590
  br i1 %655, label %656, label %710

656:                                              ; preds = %653
  %657 = load i32, i32* %573, align 8
  switch i32 %657, label %682 [
    i32 3, label %658
    i32 9, label %666
    i32 7, label %674
  ]

658:                                              ; preds = %656
  br i1 %574, label %661, label %659

659:                                              ; preds = %658
  %660 = load i8*, i8** %577, align 8
  br label %661

661:                                              ; preds = %659, %658
  %662 = phi i8* [ %660, %659 ], [ null, %658 ]
  %663 = getelementptr inbounds i8, i8* %662, i64 %590
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i32
  br label %682

666:                                              ; preds = %656
  br i1 %574, label %669, label %667

667:                                              ; preds = %666
  %668 = load i8*, i8** %577, align 8
  br label %669

669:                                              ; preds = %667, %666
  %670 = phi i8* [ %668, %667 ], [ null, %666 ]
  %671 = getelementptr inbounds i8, i8* %670, i64 %590
  %672 = load i8, i8* %671, align 1
  %673 = sext i8 %672 to i32
  br label %682

674:                                              ; preds = %656
  br i1 %574, label %677, label %675

675:                                              ; preds = %674
  %676 = load i16*, i16** %576, align 8
  br label %677

677:                                              ; preds = %675, %674
  %678 = phi i16* [ %676, %675 ], [ null, %674 ]
  %679 = getelementptr inbounds i16, i16* %678, i64 %590
  %680 = load i16, i16* %679, align 2
  %681 = sext i16 %680 to i32
  br label %682

682:                                              ; preds = %656, %661, %669, %677
  %683 = phi i32 [ %681, %677 ], [ %673, %669 ], [ %665, %661 ], [ 0, %656 ]
  br i1 %578, label %686, label %684

684:                                              ; preds = %682
  %685 = load float*, float** %580, align 8
  br label %686

686:                                              ; preds = %682, %684
  %687 = phi float* [ %685, %684 ], [ null, %682 ]
  %688 = getelementptr inbounds float, float* %687, i64 %590
  %689 = load float, float* %688, align 4
  br i1 %581, label %692, label %690

690:                                              ; preds = %686
  %691 = load float*, float** %583, align 8
  br label %692

692:                                              ; preds = %686, %690
  %693 = phi float* [ %691, %690 ], [ null, %686 ]
  %694 = getelementptr inbounds float, float* %693, i64 %590
  %695 = load float, float* %694, align 4
  %696 = fsub float %695, %689
  %697 = tail call float @llvm.fabs.f32(float %696) #11
  %698 = fcmp ogt float %697, %566
  %699 = add nuw nsw i64 %590, 1
  br i1 %698, label %700, label %589

700:                                              ; preds = %692
  %701 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %702 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %701, align 8
  %703 = fpext float %695 to double
  %704 = fpext float %565 to double
  %705 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %18, i64 0, i32 3, i32 1
  %706 = load i32, i32* %705, align 4
  %707 = fpext float %689 to double
  %708 = fpext float %697 to double
  %709 = fpext float %566 to double
  tail call void (%struct.TfLiteContext*, i8*, ...) %702(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.13, i64 0, i64 0), double %703, i32 %683, double %704, i32 %706, double %703, double %707, double %708, double %709, double %59) #11
  br label %710

710:                                              ; preds = %653, %700, %490, %47, %32
  %711 = phi i32 [ 0, %32 ], [ 0, %490 ], [ %49, %47 ], [ 1, %700 ], [ 0, %653 ]
  ret i32 %711
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops6custom23Register_NUMERIC_VERIFYEv() local_unnamed_addr #5 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops6custom27Register_NUMERIC_VERIFY_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 0
  %16 = load float, float* %15, align 8
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %1017 [
    i32 3, label %20
    i32 9, label %260
    i32 7, label %500
    i32 10, label %740
  ]

20:                                               ; preds = %4
  %21 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #11
  %22 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !16
  br label %53

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8, !noalias !16
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4, !noalias !16
  %30 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %29, i32* %31, align 8, !alias.scope !16
  %32 = icmp sgt i32 %29, 5
  br i1 %32, label %33, label %40

33:                                               ; preds = %25
  %34 = sext i32 %29 to i64
  %35 = shl nsw i64 %34, 2
  %36 = tail call i8* @_Znam(i64 %35) #10, !noalias !16
  %37 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %38 = bitcast i32** %37 to i8**
  store i8* %36, i8** %38, align 8, !alias.scope !16
  %39 = bitcast i8* %36 to i32*
  br label %45

40:                                               ; preds = %25
  %41 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %42 = bitcast %union.anon* %41 to i32*
  %43 = sext i32 %29 to i64
  %44 = shl nsw i64 %43, 2
  br label %45

45:                                               ; preds = %40, %33
  %46 = phi i64 [ %35, %33 ], [ %44, %40 ]
  %47 = phi i32* [ %39, %33 ], [ %42, %40 ]
  %48 = bitcast i32* %47 to i8*
  %49 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 %46, i1 false) #11
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %51 = bitcast %union.TfLitePtrUnion* %50 to i8**
  %52 = load i8*, i8** %51, align 8
  br label %53

53:                                               ; preds = %23, %45
  %54 = phi i32 [ %29, %45 ], [ 0, %23 ]
  %55 = phi i8* [ %52, %45 ], [ null, %23 ]
  %56 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #11
  %57 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %59, align 8, !alias.scope !19
  br label %88

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %62 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %61, align 8, !noalias !19
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 4, !noalias !19
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 1, i64 0
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %64, i32* %66, align 8, !alias.scope !19
  %67 = icmp sgt i32 %64, 5
  br i1 %67, label %68, label %75

68:                                               ; preds = %60
  %69 = sext i32 %64 to i64
  %70 = shl nsw i64 %69, 2
  %71 = tail call i8* @_Znam(i64 %70) #10, !noalias !19
  %72 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %73 = bitcast i32** %72 to i8**
  store i8* %71, i8** %73, align 8, !alias.scope !19
  %74 = bitcast i8* %71 to i32*
  br label %80

75:                                               ; preds = %60
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %77 = bitcast %union.anon* %76 to i32*
  %78 = sext i32 %64 to i64
  %79 = shl nsw i64 %78, 2
  br label %80

80:                                               ; preds = %75, %68
  %81 = phi i64 [ %70, %68 ], [ %79, %75 ]
  %82 = phi i32* [ %74, %68 ], [ %77, %75 ]
  %83 = bitcast i32* %82 to i8*
  %84 = bitcast i32* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 %81, i1 false) #11
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to float**
  %87 = load float*, float** %86, align 8
  br label %88

88:                                               ; preds = %58, %80
  %89 = phi i32 [ %64, %80 ], [ 0, %58 ]
  %90 = phi float* [ %87, %80 ], [ null, %58 ]
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %92 = icmp sgt i32 %54, 5
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = getelementptr inbounds %union.anon, %union.anon* %91, i64 0, i32 0
  %95 = load i32*, i32** %94, align 8
  br label %99

96:                                               ; preds = %88
  %97 = bitcast %union.anon* %91 to i32*
  %98 = icmp sgt i32 %54, 0
  br i1 %98, label %99, label %202

99:                                               ; preds = %96, %93
  %100 = phi i32* [ %95, %93 ], [ %97, %96 ]
  %101 = zext i32 %54 to i64
  %102 = icmp ult i32 %54, 8
  br i1 %102, label %188, label %103

103:                                              ; preds = %99
  %104 = and i64 %101, 4294967288
  %105 = add nsw i64 %104, -8
  %106 = lshr exact i64 %105, 3
  %107 = add nuw nsw i64 %106, 1
  %108 = and i64 %107, 3
  %109 = icmp ult i64 %105, 24
  br i1 %109, label %155, label %110

110:                                              ; preds = %103
  %111 = sub nsw i64 %107, %108
  br label %112

112:                                              ; preds = %112, %110
  %113 = phi i64 [ 0, %110 ], [ %152, %112 ]
  %114 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %150, %112 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %151, %112 ]
  %116 = phi i64 [ %111, %110 ], [ %153, %112 ]
  %117 = getelementptr inbounds i32, i32* %100, i64 %113
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = mul nsw <4 x i32> %119, %114
  %124 = mul nsw <4 x i32> %122, %115
  %125 = or i64 %113, 8
  %126 = getelementptr inbounds i32, i32* %100, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = getelementptr inbounds i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = mul nsw <4 x i32> %128, %123
  %133 = mul nsw <4 x i32> %131, %124
  %134 = or i64 %113, 16
  %135 = getelementptr inbounds i32, i32* %100, i64 %134
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = mul nsw <4 x i32> %137, %132
  %142 = mul nsw <4 x i32> %140, %133
  %143 = or i64 %113, 24
  %144 = getelementptr inbounds i32, i32* %100, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = add i64 %113, 32
  %153 = add i64 %116, -4
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %112, !llvm.loop !22

155:                                              ; preds = %112, %103
  %156 = phi <4 x i32> [ undef, %103 ], [ %150, %112 ]
  %157 = phi <4 x i32> [ undef, %103 ], [ %151, %112 ]
  %158 = phi i64 [ 0, %103 ], [ %152, %112 ]
  %159 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %150, %112 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %151, %112 ]
  %161 = icmp eq i64 %108, 0
  br i1 %161, label %178, label %162

162:                                              ; preds = %155, %162
  %163 = phi i64 [ %175, %162 ], [ %158, %155 ]
  %164 = phi <4 x i32> [ %173, %162 ], [ %159, %155 ]
  %165 = phi <4 x i32> [ %174, %162 ], [ %160, %155 ]
  %166 = phi i64 [ %176, %162 ], [ %108, %155 ]
  %167 = getelementptr inbounds i32, i32* %100, i64 %163
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = add i64 %163, 8
  %176 = add i64 %166, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %162, !llvm.loop !24

178:                                              ; preds = %162, %155
  %179 = phi <4 x i32> [ %156, %155 ], [ %173, %162 ]
  %180 = phi <4 x i32> [ %157, %155 ], [ %174, %162 ]
  %181 = mul <4 x i32> %180, %179
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %183 = mul <4 x i32> %181, %182
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %185 = mul <4 x i32> %183, %184
  %186 = extractelement <4 x i32> %185, i32 0
  %187 = icmp eq i64 %104, %101
  br i1 %187, label %199, label %188

188:                                              ; preds = %178, %99
  %189 = phi i64 [ 0, %99 ], [ %104, %178 ]
  %190 = phi i32 [ 1, %99 ], [ %186, %178 ]
  br label %191

191:                                              ; preds = %188, %191
  %192 = phi i64 [ %197, %191 ], [ %189, %188 ]
  %193 = phi i32 [ %196, %191 ], [ %190, %188 ]
  %194 = getelementptr inbounds i32, i32* %100, i64 %192
  %195 = load i32, i32* %194, align 4
  %196 = mul nsw i32 %195, %193
  %197 = add nuw nsw i64 %192, 1
  %198 = icmp eq i64 %197, %101
  br i1 %198, label %199, label %191, !llvm.loop !25

199:                                              ; preds = %191, %178
  %200 = phi i32 [ %186, %178 ], [ %196, %191 ]
  %201 = icmp sgt i32 %200, 0
  br i1 %201, label %202, label %244

202:                                              ; preds = %199, %96
  %203 = phi i32 [ %200, %199 ], [ 1, %96 ]
  %204 = zext i32 %203 to i64
  %205 = and i64 %204, 1
  %206 = icmp eq i32 %203, 1
  br i1 %206, label %232, label %207

207:                                              ; preds = %202
  %208 = sub nsw i64 %204, %205
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %229, %209 ]
  %211 = phi i64 [ %208, %207 ], [ %230, %209 ]
  %212 = getelementptr inbounds i8, i8* %55, i64 %210
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = sub nsw i32 %214, %14
  %216 = sitofp i32 %215 to double
  %217 = fmul double %17, %216
  %218 = fptrunc double %217 to float
  %219 = getelementptr inbounds float, float* %90, i64 %210
  store float %218, float* %219, align 4
  %220 = or i64 %210, 1
  %221 = getelementptr inbounds i8, i8* %55, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = sub nsw i32 %223, %14
  %225 = sitofp i32 %224 to double
  %226 = fmul double %17, %225
  %227 = fptrunc double %226 to float
  %228 = getelementptr inbounds float, float* %90, i64 %220
  store float %227, float* %228, align 4
  %229 = add nuw nsw i64 %210, 2
  %230 = add i64 %211, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %209

232:                                              ; preds = %209, %202
  %233 = phi i64 [ 0, %202 ], [ %229, %209 ]
  %234 = icmp eq i64 %205, 0
  br i1 %234, label %244, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds i8, i8* %55, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = sub nsw i32 %238, %14
  %240 = sitofp i32 %239 to double
  %241 = fmul double %17, %240
  %242 = fptrunc double %241 to float
  %243 = getelementptr inbounds float, float* %90, i64 %233
  store float %242, float* %243, align 4
  br label %244

244:                                              ; preds = %235, %232, %199
  %245 = icmp sgt i32 %89, 5
  br i1 %245, label %246, label %252

246:                                              ; preds = %244
  %247 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %248 = load i32*, i32** %247, align 8
  %249 = icmp eq i32* %248, null
  br i1 %249, label %252, label %250

250:                                              ; preds = %246
  %251 = bitcast i32* %248 to i8*
  tail call void @_ZdaPv(i8* %251) #10
  br label %252

252:                                              ; preds = %244, %246, %250
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #11
  br i1 %92, label %253, label %259

253:                                              ; preds = %252
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %255 = load i32*, i32** %254, align 8
  %256 = icmp eq i32* %255, null
  br i1 %256, label %259, label %257

257:                                              ; preds = %253
  %258 = bitcast i32* %255 to i8*
  tail call void @_ZdaPv(i8* %258) #10
  br label %259

259:                                              ; preds = %252, %253, %257
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #11
  br label %1020

260:                                              ; preds = %4
  %261 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %261) #11
  %262 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %262, label %263, label %265

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %264, align 8, !alias.scope !27
  br label %293

265:                                              ; preds = %260
  %266 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %267 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %266, align 8, !noalias !27
  %268 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 0
  %269 = load i32, i32* %268, align 4, !noalias !27
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 1, i64 0
  %271 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %269, i32* %271, align 8, !alias.scope !27
  %272 = icmp sgt i32 %269, 5
  br i1 %272, label %273, label %280

273:                                              ; preds = %265
  %274 = sext i32 %269 to i64
  %275 = shl nsw i64 %274, 2
  %276 = tail call i8* @_Znam(i64 %275) #10, !noalias !27
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %278 = bitcast i32** %277 to i8**
  store i8* %276, i8** %278, align 8, !alias.scope !27
  %279 = bitcast i8* %276 to i32*
  br label %285

280:                                              ; preds = %265
  %281 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %282 = bitcast %union.anon* %281 to i32*
  %283 = sext i32 %269 to i64
  %284 = shl nsw i64 %283, 2
  br label %285

285:                                              ; preds = %280, %273
  %286 = phi i64 [ %275, %273 ], [ %284, %280 ]
  %287 = phi i32* [ %279, %273 ], [ %282, %280 ]
  %288 = bitcast i32* %287 to i8*
  %289 = bitcast i32* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %288, i8* align 4 %289, i64 %286, i1 false) #11
  %290 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %291 = bitcast %union.TfLitePtrUnion* %290 to i8**
  %292 = load i8*, i8** %291, align 8
  br label %293

293:                                              ; preds = %263, %285
  %294 = phi i32 [ %269, %285 ], [ 0, %263 ]
  %295 = phi i8* [ %292, %285 ], [ null, %263 ]
  %296 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %296) #11
  %297 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %297, label %298, label %300

298:                                              ; preds = %293
  %299 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %299, align 8, !alias.scope !30
  br label %328

300:                                              ; preds = %293
  %301 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %302 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %301, align 8, !noalias !30
  %303 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 0
  %304 = load i32, i32* %303, align 4, !noalias !30
  %305 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 1, i64 0
  %306 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %304, i32* %306, align 8, !alias.scope !30
  %307 = icmp sgt i32 %304, 5
  br i1 %307, label %308, label %315

308:                                              ; preds = %300
  %309 = sext i32 %304 to i64
  %310 = shl nsw i64 %309, 2
  %311 = tail call i8* @_Znam(i64 %310) #10, !noalias !30
  %312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %313 = bitcast i32** %312 to i8**
  store i8* %311, i8** %313, align 8, !alias.scope !30
  %314 = bitcast i8* %311 to i32*
  br label %320

315:                                              ; preds = %300
  %316 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %317 = bitcast %union.anon* %316 to i32*
  %318 = sext i32 %304 to i64
  %319 = shl nsw i64 %318, 2
  br label %320

320:                                              ; preds = %315, %308
  %321 = phi i64 [ %310, %308 ], [ %319, %315 ]
  %322 = phi i32* [ %314, %308 ], [ %317, %315 ]
  %323 = bitcast i32* %322 to i8*
  %324 = bitcast i32* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %323, i8* align 4 %324, i64 %321, i1 false) #11
  %325 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %326 = bitcast %union.TfLitePtrUnion* %325 to float**
  %327 = load float*, float** %326, align 8
  br label %328

328:                                              ; preds = %298, %320
  %329 = phi i32 [ %304, %320 ], [ 0, %298 ]
  %330 = phi float* [ %327, %320 ], [ null, %298 ]
  %331 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %332 = icmp sgt i32 %294, 5
  br i1 %332, label %333, label %336

333:                                              ; preds = %328
  %334 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %335 = load i32*, i32** %334, align 8
  br label %339

336:                                              ; preds = %328
  %337 = bitcast %union.anon* %331 to i32*
  %338 = icmp sgt i32 %294, 0
  br i1 %338, label %339, label %442

339:                                              ; preds = %336, %333
  %340 = phi i32* [ %335, %333 ], [ %337, %336 ]
  %341 = zext i32 %294 to i64
  %342 = icmp ult i32 %294, 8
  br i1 %342, label %428, label %343

343:                                              ; preds = %339
  %344 = and i64 %341, 4294967288
  %345 = add nsw i64 %344, -8
  %346 = lshr exact i64 %345, 3
  %347 = add nuw nsw i64 %346, 1
  %348 = and i64 %347, 3
  %349 = icmp ult i64 %345, 24
  br i1 %349, label %395, label %350

350:                                              ; preds = %343
  %351 = sub nsw i64 %347, %348
  br label %352

352:                                              ; preds = %352, %350
  %353 = phi i64 [ 0, %350 ], [ %392, %352 ]
  %354 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %390, %352 ]
  %355 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %391, %352 ]
  %356 = phi i64 [ %351, %350 ], [ %393, %352 ]
  %357 = getelementptr inbounds i32, i32* %340, i64 %353
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 4
  %360 = getelementptr inbounds i32, i32* %357, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4
  %363 = mul nsw <4 x i32> %359, %354
  %364 = mul nsw <4 x i32> %362, %355
  %365 = or i64 %353, 8
  %366 = getelementptr inbounds i32, i32* %340, i64 %365
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = getelementptr inbounds i32, i32* %366, i64 4
  %370 = bitcast i32* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 4
  %372 = mul nsw <4 x i32> %368, %363
  %373 = mul nsw <4 x i32> %371, %364
  %374 = or i64 %353, 16
  %375 = getelementptr inbounds i32, i32* %340, i64 %374
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4
  %378 = getelementptr inbounds i32, i32* %375, i64 4
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = mul nsw <4 x i32> %377, %372
  %382 = mul nsw <4 x i32> %380, %373
  %383 = or i64 %353, 24
  %384 = getelementptr inbounds i32, i32* %340, i64 %383
  %385 = bitcast i32* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 4
  %387 = getelementptr inbounds i32, i32* %384, i64 4
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = mul nsw <4 x i32> %386, %381
  %391 = mul nsw <4 x i32> %389, %382
  %392 = add i64 %353, 32
  %393 = add i64 %356, -4
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %352, !llvm.loop !33

395:                                              ; preds = %352, %343
  %396 = phi <4 x i32> [ undef, %343 ], [ %390, %352 ]
  %397 = phi <4 x i32> [ undef, %343 ], [ %391, %352 ]
  %398 = phi i64 [ 0, %343 ], [ %392, %352 ]
  %399 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %390, %352 ]
  %400 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %391, %352 ]
  %401 = icmp eq i64 %348, 0
  br i1 %401, label %418, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %415, %402 ], [ %398, %395 ]
  %404 = phi <4 x i32> [ %413, %402 ], [ %399, %395 ]
  %405 = phi <4 x i32> [ %414, %402 ], [ %400, %395 ]
  %406 = phi i64 [ %416, %402 ], [ %348, %395 ]
  %407 = getelementptr inbounds i32, i32* %340, i64 %403
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 4
  %410 = getelementptr inbounds i32, i32* %407, i64 4
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4
  %413 = mul nsw <4 x i32> %409, %404
  %414 = mul nsw <4 x i32> %412, %405
  %415 = add i64 %403, 8
  %416 = add i64 %406, -1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %402, !llvm.loop !34

418:                                              ; preds = %402, %395
  %419 = phi <4 x i32> [ %396, %395 ], [ %413, %402 ]
  %420 = phi <4 x i32> [ %397, %395 ], [ %414, %402 ]
  %421 = mul <4 x i32> %420, %419
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %423 = mul <4 x i32> %421, %422
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %425 = mul <4 x i32> %423, %424
  %426 = extractelement <4 x i32> %425, i32 0
  %427 = icmp eq i64 %344, %341
  br i1 %427, label %439, label %428

428:                                              ; preds = %418, %339
  %429 = phi i64 [ 0, %339 ], [ %344, %418 ]
  %430 = phi i32 [ 1, %339 ], [ %426, %418 ]
  br label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %437, %431 ], [ %429, %428 ]
  %433 = phi i32 [ %436, %431 ], [ %430, %428 ]
  %434 = getelementptr inbounds i32, i32* %340, i64 %432
  %435 = load i32, i32* %434, align 4
  %436 = mul nsw i32 %435, %433
  %437 = add nuw nsw i64 %432, 1
  %438 = icmp eq i64 %437, %341
  br i1 %438, label %439, label %431, !llvm.loop !35

439:                                              ; preds = %431, %418
  %440 = phi i32 [ %426, %418 ], [ %436, %431 ]
  %441 = icmp sgt i32 %440, 0
  br i1 %441, label %442, label %484

442:                                              ; preds = %439, %336
  %443 = phi i32 [ %440, %439 ], [ 1, %336 ]
  %444 = zext i32 %443 to i64
  %445 = and i64 %444, 1
  %446 = icmp eq i32 %443, 1
  br i1 %446, label %472, label %447

447:                                              ; preds = %442
  %448 = sub nsw i64 %444, %445
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ 0, %447 ], [ %469, %449 ]
  %451 = phi i64 [ %448, %447 ], [ %470, %449 ]
  %452 = getelementptr inbounds i8, i8* %295, i64 %450
  %453 = load i8, i8* %452, align 1
  %454 = sext i8 %453 to i32
  %455 = sub nsw i32 %454, %14
  %456 = sitofp i32 %455 to double
  %457 = fmul double %17, %456
  %458 = fptrunc double %457 to float
  %459 = getelementptr inbounds float, float* %330, i64 %450
  store float %458, float* %459, align 4
  %460 = or i64 %450, 1
  %461 = getelementptr inbounds i8, i8* %295, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i32
  %464 = sub nsw i32 %463, %14
  %465 = sitofp i32 %464 to double
  %466 = fmul double %17, %465
  %467 = fptrunc double %466 to float
  %468 = getelementptr inbounds float, float* %330, i64 %460
  store float %467, float* %468, align 4
  %469 = add nuw nsw i64 %450, 2
  %470 = add i64 %451, -2
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %449

472:                                              ; preds = %449, %442
  %473 = phi i64 [ 0, %442 ], [ %469, %449 ]
  %474 = icmp eq i64 %445, 0
  br i1 %474, label %484, label %475

475:                                              ; preds = %472
  %476 = getelementptr inbounds i8, i8* %295, i64 %473
  %477 = load i8, i8* %476, align 1
  %478 = sext i8 %477 to i32
  %479 = sub nsw i32 %478, %14
  %480 = sitofp i32 %479 to double
  %481 = fmul double %17, %480
  %482 = fptrunc double %481 to float
  %483 = getelementptr inbounds float, float* %330, i64 %473
  store float %482, float* %483, align 4
  br label %484

484:                                              ; preds = %475, %472, %439
  %485 = icmp sgt i32 %329, 5
  br i1 %485, label %486, label %492

486:                                              ; preds = %484
  %487 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %488 = load i32*, i32** %487, align 8
  %489 = icmp eq i32* %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %486
  %491 = bitcast i32* %488 to i8*
  tail call void @_ZdaPv(i8* %491) #10
  br label %492

492:                                              ; preds = %484, %486, %490
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %296) #11
  br i1 %332, label %493, label %499

493:                                              ; preds = %492
  %494 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %495 = load i32*, i32** %494, align 8
  %496 = icmp eq i32* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %493
  %498 = bitcast i32* %495 to i8*
  tail call void @_ZdaPv(i8* %498) #10
  br label %499

499:                                              ; preds = %492, %493, %497
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %261) #11
  br label %1020

500:                                              ; preds = %4
  %501 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %501) #11
  %502 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %502, label %503, label %505

503:                                              ; preds = %500
  %504 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %504, align 8, !alias.scope !36
  br label %533

505:                                              ; preds = %500
  %506 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %507 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %506, align 8, !noalias !36
  %508 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 0
  %509 = load i32, i32* %508, align 4, !noalias !36
  %510 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 1, i64 0
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %509, i32* %511, align 8, !alias.scope !36
  %512 = icmp sgt i32 %509, 5
  br i1 %512, label %513, label %520

513:                                              ; preds = %505
  %514 = sext i32 %509 to i64
  %515 = shl nsw i64 %514, 2
  %516 = tail call i8* @_Znam(i64 %515) #10, !noalias !36
  %517 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %518 = bitcast i32** %517 to i8**
  store i8* %516, i8** %518, align 8, !alias.scope !36
  %519 = bitcast i8* %516 to i32*
  br label %525

520:                                              ; preds = %505
  %521 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %522 = bitcast %union.anon* %521 to i32*
  %523 = sext i32 %509 to i64
  %524 = shl nsw i64 %523, 2
  br label %525

525:                                              ; preds = %520, %513
  %526 = phi i64 [ %515, %513 ], [ %524, %520 ]
  %527 = phi i32* [ %519, %513 ], [ %522, %520 ]
  %528 = bitcast i32* %527 to i8*
  %529 = bitcast i32* %510 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %528, i8* align 4 %529, i64 %526, i1 false) #11
  %530 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %531 = bitcast %union.TfLitePtrUnion* %530 to i16**
  %532 = load i16*, i16** %531, align 8
  br label %533

533:                                              ; preds = %503, %525
  %534 = phi i32 [ %509, %525 ], [ 0, %503 ]
  %535 = phi i16* [ %532, %525 ], [ null, %503 ]
  %536 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %536) #11
  %537 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %537, label %538, label %540

538:                                              ; preds = %533
  %539 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %539, align 8, !alias.scope !39
  br label %568

540:                                              ; preds = %533
  %541 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %542 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %541, align 8, !noalias !39
  %543 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 0
  %544 = load i32, i32* %543, align 4, !noalias !39
  %545 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 1, i64 0
  %546 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %544, i32* %546, align 8, !alias.scope !39
  %547 = icmp sgt i32 %544, 5
  br i1 %547, label %548, label %555

548:                                              ; preds = %540
  %549 = sext i32 %544 to i64
  %550 = shl nsw i64 %549, 2
  %551 = tail call i8* @_Znam(i64 %550) #10, !noalias !39
  %552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %553 = bitcast i32** %552 to i8**
  store i8* %551, i8** %553, align 8, !alias.scope !39
  %554 = bitcast i8* %551 to i32*
  br label %560

555:                                              ; preds = %540
  %556 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %557 = bitcast %union.anon* %556 to i32*
  %558 = sext i32 %544 to i64
  %559 = shl nsw i64 %558, 2
  br label %560

560:                                              ; preds = %555, %548
  %561 = phi i64 [ %550, %548 ], [ %559, %555 ]
  %562 = phi i32* [ %554, %548 ], [ %557, %555 ]
  %563 = bitcast i32* %562 to i8*
  %564 = bitcast i32* %545 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %563, i8* align 4 %564, i64 %561, i1 false) #11
  %565 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %566 = bitcast %union.TfLitePtrUnion* %565 to float**
  %567 = load float*, float** %566, align 8
  br label %568

568:                                              ; preds = %538, %560
  %569 = phi i32 [ %544, %560 ], [ 0, %538 ]
  %570 = phi float* [ %567, %560 ], [ null, %538 ]
  %571 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %572 = icmp sgt i32 %534, 5
  br i1 %572, label %573, label %576

573:                                              ; preds = %568
  %574 = getelementptr inbounds %union.anon, %union.anon* %571, i64 0, i32 0
  %575 = load i32*, i32** %574, align 8
  br label %579

576:                                              ; preds = %568
  %577 = bitcast %union.anon* %571 to i32*
  %578 = icmp sgt i32 %534, 0
  br i1 %578, label %579, label %682

579:                                              ; preds = %576, %573
  %580 = phi i32* [ %575, %573 ], [ %577, %576 ]
  %581 = zext i32 %534 to i64
  %582 = icmp ult i32 %534, 8
  br i1 %582, label %668, label %583

583:                                              ; preds = %579
  %584 = and i64 %581, 4294967288
  %585 = add nsw i64 %584, -8
  %586 = lshr exact i64 %585, 3
  %587 = add nuw nsw i64 %586, 1
  %588 = and i64 %587, 3
  %589 = icmp ult i64 %585, 24
  br i1 %589, label %635, label %590

590:                                              ; preds = %583
  %591 = sub nsw i64 %587, %588
  br label %592

592:                                              ; preds = %592, %590
  %593 = phi i64 [ 0, %590 ], [ %632, %592 ]
  %594 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %630, %592 ]
  %595 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %631, %592 ]
  %596 = phi i64 [ %591, %590 ], [ %633, %592 ]
  %597 = getelementptr inbounds i32, i32* %580, i64 %593
  %598 = bitcast i32* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 4
  %600 = getelementptr inbounds i32, i32* %597, i64 4
  %601 = bitcast i32* %600 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 4
  %603 = mul nsw <4 x i32> %599, %594
  %604 = mul nsw <4 x i32> %602, %595
  %605 = or i64 %593, 8
  %606 = getelementptr inbounds i32, i32* %580, i64 %605
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 4
  %609 = getelementptr inbounds i32, i32* %606, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4
  %612 = mul nsw <4 x i32> %608, %603
  %613 = mul nsw <4 x i32> %611, %604
  %614 = or i64 %593, 16
  %615 = getelementptr inbounds i32, i32* %580, i64 %614
  %616 = bitcast i32* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4
  %618 = getelementptr inbounds i32, i32* %615, i64 4
  %619 = bitcast i32* %618 to <4 x i32>*
  %620 = load <4 x i32>, <4 x i32>* %619, align 4
  %621 = mul nsw <4 x i32> %617, %612
  %622 = mul nsw <4 x i32> %620, %613
  %623 = or i64 %593, 24
  %624 = getelementptr inbounds i32, i32* %580, i64 %623
  %625 = bitcast i32* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 4
  %627 = getelementptr inbounds i32, i32* %624, i64 4
  %628 = bitcast i32* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4
  %630 = mul nsw <4 x i32> %626, %621
  %631 = mul nsw <4 x i32> %629, %622
  %632 = add i64 %593, 32
  %633 = add i64 %596, -4
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %592, !llvm.loop !42

635:                                              ; preds = %592, %583
  %636 = phi <4 x i32> [ undef, %583 ], [ %630, %592 ]
  %637 = phi <4 x i32> [ undef, %583 ], [ %631, %592 ]
  %638 = phi i64 [ 0, %583 ], [ %632, %592 ]
  %639 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %630, %592 ]
  %640 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %631, %592 ]
  %641 = icmp eq i64 %588, 0
  br i1 %641, label %658, label %642

642:                                              ; preds = %635, %642
  %643 = phi i64 [ %655, %642 ], [ %638, %635 ]
  %644 = phi <4 x i32> [ %653, %642 ], [ %639, %635 ]
  %645 = phi <4 x i32> [ %654, %642 ], [ %640, %635 ]
  %646 = phi i64 [ %656, %642 ], [ %588, %635 ]
  %647 = getelementptr inbounds i32, i32* %580, i64 %643
  %648 = bitcast i32* %647 to <4 x i32>*
  %649 = load <4 x i32>, <4 x i32>* %648, align 4
  %650 = getelementptr inbounds i32, i32* %647, i64 4
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4
  %653 = mul nsw <4 x i32> %649, %644
  %654 = mul nsw <4 x i32> %652, %645
  %655 = add i64 %643, 8
  %656 = add i64 %646, -1
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %658, label %642, !llvm.loop !43

658:                                              ; preds = %642, %635
  %659 = phi <4 x i32> [ %636, %635 ], [ %653, %642 ]
  %660 = phi <4 x i32> [ %637, %635 ], [ %654, %642 ]
  %661 = mul <4 x i32> %660, %659
  %662 = shufflevector <4 x i32> %661, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %663 = mul <4 x i32> %661, %662
  %664 = shufflevector <4 x i32> %663, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %665 = mul <4 x i32> %663, %664
  %666 = extractelement <4 x i32> %665, i32 0
  %667 = icmp eq i64 %584, %581
  br i1 %667, label %679, label %668

668:                                              ; preds = %658, %579
  %669 = phi i64 [ 0, %579 ], [ %584, %658 ]
  %670 = phi i32 [ 1, %579 ], [ %666, %658 ]
  br label %671

671:                                              ; preds = %668, %671
  %672 = phi i64 [ %677, %671 ], [ %669, %668 ]
  %673 = phi i32 [ %676, %671 ], [ %670, %668 ]
  %674 = getelementptr inbounds i32, i32* %580, i64 %672
  %675 = load i32, i32* %674, align 4
  %676 = mul nsw i32 %675, %673
  %677 = add nuw nsw i64 %672, 1
  %678 = icmp eq i64 %677, %581
  br i1 %678, label %679, label %671, !llvm.loop !44

679:                                              ; preds = %671, %658
  %680 = phi i32 [ %666, %658 ], [ %676, %671 ]
  %681 = icmp sgt i32 %680, 0
  br i1 %681, label %682, label %724

682:                                              ; preds = %679, %576
  %683 = phi i32 [ %680, %679 ], [ 1, %576 ]
  %684 = zext i32 %683 to i64
  %685 = and i64 %684, 1
  %686 = icmp eq i32 %683, 1
  br i1 %686, label %712, label %687

687:                                              ; preds = %682
  %688 = sub nsw i64 %684, %685
  br label %689

689:                                              ; preds = %689, %687
  %690 = phi i64 [ 0, %687 ], [ %709, %689 ]
  %691 = phi i64 [ %688, %687 ], [ %710, %689 ]
  %692 = getelementptr inbounds i16, i16* %535, i64 %690
  %693 = load i16, i16* %692, align 2
  %694 = sext i16 %693 to i32
  %695 = sub nsw i32 %694, %14
  %696 = sitofp i32 %695 to double
  %697 = fmul double %17, %696
  %698 = fptrunc double %697 to float
  %699 = getelementptr inbounds float, float* %570, i64 %690
  store float %698, float* %699, align 4
  %700 = or i64 %690, 1
  %701 = getelementptr inbounds i16, i16* %535, i64 %700
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = sub nsw i32 %703, %14
  %705 = sitofp i32 %704 to double
  %706 = fmul double %17, %705
  %707 = fptrunc double %706 to float
  %708 = getelementptr inbounds float, float* %570, i64 %700
  store float %707, float* %708, align 4
  %709 = add nuw nsw i64 %690, 2
  %710 = add i64 %691, -2
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %689

712:                                              ; preds = %689, %682
  %713 = phi i64 [ 0, %682 ], [ %709, %689 ]
  %714 = icmp eq i64 %685, 0
  br i1 %714, label %724, label %715

715:                                              ; preds = %712
  %716 = getelementptr inbounds i16, i16* %535, i64 %713
  %717 = load i16, i16* %716, align 2
  %718 = sext i16 %717 to i32
  %719 = sub nsw i32 %718, %14
  %720 = sitofp i32 %719 to double
  %721 = fmul double %17, %720
  %722 = fptrunc double %721 to float
  %723 = getelementptr inbounds float, float* %570, i64 %713
  store float %722, float* %723, align 4
  br label %724

724:                                              ; preds = %715, %712, %679
  %725 = icmp sgt i32 %569, 5
  br i1 %725, label %726, label %732

726:                                              ; preds = %724
  %727 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %728 = load i32*, i32** %727, align 8
  %729 = icmp eq i32* %728, null
  br i1 %729, label %732, label %730

730:                                              ; preds = %726
  %731 = bitcast i32* %728 to i8*
  tail call void @_ZdaPv(i8* %731) #10
  br label %732

732:                                              ; preds = %724, %726, %730
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %536) #11
  br i1 %572, label %733, label %739

733:                                              ; preds = %732
  %734 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %735 = load i32*, i32** %734, align 8
  %736 = icmp eq i32* %735, null
  br i1 %736, label %739, label %737

737:                                              ; preds = %733
  %738 = bitcast i32* %735 to i8*
  tail call void @_ZdaPv(i8* %738) #10
  br label %739

739:                                              ; preds = %732, %733, %737
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %501) #11
  br label %1020

740:                                              ; preds = %4
  %741 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %741, label %742, label %745

742:                                              ; preds = %740
  %743 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %743) #11
  %744 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %744, align 8, !alias.scope !45
  br label %775

745:                                              ; preds = %740
  %746 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %747 = bitcast %union.TfLitePtrUnion* %746 to %"struct.Eigen::half"**
  %748 = load %"struct.Eigen::half"*, %"struct.Eigen::half"** %747, align 8
  %749 = bitcast %"struct.Eigen::half"* %748 to i8*
  %750 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #11
  %751 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %752 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %751, align 8, !noalias !45
  %753 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 0
  %754 = load i32, i32* %753, align 4, !noalias !45
  %755 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 1, i64 0
  %756 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %754, i32* %756, align 8, !alias.scope !45
  %757 = icmp sgt i32 %754, 5
  br i1 %757, label %758, label %765

758:                                              ; preds = %745
  %759 = sext i32 %754 to i64
  %760 = shl nsw i64 %759, 2
  %761 = tail call i8* @_Znam(i64 %760) #10, !noalias !45
  %762 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %763 = bitcast i32** %762 to i8**
  store i8* %761, i8** %763, align 8, !alias.scope !45
  %764 = bitcast i8* %761 to i32*
  br label %770

765:                                              ; preds = %745
  %766 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %767 = bitcast %union.anon* %766 to i32*
  %768 = sext i32 %754 to i64
  %769 = shl nsw i64 %768, 2
  br label %770

770:                                              ; preds = %765, %758
  %771 = phi i64 [ %760, %758 ], [ %769, %765 ]
  %772 = phi i32* [ %764, %758 ], [ %767, %765 ]
  %773 = bitcast i32* %772 to i8*
  %774 = bitcast i32* %755 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %773, i8* align 4 %774, i64 %771, i1 false) #11
  br label %775

775:                                              ; preds = %742, %770
  %776 = phi i32 [ 0, %742 ], [ %754, %770 ]
  %777 = phi i8* [ %743, %742 ], [ %750, %770 ]
  %778 = phi i8* [ null, %742 ], [ %749, %770 ]
  %779 = phi %"struct.Eigen::half"* [ null, %742 ], [ %748, %770 ]
  %780 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %780) #11
  %781 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %781, label %782, label %784

782:                                              ; preds = %775
  %783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %783, align 8, !alias.scope !48
  br label %813

784:                                              ; preds = %775
  %785 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %786 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %785, align 8, !noalias !48
  %787 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 0
  %788 = load i32, i32* %787, align 4, !noalias !48
  %789 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 1, i64 0
  %790 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %788, i32* %790, align 8, !alias.scope !48
  %791 = icmp sgt i32 %788, 5
  br i1 %791, label %792, label %799

792:                                              ; preds = %784
  %793 = sext i32 %788 to i64
  %794 = shl nsw i64 %793, 2
  %795 = tail call i8* @_Znam(i64 %794) #10, !noalias !48
  %796 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %797 = bitcast i32** %796 to i8**
  store i8* %795, i8** %797, align 8, !alias.scope !48
  %798 = bitcast i8* %795 to i32*
  br label %804

799:                                              ; preds = %784
  %800 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %801 = bitcast %union.anon* %800 to i32*
  %802 = sext i32 %788 to i64
  %803 = shl nsw i64 %802, 2
  br label %804

804:                                              ; preds = %799, %792
  %805 = phi i64 [ %794, %792 ], [ %803, %799 ]
  %806 = phi i32* [ %798, %792 ], [ %801, %799 ]
  %807 = bitcast i32* %806 to i8*
  %808 = bitcast i32* %789 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %807, i8* align 4 %808, i64 %805, i1 false) #11
  %809 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %810 = bitcast %union.TfLitePtrUnion* %809 to float**
  %811 = load float*, float** %810, align 8
  %812 = bitcast float* %811 to i8*
  br label %813

813:                                              ; preds = %782, %804
  %814 = phi i32 [ %788, %804 ], [ 0, %782 ]
  %815 = phi i8* [ %812, %804 ], [ null, %782 ]
  %816 = phi float* [ %811, %804 ], [ null, %782 ]
  %817 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %818 = icmp sgt i32 %776, 5
  br i1 %818, label %819, label %822

819:                                              ; preds = %813
  %820 = getelementptr inbounds %union.anon, %union.anon* %817, i64 0, i32 0
  %821 = load i32*, i32** %820, align 8
  br label %825

822:                                              ; preds = %813
  %823 = bitcast %union.anon* %817 to i32*
  %824 = icmp sgt i32 %776, 0
  br i1 %824, label %825, label %928

825:                                              ; preds = %822, %819
  %826 = phi i32* [ %821, %819 ], [ %823, %822 ]
  %827 = zext i32 %776 to i64
  %828 = icmp ult i32 %776, 8
  br i1 %828, label %914, label %829

829:                                              ; preds = %825
  %830 = and i64 %827, 4294967288
  %831 = add nsw i64 %830, -8
  %832 = lshr exact i64 %831, 3
  %833 = add nuw nsw i64 %832, 1
  %834 = and i64 %833, 3
  %835 = icmp ult i64 %831, 24
  br i1 %835, label %881, label %836

836:                                              ; preds = %829
  %837 = sub nsw i64 %833, %834
  br label %838

838:                                              ; preds = %838, %836
  %839 = phi i64 [ 0, %836 ], [ %878, %838 ]
  %840 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %876, %838 ]
  %841 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %877, %838 ]
  %842 = phi i64 [ %837, %836 ], [ %879, %838 ]
  %843 = getelementptr inbounds i32, i32* %826, i64 %839
  %844 = bitcast i32* %843 to <4 x i32>*
  %845 = load <4 x i32>, <4 x i32>* %844, align 4
  %846 = getelementptr inbounds i32, i32* %843, i64 4
  %847 = bitcast i32* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 4
  %849 = mul nsw <4 x i32> %845, %840
  %850 = mul nsw <4 x i32> %848, %841
  %851 = or i64 %839, 8
  %852 = getelementptr inbounds i32, i32* %826, i64 %851
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4
  %855 = getelementptr inbounds i32, i32* %852, i64 4
  %856 = bitcast i32* %855 to <4 x i32>*
  %857 = load <4 x i32>, <4 x i32>* %856, align 4
  %858 = mul nsw <4 x i32> %854, %849
  %859 = mul nsw <4 x i32> %857, %850
  %860 = or i64 %839, 16
  %861 = getelementptr inbounds i32, i32* %826, i64 %860
  %862 = bitcast i32* %861 to <4 x i32>*
  %863 = load <4 x i32>, <4 x i32>* %862, align 4
  %864 = getelementptr inbounds i32, i32* %861, i64 4
  %865 = bitcast i32* %864 to <4 x i32>*
  %866 = load <4 x i32>, <4 x i32>* %865, align 4
  %867 = mul nsw <4 x i32> %863, %858
  %868 = mul nsw <4 x i32> %866, %859
  %869 = or i64 %839, 24
  %870 = getelementptr inbounds i32, i32* %826, i64 %869
  %871 = bitcast i32* %870 to <4 x i32>*
  %872 = load <4 x i32>, <4 x i32>* %871, align 4
  %873 = getelementptr inbounds i32, i32* %870, i64 4
  %874 = bitcast i32* %873 to <4 x i32>*
  %875 = load <4 x i32>, <4 x i32>* %874, align 4
  %876 = mul nsw <4 x i32> %872, %867
  %877 = mul nsw <4 x i32> %875, %868
  %878 = add i64 %839, 32
  %879 = add i64 %842, -4
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %838, !llvm.loop !51

881:                                              ; preds = %838, %829
  %882 = phi <4 x i32> [ undef, %829 ], [ %876, %838 ]
  %883 = phi <4 x i32> [ undef, %829 ], [ %877, %838 ]
  %884 = phi i64 [ 0, %829 ], [ %878, %838 ]
  %885 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %876, %838 ]
  %886 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %877, %838 ]
  %887 = icmp eq i64 %834, 0
  br i1 %887, label %904, label %888

888:                                              ; preds = %881, %888
  %889 = phi i64 [ %901, %888 ], [ %884, %881 ]
  %890 = phi <4 x i32> [ %899, %888 ], [ %885, %881 ]
  %891 = phi <4 x i32> [ %900, %888 ], [ %886, %881 ]
  %892 = phi i64 [ %902, %888 ], [ %834, %881 ]
  %893 = getelementptr inbounds i32, i32* %826, i64 %889
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 4
  %896 = getelementptr inbounds i32, i32* %893, i64 4
  %897 = bitcast i32* %896 to <4 x i32>*
  %898 = load <4 x i32>, <4 x i32>* %897, align 4
  %899 = mul nsw <4 x i32> %895, %890
  %900 = mul nsw <4 x i32> %898, %891
  %901 = add i64 %889, 8
  %902 = add i64 %892, -1
  %903 = icmp eq i64 %902, 0
  br i1 %903, label %904, label %888, !llvm.loop !52

904:                                              ; preds = %888, %881
  %905 = phi <4 x i32> [ %882, %881 ], [ %899, %888 ]
  %906 = phi <4 x i32> [ %883, %881 ], [ %900, %888 ]
  %907 = mul <4 x i32> %906, %905
  %908 = shufflevector <4 x i32> %907, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %909 = mul <4 x i32> %907, %908
  %910 = shufflevector <4 x i32> %909, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %911 = mul <4 x i32> %909, %910
  %912 = extractelement <4 x i32> %911, i32 0
  %913 = icmp eq i64 %830, %827
  br i1 %913, label %925, label %914

914:                                              ; preds = %904, %825
  %915 = phi i64 [ 0, %825 ], [ %830, %904 ]
  %916 = phi i32 [ 1, %825 ], [ %912, %904 ]
  br label %917

917:                                              ; preds = %914, %917
  %918 = phi i64 [ %923, %917 ], [ %915, %914 ]
  %919 = phi i32 [ %922, %917 ], [ %916, %914 ]
  %920 = getelementptr inbounds i32, i32* %826, i64 %918
  %921 = load i32, i32* %920, align 4
  %922 = mul nsw i32 %921, %919
  %923 = add nuw nsw i64 %918, 1
  %924 = icmp eq i64 %923, %827
  br i1 %924, label %925, label %917, !llvm.loop !53

925:                                              ; preds = %917, %904
  %926 = phi i32 [ %912, %904 ], [ %922, %917 ]
  %927 = icmp sgt i32 %926, 0
  br i1 %927, label %928, label %1001

928:                                              ; preds = %925, %822
  %929 = phi i32 [ %926, %925 ], [ 1, %822 ]
  %930 = zext i32 %929 to i64
  %931 = icmp ult i32 %929, 4
  br i1 %931, label %971, label %932

932:                                              ; preds = %928
  %933 = getelementptr float, float* %816, i64 %930
  %934 = bitcast float* %933 to i8*
  %935 = getelementptr %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %930
  %936 = bitcast %"struct.Eigen::half"* %935 to i8*
  %937 = icmp ult i8* %815, %936
  %938 = icmp ult i8* %778, %934
  %939 = and i1 %937, %938
  br i1 %939, label %971, label %940

940:                                              ; preds = %932
  %941 = and i64 %930, 4294967292
  br label %942

942:                                              ; preds = %942, %940
  %943 = phi i64 [ 0, %940 ], [ %967, %942 ]
  %944 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %943, i32 0, i32 0, i32 0
  %945 = bitcast i16* %944 to <4 x i16>*
  %946 = load <4 x i16>, <4 x i16>* %945, align 2, !alias.scope !54
  %947 = zext <4 x i16> %946 to <4 x i32>
  %948 = shl nuw nsw <4 x i32> %947, <i32 13, i32 13, i32 13, i32 13>
  %949 = and <4 x i32> %948, <i32 268427264, i32 268427264, i32 268427264, i32 268427264>
  %950 = and <4 x i32> %948, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %951 = icmp ne <4 x i32> %950, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %952 = add nuw nsw <4 x i32> %949, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %953 = icmp eq <4 x i32> %950, zeroinitializer
  %954 = add nuw nsw <4 x i32> %949, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %955 = bitcast <4 x i32> %954 to <4 x float>
  %956 = fadd <4 x float> %955, <float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000>
  %957 = bitcast <4 x float> %956 to <4 x i32>
  %958 = or <4 x i32> %948, <i32 1879048192, i32 1879048192, i32 1879048192, i32 1879048192>
  %959 = xor <4 x i1> %953, %951
  %960 = select <4 x i1> %953, <4 x i32> %957, <4 x i32> %958
  %961 = select <4 x i1> %959, <4 x i32> %952, <4 x i32> %960
  %962 = shl nuw <4 x i32> %947, <i32 16, i32 16, i32 16, i32 16>
  %963 = and <4 x i32> %962, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %964 = or <4 x i32> %961, %963
  %965 = getelementptr inbounds float, float* %816, i64 %943
  %966 = bitcast float* %965 to <4 x i32>*
  store <4 x i32> %964, <4 x i32>* %966, align 4, !alias.scope !57, !noalias !54
  %967 = add i64 %943, 4
  %968 = icmp eq i64 %967, %941
  br i1 %968, label %969, label %942, !llvm.loop !59

969:                                              ; preds = %942
  %970 = icmp eq i64 %941, %930
  br i1 %970, label %1001, label %971

971:                                              ; preds = %969, %932, %928
  %972 = phi i64 [ 0, %932 ], [ 0, %928 ], [ %941, %969 ]
  br label %973

973:                                              ; preds = %971, %992
  %974 = phi i64 [ %999, %992 ], [ %972, %971 ]
  %975 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %974, i32 0, i32 0, i32 0
  %976 = load i16, i16* %975, align 2
  %977 = zext i16 %976 to i32
  %978 = shl nuw nsw i32 %977, 13
  %979 = and i32 %978, 268427264
  %980 = and i32 %978, 260046848
  %981 = icmp eq i32 %980, 260046848
  br i1 %981, label %982, label %984

982:                                              ; preds = %973
  %983 = or i32 %978, 1879048192
  br label %992

984:                                              ; preds = %973
  %985 = add nuw nsw i32 %979, 939524096
  %986 = icmp eq i32 %980, 0
  br i1 %986, label %987, label %992

987:                                              ; preds = %984
  %988 = add nuw nsw i32 %979, 947912704
  %989 = bitcast i32 %988 to float
  %990 = fadd float %989, 0xBF10000000000000
  %991 = bitcast float %990 to i32
  br label %992

992:                                              ; preds = %987, %984, %982
  %993 = phi i32 [ %983, %982 ], [ %991, %987 ], [ %985, %984 ]
  %994 = shl nuw i32 %977, 16
  %995 = and i32 %994, -2147483648
  %996 = or i32 %993, %995
  %997 = getelementptr inbounds float, float* %816, i64 %974
  %998 = bitcast float* %997 to i32*
  store i32 %996, i32* %998, align 4
  %999 = add nuw nsw i64 %974, 1
  %1000 = icmp eq i64 %999, %930
  br i1 %1000, label %1001, label %973, !llvm.loop !60

1001:                                             ; preds = %992, %969, %925
  %1002 = icmp sgt i32 %814, 5
  br i1 %1002, label %1003, label %1009

1003:                                             ; preds = %1001
  %1004 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1005 = load i32*, i32** %1004, align 8
  %1006 = icmp eq i32* %1005, null
  br i1 %1006, label %1009, label %1007

1007:                                             ; preds = %1003
  %1008 = bitcast i32* %1005 to i8*
  tail call void @_ZdaPv(i8* %1008) #10
  br label %1009

1009:                                             ; preds = %1001, %1003, %1007
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %780) #11
  br i1 %818, label %1010, label %1016

1010:                                             ; preds = %1009
  %1011 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %1012 = load i32*, i32** %1011, align 8
  %1013 = icmp eq i32* %1012, null
  br i1 %1013, label %1016, label %1014

1014:                                             ; preds = %1010
  %1015 = bitcast i32* %1012 to i8*
  tail call void @_ZdaPv(i8* %1015) #10
  br label %1016

1016:                                             ; preds = %1009, %1010, %1014
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %777) #11
  br label %1020

1017:                                             ; preds = %4
  %1018 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1019 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1018, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %1019(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i32 %19) #11
  br label %1020

1020:                                             ; preds = %259, %499, %739, %1016, %1017
  %1021 = phi i32 [ 1, %1017 ], [ 0, %1016 ], [ 0, %739 ], [ 0, %499 ], [ 0, %259 ]
  ret i32 %1021
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin10dequantize14DequantizeImplILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensorPSA_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 3, i32 0
  %16 = load float, float* %15, align 8
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  switch i32 %19, label %1017 [
    i32 3, label %20
    i32 9, label %260
    i32 7, label %500
    i32 10, label %740
  ]

20:                                               ; preds = %4
  %21 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #11
  %22 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !61
  br label %53

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %27 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %26, align 8, !noalias !61
  %28 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 0
  %29 = load i32, i32* %28, align 4, !noalias !61
  %30 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %27, i64 0, i32 1, i64 0
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %29, i32* %31, align 8, !alias.scope !61
  %32 = icmp sgt i32 %29, 5
  br i1 %32, label %33, label %40

33:                                               ; preds = %25
  %34 = sext i32 %29 to i64
  %35 = shl nsw i64 %34, 2
  %36 = tail call i8* @_Znam(i64 %35) #10, !noalias !61
  %37 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %38 = bitcast i32** %37 to i8**
  store i8* %36, i8** %38, align 8, !alias.scope !61
  %39 = bitcast i8* %36 to i32*
  br label %45

40:                                               ; preds = %25
  %41 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %42 = bitcast %union.anon* %41 to i32*
  %43 = sext i32 %29 to i64
  %44 = shl nsw i64 %43, 2
  br label %45

45:                                               ; preds = %40, %33
  %46 = phi i64 [ %35, %33 ], [ %44, %40 ]
  %47 = phi i32* [ %39, %33 ], [ %42, %40 ]
  %48 = bitcast i32* %47 to i8*
  %49 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 %46, i1 false) #11
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %51 = bitcast %union.TfLitePtrUnion* %50 to i8**
  %52 = load i8*, i8** %51, align 8
  br label %53

53:                                               ; preds = %23, %45
  %54 = phi i32 [ %29, %45 ], [ 0, %23 ]
  %55 = phi i8* [ %52, %45 ], [ null, %23 ]
  %56 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #11
  %57 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %59, align 8, !alias.scope !64
  br label %88

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %62 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %61, align 8, !noalias !64
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 4, !noalias !64
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %62, i64 0, i32 1, i64 0
  %66 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %64, i32* %66, align 8, !alias.scope !64
  %67 = icmp sgt i32 %64, 5
  br i1 %67, label %68, label %75

68:                                               ; preds = %60
  %69 = sext i32 %64 to i64
  %70 = shl nsw i64 %69, 2
  %71 = tail call i8* @_Znam(i64 %70) #10, !noalias !64
  %72 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %73 = bitcast i32** %72 to i8**
  store i8* %71, i8** %73, align 8, !alias.scope !64
  %74 = bitcast i8* %71 to i32*
  br label %80

75:                                               ; preds = %60
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %77 = bitcast %union.anon* %76 to i32*
  %78 = sext i32 %64 to i64
  %79 = shl nsw i64 %78, 2
  br label %80

80:                                               ; preds = %75, %68
  %81 = phi i64 [ %70, %68 ], [ %79, %75 ]
  %82 = phi i32* [ %74, %68 ], [ %77, %75 ]
  %83 = bitcast i32* %82 to i8*
  %84 = bitcast i32* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 %81, i1 false) #11
  %85 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %86 = bitcast %union.TfLitePtrUnion* %85 to float**
  %87 = load float*, float** %86, align 8
  br label %88

88:                                               ; preds = %58, %80
  %89 = phi i32 [ %64, %80 ], [ 0, %58 ]
  %90 = phi float* [ %87, %80 ], [ null, %58 ]
  %91 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %92 = icmp sgt i32 %54, 5
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = getelementptr inbounds %union.anon, %union.anon* %91, i64 0, i32 0
  %95 = load i32*, i32** %94, align 8
  br label %99

96:                                               ; preds = %88
  %97 = bitcast %union.anon* %91 to i32*
  %98 = icmp sgt i32 %54, 0
  br i1 %98, label %99, label %202

99:                                               ; preds = %96, %93
  %100 = phi i32* [ %95, %93 ], [ %97, %96 ]
  %101 = zext i32 %54 to i64
  %102 = icmp ult i32 %54, 8
  br i1 %102, label %188, label %103

103:                                              ; preds = %99
  %104 = and i64 %101, 4294967288
  %105 = add nsw i64 %104, -8
  %106 = lshr exact i64 %105, 3
  %107 = add nuw nsw i64 %106, 1
  %108 = and i64 %107, 3
  %109 = icmp ult i64 %105, 24
  br i1 %109, label %155, label %110

110:                                              ; preds = %103
  %111 = sub nsw i64 %107, %108
  br label %112

112:                                              ; preds = %112, %110
  %113 = phi i64 [ 0, %110 ], [ %152, %112 ]
  %114 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %150, %112 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %151, %112 ]
  %116 = phi i64 [ %111, %110 ], [ %153, %112 ]
  %117 = getelementptr inbounds i32, i32* %100, i64 %113
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = mul nsw <4 x i32> %119, %114
  %124 = mul nsw <4 x i32> %122, %115
  %125 = or i64 %113, 8
  %126 = getelementptr inbounds i32, i32* %100, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = getelementptr inbounds i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = mul nsw <4 x i32> %128, %123
  %133 = mul nsw <4 x i32> %131, %124
  %134 = or i64 %113, 16
  %135 = getelementptr inbounds i32, i32* %100, i64 %134
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = mul nsw <4 x i32> %137, %132
  %142 = mul nsw <4 x i32> %140, %133
  %143 = or i64 %113, 24
  %144 = getelementptr inbounds i32, i32* %100, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = add i64 %113, 32
  %153 = add i64 %116, -4
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %112, !llvm.loop !67

155:                                              ; preds = %112, %103
  %156 = phi <4 x i32> [ undef, %103 ], [ %150, %112 ]
  %157 = phi <4 x i32> [ undef, %103 ], [ %151, %112 ]
  %158 = phi i64 [ 0, %103 ], [ %152, %112 ]
  %159 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %150, %112 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %151, %112 ]
  %161 = icmp eq i64 %108, 0
  br i1 %161, label %178, label %162

162:                                              ; preds = %155, %162
  %163 = phi i64 [ %175, %162 ], [ %158, %155 ]
  %164 = phi <4 x i32> [ %173, %162 ], [ %159, %155 ]
  %165 = phi <4 x i32> [ %174, %162 ], [ %160, %155 ]
  %166 = phi i64 [ %176, %162 ], [ %108, %155 ]
  %167 = getelementptr inbounds i32, i32* %100, i64 %163
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = add i64 %163, 8
  %176 = add i64 %166, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %162, !llvm.loop !68

178:                                              ; preds = %162, %155
  %179 = phi <4 x i32> [ %156, %155 ], [ %173, %162 ]
  %180 = phi <4 x i32> [ %157, %155 ], [ %174, %162 ]
  %181 = mul <4 x i32> %180, %179
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %183 = mul <4 x i32> %181, %182
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %185 = mul <4 x i32> %183, %184
  %186 = extractelement <4 x i32> %185, i32 0
  %187 = icmp eq i64 %104, %101
  br i1 %187, label %199, label %188

188:                                              ; preds = %178, %99
  %189 = phi i64 [ 0, %99 ], [ %104, %178 ]
  %190 = phi i32 [ 1, %99 ], [ %186, %178 ]
  br label %191

191:                                              ; preds = %188, %191
  %192 = phi i64 [ %197, %191 ], [ %189, %188 ]
  %193 = phi i32 [ %196, %191 ], [ %190, %188 ]
  %194 = getelementptr inbounds i32, i32* %100, i64 %192
  %195 = load i32, i32* %194, align 4
  %196 = mul nsw i32 %195, %193
  %197 = add nuw nsw i64 %192, 1
  %198 = icmp eq i64 %197, %101
  br i1 %198, label %199, label %191, !llvm.loop !69

199:                                              ; preds = %191, %178
  %200 = phi i32 [ %186, %178 ], [ %196, %191 ]
  %201 = icmp sgt i32 %200, 0
  br i1 %201, label %202, label %244

202:                                              ; preds = %199, %96
  %203 = phi i32 [ %200, %199 ], [ 1, %96 ]
  %204 = zext i32 %203 to i64
  %205 = and i64 %204, 1
  %206 = icmp eq i32 %203, 1
  br i1 %206, label %232, label %207

207:                                              ; preds = %202
  %208 = sub nsw i64 %204, %205
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %229, %209 ]
  %211 = phi i64 [ %208, %207 ], [ %230, %209 ]
  %212 = getelementptr inbounds i8, i8* %55, i64 %210
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = sub nsw i32 %214, %14
  %216 = sitofp i32 %215 to double
  %217 = fmul double %17, %216
  %218 = fptrunc double %217 to float
  %219 = getelementptr inbounds float, float* %90, i64 %210
  store float %218, float* %219, align 4
  %220 = or i64 %210, 1
  %221 = getelementptr inbounds i8, i8* %55, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = sub nsw i32 %223, %14
  %225 = sitofp i32 %224 to double
  %226 = fmul double %17, %225
  %227 = fptrunc double %226 to float
  %228 = getelementptr inbounds float, float* %90, i64 %220
  store float %227, float* %228, align 4
  %229 = add nuw nsw i64 %210, 2
  %230 = add i64 %211, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %209

232:                                              ; preds = %209, %202
  %233 = phi i64 [ 0, %202 ], [ %229, %209 ]
  %234 = icmp eq i64 %205, 0
  br i1 %234, label %244, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds i8, i8* %55, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = sub nsw i32 %238, %14
  %240 = sitofp i32 %239 to double
  %241 = fmul double %17, %240
  %242 = fptrunc double %241 to float
  %243 = getelementptr inbounds float, float* %90, i64 %233
  store float %242, float* %243, align 4
  br label %244

244:                                              ; preds = %235, %232, %199
  %245 = icmp sgt i32 %89, 5
  br i1 %245, label %246, label %252

246:                                              ; preds = %244
  %247 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %248 = load i32*, i32** %247, align 8
  %249 = icmp eq i32* %248, null
  br i1 %249, label %252, label %250

250:                                              ; preds = %246
  %251 = bitcast i32* %248 to i8*
  tail call void @_ZdaPv(i8* %251) #10
  br label %252

252:                                              ; preds = %244, %246, %250
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #11
  br i1 %92, label %253, label %259

253:                                              ; preds = %252
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %255 = load i32*, i32** %254, align 8
  %256 = icmp eq i32* %255, null
  br i1 %256, label %259, label %257

257:                                              ; preds = %253
  %258 = bitcast i32* %255 to i8*
  tail call void @_ZdaPv(i8* %258) #10
  br label %259

259:                                              ; preds = %252, %253, %257
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #11
  br label %1020

260:                                              ; preds = %4
  %261 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %261) #11
  %262 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %262, label %263, label %265

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %264, align 8, !alias.scope !70
  br label %293

265:                                              ; preds = %260
  %266 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %267 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %266, align 8, !noalias !70
  %268 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 0
  %269 = load i32, i32* %268, align 4, !noalias !70
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %267, i64 0, i32 1, i64 0
  %271 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %269, i32* %271, align 8, !alias.scope !70
  %272 = icmp sgt i32 %269, 5
  br i1 %272, label %273, label %280

273:                                              ; preds = %265
  %274 = sext i32 %269 to i64
  %275 = shl nsw i64 %274, 2
  %276 = tail call i8* @_Znam(i64 %275) #10, !noalias !70
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %278 = bitcast i32** %277 to i8**
  store i8* %276, i8** %278, align 8, !alias.scope !70
  %279 = bitcast i8* %276 to i32*
  br label %285

280:                                              ; preds = %265
  %281 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %282 = bitcast %union.anon* %281 to i32*
  %283 = sext i32 %269 to i64
  %284 = shl nsw i64 %283, 2
  br label %285

285:                                              ; preds = %280, %273
  %286 = phi i64 [ %275, %273 ], [ %284, %280 ]
  %287 = phi i32* [ %279, %273 ], [ %282, %280 ]
  %288 = bitcast i32* %287 to i8*
  %289 = bitcast i32* %270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %288, i8* align 4 %289, i64 %286, i1 false) #11
  %290 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %291 = bitcast %union.TfLitePtrUnion* %290 to i8**
  %292 = load i8*, i8** %291, align 8
  br label %293

293:                                              ; preds = %263, %285
  %294 = phi i32 [ %269, %285 ], [ 0, %263 ]
  %295 = phi i8* [ %292, %285 ], [ null, %263 ]
  %296 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %296) #11
  %297 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %297, label %298, label %300

298:                                              ; preds = %293
  %299 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %299, align 8, !alias.scope !73
  br label %328

300:                                              ; preds = %293
  %301 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %302 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %301, align 8, !noalias !73
  %303 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 0
  %304 = load i32, i32* %303, align 4, !noalias !73
  %305 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 1, i64 0
  %306 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %304, i32* %306, align 8, !alias.scope !73
  %307 = icmp sgt i32 %304, 5
  br i1 %307, label %308, label %315

308:                                              ; preds = %300
  %309 = sext i32 %304 to i64
  %310 = shl nsw i64 %309, 2
  %311 = tail call i8* @_Znam(i64 %310) #10, !noalias !73
  %312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %313 = bitcast i32** %312 to i8**
  store i8* %311, i8** %313, align 8, !alias.scope !73
  %314 = bitcast i8* %311 to i32*
  br label %320

315:                                              ; preds = %300
  %316 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %317 = bitcast %union.anon* %316 to i32*
  %318 = sext i32 %304 to i64
  %319 = shl nsw i64 %318, 2
  br label %320

320:                                              ; preds = %315, %308
  %321 = phi i64 [ %310, %308 ], [ %319, %315 ]
  %322 = phi i32* [ %314, %308 ], [ %317, %315 ]
  %323 = bitcast i32* %322 to i8*
  %324 = bitcast i32* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %323, i8* align 4 %324, i64 %321, i1 false) #11
  %325 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %326 = bitcast %union.TfLitePtrUnion* %325 to float**
  %327 = load float*, float** %326, align 8
  br label %328

328:                                              ; preds = %298, %320
  %329 = phi i32 [ %304, %320 ], [ 0, %298 ]
  %330 = phi float* [ %327, %320 ], [ null, %298 ]
  %331 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %332 = icmp sgt i32 %294, 5
  br i1 %332, label %333, label %336

333:                                              ; preds = %328
  %334 = getelementptr inbounds %union.anon, %union.anon* %331, i64 0, i32 0
  %335 = load i32*, i32** %334, align 8
  br label %339

336:                                              ; preds = %328
  %337 = bitcast %union.anon* %331 to i32*
  %338 = icmp sgt i32 %294, 0
  br i1 %338, label %339, label %442

339:                                              ; preds = %336, %333
  %340 = phi i32* [ %335, %333 ], [ %337, %336 ]
  %341 = zext i32 %294 to i64
  %342 = icmp ult i32 %294, 8
  br i1 %342, label %428, label %343

343:                                              ; preds = %339
  %344 = and i64 %341, 4294967288
  %345 = add nsw i64 %344, -8
  %346 = lshr exact i64 %345, 3
  %347 = add nuw nsw i64 %346, 1
  %348 = and i64 %347, 3
  %349 = icmp ult i64 %345, 24
  br i1 %349, label %395, label %350

350:                                              ; preds = %343
  %351 = sub nsw i64 %347, %348
  br label %352

352:                                              ; preds = %352, %350
  %353 = phi i64 [ 0, %350 ], [ %392, %352 ]
  %354 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %390, %352 ]
  %355 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %350 ], [ %391, %352 ]
  %356 = phi i64 [ %351, %350 ], [ %393, %352 ]
  %357 = getelementptr inbounds i32, i32* %340, i64 %353
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 4
  %360 = getelementptr inbounds i32, i32* %357, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  %362 = load <4 x i32>, <4 x i32>* %361, align 4
  %363 = mul nsw <4 x i32> %359, %354
  %364 = mul nsw <4 x i32> %362, %355
  %365 = or i64 %353, 8
  %366 = getelementptr inbounds i32, i32* %340, i64 %365
  %367 = bitcast i32* %366 to <4 x i32>*
  %368 = load <4 x i32>, <4 x i32>* %367, align 4
  %369 = getelementptr inbounds i32, i32* %366, i64 4
  %370 = bitcast i32* %369 to <4 x i32>*
  %371 = load <4 x i32>, <4 x i32>* %370, align 4
  %372 = mul nsw <4 x i32> %368, %363
  %373 = mul nsw <4 x i32> %371, %364
  %374 = or i64 %353, 16
  %375 = getelementptr inbounds i32, i32* %340, i64 %374
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 4
  %378 = getelementptr inbounds i32, i32* %375, i64 4
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = mul nsw <4 x i32> %377, %372
  %382 = mul nsw <4 x i32> %380, %373
  %383 = or i64 %353, 24
  %384 = getelementptr inbounds i32, i32* %340, i64 %383
  %385 = bitcast i32* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 4
  %387 = getelementptr inbounds i32, i32* %384, i64 4
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = mul nsw <4 x i32> %386, %381
  %391 = mul nsw <4 x i32> %389, %382
  %392 = add i64 %353, 32
  %393 = add i64 %356, -4
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %352, !llvm.loop !76

395:                                              ; preds = %352, %343
  %396 = phi <4 x i32> [ undef, %343 ], [ %390, %352 ]
  %397 = phi <4 x i32> [ undef, %343 ], [ %391, %352 ]
  %398 = phi i64 [ 0, %343 ], [ %392, %352 ]
  %399 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %390, %352 ]
  %400 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %343 ], [ %391, %352 ]
  %401 = icmp eq i64 %348, 0
  br i1 %401, label %418, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %415, %402 ], [ %398, %395 ]
  %404 = phi <4 x i32> [ %413, %402 ], [ %399, %395 ]
  %405 = phi <4 x i32> [ %414, %402 ], [ %400, %395 ]
  %406 = phi i64 [ %416, %402 ], [ %348, %395 ]
  %407 = getelementptr inbounds i32, i32* %340, i64 %403
  %408 = bitcast i32* %407 to <4 x i32>*
  %409 = load <4 x i32>, <4 x i32>* %408, align 4
  %410 = getelementptr inbounds i32, i32* %407, i64 4
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4
  %413 = mul nsw <4 x i32> %409, %404
  %414 = mul nsw <4 x i32> %412, %405
  %415 = add i64 %403, 8
  %416 = add i64 %406, -1
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %402, !llvm.loop !77

418:                                              ; preds = %402, %395
  %419 = phi <4 x i32> [ %396, %395 ], [ %413, %402 ]
  %420 = phi <4 x i32> [ %397, %395 ], [ %414, %402 ]
  %421 = mul <4 x i32> %420, %419
  %422 = shufflevector <4 x i32> %421, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %423 = mul <4 x i32> %421, %422
  %424 = shufflevector <4 x i32> %423, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %425 = mul <4 x i32> %423, %424
  %426 = extractelement <4 x i32> %425, i32 0
  %427 = icmp eq i64 %344, %341
  br i1 %427, label %439, label %428

428:                                              ; preds = %418, %339
  %429 = phi i64 [ 0, %339 ], [ %344, %418 ]
  %430 = phi i32 [ 1, %339 ], [ %426, %418 ]
  br label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %437, %431 ], [ %429, %428 ]
  %433 = phi i32 [ %436, %431 ], [ %430, %428 ]
  %434 = getelementptr inbounds i32, i32* %340, i64 %432
  %435 = load i32, i32* %434, align 4
  %436 = mul nsw i32 %435, %433
  %437 = add nuw nsw i64 %432, 1
  %438 = icmp eq i64 %437, %341
  br i1 %438, label %439, label %431, !llvm.loop !78

439:                                              ; preds = %431, %418
  %440 = phi i32 [ %426, %418 ], [ %436, %431 ]
  %441 = icmp sgt i32 %440, 0
  br i1 %441, label %442, label %484

442:                                              ; preds = %439, %336
  %443 = phi i32 [ %440, %439 ], [ 1, %336 ]
  %444 = zext i32 %443 to i64
  %445 = and i64 %444, 1
  %446 = icmp eq i32 %443, 1
  br i1 %446, label %472, label %447

447:                                              ; preds = %442
  %448 = sub nsw i64 %444, %445
  br label %449

449:                                              ; preds = %449, %447
  %450 = phi i64 [ 0, %447 ], [ %469, %449 ]
  %451 = phi i64 [ %448, %447 ], [ %470, %449 ]
  %452 = getelementptr inbounds i8, i8* %295, i64 %450
  %453 = load i8, i8* %452, align 1
  %454 = sext i8 %453 to i32
  %455 = sub nsw i32 %454, %14
  %456 = sitofp i32 %455 to double
  %457 = fmul double %17, %456
  %458 = fptrunc double %457 to float
  %459 = getelementptr inbounds float, float* %330, i64 %450
  store float %458, float* %459, align 4
  %460 = or i64 %450, 1
  %461 = getelementptr inbounds i8, i8* %295, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = sext i8 %462 to i32
  %464 = sub nsw i32 %463, %14
  %465 = sitofp i32 %464 to double
  %466 = fmul double %17, %465
  %467 = fptrunc double %466 to float
  %468 = getelementptr inbounds float, float* %330, i64 %460
  store float %467, float* %468, align 4
  %469 = add nuw nsw i64 %450, 2
  %470 = add i64 %451, -2
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %472, label %449

472:                                              ; preds = %449, %442
  %473 = phi i64 [ 0, %442 ], [ %469, %449 ]
  %474 = icmp eq i64 %445, 0
  br i1 %474, label %484, label %475

475:                                              ; preds = %472
  %476 = getelementptr inbounds i8, i8* %295, i64 %473
  %477 = load i8, i8* %476, align 1
  %478 = sext i8 %477 to i32
  %479 = sub nsw i32 %478, %14
  %480 = sitofp i32 %479 to double
  %481 = fmul double %17, %480
  %482 = fptrunc double %481 to float
  %483 = getelementptr inbounds float, float* %330, i64 %473
  store float %482, float* %483, align 4
  br label %484

484:                                              ; preds = %475, %472, %439
  %485 = icmp sgt i32 %329, 5
  br i1 %485, label %486, label %492

486:                                              ; preds = %484
  %487 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %488 = load i32*, i32** %487, align 8
  %489 = icmp eq i32* %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %486
  %491 = bitcast i32* %488 to i8*
  tail call void @_ZdaPv(i8* %491) #10
  br label %492

492:                                              ; preds = %484, %486, %490
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %296) #11
  br i1 %332, label %493, label %499

493:                                              ; preds = %492
  %494 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %495 = load i32*, i32** %494, align 8
  %496 = icmp eq i32* %495, null
  br i1 %496, label %499, label %497

497:                                              ; preds = %493
  %498 = bitcast i32* %495 to i8*
  tail call void @_ZdaPv(i8* %498) #10
  br label %499

499:                                              ; preds = %492, %493, %497
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %261) #11
  br label %1020

500:                                              ; preds = %4
  %501 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %501) #11
  %502 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %502, label %503, label %505

503:                                              ; preds = %500
  %504 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %504, align 8, !alias.scope !79
  br label %533

505:                                              ; preds = %500
  %506 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %507 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %506, align 8, !noalias !79
  %508 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 0
  %509 = load i32, i32* %508, align 4, !noalias !79
  %510 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %507, i64 0, i32 1, i64 0
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %509, i32* %511, align 8, !alias.scope !79
  %512 = icmp sgt i32 %509, 5
  br i1 %512, label %513, label %520

513:                                              ; preds = %505
  %514 = sext i32 %509 to i64
  %515 = shl nsw i64 %514, 2
  %516 = tail call i8* @_Znam(i64 %515) #10, !noalias !79
  %517 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %518 = bitcast i32** %517 to i8**
  store i8* %516, i8** %518, align 8, !alias.scope !79
  %519 = bitcast i8* %516 to i32*
  br label %525

520:                                              ; preds = %505
  %521 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %522 = bitcast %union.anon* %521 to i32*
  %523 = sext i32 %509 to i64
  %524 = shl nsw i64 %523, 2
  br label %525

525:                                              ; preds = %520, %513
  %526 = phi i64 [ %515, %513 ], [ %524, %520 ]
  %527 = phi i32* [ %519, %513 ], [ %522, %520 ]
  %528 = bitcast i32* %527 to i8*
  %529 = bitcast i32* %510 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %528, i8* align 4 %529, i64 %526, i1 false) #11
  %530 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %531 = bitcast %union.TfLitePtrUnion* %530 to i16**
  %532 = load i16*, i16** %531, align 8
  br label %533

533:                                              ; preds = %503, %525
  %534 = phi i32 [ %509, %525 ], [ 0, %503 ]
  %535 = phi i16* [ %532, %525 ], [ null, %503 ]
  %536 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %536) #11
  %537 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %537, label %538, label %540

538:                                              ; preds = %533
  %539 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %539, align 8, !alias.scope !82
  br label %568

540:                                              ; preds = %533
  %541 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %542 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %541, align 8, !noalias !82
  %543 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 0
  %544 = load i32, i32* %543, align 4, !noalias !82
  %545 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %542, i64 0, i32 1, i64 0
  %546 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %544, i32* %546, align 8, !alias.scope !82
  %547 = icmp sgt i32 %544, 5
  br i1 %547, label %548, label %555

548:                                              ; preds = %540
  %549 = sext i32 %544 to i64
  %550 = shl nsw i64 %549, 2
  %551 = tail call i8* @_Znam(i64 %550) #10, !noalias !82
  %552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %553 = bitcast i32** %552 to i8**
  store i8* %551, i8** %553, align 8, !alias.scope !82
  %554 = bitcast i8* %551 to i32*
  br label %560

555:                                              ; preds = %540
  %556 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %557 = bitcast %union.anon* %556 to i32*
  %558 = sext i32 %544 to i64
  %559 = shl nsw i64 %558, 2
  br label %560

560:                                              ; preds = %555, %548
  %561 = phi i64 [ %550, %548 ], [ %559, %555 ]
  %562 = phi i32* [ %554, %548 ], [ %557, %555 ]
  %563 = bitcast i32* %562 to i8*
  %564 = bitcast i32* %545 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %563, i8* align 4 %564, i64 %561, i1 false) #11
  %565 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %566 = bitcast %union.TfLitePtrUnion* %565 to float**
  %567 = load float*, float** %566, align 8
  br label %568

568:                                              ; preds = %538, %560
  %569 = phi i32 [ %544, %560 ], [ 0, %538 ]
  %570 = phi float* [ %567, %560 ], [ null, %538 ]
  %571 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %572 = icmp sgt i32 %534, 5
  br i1 %572, label %573, label %576

573:                                              ; preds = %568
  %574 = getelementptr inbounds %union.anon, %union.anon* %571, i64 0, i32 0
  %575 = load i32*, i32** %574, align 8
  br label %579

576:                                              ; preds = %568
  %577 = bitcast %union.anon* %571 to i32*
  %578 = icmp sgt i32 %534, 0
  br i1 %578, label %579, label %682

579:                                              ; preds = %576, %573
  %580 = phi i32* [ %575, %573 ], [ %577, %576 ]
  %581 = zext i32 %534 to i64
  %582 = icmp ult i32 %534, 8
  br i1 %582, label %668, label %583

583:                                              ; preds = %579
  %584 = and i64 %581, 4294967288
  %585 = add nsw i64 %584, -8
  %586 = lshr exact i64 %585, 3
  %587 = add nuw nsw i64 %586, 1
  %588 = and i64 %587, 3
  %589 = icmp ult i64 %585, 24
  br i1 %589, label %635, label %590

590:                                              ; preds = %583
  %591 = sub nsw i64 %587, %588
  br label %592

592:                                              ; preds = %592, %590
  %593 = phi i64 [ 0, %590 ], [ %632, %592 ]
  %594 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %630, %592 ]
  %595 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %590 ], [ %631, %592 ]
  %596 = phi i64 [ %591, %590 ], [ %633, %592 ]
  %597 = getelementptr inbounds i32, i32* %580, i64 %593
  %598 = bitcast i32* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 4
  %600 = getelementptr inbounds i32, i32* %597, i64 4
  %601 = bitcast i32* %600 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 4
  %603 = mul nsw <4 x i32> %599, %594
  %604 = mul nsw <4 x i32> %602, %595
  %605 = or i64 %593, 8
  %606 = getelementptr inbounds i32, i32* %580, i64 %605
  %607 = bitcast i32* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 4
  %609 = getelementptr inbounds i32, i32* %606, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 4
  %612 = mul nsw <4 x i32> %608, %603
  %613 = mul nsw <4 x i32> %611, %604
  %614 = or i64 %593, 16
  %615 = getelementptr inbounds i32, i32* %580, i64 %614
  %616 = bitcast i32* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4
  %618 = getelementptr inbounds i32, i32* %615, i64 4
  %619 = bitcast i32* %618 to <4 x i32>*
  %620 = load <4 x i32>, <4 x i32>* %619, align 4
  %621 = mul nsw <4 x i32> %617, %612
  %622 = mul nsw <4 x i32> %620, %613
  %623 = or i64 %593, 24
  %624 = getelementptr inbounds i32, i32* %580, i64 %623
  %625 = bitcast i32* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 4
  %627 = getelementptr inbounds i32, i32* %624, i64 4
  %628 = bitcast i32* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4
  %630 = mul nsw <4 x i32> %626, %621
  %631 = mul nsw <4 x i32> %629, %622
  %632 = add i64 %593, 32
  %633 = add i64 %596, -4
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %592, !llvm.loop !85

635:                                              ; preds = %592, %583
  %636 = phi <4 x i32> [ undef, %583 ], [ %630, %592 ]
  %637 = phi <4 x i32> [ undef, %583 ], [ %631, %592 ]
  %638 = phi i64 [ 0, %583 ], [ %632, %592 ]
  %639 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %630, %592 ]
  %640 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %583 ], [ %631, %592 ]
  %641 = icmp eq i64 %588, 0
  br i1 %641, label %658, label %642

642:                                              ; preds = %635, %642
  %643 = phi i64 [ %655, %642 ], [ %638, %635 ]
  %644 = phi <4 x i32> [ %653, %642 ], [ %639, %635 ]
  %645 = phi <4 x i32> [ %654, %642 ], [ %640, %635 ]
  %646 = phi i64 [ %656, %642 ], [ %588, %635 ]
  %647 = getelementptr inbounds i32, i32* %580, i64 %643
  %648 = bitcast i32* %647 to <4 x i32>*
  %649 = load <4 x i32>, <4 x i32>* %648, align 4
  %650 = getelementptr inbounds i32, i32* %647, i64 4
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4
  %653 = mul nsw <4 x i32> %649, %644
  %654 = mul nsw <4 x i32> %652, %645
  %655 = add i64 %643, 8
  %656 = add i64 %646, -1
  %657 = icmp eq i64 %656, 0
  br i1 %657, label %658, label %642, !llvm.loop !86

658:                                              ; preds = %642, %635
  %659 = phi <4 x i32> [ %636, %635 ], [ %653, %642 ]
  %660 = phi <4 x i32> [ %637, %635 ], [ %654, %642 ]
  %661 = mul <4 x i32> %660, %659
  %662 = shufflevector <4 x i32> %661, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %663 = mul <4 x i32> %661, %662
  %664 = shufflevector <4 x i32> %663, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %665 = mul <4 x i32> %663, %664
  %666 = extractelement <4 x i32> %665, i32 0
  %667 = icmp eq i64 %584, %581
  br i1 %667, label %679, label %668

668:                                              ; preds = %658, %579
  %669 = phi i64 [ 0, %579 ], [ %584, %658 ]
  %670 = phi i32 [ 1, %579 ], [ %666, %658 ]
  br label %671

671:                                              ; preds = %668, %671
  %672 = phi i64 [ %677, %671 ], [ %669, %668 ]
  %673 = phi i32 [ %676, %671 ], [ %670, %668 ]
  %674 = getelementptr inbounds i32, i32* %580, i64 %672
  %675 = load i32, i32* %674, align 4
  %676 = mul nsw i32 %675, %673
  %677 = add nuw nsw i64 %672, 1
  %678 = icmp eq i64 %677, %581
  br i1 %678, label %679, label %671, !llvm.loop !87

679:                                              ; preds = %671, %658
  %680 = phi i32 [ %666, %658 ], [ %676, %671 ]
  %681 = icmp sgt i32 %680, 0
  br i1 %681, label %682, label %724

682:                                              ; preds = %679, %576
  %683 = phi i32 [ %680, %679 ], [ 1, %576 ]
  %684 = zext i32 %683 to i64
  %685 = and i64 %684, 1
  %686 = icmp eq i32 %683, 1
  br i1 %686, label %712, label %687

687:                                              ; preds = %682
  %688 = sub nsw i64 %684, %685
  br label %689

689:                                              ; preds = %689, %687
  %690 = phi i64 [ 0, %687 ], [ %709, %689 ]
  %691 = phi i64 [ %688, %687 ], [ %710, %689 ]
  %692 = getelementptr inbounds i16, i16* %535, i64 %690
  %693 = load i16, i16* %692, align 2
  %694 = sext i16 %693 to i32
  %695 = sub nsw i32 %694, %14
  %696 = sitofp i32 %695 to double
  %697 = fmul double %17, %696
  %698 = fptrunc double %697 to float
  %699 = getelementptr inbounds float, float* %570, i64 %690
  store float %698, float* %699, align 4
  %700 = or i64 %690, 1
  %701 = getelementptr inbounds i16, i16* %535, i64 %700
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = sub nsw i32 %703, %14
  %705 = sitofp i32 %704 to double
  %706 = fmul double %17, %705
  %707 = fptrunc double %706 to float
  %708 = getelementptr inbounds float, float* %570, i64 %700
  store float %707, float* %708, align 4
  %709 = add nuw nsw i64 %690, 2
  %710 = add i64 %691, -2
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %689

712:                                              ; preds = %689, %682
  %713 = phi i64 [ 0, %682 ], [ %709, %689 ]
  %714 = icmp eq i64 %685, 0
  br i1 %714, label %724, label %715

715:                                              ; preds = %712
  %716 = getelementptr inbounds i16, i16* %535, i64 %713
  %717 = load i16, i16* %716, align 2
  %718 = sext i16 %717 to i32
  %719 = sub nsw i32 %718, %14
  %720 = sitofp i32 %719 to double
  %721 = fmul double %17, %720
  %722 = fptrunc double %721 to float
  %723 = getelementptr inbounds float, float* %570, i64 %713
  store float %722, float* %723, align 4
  br label %724

724:                                              ; preds = %715, %712, %679
  %725 = icmp sgt i32 %569, 5
  br i1 %725, label %726, label %732

726:                                              ; preds = %724
  %727 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %728 = load i32*, i32** %727, align 8
  %729 = icmp eq i32* %728, null
  br i1 %729, label %732, label %730

730:                                              ; preds = %726
  %731 = bitcast i32* %728 to i8*
  tail call void @_ZdaPv(i8* %731) #10
  br label %732

732:                                              ; preds = %724, %726, %730
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %536) #11
  br i1 %572, label %733, label %739

733:                                              ; preds = %732
  %734 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %735 = load i32*, i32** %734, align 8
  %736 = icmp eq i32* %735, null
  br i1 %736, label %739, label %737

737:                                              ; preds = %733
  %738 = bitcast i32* %735 to i8*
  tail call void @_ZdaPv(i8* %738) #10
  br label %739

739:                                              ; preds = %732, %733, %737
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %501) #11
  br label %1020

740:                                              ; preds = %4
  %741 = icmp eq %struct.TfLiteTensor* %2, null
  br i1 %741, label %742, label %745

742:                                              ; preds = %740
  %743 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %743) #11
  %744 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %744, align 8, !alias.scope !88
  br label %775

745:                                              ; preds = %740
  %746 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 1
  %747 = bitcast %union.TfLitePtrUnion* %746 to %"struct.Eigen::half"**
  %748 = load %"struct.Eigen::half"*, %"struct.Eigen::half"** %747, align 8
  %749 = bitcast %"struct.Eigen::half"* %748 to i8*
  %750 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %750) #11
  %751 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %2, i64 0, i32 2
  %752 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %751, align 8, !noalias !88
  %753 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 0
  %754 = load i32, i32* %753, align 4, !noalias !88
  %755 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %752, i64 0, i32 1, i64 0
  %756 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %754, i32* %756, align 8, !alias.scope !88
  %757 = icmp sgt i32 %754, 5
  br i1 %757, label %758, label %765

758:                                              ; preds = %745
  %759 = sext i32 %754 to i64
  %760 = shl nsw i64 %759, 2
  %761 = tail call i8* @_Znam(i64 %760) #10, !noalias !88
  %762 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %763 = bitcast i32** %762 to i8**
  store i8* %761, i8** %763, align 8, !alias.scope !88
  %764 = bitcast i8* %761 to i32*
  br label %770

765:                                              ; preds = %745
  %766 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %767 = bitcast %union.anon* %766 to i32*
  %768 = sext i32 %754 to i64
  %769 = shl nsw i64 %768, 2
  br label %770

770:                                              ; preds = %765, %758
  %771 = phi i64 [ %760, %758 ], [ %769, %765 ]
  %772 = phi i32* [ %764, %758 ], [ %767, %765 ]
  %773 = bitcast i32* %772 to i8*
  %774 = bitcast i32* %755 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %773, i8* align 4 %774, i64 %771, i1 false) #11
  br label %775

775:                                              ; preds = %742, %770
  %776 = phi i32 [ 0, %742 ], [ %754, %770 ]
  %777 = phi i8* [ %743, %742 ], [ %750, %770 ]
  %778 = phi i8* [ null, %742 ], [ %749, %770 ]
  %779 = phi %"struct.Eigen::half"* [ null, %742 ], [ %748, %770 ]
  %780 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %780) #11
  %781 = icmp eq %struct.TfLiteTensor* %3, null
  br i1 %781, label %782, label %784

782:                                              ; preds = %775
  %783 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %783, align 8, !alias.scope !91
  br label %813

784:                                              ; preds = %775
  %785 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 2
  %786 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %785, align 8, !noalias !91
  %787 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 0
  %788 = load i32, i32* %787, align 4, !noalias !91
  %789 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %786, i64 0, i32 1, i64 0
  %790 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %788, i32* %790, align 8, !alias.scope !91
  %791 = icmp sgt i32 %788, 5
  br i1 %791, label %792, label %799

792:                                              ; preds = %784
  %793 = sext i32 %788 to i64
  %794 = shl nsw i64 %793, 2
  %795 = tail call i8* @_Znam(i64 %794) #10, !noalias !91
  %796 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %797 = bitcast i32** %796 to i8**
  store i8* %795, i8** %797, align 8, !alias.scope !91
  %798 = bitcast i8* %795 to i32*
  br label %804

799:                                              ; preds = %784
  %800 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %801 = bitcast %union.anon* %800 to i32*
  %802 = sext i32 %788 to i64
  %803 = shl nsw i64 %802, 2
  br label %804

804:                                              ; preds = %799, %792
  %805 = phi i64 [ %794, %792 ], [ %803, %799 ]
  %806 = phi i32* [ %798, %792 ], [ %801, %799 ]
  %807 = bitcast i32* %806 to i8*
  %808 = bitcast i32* %789 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %807, i8* align 4 %808, i64 %805, i1 false) #11
  %809 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %3, i64 0, i32 1
  %810 = bitcast %union.TfLitePtrUnion* %809 to float**
  %811 = load float*, float** %810, align 8
  %812 = bitcast float* %811 to i8*
  br label %813

813:                                              ; preds = %782, %804
  %814 = phi i32 [ %788, %804 ], [ 0, %782 ]
  %815 = phi i8* [ %812, %804 ], [ null, %782 ]
  %816 = phi float* [ %811, %804 ], [ null, %782 ]
  %817 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %818 = icmp sgt i32 %776, 5
  br i1 %818, label %819, label %822

819:                                              ; preds = %813
  %820 = getelementptr inbounds %union.anon, %union.anon* %817, i64 0, i32 0
  %821 = load i32*, i32** %820, align 8
  br label %825

822:                                              ; preds = %813
  %823 = bitcast %union.anon* %817 to i32*
  %824 = icmp sgt i32 %776, 0
  br i1 %824, label %825, label %928

825:                                              ; preds = %822, %819
  %826 = phi i32* [ %821, %819 ], [ %823, %822 ]
  %827 = zext i32 %776 to i64
  %828 = icmp ult i32 %776, 8
  br i1 %828, label %914, label %829

829:                                              ; preds = %825
  %830 = and i64 %827, 4294967288
  %831 = add nsw i64 %830, -8
  %832 = lshr exact i64 %831, 3
  %833 = add nuw nsw i64 %832, 1
  %834 = and i64 %833, 3
  %835 = icmp ult i64 %831, 24
  br i1 %835, label %881, label %836

836:                                              ; preds = %829
  %837 = sub nsw i64 %833, %834
  br label %838

838:                                              ; preds = %838, %836
  %839 = phi i64 [ 0, %836 ], [ %878, %838 ]
  %840 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %876, %838 ]
  %841 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %836 ], [ %877, %838 ]
  %842 = phi i64 [ %837, %836 ], [ %879, %838 ]
  %843 = getelementptr inbounds i32, i32* %826, i64 %839
  %844 = bitcast i32* %843 to <4 x i32>*
  %845 = load <4 x i32>, <4 x i32>* %844, align 4
  %846 = getelementptr inbounds i32, i32* %843, i64 4
  %847 = bitcast i32* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 4
  %849 = mul nsw <4 x i32> %845, %840
  %850 = mul nsw <4 x i32> %848, %841
  %851 = or i64 %839, 8
  %852 = getelementptr inbounds i32, i32* %826, i64 %851
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4
  %855 = getelementptr inbounds i32, i32* %852, i64 4
  %856 = bitcast i32* %855 to <4 x i32>*
  %857 = load <4 x i32>, <4 x i32>* %856, align 4
  %858 = mul nsw <4 x i32> %854, %849
  %859 = mul nsw <4 x i32> %857, %850
  %860 = or i64 %839, 16
  %861 = getelementptr inbounds i32, i32* %826, i64 %860
  %862 = bitcast i32* %861 to <4 x i32>*
  %863 = load <4 x i32>, <4 x i32>* %862, align 4
  %864 = getelementptr inbounds i32, i32* %861, i64 4
  %865 = bitcast i32* %864 to <4 x i32>*
  %866 = load <4 x i32>, <4 x i32>* %865, align 4
  %867 = mul nsw <4 x i32> %863, %858
  %868 = mul nsw <4 x i32> %866, %859
  %869 = or i64 %839, 24
  %870 = getelementptr inbounds i32, i32* %826, i64 %869
  %871 = bitcast i32* %870 to <4 x i32>*
  %872 = load <4 x i32>, <4 x i32>* %871, align 4
  %873 = getelementptr inbounds i32, i32* %870, i64 4
  %874 = bitcast i32* %873 to <4 x i32>*
  %875 = load <4 x i32>, <4 x i32>* %874, align 4
  %876 = mul nsw <4 x i32> %872, %867
  %877 = mul nsw <4 x i32> %875, %868
  %878 = add i64 %839, 32
  %879 = add i64 %842, -4
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %838, !llvm.loop !94

881:                                              ; preds = %838, %829
  %882 = phi <4 x i32> [ undef, %829 ], [ %876, %838 ]
  %883 = phi <4 x i32> [ undef, %829 ], [ %877, %838 ]
  %884 = phi i64 [ 0, %829 ], [ %878, %838 ]
  %885 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %876, %838 ]
  %886 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %829 ], [ %877, %838 ]
  %887 = icmp eq i64 %834, 0
  br i1 %887, label %904, label %888

888:                                              ; preds = %881, %888
  %889 = phi i64 [ %901, %888 ], [ %884, %881 ]
  %890 = phi <4 x i32> [ %899, %888 ], [ %885, %881 ]
  %891 = phi <4 x i32> [ %900, %888 ], [ %886, %881 ]
  %892 = phi i64 [ %902, %888 ], [ %834, %881 ]
  %893 = getelementptr inbounds i32, i32* %826, i64 %889
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 4
  %896 = getelementptr inbounds i32, i32* %893, i64 4
  %897 = bitcast i32* %896 to <4 x i32>*
  %898 = load <4 x i32>, <4 x i32>* %897, align 4
  %899 = mul nsw <4 x i32> %895, %890
  %900 = mul nsw <4 x i32> %898, %891
  %901 = add i64 %889, 8
  %902 = add i64 %892, -1
  %903 = icmp eq i64 %902, 0
  br i1 %903, label %904, label %888, !llvm.loop !95

904:                                              ; preds = %888, %881
  %905 = phi <4 x i32> [ %882, %881 ], [ %899, %888 ]
  %906 = phi <4 x i32> [ %883, %881 ], [ %900, %888 ]
  %907 = mul <4 x i32> %906, %905
  %908 = shufflevector <4 x i32> %907, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %909 = mul <4 x i32> %907, %908
  %910 = shufflevector <4 x i32> %909, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %911 = mul <4 x i32> %909, %910
  %912 = extractelement <4 x i32> %911, i32 0
  %913 = icmp eq i64 %830, %827
  br i1 %913, label %925, label %914

914:                                              ; preds = %904, %825
  %915 = phi i64 [ 0, %825 ], [ %830, %904 ]
  %916 = phi i32 [ 1, %825 ], [ %912, %904 ]
  br label %917

917:                                              ; preds = %914, %917
  %918 = phi i64 [ %923, %917 ], [ %915, %914 ]
  %919 = phi i32 [ %922, %917 ], [ %916, %914 ]
  %920 = getelementptr inbounds i32, i32* %826, i64 %918
  %921 = load i32, i32* %920, align 4
  %922 = mul nsw i32 %921, %919
  %923 = add nuw nsw i64 %918, 1
  %924 = icmp eq i64 %923, %827
  br i1 %924, label %925, label %917, !llvm.loop !96

925:                                              ; preds = %917, %904
  %926 = phi i32 [ %912, %904 ], [ %922, %917 ]
  %927 = icmp sgt i32 %926, 0
  br i1 %927, label %928, label %1001

928:                                              ; preds = %925, %822
  %929 = phi i32 [ %926, %925 ], [ 1, %822 ]
  %930 = zext i32 %929 to i64
  %931 = icmp ult i32 %929, 4
  br i1 %931, label %971, label %932

932:                                              ; preds = %928
  %933 = getelementptr float, float* %816, i64 %930
  %934 = bitcast float* %933 to i8*
  %935 = getelementptr %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %930
  %936 = bitcast %"struct.Eigen::half"* %935 to i8*
  %937 = icmp ult i8* %815, %936
  %938 = icmp ult i8* %778, %934
  %939 = and i1 %937, %938
  br i1 %939, label %971, label %940

940:                                              ; preds = %932
  %941 = and i64 %930, 4294967292
  br label %942

942:                                              ; preds = %942, %940
  %943 = phi i64 [ 0, %940 ], [ %967, %942 ]
  %944 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %943, i32 0, i32 0, i32 0
  %945 = bitcast i16* %944 to <4 x i16>*
  %946 = load <4 x i16>, <4 x i16>* %945, align 2, !alias.scope !97
  %947 = zext <4 x i16> %946 to <4 x i32>
  %948 = shl nuw nsw <4 x i32> %947, <i32 13, i32 13, i32 13, i32 13>
  %949 = and <4 x i32> %948, <i32 268427264, i32 268427264, i32 268427264, i32 268427264>
  %950 = and <4 x i32> %948, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %951 = icmp ne <4 x i32> %950, <i32 260046848, i32 260046848, i32 260046848, i32 260046848>
  %952 = add nuw nsw <4 x i32> %949, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %953 = icmp eq <4 x i32> %950, zeroinitializer
  %954 = add nuw nsw <4 x i32> %949, <i32 947912704, i32 947912704, i32 947912704, i32 947912704>
  %955 = bitcast <4 x i32> %954 to <4 x float>
  %956 = fadd <4 x float> %955, <float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000, float 0xBF10000000000000>
  %957 = bitcast <4 x float> %956 to <4 x i32>
  %958 = or <4 x i32> %948, <i32 1879048192, i32 1879048192, i32 1879048192, i32 1879048192>
  %959 = xor <4 x i1> %953, %951
  %960 = select <4 x i1> %953, <4 x i32> %957, <4 x i32> %958
  %961 = select <4 x i1> %959, <4 x i32> %952, <4 x i32> %960
  %962 = shl nuw <4 x i32> %947, <i32 16, i32 16, i32 16, i32 16>
  %963 = and <4 x i32> %962, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %964 = or <4 x i32> %961, %963
  %965 = getelementptr inbounds float, float* %816, i64 %943
  %966 = bitcast float* %965 to <4 x i32>*
  store <4 x i32> %964, <4 x i32>* %966, align 4, !alias.scope !100, !noalias !97
  %967 = add i64 %943, 4
  %968 = icmp eq i64 %967, %941
  br i1 %968, label %969, label %942, !llvm.loop !102

969:                                              ; preds = %942
  %970 = icmp eq i64 %941, %930
  br i1 %970, label %1001, label %971

971:                                              ; preds = %969, %932, %928
  %972 = phi i64 [ 0, %932 ], [ 0, %928 ], [ %941, %969 ]
  br label %973

973:                                              ; preds = %971, %992
  %974 = phi i64 [ %999, %992 ], [ %972, %971 ]
  %975 = getelementptr inbounds %"struct.Eigen::half", %"struct.Eigen::half"* %779, i64 %974, i32 0, i32 0, i32 0
  %976 = load i16, i16* %975, align 2
  %977 = zext i16 %976 to i32
  %978 = shl nuw nsw i32 %977, 13
  %979 = and i32 %978, 268427264
  %980 = and i32 %978, 260046848
  %981 = icmp eq i32 %980, 260046848
  br i1 %981, label %982, label %984

982:                                              ; preds = %973
  %983 = or i32 %978, 1879048192
  br label %992

984:                                              ; preds = %973
  %985 = add nuw nsw i32 %979, 939524096
  %986 = icmp eq i32 %980, 0
  br i1 %986, label %987, label %992

987:                                              ; preds = %984
  %988 = add nuw nsw i32 %979, 947912704
  %989 = bitcast i32 %988 to float
  %990 = fadd float %989, 0xBF10000000000000
  %991 = bitcast float %990 to i32
  br label %992

992:                                              ; preds = %987, %984, %982
  %993 = phi i32 [ %983, %982 ], [ %991, %987 ], [ %985, %984 ]
  %994 = shl nuw i32 %977, 16
  %995 = and i32 %994, -2147483648
  %996 = or i32 %993, %995
  %997 = getelementptr inbounds float, float* %816, i64 %974
  %998 = bitcast float* %997 to i32*
  store i32 %996, i32* %998, align 4
  %999 = add nuw nsw i64 %974, 1
  %1000 = icmp eq i64 %999, %930
  br i1 %1000, label %1001, label %973, !llvm.loop !103

1001:                                             ; preds = %992, %969, %925
  %1002 = icmp sgt i32 %814, 5
  br i1 %1002, label %1003, label %1009

1003:                                             ; preds = %1001
  %1004 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %1005 = load i32*, i32** %1004, align 8
  %1006 = icmp eq i32* %1005, null
  br i1 %1006, label %1009, label %1007

1007:                                             ; preds = %1003
  %1008 = bitcast i32* %1005 to i8*
  tail call void @_ZdaPv(i8* %1008) #10
  br label %1009

1009:                                             ; preds = %1001, %1003, %1007
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %780) #11
  br i1 %818, label %1010, label %1016

1010:                                             ; preds = %1009
  %1011 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %1012 = load i32*, i32** %1011, align 8
  %1013 = icmp eq i32* %1012, null
  br i1 %1013, label %1016, label %1014

1014:                                             ; preds = %1010
  %1015 = bitcast i32* %1012 to i8*
  tail call void @_ZdaPv(i8* %1015) #10
  br label %1016

1016:                                             ; preds = %1009, %1010, %1014
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %777) #11
  br label %1020

1017:                                             ; preds = %4
  %1018 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1019 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1018, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %1019(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i32 %19) #11
  br label %1020

1020:                                             ; preds = %259, %499, %739, %1016, %1017
  %1021 = phi i32 [ 1, %1017 ], [ 0, %1016 ], [ 0, %739 ], [ 0, %499 ], [ 0, %259 ]
  ret i32 %1021
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !4}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !4}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!18 = distinct !{!18, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!21 = distinct !{!21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.isvectorized", i32 1}
!24 = distinct !{!24, !4}
!25 = distinct !{!25, !26, !23}
!26 = !{!"llvm.loop.unroll.runtime.disable"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!29 = distinct !{!29, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!32 = distinct !{!32, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!33 = distinct !{!33, !23}
!34 = distinct !{!34, !4}
!35 = distinct !{!35, !26, !23}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!38 = distinct !{!38, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!41 = distinct !{!41, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!42 = distinct !{!42, !23}
!43 = distinct !{!43, !4}
!44 = distinct !{!44, !26, !23}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!47 = distinct !{!47, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!50 = distinct !{!50, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!51 = distinct !{!51, !23}
!52 = distinct !{!52, !4}
!53 = distinct !{!53, !26, !23}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !23}
!60 = distinct !{!60, !23}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!63 = distinct !{!63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!66 = distinct !{!66, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!67 = distinct !{!67, !23}
!68 = distinct !{!68, !4}
!69 = distinct !{!69, !26, !23}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!72 = distinct !{!72, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!75 = distinct !{!75, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!76 = distinct !{!76, !23}
!77 = distinct !{!77, !4}
!78 = distinct !{!78, !26, !23}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!81 = distinct !{!81, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!84 = distinct !{!84, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!85 = distinct !{!85, !23}
!86 = distinct !{!86, !4}
!87 = distinct !{!87, !26, !23}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!90 = distinct !{!90, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!93 = distinct !{!93, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!94 = distinct !{!94, !23}
!95 = distinct !{!95, !4}
!96 = distinct !{!96, !26, !23}
!97 = !{!98}
!98 = distinct !{!98, !99}
!99 = distinct !{!99, !"LVerDomain"}
!100 = !{!101}
!101 = distinct !{!101, !99}
!102 = distinct !{!102, !23}
!103 = distinct !{!103, !23}
