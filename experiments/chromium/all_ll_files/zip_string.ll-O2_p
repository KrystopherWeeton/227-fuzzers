; ModuleID = '../../third_party/libzip/src/lib/zip_string.c'
source_filename = "../../third_party/libzip/src/lib/zip_string.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

@_zip_string_get.empty = internal constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_string_crc32(%struct.zip_string* readonly) local_unnamed_addr #0 {
  %2 = tail call i64 @Cr_z_crc32(i64 0, i8* null, i32 0) #8
  %3 = icmp eq %struct.zip_string* %0, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = and i64 %2, 4294967295
  %6 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = tail call i64 @Cr_z_crc32(i64 %5, i8* %7, i32 %10) #8
  br label %12

12:                                               ; preds = %1, %4
  %13 = phi i64 [ %11, %4 ], [ %2, %1 ]
  %14 = trunc i64 %13 to i32
  ret i32 %14
}

declare i64 @Cr_z_crc32(i64, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_zip_string_equal(%struct.zip_string* readonly, %struct.zip_string* readonly) local_unnamed_addr #2 {
  %3 = icmp eq %struct.zip_string* %0, null
  %4 = icmp eq %struct.zip_string* %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = icmp eq %struct.zip_string* %0, %1
  br label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %1, i64 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = icmp eq i16 %10, %12
  br i1 %13, label %14, label %22

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %1, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = zext i16 %10 to i64
  %20 = tail call i32 @bcmp(i8* %16, i8* %18, i64 %19)
  %21 = icmp eq i32 %20, 0
  br label %22

22:                                               ; preds = %8, %14, %6
  %23 = phi i1 [ %7, %6 ], [ %21, %14 ], [ false, %8 ]
  %24 = zext i1 %23 to i32
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_zip_string_free(%struct.zip_string*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.zip_string* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  tail call void @free(i8* %5) #8
  %6 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  tail call void @free(i8* %7) #8
  %8 = bitcast %struct.zip_string* %0 to i8*
  tail call void @free(i8* %8) #8
  br label %9

9:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_zip_string_get(%struct.zip_string*, i32*, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp eq %struct.zip_string* %0, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %4
  %7 = icmp eq i32* %1, null
  br i1 %7, label %57, label %8

8:                                                ; preds = %6
  store i32 0, i32* %1, align 4
  br label %57

9:                                                ; preds = %4
  %10 = and i32 %2, 64
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %12
  %17 = tail call i32 @_zip_guess_encoding(%struct.zip_string* nonnull %0, i32 0) #8
  %18 = load i32, i32* %13, align 4
  br label %19

19:                                               ; preds = %16, %12
  %20 = phi i32 [ %18, %16 ], [ %14, %12 ]
  %21 = trunc i32 %2 to i8
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %19
  %24 = add i32 %20, -1
  %25 = icmp ult i32 %24, 2
  br i1 %25, label %48, label %28

26:                                               ; preds = %19
  %27 = icmp eq i32 %20, 4
  br i1 %27, label %28, label %48

28:                                               ; preds = %23, %26
  %29 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 3
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %41

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 1
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 4
  %39 = tail call i8* @_zip_cp437_to_utf8(i8* %34, i32 %37, i32* %38, %struct.zip_error* %3) #8
  store i8* %39, i8** %29, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %57, label %41

41:                                               ; preds = %32, %28
  %42 = phi i8* [ %39, %32 ], [ %30, %28 ]
  %43 = icmp eq i32* %1, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 4
  %46 = load i32, i32* %45, align 8
  store i32 %46, i32* %1, align 4
  %47 = load i8*, i8** %29, align 8
  br label %57

48:                                               ; preds = %23, %26, %9
  %49 = icmp eq i32* %1, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 1
  %52 = load i16, i16* %51, align 8
  %53 = zext i16 %52 to i32
  store i32 %53, i32* %1, align 4
  br label %54

54:                                               ; preds = %48, %50
  %55 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 0
  %56 = load i8*, i8** %55, align 8
  br label %57

57:                                               ; preds = %44, %41, %32, %8, %6, %54
  %58 = phi i8* [ %56, %54 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_zip_string_get.empty, i64 0, i64 0), %6 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_zip_string_get.empty, i64 0, i64 0), %8 ], [ null, %32 ], [ %42, %41 ], [ %47, %44 ]
  ret i8* %58
}

declare i32 @_zip_guess_encoding(%struct.zip_string*, i32) local_unnamed_addr #1

declare i8* @_zip_cp437_to_utf8(i8*, i32, i32*, %struct.zip_error*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @_zip_string_length(%struct.zip_string* readonly) local_unnamed_addr #4 {
  %2 = icmp eq %struct.zip_string* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %0, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  br label %6

6:                                                ; preds = %1, %3
  %7 = phi i16 [ %5, %3 ], [ 0, %1 ]
  ret i16 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip_string* @_zip_string_new(i8* nocapture readonly, i16 zeroext, i32, %struct.zip_error*) local_unnamed_addr #0 {
  %5 = icmp eq i16 %1, 0
  br i1 %5, label %38, label %6

6:                                                ; preds = %4
  %7 = and i32 %2, 6144
  switch i32 %7, label %10 [
    i32 0, label %11
    i32 2048, label %8
    i32 4096, label %9
  ]

8:                                                ; preds = %6
  br label %11

9:                                                ; preds = %6
  br label %11

10:                                               ; preds = %6
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #8
  br label %38

11:                                               ; preds = %6, %9, %8
  %12 = phi i32 [ 4, %9 ], [ 2, %8 ], [ %7, %6 ]
  %13 = tail call noalias i8* @malloc(i64 32) #8
  %14 = bitcast i8* %13 to %struct.zip_string*
  %15 = icmp eq i8* %13, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  tail call void @zip_error_set(%struct.zip_error* %3, i32 14, i32 0) #8
  br label %38

17:                                               ; preds = %11
  %18 = zext i16 %1 to i64
  %19 = add nuw nsw i64 %18, 1
  %20 = tail call noalias i8* @malloc(i64 %19) #8
  %21 = bitcast i8* %13 to i8**
  store i8* %20, i8** %21, align 8
  %22 = icmp eq i8* %20, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %17
  tail call void @free(i8* nonnull %13) #8
  br label %38

24:                                               ; preds = %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %20, i8* align 1 %0, i64 %18, i1 false)
  %25 = getelementptr inbounds i8, i8* %20, i64 %18
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %13, i64 8
  %27 = bitcast i8* %26 to i16*
  store i16 %1, i16* %27, align 8
  %28 = getelementptr inbounds i8, i8* %13, i64 12
  %29 = getelementptr inbounds i8, i8* %13, i64 16
  %30 = bitcast i8* %29 to i8**
  %31 = icmp eq i32 %12, 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %28, i8 0, i64 16, i1 false)
  br i1 %31, label %38, label %32

32:                                               ; preds = %24
  %33 = tail call i32 @_zip_guess_encoding(%struct.zip_string* nonnull %14, i32 %12) #8
  %34 = icmp eq i32 %33, 5
  br i1 %34, label %35, label %38

35:                                               ; preds = %32
  %36 = load i8*, i8** %21, align 8
  tail call void @free(i8* %36) #8
  %37 = load i8*, i8** %30, align 8
  tail call void @free(i8* %37) #8
  tail call void @free(i8* nonnull %13) #8
  tail call void @zip_error_set(%struct.zip_error* %3, i32 18, i32 0) #8
  br label %38

38:                                               ; preds = %32, %24, %4, %35, %23, %16, %10
  %39 = phi %struct.zip_string* [ null, %10 ], [ null, %16 ], [ null, %23 ], [ null, %35 ], [ null, %4 ], [ %14, %24 ], [ %14, %32 ]
  ret %struct.zip_string* %39
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_string_write(%struct.zip*, %struct.zip_string* readonly) local_unnamed_addr #0 {
  %3 = icmp eq %struct.zip_string* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %1, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.zip_string, %struct.zip_string* %1, i64 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i64
  %10 = tail call i32 @_zip_write(%struct.zip* %0, i8* %6, i64 %9) #8
  br label %11

11:                                               ; preds = %2, %4
  %12 = phi i32 [ %10, %4 ], [ 0, %2 ]
  ret i32 %12
}

declare i32 @_zip_write(%struct.zip*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
