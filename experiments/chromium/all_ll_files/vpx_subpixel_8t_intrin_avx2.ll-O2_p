; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/vpx_subpixel_8t_intrin_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_horiz_avx2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %168, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %162

27:                                               ; preds = %25
  %28 = bitcast i16* %13 to <2 x i64>*
  %29 = shl i64 %1, 1
  %30 = shl i64 %3, 1
  %31 = icmp ugt i32 %10, 1
  %32 = and i32 %10, 1
  br label %33

33:                                               ; preds = %27, %155
  %34 = phi i8* [ %0, %27 ], [ %156, %155 ]
  %35 = phi i8* [ %2, %27 ], [ %157, %155 ]
  %36 = phi i32 [ %9, %27 ], [ %158, %155 ]
  %37 = load <2 x i64>, <2 x i64>* %28, align 16
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %39 = bitcast <4 x i64> %38 to <32 x i8>
  %40 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %41 = bitcast <32 x i8> %40 to <4 x i64>
  %42 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %43 = bitcast <32 x i8> %42 to <4 x i64>
  %44 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %45 = bitcast <32 x i8> %44 to <4 x i64>
  %46 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %47 = bitcast <32 x i8> %46 to <4 x i64>
  br i1 %31, label %48, label %107

48:                                               ; preds = %33, %48
  %49 = phi i8* [ %97, %48 ], [ %34, %33 ]
  %50 = phi i8* [ %104, %48 ], [ %35, %33 ]
  %51 = phi i32 [ %105, %48 ], [ %10, %33 ]
  %52 = getelementptr inbounds i8, i8* %49, i64 -3
  %53 = bitcast i8* %52 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 1
  %55 = getelementptr inbounds i8, i8* %49, i64 %1
  %56 = getelementptr inbounds i8, i8* %55, i64 -3
  %57 = bitcast i8* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 1
  %59 = shufflevector <2 x i64> %54, <2 x i64> %58, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = bitcast <4 x i64> %59 to <32 x i8>
  %61 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %62 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %63 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %64 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %65 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %61, <32 x i8> %40) #6
  %66 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %62, <32 x i8> %42) #6
  %67 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %63, <32 x i8> %44) #6
  %68 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %64, <32 x i8> %46) #6
  %69 = add <16 x i16> %68, %66
  %70 = add <16 x i16> %65, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %71 = add <16 x i16> %70, %67
  %72 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %71, <16 x i16> %69) #6
  %73 = ashr <16 x i16> %72, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %74 = getelementptr inbounds i8, i8* %49, i64 5
  %75 = bitcast i8* %74 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 1
  %77 = getelementptr inbounds i8, i8* %55, i64 5
  %78 = bitcast i8* %77 to <2 x i64>*
  %79 = load <2 x i64>, <2 x i64>* %78, align 1
  %80 = shufflevector <2 x i64> %76, <2 x i64> %79, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %81 = bitcast <4 x i64> %80 to <32 x i8>
  %82 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %83 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %84 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %85 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %86 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %82, <32 x i8> %40) #6
  %87 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %83, <32 x i8> %42) #6
  %88 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %84, <32 x i8> %44) #6
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %85, <32 x i8> %46) #6
  %90 = add <16 x i16> %89, %87
  %91 = add <16 x i16> %86, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %92 = add <16 x i16> %91, %88
  %93 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %92, <16 x i16> %90) #6
  %94 = ashr <16 x i16> %93, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %95 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %73, <16 x i16> %94) #6
  %96 = bitcast <32 x i8> %95 to <4 x i64>
  %97 = getelementptr inbounds i8, i8* %49, i64 %29
  %98 = shufflevector <4 x i64> %96, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %99 = bitcast <32 x i8> %95 to <8 x i32>
  %100 = shufflevector <8 x i32> %99, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %101 = bitcast i8* %50 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %101, align 16
  %102 = getelementptr inbounds i8, i8* %50, i64 %3
  %103 = bitcast i8* %102 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %103, align 16
  %104 = getelementptr inbounds i8, i8* %50, i64 %30
  %105 = add i32 %51, -2
  %106 = icmp ugt i32 %105, 1
  br i1 %106, label %48, label %107

107:                                              ; preds = %48, %33
  %108 = phi i32 [ %10, %33 ], [ %32, %48 ]
  %109 = phi i8* [ %35, %33 ], [ %104, %48 ]
  %110 = phi i8* [ %34, %33 ], [ %97, %48 ]
  %111 = icmp eq i32 %108, 1
  br i1 %111, label %112, label %155

112:                                              ; preds = %107
  %113 = getelementptr inbounds i8, i8* %110, i64 -3
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1
  %116 = shufflevector <16 x i8> %115, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %117 = shufflevector <16 x i8> %115, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %118 = shufflevector <16 x i8> %115, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %119 = shufflevector <16 x i8> %115, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %120 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %121 = bitcast <2 x i64> %120 to <16 x i8>
  %122 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %116, <16 x i8> %121) #6
  %123 = shufflevector <4 x i64> %43, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %124 = bitcast <2 x i64> %123 to <16 x i8>
  %125 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %117, <16 x i8> %124) #6
  %126 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %127 = bitcast <2 x i64> %126 to <16 x i8>
  %128 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %118, <16 x i8> %127) #6
  %129 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = bitcast <2 x i64> %129 to <16 x i8>
  %131 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %119, <16 x i8> %130) #6
  %132 = add <8 x i16> %131, %125
  %133 = add <8 x i16> %122, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %134 = add <8 x i16> %133, %128
  %135 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %134, <8 x i16> %132) #6
  %136 = ashr <8 x i16> %135, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %137 = getelementptr inbounds i8, i8* %110, i64 5
  %138 = bitcast i8* %137 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %141 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %142 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %143 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %144 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %140, <16 x i8> %121) #6
  %145 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %141, <16 x i8> %124) #6
  %146 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %142, <16 x i8> %127) #6
  %147 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %143, <16 x i8> %130) #6
  %148 = add <8 x i16> %147, %145
  %149 = add <8 x i16> %144, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %150 = add <8 x i16> %149, %146
  %151 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %150, <8 x i16> %148) #6
  %152 = ashr <8 x i16> %151, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %153 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %136, <8 x i16> %152) #6
  %154 = bitcast i8* %109 to <16 x i8>*
  store <16 x i8> %153, <16 x i8>* %154, align 16
  br label %155

155:                                              ; preds = %107, %112
  %156 = getelementptr inbounds i8, i8* %34, i64 16
  %157 = getelementptr inbounds i8, i8* %35, i64 16
  %158 = add nsw i32 %36, -16
  %159 = icmp sgt i32 %158, 15
  br i1 %159, label %33, label %160

160:                                              ; preds = %155
  %161 = and i32 %9, 15
  br label %162

162:                                              ; preds = %160, %25
  %163 = phi i32 [ %9, %25 ], [ %161, %160 ]
  %164 = phi i8* [ %2, %25 ], [ %157, %160 ]
  %165 = phi i8* [ %0, %25 ], [ %156, %160 ]
  switch i32 %163, label %431 [
    i32 8, label %166
    i32 4, label %167
  ]

166:                                              ; preds = %162
  tail call void @vpx_filter_block1d8_h8_intrin_ssse3(i8* %165, i64 %1, i8* %164, i64 %3, i32 %10, i16* %13) #6
  br label %431

167:                                              ; preds = %162
  tail call void @vpx_filter_block1d4_h8_intrin_ssse3(i8* %165, i64 %1, i8* %164, i64 %3, i32 %10, i16* %13) #6
  br label %431

168:                                              ; preds = %11
  %169 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %172 = load i16, i16* %171, align 2
  %173 = or i16 %172, %170
  %174 = icmp eq i16 %173, 0
  %175 = icmp sgt i32 %9, 15
  br i1 %174, label %183, label %176

176:                                              ; preds = %168
  br i1 %175, label %177, label %270

177:                                              ; preds = %176
  %178 = shl i64 %1, 1
  %179 = shl i64 %3, 1
  %180 = bitcast i16* %13 to <8 x i16>*
  %181 = icmp sgt i32 %10, 1
  %182 = and i32 %10, 1
  br label %184

183:                                              ; preds = %168
  br i1 %175, label %415, label %425

184:                                              ; preds = %177, %263
  %185 = phi i8* [ %0, %177 ], [ %264, %263 ]
  %186 = phi i8* [ %2, %177 ], [ %265, %263 ]
  %187 = phi i32 [ %9, %177 ], [ %266, %263 ]
  %188 = getelementptr inbounds i8, i8* %185, i64 -1
  %189 = load <8 x i16>, <8 x i16>* %180, align 1
  %190 = ashr <8 x i16> %189, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %191 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %190, <8 x i16> %190) #6
  %192 = bitcast <16 x i8> %191 to <2 x i64>
  %193 = shufflevector <2 x i64> %192, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %194 = bitcast <4 x i64> %193 to <32 x i8>
  %195 = shufflevector <32 x i8> %194, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %196 = shufflevector <32 x i8> %194, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  br i1 %181, label %197, label %242

197:                                              ; preds = %184, %197
  %198 = phi i32 [ %240, %197 ], [ %10, %184 ]
  %199 = phi i8* [ %238, %197 ], [ %188, %184 ]
  %200 = phi i8* [ %239, %197 ], [ %186, %184 ]
  %201 = getelementptr inbounds i8, i8* %199, i64 %1
  %202 = bitcast i8* %199 to <2 x i64>*
  %203 = load <2 x i64>, <2 x i64>* %202, align 1
  %204 = bitcast i8* %201 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 1
  %206 = shufflevector <2 x i64> %203, <2 x i64> %205, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %207 = bitcast <4 x i64> %206 to <32 x i8>
  %208 = shufflevector <32 x i8> %207, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %209 = shufflevector <32 x i8> %207, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %210 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %208, <32 x i8> %195) #6
  %211 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %209, <32 x i8> %196) #6
  %212 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %210, <16 x i16> %211) #6
  %213 = getelementptr inbounds i8, i8* %199, i64 8
  %214 = getelementptr inbounds i8, i8* %201, i64 8
  %215 = bitcast i8* %213 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 1
  %217 = bitcast i8* %214 to <2 x i64>*
  %218 = load <2 x i64>, <2 x i64>* %217, align 1
  %219 = shufflevector <2 x i64> %216, <2 x i64> %218, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %220 = bitcast <4 x i64> %219 to <32 x i8>
  %221 = shufflevector <32 x i8> %220, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %222 = shufflevector <32 x i8> %220, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %223 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %221, <32 x i8> %195) #6
  %224 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %222, <32 x i8> %196) #6
  %225 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %223, <16 x i16> %224) #6
  %226 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %212, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %227 = ashr <16 x i16> %226, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %228 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %225, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %229 = ashr <16 x i16> %228, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %230 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %227, <16 x i16> %229) #6
  %231 = bitcast <32 x i8> %230 to <4 x i64>
  %232 = bitcast i8* %200 to <2 x i64>*
  %233 = getelementptr inbounds i8, i8* %200, i64 %3
  %234 = shufflevector <4 x i64> %231, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %234, <2 x i64>* %232, align 16
  %235 = bitcast <32 x i8> %230 to <8 x i32>
  %236 = shufflevector <8 x i32> %235, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %237 = bitcast i8* %233 to <4 x i32>*
  store <4 x i32> %236, <4 x i32>* %237, align 16
  %238 = getelementptr inbounds i8, i8* %199, i64 %178
  %239 = getelementptr inbounds i8, i8* %200, i64 %179
  %240 = add nsw i32 %198, -2
  %241 = icmp sgt i32 %240, 1
  br i1 %241, label %197, label %242

242:                                              ; preds = %197, %184
  %243 = phi i8* [ %186, %184 ], [ %239, %197 ]
  %244 = phi i8* [ %188, %184 ], [ %238, %197 ]
  %245 = phi i32 [ %10, %184 ], [ %182, %197 ]
  %246 = icmp eq i32 %245, 1
  br i1 %246, label %247, label %263

247:                                              ; preds = %242
  %248 = bitcast i8* %244 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 1
  %250 = shufflevector <4 x i64> %249, <4 x i64> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 2>
  %251 = bitcast <4 x i64> %250 to <32 x i8>
  %252 = shufflevector <32 x i8> %251, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %253 = shufflevector <32 x i8> %251, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %254 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %252, <32 x i8> %195) #6
  %255 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %253, <32 x i8> %196) #6
  %256 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %254, <16 x i16> %255) #6
  %257 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %256, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %258 = ashr <16 x i16> %257, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %259 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %258, <16 x i16> undef) #6
  %260 = bitcast <32 x i8> %259 to <4 x i64>
  %261 = bitcast i8* %243 to <2 x i64>*
  %262 = shufflevector <4 x i64> %260, <4 x i64> undef, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %262, <2 x i64>* %261, align 16
  br label %263

263:                                              ; preds = %242, %247
  %264 = getelementptr inbounds i8, i8* %185, i64 16
  %265 = getelementptr inbounds i8, i8* %186, i64 16
  %266 = add nsw i32 %187, -16
  %267 = icmp sgt i32 %266, 15
  br i1 %267, label %184, label %268

268:                                              ; preds = %263
  %269 = and i32 %9, 15
  br label %270

270:                                              ; preds = %268, %176
  %271 = phi i32 [ %9, %176 ], [ %269, %268 ]
  %272 = phi i8* [ %2, %176 ], [ %265, %268 ]
  %273 = phi i8* [ %0, %176 ], [ %264, %268 ]
  switch i32 %271, label %431 [
    i32 8, label %274
    i32 4, label %347
  ]

274:                                              ; preds = %270
  %275 = shl i64 %1, 1
  %276 = shl i64 %3, 1
  %277 = getelementptr inbounds i8, i8* %273, i64 -1
  %278 = bitcast i16* %13 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = ashr <8 x i16> %279, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %281 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %280, <8 x i16> %280) #6
  %282 = bitcast <16 x i8> %281 to <2 x i64>
  %283 = shufflevector <2 x i64> %282, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %284 = bitcast <4 x i64> %283 to <32 x i8>
  %285 = shufflevector <32 x i8> %284, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %286 = bitcast <32 x i8> %285 to <4 x i64>
  %287 = shufflevector <32 x i8> %284, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %288 = bitcast <32 x i8> %287 to <4 x i64>
  %289 = icmp sgt i32 %10, 1
  br i1 %289, label %290, label %324

290:                                              ; preds = %274, %290
  %291 = phi i8* [ %318, %290 ], [ %277, %274 ]
  %292 = phi i8* [ %319, %290 ], [ %272, %274 ]
  %293 = phi i32 [ %320, %290 ], [ %10, %274 ]
  %294 = getelementptr inbounds i8, i8* %291, i64 %1
  %295 = bitcast i8* %291 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1
  %297 = bitcast i8* %294 to <2 x i64>*
  %298 = load <2 x i64>, <2 x i64>* %297, align 1
  %299 = shufflevector <2 x i64> %296, <2 x i64> %298, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %300 = bitcast <4 x i64> %299 to <32 x i8>
  %301 = shufflevector <32 x i8> %300, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %302 = shufflevector <32 x i8> %300, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %303 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %301, <32 x i8> %285) #6
  %304 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %302, <32 x i8> %287) #6
  %305 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %303, <16 x i16> %304) #6
  %306 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %305, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %307 = ashr <16 x i16> %306, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %308 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %307, <16 x i16> %307) #6
  %309 = bitcast <32 x i8> %308 to <4 x i64>
  %310 = getelementptr inbounds i8, i8* %292, i64 %3
  %311 = extractelement <4 x i64> %309, i32 0
  %312 = bitcast i8* %292 to i64*
  store i64 %311, i64* %312, align 1
  %313 = bitcast <32 x i8> %308 to <8 x i32>
  %314 = shufflevector <8 x i32> %313, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = extractelement <2 x i64> %315, i32 0
  %317 = bitcast i8* %310 to i64*
  store i64 %316, i64* %317, align 1
  %318 = getelementptr inbounds i8, i8* %291, i64 %275
  %319 = getelementptr inbounds i8, i8* %292, i64 %276
  %320 = add nsw i32 %293, -2
  %321 = icmp sgt i32 %320, 1
  br i1 %321, label %290, label %322

322:                                              ; preds = %290
  %323 = and i32 %10, 1
  br label %324

324:                                              ; preds = %322, %274
  %325 = phi i32 [ %10, %274 ], [ %323, %322 ]
  %326 = phi i8* [ %272, %274 ], [ %319, %322 ]
  %327 = phi i8* [ %277, %274 ], [ %318, %322 ]
  %328 = icmp eq i32 %325, 1
  br i1 %328, label %329, label %431

329:                                              ; preds = %324
  %330 = bitcast i8* %327 to <16 x i8>*
  %331 = load <16 x i8>, <16 x i8>* %330, align 1
  %332 = shufflevector <16 x i8> %331, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %333 = shufflevector <16 x i8> %331, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %334 = shufflevector <4 x i64> %286, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %335 = bitcast <2 x i64> %334 to <16 x i8>
  %336 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %332, <16 x i8> %335) #6
  %337 = shufflevector <4 x i64> %288, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %338 = bitcast <2 x i64> %337 to <16 x i8>
  %339 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %333, <16 x i8> %338) #6
  %340 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %336, <8 x i16> %339) #6
  %341 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %340, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %342 = ashr <8 x i16> %341, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %343 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %342, <8 x i16> undef) #6
  %344 = bitcast <16 x i8> %343 to <2 x i64>
  %345 = extractelement <2 x i64> %344, i32 0
  %346 = bitcast i8* %326 to i64*
  store i64 %345, i64* %346, align 1
  br label %431

347:                                              ; preds = %270
  %348 = shl i64 %1, 1
  %349 = shl i64 %3, 1
  %350 = getelementptr inbounds i8, i8* %273, i64 -1
  %351 = bitcast i16* %13 to <8 x i16>*
  %352 = load <8 x i16>, <8 x i16>* %351, align 1
  %353 = ashr <8 x i16> %352, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %354 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %353, <8 x i16> undef) #6
  %355 = bitcast <16 x i8> %354 to <2 x i64>
  %356 = shufflevector <2 x i64> %355, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 0, i32 undef>
  %357 = bitcast <4 x i64> %356 to <32 x i8>
  %358 = shufflevector <32 x i8> %357, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21>
  %359 = bitcast <32 x i8> %358 to <4 x i64>
  %360 = icmp sgt i32 %10, 1
  br i1 %360, label %361, label %394

361:                                              ; preds = %347, %361
  %362 = phi i8* [ %388, %361 ], [ %350, %347 ]
  %363 = phi i8* [ %389, %361 ], [ %272, %347 ]
  %364 = phi i32 [ %390, %361 ], [ %10, %347 ]
  %365 = getelementptr inbounds i8, i8* %362, i64 %1
  %366 = bitcast i8* %362 to i64*
  %367 = load i64, i64* %366, align 1
  %368 = insertelement <4 x i64> undef, i64 %367, i32 0
  %369 = bitcast i8* %365 to i64*
  %370 = load i64, i64* %369, align 1
  %371 = insertelement <4 x i64> %368, i64 %370, i32 2
  %372 = bitcast <4 x i64> %371 to <32 x i8>
  %373 = shufflevector <32 x i8> %372, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 16, i32 17, i32 18, i32 19, i32 17, i32 18, i32 19, i32 20, i32 18, i32 19, i32 20, i32 21, i32 19, i32 20, i32 21, i32 22>
  %374 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %373, <32 x i8> %358) #6
  %375 = tail call <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16> %374, <16 x i16> zeroinitializer) #6
  %376 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %375, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %377 = ashr <16 x i16> %376, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %378 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %377, <16 x i16> zeroinitializer) #6
  %379 = bitcast <32 x i8> %378 to <4 x i64>
  %380 = getelementptr inbounds i8, i8* %363, i64 %3
  %381 = shufflevector <4 x i64> %379, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %382 = bitcast <2 x i64> %381 to <4 x i32>
  %383 = extractelement <4 x i32> %382, i32 0
  %384 = bitcast i8* %363 to i32*
  store i32 %383, i32* %384, align 4
  %385 = bitcast <32 x i8> %378 to <8 x i32>
  %386 = extractelement <8 x i32> %385, i32 4
  %387 = bitcast i8* %380 to i32*
  store i32 %386, i32* %387, align 4
  %388 = getelementptr inbounds i8, i8* %362, i64 %348
  %389 = getelementptr inbounds i8, i8* %363, i64 %349
  %390 = add nsw i32 %364, -2
  %391 = icmp sgt i32 %390, 1
  br i1 %391, label %361, label %392

392:                                              ; preds = %361
  %393 = and i32 %10, 1
  br label %394

394:                                              ; preds = %392, %347
  %395 = phi i32 [ %10, %347 ], [ %393, %392 ]
  %396 = phi i8* [ %272, %347 ], [ %389, %392 ]
  %397 = phi i8* [ %350, %347 ], [ %388, %392 ]
  %398 = icmp eq i32 %395, 1
  br i1 %398, label %399, label %431

399:                                              ; preds = %394
  %400 = bitcast i8* %397 to i64*
  %401 = load i64, i64* %400, align 1
  %402 = insertelement <2 x i64> undef, i64 %401, i32 0
  %403 = bitcast <2 x i64> %402 to <16 x i8>
  %404 = shufflevector <16 x i8> %403, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 4, i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6>
  %405 = shufflevector <4 x i64> %359, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %406 = bitcast <2 x i64> %405 to <16 x i8>
  %407 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %404, <16 x i8> %406) #6
  %408 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %407, <8 x i16> zeroinitializer) #6
  %409 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %408, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %410 = ashr <8 x i16> %409, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %411 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %410, <8 x i16> undef) #6
  %412 = bitcast <16 x i8> %411 to <4 x i32>
  %413 = extractelement <4 x i32> %412, i32 0
  %414 = bitcast i8* %396 to i32*
  store i32 %413, i32* %414, align 4
  br label %431

415:                                              ; preds = %183, %415
  %416 = phi i8* [ %419, %415 ], [ %0, %183 ]
  %417 = phi i8* [ %420, %415 ], [ %2, %183 ]
  %418 = phi i32 [ %421, %415 ], [ %9, %183 ]
  tail call void @vpx_filter_block1d16_h2_ssse3(i8* %416, i64 %1, i8* %417, i64 %3, i32 %10, i16* %13) #6
  %419 = getelementptr inbounds i8, i8* %416, i64 16
  %420 = getelementptr inbounds i8, i8* %417, i64 16
  %421 = add nsw i32 %418, -16
  %422 = icmp sgt i32 %421, 15
  br i1 %422, label %415, label %423

423:                                              ; preds = %415
  %424 = and i32 %9, 15
  br label %425

425:                                              ; preds = %423, %183
  %426 = phi i32 [ %9, %183 ], [ %424, %423 ]
  %427 = phi i8* [ %2, %183 ], [ %420, %423 ]
  %428 = phi i8* [ %0, %183 ], [ %419, %423 ]
  switch i32 %426, label %431 [
    i32 8, label %429
    i32 4, label %430
  ]

429:                                              ; preds = %425
  tail call void @vpx_filter_block1d8_h2_ssse3(i8* %428, i64 %1, i8* %427, i64 %3, i32 %10, i16* %13) #6
  br label %431

430:                                              ; preds = %425
  tail call void @vpx_filter_block1d4_h2_ssse3(i8* %428, i64 %1, i8* %427, i64 %3, i32 %10, i16* %13) #6
  br label %431

431:                                              ; preds = %399, %394, %329, %324, %429, %430, %425, %270, %166, %167, %162
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_filter_block1d8_h8_intrin_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h8_intrin_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_filter_block1d16_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_vert_avx2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %236, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %226

27:                                               ; preds = %25
  %28 = mul i64 %1, -3
  %29 = bitcast i16* %13 to <2 x i64>*
  %30 = shl i64 %1, 1
  %31 = shl i64 %3, 1
  %32 = mul nsw i64 %1, 3
  %33 = shl nsw i64 %1, 2
  %34 = mul nsw i64 %1, 5
  %35 = mul nsw i64 %1, 6
  %36 = icmp ugt i32 %10, 1
  %37 = mul nsw i64 %1, 7
  %38 = shl nsw i64 %1, 3
  %39 = and i32 %10, 1
  br label %40

40:                                               ; preds = %27, %219
  %41 = phi i8* [ %0, %27 ], [ %220, %219 ]
  %42 = phi i8* [ %2, %27 ], [ %221, %219 ]
  %43 = phi i32 [ %9, %27 ], [ %222, %219 ]
  %44 = getelementptr inbounds i8, i8* %41, i64 %28
  %45 = load <2 x i64>, <2 x i64>* %29, align 16
  %46 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %47 = bitcast <4 x i64> %46 to <32 x i8>
  %48 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %49 = bitcast <32 x i8> %48 to <4 x i64>
  %50 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %51 = bitcast <32 x i8> %50 to <4 x i64>
  %52 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %53 = bitcast <32 x i8> %52 to <4 x i64>
  %54 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %55 = bitcast <32 x i8> %54 to <4 x i64>
  %56 = bitcast i8* %44 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 1
  %58 = getelementptr inbounds i8, i8* %44, i64 %1
  %59 = bitcast i8* %58 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  %61 = getelementptr inbounds i8, i8* %44, i64 %30
  %62 = bitcast i8* %61 to <2 x i64>*
  %63 = load <2 x i64>, <2 x i64>* %62, align 1
  %64 = getelementptr inbounds i8, i8* %44, i64 %32
  %65 = bitcast i8* %64 to <2 x i64>*
  %66 = load <2 x i64>, <2 x i64>* %65, align 1
  %67 = getelementptr inbounds i8, i8* %44, i64 %33
  %68 = bitcast i8* %67 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 1
  %70 = getelementptr inbounds i8, i8* %44, i64 %34
  %71 = bitcast i8* %70 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %44, i64 %35
  %74 = bitcast i8* %73 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 1
  %76 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <2 x i64> %57, <2 x i64> %60, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %78 = shufflevector <2 x i64> %60, <2 x i64> %63, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %79 = shufflevector <2 x i64> %63, <2 x i64> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %80 = shufflevector <2 x i64> %66, <2 x i64> %69, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %81 = shufflevector <2 x i64> %69, <2 x i64> %72, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %82 = shufflevector <2 x i64> %72, <2 x i64> %75, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %83 = bitcast <4 x i64> %77 to <32 x i8>
  %84 = bitcast <4 x i64> %78 to <32 x i8>
  %85 = bitcast <4 x i64> %79 to <32 x i8>
  %86 = bitcast <4 x i64> %80 to <32 x i8>
  %87 = shufflevector <32 x i8> %85, <32 x i8> %86, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %88 = bitcast <32 x i8> %87 to <4 x i64>
  %89 = shufflevector <32 x i8> %85, <32 x i8> %86, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %90 = bitcast <32 x i8> %89 to <4 x i64>
  %91 = bitcast <4 x i64> %81 to <32 x i8>
  %92 = bitcast <4 x i64> %82 to <32 x i8>
  %93 = shufflevector <32 x i8> %91, <32 x i8> %92, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %94 = bitcast <32 x i8> %93 to <4 x i64>
  %95 = shufflevector <32 x i8> %91, <32 x i8> %92, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %96 = bitcast <32 x i8> %95 to <4 x i64>
  br i1 %36, label %97, label %159

97:                                               ; preds = %40
  %98 = shufflevector <32 x i8> %83, <32 x i8> %84, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %99 = shufflevector <32 x i8> %83, <32 x i8> %84, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i8* [ %44, %97 ], [ %149, %100 ]
  %102 = phi i8* [ %42, %97 ], [ %156, %100 ]
  %103 = phi i32 [ %10, %97 ], [ %157, %100 ]
  %104 = phi <4 x i64> [ %76, %97 ], [ %121, %100 ]
  %105 = phi <32 x i8> [ %98, %97 ], [ %106, %100 ]
  %106 = phi <32 x i8> [ %89, %97 ], [ %108, %100 ]
  %107 = phi <4 x i64> [ %96, %97 ], [ %128, %100 ]
  %108 = phi <32 x i8> [ %95, %97 ], [ %127, %100 ]
  %109 = phi <32 x i8> [ %99, %97 ], [ %110, %100 ]
  %110 = phi <32 x i8> [ %87, %97 ], [ %112, %100 ]
  %111 = phi <4 x i64> [ %94, %97 ], [ %126, %100 ]
  %112 = phi <32 x i8> [ %93, %97 ], [ %125, %100 ]
  %113 = getelementptr inbounds i8, i8* %101, i64 %37
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1
  %116 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <4 x i64> %104, <4 x i64> %116, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %118 = getelementptr inbounds i8, i8* %101, i64 %38
  %119 = bitcast i8* %118 to <2 x i64>*
  %120 = load <2 x i64>, <2 x i64>* %119, align 1
  %121 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %115, <2 x i64> %120, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = bitcast <4 x i64> %117 to <32 x i8>
  %124 = bitcast <4 x i64> %122 to <32 x i8>
  %125 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %126 = bitcast <32 x i8> %125 to <4 x i64>
  %127 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %128 = bitcast <32 x i8> %127 to <4 x i64>
  %129 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %109, <32 x i8> %48) #6
  %130 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %110, <32 x i8> %50) #6
  %131 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %112, <32 x i8> %52) #6
  %132 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %125, <32 x i8> %54) #6
  %133 = add <16 x i16> %132, %130
  %134 = add <16 x i16> %129, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %135 = add <16 x i16> %134, %131
  %136 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %135, <16 x i16> %133) #6
  %137 = ashr <16 x i16> %136, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %138 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %105, <32 x i8> %48) #6
  %139 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %106, <32 x i8> %50) #6
  %140 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %52) #6
  %141 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %127, <32 x i8> %54) #6
  %142 = add <16 x i16> %141, %139
  %143 = add <16 x i16> %138, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %144 = add <16 x i16> %143, %140
  %145 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %144, <16 x i16> %142) #6
  %146 = ashr <16 x i16> %145, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %147 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %137, <16 x i16> %146) #6
  %148 = bitcast <32 x i8> %147 to <4 x i64>
  %149 = getelementptr inbounds i8, i8* %101, i64 %30
  %150 = shufflevector <4 x i64> %148, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %151 = bitcast <32 x i8> %147 to <8 x i32>
  %152 = shufflevector <8 x i32> %151, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %153 = bitcast i8* %102 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %153, align 16
  %154 = getelementptr inbounds i8, i8* %102, i64 %3
  %155 = bitcast i8* %154 to <4 x i32>*
  store <4 x i32> %152, <4 x i32>* %155, align 16
  %156 = getelementptr inbounds i8, i8* %102, i64 %31
  %157 = add i32 %103, -2
  %158 = icmp ugt i32 %157, 1
  br i1 %158, label %100, label %159

159:                                              ; preds = %100, %40
  %160 = phi <4 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, %40 ], [ %126, %100 ]
  %161 = phi <4 x i64> [ %94, %40 ], [ %126, %100 ]
  %162 = phi <4 x i64> [ %88, %40 ], [ %111, %100 ]
  %163 = phi <4 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, %40 ], [ %128, %100 ]
  %164 = phi <4 x i64> [ %96, %40 ], [ %128, %100 ]
  %165 = phi <4 x i64> [ %90, %40 ], [ %107, %100 ]
  %166 = phi <4 x i64> [ %76, %40 ], [ %121, %100 ]
  %167 = phi i32 [ %10, %40 ], [ %39, %100 ]
  %168 = phi i8* [ %42, %40 ], [ %156, %100 ]
  %169 = phi i8* [ %44, %40 ], [ %149, %100 ]
  %170 = icmp eq i32 %167, 1
  br i1 %170, label %171, label %219

171:                                              ; preds = %159
  %172 = getelementptr inbounds i8, i8* %169, i64 %37
  %173 = bitcast i8* %172 to <16 x i8>*
  %174 = load <16 x i8>, <16 x i8>* %173, align 1
  %175 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %176 = bitcast <2 x i64> %175 to <16 x i8>
  %177 = shufflevector <16 x i8> %176, <16 x i8> %174, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %178 = shufflevector <16 x i8> %176, <16 x i8> %174, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %179 = shufflevector <4 x i64> %49, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %180 = bitcast <2 x i64> %179 to <16 x i8>
  %181 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %177, <16 x i8> %180) #6
  %182 = shufflevector <4 x i64> %162, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %183 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %184 = bitcast <2 x i64> %182 to <16 x i8>
  %185 = bitcast <2 x i64> %183 to <16 x i8>
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %185) #6
  %187 = shufflevector <4 x i64> %161, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %189 = bitcast <2 x i64> %187 to <16 x i8>
  %190 = bitcast <2 x i64> %188 to <16 x i8>
  %191 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %189, <16 x i8> %190) #6
  %192 = shufflevector <4 x i64> %160, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %193 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %194 = bitcast <2 x i64> %192 to <16 x i8>
  %195 = bitcast <2 x i64> %193 to <16 x i8>
  %196 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %194, <16 x i8> %195) #6
  %197 = add <8 x i16> %196, %186
  %198 = add <8 x i16> %181, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %199 = add <8 x i16> %198, %191
  %200 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %199, <8 x i16> %197) #6
  %201 = ashr <8 x i16> %200, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %180) #6
  %203 = shufflevector <4 x i64> %165, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %204 = bitcast <2 x i64> %203 to <16 x i8>
  %205 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %204, <16 x i8> %185) #6
  %206 = shufflevector <4 x i64> %164, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %207 = bitcast <2 x i64> %206 to <16 x i8>
  %208 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %207, <16 x i8> %190) #6
  %209 = shufflevector <4 x i64> %163, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = bitcast <2 x i64> %209 to <16 x i8>
  %211 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %210, <16 x i8> %195) #6
  %212 = add <8 x i16> %211, %205
  %213 = add <8 x i16> %202, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %214 = add <8 x i16> %213, %208
  %215 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %214, <8 x i16> %212) #6
  %216 = ashr <8 x i16> %215, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %217 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %201, <8 x i16> %216) #6
  %218 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> %217, <16 x i8>* %218, align 16
  br label %219

219:                                              ; preds = %159, %171
  %220 = getelementptr inbounds i8, i8* %41, i64 16
  %221 = getelementptr inbounds i8, i8* %42, i64 16
  %222 = add nsw i32 %43, -16
  %223 = icmp sgt i32 %222, 15
  br i1 %223, label %40, label %224

224:                                              ; preds = %219
  %225 = and i32 %9, 15
  br label %226

226:                                              ; preds = %224, %25
  %227 = phi i32 [ %9, %25 ], [ %225, %224 ]
  %228 = phi i8* [ %2, %25 ], [ %221, %224 ]
  %229 = phi i8* [ %0, %25 ], [ %220, %224 ]
  switch i32 %227, label %494 [
    i32 8, label %230
    i32 4, label %233
  ]

230:                                              ; preds = %226
  %231 = mul i64 %1, -3
  %232 = getelementptr inbounds i8, i8* %229, i64 %231
  tail call void @vpx_filter_block1d8_v8_intrin_ssse3(i8* %232, i64 %1, i8* %228, i64 %3, i32 %10, i16* %13) #6
  br label %494

233:                                              ; preds = %226
  %234 = mul i64 %1, -3
  %235 = getelementptr inbounds i8, i8* %229, i64 %234
  tail call void @vpx_filter_block1d4_v8_ssse3(i8* %235, i64 %1, i8* %228, i64 %3, i32 %10, i16* %13) #6
  br label %494

236:                                              ; preds = %11
  %237 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %238 = load i16, i16* %237, align 2
  %239 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %240 = load i16, i16* %239, align 2
  %241 = or i16 %240, %238
  %242 = icmp eq i16 %241, 0
  %243 = icmp sgt i32 %9, 15
  br i1 %242, label %253, label %244

244:                                              ; preds = %236
  br i1 %243, label %245, label %332

245:                                              ; preds = %244
  %246 = sub i64 0, %1
  %247 = shl i64 %1, 1
  %248 = shl i64 %3, 1
  %249 = bitcast i16* %13 to <8 x i16>*
  %250 = icmp sgt i32 %10, 1
  %251 = mul nsw i64 %1, 3
  %252 = shl nsw i64 %1, 2
  br label %254

253:                                              ; preds = %236
  br i1 %243, label %478, label %488

254:                                              ; preds = %245, %325
  %255 = phi i8* [ %0, %245 ], [ %326, %325 ]
  %256 = phi i8* [ %2, %245 ], [ %327, %325 ]
  %257 = phi i32 [ %9, %245 ], [ %328, %325 ]
  %258 = getelementptr inbounds i8, i8* %255, i64 %246
  %259 = load <8 x i16>, <8 x i16>* %249, align 1
  %260 = ashr <8 x i16> %259, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %261 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %260, <8 x i16> %260) #6
  %262 = bitcast <16 x i8> %261 to <2 x i64>
  %263 = shufflevector <2 x i64> %262, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %264 = bitcast <4 x i64> %263 to <32 x i8>
  %265 = shufflevector <32 x i8> %264, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %266 = shufflevector <32 x i8> %264, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %267 = bitcast i8* %258 to <2 x i64>*
  %268 = load <2 x i64>, <2 x i64>* %267, align 1
  %269 = bitcast i8* %255 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 1
  %271 = shufflevector <2 x i64> %268, <2 x i64> %270, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %272 = getelementptr inbounds i8, i8* %258, i64 %247
  %273 = bitcast i8* %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 1
  %275 = shufflevector <2 x i64> %274, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = shufflevector <4 x i64> %271, <4 x i64> %275, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %277 = bitcast <4 x i64> %271 to <32 x i8>
  %278 = bitcast <4 x i64> %276 to <32 x i8>
  br i1 %250, label %279, label %325

279:                                              ; preds = %254
  %280 = shufflevector <32 x i8> %277, <32 x i8> %278, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %281 = shufflevector <32 x i8> %277, <32 x i8> %278, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %282

282:                                              ; preds = %282, %279
  %283 = phi i32 [ %10, %279 ], [ %323, %282 ]
  %284 = phi i8* [ %258, %279 ], [ %321, %282 ]
  %285 = phi i8* [ %256, %279 ], [ %322, %282 ]
  %286 = phi <32 x i8> [ %280, %279 ], [ %302, %282 ]
  %287 = phi <32 x i8> [ %281, %279 ], [ %301, %282 ]
  %288 = phi <4 x i64> [ %275, %279 ], [ %297, %282 ]
  %289 = getelementptr inbounds i8, i8* %284, i64 %251
  %290 = bitcast i8* %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 1
  %292 = shufflevector <2 x i64> %291, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %293 = shufflevector <4 x i64> %288, <4 x i64> %292, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %294 = getelementptr inbounds i8, i8* %284, i64 %252
  %295 = bitcast i8* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1
  %297 = shufflevector <2 x i64> %296, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %298 = shufflevector <2 x i64> %291, <2 x i64> %296, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %299 = bitcast <4 x i64> %293 to <32 x i8>
  %300 = bitcast <4 x i64> %298 to <32 x i8>
  %301 = shufflevector <32 x i8> %299, <32 x i8> %300, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %302 = shufflevector <32 x i8> %299, <32 x i8> %300, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %303 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %287, <32 x i8> %265) #6
  %304 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %301, <32 x i8> %266) #6
  %305 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %303, <16 x i16> %304) #6
  %306 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %286, <32 x i8> %265) #6
  %307 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %302, <32 x i8> %266) #6
  %308 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %306, <16 x i16> %307) #6
  %309 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %305, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %310 = ashr <16 x i16> %309, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %311 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %308, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %312 = ashr <16 x i16> %311, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %313 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %310, <16 x i16> %312) #6
  %314 = bitcast <32 x i8> %313 to <4 x i64>
  %315 = bitcast i8* %285 to <2 x i64>*
  %316 = getelementptr inbounds i8, i8* %285, i64 %3
  %317 = shufflevector <4 x i64> %314, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %317, <2 x i64>* %315, align 16
  %318 = bitcast <32 x i8> %313 to <8 x i32>
  %319 = shufflevector <8 x i32> %318, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %320 = bitcast i8* %316 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %320, align 16
  %321 = getelementptr inbounds i8, i8* %284, i64 %247
  %322 = getelementptr inbounds i8, i8* %285, i64 %248
  %323 = add nsw i32 %283, -2
  %324 = icmp sgt i32 %323, 1
  br i1 %324, label %282, label %325

325:                                              ; preds = %282, %254
  %326 = getelementptr inbounds i8, i8* %255, i64 16
  %327 = getelementptr inbounds i8, i8* %256, i64 16
  %328 = add nsw i32 %257, -16
  %329 = icmp sgt i32 %328, 15
  br i1 %329, label %254, label %330

330:                                              ; preds = %325
  %331 = and i32 %9, 15
  br label %332

332:                                              ; preds = %330, %244
  %333 = phi i32 [ %9, %244 ], [ %331, %330 ]
  %334 = phi i8* [ %2, %244 ], [ %327, %330 ]
  %335 = phi i8* [ %0, %244 ], [ %326, %330 ]
  switch i32 %333, label %494 [
    i32 8, label %336
    i32 4, label %407
  ]

336:                                              ; preds = %332
  %337 = sub i64 0, %1
  %338 = getelementptr inbounds i8, i8* %335, i64 %337
  %339 = shl i64 %1, 1
  %340 = shl i64 %3, 1
  %341 = bitcast i16* %13 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 1
  %343 = ashr <8 x i16> %342, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %344 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %343, <8 x i16> %343) #6
  %345 = bitcast <16 x i8> %344 to <2 x i64>
  %346 = shufflevector <2 x i64> %345, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %347 = bitcast <4 x i64> %346 to <32 x i8>
  %348 = shufflevector <32 x i8> %347, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19, i32 18, i32 19>
  %349 = shufflevector <32 x i8> %347, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21, i32 20, i32 21>
  %350 = bitcast i8* %338 to i64*
  %351 = load i64, i64* %350, align 1
  %352 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %351, i32 0
  %353 = bitcast i8* %335 to i64*
  %354 = load i64, i64* %353, align 1
  %355 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %354, i32 0
  %356 = shufflevector <4 x i64> %352, <4 x i64> %355, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %357 = getelementptr inbounds i8, i8* %338, i64 %339
  %358 = bitcast i8* %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 1
  %360 = shufflevector <2 x i64> %359, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %361 = icmp sgt i32 %10, 1
  br i1 %361, label %362, label %494

362:                                              ; preds = %336
  %363 = bitcast <4 x i64> %356 to <32 x i8>
  %364 = shufflevector <4 x i64> %356, <4 x i64> %360, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %365 = bitcast <4 x i64> %364 to <32 x i8>
  %366 = shufflevector <32 x i8> %363, <32 x i8> %365, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %367 = mul nsw i64 %1, 3
  %368 = shl nsw i64 %1, 2
  br label %369

369:                                              ; preds = %369, %362
  %370 = phi i32 [ %10, %362 ], [ %405, %369 ]
  %371 = phi i8* [ %338, %362 ], [ %403, %369 ]
  %372 = phi i8* [ %334, %362 ], [ %404, %369 ]
  %373 = phi <32 x i8> [ %366, %362 ], [ %387, %369 ]
  %374 = phi <4 x i64> [ %360, %362 ], [ %383, %369 ]
  %375 = getelementptr inbounds i8, i8* %371, i64 %367
  %376 = bitcast i8* %375 to i64*
  %377 = load i64, i64* %376, align 1
  %378 = insertelement <4 x i64> undef, i64 %377, i32 0
  %379 = insertelement <4 x i64> %374, i64 %377, i32 2
  %380 = getelementptr inbounds i8, i8* %371, i64 %368
  %381 = bitcast i8* %380 to i64*
  %382 = load i64, i64* %381, align 1
  %383 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %382, i32 0
  %384 = insertelement <4 x i64> %378, i64 %382, i32 2
  %385 = bitcast <4 x i64> %379 to <32 x i8>
  %386 = bitcast <4 x i64> %384 to <32 x i8>
  %387 = shufflevector <32 x i8> %385, <32 x i8> %386, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %388 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %373, <32 x i8> %348) #6
  %389 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %387, <32 x i8> %349) #6
  %390 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %388, <16 x i16> %389) #6
  %391 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %390, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %392 = ashr <16 x i16> %391, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %393 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %392, <16 x i16> %392) #6
  %394 = bitcast <32 x i8> %393 to <4 x i64>
  %395 = getelementptr inbounds i8, i8* %372, i64 %3
  %396 = extractelement <4 x i64> %394, i32 0
  %397 = bitcast i8* %372 to i64*
  store i64 %396, i64* %397, align 1
  %398 = bitcast <32 x i8> %393 to <8 x i32>
  %399 = shufflevector <8 x i32> %398, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = extractelement <2 x i64> %400, i32 0
  %402 = bitcast i8* %395 to i64*
  store i64 %401, i64* %402, align 1
  %403 = getelementptr inbounds i8, i8* %371, i64 %339
  %404 = getelementptr inbounds i8, i8* %372, i64 %340
  %405 = add nsw i32 %370, -2
  %406 = icmp sgt i32 %405, 1
  br i1 %406, label %369, label %494

407:                                              ; preds = %332
  %408 = sub i64 0, %1
  %409 = getelementptr inbounds i8, i8* %335, i64 %408
  %410 = shl i64 %1, 1
  %411 = shl i64 %3, 1
  %412 = bitcast i16* %13 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 1
  %414 = ashr <8 x i16> %413, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %415 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %414, <8 x i16> undef) #6
  %416 = bitcast <16 x i8> %415 to <2 x i64>
  %417 = shufflevector <2 x i64> %416, <2 x i64> undef, <4 x i32> <i32 0, i32 undef, i32 0, i32 undef>
  %418 = bitcast <4 x i64> %417 to <32 x i8>
  %419 = shufflevector <32 x i8> %418, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21, i32 18, i32 19, i32 20, i32 21>
  %420 = bitcast i8* %409 to <2 x i64>*
  %421 = load <2 x i64>, <2 x i64>* %420, align 1
  %422 = bitcast i8* %335 to <2 x i64>*
  %423 = load <2 x i64>, <2 x i64>* %422, align 1
  %424 = shufflevector <2 x i64> %421, <2 x i64> %423, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %425 = getelementptr inbounds i8, i8* %409, i64 %410
  %426 = bitcast i8* %425 to <2 x i64>*
  %427 = load <2 x i64>, <2 x i64>* %426, align 1
  %428 = shufflevector <2 x i64> %427, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %429 = icmp sgt i32 %10, 1
  br i1 %429, label %430, label %494

430:                                              ; preds = %407
  %431 = bitcast <4 x i64> %424 to <32 x i8>
  %432 = shufflevector <4 x i64> %424, <4 x i64> %428, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %433 = bitcast <4 x i64> %432 to <32 x i8>
  %434 = shufflevector <32 x i8> %431, <32 x i8> %433, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %435 = mul nsw i64 %1, 3
  %436 = shl nsw i64 %1, 2
  br label %437

437:                                              ; preds = %437, %430
  %438 = phi i32 [ %10, %430 ], [ %476, %437 ]
  %439 = phi i8* [ %409, %430 ], [ %474, %437 ]
  %440 = phi <32 x i8> [ %434, %430 ], [ %455, %437 ]
  %441 = phi i8* [ %334, %430 ], [ %475, %437 ]
  %442 = phi <4 x i64> [ %428, %430 ], [ %451, %437 ]
  %443 = getelementptr inbounds i8, i8* %439, i64 %435
  %444 = bitcast i8* %443 to i64*
  %445 = load i64, i64* %444, align 1
  %446 = insertelement <4 x i64> undef, i64 %445, i32 0
  %447 = insertelement <4 x i64> %442, i64 %445, i32 2
  %448 = getelementptr inbounds i8, i8* %439, i64 %436
  %449 = bitcast i8* %448 to i64*
  %450 = load i64, i64* %449, align 1
  %451 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %450, i32 0
  %452 = insertelement <4 x i64> %446, i64 %450, i32 2
  %453 = bitcast <4 x i64> %447 to <32 x i8>
  %454 = bitcast <4 x i64> %452 to <32 x i8>
  %455 = shufflevector <32 x i8> %453, <32 x i8> %454, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %456 = bitcast <32 x i8> %440 to <16 x i16>
  %457 = bitcast <32 x i8> %455 to <16 x i16>
  %458 = shufflevector <16 x i16> %456, <16 x i16> %457, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %459 = bitcast <16 x i16> %458 to <32 x i8>
  %460 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %459, <32 x i8> %419) #6
  %461 = tail call <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16> %460, <16 x i16> zeroinitializer) #6
  %462 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %461, <16 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %463 = ashr <16 x i16> %462, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %464 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %463, <16 x i16> %463) #6
  %465 = bitcast <32 x i8> %464 to <4 x i64>
  %466 = getelementptr inbounds i8, i8* %441, i64 %3
  %467 = shufflevector <4 x i64> %465, <4 x i64> undef, <2 x i32> <i32 0, i32 undef>
  %468 = bitcast <2 x i64> %467 to <4 x i32>
  %469 = extractelement <4 x i32> %468, i32 0
  %470 = bitcast i8* %441 to i32*
  store i32 %469, i32* %470, align 4
  %471 = bitcast <32 x i8> %464 to <8 x i32>
  %472 = extractelement <8 x i32> %471, i32 4
  %473 = bitcast i8* %466 to i32*
  store i32 %472, i32* %473, align 4
  %474 = getelementptr inbounds i8, i8* %439, i64 %410
  %475 = getelementptr inbounds i8, i8* %441, i64 %411
  %476 = add nsw i32 %438, -2
  %477 = icmp sgt i32 %476, 1
  br i1 %477, label %437, label %494

478:                                              ; preds = %253, %478
  %479 = phi i8* [ %482, %478 ], [ %0, %253 ]
  %480 = phi i8* [ %483, %478 ], [ %2, %253 ]
  %481 = phi i32 [ %484, %478 ], [ %9, %253 ]
  tail call void @vpx_filter_block1d16_v2_ssse3(i8* %479, i64 %1, i8* %480, i64 %3, i32 %10, i16* %13) #6
  %482 = getelementptr inbounds i8, i8* %479, i64 16
  %483 = getelementptr inbounds i8, i8* %480, i64 16
  %484 = add nsw i32 %481, -16
  %485 = icmp sgt i32 %484, 15
  br i1 %485, label %478, label %486

486:                                              ; preds = %478
  %487 = and i32 %9, 15
  br label %488

488:                                              ; preds = %486, %253
  %489 = phi i32 [ %9, %253 ], [ %487, %486 ]
  %490 = phi i8* [ %2, %253 ], [ %483, %486 ]
  %491 = phi i8* [ %0, %253 ], [ %482, %486 ]
  switch i32 %489, label %494 [
    i32 8, label %492
    i32 4, label %493
  ]

492:                                              ; preds = %488
  tail call void @vpx_filter_block1d8_v2_ssse3(i8* %491, i64 %1, i8* %490, i64 %3, i32 %10, i16* %13) #6
  br label %494

493:                                              ; preds = %488
  tail call void @vpx_filter_block1d4_v2_ssse3(i8* %491, i64 %1, i8* %490, i64 %3, i32 %10, i16* %13) #6
  br label %494

494:                                              ; preds = %437, %369, %407, %336, %492, %493, %488, %332, %230, %233, %226
  ret void
}

declare void @vpx_filter_block1d8_v8_intrin_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d16_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_horiz_avx2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = sext i32 %5 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %176, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %170

27:                                               ; preds = %25
  %28 = bitcast i16* %13 to <2 x i64>*
  %29 = shl i64 %1, 1
  %30 = shl i64 %3, 1
  %31 = icmp ugt i32 %10, 1
  %32 = and i32 %10, 1
  br label %33

33:                                               ; preds = %27, %163
  %34 = phi i8* [ %0, %27 ], [ %164, %163 ]
  %35 = phi i8* [ %2, %27 ], [ %165, %163 ]
  %36 = phi i32 [ %9, %27 ], [ %166, %163 ]
  %37 = load <2 x i64>, <2 x i64>* %28, align 16
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %39 = bitcast <4 x i64> %38 to <32 x i8>
  %40 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %41 = bitcast <32 x i8> %40 to <4 x i64>
  %42 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %43 = bitcast <32 x i8> %42 to <4 x i64>
  %44 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %45 = bitcast <32 x i8> %44 to <4 x i64>
  %46 = shufflevector <32 x i8> %39, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %47 = bitcast <32 x i8> %46 to <4 x i64>
  br i1 %31, label %48, label %113

48:                                               ; preds = %33, %48
  %49 = phi i8* [ %97, %48 ], [ %34, %33 ]
  %50 = phi i8* [ %110, %48 ], [ %35, %33 ]
  %51 = phi i32 [ %111, %48 ], [ %10, %33 ]
  %52 = getelementptr inbounds i8, i8* %49, i64 -3
  %53 = bitcast i8* %52 to <2 x i64>*
  %54 = load <2 x i64>, <2 x i64>* %53, align 1
  %55 = getelementptr inbounds i8, i8* %49, i64 %1
  %56 = getelementptr inbounds i8, i8* %55, i64 -3
  %57 = bitcast i8* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 1
  %59 = shufflevector <2 x i64> %54, <2 x i64> %58, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %60 = bitcast <4 x i64> %59 to <32 x i8>
  %61 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %62 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %63 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %64 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %65 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %61, <32 x i8> %40) #6
  %66 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %62, <32 x i8> %42) #6
  %67 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %63, <32 x i8> %44) #6
  %68 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %64, <32 x i8> %46) #6
  %69 = add <16 x i16> %68, %66
  %70 = add <16 x i16> %65, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %71 = add <16 x i16> %70, %67
  %72 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %71, <16 x i16> %69) #6
  %73 = ashr <16 x i16> %72, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %74 = getelementptr inbounds i8, i8* %49, i64 5
  %75 = bitcast i8* %74 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 1
  %77 = getelementptr inbounds i8, i8* %55, i64 5
  %78 = bitcast i8* %77 to <2 x i64>*
  %79 = load <2 x i64>, <2 x i64>* %78, align 1
  %80 = shufflevector <2 x i64> %76, <2 x i64> %79, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %81 = bitcast <4 x i64> %80 to <32 x i8>
  %82 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %83 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %84 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %85 = shufflevector <32 x i8> %81, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %86 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %82, <32 x i8> %40) #6
  %87 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %83, <32 x i8> %42) #6
  %88 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %84, <32 x i8> %44) #6
  %89 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %85, <32 x i8> %46) #6
  %90 = add <16 x i16> %89, %87
  %91 = add <16 x i16> %86, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %92 = add <16 x i16> %91, %88
  %93 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %92, <16 x i16> %90) #6
  %94 = ashr <16 x i16> %93, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %95 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %73, <16 x i16> %94) #6
  %96 = bitcast <32 x i8> %95 to <4 x i64>
  %97 = getelementptr inbounds i8, i8* %49, i64 %29
  %98 = shufflevector <4 x i64> %96, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %99 = bitcast <32 x i8> %95 to <8 x i32>
  %100 = shufflevector <8 x i32> %99, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %101 = bitcast i8* %50 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 16
  %103 = bitcast <2 x i64> %98 to <16 x i8>
  %104 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %103, <16 x i8> %102) #6
  %105 = getelementptr inbounds i8, i8* %50, i64 %3
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 16
  %108 = bitcast <4 x i32> %100 to <16 x i8>
  %109 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %108, <16 x i8> %107) #6
  store <16 x i8> %104, <16 x i8>* %101, align 16
  store <16 x i8> %109, <16 x i8>* %106, align 16
  %110 = getelementptr inbounds i8, i8* %50, i64 %30
  %111 = add i32 %51, -2
  %112 = icmp ugt i32 %111, 1
  br i1 %112, label %48, label %113

113:                                              ; preds = %48, %33
  %114 = phi i32 [ %10, %33 ], [ %32, %48 ]
  %115 = phi i8* [ %35, %33 ], [ %110, %48 ]
  %116 = phi i8* [ %34, %33 ], [ %97, %48 ]
  %117 = icmp eq i32 %114, 1
  br i1 %117, label %118, label %163

118:                                              ; preds = %113
  %119 = getelementptr inbounds i8, i8* %116, i64 -3
  %120 = bitcast i8* %119 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 1
  %122 = shufflevector <16 x i8> %121, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %123 = shufflevector <16 x i8> %121, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %124 = shufflevector <16 x i8> %121, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %125 = shufflevector <16 x i8> %121, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %126 = shufflevector <4 x i64> %41, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %127 = bitcast <2 x i64> %126 to <16 x i8>
  %128 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %122, <16 x i8> %127) #6
  %129 = shufflevector <4 x i64> %43, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = bitcast <2 x i64> %129 to <16 x i8>
  %131 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %123, <16 x i8> %130) #6
  %132 = shufflevector <4 x i64> %45, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %133 = bitcast <2 x i64> %132 to <16 x i8>
  %134 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %124, <16 x i8> %133) #6
  %135 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %136 = bitcast <2 x i64> %135 to <16 x i8>
  %137 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %125, <16 x i8> %136) #6
  %138 = add <8 x i16> %137, %131
  %139 = add <8 x i16> %128, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %140 = add <8 x i16> %139, %134
  %141 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %140, <8 x i16> %138) #6
  %142 = ashr <8 x i16> %141, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %143 = getelementptr inbounds i8, i8* %116, i64 5
  %144 = bitcast i8* %143 to <16 x i8>*
  %145 = load <16 x i8>, <16 x i8>* %144, align 1
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %147 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %148 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %149 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %150 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %146, <16 x i8> %127) #6
  %151 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %147, <16 x i8> %130) #6
  %152 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %148, <16 x i8> %133) #6
  %153 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %149, <16 x i8> %136) #6
  %154 = add <8 x i16> %153, %151
  %155 = add <8 x i16> %150, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %156 = add <8 x i16> %155, %152
  %157 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %156, <8 x i16> %154) #6
  %158 = ashr <8 x i16> %157, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %159 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %142, <8 x i16> %158) #6
  %160 = bitcast i8* %115 to <16 x i8>*
  %161 = load <16 x i8>, <16 x i8>* %160, align 16
  %162 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %159, <16 x i8> %161) #6
  store <16 x i8> %162, <16 x i8>* %160, align 16
  br label %163

163:                                              ; preds = %113, %118
  %164 = getelementptr inbounds i8, i8* %34, i64 16
  %165 = getelementptr inbounds i8, i8* %35, i64 16
  %166 = add nsw i32 %36, -16
  %167 = icmp sgt i32 %166, 15
  br i1 %167, label %33, label %168

168:                                              ; preds = %163
  %169 = and i32 %9, 15
  br label %170

170:                                              ; preds = %168, %25
  %171 = phi i32 [ %9, %25 ], [ %169, %168 ]
  %172 = phi i8* [ %2, %25 ], [ %165, %168 ]
  %173 = phi i8* [ %0, %25 ], [ %164, %168 ]
  switch i32 %171, label %351 [
    i32 8, label %174
    i32 4, label %175
  ]

174:                                              ; preds = %170
  tail call void @vpx_filter_block1d8_h8_avg_ssse3(i8* %173, i64 %1, i8* %172, i64 %3, i32 %10, i16* %13) #6
  br label %351

175:                                              ; preds = %170
  tail call void @vpx_filter_block1d4_h8_avg_ssse3(i8* %173, i64 %1, i8* %172, i64 %3, i32 %10, i16* %13) #6
  br label %351

176:                                              ; preds = %11
  %177 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %178 = load i16, i16* %177, align 2
  %179 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %180 = load i16, i16* %179, align 2
  %181 = or i16 %180, %178
  %182 = icmp eq i16 %181, 0
  %183 = icmp sgt i32 %9, 15
  br i1 %182, label %191, label %184

184:                                              ; preds = %176
  br i1 %183, label %185, label %329

185:                                              ; preds = %184
  %186 = bitcast i16* %13 to <2 x i64>*
  %187 = shl i64 %1, 1
  %188 = shl i64 %3, 1
  %189 = icmp ugt i32 %10, 1
  %190 = and i32 %10, 1
  br label %192

191:                                              ; preds = %176
  br i1 %183, label %335, label %345

192:                                              ; preds = %185, %322
  %193 = phi i8* [ %0, %185 ], [ %323, %322 ]
  %194 = phi i8* [ %2, %185 ], [ %324, %322 ]
  %195 = phi i32 [ %9, %185 ], [ %325, %322 ]
  %196 = load <2 x i64>, <2 x i64>* %186, align 16
  %197 = shufflevector <2 x i64> %196, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %198 = bitcast <4 x i64> %197 to <32 x i8>
  %199 = shufflevector <32 x i8> %198, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %200 = bitcast <32 x i8> %199 to <4 x i64>
  %201 = shufflevector <32 x i8> %198, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %202 = bitcast <32 x i8> %201 to <4 x i64>
  %203 = shufflevector <32 x i8> %198, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %204 = bitcast <32 x i8> %203 to <4 x i64>
  %205 = shufflevector <32 x i8> %198, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %206 = bitcast <32 x i8> %205 to <4 x i64>
  br i1 %189, label %207, label %272

207:                                              ; preds = %192, %207
  %208 = phi i8* [ %256, %207 ], [ %193, %192 ]
  %209 = phi i8* [ %269, %207 ], [ %194, %192 ]
  %210 = phi i32 [ %270, %207 ], [ %10, %192 ]
  %211 = getelementptr inbounds i8, i8* %208, i64 -3
  %212 = bitcast i8* %211 to <2 x i64>*
  %213 = load <2 x i64>, <2 x i64>* %212, align 1
  %214 = getelementptr inbounds i8, i8* %208, i64 %1
  %215 = getelementptr inbounds i8, i8* %214, i64 -3
  %216 = bitcast i8* %215 to <2 x i64>*
  %217 = load <2 x i64>, <2 x i64>* %216, align 1
  %218 = shufflevector <2 x i64> %213, <2 x i64> %217, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %219 = bitcast <4 x i64> %218 to <32 x i8>
  %220 = shufflevector <32 x i8> %219, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %221 = shufflevector <32 x i8> %219, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %222 = shufflevector <32 x i8> %219, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %223 = shufflevector <32 x i8> %219, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %224 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %220, <32 x i8> %199) #6
  %225 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %221, <32 x i8> %201) #6
  %226 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %222, <32 x i8> %203) #6
  %227 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %223, <32 x i8> %205) #6
  %228 = add <16 x i16> %227, %225
  %229 = add <16 x i16> %224, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %230 = add <16 x i16> %229, %226
  %231 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %230, <16 x i16> %228) #6
  %232 = ashr <16 x i16> %231, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %233 = getelementptr inbounds i8, i8* %208, i64 5
  %234 = bitcast i8* %233 to <2 x i64>*
  %235 = load <2 x i64>, <2 x i64>* %234, align 1
  %236 = getelementptr inbounds i8, i8* %214, i64 5
  %237 = bitcast i8* %236 to <2 x i64>*
  %238 = load <2 x i64>, <2 x i64>* %237, align 1
  %239 = shufflevector <2 x i64> %235, <2 x i64> %238, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %240 = bitcast <4 x i64> %239 to <32 x i8>
  %241 = shufflevector <32 x i8> %240, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24>
  %242 = shufflevector <32 x i8> %240, <32 x i8> undef, <32 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26>
  %243 = shufflevector <32 x i8> %240, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28>
  %244 = shufflevector <32 x i8> %240, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 22, i32 23, i32 23, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30>
  %245 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %241, <32 x i8> %199) #6
  %246 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %242, <32 x i8> %201) #6
  %247 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %243, <32 x i8> %203) #6
  %248 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %244, <32 x i8> %205) #6
  %249 = add <16 x i16> %248, %246
  %250 = add <16 x i16> %245, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %251 = add <16 x i16> %250, %247
  %252 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %251, <16 x i16> %249) #6
  %253 = ashr <16 x i16> %252, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %254 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %232, <16 x i16> %253) #6
  %255 = bitcast <32 x i8> %254 to <4 x i64>
  %256 = getelementptr inbounds i8, i8* %208, i64 %187
  %257 = shufflevector <4 x i64> %255, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %258 = bitcast <32 x i8> %254 to <8 x i32>
  %259 = shufflevector <8 x i32> %258, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %260 = bitcast i8* %209 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 16
  %262 = bitcast <2 x i64> %257 to <16 x i8>
  %263 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %262, <16 x i8> %261) #6
  %264 = getelementptr inbounds i8, i8* %209, i64 %3
  %265 = bitcast i8* %264 to <16 x i8>*
  %266 = load <16 x i8>, <16 x i8>* %265, align 16
  %267 = bitcast <4 x i32> %259 to <16 x i8>
  %268 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %267, <16 x i8> %266) #6
  store <16 x i8> %263, <16 x i8>* %260, align 16
  store <16 x i8> %268, <16 x i8>* %265, align 16
  %269 = getelementptr inbounds i8, i8* %209, i64 %188
  %270 = add i32 %210, -2
  %271 = icmp ugt i32 %270, 1
  br i1 %271, label %207, label %272

272:                                              ; preds = %207, %192
  %273 = phi i32 [ %10, %192 ], [ %190, %207 ]
  %274 = phi i8* [ %194, %192 ], [ %269, %207 ]
  %275 = phi i8* [ %193, %192 ], [ %256, %207 ]
  %276 = icmp eq i32 %273, 1
  br i1 %276, label %277, label %322

277:                                              ; preds = %272
  %278 = getelementptr inbounds i8, i8* %275, i64 -3
  %279 = bitcast i8* %278 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1
  %281 = shufflevector <16 x i8> %280, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %282 = shufflevector <16 x i8> %280, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %283 = shufflevector <16 x i8> %280, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %284 = shufflevector <16 x i8> %280, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %285 = shufflevector <4 x i64> %200, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %286 = bitcast <2 x i64> %285 to <16 x i8>
  %287 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %281, <16 x i8> %286) #6
  %288 = shufflevector <4 x i64> %202, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %289 = bitcast <2 x i64> %288 to <16 x i8>
  %290 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %282, <16 x i8> %289) #6
  %291 = shufflevector <4 x i64> %204, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %292 = bitcast <2 x i64> %291 to <16 x i8>
  %293 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %283, <16 x i8> %292) #6
  %294 = shufflevector <4 x i64> %206, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %295 = bitcast <2 x i64> %294 to <16 x i8>
  %296 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %284, <16 x i8> %295) #6
  %297 = add <8 x i16> %296, %290
  %298 = add <8 x i16> %287, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %299 = add <8 x i16> %298, %293
  %300 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %299, <8 x i16> %297) #6
  %301 = ashr <8 x i16> %300, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %302 = getelementptr inbounds i8, i8* %275, i64 5
  %303 = bitcast i8* %302 to <16 x i8>*
  %304 = load <16 x i8>, <16 x i8>* %303, align 1
  %305 = shufflevector <16 x i8> %304, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %306 = shufflevector <16 x i8> %304, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %307 = shufflevector <16 x i8> %304, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %308 = shufflevector <16 x i8> %304, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %309 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %305, <16 x i8> %286) #6
  %310 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %306, <16 x i8> %289) #6
  %311 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %307, <16 x i8> %292) #6
  %312 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %308, <16 x i8> %295) #6
  %313 = add <8 x i16> %312, %310
  %314 = add <8 x i16> %309, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %315 = add <8 x i16> %314, %311
  %316 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %315, <8 x i16> %313) #6
  %317 = ashr <8 x i16> %316, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %318 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %301, <8 x i16> %317) #6
  %319 = bitcast i8* %274 to <16 x i8>*
  %320 = load <16 x i8>, <16 x i8>* %319, align 16
  %321 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %318, <16 x i8> %320) #6
  store <16 x i8> %321, <16 x i8>* %319, align 16
  br label %322

322:                                              ; preds = %272, %277
  %323 = getelementptr inbounds i8, i8* %193, i64 16
  %324 = getelementptr inbounds i8, i8* %194, i64 16
  %325 = add nsw i32 %195, -16
  %326 = icmp sgt i32 %325, 15
  br i1 %326, label %192, label %327

327:                                              ; preds = %322
  %328 = and i32 %9, 15
  br label %329

329:                                              ; preds = %327, %184
  %330 = phi i32 [ %9, %184 ], [ %328, %327 ]
  %331 = phi i8* [ %2, %184 ], [ %324, %327 ]
  %332 = phi i8* [ %0, %184 ], [ %323, %327 ]
  switch i32 %330, label %351 [
    i32 8, label %333
    i32 4, label %334
  ]

333:                                              ; preds = %329
  tail call void @vpx_filter_block1d8_h8_avg_ssse3(i8* %332, i64 %1, i8* %331, i64 %3, i32 %10, i16* %13) #6
  br label %351

334:                                              ; preds = %329
  tail call void @vpx_filter_block1d4_h8_avg_ssse3(i8* %332, i64 %1, i8* %331, i64 %3, i32 %10, i16* %13) #6
  br label %351

335:                                              ; preds = %191, %335
  %336 = phi i8* [ %339, %335 ], [ %0, %191 ]
  %337 = phi i8* [ %340, %335 ], [ %2, %191 ]
  %338 = phi i32 [ %341, %335 ], [ %9, %191 ]
  tail call void @vpx_filter_block1d16_h2_avg_ssse3(i8* %336, i64 %1, i8* %337, i64 %3, i32 %10, i16* %13) #6
  %339 = getelementptr inbounds i8, i8* %336, i64 16
  %340 = getelementptr inbounds i8, i8* %337, i64 16
  %341 = add nsw i32 %338, -16
  %342 = icmp sgt i32 %341, 15
  br i1 %342, label %335, label %343

343:                                              ; preds = %335
  %344 = and i32 %9, 15
  br label %345

345:                                              ; preds = %343, %191
  %346 = phi i32 [ %9, %191 ], [ %344, %343 ]
  %347 = phi i8* [ %2, %191 ], [ %340, %343 ]
  %348 = phi i8* [ %0, %191 ], [ %339, %343 ]
  switch i32 %346, label %351 [
    i32 8, label %349
    i32 4, label %350
  ]

349:                                              ; preds = %345
  tail call void @vpx_filter_block1d8_h2_avg_ssse3(i8* %348, i64 %1, i8* %347, i64 %3, i32 %10, i16* %13) #6
  br label %351

350:                                              ; preds = %345
  tail call void @vpx_filter_block1d4_h2_avg_ssse3(i8* %348, i64 %1, i8* %347, i64 %3, i32 %10, i16* %13) #6
  br label %351

351:                                              ; preds = %349, %350, %345, %333, %334, %329, %174, %175, %170
  ret void
}

declare void @vpx_filter_block1d8_h8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d16_h2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_h2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_h2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_vert_avx2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 0
  %14 = load i16, i16* %13, align 2
  %15 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %16, %14
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 6
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 7
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %244, label %25

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 15
  br i1 %26, label %27, label %234

27:                                               ; preds = %25
  %28 = mul i64 %1, -3
  %29 = bitcast i16* %13 to <2 x i64>*
  %30 = shl i64 %1, 1
  %31 = shl i64 %3, 1
  %32 = mul nsw i64 %1, 3
  %33 = shl nsw i64 %1, 2
  %34 = mul nsw i64 %1, 5
  %35 = mul nsw i64 %1, 6
  %36 = icmp ugt i32 %10, 1
  %37 = mul nsw i64 %1, 7
  %38 = shl nsw i64 %1, 3
  %39 = and i32 %10, 1
  br label %40

40:                                               ; preds = %27, %227
  %41 = phi i8* [ %0, %27 ], [ %228, %227 ]
  %42 = phi i8* [ %2, %27 ], [ %229, %227 ]
  %43 = phi i32 [ %9, %27 ], [ %230, %227 ]
  %44 = getelementptr inbounds i8, i8* %41, i64 %28
  %45 = load <2 x i64>, <2 x i64>* %29, align 16
  %46 = shufflevector <2 x i64> %45, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %47 = bitcast <4 x i64> %46 to <32 x i8>
  %48 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %49 = bitcast <32 x i8> %48 to <4 x i64>
  %50 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %51 = bitcast <32 x i8> %50 to <4 x i64>
  %52 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %53 = bitcast <32 x i8> %52 to <4 x i64>
  %54 = shufflevector <32 x i8> %47, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %55 = bitcast <32 x i8> %54 to <4 x i64>
  %56 = bitcast i8* %44 to <2 x i64>*
  %57 = load <2 x i64>, <2 x i64>* %56, align 1
  %58 = getelementptr inbounds i8, i8* %44, i64 %1
  %59 = bitcast i8* %58 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 1
  %61 = getelementptr inbounds i8, i8* %44, i64 %30
  %62 = bitcast i8* %61 to <2 x i64>*
  %63 = load <2 x i64>, <2 x i64>* %62, align 1
  %64 = getelementptr inbounds i8, i8* %44, i64 %32
  %65 = bitcast i8* %64 to <2 x i64>*
  %66 = load <2 x i64>, <2 x i64>* %65, align 1
  %67 = getelementptr inbounds i8, i8* %44, i64 %33
  %68 = bitcast i8* %67 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 1
  %70 = getelementptr inbounds i8, i8* %44, i64 %34
  %71 = bitcast i8* %70 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 1
  %73 = getelementptr inbounds i8, i8* %44, i64 %35
  %74 = bitcast i8* %73 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 1
  %76 = shufflevector <2 x i64> %75, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = shufflevector <2 x i64> %57, <2 x i64> %60, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %78 = shufflevector <2 x i64> %60, <2 x i64> %63, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %79 = shufflevector <2 x i64> %63, <2 x i64> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %80 = shufflevector <2 x i64> %66, <2 x i64> %69, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %81 = shufflevector <2 x i64> %69, <2 x i64> %72, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %82 = shufflevector <2 x i64> %72, <2 x i64> %75, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %83 = bitcast <4 x i64> %77 to <32 x i8>
  %84 = bitcast <4 x i64> %78 to <32 x i8>
  %85 = bitcast <4 x i64> %79 to <32 x i8>
  %86 = bitcast <4 x i64> %80 to <32 x i8>
  %87 = shufflevector <32 x i8> %85, <32 x i8> %86, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %88 = bitcast <32 x i8> %87 to <4 x i64>
  %89 = shufflevector <32 x i8> %85, <32 x i8> %86, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %90 = bitcast <32 x i8> %89 to <4 x i64>
  %91 = bitcast <4 x i64> %81 to <32 x i8>
  %92 = bitcast <4 x i64> %82 to <32 x i8>
  %93 = shufflevector <32 x i8> %91, <32 x i8> %92, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %94 = bitcast <32 x i8> %93 to <4 x i64>
  %95 = shufflevector <32 x i8> %91, <32 x i8> %92, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %96 = bitcast <32 x i8> %95 to <4 x i64>
  br i1 %36, label %97, label %165

97:                                               ; preds = %40
  %98 = shufflevector <32 x i8> %83, <32 x i8> %84, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %99 = shufflevector <32 x i8> %83, <32 x i8> %84, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %100

100:                                              ; preds = %100, %97
  %101 = phi i8* [ %44, %97 ], [ %149, %100 ]
  %102 = phi i8* [ %42, %97 ], [ %162, %100 ]
  %103 = phi i32 [ %10, %97 ], [ %163, %100 ]
  %104 = phi <4 x i64> [ %76, %97 ], [ %121, %100 ]
  %105 = phi <32 x i8> [ %98, %97 ], [ %106, %100 ]
  %106 = phi <32 x i8> [ %89, %97 ], [ %108, %100 ]
  %107 = phi <4 x i64> [ %96, %97 ], [ %128, %100 ]
  %108 = phi <32 x i8> [ %95, %97 ], [ %127, %100 ]
  %109 = phi <32 x i8> [ %99, %97 ], [ %110, %100 ]
  %110 = phi <32 x i8> [ %87, %97 ], [ %112, %100 ]
  %111 = phi <4 x i64> [ %94, %97 ], [ %126, %100 ]
  %112 = phi <32 x i8> [ %93, %97 ], [ %125, %100 ]
  %113 = getelementptr inbounds i8, i8* %101, i64 %37
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1
  %116 = shufflevector <2 x i64> %115, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %117 = shufflevector <4 x i64> %104, <4 x i64> %116, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %118 = getelementptr inbounds i8, i8* %101, i64 %38
  %119 = bitcast i8* %118 to <2 x i64>*
  %120 = load <2 x i64>, <2 x i64>* %119, align 1
  %121 = shufflevector <2 x i64> %120, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = shufflevector <2 x i64> %115, <2 x i64> %120, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = bitcast <4 x i64> %117 to <32 x i8>
  %124 = bitcast <4 x i64> %122 to <32 x i8>
  %125 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %126 = bitcast <32 x i8> %125 to <4 x i64>
  %127 = shufflevector <32 x i8> %123, <32 x i8> %124, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %128 = bitcast <32 x i8> %127 to <4 x i64>
  %129 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %109, <32 x i8> %48) #6
  %130 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %110, <32 x i8> %50) #6
  %131 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %112, <32 x i8> %52) #6
  %132 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %125, <32 x i8> %54) #6
  %133 = add <16 x i16> %132, %130
  %134 = add <16 x i16> %129, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %135 = add <16 x i16> %134, %131
  %136 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %135, <16 x i16> %133) #6
  %137 = ashr <16 x i16> %136, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %138 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %105, <32 x i8> %48) #6
  %139 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %106, <32 x i8> %50) #6
  %140 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %108, <32 x i8> %52) #6
  %141 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %127, <32 x i8> %54) #6
  %142 = add <16 x i16> %141, %139
  %143 = add <16 x i16> %138, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %144 = add <16 x i16> %143, %140
  %145 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %144, <16 x i16> %142) #6
  %146 = ashr <16 x i16> %145, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %147 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %137, <16 x i16> %146) #6
  %148 = bitcast <32 x i8> %147 to <4 x i64>
  %149 = getelementptr inbounds i8, i8* %101, i64 %30
  %150 = shufflevector <4 x i64> %148, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %151 = bitcast <32 x i8> %147 to <8 x i32>
  %152 = shufflevector <8 x i32> %151, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %153 = bitcast i8* %102 to <16 x i8>*
  %154 = load <16 x i8>, <16 x i8>* %153, align 16
  %155 = bitcast <2 x i64> %150 to <16 x i8>
  %156 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %155, <16 x i8> %154) #6
  %157 = getelementptr inbounds i8, i8* %102, i64 %3
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 16
  %160 = bitcast <4 x i32> %152 to <16 x i8>
  %161 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %160, <16 x i8> %159) #6
  store <16 x i8> %156, <16 x i8>* %153, align 16
  store <16 x i8> %161, <16 x i8>* %158, align 16
  %162 = getelementptr inbounds i8, i8* %102, i64 %31
  %163 = add i32 %103, -2
  %164 = icmp ugt i32 %163, 1
  br i1 %164, label %100, label %165

165:                                              ; preds = %100, %40
  %166 = phi <4 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, %40 ], [ %126, %100 ]
  %167 = phi <4 x i64> [ %94, %40 ], [ %126, %100 ]
  %168 = phi <4 x i64> [ %88, %40 ], [ %111, %100 ]
  %169 = phi <4 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, %40 ], [ %128, %100 ]
  %170 = phi <4 x i64> [ %96, %40 ], [ %128, %100 ]
  %171 = phi <4 x i64> [ %90, %40 ], [ %107, %100 ]
  %172 = phi <4 x i64> [ %76, %40 ], [ %121, %100 ]
  %173 = phi i32 [ %10, %40 ], [ %39, %100 ]
  %174 = phi i8* [ %42, %40 ], [ %162, %100 ]
  %175 = phi i8* [ %44, %40 ], [ %149, %100 ]
  %176 = icmp eq i32 %173, 1
  br i1 %176, label %177, label %227

177:                                              ; preds = %165
  %178 = getelementptr inbounds i8, i8* %175, i64 %37
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = shufflevector <4 x i64> %172, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %182 = bitcast <2 x i64> %181 to <16 x i8>
  %183 = shufflevector <16 x i8> %182, <16 x i8> %180, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %184 = shufflevector <16 x i8> %182, <16 x i8> %180, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %185 = shufflevector <4 x i64> %49, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %186 = bitcast <2 x i64> %185 to <16 x i8>
  %187 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %183, <16 x i8> %186) #6
  %188 = shufflevector <4 x i64> %168, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %189 = shufflevector <4 x i64> %51, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %190 = bitcast <2 x i64> %188 to <16 x i8>
  %191 = bitcast <2 x i64> %189 to <16 x i8>
  %192 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %190, <16 x i8> %191) #6
  %193 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %194 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <2 x i64> %193 to <16 x i8>
  %196 = bitcast <2 x i64> %194 to <16 x i8>
  %197 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %195, <16 x i8> %196) #6
  %198 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %199 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %200 = bitcast <2 x i64> %198 to <16 x i8>
  %201 = bitcast <2 x i64> %199 to <16 x i8>
  %202 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %200, <16 x i8> %201) #6
  %203 = add <8 x i16> %202, %192
  %204 = add <8 x i16> %187, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %205 = add <8 x i16> %204, %197
  %206 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %205, <8 x i16> %203) #6
  %207 = ashr <8 x i16> %206, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %208 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %186) #6
  %209 = shufflevector <4 x i64> %171, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = bitcast <2 x i64> %209 to <16 x i8>
  %211 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %210, <16 x i8> %191) #6
  %212 = shufflevector <4 x i64> %170, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %213 = bitcast <2 x i64> %212 to <16 x i8>
  %214 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %213, <16 x i8> %196) #6
  %215 = shufflevector <4 x i64> %169, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %216 = bitcast <2 x i64> %215 to <16 x i8>
  %217 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %216, <16 x i8> %201) #6
  %218 = add <8 x i16> %217, %211
  %219 = add <8 x i16> %208, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %220 = add <8 x i16> %219, %214
  %221 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %220, <8 x i16> %218) #6
  %222 = ashr <8 x i16> %221, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %223 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %207, <8 x i16> %222) #6
  %224 = bitcast i8* %174 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 16
  %226 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %223, <16 x i8> %225) #6
  store <16 x i8> %226, <16 x i8>* %224, align 16
  br label %227

227:                                              ; preds = %165, %177
  %228 = getelementptr inbounds i8, i8* %41, i64 16
  %229 = getelementptr inbounds i8, i8* %42, i64 16
  %230 = add nsw i32 %43, -16
  %231 = icmp sgt i32 %230, 15
  br i1 %231, label %40, label %232

232:                                              ; preds = %227
  %233 = and i32 %9, 15
  br label %234

234:                                              ; preds = %232, %25
  %235 = phi i32 [ %9, %25 ], [ %233, %232 ]
  %236 = phi i8* [ %2, %25 ], [ %229, %232 ]
  %237 = phi i8* [ %0, %25 ], [ %228, %232 ]
  switch i32 %235, label %487 [
    i32 8, label %238
    i32 4, label %241
  ]

238:                                              ; preds = %234
  %239 = mul i64 %1, -3
  %240 = getelementptr inbounds i8, i8* %237, i64 %239
  tail call void @vpx_filter_block1d8_v8_avg_ssse3(i8* %240, i64 %1, i8* %236, i64 %3, i32 %10, i16* %13) #6
  br label %487

241:                                              ; preds = %234
  %242 = mul i64 %1, -3
  %243 = getelementptr inbounds i8, i8* %237, i64 %242
  tail call void @vpx_filter_block1d4_v8_avg_ssse3(i8* %243, i64 %1, i8* %236, i64 %3, i32 %10, i16* %13) #6
  br label %487

244:                                              ; preds = %11
  %245 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 2
  %246 = load i16, i16* %245, align 2
  %247 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %12, i64 5
  %248 = load i16, i16* %247, align 2
  %249 = or i16 %248, %246
  %250 = icmp eq i16 %249, 0
  %251 = icmp sgt i32 %9, 15
  br i1 %250, label %266, label %252

252:                                              ; preds = %244
  br i1 %251, label %253, label %461

253:                                              ; preds = %252
  %254 = mul i64 %1, -3
  %255 = bitcast i16* %13 to <2 x i64>*
  %256 = shl i64 %1, 1
  %257 = shl i64 %3, 1
  %258 = mul nsw i64 %1, 3
  %259 = shl nsw i64 %1, 2
  %260 = mul nsw i64 %1, 5
  %261 = mul nsw i64 %1, 6
  %262 = icmp ugt i32 %10, 1
  %263 = mul nsw i64 %1, 7
  %264 = shl nsw i64 %1, 3
  %265 = and i32 %10, 1
  br label %267

266:                                              ; preds = %244
  br i1 %251, label %471, label %481

267:                                              ; preds = %253, %454
  %268 = phi i8* [ %0, %253 ], [ %455, %454 ]
  %269 = phi i8* [ %2, %253 ], [ %456, %454 ]
  %270 = phi i32 [ %9, %253 ], [ %457, %454 ]
  %271 = getelementptr inbounds i8, i8* %268, i64 %254
  %272 = load <2 x i64>, <2 x i64>* %255, align 16
  %273 = shufflevector <2 x i64> %272, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %274 = bitcast <4 x i64> %273 to <32 x i8>
  %275 = shufflevector <32 x i8> %274, <32 x i8> undef, <32 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18, i32 16, i32 18>
  %276 = bitcast <32 x i8> %275 to <4 x i64>
  %277 = shufflevector <32 x i8> %274, <32 x i8> undef, <32 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22, i32 20, i32 22>
  %278 = bitcast <32 x i8> %277 to <4 x i64>
  %279 = shufflevector <32 x i8> %274, <32 x i8> undef, <32 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26, i32 24, i32 26>
  %280 = bitcast <32 x i8> %279 to <4 x i64>
  %281 = shufflevector <32 x i8> %274, <32 x i8> undef, <32 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30, i32 28, i32 30>
  %282 = bitcast <32 x i8> %281 to <4 x i64>
  %283 = bitcast i8* %271 to <2 x i64>*
  %284 = load <2 x i64>, <2 x i64>* %283, align 1
  %285 = getelementptr inbounds i8, i8* %271, i64 %1
  %286 = bitcast i8* %285 to <2 x i64>*
  %287 = load <2 x i64>, <2 x i64>* %286, align 1
  %288 = getelementptr inbounds i8, i8* %271, i64 %256
  %289 = bitcast i8* %288 to <2 x i64>*
  %290 = load <2 x i64>, <2 x i64>* %289, align 1
  %291 = getelementptr inbounds i8, i8* %271, i64 %258
  %292 = bitcast i8* %291 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 1
  %294 = getelementptr inbounds i8, i8* %271, i64 %259
  %295 = bitcast i8* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1
  %297 = getelementptr inbounds i8, i8* %271, i64 %260
  %298 = bitcast i8* %297 to <2 x i64>*
  %299 = load <2 x i64>, <2 x i64>* %298, align 1
  %300 = getelementptr inbounds i8, i8* %271, i64 %261
  %301 = bitcast i8* %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 1
  %303 = shufflevector <2 x i64> %302, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %304 = shufflevector <2 x i64> %284, <2 x i64> %287, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %305 = shufflevector <2 x i64> %287, <2 x i64> %290, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %306 = shufflevector <2 x i64> %290, <2 x i64> %293, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %307 = shufflevector <2 x i64> %293, <2 x i64> %296, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %308 = shufflevector <2 x i64> %296, <2 x i64> %299, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %309 = shufflevector <2 x i64> %299, <2 x i64> %302, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %310 = bitcast <4 x i64> %304 to <32 x i8>
  %311 = bitcast <4 x i64> %305 to <32 x i8>
  %312 = bitcast <4 x i64> %306 to <32 x i8>
  %313 = bitcast <4 x i64> %307 to <32 x i8>
  %314 = shufflevector <32 x i8> %312, <32 x i8> %313, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %315 = bitcast <32 x i8> %314 to <4 x i64>
  %316 = shufflevector <32 x i8> %312, <32 x i8> %313, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %317 = bitcast <32 x i8> %316 to <4 x i64>
  %318 = bitcast <4 x i64> %308 to <32 x i8>
  %319 = bitcast <4 x i64> %309 to <32 x i8>
  %320 = shufflevector <32 x i8> %318, <32 x i8> %319, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %321 = bitcast <32 x i8> %320 to <4 x i64>
  %322 = shufflevector <32 x i8> %318, <32 x i8> %319, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %323 = bitcast <32 x i8> %322 to <4 x i64>
  br i1 %262, label %324, label %392

324:                                              ; preds = %267
  %325 = shufflevector <32 x i8> %310, <32 x i8> %311, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %326 = shufflevector <32 x i8> %310, <32 x i8> %311, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  br label %327

327:                                              ; preds = %327, %324
  %328 = phi i8* [ %271, %324 ], [ %376, %327 ]
  %329 = phi i8* [ %269, %324 ], [ %389, %327 ]
  %330 = phi i32 [ %10, %324 ], [ %390, %327 ]
  %331 = phi <4 x i64> [ %303, %324 ], [ %348, %327 ]
  %332 = phi <32 x i8> [ %325, %324 ], [ %333, %327 ]
  %333 = phi <32 x i8> [ %316, %324 ], [ %335, %327 ]
  %334 = phi <4 x i64> [ %323, %324 ], [ %355, %327 ]
  %335 = phi <32 x i8> [ %322, %324 ], [ %354, %327 ]
  %336 = phi <32 x i8> [ %326, %324 ], [ %337, %327 ]
  %337 = phi <32 x i8> [ %314, %324 ], [ %339, %327 ]
  %338 = phi <4 x i64> [ %321, %324 ], [ %353, %327 ]
  %339 = phi <32 x i8> [ %320, %324 ], [ %352, %327 ]
  %340 = getelementptr inbounds i8, i8* %328, i64 %263
  %341 = bitcast i8* %340 to <2 x i64>*
  %342 = load <2 x i64>, <2 x i64>* %341, align 1
  %343 = shufflevector <2 x i64> %342, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %344 = shufflevector <4 x i64> %331, <4 x i64> %343, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %345 = getelementptr inbounds i8, i8* %328, i64 %264
  %346 = bitcast i8* %345 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %346, align 1
  %348 = shufflevector <2 x i64> %347, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %349 = shufflevector <2 x i64> %342, <2 x i64> %347, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %350 = bitcast <4 x i64> %344 to <32 x i8>
  %351 = bitcast <4 x i64> %349 to <32 x i8>
  %352 = shufflevector <32 x i8> %350, <32 x i8> %351, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %353 = bitcast <32 x i8> %352 to <4 x i64>
  %354 = shufflevector <32 x i8> %350, <32 x i8> %351, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %355 = bitcast <32 x i8> %354 to <4 x i64>
  %356 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %336, <32 x i8> %275) #6
  %357 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %337, <32 x i8> %277) #6
  %358 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %339, <32 x i8> %279) #6
  %359 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %352, <32 x i8> %281) #6
  %360 = add <16 x i16> %359, %357
  %361 = add <16 x i16> %356, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %362 = add <16 x i16> %361, %358
  %363 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %362, <16 x i16> %360) #6
  %364 = ashr <16 x i16> %363, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %365 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %332, <32 x i8> %275) #6
  %366 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %333, <32 x i8> %277) #6
  %367 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %335, <32 x i8> %279) #6
  %368 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %354, <32 x i8> %281) #6
  %369 = add <16 x i16> %368, %366
  %370 = add <16 x i16> %365, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %371 = add <16 x i16> %370, %367
  %372 = tail call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %371, <16 x i16> %369) #6
  %373 = ashr <16 x i16> %372, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %374 = tail call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %364, <16 x i16> %373) #6
  %375 = bitcast <32 x i8> %374 to <4 x i64>
  %376 = getelementptr inbounds i8, i8* %328, i64 %256
  %377 = shufflevector <4 x i64> %375, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %378 = bitcast <32 x i8> %374 to <8 x i32>
  %379 = shufflevector <8 x i32> %378, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %380 = bitcast i8* %329 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 16
  %382 = bitcast <2 x i64> %377 to <16 x i8>
  %383 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %382, <16 x i8> %381) #6
  %384 = getelementptr inbounds i8, i8* %329, i64 %3
  %385 = bitcast i8* %384 to <16 x i8>*
  %386 = load <16 x i8>, <16 x i8>* %385, align 16
  %387 = bitcast <4 x i32> %379 to <16 x i8>
  %388 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %387, <16 x i8> %386) #6
  store <16 x i8> %383, <16 x i8>* %380, align 16
  store <16 x i8> %388, <16 x i8>* %385, align 16
  %389 = getelementptr inbounds i8, i8* %329, i64 %257
  %390 = add i32 %330, -2
  %391 = icmp ugt i32 %390, 1
  br i1 %391, label %327, label %392

392:                                              ; preds = %327, %267
  %393 = phi <4 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, %267 ], [ %353, %327 ]
  %394 = phi <4 x i64> [ %321, %267 ], [ %353, %327 ]
  %395 = phi <4 x i64> [ %315, %267 ], [ %338, %327 ]
  %396 = phi <4 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, %267 ], [ %355, %327 ]
  %397 = phi <4 x i64> [ %323, %267 ], [ %355, %327 ]
  %398 = phi <4 x i64> [ %317, %267 ], [ %334, %327 ]
  %399 = phi <4 x i64> [ %303, %267 ], [ %348, %327 ]
  %400 = phi i32 [ %10, %267 ], [ %265, %327 ]
  %401 = phi i8* [ %269, %267 ], [ %389, %327 ]
  %402 = phi i8* [ %271, %267 ], [ %376, %327 ]
  %403 = icmp eq i32 %400, 1
  br i1 %403, label %404, label %454

404:                                              ; preds = %392
  %405 = getelementptr inbounds i8, i8* %402, i64 %263
  %406 = bitcast i8* %405 to <16 x i8>*
  %407 = load <16 x i8>, <16 x i8>* %406, align 1
  %408 = shufflevector <4 x i64> %399, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %409 = bitcast <2 x i64> %408 to <16 x i8>
  %410 = shufflevector <16 x i8> %409, <16 x i8> %407, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %411 = shufflevector <16 x i8> %409, <16 x i8> %407, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %412 = shufflevector <4 x i64> %276, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %413 = bitcast <2 x i64> %412 to <16 x i8>
  %414 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %410, <16 x i8> %413) #6
  %415 = shufflevector <4 x i64> %395, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %416 = shufflevector <4 x i64> %278, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %417 = bitcast <2 x i64> %415 to <16 x i8>
  %418 = bitcast <2 x i64> %416 to <16 x i8>
  %419 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %417, <16 x i8> %418) #6
  %420 = shufflevector <4 x i64> %394, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %421 = shufflevector <4 x i64> %280, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %422 = bitcast <2 x i64> %420 to <16 x i8>
  %423 = bitcast <2 x i64> %421 to <16 x i8>
  %424 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %422, <16 x i8> %423) #6
  %425 = shufflevector <4 x i64> %393, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %426 = shufflevector <4 x i64> %282, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %427 = bitcast <2 x i64> %425 to <16 x i8>
  %428 = bitcast <2 x i64> %426 to <16 x i8>
  %429 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %427, <16 x i8> %428) #6
  %430 = add <8 x i16> %429, %419
  %431 = add <8 x i16> %414, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %432 = add <8 x i16> %431, %424
  %433 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %432, <8 x i16> %430) #6
  %434 = ashr <8 x i16> %433, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %435 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %411, <16 x i8> %413) #6
  %436 = shufflevector <4 x i64> %398, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %437 = bitcast <2 x i64> %436 to <16 x i8>
  %438 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %437, <16 x i8> %418) #6
  %439 = shufflevector <4 x i64> %397, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %440 = bitcast <2 x i64> %439 to <16 x i8>
  %441 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %440, <16 x i8> %423) #6
  %442 = shufflevector <4 x i64> %396, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %443 = bitcast <2 x i64> %442 to <16 x i8>
  %444 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %443, <16 x i8> %428) #6
  %445 = add <8 x i16> %444, %438
  %446 = add <8 x i16> %435, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %447 = add <8 x i16> %446, %441
  %448 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %447, <8 x i16> %445) #6
  %449 = ashr <8 x i16> %448, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %450 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %434, <8 x i16> %449) #6
  %451 = bitcast i8* %401 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 16
  %453 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %450, <16 x i8> %452) #6
  store <16 x i8> %453, <16 x i8>* %451, align 16
  br label %454

454:                                              ; preds = %392, %404
  %455 = getelementptr inbounds i8, i8* %268, i64 16
  %456 = getelementptr inbounds i8, i8* %269, i64 16
  %457 = add nsw i32 %270, -16
  %458 = icmp sgt i32 %457, 15
  br i1 %458, label %267, label %459

459:                                              ; preds = %454
  %460 = and i32 %9, 15
  br label %461

461:                                              ; preds = %459, %252
  %462 = phi i32 [ %9, %252 ], [ %460, %459 ]
  %463 = phi i8* [ %2, %252 ], [ %456, %459 ]
  %464 = phi i8* [ %0, %252 ], [ %455, %459 ]
  switch i32 %462, label %487 [
    i32 8, label %465
    i32 4, label %468
  ]

465:                                              ; preds = %461
  %466 = mul i64 %1, -3
  %467 = getelementptr inbounds i8, i8* %464, i64 %466
  tail call void @vpx_filter_block1d8_v8_avg_ssse3(i8* %467, i64 %1, i8* %463, i64 %3, i32 %10, i16* %13) #6
  br label %487

468:                                              ; preds = %461
  %469 = mul i64 %1, -3
  %470 = getelementptr inbounds i8, i8* %464, i64 %469
  tail call void @vpx_filter_block1d4_v8_avg_ssse3(i8* %470, i64 %1, i8* %463, i64 %3, i32 %10, i16* %13) #6
  br label %487

471:                                              ; preds = %266, %471
  %472 = phi i8* [ %475, %471 ], [ %0, %266 ]
  %473 = phi i8* [ %476, %471 ], [ %2, %266 ]
  %474 = phi i32 [ %477, %471 ], [ %9, %266 ]
  tail call void @vpx_filter_block1d16_v2_avg_ssse3(i8* %472, i64 %1, i8* %473, i64 %3, i32 %10, i16* %13) #6
  %475 = getelementptr inbounds i8, i8* %472, i64 16
  %476 = getelementptr inbounds i8, i8* %473, i64 16
  %477 = add nsw i32 %474, -16
  %478 = icmp sgt i32 %477, 15
  br i1 %478, label %471, label %479

479:                                              ; preds = %471
  %480 = and i32 %9, 15
  br label %481

481:                                              ; preds = %479, %266
  %482 = phi i32 [ %9, %266 ], [ %480, %479 ]
  %483 = phi i8* [ %2, %266 ], [ %476, %479 ]
  %484 = phi i8* [ %0, %266 ], [ %475, %479 ]
  switch i32 %482, label %487 [
    i32 8, label %485
    i32 4, label %486
  ]

485:                                              ; preds = %481
  tail call void @vpx_filter_block1d8_v2_avg_ssse3(i8* %484, i64 %1, i8* %483, i64 %3, i32 %10, i16* %13) #6
  br label %487

486:                                              ; preds = %481
  tail call void @vpx_filter_block1d4_v2_avg_ssse3(i8* %484, i64 %1, i8* %483, i64 %3, i32 %10, i16* %13) #6
  br label %487

487:                                              ; preds = %485, %486, %481, %465, %468, %461, %238, %241, %234
  ret void
}

declare void @vpx_filter_block1d8_v8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v8_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d16_v2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d8_v2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

declare void @vpx_filter_block1d4_v2_avg_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avx2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %12 = alloca [4544 x i8], align 16
  %13 = alloca [4544 x i8], align 16
  %14 = alloca [4160 x i8], align 16
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 0
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %19, %17
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 6
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 7
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %29) #6
  %30 = mul i64 %1, -3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_avx2(i8* %31, i64 %1, i8* nonnull %29, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %32)
  %33 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 192
  call void @vpx_convolve8_vert_avx2(i8* %33, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %29) #6
  br label %50

34:                                               ; preds = %11
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 2
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = or i16 %38, %36
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %42) #6
  %43 = sub i64 0, %1
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %10, 3
  call void @vpx_convolve8_horiz_avx2(i8* %44, i64 %1, i8* nonnull %42, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %45)
  %46 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 64
  call void @vpx_convolve8_vert_avx2(i8* %46, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %42) #6
  br label %50

47:                                               ; preds = %34
  %48 = getelementptr inbounds [4160 x i8], [4160 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %48) #6
  %49 = add nsw i32 %10, 1
  call void @vpx_convolve8_horiz_avx2(i8* %0, i64 %1, i8* nonnull %48, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %49)
  call void @vpx_convolve8_vert_avx2(i8* nonnull %48, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %48) #6
  br label %50

50:                                               ; preds = %41, %47, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_avx2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %12 = alloca [4544 x i8], align 16
  %13 = alloca [4544 x i8], align 16
  %14 = alloca [4160 x i8], align 16
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 0
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %19, %17
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 6
  %22 = load i16, i16* %21, align 2
  %23 = or i16 %20, %22
  %24 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 7
  %25 = load i16, i16* %24, align 2
  %26 = or i16 %23, %25
  %27 = icmp eq i16 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %11
  %29 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %29) #6
  %30 = mul i64 %1, -3
  %31 = getelementptr inbounds i8, i8* %0, i64 %30
  %32 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_avx2(i8* %31, i64 %1, i8* nonnull %29, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %32)
  %33 = getelementptr inbounds [4544 x i8], [4544 x i8]* %12, i64 0, i64 192
  call void @vpx_convolve8_avg_vert_avx2(i8* %33, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %29) #6
  br label %50

34:                                               ; preds = %11
  %35 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 2
  %36 = load i16, i16* %35, align 2
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %15, i64 5
  %38 = load i16, i16* %37, align 2
  %39 = or i16 %38, %36
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4544, i8* nonnull %42) #6
  %43 = mul i64 %1, -3
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = add nsw i32 %10, 7
  call void @vpx_convolve8_horiz_avx2(i8* %44, i64 %1, i8* nonnull %42, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %45)
  %46 = getelementptr inbounds [4544 x i8], [4544 x i8]* %13, i64 0, i64 192
  call void @vpx_convolve8_avg_vert_avx2(i8* %46, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4544, i8* nonnull %42) #6
  br label %50

47:                                               ; preds = %34
  %48 = getelementptr inbounds [4160 x i8], [4160 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4160, i8* nonnull %48) #6
  %49 = add nsw i32 %10, 1
  call void @vpx_convolve8_horiz_avx2(i8* %0, i64 %1, i8* nonnull %48, i64 64, [8 x i16]* %4, i32 %5, i32 undef, i32 undef, i32 undef, i32 %9, i32 %49)
  call void @vpx_convolve8_avg_vert_avx2(i8* nonnull %48, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 undef, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 4160, i8* nonnull %48) #6
  br label %50

50:                                               ; preds = %41, %47, %28
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #4

; Function Attrs: nounwind readnone speculatable
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #5

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.phadd.sw(<16 x i16>, <16 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16>, <8 x i16>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
