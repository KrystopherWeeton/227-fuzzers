; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_psengine.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_psengine.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.(anonymous namespace)::PDF_PSOpName" = type { [9 x i8], i8 }
%class.CPDF_PSOP = type { i8, float, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CPDF_PSProc* }
%class.CPDF_PSProc = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.CPDF_PSOP* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::unique_ptr.0"* }
%class.CPDF_PSEngine = type { i32, %class.CPDF_PSProc, [100 x float] }
%class.CPDF_SimpleParser = type <{ %"class.pdfium::span", i32, [4 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.std::__1::allocator" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_ = comdat any

$_ZNSt3__116allocator_traitsINS_9allocatorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS3_EEEEEEE7destroyIS6_vEEvRS7_PT_ = comdat any

$_ZNSt3__16vectorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

@_ZN12_GLOBAL__N_110kPsOpNamesE = internal constant [42 x %"struct.(anonymous namespace)::PDF_PSOpName"] [%"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"abs\00\00\00\00\00\00", i8 7 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"add\00\00\00\00\00\00", i8 0 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"and\00\00\00\00\00\00", i8 27 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"atan\00\00\00\00\00", i8 15 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"bitshift\00", i8 31 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"ceiling\00\00", i8 8 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"copy\00\00\00\00\00", i8 39 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"cos\00\00\00\00\00\00", i8 14 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"cvi\00\00\00\00\00\00", i8 19 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"cvr\00\00\00\00\00\00", i8 20 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"div\00\00\00\00\00\00", i8 3 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"dup\00\00\00\00\00\00", i8 38 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"eq\00\00\00\00\00\00\00", i8 21 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"exch\00\00\00\00\00", i8 37 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"exp\00\00\00\00\00\00", i8 16 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"false\00\00\00\00", i8 33 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"floor\00\00\00\00", i8 9 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"ge\00\00\00\00\00\00\00", i8 24 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"gt\00\00\00\00\00\00\00", i8 23 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"idiv\00\00\00\00\00", i8 4 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"if\00\00\00\00\00\00\00", i8 34 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"ifelse\00\00\00", i8 35 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"index\00\00\00\00", i8 40 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"le\00\00\00\00\00\00\00", i8 26 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"ln\00\00\00\00\00\00\00", i8 17 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"log\00\00\00\00\00\00", i8 18 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"lt\00\00\00\00\00\00\00", i8 25 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"mod\00\00\00\00\00\00", i8 5 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"mul\00\00\00\00\00\00", i8 2 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"ne\00\00\00\00\00\00\00", i8 22 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"neg\00\00\00\00\00\00", i8 6 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"not\00\00\00\00\00\00", i8 30 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"or\00\00\00\00\00\00\00", i8 28 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"pop\00\00\00\00\00\00", i8 36 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"roll\00\00\00\00\00", i8 41 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"round\00\00\00\00", i8 10 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"sin\00\00\00\00\00\00", i8 13 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"sqrt\00\00\00\00\00", i8 12 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"sub\00\00\00\00\00\00", i8 1 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"true\00\00\00\00\00", i8 32 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"truncate\00", i8 11 }, %"struct.(anonymous namespace)::PDF_PSOpName" { [9 x i8] c"xor\00\00\00\00\00\00", i8 29 }], align 16

@_ZN9CPDF_PSOPC1Ev = hidden unnamed_addr alias void (%class.CPDF_PSOP*), void (%class.CPDF_PSOP*)* @_ZN9CPDF_PSOPC2Ev
@_ZN9CPDF_PSOPC1E8PDF_PSOP = hidden unnamed_addr alias void (%class.CPDF_PSOP*, i8), void (%class.CPDF_PSOP*, i8)* @_ZN9CPDF_PSOPC2E8PDF_PSOP
@_ZN9CPDF_PSOPC1Ef = hidden unnamed_addr alias void (%class.CPDF_PSOP*, float), void (%class.CPDF_PSOP*, float)* @_ZN9CPDF_PSOPC2Ef
@_ZN9CPDF_PSOPD1Ev = hidden unnamed_addr alias void (%class.CPDF_PSOP*), void (%class.CPDF_PSOP*)* @_ZN9CPDF_PSOPD2Ev
@_ZN11CPDF_PSProcC1Ev = hidden unnamed_addr alias void (%class.CPDF_PSProc*), void (%class.CPDF_PSProc*)* @_ZN11CPDF_PSProcC2Ev
@_ZN11CPDF_PSProcD1Ev = hidden unnamed_addr alias void (%class.CPDF_PSProc*), void (%class.CPDF_PSProc*)* @_ZN11CPDF_PSProcD2Ev
@_ZN13CPDF_PSEngineC1Ev = hidden unnamed_addr alias void (%class.CPDF_PSEngine*), void (%class.CPDF_PSEngine*)* @_ZN13CPDF_PSEngineC2Ev
@_ZN13CPDF_PSEngineD1Ev = hidden unnamed_addr alias void (%class.CPDF_PSEngine*), void (%class.CPDF_PSEngine*)* @_ZN13CPDF_PSEngineD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CPDF_PSOPC2Ev(%class.CPDF_PSOP* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 0
  store i8 42, i8* %2, align 8
  %3 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 1
  store float 0.000000e+00, float* %3, align 4
  %4 = tail call i8* @_Znwm(i64 24) #17
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #18
  %5 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %6 = bitcast %class.CPDF_PSProc** %5 to i8**
  store i8* %4, i8** %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9CPDF_PSOPC2E8PDF_PSOP(%class.CPDF_PSOP* nocapture, i8 zeroext) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 0
  store i8 %1, i8* %3, align 8
  %4 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 1
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  store i64 0, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN9CPDF_PSOPC2Ef(%class.CPDF_PSOP* nocapture, float) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 0
  store i8 43, i8* %3, align 8
  %4 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 1
  store float %1, float* %4, align 4
  %5 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 2
  %6 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  store i64 0, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9CPDF_PSOPD2Ev(%class.CPDF_PSOP* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %2, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %2, align 8
  %4 = icmp eq %class.CPDF_PSProc* %3, null
  br i1 %4, label %45, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %3, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %6, align 8
  %8 = icmp eq %"class.std::__1::unique_ptr.0"* %7, null
  br i1 %8, label %43, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.std::__1::unique_ptr.0"* %7 to i8*
  %11 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %3, i64 0, i32 0, i32 0, i32 1
  %12 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %11, align 8
  %13 = icmp eq %"class.std::__1::unique_ptr.0"* %12, %7
  br i1 %13, label %41, label %14

14:                                               ; preds = %9, %36
  %15 = phi %"class.std::__1::unique_ptr.0"* [ %16, %36 ], [ %12, %9 ]
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %15, i64 -1
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %17, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %17, align 8
  %19 = icmp eq %class.CPDF_PSOP* %18, null
  br i1 %19, label %36, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %18, i64 0, i32 2, i32 0, i32 0, i32 0
  %22 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %21, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %21, align 8
  %23 = icmp eq %class.CPDF_PSProc* %22, null
  br i1 %23, label %34, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %22, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %25, align 8
  %27 = icmp eq %"class.std::__1::unique_ptr.0"* %26, null
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %22, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %29, %"class.std::__1::unique_ptr.0"* nonnull %26) #18
  %30 = bitcast %class.CPDF_PSProc* %22 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void @_ZdlPv(i8* %31) #17
  br label %32

32:                                               ; preds = %24, %28
  %33 = bitcast %class.CPDF_PSProc* %22 to i8*
  tail call void @_ZdlPv(i8* %33) #17
  br label %34

34:                                               ; preds = %20, %32
  %35 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %18, i64 0, i32 0
  tail call void @_ZdlPv(i8* %35) #17
  br label %36

36:                                               ; preds = %14, %34
  %37 = icmp eq %"class.std::__1::unique_ptr.0"* %16, %7
  br i1 %37, label %38, label %14

38:                                               ; preds = %36
  %39 = bitcast %class.CPDF_PSProc* %3 to i8**
  %40 = load i8*, i8** %39, align 8
  br label %41

41:                                               ; preds = %9, %38
  %42 = phi i8* [ %40, %38 ], [ %10, %9 ]
  store %"class.std::__1::unique_ptr.0"* %7, %"class.std::__1::unique_ptr.0"** %11, align 8
  tail call void @_ZdlPv(i8* %42) #17
  br label %43

43:                                               ; preds = %5, %41
  %44 = bitcast %class.CPDF_PSProc* %3 to i8*
  tail call void @_ZdlPv(i8* %44) #17
  br label %45

45:                                               ; preds = %1, %43
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_ZNK9CPDF_PSOP13GetFloatValueEv(%class.CPDF_PSOP* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 43
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi float [ %7, %5 ], [ 0.000000e+00, %1 ]
  ret float %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.CPDF_PSProc* @_ZNK9CPDF_PSOP7GetProcEv(%class.CPDF_PSOP* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 42
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi %class.CPDF_PSProc* [ %7, %5 ], [ null, %1 ]
  ret %class.CPDF_PSProc* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13CPDF_PSEngine7ExecuteEv(%class.CPDF_PSEngine*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 1
  %3 = tail call zeroext i1 @_ZN11CPDF_PSProc7ExecuteEP13CPDF_PSEngine(%class.CPDF_PSProc* %2, %class.CPDF_PSEngine* %0)
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11CPDF_PSProc7ExecuteEP13CPDF_PSEngine(%class.CPDF_PSProc* nocapture readonly, %class.CPDF_PSEngine*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.0"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %class.CPDF_PSProc* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  br i1 %8, label %114, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %1, i64 0, i32 0
  br label %12

12:                                               ; preds = %9, %107
  %13 = phi i64 [ %7, %9 ], [ %110, %107 ]
  %14 = phi i64 [ 0, %9 ], [ %108, %107 ]
  %15 = inttoptr i64 %13 to %"class.std::__1::unique_ptr.0"*
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %15, i64 %14, i32 0, i32 0, i32 0
  %17 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %16, align 8
  %18 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %17, i64 0, i32 0
  %19 = load i8, i8* %18, align 8
  switch i8 %19, label %105 [
    i8 42, label %107
    i8 43, label %20
    i8 34, label %31
    i8 35, label %63
  ]

20:                                               ; preds = %12
  %21 = load i32, i32* %11, align 8
  %22 = icmp ult i32 %21, 100
  br i1 %22, label %23, label %107

23:                                               ; preds = %20
  %24 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %17, i64 0, i32 1
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = add nuw nsw i32 %21, 1
  store i32 %27, i32* %11, align 8
  %28 = zext i32 %21 to i64
  %29 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %1, i64 0, i32 2, i64 %28
  %30 = bitcast float* %29 to i32*
  store i32 %26, i32* %30, align 4
  br label %107

31:                                               ; preds = %12
  %32 = icmp eq i64 %14, 0
  br i1 %32, label %114, label %33

33:                                               ; preds = %31
  %34 = add i64 %14, -1
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %15, i64 %34, i32 0, i32 0, i32 0
  %36 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %35, align 8
  %37 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %36, i64 0, i32 0
  %38 = load i8, i8* %37, align 8
  %39 = icmp eq i8 %38, 42
  br i1 %39, label %40, label %114

40:                                               ; preds = %33
  %41 = load i32, i32* %11, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %107, label %43

43:                                               ; preds = %40
  %44 = add i32 %41, -1
  store i32 %44, i32* %11, align 8
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %1, i64 0, i32 2, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fptosi float %47 to i32
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %107, label %50

50:                                               ; preds = %43
  %51 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %10, align 8
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %51, i64 %34, i32 0, i32 0, i32 0
  %53 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %52, align 8
  %54 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %53, i64 0, i32 0
  %55 = load i8, i8* %54, align 8
  %56 = icmp eq i8 %55, 42
  br i1 %56, label %57, label %60

57:                                               ; preds = %50
  %58 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %53, i64 0, i32 2, i32 0, i32 0, i32 0
  %59 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %58, align 8
  br label %60

60:                                               ; preds = %50, %57
  %61 = phi %class.CPDF_PSProc* [ %59, %57 ], [ null, %50 ]
  %62 = tail call zeroext i1 @_ZN11CPDF_PSProc7ExecuteEP13CPDF_PSEngine(%class.CPDF_PSProc* %61, %class.CPDF_PSEngine* %1)
  br label %107

63:                                               ; preds = %12
  %64 = icmp ult i64 %14, 2
  br i1 %64, label %114, label %65

65:                                               ; preds = %63
  %66 = add i64 %14, -1
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %15, i64 %66, i32 0, i32 0, i32 0
  %68 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %67, align 8
  %69 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %68, i64 0, i32 0
  %70 = load i8, i8* %69, align 8
  %71 = icmp eq i8 %70, 42
  br i1 %71, label %72, label %114

72:                                               ; preds = %65
  %73 = add i64 %14, -2
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %15, i64 %73, i32 0, i32 0, i32 0
  %75 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %74, align 8
  %76 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %75, i64 0, i32 0
  %77 = load i8, i8* %76, align 8
  %78 = icmp eq i8 %77, 42
  br i1 %78, label %79, label %114

79:                                               ; preds = %72
  %80 = load i32, i32* %11, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %89, label %82

82:                                               ; preds = %79
  %83 = add i32 %80, -1
  store i32 %83, i32* %11, align 8
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %1, i64 0, i32 2, i64 %84
  %86 = load float, float* %85, align 4
  %87 = fptosi float %86 to i32
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %79, %82
  br label %90

90:                                               ; preds = %82, %89
  %91 = phi i64 [ 1, %89 ], [ 2, %82 ]
  %92 = sub nuw i64 %14, %91
  %93 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %10, align 8
  %94 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %93, i64 %92, i32 0, i32 0, i32 0
  %95 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %94, align 8
  %96 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %95, i64 0, i32 0
  %97 = load i8, i8* %96, align 8
  %98 = icmp eq i8 %97, 42
  br i1 %98, label %99, label %102

99:                                               ; preds = %90
  %100 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %95, i64 0, i32 2, i32 0, i32 0, i32 0
  %101 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %100, align 8
  br label %102

102:                                              ; preds = %90, %99
  %103 = phi %class.CPDF_PSProc* [ %101, %99 ], [ null, %90 ]
  %104 = tail call zeroext i1 @_ZN11CPDF_PSProc7ExecuteEP13CPDF_PSEngine(%class.CPDF_PSProc* %103, %class.CPDF_PSEngine* %1)
  br label %107

105:                                              ; preds = %12
  %106 = tail call zeroext i1 @_ZN13CPDF_PSEngine10DoOperatorE8PDF_PSOP(%class.CPDF_PSEngine* %1, i8 zeroext %19)
  br label %107

107:                                              ; preds = %40, %12, %43, %102, %105, %60, %20, %23
  %108 = add nuw i64 %14, 1
  %109 = load i64, i64* %4, align 8
  %110 = load i64, i64* %6, align 8
  %111 = sub i64 %109, %110
  %112 = ashr exact i64 %111, 3
  %113 = icmp ult i64 %108, %112
  br i1 %113, label %12, label %114

114:                                              ; preds = %107, %63, %65, %72, %31, %33, %2
  %115 = phi i1 [ true, %2 ], [ false, %33 ], [ false, %31 ], [ false, %72 ], [ false, %65 ], [ false, %63 ], [ true, %107 ]
  ret i1 %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CPDF_PSProcC2Ev(%class.CPDF_PSProc* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CPDF_PSProc* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CPDF_PSProcD2Ev(%class.CPDF_PSProc* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %2, align 8
  %4 = icmp eq %"class.std::__1::unique_ptr.0"* %3, null
  br i1 %4, label %39, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8*
  %7 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr.0"* %8, %3
  br i1 %9, label %37, label %10

10:                                               ; preds = %5, %32
  %11 = phi %"class.std::__1::unique_ptr.0"* [ %12, %32 ], [ %8, %5 ]
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %11, i64 -1
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %13, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %13, align 8
  %15 = icmp eq %class.CPDF_PSOP* %14, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %14, i64 0, i32 2, i32 0, i32 0, i32 0
  %18 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %17, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %17, align 8
  %19 = icmp eq %class.CPDF_PSProc* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %18, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %21, align 8
  %23 = icmp eq %"class.std::__1::unique_ptr.0"* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %18, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %25, %"class.std::__1::unique_ptr.0"* nonnull %22) #18
  %26 = bitcast %class.CPDF_PSProc* %18 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %27) #17
  br label %28

28:                                               ; preds = %20, %24
  %29 = bitcast %class.CPDF_PSProc* %18 to i8*
  tail call void @_ZdlPv(i8* %29) #17
  br label %30

30:                                               ; preds = %16, %28
  %31 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %14, i64 0, i32 0
  tail call void @_ZdlPv(i8* %31) #17
  br label %32

32:                                               ; preds = %10, %30
  %33 = icmp eq %"class.std::__1::unique_ptr.0"* %12, %3
  br i1 %33, label %34, label %10

34:                                               ; preds = %32
  %35 = bitcast %class.CPDF_PSProc* %0 to i8**
  %36 = load i8*, i8** %35, align 8
  br label %37

37:                                               ; preds = %5, %34
  %38 = phi i8* [ %36, %34 ], [ %6, %5 ]
  store %"class.std::__1::unique_ptr.0"* %3, %"class.std::__1::unique_ptr.0"** %7, align 8
  tail call void @_ZdlPv(i8* %38) #17
  br label %39

39:                                               ; preds = %1, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11CPDF_PSProc5ParseEP17CPDF_SimpleParseri(%class.CPDF_PSProc*, %class.CPDF_SimpleParser*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %5 = alloca %"class.std::__1::unique_ptr.0", align 8
  %6 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %7 = icmp sgt i32 %2, 128
  br i1 %7, label %85, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.fxcrt::StringViewTemplate"* %4 to i8*
  %10 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %4, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %4, i64 0, i32 0, i32 1
  %12 = bitcast %"class.fxcrt::StringViewTemplate"* %6 to i8*
  %13 = bitcast %"class.std::__1::unique_ptr.0"* %5 to i8*
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %5, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::unique_ptr.0"* %5 to i8**
  %16 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %18 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0
  %19 = bitcast %"class.std::__1::unique_ptr.0"** %16 to i64*
  %20 = add nsw i32 %2, 1
  %21 = bitcast %"class.fxcrt::StringViewTemplate"* %4 to i8*
  %22 = bitcast %"class.fxcrt::StringViewTemplate"* %4 to i8*
  br label %23

23:                                               ; preds = %8, %82
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 16, i1 false)
  call void @_ZN17CPDF_SimpleParser7GetWordEv(%"class.fxcrt::StringViewTemplate"* nonnull sret %4, %class.CPDF_SimpleParser* %1) #18
  %24 = load i64, i64* %11, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %80, label %26

26:                                               ; preds = %23, %77
  %27 = phi i64 [ %78, %77 ], [ %24, %23 ]
  %28 = icmp eq i64 %27, 1
  br i1 %28, label %29, label %77

29:                                               ; preds = %26
  %30 = load i8*, i8** %10, align 8
  %31 = load i8, i8* %30, align 1
  switch i8 %31, label %77 [
    i8 125, label %80
    i8 123, label %32
  ]

32:                                               ; preds = %29
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #18
  %33 = call i8* @_Znwm(i64 16) #17
  store i8 42, i8* %33, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 4
  %35 = bitcast i8* %34 to float*
  store float 0.000000e+00, float* %35, align 4
  %36 = call i8* @_Znwm(i64 24) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 24, i1 false) #18
  %37 = getelementptr inbounds i8, i8* %33, i64 8
  %38 = bitcast i8* %37 to i8**
  store i8* %36, i8** %38, align 8
  store i8* %33, i8** %15, align 8
  %39 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %16, align 8
  %40 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %17, align 8
  %41 = icmp ult %"class.std::__1::unique_ptr.0"* %39, %40
  br i1 %41, label %42, label %47

42:                                               ; preds = %32
  %43 = ptrtoint i8* %33 to i64
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %14, align 8
  %44 = bitcast %"class.std::__1::unique_ptr.0"* %39 to i64*
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %39, i64 1
  %46 = ptrtoint %"class.std::__1::unique_ptr.0"* %45 to i64
  store i64 %46, i64* %19, align 8
  br label %48

47:                                               ; preds = %32
  call void @_ZNSt3__16vectorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* %18, %"class.std::__1::unique_ptr.0"* nonnull dereferenceable(8) %5) #18
  br label %48

48:                                               ; preds = %42, %47
  %49 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %14, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %14, align 8
  %50 = icmp eq %class.CPDF_PSOP* %49, null
  br i1 %50, label %67, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %49, i64 0, i32 2, i32 0, i32 0, i32 0
  %53 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %52, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %52, align 8
  %54 = icmp eq %class.CPDF_PSProc* %53, null
  br i1 %54, label %65, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %53, i64 0, i32 0, i32 0, i32 0
  %57 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %56, align 8
  %58 = icmp eq %"class.std::__1::unique_ptr.0"* %57, null
  br i1 %58, label %63, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %53, i64 0, i32 0, i32 0
  call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %60, %"class.std::__1::unique_ptr.0"* nonnull %57) #18
  %61 = bitcast %class.CPDF_PSProc* %53 to i8**
  %62 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %62) #17
  br label %63

63:                                               ; preds = %59, %55
  %64 = bitcast %class.CPDF_PSProc* %53 to i8*
  call void @_ZdlPv(i8* %64) #17
  br label %65

65:                                               ; preds = %63, %51
  %66 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %49, i64 0, i32 0
  call void @_ZdlPv(i8* %66) #17
  br label %67

67:                                               ; preds = %48, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #18
  %68 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %16, align 8
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %68, i64 -1, i32 0, i32 0, i32 0
  %70 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %69, align 8
  %71 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %70, i64 0, i32 0
  %72 = load i8, i8* %71, align 8
  %73 = icmp eq i8 %72, 42
  br i1 %73, label %74, label %82

74:                                               ; preds = %67
  %75 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %70, i64 0, i32 2, i32 0, i32 0, i32 0
  %76 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %75, align 8
  br label %82

77:                                               ; preds = %29, %26
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* nonnull align 8 %9, i64 16, i1 false)
  call void @_ZN11CPDF_PSProc11AddOperatorEN5fxcrt18StringViewTemplateIcEE(%class.CPDF_PSProc* %0, %"class.fxcrt::StringViewTemplate"* nonnull %6)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #18
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 16, i1 false)
  call void @_ZN17CPDF_SimpleParser7GetWordEv(%"class.fxcrt::StringViewTemplate"* nonnull sret %4, %class.CPDF_SimpleParser* %1) #18
  %78 = load i64, i64* %11, align 8
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %26

80:                                               ; preds = %23, %77, %29
  %81 = phi i1 [ false, %77 ], [ true, %29 ], [ false, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #18
  br label %85

82:                                               ; preds = %74, %67
  %83 = phi %class.CPDF_PSProc* [ %76, %74 ], [ null, %67 ]
  %84 = call zeroext i1 @_ZN11CPDF_PSProc5ParseEP17CPDF_SimpleParseri(%class.CPDF_PSProc* %83, %class.CPDF_SimpleParser* %1, i32 %20)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #18
  br i1 %84, label %23, label %85

85:                                               ; preds = %82, %80, %3
  %86 = phi i1 [ false, %3 ], [ %81, %80 ], [ false, %82 ]
  ret i1 %86
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN17CPDF_SimpleParser7GetWordEv(%"class.fxcrt::StringViewTemplate"* sret, %class.CPDF_SimpleParser*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CPDF_PSProc11AddOperatorEN5fxcrt18StringViewTemplateIcEE(%class.CPDF_PSProc*, %"class.fxcrt::StringViewTemplate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr.0", align 8
  %4 = alloca %"class.std::__1::unique_ptr.0", align 8
  %5 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %6 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %1, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  br label %10

10:                                               ; preds = %19, %2
  %11 = phi i64 [ 42, %2 ], [ %32, %19 ]
  %12 = phi %"struct.(anonymous namespace)::PDF_PSOpName"* [ getelementptr inbounds ([42 x %"struct.(anonymous namespace)::PDF_PSOpName"], [42 x %"struct.(anonymous namespace)::PDF_PSOpName"]* @_ZN12_GLOBAL__N_110kPsOpNamesE, i64 0, i64 0), %2 ], [ %31, %19 ]
  %13 = lshr i64 %11, 1
  %14 = getelementptr inbounds %"struct.(anonymous namespace)::PDF_PSOpName", %"struct.(anonymous namespace)::PDF_PSOpName"* %12, i64 %13
  %15 = getelementptr inbounds %"struct.(anonymous namespace)::PDF_PSOpName", %"struct.(anonymous namespace)::PDF_PSOpName"* %14, i64 0, i32 0, i64 0
  %16 = icmp eq %"struct.(anonymous namespace)::PDF_PSOpName"* %14, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %10
  %18 = tail call i64 @strlen(i8* nonnull %15) #19
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i64 [ %18, %17 ], [ 0, %10 ]
  %21 = icmp ult i64 %20, %9
  %22 = select i1 %21, i64 %20, i64 %9
  %23 = tail call i32 @memcmp(i8* %7, i8* %15, i64 %22) #19
  %24 = icmp sgt i32 %23, 0
  %25 = icmp eq i32 %23, 0
  %26 = and i1 %21, %25
  %27 = or i1 %24, %26
  %28 = getelementptr inbounds %"struct.(anonymous namespace)::PDF_PSOpName", %"struct.(anonymous namespace)::PDF_PSOpName"* %14, i64 1
  %29 = xor i64 %13, -1
  %30 = add i64 %11, %29
  %31 = select i1 %27, %"struct.(anonymous namespace)::PDF_PSOpName"* %28, %"struct.(anonymous namespace)::PDF_PSOpName"* %12
  %32 = select i1 %27, i64 %30, i64 %13
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %10

34:                                               ; preds = %19
  %35 = icmp eq %"struct.(anonymous namespace)::PDF_PSOpName"* %31, getelementptr inbounds ([42 x %"struct.(anonymous namespace)::PDF_PSOpName"], [42 x %"struct.(anonymous namespace)::PDF_PSOpName"]* @_ZN12_GLOBAL__N_110kPsOpNamesE, i64 1, i64 0)
  br i1 %35, label %100, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %"struct.(anonymous namespace)::PDF_PSOpName", %"struct.(anonymous namespace)::PDF_PSOpName"* %31, i64 0, i32 0, i64 0
  %38 = icmp eq %"struct.(anonymous namespace)::PDF_PSOpName"* %31, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %36
  %40 = tail call i64 @strlen(i8* nonnull %37) #19
  br label %41

41:                                               ; preds = %39, %36
  %42 = phi i64 [ %40, %39 ], [ 0, %36 ]
  %43 = icmp eq i64 %9, %42
  br i1 %43, label %44, label %100

44:                                               ; preds = %41
  %45 = getelementptr inbounds i8, i8* %7, i64 %9
  %46 = icmp eq i64 %9, 0
  br i1 %46, label %57, label %47

47:                                               ; preds = %44, %53
  %48 = phi i8* [ %55, %53 ], [ %37, %44 ]
  %49 = phi i8* [ %54, %53 ], [ %7, %44 ]
  %50 = load i8, i8* %49, align 1
  %51 = load i8, i8* %48, align 1
  %52 = icmp eq i8 %50, %51
  br i1 %52, label %53, label %100

53:                                               ; preds = %47
  %54 = getelementptr inbounds i8, i8* %49, i64 1
  %55 = getelementptr inbounds i8, i8* %48, i64 1
  %56 = icmp eq i8* %54, %45
  br i1 %56, label %57, label %47

57:                                               ; preds = %53, %44
  %58 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #18
  %59 = getelementptr inbounds %"struct.(anonymous namespace)::PDF_PSOpName", %"struct.(anonymous namespace)::PDF_PSOpName"* %31, i64 0, i32 1
  %60 = tail call i8* @_Znwm(i64 16) #17
  %61 = load i8, i8* %59, align 1
  store i8 %61, i8* %60, align 8
  %62 = getelementptr inbounds i8, i8* %60, i64 4
  %63 = bitcast i8* %62 to float*
  store float 0.000000e+00, float* %63, align 4
  %64 = getelementptr inbounds i8, i8* %60, i64 8
  %65 = bitcast i8* %64 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %3, i64 0, i32 0, i32 0, i32 0
  %67 = bitcast %"class.std::__1::unique_ptr.0"* %3 to i8**
  store i8* %60, i8** %67, align 8
  %68 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 1
  %69 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %68, align 8
  %70 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %71 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %70, align 8
  %72 = icmp ult %"class.std::__1::unique_ptr.0"* %69, %71
  br i1 %72, label %73, label %79

73:                                               ; preds = %57
  %74 = ptrtoint i8* %60 to i64
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %66, align 8
  %75 = bitcast %"class.std::__1::unique_ptr.0"* %69 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %69, i64 1
  %77 = ptrtoint %"class.std::__1::unique_ptr.0"* %76 to i64
  %78 = bitcast %"class.std::__1::unique_ptr.0"** %68 to i64*
  store i64 %77, i64* %78, align 8
  br label %81

79:                                               ; preds = %57
  %80 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* %80, %"class.std::__1::unique_ptr.0"* nonnull dereferenceable(8) %3) #18
  br label %81

81:                                               ; preds = %73, %79
  %82 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %66, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %66, align 8
  %83 = icmp eq %class.CPDF_PSOP* %82, null
  br i1 %83, label %144, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %82, i64 0, i32 2, i32 0, i32 0, i32 0
  %86 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %85, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %85, align 8
  %87 = icmp eq %class.CPDF_PSProc* %86, null
  br i1 %87, label %98, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %86, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %89, align 8
  %91 = icmp eq %"class.std::__1::unique_ptr.0"* %90, null
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %86, i64 0, i32 0, i32 0
  call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %93, %"class.std::__1::unique_ptr.0"* nonnull %90) #18
  %94 = bitcast %class.CPDF_PSProc* %86 to i8**
  %95 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %95) #17
  br label %96

96:                                               ; preds = %92, %88
  %97 = bitcast %class.CPDF_PSProc* %86 to i8*
  call void @_ZdlPv(i8* %97) #17
  br label %98

98:                                               ; preds = %96, %84
  %99 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %82, i64 0, i32 0
  call void @_ZdlPv(i8* %99) #17
  br label %144

100:                                              ; preds = %47, %41, %34
  %101 = bitcast %"class.std::__1::unique_ptr.0"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %101) #18
  %102 = bitcast %"class.fxcrt::StringViewTemplate"* %5 to i8*
  %103 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %102, i8* align 8 %103, i64 16, i1 false)
  %104 = call float @_Z13StringToFloatN5fxcrt18StringViewTemplateIcEE(%"class.fxcrt::StringViewTemplate"* nonnull %5) #18
  %105 = call i8* @_Znwm(i64 16) #17
  store i8 43, i8* %105, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 4
  %107 = bitcast i8* %106 to float*
  store float %104, float* %107, align 4
  %108 = getelementptr inbounds i8, i8* %105, i64 8
  %109 = bitcast i8* %108 to i64*
  store i64 0, i64* %109, align 8
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %4, i64 0, i32 0, i32 0, i32 0
  %111 = bitcast %"class.std::__1::unique_ptr.0"* %4 to i8**
  store i8* %105, i8** %111, align 8
  %112 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 1
  %113 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %112, align 8
  %114 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %115 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %114, align 8
  %116 = icmp ult %"class.std::__1::unique_ptr.0"* %113, %115
  br i1 %116, label %117, label %123

117:                                              ; preds = %100
  %118 = ptrtoint i8* %105 to i64
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %110, align 8
  %119 = bitcast %"class.std::__1::unique_ptr.0"* %113 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %113, i64 1
  %121 = ptrtoint %"class.std::__1::unique_ptr.0"* %120 to i64
  %122 = bitcast %"class.std::__1::unique_ptr.0"** %112 to i64*
  store i64 %121, i64* %122, align 8
  br label %125

123:                                              ; preds = %100
  %124 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"* %124, %"class.std::__1::unique_ptr.0"* nonnull dereferenceable(8) %4) #18
  br label %125

125:                                              ; preds = %117, %123
  %126 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %110, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %110, align 8
  %127 = icmp eq %class.CPDF_PSOP* %126, null
  br i1 %127, label %144, label %128

128:                                              ; preds = %125
  %129 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %126, i64 0, i32 2, i32 0, i32 0, i32 0
  %130 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %129, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %129, align 8
  %131 = icmp eq %class.CPDF_PSProc* %130, null
  br i1 %131, label %142, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %130, i64 0, i32 0, i32 0, i32 0
  %134 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %133, align 8
  %135 = icmp eq %"class.std::__1::unique_ptr.0"* %134, null
  br i1 %135, label %140, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %130, i64 0, i32 0, i32 0
  call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %137, %"class.std::__1::unique_ptr.0"* nonnull %134) #18
  %138 = bitcast %class.CPDF_PSProc* %130 to i8**
  %139 = load i8*, i8** %138, align 8
  call void @_ZdlPv(i8* %139) #17
  br label %140

140:                                              ; preds = %136, %132
  %141 = bitcast %class.CPDF_PSProc* %130 to i8*
  call void @_ZdlPv(i8* %141) #17
  br label %142

142:                                              ; preds = %140, %128
  %143 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %126, i64 0, i32 0
  call void @_ZdlPv(i8* %143) #17
  br label %144

144:                                              ; preds = %142, %125, %98, %81
  %145 = phi i8* [ %58, %81 ], [ %58, %98 ], [ %101, %125 ], [ %101, %142 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13CPDF_PSEngine4PushEf(%class.CPDF_PSEngine* nocapture, float) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 100
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = add nuw nsw i32 %4, 1
  store i32 %7, i32* %3, align 8
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %8
  store float %1, float* %9, align 4
  br label %10

10:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN13CPDF_PSEngine6PopIntEv(%class.CPDF_PSEngine* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = add i32 %3, -1
  store i32 %6, i32* %2, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %7
  %9 = load float, float* %8, align 4
  %10 = fptosi float %9 to i32
  br label %11

11:                                               ; preds = %1, %5
  %12 = phi i32 [ %10, %5 ], [ 0, %1 ]
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13CPDF_PSEngine10DoOperatorE8PDF_PSOP(%class.CPDF_PSEngine*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.CPDF_PSEngine* %0 to i8*
  switch i8 %1, label %1436 [
    i8 0, label %4
    i8 1, label %30
    i8 2, label %56
    i8 3, label %82
    i8 4, label %108
    i8 5, label %150
    i8 6, label %192
    i8 7, label %209
    i8 8, label %226
    i8 9, label %243
    i8 10, label %260
    i8 11, label %285
    i8 12, label %303
    i8 13, label %321
    i8 14, label %341
    i8 15, label %361
    i8 16, label %393
    i8 17, label %418
    i8 18, label %436
    i8 19, label %454
    i8 41, label %1116
    i8 21, label %472
    i8 22, label %499
    i8 23, label %526
    i8 24, label %553
    i8 25, label %580
    i8 26, label %607
    i8 27, label %634
    i8 28, label %660
    i8 29, label %688
    i8 30, label %716
    i8 31, label %735
    i8 32, label %802
    i8 33, label %810
    i8 36, label %818
    i8 37, label %824
    i8 38, label %851
    i8 39, label %871
    i8 40, label %1093
  ]

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = add i32 %6, -1
  store i32 %9, i32* %5, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %10
  %12 = load float, float* %11, align 4
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %8, %4
  %15 = phi float [ %12, %8 ], [ 0.000000e+00, %4 ]
  %16 = fadd float %15, 0.000000e+00
  br label %24

17:                                               ; preds = %8
  %18 = add i32 %6, -2
  store i32 %18, i32* %5, align 8
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %19
  %21 = load float, float* %20, align 4
  %22 = fadd float %12, %21
  %23 = icmp ult i32 %18, 100
  br i1 %23, label %24, label %1436

24:                                               ; preds = %14, %17
  %25 = phi float [ %16, %14 ], [ %22, %17 ]
  %26 = phi i32 [ 0, %14 ], [ %18, %17 ]
  %27 = add nuw nsw i32 %26, 1
  store i32 %27, i32* %5, align 8
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %28
  store float %25, float* %29, align 4
  br label %1436

30:                                               ; preds = %2
  %31 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %30
  %35 = add i32 %32, -1
  store i32 %35, i32* %31, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %36
  %38 = load float, float* %37, align 4
  %39 = icmp eq i32 %35, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %34, %30
  %41 = phi float [ %38, %34 ], [ 0.000000e+00, %30 ]
  %42 = fsub float 0.000000e+00, %41
  br label %50

43:                                               ; preds = %34
  %44 = add i32 %32, -2
  store i32 %44, i32* %31, align 8
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fsub float %47, %38
  %49 = icmp ult i32 %44, 100
  br i1 %49, label %50, label %1436

50:                                               ; preds = %40, %43
  %51 = phi float [ %42, %40 ], [ %48, %43 ]
  %52 = phi i32 [ 0, %40 ], [ %44, %43 ]
  %53 = add nuw nsw i32 %52, 1
  store i32 %53, i32* %31, align 8
  %54 = zext i32 %52 to i64
  %55 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %54
  store float %51, float* %55, align 4
  br label %1436

56:                                               ; preds = %2
  %57 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %56
  %61 = add i32 %58, -1
  store i32 %61, i32* %57, align 8
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %62
  %64 = load float, float* %63, align 4
  %65 = icmp eq i32 %61, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %60, %56
  %67 = phi float [ %64, %60 ], [ 0.000000e+00, %56 ]
  %68 = fmul float %67, 0.000000e+00
  br label %76

69:                                               ; preds = %60
  %70 = add i32 %58, -2
  store i32 %70, i32* %57, align 8
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %71
  %73 = load float, float* %72, align 4
  %74 = fmul float %64, %73
  %75 = icmp ult i32 %70, 100
  br i1 %75, label %76, label %1436

76:                                               ; preds = %66, %69
  %77 = phi float [ %68, %66 ], [ %74, %69 ]
  %78 = phi i32 [ 0, %66 ], [ %70, %69 ]
  %79 = add nuw nsw i32 %78, 1
  store i32 %79, i32* %57, align 8
  %80 = zext i32 %78 to i64
  %81 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %80
  store float %77, float* %81, align 4
  br label %1436

82:                                               ; preds = %2
  %83 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %92, label %86

86:                                               ; preds = %82
  %87 = add i32 %84, -1
  store i32 %87, i32* %83, align 8
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %88
  %90 = load float, float* %89, align 4
  %91 = icmp eq i32 %87, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %86, %82
  %93 = phi float [ %90, %86 ], [ 0.000000e+00, %82 ]
  %94 = fdiv float 0.000000e+00, %93
  br label %102

95:                                               ; preds = %86
  %96 = add i32 %84, -2
  store i32 %96, i32* %83, align 8
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %97
  %99 = load float, float* %98, align 4
  %100 = fdiv float %99, %90
  %101 = icmp ult i32 %96, 100
  br i1 %101, label %102, label %1436

102:                                              ; preds = %92, %95
  %103 = phi float [ %94, %92 ], [ %100, %95 ]
  %104 = phi i32 [ 0, %92 ], [ %96, %95 ]
  %105 = add nuw nsw i32 %104, 1
  store i32 %105, i32* %83, align 8
  %106 = zext i32 %104 to i64
  %107 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %106
  store float %103, float* %107, align 4
  br label %1436

108:                                              ; preds = %2
  %109 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %110 = load i32, i32* %109, align 8
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %145, label %112

112:                                              ; preds = %108
  %113 = add i32 %110, -1
  store i32 %113, i32* %109, align 8
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %114
  %116 = load float, float* %115, align 4
  %117 = fptosi float %116 to i32
  %118 = icmp eq i32 %113, 0
  br i1 %118, label %125, label %119

119:                                              ; preds = %112
  %120 = add i32 %110, -2
  store i32 %120, i32* %109, align 8
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fptosi float %123 to i32
  br label %125

125:                                              ; preds = %112, %119
  %126 = phi i32 [ %120, %119 ], [ 0, %112 ]
  %127 = phi i32 [ %124, %119 ], [ 0, %112 ]
  %128 = icmp eq i32 %117, 0
  br i1 %128, label %143, label %129

129:                                              ; preds = %125
  %130 = icmp eq i32 %127, -2147483648
  %131 = icmp eq i32 %117, -1
  %132 = and i1 %131, %130
  br i1 %132, label %136, label %133, !prof !2

133:                                              ; preds = %129
  %134 = sdiv i32 %127, %117
  %135 = sitofp i32 %134 to float
  br label %136

136:                                              ; preds = %129, %133
  %137 = phi float [ 0.000000e+00, %129 ], [ %135, %133 ]
  %138 = icmp ult i32 %126, 100
  br i1 %138, label %139, label %1436

139:                                              ; preds = %136
  %140 = add nuw nsw i32 %126, 1
  store i32 %140, i32* %109, align 8
  %141 = zext i32 %126 to i64
  %142 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %141
  store float %137, float* %142, align 4
  br label %1436

143:                                              ; preds = %125
  %144 = icmp ult i32 %126, 100
  br i1 %144, label %145, label %1436

145:                                              ; preds = %108, %143
  %146 = phi i32 [ %126, %143 ], [ 0, %108 ]
  %147 = add nuw nsw i32 %146, 1
  store i32 %147, i32* %109, align 8
  %148 = zext i32 %146 to i64
  %149 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %148
  store float 0.000000e+00, float* %149, align 4
  br label %1436

150:                                              ; preds = %2
  %151 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %152 = load i32, i32* %151, align 8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %187, label %154

154:                                              ; preds = %150
  %155 = add i32 %152, -1
  store i32 %155, i32* %151, align 8
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %156
  %158 = load float, float* %157, align 4
  %159 = fptosi float %158 to i32
  %160 = icmp eq i32 %155, 0
  br i1 %160, label %167, label %161

161:                                              ; preds = %154
  %162 = add i32 %152, -2
  store i32 %162, i32* %151, align 8
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %163
  %165 = load float, float* %164, align 4
  %166 = fptosi float %165 to i32
  br label %167

167:                                              ; preds = %154, %161
  %168 = phi i32 [ %162, %161 ], [ 0, %154 ]
  %169 = phi i32 [ %166, %161 ], [ 0, %154 ]
  %170 = icmp eq i32 %159, 0
  br i1 %170, label %185, label %171

171:                                              ; preds = %167
  %172 = icmp eq i32 %169, -2147483648
  %173 = icmp eq i32 %159, -1
  %174 = and i1 %173, %172
  br i1 %174, label %178, label %175, !prof !2

175:                                              ; preds = %171
  %176 = srem i32 %169, %159
  %177 = sitofp i32 %176 to float
  br label %178

178:                                              ; preds = %171, %175
  %179 = phi float [ %177, %175 ], [ 0.000000e+00, %171 ]
  %180 = icmp ult i32 %168, 100
  br i1 %180, label %181, label %1436

181:                                              ; preds = %178
  %182 = add nuw nsw i32 %168, 1
  store i32 %182, i32* %151, align 8
  %183 = zext i32 %168 to i64
  %184 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %183
  store float %179, float* %184, align 4
  br label %1436

185:                                              ; preds = %167
  %186 = icmp ult i32 %168, 100
  br i1 %186, label %187, label %1436

187:                                              ; preds = %150, %185
  %188 = phi i32 [ %168, %185 ], [ 0, %150 ]
  %189 = add nuw nsw i32 %188, 1
  store i32 %189, i32* %151, align 8
  %190 = zext i32 %188 to i64
  %191 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %190
  store float 0.000000e+00, float* %191, align 4
  br label %1436

192:                                              ; preds = %2
  %193 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %194 = load i32, i32* %193, align 8
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %203, label %196

196:                                              ; preds = %192
  %197 = add i32 %194, -1
  store i32 %197, i32* %193, align 8
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %198
  %200 = load float, float* %199, align 4
  %201 = fsub float -0.000000e+00, %200
  %202 = icmp ult i32 %197, 100
  br i1 %202, label %203, label %1436

203:                                              ; preds = %192, %196
  %204 = phi float [ %201, %196 ], [ -0.000000e+00, %192 ]
  %205 = phi i32 [ %197, %196 ], [ 0, %192 ]
  %206 = add nuw nsw i32 %205, 1
  store i32 %206, i32* %193, align 8
  %207 = zext i32 %205 to i64
  %208 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %207
  store float %204, float* %208, align 4
  br label %1436

209:                                              ; preds = %2
  %210 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %211 = load i32, i32* %210, align 8
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %220, label %213

213:                                              ; preds = %209
  %214 = add i32 %211, -1
  store i32 %214, i32* %210, align 8
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %215
  %217 = load float, float* %216, align 4
  %218 = tail call float @llvm.fabs.f32(float %217) #18
  %219 = icmp ult i32 %214, 100
  br i1 %219, label %220, label %1436

220:                                              ; preds = %209, %213
  %221 = phi float [ %218, %213 ], [ 0.000000e+00, %209 ]
  %222 = phi i32 [ %214, %213 ], [ 0, %209 ]
  %223 = add nuw nsw i32 %222, 1
  store i32 %223, i32* %210, align 8
  %224 = zext i32 %222 to i64
  %225 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %224
  store float %221, float* %225, align 4
  br label %1436

226:                                              ; preds = %2
  %227 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %228 = load i32, i32* %227, align 8
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %237, label %230

230:                                              ; preds = %226
  %231 = add i32 %228, -1
  store i32 %231, i32* %227, align 8
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %232
  %234 = load float, float* %233, align 4
  %235 = tail call float @llvm.ceil.f32(float %234) #18
  %236 = icmp ult i32 %231, 100
  br i1 %236, label %237, label %1436

237:                                              ; preds = %226, %230
  %238 = phi float [ %235, %230 ], [ 0.000000e+00, %226 ]
  %239 = phi i32 [ %231, %230 ], [ 0, %226 ]
  %240 = add nuw nsw i32 %239, 1
  store i32 %240, i32* %227, align 8
  %241 = zext i32 %239 to i64
  %242 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %241
  store float %238, float* %242, align 4
  br label %1436

243:                                              ; preds = %2
  %244 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %245 = load i32, i32* %244, align 8
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %254, label %247

247:                                              ; preds = %243
  %248 = add i32 %245, -1
  store i32 %248, i32* %244, align 8
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %249
  %251 = load float, float* %250, align 4
  %252 = tail call float @llvm.floor.f32(float %251) #18
  %253 = icmp ult i32 %248, 100
  br i1 %253, label %254, label %1436

254:                                              ; preds = %243, %247
  %255 = phi float [ %252, %247 ], [ 0.000000e+00, %243 ]
  %256 = phi i32 [ %248, %247 ], [ 0, %243 ]
  %257 = add nuw nsw i32 %256, 1
  store i32 %257, i32* %244, align 8
  %258 = zext i32 %256 to i64
  %259 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %258
  store float %255, float* %259, align 4
  br label %1436

260:                                              ; preds = %2
  %261 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %262 = load i32, i32* %261, align 8
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %272, label %264

264:                                              ; preds = %260
  %265 = add i32 %262, -1
  store i32 %265, i32* %261, align 8
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %266
  %268 = load float, float* %267, align 4
  %269 = fcmp uno float %268, 0.000000e+00
  br i1 %269, label %277, label %270

270:                                              ; preds = %264
  %271 = fcmp ogt float %268, 0x47EFFFFFE0000000
  br i1 %271, label %277, label %272

272:                                              ; preds = %260, %270
  %273 = phi i32 [ %265, %270 ], [ 0, %260 ]
  %274 = phi float [ %268, %270 ], [ 0.000000e+00, %260 ]
  %275 = fadd float %274, 5.000000e-01
  %276 = tail call float @llvm.floor.f32(float %275) #18
  br label %277

277:                                              ; preds = %270, %272, %264
  %278 = phi i32 [ %265, %264 ], [ %265, %270 ], [ %273, %272 ]
  %279 = phi float [ 0.000000e+00, %264 ], [ 0x47EFFFFFE0000000, %270 ], [ %276, %272 ]
  %280 = icmp ult i32 %278, 100
  br i1 %280, label %281, label %1436

281:                                              ; preds = %277
  %282 = add nuw nsw i32 %278, 1
  store i32 %282, i32* %261, align 8
  %283 = zext i32 %278 to i64
  %284 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %283
  store float %279, float* %284, align 4
  br label %1436

285:                                              ; preds = %2
  %286 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %287 = load i32, i32* %286, align 8
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %297, label %289

289:                                              ; preds = %285
  %290 = add i32 %287, -1
  store i32 %290, i32* %286, align 8
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %291
  %293 = load float, float* %292, align 4
  %294 = fptosi float %293 to i32
  %295 = sitofp i32 %294 to float
  %296 = icmp ult i32 %290, 100
  br i1 %296, label %297, label %1436

297:                                              ; preds = %285, %289
  %298 = phi float [ %295, %289 ], [ 0.000000e+00, %285 ]
  %299 = phi i32 [ %290, %289 ], [ 0, %285 ]
  %300 = add nuw nsw i32 %299, 1
  store i32 %300, i32* %286, align 8
  %301 = zext i32 %299 to i64
  %302 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %301
  store float %298, float* %302, align 4
  br label %1436

303:                                              ; preds = %2
  %304 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %305 = load i32, i32* %304, align 8
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %312, label %307

307:                                              ; preds = %303
  %308 = add i32 %305, -1
  store i32 %308, i32* %304, align 8
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %309
  %311 = load float, float* %310, align 4
  br label %312

312:                                              ; preds = %303, %307
  %313 = phi float [ %311, %307 ], [ 0.000000e+00, %303 ]
  %314 = tail call float @sqrtf(float %313) #18
  %315 = load i32, i32* %304, align 8
  %316 = icmp ult i32 %315, 100
  br i1 %316, label %317, label %1436

317:                                              ; preds = %312
  %318 = add nuw nsw i32 %315, 1
  store i32 %318, i32* %304, align 8
  %319 = zext i32 %315 to i64
  %320 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %319
  store float %314, float* %320, align 4
  br label %1436

321:                                              ; preds = %2
  %322 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %323 = load i32, i32* %322, align 8
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %331, label %325

325:                                              ; preds = %321
  %326 = add i32 %323, -1
  store i32 %326, i32* %322, align 8
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %327
  %329 = load float, float* %328, align 4
  %330 = fmul float %329, 0x400921FB60000000
  br label %331

331:                                              ; preds = %321, %325
  %332 = phi float [ %330, %325 ], [ 0.000000e+00, %321 ]
  %333 = fdiv float %332, 1.800000e+02
  %334 = tail call float @sinf(float %333) #18
  %335 = load i32, i32* %322, align 8
  %336 = icmp ult i32 %335, 100
  br i1 %336, label %337, label %1436

337:                                              ; preds = %331
  %338 = add nuw nsw i32 %335, 1
  store i32 %338, i32* %322, align 8
  %339 = zext i32 %335 to i64
  %340 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %339
  store float %334, float* %340, align 4
  br label %1436

341:                                              ; preds = %2
  %342 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %343 = load i32, i32* %342, align 8
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %351, label %345

345:                                              ; preds = %341
  %346 = add i32 %343, -1
  store i32 %346, i32* %342, align 8
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %347
  %349 = load float, float* %348, align 4
  %350 = fmul float %349, 0x400921FB60000000
  br label %351

351:                                              ; preds = %341, %345
  %352 = phi float [ %350, %345 ], [ 0.000000e+00, %341 ]
  %353 = fdiv float %352, 1.800000e+02
  %354 = tail call float @cosf(float %353) #18
  %355 = load i32, i32* %342, align 8
  %356 = icmp ult i32 %355, 100
  br i1 %356, label %357, label %1436

357:                                              ; preds = %351
  %358 = add nuw nsw i32 %355, 1
  store i32 %358, i32* %342, align 8
  %359 = zext i32 %355 to i64
  %360 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %359
  store float %354, float* %360, align 4
  br label %1436

361:                                              ; preds = %2
  %362 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %363 = load i32, i32* %362, align 8
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %376, label %365

365:                                              ; preds = %361
  %366 = add i32 %363, -1
  store i32 %366, i32* %362, align 8
  %367 = zext i32 %366 to i64
  %368 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %367
  %369 = load float, float* %368, align 4
  %370 = icmp eq i32 %366, 0
  br i1 %370, label %376, label %371

371:                                              ; preds = %365
  %372 = add i32 %363, -2
  store i32 %372, i32* %362, align 8
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %373
  %375 = load float, float* %374, align 4
  br label %376

376:                                              ; preds = %361, %365, %371
  %377 = phi float [ %369, %371 ], [ %369, %365 ], [ 0.000000e+00, %361 ]
  %378 = phi float [ %375, %371 ], [ 0.000000e+00, %365 ], [ 0.000000e+00, %361 ]
  %379 = tail call float @atan2f(float %378, float %377) #18
  %380 = fpext float %379 to double
  %381 = fmul double %380, 1.800000e+02
  %382 = fdiv double %381, 0x400921FB60000000
  %383 = fptrunc double %382 to float
  %384 = load i32, i32* %362, align 8
  %385 = icmp ult i32 %384, 100
  br i1 %385, label %386, label %1436

386:                                              ; preds = %376
  %387 = fcmp olt float %383, 0.000000e+00
  %388 = fadd float %383, 3.600000e+02
  %389 = select i1 %387, float %388, float %383
  %390 = add nuw nsw i32 %384, 1
  store i32 %390, i32* %362, align 8
  %391 = zext i32 %384 to i64
  %392 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %391
  store float %389, float* %392, align 4
  br label %1436

393:                                              ; preds = %2
  %394 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %395 = load i32, i32* %394, align 8
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %408, label %397

397:                                              ; preds = %393
  %398 = add i32 %395, -1
  store i32 %398, i32* %394, align 8
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %399
  %401 = load float, float* %400, align 4
  %402 = icmp eq i32 %398, 0
  br i1 %402, label %408, label %403

403:                                              ; preds = %397
  %404 = add i32 %395, -2
  store i32 %404, i32* %394, align 8
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %405
  %407 = load float, float* %406, align 4
  br label %408

408:                                              ; preds = %393, %397, %403
  %409 = phi float [ %401, %403 ], [ %401, %397 ], [ 0.000000e+00, %393 ]
  %410 = phi float [ %407, %403 ], [ 0.000000e+00, %397 ], [ 0.000000e+00, %393 ]
  %411 = tail call float @powf(float %410, float %409) #18
  %412 = load i32, i32* %394, align 8
  %413 = icmp ult i32 %412, 100
  br i1 %413, label %414, label %1436

414:                                              ; preds = %408
  %415 = add nuw nsw i32 %412, 1
  store i32 %415, i32* %394, align 8
  %416 = zext i32 %412 to i64
  %417 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %416
  store float %411, float* %417, align 4
  br label %1436

418:                                              ; preds = %2
  %419 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %420 = load i32, i32* %419, align 8
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %427, label %422

422:                                              ; preds = %418
  %423 = add i32 %420, -1
  store i32 %423, i32* %419, align 8
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %424
  %426 = load float, float* %425, align 4
  br label %427

427:                                              ; preds = %418, %422
  %428 = phi float [ %426, %422 ], [ 0.000000e+00, %418 ]
  %429 = tail call float @logf(float %428) #18
  %430 = load i32, i32* %419, align 8
  %431 = icmp ult i32 %430, 100
  br i1 %431, label %432, label %1436

432:                                              ; preds = %427
  %433 = add nuw nsw i32 %430, 1
  store i32 %433, i32* %419, align 8
  %434 = zext i32 %430 to i64
  %435 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %434
  store float %429, float* %435, align 4
  br label %1436

436:                                              ; preds = %2
  %437 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %438 = load i32, i32* %437, align 8
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %445, label %440

440:                                              ; preds = %436
  %441 = add i32 %438, -1
  store i32 %441, i32* %437, align 8
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %442
  %444 = load float, float* %443, align 4
  br label %445

445:                                              ; preds = %436, %440
  %446 = phi float [ %444, %440 ], [ 0.000000e+00, %436 ]
  %447 = tail call float @log10f(float %446) #18
  %448 = load i32, i32* %437, align 8
  %449 = icmp ult i32 %448, 100
  br i1 %449, label %450, label %1436

450:                                              ; preds = %445
  %451 = add nuw nsw i32 %448, 1
  store i32 %451, i32* %437, align 8
  %452 = zext i32 %448 to i64
  %453 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %452
  store float %447, float* %453, align 4
  br label %1436

454:                                              ; preds = %2
  %455 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %456 = load i32, i32* %455, align 8
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %466, label %458

458:                                              ; preds = %454
  %459 = add i32 %456, -1
  store i32 %459, i32* %455, align 8
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %460
  %462 = load float, float* %461, align 4
  %463 = fptosi float %462 to i32
  %464 = sitofp i32 %463 to float
  %465 = icmp ult i32 %459, 100
  br i1 %465, label %466, label %1436

466:                                              ; preds = %454, %458
  %467 = phi float [ %464, %458 ], [ 0.000000e+00, %454 ]
  %468 = phi i32 [ %459, %458 ], [ 0, %454 ]
  %469 = add nuw nsw i32 %468, 1
  store i32 %469, i32* %455, align 8
  %470 = zext i32 %468 to i64
  %471 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %470
  store float %467, float* %471, align 4
  br label %1436

472:                                              ; preds = %2
  %473 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %474 = load i32, i32* %473, align 8
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %482, label %476

476:                                              ; preds = %472
  %477 = add i32 %474, -1
  store i32 %477, i32* %473, align 8
  %478 = zext i32 %477 to i64
  %479 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %478
  %480 = load float, float* %479, align 4
  %481 = icmp eq i32 %477, 0
  br i1 %481, label %482, label %485

482:                                              ; preds = %476, %472
  %483 = phi float [ %480, %476 ], [ 0.000000e+00, %472 ]
  %484 = fcmp oeq float %483, 0.000000e+00
  br label %492

485:                                              ; preds = %476
  %486 = add i32 %474, -2
  store i32 %486, i32* %473, align 8
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %487
  %489 = load float, float* %488, align 4
  %490 = fcmp oeq float %489, %480
  %491 = icmp ult i32 %486, 100
  br i1 %491, label %492, label %1436

492:                                              ; preds = %482, %485
  %493 = phi i1 [ %484, %482 ], [ %490, %485 ]
  %494 = phi i32 [ 0, %482 ], [ %486, %485 ]
  %495 = uitofp i1 %493 to float
  %496 = add nuw nsw i32 %494, 1
  store i32 %496, i32* %473, align 8
  %497 = zext i32 %494 to i64
  %498 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %497
  store float %495, float* %498, align 4
  br label %1436

499:                                              ; preds = %2
  %500 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %501 = load i32, i32* %500, align 8
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %509, label %503

503:                                              ; preds = %499
  %504 = add i32 %501, -1
  store i32 %504, i32* %500, align 8
  %505 = zext i32 %504 to i64
  %506 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %505
  %507 = load float, float* %506, align 4
  %508 = icmp eq i32 %504, 0
  br i1 %508, label %509, label %512

509:                                              ; preds = %503, %499
  %510 = phi float [ %507, %503 ], [ 0.000000e+00, %499 ]
  %511 = fcmp une float %510, 0.000000e+00
  br label %519

512:                                              ; preds = %503
  %513 = add i32 %501, -2
  store i32 %513, i32* %500, align 8
  %514 = zext i32 %513 to i64
  %515 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %514
  %516 = load float, float* %515, align 4
  %517 = fcmp une float %516, %507
  %518 = icmp ult i32 %513, 100
  br i1 %518, label %519, label %1436

519:                                              ; preds = %509, %512
  %520 = phi i1 [ %511, %509 ], [ %517, %512 ]
  %521 = phi i32 [ 0, %509 ], [ %513, %512 ]
  %522 = uitofp i1 %520 to float
  %523 = add nuw nsw i32 %521, 1
  store i32 %523, i32* %500, align 8
  %524 = zext i32 %521 to i64
  %525 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %524
  store float %522, float* %525, align 4
  br label %1436

526:                                              ; preds = %2
  %527 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %528 = load i32, i32* %527, align 8
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %536, label %530

530:                                              ; preds = %526
  %531 = add i32 %528, -1
  store i32 %531, i32* %527, align 8
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %532
  %534 = load float, float* %533, align 4
  %535 = icmp eq i32 %531, 0
  br i1 %535, label %536, label %539

536:                                              ; preds = %530, %526
  %537 = phi float [ %534, %530 ], [ 0.000000e+00, %526 ]
  %538 = fcmp olt float %537, 0.000000e+00
  br label %546

539:                                              ; preds = %530
  %540 = add i32 %528, -2
  store i32 %540, i32* %527, align 8
  %541 = zext i32 %540 to i64
  %542 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %541
  %543 = load float, float* %542, align 4
  %544 = fcmp ogt float %543, %534
  %545 = icmp ult i32 %540, 100
  br i1 %545, label %546, label %1436

546:                                              ; preds = %536, %539
  %547 = phi i1 [ %538, %536 ], [ %544, %539 ]
  %548 = phi i32 [ 0, %536 ], [ %540, %539 ]
  %549 = uitofp i1 %547 to float
  %550 = add nuw nsw i32 %548, 1
  store i32 %550, i32* %527, align 8
  %551 = zext i32 %548 to i64
  %552 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %551
  store float %549, float* %552, align 4
  br label %1436

553:                                              ; preds = %2
  %554 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %555 = load i32, i32* %554, align 8
  %556 = icmp eq i32 %555, 0
  br i1 %556, label %563, label %557

557:                                              ; preds = %553
  %558 = add i32 %555, -1
  store i32 %558, i32* %554, align 8
  %559 = zext i32 %558 to i64
  %560 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %559
  %561 = load float, float* %560, align 4
  %562 = icmp eq i32 %558, 0
  br i1 %562, label %563, label %566

563:                                              ; preds = %557, %553
  %564 = phi float [ %561, %557 ], [ 0.000000e+00, %553 ]
  %565 = fcmp ole float %564, 0.000000e+00
  br label %573

566:                                              ; preds = %557
  %567 = add i32 %555, -2
  store i32 %567, i32* %554, align 8
  %568 = zext i32 %567 to i64
  %569 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %568
  %570 = load float, float* %569, align 4
  %571 = fcmp oge float %570, %561
  %572 = icmp ult i32 %567, 100
  br i1 %572, label %573, label %1436

573:                                              ; preds = %563, %566
  %574 = phi i1 [ %565, %563 ], [ %571, %566 ]
  %575 = phi i32 [ 0, %563 ], [ %567, %566 ]
  %576 = uitofp i1 %574 to float
  %577 = add nuw nsw i32 %575, 1
  store i32 %577, i32* %554, align 8
  %578 = zext i32 %575 to i64
  %579 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %578
  store float %576, float* %579, align 4
  br label %1436

580:                                              ; preds = %2
  %581 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %582 = load i32, i32* %581, align 8
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %590, label %584

584:                                              ; preds = %580
  %585 = add i32 %582, -1
  store i32 %585, i32* %581, align 8
  %586 = zext i32 %585 to i64
  %587 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %586
  %588 = load float, float* %587, align 4
  %589 = icmp eq i32 %585, 0
  br i1 %589, label %590, label %593

590:                                              ; preds = %584, %580
  %591 = phi float [ %588, %584 ], [ 0.000000e+00, %580 ]
  %592 = fcmp ogt float %591, 0.000000e+00
  br label %600

593:                                              ; preds = %584
  %594 = add i32 %582, -2
  store i32 %594, i32* %581, align 8
  %595 = zext i32 %594 to i64
  %596 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %595
  %597 = load float, float* %596, align 4
  %598 = fcmp olt float %597, %588
  %599 = icmp ult i32 %594, 100
  br i1 %599, label %600, label %1436

600:                                              ; preds = %590, %593
  %601 = phi i1 [ %592, %590 ], [ %598, %593 ]
  %602 = phi i32 [ 0, %590 ], [ %594, %593 ]
  %603 = uitofp i1 %601 to float
  %604 = add nuw nsw i32 %602, 1
  store i32 %604, i32* %581, align 8
  %605 = zext i32 %602 to i64
  %606 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %605
  store float %603, float* %606, align 4
  br label %1436

607:                                              ; preds = %2
  %608 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %609 = load i32, i32* %608, align 8
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %617, label %611

611:                                              ; preds = %607
  %612 = add i32 %609, -1
  store i32 %612, i32* %608, align 8
  %613 = zext i32 %612 to i64
  %614 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %613
  %615 = load float, float* %614, align 4
  %616 = icmp eq i32 %612, 0
  br i1 %616, label %617, label %620

617:                                              ; preds = %611, %607
  %618 = phi float [ %615, %611 ], [ 0.000000e+00, %607 ]
  %619 = fcmp oge float %618, 0.000000e+00
  br label %627

620:                                              ; preds = %611
  %621 = add i32 %609, -2
  store i32 %621, i32* %608, align 8
  %622 = zext i32 %621 to i64
  %623 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %622
  %624 = load float, float* %623, align 4
  %625 = fcmp ole float %624, %615
  %626 = icmp ult i32 %621, 100
  br i1 %626, label %627, label %1436

627:                                              ; preds = %617, %620
  %628 = phi i1 [ %619, %617 ], [ %625, %620 ]
  %629 = phi i32 [ 0, %617 ], [ %621, %620 ]
  %630 = uitofp i1 %628 to float
  %631 = add nuw nsw i32 %629, 1
  store i32 %631, i32* %608, align 8
  %632 = zext i32 %629 to i64
  %633 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %632
  store float %630, float* %633, align 4
  br label %1436

634:                                              ; preds = %2
  %635 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %636 = load i32, i32* %635, align 8
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %654, label %638

638:                                              ; preds = %634
  %639 = add i32 %636, -1
  store i32 %639, i32* %635, align 8
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %654, label %641

641:                                              ; preds = %638
  %642 = zext i32 %639 to i64
  %643 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %642
  %644 = load float, float* %643, align 4
  %645 = fptosi float %644 to i32
  %646 = add i32 %636, -2
  store i32 %646, i32* %635, align 8
  %647 = zext i32 %646 to i64
  %648 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %647
  %649 = load float, float* %648, align 4
  %650 = fptosi float %649 to i32
  %651 = and i32 %650, %645
  %652 = sitofp i32 %651 to float
  %653 = icmp ult i32 %646, 100
  br i1 %653, label %654, label %1436

654:                                              ; preds = %638, %634, %641
  %655 = phi float [ %652, %641 ], [ 0.000000e+00, %634 ], [ 0.000000e+00, %638 ]
  %656 = phi i32 [ %646, %641 ], [ 0, %634 ], [ 0, %638 ]
  %657 = add nuw nsw i32 %656, 1
  store i32 %657, i32* %635, align 8
  %658 = zext i32 %656 to i64
  %659 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %658
  store float %655, float* %659, align 4
  br label %1436

660:                                              ; preds = %2
  %661 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %662 = load i32, i32* %661, align 8
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %682, label %664

664:                                              ; preds = %660
  %665 = add i32 %662, -1
  store i32 %665, i32* %661, align 8
  %666 = zext i32 %665 to i64
  %667 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %666
  %668 = load float, float* %667, align 4
  %669 = fptosi float %668 to i32
  %670 = icmp eq i32 %665, 0
  br i1 %670, label %671, label %673

671:                                              ; preds = %664
  %672 = sitofp i32 %669 to float
  br label %682

673:                                              ; preds = %664
  %674 = add i32 %662, -2
  store i32 %674, i32* %661, align 8
  %675 = zext i32 %674 to i64
  %676 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %675
  %677 = load float, float* %676, align 4
  %678 = fptosi float %677 to i32
  %679 = or i32 %678, %669
  %680 = sitofp i32 %679 to float
  %681 = icmp ult i32 %674, 100
  br i1 %681, label %682, label %1436

682:                                              ; preds = %671, %660, %673
  %683 = phi float [ %680, %673 ], [ 0.000000e+00, %660 ], [ %672, %671 ]
  %684 = phi i32 [ %674, %673 ], [ 0, %660 ], [ 0, %671 ]
  %685 = add nuw nsw i32 %684, 1
  store i32 %685, i32* %661, align 8
  %686 = zext i32 %684 to i64
  %687 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %686
  store float %683, float* %687, align 4
  br label %1436

688:                                              ; preds = %2
  %689 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %690 = load i32, i32* %689, align 8
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %710, label %692

692:                                              ; preds = %688
  %693 = add i32 %690, -1
  store i32 %693, i32* %689, align 8
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %694
  %696 = load float, float* %695, align 4
  %697 = fptosi float %696 to i32
  %698 = icmp eq i32 %693, 0
  br i1 %698, label %699, label %701

699:                                              ; preds = %692
  %700 = sitofp i32 %697 to float
  br label %710

701:                                              ; preds = %692
  %702 = add i32 %690, -2
  store i32 %702, i32* %689, align 8
  %703 = zext i32 %702 to i64
  %704 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %703
  %705 = load float, float* %704, align 4
  %706 = fptosi float %705 to i32
  %707 = xor i32 %706, %697
  %708 = sitofp i32 %707 to float
  %709 = icmp ult i32 %702, 100
  br i1 %709, label %710, label %1436

710:                                              ; preds = %699, %688, %701
  %711 = phi float [ %708, %701 ], [ 0.000000e+00, %688 ], [ %700, %699 ]
  %712 = phi i32 [ %702, %701 ], [ 0, %688 ], [ 0, %699 ]
  %713 = add nuw nsw i32 %712, 1
  store i32 %713, i32* %689, align 8
  %714 = zext i32 %712 to i64
  %715 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %714
  store float %711, float* %715, align 4
  br label %1436

716:                                              ; preds = %2
  %717 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %718 = load i32, i32* %717, align 8
  %719 = icmp eq i32 %718, 0
  br i1 %719, label %729, label %720

720:                                              ; preds = %716
  %721 = add i32 %718, -1
  store i32 %721, i32* %717, align 8
  %722 = zext i32 %721 to i64
  %723 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %722
  %724 = load float, float* %723, align 4
  %725 = fptosi float %724 to i32
  %726 = icmp eq i32 %725, 0
  %727 = uitofp i1 %726 to float
  %728 = icmp ult i32 %721, 100
  br i1 %728, label %729, label %1436

729:                                              ; preds = %716, %720
  %730 = phi float [ %727, %720 ], [ 1.000000e+00, %716 ]
  %731 = phi i32 [ %721, %720 ], [ 0, %716 ]
  %732 = add nuw nsw i32 %731, 1
  store i32 %732, i32* %717, align 8
  %733 = zext i32 %731 to i64
  %734 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %733
  store float %730, float* %734, align 4
  br label %1436

735:                                              ; preds = %2
  %736 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %737 = load i32, i32* %736, align 8
  %738 = icmp eq i32 %737, 0
  br i1 %738, label %772, label %739

739:                                              ; preds = %735
  %740 = add i32 %737, -1
  store i32 %740, i32* %736, align 8
  %741 = zext i32 %740 to i64
  %742 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %741
  %743 = load float, float* %742, align 4
  %744 = fptosi float %743 to i32
  %745 = icmp eq i32 %740, 0
  br i1 %745, label %752, label %746

746:                                              ; preds = %739
  %747 = add i32 %737, -2
  store i32 %747, i32* %736, align 8
  %748 = zext i32 %747 to i64
  %749 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %748
  %750 = load float, float* %749, align 4
  %751 = fptosi float %750 to i32
  br label %752

752:                                              ; preds = %739, %746
  %753 = phi i32 [ %747, %746 ], [ 0, %739 ]
  %754 = phi i32 [ %751, %746 ], [ 0, %739 ]
  %755 = icmp sgt i32 %744, 0
  br i1 %755, label %756, label %772

756:                                              ; preds = %752
  %757 = icmp slt i32 %754, 0
  br i1 %757, label %768, label %758, !prof !2

758:                                              ; preds = %756
  %759 = icmp ult i32 %744, 31
  br i1 %759, label %760, label %764, !prof !3

760:                                              ; preds = %758
  %761 = shl i32 %754, %744
  %762 = ashr i32 %761, %744
  %763 = icmp eq i32 %762, %754
  br label %768

764:                                              ; preds = %758
  %765 = icmp eq i32 %754, 0
  %766 = icmp eq i32 %744, 31
  %767 = and i1 %766, %765
  br label %768

768:                                              ; preds = %756, %760, %764
  %769 = phi i32 [ 0, %764 ], [ 0, %756 ], [ %761, %760 ]
  %770 = phi i1 [ %767, %764 ], [ false, %756 ], [ %763, %760 ]
  %771 = zext i1 %770 to i8
  br label %790

772:                                              ; preds = %735, %752
  %773 = phi i32 [ %754, %752 ], [ 0, %735 ]
  %774 = phi i32 [ %744, %752 ], [ 0, %735 ]
  %775 = phi i32 [ %753, %752 ], [ 0, %735 ]
  %776 = tail call i1 @llvm.is.constant.i32(i32 %774) #18
  br i1 %776, label %777, label %780

777:                                              ; preds = %772
  %778 = sub i32 0, %774
  %779 = icmp eq i32 %778, -2147483648
  br i1 %779, label %787, label %784, !prof !2

780:                                              ; preds = %772
  %781 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %774) #18
  %782 = extractvalue { i32, i1 } %781, 1
  %783 = extractvalue { i32, i1 } %781, 0
  br i1 %782, label %787, label %784, !prof !2

784:                                              ; preds = %777, %780
  %785 = phi i32 [ %778, %777 ], [ %783, %780 ]
  %786 = icmp ult i32 %785, 32
  br i1 %786, label %787, label %790, !prof !4

787:                                              ; preds = %777, %780, %784
  %788 = phi i32 [ %785, %784 ], [ 0, %780 ], [ 0, %777 ]
  %789 = ashr i32 %773, %788
  br label %790

790:                                              ; preds = %787, %784, %768
  %791 = phi i32 [ %753, %768 ], [ %775, %784 ], [ %775, %787 ]
  %792 = phi i8 [ %771, %768 ], [ 0, %784 ], [ 1, %787 ]
  %793 = phi i32 [ %769, %768 ], [ 0, %784 ], [ %789, %787 ]
  %794 = icmp ult i32 %791, 100
  br i1 %794, label %795, label %1436

795:                                              ; preds = %790
  %796 = icmp eq i8 %792, 0
  %797 = sitofp i32 %793 to float
  %798 = select i1 %796, float 0.000000e+00, float %797, !prof !2
  %799 = add nuw nsw i32 %791, 1
  store i32 %799, i32* %736, align 8
  %800 = zext i32 %791 to i64
  %801 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %800
  store float %798, float* %801, align 4
  br label %1436

802:                                              ; preds = %2
  %803 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %804 = load i32, i32* %803, align 8
  %805 = icmp ult i32 %804, 100
  br i1 %805, label %806, label %1436

806:                                              ; preds = %802
  %807 = add nuw nsw i32 %804, 1
  store i32 %807, i32* %803, align 8
  %808 = zext i32 %804 to i64
  %809 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %808
  store float 1.000000e+00, float* %809, align 4
  br label %1436

810:                                              ; preds = %2
  %811 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %812 = load i32, i32* %811, align 8
  %813 = icmp ult i32 %812, 100
  br i1 %813, label %814, label %1436

814:                                              ; preds = %810
  %815 = add nuw nsw i32 %812, 1
  store i32 %815, i32* %811, align 8
  %816 = zext i32 %812 to i64
  %817 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %816
  store float 0.000000e+00, float* %817, align 4
  br label %1436

818:                                              ; preds = %2
  %819 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %820 = load i32, i32* %819, align 8
  %821 = icmp eq i32 %820, 0
  br i1 %821, label %1436, label %822

822:                                              ; preds = %818
  %823 = add i32 %820, -1
  store i32 %823, i32* %819, align 8
  br label %1436

824:                                              ; preds = %2
  %825 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %826 = load i32, i32* %825, align 8
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %834, label %828

828:                                              ; preds = %824
  %829 = add i32 %826, -1
  store i32 %829, i32* %825, align 8
  %830 = zext i32 %829 to i64
  %831 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %830
  %832 = load float, float* %831, align 4
  %833 = icmp eq i32 %829, 0
  br i1 %833, label %834, label %837

834:                                              ; preds = %824, %828
  %835 = phi float [ %832, %828 ], [ 0.000000e+00, %824 ]
  store i32 1, i32* %825, align 8
  %836 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 0
  store float %835, float* %836, align 4
  br label %845

837:                                              ; preds = %828
  %838 = add i32 %826, -2
  store i32 %838, i32* %825, align 8
  %839 = icmp ult i32 %838, 100
  br i1 %839, label %840, label %1436

840:                                              ; preds = %837
  %841 = zext i32 %838 to i64
  %842 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %841
  %843 = load float, float* %842, align 4
  store i32 %829, i32* %825, align 8
  store float %832, float* %842, align 4
  %844 = icmp ult i32 %829, 100
  br i1 %844, label %845, label %1436

845:                                              ; preds = %834, %840
  %846 = phi i32 [ 1, %834 ], [ %829, %840 ]
  %847 = phi float [ 0.000000e+00, %834 ], [ %843, %840 ]
  %848 = add nuw nsw i32 %846, 1
  store i32 %848, i32* %825, align 8
  %849 = zext i32 %846 to i64
  %850 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %849
  store float %847, float* %850, align 4
  br label %1436

851:                                              ; preds = %2
  %852 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %853 = load i32, i32* %852, align 8
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %855, label %857

855:                                              ; preds = %851
  store i32 1, i32* %852, align 8
  %856 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 0
  store float 0.000000e+00, float* %856, align 4
  br label %865

857:                                              ; preds = %851
  %858 = add i32 %853, -1
  store i32 %858, i32* %852, align 8
  %859 = icmp ult i32 %858, 100
  br i1 %859, label %860, label %1436

860:                                              ; preds = %857
  %861 = zext i32 %858 to i64
  %862 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %861
  %863 = load float, float* %862, align 4
  store i32 %853, i32* %852, align 8
  %864 = icmp ult i32 %853, 100
  br i1 %864, label %865, label %1436

865:                                              ; preds = %855, %860
  %866 = phi i32 [ 1, %855 ], [ %853, %860 ]
  %867 = phi float [ 0.000000e+00, %855 ], [ %863, %860 ]
  %868 = add nuw nsw i32 %866, 1
  store i32 %868, i32* %852, align 8
  %869 = zext i32 %866 to i64
  %870 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %869
  store float %867, float* %870, align 4
  br label %1436

871:                                              ; preds = %2
  %872 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %873 = load i32, i32* %872, align 8
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %882, label %875

875:                                              ; preds = %871
  %876 = add i32 %873, -1
  store i32 %876, i32* %872, align 8
  %877 = zext i32 %876 to i64
  %878 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %877
  %879 = load float, float* %878, align 4
  %880 = fptosi float %879 to i32
  %881 = icmp slt i32 %880, 0
  br i1 %881, label %1436, label %882

882:                                              ; preds = %871, %875
  %883 = phi i32 [ %876, %875 ], [ 0, %871 ]
  %884 = phi i32 [ %880, %875 ], [ 0, %871 ]
  %885 = add i32 %883, %884
  %886 = icmp ugt i32 %885, 100
  %887 = icmp slt i32 %883, %884
  %888 = or i1 %887, %886
  br i1 %888, label %1436, label %889

889:                                              ; preds = %882
  %890 = icmp sgt i32 %884, 0
  br i1 %890, label %891, label %1045

891:                                              ; preds = %889
  %892 = zext i32 %884 to i64
  %893 = icmp ult i32 %884, 8
  br i1 %893, label %894, label %919

894:                                              ; preds = %1043, %957, %919, %891
  %895 = phi i64 [ 0, %957 ], [ 0, %919 ], [ 0, %891 ], [ %978, %1043 ]
  %896 = xor i64 %895, -1
  %897 = add nsw i64 %896, %892
  %898 = and i64 %892, 3
  %899 = icmp eq i64 %898, 0
  br i1 %899, label %916, label %900

900:                                              ; preds = %894, %900
  %901 = phi i64 [ %913, %900 ], [ %895, %894 ]
  %902 = phi i64 [ %914, %900 ], [ %898, %894 ]
  %903 = trunc i64 %901 to i32
  %904 = add i32 %883, %903
  %905 = sub i32 %904, %884
  %906 = zext i32 %905 to i64
  %907 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %906
  %908 = bitcast float* %907 to i32*
  %909 = load i32, i32* %908, align 4
  %910 = zext i32 %904 to i64
  %911 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %910
  %912 = bitcast float* %911 to i32*
  store i32 %909, i32* %912, align 4
  %913 = add nuw nsw i64 %901, 1
  %914 = add i64 %902, -1
  %915 = icmp eq i64 %914, 0
  br i1 %915, label %916, label %900, !llvm.loop !5

916:                                              ; preds = %900, %894
  %917 = phi i64 [ %895, %894 ], [ %913, %900 ]
  %918 = icmp ult i64 %897, 3
  br i1 %918, label %1045, label %1046

919:                                              ; preds = %891
  %920 = add nsw i64 %892, -1
  %921 = trunc i64 %920 to i32
  %922 = xor i32 %883, -1
  %923 = icmp ult i32 %922, %921
  %924 = icmp ugt i64 %920, 4294967295
  %925 = or i1 %923, %924
  %926 = sub i32 %883, %884
  %927 = trunc i64 %920 to i32
  %928 = xor i32 %926, -1
  %929 = icmp ult i32 %928, %927
  %930 = icmp ugt i64 %920, 4294967295
  %931 = or i1 %929, %930
  %932 = or i1 %925, %931
  %933 = zext i32 %926 to i64
  %934 = shl nuw nsw i64 %933, 2
  %935 = add nuw nsw i64 %934, 32
  %936 = getelementptr i8, i8* %3, i64 %935
  %937 = ptrtoint i8* %936 to i64
  %938 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %920, i64 4)
  %939 = extractvalue { i64, i1 } %938, 0
  %940 = extractvalue { i64, i1 } %938, 1
  %941 = xor i64 %937, -1
  %942 = icmp ugt i64 %939, %941
  %943 = or i1 %942, %940
  %944 = or i1 %932, %943
  %945 = zext i32 %883 to i64
  %946 = shl nuw nsw i64 %945, 2
  %947 = add nuw nsw i64 %946, 32
  %948 = getelementptr i8, i8* %3, i64 %947
  %949 = ptrtoint i8* %948 to i64
  %950 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %920, i64 4)
  %951 = extractvalue { i64, i1 } %950, 0
  %952 = extractvalue { i64, i1 } %950, 1
  %953 = xor i64 %949, -1
  %954 = icmp ugt i64 %951, %953
  %955 = or i1 %954, %952
  %956 = or i1 %944, %955
  br i1 %956, label %894, label %957

957:                                              ; preds = %919
  %958 = zext i32 %883 to i64
  %959 = shl nuw nsw i64 %958, 2
  %960 = add nuw nsw i64 %959, 32
  %961 = getelementptr i8, i8* %3, i64 %960
  %962 = shl nuw nsw i64 %892, 2
  %963 = add nuw nsw i64 %962, %959
  %964 = add nuw nsw i64 %963, 32
  %965 = getelementptr i8, i8* %3, i64 %964
  %966 = sub i32 %883, %884
  %967 = zext i32 %966 to i64
  %968 = shl nuw nsw i64 %967, 2
  %969 = add nuw nsw i64 %968, 32
  %970 = getelementptr i8, i8* %3, i64 %969
  %971 = add nuw nsw i64 %962, %968
  %972 = add nuw nsw i64 %971, 32
  %973 = getelementptr i8, i8* %3, i64 %972
  %974 = icmp ult i8* %961, %973
  %975 = icmp ult i8* %970, %965
  %976 = and i1 %974, %975
  br i1 %976, label %894, label %977

977:                                              ; preds = %957
  %978 = and i64 %892, 4294967288
  %979 = add nsw i64 %978, -8
  %980 = lshr exact i64 %979, 3
  %981 = add nuw nsw i64 %980, 1
  %982 = and i64 %981, 1
  %983 = icmp eq i64 %979, 0
  br i1 %983, label %1025, label %984

984:                                              ; preds = %977
  %985 = sub nuw nsw i64 %981, %982
  br label %986

986:                                              ; preds = %986, %984
  %987 = phi i64 [ 0, %984 ], [ %1020, %986 ]
  %988 = phi i64 [ %985, %984 ], [ %1021, %986 ]
  %989 = trunc i64 %987 to i32
  %990 = add i32 %883, %989
  %991 = sub i32 %990, %884
  %992 = zext i32 %991 to i64
  %993 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %992
  %994 = bitcast float* %993 to <4 x i32>*
  %995 = load <4 x i32>, <4 x i32>* %994, align 4, !alias.scope !7
  %996 = getelementptr inbounds float, float* %993, i64 4
  %997 = bitcast float* %996 to <4 x i32>*
  %998 = load <4 x i32>, <4 x i32>* %997, align 4, !alias.scope !7
  %999 = zext i32 %990 to i64
  %1000 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %999
  %1001 = bitcast float* %1000 to <4 x i32>*
  store <4 x i32> %995, <4 x i32>* %1001, align 4, !alias.scope !10, !noalias !7
  %1002 = getelementptr inbounds float, float* %1000, i64 4
  %1003 = bitcast float* %1002 to <4 x i32>*
  store <4 x i32> %998, <4 x i32>* %1003, align 4, !alias.scope !10, !noalias !7
  %1004 = trunc i64 %987 to i32
  %1005 = or i32 %1004, 8
  %1006 = add i32 %883, %1005
  %1007 = sub i32 %1006, %884
  %1008 = zext i32 %1007 to i64
  %1009 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1008
  %1010 = bitcast float* %1009 to <4 x i32>*
  %1011 = load <4 x i32>, <4 x i32>* %1010, align 4, !alias.scope !7
  %1012 = getelementptr inbounds float, float* %1009, i64 4
  %1013 = bitcast float* %1012 to <4 x i32>*
  %1014 = load <4 x i32>, <4 x i32>* %1013, align 4, !alias.scope !7
  %1015 = zext i32 %1006 to i64
  %1016 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1015
  %1017 = bitcast float* %1016 to <4 x i32>*
  store <4 x i32> %1011, <4 x i32>* %1017, align 4, !alias.scope !10, !noalias !7
  %1018 = getelementptr inbounds float, float* %1016, i64 4
  %1019 = bitcast float* %1018 to <4 x i32>*
  store <4 x i32> %1014, <4 x i32>* %1019, align 4, !alias.scope !10, !noalias !7
  %1020 = add i64 %987, 16
  %1021 = add i64 %988, -2
  %1022 = icmp eq i64 %1021, 0
  br i1 %1022, label %1023, label %986, !llvm.loop !12

1023:                                             ; preds = %986
  %1024 = trunc i64 %1020 to i32
  br label %1025

1025:                                             ; preds = %1023, %977
  %1026 = phi i32 [ 0, %977 ], [ %1024, %1023 ]
  %1027 = icmp eq i64 %982, 0
  br i1 %1027, label %1043, label %1028

1028:                                             ; preds = %1025
  %1029 = add i32 %883, %1026
  %1030 = sub i32 %1029, %884
  %1031 = zext i32 %1030 to i64
  %1032 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1031
  %1033 = bitcast float* %1032 to <4 x i32>*
  %1034 = load <4 x i32>, <4 x i32>* %1033, align 4, !alias.scope !7
  %1035 = getelementptr inbounds float, float* %1032, i64 4
  %1036 = bitcast float* %1035 to <4 x i32>*
  %1037 = load <4 x i32>, <4 x i32>* %1036, align 4, !alias.scope !7
  %1038 = zext i32 %1029 to i64
  %1039 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1038
  %1040 = bitcast float* %1039 to <4 x i32>*
  store <4 x i32> %1034, <4 x i32>* %1040, align 4, !alias.scope !10, !noalias !7
  %1041 = getelementptr inbounds float, float* %1039, i64 4
  %1042 = bitcast float* %1041 to <4 x i32>*
  store <4 x i32> %1037, <4 x i32>* %1042, align 4, !alias.scope !10, !noalias !7
  br label %1043

1043:                                             ; preds = %1025, %1028
  %1044 = icmp eq i64 %978, %892
  br i1 %1044, label %1045, label %894

1045:                                             ; preds = %916, %1046, %1043, %889
  store i32 %885, i32* %872, align 8
  br label %1436

1046:                                             ; preds = %916, %1046
  %1047 = phi i64 [ %1091, %1046 ], [ %917, %916 ]
  %1048 = trunc i64 %1047 to i32
  %1049 = add i32 %883, %1048
  %1050 = sub i32 %1049, %884
  %1051 = zext i32 %1050 to i64
  %1052 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1051
  %1053 = bitcast float* %1052 to i32*
  %1054 = load i32, i32* %1053, align 4
  %1055 = zext i32 %1049 to i64
  %1056 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1055
  %1057 = bitcast float* %1056 to i32*
  store i32 %1054, i32* %1057, align 4
  %1058 = trunc i64 %1047 to i32
  %1059 = add i32 %1058, 1
  %1060 = add i32 %883, %1059
  %1061 = sub i32 %1060, %884
  %1062 = zext i32 %1061 to i64
  %1063 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1062
  %1064 = bitcast float* %1063 to i32*
  %1065 = load i32, i32* %1064, align 4
  %1066 = zext i32 %1060 to i64
  %1067 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1066
  %1068 = bitcast float* %1067 to i32*
  store i32 %1065, i32* %1068, align 4
  %1069 = trunc i64 %1047 to i32
  %1070 = add i32 %1069, 2
  %1071 = add i32 %883, %1070
  %1072 = sub i32 %1071, %884
  %1073 = zext i32 %1072 to i64
  %1074 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1073
  %1075 = bitcast float* %1074 to i32*
  %1076 = load i32, i32* %1075, align 4
  %1077 = zext i32 %1071 to i64
  %1078 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1077
  %1079 = bitcast float* %1078 to i32*
  store i32 %1076, i32* %1079, align 4
  %1080 = trunc i64 %1047 to i32
  %1081 = add i32 %1080, 3
  %1082 = add i32 %883, %1081
  %1083 = sub i32 %1082, %884
  %1084 = zext i32 %1083 to i64
  %1085 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1084
  %1086 = bitcast float* %1085 to i32*
  %1087 = load i32, i32* %1086, align 4
  %1088 = zext i32 %1082 to i64
  %1089 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1088
  %1090 = bitcast float* %1089 to i32*
  store i32 %1087, i32* %1090, align 4
  %1091 = add nuw nsw i64 %1047, 4
  %1092 = icmp eq i64 %1091, %892
  br i1 %1092, label %1045, label %1046, !llvm.loop !14

1093:                                             ; preds = %2
  %1094 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %1095 = load i32, i32* %1094, align 8
  %1096 = icmp eq i32 %1095, 0
  br i1 %1096, label %1436, label %1097

1097:                                             ; preds = %1093
  %1098 = add i32 %1095, -1
  store i32 %1098, i32* %1094, align 8
  %1099 = zext i32 %1098 to i64
  %1100 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1099
  %1101 = load float, float* %1100, align 4
  %1102 = fptosi float %1101 to i32
  %1103 = icmp slt i32 %1102, 0
  br i1 %1103, label %1436, label %1104

1104:                                             ; preds = %1097
  %1105 = icmp sgt i32 %1098, %1102
  %1106 = icmp ult i32 %1098, 100
  %1107 = and i1 %1105, %1106
  br i1 %1107, label %1108, label %1436

1108:                                             ; preds = %1104
  %1109 = xor i32 %1102, -1
  %1110 = add i32 %1098, %1109
  %1111 = zext i32 %1110 to i64
  %1112 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1111
  %1113 = bitcast float* %1112 to i32*
  %1114 = load i32, i32* %1113, align 4
  store i32 %1095, i32* %1094, align 8
  %1115 = bitcast float* %1100 to i32*
  store i32 %1114, i32* %1115, align 4
  br label %1436

1116:                                             ; preds = %2
  %1117 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %1118 = load i32, i32* %1117, align 8
  %1119 = icmp eq i32 %1118, 0
  br i1 %1119, label %1436, label %1120

1120:                                             ; preds = %1116
  %1121 = add i32 %1118, -1
  store i32 %1121, i32* %1117, align 8
  %1122 = zext i32 %1121 to i64
  %1123 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1122
  %1124 = load float, float* %1123, align 4
  %1125 = fptosi float %1124 to i32
  %1126 = icmp eq i32 %1121, 0
  br i1 %1126, label %1436, label %1127

1127:                                             ; preds = %1120
  %1128 = add i32 %1118, -2
  store i32 %1128, i32* %1117, align 8
  %1129 = zext i32 %1128 to i64
  %1130 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %1129
  %1131 = load float, float* %1130, align 4
  %1132 = fptosi float %1131 to i32
  %1133 = icmp eq i32 %1125, 0
  %1134 = icmp eq i32 %1132, 0
  %1135 = or i1 %1133, %1134
  %1136 = icmp eq i32 %1128, 0
  %1137 = or i1 %1135, %1136
  br i1 %1137, label %1436, label %1138

1138:                                             ; preds = %1127
  %1139 = icmp slt i32 %1132, 0
  %1140 = icmp slt i32 %1128, %1132
  %1141 = or i1 %1139, %1140
  br i1 %1141, label %1436, label %1142

1142:                                             ; preds = %1138
  %1143 = srem i32 %1125, %1132
  %1144 = icmp sgt i32 %1143, 0
  %1145 = select i1 %1144, i32 %1132, i32 0
  %1146 = sub nsw i32 %1143, %1145
  %1147 = sext i32 %1132 to i64
  %1148 = sub nsw i64 0, %1147
  %1149 = getelementptr inbounds float, float* %1130, i64 %1148
  %1150 = sext i32 %1146 to i64
  %1151 = sub nsw i64 0, %1150
  %1152 = getelementptr inbounds float, float* %1149, i64 %1151
  %1153 = bitcast float* %1149 to i8*
  %1154 = bitcast float* %1152 to i8*
  %1155 = icmp eq i32 %1146, 0
  %1156 = icmp eq float* %1152, %1130
  %1157 = or i1 %1155, %1156
  br i1 %1157, label %1436, label %1158

1158:                                             ; preds = %1142
  %1159 = icmp eq i64 %1151, 1
  br i1 %1159, label %1160, label %1172

1160:                                             ; preds = %1158
  %1161 = bitcast float* %1149 to i32*
  %1162 = load i32, i32* %1161, align 4
  %1163 = ptrtoint float* %1130 to i64
  %1164 = ptrtoint float* %1152 to i64
  %1165 = sub i64 %1163, %1164
  %1166 = ashr exact i64 %1165, 2
  %1167 = icmp eq i64 %1165, 0
  br i1 %1167, label %1169, label %1168

1168:                                             ; preds = %1160
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1153, i8* align 4 %1154, i64 %1165, i1 false) #18
  br label %1169

1169:                                             ; preds = %1168, %1160
  %1170 = getelementptr inbounds float, float* %1149, i64 %1166
  %1171 = bitcast float* %1170 to i32*
  store i32 %1162, i32* %1171, align 4
  br label %1436

1172:                                             ; preds = %1158
  %1173 = getelementptr inbounds float, float* %1152, i64 1
  %1174 = icmp eq float* %1173, %1130
  br i1 %1174, label %1175, label %1189

1175:                                             ; preds = %1172
  %1176 = getelementptr inbounds float, float* %1130, i64 -1
  %1177 = bitcast float* %1176 to i32*
  %1178 = load i32, i32* %1177, align 4
  %1179 = shl nuw nsw i64 %1148, 2
  %1180 = sub nuw nsw i64 -4, %1179
  %1181 = icmp eq i64 %1180, 0
  br i1 %1181, label %1187, label %1182

1182:                                             ; preds = %1175
  %1183 = ashr exact i64 %1180, 2
  %1184 = sub nsw i64 0, %1183
  %1185 = getelementptr inbounds float, float* %1130, i64 %1184
  %1186 = bitcast float* %1185 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1186, i8* align 4 %1153, i64 %1180, i1 false) #18
  br label %1187

1187:                                             ; preds = %1182, %1175
  %1188 = bitcast float* %1149 to i32*
  store i32 %1178, i32* %1188, align 4
  br label %1436

1189:                                             ; preds = %1172
  %1190 = ptrtoint float* %1152 to i64
  %1191 = ptrtoint float* %1130 to i64
  %1192 = sub i64 %1191, %1190
  %1193 = ashr exact i64 %1192, 2
  %1194 = icmp eq i64 %1193, %1151
  br i1 %1194, label %1195, label %1371

1195:                                             ; preds = %1189
  %1196 = sext i32 %1145 to i64
  %1197 = shl nsw i64 %1196, 2
  %1198 = add nsw i64 %1197, -4
  %1199 = sext i32 %1143 to i64
  %1200 = shl nsw i64 %1199, 2
  %1201 = sub nsw i64 %1198, %1200
  %1202 = lshr exact i64 %1201, 2
  %1203 = add nuw nsw i64 %1202, 1
  %1204 = icmp ult i64 %1203, 8
  br i1 %1204, label %1307, label %1205

1205:                                             ; preds = %1195
  %1206 = shl nuw nsw i64 %1129, 2
  %1207 = add nuw nsw i64 %1206, 32
  %1208 = shl nsw i64 %1147, 2
  %1209 = sub nsw i64 %1207, %1208
  %1210 = getelementptr i8, i8* %3, i64 %1209
  %1211 = sext i32 %1145 to i64
  %1212 = shl nsw i64 %1211, 2
  %1213 = add nsw i64 %1212, -4
  %1214 = sext i32 %1143 to i64
  %1215 = shl nsw i64 %1214, 2
  %1216 = sub nsw i64 %1213, %1215
  %1217 = add nsw i64 %1216, %1206
  %1218 = add nsw i64 %1217, 36
  %1219 = sub nsw i64 %1218, %1208
  %1220 = getelementptr i8, i8* %3, i64 %1219
  %1221 = add nsw i64 %1212, %1206
  %1222 = add nsw i64 %1221, 32
  %1223 = sub nsw i64 %1222, %1215
  %1224 = sub nsw i64 %1223, %1208
  %1225 = getelementptr i8, i8* %3, i64 %1224
  %1226 = add nsw i64 %1216, %1212
  %1227 = add nsw i64 %1226, %1206
  %1228 = add nsw i64 %1227, 36
  %1229 = sub i64 %1228, %1215
  %1230 = sub i64 %1229, %1208
  %1231 = getelementptr i8, i8* %3, i64 %1230
  %1232 = icmp ult i8* %1210, %1231
  %1233 = icmp ult i8* %1225, %1220
  %1234 = and i1 %1232, %1233
  br i1 %1234, label %1307, label %1235

1235:                                             ; preds = %1205
  %1236 = and i64 %1203, 9223372036854775800
  %1237 = getelementptr float, float* %1152, i64 %1236
  %1238 = getelementptr float, float* %1149, i64 %1236
  %1239 = add nsw i64 %1236, -8
  %1240 = lshr exact i64 %1239, 3
  %1241 = add nuw nsw i64 %1240, 1
  %1242 = and i64 %1241, 1
  %1243 = icmp eq i64 %1239, 0
  br i1 %1243, label %1285, label %1244

1244:                                             ; preds = %1235
  %1245 = sub nuw nsw i64 %1241, %1242
  br label %1246

1246:                                             ; preds = %1246, %1244
  %1247 = phi i64 [ 0, %1244 ], [ %1282, %1246 ]
  %1248 = phi i64 [ %1245, %1244 ], [ %1283, %1246 ]
  %1249 = getelementptr float, float* %1152, i64 %1247
  %1250 = getelementptr float, float* %1149, i64 %1247
  %1251 = bitcast float* %1250 to <4 x i32>*
  %1252 = load <4 x i32>, <4 x i32>* %1251, align 4, !alias.scope !15, !noalias !18
  %1253 = getelementptr float, float* %1250, i64 4
  %1254 = bitcast float* %1253 to <4 x i32>*
  %1255 = load <4 x i32>, <4 x i32>* %1254, align 4, !alias.scope !15, !noalias !18
  %1256 = bitcast float* %1249 to <4 x i32>*
  %1257 = load <4 x i32>, <4 x i32>* %1256, align 4, !alias.scope !18
  %1258 = getelementptr float, float* %1249, i64 4
  %1259 = bitcast float* %1258 to <4 x i32>*
  %1260 = load <4 x i32>, <4 x i32>* %1259, align 4, !alias.scope !18
  %1261 = bitcast float* %1250 to <4 x i32>*
  store <4 x i32> %1257, <4 x i32>* %1261, align 4, !alias.scope !15, !noalias !18
  %1262 = bitcast float* %1253 to <4 x i32>*
  store <4 x i32> %1260, <4 x i32>* %1262, align 4, !alias.scope !15, !noalias !18
  %1263 = bitcast float* %1249 to <4 x i32>*
  store <4 x i32> %1252, <4 x i32>* %1263, align 4, !alias.scope !18
  %1264 = bitcast float* %1258 to <4 x i32>*
  store <4 x i32> %1255, <4 x i32>* %1264, align 4, !alias.scope !18
  %1265 = or i64 %1247, 8
  %1266 = getelementptr float, float* %1152, i64 %1265
  %1267 = getelementptr float, float* %1149, i64 %1265
  %1268 = bitcast float* %1267 to <4 x i32>*
  %1269 = load <4 x i32>, <4 x i32>* %1268, align 4, !alias.scope !15, !noalias !18
  %1270 = getelementptr float, float* %1267, i64 4
  %1271 = bitcast float* %1270 to <4 x i32>*
  %1272 = load <4 x i32>, <4 x i32>* %1271, align 4, !alias.scope !15, !noalias !18
  %1273 = bitcast float* %1266 to <4 x i32>*
  %1274 = load <4 x i32>, <4 x i32>* %1273, align 4, !alias.scope !18
  %1275 = getelementptr float, float* %1266, i64 4
  %1276 = bitcast float* %1275 to <4 x i32>*
  %1277 = load <4 x i32>, <4 x i32>* %1276, align 4, !alias.scope !18
  %1278 = bitcast float* %1267 to <4 x i32>*
  store <4 x i32> %1274, <4 x i32>* %1278, align 4, !alias.scope !15, !noalias !18
  %1279 = bitcast float* %1270 to <4 x i32>*
  store <4 x i32> %1277, <4 x i32>* %1279, align 4, !alias.scope !15, !noalias !18
  %1280 = bitcast float* %1266 to <4 x i32>*
  store <4 x i32> %1269, <4 x i32>* %1280, align 4, !alias.scope !18
  %1281 = bitcast float* %1275 to <4 x i32>*
  store <4 x i32> %1272, <4 x i32>* %1281, align 4, !alias.scope !18
  %1282 = add i64 %1247, 16
  %1283 = add i64 %1248, -2
  %1284 = icmp eq i64 %1283, 0
  br i1 %1284, label %1285, label %1246, !llvm.loop !20

1285:                                             ; preds = %1246, %1235
  %1286 = phi i64 [ 0, %1235 ], [ %1282, %1246 ]
  %1287 = icmp eq i64 %1242, 0
  br i1 %1287, label %1305, label %1288

1288:                                             ; preds = %1285
  %1289 = getelementptr float, float* %1152, i64 %1286
  %1290 = getelementptr float, float* %1149, i64 %1286
  %1291 = bitcast float* %1290 to <4 x i32>*
  %1292 = load <4 x i32>, <4 x i32>* %1291, align 4, !alias.scope !15, !noalias !18
  %1293 = getelementptr float, float* %1290, i64 4
  %1294 = bitcast float* %1293 to <4 x i32>*
  %1295 = load <4 x i32>, <4 x i32>* %1294, align 4, !alias.scope !15, !noalias !18
  %1296 = bitcast float* %1289 to <4 x i32>*
  %1297 = load <4 x i32>, <4 x i32>* %1296, align 4, !alias.scope !18
  %1298 = getelementptr float, float* %1289, i64 4
  %1299 = bitcast float* %1298 to <4 x i32>*
  %1300 = load <4 x i32>, <4 x i32>* %1299, align 4, !alias.scope !18
  %1301 = bitcast float* %1290 to <4 x i32>*
  store <4 x i32> %1297, <4 x i32>* %1301, align 4, !alias.scope !15, !noalias !18
  %1302 = bitcast float* %1293 to <4 x i32>*
  store <4 x i32> %1300, <4 x i32>* %1302, align 4, !alias.scope !15, !noalias !18
  %1303 = bitcast float* %1289 to <4 x i32>*
  store <4 x i32> %1292, <4 x i32>* %1303, align 4, !alias.scope !18
  %1304 = bitcast float* %1298 to <4 x i32>*
  store <4 x i32> %1295, <4 x i32>* %1304, align 4, !alias.scope !18
  br label %1305

1305:                                             ; preds = %1285, %1288
  %1306 = icmp eq i64 %1203, %1236
  br i1 %1306, label %1436, label %1307

1307:                                             ; preds = %1305, %1205, %1195
  %1308 = phi float* [ %1152, %1205 ], [ %1152, %1195 ], [ %1237, %1305 ]
  %1309 = phi float* [ %1149, %1205 ], [ %1149, %1195 ], [ %1238, %1305 ]
  %1310 = ptrtoint float* %1309 to i64
  %1311 = sext i32 %1145 to i64
  %1312 = add nsw i64 %1311, %1129
  %1313 = shl nsw i64 %1312, 2
  %1314 = add nsw i64 %1313, 28
  %1315 = sub i64 %1314, %1310
  %1316 = sext i32 %1143 to i64
  %1317 = shl nsw i64 %1316, 2
  %1318 = sub i64 %1315, %1317
  %1319 = shl nsw i64 %1147, 2
  %1320 = sub i64 %1318, %1319
  %1321 = getelementptr i8, i8* %3, i64 %1320
  %1322 = ptrtoint i8* %1321 to i64
  %1323 = lshr i64 %1322, 2
  %1324 = add nuw nsw i64 %1323, 1
  %1325 = and i64 %1324, 3
  %1326 = icmp eq i64 %1325, 0
  br i1 %1326, label %1339, label %1327

1327:                                             ; preds = %1307, %1327
  %1328 = phi float* [ %1336, %1327 ], [ %1308, %1307 ]
  %1329 = phi float* [ %1335, %1327 ], [ %1309, %1307 ]
  %1330 = phi i64 [ %1337, %1327 ], [ %1325, %1307 ]
  %1331 = bitcast float* %1329 to i32*
  %1332 = load i32, i32* %1331, align 4
  %1333 = bitcast float* %1328 to i32*
  %1334 = load i32, i32* %1333, align 4
  store i32 %1334, i32* %1331, align 4
  store i32 %1332, i32* %1333, align 4
  %1335 = getelementptr inbounds float, float* %1329, i64 1
  %1336 = getelementptr inbounds float, float* %1328, i64 1
  %1337 = add i64 %1330, -1
  %1338 = icmp eq i64 %1337, 0
  br i1 %1338, label %1339, label %1327, !llvm.loop !21

1339:                                             ; preds = %1327, %1307
  %1340 = phi float* [ %1308, %1307 ], [ %1336, %1327 ]
  %1341 = phi float* [ %1309, %1307 ], [ %1335, %1327 ]
  %1342 = icmp ult i8* %1321, inttoptr (i64 12 to i8*)
  br i1 %1342, label %1436, label %1343

1343:                                             ; preds = %1339, %1343
  %1344 = phi float* [ %1369, %1343 ], [ %1340, %1339 ]
  %1345 = phi float* [ %1368, %1343 ], [ %1341, %1339 ]
  %1346 = bitcast float* %1345 to i32*
  %1347 = load i32, i32* %1346, align 4
  %1348 = bitcast float* %1344 to i32*
  %1349 = load i32, i32* %1348, align 4
  store i32 %1349, i32* %1346, align 4
  store i32 %1347, i32* %1348, align 4
  %1350 = getelementptr inbounds float, float* %1345, i64 1
  %1351 = getelementptr inbounds float, float* %1344, i64 1
  %1352 = bitcast float* %1350 to i32*
  %1353 = load i32, i32* %1352, align 4
  %1354 = bitcast float* %1351 to i32*
  %1355 = load i32, i32* %1354, align 4
  store i32 %1355, i32* %1352, align 4
  store i32 %1353, i32* %1354, align 4
  %1356 = getelementptr inbounds float, float* %1345, i64 2
  %1357 = getelementptr inbounds float, float* %1344, i64 2
  %1358 = bitcast float* %1356 to i32*
  %1359 = load i32, i32* %1358, align 4
  %1360 = bitcast float* %1357 to i32*
  %1361 = load i32, i32* %1360, align 4
  store i32 %1361, i32* %1358, align 4
  store i32 %1359, i32* %1360, align 4
  %1362 = getelementptr inbounds float, float* %1345, i64 3
  %1363 = getelementptr inbounds float, float* %1344, i64 3
  %1364 = bitcast float* %1362 to i32*
  %1365 = load i32, i32* %1364, align 4
  %1366 = bitcast float* %1363 to i32*
  %1367 = load i32, i32* %1366, align 4
  store i32 %1367, i32* %1364, align 4
  store i32 %1365, i32* %1366, align 4
  %1368 = getelementptr inbounds float, float* %1345, i64 4
  %1369 = getelementptr inbounds float, float* %1344, i64 4
  %1370 = icmp eq float* %1368, %1152
  br i1 %1370, label %1436, label %1343, !llvm.loop !22

1371:                                             ; preds = %1189, %1371
  %1372 = phi i64 [ %1374, %1371 ], [ %1193, %1189 ]
  %1373 = phi i64 [ %1372, %1371 ], [ %1151, %1189 ]
  %1374 = srem i64 %1373, %1372
  %1375 = icmp eq i64 %1374, 0
  br i1 %1375, label %1376, label %1371

1376:                                             ; preds = %1371
  %1377 = icmp eq i64 %1372, 0
  br i1 %1377, label %1436, label %1378

1378:                                             ; preds = %1376
  %1379 = getelementptr inbounds float, float* %1149, i64 %1372
  %1380 = shl nsw i64 %1372, 2
  %1381 = add i64 %1380, -4
  %1382 = and i64 %1381, 4
  %1383 = icmp eq i64 %1382, 0
  br i1 %1383, label %1384, label %1406

1384:                                             ; preds = %1378
  %1385 = getelementptr inbounds float, float* %1379, i64 -1
  %1386 = bitcast float* %1385 to i32*
  %1387 = load i32, i32* %1386, align 4
  %1388 = getelementptr inbounds float, float* %1385, i64 %1151
  br label %1389

1389:                                             ; preds = %1389, %1384
  %1390 = phi float* [ %1385, %1384 ], [ %1391, %1389 ]
  %1391 = phi float* [ %1388, %1384 ], [ %1402, %1389 ]
  %1392 = bitcast float* %1391 to i32*
  %1393 = load i32, i32* %1392, align 4
  %1394 = bitcast float* %1390 to i32*
  store i32 %1393, i32* %1394, align 4
  %1395 = ptrtoint float* %1391 to i64
  %1396 = sub i64 %1191, %1395
  %1397 = ashr exact i64 %1396, 2
  %1398 = icmp sgt i64 %1397, %1151
  %1399 = getelementptr inbounds float, float* %1391, i64 %1151
  %1400 = sub nsw i64 %1151, %1397
  %1401 = getelementptr inbounds float, float* %1149, i64 %1400
  %1402 = select i1 %1398, float* %1399, float* %1401
  %1403 = icmp eq float* %1402, %1385
  br i1 %1403, label %1404, label %1389

1404:                                             ; preds = %1389
  %1405 = bitcast float* %1391 to i32*
  store i32 %1387, i32* %1405, align 4
  br label %1406

1406:                                             ; preds = %1404, %1378
  %1407 = phi float* [ %1379, %1378 ], [ %1385, %1404 ]
  %1408 = icmp eq i64 %1381, 0
  br i1 %1408, label %1436, label %1409

1409:                                             ; preds = %1406, %1452
  %1410 = phi float* [ %1432, %1452 ], [ %1407, %1406 ]
  %1411 = getelementptr inbounds float, float* %1410, i64 -1
  %1412 = bitcast float* %1411 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = getelementptr inbounds float, float* %1411, i64 %1151
  br label %1415

1415:                                             ; preds = %1415, %1409
  %1416 = phi float* [ %1411, %1409 ], [ %1417, %1415 ]
  %1417 = phi float* [ %1414, %1409 ], [ %1428, %1415 ]
  %1418 = bitcast float* %1417 to i32*
  %1419 = load i32, i32* %1418, align 4
  %1420 = bitcast float* %1416 to i32*
  store i32 %1419, i32* %1420, align 4
  %1421 = ptrtoint float* %1417 to i64
  %1422 = sub i64 %1191, %1421
  %1423 = ashr exact i64 %1422, 2
  %1424 = icmp sgt i64 %1423, %1151
  %1425 = getelementptr inbounds float, float* %1417, i64 %1151
  %1426 = sub nsw i64 %1151, %1423
  %1427 = getelementptr inbounds float, float* %1149, i64 %1426
  %1428 = select i1 %1424, float* %1425, float* %1427
  %1429 = icmp eq float* %1428, %1411
  br i1 %1429, label %1430, label %1415

1430:                                             ; preds = %1415
  %1431 = bitcast float* %1417 to i32*
  store i32 %1413, i32* %1431, align 4
  %1432 = getelementptr inbounds float, float* %1410, i64 -2
  %1433 = bitcast float* %1432 to i32*
  %1434 = load i32, i32* %1433, align 4
  %1435 = getelementptr inbounds float, float* %1432, i64 %1151
  br label %1437

1436:                                             ; preds = %1406, %1452, %1339, %1343, %1305, %1093, %1116, %1120, %857, %837, %1187, %1169, %1142, %1376, %1108, %865, %860, %845, %840, %822, %818, %814, %810, %806, %802, %795, %790, %729, %720, %710, %701, %682, %673, %654, %641, %627, %620, %600, %593, %573, %566, %546, %539, %519, %512, %492, %485, %466, %458, %450, %445, %432, %427, %414, %408, %386, %376, %357, %351, %337, %331, %317, %312, %297, %289, %281, %277, %254, %247, %237, %230, %220, %213, %203, %196, %187, %185, %181, %178, %145, %143, %139, %136, %102, %95, %76, %69, %50, %43, %24, %17, %1127, %1138, %1104, %1097, %1045, %882, %875, %2
  ret i1 true

1437:                                             ; preds = %1437, %1430
  %1438 = phi float* [ %1432, %1430 ], [ %1439, %1437 ]
  %1439 = phi float* [ %1435, %1430 ], [ %1450, %1437 ]
  %1440 = bitcast float* %1439 to i32*
  %1441 = load i32, i32* %1440, align 4
  %1442 = bitcast float* %1438 to i32*
  store i32 %1441, i32* %1442, align 4
  %1443 = ptrtoint float* %1439 to i64
  %1444 = sub i64 %1191, %1443
  %1445 = ashr exact i64 %1444, 2
  %1446 = icmp sgt i64 %1445, %1151
  %1447 = getelementptr inbounds float, float* %1439, i64 %1151
  %1448 = sub nsw i64 %1151, %1445
  %1449 = getelementptr inbounds float, float* %1149, i64 %1448
  %1450 = select i1 %1446, float* %1447, float* %1449
  %1451 = icmp eq float* %1450, %1432
  br i1 %1451, label %1452, label %1437

1452:                                             ; preds = %1437
  %1453 = bitcast float* %1439 to i32*
  store i32 %1434, i32* %1453, align 4
  %1454 = icmp eq float* %1432, %1149
  br i1 %1454, label %1436, label %1409
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CPDF_PSProc21AddOperatorForTestingEN5fxcrt18StringViewTemplateIcEE(%class.CPDF_PSProc*, %"class.fxcrt::StringViewTemplate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %4 = bitcast %"class.fxcrt::StringViewTemplate"* %3 to i8*
  %5 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 16, i1 false)
  call void @_ZN11CPDF_PSProc11AddOperatorEN5fxcrt18StringViewTemplateIcEE(%class.CPDF_PSProc* %0, %"class.fxcrt::StringViewTemplate"* nonnull %3)
  ret void
}

declare float @_Z13StringToFloatN5fxcrt18StringViewTemplateIcEE(%"class.fxcrt::StringViewTemplate"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CPDF_PSEngineC2Ev(%class.CPDF_PSEngine* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 1
  %4 = bitcast %class.CPDF_PSProc* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CPDF_PSEngineD2Ev(%class.CPDF_PSEngine* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 1
  tail call void @_ZN11CPDF_PSProcD2Ev(%class.CPDF_PSProc* %2) #18
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden float @_ZN13CPDF_PSEngine3PopEv(%class.CPDF_PSEngine* nocapture) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = add i32 %3, -1
  store i32 %6, i32* %2, align 8
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 2, i64 %7
  %9 = load float, float* %8, align 4
  br label %10

10:                                               ; preds = %1, %5
  %11 = phi float [ %9, %5 ], [ 0.000000e+00, %1 ]
  ret float %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13CPDF_PSEngine5ParseEN6pdfium4spanIKhEE(%class.CPDF_PSEngine*, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.CPDF_SimpleParser, align 8
  %4 = alloca %"class.pdfium::span", align 8
  %5 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %6 = bitcast %class.CPDF_SimpleParser* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #18
  %7 = bitcast %"class.pdfium::span"* %4 to i8*
  %8 = bitcast %"class.pdfium::span"* %1 to i8*
  %9 = bitcast %class.CPDF_SimpleParser* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %8, i64 16, i1 false)
  call void @_ZN17CPDF_SimpleParserC1EN6pdfium4spanIKhEE(%class.CPDF_SimpleParser* nonnull %3, %"class.pdfium::span"* nonnull %4) #18
  %10 = bitcast %"class.fxcrt::StringViewTemplate"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #18
  call void @_ZN17CPDF_SimpleParser7GetWordEv(%"class.fxcrt::StringViewTemplate"* nonnull sret %5, %class.CPDF_SimpleParser* nonnull %3) #18
  %11 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %5, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %14, label %22

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.fxcrt::StringViewTemplate", %"class.fxcrt::StringViewTemplate"* %5, i64 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 123
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.CPDF_PSEngine, %class.CPDF_PSEngine* %0, i64 0, i32 1
  %21 = call zeroext i1 @_ZN11CPDF_PSProc5ParseEP17CPDF_SimpleParseri(%class.CPDF_PSProc* %20, %class.CPDF_SimpleParser* nonnull %3, i32 0)
  br label %22

22:                                               ; preds = %14, %2, %19
  %23 = phi i1 [ %21, %19 ], [ false, %2 ], [ false, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #18
  call void @_ZN17CPDF_SimpleParserD1Ev(%class.CPDF_SimpleParser* nonnull %3) #18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #18
  ret i1 %23
}

declare void @_ZN17CPDF_SimpleParserC1EN6pdfium4spanIKhEE(%class.CPDF_SimpleParser*, %"class.pdfium::span"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN17CPDF_SimpleParserD1Ev(%class.CPDF_SimpleParser*) unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @atan2f(float, float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @logf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @log10f(float) local_unnamed_addr #8

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #9

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"*, %"class.std::__1::unique_ptr.0"*) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i64 0, i32 1
  %4 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr.0"* %4, %1
  br i1 %5, label %30, label %6

6:                                                ; preds = %2, %28
  %7 = phi %"class.std::__1::unique_ptr.0"* [ %8, %28 ], [ %4, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %7, i64 -1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %9, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %9, align 8
  %11 = icmp eq %class.CPDF_PSOP* %10, null
  br i1 %11, label %28, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %10, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %13, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %13, align 8
  %15 = icmp eq %class.CPDF_PSProc* %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %14, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %17, align 8
  %19 = icmp eq %"class.std::__1::unique_ptr.0"* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %14, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %21, %"class.std::__1::unique_ptr.0"* nonnull %18) #18
  %22 = bitcast %class.CPDF_PSProc* %14 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #17
  br label %24

24:                                               ; preds = %16, %20
  %25 = bitcast %class.CPDF_PSProc* %14 to i8*
  tail call void @_ZdlPv(i8* %25) #17
  br label %26

26:                                               ; preds = %12, %24
  %27 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %10, i64 0, i32 0
  tail call void @_ZdlPv(i8* %27) #17
  br label %28

28:                                               ; preds = %6, %26
  %29 = icmp eq %"class.std::__1::unique_ptr.0"* %8, %1
  br i1 %29, label %30, label %6

30:                                               ; preds = %28, %2
  store %"class.std::__1::unique_ptr.0"* %1, %"class.std::__1::unique_ptr.0"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116allocator_traitsINS_9allocatorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS3_EEEEEEE7destroyIS6_vEEvRS7_PT_(%"class.std::__1::allocator"* dereferenceable(1), %"class.std::__1::unique_ptr.0"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %3, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %3, align 8
  %5 = icmp eq %class.CPDF_PSOP* %4, null
  br i1 %5, label %52, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %7, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %7, align 8
  %9 = icmp eq %class.CPDF_PSProc* %8, null
  br i1 %9, label %50, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %8, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %11, align 8
  %13 = icmp eq %"class.std::__1::unique_ptr.0"* %12, null
  br i1 %13, label %48, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.std::__1::unique_ptr.0"* %12 to i8*
  %16 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %8, i64 0, i32 0, i32 0, i32 1
  %17 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %16, align 8
  %18 = icmp eq %"class.std::__1::unique_ptr.0"* %17, %12
  br i1 %18, label %46, label %19

19:                                               ; preds = %14, %41
  %20 = phi %"class.std::__1::unique_ptr.0"* [ %21, %41 ], [ %17, %14 ]
  %21 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %20, i64 -1
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %class.CPDF_PSOP*, %class.CPDF_PSOP** %22, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %22, align 8
  %24 = icmp eq %class.CPDF_PSOP* %23, null
  br i1 %24, label %41, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %23, i64 0, i32 2, i32 0, i32 0, i32 0
  %27 = load %class.CPDF_PSProc*, %class.CPDF_PSProc** %26, align 8
  store %class.CPDF_PSProc* null, %class.CPDF_PSProc** %26, align 8
  %28 = icmp eq %class.CPDF_PSProc* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %27, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %30, align 8
  %32 = icmp eq %"class.std::__1::unique_ptr.0"* %31, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.CPDF_PSProc, %class.CPDF_PSProc* %27, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__113__vector_baseINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE17__destruct_at_endEPS5_(%"class.std::__1::__vector_base"* %34, %"class.std::__1::unique_ptr.0"* nonnull %31) #18
  %35 = bitcast %class.CPDF_PSProc* %27 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @_ZdlPv(i8* %36) #17
  br label %37

37:                                               ; preds = %29, %33
  %38 = bitcast %class.CPDF_PSProc* %27 to i8*
  tail call void @_ZdlPv(i8* %38) #17
  br label %39

39:                                               ; preds = %25, %37
  %40 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %23, i64 0, i32 0
  tail call void @_ZdlPv(i8* %40) #17
  br label %41

41:                                               ; preds = %19, %39
  %42 = icmp eq %"class.std::__1::unique_ptr.0"* %21, %12
  br i1 %42, label %43, label %19

43:                                               ; preds = %41
  %44 = bitcast %class.CPDF_PSProc* %8 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %14, %43
  %47 = phi i8* [ %45, %43 ], [ %15, %14 ]
  store %"class.std::__1::unique_ptr.0"* %12, %"class.std::__1::unique_ptr.0"** %16, align 8
  tail call void @_ZdlPv(i8* %47) #17
  br label %48

48:                                               ; preds = %10, %46
  %49 = bitcast %class.CPDF_PSProc* %8 to i8*
  tail call void @_ZdlPv(i8* %49) #17
  br label %50

50:                                               ; preds = %6, %48
  %51 = getelementptr inbounds %class.CPDF_PSOP, %class.CPDF_PSOP* %4, i64 0, i32 0
  tail call void @_ZdlPv(i8* %51) #17
  br label %52

52:                                               ; preds = %2, %50
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #13

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::unique_ptr.0"* dereferenceable(8)) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2
  %4 = bitcast %"class.std::__1::__compressed_pair.1"* %3 to %"class.std::__1::allocator"*
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::unique_ptr.0"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 3
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 2305843009213693951
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #20
  unreachable

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"class.std::__1::unique_ptr.0"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = ashr exact i64 %20, 3
  %22 = icmp ult i64 %21, 1152921504606846975
  br i1 %22, label %23, label %31

23:                                               ; preds = %16
  %24 = ashr exact i64 %20, 2
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %36, label %28

28:                                               ; preds = %23
  %29 = icmp ugt i64 %26, 2305843009213693951
  br i1 %29, label %30, label %31

30:                                               ; preds = %28
  tail call void @abort() #20
  unreachable

31:                                               ; preds = %16, %28
  %32 = phi i64 [ %26, %28 ], [ 2305843009213693951, %16 ]
  %33 = shl i64 %32, 3
  %34 = tail call i8* @_Znwm(i64 %33) #17
  %35 = bitcast i8* %34 to %"class.std::__1::unique_ptr.0"*
  br label %36

36:                                               ; preds = %23, %31
  %37 = phi i64 [ %32, %31 ], [ 0, %23 ]
  %38 = phi %"class.std::__1::unique_ptr.0"* [ %35, %31 ], [ null, %23 ]
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %38, i64 %11
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %38, i64 %37
  %41 = ptrtoint %"class.std::__1::unique_ptr.0"* %40 to i64
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %1, i64 0, i32 0, i32 0, i32 0
  %43 = bitcast %"class.std::__1::unique_ptr.0"* %1 to i64*
  %44 = load i64, i64* %43, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %42, align 8
  %45 = bitcast %"class.std::__1::unique_ptr.0"* %39 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %39, i64 1
  %47 = ptrtoint %"class.std::__1::unique_ptr.0"* %46 to i64
  %48 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %49 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %48, align 8
  %50 = ptrtoint %"class.std::__1::unique_ptr.0"* %49 to i64
  %51 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %5, align 8
  %52 = icmp eq %"class.std::__1::unique_ptr.0"* %51, %49
  br i1 %52, label %134, label %53

53:                                               ; preds = %36
  %54 = getelementptr %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %51, i64 -1, i32 0, i32 0, i32 0
  %55 = ptrtoint %class.CPDF_PSOP** %54 to i64
  %56 = sub i64 %55, %50
  %57 = lshr i64 %56, 3
  %58 = add nuw nsw i64 %57, 1
  %59 = and i64 %58, 7
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %73, label %61

61:                                               ; preds = %53, %61
  %62 = phi %"class.std::__1::unique_ptr.0"* [ %65, %61 ], [ %39, %53 ]
  %63 = phi %"class.std::__1::unique_ptr.0"* [ %66, %61 ], [ %51, %53 ]
  %64 = phi i64 [ %71, %61 ], [ %59, %53 ]
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %62, i64 -1
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %63, i64 -1
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = bitcast %"class.std::__1::unique_ptr.0"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %67, align 8
  %70 = bitcast %"class.std::__1::unique_ptr.0"* %65 to i64*
  store i64 %69, i64* %70, align 8
  %71 = add i64 %64, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %61, !llvm.loop !23

73:                                               ; preds = %61, %53
  %74 = phi %"class.std::__1::unique_ptr.0"* [ undef, %53 ], [ %65, %61 ]
  %75 = phi %"class.std::__1::unique_ptr.0"* [ %39, %53 ], [ %65, %61 ]
  %76 = phi %"class.std::__1::unique_ptr.0"* [ %51, %53 ], [ %66, %61 ]
  %77 = icmp ult i64 %56, 56
  br i1 %77, label %130, label %78

78:                                               ; preds = %73, %78
  %79 = phi %"class.std::__1::unique_ptr.0"* [ %123, %78 ], [ %75, %73 ]
  %80 = phi %"class.std::__1::unique_ptr.0"* [ %124, %78 ], [ %76, %73 ]
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -1
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -1
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.std::__1::unique_ptr.0"* %82 to i64*
  %85 = load i64, i64* %84, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %83, align 8
  %86 = bitcast %"class.std::__1::unique_ptr.0"* %81 to i64*
  store i64 %85, i64* %86, align 8
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -2
  %88 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -2
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %88, i64 0, i32 0, i32 0, i32 0
  %90 = bitcast %"class.std::__1::unique_ptr.0"* %88 to i64*
  %91 = load i64, i64* %90, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %89, align 8
  %92 = bitcast %"class.std::__1::unique_ptr.0"* %87 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -3
  %94 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -3
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %94, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.std::__1::unique_ptr.0"* %94 to i64*
  %97 = load i64, i64* %96, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %95, align 8
  %98 = bitcast %"class.std::__1::unique_ptr.0"* %93 to i64*
  store i64 %97, i64* %98, align 8
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -4
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -4
  %101 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %100, i64 0, i32 0, i32 0, i32 0
  %102 = bitcast %"class.std::__1::unique_ptr.0"* %100 to i64*
  %103 = load i64, i64* %102, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %101, align 8
  %104 = bitcast %"class.std::__1::unique_ptr.0"* %99 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -5
  %106 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -5
  %107 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %106, i64 0, i32 0, i32 0, i32 0
  %108 = bitcast %"class.std::__1::unique_ptr.0"* %106 to i64*
  %109 = load i64, i64* %108, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %107, align 8
  %110 = bitcast %"class.std::__1::unique_ptr.0"* %105 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -6
  %112 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -6
  %113 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %112, i64 0, i32 0, i32 0, i32 0
  %114 = bitcast %"class.std::__1::unique_ptr.0"* %112 to i64*
  %115 = load i64, i64* %114, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %113, align 8
  %116 = bitcast %"class.std::__1::unique_ptr.0"* %111 to i64*
  store i64 %115, i64* %116, align 8
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -7
  %118 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -7
  %119 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %118, i64 0, i32 0, i32 0, i32 0
  %120 = bitcast %"class.std::__1::unique_ptr.0"* %118 to i64*
  %121 = load i64, i64* %120, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %119, align 8
  %122 = bitcast %"class.std::__1::unique_ptr.0"* %117 to i64*
  store i64 %121, i64* %122, align 8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %79, i64 -8
  %124 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %80, i64 -8
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = bitcast %"class.std::__1::unique_ptr.0"* %124 to i64*
  %127 = load i64, i64* %126, align 8
  store %class.CPDF_PSOP* null, %class.CPDF_PSOP** %125, align 8
  %128 = bitcast %"class.std::__1::unique_ptr.0"* %123 to i64*
  store i64 %127, i64* %128, align 8
  %129 = icmp eq %"class.std::__1::unique_ptr.0"* %124, %49
  br i1 %129, label %130, label %78

130:                                              ; preds = %78, %73
  %131 = phi %"class.std::__1::unique_ptr.0"* [ %74, %73 ], [ %123, %78 ]
  %132 = load i64, i64* %8, align 8
  %133 = load %"class.std::__1::unique_ptr.0"*, %"class.std::__1::unique_ptr.0"** %5, align 8
  br label %134

134:                                              ; preds = %36, %130
  %135 = phi %"class.std::__1::unique_ptr.0"* [ %133, %130 ], [ %49, %36 ]
  %136 = phi %"class.std::__1::unique_ptr.0"* [ %131, %130 ], [ %39, %36 ]
  %137 = phi i64 [ %132, %130 ], [ %50, %36 ]
  %138 = ptrtoint %"class.std::__1::unique_ptr.0"* %136 to i64
  store i64 %138, i64* %8, align 8
  store i64 %47, i64* %6, align 8
  store i64 %41, i64* %18, align 8
  %139 = inttoptr i64 %137 to %"class.std::__1::unique_ptr.0"*
  %140 = icmp eq %"class.std::__1::unique_ptr.0"* %135, %139
  br i1 %140, label %145, label %141

141:                                              ; preds = %134, %141
  %142 = phi %"class.std::__1::unique_ptr.0"* [ %143, %141 ], [ %135, %134 ]
  %143 = getelementptr inbounds %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.0"* %142, i64 -1
  tail call void @_ZNSt3__116allocator_traitsINS_9allocatorINS_10unique_ptrI9CPDF_PSOPNS_14default_deleteIS3_EEEEEEE7destroyIS6_vEEvRS7_PT_(%"class.std::__1::allocator"* dereferenceable(1) %4, %"class.std::__1::unique_ptr.0"* %143) #18
  %144 = icmp eq %"class.std::__1::unique_ptr.0"* %143, %139
  br i1 %144, label %145, label %141

145:                                              ; preds = %141, %134
  %146 = icmp eq i64 %137, 0
  br i1 %146, label %149, label %147

147:                                              ; preds = %145
  %148 = inttoptr i64 %137 to i8*
  tail call void @_ZdlPv(i8* %148) #17
  br label %149

149:                                              ; preds = %145, %147
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #15

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #16

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { builtin nounwind }
attributes #18 = { nounwind }
attributes #19 = { nounwind readonly }
attributes #20 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 2000, i32 2002}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !13}
!21 = distinct !{!21, !6}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !6}
