; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLConstructorScalarCast.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLConstructorScalarCast.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.16" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.SkSL::Type"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type opaque
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.8", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.10" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.SkSL::Type::Field"* }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Expression"* }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::Literal.52" = type <{ %"class.SkSL::Expression", float, [4 x i8] }>
%"class.SkSL::Literal" = type { %"class.SkSL::Expression", i64 }
%"class.SkSL::Literal.65" = type <{ %"class.SkSL::Expression", i8, [7 x i8] }>
%"class.SkSL::ConstructorScalarCast" = type { %"class.SkSL::SingleArgumentConstructor" }
%"class.SkSL::SingleArgumentConstructor" = type { %"class.SkSL::AnyConstructor", %"class.std::__1::unique_ptr" }
%"class.SkSL::AnyConstructor" = type { %"class.SkSL::Expression", %"class.std::__1::unique_ptr" }

$_ZN4SkSL7LiteralIfED0Ev = comdat any

$_ZNK4SkSL7LiteralIfE11descriptionEv = comdat any

$_ZNK4SkSL10Expression4typeEv = comdat any

$_ZNK4SkSL7LiteralIfE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIfE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL10Expression19isConstantOrUniformEv = comdat any

$_ZNK4SkSL7LiteralIfE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL7LiteralIfE12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL7LiteralIfE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIfE5cloneEv = comdat any

$_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE = comdat any

$_ZN4SkSL7LiteralIlED0Ev = comdat any

$_ZNK4SkSL7LiteralIlE11descriptionEv = comdat any

$_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE = comdat any

$_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIlE5cloneEv = comdat any

$_ZN4SkSL6IRNodeD2Ev = comdat any

$_ZN4SkSL7LiteralIbED0Ev = comdat any

$_ZNK4SkSL7LiteralIbE11descriptionEv = comdat any

$_ZNK4SkSL7LiteralIbE21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL7LiteralIbE15compareConstantERKNS_10ExpressionE = comdat any

$_ZNK4SkSL7LiteralIbE11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL7LiteralIbE24getConstantSubexpressionEi = comdat any

$_ZNK4SkSL7LiteralIbE5cloneEv = comdat any

$_ZN4SkSL21ConstructorScalarCastD0Ev = comdat any

$_ZNK4SkSL14AnyConstructor11descriptionEv = comdat any

$_ZNK4SkSL21ConstructorScalarCast21isCompileTimeConstantEv = comdat any

$_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv = comdat any

$_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE = comdat any

$_ZNK4SkSL21ConstructorScalarCast5cloneEv = comdat any

$_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv = comdat any

$_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv = comdat any

$_ZN4SkSL25SingleArgumentConstructorD2Ev = comdat any

$_ZN4SkSL25SingleArgumentConstructorD0Ev = comdat any

$_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv = comdat any

$_ZTVN4SkSL7LiteralIfEE = comdat any

$_ZTVN4SkSL7LiteralIlEE = comdat any

$_ZTVN4SkSL7LiteralIbEE = comdat any

$_ZTVN4SkSL21ConstructorScalarCastE = comdat any

$_ZTVN4SkSL25SingleArgumentConstructorE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"invalid arguments to '\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"' constructor, (expected exactly 1 argument, but found \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"invalid argument to '\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"' constructor (expected a number or bool, but found '\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"')\00", align 1
@_ZTVN4SkSL7LiteralIfEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal.52"*)* @_ZN4SkSL7LiteralIfED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal.52"*)* @_ZNK4SkSL7LiteralIfE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.52"*)* @_ZNK4SkSL7LiteralIfE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal.52"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIfE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.52"*, i32)* @_ZNK4SkSL7LiteralIfE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Literal.52"*, %"class.SkSL::Type"*)* @_ZNK4SkSL7LiteralIfE12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.52"*, i32)* @_ZNK4SkSL7LiteralIfE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.52"*)* @_ZNK4SkSL7LiteralIfE5cloneEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL7LiteralIlEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal"*)* @_ZN4SkSL7LiteralIlED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal"*)* @_ZNK4SkSL7LiteralIlE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal"*)* @_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal"*, i32)* @_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Literal"*, %"class.SkSL::Type"*)* @_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal"*, i32)* @_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal"*)* @_ZNK4SkSL7LiteralIlE5cloneEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL7LiteralIbEE = linkonce_odr hidden unnamed_addr constant { [13 x i8*] } { [13 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Literal.65"*)* @_ZN4SkSL7LiteralIbED0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Literal.65"*)* @_ZNK4SkSL7LiteralIbE11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.65"*)* @_ZNK4SkSL7LiteralIbE21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::Literal.65"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL7LiteralIbE15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::Literal.65"*, i32)* @_ZNK4SkSL7LiteralIbE11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.65"*, i32)* @_ZNK4SkSL7LiteralIbE24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::Literal.65"*)* @_ZNK4SkSL7LiteralIbE5cloneEv to i8*)] }, comdat, align 8
@.str.7 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@_ZTVN4SkSL21ConstructorScalarCastE = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ConstructorScalarCast"*)* @_ZN4SkSL21ConstructorScalarCastD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::ConstructorScalarCast"*)* @_ZNK4SkSL21ConstructorScalarCast21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::ConstructorScalarCast"*)* @_ZNK4SkSL21ConstructorScalarCast5cloneEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL25SingleArgumentConstructorE = linkonce_odr hidden unnamed_addr constant { [15 x i8*] } { [15 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructorD2Ev to i8*), i8* bitcast (void (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructorD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor11descriptionEv to i8*), i8* bitcast (%"class.SkSL::Type"* (%"class.SkSL::Expression"*)* @_ZNK4SkSL10Expression4typeEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv to i8*), i8* bitcast (i32 (%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"*)* @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*)* @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv to i8*), i8* bitcast (i1 (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE to i8*), i8* bitcast ({ i64, i8 } (%"class.SkSL::Expression"*, %"class.SkSL::Type"*)* @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE to i8*), i8* bitcast (%"class.SkSL::Expression"* (%"class.SkSL::AnyConstructor"*, i32)* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*), i8* bitcast ({ %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::SingleArgumentConstructor"*)* @_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv to i8*)] }, comdat, align 8
@_ZTVN4SkSL14AnyConstructorE = external unnamed_addr constant { [15 x i8*] }, align 8
@.str.9 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [3 x i8] c", \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL21ConstructorScalarCast7ConvertERKNS_7ContextEiRKNS_4TypeE9SkSTArrayILi2ENSt3__110unique_ptrINS_10ExpressionENS8_14default_deleteISA_EEEELb0EE(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), i32, %"class.SkSL::Type"* dereferenceable(184), %class.SkSTArray* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = alloca %"class.SkSL::String", align 8
  %9 = alloca %"class.SkSL::String", align 8
  %10 = alloca %"class.SkSL::String", align 8
  %11 = alloca %"class.SkSL::String", align 8
  %12 = alloca %"class.SkSL::String", align 8
  %13 = alloca %"class.SkSL::String", align 8
  %14 = alloca %"class.SkSL::String", align 8
  %15 = alloca %"class.SkSL::String", align 8
  %16 = alloca %"class.SkSL::String", align 8
  %17 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 18
  %18 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %17, align 8
  %19 = icmp eq %"class.SkSL::Type"* %18, null
  %20 = select i1 %19, %"class.SkSL::Type"* %2, %"class.SkSL::Type"* %18
  %21 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 24
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, 4294967294
  %25 = icmp eq i64 %24, 2
  br i1 %25, label %120, label %26

26:                                               ; preds = %4
  %27 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %28 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %27, align 8
  %29 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #8
  %30 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #8
  %31 = bitcast %"class.SkSL::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #8
  %32 = bitcast %"class.SkSL::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #8
  %33 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %20, i64 0, i32 18
  %34 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %33, align 8, !noalias !2
  %35 = icmp eq %"class.SkSL::Type"* %34, null
  %36 = select i1 %35, %"class.SkSL::Type"* %20, %"class.SkSL::Type"* %34
  %37 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %36, i64 0, i32 0, i32 1, i32 0
  %38 = load i8*, i8** %37, align 8, !noalias !2
  %39 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %36, i64 0, i32 0, i32 1, i32 1
  %40 = load i64, i64* %39, align 8, !noalias !2
  %41 = icmp ugt i64 %40, -17
  br i1 %41, label %42, label %44

42:                                               ; preds = %26
  %43 = bitcast %"class.SkSL::String"* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %43) #9
  unreachable

44:                                               ; preds = %26
  %45 = icmp ult i64 %40, 23
  br i1 %45, label %54, label %46

46:                                               ; preds = %44
  %47 = add nuw i64 %40, 16
  %48 = and i64 %47, -16
  %49 = tail call i8* @_Znwm(i64 %48) #10
  %50 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %49, i8** %50, align 8, !alias.scope !2
  %51 = or i64 %48, -9223372036854775808
  %52 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %51, i64* %52, align 8, !alias.scope !2
  %53 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %40, i64* %53, align 8, !alias.scope !2
  br label %59

54:                                               ; preds = %44
  %55 = trunc i64 %40 to i8
  %56 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  store i8 %55, i8* %57, align 1, !alias.scope !2
  %58 = icmp eq i64 %40, 0
  br i1 %58, label %61, label %59

59:                                               ; preds = %54, %46
  %60 = phi i8* [ %49, %46 ], [ %32, %54 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %38, i64 %40, i1 false) #8
  br label %61

61:                                               ; preds = %54, %59
  %62 = phi i8* [ %32, %54 ], [ %60, %59 ]
  %63 = getelementptr inbounds i8, i8* %62, i64 %40
  store i8 0, i8* %63, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %9) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %7, %"class.SkSL::String"* nonnull %8, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0)) #8
  %64 = bitcast %"class.SkSL::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #8
  %65 = load i64, i64* %22, align 8
  %66 = lshr i64 %65, 1
  %67 = and i64 %66, 2147483647
  call void @_ZN4SkSL9to_stringEm(%"class.SkSL::String"* nonnull sret %10, i64 %67) #8
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %6, %"class.SkSL::String"* nonnull %7, %"class.SkSL::String"* nonnull dereferenceable(24) %10) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::String"* nonnull %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #8
  %68 = bitcast %"class.SkSL::ErrorReporter"* %28 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %69 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %69, i64 2
  %71 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %70, align 8
  call void %71(%"class.SkSL::ErrorReporter"* %28, i32 %1, %"class.SkSL::String"* nonnull %5) #8
  %72 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %73 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %72, i64 0, i32 1, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp slt i8 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %61
  %77 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  call void @_ZdlPv(i8* %78) #10
  br label %79

79:                                               ; preds = %61, %76
  %80 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %81 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %80, i64 0, i32 1, i32 0
  %82 = load i8, i8* %81, align 1
  %83 = icmp slt i8 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  call void @_ZdlPv(i8* %86) #10
  br label %87

87:                                               ; preds = %79, %84
  %88 = bitcast %"class.SkSL::String"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %89 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %88, i64 0, i32 1, i32 0
  %90 = load i8, i8* %89, align 1
  %91 = icmp slt i8 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  call void @_ZdlPv(i8* %94) #10
  br label %95

95:                                               ; preds = %87, %92
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #8
  %96 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %97 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %96, i64 0, i32 1, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp slt i8 %98, 0
  br i1 %99, label %100, label %103

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  call void @_ZdlPv(i8* %102) #10
  br label %103

103:                                              ; preds = %95, %100
  %104 = bitcast %"class.SkSL::String"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %105 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %104, i64 0, i32 1, i32 0
  %106 = load i8, i8* %105, align 1
  %107 = icmp slt i8 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  call void @_ZdlPv(i8* %110) #10
  br label %111

111:                                              ; preds = %103, %108
  %112 = bitcast %"class.SkSL::String"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %113 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %112, i64 0, i32 1, i32 0
  %114 = load i8, i8* %113, align 1
  %115 = icmp slt i8 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  call void @_ZdlPv(i8* %118) #10
  br label %119

119:                                              ; preds = %111, %116
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #8
  br label %261

120:                                              ; preds = %4
  %121 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %3, i64 0, i32 0, i32 0, i64 16
  %122 = bitcast i8* %121 to %"class.std::__1::unique_ptr"**
  %123 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %122, align 8
  %124 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %123, i64 0, i32 0, i32 0, i32 0
  %125 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %124, align 8
  %126 = bitcast %"class.SkSL::Expression"* %125 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %127 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %126, align 8
  %128 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %127, i64 3
  %129 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %128, align 8
  %130 = tail call dereferenceable(184) %"class.SkSL::Type"* %129(%"class.SkSL::Expression"* %125) #8
  %131 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %130, i64 0, i32 3
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %132, 8
  br i1 %133, label %256, label %134

134:                                              ; preds = %120
  %135 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %136 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %135, align 8
  %137 = bitcast %"class.SkSL::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %137) #8
  %138 = bitcast %"class.SkSL::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %138) #8
  %139 = bitcast %"class.SkSL::String"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %139) #8
  %140 = bitcast %"class.SkSL::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #8
  %141 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %20, i64 0, i32 18
  %142 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %141, align 8, !noalias !5
  %143 = icmp eq %"class.SkSL::Type"* %142, null
  %144 = select i1 %143, %"class.SkSL::Type"* %20, %"class.SkSL::Type"* %142
  %145 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %144, i64 0, i32 0, i32 1, i32 0
  %146 = load i8*, i8** %145, align 8, !noalias !5
  %147 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %144, i64 0, i32 0, i32 1, i32 1
  %148 = load i64, i64* %147, align 8, !noalias !5
  %149 = icmp ugt i64 %148, -17
  br i1 %149, label %150, label %152

150:                                              ; preds = %134
  %151 = bitcast %"class.SkSL::String"* %15 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %151) #9
  unreachable

152:                                              ; preds = %134
  %153 = icmp ult i64 %148, 23
  br i1 %153, label %162, label %154

154:                                              ; preds = %152
  %155 = add nuw i64 %148, 16
  %156 = and i64 %155, -16
  %157 = tail call i8* @_Znwm(i64 %156) #10
  %158 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %157, i8** %158, align 8, !alias.scope !5
  %159 = or i64 %156, -9223372036854775808
  %160 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %159, i64* %160, align 8, !alias.scope !5
  %161 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %148, i64* %161, align 8, !alias.scope !5
  br label %167

162:                                              ; preds = %152
  %163 = trunc i64 %148 to i8
  %164 = bitcast %"class.SkSL::String"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %165 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %164, i64 0, i32 1, i32 0
  store i8 %163, i8* %165, align 1, !alias.scope !5
  %166 = icmp eq i64 %148, 0
  br i1 %166, label %169, label %167

167:                                              ; preds = %162, %154
  %168 = phi i8* [ %157, %154 ], [ %140, %162 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %168, i8* align 1 %146, i64 %148, i1 false) #8
  br label %169

169:                                              ; preds = %162, %167
  %170 = phi i8* [ %140, %162 ], [ %168, %167 ]
  %171 = getelementptr inbounds i8, i8* %170, i64 %148
  store i8 0, i8* %171, align 1
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %14, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %15) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %13, %"class.SkSL::String"* nonnull %14, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0)) #8
  %172 = bitcast %"class.SkSL::String"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %172) #8
  %173 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %130, i64 0, i32 18
  %174 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %173, align 8, !noalias !8
  %175 = icmp eq %"class.SkSL::Type"* %174, null
  %176 = select i1 %175, %"class.SkSL::Type"* %130, %"class.SkSL::Type"* %174
  %177 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %176, i64 0, i32 0, i32 1, i32 0
  %178 = load i8*, i8** %177, align 8, !noalias !8
  %179 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %176, i64 0, i32 0, i32 1, i32 1
  %180 = load i64, i64* %179, align 8, !noalias !8
  %181 = icmp ugt i64 %180, -17
  br i1 %181, label %182, label %184

182:                                              ; preds = %169
  %183 = bitcast %"class.SkSL::String"* %16 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %183) #9
  unreachable

184:                                              ; preds = %169
  %185 = icmp ult i64 %180, 23
  br i1 %185, label %194, label %186

186:                                              ; preds = %184
  %187 = add nuw i64 %180, 16
  %188 = and i64 %187, -16
  %189 = call i8* @_Znwm(i64 %188) #10
  %190 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %189, i8** %190, align 8, !alias.scope !8
  %191 = or i64 %188, -9223372036854775808
  %192 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %191, i64* %192, align 8, !alias.scope !8
  %193 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %180, i64* %193, align 8, !alias.scope !8
  br label %199

194:                                              ; preds = %184
  %195 = trunc i64 %180 to i8
  %196 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %197 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %196, i64 0, i32 1, i32 0
  store i8 %195, i8* %197, align 1, !alias.scope !8
  %198 = icmp eq i64 %180, 0
  br i1 %198, label %201, label %199

199:                                              ; preds = %194, %186
  %200 = phi i8* [ %189, %186 ], [ %172, %194 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %200, i8* align 1 %178, i64 %180, i1 false) #8
  br label %201

201:                                              ; preds = %194, %199
  %202 = phi i8* [ %172, %194 ], [ %200, %199 ]
  %203 = getelementptr inbounds i8, i8* %202, i64 %180
  store i8 0, i8* %203, align 1
  call void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* nonnull sret %12, %"class.SkSL::String"* nonnull %13, %"class.SkSL::String"* nonnull dereferenceable(24) %16) #8
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* nonnull sret %11, %"class.SkSL::String"* nonnull %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0)) #8
  %204 = bitcast %"class.SkSL::ErrorReporter"* %136 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %205 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %204, align 8
  %206 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %205, i64 2
  %207 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %206, align 8
  call void %207(%"class.SkSL::ErrorReporter"* %136, i32 %1, %"class.SkSL::String"* nonnull %11) #8
  %208 = bitcast %"class.SkSL::String"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %209 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %208, i64 0, i32 1, i32 0
  %210 = load i8, i8* %209, align 1
  %211 = icmp slt i8 %210, 0
  br i1 %211, label %212, label %215

212:                                              ; preds = %201
  %213 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %214 = load i8*, i8** %213, align 8
  call void @_ZdlPv(i8* %214) #10
  br label %215

215:                                              ; preds = %201, %212
  %216 = bitcast %"class.SkSL::String"* %12 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %217 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %216, i64 0, i32 1, i32 0
  %218 = load i8, i8* %217, align 1
  %219 = icmp slt i8 %218, 0
  br i1 %219, label %220, label %223

220:                                              ; preds = %215
  %221 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %222 = load i8*, i8** %221, align 8
  call void @_ZdlPv(i8* %222) #10
  br label %223

223:                                              ; preds = %215, %220
  %224 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %225 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %224, i64 0, i32 1, i32 0
  %226 = load i8, i8* %225, align 1
  %227 = icmp slt i8 %226, 0
  br i1 %227, label %228, label %231

228:                                              ; preds = %223
  %229 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = load i8*, i8** %229, align 8
  call void @_ZdlPv(i8* %230) #10
  br label %231

231:                                              ; preds = %223, %228
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %172) #8
  %232 = bitcast %"class.SkSL::String"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %233 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %232, i64 0, i32 1, i32 0
  %234 = load i8, i8* %233, align 1
  %235 = icmp slt i8 %234, 0
  br i1 %235, label %236, label %239

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %238 = load i8*, i8** %237, align 8
  call void @_ZdlPv(i8* %238) #10
  br label %239

239:                                              ; preds = %231, %236
  %240 = bitcast %"class.SkSL::String"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %241 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %240, i64 0, i32 1, i32 0
  %242 = load i8, i8* %241, align 1
  %243 = icmp slt i8 %242, 0
  br i1 %243, label %244, label %247

244:                                              ; preds = %239
  %245 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %246 = load i8*, i8** %245, align 8
  call void @_ZdlPv(i8* %246) #10
  br label %247

247:                                              ; preds = %239, %244
  %248 = bitcast %"class.SkSL::String"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %249 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %248, i64 0, i32 1, i32 0
  %250 = load i8, i8* %249, align 1
  %251 = icmp slt i8 %250, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %247
  %253 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  call void @_ZdlPv(i8* %254) #10
  br label %255

255:                                              ; preds = %247, %252
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %139) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %138) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %137) #8
  br label %261

256:                                              ; preds = %120
  %257 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %122, align 8
  %258 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %257, i64 0, i32 0, i32 0, i32 0
  %259 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %258, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %258, align 8
  %260 = tail call %"class.SkSL::Expression"* @_ZN4SkSL21ConstructorScalarCast4MakeERKNS_7ContextEiRKNS_4TypeENSt3__110unique_ptrINS_10ExpressionENS7_14default_deleteIS9_EEEE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %1, %"class.SkSL::Type"* dereferenceable(184) %20, %"class.SkSL::Expression"* %259)
  br label %261

261:                                              ; preds = %255, %256, %119
  %262 = phi %"class.SkSL::Expression"* [ %260, %256 ], [ null, %255 ], [ null, %119 ]
  ret %"class.SkSL::Expression"* %262
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZNK4SkSL6StringplERKS0_(%"class.SkSL::String"* sret, %"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN4SkSL9to_stringEm(%"class.SkSL::String"* sret, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Expression"* @_ZN4SkSL21ConstructorScalarCast4MakeERKNS_7ContextEiRKNS_4TypeENSt3__110unique_ptrINS_10ExpressionENS7_14default_deleteIS9_EEEE(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), i32, %"class.SkSL::Type"* dereferenceable(184), %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"struct.SkSL::StringFragment"*
  %7 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %8 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, i64 3
  %11 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.SkSL::Type"* %11(%"class.SkSL::Expression"* %3) #8
  %13 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #8
  %14 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %12, i64 0, i32 0, i32 1, i32 0
  %15 = bitcast i8** %14 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8
  store <2 x i64> %16, <2 x i64>* %5, align 16
  %17 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 0, i32 1, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = call zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"* nonnull %6, i8* %18, i64 %20) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #8
  br i1 %21, label %229, label %22

22:                                               ; preds = %4
  %23 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %24 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %23, align 8
  %25 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %24, i64 0, i32 1, i32 10
  %26 = load i8, i8* %25, align 4, !range !11
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = call %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder28MakeConstantValueForVariableENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE(%"class.SkSL::Expression"* %3) #8
  %30 = ptrtoint %"class.SkSL::Expression"* %29 to i64
  br label %31

31:                                               ; preds = %22, %28
  %32 = phi i64 [ %7, %22 ], [ %30, %28 ]
  %33 = inttoptr i64 %32 to %"class.SkSL::Expression"*
  %34 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  switch i32 %35, label %208 [
    i32 43, label %36
    i32 45, label %92
    i32 31, label %148
  ]

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 1
  %38 = bitcast %"class.SkSL::Expression"* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %58

43:                                               ; preds = %36
  %44 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %45 = load i32, i32* %44, align 8
  %46 = sitofp i64 %39 to float
  %47 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %48 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %49 = bitcast i8* %48 to i32 (...)***
  %50 = getelementptr inbounds i8, i8* %48, i64 8
  %51 = bitcast i8* %50 to i32*
  store i32 %45, i32* %51, align 8
  %52 = getelementptr inbounds i8, i8* %48, i64 12
  %53 = bitcast i8* %52 to i32*
  store i32 45, i32* %53, align 4
  %54 = getelementptr inbounds i8, i8* %48, i64 16
  %55 = bitcast i8* %54 to i64*
  store i64 %47, i64* %55, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  %56 = getelementptr inbounds i8, i8* %48, i64 24
  %57 = bitcast i8* %56 to float*
  store float %46, float* %57, align 8
  br label %204

58:                                               ; preds = %36
  %59 = add i32 %41, -1
  %60 = icmp ult i32 %59, 2
  br i1 %60, label %61, label %75

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %63 = load i32, i32* %62, align 8
  %64 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %65 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %66 = bitcast i8* %65 to i32 (...)***
  %67 = getelementptr inbounds i8, i8* %65, i64 8
  %68 = bitcast i8* %67 to i32*
  store i32 %63, i32* %68, align 8
  %69 = getelementptr inbounds i8, i8* %65, i64 12
  %70 = bitcast i8* %69 to i32*
  store i32 43, i32* %70, align 4
  %71 = getelementptr inbounds i8, i8* %65, i64 16
  %72 = bitcast i8* %71 to i64*
  store i64 %64, i64* %72, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %66, align 8
  %73 = getelementptr inbounds i8, i8* %65, i64 24
  %74 = bitcast i8* %73 to i64*
  store i64 %39, i64* %74, align 8
  br label %204

75:                                               ; preds = %58
  %76 = icmp eq i32 %41, 3
  br i1 %76, label %77, label %208

77:                                               ; preds = %75
  %78 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %79 = load i32, i32* %78, align 8
  %80 = icmp ne i64 %39, 0
  %81 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %82 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %83 = zext i1 %80 to i8
  %84 = bitcast i8* %82 to i32 (...)***
  %85 = getelementptr inbounds i8, i8* %82, i64 8
  %86 = bitcast i8* %85 to i32*
  store i32 %79, i32* %86, align 8
  %87 = getelementptr inbounds i8, i8* %82, i64 12
  %88 = bitcast i8* %87 to i32*
  store i32 31, i32* %88, align 4
  %89 = getelementptr inbounds i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to i64*
  store i64 %81, i64* %90, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %84, align 8
  %91 = getelementptr inbounds i8, i8* %82, i64 24
  store i8 %83, i8* %91, align 8
  br label %204

92:                                               ; preds = %31
  %93 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 1
  %94 = bitcast %"class.SkSL::Expression"* %93 to float*
  %95 = load float, float* %94, align 8
  %96 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 4
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %113

99:                                               ; preds = %92
  %100 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 8
  %102 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %103 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %104 = bitcast i8* %103 to i32 (...)***
  %105 = getelementptr inbounds i8, i8* %103, i64 8
  %106 = bitcast i8* %105 to i32*
  store i32 %101, i32* %106, align 8
  %107 = getelementptr inbounds i8, i8* %103, i64 12
  %108 = bitcast i8* %107 to i32*
  store i32 45, i32* %108, align 4
  %109 = getelementptr inbounds i8, i8* %103, i64 16
  %110 = bitcast i8* %109 to i64*
  store i64 %102, i64* %110, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %104, align 8
  %111 = getelementptr inbounds i8, i8* %103, i64 24
  %112 = bitcast i8* %111 to float*
  store float %95, float* %112, align 8
  br label %204

113:                                              ; preds = %92
  %114 = add i32 %97, -1
  %115 = icmp ult i32 %114, 2
  br i1 %115, label %116, label %131

116:                                              ; preds = %113
  %117 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %118 = load i32, i32* %117, align 8
  %119 = fptosi float %95 to i64
  %120 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %121 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %122 = bitcast i8* %121 to i32 (...)***
  %123 = getelementptr inbounds i8, i8* %121, i64 8
  %124 = bitcast i8* %123 to i32*
  store i32 %118, i32* %124, align 8
  %125 = getelementptr inbounds i8, i8* %121, i64 12
  %126 = bitcast i8* %125 to i32*
  store i32 43, i32* %126, align 4
  %127 = getelementptr inbounds i8, i8* %121, i64 16
  %128 = bitcast i8* %127 to i64*
  store i64 %120, i64* %128, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %122, align 8
  %129 = getelementptr inbounds i8, i8* %121, i64 24
  %130 = bitcast i8* %129 to i64*
  store i64 %119, i64* %130, align 8
  br label %204

131:                                              ; preds = %113
  %132 = icmp eq i32 %97, 3
  br i1 %132, label %133, label %208

133:                                              ; preds = %131
  %134 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = fcmp une float %95, 0.000000e+00
  %137 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %138 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %139 = zext i1 %136 to i8
  %140 = bitcast i8* %138 to i32 (...)***
  %141 = getelementptr inbounds i8, i8* %138, i64 8
  %142 = bitcast i8* %141 to i32*
  store i32 %135, i32* %142, align 8
  %143 = getelementptr inbounds i8, i8* %138, i64 12
  %144 = bitcast i8* %143 to i32*
  store i32 31, i32* %144, align 4
  %145 = getelementptr inbounds i8, i8* %138, i64 16
  %146 = bitcast i8* %145 to i64*
  store i64 %137, i64* %146, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %140, align 8
  %147 = getelementptr inbounds i8, i8* %138, i64 24
  store i8 %139, i8* %147, align 8
  br label %204

148:                                              ; preds = %31
  %149 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 1
  %150 = bitcast %"class.SkSL::Expression"* %149 to i8*
  %151 = load i8, i8* %150, align 8, !range !11
  %152 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %2, i64 0, i32 4
  %153 = load i32, i32* %152, align 4
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %171

155:                                              ; preds = %148
  %156 = icmp eq i8 %151, 0
  %157 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %158 = load i32, i32* %157, align 8
  %159 = select i1 %156, float 0.000000e+00, float 1.000000e+00
  %160 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %161 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %162 = bitcast i8* %161 to i32 (...)***
  %163 = getelementptr inbounds i8, i8* %161, i64 8
  %164 = bitcast i8* %163 to i32*
  store i32 %158, i32* %164, align 8
  %165 = getelementptr inbounds i8, i8* %161, i64 12
  %166 = bitcast i8* %165 to i32*
  store i32 45, i32* %166, align 4
  %167 = getelementptr inbounds i8, i8* %161, i64 16
  %168 = bitcast i8* %167 to i64*
  store i64 %160, i64* %168, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %162, align 8
  %169 = getelementptr inbounds i8, i8* %161, i64 24
  %170 = bitcast i8* %169 to float*
  store float %159, float* %170, align 8
  br label %204

171:                                              ; preds = %148
  %172 = add i32 %153, -1
  %173 = icmp ult i32 %172, 2
  br i1 %173, label %174, label %189

174:                                              ; preds = %171
  %175 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %176 = load i32, i32* %175, align 8
  %177 = zext i8 %151 to i64
  %178 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %179 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %180 = bitcast i8* %179 to i32 (...)***
  %181 = getelementptr inbounds i8, i8* %179, i64 8
  %182 = bitcast i8* %181 to i32*
  store i32 %176, i32* %182, align 8
  %183 = getelementptr inbounds i8, i8* %179, i64 12
  %184 = bitcast i8* %183 to i32*
  store i32 43, i32* %184, align 4
  %185 = getelementptr inbounds i8, i8* %179, i64 16
  %186 = bitcast i8* %185 to i64*
  store i64 %178, i64* %186, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %180, align 8
  %187 = getelementptr inbounds i8, i8* %179, i64 24
  %188 = bitcast i8* %187 to i64*
  store i64 %177, i64* %188, align 8
  br label %204

189:                                              ; preds = %171
  %190 = icmp eq i32 %153, 3
  br i1 %190, label %191, label %208

191:                                              ; preds = %189
  %192 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %33, i64 0, i32 0, i32 1
  %193 = load i32, i32* %192, align 8
  %194 = ptrtoint %"class.SkSL::Type"* %2 to i64
  %195 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %196 = bitcast i8* %195 to i32 (...)***
  %197 = getelementptr inbounds i8, i8* %195, i64 8
  %198 = bitcast i8* %197 to i32*
  store i32 %193, i32* %198, align 8
  %199 = getelementptr inbounds i8, i8* %195, i64 12
  %200 = bitcast i8* %199 to i32*
  store i32 31, i32* %200, align 4
  %201 = getelementptr inbounds i8, i8* %195, i64 16
  %202 = bitcast i8* %201 to i64*
  store i64 %194, i64* %202, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %196, align 8
  %203 = getelementptr inbounds i8, i8* %195, i64 24
  store i8 %151, i8* %203, align 8
  br label %204

204:                                              ; preds = %43, %61, %77, %99, %116, %133, %155, %174, %191
  %205 = phi i8* [ %48, %43 ], [ %65, %61 ], [ %82, %77 ], [ %103, %99 ], [ %121, %116 ], [ %138, %133 ], [ %161, %155 ], [ %179, %174 ], [ %195, %191 ]
  %206 = ptrtoint i8* %205 to i64
  %207 = icmp eq i8* %205, null
  br i1 %207, label %208, label %222

208:                                              ; preds = %204, %31, %75, %131, %189
  %209 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #8
  %210 = bitcast i8* %209 to i32 (...)***
  %211 = getelementptr inbounds i8, i8* %209, i64 8
  %212 = bitcast i8* %211 to i32*
  store i32 %1, i32* %212, align 8
  %213 = getelementptr inbounds i8, i8* %209, i64 12
  %214 = bitcast i8* %213 to i32*
  store i32 38, i32* %214, align 4
  %215 = getelementptr inbounds i8, i8* %209, i64 16
  %216 = bitcast i8* %215 to %"class.SkSL::Type"**
  store %"class.SkSL::Type"* %2, %"class.SkSL::Type"** %216, align 8
  %217 = getelementptr inbounds i8, i8* %209, i64 24
  %218 = bitcast i8* %217 to i64*
  store i64 0, i64* %218, align 8
  %219 = getelementptr inbounds i8, i8* %209, i64 32
  %220 = bitcast i8* %219 to i64*
  store i64 %32, i64* %220, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL21ConstructorScalarCastE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %210, align 8
  %221 = ptrtoint i8* %209 to i64
  br label %229

222:                                              ; preds = %204
  %223 = icmp eq i64 %32, 0
  br i1 %223, label %229, label %224

224:                                              ; preds = %222
  %225 = inttoptr i64 %32 to void (%"class.SkSL::Expression"*)***
  %226 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %225, align 8
  %227 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %226, i64 1
  %228 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %227, align 8
  call void %228(%"class.SkSL::Expression"* nonnull %33) #8
  br label %229

229:                                              ; preds = %4, %208, %222, %224
  %230 = phi i64 [ %206, %222 ], [ %206, %224 ], [ %7, %4 ], [ %221, %208 ]
  %231 = inttoptr i64 %230 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %231
}

declare %"class.SkSL::Expression"* @_ZN4SkSL14ConstantFolder28MakeConstantValueForVariableENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEE(%"class.SkSL::Expression"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare zeroext i1 @_ZNK4SkSL14StringFragmenteqES0_(%"struct.SkSL::StringFragment"*, i8*, i64) local_unnamed_addr #2

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIfED0Ev(%"class.SkSL::Literal.52"*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal.52"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIfE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal.52"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %1, i64 0, i32 1
  %4 = load float, float* %3, align 8
  %5 = fpext float %4 to double
  tail call void @_ZN4SkSL9to_stringEd(%"class.SkSL::String"* sret %0, double %5) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(184) %"class.SkSL::Type"* @_ZNK4SkSL10Expression4typeEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %0, i64 0, i32 1
  %3 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %2, align 8
  ret %"class.SkSL::Type"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIfE21isCompileTimeConstantEv(%"class.SkSL::Literal.52"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIfE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal.52"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 45
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 1
  %8 = load float, float* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to float*
  %11 = load float, float* %10, align 8
  %12 = fcmp oeq float %8, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %6
  %15 = phi i32 [ %13, %6 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL10Expression19isConstantOrUniformEv(%"class.SkSL::Expression"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::Expression"* %0 to i1 (%"class.SkSL::Expression"*)***
  %3 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %3, i64 4
  %5 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.SkSL::Expression"* %0) #8
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIfE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal.52"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL7LiteralIfE12coercionCostERKNS_4TypeE(%"class.SkSL::Literal.52"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0
  %8 = bitcast %"class.SkSL::Literal.52"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, i64 3
  %11 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.SkSL::Type"* %11(%"class.SkSL::Expression"* %7) #8
  %13 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %12, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  %14 = extractvalue { i64, i8 } %13, 0
  %15 = extractvalue { i64, i8 } %13, 1
  br label %16

16:                                               ; preds = %2, %6
  %17 = phi i64 [ %14, %6 ], [ 0, %2 ]
  %18 = phi i8 [ %15, %6 ], [ 0, %2 ]
  %19 = insertvalue { i64, i8 } undef, i64 %17, 0
  %20 = insertvalue { i64, i8 } %19, i8 %18, 1
  ret { i64, i8 } %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIfE24getConstantSubexpressionEi(%"class.SkSL::Literal.52"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIfE5cloneEv(%"class.SkSL::Literal.52"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 1
  %4 = bitcast float* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::Literal.52", %"class.SkSL::Literal.52"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.SkSL::Type"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %10 = load i32, i32* %2, align 4
  %11 = bitcast i8* %9 to i32 (...)***
  %12 = getelementptr inbounds i8, i8* %9, i64 8
  %13 = bitcast i8* %12 to i32*
  store i32 %10, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %9, i64 12
  %15 = bitcast i8* %14 to i32*
  store i32 45, i32* %15, align 4
  %16 = getelementptr inbounds i8, i8* %9, i64 16
  %17 = bitcast i8* %16 to i64*
  store i64 %8, i64* %17, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIfEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %18 = getelementptr inbounds i8, i8* %9, i64 24
  %19 = bitcast i8* %18 to i32*
  store i32 %5, i32* %19, align 8
  %20 = bitcast i8* %9 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %20
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL10Expression12coercionCostERKNS_4TypeE(%"class.SkSL::Expression"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::Expression"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %4 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %4, i64 3
  %6 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %5, align 8
  %7 = tail call dereferenceable(184) %"class.SkSL::Type"* %6(%"class.SkSL::Expression"* %0) #8
  %8 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %7, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  ret { i64, i8 } %8
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"*, %"class.SkSL::Type"* dereferenceable(184)) local_unnamed_addr #2

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

declare void @_ZN4SkSL9to_stringEd(%"class.SkSL::String"* sret, double) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIlED0Ev(%"class.SkSL::Literal"*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIlE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  tail call void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret %0, i64 %4) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIlE21isCompileTimeConstantEv(%"class.SkSL::Literal"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIlE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 43
  br i1 %5, label %6, label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %10 = bitcast %"class.SkSL::Expression"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %8, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %2, %6
  %15 = phi i32 [ %13, %6 ], [ -1, %2 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIlE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZNK4SkSL7LiteralIlE12coercionCostERKNS_4TypeE(%"class.SkSL::Literal"*, %"class.SkSL::Type"* dereferenceable(184)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %20, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %20, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0
  %12 = bitcast %"class.SkSL::Literal"* %0 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %13 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %13, i64 3
  %15 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %14, align 8
  %16 = tail call dereferenceable(184) %"class.SkSL::Type"* %15(%"class.SkSL::Expression"* %11) #8
  %17 = tail call { i64, i8 } @_ZNK4SkSL4Type12coercionCostERKS0_(%"class.SkSL::Type"* %16, %"class.SkSL::Type"* dereferenceable(184) %1) #8
  %18 = extractvalue { i64, i8 } %17, 0
  %19 = extractvalue { i64, i8 } %17, 1
  br label %20

20:                                               ; preds = %2, %6, %10
  %21 = phi i64 [ %18, %10 ], [ 0, %6 ], [ 0, %2 ]
  %22 = phi i8 [ %19, %10 ], [ 0, %6 ], [ 0, %2 ]
  %23 = insertvalue { i64, i8 } undef, i64 %21, 0
  %24 = insertvalue { i64, i8 } %23, i8 %22, 1
  ret { i64, i8 } %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIlE24getConstantSubexpressionEi(%"class.SkSL::Literal"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIlE5cloneEv(%"class.SkSL::Literal"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal", %"class.SkSL::Literal"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.SkSL::Type"** %3 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %7 = load i32, i32* %2, align 4
  %8 = bitcast i8* %6 to i32 (...)***
  %9 = getelementptr inbounds i8, i8* %6, i64 8
  %10 = bitcast i8* %9 to i32*
  store i32 %7, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 12
  %12 = bitcast i8* %11 to i32*
  store i32 43, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %6, i64 16
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIlEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %14 = bitcast i8* %13 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %14, align 8
  %15 = bitcast i8* %6 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %15
}

declare void @_ZN4SkSL9to_stringEl(%"class.SkSL::String"* sret, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL6IRNodeD2Ev(%"class.SkSL::IRNode"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL7LiteralIbED0Ev(%"class.SkSL::Literal.65"*) unnamed_addr #6 comdat align 2 {
  %2 = bitcast %"class.SkSL::Literal.65"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL7LiteralIbE11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Literal.65"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.65", %"class.SkSL::Literal.65"* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !11
  %5 = icmp eq i8 %4, 0
  %6 = select i1 %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0)
  %7 = select i1 %5, i64 5, i64 4
  %8 = trunc i64 %7 to i8
  %9 = bitcast %"class.SkSL::String"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  store i8 %8, i8* %10, align 1
  %11 = bitcast %"class.SkSL::String"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 %6, i64 %7, i1 false) #8
  %12 = getelementptr inbounds i8, i8* %11, i64 %7
  store i8 0, i8* %12, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIbE21isCompileTimeConstantEv(%"class.SkSL::Literal.65"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK4SkSL7LiteralIbE15compareConstantERKNS_10ExpressionE(%"class.SkSL::Literal.65"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 31
  br i1 %5, label %6, label %16

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.SkSL::Literal.65", %"class.SkSL::Literal.65"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !11
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 1
  %11 = bitcast %"class.SkSL::Expression"* %10 to i8*
  %12 = load i8, i8* %11, align 8, !range !11
  %13 = icmp ne i8 %12, 0
  %14 = xor i1 %9, %13
  %15 = zext i1 %14 to i32
  br label %16

16:                                               ; preds = %2, %6
  %17 = phi i32 [ %15, %6 ], [ -1, %2 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL7LiteralIbE11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::Literal.65"*, i32) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIbE24getConstantSubexpressionEi(%"class.SkSL::Literal.65"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.SkSL::Literal.65", %"class.SkSL::Literal.65"* %0, i64 0, i32 0
  ret %"class.SkSL::Expression"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL7LiteralIbE5cloneEv(%"class.SkSL::Literal.65"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::Literal.65", %"class.SkSL::Literal.65"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::Literal.65", %"class.SkSL::Literal.65"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !11
  %5 = getelementptr inbounds %"class.SkSL::Literal.65", %"class.SkSL::Literal.65"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.SkSL::Type"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 32) #8
  %9 = load i32, i32* %2, align 4
  %10 = bitcast i8* %8 to i32 (...)***
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  %12 = bitcast i8* %11 to i32*
  store i32 %9, i32* %12, align 8
  %13 = getelementptr inbounds i8, i8* %8, i64 12
  %14 = bitcast i8* %13 to i32*
  store i32 31, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %8, i64 16
  %16 = bitcast i8* %15 to i64*
  store i64 %7, i64* %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [13 x i8*] }, { [13 x i8*] }* @_ZTVN4SkSL7LiteralIbEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %17 = getelementptr inbounds i8, i8* %8, i64 24
  store i8 %4, i8* %17, align 8
  %18 = bitcast i8* %8 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %18
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL21ConstructorScalarCastD0Ev(%"class.SkSL::ConstructorScalarCast"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ConstructorScalarCast", %"class.SkSL::ConstructorScalarCast"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ConstructorScalarCast", %"class.SkSL::ConstructorScalarCast"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #8
  br label %11

11:                                               ; preds = %6, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.SkSL::ConstructorScalarCast", %"class.SkSL::ConstructorScalarCast"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #8
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.SkSL::ConstructorScalarCast"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %21) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL14AnyConstructor11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = bitcast %"class.SkSL::String"* %3 to i8*
  %6 = bitcast %"class.SkSL::String"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8
  %7 = getelementptr inbounds %"class.SkSL::AnyConstructor", %"class.SkSL::AnyConstructor"* %1, i64 0, i32 0
  %8 = bitcast %"class.SkSL::AnyConstructor"* %1 to %"class.SkSL::Type"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %9, i64 3
  %11 = load %"class.SkSL::Type"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Type"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call dereferenceable(184) %"class.SkSL::Type"* %11(%"class.SkSL::Expression"* %7) #8
  %13 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %12, i64 0, i32 18
  %14 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %13, align 8, !noalias !12
  %15 = icmp eq %"class.SkSL::Type"* %14, null
  %16 = select i1 %15, %"class.SkSL::Type"* %12, %"class.SkSL::Type"* %14
  %17 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 0
  %18 = load i8*, i8** %17, align 8, !noalias !12
  %19 = getelementptr inbounds %"class.SkSL::Type", %"class.SkSL::Type"* %16, i64 0, i32 0, i32 1, i32 1
  %20 = load i64, i64* %19, align 8, !noalias !12
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %2
  %23 = bitcast %"class.SkSL::String"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %23) #9
  unreachable

24:                                               ; preds = %2
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %20, 16
  %28 = and i64 %27, -16
  %29 = tail call i8* @_Znwm(i64 %28) #10
  %30 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8, !alias.scope !12
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8, !alias.scope !12
  %33 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %33, align 8, !alias.scope !12
  %34 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %40

35:                                               ; preds = %24
  %36 = trunc i64 %20 to i8
  %37 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  store i8 %36, i8* %38, align 1, !alias.scope !12
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35, %26
  %41 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %34, %26 ]
  %42 = phi i8* [ %5, %35 ], [ %29, %26 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %42, i8* align 1 %18, i64 %20, i1 false) #8
  br label %43

43:                                               ; preds = %35, %40
  %44 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %37, %35 ], [ %41, %40 ]
  %45 = phi i8* [ %5, %35 ], [ %42, %40 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %20
  store i8 0, i8* %46, align 1
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)) #8
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %48 = load i8, i8* %47, align 1
  %49 = icmp slt i8 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %43
  %51 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %52) #10
  br label %53

53:                                               ; preds = %43, %50
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  %54 = bitcast %"class.SkSL::AnyConstructor"* %1 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %55 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %54, align 8
  %56 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %55, i64 12
  %57 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %56, align 8
  %58 = call { %"class.std::__1::unique_ptr"*, i64 } %57(%"class.SkSL::AnyConstructor"* %1) #8
  %59 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %58, 0
  %60 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %58, 1
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 %60
  %62 = icmp eq i64 %60, 0
  br i1 %62, label %84, label %63

63:                                               ; preds = %53
  %64 = bitcast %"class.SkSL::String"* %4 to i8*
  %65 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* nonnull getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #8
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %69, align 8
  %71 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %70, i64 0, i32 0
  %72 = bitcast %"class.SkSL::Expression"* %70 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %73 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %73, i64 2
  %75 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %74, align 8
  call void %75(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %71) #8
  %76 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #8
  %77 = load i8, i8* %66, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %63
  %80 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %80) #10
  br label %81

81:                                               ; preds = %79, %63
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #8
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 1
  %83 = icmp eq i64 %60, 1
  br i1 %83, label %84, label %86

84:                                               ; preds = %81, %101, %53
  %85 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #8
  ret void

86:                                               ; preds = %81, %101
  %87 = phi %"class.std::__1::unique_ptr"* [ %102, %101 ], [ %82, %81 ]
  %88 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0)) #8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #8
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %87, i64 0, i32 0, i32 0, i32 0
  %90 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %89, align 8
  %91 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %90, i64 0, i32 0
  %92 = bitcast %"class.SkSL::Expression"* %90 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %93 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %93, i64 2
  %95 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %94, align 8
  call void %95(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %91) #8
  %96 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #8
  %97 = load i8, i8* %66, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %86
  %100 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %100) #10
  br label %101

101:                                              ; preds = %86, %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #8
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %87, i64 1
  %103 = icmp eq %"class.std::__1::unique_ptr"* %102, %61
  br i1 %103, label %84, label %86, !llvm.loop !17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL21ConstructorScalarCast21isCompileTimeConstantEv(%"class.SkSL::ConstructorScalarCast"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare i32 @_ZNK4SkSL14AnyConstructor15compareConstantERKNS_10ExpressionE(%"class.SkSL::AnyConstructor"*, %"class.SkSL::Expression"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor19isConstantOrUniformEv(%"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %3 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %2, align 8
  %4 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %3, i64 12
  %5 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, align 8
  %6 = tail call { %"class.std::__1::unique_ptr"*, i64 } %5(%"class.SkSL::AnyConstructor"* %0) #8
  %7 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 0
  %8 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 %8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.std::__1::unique_ptr"* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %1, %11
  %14 = phi %"class.std::__1::unique_ptr"* [ %22, %11 ], [ %7, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %16 to i1 (%"class.SkSL::Expression"*)***
  %18 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %18, i64 6
  %20 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Expression"* %16) #8
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 1
  br i1 %21, label %11, label %23

23:                                               ; preds = %13, %11, %1
  %24 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor11hasPropertyENS_10Expression8PropertyE(%"class.SkSL::AnyConstructor"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %4 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %3, align 8
  %5 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, i64 12
  %6 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %5, align 8
  %7 = tail call { %"class.std::__1::unique_ptr"*, i64 } %6(%"class.SkSL::AnyConstructor"* %0) #8
  %8 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %7, 0
  %9 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %7, 1
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %8, i64 %9
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %24, label %14

12:                                               ; preds = %14
  %13 = icmp eq %"class.std::__1::unique_ptr"* %23, %10
  br i1 %13, label %24, label %14

14:                                               ; preds = %2, %12
  %15 = phi %"class.std::__1::unique_ptr"* [ %23, %12 ], [ %8, %2 ]
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %16, align 8
  %18 = bitcast %"class.SkSL::Expression"* %17 to i1 (%"class.SkSL::Expression"*, i32)***
  %19 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %19, i64 7
  %21 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.SkSL::Expression"* %17, i32 %1) #8
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 1
  br i1 %22, label %24, label %12

24:                                               ; preds = %12, %14, %2
  %25 = phi i1 [ false, %2 ], [ true, %14 ], [ false, %12 ]
  ret i1 %25
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL14AnyConstructor24getConstantSubexpressionEi(%"class.SkSL::AnyConstructor"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Expression"* @_ZNK4SkSL21ConstructorScalarCast5cloneEv(%"class.SkSL::ConstructorScalarCast"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ConstructorScalarCast", %"class.SkSL::ConstructorScalarCast"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::ConstructorScalarCast", %"class.SkSL::ConstructorScalarCast"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast %"class.SkSL::Type"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::ConstructorScalarCast", %"class.SkSL::ConstructorScalarCast"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %6, align 8
  %8 = bitcast %"class.SkSL::Expression"* %7 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %9 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %9, i64 10
  %11 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %10, align 8
  %12 = tail call %"class.SkSL::Expression"* %11(%"class.SkSL::Expression"* %7) #8
  %13 = ptrtoint %"class.SkSL::Expression"* %12 to i64
  %14 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 40) #8
  %15 = load i32, i32* %2, align 4
  %16 = bitcast i8* %14 to i32 (...)***
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = bitcast i8* %17 to i32*
  store i32 %15, i32* %18, align 8
  %19 = getelementptr inbounds i8, i8* %14, i64 12
  %20 = bitcast i8* %19 to i32*
  store i32 38, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 16
  %22 = bitcast i8* %21 to i64*
  store i64 %5, i64* %22, align 8
  %23 = getelementptr inbounds i8, i8* %14, i64 24
  %24 = bitcast i8* %23 to i64*
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds i8, i8* %14, i64 32
  %26 = bitcast i8* %25 to i64*
  store i64 %13, i64* %26, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL21ConstructorScalarCastE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %27 = bitcast i8* %14 to %"class.SkSL::Expression"*
  ret %"class.SkSL::Expression"* %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::unique_ptr"*, i64 } @_ZN4SkSL25SingleArgumentConstructor12argumentSpanEv(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 1
  %3 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } undef, %"class.std::__1::unique_ptr"* %2, 0
  %4 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } %3, i64 1, 1
  ret { %"class.std::__1::unique_ptr"*, i64 } %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::unique_ptr"*, i64 } @_ZNK4SkSL25SingleArgumentConstructor12argumentSpanEv(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 1
  %3 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } undef, %"class.std::__1::unique_ptr"* %2, 0
  %4 = insertvalue { %"class.std::__1::unique_ptr"*, i64 } %3, i64 1, 1
  ret { %"class.std::__1::unique_ptr"*, i64 } %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL25SingleArgumentConstructorD2Ev(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL25SingleArgumentConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #8
  br label %11

11:                                               ; preds = %1, %6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [15 x i8*] }, { [15 x i8*] }* @_ZTVN4SkSL14AnyConstructorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.SkSL::SingleArgumentConstructor", %"class.SkSL::SingleArgumentConstructor"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #8
  br label %20

20:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL25SingleArgumentConstructorD0Ev(%"class.SkSL::SingleArgumentConstructor"*) unnamed_addr #6 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL14AnyConstructor21isCompileTimeConstantEv(%"class.SkSL::AnyConstructor"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.SkSL::AnyConstructor"* %0 to { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)***
  %3 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)**, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*** %2, align 8
  %4 = getelementptr inbounds { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %3, i64 12
  %5 = load { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)*, { %"class.std::__1::unique_ptr"*, i64 } (%"class.SkSL::AnyConstructor"*)** %4, align 8
  %6 = tail call { %"class.std::__1::unique_ptr"*, i64 } %5(%"class.SkSL::AnyConstructor"* %0) #8
  %7 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 0
  %8 = extractvalue { %"class.std::__1::unique_ptr"*, i64 } %6, 1
  %9 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 %8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %13
  %12 = icmp eq %"class.std::__1::unique_ptr"* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %1, %11
  %14 = phi %"class.std::__1::unique_ptr"* [ %22, %11 ], [ %7, %1 ]
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = bitcast %"class.SkSL::Expression"* %16 to i1 (%"class.SkSL::Expression"*)***
  %18 = load i1 (%"class.SkSL::Expression"*)**, i1 (%"class.SkSL::Expression"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %18, i64 4
  %20 = load i1 (%"class.SkSL::Expression"*)*, i1 (%"class.SkSL::Expression"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.SkSL::Expression"* %16) #8
  %22 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 1
  br i1 %21, label %11, label %23

23:                                               ; preds = %13, %11, %1
  %24 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %24
}

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4SkSL4Type11displayNameEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4SkSL4Type11displayNameEv"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!10 = distinct !{!10, !"_ZNK4SkSL4Type11displayNameEv"}
!11 = !{i8 0, i8 2}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"_ZNK4SkSL4Type11displayNameEv: argument 0"}
!14 = distinct !{!14, !"_ZNK4SkSL4Type11displayNameEv"}
!15 = distinct !{!15, !16, !"_ZNK4SkSL4Type11descriptionEv: argument 0"}
!16 = distinct !{!16, !"_ZNK4SkSL4Type11descriptionEv"}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
