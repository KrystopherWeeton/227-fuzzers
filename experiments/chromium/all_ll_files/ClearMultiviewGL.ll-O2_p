; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/ClearMultiviewGL.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/ClearMultiviewGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::ClearMultiviewGL" = type <{ %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*, i32, [4 x i8] }>
%"class.rx::FunctionsGL" = type { %"class.rx::DispatchTableGL", %"struct.gl::Version", i32, i32, %"class.std::__1::vector" }
%"class.rx::DispatchTableGL" = type { i32 (...)**, void (i32, i32)*, void (i32)*, void (float, float, float, float)*, void (double)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32)*, void (i8)*, void (double, double)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32)*, void (i32, i8*)*, void (i32, double*)*, i32 ()*, void (i32, float*)*, void (i32, i32*)*, i8* (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, float)*, void (i32, i32)*, void (float)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32*)*, i8 (i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (float, float, float, float)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, i8* (i32, i32)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, float)*, void (i32, float*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32)*, void (i32, i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i8, i8, i8, i8)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8* (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8* (i32, i64, i64, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8**, i32*)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i64*)*, void (i32, i32, float*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, i8 (%struct.__GLsync*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (float)*, void (i32, float*)*, void (i32, i32)*, void ()*, void ()*, void (i32, double)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32)*, void (float)*, i32 (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (float, float)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void ()*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, void (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void ()*, void (float, float, float, float, float, float, float, float)*, void (i32)*, void (i32, i8*)*, void ()*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i32, i64)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i64, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i64*)*, i8 (i32)*, void (i32, i32, i64*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)* }
%struct.__GLsync = type opaque
%"struct.gl::Version" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::basic_string"* }
%"class.rx::StateManagerGL" = type { %"class.rx::FunctionsGL"*, %"struct.angle::FeaturesGL"*, i32, i32, %"class.std::__1::vector.37", i32, %"struct.rx::VertexArrayStateGL", %"struct.rx::VertexArrayStateGL"*, %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.49", i64, %"class.angle::PackedEnumMap.58", %"struct.std::__1::array.60", %"class.std::__1::vector.61", i32, %"class.rx::TransformFeedbackGL"*, %"class.angle::PackedEnumMap.68", %"class.angle::PackedEnumMap.68", %"struct.gl::ContextID", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.70", i32, i8, %"struct.gl::Rectangle", %"struct.gl::Rectangle", float, float, %"struct.angle::Color", %"class.gl::BlendStateExt", i8, i8, i8, float, i8, i8, %"struct.std::__1::array.77", i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, i8, float, float, i8, float, i8, i32, %"struct.angle::Color", float, i32, i8, i8, i8, i8, i8, i8, i8, i32, i8, i32, %"class.angle::BitSetT.78", i64, %"class.angle::BitSetT.79", %"class.angle::BitSetT.80" }
%"struct.angle::FeaturesGL" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.28" }
%"class.std::__1::__tree.28" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.40" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.39, i32 }
%union.anon.39 = type { [4 x float] }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"struct.rx::VertexArrayStateGL" = type { i32, %"class.angle::FixedVector", %"class.angle::FixedVector.46" }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.45", i64 }
%"struct.std::__1::array.45" = type { [16 x %"struct.rx::VertexAttributeGL"] }
%"struct.rx::VertexAttributeGL" = type { i8, %"struct.angle::Format"*, i8*, i32, i32 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.angle::FixedVector.46" = type { %"struct.std::__1::array.47", i64 }
%"struct.std::__1::array.47" = type { [16 x %"struct.rx::VertexBindingGL"] }
%"struct.rx::VertexBindingGL" = type <{ i32, i32, i64, i32, [4 x i8] }>
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.48" }
%"struct.std::__1::array.48" = type { [13 x i32] }
%"class.angle::PackedEnumMap.49" = type { %"struct.std::__1::array.50" }
%"struct.std::__1::array.50" = type { [13 x %"class.std::__1::vector.51"] }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"class.std::__1::__compressed_pair.53" }
%"struct.rx::StateManagerGL::IndexedBufferBinding" = type <{ i64, i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"* }
%"class.angle::PackedEnumMap.58" = type { %"struct.std::__1::array.59" }
%"struct.std::__1::array.59" = type { [11 x %"struct.std::__1::array.60"] }
%"struct.std::__1::array.60" = type { [96 x i32] }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"class.std::__1::__compressed_pair.63" }
%"struct.rx::StateManagerGL::ImageUnitBinding" = type { i32, i32, i8, i32, i32, i32 }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"* }
%"class.rx::TransformFeedbackGL" = type opaque
%"class.angle::PackedEnumMap.68" = type { %"struct.std::__1::array.69" }
%"struct.std::__1::array.69" = type { [7 x %"class.rx::QueryGL"*] }
%"class.rx::QueryGL" = type opaque
%"struct.gl::ContextID" = type { i32 }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { i32*, i32*, %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { i32* }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT", %"class.angle::BitSetT", i64 }
%"class.angle::BitSetT" = type { i8 }
%"struct.std::__1::array.77" = type { [2 x i32] }
%"struct.angle::Color" = type { float, float, float, float }
%"class.angle::BitSetT.78" = type { i32 }
%"class.angle::BitSetT.79" = type { i64 }
%"class.angle::BitSetT.80" = type { i64 }
%"class.gl::FramebufferState" = type { %"struct.gl::FramebufferID", %"class.rx::Serial", %"class.std::__1::basic_string", %"class.std::__1::vector.81", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.angle::BitSetT", %"class.std::__1::vector.70", i32, %"class.angle::BitSetT", %"class.angle::BitSetT.88", i32, i32, i32, i8, i32, %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", i8, %"class.angle::BitSetT.89", i8, %"class.gl::FramebufferAttachment", i32, %"struct.gl::Offset" }
%"struct.gl::FramebufferID" = type { i32 }
%"class.rx::Serial" = type { i64 }
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { %"class.gl::FramebufferAttachment"*, %"class.gl::FramebufferAttachment"*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.gl::FramebufferAttachment"* }
%"class.angle::BitSetT.88" = type { i64 }
%"class.angle::BitSetT.89" = type { i64 }
%"class.gl::FramebufferAttachment" = type { i32, %"class.gl::FramebufferAttachment::Target", %"class.gl::FramebufferAttachmentObject"*, i32, i8, i32, i32 }
%"class.gl::FramebufferAttachment::Target" = type { i32, %"class.gl::ImageIndex" }
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"struct.gl::Offset" = type { i32, i32, i32 }
%"class.gl::Texture" = type <{ %"class.gl::RefCountObject.base.123", [4 x i8], %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::TextureState", %"class.angle::BitSetT.121", %"class.rx::TextureImpl"*, %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::basic_string", %"class.egl::Surface"*, %"class.egl::Stream"*, %"class.angle::FastVector.125", %"struct.gl::Texture::SamplerCompletenessCache", [4 x i8] }>
%"class.gl::RefCountObject.base.123" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TextureID" }>
%"class.angle::RefCountObject" = type { i32 (...)**, i64 }
%"struct.gl::TextureID" = type { i32 }
%"class.egl::ImageSibling" = type { %"class.gl::FramebufferAttachmentObject", %"class.std::__1::set", %"class.angle::BindingPointer" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BindingPointer" = type { i32 (...)**, %"class.egl::Image"* }
%"class.egl::Image" = type <{ %"class.angle::RefCountObject.4", %"class.egl::LabeledObject", %"struct.egl::ImageState", %"class.rx::ImageImpl"*, i8, [7 x i8] }>
%"class.angle::RefCountObject.4" = type { i32 (...)**, i64 }
%"class.egl::LabeledObject" = type { i32 (...)** }
%"struct.egl::ImageState" = type { i8*, i32, %"class.gl::ImageIndex", %"class.egl::ImageSibling"*, %"class.std::__1::set.5", %"struct.gl::Format", i8, %"struct.gl::Extents", i64, i32, i32 }
%"class.std::__1::set.5" = type { %"class.std::__1::__tree.6" }
%"class.std::__1::__tree.6" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.7", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.gl::Extents" = type { i32, i32, i32 }
%"class.rx::ImageImpl" = type opaque
%"class.gl::LabeledObject" = type { i32 (...)** }
%"class.gl::TextureState" = type <{ i8, [3 x i8], %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.std::__1::vector.93", %"struct.gl::Rectangle", i32, [4 x i8], %"class.gl::OffsetBindingPointer", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.gl::SwizzleState" = type { i32, i32, i32, i32 }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.90, i8, [3 x i8] }>
%union.anon.90 = type { %"struct.angle::Color" }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.std::__1::vector.93" = type { %"class.std::__1::__vector_base.94" }
%"class.std::__1::__vector_base.94" = type { %"struct.gl::ImageDesc"*, %"struct.gl::ImageDesc"*, %"class.std::__1::__compressed_pair.95" }
%"struct.gl::ImageDesc" = type <{ %"struct.gl::Extents", [4 x i8], %"struct.gl::Format", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"struct.gl::ImageDesc"* }
%"class.gl::OffsetBindingPointer" = type { %"class.gl::BindingPointer", i64, i64 }
%"class.gl::BindingPointer" = type { %"class.angle::BindingPointer.100" }
%"class.angle::BindingPointer.100" = type { i32 (...)**, %"class.gl::Buffer"* }
%"class.gl::Buffer" = type { %"class.gl::RefCountObject.base.102", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.angle::Subject", %"class.gl::BufferState", %"class.rx::BufferImpl"*, %"class.angle::ObserverBinding", %"class.gl::IndexRangeCache" }
%"class.gl::RefCountObject.base.102" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::BufferID" }>
%"struct.gl::BufferID" = type { i32 }
%"class.gl::BufferState" = type <{ %"class.std::__1::basic_string", i8, [7 x i8], i64, i32, i32, i8, [7 x i8], i8*, i64, i64, i32, i32, i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.rx::BufferImpl" = type opaque
%"class.gl::IndexRangeCache" = type { %"class.std::__1::map.103" }
%"class.std::__1::map.103" = type { %"class.std::__1::__tree.104" }
%"class.std::__1::__tree.104" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BitSetT.121" = type { i64 }
%"class.rx::TextureImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::TextureState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.egl::Surface" = type opaque
%"class.egl::Stream" = type { %"class.egl::LabeledObject", i8*, %"class.egl::Display"*, %"class.rx::StreamProducerImpl"*, %"class.gl::Context"*, i32, i64, i64, i32, i32, i32, %"struct.std::__1::array.124", i32, i32 }
%"class.egl::Display" = type opaque
%"class.rx::StreamProducerImpl" = type opaque
%"class.gl::Context" = type opaque
%"struct.std::__1::array.124" = type { [3 x %"struct.egl::Stream::PlaneTexture"] }
%"struct.egl::Stream::PlaneTexture" = type { i32, %"class.gl::Texture"* }
%"class.angle::FastVector.125" = type { %"struct.std::__1::array.126", %"class.rx::Serial"*, i64, i64 }
%"struct.std::__1::array.126" = type { [8 x %"class.rx::Serial"] }
%"struct.gl::Texture::SamplerCompletenessCache" = type <{ %"struct.gl::ContextID", %"class.gl::SamplerState", i8, [3 x i8] }>
%"class.rx::TextureGL" = type { %"class.rx::TextureImpl", %"class.std::__1::vector.114", %"class.angle::BitSetT.121", %"class.angle::BitSetT.121", %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32 }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"struct.rx::LevelInfoGL"*, %"struct.rx::LevelInfoGL"*, %"class.std::__1::__compressed_pair.116" }
%"struct.rx::LevelInfoGL" = type <{ i32, i32, i8, [3 x i8], %"struct.rx::LUMAWorkaroundGL", i8, [3 x i8] }>
%"struct.rx::LUMAWorkaroundGL" = type { i8, i32 }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.rx::LevelInfoGL"* }

@_ZN2rx16ClearMultiviewGLC1EPKNS_11FunctionsGLEPNS_14StateManagerGLE = hidden unnamed_addr alias void (%"class.rx::ClearMultiviewGL"*, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*), void (%"class.rx::ClearMultiviewGL"*, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*)* @_ZN2rx16ClearMultiviewGLC2EPKNS_11FunctionsGLEPNS_14StateManagerGLE
@_ZN2rx16ClearMultiviewGLD1Ev = hidden unnamed_addr alias void (%"class.rx::ClearMultiviewGL"*), void (%"class.rx::ClearMultiviewGL"*)* @_ZN2rx16ClearMultiviewGLD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx16ClearMultiviewGLC2EPKNS_11FunctionsGLEPNS_14StateManagerGLE(%"class.rx::ClearMultiviewGL"* nocapture, %"class.rx::FunctionsGL"*, %"class.rx::StateManagerGL"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 0
  store %"class.rx::FunctionsGL"* %1, %"class.rx::FunctionsGL"** %4, align 8
  %5 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 1
  store %"class.rx::StateManagerGL"* %2, %"class.rx::StateManagerGL"** %5, align 8
  %6 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 2
  store i32 0, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGLD2Ev(%"class.rx::ClearMultiviewGL"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %7 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %8 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %7, i64 0, i32 225
  %9 = load void (i32, i32*)*, void (i32, i32*)** %8, align 8
  tail call void %9(i32 1, i32* %2) #4
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGL17clearMultiviewFBOERKN2gl16FramebufferStateERKNS1_9RectangleENS0_16ClearCommandTypeEjjiPKhfi(%"class.rx::ClearMultiviewGL"*, %"class.gl::FramebufferState"* dereferenceable(464), %"struct.gl::Rectangle"* nocapture readnone dereferenceable(16), i32, i32, i32, i32, i8*, float, i32) local_unnamed_addr #1 align 2 {
  %11 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState25getFirstNonNullAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %12 = tail call zeroext i1 @_ZNK2gl21FramebufferAttachment11isMultiviewEv(%"class.gl::FramebufferAttachment"* %11) #4
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  tail call void @_ZN2rx16ClearMultiviewGL15clearLayeredFBOERKN2gl16FramebufferStateENS0_16ClearCommandTypeEjjiPKhfi(%"class.rx::ClearMultiviewGL"* %0, %"class.gl::FramebufferState"* dereferenceable(464) %1, i32 %3, i32 %4, i32 %5, i32 %6, i8* %7, float %8, i32 %9)
  br label %14

14:                                               ; preds = %13, %10
  ret void
}

declare %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState25getFirstNonNullAttachmentEv(%"class.gl::FramebufferState"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2gl21FramebufferAttachment11isMultiviewEv(%"class.gl::FramebufferAttachment"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGL15clearLayeredFBOERKN2gl16FramebufferStateENS0_16ClearCommandTypeEjjiPKhfi(%"class.rx::ClearMultiviewGL"*, %"class.gl::FramebufferState"* dereferenceable(464), i32, i32, i32, i32, i8*, float, i32) local_unnamed_addr #1 align 2 {
  %10 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  %13 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  br i1 %12, label %14, label %19

14:                                               ; preds = %9
  %15 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %16 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %15, i64 0, i32 238
  %17 = load void (i32, i32*)*, void (i32, i32*)** %16, align 8
  tail call void %17(i32 1, i32* %10) #4
  %18 = load i32, i32* %10, align 8
  br label %19

19:                                               ; preds = %9, %14
  %20 = phi i32 [ %18, %14 ], [ %11, %9 ]
  %21 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 1
  %22 = load %"class.rx::StateManagerGL"*, %"class.rx::StateManagerGL"** %21, align 8
  tail call void @_ZN2rx14StateManagerGL15bindFramebufferEjj(%"class.rx::StateManagerGL"* %22, i32 36009, i32 %20) #4
  %23 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState25getFirstNonNullAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %24 = getelementptr inbounds %"class.gl::FramebufferState", %"class.gl::FramebufferState"* %1, i64 0, i32 7
  %25 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %26 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %25, i64 0, i32 120
  %27 = load void (i32, i32*)*, void (i32, i32*)** %26, align 8
  %28 = getelementptr inbounds %"class.gl::FramebufferState", %"class.gl::FramebufferState"* %1, i64 0, i32 7, i32 0, i32 1
  %29 = bitcast i32** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.std::__1::vector.70"* %24 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %30, %32
  %34 = lshr exact i64 %33, 2
  %35 = trunc i64 %34 to i32
  %36 = inttoptr i64 %32 to i32*
  tail call void %27(i32 %35, i32* %36) #4
  %37 = getelementptr inbounds %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment"* %23, i64 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = tail call i32 @_ZNK2gl21FramebufferAttachment16getBaseViewIndexEv(%"class.gl::FramebufferAttachment"* %23) #4
  %40 = icmp sgt i32 %38, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %19
  %42 = bitcast i8* %6 to i32*
  %43 = bitcast i8* %6 to float*
  br label %45

44:                                               ; preds = %68, %19
  tail call void @_ZN2rx16ClearMultiviewGL14detachTexturesERKN2gl16FramebufferStateE(%"class.rx::ClearMultiviewGL"* %0, %"class.gl::FramebufferState"* dereferenceable(464) %1)
  ret void

45:                                               ; preds = %68, %41
  %46 = phi i32 [ 0, %41 ], [ %69, %68 ]
  %47 = add nsw i32 %46, %39
  tail call void @_ZN2rx16ClearMultiviewGL14attachTexturesERKN2gl16FramebufferStateEi(%"class.rx::ClearMultiviewGL"* %0, %"class.gl::FramebufferState"* dereferenceable(464) %1, i32 %47)
  switch i32 %2, label %68 [
    i32 0, label %48
    i32 1, label %52
    i32 2, label %56
    i32 3, label %60
    i32 4, label %64
  ]

48:                                               ; preds = %45
  %49 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %50 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %49, i64 0, i32 2
  %51 = load void (i32)*, void (i32)** %50, align 8
  tail call void %51(i32 %3) #4
  br label %68

52:                                               ; preds = %45
  %53 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %54 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %53, i64 0, i32 221
  %55 = load void (i32, i32, float*)*, void (i32, i32, float*)** %54, align 8
  tail call void %55(i32 %4, i32 %5, float* %43) #4
  br label %68

56:                                               ; preds = %45
  %57 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %58 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %57, i64 0, i32 223
  %59 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %58, align 8
  tail call void %59(i32 %4, i32 %5, i32* %42) #4
  br label %68

60:                                               ; preds = %45
  %61 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %62 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %61, i64 0, i32 222
  %63 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %62, align 8
  tail call void %63(i32 %4, i32 %5, i32* %42) #4
  br label %68

64:                                               ; preds = %45
  %65 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %13, align 8
  %66 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %65, i64 0, i32 220
  %67 = load void (i32, i32, float, i32)*, void (i32, i32, float, i32)** %66, align 8
  tail call void %67(i32 %4, i32 %5, float %7, i32 %8) #4
  br label %68

68:                                               ; preds = %45, %48, %52, %56, %60, %64
  %69 = add nuw nsw i32 %46, 1
  %70 = icmp eq i32 %69, %38
  br i1 %70, label %44, label %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGL19initializeResourcesEv(%"class.rx::ClearMultiviewGL"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::ClearMultiviewGL", %"class.rx::ClearMultiviewGL"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %7 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %6, align 8
  %8 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %7, i64 0, i32 238
  %9 = load void (i32, i32*)*, void (i32, i32*)** %8, align 8
  tail call void %9(i32 1, i32* %2) #4
  br label %10

10:                                               ; preds = %5, %1
  ret void
}

declare void @_ZN2rx14StateManagerGL15bindFramebufferEjj(%"class.rx::StateManagerGL"*, i32, i32) local_unnamed_addr #2

declare i32 @_ZNK2gl21FramebufferAttachment16getBaseViewIndexEv(%"class.gl::FramebufferAttachment"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGL14attachTexturesERKN2gl16FramebufferStateEi(%"class.rx::ClearMultiviewGL"* nocapture readonly, %"class.gl::FramebufferState"* dereferenceable(464), i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.gl::FramebufferState", %"class.gl::FramebufferState"* %1, i64 0, i32 9, i32 0
  %5 = load i8, i8* %4, align 1, !noalias !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = zext i8 %5 to i32
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #4, !range !5
  %10 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  br label %16

11:                                               ; preds = %35, %3
  %12 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState25getDepthStencilAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %13 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState18getDepthAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %14 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState20getStencilAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %15 = icmp eq %"class.gl::FramebufferAttachment"* %12, null
  br i1 %15, label %57, label %44

16:                                               ; preds = %41, %7
  %17 = phi i32 [ %9, %7 ], [ %43, %41 ]
  %18 = phi i8 [ %5, %7 ], [ %39, %41 ]
  %19 = zext i32 %17 to i64
  %20 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState18getColorAttachmentEm(%"class.gl::FramebufferState"* %1, i64 %19) #4
  %21 = icmp eq %"class.gl::FramebufferAttachment"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %16
  %23 = or i32 %17, 36064
  %24 = tail call %"class.gl::Texture"* @_ZNK2gl21FramebufferAttachment10getTextureEv(%"class.gl::FramebufferAttachment"* nonnull %20) #4
  %25 = getelementptr inbounds %"class.gl::Texture", %"class.gl::Texture"* %24, i64 0, i32 6
  %26 = bitcast %"class.rx::TextureImpl"** %25 to %"class.rx::TextureGL"**
  %27 = load %"class.rx::TextureGL"*, %"class.rx::TextureGL"** %26, align 8
  %28 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %10, align 8
  %29 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %28, i64 0, i32 237
  %30 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %29, align 8
  %31 = getelementptr inbounds %"class.rx::TextureGL", %"class.rx::TextureGL"* %27, i64 0, i32 8
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment"* %20, i64 0, i32 1, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  tail call void %30(i32 36009, i32 %23, i32 %32, i32 %34, i32 %2) #4
  br label %35

35:                                               ; preds = %16, %22
  %36 = shl i32 1, %17
  %37 = trunc i32 %36 to i8
  %38 = xor i8 %37, -1
  %39 = and i8 %18, %38
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %11, label %41

41:                                               ; preds = %35
  %42 = zext i8 %39 to i32
  %43 = tail call i32 @llvm.cttz.i32(i32 %42, i1 true) #4, !range !5
  br label %16

44:                                               ; preds = %11
  %45 = tail call %"class.gl::Texture"* @_ZNK2gl21FramebufferAttachment10getTextureEv(%"class.gl::FramebufferAttachment"* nonnull %12) #4
  %46 = getelementptr inbounds %"class.gl::Texture", %"class.gl::Texture"* %45, i64 0, i32 6
  %47 = bitcast %"class.rx::TextureImpl"** %46 to %"class.rx::TextureGL"**
  %48 = load %"class.rx::TextureGL"*, %"class.rx::TextureGL"** %47, align 8
  %49 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %50 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %49, align 8
  %51 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %50, i64 0, i32 237
  %52 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %51, align 8
  %53 = getelementptr inbounds %"class.rx::TextureGL", %"class.rx::TextureGL"* %48, i64 0, i32 8
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment"* %12, i64 0, i32 1, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  tail call void %52(i32 36009, i32 33306, i32 %54, i32 %56, i32 %2) #4
  br label %87

57:                                               ; preds = %11
  %58 = icmp eq %"class.gl::FramebufferAttachment"* %13, null
  br i1 %58, label %72, label %59

59:                                               ; preds = %57
  %60 = tail call %"class.gl::Texture"* @_ZNK2gl21FramebufferAttachment10getTextureEv(%"class.gl::FramebufferAttachment"* nonnull %13) #4
  %61 = getelementptr inbounds %"class.gl::Texture", %"class.gl::Texture"* %60, i64 0, i32 6
  %62 = bitcast %"class.rx::TextureImpl"** %61 to %"class.rx::TextureGL"**
  %63 = load %"class.rx::TextureGL"*, %"class.rx::TextureGL"** %62, align 8
  %64 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %65 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %64, align 8
  %66 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %65, i64 0, i32 237
  %67 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %66, align 8
  %68 = getelementptr inbounds %"class.rx::TextureGL", %"class.rx::TextureGL"* %63, i64 0, i32 8
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment"* %13, i64 0, i32 1, i32 1, i32 1
  %71 = load i32, i32* %70, align 4
  tail call void %67(i32 36009, i32 36096, i32 %69, i32 %71, i32 %2) #4
  br label %87

72:                                               ; preds = %57
  %73 = icmp eq %"class.gl::FramebufferAttachment"* %14, null
  br i1 %73, label %87, label %74

74:                                               ; preds = %72
  %75 = tail call %"class.gl::Texture"* @_ZNK2gl21FramebufferAttachment10getTextureEv(%"class.gl::FramebufferAttachment"* nonnull %14) #4
  %76 = getelementptr inbounds %"class.gl::Texture", %"class.gl::Texture"* %75, i64 0, i32 6
  %77 = bitcast %"class.rx::TextureImpl"** %76 to %"class.rx::TextureGL"**
  %78 = load %"class.rx::TextureGL"*, %"class.rx::TextureGL"** %77, align 8
  %79 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %80 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %79, align 8
  %81 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %80, i64 0, i32 237
  %82 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %81, align 8
  %83 = getelementptr inbounds %"class.rx::TextureGL", %"class.rx::TextureGL"* %78, i64 0, i32 8
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment"* %14, i64 0, i32 1, i32 1, i32 1
  %86 = load i32, i32* %85, align 4
  tail call void %82(i32 36009, i32 36128, i32 %84, i32 %86, i32 %2) #4
  br label %87

87:                                               ; preds = %72, %59, %74, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGL12genericClearENS0_16ClearCommandTypeEjjiPKhfi(%"class.rx::ClearMultiviewGL"* nocapture readonly, i32, i32, i32, i32, i8*, float, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %37 [
    i32 0, label %9
    i32 1, label %14
    i32 2, label %20
    i32 3, label %26
    i32 4, label %32
  ]

9:                                                ; preds = %8
  %10 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %11 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %10, align 8
  %12 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %11, i64 0, i32 2
  %13 = load void (i32)*, void (i32)** %12, align 8
  tail call void %13(i32 %2) #4
  br label %37

14:                                               ; preds = %8
  %15 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %16 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %15, align 8
  %17 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %16, i64 0, i32 221
  %18 = load void (i32, i32, float*)*, void (i32, i32, float*)** %17, align 8
  %19 = bitcast i8* %5 to float*
  tail call void %18(i32 %3, i32 %4, float* %19) #4
  br label %37

20:                                               ; preds = %8
  %21 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %22 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %21, align 8
  %23 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %22, i64 0, i32 223
  %24 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %23, align 8
  %25 = bitcast i8* %5 to i32*
  tail call void %24(i32 %3, i32 %4, i32* %25) #4
  br label %37

26:                                               ; preds = %8
  %27 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %28 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %27, align 8
  %29 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %28, i64 0, i32 222
  %30 = load void (i32, i32, i32*)*, void (i32, i32, i32*)** %29, align 8
  %31 = bitcast i8* %5 to i32*
  tail call void %30(i32 %3, i32 %4, i32* %31) #4
  br label %37

32:                                               ; preds = %8
  %33 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %34 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %33, align 8
  %35 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %34, i64 0, i32 220
  %36 = load void (i32, i32, float, i32)*, void (i32, i32, float, i32)** %35, align 8
  tail call void %36(i32 %3, i32 %4, float %6, i32 %7) #4
  br label %37

37:                                               ; preds = %8, %32, %26, %20, %14, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx16ClearMultiviewGL14detachTexturesERKN2gl16FramebufferStateE(%"class.rx::ClearMultiviewGL"* nocapture readonly, %"class.gl::FramebufferState"* dereferenceable(464)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.gl::FramebufferState", %"class.gl::FramebufferState"* %1, i64 0, i32 9, i32 0
  %4 = load i8, i8* %3, align 1, !noalias !6
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = zext i8 %4 to i32
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #4, !range !5
  %9 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  br label %15

10:                                               ; preds = %26, %2
  %11 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState25getDepthStencilAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %12 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState18getDepthAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %13 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState20getStencilAttachmentEv(%"class.gl::FramebufferState"* %1) #4
  %14 = icmp eq %"class.gl::FramebufferAttachment"* %11, null
  br i1 %14, label %40, label %35

15:                                               ; preds = %32, %6
  %16 = phi i32 [ %8, %6 ], [ %34, %32 ]
  %17 = phi i8 [ %4, %6 ], [ %30, %32 ]
  %18 = zext i32 %16 to i64
  %19 = tail call %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState18getColorAttachmentEm(%"class.gl::FramebufferState"* %1, i64 %18) #4
  %20 = icmp eq %"class.gl::FramebufferAttachment"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %15
  %22 = or i32 %16, 36064
  %23 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %9, align 8
  %24 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %23, i64 0, i32 237
  %25 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %24, align 8
  tail call void %25(i32 36009, i32 %22, i32 0, i32 0, i32 0) #4
  br label %26

26:                                               ; preds = %15, %21
  %27 = shl i32 1, %16
  %28 = trunc i32 %27 to i8
  %29 = xor i8 %28, -1
  %30 = and i8 %17, %29
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %10, label %32

32:                                               ; preds = %26
  %33 = zext i8 %30 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 true) #4, !range !5
  br label %15

35:                                               ; preds = %10
  %36 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %37 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %36, align 8
  %38 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %37, i64 0, i32 237
  %39 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %38, align 8
  tail call void %39(i32 36009, i32 33306, i32 0, i32 0, i32 0) #4
  br label %54

40:                                               ; preds = %10
  %41 = icmp eq %"class.gl::FramebufferAttachment"* %12, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %40
  %43 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %44 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %43, align 8
  %45 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %44, i64 0, i32 237
  %46 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %45, align 8
  tail call void %46(i32 36009, i32 36096, i32 0, i32 0, i32 0) #4
  br label %54

47:                                               ; preds = %40
  %48 = icmp eq %"class.gl::FramebufferAttachment"* %13, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %47
  %50 = bitcast %"class.rx::ClearMultiviewGL"* %0 to %"class.rx::DispatchTableGL"**
  %51 = load %"class.rx::DispatchTableGL"*, %"class.rx::DispatchTableGL"** %50, align 8
  %52 = getelementptr inbounds %"class.rx::DispatchTableGL", %"class.rx::DispatchTableGL"* %51, i64 0, i32 237
  %53 = load void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)** %52, align 8
  tail call void %53(i32 36009, i32 36128, i32 0, i32 0, i32 0) #4
  br label %54

54:                                               ; preds = %47, %42, %49, %35
  ret void
}

declare %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState18getColorAttachmentEm(%"class.gl::FramebufferState"*, i64) local_unnamed_addr #2

declare %"class.gl::Texture"* @_ZNK2gl21FramebufferAttachment10getTextureEv(%"class.gl::FramebufferAttachment"*) local_unnamed_addr #2

declare %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState25getDepthStencilAttachmentEv(%"class.gl::FramebufferState"*) local_unnamed_addr #2

declare %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState18getDepthAttachmentEv(%"class.gl::FramebufferState"*) local_unnamed_addr #2

declare %"class.gl::FramebufferAttachment"* @_ZNK2gl16FramebufferState20getStencilAttachmentEv(%"class.gl::FramebufferState"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK2gl16FramebufferState21getEnabledDrawBuffersEv: argument 0"}
!4 = distinct !{!4, !"_ZNK2gl16FramebufferState21getEnabledDrawBuffersEv"}
!5 = !{i32 0, i32 33}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK2gl16FramebufferState21getEnabledDrawBuffersEv: argument 0"}
!8 = distinct !{!8, !"_ZNK2gl16FramebufferState21getEnabledDrawBuffersEv"}
