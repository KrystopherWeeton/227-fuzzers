; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_noise.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_noise.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.4", %"class.jxl::Plane.4", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.4" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::N_SSE4::StrengthEvalLut" = type { %"struct.jxl::NoiseParams" }
%"class.jxl::N_AVX2::StrengthEvalLut" = type { %"struct.jxl::NoiseParams" }
%"class.jxl::N_AVX3::StrengthEvalLut" = type { %"struct.jxl::NoiseParams" }
%"class.jxl::N_SCALAR::StrengthEvalLut" = type { %"struct.jxl::NoiseParams" }
%"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus" = type { [8 x i64], [8 x i64] }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

@_ZN3jxlL28AddNoiseHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*] [void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* @_ZN3hwy13FunctionCacheIvJRKN3jxl11NoiseParamsERKNS1_4RectERKNS1_6Image3IfEES7_RKNS1_19ColorCorrelationMapEPS9_EE13ChooseAndCallIXadL_ZNS1_L28AddNoiseHighwayDispatchTableEEEEEvS4_S7_SB_S7_SE_SF_, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* @_ZN3jxl6N_AVX38AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* @_ZN3jxl6N_AVX28AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* @_ZN3jxl6N_SSE48AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* null, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)* @_ZN3jxl8N_SCALAR8AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL32RandomImage3HighwayDispatchTableE = internal unnamed_addr constant [12 x void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*] [void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* @_ZN3hwy13FunctionCacheIvJmRKN3jxl4RectEPNS1_6Image3IfEEEE13ChooseAndCallIXadL_ZNS1_L32RandomImage3HighwayDispatchTableEEEEEvmS4_S7_, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* @_ZN3jxl6N_AVX312RandomImage3EmRKNS_4RectEPNS_6Image3IfEE, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* @_ZN3jxl6N_AVX212RandomImage3EmRKNS_4RectEPNS_6Image3IfEE, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* @_ZN3jxl6N_SSE412RandomImage3EmRKNS_4RectEPNS_6Image3IfEE, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* null, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)* @_ZN3jxl8N_SCALAR12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE411BitsToFloatEPKjPf(i32* noalias nocapture readonly, float* noalias nocapture) local_unnamed_addr #0 {
  %3 = bitcast i32* %0 to <4 x i32>*
  %4 = load <4 x i32>, <4 x i32>* %3, align 16, !alias.scope !2
  %5 = lshr <4 x i32> %4, <i32 9, i32 9, i32 9, i32 9>
  %6 = bitcast <4 x i32> %5 to <2 x i64>
  %7 = or <2 x i64> %6, <i64 4575657222473777152, i64 4575657222473777152>
  %8 = bitcast float* %1 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %8, align 16, !alias.scope !5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE48AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_(%"struct.jxl::NoiseParams"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* nocapture readonly dereferenceable(104), %"class.jxl::Image3"* nocapture readonly) #2 {
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca %"class.jxl::N_SSE4::StrengthEvalLut", align 4
  %10 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 0
  %11 = load float, float* %10, align 4
  %12 = tail call float @llvm.fabs.f32(float %11) #10
  %13 = fcmp ule float %12, 0x3F50624DE0000000
  br i1 %13, label %14, label %49

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16) #10
  %18 = fcmp ule float %17, 0x3F50624DE0000000
  br i1 %18, label %19, label %49

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 2
  %21 = load float, float* %20, align 4
  %22 = tail call float @llvm.fabs.f32(float %21) #10
  %23 = fcmp ule float %22, 0x3F50624DE0000000
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 3
  %26 = load float, float* %25, align 4
  %27 = tail call float @llvm.fabs.f32(float %26) #10
  %28 = fcmp ule float %27, 0x3F50624DE0000000
  br i1 %28, label %29, label %49

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 4
  %31 = load float, float* %30, align 4
  %32 = tail call float @llvm.fabs.f32(float %31) #10
  %33 = fcmp ule float %32, 0x3F50624DE0000000
  br i1 %33, label %34, label %49

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 5
  %36 = load float, float* %35, align 4
  %37 = tail call float @llvm.fabs.f32(float %36) #10
  %38 = fcmp ule float %37, 0x3F50624DE0000000
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 6
  %41 = load float, float* %40, align 4
  %42 = tail call float @llvm.fabs.f32(float %41) #10
  %43 = fcmp ule float %42, 0x3F50624DE0000000
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 7
  %46 = load float, float* %45, align 4
  %47 = tail call float @llvm.fabs.f32(float %46) #10
  %48 = fcmp ule float %47, 0x3F50624DE0000000
  br i1 %48, label %265, label %49

49:                                               ; preds = %6, %14, %19, %24, %29, %34, %39, %44
  %50 = bitcast %"class.jxl::N_SSE4::StrengthEvalLut"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #10
  %51 = bitcast %"struct.jxl::NoiseParams"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %51, i64 32, i1 false) #10
  %52 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 5
  %57 = load float, float* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 4
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 0.000000e+00
  %61 = fadd float %57, %60
  %62 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 6
  %63 = load float, float* %62, align 4
  %64 = fadd float %63, %60
  %65 = icmp eq i64 %55, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %49
  %67 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  %68 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = icmp eq i64 %53, 0
  %80 = bitcast float* %7 to i8*
  %81 = bitcast float* %8 to i8*
  br label %83

82:                                               ; preds = %155, %49
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #10
  br label %265

83:                                               ; preds = %155, %66
  %84 = phi i64 [ 0, %66 ], [ %156, %155 ]
  %85 = load i64, i64* %67, align 8
  %86 = add i64 %85, %84
  %87 = load i64, i64* %68, align 8
  %88 = mul i64 %87, %86
  %89 = load i8*, i8** %69, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = and i64 %90, 63
  %92 = icmp eq i64 %91, 0
  tail call void @llvm.assume(i1 %92) #10
  %93 = getelementptr inbounds i8, i8* %89, i64 %88
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #10
  %97 = bitcast i8* %93 to float*
  %98 = load i64, i64* %70, align 8
  %99 = getelementptr inbounds float, float* %97, i64 %98
  %100 = load i8*, i8** %71, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = and i64 %101, 63
  %103 = icmp eq i64 %102, 0
  tail call void @llvm.assume(i1 %103) #10
  %104 = getelementptr inbounds i8, i8* %100, i64 %88
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #10
  %108 = bitcast i8* %104 to float*
  %109 = getelementptr inbounds float, float* %108, i64 %98
  %110 = load i8*, i8** %72, align 8
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #10
  %114 = getelementptr inbounds i8, i8* %110, i64 %88
  %115 = ptrtoint i8* %114 to i64
  %116 = and i64 %115, 63
  %117 = icmp eq i64 %116, 0
  tail call void @llvm.assume(i1 %117) #10
  %118 = bitcast i8* %114 to float*
  %119 = getelementptr inbounds float, float* %118, i64 %98
  %120 = load i64, i64* %73, align 8
  %121 = add i64 %120, %84
  %122 = load i64, i64* %74, align 8
  %123 = mul i64 %122, %121
  %124 = load i8*, i8** %75, align 8
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  tail call void @llvm.assume(i1 %127) #10
  %128 = getelementptr inbounds i8, i8* %124, i64 %123
  %129 = ptrtoint i8* %128 to i64
  %130 = and i64 %129, 63
  %131 = icmp eq i64 %130, 0
  tail call void @llvm.assume(i1 %131) #10
  %132 = bitcast i8* %128 to float*
  %133 = load i64, i64* %76, align 8
  %134 = getelementptr inbounds float, float* %132, i64 %133
  %135 = load i8*, i8** %77, align 8
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  tail call void @llvm.assume(i1 %138) #10
  %139 = getelementptr inbounds i8, i8* %135, i64 %123
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  tail call void @llvm.assume(i1 %142) #10
  %143 = bitcast i8* %139 to float*
  %144 = getelementptr inbounds float, float* %143, i64 %133
  %145 = load i8*, i8** %78, align 8
  %146 = ptrtoint i8* %145 to i64
  %147 = and i64 %146, 63
  %148 = icmp eq i64 %147, 0
  tail call void @llvm.assume(i1 %148) #10
  %149 = getelementptr inbounds i8, i8* %145, i64 %123
  %150 = ptrtoint i8* %149 to i64
  %151 = and i64 %150, 63
  %152 = icmp eq i64 %151, 0
  tail call void @llvm.assume(i1 %152) #10
  %153 = bitcast i8* %149 to float*
  %154 = getelementptr inbounds float, float* %153, i64 %133
  br i1 %79, label %155, label %158

155:                                              ; preds = %207, %83
  %156 = add nuw i64 %84, 1
  %157 = icmp eq i64 %156, %55
  br i1 %157, label %82, label %83

158:                                              ; preds = %83, %207
  %159 = phi i64 [ %263, %207 ], [ 0, %83 ]
  %160 = getelementptr inbounds float, float* %99, i64 %159
  %161 = load float, float* %160, align 4, !alias.scope !8
  %162 = getelementptr inbounds float, float* %109, i64 %159
  %163 = load float, float* %162, align 4, !alias.scope !11
  %164 = fsub float %163, %161
  %165 = fmul float %164, 5.000000e-01
  %166 = fmul float %165, 6.000000e+00
  %167 = fcmp ogt float %166, 0.000000e+00
  %168 = select i1 %167, float %166, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #10
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %169 = call float @modff(float %168, float* nonnull %7) #10
  %170 = fcmp ogt float %168, 6.000000e+00
  br i1 %170, label %176, label %171, !prof !14

171:                                              ; preds = %158
  %172 = load float, float* %7, align 4
  %173 = fptosi float %172 to i32
  %174 = zext i32 %173 to i64
  %175 = shl nuw i64 %174, 32
  br label %177

176:                                              ; preds = %158
  store float 6.000000e+00, float* %7, align 4
  br label %177

177:                                              ; preds = %171, %176
  %178 = phi i64 [ %175, %171 ], [ 25769803776, %176 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #10
  %179 = ashr exact i64 %178, 32
  %180 = getelementptr inbounds %"class.jxl::N_SSE4::StrengthEvalLut", %"class.jxl::N_SSE4::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %179
  %181 = load float, float* %180, align 4
  %182 = add i64 %178, 4294967296
  %183 = ashr exact i64 %182, 32
  %184 = getelementptr inbounds %"class.jxl::N_SSE4::StrengthEvalLut", %"class.jxl::N_SSE4::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %183
  %185 = load float, float* %184, align 4
  %186 = fsub float 1.000000e+00, %169
  %187 = fmul float %186, %181
  %188 = fmul float %169, %185
  %189 = fadd float %187, %188
  %190 = insertelement <4 x float> undef, float %189, i32 0
  %191 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> zeroinitializer
  %192 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %191, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #10
  %193 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %192, <4 x float> zeroinitializer, <4 x float> %192) #10
  %194 = fadd float %161, %163
  %195 = fmul float %194, 5.000000e-01
  %196 = fmul float %195, 6.000000e+00
  %197 = fcmp ogt float %196, 0.000000e+00
  %198 = select i1 %197, float %196, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #10
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %199 = call float @modff(float %198, float* nonnull %8) #10
  %200 = fcmp ogt float %198, 6.000000e+00
  br i1 %200, label %206, label %201, !prof !14

201:                                              ; preds = %177
  %202 = load float, float* %8, align 4
  %203 = fptosi float %202 to i32
  %204 = zext i32 %203 to i64
  %205 = shl nuw i64 %204, 32
  br label %207

206:                                              ; preds = %177
  store float 6.000000e+00, float* %8, align 4
  br label %207

207:                                              ; preds = %201, %206
  %208 = phi i64 [ %205, %201 ], [ 25769803776, %206 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #10
  %209 = ashr exact i64 %208, 32
  %210 = getelementptr inbounds %"class.jxl::N_SSE4::StrengthEvalLut", %"class.jxl::N_SSE4::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %209
  %211 = load float, float* %210, align 4
  %212 = add i64 %208, 4294967296
  %213 = ashr exact i64 %212, 32
  %214 = getelementptr inbounds %"class.jxl::N_SSE4::StrengthEvalLut", %"class.jxl::N_SSE4::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %213
  %215 = load float, float* %214, align 4
  %216 = fsub float 1.000000e+00, %199
  %217 = fmul float %216, %211
  %218 = fmul float %199, %215
  %219 = fadd float %217, %218
  %220 = insertelement <4 x float> undef, float %219, i32 0
  %221 = shufflevector <4 x float> %220, <4 x float> undef, <4 x i32> zeroinitializer
  %222 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %221, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #10
  %223 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %222, <4 x float> zeroinitializer, <4 x float> %222) #10
  %224 = getelementptr inbounds float, float* %134, i64 %159
  %225 = load float, float* %224, align 4, !alias.scope !15
  %226 = fmul float %225, 0x3FCC28F5C0000000
  %227 = getelementptr inbounds float, float* %144, i64 %159
  %228 = load float, float* %227, align 4, !alias.scope !18
  %229 = fmul float %228, 0x3FCC28F5C0000000
  %230 = getelementptr inbounds float, float* %154, i64 %159
  %231 = load float, float* %230, align 4, !alias.scope !21
  %232 = fmul float %231, 0x3FCC28F5C0000000
  %233 = getelementptr inbounds float, float* %119, i64 %159
  %234 = fmul float %226, 7.812500e-03
  %235 = extractelement <4 x float> %223, i32 0
  %236 = fmul float %235, %234
  %237 = insertelement <4 x float> <float undef, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>, float %236, i32 0
  %238 = fmul float %232, 0x3FEFC00000000000
  %239 = insertelement <4 x float> <float undef, float 0x3FEFC00000000000, float 0x3FEFC00000000000, float 0x3FEFC00000000000>, float %238, i32 0
  %240 = fmul float %235, %238
  %241 = insertelement <4 x float> %239, float %240, i32 0
  %242 = fadd <4 x float> %237, %241
  %243 = fmul float %229, 7.812500e-03
  %244 = extractelement <4 x float> %193, i32 0
  %245 = fmul float %244, %243
  %246 = insertelement <4 x float> <float undef, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>, float %245, i32 0
  %247 = fmul float %244, %238
  %248 = insertelement <4 x float> %239, float %247, i32 0
  %249 = fadd <4 x float> %246, %248
  %250 = load float, float* %160, align 4, !alias.scope !24, !noalias !29
  %251 = load float, float* %162, align 4, !alias.scope !32, !noalias !35
  %252 = load float, float* %233, align 4, !alias.scope !36, !noalias !39
  %253 = fsub <4 x float> %242, %249
  %254 = fadd <4 x float> %249, %242
  %255 = extractelement <4 x float> %254, i32 0
  %256 = fmul float %61, %255
  %257 = fmul float %64, %255
  %258 = extractelement <4 x float> %253, i32 0
  %259 = fadd float %258, %256
  %260 = fadd float %250, %259
  store float %260, float* %160, align 4, !alias.scope !40, !noalias !29
  %261 = fadd float %251, %255
  store float %261, float* %162, align 4, !alias.scope !43, !noalias !35
  %262 = fadd float %252, %257
  store float %262, float* %233, align 4, !alias.scope !46, !noalias !39
  %263 = add nuw i64 %159, 1
  %264 = icmp eq i64 %263, %53
  br i1 %264, label %155, label %158

265:                                              ; preds = %44, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE412RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* noalias nocapture readonly) #2 {
  %4 = alloca [8 x i64], align 16
  %5 = add i64 %0, -7046029254386353131
  %6 = lshr i64 %5, 30
  %7 = xor i64 %6, %5
  %8 = mul i64 %7, -4658895280553007687
  %9 = lshr i64 %8, 27
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -7723592293110705685
  %12 = lshr i64 %11, 31
  %13 = xor i64 %12, %11
  %14 = insertelement <2 x i64> undef, i64 %13, i32 0
  %15 = lshr i64 %13, 30
  %16 = xor i64 %15, %13
  %17 = mul i64 %16, -4658895280553007687
  %18 = lshr i64 %17, 27
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -7723592293110705685
  %21 = lshr i64 %20, 31
  %22 = xor i64 %21, %20
  %23 = insertelement <2 x i64> undef, i64 %22, i32 0
  %24 = lshr i64 %22, 30
  %25 = xor i64 %24, %22
  %26 = mul i64 %25, -4658895280553007687
  %27 = lshr i64 %26, 27
  %28 = xor i64 %27, %26
  %29 = mul i64 %28, -7723592293110705685
  %30 = lshr i64 %29, 31
  %31 = xor i64 %30, %29
  %32 = insertelement <2 x i64> %14, i64 %31, i32 1
  %33 = lshr i64 %31, 30
  %34 = xor i64 %33, %31
  %35 = mul i64 %34, -4658895280553007687
  %36 = lshr i64 %35, 27
  %37 = xor i64 %36, %35
  %38 = mul i64 %37, -7723592293110705685
  %39 = lshr i64 %38, 31
  %40 = xor i64 %39, %38
  %41 = insertelement <2 x i64> %23, i64 %40, i32 1
  %42 = lshr i64 %40, 30
  %43 = xor i64 %42, %40
  %44 = mul i64 %43, -4658895280553007687
  %45 = lshr i64 %44, 27
  %46 = xor i64 %45, %44
  %47 = mul i64 %46, -7723592293110705685
  %48 = lshr i64 %47, 31
  %49 = xor i64 %48, %47
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = lshr i64 %49, 30
  %52 = xor i64 %51, %49
  %53 = mul i64 %52, -4658895280553007687
  %54 = lshr i64 %53, 27
  %55 = xor i64 %54, %53
  %56 = mul i64 %55, -7723592293110705685
  %57 = lshr i64 %56, 31
  %58 = xor i64 %57, %56
  %59 = insertelement <2 x i64> undef, i64 %58, i32 0
  %60 = lshr i64 %58, 30
  %61 = xor i64 %60, %58
  %62 = mul i64 %61, -4658895280553007687
  %63 = lshr i64 %62, 27
  %64 = xor i64 %63, %62
  %65 = mul i64 %64, -7723592293110705685
  %66 = lshr i64 %65, 31
  %67 = xor i64 %66, %65
  %68 = insertelement <2 x i64> %50, i64 %67, i32 1
  %69 = lshr i64 %67, 30
  %70 = xor i64 %69, %67
  %71 = mul i64 %70, -4658895280553007687
  %72 = lshr i64 %71, 27
  %73 = xor i64 %72, %71
  %74 = mul i64 %73, -7723592293110705685
  %75 = lshr i64 %74, 31
  %76 = xor i64 %75, %74
  %77 = insertelement <2 x i64> %59, i64 %76, i32 1
  %78 = lshr i64 %76, 30
  %79 = xor i64 %78, %76
  %80 = mul i64 %79, -4658895280553007687
  %81 = lshr i64 %80, 27
  %82 = xor i64 %81, %80
  %83 = mul i64 %82, -7723592293110705685
  %84 = lshr i64 %83, 31
  %85 = xor i64 %84, %83
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = lshr i64 %85, 30
  %88 = xor i64 %87, %85
  %89 = mul i64 %88, -4658895280553007687
  %90 = lshr i64 %89, 27
  %91 = xor i64 %90, %89
  %92 = mul i64 %91, -7723592293110705685
  %93 = lshr i64 %92, 31
  %94 = xor i64 %93, %92
  %95 = insertelement <2 x i64> undef, i64 %94, i32 0
  %96 = lshr i64 %94, 30
  %97 = xor i64 %96, %94
  %98 = mul i64 %97, -4658895280553007687
  %99 = lshr i64 %98, 27
  %100 = xor i64 %99, %98
  %101 = mul i64 %100, -7723592293110705685
  %102 = lshr i64 %101, 31
  %103 = xor i64 %102, %101
  %104 = insertelement <2 x i64> %86, i64 %103, i32 1
  %105 = lshr i64 %103, 30
  %106 = xor i64 %105, %103
  %107 = mul i64 %106, -4658895280553007687
  %108 = lshr i64 %107, 27
  %109 = xor i64 %108, %107
  %110 = mul i64 %109, -7723592293110705685
  %111 = lshr i64 %110, 31
  %112 = xor i64 %111, %110
  %113 = insertelement <2 x i64> %95, i64 %112, i32 1
  %114 = lshr i64 %112, 30
  %115 = xor i64 %114, %112
  %116 = mul i64 %115, -4658895280553007687
  %117 = lshr i64 %116, 27
  %118 = xor i64 %117, %116
  %119 = mul i64 %118, -7723592293110705685
  %120 = lshr i64 %119, 31
  %121 = xor i64 %120, %119
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = lshr i64 %121, 30
  %124 = xor i64 %123, %121
  %125 = mul i64 %124, -4658895280553007687
  %126 = lshr i64 %125, 27
  %127 = xor i64 %126, %125
  %128 = mul i64 %127, -7723592293110705685
  %129 = lshr i64 %128, 31
  %130 = xor i64 %129, %128
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = lshr i64 %130, 30
  %133 = xor i64 %132, %130
  %134 = mul i64 %133, -4658895280553007687
  %135 = lshr i64 %134, 27
  %136 = xor i64 %135, %134
  %137 = mul i64 %136, -7723592293110705685
  %138 = lshr i64 %137, 31
  %139 = xor i64 %138, %137
  %140 = insertelement <2 x i64> %122, i64 %139, i32 1
  %141 = lshr i64 %139, 30
  %142 = xor i64 %141, %139
  %143 = mul i64 %142, -4658895280553007687
  %144 = lshr i64 %143, 27
  %145 = xor i64 %144, %143
  %146 = mul i64 %145, -7723592293110705685
  %147 = lshr i64 %146, 31
  %148 = xor i64 %147, %146
  %149 = insertelement <2 x i64> %131, i64 %148, i32 1
  %150 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %151 = load i64, i64* %150, align 8, !noalias !49
  %152 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %153 = load i64, i64* %152, align 8, !noalias !49
  %154 = bitcast [8 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %154) #10, !noalias !49
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %154, i8 -86, i64 64, i1 false) #10, !noalias !49
  %155 = icmp eq i64 %153, 0
  br i1 %155, label %290, label %156

156:                                              ; preds = %3
  %157 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %158 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %159 = load i8*, i8** %158, align 8, !alias.scope !49
  %160 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %161 = load i64, i64* %160, align 8, !alias.scope !49
  %162 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %163 = bitcast [8 x i64]* %4 to <2 x i64>*
  %164 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 2
  %165 = bitcast i64* %164 to <2 x i64>*
  %166 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %167 = bitcast i64* %166 to <2 x i64>*
  %168 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 6
  %169 = bitcast i64* %168 to <2 x i64>*
  %170 = bitcast [8 x i64]* %4 to i32*
  br label %171

171:                                              ; preds = %284, %156
  %172 = phi <2 x i64> [ %149, %156 ], [ %234, %284 ]
  %173 = phi <2 x i64> [ %113, %156 ], [ %226, %284 ]
  %174 = phi <2 x i64> [ %77, %156 ], [ %218, %284 ]
  %175 = phi <2 x i64> [ %41, %156 ], [ %210, %284 ]
  %176 = phi <2 x i64> [ %140, %156 ], [ %192, %284 ]
  %177 = phi <2 x i64> [ %104, %156 ], [ %193, %284 ]
  %178 = phi <2 x i64> [ %68, %156 ], [ %194, %284 ]
  %179 = phi <2 x i64> [ %32, %156 ], [ %195, %284 ]
  %180 = phi i64 [ 0, %156 ], [ %285, %284 ]
  %181 = load i64, i64* %157, align 8, !noalias !49
  %182 = add i64 %181, %180
  %183 = mul i64 %182, %161
  %184 = getelementptr inbounds i8, i8* %159, i64 %183
  %185 = ptrtoint i8* %184 to i64
  %186 = and i64 %185, 63
  %187 = icmp eq i64 %186, 0
  tail call void @llvm.assume(i1 %187) #10, !noalias !49
  %188 = bitcast i8* %184 to float*
  %189 = load i64, i64* %162, align 8, !noalias !49
  %190 = getelementptr inbounds float, float* %188, i64 %189
  br label %191

191:                                              ; preds = %246, %171
  %192 = phi <2 x i64> [ %172, %171 ], [ %234, %246 ]
  %193 = phi <2 x i64> [ %173, %171 ], [ %226, %246 ]
  %194 = phi <2 x i64> [ %174, %171 ], [ %218, %246 ]
  %195 = phi <2 x i64> [ %175, %171 ], [ %210, %246 ]
  %196 = phi <2 x i64> [ %176, %171 ], [ %192, %246 ]
  %197 = phi <2 x i64> [ %177, %171 ], [ %193, %246 ]
  %198 = phi <2 x i64> [ %178, %171 ], [ %194, %246 ]
  %199 = phi <2 x i64> [ %179, %171 ], [ %195, %246 ]
  %200 = phi i64 [ 0, %171 ], [ %201, %246 ]
  %201 = add i64 %200, 16
  %202 = icmp ugt i64 %201, %151
  %203 = add <2 x i64> %199, %195
  %204 = shl <2 x i64> %199, <i64 23, i64 23>
  %205 = xor <2 x i64> %204, %199
  %206 = lshr <2 x i64> %205, <i64 18, i64 18>
  %207 = lshr <2 x i64> %195, <i64 5, i64 5>
  %208 = xor <2 x i64> %207, %195
  %209 = xor <2 x i64> %208, %205
  %210 = xor <2 x i64> %209, %206
  %211 = add <2 x i64> %198, %194
  %212 = shl <2 x i64> %198, <i64 23, i64 23>
  %213 = xor <2 x i64> %212, %198
  %214 = lshr <2 x i64> %213, <i64 18, i64 18>
  %215 = lshr <2 x i64> %194, <i64 5, i64 5>
  %216 = xor <2 x i64> %215, %194
  %217 = xor <2 x i64> %216, %213
  %218 = xor <2 x i64> %217, %214
  %219 = add <2 x i64> %197, %193
  %220 = shl <2 x i64> %197, <i64 23, i64 23>
  %221 = xor <2 x i64> %220, %197
  %222 = lshr <2 x i64> %221, <i64 18, i64 18>
  %223 = lshr <2 x i64> %193, <i64 5, i64 5>
  %224 = xor <2 x i64> %223, %193
  %225 = xor <2 x i64> %224, %221
  %226 = xor <2 x i64> %225, %222
  %227 = add <2 x i64> %196, %192
  %228 = shl <2 x i64> %196, <i64 23, i64 23>
  %229 = xor <2 x i64> %228, %196
  %230 = lshr <2 x i64> %229, <i64 18, i64 18>
  %231 = lshr <2 x i64> %192, <i64 5, i64 5>
  %232 = xor <2 x i64> %231, %192
  %233 = xor <2 x i64> %232, %229
  %234 = xor <2 x i64> %233, %230
  %235 = bitcast <2 x i64> %203 to <4 x i32>
  br i1 %202, label %236, label %246

236:                                              ; preds = %191
  store <2 x i64> %203, <2 x i64>* %163, align 16, !alias.scope !52, !noalias !49
  store <2 x i64> %211, <2 x i64>* %165, align 16, !alias.scope !52, !noalias !49
  store <2 x i64> %219, <2 x i64>* %167, align 16, !alias.scope !52, !noalias !49
  store <2 x i64> %227, <2 x i64>* %169, align 16, !alias.scope !52, !noalias !49
  %237 = icmp ult i64 %200, %151
  br i1 %237, label %238, label %284

238:                                              ; preds = %236
  %239 = getelementptr inbounds float, float* %190, i64 %200
  %240 = lshr <4 x i32> %235, <i32 9, i32 9, i32 9, i32 9>
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = or <2 x i64> %241, <i64 4575657222473777152, i64 4575657222473777152>
  %243 = bitcast float* %239 to <2 x i64>*
  store <2 x i64> %242, <2 x i64>* %243, align 16, !alias.scope !57, !noalias !62
  %244 = or i64 %200, 4
  %245 = icmp ult i64 %244, %151
  br i1 %245, label %270, label %284

246:                                              ; preds = %191
  %247 = bitcast <2 x i64> %227 to <4 x i32>
  %248 = bitcast <2 x i64> %219 to <4 x i32>
  %249 = bitcast <2 x i64> %211 to <4 x i32>
  %250 = getelementptr inbounds float, float* %190, i64 %200
  %251 = lshr <4 x i32> %235, <i32 9, i32 9, i32 9, i32 9>
  %252 = bitcast <4 x i32> %251 to <2 x i64>
  %253 = or <2 x i64> %252, <i64 4575657222473777152, i64 4575657222473777152>
  %254 = bitcast float* %250 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %254, align 16, !alias.scope !64, !noalias !69
  %255 = getelementptr inbounds float, float* %250, i64 4
  %256 = lshr <4 x i32> %249, <i32 9, i32 9, i32 9, i32 9>
  %257 = bitcast <4 x i32> %256 to <2 x i64>
  %258 = or <2 x i64> %257, <i64 4575657222473777152, i64 4575657222473777152>
  %259 = bitcast float* %255 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %259, align 16, !alias.scope !64, !noalias !69
  %260 = getelementptr inbounds float, float* %250, i64 8
  %261 = lshr <4 x i32> %248, <i32 9, i32 9, i32 9, i32 9>
  %262 = bitcast <4 x i32> %261 to <2 x i64>
  %263 = or <2 x i64> %262, <i64 4575657222473777152, i64 4575657222473777152>
  %264 = bitcast float* %260 to <2 x i64>*
  store <2 x i64> %263, <2 x i64>* %264, align 16, !alias.scope !64, !noalias !69
  %265 = getelementptr inbounds float, float* %250, i64 12
  %266 = lshr <4 x i32> %247, <i32 9, i32 9, i32 9, i32 9>
  %267 = bitcast <4 x i32> %266 to <2 x i64>
  %268 = or <2 x i64> %267, <i64 4575657222473777152, i64 4575657222473777152>
  %269 = bitcast float* %265 to <2 x i64>*
  store <2 x i64> %268, <2 x i64>* %269, align 16, !alias.scope !64, !noalias !69
  br label %191

270:                                              ; preds = %238, %270
  %271 = phi i64 [ %282, %270 ], [ %244, %238 ]
  %272 = phi i64 [ %281, %270 ], [ 4, %238 ]
  %273 = getelementptr inbounds i32, i32* %170, i64 %272
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 16, !alias.scope !71, !noalias !74
  %276 = getelementptr inbounds float, float* %190, i64 %271
  %277 = lshr <4 x i32> %275, <i32 9, i32 9, i32 9, i32 9>
  %278 = bitcast <4 x i32> %277 to <2 x i64>
  %279 = or <2 x i64> %278, <i64 4575657222473777152, i64 4575657222473777152>
  %280 = bitcast float* %276 to <2 x i64>*
  store <2 x i64> %279, <2 x i64>* %280, align 16, !alias.scope !57, !noalias !62
  %281 = add i64 %272, 4
  %282 = add i64 %271, 4
  %283 = icmp ult i64 %282, %151
  br i1 %283, label %270, label %284

284:                                              ; preds = %270, %238, %236
  %285 = add nuw i64 %180, 1
  %286 = icmp eq i64 %285, %153
  br i1 %286, label %287, label %171

287:                                              ; preds = %284
  %288 = load i64, i64* %150, align 8, !noalias !75
  %289 = load i64, i64* %152, align 8, !noalias !75
  br label %290

290:                                              ; preds = %287, %3
  %291 = phi i64 [ 0, %3 ], [ %289, %287 ]
  %292 = phi i64 [ %151, %3 ], [ %288, %287 ]
  %293 = phi <2 x i64> [ %149, %3 ], [ %234, %287 ]
  %294 = phi <2 x i64> [ %113, %3 ], [ %226, %287 ]
  %295 = phi <2 x i64> [ %77, %3 ], [ %218, %287 ]
  %296 = phi <2 x i64> [ %41, %3 ], [ %210, %287 ]
  %297 = phi <2 x i64> [ %140, %3 ], [ %192, %287 ]
  %298 = phi <2 x i64> [ %104, %3 ], [ %193, %287 ]
  %299 = phi <2 x i64> [ %68, %3 ], [ %194, %287 ]
  %300 = phi <2 x i64> [ %32, %3 ], [ %195, %287 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %154) #10, !noalias !49
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %154) #10, !noalias !75
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %154, i8 -86, i64 64, i1 false) #10, !noalias !75
  %301 = icmp eq i64 %291, 0
  br i1 %301, label %436, label %302

302:                                              ; preds = %290
  %303 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %304 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %305 = load i8*, i8** %304, align 8, !alias.scope !75
  %306 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 4
  %307 = load i64, i64* %306, align 8, !alias.scope !75
  %308 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %309 = bitcast [8 x i64]* %4 to <2 x i64>*
  %310 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 2
  %311 = bitcast i64* %310 to <2 x i64>*
  %312 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %313 = bitcast i64* %312 to <2 x i64>*
  %314 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 6
  %315 = bitcast i64* %314 to <2 x i64>*
  %316 = bitcast [8 x i64]* %4 to i32*
  br label %317

317:                                              ; preds = %430, %302
  %318 = phi <2 x i64> [ %293, %302 ], [ %380, %430 ]
  %319 = phi <2 x i64> [ %294, %302 ], [ %372, %430 ]
  %320 = phi <2 x i64> [ %295, %302 ], [ %364, %430 ]
  %321 = phi <2 x i64> [ %296, %302 ], [ %356, %430 ]
  %322 = phi <2 x i64> [ %297, %302 ], [ %338, %430 ]
  %323 = phi <2 x i64> [ %298, %302 ], [ %339, %430 ]
  %324 = phi <2 x i64> [ %299, %302 ], [ %340, %430 ]
  %325 = phi <2 x i64> [ %300, %302 ], [ %341, %430 ]
  %326 = phi i64 [ 0, %302 ], [ %431, %430 ]
  %327 = load i64, i64* %303, align 8, !noalias !75
  %328 = add i64 %327, %326
  %329 = mul i64 %328, %307
  %330 = getelementptr inbounds i8, i8* %305, i64 %329
  %331 = ptrtoint i8* %330 to i64
  %332 = and i64 %331, 63
  %333 = icmp eq i64 %332, 0
  tail call void @llvm.assume(i1 %333) #10, !noalias !75
  %334 = bitcast i8* %330 to float*
  %335 = load i64, i64* %308, align 8, !noalias !75
  %336 = getelementptr inbounds float, float* %334, i64 %335
  br label %337

337:                                              ; preds = %392, %317
  %338 = phi <2 x i64> [ %318, %317 ], [ %380, %392 ]
  %339 = phi <2 x i64> [ %319, %317 ], [ %372, %392 ]
  %340 = phi <2 x i64> [ %320, %317 ], [ %364, %392 ]
  %341 = phi <2 x i64> [ %321, %317 ], [ %356, %392 ]
  %342 = phi <2 x i64> [ %322, %317 ], [ %338, %392 ]
  %343 = phi <2 x i64> [ %323, %317 ], [ %339, %392 ]
  %344 = phi <2 x i64> [ %324, %317 ], [ %340, %392 ]
  %345 = phi <2 x i64> [ %325, %317 ], [ %341, %392 ]
  %346 = phi i64 [ 0, %317 ], [ %347, %392 ]
  %347 = add i64 %346, 16
  %348 = icmp ugt i64 %347, %292
  %349 = add <2 x i64> %345, %341
  %350 = shl <2 x i64> %345, <i64 23, i64 23>
  %351 = xor <2 x i64> %350, %345
  %352 = lshr <2 x i64> %351, <i64 18, i64 18>
  %353 = lshr <2 x i64> %341, <i64 5, i64 5>
  %354 = xor <2 x i64> %353, %341
  %355 = xor <2 x i64> %354, %351
  %356 = xor <2 x i64> %355, %352
  %357 = add <2 x i64> %344, %340
  %358 = shl <2 x i64> %344, <i64 23, i64 23>
  %359 = xor <2 x i64> %358, %344
  %360 = lshr <2 x i64> %359, <i64 18, i64 18>
  %361 = lshr <2 x i64> %340, <i64 5, i64 5>
  %362 = xor <2 x i64> %361, %340
  %363 = xor <2 x i64> %362, %359
  %364 = xor <2 x i64> %363, %360
  %365 = add <2 x i64> %343, %339
  %366 = shl <2 x i64> %343, <i64 23, i64 23>
  %367 = xor <2 x i64> %366, %343
  %368 = lshr <2 x i64> %367, <i64 18, i64 18>
  %369 = lshr <2 x i64> %339, <i64 5, i64 5>
  %370 = xor <2 x i64> %369, %339
  %371 = xor <2 x i64> %370, %367
  %372 = xor <2 x i64> %371, %368
  %373 = add <2 x i64> %342, %338
  %374 = shl <2 x i64> %342, <i64 23, i64 23>
  %375 = xor <2 x i64> %374, %342
  %376 = lshr <2 x i64> %375, <i64 18, i64 18>
  %377 = lshr <2 x i64> %338, <i64 5, i64 5>
  %378 = xor <2 x i64> %377, %338
  %379 = xor <2 x i64> %378, %375
  %380 = xor <2 x i64> %379, %376
  %381 = bitcast <2 x i64> %349 to <4 x i32>
  br i1 %348, label %382, label %392

382:                                              ; preds = %337
  store <2 x i64> %349, <2 x i64>* %309, align 16, !alias.scope !78, !noalias !75
  store <2 x i64> %357, <2 x i64>* %311, align 16, !alias.scope !78, !noalias !75
  store <2 x i64> %365, <2 x i64>* %313, align 16, !alias.scope !78, !noalias !75
  store <2 x i64> %373, <2 x i64>* %315, align 16, !alias.scope !78, !noalias !75
  %383 = icmp ult i64 %346, %292
  br i1 %383, label %384, label %430

384:                                              ; preds = %382
  %385 = getelementptr inbounds float, float* %336, i64 %346
  %386 = lshr <4 x i32> %381, <i32 9, i32 9, i32 9, i32 9>
  %387 = bitcast <4 x i32> %386 to <2 x i64>
  %388 = or <2 x i64> %387, <i64 4575657222473777152, i64 4575657222473777152>
  %389 = bitcast float* %385 to <2 x i64>*
  store <2 x i64> %388, <2 x i64>* %389, align 16, !alias.scope !83, !noalias !88
  %390 = or i64 %346, 4
  %391 = icmp ult i64 %390, %292
  br i1 %391, label %416, label %430

392:                                              ; preds = %337
  %393 = bitcast <2 x i64> %373 to <4 x i32>
  %394 = bitcast <2 x i64> %365 to <4 x i32>
  %395 = bitcast <2 x i64> %357 to <4 x i32>
  %396 = getelementptr inbounds float, float* %336, i64 %346
  %397 = lshr <4 x i32> %381, <i32 9, i32 9, i32 9, i32 9>
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = or <2 x i64> %398, <i64 4575657222473777152, i64 4575657222473777152>
  %400 = bitcast float* %396 to <2 x i64>*
  store <2 x i64> %399, <2 x i64>* %400, align 16, !alias.scope !90, !noalias !95
  %401 = getelementptr inbounds float, float* %396, i64 4
  %402 = lshr <4 x i32> %395, <i32 9, i32 9, i32 9, i32 9>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = or <2 x i64> %403, <i64 4575657222473777152, i64 4575657222473777152>
  %405 = bitcast float* %401 to <2 x i64>*
  store <2 x i64> %404, <2 x i64>* %405, align 16, !alias.scope !90, !noalias !95
  %406 = getelementptr inbounds float, float* %396, i64 8
  %407 = lshr <4 x i32> %394, <i32 9, i32 9, i32 9, i32 9>
  %408 = bitcast <4 x i32> %407 to <2 x i64>
  %409 = or <2 x i64> %408, <i64 4575657222473777152, i64 4575657222473777152>
  %410 = bitcast float* %406 to <2 x i64>*
  store <2 x i64> %409, <2 x i64>* %410, align 16, !alias.scope !90, !noalias !95
  %411 = getelementptr inbounds float, float* %396, i64 12
  %412 = lshr <4 x i32> %393, <i32 9, i32 9, i32 9, i32 9>
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = or <2 x i64> %413, <i64 4575657222473777152, i64 4575657222473777152>
  %415 = bitcast float* %411 to <2 x i64>*
  store <2 x i64> %414, <2 x i64>* %415, align 16, !alias.scope !90, !noalias !95
  br label %337

416:                                              ; preds = %384, %416
  %417 = phi i64 [ %428, %416 ], [ %390, %384 ]
  %418 = phi i64 [ %427, %416 ], [ 4, %384 ]
  %419 = getelementptr inbounds i32, i32* %316, i64 %418
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 16, !alias.scope !97, !noalias !100
  %422 = getelementptr inbounds float, float* %336, i64 %417
  %423 = lshr <4 x i32> %421, <i32 9, i32 9, i32 9, i32 9>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = or <2 x i64> %424, <i64 4575657222473777152, i64 4575657222473777152>
  %426 = bitcast float* %422 to <2 x i64>*
  store <2 x i64> %425, <2 x i64>* %426, align 16, !alias.scope !83, !noalias !88
  %427 = add i64 %418, 4
  %428 = add i64 %417, 4
  %429 = icmp ult i64 %428, %292
  br i1 %429, label %416, label %430

430:                                              ; preds = %416, %384, %382
  %431 = add nuw i64 %326, 1
  %432 = icmp eq i64 %431, %291
  br i1 %432, label %433, label %317

433:                                              ; preds = %430
  %434 = load i64, i64* %150, align 8, !noalias !101
  %435 = load i64, i64* %152, align 8, !noalias !101
  br label %436

436:                                              ; preds = %433, %290
  %437 = phi i64 [ 0, %290 ], [ %435, %433 ]
  %438 = phi i64 [ %292, %290 ], [ %434, %433 ]
  %439 = phi <2 x i64> [ %293, %290 ], [ %380, %433 ]
  %440 = phi <2 x i64> [ %294, %290 ], [ %372, %433 ]
  %441 = phi <2 x i64> [ %295, %290 ], [ %364, %433 ]
  %442 = phi <2 x i64> [ %296, %290 ], [ %356, %433 ]
  %443 = phi <2 x i64> [ %297, %290 ], [ %338, %433 ]
  %444 = phi <2 x i64> [ %298, %290 ], [ %339, %433 ]
  %445 = phi <2 x i64> [ %299, %290 ], [ %340, %433 ]
  %446 = phi <2 x i64> [ %300, %290 ], [ %341, %433 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %154) #10, !noalias !75
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %154) #10, !noalias !101
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %154, i8 -86, i64 64, i1 false) #10, !noalias !101
  %447 = icmp eq i64 %437, 0
  br i1 %447, label %579, label %448

448:                                              ; preds = %436
  %449 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %450 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %451 = load i8*, i8** %450, align 8, !alias.scope !101
  %452 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 4
  %453 = load i64, i64* %452, align 8, !alias.scope !101
  %454 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %455 = bitcast [8 x i64]* %4 to <2 x i64>*
  %456 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 2
  %457 = bitcast i64* %456 to <2 x i64>*
  %458 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %459 = bitcast i64* %458 to <2 x i64>*
  %460 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 6
  %461 = bitcast i64* %460 to <2 x i64>*
  %462 = bitcast [8 x i64]* %4 to i32*
  br label %463

463:                                              ; preds = %576, %448
  %464 = phi <2 x i64> [ %439, %448 ], [ %526, %576 ]
  %465 = phi <2 x i64> [ %440, %448 ], [ %518, %576 ]
  %466 = phi <2 x i64> [ %441, %448 ], [ %510, %576 ]
  %467 = phi <2 x i64> [ %442, %448 ], [ %502, %576 ]
  %468 = phi <2 x i64> [ %443, %448 ], [ %484, %576 ]
  %469 = phi <2 x i64> [ %444, %448 ], [ %485, %576 ]
  %470 = phi <2 x i64> [ %445, %448 ], [ %486, %576 ]
  %471 = phi <2 x i64> [ %446, %448 ], [ %487, %576 ]
  %472 = phi i64 [ 0, %448 ], [ %577, %576 ]
  %473 = load i64, i64* %449, align 8, !noalias !101
  %474 = add i64 %473, %472
  %475 = mul i64 %474, %453
  %476 = getelementptr inbounds i8, i8* %451, i64 %475
  %477 = ptrtoint i8* %476 to i64
  %478 = and i64 %477, 63
  %479 = icmp eq i64 %478, 0
  tail call void @llvm.assume(i1 %479) #10, !noalias !101
  %480 = bitcast i8* %476 to float*
  %481 = load i64, i64* %454, align 8, !noalias !101
  %482 = getelementptr inbounds float, float* %480, i64 %481
  br label %483

483:                                              ; preds = %538, %463
  %484 = phi <2 x i64> [ %464, %463 ], [ %526, %538 ]
  %485 = phi <2 x i64> [ %465, %463 ], [ %518, %538 ]
  %486 = phi <2 x i64> [ %466, %463 ], [ %510, %538 ]
  %487 = phi <2 x i64> [ %467, %463 ], [ %502, %538 ]
  %488 = phi <2 x i64> [ %468, %463 ], [ %484, %538 ]
  %489 = phi <2 x i64> [ %469, %463 ], [ %485, %538 ]
  %490 = phi <2 x i64> [ %470, %463 ], [ %486, %538 ]
  %491 = phi <2 x i64> [ %471, %463 ], [ %487, %538 ]
  %492 = phi i64 [ 0, %463 ], [ %493, %538 ]
  %493 = add i64 %492, 16
  %494 = icmp ugt i64 %493, %438
  %495 = add <2 x i64> %491, %487
  %496 = shl <2 x i64> %491, <i64 23, i64 23>
  %497 = xor <2 x i64> %496, %491
  %498 = lshr <2 x i64> %497, <i64 18, i64 18>
  %499 = lshr <2 x i64> %487, <i64 5, i64 5>
  %500 = xor <2 x i64> %499, %487
  %501 = xor <2 x i64> %500, %497
  %502 = xor <2 x i64> %501, %498
  %503 = add <2 x i64> %490, %486
  %504 = shl <2 x i64> %490, <i64 23, i64 23>
  %505 = xor <2 x i64> %504, %490
  %506 = lshr <2 x i64> %505, <i64 18, i64 18>
  %507 = lshr <2 x i64> %486, <i64 5, i64 5>
  %508 = xor <2 x i64> %507, %486
  %509 = xor <2 x i64> %508, %505
  %510 = xor <2 x i64> %509, %506
  %511 = add <2 x i64> %489, %485
  %512 = shl <2 x i64> %489, <i64 23, i64 23>
  %513 = xor <2 x i64> %512, %489
  %514 = lshr <2 x i64> %513, <i64 18, i64 18>
  %515 = lshr <2 x i64> %485, <i64 5, i64 5>
  %516 = xor <2 x i64> %515, %485
  %517 = xor <2 x i64> %516, %513
  %518 = xor <2 x i64> %517, %514
  %519 = add <2 x i64> %488, %484
  %520 = shl <2 x i64> %488, <i64 23, i64 23>
  %521 = xor <2 x i64> %520, %488
  %522 = lshr <2 x i64> %521, <i64 18, i64 18>
  %523 = lshr <2 x i64> %484, <i64 5, i64 5>
  %524 = xor <2 x i64> %523, %484
  %525 = xor <2 x i64> %524, %521
  %526 = xor <2 x i64> %525, %522
  %527 = bitcast <2 x i64> %495 to <4 x i32>
  br i1 %494, label %528, label %538

528:                                              ; preds = %483
  store <2 x i64> %495, <2 x i64>* %455, align 16, !alias.scope !104, !noalias !101
  store <2 x i64> %503, <2 x i64>* %457, align 16, !alias.scope !104, !noalias !101
  store <2 x i64> %511, <2 x i64>* %459, align 16, !alias.scope !104, !noalias !101
  store <2 x i64> %519, <2 x i64>* %461, align 16, !alias.scope !104, !noalias !101
  %529 = icmp ult i64 %492, %438
  br i1 %529, label %530, label %576

530:                                              ; preds = %528
  %531 = getelementptr inbounds float, float* %482, i64 %492
  %532 = lshr <4 x i32> %527, <i32 9, i32 9, i32 9, i32 9>
  %533 = bitcast <4 x i32> %532 to <2 x i64>
  %534 = or <2 x i64> %533, <i64 4575657222473777152, i64 4575657222473777152>
  %535 = bitcast float* %531 to <2 x i64>*
  store <2 x i64> %534, <2 x i64>* %535, align 16, !alias.scope !109, !noalias !114
  %536 = or i64 %492, 4
  %537 = icmp ult i64 %536, %438
  br i1 %537, label %562, label %576

538:                                              ; preds = %483
  %539 = bitcast <2 x i64> %519 to <4 x i32>
  %540 = bitcast <2 x i64> %511 to <4 x i32>
  %541 = bitcast <2 x i64> %503 to <4 x i32>
  %542 = getelementptr inbounds float, float* %482, i64 %492
  %543 = lshr <4 x i32> %527, <i32 9, i32 9, i32 9, i32 9>
  %544 = bitcast <4 x i32> %543 to <2 x i64>
  %545 = or <2 x i64> %544, <i64 4575657222473777152, i64 4575657222473777152>
  %546 = bitcast float* %542 to <2 x i64>*
  store <2 x i64> %545, <2 x i64>* %546, align 16, !alias.scope !116, !noalias !121
  %547 = getelementptr inbounds float, float* %542, i64 4
  %548 = lshr <4 x i32> %541, <i32 9, i32 9, i32 9, i32 9>
  %549 = bitcast <4 x i32> %548 to <2 x i64>
  %550 = or <2 x i64> %549, <i64 4575657222473777152, i64 4575657222473777152>
  %551 = bitcast float* %547 to <2 x i64>*
  store <2 x i64> %550, <2 x i64>* %551, align 16, !alias.scope !116, !noalias !121
  %552 = getelementptr inbounds float, float* %542, i64 8
  %553 = lshr <4 x i32> %540, <i32 9, i32 9, i32 9, i32 9>
  %554 = bitcast <4 x i32> %553 to <2 x i64>
  %555 = or <2 x i64> %554, <i64 4575657222473777152, i64 4575657222473777152>
  %556 = bitcast float* %552 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %556, align 16, !alias.scope !116, !noalias !121
  %557 = getelementptr inbounds float, float* %542, i64 12
  %558 = lshr <4 x i32> %539, <i32 9, i32 9, i32 9, i32 9>
  %559 = bitcast <4 x i32> %558 to <2 x i64>
  %560 = or <2 x i64> %559, <i64 4575657222473777152, i64 4575657222473777152>
  %561 = bitcast float* %557 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %561, align 16, !alias.scope !116, !noalias !121
  br label %483

562:                                              ; preds = %530, %562
  %563 = phi i64 [ %574, %562 ], [ %536, %530 ]
  %564 = phi i64 [ %573, %562 ], [ 4, %530 ]
  %565 = getelementptr inbounds i32, i32* %462, i64 %564
  %566 = bitcast i32* %565 to <4 x i32>*
  %567 = load <4 x i32>, <4 x i32>* %566, align 16, !alias.scope !123, !noalias !126
  %568 = getelementptr inbounds float, float* %482, i64 %563
  %569 = lshr <4 x i32> %567, <i32 9, i32 9, i32 9, i32 9>
  %570 = bitcast <4 x i32> %569 to <2 x i64>
  %571 = or <2 x i64> %570, <i64 4575657222473777152, i64 4575657222473777152>
  %572 = bitcast float* %568 to <2 x i64>*
  store <2 x i64> %571, <2 x i64>* %572, align 16, !alias.scope !109, !noalias !114
  %573 = add i64 %564, 4
  %574 = add i64 %563, 4
  %575 = icmp ult i64 %574, %438
  br i1 %575, label %562, label %576

576:                                              ; preds = %562, %530, %528
  %577 = add nuw i64 %472, 1
  %578 = icmp eq i64 %577, %437
  br i1 %578, label %579, label %463

579:                                              ; preds = %576, %436
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %154) #10, !noalias !101
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX211BitsToFloatEPKjPf(i32* noalias nocapture readonly, float* noalias nocapture) local_unnamed_addr #3 {
  %3 = bitcast i32* %0 to <8 x i32>*
  %4 = load <8 x i32>, <8 x i32>* %3, align 32, !alias.scope !127, !noalias !130
  %5 = lshr <8 x i32> %4, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %6 = bitcast <8 x i32> %5 to <4 x i64>
  %7 = or <4 x i64> %6, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %8 = bitcast float* %1 to <4 x i64>*
  store <4 x i64> %7, <4 x i64>* %8, align 32, !alias.scope !132
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX28AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_(%"struct.jxl::NoiseParams"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* nocapture readonly dereferenceable(104), %"class.jxl::Image3"* nocapture readonly) #4 {
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca %"class.jxl::N_AVX2::StrengthEvalLut", align 4
  %10 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 0
  %11 = load float, float* %10, align 4
  %12 = tail call float @llvm.fabs.f32(float %11) #10
  %13 = fcmp ule float %12, 0x3F50624DE0000000
  br i1 %13, label %14, label %49

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16) #10
  %18 = fcmp ule float %17, 0x3F50624DE0000000
  br i1 %18, label %19, label %49

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 2
  %21 = load float, float* %20, align 4
  %22 = tail call float @llvm.fabs.f32(float %21) #10
  %23 = fcmp ule float %22, 0x3F50624DE0000000
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 3
  %26 = load float, float* %25, align 4
  %27 = tail call float @llvm.fabs.f32(float %26) #10
  %28 = fcmp ule float %27, 0x3F50624DE0000000
  br i1 %28, label %29, label %49

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 4
  %31 = load float, float* %30, align 4
  %32 = tail call float @llvm.fabs.f32(float %31) #10
  %33 = fcmp ule float %32, 0x3F50624DE0000000
  br i1 %33, label %34, label %49

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 5
  %36 = load float, float* %35, align 4
  %37 = tail call float @llvm.fabs.f32(float %36) #10
  %38 = fcmp ule float %37, 0x3F50624DE0000000
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 6
  %41 = load float, float* %40, align 4
  %42 = tail call float @llvm.fabs.f32(float %41) #10
  %43 = fcmp ule float %42, 0x3F50624DE0000000
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 7
  %46 = load float, float* %45, align 4
  %47 = tail call float @llvm.fabs.f32(float %46) #10
  %48 = fcmp ule float %47, 0x3F50624DE0000000
  br i1 %48, label %265, label %49

49:                                               ; preds = %6, %14, %19, %24, %29, %34, %39, %44
  %50 = bitcast %"class.jxl::N_AVX2::StrengthEvalLut"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #10
  %51 = bitcast %"struct.jxl::NoiseParams"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %51, i64 32, i1 false) #10
  %52 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 5
  %57 = load float, float* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 4
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 0.000000e+00
  %61 = fadd float %57, %60
  %62 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 6
  %63 = load float, float* %62, align 4
  %64 = fadd float %63, %60
  %65 = icmp eq i64 %55, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %49
  %67 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  %68 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = icmp eq i64 %53, 0
  %80 = bitcast float* %7 to i8*
  %81 = bitcast float* %8 to i8*
  br label %83

82:                                               ; preds = %155, %49
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #10
  br label %265

83:                                               ; preds = %155, %66
  %84 = phi i64 [ 0, %66 ], [ %156, %155 ]
  %85 = load i64, i64* %67, align 8
  %86 = add i64 %85, %84
  %87 = load i64, i64* %68, align 8
  %88 = mul i64 %87, %86
  %89 = load i8*, i8** %69, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = and i64 %90, 63
  %92 = icmp eq i64 %91, 0
  tail call void @llvm.assume(i1 %92) #10
  %93 = getelementptr inbounds i8, i8* %89, i64 %88
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #10
  %97 = bitcast i8* %93 to float*
  %98 = load i64, i64* %70, align 8
  %99 = getelementptr inbounds float, float* %97, i64 %98
  %100 = load i8*, i8** %71, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = and i64 %101, 63
  %103 = icmp eq i64 %102, 0
  tail call void @llvm.assume(i1 %103) #10
  %104 = getelementptr inbounds i8, i8* %100, i64 %88
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #10
  %108 = bitcast i8* %104 to float*
  %109 = getelementptr inbounds float, float* %108, i64 %98
  %110 = load i8*, i8** %72, align 8
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #10
  %114 = getelementptr inbounds i8, i8* %110, i64 %88
  %115 = ptrtoint i8* %114 to i64
  %116 = and i64 %115, 63
  %117 = icmp eq i64 %116, 0
  tail call void @llvm.assume(i1 %117) #10
  %118 = bitcast i8* %114 to float*
  %119 = getelementptr inbounds float, float* %118, i64 %98
  %120 = load i64, i64* %73, align 8
  %121 = add i64 %120, %84
  %122 = load i64, i64* %74, align 8
  %123 = mul i64 %122, %121
  %124 = load i8*, i8** %75, align 8
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  tail call void @llvm.assume(i1 %127) #10
  %128 = getelementptr inbounds i8, i8* %124, i64 %123
  %129 = ptrtoint i8* %128 to i64
  %130 = and i64 %129, 63
  %131 = icmp eq i64 %130, 0
  tail call void @llvm.assume(i1 %131) #10
  %132 = bitcast i8* %128 to float*
  %133 = load i64, i64* %76, align 8
  %134 = getelementptr inbounds float, float* %132, i64 %133
  %135 = load i8*, i8** %77, align 8
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  tail call void @llvm.assume(i1 %138) #10
  %139 = getelementptr inbounds i8, i8* %135, i64 %123
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  tail call void @llvm.assume(i1 %142) #10
  %143 = bitcast i8* %139 to float*
  %144 = getelementptr inbounds float, float* %143, i64 %133
  %145 = load i8*, i8** %78, align 8
  %146 = ptrtoint i8* %145 to i64
  %147 = and i64 %146, 63
  %148 = icmp eq i64 %147, 0
  tail call void @llvm.assume(i1 %148) #10
  %149 = getelementptr inbounds i8, i8* %145, i64 %123
  %150 = ptrtoint i8* %149 to i64
  %151 = and i64 %150, 63
  %152 = icmp eq i64 %151, 0
  tail call void @llvm.assume(i1 %152) #10
  %153 = bitcast i8* %149 to float*
  %154 = getelementptr inbounds float, float* %153, i64 %133
  br i1 %79, label %155, label %158

155:                                              ; preds = %207, %83
  %156 = add nuw i64 %84, 1
  %157 = icmp eq i64 %156, %55
  br i1 %157, label %82, label %83

158:                                              ; preds = %83, %207
  %159 = phi i64 [ %263, %207 ], [ 0, %83 ]
  %160 = getelementptr inbounds float, float* %99, i64 %159
  %161 = load float, float* %160, align 4, !alias.scope !135
  %162 = getelementptr inbounds float, float* %109, i64 %159
  %163 = load float, float* %162, align 4, !alias.scope !138
  %164 = fsub float %163, %161
  %165 = fmul float %164, 5.000000e-01
  %166 = fmul float %165, 6.000000e+00
  %167 = fcmp ogt float %166, 0.000000e+00
  %168 = select i1 %167, float %166, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #10
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %169 = call float @modff(float %168, float* nonnull %7) #10
  %170 = fcmp ogt float %168, 6.000000e+00
  br i1 %170, label %176, label %171, !prof !14

171:                                              ; preds = %158
  %172 = load float, float* %7, align 4
  %173 = fptosi float %172 to i32
  %174 = zext i32 %173 to i64
  %175 = shl nuw i64 %174, 32
  br label %177

176:                                              ; preds = %158
  store float 6.000000e+00, float* %7, align 4
  br label %177

177:                                              ; preds = %171, %176
  %178 = phi i64 [ %175, %171 ], [ 25769803776, %176 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #10
  %179 = ashr exact i64 %178, 32
  %180 = getelementptr inbounds %"class.jxl::N_AVX2::StrengthEvalLut", %"class.jxl::N_AVX2::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %179
  %181 = load float, float* %180, align 4
  %182 = add i64 %178, 4294967296
  %183 = ashr exact i64 %182, 32
  %184 = getelementptr inbounds %"class.jxl::N_AVX2::StrengthEvalLut", %"class.jxl::N_AVX2::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %183
  %185 = load float, float* %184, align 4
  %186 = fsub float 1.000000e+00, %169
  %187 = fmul float %186, %181
  %188 = fmul float %169, %185
  %189 = fadd float %187, %188
  %190 = insertelement <4 x float> undef, float %189, i32 0
  %191 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> zeroinitializer
  %192 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %191, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #10
  %193 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %192, <4 x float> zeroinitializer, <4 x float> %192) #10
  %194 = fadd float %161, %163
  %195 = fmul float %194, 5.000000e-01
  %196 = fmul float %195, 6.000000e+00
  %197 = fcmp ogt float %196, 0.000000e+00
  %198 = select i1 %197, float %196, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #10
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %199 = call float @modff(float %198, float* nonnull %8) #10
  %200 = fcmp ogt float %198, 6.000000e+00
  br i1 %200, label %206, label %201, !prof !14

201:                                              ; preds = %177
  %202 = load float, float* %8, align 4
  %203 = fptosi float %202 to i32
  %204 = zext i32 %203 to i64
  %205 = shl nuw i64 %204, 32
  br label %207

206:                                              ; preds = %177
  store float 6.000000e+00, float* %8, align 4
  br label %207

207:                                              ; preds = %201, %206
  %208 = phi i64 [ %205, %201 ], [ 25769803776, %206 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #10
  %209 = ashr exact i64 %208, 32
  %210 = getelementptr inbounds %"class.jxl::N_AVX2::StrengthEvalLut", %"class.jxl::N_AVX2::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %209
  %211 = load float, float* %210, align 4
  %212 = add i64 %208, 4294967296
  %213 = ashr exact i64 %212, 32
  %214 = getelementptr inbounds %"class.jxl::N_AVX2::StrengthEvalLut", %"class.jxl::N_AVX2::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %213
  %215 = load float, float* %214, align 4
  %216 = fsub float 1.000000e+00, %199
  %217 = fmul float %216, %211
  %218 = fmul float %199, %215
  %219 = fadd float %217, %218
  %220 = insertelement <4 x float> undef, float %219, i32 0
  %221 = shufflevector <4 x float> %220, <4 x float> undef, <4 x i32> zeroinitializer
  %222 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %221, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #10
  %223 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %222, <4 x float> zeroinitializer, <4 x float> %222) #10
  %224 = getelementptr inbounds float, float* %134, i64 %159
  %225 = load float, float* %224, align 4, !alias.scope !141
  %226 = fmul float %225, 0x3FCC28F5C0000000
  %227 = getelementptr inbounds float, float* %144, i64 %159
  %228 = load float, float* %227, align 4, !alias.scope !144
  %229 = fmul float %228, 0x3FCC28F5C0000000
  %230 = getelementptr inbounds float, float* %154, i64 %159
  %231 = load float, float* %230, align 4, !alias.scope !147
  %232 = fmul float %231, 0x3FCC28F5C0000000
  %233 = getelementptr inbounds float, float* %119, i64 %159
  %234 = fmul float %226, 7.812500e-03
  %235 = extractelement <4 x float> %223, i32 0
  %236 = fmul float %235, %234
  %237 = insertelement <4 x float> <float undef, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>, float %236, i32 0
  %238 = fmul float %232, 0x3FEFC00000000000
  %239 = insertelement <4 x float> <float undef, float 0x3FEFC00000000000, float 0x3FEFC00000000000, float 0x3FEFC00000000000>, float %238, i32 0
  %240 = fmul float %235, %238
  %241 = insertelement <4 x float> %239, float %240, i32 0
  %242 = fadd <4 x float> %237, %241
  %243 = fmul float %229, 7.812500e-03
  %244 = extractelement <4 x float> %193, i32 0
  %245 = fmul float %244, %243
  %246 = insertelement <4 x float> <float undef, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>, float %245, i32 0
  %247 = fmul float %244, %238
  %248 = insertelement <4 x float> %239, float %247, i32 0
  %249 = fadd <4 x float> %246, %248
  %250 = load float, float* %160, align 4, !alias.scope !150, !noalias !155
  %251 = load float, float* %162, align 4, !alias.scope !158, !noalias !161
  %252 = load float, float* %233, align 4, !alias.scope !162, !noalias !165
  %253 = fsub <4 x float> %242, %249
  %254 = fadd <4 x float> %249, %242
  %255 = extractelement <4 x float> %254, i32 0
  %256 = fmul float %61, %255
  %257 = fmul float %64, %255
  %258 = extractelement <4 x float> %253, i32 0
  %259 = fadd float %258, %256
  %260 = fadd float %250, %259
  store float %260, float* %160, align 4, !alias.scope !166, !noalias !155
  %261 = fadd float %251, %255
  store float %261, float* %162, align 4, !alias.scope !169, !noalias !161
  %262 = fadd float %252, %257
  store float %262, float* %233, align 4, !alias.scope !172, !noalias !165
  %263 = add nuw i64 %159, 1
  %264 = icmp eq i64 %263, %53
  br i1 %264, label %155, label %158

265:                                              ; preds = %44, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX212RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* noalias nocapture readonly) #3 {
  %4 = alloca [8 x i64], align 32
  %5 = add i64 %0, -7046029254386353131
  %6 = lshr i64 %5, 30
  %7 = xor i64 %6, %5
  %8 = mul i64 %7, -4658895280553007687
  %9 = lshr i64 %8, 27
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -7723592293110705685
  %12 = lshr i64 %11, 31
  %13 = xor i64 %12, %11
  %14 = insertelement <4 x i64> undef, i64 %13, i32 0
  %15 = lshr i64 %13, 30
  %16 = xor i64 %15, %13
  %17 = mul i64 %16, -4658895280553007687
  %18 = lshr i64 %17, 27
  %19 = xor i64 %18, %17
  %20 = mul i64 %19, -7723592293110705685
  %21 = lshr i64 %20, 31
  %22 = xor i64 %21, %20
  %23 = insertelement <4 x i64> undef, i64 %22, i32 0
  %24 = lshr i64 %22, 30
  %25 = xor i64 %24, %22
  %26 = mul i64 %25, -4658895280553007687
  %27 = lshr i64 %26, 27
  %28 = xor i64 %27, %26
  %29 = mul i64 %28, -7723592293110705685
  %30 = lshr i64 %29, 31
  %31 = xor i64 %30, %29
  %32 = insertelement <4 x i64> %14, i64 %31, i32 1
  %33 = lshr i64 %31, 30
  %34 = xor i64 %33, %31
  %35 = mul i64 %34, -4658895280553007687
  %36 = lshr i64 %35, 27
  %37 = xor i64 %36, %35
  %38 = mul i64 %37, -7723592293110705685
  %39 = lshr i64 %38, 31
  %40 = xor i64 %39, %38
  %41 = insertelement <4 x i64> %23, i64 %40, i32 1
  %42 = lshr i64 %40, 30
  %43 = xor i64 %42, %40
  %44 = mul i64 %43, -4658895280553007687
  %45 = lshr i64 %44, 27
  %46 = xor i64 %45, %44
  %47 = mul i64 %46, -7723592293110705685
  %48 = lshr i64 %47, 31
  %49 = xor i64 %48, %47
  %50 = insertelement <4 x i64> %32, i64 %49, i32 2
  %51 = lshr i64 %49, 30
  %52 = xor i64 %51, %49
  %53 = mul i64 %52, -4658895280553007687
  %54 = lshr i64 %53, 27
  %55 = xor i64 %54, %53
  %56 = mul i64 %55, -7723592293110705685
  %57 = lshr i64 %56, 31
  %58 = xor i64 %57, %56
  %59 = insertelement <4 x i64> %41, i64 %58, i32 2
  %60 = lshr i64 %58, 30
  %61 = xor i64 %60, %58
  %62 = mul i64 %61, -4658895280553007687
  %63 = lshr i64 %62, 27
  %64 = xor i64 %63, %62
  %65 = mul i64 %64, -7723592293110705685
  %66 = lshr i64 %65, 31
  %67 = xor i64 %66, %65
  %68 = insertelement <4 x i64> %50, i64 %67, i32 3
  %69 = lshr i64 %67, 30
  %70 = xor i64 %69, %67
  %71 = mul i64 %70, -4658895280553007687
  %72 = lshr i64 %71, 27
  %73 = xor i64 %72, %71
  %74 = mul i64 %73, -7723592293110705685
  %75 = lshr i64 %74, 31
  %76 = xor i64 %75, %74
  %77 = insertelement <4 x i64> %59, i64 %76, i32 3
  %78 = lshr i64 %76, 30
  %79 = xor i64 %78, %76
  %80 = mul i64 %79, -4658895280553007687
  %81 = lshr i64 %80, 27
  %82 = xor i64 %81, %80
  %83 = mul i64 %82, -7723592293110705685
  %84 = lshr i64 %83, 31
  %85 = xor i64 %84, %83
  %86 = insertelement <4 x i64> undef, i64 %85, i32 0
  %87 = lshr i64 %85, 30
  %88 = xor i64 %87, %85
  %89 = mul i64 %88, -4658895280553007687
  %90 = lshr i64 %89, 27
  %91 = xor i64 %90, %89
  %92 = mul i64 %91, -7723592293110705685
  %93 = lshr i64 %92, 31
  %94 = xor i64 %93, %92
  %95 = insertelement <4 x i64> undef, i64 %94, i32 0
  %96 = lshr i64 %94, 30
  %97 = xor i64 %96, %94
  %98 = mul i64 %97, -4658895280553007687
  %99 = lshr i64 %98, 27
  %100 = xor i64 %99, %98
  %101 = mul i64 %100, -7723592293110705685
  %102 = lshr i64 %101, 31
  %103 = xor i64 %102, %101
  %104 = insertelement <4 x i64> %86, i64 %103, i32 1
  %105 = lshr i64 %103, 30
  %106 = xor i64 %105, %103
  %107 = mul i64 %106, -4658895280553007687
  %108 = lshr i64 %107, 27
  %109 = xor i64 %108, %107
  %110 = mul i64 %109, -7723592293110705685
  %111 = lshr i64 %110, 31
  %112 = xor i64 %111, %110
  %113 = insertelement <4 x i64> %95, i64 %112, i32 1
  %114 = lshr i64 %112, 30
  %115 = xor i64 %114, %112
  %116 = mul i64 %115, -4658895280553007687
  %117 = lshr i64 %116, 27
  %118 = xor i64 %117, %116
  %119 = mul i64 %118, -7723592293110705685
  %120 = lshr i64 %119, 31
  %121 = xor i64 %120, %119
  %122 = insertelement <4 x i64> %104, i64 %121, i32 2
  %123 = lshr i64 %121, 30
  %124 = xor i64 %123, %121
  %125 = mul i64 %124, -4658895280553007687
  %126 = lshr i64 %125, 27
  %127 = xor i64 %126, %125
  %128 = mul i64 %127, -7723592293110705685
  %129 = lshr i64 %128, 31
  %130 = xor i64 %129, %128
  %131 = insertelement <4 x i64> %113, i64 %130, i32 2
  %132 = lshr i64 %130, 30
  %133 = xor i64 %132, %130
  %134 = mul i64 %133, -4658895280553007687
  %135 = lshr i64 %134, 27
  %136 = xor i64 %135, %134
  %137 = mul i64 %136, -7723592293110705685
  %138 = lshr i64 %137, 31
  %139 = xor i64 %138, %137
  %140 = insertelement <4 x i64> %122, i64 %139, i32 3
  %141 = lshr i64 %139, 30
  %142 = xor i64 %141, %139
  %143 = mul i64 %142, -4658895280553007687
  %144 = lshr i64 %143, 27
  %145 = xor i64 %144, %143
  %146 = mul i64 %145, -7723592293110705685
  %147 = lshr i64 %146, 31
  %148 = xor i64 %147, %146
  %149 = insertelement <4 x i64> %131, i64 %148, i32 3
  %150 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %151 = load i64, i64* %150, align 8, !noalias !175
  %152 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %153 = load i64, i64* %152, align 8, !noalias !175
  %154 = bitcast [8 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %154) #10, !noalias !175
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %154, i8 -86, i64 64, i1 false) #10, !noalias !175
  %155 = icmp eq i64 %153, 0
  br i1 %155, label %250, label %156

156:                                              ; preds = %3
  %157 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %158 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %159 = load i8*, i8** %158, align 8, !alias.scope !175
  %160 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %161 = load i64, i64* %160, align 8, !alias.scope !175
  %162 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %163 = bitcast [8 x i64]* %4 to <4 x i64>*
  %164 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %165 = bitcast i64* %164 to <4 x i64>*
  %166 = bitcast [8 x i64]* %4 to i32*
  br label %167

167:                                              ; preds = %244, %156
  %168 = phi <4 x i64> [ %149, %156 ], [ %206, %244 ]
  %169 = phi <4 x i64> [ %77, %156 ], [ %198, %244 ]
  %170 = phi <4 x i64> [ %140, %156 ], [ %184, %244 ]
  %171 = phi <4 x i64> [ %68, %156 ], [ %185, %244 ]
  %172 = phi i64 [ 0, %156 ], [ %245, %244 ]
  %173 = load i64, i64* %157, align 8, !noalias !175
  %174 = add i64 %173, %172
  %175 = mul i64 %174, %161
  %176 = getelementptr inbounds i8, i8* %159, i64 %175
  %177 = ptrtoint i8* %176 to i64
  %178 = and i64 %177, 63
  %179 = icmp eq i64 %178, 0
  tail call void @llvm.assume(i1 %179) #10, !noalias !175
  %180 = bitcast i8* %176 to float*
  %181 = load i64, i64* %162, align 8, !noalias !175
  %182 = getelementptr inbounds float, float* %180, i64 %181
  br label %183

183:                                              ; preds = %218, %167
  %184 = phi <4 x i64> [ %168, %167 ], [ %206, %218 ]
  %185 = phi <4 x i64> [ %169, %167 ], [ %198, %218 ]
  %186 = phi <4 x i64> [ %170, %167 ], [ %184, %218 ]
  %187 = phi <4 x i64> [ %171, %167 ], [ %185, %218 ]
  %188 = phi i64 [ 0, %167 ], [ %189, %218 ]
  %189 = add i64 %188, 16
  %190 = icmp ugt i64 %189, %151
  %191 = add <4 x i64> %187, %185
  %192 = shl <4 x i64> %187, <i64 23, i64 23, i64 23, i64 23>
  %193 = xor <4 x i64> %192, %187
  %194 = lshr <4 x i64> %193, <i64 18, i64 18, i64 18, i64 18>
  %195 = lshr <4 x i64> %185, <i64 5, i64 5, i64 5, i64 5>
  %196 = xor <4 x i64> %195, %185
  %197 = xor <4 x i64> %196, %193
  %198 = xor <4 x i64> %197, %194
  %199 = add <4 x i64> %186, %184
  %200 = shl <4 x i64> %186, <i64 23, i64 23, i64 23, i64 23>
  %201 = xor <4 x i64> %200, %186
  %202 = lshr <4 x i64> %201, <i64 18, i64 18, i64 18, i64 18>
  %203 = lshr <4 x i64> %184, <i64 5, i64 5, i64 5, i64 5>
  %204 = xor <4 x i64> %203, %184
  %205 = xor <4 x i64> %204, %201
  %206 = xor <4 x i64> %205, %202
  %207 = bitcast <4 x i64> %191 to <8 x i32>
  br i1 %190, label %208, label %218

208:                                              ; preds = %183
  store <4 x i64> %191, <4 x i64>* %163, align 32, !alias.scope !178, !noalias !175
  store <4 x i64> %199, <4 x i64>* %165, align 32, !alias.scope !178, !noalias !175
  %209 = icmp ult i64 %188, %151
  br i1 %209, label %210, label %244

210:                                              ; preds = %208
  %211 = getelementptr inbounds float, float* %182, i64 %188
  %212 = lshr <8 x i32> %207, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %213 = bitcast <8 x i32> %212 to <4 x i64>
  %214 = or <4 x i64> %213, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %215 = bitcast float* %211 to <4 x i64>*
  store <4 x i64> %214, <4 x i64>* %215, align 32, !alias.scope !183, !noalias !188
  %216 = or i64 %188, 8
  %217 = icmp ult i64 %216, %151
  br i1 %217, label %230, label %244

218:                                              ; preds = %183
  %219 = bitcast <4 x i64> %199 to <8 x i32>
  %220 = getelementptr inbounds float, float* %182, i64 %188
  %221 = lshr <8 x i32> %207, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %222 = bitcast <8 x i32> %221 to <4 x i64>
  %223 = or <4 x i64> %222, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %224 = bitcast float* %220 to <4 x i64>*
  store <4 x i64> %223, <4 x i64>* %224, align 32, !alias.scope !190, !noalias !195
  %225 = getelementptr inbounds float, float* %220, i64 8
  %226 = lshr <8 x i32> %219, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %227 = bitcast <8 x i32> %226 to <4 x i64>
  %228 = or <4 x i64> %227, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %229 = bitcast float* %225 to <4 x i64>*
  store <4 x i64> %228, <4 x i64>* %229, align 32, !alias.scope !190, !noalias !195
  br label %183

230:                                              ; preds = %210, %230
  %231 = phi i64 [ %242, %230 ], [ %216, %210 ]
  %232 = phi i64 [ %241, %230 ], [ 8, %210 ]
  %233 = getelementptr inbounds i32, i32* %166, i64 %232
  %234 = bitcast i32* %233 to <8 x i32>*
  %235 = load <8 x i32>, <8 x i32>* %234, align 32, !alias.scope !197, !noalias !200
  %236 = getelementptr inbounds float, float* %182, i64 %231
  %237 = lshr <8 x i32> %235, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %238 = bitcast <8 x i32> %237 to <4 x i64>
  %239 = or <4 x i64> %238, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %240 = bitcast float* %236 to <4 x i64>*
  store <4 x i64> %239, <4 x i64>* %240, align 32, !alias.scope !183, !noalias !188
  %241 = add i64 %232, 8
  %242 = add i64 %231, 8
  %243 = icmp ult i64 %242, %151
  br i1 %243, label %230, label %244

244:                                              ; preds = %230, %210, %208
  %245 = add nuw i64 %172, 1
  %246 = icmp eq i64 %245, %153
  br i1 %246, label %247, label %167

247:                                              ; preds = %244
  %248 = load i64, i64* %150, align 8, !noalias !202
  %249 = load i64, i64* %152, align 8, !noalias !202
  br label %250

250:                                              ; preds = %247, %3
  %251 = phi i64 [ 0, %3 ], [ %249, %247 ]
  %252 = phi i64 [ %151, %3 ], [ %248, %247 ]
  %253 = phi <4 x i64> [ %149, %3 ], [ %206, %247 ]
  %254 = phi <4 x i64> [ %77, %3 ], [ %198, %247 ]
  %255 = phi <4 x i64> [ %140, %3 ], [ %184, %247 ]
  %256 = phi <4 x i64> [ %68, %3 ], [ %185, %247 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %154) #10, !noalias !175
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %154) #10, !noalias !202
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %154, i8 -86, i64 64, i1 false) #10, !noalias !202
  %257 = icmp eq i64 %251, 0
  br i1 %257, label %352, label %258

258:                                              ; preds = %250
  %259 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %260 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %261 = load i8*, i8** %260, align 8, !alias.scope !202
  %262 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 4
  %263 = load i64, i64* %262, align 8, !alias.scope !202
  %264 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %265 = bitcast [8 x i64]* %4 to <4 x i64>*
  %266 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %267 = bitcast i64* %266 to <4 x i64>*
  %268 = bitcast [8 x i64]* %4 to i32*
  br label %269

269:                                              ; preds = %346, %258
  %270 = phi <4 x i64> [ %253, %258 ], [ %308, %346 ]
  %271 = phi <4 x i64> [ %254, %258 ], [ %300, %346 ]
  %272 = phi <4 x i64> [ %255, %258 ], [ %286, %346 ]
  %273 = phi <4 x i64> [ %256, %258 ], [ %287, %346 ]
  %274 = phi i64 [ 0, %258 ], [ %347, %346 ]
  %275 = load i64, i64* %259, align 8, !noalias !202
  %276 = add i64 %275, %274
  %277 = mul i64 %276, %263
  %278 = getelementptr inbounds i8, i8* %261, i64 %277
  %279 = ptrtoint i8* %278 to i64
  %280 = and i64 %279, 63
  %281 = icmp eq i64 %280, 0
  tail call void @llvm.assume(i1 %281) #10, !noalias !202
  %282 = bitcast i8* %278 to float*
  %283 = load i64, i64* %264, align 8, !noalias !202
  %284 = getelementptr inbounds float, float* %282, i64 %283
  br label %285

285:                                              ; preds = %320, %269
  %286 = phi <4 x i64> [ %270, %269 ], [ %308, %320 ]
  %287 = phi <4 x i64> [ %271, %269 ], [ %300, %320 ]
  %288 = phi <4 x i64> [ %272, %269 ], [ %286, %320 ]
  %289 = phi <4 x i64> [ %273, %269 ], [ %287, %320 ]
  %290 = phi i64 [ 0, %269 ], [ %291, %320 ]
  %291 = add i64 %290, 16
  %292 = icmp ugt i64 %291, %252
  %293 = add <4 x i64> %289, %287
  %294 = shl <4 x i64> %289, <i64 23, i64 23, i64 23, i64 23>
  %295 = xor <4 x i64> %294, %289
  %296 = lshr <4 x i64> %295, <i64 18, i64 18, i64 18, i64 18>
  %297 = lshr <4 x i64> %287, <i64 5, i64 5, i64 5, i64 5>
  %298 = xor <4 x i64> %297, %287
  %299 = xor <4 x i64> %298, %295
  %300 = xor <4 x i64> %299, %296
  %301 = add <4 x i64> %288, %286
  %302 = shl <4 x i64> %288, <i64 23, i64 23, i64 23, i64 23>
  %303 = xor <4 x i64> %302, %288
  %304 = lshr <4 x i64> %303, <i64 18, i64 18, i64 18, i64 18>
  %305 = lshr <4 x i64> %286, <i64 5, i64 5, i64 5, i64 5>
  %306 = xor <4 x i64> %305, %286
  %307 = xor <4 x i64> %306, %303
  %308 = xor <4 x i64> %307, %304
  %309 = bitcast <4 x i64> %293 to <8 x i32>
  br i1 %292, label %310, label %320

310:                                              ; preds = %285
  store <4 x i64> %293, <4 x i64>* %265, align 32, !alias.scope !205, !noalias !202
  store <4 x i64> %301, <4 x i64>* %267, align 32, !alias.scope !205, !noalias !202
  %311 = icmp ult i64 %290, %252
  br i1 %311, label %312, label %346

312:                                              ; preds = %310
  %313 = getelementptr inbounds float, float* %284, i64 %290
  %314 = lshr <8 x i32> %309, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %315 = bitcast <8 x i32> %314 to <4 x i64>
  %316 = or <4 x i64> %315, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %317 = bitcast float* %313 to <4 x i64>*
  store <4 x i64> %316, <4 x i64>* %317, align 32, !alias.scope !210, !noalias !215
  %318 = or i64 %290, 8
  %319 = icmp ult i64 %318, %252
  br i1 %319, label %332, label %346

320:                                              ; preds = %285
  %321 = bitcast <4 x i64> %301 to <8 x i32>
  %322 = getelementptr inbounds float, float* %284, i64 %290
  %323 = lshr <8 x i32> %309, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %324 = bitcast <8 x i32> %323 to <4 x i64>
  %325 = or <4 x i64> %324, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %326 = bitcast float* %322 to <4 x i64>*
  store <4 x i64> %325, <4 x i64>* %326, align 32, !alias.scope !217, !noalias !222
  %327 = getelementptr inbounds float, float* %322, i64 8
  %328 = lshr <8 x i32> %321, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %329 = bitcast <8 x i32> %328 to <4 x i64>
  %330 = or <4 x i64> %329, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %331 = bitcast float* %327 to <4 x i64>*
  store <4 x i64> %330, <4 x i64>* %331, align 32, !alias.scope !217, !noalias !222
  br label %285

332:                                              ; preds = %312, %332
  %333 = phi i64 [ %344, %332 ], [ %318, %312 ]
  %334 = phi i64 [ %343, %332 ], [ 8, %312 ]
  %335 = getelementptr inbounds i32, i32* %268, i64 %334
  %336 = bitcast i32* %335 to <8 x i32>*
  %337 = load <8 x i32>, <8 x i32>* %336, align 32, !alias.scope !224, !noalias !227
  %338 = getelementptr inbounds float, float* %284, i64 %333
  %339 = lshr <8 x i32> %337, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %340 = bitcast <8 x i32> %339 to <4 x i64>
  %341 = or <4 x i64> %340, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %342 = bitcast float* %338 to <4 x i64>*
  store <4 x i64> %341, <4 x i64>* %342, align 32, !alias.scope !210, !noalias !215
  %343 = add i64 %334, 8
  %344 = add i64 %333, 8
  %345 = icmp ult i64 %344, %252
  br i1 %345, label %332, label %346

346:                                              ; preds = %332, %312, %310
  %347 = add nuw i64 %274, 1
  %348 = icmp eq i64 %347, %251
  br i1 %348, label %349, label %269

349:                                              ; preds = %346
  %350 = load i64, i64* %150, align 8, !noalias !229
  %351 = load i64, i64* %152, align 8, !noalias !229
  br label %352

352:                                              ; preds = %349, %250
  %353 = phi i64 [ 0, %250 ], [ %351, %349 ]
  %354 = phi i64 [ %252, %250 ], [ %350, %349 ]
  %355 = phi <4 x i64> [ %253, %250 ], [ %308, %349 ]
  %356 = phi <4 x i64> [ %254, %250 ], [ %300, %349 ]
  %357 = phi <4 x i64> [ %255, %250 ], [ %286, %349 ]
  %358 = phi <4 x i64> [ %256, %250 ], [ %287, %349 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %154) #10, !noalias !202
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %154) #10, !noalias !229
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %154, i8 -86, i64 64, i1 false) #10, !noalias !229
  %359 = icmp eq i64 %353, 0
  br i1 %359, label %451, label %360

360:                                              ; preds = %352
  %361 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %362 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %363 = load i8*, i8** %362, align 8, !alias.scope !229
  %364 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 4
  %365 = load i64, i64* %364, align 8, !alias.scope !229
  %366 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %367 = bitcast [8 x i64]* %4 to <4 x i64>*
  %368 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %369 = bitcast i64* %368 to <4 x i64>*
  %370 = bitcast [8 x i64]* %4 to i32*
  br label %371

371:                                              ; preds = %448, %360
  %372 = phi <4 x i64> [ %355, %360 ], [ %410, %448 ]
  %373 = phi <4 x i64> [ %356, %360 ], [ %402, %448 ]
  %374 = phi <4 x i64> [ %357, %360 ], [ %388, %448 ]
  %375 = phi <4 x i64> [ %358, %360 ], [ %389, %448 ]
  %376 = phi i64 [ 0, %360 ], [ %449, %448 ]
  %377 = load i64, i64* %361, align 8, !noalias !229
  %378 = add i64 %377, %376
  %379 = mul i64 %378, %365
  %380 = getelementptr inbounds i8, i8* %363, i64 %379
  %381 = ptrtoint i8* %380 to i64
  %382 = and i64 %381, 63
  %383 = icmp eq i64 %382, 0
  tail call void @llvm.assume(i1 %383) #10, !noalias !229
  %384 = bitcast i8* %380 to float*
  %385 = load i64, i64* %366, align 8, !noalias !229
  %386 = getelementptr inbounds float, float* %384, i64 %385
  br label %387

387:                                              ; preds = %422, %371
  %388 = phi <4 x i64> [ %372, %371 ], [ %410, %422 ]
  %389 = phi <4 x i64> [ %373, %371 ], [ %402, %422 ]
  %390 = phi <4 x i64> [ %374, %371 ], [ %388, %422 ]
  %391 = phi <4 x i64> [ %375, %371 ], [ %389, %422 ]
  %392 = phi i64 [ 0, %371 ], [ %393, %422 ]
  %393 = add i64 %392, 16
  %394 = icmp ugt i64 %393, %354
  %395 = add <4 x i64> %391, %389
  %396 = shl <4 x i64> %391, <i64 23, i64 23, i64 23, i64 23>
  %397 = xor <4 x i64> %396, %391
  %398 = lshr <4 x i64> %397, <i64 18, i64 18, i64 18, i64 18>
  %399 = lshr <4 x i64> %389, <i64 5, i64 5, i64 5, i64 5>
  %400 = xor <4 x i64> %399, %389
  %401 = xor <4 x i64> %400, %397
  %402 = xor <4 x i64> %401, %398
  %403 = add <4 x i64> %390, %388
  %404 = shl <4 x i64> %390, <i64 23, i64 23, i64 23, i64 23>
  %405 = xor <4 x i64> %404, %390
  %406 = lshr <4 x i64> %405, <i64 18, i64 18, i64 18, i64 18>
  %407 = lshr <4 x i64> %388, <i64 5, i64 5, i64 5, i64 5>
  %408 = xor <4 x i64> %407, %388
  %409 = xor <4 x i64> %408, %405
  %410 = xor <4 x i64> %409, %406
  %411 = bitcast <4 x i64> %395 to <8 x i32>
  br i1 %394, label %412, label %422

412:                                              ; preds = %387
  store <4 x i64> %395, <4 x i64>* %367, align 32, !alias.scope !232, !noalias !229
  store <4 x i64> %403, <4 x i64>* %369, align 32, !alias.scope !232, !noalias !229
  %413 = icmp ult i64 %392, %354
  br i1 %413, label %414, label %448

414:                                              ; preds = %412
  %415 = getelementptr inbounds float, float* %386, i64 %392
  %416 = lshr <8 x i32> %411, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %417 = bitcast <8 x i32> %416 to <4 x i64>
  %418 = or <4 x i64> %417, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %419 = bitcast float* %415 to <4 x i64>*
  store <4 x i64> %418, <4 x i64>* %419, align 32, !alias.scope !237, !noalias !242
  %420 = or i64 %392, 8
  %421 = icmp ult i64 %420, %354
  br i1 %421, label %434, label %448

422:                                              ; preds = %387
  %423 = bitcast <4 x i64> %403 to <8 x i32>
  %424 = getelementptr inbounds float, float* %386, i64 %392
  %425 = lshr <8 x i32> %411, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %426 = bitcast <8 x i32> %425 to <4 x i64>
  %427 = or <4 x i64> %426, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %428 = bitcast float* %424 to <4 x i64>*
  store <4 x i64> %427, <4 x i64>* %428, align 32, !alias.scope !244, !noalias !249
  %429 = getelementptr inbounds float, float* %424, i64 8
  %430 = lshr <8 x i32> %423, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %431 = bitcast <8 x i32> %430 to <4 x i64>
  %432 = or <4 x i64> %431, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %433 = bitcast float* %429 to <4 x i64>*
  store <4 x i64> %432, <4 x i64>* %433, align 32, !alias.scope !244, !noalias !249
  br label %387

434:                                              ; preds = %414, %434
  %435 = phi i64 [ %446, %434 ], [ %420, %414 ]
  %436 = phi i64 [ %445, %434 ], [ 8, %414 ]
  %437 = getelementptr inbounds i32, i32* %370, i64 %436
  %438 = bitcast i32* %437 to <8 x i32>*
  %439 = load <8 x i32>, <8 x i32>* %438, align 32, !alias.scope !251, !noalias !254
  %440 = getelementptr inbounds float, float* %386, i64 %435
  %441 = lshr <8 x i32> %439, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %442 = bitcast <8 x i32> %441 to <4 x i64>
  %443 = or <4 x i64> %442, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %444 = bitcast float* %440 to <4 x i64>*
  store <4 x i64> %443, <4 x i64>* %444, align 32, !alias.scope !237, !noalias !242
  %445 = add i64 %436, 8
  %446 = add i64 %435, 8
  %447 = icmp ult i64 %446, %354
  br i1 %447, label %434, label %448

448:                                              ; preds = %434, %414, %412
  %449 = add nuw i64 %376, 1
  %450 = icmp eq i64 %449, %353
  br i1 %450, label %451, label %371

451:                                              ; preds = %448, %352
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %154) #10, !noalias !229
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX311BitsToFloatEPKjPf(i32* noalias nocapture readonly, float* noalias nocapture) local_unnamed_addr #5 {
  %3 = bitcast i32* %0 to <16 x i32>*
  %4 = load <16 x i32>, <16 x i32>* %3, align 64, !alias.scope !256, !noalias !259
  %5 = lshr <16 x i32> %4, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %6 = bitcast <16 x i32> %5 to <8 x i64>
  %7 = or <8 x i64> %6, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %8 = bitcast float* %1 to <8 x i64>*
  store <8 x i64> %7, <8 x i64>* %8, align 64, !alias.scope !261
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX38AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_(%"struct.jxl::NoiseParams"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* nocapture readonly dereferenceable(104), %"class.jxl::Image3"* nocapture readonly) #6 {
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca %"class.jxl::N_AVX3::StrengthEvalLut", align 4
  %10 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 0
  %11 = load float, float* %10, align 4
  %12 = tail call float @llvm.fabs.f32(float %11) #10
  %13 = fcmp ule float %12, 0x3F50624DE0000000
  br i1 %13, label %14, label %49

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16) #10
  %18 = fcmp ule float %17, 0x3F50624DE0000000
  br i1 %18, label %19, label %49

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 2
  %21 = load float, float* %20, align 4
  %22 = tail call float @llvm.fabs.f32(float %21) #10
  %23 = fcmp ule float %22, 0x3F50624DE0000000
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 3
  %26 = load float, float* %25, align 4
  %27 = tail call float @llvm.fabs.f32(float %26) #10
  %28 = fcmp ule float %27, 0x3F50624DE0000000
  br i1 %28, label %29, label %49

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 4
  %31 = load float, float* %30, align 4
  %32 = tail call float @llvm.fabs.f32(float %31) #10
  %33 = fcmp ule float %32, 0x3F50624DE0000000
  br i1 %33, label %34, label %49

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 5
  %36 = load float, float* %35, align 4
  %37 = tail call float @llvm.fabs.f32(float %36) #10
  %38 = fcmp ule float %37, 0x3F50624DE0000000
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 6
  %41 = load float, float* %40, align 4
  %42 = tail call float @llvm.fabs.f32(float %41) #10
  %43 = fcmp ule float %42, 0x3F50624DE0000000
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 7
  %46 = load float, float* %45, align 4
  %47 = tail call float @llvm.fabs.f32(float %46) #10
  %48 = fcmp ule float %47, 0x3F50624DE0000000
  br i1 %48, label %265, label %49

49:                                               ; preds = %6, %14, %19, %24, %29, %34, %39, %44
  %50 = bitcast %"class.jxl::N_AVX3::StrengthEvalLut"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #10
  %51 = bitcast %"struct.jxl::NoiseParams"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %51, i64 32, i1 false) #10
  %52 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 5
  %57 = load float, float* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 4
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 0.000000e+00
  %61 = fadd float %57, %60
  %62 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 6
  %63 = load float, float* %62, align 4
  %64 = fadd float %63, %60
  %65 = icmp eq i64 %55, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %49
  %67 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  %68 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = icmp eq i64 %53, 0
  %80 = bitcast float* %7 to i8*
  %81 = bitcast float* %8 to i8*
  br label %83

82:                                               ; preds = %155, %49
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #10
  br label %265

83:                                               ; preds = %155, %66
  %84 = phi i64 [ 0, %66 ], [ %156, %155 ]
  %85 = load i64, i64* %67, align 8
  %86 = add i64 %85, %84
  %87 = load i64, i64* %68, align 8
  %88 = mul i64 %87, %86
  %89 = load i8*, i8** %69, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = and i64 %90, 63
  %92 = icmp eq i64 %91, 0
  tail call void @llvm.assume(i1 %92) #10
  %93 = getelementptr inbounds i8, i8* %89, i64 %88
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #10
  %97 = bitcast i8* %93 to float*
  %98 = load i64, i64* %70, align 8
  %99 = getelementptr inbounds float, float* %97, i64 %98
  %100 = load i8*, i8** %71, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = and i64 %101, 63
  %103 = icmp eq i64 %102, 0
  tail call void @llvm.assume(i1 %103) #10
  %104 = getelementptr inbounds i8, i8* %100, i64 %88
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #10
  %108 = bitcast i8* %104 to float*
  %109 = getelementptr inbounds float, float* %108, i64 %98
  %110 = load i8*, i8** %72, align 8
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #10
  %114 = getelementptr inbounds i8, i8* %110, i64 %88
  %115 = ptrtoint i8* %114 to i64
  %116 = and i64 %115, 63
  %117 = icmp eq i64 %116, 0
  tail call void @llvm.assume(i1 %117) #10
  %118 = bitcast i8* %114 to float*
  %119 = getelementptr inbounds float, float* %118, i64 %98
  %120 = load i64, i64* %73, align 8
  %121 = add i64 %120, %84
  %122 = load i64, i64* %74, align 8
  %123 = mul i64 %122, %121
  %124 = load i8*, i8** %75, align 8
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  tail call void @llvm.assume(i1 %127) #10
  %128 = getelementptr inbounds i8, i8* %124, i64 %123
  %129 = ptrtoint i8* %128 to i64
  %130 = and i64 %129, 63
  %131 = icmp eq i64 %130, 0
  tail call void @llvm.assume(i1 %131) #10
  %132 = bitcast i8* %128 to float*
  %133 = load i64, i64* %76, align 8
  %134 = getelementptr inbounds float, float* %132, i64 %133
  %135 = load i8*, i8** %77, align 8
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  tail call void @llvm.assume(i1 %138) #10
  %139 = getelementptr inbounds i8, i8* %135, i64 %123
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  tail call void @llvm.assume(i1 %142) #10
  %143 = bitcast i8* %139 to float*
  %144 = getelementptr inbounds float, float* %143, i64 %133
  %145 = load i8*, i8** %78, align 8
  %146 = ptrtoint i8* %145 to i64
  %147 = and i64 %146, 63
  %148 = icmp eq i64 %147, 0
  tail call void @llvm.assume(i1 %148) #10
  %149 = getelementptr inbounds i8, i8* %145, i64 %123
  %150 = ptrtoint i8* %149 to i64
  %151 = and i64 %150, 63
  %152 = icmp eq i64 %151, 0
  tail call void @llvm.assume(i1 %152) #10
  %153 = bitcast i8* %149 to float*
  %154 = getelementptr inbounds float, float* %153, i64 %133
  br i1 %79, label %155, label %158

155:                                              ; preds = %207, %83
  %156 = add nuw i64 %84, 1
  %157 = icmp eq i64 %156, %55
  br i1 %157, label %82, label %83

158:                                              ; preds = %83, %207
  %159 = phi i64 [ %263, %207 ], [ 0, %83 ]
  %160 = getelementptr inbounds float, float* %99, i64 %159
  %161 = load float, float* %160, align 4, !alias.scope !264
  %162 = getelementptr inbounds float, float* %109, i64 %159
  %163 = load float, float* %162, align 4, !alias.scope !267
  %164 = fsub float %163, %161
  %165 = fmul float %164, 5.000000e-01
  %166 = fmul float %165, 6.000000e+00
  %167 = fcmp ogt float %166, 0.000000e+00
  %168 = select i1 %167, float %166, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #10
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %169 = call float @modff(float %168, float* nonnull %7) #10
  %170 = fcmp ogt float %168, 6.000000e+00
  br i1 %170, label %176, label %171, !prof !14

171:                                              ; preds = %158
  %172 = load float, float* %7, align 4
  %173 = fptosi float %172 to i32
  %174 = zext i32 %173 to i64
  %175 = shl nuw i64 %174, 32
  br label %177

176:                                              ; preds = %158
  store float 6.000000e+00, float* %7, align 4
  br label %177

177:                                              ; preds = %171, %176
  %178 = phi i64 [ %175, %171 ], [ 25769803776, %176 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #10
  %179 = ashr exact i64 %178, 32
  %180 = getelementptr inbounds %"class.jxl::N_AVX3::StrengthEvalLut", %"class.jxl::N_AVX3::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %179
  %181 = load float, float* %180, align 4
  %182 = add i64 %178, 4294967296
  %183 = ashr exact i64 %182, 32
  %184 = getelementptr inbounds %"class.jxl::N_AVX3::StrengthEvalLut", %"class.jxl::N_AVX3::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %183
  %185 = load float, float* %184, align 4
  %186 = fsub float 1.000000e+00, %169
  %187 = fmul float %186, %181
  %188 = fmul float %169, %185
  %189 = fadd float %187, %188
  %190 = insertelement <4 x float> undef, float %189, i32 0
  %191 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> zeroinitializer
  %192 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %191, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #10
  %193 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %192, <4 x float> zeroinitializer, <4 x float> %192) #10
  %194 = fadd float %161, %163
  %195 = fmul float %194, 5.000000e-01
  %196 = fmul float %195, 6.000000e+00
  %197 = fcmp ogt float %196, 0.000000e+00
  %198 = select i1 %197, float %196, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #10
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %199 = call float @modff(float %198, float* nonnull %8) #10
  %200 = fcmp ogt float %198, 6.000000e+00
  br i1 %200, label %206, label %201, !prof !14

201:                                              ; preds = %177
  %202 = load float, float* %8, align 4
  %203 = fptosi float %202 to i32
  %204 = zext i32 %203 to i64
  %205 = shl nuw i64 %204, 32
  br label %207

206:                                              ; preds = %177
  store float 6.000000e+00, float* %8, align 4
  br label %207

207:                                              ; preds = %201, %206
  %208 = phi i64 [ %205, %201 ], [ 25769803776, %206 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #10
  %209 = ashr exact i64 %208, 32
  %210 = getelementptr inbounds %"class.jxl::N_AVX3::StrengthEvalLut", %"class.jxl::N_AVX3::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %209
  %211 = load float, float* %210, align 4
  %212 = add i64 %208, 4294967296
  %213 = ashr exact i64 %212, 32
  %214 = getelementptr inbounds %"class.jxl::N_AVX3::StrengthEvalLut", %"class.jxl::N_AVX3::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %213
  %215 = load float, float* %214, align 4
  %216 = fsub float 1.000000e+00, %199
  %217 = fmul float %216, %211
  %218 = fmul float %199, %215
  %219 = fadd float %217, %218
  %220 = insertelement <4 x float> undef, float %219, i32 0
  %221 = shufflevector <4 x float> %220, <4 x float> undef, <4 x i32> zeroinitializer
  %222 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %221, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #10
  %223 = tail call <4 x float> @llvm.x86.sse41.blendvps(<4 x float> %222, <4 x float> zeroinitializer, <4 x float> %222) #10
  %224 = getelementptr inbounds float, float* %134, i64 %159
  %225 = load float, float* %224, align 4, !alias.scope !270
  %226 = fmul float %225, 0x3FCC28F5C0000000
  %227 = getelementptr inbounds float, float* %144, i64 %159
  %228 = load float, float* %227, align 4, !alias.scope !273
  %229 = fmul float %228, 0x3FCC28F5C0000000
  %230 = getelementptr inbounds float, float* %154, i64 %159
  %231 = load float, float* %230, align 4, !alias.scope !276
  %232 = fmul float %231, 0x3FCC28F5C0000000
  %233 = getelementptr inbounds float, float* %119, i64 %159
  %234 = fmul float %226, 7.812500e-03
  %235 = extractelement <4 x float> %223, i32 0
  %236 = fmul float %235, %234
  %237 = insertelement <4 x float> <float undef, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>, float %236, i32 0
  %238 = fmul float %232, 0x3FEFC00000000000
  %239 = insertelement <4 x float> <float undef, float 0x3FEFC00000000000, float 0x3FEFC00000000000, float 0x3FEFC00000000000>, float %238, i32 0
  %240 = fmul float %235, %238
  %241 = insertelement <4 x float> %239, float %240, i32 0
  %242 = fadd <4 x float> %237, %241
  %243 = fmul float %229, 7.812500e-03
  %244 = extractelement <4 x float> %193, i32 0
  %245 = fmul float %244, %243
  %246 = insertelement <4 x float> <float undef, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>, float %245, i32 0
  %247 = fmul float %244, %238
  %248 = insertelement <4 x float> %239, float %247, i32 0
  %249 = fadd <4 x float> %246, %248
  %250 = load float, float* %160, align 4, !alias.scope !279, !noalias !284
  %251 = load float, float* %162, align 4, !alias.scope !287, !noalias !290
  %252 = load float, float* %233, align 4, !alias.scope !291, !noalias !294
  %253 = fsub <4 x float> %242, %249
  %254 = fadd <4 x float> %249, %242
  %255 = extractelement <4 x float> %254, i32 0
  %256 = fmul float %61, %255
  %257 = fmul float %64, %255
  %258 = extractelement <4 x float> %253, i32 0
  %259 = fadd float %258, %256
  %260 = fadd float %250, %259
  store float %260, float* %160, align 4, !alias.scope !295, !noalias !284
  %261 = fadd float %251, %255
  store float %261, float* %162, align 4, !alias.scope !298, !noalias !290
  %262 = fadd float %252, %257
  store float %262, float* %233, align 4, !alias.scope !301, !noalias !294
  %263 = add nuw i64 %159, 1
  %264 = icmp eq i64 %263, %53
  br i1 %264, label %155, label %158

265:                                              ; preds = %44, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX312RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* noalias nocapture readonly) #5 {
  %4 = alloca <8 x i64>, align 64
  %5 = alloca <8 x i64>, align 64
  %6 = alloca <8 x i64>, align 64
  %7 = add i64 %0, -7046029254386353131
  %8 = lshr i64 %7, 30
  %9 = xor i64 %8, %7
  %10 = mul i64 %9, -4658895280553007687
  %11 = lshr i64 %10, 27
  %12 = xor i64 %11, %10
  %13 = mul i64 %12, -7723592293110705685
  %14 = lshr i64 %13, 31
  %15 = xor i64 %14, %13
  %16 = insertelement <8 x i64> undef, i64 %15, i32 0
  %17 = lshr i64 %15, 30
  %18 = xor i64 %17, %15
  %19 = mul i64 %18, -4658895280553007687
  %20 = lshr i64 %19, 27
  %21 = xor i64 %20, %19
  %22 = mul i64 %21, -7723592293110705685
  %23 = lshr i64 %22, 31
  %24 = xor i64 %23, %22
  %25 = insertelement <8 x i64> undef, i64 %24, i32 0
  %26 = lshr i64 %24, 30
  %27 = xor i64 %26, %24
  %28 = mul i64 %27, -4658895280553007687
  %29 = lshr i64 %28, 27
  %30 = xor i64 %29, %28
  %31 = mul i64 %30, -7723592293110705685
  %32 = lshr i64 %31, 31
  %33 = xor i64 %32, %31
  %34 = insertelement <8 x i64> %16, i64 %33, i32 1
  %35 = lshr i64 %33, 30
  %36 = xor i64 %35, %33
  %37 = mul i64 %36, -4658895280553007687
  %38 = lshr i64 %37, 27
  %39 = xor i64 %38, %37
  %40 = mul i64 %39, -7723592293110705685
  %41 = lshr i64 %40, 31
  %42 = xor i64 %41, %40
  %43 = insertelement <8 x i64> %25, i64 %42, i32 1
  %44 = lshr i64 %42, 30
  %45 = xor i64 %44, %42
  %46 = mul i64 %45, -4658895280553007687
  %47 = lshr i64 %46, 27
  %48 = xor i64 %47, %46
  %49 = mul i64 %48, -7723592293110705685
  %50 = lshr i64 %49, 31
  %51 = xor i64 %50, %49
  %52 = insertelement <8 x i64> %34, i64 %51, i32 2
  %53 = lshr i64 %51, 30
  %54 = xor i64 %53, %51
  %55 = mul i64 %54, -4658895280553007687
  %56 = lshr i64 %55, 27
  %57 = xor i64 %56, %55
  %58 = mul i64 %57, -7723592293110705685
  %59 = lshr i64 %58, 31
  %60 = xor i64 %59, %58
  %61 = insertelement <8 x i64> %43, i64 %60, i32 2
  %62 = lshr i64 %60, 30
  %63 = xor i64 %62, %60
  %64 = mul i64 %63, -4658895280553007687
  %65 = lshr i64 %64, 27
  %66 = xor i64 %65, %64
  %67 = mul i64 %66, -7723592293110705685
  %68 = lshr i64 %67, 31
  %69 = xor i64 %68, %67
  %70 = insertelement <8 x i64> %52, i64 %69, i32 3
  %71 = lshr i64 %69, 30
  %72 = xor i64 %71, %69
  %73 = mul i64 %72, -4658895280553007687
  %74 = lshr i64 %73, 27
  %75 = xor i64 %74, %73
  %76 = mul i64 %75, -7723592293110705685
  %77 = lshr i64 %76, 31
  %78 = xor i64 %77, %76
  %79 = insertelement <8 x i64> %61, i64 %78, i32 3
  %80 = lshr i64 %78, 30
  %81 = xor i64 %80, %78
  %82 = mul i64 %81, -4658895280553007687
  %83 = lshr i64 %82, 27
  %84 = xor i64 %83, %82
  %85 = mul i64 %84, -7723592293110705685
  %86 = lshr i64 %85, 31
  %87 = xor i64 %86, %85
  %88 = insertelement <8 x i64> %70, i64 %87, i32 4
  %89 = lshr i64 %87, 30
  %90 = xor i64 %89, %87
  %91 = mul i64 %90, -4658895280553007687
  %92 = lshr i64 %91, 27
  %93 = xor i64 %92, %91
  %94 = mul i64 %93, -7723592293110705685
  %95 = lshr i64 %94, 31
  %96 = xor i64 %95, %94
  %97 = insertelement <8 x i64> %79, i64 %96, i32 4
  %98 = lshr i64 %96, 30
  %99 = xor i64 %98, %96
  %100 = mul i64 %99, -4658895280553007687
  %101 = lshr i64 %100, 27
  %102 = xor i64 %101, %100
  %103 = mul i64 %102, -7723592293110705685
  %104 = lshr i64 %103, 31
  %105 = xor i64 %104, %103
  %106 = insertelement <8 x i64> %88, i64 %105, i32 5
  %107 = lshr i64 %105, 30
  %108 = xor i64 %107, %105
  %109 = mul i64 %108, -4658895280553007687
  %110 = lshr i64 %109, 27
  %111 = xor i64 %110, %109
  %112 = mul i64 %111, -7723592293110705685
  %113 = lshr i64 %112, 31
  %114 = xor i64 %113, %112
  %115 = insertelement <8 x i64> %97, i64 %114, i32 5
  %116 = lshr i64 %114, 30
  %117 = xor i64 %116, %114
  %118 = mul i64 %117, -4658895280553007687
  %119 = lshr i64 %118, 27
  %120 = xor i64 %119, %118
  %121 = mul i64 %120, -7723592293110705685
  %122 = lshr i64 %121, 31
  %123 = xor i64 %122, %121
  %124 = insertelement <8 x i64> %106, i64 %123, i32 6
  %125 = lshr i64 %123, 30
  %126 = xor i64 %125, %123
  %127 = mul i64 %126, -4658895280553007687
  %128 = lshr i64 %127, 27
  %129 = xor i64 %128, %127
  %130 = mul i64 %129, -7723592293110705685
  %131 = lshr i64 %130, 31
  %132 = xor i64 %131, %130
  %133 = insertelement <8 x i64> %115, i64 %132, i32 6
  %134 = lshr i64 %132, 30
  %135 = xor i64 %134, %132
  %136 = mul i64 %135, -4658895280553007687
  %137 = lshr i64 %136, 27
  %138 = xor i64 %137, %136
  %139 = mul i64 %138, -7723592293110705685
  %140 = lshr i64 %139, 31
  %141 = xor i64 %140, %139
  %142 = insertelement <8 x i64> %124, i64 %141, i32 7
  %143 = lshr i64 %141, 30
  %144 = xor i64 %143, %141
  %145 = mul i64 %144, -4658895280553007687
  %146 = lshr i64 %145, 27
  %147 = xor i64 %146, %145
  %148 = mul i64 %147, -7723592293110705685
  %149 = lshr i64 %148, 31
  %150 = xor i64 %149, %148
  %151 = insertelement <8 x i64> %133, i64 %150, i32 7
  %152 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %153 = load i64, i64* %152, align 8, !noalias !304
  %154 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %155 = load i64, i64* %154, align 8, !noalias !307
  %156 = bitcast <8 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %156) #10, !noalias !304
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %156, i8 -86, i64 64, i1 false) #10, !noalias !304
  %157 = icmp eq i64 %155, 0
  br i1 %157, label %247, label %158

158:                                              ; preds = %3
  %159 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %160 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8, !alias.scope !304
  %162 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %163 = load i64, i64* %162, align 8, !alias.scope !304
  %164 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %165 = icmp ult i64 %153, 16
  %166 = bitcast <8 x i64>* %4 to i32*
  br label %167

167:                                              ; preds = %241, %158
  %168 = phi <8 x i64> [ %151, %158 ], [ %192, %241 ]
  %169 = phi <8 x i64> [ %142, %158 ], [ %193, %241 ]
  %170 = phi i64 [ 0, %158 ], [ %242, %241 ]
  %171 = load i64, i64* %159, align 8, !noalias !304
  %172 = add i64 %171, %170
  %173 = mul i64 %172, %163
  %174 = getelementptr inbounds i8, i8* %161, i64 %173
  %175 = ptrtoint i8* %174 to i64
  %176 = and i64 %175, 63
  %177 = icmp eq i64 %176, 0
  tail call void @llvm.assume(i1 %177) #10, !noalias !304
  %178 = bitcast i8* %174 to float*
  %179 = load i64, i64* %164, align 8, !noalias !304
  %180 = getelementptr inbounds float, float* %178, i64 %179
  %181 = add <8 x i64> %169, %168
  %182 = shl <8 x i64> %169, <i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23>
  %183 = xor <8 x i64> %182, %169
  store <8 x i64> %181, <8 x i64>* %4, align 64, !alias.scope !308, !noalias !304
  %184 = lshr <8 x i64> %183, <i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18>
  %185 = lshr <8 x i64> %168, <i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5>
  %186 = xor <8 x i64> %185, %168
  %187 = xor <8 x i64> %186, %183
  %188 = xor <8 x i64> %187, %184
  %189 = bitcast <8 x i64> %181 to <16 x i32>
  br i1 %165, label %191, label %205

190:                                              ; preds = %205
  store <8 x i64> %218, <8 x i64>* %4, align 64, !alias.scope !308, !noalias !304
  br label %191

191:                                              ; preds = %190, %167
  %192 = phi <8 x i64> [ %188, %167 ], [ %225, %190 ]
  %193 = phi <8 x i64> [ %168, %167 ], [ %206, %190 ]
  %194 = phi <16 x i32> [ %189, %167 ], [ %226, %190 ]
  %195 = phi i64 [ 0, %167 ], [ %209, %190 ]
  %196 = icmp ult i64 %195, %153
  br i1 %196, label %197, label %241

197:                                              ; preds = %191
  %198 = getelementptr inbounds float, float* %180, i64 %195
  %199 = lshr <16 x i32> %194, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %200 = bitcast <16 x i32> %199 to <8 x i64>
  %201 = or <8 x i64> %200, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %202 = bitcast float* %198 to <8 x i64>*
  store <8 x i64> %201, <8 x i64>* %202, align 64, !alias.scope !313, !noalias !318
  %203 = add i64 %195, 16
  %204 = icmp ult i64 %203, %153
  br i1 %204, label %227, label %241

205:                                              ; preds = %167, %205
  %206 = phi <8 x i64> [ %225, %205 ], [ %188, %167 ]
  %207 = phi <8 x i64> [ %206, %205 ], [ %168, %167 ]
  %208 = phi <16 x i32> [ %226, %205 ], [ %189, %167 ]
  %209 = phi i64 [ %216, %205 ], [ 16, %167 ]
  %210 = phi i64 [ %209, %205 ], [ 0, %167 ]
  %211 = getelementptr inbounds float, float* %180, i64 %210
  %212 = lshr <16 x i32> %208, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %213 = bitcast <16 x i32> %212 to <8 x i64>
  %214 = or <8 x i64> %213, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %215 = bitcast float* %211 to <8 x i64>*
  store <8 x i64> %214, <8 x i64>* %215, align 64, !alias.scope !320, !noalias !325
  %216 = add i64 %209, 16
  %217 = icmp ugt i64 %216, %153
  %218 = add <8 x i64> %207, %206
  %219 = shl <8 x i64> %207, <i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23>
  %220 = xor <8 x i64> %219, %207
  %221 = lshr <8 x i64> %220, <i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18>
  %222 = lshr <8 x i64> %206, <i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5>
  %223 = xor <8 x i64> %222, %206
  %224 = xor <8 x i64> %223, %220
  %225 = xor <8 x i64> %224, %221
  %226 = bitcast <8 x i64> %218 to <16 x i32>
  br i1 %217, label %190, label %205

227:                                              ; preds = %197, %227
  %228 = phi i64 [ %239, %227 ], [ %203, %197 ]
  %229 = phi i64 [ %238, %227 ], [ 16, %197 ]
  %230 = getelementptr inbounds i32, i32* %166, i64 %229
  %231 = bitcast i32* %230 to <16 x i32>*
  %232 = load <16 x i32>, <16 x i32>* %231, align 64, !alias.scope !327, !noalias !330
  %233 = getelementptr inbounds float, float* %180, i64 %228
  %234 = lshr <16 x i32> %232, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %235 = bitcast <16 x i32> %234 to <8 x i64>
  %236 = or <8 x i64> %235, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %237 = bitcast float* %233 to <8 x i64>*
  store <8 x i64> %236, <8 x i64>* %237, align 64, !alias.scope !313, !noalias !318
  %238 = add i64 %229, 16
  %239 = add i64 %228, 16
  %240 = icmp ult i64 %239, %153
  br i1 %240, label %227, label %241

241:                                              ; preds = %227, %197, %191
  %242 = add nuw i64 %170, 1
  %243 = icmp eq i64 %242, %155
  br i1 %243, label %244, label %167

244:                                              ; preds = %241
  %245 = load i64, i64* %154, align 8, !noalias !332
  %246 = load i64, i64* %152, align 8, !noalias !307
  br label %247

247:                                              ; preds = %244, %3
  %248 = phi i64 [ %245, %244 ], [ 0, %3 ]
  %249 = phi i64 [ %246, %244 ], [ %153, %3 ]
  %250 = phi <8 x i64> [ %192, %244 ], [ %151, %3 ]
  %251 = phi <8 x i64> [ %193, %244 ], [ %142, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %156) #10, !noalias !304
  %252 = bitcast <8 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %252) #10, !noalias !332
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %252, i8 -86, i64 64, i1 false) #10, !noalias !332
  %253 = icmp eq i64 %248, 0
  br i1 %253, label %343, label %254

254:                                              ; preds = %247
  %255 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %256 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %257 = load i8*, i8** %256, align 8, !alias.scope !332
  %258 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 4
  %259 = load i64, i64* %258, align 8, !alias.scope !332
  %260 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %261 = icmp ult i64 %249, 16
  %262 = bitcast <8 x i64>* %5 to i32*
  br label %263

263:                                              ; preds = %337, %254
  %264 = phi <8 x i64> [ %250, %254 ], [ %288, %337 ]
  %265 = phi <8 x i64> [ %251, %254 ], [ %289, %337 ]
  %266 = phi i64 [ 0, %254 ], [ %338, %337 ]
  %267 = load i64, i64* %255, align 8, !noalias !332
  %268 = add i64 %267, %266
  %269 = mul i64 %268, %259
  %270 = getelementptr inbounds i8, i8* %257, i64 %269
  %271 = ptrtoint i8* %270 to i64
  %272 = and i64 %271, 63
  %273 = icmp eq i64 %272, 0
  tail call void @llvm.assume(i1 %273) #10, !noalias !332
  %274 = bitcast i8* %270 to float*
  %275 = load i64, i64* %260, align 8, !noalias !332
  %276 = getelementptr inbounds float, float* %274, i64 %275
  %277 = add <8 x i64> %265, %264
  %278 = shl <8 x i64> %265, <i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23>
  %279 = xor <8 x i64> %278, %265
  store <8 x i64> %277, <8 x i64>* %5, align 64, !alias.scope !335, !noalias !332
  %280 = lshr <8 x i64> %279, <i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18>
  %281 = lshr <8 x i64> %264, <i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5>
  %282 = xor <8 x i64> %281, %264
  %283 = xor <8 x i64> %282, %279
  %284 = xor <8 x i64> %283, %280
  %285 = bitcast <8 x i64> %277 to <16 x i32>
  br i1 %261, label %287, label %301

286:                                              ; preds = %301
  store <8 x i64> %314, <8 x i64>* %5, align 64, !alias.scope !335, !noalias !332
  br label %287

287:                                              ; preds = %286, %263
  %288 = phi <8 x i64> [ %284, %263 ], [ %321, %286 ]
  %289 = phi <8 x i64> [ %264, %263 ], [ %302, %286 ]
  %290 = phi <16 x i32> [ %285, %263 ], [ %322, %286 ]
  %291 = phi i64 [ 0, %263 ], [ %305, %286 ]
  %292 = icmp ult i64 %291, %249
  br i1 %292, label %293, label %337

293:                                              ; preds = %287
  %294 = getelementptr inbounds float, float* %276, i64 %291
  %295 = lshr <16 x i32> %290, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %296 = bitcast <16 x i32> %295 to <8 x i64>
  %297 = or <8 x i64> %296, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %298 = bitcast float* %294 to <8 x i64>*
  store <8 x i64> %297, <8 x i64>* %298, align 64, !alias.scope !340, !noalias !345
  %299 = add i64 %291, 16
  %300 = icmp ult i64 %299, %249
  br i1 %300, label %323, label %337

301:                                              ; preds = %263, %301
  %302 = phi <8 x i64> [ %321, %301 ], [ %284, %263 ]
  %303 = phi <8 x i64> [ %302, %301 ], [ %264, %263 ]
  %304 = phi <16 x i32> [ %322, %301 ], [ %285, %263 ]
  %305 = phi i64 [ %312, %301 ], [ 16, %263 ]
  %306 = phi i64 [ %305, %301 ], [ 0, %263 ]
  %307 = getelementptr inbounds float, float* %276, i64 %306
  %308 = lshr <16 x i32> %304, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %309 = bitcast <16 x i32> %308 to <8 x i64>
  %310 = or <8 x i64> %309, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %311 = bitcast float* %307 to <8 x i64>*
  store <8 x i64> %310, <8 x i64>* %311, align 64, !alias.scope !347, !noalias !352
  %312 = add i64 %305, 16
  %313 = icmp ugt i64 %312, %249
  %314 = add <8 x i64> %303, %302
  %315 = shl <8 x i64> %303, <i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23>
  %316 = xor <8 x i64> %315, %303
  %317 = lshr <8 x i64> %316, <i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18>
  %318 = lshr <8 x i64> %302, <i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5>
  %319 = xor <8 x i64> %318, %302
  %320 = xor <8 x i64> %319, %316
  %321 = xor <8 x i64> %320, %317
  %322 = bitcast <8 x i64> %314 to <16 x i32>
  br i1 %313, label %286, label %301

323:                                              ; preds = %293, %323
  %324 = phi i64 [ %335, %323 ], [ %299, %293 ]
  %325 = phi i64 [ %334, %323 ], [ 16, %293 ]
  %326 = getelementptr inbounds i32, i32* %262, i64 %325
  %327 = bitcast i32* %326 to <16 x i32>*
  %328 = load <16 x i32>, <16 x i32>* %327, align 64, !alias.scope !354, !noalias !357
  %329 = getelementptr inbounds float, float* %276, i64 %324
  %330 = lshr <16 x i32> %328, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %331 = bitcast <16 x i32> %330 to <8 x i64>
  %332 = or <8 x i64> %331, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %333 = bitcast float* %329 to <8 x i64>*
  store <8 x i64> %332, <8 x i64>* %333, align 64, !alias.scope !340, !noalias !345
  %334 = add i64 %325, 16
  %335 = add i64 %324, 16
  %336 = icmp ult i64 %335, %249
  br i1 %336, label %323, label %337

337:                                              ; preds = %323, %293, %287
  %338 = add nuw i64 %266, 1
  %339 = icmp eq i64 %338, %248
  br i1 %339, label %340, label %263

340:                                              ; preds = %337
  %341 = load i64, i64* %152, align 8, !noalias !359
  %342 = load i64, i64* %154, align 8, !noalias !359
  br label %343

343:                                              ; preds = %340, %247
  %344 = phi i64 [ %342, %340 ], [ %248, %247 ]
  %345 = phi i64 [ %341, %340 ], [ %249, %247 ]
  %346 = phi <8 x i64> [ %288, %340 ], [ %250, %247 ]
  %347 = phi <8 x i64> [ %289, %340 ], [ %251, %247 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %252) #10, !noalias !332
  %348 = bitcast <8 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %348) #10, !noalias !359
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %348, i8 -86, i64 64, i1 false) #10, !noalias !359
  %349 = icmp eq i64 %344, 0
  br i1 %349, label %436, label %350

350:                                              ; preds = %343
  %351 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %352 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %353 = load i8*, i8** %352, align 8, !alias.scope !359
  %354 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 4
  %355 = load i64, i64* %354, align 8, !alias.scope !359
  %356 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %357 = icmp ult i64 %345, 16
  %358 = bitcast <8 x i64>* %6 to i32*
  br label %359

359:                                              ; preds = %433, %350
  %360 = phi <8 x i64> [ %346, %350 ], [ %384, %433 ]
  %361 = phi <8 x i64> [ %347, %350 ], [ %385, %433 ]
  %362 = phi i64 [ 0, %350 ], [ %434, %433 ]
  %363 = load i64, i64* %351, align 8, !noalias !359
  %364 = add i64 %363, %362
  %365 = mul i64 %364, %355
  %366 = getelementptr inbounds i8, i8* %353, i64 %365
  %367 = ptrtoint i8* %366 to i64
  %368 = and i64 %367, 63
  %369 = icmp eq i64 %368, 0
  tail call void @llvm.assume(i1 %369) #10, !noalias !359
  %370 = bitcast i8* %366 to float*
  %371 = load i64, i64* %356, align 8, !noalias !359
  %372 = getelementptr inbounds float, float* %370, i64 %371
  %373 = add <8 x i64> %361, %360
  %374 = shl <8 x i64> %361, <i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23>
  %375 = xor <8 x i64> %374, %361
  store <8 x i64> %373, <8 x i64>* %6, align 64, !alias.scope !362, !noalias !359
  %376 = lshr <8 x i64> %375, <i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18>
  %377 = lshr <8 x i64> %360, <i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5>
  %378 = xor <8 x i64> %377, %360
  %379 = xor <8 x i64> %378, %375
  %380 = xor <8 x i64> %379, %376
  %381 = bitcast <8 x i64> %373 to <16 x i32>
  br i1 %357, label %383, label %397

382:                                              ; preds = %397
  store <8 x i64> %410, <8 x i64>* %6, align 64, !alias.scope !362, !noalias !359
  br label %383

383:                                              ; preds = %382, %359
  %384 = phi <8 x i64> [ %380, %359 ], [ %417, %382 ]
  %385 = phi <8 x i64> [ %360, %359 ], [ %398, %382 ]
  %386 = phi <16 x i32> [ %381, %359 ], [ %418, %382 ]
  %387 = phi i64 [ 0, %359 ], [ %401, %382 ]
  %388 = icmp ult i64 %387, %345
  br i1 %388, label %389, label %433

389:                                              ; preds = %383
  %390 = getelementptr inbounds float, float* %372, i64 %387
  %391 = lshr <16 x i32> %386, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %392 = bitcast <16 x i32> %391 to <8 x i64>
  %393 = or <8 x i64> %392, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %394 = bitcast float* %390 to <8 x i64>*
  store <8 x i64> %393, <8 x i64>* %394, align 64, !alias.scope !367, !noalias !372
  %395 = add i64 %387, 16
  %396 = icmp ult i64 %395, %345
  br i1 %396, label %419, label %433

397:                                              ; preds = %359, %397
  %398 = phi <8 x i64> [ %417, %397 ], [ %380, %359 ]
  %399 = phi <8 x i64> [ %398, %397 ], [ %360, %359 ]
  %400 = phi <16 x i32> [ %418, %397 ], [ %381, %359 ]
  %401 = phi i64 [ %408, %397 ], [ 16, %359 ]
  %402 = phi i64 [ %401, %397 ], [ 0, %359 ]
  %403 = getelementptr inbounds float, float* %372, i64 %402
  %404 = lshr <16 x i32> %400, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %405 = bitcast <16 x i32> %404 to <8 x i64>
  %406 = or <8 x i64> %405, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %407 = bitcast float* %403 to <8 x i64>*
  store <8 x i64> %406, <8 x i64>* %407, align 64, !alias.scope !374, !noalias !379
  %408 = add i64 %401, 16
  %409 = icmp ugt i64 %408, %345
  %410 = add <8 x i64> %399, %398
  %411 = shl <8 x i64> %399, <i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23, i64 23>
  %412 = xor <8 x i64> %411, %399
  %413 = lshr <8 x i64> %412, <i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18, i64 18>
  %414 = lshr <8 x i64> %398, <i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5, i64 5>
  %415 = xor <8 x i64> %414, %398
  %416 = xor <8 x i64> %415, %412
  %417 = xor <8 x i64> %416, %413
  %418 = bitcast <8 x i64> %410 to <16 x i32>
  br i1 %409, label %382, label %397

419:                                              ; preds = %389, %419
  %420 = phi i64 [ %431, %419 ], [ %395, %389 ]
  %421 = phi i64 [ %430, %419 ], [ 16, %389 ]
  %422 = getelementptr inbounds i32, i32* %358, i64 %421
  %423 = bitcast i32* %422 to <16 x i32>*
  %424 = load <16 x i32>, <16 x i32>* %423, align 64, !alias.scope !381, !noalias !384
  %425 = getelementptr inbounds float, float* %372, i64 %420
  %426 = lshr <16 x i32> %424, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %427 = bitcast <16 x i32> %426 to <8 x i64>
  %428 = or <8 x i64> %427, <i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152, i64 4575657222473777152>
  %429 = bitcast float* %425 to <8 x i64>*
  store <8 x i64> %428, <8 x i64>* %429, align 64, !alias.scope !367, !noalias !372
  %430 = add i64 %421, 16
  %431 = add i64 %420, 16
  %432 = icmp ult i64 %431, %345
  br i1 %432, label %419, label %433

433:                                              ; preds = %419, %389, %383
  %434 = add nuw i64 %362, 1
  %435 = icmp eq i64 %434, %344
  br i1 %435, label %436, label %359

436:                                              ; preds = %433, %343
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %348) #10, !noalias !359
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf(i32* noalias nocapture readonly, float* noalias nocapture) local_unnamed_addr #7 {
  %3 = load i32, i32* %0, align 4, !alias.scope !386
  %4 = lshr i32 %3, 9
  %5 = or i32 %4, 1065353216
  %6 = bitcast float* %1 to i32*
  store i32 %5, i32* %6, align 4, !alias.scope !389
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR8AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES6_RKNS_19ColorCorrelationMapEPS8_(%"struct.jxl::NoiseParams"* nocapture readonly dereferenceable(32), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* nocapture readonly dereferenceable(96), %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* nocapture readonly dereferenceable(104), %"class.jxl::Image3"* nocapture readonly) #8 {
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca %"class.jxl::N_SCALAR::StrengthEvalLut", align 4
  %10 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 0
  %11 = load float, float* %10, align 4
  %12 = tail call float @llvm.fabs.f32(float %11) #10
  %13 = fcmp ule float %12, 0x3F50624DE0000000
  br i1 %13, label %14, label %49

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = tail call float @llvm.fabs.f32(float %16) #10
  %18 = fcmp ule float %17, 0x3F50624DE0000000
  br i1 %18, label %19, label %49

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 2
  %21 = load float, float* %20, align 4
  %22 = tail call float @llvm.fabs.f32(float %21) #10
  %23 = fcmp ule float %22, 0x3F50624DE0000000
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 3
  %26 = load float, float* %25, align 4
  %27 = tail call float @llvm.fabs.f32(float %26) #10
  %28 = fcmp ule float %27, 0x3F50624DE0000000
  br i1 %28, label %29, label %49

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 4
  %31 = load float, float* %30, align 4
  %32 = tail call float @llvm.fabs.f32(float %31) #10
  %33 = fcmp ule float %32, 0x3F50624DE0000000
  br i1 %33, label %34, label %49

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 5
  %36 = load float, float* %35, align 4
  %37 = tail call float @llvm.fabs.f32(float %36) #10
  %38 = fcmp ule float %37, 0x3F50624DE0000000
  br i1 %38, label %39, label %49

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 6
  %41 = load float, float* %40, align 4
  %42 = tail call float @llvm.fabs.f32(float %41) #10
  %43 = fcmp ule float %42, 0x3F50624DE0000000
  br i1 %43, label %44, label %49

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %0, i64 0, i32 0, i64 7
  %46 = load float, float* %45, align 4
  %47 = tail call float @llvm.fabs.f32(float %46) #10
  %48 = fcmp ule float %47, 0x3F50624DE0000000
  br i1 %48, label %260, label %49

49:                                               ; preds = %6, %14, %19, %24, %29, %34, %39, %44
  %50 = bitcast %"class.jxl::N_SCALAR::StrengthEvalLut"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %50) #10
  %51 = bitcast %"struct.jxl::NoiseParams"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %51, i64 32, i1 false) #10
  %52 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 5
  %57 = load float, float* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 4
  %59 = load float, float* %58, align 4
  %60 = fmul float %59, 0.000000e+00
  %61 = fadd float %57, %60
  %62 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %4, i64 0, i32 6
  %63 = load float, float* %62, align 4
  %64 = fadd float %63, %60
  %65 = icmp eq i64 %55, 0
  br i1 %65, label %82, label %66

66:                                               ; preds = %49
  %67 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  %68 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %69 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  %71 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = icmp eq i64 %53, 0
  %80 = bitcast float* %7 to i8*
  %81 = bitcast float* %8 to i8*
  br label %83

82:                                               ; preds = %155, %49
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %50) #10
  br label %260

83:                                               ; preds = %155, %66
  %84 = phi i64 [ 0, %66 ], [ %156, %155 ]
  %85 = load i64, i64* %67, align 8
  %86 = add i64 %85, %84
  %87 = load i64, i64* %68, align 8
  %88 = mul i64 %87, %86
  %89 = load i8*, i8** %69, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = and i64 %90, 63
  %92 = icmp eq i64 %91, 0
  tail call void @llvm.assume(i1 %92) #10
  %93 = getelementptr inbounds i8, i8* %89, i64 %88
  %94 = ptrtoint i8* %93 to i64
  %95 = and i64 %94, 63
  %96 = icmp eq i64 %95, 0
  tail call void @llvm.assume(i1 %96) #10
  %97 = bitcast i8* %93 to float*
  %98 = load i64, i64* %70, align 8
  %99 = getelementptr inbounds float, float* %97, i64 %98
  %100 = load i8*, i8** %71, align 8
  %101 = ptrtoint i8* %100 to i64
  %102 = and i64 %101, 63
  %103 = icmp eq i64 %102, 0
  tail call void @llvm.assume(i1 %103) #10
  %104 = getelementptr inbounds i8, i8* %100, i64 %88
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #10
  %108 = bitcast i8* %104 to float*
  %109 = getelementptr inbounds float, float* %108, i64 %98
  %110 = load i8*, i8** %72, align 8
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #10
  %114 = getelementptr inbounds i8, i8* %110, i64 %88
  %115 = ptrtoint i8* %114 to i64
  %116 = and i64 %115, 63
  %117 = icmp eq i64 %116, 0
  tail call void @llvm.assume(i1 %117) #10
  %118 = bitcast i8* %114 to float*
  %119 = getelementptr inbounds float, float* %118, i64 %98
  %120 = load i64, i64* %73, align 8
  %121 = add i64 %120, %84
  %122 = load i64, i64* %74, align 8
  %123 = mul i64 %122, %121
  %124 = load i8*, i8** %75, align 8
  %125 = ptrtoint i8* %124 to i64
  %126 = and i64 %125, 63
  %127 = icmp eq i64 %126, 0
  tail call void @llvm.assume(i1 %127) #10
  %128 = getelementptr inbounds i8, i8* %124, i64 %123
  %129 = ptrtoint i8* %128 to i64
  %130 = and i64 %129, 63
  %131 = icmp eq i64 %130, 0
  tail call void @llvm.assume(i1 %131) #10
  %132 = bitcast i8* %128 to float*
  %133 = load i64, i64* %76, align 8
  %134 = getelementptr inbounds float, float* %132, i64 %133
  %135 = load i8*, i8** %77, align 8
  %136 = ptrtoint i8* %135 to i64
  %137 = and i64 %136, 63
  %138 = icmp eq i64 %137, 0
  tail call void @llvm.assume(i1 %138) #10
  %139 = getelementptr inbounds i8, i8* %135, i64 %123
  %140 = ptrtoint i8* %139 to i64
  %141 = and i64 %140, 63
  %142 = icmp eq i64 %141, 0
  tail call void @llvm.assume(i1 %142) #10
  %143 = bitcast i8* %139 to float*
  %144 = getelementptr inbounds float, float* %143, i64 %133
  %145 = load i8*, i8** %78, align 8
  %146 = ptrtoint i8* %145 to i64
  %147 = and i64 %146, 63
  %148 = icmp eq i64 %147, 0
  tail call void @llvm.assume(i1 %148) #10
  %149 = getelementptr inbounds i8, i8* %145, i64 %123
  %150 = ptrtoint i8* %149 to i64
  %151 = and i64 %150, 63
  %152 = icmp eq i64 %151, 0
  tail call void @llvm.assume(i1 %152) #10
  %153 = bitcast i8* %149 to float*
  %154 = getelementptr inbounds float, float* %153, i64 %133
  br i1 %79, label %155, label %158

155:                                              ; preds = %209, %83
  %156 = add nuw i64 %84, 1
  %157 = icmp eq i64 %156, %55
  br i1 %157, label %82, label %83

158:                                              ; preds = %83, %209
  %159 = phi i64 [ %258, %209 ], [ 0, %83 ]
  %160 = getelementptr inbounds float, float* %99, i64 %159
  %161 = load float, float* %160, align 4, !alias.scope !392
  %162 = getelementptr inbounds float, float* %109, i64 %159
  %163 = load float, float* %162, align 4, !alias.scope !395
  %164 = fsub float %163, %161
  %165 = fadd float %161, %163
  %166 = fmul float %164, 5.000000e-01
  %167 = fmul float %166, 6.000000e+00
  %168 = fcmp ogt float %167, 0.000000e+00
  %169 = select i1 %168, float %167, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %80) #10
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %170 = call float @modff(float %169, float* nonnull %7) #10
  %171 = fcmp ogt float %169, 6.000000e+00
  br i1 %171, label %177, label %172, !prof !14

172:                                              ; preds = %158
  %173 = load float, float* %7, align 4
  %174 = fptosi float %173 to i32
  %175 = zext i32 %174 to i64
  %176 = shl nuw i64 %175, 32
  br label %178

177:                                              ; preds = %158
  store float 6.000000e+00, float* %7, align 4
  br label %178

178:                                              ; preds = %172, %177
  %179 = phi i64 [ %176, %172 ], [ 25769803776, %177 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %80) #10
  %180 = ashr exact i64 %179, 32
  %181 = getelementptr inbounds %"class.jxl::N_SCALAR::StrengthEvalLut", %"class.jxl::N_SCALAR::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %180
  %182 = load float, float* %181, align 4
  %183 = add i64 %179, 4294967296
  %184 = ashr exact i64 %183, 32
  %185 = getelementptr inbounds %"class.jxl::N_SCALAR::StrengthEvalLut", %"class.jxl::N_SCALAR::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %184
  %186 = load float, float* %185, align 4
  %187 = fsub float 1.000000e+00, %170
  %188 = fmul float %187, %182
  %189 = fmul float %170, %186
  %190 = fadd float %188, %189
  %191 = fcmp uno float %190, 0.000000e+00
  %192 = fcmp olt float %190, 1.000000e+00
  %193 = select i1 %192, float %190, float 1.000000e+00
  %194 = select i1 %191, float 1.000000e+00, float %193
  %195 = fcmp olt float %194, 0.000000e+00
  %196 = select i1 %195, float 0.000000e+00, float %194
  %197 = fmul float %165, 5.000000e-01
  %198 = fmul float %197, 6.000000e+00
  %199 = fcmp ogt float %198, 0.000000e+00
  %200 = select i1 %199, float %198, float 0.000000e+00
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #10
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %201 = call float @modff(float %200, float* nonnull %8) #10
  %202 = fcmp ogt float %200, 6.000000e+00
  br i1 %202, label %208, label %203, !prof !14

203:                                              ; preds = %178
  %204 = load float, float* %8, align 4
  %205 = fptosi float %204 to i32
  %206 = zext i32 %205 to i64
  %207 = shl nuw i64 %206, 32
  br label %209

208:                                              ; preds = %178
  store float 6.000000e+00, float* %8, align 4
  br label %209

209:                                              ; preds = %203, %208
  %210 = phi i64 [ %207, %203 ], [ 25769803776, %208 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #10
  %211 = ashr exact i64 %210, 32
  %212 = getelementptr inbounds %"class.jxl::N_SCALAR::StrengthEvalLut", %"class.jxl::N_SCALAR::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %211
  %213 = load float, float* %212, align 4
  %214 = add i64 %210, 4294967296
  %215 = ashr exact i64 %214, 32
  %216 = getelementptr inbounds %"class.jxl::N_SCALAR::StrengthEvalLut", %"class.jxl::N_SCALAR::StrengthEvalLut"* %9, i64 0, i32 0, i32 0, i64 %215
  %217 = load float, float* %216, align 4
  %218 = fsub float 1.000000e+00, %201
  %219 = fmul float %218, %213
  %220 = fmul float %201, %217
  %221 = fadd float %219, %220
  %222 = fcmp uno float %221, 0.000000e+00
  %223 = fcmp olt float %221, 1.000000e+00
  %224 = select i1 %223, float %221, float 1.000000e+00
  %225 = select i1 %222, float 1.000000e+00, float %224
  %226 = fcmp olt float %225, 0.000000e+00
  %227 = select i1 %226, float 0.000000e+00, float %225
  %228 = getelementptr inbounds float, float* %134, i64 %159
  %229 = load float, float* %228, align 4, !alias.scope !398
  %230 = fmul float %229, 0x3FCC28F5C0000000
  %231 = getelementptr inbounds float, float* %144, i64 %159
  %232 = load float, float* %231, align 4, !alias.scope !401
  %233 = fmul float %232, 0x3FCC28F5C0000000
  %234 = getelementptr inbounds float, float* %154, i64 %159
  %235 = load float, float* %234, align 4, !alias.scope !404
  %236 = fmul float %235, 0x3FCC28F5C0000000
  %237 = getelementptr inbounds float, float* %119, i64 %159
  %238 = fmul float %230, 7.812500e-03
  %239 = fmul float %238, %227
  %240 = fmul float %236, 0x3FEFC00000000000
  %241 = fmul float %240, %227
  %242 = fadd float %239, %241
  %243 = fmul float %233, 7.812500e-03
  %244 = fmul float %196, %243
  %245 = fmul float %196, %240
  %246 = fadd float %244, %245
  %247 = load float, float* %160, align 4, !alias.scope !407, !noalias !412
  %248 = load float, float* %162, align 4, !alias.scope !415, !noalias !418
  %249 = load float, float* %237, align 4, !alias.scope !419, !noalias !422
  %250 = fsub float %242, %246
  %251 = fadd float %246, %242
  %252 = fmul float %61, %251
  %253 = fadd float %250, %252
  %254 = fadd float %247, %253
  %255 = fadd float %248, %251
  %256 = fmul float %64, %251
  %257 = fadd float %249, %256
  store float %254, float* %160, align 4, !alias.scope !423, !noalias !412
  store float %255, float* %162, align 4, !alias.scope !426, !noalias !418
  store float %257, float* %237, align 4, !alias.scope !429, !noalias !422
  %258 = add nuw i64 %159, 1
  %259 = icmp eq i64 %258, %53
  br i1 %259, label %155, label %158

260:                                              ; preds = %44, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Image3"* noalias nocapture readonly) #8 {
  %4 = alloca %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", align 8
  %5 = bitcast %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 5
  %7 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 88, i1 false)
  %8 = add i64 %0, -7046029254386353131
  %9 = lshr i64 %8, 30
  %10 = xor i64 %9, %8
  %11 = mul i64 %10, -4658895280553007687
  %12 = lshr i64 %11, 27
  %13 = xor i64 %12, %11
  %14 = mul i64 %13, -7723592293110705685
  %15 = lshr i64 %14, 31
  %16 = xor i64 %15, %14
  %17 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 0
  store i64 %16, i64* %17, align 8
  %18 = lshr i64 %16, 30
  %19 = xor i64 %18, %16
  %20 = mul i64 %19, -4658895280553007687
  %21 = lshr i64 %20, 27
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, -7723592293110705685
  %24 = lshr i64 %23, 31
  %25 = xor i64 %24, %23
  %26 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 0
  store i64 %25, i64* %26, align 8
  %27 = lshr i64 %25, 30
  %28 = xor i64 %27, %25
  %29 = mul i64 %28, -4658895280553007687
  %30 = lshr i64 %29, 27
  %31 = xor i64 %30, %29
  %32 = mul i64 %31, -7723592293110705685
  %33 = lshr i64 %32, 31
  %34 = xor i64 %33, %32
  %35 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 1
  store i64 %34, i64* %35, align 8
  %36 = lshr i64 %34, 30
  %37 = xor i64 %36, %34
  %38 = mul i64 %37, -4658895280553007687
  %39 = lshr i64 %38, 27
  %40 = xor i64 %39, %38
  %41 = mul i64 %40, -7723592293110705685
  %42 = lshr i64 %41, 31
  %43 = xor i64 %42, %41
  %44 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 1
  store i64 %43, i64* %44, align 8
  %45 = lshr i64 %43, 30
  %46 = xor i64 %45, %43
  %47 = mul i64 %46, -4658895280553007687
  %48 = lshr i64 %47, 27
  %49 = xor i64 %48, %47
  %50 = mul i64 %49, -7723592293110705685
  %51 = lshr i64 %50, 31
  %52 = xor i64 %51, %50
  %53 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 2
  store i64 %52, i64* %53, align 8
  %54 = lshr i64 %52, 30
  %55 = xor i64 %54, %52
  %56 = mul i64 %55, -4658895280553007687
  %57 = lshr i64 %56, 27
  %58 = xor i64 %57, %56
  %59 = mul i64 %58, -7723592293110705685
  %60 = lshr i64 %59, 31
  %61 = xor i64 %60, %59
  %62 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 2
  store i64 %61, i64* %62, align 8
  %63 = lshr i64 %61, 30
  %64 = xor i64 %63, %61
  %65 = mul i64 %64, -4658895280553007687
  %66 = lshr i64 %65, 27
  %67 = xor i64 %66, %65
  %68 = mul i64 %67, -7723592293110705685
  %69 = lshr i64 %68, 31
  %70 = xor i64 %69, %68
  %71 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 3
  store i64 %70, i64* %71, align 8
  %72 = lshr i64 %70, 30
  %73 = xor i64 %72, %70
  %74 = mul i64 %73, -4658895280553007687
  %75 = lshr i64 %74, 27
  %76 = xor i64 %75, %74
  %77 = mul i64 %76, -7723592293110705685
  %78 = lshr i64 %77, 31
  %79 = xor i64 %78, %77
  %80 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 3
  store i64 %79, i64* %80, align 8
  %81 = lshr i64 %79, 30
  %82 = xor i64 %81, %79
  %83 = mul i64 %82, -4658895280553007687
  %84 = lshr i64 %83, 27
  %85 = xor i64 %84, %83
  %86 = mul i64 %85, -7723592293110705685
  %87 = lshr i64 %86, 31
  %88 = xor i64 %87, %86
  %89 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 4
  store i64 %88, i64* %89, align 8
  %90 = lshr i64 %88, 30
  %91 = xor i64 %90, %88
  %92 = mul i64 %91, -4658895280553007687
  %93 = lshr i64 %92, 27
  %94 = xor i64 %93, %92
  %95 = mul i64 %94, -7723592293110705685
  %96 = lshr i64 %95, 31
  %97 = xor i64 %96, %95
  %98 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 4
  store i64 %97, i64* %98, align 8
  %99 = lshr i64 %97, 30
  %100 = xor i64 %99, %97
  %101 = mul i64 %100, -4658895280553007687
  %102 = lshr i64 %101, 27
  %103 = xor i64 %102, %101
  %104 = mul i64 %103, -7723592293110705685
  %105 = lshr i64 %104, 31
  %106 = xor i64 %105, %104
  %107 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 5
  store i64 %106, i64* %107, align 8
  %108 = lshr i64 %106, 30
  %109 = xor i64 %108, %106
  %110 = mul i64 %109, -4658895280553007687
  %111 = lshr i64 %110, 27
  %112 = xor i64 %111, %110
  %113 = mul i64 %112, -7723592293110705685
  %114 = lshr i64 %113, 31
  %115 = xor i64 %114, %113
  %116 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 5
  store i64 %115, i64* %116, align 8
  %117 = lshr i64 %115, 30
  %118 = xor i64 %117, %115
  %119 = mul i64 %118, -4658895280553007687
  %120 = lshr i64 %119, 27
  %121 = xor i64 %120, %119
  %122 = mul i64 %121, -7723592293110705685
  %123 = lshr i64 %122, 31
  %124 = xor i64 %123, %122
  %125 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 6
  store i64 %124, i64* %125, align 8
  %126 = lshr i64 %124, 30
  %127 = xor i64 %126, %124
  %128 = mul i64 %127, -4658895280553007687
  %129 = lshr i64 %128, 27
  %130 = xor i64 %129, %128
  %131 = mul i64 %130, -7723592293110705685
  %132 = lshr i64 %131, 31
  %133 = xor i64 %132, %131
  %134 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 6
  store i64 %133, i64* %134, align 8
  %135 = lshr i64 %133, 30
  %136 = xor i64 %135, %133
  %137 = mul i64 %136, -4658895280553007687
  %138 = lshr i64 %137, 27
  %139 = xor i64 %138, %137
  %140 = mul i64 %139, -7723592293110705685
  %141 = lshr i64 %140, 31
  %142 = xor i64 %141, %140
  %143 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 0, i64 7
  store i64 %142, i64* %143, align 8
  %144 = lshr i64 %142, 30
  %145 = xor i64 %144, %142
  %146 = mul i64 %145, -4658895280553007687
  %147 = lshr i64 %146, 27
  %148 = xor i64 %147, %146
  %149 = mul i64 %148, -7723592293110705685
  %150 = lshr i64 %149, 31
  %151 = xor i64 %150, %149
  %152 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %4, i64 0, i32 1, i64 7
  store i64 %151, i64* %152, align 8
  %153 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 0
  call fastcc void @_ZN3jxl8N_SCALAR11RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* nonnull %4, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Plane"* %153)
  %154 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 1
  call fastcc void @_ZN3jxl8N_SCALAR11RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* nonnull %4, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Plane"* %154)
  %155 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %2, i64 0, i32 0, i64 2
  call fastcc void @_ZN3jxl8N_SCALAR11RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* nonnull %4, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Plane"* %155)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl8N_SCALAR11RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE(%"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* nocapture, %"class.jxl::Rect"* nocapture readonly dereferenceable(32), %"class.jxl::Plane"* noalias nocapture readonly) unnamed_addr #8 {
  %4 = alloca [8 x i64], align 16
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = bitcast [8 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %52, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 1
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 4
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %1, i64 0, i32 0
  %18 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 0
  %19 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 0
  %20 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 1, i64 0
  %21 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 1
  %22 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 1
  %23 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 2
  %24 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 1, i64 2
  %25 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 2
  %26 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 3
  %27 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 3
  %28 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 4
  %29 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 1, i64 4
  %30 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 4
  %31 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 5
  %32 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 5
  %33 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 6
  %34 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 1, i64 6
  %35 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 6
  %36 = getelementptr inbounds %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus", %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0, i64 0, i32 0, i64 7
  %37 = getelementptr inbounds [8 x i64], [8 x i64]* %4, i64 0, i64 7
  %38 = bitcast [8 x i64]* %4 to i32*
  %39 = getelementptr inbounds i32, i32* %38, i64 1
  %40 = bitcast %"class.jxl::N_SCALAR::(anonymous namespace)::Xorshift128Plus"* %0 to <2 x i64>*
  %41 = bitcast i64* %20 to <2 x i64>*
  %42 = bitcast i64* %20 to <2 x i64>*
  %43 = bitcast i64* %23 to <2 x i64>*
  %44 = bitcast i64* %24 to <2 x i64>*
  %45 = bitcast i64* %24 to <2 x i64>*
  %46 = bitcast i64* %28 to <2 x i64>*
  %47 = bitcast i64* %29 to <2 x i64>*
  %48 = bitcast i64* %29 to <2 x i64>*
  %49 = bitcast i64* %33 to <2 x i64>*
  %50 = bitcast i64* %34 to <2 x i64>*
  %51 = bitcast i64* %34 to <2 x i64>*
  br label %53

52:                                               ; preds = %278, %3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #10
  ret void

53:                                               ; preds = %278, %11
  %54 = phi i64 [ 0, %11 ], [ %279, %278 ]
  %55 = load i64, i64* %12, align 8
  %56 = add i64 %55, %54
  %57 = mul i64 %16, %56
  %58 = getelementptr inbounds i8, i8* %14, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = and i64 %59, 63
  %61 = icmp eq i64 %60, 0
  tail call void @llvm.assume(i1 %61) #10
  %62 = bitcast i8* %58 to float*
  %63 = load i64, i64* %17, align 8
  %64 = getelementptr inbounds float, float* %62, i64 %63
  br label %65

65:                                               ; preds = %205, %53
  %66 = phi i64 [ 0, %53 ], [ %67, %205 ]
  %67 = add i64 %66, 16
  %68 = icmp ugt i64 %67, %6
  %69 = load <2 x i64>, <2 x i64>* %40, align 8, !alias.scope !432, !noalias !435
  %70 = load <2 x i64>, <2 x i64>* %41, align 8, !alias.scope !438, !noalias !435
  %71 = extractelement <2 x i64> %70, i32 0
  %72 = extractelement <2 x i64> %69, i32 0
  %73 = add i64 %71, %72
  store i64 %71, i64* %19, align 8, !alias.scope !441, !noalias !435
  store i64 %73, i64* %18, align 16, !alias.scope !444
  %74 = extractelement <2 x i64> %70, i32 1
  %75 = extractelement <2 x i64> %69, i32 1
  %76 = add i64 %74, %75
  store i64 %74, i64* %21, align 8, !alias.scope !441, !noalias !435
  %77 = shl <2 x i64> %69, <i64 23, i64 23>
  %78 = xor <2 x i64> %77, %69
  %79 = lshr <2 x i64> %78, <i64 18, i64 18>
  %80 = lshr <2 x i64> %70, <i64 5, i64 5>
  %81 = xor <2 x i64> %80, %70
  %82 = xor <2 x i64> %81, %78
  %83 = xor <2 x i64> %82, %79
  store <2 x i64> %83, <2 x i64>* %42, align 8, !alias.scope !447, !noalias !435
  %84 = load <2 x i64>, <2 x i64>* %43, align 8, !alias.scope !432, !noalias !435
  %85 = load <2 x i64>, <2 x i64>* %44, align 8, !alias.scope !438, !noalias !435
  %86 = extractelement <2 x i64> %85, i32 0
  %87 = extractelement <2 x i64> %84, i32 0
  %88 = add i64 %86, %87
  store i64 %86, i64* %23, align 8, !alias.scope !441, !noalias !435
  %89 = extractelement <2 x i64> %85, i32 1
  %90 = extractelement <2 x i64> %84, i32 1
  %91 = add i64 %89, %90
  store i64 %89, i64* %26, align 8, !alias.scope !441, !noalias !435
  %92 = shl <2 x i64> %84, <i64 23, i64 23>
  %93 = xor <2 x i64> %92, %84
  %94 = lshr <2 x i64> %93, <i64 18, i64 18>
  %95 = lshr <2 x i64> %85, <i64 5, i64 5>
  %96 = xor <2 x i64> %95, %85
  %97 = xor <2 x i64> %96, %93
  %98 = xor <2 x i64> %97, %94
  store <2 x i64> %98, <2 x i64>* %45, align 8, !alias.scope !447, !noalias !435
  %99 = load <2 x i64>, <2 x i64>* %46, align 8, !alias.scope !432, !noalias !435
  %100 = load <2 x i64>, <2 x i64>* %47, align 8, !alias.scope !438, !noalias !435
  %101 = extractelement <2 x i64> %100, i32 0
  %102 = extractelement <2 x i64> %99, i32 0
  %103 = add i64 %101, %102
  store i64 %101, i64* %28, align 8, !alias.scope !441, !noalias !435
  %104 = extractelement <2 x i64> %100, i32 1
  %105 = extractelement <2 x i64> %99, i32 1
  %106 = add i64 %104, %105
  store i64 %104, i64* %31, align 8, !alias.scope !441, !noalias !435
  %107 = shl <2 x i64> %99, <i64 23, i64 23>
  %108 = xor <2 x i64> %107, %99
  %109 = lshr <2 x i64> %108, <i64 18, i64 18>
  %110 = lshr <2 x i64> %100, <i64 5, i64 5>
  %111 = xor <2 x i64> %110, %100
  %112 = xor <2 x i64> %111, %108
  %113 = xor <2 x i64> %112, %109
  store <2 x i64> %113, <2 x i64>* %48, align 8, !alias.scope !447, !noalias !435
  %114 = load <2 x i64>, <2 x i64>* %49, align 8, !alias.scope !432, !noalias !435
  %115 = load <2 x i64>, <2 x i64>* %50, align 8, !alias.scope !438, !noalias !435
  %116 = extractelement <2 x i64> %115, i32 0
  %117 = extractelement <2 x i64> %114, i32 0
  %118 = add i64 %116, %117
  store i64 %116, i64* %33, align 8, !alias.scope !441, !noalias !435
  %119 = extractelement <2 x i64> %115, i32 1
  %120 = extractelement <2 x i64> %114, i32 1
  %121 = add i64 %119, %120
  store i64 %119, i64* %36, align 8, !alias.scope !441, !noalias !435
  %122 = shl <2 x i64> %114, <i64 23, i64 23>
  %123 = xor <2 x i64> %122, %114
  %124 = lshr <2 x i64> %123, <i64 18, i64 18>
  %125 = lshr <2 x i64> %115, <i64 5, i64 5>
  %126 = xor <2 x i64> %125, %115
  %127 = xor <2 x i64> %126, %123
  %128 = xor <2 x i64> %127, %124
  store <2 x i64> %128, <2 x i64>* %51, align 8, !alias.scope !447, !noalias !435
  br i1 %68, label %129, label %205

129:                                              ; preds = %65
  store i64 %76, i64* %22, align 8, !alias.scope !444
  store i64 %88, i64* %25, align 16, !alias.scope !444
  store i64 %91, i64* %27, align 8, !alias.scope !444
  store i64 %103, i64* %30, align 16, !alias.scope !444
  store i64 %106, i64* %32, align 8, !alias.scope !444
  store i64 %118, i64* %35, align 16, !alias.scope !444
  store i64 %121, i64* %37, align 8, !alias.scope !444
  %130 = icmp ugt i64 %6, %66
  br i1 %130, label %131, label %278

131:                                              ; preds = %129
  %132 = sub i64 %6, %66
  %133 = icmp ult i64 %132, 8
  br i1 %133, label %134, label %137

134:                                              ; preds = %203, %131
  %135 = phi i64 [ 0, %131 ], [ %138, %203 ]
  %136 = phi i64 [ %66, %131 ], [ %139, %203 ]
  br label %266

137:                                              ; preds = %131
  %138 = and i64 %132, -8
  %139 = add i64 %66, %138
  %140 = add i64 %138, -8
  %141 = lshr exact i64 %140, 3
  %142 = add nuw nsw i64 %141, 1
  %143 = and i64 %142, 1
  %144 = icmp eq i64 %140, 0
  br i1 %144, label %184, label %145

145:                                              ; preds = %137
  %146 = sub nuw nsw i64 %142, %143
  br label %147

147:                                              ; preds = %147, %145
  %148 = phi i64 [ 0, %145 ], [ %181, %147 ]
  %149 = phi i64 [ %146, %145 ], [ %182, %147 ]
  %150 = add i64 %66, %148
  %151 = getelementptr inbounds i32, i32* %38, i64 %148
  %152 = getelementptr inbounds float, float* %64, i64 %150
  %153 = bitcast i32* %151 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 16, !alias.scope !450, !noalias !455
  %155 = getelementptr inbounds i32, i32* %151, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16, !alias.scope !450, !noalias !455
  %158 = lshr <4 x i32> %154, <i32 9, i32 9, i32 9, i32 9>
  %159 = lshr <4 x i32> %157, <i32 9, i32 9, i32 9, i32 9>
  %160 = or <4 x i32> %158, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %161 = or <4 x i32> %159, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %162 = bitcast float* %152 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %162, align 4, !alias.scope !457, !noalias !460
  %163 = getelementptr inbounds float, float* %152, i64 4
  %164 = bitcast float* %163 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %164, align 4, !alias.scope !457, !noalias !460
  %165 = or i64 %148, 8
  %166 = add i64 %66, %165
  %167 = getelementptr inbounds i32, i32* %38, i64 %165
  %168 = getelementptr inbounds float, float* %64, i64 %166
  %169 = bitcast i32* %167 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 16, !alias.scope !450, !noalias !455
  %171 = getelementptr inbounds i32, i32* %167, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 16, !alias.scope !450, !noalias !455
  %174 = lshr <4 x i32> %170, <i32 9, i32 9, i32 9, i32 9>
  %175 = lshr <4 x i32> %173, <i32 9, i32 9, i32 9, i32 9>
  %176 = or <4 x i32> %174, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %177 = or <4 x i32> %175, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %178 = bitcast float* %168 to <4 x i32>*
  store <4 x i32> %176, <4 x i32>* %178, align 4, !alias.scope !457, !noalias !460
  %179 = getelementptr inbounds float, float* %168, i64 4
  %180 = bitcast float* %179 to <4 x i32>*
  store <4 x i32> %177, <4 x i32>* %180, align 4, !alias.scope !457, !noalias !460
  %181 = add i64 %148, 16
  %182 = add i64 %149, -2
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %147, !llvm.loop !461

184:                                              ; preds = %147, %137
  %185 = phi i64 [ 0, %137 ], [ %181, %147 ]
  %186 = icmp eq i64 %143, 0
  br i1 %186, label %203, label %187

187:                                              ; preds = %184
  %188 = add i64 %66, %185
  %189 = getelementptr inbounds i32, i32* %38, i64 %185
  %190 = getelementptr inbounds float, float* %64, i64 %188
  %191 = bitcast i32* %189 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 16, !alias.scope !450, !noalias !455
  %193 = getelementptr inbounds i32, i32* %189, i64 4
  %194 = bitcast i32* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 16, !alias.scope !450, !noalias !455
  %196 = lshr <4 x i32> %192, <i32 9, i32 9, i32 9, i32 9>
  %197 = lshr <4 x i32> %195, <i32 9, i32 9, i32 9, i32 9>
  %198 = or <4 x i32> %196, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %199 = or <4 x i32> %197, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %200 = bitcast float* %190 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %200, align 4, !alias.scope !457, !noalias !460
  %201 = getelementptr inbounds float, float* %190, i64 4
  %202 = bitcast float* %201 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %202, align 4, !alias.scope !457, !noalias !460
  br label %203

203:                                              ; preds = %184, %187
  %204 = icmp eq i64 %132, %138
  br i1 %204, label %278, label %134

205:                                              ; preds = %65
  %206 = lshr i64 %121, 41
  %207 = trunc i64 %121 to i32
  %208 = lshr i64 %118, 41
  %209 = trunc i64 %118 to i32
  %210 = lshr i64 %106, 41
  %211 = trunc i64 %106 to i32
  %212 = lshr i64 %103, 41
  %213 = trunc i64 %103 to i32
  %214 = lshr i64 %91, 41
  %215 = trunc i64 %91 to i32
  %216 = lshr i64 %88, 41
  %217 = trunc i64 %88 to i32
  %218 = lshr i64 %76, 41
  %219 = trunc i64 %76 to i32
  %220 = trunc i64 %73 to i32
  %221 = getelementptr inbounds float, float* %64, i64 %66
  %222 = lshr i32 %220, 9
  %223 = load i32, i32* %39, align 4, !alias.scope !463, !noalias !468
  %224 = lshr i32 %223, 9
  %225 = lshr i32 %219, 9
  %226 = trunc i64 %218 to i32
  %227 = insertelement <4 x i32> undef, i32 %222, i32 0
  %228 = insertelement <4 x i32> %227, i32 %224, i32 1
  %229 = insertelement <4 x i32> %228, i32 %225, i32 2
  %230 = insertelement <4 x i32> %229, i32 %226, i32 3
  %231 = or <4 x i32> %230, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %232 = bitcast float* %221 to <4 x i32>*
  store <4 x i32> %231, <4 x i32>* %232, align 4, !alias.scope !470, !noalias !473
  %233 = getelementptr inbounds float, float* %221, i64 4
  %234 = lshr i32 %217, 9
  %235 = trunc i64 %216 to i32
  %236 = lshr i32 %215, 9
  %237 = trunc i64 %214 to i32
  %238 = insertelement <4 x i32> undef, i32 %234, i32 0
  %239 = insertelement <4 x i32> %238, i32 %235, i32 1
  %240 = insertelement <4 x i32> %239, i32 %236, i32 2
  %241 = insertelement <4 x i32> %240, i32 %237, i32 3
  %242 = or <4 x i32> %241, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %243 = bitcast float* %233 to <4 x i32>*
  store <4 x i32> %242, <4 x i32>* %243, align 4, !alias.scope !470, !noalias !473
  %244 = getelementptr inbounds float, float* %221, i64 8
  %245 = lshr i32 %213, 9
  %246 = trunc i64 %212 to i32
  %247 = lshr i32 %211, 9
  %248 = trunc i64 %210 to i32
  %249 = insertelement <4 x i32> undef, i32 %245, i32 0
  %250 = insertelement <4 x i32> %249, i32 %246, i32 1
  %251 = insertelement <4 x i32> %250, i32 %247, i32 2
  %252 = insertelement <4 x i32> %251, i32 %248, i32 3
  %253 = or <4 x i32> %252, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %254 = bitcast float* %244 to <4 x i32>*
  store <4 x i32> %253, <4 x i32>* %254, align 4, !alias.scope !470, !noalias !473
  %255 = getelementptr inbounds float, float* %221, i64 12
  %256 = lshr i32 %209, 9
  %257 = trunc i64 %208 to i32
  %258 = lshr i32 %207, 9
  %259 = trunc i64 %206 to i32
  %260 = insertelement <4 x i32> undef, i32 %256, i32 0
  %261 = insertelement <4 x i32> %260, i32 %257, i32 1
  %262 = insertelement <4 x i32> %261, i32 %258, i32 2
  %263 = insertelement <4 x i32> %262, i32 %259, i32 3
  %264 = or <4 x i32> %263, <i32 1065353216, i32 1065353216, i32 1065353216, i32 1065353216>
  %265 = bitcast float* %255 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %265, align 4, !alias.scope !470, !noalias !473
  br label %65

266:                                              ; preds = %134, %266
  %267 = phi i64 [ %275, %266 ], [ %135, %134 ]
  %268 = phi i64 [ %276, %266 ], [ %136, %134 ]
  %269 = getelementptr inbounds i32, i32* %38, i64 %267
  %270 = getelementptr inbounds float, float* %64, i64 %268
  %271 = load i32, i32* %269, align 4, !alias.scope !450, !noalias !455
  %272 = lshr i32 %271, 9
  %273 = or i32 %272, 1065353216
  %274 = bitcast float* %270 to i32*
  store i32 %273, i32* %274, align 4, !alias.scope !457, !noalias !460
  %275 = add nuw i64 %267, 1
  %276 = add nuw i64 %268, 1
  %277 = icmp eq i64 %275, %132
  br i1 %277, label %278, label %266, !llvm.loop !474

278:                                              ; preds = %266, %203, %129
  %279 = add nuw i64 %54, 1
  %280 = icmp eq i64 %279, %8
  br i1 %280, label %52, label %53
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8AddNoiseERKNS_11NoiseParamsERKNS_4RectERKNS_6Image3IfEES5_RKNS_19ColorCorrelationMapEPS7_(%"struct.jxl::NoiseParams"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104), %"class.jxl::Image3"*) local_unnamed_addr #8 {
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %8 = and i32 %7, 2225
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #10, !range !476
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [12 x void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*], [12 x void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*]* @_ZN3jxlL28AddNoiseHighwayDispatchTableE, i64 0, i64 %10
  %12 = load void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)** %11, align 8
  tail call void %12(%"struct.jxl::NoiseParams"* dereferenceable(32) %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %4, %"class.jxl::Image3"* %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12RandomImage3EmRKNS_4RectEPNS_6Image3IfEE(i64, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #8 {
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #10, !range !476
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*], [12 x void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*]* @_ZN3jxlL32RandomImage3HighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)** %8, align 8
  tail call void %9(i64 %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Image3"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16DecodeFloatParamEfPfPNS_9BitReaderE(float, float* nocapture, %"class.jxl::BitReader"*) local_unnamed_addr #8 {
  %4 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %5, %7
  br i1 %8, label %9, label %14, !prof !14

9:                                                ; preds = %3
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %2) #10
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %27

14:                                               ; preds = %3
  %15 = bitcast i8* %5 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = shl i64 %16, %18
  %20 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = or i64 %21, %19
  store i64 %22, i64* %20, align 8
  %23 = sub i64 63, %18
  %24 = lshr i64 %23, 3
  %25 = getelementptr inbounds i8, i8* %5, i64 %24
  store i8* %25, i8** %4, align 8
  %26 = or i64 %18, 56
  store i64 %26, i64* %17, align 8
  br label %27

27:                                               ; preds = %9, %14
  %28 = phi i64 [ %13, %9 ], [ %26, %14 ]
  %29 = phi i64 [ %11, %9 ], [ %22, %14 ]
  %30 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %2, i64 0, i32 1
  %32 = add i64 %28, -10
  store i64 %32, i64* %31, align 8
  %33 = lshr i64 %29, 10
  store i64 %33, i64* %30, align 8
  %34 = trunc i64 %29 to i32
  %35 = and i32 %34, 1023
  %36 = sitofp i32 %35 to float
  %37 = fdiv float %36, %0
  store float %37, float* %1, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11DecodeNoiseEPNS_9BitReaderEPNS_11NoiseParamsE(%"class.jxl::BitReader"*, %"struct.jxl::NoiseParams"*) local_unnamed_addr #8 {
  %3 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 0
  %4 = getelementptr inbounds %"struct.jxl::NoiseParams", %"struct.jxl::NoiseParams"* %1, i64 0, i32 0, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  br label %10

9:                                                ; preds = %29
  ret i32 0

10:                                               ; preds = %2, %29
  %11 = phi float* [ %3, %2 ], [ %38, %29 ]
  %12 = load i8*, i8** %5, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = icmp ugt i8* %12, %13
  br i1 %14, label %15, label %18, !prof !14

15:                                               ; preds = %10
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %0) #10
  %16 = load i64, i64* %8, align 8
  %17 = load i64, i64* %7, align 8
  br label %29

18:                                               ; preds = %10
  %19 = bitcast i8* %12 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = load i64, i64* %7, align 8
  %22 = shl i64 %20, %21
  %23 = load i64, i64* %8, align 8
  %24 = or i64 %23, %22
  store i64 %24, i64* %8, align 8
  %25 = sub i64 63, %21
  %26 = lshr i64 %25, 3
  %27 = getelementptr inbounds i8, i8* %12, i64 %26
  store i8* %27, i8** %5, align 8
  %28 = or i64 %21, 56
  store i64 %28, i64* %7, align 8
  br label %29

29:                                               ; preds = %15, %18
  %30 = phi i64 [ %17, %15 ], [ %28, %18 ]
  %31 = phi i64 [ %16, %15 ], [ %24, %18 ]
  %32 = add i64 %30, -10
  store i64 %32, i64* %7, align 8
  %33 = lshr i64 %31, 10
  store i64 %33, i64* %8, align 8
  %34 = trunc i64 %31 to i32
  %35 = and i32 %34, 1023
  %36 = sitofp i32 %35 to float
  %37 = fmul float %36, 0x3F50000000000000
  store float %37, float* %11, align 4
  %38 = getelementptr inbounds float, float* %11, i64 1
  %39 = icmp eq float* %38, %4
  br i1 %39, label %9, label %10
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind
declare void @llvm.assume(i1) #10

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl11NoiseParamsERKNS1_4RectERKNS1_6Image3IfEES7_RKNS1_19ColorCorrelationMapEPS9_EE13ChooseAndCallIXadL_ZNS1_L28AddNoiseHighwayDispatchTableEEEEEvS4_S7_SB_S7_SE_SF_(%"struct.jxl::NoiseParams"* dereferenceable(32), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::ColorCorrelationMap"* dereferenceable(104), %"class.jxl::Image3"*) #8 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #10
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %8 = and i32 %7, 2225
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #10, !range !476
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [12 x void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*], [12 x void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*]* @_ZN3jxlL28AddNoiseHighwayDispatchTableE, i64 0, i64 %10
  %12 = load void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)*, void (%"struct.jxl::NoiseParams"*, %"class.jxl::Rect"*, %"class.jxl::Image3"*, %"class.jxl::Rect"*, %"struct.jxl::ColorCorrelationMap"*, %"class.jxl::Image3"*)** %11, align 8
  tail call void %12(%"struct.jxl::NoiseParams"* dereferenceable(32) %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::Rect"* dereferenceable(32) %3, %"struct.jxl::ColorCorrelationMap"* dereferenceable(104) %4, %"class.jxl::Image3"* %5) #10
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #9

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJmRKN3jxl4RectEPNS1_6Image3IfEEEE13ChooseAndCallIXadL_ZNS1_L32RandomImage3HighwayDispatchTableEEEEEvmS4_S7_(i64, %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"*) #8 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #10
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #10, !range !476
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*], [12 x void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*]* @_ZN3jxlL32RandomImage3HighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)*, void (i64, %"class.jxl::Rect"*, %"class.jxl::Image3"*)** %8, align 8
  tail call void %9(i64 %0, %"class.jxl::Rect"* dereferenceable(32) %1, %"class.jxl::Image3"* %2) #10
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #12

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse41.blendvps(<4 x float>, <4 x float>, <4 x float>) #12

; Function Attrs: nofree nounwind
declare float @modff(float, float* nocapture) local_unnamed_addr #13

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #14 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!14 = !{!"branch_weights", i32 1, i32 2000}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!17 = distinct !{!17, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!20 = distinct !{!20, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!23 = distinct !{!23, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!24 = !{!25, !27}
!25 = distinct !{!25, !26, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!26 = distinct !{!26, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!27 = distinct !{!27, !28, !"_ZN3jxl6N_SSE413AddNoiseToRGBIN3hwy6N_SSE44SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 0"}
!28 = distinct !{!28, !"_ZN3jxl6N_SSE413AddNoiseToRGBIN3hwy6N_SSE44SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_"}
!29 = !{!30, !31}
!30 = distinct !{!30, !28, !"_ZN3jxl6N_SSE413AddNoiseToRGBIN3hwy6N_SSE44SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 1"}
!31 = distinct !{!31, !28, !"_ZN3jxl6N_SSE413AddNoiseToRGBIN3hwy6N_SSE44SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 2"}
!32 = !{!33, !30}
!33 = distinct !{!33, !34, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!34 = distinct !{!34, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!35 = !{!27, !31}
!36 = !{!37, !31}
!37 = distinct !{!37, !38, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!38 = distinct !{!38, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm1EEEPKf"}
!39 = !{!27, !30}
!40 = !{!41, !27}
!41 = distinct !{!41, !42, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!42 = distinct !{!42, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!43 = !{!44, !30}
!44 = distinct !{!44, !45, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!45 = distinct !{!45, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!46 = !{!47, !31}
!47 = distinct !{!47, !48, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!48 = distinct !{!48, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN3jxl6N_SSE411RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!51 = distinct !{!51, !"_ZN3jxl6N_SSE411RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!52 = !{!53, !55}
!53 = distinct !{!53, !54, !"_ZN3hwy6N_SSE4L5StoreImEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!54 = distinct !{!54, !"_ZN3hwy6N_SSE4L5StoreImEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!55 = distinct !{!55, !56, !"_ZN3jxl6N_SSE412_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!56 = distinct !{!56, !"_ZN3jxl6N_SSE412_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!57 = !{!58, !60}
!58 = distinct !{!58, !59, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!59 = distinct !{!59, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!60 = distinct !{!60, !61, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 1"}
!61 = distinct !{!61, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf"}
!62 = !{!63, !50}
!63 = distinct !{!63, !61, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 0"}
!64 = !{!65, !67}
!65 = distinct !{!65, !66, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!66 = distinct !{!66, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!67 = distinct !{!67, !68, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 1"}
!68 = distinct !{!68, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf"}
!69 = !{!70, !50}
!70 = distinct !{!70, !68, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 0"}
!71 = !{!72, !63}
!72 = distinct !{!72, !73, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!73 = distinct !{!73, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!74 = !{!60, !50}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN3jxl6N_SSE411RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!77 = distinct !{!77, !"_ZN3jxl6N_SSE411RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!78 = !{!79, !81}
!79 = distinct !{!79, !80, !"_ZN3hwy6N_SSE4L5StoreImEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!80 = distinct !{!80, !"_ZN3hwy6N_SSE4L5StoreImEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!81 = distinct !{!81, !82, !"_ZN3jxl6N_SSE412_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!82 = distinct !{!82, !"_ZN3jxl6N_SSE412_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!83 = !{!84, !86}
!84 = distinct !{!84, !85, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!85 = distinct !{!85, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!86 = distinct !{!86, !87, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 1"}
!87 = distinct !{!87, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf"}
!88 = !{!89, !76}
!89 = distinct !{!89, !87, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 0"}
!90 = !{!91, !93}
!91 = distinct !{!91, !92, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!92 = distinct !{!92, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!93 = distinct !{!93, !94, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 1"}
!94 = distinct !{!94, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf"}
!95 = !{!96, !76}
!96 = distinct !{!96, !94, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 0"}
!97 = !{!98, !89}
!98 = distinct !{!98, !99, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!99 = distinct !{!99, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!100 = !{!86, !76}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN3jxl6N_SSE411RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!103 = distinct !{!103, !"_ZN3jxl6N_SSE411RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!104 = !{!105, !107}
!105 = distinct !{!105, !106, !"_ZN3hwy6N_SSE4L5StoreImEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!106 = distinct !{!106, !"_ZN3hwy6N_SSE4L5StoreImEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!107 = distinct !{!107, !108, !"_ZN3jxl6N_SSE412_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!108 = distinct !{!108, !"_ZN3jxl6N_SSE412_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!109 = !{!110, !112}
!110 = distinct !{!110, !111, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!111 = distinct !{!111, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!112 = distinct !{!112, !113, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 1"}
!113 = distinct !{!113, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf"}
!114 = !{!115, !102}
!115 = distinct !{!115, !113, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 0"}
!116 = !{!117, !119}
!117 = distinct !{!117, !118, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!118 = distinct !{!118, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!119 = distinct !{!119, !120, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 1"}
!120 = distinct !{!120, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf"}
!121 = !{!122, !102}
!122 = distinct !{!122, !120, !"_ZN3jxl6N_SSE411BitsToFloatEPKjPf: argument 0"}
!123 = !{!124, !115}
!124 = distinct !{!124, !125, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!125 = distinct !{!125, !"_ZN3hwy6N_SSE4L4LoadIjEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!126 = !{!112, !102}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!129 = distinct !{!129, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!130 = !{!131}
!131 = distinct !{!131, !129, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!132 = !{!133}
!133 = distinct !{!133, !134, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!134 = distinct !{!134, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!135 = !{!136}
!136 = distinct !{!136, !137, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!137 = distinct !{!137, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!138 = !{!139}
!139 = distinct !{!139, !140, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!140 = distinct !{!140, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!141 = !{!142}
!142 = distinct !{!142, !143, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!143 = distinct !{!143, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!144 = !{!145}
!145 = distinct !{!145, !146, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!146 = distinct !{!146, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!147 = !{!148}
!148 = distinct !{!148, !149, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!149 = distinct !{!149, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!150 = !{!151, !153}
!151 = distinct !{!151, !152, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!152 = distinct !{!152, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!153 = distinct !{!153, !154, !"_ZN3jxl6N_AVX213AddNoiseToRGBIN3hwy6N_AVX24SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 0"}
!154 = distinct !{!154, !"_ZN3jxl6N_AVX213AddNoiseToRGBIN3hwy6N_AVX24SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_"}
!155 = !{!156, !157}
!156 = distinct !{!156, !154, !"_ZN3jxl6N_AVX213AddNoiseToRGBIN3hwy6N_AVX24SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 1"}
!157 = distinct !{!157, !154, !"_ZN3jxl6N_AVX213AddNoiseToRGBIN3hwy6N_AVX24SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 2"}
!158 = !{!159, !156}
!159 = distinct !{!159, !160, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!160 = distinct !{!160, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!161 = !{!153, !157}
!162 = !{!163, !157}
!163 = distinct !{!163, !164, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!164 = distinct !{!164, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm1EEEPKf"}
!165 = !{!153, !156}
!166 = !{!167, !153}
!167 = distinct !{!167, !168, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!168 = distinct !{!168, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!169 = !{!170, !156}
!170 = distinct !{!170, !171, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!171 = distinct !{!171, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!172 = !{!173, !157}
!173 = distinct !{!173, !174, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!174 = distinct !{!174, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!175 = !{!176}
!176 = distinct !{!176, !177, !"_ZN3jxl6N_AVX211RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!177 = distinct !{!177, !"_ZN3jxl6N_AVX211RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!178 = !{!179, !181}
!179 = distinct !{!179, !180, !"_ZN3hwy6N_AVX2L5StoreImEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!180 = distinct !{!180, !"_ZN3hwy6N_AVX2L5StoreImEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!181 = distinct !{!181, !182, !"_ZN3jxl6N_AVX212_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!182 = distinct !{!182, !"_ZN3jxl6N_AVX212_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!183 = !{!184, !186}
!184 = distinct !{!184, !185, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!185 = distinct !{!185, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!186 = distinct !{!186, !187, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 1"}
!187 = distinct !{!187, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf"}
!188 = !{!189, !176}
!189 = distinct !{!189, !187, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 0"}
!190 = !{!191, !193}
!191 = distinct !{!191, !192, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!192 = distinct !{!192, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!193 = distinct !{!193, !194, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 1"}
!194 = distinct !{!194, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf"}
!195 = !{!196, !176}
!196 = distinct !{!196, !194, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 0"}
!197 = !{!198, !189}
!198 = distinct !{!198, !199, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!199 = distinct !{!199, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!200 = !{!201, !186, !176}
!201 = distinct !{!201, !199, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!202 = !{!203}
!203 = distinct !{!203, !204, !"_ZN3jxl6N_AVX211RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!204 = distinct !{!204, !"_ZN3jxl6N_AVX211RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!205 = !{!206, !208}
!206 = distinct !{!206, !207, !"_ZN3hwy6N_AVX2L5StoreImEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!207 = distinct !{!207, !"_ZN3hwy6N_AVX2L5StoreImEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!208 = distinct !{!208, !209, !"_ZN3jxl6N_AVX212_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!209 = distinct !{!209, !"_ZN3jxl6N_AVX212_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!210 = !{!211, !213}
!211 = distinct !{!211, !212, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!212 = distinct !{!212, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!213 = distinct !{!213, !214, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 1"}
!214 = distinct !{!214, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf"}
!215 = !{!216, !203}
!216 = distinct !{!216, !214, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 0"}
!217 = !{!218, !220}
!218 = distinct !{!218, !219, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!219 = distinct !{!219, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!220 = distinct !{!220, !221, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 1"}
!221 = distinct !{!221, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf"}
!222 = !{!223, !203}
!223 = distinct !{!223, !221, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 0"}
!224 = !{!225, !216}
!225 = distinct !{!225, !226, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!226 = distinct !{!226, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!227 = !{!228, !213, !203}
!228 = distinct !{!228, !226, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!229 = !{!230}
!230 = distinct !{!230, !231, !"_ZN3jxl6N_AVX211RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!231 = distinct !{!231, !"_ZN3jxl6N_AVX211RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!232 = !{!233, !235}
!233 = distinct !{!233, !234, !"_ZN3hwy6N_AVX2L5StoreImEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!234 = distinct !{!234, !"_ZN3hwy6N_AVX2L5StoreImEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!235 = distinct !{!235, !236, !"_ZN3jxl6N_AVX212_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!236 = distinct !{!236, !"_ZN3jxl6N_AVX212_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!237 = !{!238, !240}
!238 = distinct !{!238, !239, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!239 = distinct !{!239, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!240 = distinct !{!240, !241, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 1"}
!241 = distinct !{!241, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf"}
!242 = !{!243, !230}
!243 = distinct !{!243, !241, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 0"}
!244 = !{!245, !247}
!245 = distinct !{!245, !246, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!246 = distinct !{!246, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!247 = distinct !{!247, !248, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 1"}
!248 = distinct !{!248, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf"}
!249 = !{!250, !230}
!250 = distinct !{!250, !248, !"_ZN3jxl6N_AVX211BitsToFloatEPKjPf: argument 0"}
!251 = !{!252, !243}
!252 = distinct !{!252, !253, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!253 = distinct !{!253, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!254 = !{!255, !240, !230}
!255 = distinct !{!255, !253, !"_ZN3hwy6N_AVX2L4LoadIjEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!258 = distinct !{!258, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!259 = !{!260}
!260 = distinct !{!260, !258, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!261 = !{!262}
!262 = distinct !{!262, !263, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!263 = distinct !{!263, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!264 = !{!265}
!265 = distinct !{!265, !266, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!266 = distinct !{!266, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!267 = !{!268}
!268 = distinct !{!268, !269, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!269 = distinct !{!269, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!270 = !{!271}
!271 = distinct !{!271, !272, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!272 = distinct !{!272, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!273 = !{!274}
!274 = distinct !{!274, !275, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!275 = distinct !{!275, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!276 = !{!277}
!277 = distinct !{!277, !278, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!278 = distinct !{!278, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!279 = !{!280, !282}
!280 = distinct !{!280, !281, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!281 = distinct !{!281, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!282 = distinct !{!282, !283, !"_ZN3jxl6N_AVX313AddNoiseToRGBIN3hwy6N_AVX34SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 0"}
!283 = distinct !{!283, !"_ZN3jxl6N_AVX313AddNoiseToRGBIN3hwy6N_AVX34SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_"}
!284 = !{!285, !286}
!285 = distinct !{!285, !283, !"_ZN3jxl6N_AVX313AddNoiseToRGBIN3hwy6N_AVX34SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 1"}
!286 = distinct !{!286, !283, !"_ZN3jxl6N_AVX313AddNoiseToRGBIN3hwy6N_AVX34SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 2"}
!287 = !{!288, !285}
!288 = distinct !{!288, !289, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!289 = distinct !{!289, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!290 = !{!282, !286}
!291 = !{!292, !286}
!292 = distinct !{!292, !293, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf: argument 0"}
!293 = distinct !{!293, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm1EEEPKf"}
!294 = !{!282, !285}
!295 = !{!296, !282}
!296 = distinct !{!296, !297, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!297 = distinct !{!297, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!298 = !{!299, !285}
!299 = distinct !{!299, !300, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!300 = distinct !{!300, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!301 = !{!302, !286}
!302 = distinct !{!302, !303, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf: argument 0"}
!303 = distinct !{!303, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec128IfLm1EEENS0_4SimdIfLm1EEEPf"}
!304 = !{!305}
!305 = distinct !{!305, !306, !"_ZN3jxl6N_AVX311RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!306 = distinct !{!306, !"_ZN3jxl6N_AVX311RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!307 = !{}
!308 = !{!309, !311}
!309 = distinct !{!309, !310, !"_ZN3hwy6N_AVX3L5StoreImEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!310 = distinct !{!310, !"_ZN3hwy6N_AVX3L5StoreImEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!311 = distinct !{!311, !312, !"_ZN3jxl6N_AVX312_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!312 = distinct !{!312, !"_ZN3jxl6N_AVX312_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!313 = !{!314, !316}
!314 = distinct !{!314, !315, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!315 = distinct !{!315, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!316 = distinct !{!316, !317, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 1"}
!317 = distinct !{!317, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf"}
!318 = !{!319, !305}
!319 = distinct !{!319, !317, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 0"}
!320 = !{!321, !323}
!321 = distinct !{!321, !322, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!322 = distinct !{!322, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!323 = distinct !{!323, !324, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 1"}
!324 = distinct !{!324, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf"}
!325 = !{!326, !305}
!326 = distinct !{!326, !324, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 0"}
!327 = !{!328, !319}
!328 = distinct !{!328, !329, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!329 = distinct !{!329, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!330 = !{!331, !316, !305}
!331 = distinct !{!331, !329, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!332 = !{!333}
!333 = distinct !{!333, !334, !"_ZN3jxl6N_AVX311RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!334 = distinct !{!334, !"_ZN3jxl6N_AVX311RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!335 = !{!336, !338}
!336 = distinct !{!336, !337, !"_ZN3hwy6N_AVX3L5StoreImEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!337 = distinct !{!337, !"_ZN3hwy6N_AVX3L5StoreImEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!338 = distinct !{!338, !339, !"_ZN3jxl6N_AVX312_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!339 = distinct !{!339, !"_ZN3jxl6N_AVX312_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!340 = !{!341, !343}
!341 = distinct !{!341, !342, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!342 = distinct !{!342, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!343 = distinct !{!343, !344, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 1"}
!344 = distinct !{!344, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf"}
!345 = !{!346, !333}
!346 = distinct !{!346, !344, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 0"}
!347 = !{!348, !350}
!348 = distinct !{!348, !349, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!349 = distinct !{!349, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!350 = distinct !{!350, !351, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 1"}
!351 = distinct !{!351, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf"}
!352 = !{!353, !333}
!353 = distinct !{!353, !351, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 0"}
!354 = !{!355, !346}
!355 = distinct !{!355, !356, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!356 = distinct !{!356, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!357 = !{!358, !343, !333}
!358 = distinct !{!358, !356, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!359 = !{!360}
!360 = distinct !{!360, !361, !"_ZN3jxl6N_AVX311RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE: argument 0"}
!361 = distinct !{!361, !"_ZN3jxl6N_AVX311RandomImageEPNS0_12_GLOBAL__N_115Xorshift128PlusERKNS_4RectEPNS_5PlaneIfEE"}
!362 = !{!363, !365}
!363 = distinct !{!363, !364, !"_ZN3hwy6N_AVX3L5StoreImEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!364 = distinct !{!364, !"_ZN3hwy6N_AVX3L5StoreImEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!365 = distinct !{!365, !366, !"_ZN3jxl6N_AVX312_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!366 = distinct !{!366, !"_ZN3jxl6N_AVX312_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!367 = !{!368, !370}
!368 = distinct !{!368, !369, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!369 = distinct !{!369, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!370 = distinct !{!370, !371, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 1"}
!371 = distinct !{!371, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf"}
!372 = !{!373, !360}
!373 = distinct !{!373, !371, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 0"}
!374 = !{!375, !377}
!375 = distinct !{!375, !376, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!376 = distinct !{!376, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!377 = distinct !{!377, !378, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 1"}
!378 = distinct !{!378, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf"}
!379 = !{!380, !360}
!380 = distinct !{!380, !378, !"_ZN3jxl6N_AVX311BitsToFloatEPKjPf: argument 0"}
!381 = !{!382, !373}
!382 = distinct !{!382, !383, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!383 = distinct !{!383, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!384 = !{!385, !370, !360}
!385 = distinct !{!385, !383, !"_ZN3hwy6N_AVX3L4LoadIjEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!386 = !{!387}
!387 = distinct !{!387, !388, !"_ZN3hwy8N_SCALAR4LoadIjEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!388 = distinct !{!388, !"_ZN3hwy8N_SCALAR4LoadIjEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!389 = !{!390}
!390 = distinct !{!390, !391, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!391 = distinct !{!391, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!392 = !{!393}
!393 = distinct !{!393, !394, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!394 = distinct !{!394, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!395 = !{!396}
!396 = distinct !{!396, !397, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!397 = distinct !{!397, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!398 = !{!399}
!399 = distinct !{!399, !400, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!400 = distinct !{!400, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!401 = !{!402}
!402 = distinct !{!402, !403, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!403 = distinct !{!403, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!404 = !{!405}
!405 = distinct !{!405, !406, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!406 = distinct !{!406, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!407 = !{!408, !410}
!408 = distinct !{!408, !409, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!409 = distinct !{!409, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!410 = distinct !{!410, !411, !"_ZN3jxl8N_SCALAR13AddNoiseToRGBIN3hwy8N_SCALAR4SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 0"}
!411 = distinct !{!411, !"_ZN3jxl8N_SCALAR13AddNoiseToRGBIN3hwy8N_SCALAR4SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_"}
!412 = !{!413, !414}
!413 = distinct !{!413, !411, !"_ZN3jxl8N_SCALAR13AddNoiseToRGBIN3hwy8N_SCALAR4SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 1"}
!414 = distinct !{!414, !411, !"_ZN3jxl8N_SCALAR13AddNoiseToRGBIN3hwy8N_SCALAR4SimdIfLm1EEEEEvT_DTcl4ZerocvS6__EEES7_S7_S7_S7_ffPfS8_S8_: argument 2"}
!415 = !{!416, !413}
!416 = distinct !{!416, !417, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!417 = distinct !{!417, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!418 = !{!410, !414}
!419 = !{!420, !414}
!420 = distinct !{!420, !421, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!421 = distinct !{!421, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!422 = !{!410, !413}
!423 = !{!424, !410}
!424 = distinct !{!424, !425, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!425 = distinct !{!425, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!426 = !{!427, !413}
!427 = distinct !{!427, !428, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!428 = distinct !{!428, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!429 = !{!430, !414}
!430 = distinct !{!430, !431, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!431 = distinct !{!431, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!432 = !{!433}
!433 = distinct !{!433, !434, !"_ZN3hwy8N_SCALAR4LoadImEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!434 = distinct !{!434, !"_ZN3hwy8N_SCALAR4LoadImEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!435 = !{!436}
!436 = distinct !{!436, !437, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_115Xorshift128Plus4FillEPm: argument 0"}
!437 = distinct !{!437, !"_ZN3jxl8N_SCALAR12_GLOBAL__N_115Xorshift128Plus4FillEPm"}
!438 = !{!439}
!439 = distinct !{!439, !440, !"_ZN3hwy8N_SCALAR4LoadImEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!440 = distinct !{!440, !"_ZN3hwy8N_SCALAR4LoadImEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!441 = !{!442}
!442 = distinct !{!442, !443, !"_ZN3hwy8N_SCALAR5StoreImEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!443 = distinct !{!443, !"_ZN3hwy8N_SCALAR5StoreImEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!444 = !{!445, !436}
!445 = distinct !{!445, !446, !"_ZN3hwy8N_SCALAR5StoreImEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!446 = distinct !{!446, !"_ZN3hwy8N_SCALAR5StoreImEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!447 = !{!448}
!448 = distinct !{!448, !449, !"_ZN3hwy8N_SCALAR5StoreImEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!449 = distinct !{!449, !"_ZN3hwy8N_SCALAR5StoreImEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!450 = !{!451, !453}
!451 = distinct !{!451, !452, !"_ZN3hwy8N_SCALAR4LoadIjEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!452 = distinct !{!452, !"_ZN3hwy8N_SCALAR4LoadIjEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!453 = distinct !{!453, !454, !"_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf: argument 0"}
!454 = distinct !{!454, !"_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf"}
!455 = !{!456}
!456 = distinct !{!456, !454, !"_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf: argument 1"}
!457 = !{!458, !456}
!458 = distinct !{!458, !459, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!459 = distinct !{!459, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!460 = !{!453}
!461 = distinct !{!461, !462}
!462 = !{!"llvm.loop.isvectorized", i32 1}
!463 = !{!464, !466}
!464 = distinct !{!464, !465, !"_ZN3hwy8N_SCALAR4LoadIjEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!465 = distinct !{!465, !"_ZN3hwy8N_SCALAR4LoadIjEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!466 = distinct !{!466, !467, !"_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf: argument 0"}
!467 = distinct !{!467, !"_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf"}
!468 = !{!469}
!469 = distinct !{!469, !467, !"_ZN3jxl8N_SCALAR11BitsToFloatEPKjPf: argument 1"}
!470 = !{!471, !469}
!471 = distinct !{!471, !472, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!472 = distinct !{!472, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!473 = !{!466}
!474 = distinct !{!474, !475, !462}
!475 = !{!"llvm.loop.unroll.runtime.disable"}
!476 = !{i32 0, i32 33}
