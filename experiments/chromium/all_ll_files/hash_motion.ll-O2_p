; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/hash_motion.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/hash_motion.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.Iterator = type { i8*, i64 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct._block_hash = type { i16, i16, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_hash_table_init(%struct.intrabc_hash_info*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 2
  tail call void @av1_crc_calculator_init(%struct._crc_calculator* %6, i32 24, i32 6122955) #4
  %7 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 3
  tail call void @av1_crc_calculator_init(%struct._crc_calculator* %7, i32 24, i32 8801531) #4
  store i32 1, i32* %2, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 1, i32 0
  store %struct.Vector** null, %struct.Vector*** %9, align 8
  ret void
}

declare void @av1_crc_calculator_init(%struct._crc_calculator*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_hash_table_clear_all(%struct._hash_table* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %3 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %4 = icmp eq %struct.Vector** %3, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %1, %22
  %6 = phi %struct.Vector** [ %23, %22 ], [ %3, %1 ]
  %7 = phi i64 [ %20, %22 ], [ 0, %1 ]
  %8 = getelementptr inbounds %struct.Vector*, %struct.Vector** %6, i64 %7
  %9 = load %struct.Vector*, %struct.Vector** %8, align 8
  %10 = icmp eq %struct.Vector* %9, null
  br i1 %10, label %19, label %11

11:                                               ; preds = %5
  %12 = tail call i32 @aom_vector_destroy(%struct.Vector* nonnull %9) #4
  %13 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %14 = getelementptr inbounds %struct.Vector*, %struct.Vector** %13, i64 %7
  %15 = bitcast %struct.Vector** %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @aom_free(i8* %16) #4
  %17 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %18 = getelementptr inbounds %struct.Vector*, %struct.Vector** %17, i64 %7
  store %struct.Vector* null, %struct.Vector** %18, align 8
  br label %19

19:                                               ; preds = %5, %11
  %20 = add nuw nsw i64 %7, 1
  %21 = icmp eq i64 %20, 524288
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = load %struct.Vector**, %struct.Vector*** %2, align 8
  br label %5

24:                                               ; preds = %19, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @aom_vector_destroy(%struct.Vector*) local_unnamed_addr #1

declare void @aom_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_hash_table_destroy(%struct._hash_table* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %3 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %4 = icmp eq %struct.Vector** %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = bitcast %struct.Vector** %3 to i8*
  br label %29

7:                                                ; preds = %1, %24
  %8 = phi %struct.Vector** [ %25, %24 ], [ %3, %1 ]
  %9 = phi i64 [ %22, %24 ], [ 0, %1 ]
  %10 = getelementptr inbounds %struct.Vector*, %struct.Vector** %8, i64 %9
  %11 = load %struct.Vector*, %struct.Vector** %10, align 8
  %12 = icmp eq %struct.Vector* %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %7
  %14 = tail call i32 @aom_vector_destroy(%struct.Vector* nonnull %11) #4
  %15 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %16 = getelementptr inbounds %struct.Vector*, %struct.Vector** %15, i64 %9
  %17 = bitcast %struct.Vector** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @aom_free(i8* %18) #4
  %19 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %20 = getelementptr inbounds %struct.Vector*, %struct.Vector** %19, i64 %9
  store %struct.Vector* null, %struct.Vector** %20, align 8
  br label %21

21:                                               ; preds = %13, %7
  %22 = add nuw nsw i64 %9, 1
  %23 = icmp eq i64 %22, 524288
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = load %struct.Vector**, %struct.Vector*** %2, align 8
  br label %7

26:                                               ; preds = %21
  %27 = bitcast %struct._hash_table* %0 to i8**
  %28 = load i8*, i8** %27, align 8
  br label %29

29:                                               ; preds = %5, %26
  %30 = phi i8* [ %28, %26 ], [ %6, %5 ]
  tail call void @aom_free(i8* %30) #4
  store %struct.Vector** null, %struct.Vector*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_hash_table_create(%struct._hash_table* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %3 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %4 = icmp eq %struct.Vector** %3, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %1, %22
  %6 = phi %struct.Vector** [ %23, %22 ], [ %3, %1 ]
  %7 = phi i64 [ %20, %22 ], [ 0, %1 ]
  %8 = getelementptr inbounds %struct.Vector*, %struct.Vector** %6, i64 %7
  %9 = load %struct.Vector*, %struct.Vector** %8, align 8
  %10 = icmp eq %struct.Vector* %9, null
  br i1 %10, label %19, label %11

11:                                               ; preds = %5
  %12 = tail call i32 @aom_vector_destroy(%struct.Vector* nonnull %9) #4
  %13 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %14 = getelementptr inbounds %struct.Vector*, %struct.Vector** %13, i64 %7
  %15 = bitcast %struct.Vector** %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @aom_free(i8* %16) #4
  %17 = load %struct.Vector**, %struct.Vector*** %2, align 8
  %18 = getelementptr inbounds %struct.Vector*, %struct.Vector** %17, i64 %7
  store %struct.Vector* null, %struct.Vector** %18, align 8
  br label %19

19:                                               ; preds = %11, %5
  %20 = add nuw nsw i64 %7, 1
  %21 = icmp eq i64 %20, 524288
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = load %struct.Vector**, %struct.Vector*** %2, align 8
  br label %5

24:                                               ; preds = %1
  %25 = tail call i8* @aom_malloc(i64 4194304) #4
  %26 = bitcast %struct._hash_table* %0 to i8**
  store i8* %25, i8** %26, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 4194304, i1 false)
  br label %27

27:                                               ; preds = %19, %24
  ret void
}

declare i8* @aom_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_hash_table_count(%struct._hash_table* nocapture readonly, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %4 = load %struct.Vector**, %struct.Vector*** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %struct.Vector*, %struct.Vector** %4, i64 %5
  %7 = load %struct.Vector*, %struct.Vector** %6, align 8
  %8 = icmp eq %struct.Vector* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Vector, %struct.Vector* %7, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i32
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i32 [ %12, %9 ], [ 0, %2 ]
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @av1_hash_get_first_iterator(%struct._hash_table* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %4 = load %struct.Vector**, %struct.Vector*** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %struct.Vector*, %struct.Vector** %4, i64 %5
  %7 = load %struct.Vector*, %struct.Vector** %6, align 8
  %8 = tail call { i8*, i64 } @aom_vector_begin(%struct.Vector* %7) #4
  ret { i8*, i64 } %8
}

declare { i8*, i64 } @aom_vector_begin(%struct.Vector*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_has_exact_match(%struct._hash_table* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.Iterator, align 8
  %5 = alloca %struct.Iterator, align 8
  %6 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %7 = load %struct.Vector**, %struct.Vector*** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %struct.Vector*, %struct.Vector** %7, i64 %8
  %10 = load %struct.Vector*, %struct.Vector** %9, align 8
  %11 = icmp eq %struct.Vector* %10, null
  br i1 %11, label %42, label %12

12:                                               ; preds = %3
  %13 = bitcast %struct.Iterator* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #4
  %14 = getelementptr inbounds %struct.Iterator, %struct.Iterator* %4, i64 0, i32 0
  %15 = getelementptr inbounds %struct.Iterator, %struct.Iterator* %4, i64 0, i32 1
  %16 = bitcast %struct.Iterator* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false)
  %17 = load %struct.Vector*, %struct.Vector** %9, align 8
  %18 = tail call { i8*, i64 } @aom_vector_begin(%struct.Vector* %17) #4
  %19 = extractvalue { i8*, i64 } %18, 0
  store i8* %19, i8** %14, align 8
  %20 = extractvalue { i8*, i64 } %18, 1
  store i64 %20, i64* %15, align 8
  %21 = bitcast %struct.Iterator* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #4
  %22 = getelementptr inbounds %struct.Iterator, %struct.Iterator* %5, i64 0, i32 0
  %23 = getelementptr inbounds %struct.Iterator, %struct.Iterator* %5, i64 0, i32 1
  %24 = bitcast %struct.Iterator* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 16, i1 false)
  %25 = load %struct.Vector**, %struct.Vector*** %6, align 8
  %26 = getelementptr inbounds %struct.Vector*, %struct.Vector** %25, i64 %8
  %27 = load %struct.Vector*, %struct.Vector** %26, align 8
  %28 = tail call { i8*, i64 } @aom_vector_end(%struct.Vector* %27) #4
  %29 = extractvalue { i8*, i64 } %28, 0
  store i8* %29, i8** %22, align 8
  %30 = extractvalue { i8*, i64 } %28, 1
  store i64 %30, i64* %23, align 8
  %31 = call zeroext i1 @aom_iterator_equals(%struct.Iterator* nonnull %4, %struct.Iterator* nonnull %5) #4
  br i1 %31, label %40, label %32

32:                                               ; preds = %12, %38
  %33 = call i8* @aom_iterator_get(%struct.Iterator* nonnull %4) #4
  %34 = getelementptr inbounds i8, i8* %33, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, %2
  br i1 %37, label %40, label %38

38:                                               ; preds = %32
  call void @aom_iterator_increment(%struct.Iterator* nonnull %4) #4
  %39 = call zeroext i1 @aom_iterator_equals(%struct.Iterator* nonnull %4, %struct.Iterator* nonnull %5) #4
  br i1 %39, label %40, label %32

40:                                               ; preds = %32, %38, %12
  %41 = phi i32 [ 0, %12 ], [ 0, %38 ], [ 1, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #4
  br label %42

42:                                               ; preds = %3, %40
  %43 = phi i32 [ %41, %40 ], [ 0, %3 ]
  ret i32 %43
}

declare { i8*, i64 } @aom_vector_end(%struct.Vector*) local_unnamed_addr #1

declare zeroext i1 @aom_iterator_equals(%struct.Iterator*, %struct.Iterator*) local_unnamed_addr #1

declare i8* @aom_iterator_get(%struct.Iterator*) local_unnamed_addr #1

declare void @aom_iterator_increment(%struct.Iterator*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_generate_block_2x2_hash_value(%struct.intrabc_hash_info*, %struct.yv12_buffer_config* nocapture readonly, i32** nocapture readonly, i8** nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to [4 x i16]*
  %7 = alloca i32, align 4
  %8 = bitcast i32* %7 to [4 x i8]*
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 2
  %16 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 3
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  %18 = load i32, i32* %17, align 8
  %19 = and i32 %18, 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %95, label %21

21:                                               ; preds = %4
  %22 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #4
  %23 = bitcast i64* %5 to i16*
  %24 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 1
  %25 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 2
  %26 = getelementptr inbounds [4 x i16], [4 x i16]* %6, i64 0, i64 3
  %27 = icmp sgt i32 %14, 0
  store i64 -6148914691236517206, i64* %5, align 8
  br i1 %27, label %28, label %41

28:                                               ; preds = %21
  %29 = icmp sgt i32 %11, 0
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 0
  %31 = bitcast i8** %30 to i64*
  %32 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %33 = getelementptr inbounds i8*, i8** %3, i64 1
  %34 = getelementptr inbounds i32*, i32** %2, i64 1
  %35 = zext i32 %11 to i64
  br label %36

36:                                               ; preds = %44, %28
  %37 = phi i32 [ 0, %28 ], [ %47, %44 ]
  %38 = phi i32 [ 0, %28 ], [ %46, %44 ]
  br i1 %29, label %39, label %44

39:                                               ; preds = %36
  %40 = sext i32 %38 to i64
  br label %49

41:                                               ; preds = %44, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #4
  br label %165

42:                                               ; preds = %82
  %43 = trunc i64 %92 to i32
  br label %44

44:                                               ; preds = %42, %36
  %45 = phi i32 [ %38, %36 ], [ %43, %42 ]
  %46 = add nsw i32 %45, 1
  %47 = add nuw nsw i32 %37, 1
  %48 = icmp eq i32 %47, %14
  br i1 %48, label %41, label %36

49:                                               ; preds = %82, %39
  %50 = phi i64 [ %40, %39 ], [ %92, %82 ]
  %51 = phi i64 [ 0, %39 ], [ %93, %82 ]
  %52 = load i64, i64* %31, align 8
  %53 = shl i64 %52, 1
  %54 = inttoptr i64 %53 to i16*
  %55 = load i32, i32* %32, align 8
  %56 = mul nsw i32 %55, %37
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i16, i16* %54, i64 %57
  %59 = getelementptr inbounds i16, i16* %58, i64 %51
  %60 = sext i32 %55 to i64
  %61 = load i16, i16* %59, align 2
  store i16 %61, i16* %23, align 8
  %62 = getelementptr inbounds i16, i16* %59, i64 1
  %63 = load i16, i16* %62, align 2
  store i16 %63, i16* %24, align 2
  %64 = getelementptr inbounds i16, i16* %59, i64 %60
  %65 = load i16, i16* %64, align 2
  store i16 %65, i16* %25, align 4
  %66 = getelementptr inbounds i16, i16* %64, i64 1
  %67 = load i16, i16* %66, align 2
  store i16 %67, i16* %26, align 2
  %68 = icmp eq i16 %61, %63
  %69 = icmp eq i16 %65, %67
  %70 = and i1 %68, %69
  %71 = zext i1 %70 to i8
  %72 = load i8*, i8** %3, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %50
  store i8 %71, i8* %73, align 1
  %74 = load i16, i16* %23, align 8
  %75 = load i16, i16* %25, align 4
  %76 = icmp eq i16 %74, %75
  br i1 %76, label %77, label %82

77:                                               ; preds = %49
  %78 = load i16, i16* %24, align 2
  %79 = load i16, i16* %26, align 2
  %80 = icmp eq i16 %78, %79
  %81 = zext i1 %80 to i8
  br label %82

82:                                               ; preds = %49, %77
  %83 = phi i8 [ %81, %77 ], [ 0, %49 ]
  %84 = load i8*, i8** %33, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 %50
  store i8 %83, i8* %85, align 1
  %86 = call i32 @av1_get_crc_value(%struct._crc_calculator* %15, i8* nonnull %22, i32 8) #4
  %87 = load i32*, i32** %2, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 %50
  store i32 %86, i32* %88, align 4
  %89 = call i32 @av1_get_crc_value(%struct._crc_calculator* %16, i8* nonnull %22, i32 8) #4
  %90 = load i32*, i32** %34, align 8
  %91 = getelementptr inbounds i32, i32* %90, i64 %50
  store i32 %89, i32* %91, align 4
  %92 = add nsw i64 %50, 1
  %93 = add nuw nsw i64 %51, 1
  %94 = icmp eq i64 %93, %35
  br i1 %94, label %42, label %49

95:                                               ; preds = %4
  %96 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #4
  %97 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 1
  %98 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 2
  %99 = getelementptr inbounds [4 x i8], [4 x i8]* %8, i64 0, i64 3
  %100 = icmp sgt i32 %14, 0
  store i32 -1431655766, i32* %7, align 4
  br i1 %100, label %101, label %113

101:                                              ; preds = %95
  %102 = icmp sgt i32 %11, 0
  %103 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 0
  %104 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %105 = getelementptr inbounds i8*, i8** %3, i64 1
  %106 = getelementptr inbounds i32*, i32** %2, i64 1
  %107 = zext i32 %11 to i64
  br label %108

108:                                              ; preds = %116, %101
  %109 = phi i32 [ 0, %101 ], [ %119, %116 ]
  %110 = phi i32 [ 0, %101 ], [ %118, %116 ]
  br i1 %102, label %111, label %116

111:                                              ; preds = %108
  %112 = sext i32 %110 to i64
  br label %121

113:                                              ; preds = %116, %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #4
  br label %165

114:                                              ; preds = %152
  %115 = trunc i64 %162 to i32
  br label %116

116:                                              ; preds = %114, %108
  %117 = phi i32 [ %110, %108 ], [ %115, %114 ]
  %118 = add nsw i32 %117, 1
  %119 = add nuw nsw i32 %109, 1
  %120 = icmp eq i32 %119, %14
  br i1 %120, label %113, label %108

121:                                              ; preds = %152, %111
  %122 = phi i64 [ %112, %111 ], [ %162, %152 ]
  %123 = phi i64 [ 0, %111 ], [ %163, %152 ]
  %124 = load i8*, i8** %103, align 8
  %125 = load i32, i32* %104, align 8
  %126 = mul nsw i32 %125, %109
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %124, i64 %127
  %129 = getelementptr inbounds i8, i8* %128, i64 %123
  %130 = sext i32 %125 to i64
  %131 = load i8, i8* %129, align 1
  store i8 %131, i8* %96, align 4
  %132 = getelementptr inbounds i8, i8* %129, i64 1
  %133 = load i8, i8* %132, align 1
  store i8 %133, i8* %97, align 1
  %134 = getelementptr inbounds i8, i8* %129, i64 %130
  %135 = load i8, i8* %134, align 1
  store i8 %135, i8* %98, align 2
  %136 = getelementptr inbounds i8, i8* %134, i64 1
  %137 = load i8, i8* %136, align 1
  store i8 %137, i8* %99, align 1
  %138 = icmp eq i8 %131, %133
  %139 = icmp eq i8 %135, %137
  %140 = and i1 %138, %139
  %141 = zext i1 %140 to i8
  %142 = load i8*, i8** %3, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 %122
  store i8 %141, i8* %143, align 1
  %144 = load i8, i8* %96, align 4
  %145 = load i8, i8* %98, align 2
  %146 = icmp eq i8 %144, %145
  br i1 %146, label %147, label %152

147:                                              ; preds = %121
  %148 = load i8, i8* %97, align 1
  %149 = load i8, i8* %99, align 1
  %150 = icmp eq i8 %148, %149
  %151 = zext i1 %150 to i8
  br label %152

152:                                              ; preds = %121, %147
  %153 = phi i8 [ %151, %147 ], [ 0, %121 ]
  %154 = load i8*, i8** %105, align 8
  %155 = getelementptr inbounds i8, i8* %154, i64 %122
  store i8 %153, i8* %155, align 1
  %156 = call i32 @av1_get_crc_value(%struct._crc_calculator* %15, i8* nonnull %96, i32 4) #4
  %157 = load i32*, i32** %2, align 8
  %158 = getelementptr inbounds i32, i32* %157, i64 %122
  store i32 %156, i32* %158, align 4
  %159 = call i32 @av1_get_crc_value(%struct._crc_calculator* %16, i8* nonnull %96, i32 4) #4
  %160 = load i32*, i32** %106, align 8
  %161 = getelementptr inbounds i32, i32* %160, i64 %122
  store i32 %159, i32* %161, align 4
  %162 = add nsw i64 %122, 1
  %163 = add nuw nsw i64 %123, 1
  %164 = icmp eq i64 %163, %107
  br i1 %164, label %114, label %121

165:                                              ; preds = %113, %41
  ret void
}

declare i32 @av1_get_crc_value(%struct._crc_calculator*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_generate_block_hash_value(%struct.intrabc_hash_info*, %struct.yv12_buffer_config* nocapture readonly, i32, i32** nocapture readonly, i32** nocapture readonly, i8** nocapture readonly, i8** nocapture readonly) local_unnamed_addr #0 {
  %8 = alloca [4 x i32], align 16
  %9 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 3
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = sub nsw i32 %12, %2
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = ashr i32 %2, 1
  %17 = ashr i32 %2, 2
  %18 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #4
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 2
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 3
  %23 = icmp slt i32 %15, %2
  %24 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 16, i1 false)
  br i1 %23, label %47, label %25

25:                                               ; preds = %7
  %26 = icmp slt i32 %13, 0
  %27 = mul nsw i32 %12, %16
  %28 = getelementptr inbounds i32*, i32** %3, i64 1
  %29 = getelementptr inbounds i32*, i32** %4, i64 1
  %30 = getelementptr inbounds i8*, i8** %5, i64 1
  %31 = mul nsw i32 %12, %17
  %32 = getelementptr inbounds i8*, i8** %6, i64 1
  %33 = add nsw i32 %2, -1
  %34 = sext i32 %31 to i64
  %35 = sext i32 %16 to i64
  %36 = sext i32 %17 to i64
  %37 = sext i32 %27 to i64
  %38 = add i32 %12, 1
  %39 = sub i32 %38, %2
  %40 = add i32 %15, 1
  %41 = sub i32 %40, %2
  br label %42

42:                                               ; preds = %51, %25
  %43 = phi i32 [ 0, %25 ], [ %54, %51 ]
  %44 = phi i32 [ 0, %25 ], [ %53, %51 ]
  br i1 %26, label %51, label %45

45:                                               ; preds = %42
  %46 = sext i32 %44 to i64
  br label %56

47:                                               ; preds = %51, %7
  %48 = icmp sgt i32 %2, 3
  br i1 %48, label %151, label %197

49:                                               ; preds = %143
  %50 = trunc i64 %148 to i32
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %44, %42 ], [ %50, %49 ]
  %53 = add nsw i32 %33, %52
  %54 = add nuw i32 %43, 1
  %55 = icmp eq i32 %54, %41
  br i1 %55, label %47, label %42

56:                                               ; preds = %143, %45
  %57 = phi i64 [ %46, %45 ], [ %148, %143 ]
  %58 = phi i32 [ 0, %45 ], [ %149, %143 ]
  %59 = load i32*, i32** %3, align 8
  %60 = getelementptr inbounds i32, i32* %59, i64 %57
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %19, align 16
  %62 = add nsw i64 %57, %35
  %63 = getelementptr inbounds i32, i32* %59, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %20, align 4
  %65 = add nsw i64 %57, %37
  %66 = getelementptr inbounds i32, i32* %59, i64 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %21, align 8
  %68 = add nsw i64 %65, %35
  %69 = getelementptr inbounds i32, i32* %59, i64 %68
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %22, align 4
  %71 = call i32 @av1_get_crc_value(%struct._crc_calculator* %9, i8* nonnull %18, i32 16) #4
  %72 = load i32*, i32** %4, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 %57
  store i32 %71, i32* %73, align 4
  %74 = load i32*, i32** %28, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 %57
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %19, align 16
  %77 = getelementptr inbounds i32, i32* %74, i64 %62
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %20, align 4
  %79 = getelementptr inbounds i32, i32* %74, i64 %65
  %80 = load i32, i32* %79, align 4
  store i32 %80, i32* %21, align 8
  %81 = getelementptr inbounds i32, i32* %74, i64 %68
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %22, align 4
  %83 = call i32 @av1_get_crc_value(%struct._crc_calculator* %10, i8* nonnull %18, i32 16) #4
  %84 = load i32*, i32** %29, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 %57
  store i32 %83, i32* %85, align 4
  %86 = load i8*, i8** %5, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 %57
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %112, label %90

90:                                               ; preds = %56
  %91 = add nsw i64 %57, %36
  %92 = getelementptr inbounds i8, i8* %86, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds i8, i8* %86, i64 %62
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %112, label %99

99:                                               ; preds = %95
  %100 = getelementptr inbounds i8, i8* %86, i64 %65
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %112, label %103

103:                                              ; preds = %99
  %104 = add nsw i64 %65, %36
  %105 = getelementptr inbounds i8, i8* %86, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %112, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds i8, i8* %86, i64 %68
  %110 = load i8, i8* %109, align 1
  %111 = icmp ne i8 %110, 0
  br label %112

112:                                              ; preds = %103, %99, %95, %90, %56, %108
  %113 = phi i1 [ false, %103 ], [ false, %99 ], [ false, %95 ], [ false, %90 ], [ false, %56 ], [ %111, %108 ]
  %114 = zext i1 %113 to i8
  %115 = load i8*, i8** %6, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 %57
  store i8 %114, i8* %116, align 1
  %117 = load i8*, i8** %30, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 %57
  %119 = load i8, i8* %118, align 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %143, label %121

121:                                              ; preds = %112
  %122 = getelementptr inbounds i8, i8* %117, i64 %62
  %123 = load i8, i8* %122, align 1
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %143, label %125

125:                                              ; preds = %121
  %126 = add nsw i64 %57, %34
  %127 = getelementptr inbounds i8, i8* %117, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %143, label %130

130:                                              ; preds = %125
  %131 = add nsw i64 %126, %35
  %132 = getelementptr inbounds i8, i8* %117, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %143, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds i8, i8* %117, i64 %65
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %143, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds i8, i8* %117, i64 %68
  %141 = load i8, i8* %140, align 1
  %142 = icmp ne i8 %141, 0
  br label %143

143:                                              ; preds = %135, %130, %125, %121, %112, %139
  %144 = phi i1 [ false, %135 ], [ false, %130 ], [ false, %125 ], [ false, %121 ], [ false, %112 ], [ %142, %139 ]
  %145 = zext i1 %144 to i8
  %146 = load i8*, i8** %32, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 %57
  store i8 %145, i8* %147, align 1
  %148 = add nsw i64 %57, 1
  %149 = add nuw i32 %58, 1
  %150 = icmp eq i32 %149, %39
  br i1 %150, label %49, label %56

151:                                              ; preds = %47
  %152 = add nsw i32 %2, -1
  br i1 %23, label %197, label %153

153:                                              ; preds = %151
  %154 = icmp slt i32 %13, 0
  %155 = getelementptr inbounds i8*, i8** %6, i64 1
  %156 = getelementptr inbounds i8*, i8** %6, i64 2
  %157 = add i32 %12, 1
  %158 = sub i32 %157, %2
  %159 = add i32 %15, 1
  %160 = sub i32 %159, %2
  br label %161

161:                                              ; preds = %168, %153
  %162 = phi i32 [ 0, %153 ], [ %171, %168 ]
  %163 = phi i32 [ 0, %153 ], [ %170, %168 ]
  br i1 %154, label %168, label %164

164:                                              ; preds = %161
  %165 = sext i32 %163 to i64
  br label %173

166:                                              ; preds = %189
  %167 = trunc i64 %194 to i32
  br label %168

168:                                              ; preds = %166, %161
  %169 = phi i32 [ %163, %161 ], [ %167, %166 ]
  %170 = add nsw i32 %169, %152
  %171 = add nuw i32 %162, 1
  %172 = icmp eq i32 %171, %160
  br i1 %172, label %197, label %161

173:                                              ; preds = %189, %164
  %174 = phi i64 [ %194, %189 ], [ %165, %164 ]
  %175 = phi i32 [ %195, %189 ], [ 0, %164 ]
  %176 = load i8*, i8** %6, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 %174
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %180, label %185

180:                                              ; preds = %173
  %181 = load i8*, i8** %155, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 %174
  %183 = load i8, i8* %182, align 1
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %189, label %185

185:                                              ; preds = %180, %173
  %186 = or i32 %175, %162
  %187 = and i32 %152, %186
  %188 = icmp eq i32 %187, 0
  br label %189

189:                                              ; preds = %185, %180
  %190 = phi i1 [ true, %180 ], [ %188, %185 ]
  %191 = zext i1 %190 to i8
  %192 = load i8*, i8** %156, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 %174
  store i8 %191, i8* %193, align 1
  %194 = add nsw i64 %174, 1
  %195 = add nuw i32 %175, 1
  %196 = icmp eq i32 %195, %158
  br i1 %196, label %166, label %173

197:                                              ; preds = %168, %151, %47
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_add_to_hash_map_by_row_with_precal_data(%struct._hash_table* nocapture readonly, i32** nocapture readonly, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %struct._block_hash*
  %9 = load i32*, i32** %1, align 8
  %10 = getelementptr inbounds i32*, i32** %1, i64 1
  %11 = load i32*, i32** %10, align 8
  switch i32 %5, label %17 [
    i32 4, label %18
    i32 8, label %12
    i32 16, label %13
    i32 32, label %14
    i32 64, label %15
    i32 128, label %16
  ]

12:                                               ; preds = %6
  br label %18

13:                                               ; preds = %6
  br label %18

14:                                               ; preds = %6
  br label %18

15:                                               ; preds = %6
  br label %18

16:                                               ; preds = %6
  br label %18

17:                                               ; preds = %6
  br label %18

18:                                               ; preds = %6, %12, %13, %14, %15, %16, %17
  %19 = phi i32 [ -65536, %17 ], [ 327680, %16 ], [ 262144, %15 ], [ 196608, %14 ], [ 131072, %13 ], [ 65536, %12 ], [ 0, %6 ]
  %20 = icmp slt i32 %3, %5
  br i1 %20, label %39, label %21

21:                                               ; preds = %18
  %22 = icmp slt i32 %4, %5
  %23 = bitcast i64* %7 to i8*
  %24 = bitcast i64* %7 to i16*
  %25 = getelementptr inbounds %struct._block_hash, %struct._block_hash* %8, i64 0, i32 1
  %26 = getelementptr inbounds %struct._block_hash, %struct._block_hash* %8, i64 0, i32 2
  %27 = getelementptr inbounds %struct._hash_table, %struct._hash_table* %0, i64 0, i32 0
  %28 = sext i32 %3 to i64
  %29 = add i32 %4, 1
  %30 = sub i32 %29, %5
  %31 = add i32 %3, 1
  %32 = sub i32 %31, %5
  %33 = zext i32 %32 to i64
  %34 = zext i32 %30 to i64
  br label %35

35:                                               ; preds = %40, %21
  %36 = phi i64 [ %41, %40 ], [ 0, %21 ]
  br i1 %22, label %40, label %37

37:                                               ; preds = %35
  %38 = trunc i64 %36 to i16
  br label %43

39:                                               ; preds = %40, %18
  ret void

40:                                               ; preds = %79, %35
  %41 = add nuw nsw i64 %36, 1
  %42 = icmp eq i64 %41, %33
  br i1 %42, label %39, label %35

43:                                               ; preds = %79, %37
  %44 = phi i64 [ %80, %79 ], [ 0, %37 ]
  %45 = mul nsw i64 %44, %28
  %46 = add nsw i64 %45, %36
  %47 = getelementptr inbounds i8, i8* %2, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %79, label %50

50:                                               ; preds = %43
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #4
  store i64 -6148914691236517206, i64* %7, align 8
  store i16 %38, i16* %24, align 8
  %51 = trunc i64 %44 to i16
  store i16 %51, i16* %25, align 2
  %52 = getelementptr inbounds i32, i32* %9, i64 %46
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %53, 65535
  %55 = or i32 %54, %19
  %56 = getelementptr inbounds i32, i32* %11, i64 %46
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %26, align 4
  %58 = load %struct.Vector**, %struct.Vector*** %27, align 8
  %59 = zext i32 %55 to i64
  %60 = getelementptr inbounds %struct.Vector*, %struct.Vector** %58, i64 %59
  %61 = load %struct.Vector*, %struct.Vector** %60, align 8
  %62 = icmp eq %struct.Vector* %61, null
  br i1 %62, label %63, label %76

63:                                               ; preds = %50
  %64 = call i8* @aom_malloc(i64 32) #4
  %65 = load %struct.Vector**, %struct.Vector*** %27, align 8
  %66 = getelementptr inbounds %struct.Vector*, %struct.Vector** %65, i64 %59
  %67 = bitcast %struct.Vector** %66 to i8**
  store i8* %64, i8** %67, align 8
  %68 = load %struct.Vector**, %struct.Vector*** %27, align 8
  %69 = getelementptr inbounds %struct.Vector*, %struct.Vector** %68, i64 %59
  %70 = load %struct.Vector*, %struct.Vector** %69, align 8
  %71 = call i32 @aom_vector_setup(%struct.Vector* %70, i64 10, i64 8) #4
  %72 = load %struct.Vector**, %struct.Vector*** %27, align 8
  %73 = getelementptr inbounds %struct.Vector*, %struct.Vector** %72, i64 %59
  %74 = load %struct.Vector*, %struct.Vector** %73, align 8
  %75 = call i32 @aom_vector_push_back(%struct.Vector* %74, i8* nonnull %23) #4
  br label %78

76:                                               ; preds = %50
  %77 = call i32 @aom_vector_push_back(%struct.Vector* nonnull %61, i8* nonnull %23) #4
  br label %78

78:                                               ; preds = %63, %76
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #4
  br label %79

79:                                               ; preds = %43, %78
  %80 = add nuw nsw i64 %44, 1
  %81 = icmp eq i64 %80, %34
  br i1 %81, label %40, label %43
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_hash_is_horizontal_perfect(%struct.yv12_buffer_config* nocapture readonly, i32, i32, i32) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = mul nsw i32 %6, %3
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds i8, i8* %11, i64 %12
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 26
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 8
  %17 = icmp eq i32 %16, 0
  %18 = icmp sgt i32 %1, 0
  br i1 %17, label %19, label %24

19:                                               ; preds = %4
  br i1 %18, label %20, label %66

20:                                               ; preds = %19
  %21 = icmp eq i32 %1, 1
  %22 = sext i32 %6 to i64
  %23 = zext i32 %1 to i64
  br label %49

24:                                               ; preds = %4
  br i1 %18, label %25, label %66

25:                                               ; preds = %24
  %26 = ptrtoint i8* %13 to i64
  %27 = shl i64 %26, 1
  %28 = inttoptr i64 %27 to i16*
  %29 = icmp eq i32 %1, 1
  %30 = sext i32 %6 to i64
  %31 = zext i32 %1 to i64
  br label %32

32:                                               ; preds = %45, %25
  %33 = phi i32 [ 0, %25 ], [ %47, %45 ]
  %34 = phi i16* [ %28, %25 ], [ %46, %45 ]
  br i1 %29, label %45, label %35

35:                                               ; preds = %32
  %36 = load i16, i16* %34, align 2
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i64 %44, %31
  br i1 %38, label %45, label %39

39:                                               ; preds = %37, %35
  %40 = phi i64 [ 1, %35 ], [ %44, %37 ]
  %41 = getelementptr inbounds i16, i16* %34, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, %36
  %44 = add nuw nsw i64 %40, 1
  br i1 %43, label %37, label %66

45:                                               ; preds = %37, %32
  %46 = getelementptr inbounds i16, i16* %34, i64 %30
  %47 = add nuw nsw i32 %33, 1
  %48 = icmp eq i32 %47, %1
  br i1 %48, label %66, label %32

49:                                               ; preds = %62, %20
  %50 = phi i32 [ 0, %20 ], [ %64, %62 ]
  %51 = phi i8* [ %13, %20 ], [ %63, %62 ]
  br i1 %21, label %62, label %52

52:                                               ; preds = %49
  %53 = load i8, i8* %51, align 1
  br label %56

54:                                               ; preds = %56
  %55 = icmp eq i64 %61, %23
  br i1 %55, label %62, label %56

56:                                               ; preds = %54, %52
  %57 = phi i64 [ 1, %52 ], [ %61, %54 ]
  %58 = getelementptr inbounds i8, i8* %51, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, %53
  %61 = add nuw nsw i64 %57, 1
  br i1 %60, label %54, label %66

62:                                               ; preds = %54, %49
  %63 = getelementptr inbounds i8, i8* %51, i64 %22
  %64 = add nuw nsw i32 %50, 1
  %65 = icmp eq i32 %64, %1
  br i1 %65, label %66, label %49

66:                                               ; preds = %45, %39, %62, %56, %24, %19
  %67 = phi i32 [ 1, %19 ], [ 1, %24 ], [ 0, %56 ], [ 1, %62 ], [ 0, %39 ], [ 1, %45 ]
  ret i32 %67
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_hash_is_vertical_perfect(%struct.yv12_buffer_config* nocapture readonly, i32, i32, i32) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = mul nsw i32 %6, %3
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds i8, i8* %11, i64 %12
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 26
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %4
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %69

20:                                               ; preds = %18
  %21 = icmp eq i32 %1, 1
  %22 = sext i32 %6 to i64
  %23 = zext i32 %1 to i64
  br label %51

24:                                               ; preds = %4
  %25 = ptrtoint i8* %13 to i64
  %26 = shl i64 %25, 1
  %27 = inttoptr i64 %26 to i16*
  %28 = icmp sgt i32 %1, 0
  br i1 %28, label %29, label %69

29:                                               ; preds = %24
  %30 = icmp eq i32 %1, 1
  %31 = sext i32 %6 to i64
  %32 = zext i32 %1 to i64
  br label %33

33:                                               ; preds = %48, %29
  %34 = phi i64 [ 0, %29 ], [ %49, %48 ]
  br i1 %30, label %48, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds i16, i16* %27, i64 %34
  %37 = load i16, i16* %36, align 2
  br label %40

38:                                               ; preds = %40
  %39 = icmp eq i64 %47, %32
  br i1 %39, label %48, label %40

40:                                               ; preds = %38, %35
  %41 = phi i64 [ 1, %35 ], [ %47, %38 ]
  %42 = mul nsw i64 %41, %31
  %43 = add nsw i64 %42, %34
  %44 = getelementptr inbounds i16, i16* %27, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = icmp eq i16 %45, %37
  %47 = add nuw nsw i64 %41, 1
  br i1 %46, label %38, label %69

48:                                               ; preds = %38, %33
  %49 = add nuw nsw i64 %34, 1
  %50 = icmp eq i64 %49, %32
  br i1 %50, label %69, label %33

51:                                               ; preds = %66, %20
  %52 = phi i64 [ 0, %20 ], [ %67, %66 ]
  br i1 %21, label %66, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %13, i64 %52
  %55 = load i8, i8* %54, align 1
  br label %58

56:                                               ; preds = %58
  %57 = icmp eq i64 %65, %23
  br i1 %57, label %66, label %58

58:                                               ; preds = %56, %53
  %59 = phi i64 [ 1, %53 ], [ %65, %56 ]
  %60 = mul nsw i64 %59, %22
  %61 = add nsw i64 %60, %52
  %62 = getelementptr inbounds i8, i8* %13, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = icmp eq i8 %63, %55
  %65 = add nuw nsw i64 %59, 1
  br i1 %64, label %56, label %69

66:                                               ; preds = %56, %51
  %67 = add nuw nsw i64 %52, 1
  %68 = icmp eq i64 %67, %23
  br i1 %68, label %69, label %51

69:                                               ; preds = %48, %40, %66, %58, %24, %18
  %70 = phi i32 [ 1, %18 ], [ 1, %24 ], [ 0, %58 ], [ 1, %66 ], [ 0, %40 ], [ 1, %48 ]
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_get_block_hash_value(%struct.intrabc_hash_info*, i8*, i32, i32, i32* nocapture, i32* nocapture, i32) local_unnamed_addr #0 {
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to [4 x i16]*
  %10 = alloca i32, align 4
  %11 = bitcast i32* %10 to [4 x i8]*
  %12 = alloca [4 x i32], align 16
  switch i32 %3, label %18 [
    i32 4, label %19
    i32 8, label %13
    i32 16, label %14
    i32 32, label %15
    i32 64, label %16
    i32 128, label %17
  ]

13:                                               ; preds = %7
  br label %19

14:                                               ; preds = %7
  br label %19

15:                                               ; preds = %7
  br label %19

16:                                               ; preds = %7
  br label %19

17:                                               ; preds = %7
  br label %19

18:                                               ; preds = %7
  br label %19

19:                                               ; preds = %7, %13, %14, %15, %16, %17, %18
  %20 = phi i32 [ -65536, %18 ], [ 327680, %17 ], [ 262144, %16 ], [ 196608, %15 ], [ 131072, %14 ], [ 65536, %13 ], [ 0, %7 ]
  %21 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 2
  %22 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 3
  %23 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 0, i64 0
  %24 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 1, i64 0
  %25 = ashr i32 %3, 1
  %26 = icmp eq i32 %6, 0
  br i1 %26, label %74, label %27

27:                                               ; preds = %19
  %28 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #4
  %29 = bitcast i64* %8 to i16*
  %30 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 1
  %31 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 2
  %32 = getelementptr inbounds [4 x i16], [4 x i16]* %9, i64 0, i64 3
  %33 = ptrtoint i8* %1 to i64
  %34 = shl i64 %33, 1
  %35 = inttoptr i64 %34 to i16*
  %36 = icmp sgt i32 %3, 0
  store i64 -6148914691236517206, i64* %8, align 8
  br i1 %36, label %37, label %47

37:                                               ; preds = %27
  %38 = sext i32 %2 to i64
  %39 = sext i32 %3 to i64
  br label %40

40:                                               ; preds = %48, %37
  %41 = phi i64 [ 0, %37 ], [ %49, %48 ]
  %42 = trunc i64 %41 to i32
  %43 = lshr exact i32 %42, 1
  %44 = mul nsw i32 %43, %25
  %45 = mul nsw i64 %41, %38
  %46 = getelementptr inbounds i16, i16* %35, i64 %45
  br label %51

47:                                               ; preds = %48, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #4
  br label %117

48:                                               ; preds = %51
  %49 = add nuw i64 %41, 2
  %50 = icmp slt i64 %49, %39
  br i1 %50, label %40, label %47

51:                                               ; preds = %40, %51
  %52 = phi i64 [ 0, %40 ], [ %71, %51 ]
  %53 = trunc i64 %52 to i32
  %54 = lshr exact i32 %53, 1
  %55 = add nsw i32 %54, %44
  %56 = getelementptr inbounds i16, i16* %46, i64 %52
  %57 = load i16, i16* %56, align 2
  store i16 %57, i16* %29, align 8
  %58 = getelementptr inbounds i16, i16* %56, i64 1
  %59 = load i16, i16* %58, align 2
  store i16 %59, i16* %30, align 2
  %60 = getelementptr inbounds i16, i16* %56, i64 %38
  %61 = load i16, i16* %60, align 2
  store i16 %61, i16* %31, align 4
  %62 = getelementptr inbounds i16, i16* %60, i64 1
  %63 = load i16, i16* %62, align 2
  store i16 %63, i16* %32, align 2
  %64 = call i32 @av1_get_crc_value(%struct._crc_calculator* %21, i8* nonnull %28, i32 8) #4
  %65 = load i32*, i32** %23, align 8
  %66 = sext i32 %55 to i64
  %67 = getelementptr inbounds i32, i32* %65, i64 %66
  store i32 %64, i32* %67, align 4
  %68 = call i32 @av1_get_crc_value(%struct._crc_calculator* %22, i8* nonnull %28, i32 8) #4
  %69 = load i32*, i32** %24, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 %66
  store i32 %68, i32* %70, align 4
  %71 = add nuw i64 %52, 2
  %72 = trunc i64 %71 to i32
  %73 = icmp slt i32 %72, %3
  br i1 %73, label %51, label %48

74:                                               ; preds = %19
  %75 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75) #4
  %76 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 1
  %77 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 2
  %78 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 3
  %79 = icmp sgt i32 %3, 0
  store i32 -1431655766, i32* %10, align 4
  br i1 %79, label %80, label %90

80:                                               ; preds = %74
  %81 = sext i32 %2 to i64
  %82 = sext i32 %3 to i64
  br label %83

83:                                               ; preds = %91, %80
  %84 = phi i64 [ 0, %80 ], [ %92, %91 ]
  %85 = trunc i64 %84 to i32
  %86 = lshr exact i32 %85, 1
  %87 = mul nsw i32 %86, %25
  %88 = mul nsw i64 %84, %81
  %89 = getelementptr inbounds i8, i8* %1, i64 %88
  br label %94

90:                                               ; preds = %91, %74
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  br label %117

91:                                               ; preds = %94
  %92 = add nuw i64 %84, 2
  %93 = icmp slt i64 %92, %82
  br i1 %93, label %83, label %90

94:                                               ; preds = %83, %94
  %95 = phi i64 [ 0, %83 ], [ %114, %94 ]
  %96 = trunc i64 %95 to i32
  %97 = lshr exact i32 %96, 1
  %98 = add nsw i32 %97, %87
  %99 = getelementptr inbounds i8, i8* %89, i64 %95
  %100 = load i8, i8* %99, align 1
  store i8 %100, i8* %75, align 4
  %101 = getelementptr inbounds i8, i8* %99, i64 1
  %102 = load i8, i8* %101, align 1
  store i8 %102, i8* %76, align 1
  %103 = getelementptr inbounds i8, i8* %99, i64 %81
  %104 = load i8, i8* %103, align 1
  store i8 %104, i8* %77, align 2
  %105 = getelementptr inbounds i8, i8* %103, i64 1
  %106 = load i8, i8* %105, align 1
  store i8 %106, i8* %78, align 1
  %107 = call i32 @av1_get_crc_value(%struct._crc_calculator* %21, i8* nonnull %75, i32 4) #4
  %108 = load i32*, i32** %23, align 8
  %109 = sext i32 %98 to i64
  %110 = getelementptr inbounds i32, i32* %108, i64 %109
  store i32 %107, i32* %110, align 4
  %111 = call i32 @av1_get_crc_value(%struct._crc_calculator* %22, i8* nonnull %75, i32 4) #4
  %112 = load i32*, i32** %24, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 %109
  store i32 %111, i32* %113, align 4
  %114 = add nuw i64 %95, 2
  %115 = trunc i64 %114 to i32
  %116 = icmp slt i32 %115, %3
  br i1 %116, label %94, label %91

117:                                              ; preds = %90, %47
  %118 = bitcast [4 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #4
  %119 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 0
  %120 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 1
  %121 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 2
  %122 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 3
  %123 = icmp slt i32 %3, 4
  %124 = bitcast [4 x i32]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %124, i8 -86, i64 16, i1 false)
  br i1 %123, label %129, label %125

125:                                              ; preds = %117
  %126 = lshr i32 %3, 2
  br label %139

127:                                              ; preds = %166
  %128 = sext i32 %146 to i64
  br label %129

129:                                              ; preds = %127, %117
  %130 = phi i64 [ 0, %117 ], [ %128, %127 ]
  %131 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 0, i64 %130
  %132 = load i32*, i32** %131, align 8
  %133 = load i32, i32* %132, align 4
  %134 = and i32 %133, 65535
  %135 = or i32 %134, %20
  store i32 %135, i32* %4, align 4
  %136 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 1, i64 %130
  %137 = load i32*, i32** %136, align 8
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %5, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #4
  ret void

139:                                              ; preds = %125, %166
  %140 = phi i32 [ %168, %166 ], [ 4, %125 ]
  %141 = phi i32 [ %146, %166 ], [ 0, %125 ]
  %142 = phi i32 [ %145, %166 ], [ 1, %125 ]
  %143 = phi i32 [ %144, %166 ], [ %25, %125 ]
  %144 = phi i32 [ %167, %166 ], [ %126, %125 ]
  %145 = sub nsw i32 1, %142
  %146 = sub nsw i32 1, %141
  %147 = icmp sgt i32 %144, 0
  br i1 %147, label %148, label %166

148:                                              ; preds = %139
  %149 = shl nsw i32 %143, 1
  %150 = sext i32 %145 to i64
  %151 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 0, i64 %150
  %152 = sext i32 %146 to i64
  %153 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 0, i64 %152
  %154 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 1, i64 %150
  %155 = getelementptr inbounds %struct.intrabc_hash_info, %struct.intrabc_hash_info* %0, i64 0, i32 0, i64 1, i64 %152
  %156 = sext i32 %143 to i64
  %157 = zext i32 %144 to i64
  br label %158

158:                                              ; preds = %148, %170
  %159 = phi i64 [ 0, %148 ], [ %171, %170 ]
  %160 = phi i64 [ 0, %148 ], [ %205, %170 ]
  %161 = trunc i64 %159 to i32
  %162 = mul i32 %149, %161
  %163 = sext i32 %162 to i64
  %164 = shl i64 %160, 32
  %165 = ashr exact i64 %164, 32
  br label %173

166:                                              ; preds = %170, %139
  %167 = ashr i32 %144, 1
  %168 = shl nsw i32 %140, 1
  %169 = icmp sgt i32 %168, %3
  br i1 %169, label %127, label %139

170:                                              ; preds = %173
  %171 = add nuw nsw i64 %159, 1
  %172 = icmp eq i64 %171, %157
  br i1 %172, label %166, label %158

173:                                              ; preds = %173, %158
  %174 = phi i64 [ %165, %158 ], [ %205, %173 ]
  %175 = phi i64 [ 0, %158 ], [ %206, %173 ]
  %176 = shl nuw i64 %175, 1
  %177 = add nsw i64 %176, %163
  %178 = load i32*, i32** %151, align 8
  %179 = getelementptr inbounds i32, i32* %178, i64 %177
  %180 = load i32, i32* %179, align 4
  store i32 %180, i32* %119, align 16
  %181 = or i64 %177, 1
  %182 = getelementptr inbounds i32, i32* %178, i64 %181
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %120, align 4
  %184 = add nsw i64 %177, %156
  %185 = getelementptr inbounds i32, i32* %178, i64 %184
  %186 = load i32, i32* %185, align 4
  store i32 %186, i32* %121, align 8
  %187 = add nsw i64 %184, 1
  %188 = getelementptr inbounds i32, i32* %178, i64 %187
  %189 = load i32, i32* %188, align 4
  store i32 %189, i32* %122, align 4
  %190 = call i32 @av1_get_crc_value(%struct._crc_calculator* %21, i8* nonnull %118, i32 16) #4
  %191 = load i32*, i32** %153, align 8
  %192 = getelementptr inbounds i32, i32* %191, i64 %174
  store i32 %190, i32* %192, align 4
  %193 = load i32*, i32** %154, align 8
  %194 = getelementptr inbounds i32, i32* %193, i64 %177
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %119, align 16
  %196 = getelementptr inbounds i32, i32* %193, i64 %181
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %120, align 4
  %198 = getelementptr inbounds i32, i32* %193, i64 %184
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %121, align 8
  %200 = getelementptr inbounds i32, i32* %193, i64 %187
  %201 = load i32, i32* %200, align 4
  store i32 %201, i32* %122, align 4
  %202 = call i32 @av1_get_crc_value(%struct._crc_calculator* %22, i8* nonnull %118, i32 16) #4
  %203 = load i32*, i32** %155, align 8
  %204 = getelementptr inbounds i32, i32* %203, i64 %174
  store i32 %202, i32* %204, align 4
  %205 = add nsw i64 %174, 1
  %206 = add nuw nsw i64 %175, 1
  %207 = icmp eq i64 %206, %157
  br i1 %207, label %170, label %173
}

declare i32 @aom_vector_setup(%struct.Vector*, i64, i64) local_unnamed_addr #1

declare i32 @aom_vector_push_back(%struct.Vector*, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
