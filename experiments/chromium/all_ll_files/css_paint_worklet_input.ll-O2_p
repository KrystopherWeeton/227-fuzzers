; ModuleID = '../../third_party/blink/renderer/core/css/cssom/css_paint_worklet_input.cc'
source_filename = "../../third_party/blink/renderer/core/css/cssom/css_paint_worklet_input.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CSSPaintWorkletInput" = type { %"class.blink::PaintWorkletInput", %"class.WTF::String", float, float, %"class.WTF::HashMap", %"class.WTF::Vector" }
%"class.blink::PaintWorkletInput" = type { %"class.cc::PaintWorkletInput.base", %"class.blink::FloatSize", i32, %"class.std::__1::vector" }
%"class.cc::PaintWorkletInput.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::FloatSize" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"*, %"class.std::__1::__compressed_pair.8" }
%"struct.cc::PaintWorkletInput::PropertyKey" = type { %"class.absl::optional", %"class.absl::optional.3", %"struct.cc::ElementId" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.3" = type { %"class.absl::optional_internal::optional_data.4" }
%"class.absl::optional_internal::optional_data.4" = type { %"class.absl::optional_internal::optional_data_base.5" }
%"class.absl::optional_internal::optional_data_base.5" = type { %"class.absl::optional_internal::optional_data_dtor_base.6" }
%"class.absl::optional_internal::optional_data_dtor_base.6" = type { i8, %union.anon.7 }
%union.anon.7 = type { i32 }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.cc::PaintWorkletInput::PropertyKey"* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.13" }
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__cxx_atomic_impl.16" }
%"struct.std::__1::__cxx_atomic_impl.16" = type { %"struct.std::__1::__cxx_atomic_base_impl.17" }
%"struct.std::__1::__cxx_atomic_base_impl.17" = type { i32 }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.blink::CrossThreadStyleValue"* }
%"class.blink::CrossThreadStyleValue" = type { i32 (...)** }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK5blink17PaintWorkletInput7GetSizeEv = comdat any

$_ZNK5blink17PaintWorkletInput9WorkletIdEv = comdat any

$_ZNK5blink17PaintWorkletInput15GetPropertyKeysEv = comdat any

$_ZN5blink20CSSPaintWorkletInputD2Ev = comdat any

$_ZN5blink20CSSPaintWorkletInputD0Ev = comdat any

$_ZN5blink17PaintWorkletInputD2Ev = comdat any

$_ZN5blink17PaintWorkletInputD0Ev = comdat any

$_ZTVN5blink20CSSPaintWorkletInputE = comdat any

$_ZTVN5blink17PaintWorkletInputE = comdat any

@_ZTVN5blink20CSSPaintWorkletInputE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (<2 x float> (%"class.blink::PaintWorkletInput"*)* @_ZNK5blink17PaintWorkletInput7GetSizeEv to i8*), i8* bitcast (i32 (%"class.blink::PaintWorkletInput"*)* @_ZNK5blink17PaintWorkletInput9WorkletIdEv to i8*), i8* bitcast (%"class.std::__1::vector"* (%"class.blink::PaintWorkletInput"*)* @_ZNK5blink17PaintWorkletInput15GetPropertyKeysEv to i8*), i8* bitcast (void (%"class.blink::CSSPaintWorkletInput"*)* @_ZN5blink20CSSPaintWorkletInputD2Ev to i8*), i8* bitcast (void (%"class.blink::CSSPaintWorkletInput"*)* @_ZN5blink20CSSPaintWorkletInputD0Ev to i8*)] }, comdat, align 8
@_ZTVN5blink17PaintWorkletInputE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (<2 x float> (%"class.blink::PaintWorkletInput"*)* @_ZNK5blink17PaintWorkletInput7GetSizeEv to i8*), i8* bitcast (i32 (%"class.blink::PaintWorkletInput"*)* @_ZNK5blink17PaintWorkletInput9WorkletIdEv to i8*), i8* bitcast (%"class.std::__1::vector"* (%"class.blink::PaintWorkletInput"*)* @_ZNK5blink17PaintWorkletInput15GetPropertyKeysEv to i8*), i8* bitcast (void (%"class.blink::PaintWorkletInput"*)* @_ZN5blink17PaintWorkletInputD2Ev to i8*), i8* bitcast (void (%"class.blink::PaintWorkletInput"*)* @_ZN5blink17PaintWorkletInputD0Ev to i8*)] }, comdat, align 8

@_ZN5blink20CSSPaintWorkletInputC1ERKN3WTF6StringERKNS_9FloatSizeEffiNS1_7HashMapIS2_NSt3__110unique_ptrINS_21CrossThreadStyleValueENS9_14default_deleteISB_EEEENS1_10StringHashENS1_10HashTraitsIS2_EENSG_ISE_EENS1_18PartitionAllocatorEEENS1_6VectorISE_Lj0ESJ_EENS9_6vectorIN2cc17PaintWorkletInput11PropertyKeyENS9_9allocatorISQ_EEEE = hidden unnamed_addr alias void (%"class.blink::CSSPaintWorkletInput"*, %"class.WTF::String"*, %"class.blink::FloatSize"*, float, float, i32, %"class.WTF::HashMap"*, %"class.WTF::Vector"*, %"class.std::__1::vector"*), void (%"class.blink::CSSPaintWorkletInput"*, %"class.WTF::String"*, %"class.blink::FloatSize"*, float, float, i32, %"class.WTF::HashMap"*, %"class.WTF::Vector"*, %"class.std::__1::vector"*)* @_ZN5blink20CSSPaintWorkletInputC2ERKN3WTF6StringERKNS_9FloatSizeEffiNS1_7HashMapIS2_NSt3__110unique_ptrINS_21CrossThreadStyleValueENS9_14default_deleteISB_EEEENS1_10StringHashENS1_10HashTraitsIS2_EENSG_ISE_EENS1_18PartitionAllocatorEEENS1_6VectorISE_Lj0ESJ_EENS9_6vectorIN2cc17PaintWorkletInput11PropertyKeyENS9_9allocatorISQ_EEEE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20CSSPaintWorkletInputC2ERKN3WTF6StringERKNS_9FloatSizeEffiNS1_7HashMapIS2_NSt3__110unique_ptrINS_21CrossThreadStyleValueENS9_14default_deleteISB_EEEENS1_10StringHashENS1_10HashTraitsIS2_EENSG_ISE_EENS1_18PartitionAllocatorEEENS1_6VectorISE_Lj0ESJ_EENS9_6vectorIN2cc17PaintWorkletInput11PropertyKeyENS9_9allocatorISQ_EEEE(%"class.blink::CSSPaintWorkletInput"* nocapture, %"class.WTF::String"* dereferenceable(8), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8), float, float, i32, %"class.WTF::HashMap"* nocapture, %"class.WTF::Vector"* nocapture, %"class.std::__1::vector"* nocapture readonly) unnamed_addr #0 align 2 {
  %10 = alloca %"class.std::__1::vector", align 8
  %11 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %13 = bitcast %"struct.cc::PaintWorkletInput::PropertyKey"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %8 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = sdiv exact i64 %17, 48
  %19 = icmp eq i64 %17, 0
  %20 = inttoptr i64 %16 to %"struct.cc::PaintWorkletInput::PropertyKey"*
  %21 = inttoptr i64 %14 to %"struct.cc::PaintWorkletInput::PropertyKey"*
  br i1 %19, label %48, label %22

22:                                               ; preds = %9
  %23 = icmp ugt i64 %18, 384307168202282325
  br i1 %23, label %24, label %26

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %25) #9
  unreachable

26:                                               ; preds = %22
  %27 = tail call i8* @_Znwm(i64 %17) #10
  %28 = bitcast i8* %27 to %"struct.cc::PaintWorkletInput::PropertyKey"*
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %30 = bitcast %"struct.cc::PaintWorkletInput::PropertyKey"** %29 to i8**
  store i8* %27, i8** %30, align 8
  %31 = bitcast %"class.std::__1::vector"* %10 to i8**
  store i8* %27, i8** %31, align 8
  %32 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %28, i64 %18
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.cc::PaintWorkletInput::PropertyKey"* %32, %"struct.cc::PaintWorkletInput::PropertyKey"** %33, align 8
  %34 = bitcast %"struct.cc::PaintWorkletInput::PropertyKey"** %29 to i64*
  %35 = ptrtoint i8* %27 to i64
  %36 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %20, %21
  %37 = ptrtoint %"struct.cc::PaintWorkletInput::PropertyKey"* %32 to i64
  br i1 %36, label %46, label %38

38:                                               ; preds = %26, %38
  %39 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %42, %38 ], [ %28, %26 ]
  %40 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %41, %38 ], [ %20, %26 ]
  tail call void @_ZN2cc17PaintWorkletInput11PropertyKeyC1ERKS1_(%"struct.cc::PaintWorkletInput::PropertyKey"* %39, %"struct.cc::PaintWorkletInput::PropertyKey"* dereferenceable(48) %40) #8
  %41 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %40, i64 1
  %42 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %39, i64 1
  %43 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %41, %21
  br i1 %43, label %44, label %38

44:                                               ; preds = %38
  %45 = ptrtoint %"struct.cc::PaintWorkletInput::PropertyKey"* %42 to i64
  br label %46

46:                                               ; preds = %44, %26
  %47 = phi i64 [ %35, %26 ], [ %45, %44 ]
  store i64 %47, i64* %34, align 8
  br label %48

48:                                               ; preds = %46, %9
  %49 = phi i64 [ %37, %46 ], [ 0, %9 ]
  %50 = phi i64 [ %47, %46 ], [ 0, %9 ]
  %51 = phi i64 [ %35, %46 ], [ 0, %9 ]
  %52 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink17PaintWorkletInputE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %54 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 1
  %55 = bitcast %"class.blink::FloatSize"* %2 to i64*
  %56 = bitcast %"class.blink::FloatSize"* %54 to i64*
  %57 = load i64, i64* %55, align 4
  store i64 %57, i64* %56, align 4
  %58 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 2
  store i32 %5, i32* %58, align 4
  %59 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 3
  %60 = bitcast %"class.std::__1::vector"* %59 to i64*
  store i64 %51, i64* %60, align 8
  %61 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %62 = bitcast %"struct.cc::PaintWorkletInput::PropertyKey"** %61 to i64*
  store i64 %50, i64* %62, align 8
  %63 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %64 = bitcast %"struct.cc::PaintWorkletInput::PropertyKey"** %63 to i64*
  store i64 %49, i64* %64, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink20CSSPaintWorkletInputE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %53, align 8
  %65 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"* %1) #8
  %66 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %65, %"class.WTF::StringImpl"** %66, align 8
  %67 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 2
  store float %3, float* %67, align 8
  %68 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 3
  store float %4, float* %68, align 4
  %69 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 4
  %70 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 4, i32 0, i32 1
  %71 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 4, i32 0, i32 2
  %72 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 4, i32 0, i32 3
  %73 = bitcast %"class.WTF::HashMap"* %6 to i64*
  %74 = bitcast %"class.WTF::HashMap"* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 20, i1 false) #8
  %75 = load i64, i64* %73, align 8
  %76 = bitcast %"class.WTF::HashMap"* %69 to i64*
  store atomic i64 0, i64* %73 monotonic, align 8
  store atomic i64 %75, i64* %76 monotonic, align 8
  %77 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0, i32 1
  %78 = load i32, i32* %70, align 4
  %79 = load i32, i32* %77, align 4
  store i32 %79, i32* %70, align 4
  store i32 %78, i32* %77, align 4
  %80 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0, i32 2
  %81 = load i32, i32* %71, align 4
  %82 = load i32, i32* %80, align 4
  store i32 %82, i32* %71, align 4
  store i32 %81, i32* %80, align 4
  %83 = load i32, i32* %72, align 8
  %84 = and i32 %83, 2147483647
  %85 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %6, i64 0, i32 0, i32 3
  %86 = load i32, i32* %85, align 8
  %87 = and i32 %86, 2147483647
  %88 = and i32 %83, -2147483648
  %89 = or i32 %87, %88
  store i32 %89, i32* %72, align 8
  %90 = load i32, i32* %85, align 8
  %91 = and i32 %90, -2147483648
  %92 = or i32 %91, %84
  store i32 %92, i32* %85, align 8
  %93 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 5
  %94 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %95 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %96 = bitcast %"class.WTF::Vector"* %7 to i64*
  %97 = bitcast %"class.WTF::Vector"* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 16, i1 false) #8
  %98 = load i64, i64* %96, align 8
  %99 = bitcast %"class.WTF::Vector"* %93 to i64*
  store atomic i64 0, i64* %96 monotonic, align 8
  store atomic i64 %98, i64* %99 monotonic, align 8
  %100 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 1
  %101 = load i32, i32* %94, align 4
  %102 = load i32, i32* %100, align 4
  store i32 %102, i32* %94, align 4
  store i32 %101, i32* %100, align 4
  %103 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %7, i64 0, i32 0, i32 0, i32 2
  %104 = load i32, i32* %95, align 4
  %105 = load i32, i32* %103, align 4
  store i32 %105, i32* %95, align 4
  store i32 %104, i32* %103, align 4
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String12IsolatedCopyEv(%"class.WTF::String"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden <2 x float> @_ZNK5blink17PaintWorkletInput7GetSizeEv(%"class.blink::PaintWorkletInput"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 1, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 1, i32 1
  %5 = load float, float* %4, align 4
  %6 = fcmp ogt float %3, 0x3EB0000000000000
  %7 = select i1 %6, float %3, float 0.000000e+00
  %8 = insertelement <2 x float> undef, float %7, i32 0
  %9 = fcmp ogt float %5, 0x3EB0000000000000
  %10 = select i1 %9, float %5, float 0.000000e+00
  %11 = insertelement <2 x float> %8, float %10, i32 1
  ret <2 x float> %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink17PaintWorkletInput9WorkletIdEv(%"class.blink::PaintWorkletInput"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::vector"* @_ZNK5blink17PaintWorkletInput15GetPropertyKeysEv(%"class.blink::PaintWorkletInput"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 3
  ret %"class.std::__1::vector"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20CSSPaintWorkletInputD2Ev(%"class.blink::CSSPaintWorkletInput"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink20CSSPaintWorkletInputE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %5, null
  br i1 %6, label %33, label %7, !prof !2

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::unique_ptr"* %5 to i8*
  %9 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %31, label %12, !prof !3

12:                                               ; preds = %7
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 %13
  br label %15

15:                                               ; preds = %25, %12
  %16 = phi %"class.std::__1::unique_ptr"* [ %26, %25 ], [ %5, %12 ]
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.blink::CrossThreadStyleValue"*, %"class.blink::CrossThreadStyleValue"** %17, align 8
  store %"class.blink::CrossThreadStyleValue"* null, %"class.blink::CrossThreadStyleValue"** %17, align 8
  %19 = icmp eq %"class.blink::CrossThreadStyleValue"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.blink::CrossThreadStyleValue"* %18 to void (%"class.blink::CrossThreadStyleValue"*)***
  %22 = load void (%"class.blink::CrossThreadStyleValue"*)**, void (%"class.blink::CrossThreadStyleValue"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.blink::CrossThreadStyleValue"*)*, void (%"class.blink::CrossThreadStyleValue"*)** %22, i64 1
  %24 = load void (%"class.blink::CrossThreadStyleValue"*)*, void (%"class.blink::CrossThreadStyleValue"*)** %23, align 8
  tail call void %24(%"class.blink::CrossThreadStyleValue"* nonnull %18) #8
  br label %25

25:                                               ; preds = %20, %15
  %26 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 1
  %27 = icmp eq %"class.std::__1::unique_ptr"* %26, %14
  br i1 %27, label %28, label %15

28:                                               ; preds = %25
  store i32 0, i32* %9, align 4
  %29 = bitcast %"class.WTF::Vector"* %3 to i8**
  %30 = load i8*, i8** %29, align 8
  br label %31

31:                                               ; preds = %28, %7
  %32 = phi i8* [ %30, %28 ], [ %8, %7 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %32) #8
  store %"class.std::__1::unique_ptr"* null, %"class.std::__1::unique_ptr"** %4, align 8
  br label %33

33:                                               ; preds = %1, %31
  %34 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 4, i32 0, i32 0
  %35 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %34, align 8
  %36 = icmp eq %"struct.WTF::KeyValuePair"* %35, null
  br i1 %36, label %82, label %37, !prof !2

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 4, i32 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %80, label %41

41:                                               ; preds = %37
  %42 = zext i32 %39 to i64
  br label %43

43:                                               ; preds = %77, %41
  %44 = phi i64 [ 0, %41 ], [ %78, %77 ]
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %44
  %46 = bitcast %"struct.WTF::KeyValuePair"* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %77, label %49

49:                                               ; preds = %43
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %44, i32 1, i32 0, i32 0, i32 0
  %52 = load %"class.blink::CrossThreadStyleValue"*, %"class.blink::CrossThreadStyleValue"** %51, align 8
  store %"class.blink::CrossThreadStyleValue"* null, %"class.blink::CrossThreadStyleValue"** %51, align 8
  %53 = icmp eq %"class.blink::CrossThreadStyleValue"* %52, null
  br i1 %53, label %61, label %54

54:                                               ; preds = %49
  %55 = bitcast %"class.blink::CrossThreadStyleValue"* %52 to void (%"class.blink::CrossThreadStyleValue"*)***
  %56 = load void (%"class.blink::CrossThreadStyleValue"*)**, void (%"class.blink::CrossThreadStyleValue"*)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.blink::CrossThreadStyleValue"*)*, void (%"class.blink::CrossThreadStyleValue"*)** %56, i64 1
  %58 = load void (%"class.blink::CrossThreadStyleValue"*)*, void (%"class.blink::CrossThreadStyleValue"*)** %57, align 8
  tail call void %58(%"class.blink::CrossThreadStyleValue"* nonnull %52) #8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  br label %61

61:                                               ; preds = %54, %49
  %62 = phi %"class.WTF::StringImpl"* [ %60, %54 ], [ %50, %49 ]
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  br i1 %68, label %71, label %73

71:                                               ; preds = %64
  %72 = add i32 %70, -1
  store i32 %72, i32* %69, align 4
  br label %73

73:                                               ; preds = %71, %64
  %74 = phi i32 [ %72, %71 ], [ %70, %64 ]
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #8
  br label %77

77:                                               ; preds = %76, %73, %61, %43
  %78 = add nuw nsw i64 %44, 1
  %79 = icmp eq i64 %78, %42
  br i1 %79, label %80, label %43

80:                                               ; preds = %77, %37
  %81 = bitcast %"struct.WTF::KeyValuePair"* %35 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %81) #8
  store %"struct.WTF::KeyValuePair"* null, %"struct.WTF::KeyValuePair"** %34, align 8
  br label %82

82:                                               ; preds = %33, %80
  %83 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 1, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %99, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #8
  br label %99

99:                                               ; preds = %82, %95, %98
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink17PaintWorkletInputE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %100 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %101 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %100, align 8
  %102 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %101, null
  br i1 %102, label %116, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.blink::CSSPaintWorkletInput", %"class.blink::CSSPaintWorkletInput"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %105 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %104, align 8
  %106 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %105, %101
  br i1 %106, label %113, label %107

107:                                              ; preds = %103, %107
  %108 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %109, %107 ], [ %105, %103 ]
  %109 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %108, i64 -1
  tail call void @_ZN2cc17PaintWorkletInput11PropertyKeyD1Ev(%"struct.cc::PaintWorkletInput::PropertyKey"* %109) #8
  %110 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %109, %101
  br i1 %110, label %111, label %107

111:                                              ; preds = %107
  %112 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %100, align 8
  br label %113

113:                                              ; preds = %111, %103
  %114 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %112, %111 ], [ %101, %103 ]
  store %"struct.cc::PaintWorkletInput::PropertyKey"* %101, %"struct.cc::PaintWorkletInput::PropertyKey"** %104, align 8
  %115 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %114, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %115) #10
  br label %116

116:                                              ; preds = %99, %113
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20CSSPaintWorkletInputD0Ev(%"class.blink::CSSPaintWorkletInput"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN5blink20CSSPaintWorkletInputD2Ev(%"class.blink::CSSPaintWorkletInput"* %0) #8
  %2 = bitcast %"class.blink::CSSPaintWorkletInput"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17PaintWorkletInputD2Ev(%"class.blink::PaintWorkletInput"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink17PaintWorkletInputE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %3, align 8
  %5 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %7, align 8
  %9 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %8, %4
  br i1 %9, label %16, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %12, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %11, i64 -1
  tail call void @_ZN2cc17PaintWorkletInput11PropertyKeyD1Ev(%"struct.cc::PaintWorkletInput::PropertyKey"* %12) #8
  %13 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %12, %4
  br i1 %13, label %14, label %10

14:                                               ; preds = %10
  %15 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %3, align 8
  br label %16

16:                                               ; preds = %14, %6
  %17 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %15, %14 ], [ %4, %6 ]
  store %"struct.cc::PaintWorkletInput::PropertyKey"* %4, %"struct.cc::PaintWorkletInput::PropertyKey"** %7, align 8
  %18 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %1, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17PaintWorkletInputD0Ev(%"class.blink::PaintWorkletInput"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink17PaintWorkletInputE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %3, align 8
  %5 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::PaintWorkletInput", %"class.blink::PaintWorkletInput"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %7, align 8
  %9 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %8, %4
  br i1 %9, label %16, label %10

10:                                               ; preds = %6, %10
  %11 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %12, %10 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %11, i64 -1
  tail call void @_ZN2cc17PaintWorkletInput11PropertyKeyD1Ev(%"struct.cc::PaintWorkletInput::PropertyKey"* %12) #8
  %13 = icmp eq %"struct.cc::PaintWorkletInput::PropertyKey"* %12, %4
  br i1 %13, label %14, label %10

14:                                               ; preds = %10
  %15 = load %"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"** %3, align 8
  br label %16

16:                                               ; preds = %14, %6
  %17 = phi %"struct.cc::PaintWorkletInput::PropertyKey"* [ %15, %14 ], [ %4, %6 ]
  store %"struct.cc::PaintWorkletInput::PropertyKey"* %4, %"struct.cc::PaintWorkletInput::PropertyKey"** %7, align 8
  %18 = getelementptr inbounds %"struct.cc::PaintWorkletInput::PropertyKey", %"struct.cc::PaintWorkletInput::PropertyKey"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %1, %16
  %20 = bitcast %"class.blink::PaintWorkletInput"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2cc17PaintWorkletInput11PropertyKeyD1Ev(%"struct.cc::PaintWorkletInput::PropertyKey"*) unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN2cc17PaintWorkletInput11PropertyKeyC1ERKS1_(%"struct.cc::PaintWorkletInput::PropertyKey"*, %"struct.cc::PaintWorkletInput::PropertyKey"* dereferenceable(48)) unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
