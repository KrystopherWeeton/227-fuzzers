; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_alloccommon.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_alloccommon.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_set_mi_size(i32* nocapture, i32* nocapture, i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %3, 7
  %7 = add nsw i32 %4, 7
  %8 = ashr i32 %6, 3
  store i32 %8, i32* %1, align 4
  %9 = ashr i32 %7, 3
  store i32 %9, i32* %0, align 4
  %10 = load i32, i32* %1, align 4
  %11 = add nsw i32 %10, 8
  store i32 %11, i32* %2, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_set_mb_size(i32* nocapture, i32* nocapture, i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %4, 1
  %7 = ashr i32 %6, 1
  store i32 %7, i32* %1, align 4
  %8 = add nsw i32 %3, 1
  %9 = ashr i32 %8, 1
  store i32 %9, i32* %0, align 4
  %10 = load i32, i32* %1, align 4
  %11 = mul nsw i32 %10, %9
  store i32 %11, i32* %2, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_set_mb_mi(%struct.VP9Common* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %7 = add nsw i32 %1, 7
  %8 = add nsw i32 %2, 7
  %9 = ashr i32 %7, 3
  store i32 %9, i32* %5, align 4
  %10 = ashr i32 %8, 3
  store i32 %10, i32* %4, align 4
  %11 = add nsw i32 %9, 8
  store i32 %11, i32* %6, align 4
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 32
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 34
  %14 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 31
  %15 = add nsw i32 %9, 1
  %16 = ashr i32 %15, 1
  store i32 %16, i32* %13, align 4
  %17 = add nsw i32 %10, 1
  %18 = ashr i32 %17, 1
  store i32 %18, i32* %12, align 4
  %19 = mul nsw i32 %18, %16
  store i32 %19, i32* %14, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_free_ref_frame_buffers(%struct.BufferPool*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 2
  %3 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 0
  br label %4

4:                                                ; preds = %19, %1
  %5 = phi i64 [ 0, %1 ], [ %25, %19 ]
  %6 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 3, i64 %5, i32 4
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 3, i64 %5, i32 7
  %11 = getelementptr inbounds %struct.vpx_codec_frame_buffer, %struct.vpx_codec_frame_buffer* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %9
  %15 = load i32 (i8*, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)** %2, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = tail call i32 %15(i8* %16, %struct.vpx_codec_frame_buffer* %10) #4
  %18 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 3, i64 %5, i32 0
  store i32 0, i32* %18, align 8
  store i8 1, i8* %6, align 8
  br label %19

19:                                               ; preds = %9, %4, %14
  %20 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 3, i64 %5, i32 1
  %21 = bitcast %struct.MV_REF** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  tail call void @vpx_free(i8* %22) #4
  store %struct.MV_REF* null, %struct.MV_REF** %20, align 8
  %23 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %0, i64 0, i32 3, i64 %5, i32 8
  %24 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %23) #4
  %25 = add nuw nsw i64 %5, 1
  %26 = icmp eq i64 %25, 12
  br i1 %26, label %27, label %4

27:                                               ; preds = %19
  ret void
}

declare void @vpx_free(i8*) local_unnamed_addr #2

declare i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_free_postproc_buffers(%struct.VP9Common*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20
  %3 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %2) #4
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21
  %5 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %4) #4
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %7 = load i8*, i8** %6, align 8
  tail call void @vpx_free(i8* %7) #4
  store i8* null, i8** %6, align 8
  %8 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 8
  %9 = load i8*, i8** %8, align 8
  tail call void @vpx_free(i8* %9) #4
  store i8* null, i8** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_free_context_buffers(%struct.VP9Common*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 50
  %3 = load void (%struct.VP9Common*)*, void (%struct.VP9Common*)** %2, align 16
  tail call void %3(%struct.VP9Common* %0) #4
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 0
  %5 = load i8*, i8** %4, align 8
  tail call void @vpx_free(i8* %5) #4
  store i8* null, i8** %4, align 8
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 1
  %7 = load i8*, i8** %6, align 8
  tail call void @vpx_free(i8* %7) #4
  %8 = bitcast i8** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #4
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 91
  %10 = load i8*, i8** %9, align 8
  tail call void @vpx_free(i8* %10) #4
  store i8* null, i8** %9, align 8
  %11 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 90
  %12 = load i8*, i8** %11, align 16
  tail call void @vpx_free(i8* %12) #4
  store i8* null, i8** %11, align 16
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %14 = bitcast %struct.LOOP_FILTER_MASK** %13 to i8**
  %15 = load i8*, i8** %14, align 8
  tail call void @vpx_free(i8* %15) #4
  store %struct.LOOP_FILTER_MASK* null, %struct.LOOP_FILTER_MASK** %13, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_alloc_loop_filter(%struct.VP9Common* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %3 = bitcast %struct.LOOP_FILTER_MASK** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @vpx_free(i8* %4) #4
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, 7
  %8 = ashr i32 %7, 3
  %9 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 11
  store i32 %8, i32* %9, align 8
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %11 = load i32, i32* %10, align 16
  %12 = add nsw i32 %11, 7
  %13 = ashr i32 %12, 3
  %14 = mul nsw i32 %13, %8
  %15 = sext i32 %14 to i64
  %16 = tail call i8* @vpx_calloc(i64 %15, i64 160) #4
  store i8* %16, i8** %3, align 8
  %17 = icmp eq i8* %16, null
  %18 = zext i1 %17 to i32
  ret i32 %18
}

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_alloc_context_buffers(%struct.VP9Common*, i32, i32) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 36
  %7 = add nsw i32 %1, 7
  %8 = add nsw i32 %2, 7
  %9 = ashr i32 %7, 3
  store i32 %9, i32* %5, align 4
  %10 = ashr i32 %8, 3
  store i32 %10, i32* %4, align 4
  %11 = add nsw i32 %9, 8
  store i32 %11, i32* %6, align 4
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 32
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 34
  %14 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 31
  %15 = add nsw i32 %9, 1
  %16 = ashr i32 %15, 1
  store i32 %16, i32* %13, align 4
  %17 = add nsw i32 %10, 1
  %18 = ashr i32 %17, 1
  store i32 %18, i32* %12, align 4
  %19 = mul nsw i32 %18, %16
  store i32 %19, i32* %14, align 4
  %20 = add nsw i32 %10, 8
  %21 = mul nsw i32 %20, %11
  %22 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 44
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, %21
  br i1 %24, label %25, label %35

25:                                               ; preds = %3
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 50
  %27 = load void (%struct.VP9Common*)*, void (%struct.VP9Common*)** %26, align 16
  tail call void %27(%struct.VP9Common* %0) #4
  %28 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 49
  %29 = load i32 (%struct.VP9Common*, i32)*, i32 (%struct.VP9Common*, i32)** %28, align 8
  %30 = tail call i32 %29(%struct.VP9Common* %0, i32 %21) #4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %110

32:                                               ; preds = %25
  %33 = load i32, i32* %4, align 16
  %34 = load i32, i32* %5, align 8
  br label %35

35:                                               ; preds = %32, %3
  %36 = phi i32 [ %34, %32 ], [ %9, %3 ]
  %37 = phi i32 [ %33, %32 ], [ %10, %3 ]
  %38 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 62
  %39 = load i32, i32* %38, align 16
  %40 = mul nsw i32 %36, %37
  %41 = icmp slt i32 %39, %40
  br i1 %41, label %42, label %69

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 0
  %44 = load i8*, i8** %43, align 8
  tail call void @vpx_free(i8* %44) #4
  store i8* null, i8** %43, align 8
  %45 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 1
  %46 = load i8*, i8** %45, align 8
  tail call void @vpx_free(i8* %46) #4
  %47 = bitcast i8** %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #4
  %48 = load i32, i32* %4, align 16
  %49 = load i32, i32* %5, align 8
  %50 = mul nsw i32 %49, %48
  %51 = sext i32 %50 to i64
  %52 = tail call i8* @vpx_calloc(i64 %51, i64 1) #4
  store i8* %52, i8** %43, align 8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %110, label %54

54:                                               ; preds = %42
  %55 = tail call i8* @vpx_calloc(i64 %51, i64 1) #4
  store i8* %55, i8** %45, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %110, label %57

57:                                               ; preds = %54
  %58 = ptrtoint i8* %55 to i64
  store i32 %50, i32* %38, align 16
  %59 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 57
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 58
  store i32 1, i32* %60, align 8
  %61 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59
  %62 = bitcast [2 x i8*]* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 61
  %65 = bitcast i8** %64 to i64*
  store i64 %63, i64* %65, align 8
  %66 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 60
  %67 = bitcast i8** %66 to i64*
  store i64 %58, i64* %67, align 16
  %68 = load i32, i32* %5, align 8
  br label %69

69:                                               ; preds = %57, %35
  %70 = phi i32 [ %68, %57 ], [ %36, %35 ]
  %71 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 92
  %72 = load i32, i32* %71, align 16
  %73 = icmp slt i32 %72, %70
  br i1 %73, label %74, label %95

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 91
  %76 = load i8*, i8** %75, align 8
  tail call void @vpx_free(i8* %76) #4
  %77 = load i32, i32* %5, align 8
  %78 = add nsw i32 %77, 7
  %79 = and i32 %78, -8
  %80 = mul nsw i32 %79, 6
  %81 = sext i32 %80 to i64
  %82 = tail call i8* @vpx_calloc(i64 %81, i64 1) #4
  store i8* %82, i8** %75, align 8
  %83 = icmp eq i8* %82, null
  br i1 %83, label %110, label %84

84:                                               ; preds = %74
  %85 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 90
  %86 = load i8*, i8** %85, align 16
  tail call void @vpx_free(i8* %86) #4
  %87 = load i32, i32* %5, align 8
  %88 = add nsw i32 %87, 7
  %89 = and i32 %88, -8
  %90 = sext i32 %89 to i64
  %91 = tail call i8* @vpx_calloc(i64 %90, i64 1) #4
  store i8* %91, i8** %85, align 16
  %92 = icmp eq i8* %91, null
  br i1 %92, label %110, label %93

93:                                               ; preds = %84
  %94 = load i32, i32* %5, align 8
  store i32 %94, i32* %71, align 16
  br label %95

95:                                               ; preds = %93, %69
  %96 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %97 = bitcast %struct.LOOP_FILTER_MASK** %96 to i8**
  %98 = load i8*, i8** %97, align 8
  tail call void @vpx_free(i8* %98) #4
  %99 = load i32, i32* %5, align 8
  %100 = add nsw i32 %99, 7
  %101 = ashr i32 %100, 3
  %102 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 11
  store i32 %101, i32* %102, align 8
  %103 = load i32, i32* %4, align 16
  %104 = add nsw i32 %103, 7
  %105 = ashr i32 %104, 3
  %106 = mul nsw i32 %105, %101
  %107 = sext i32 %106 to i64
  %108 = tail call i8* @vpx_calloc(i64 %107, i64 160) #4
  store i8* %108, i8** %97, align 8
  %109 = icmp eq i8* %108, null
  br i1 %109, label %110, label %126

110:                                              ; preds = %95, %42, %54, %25, %84, %74
  store i32 0, i32* %5, align 4
  store i32 8, i32* %6, align 4
  %111 = bitcast i32* %14 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %111, align 4
  %112 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 50
  %113 = load void (%struct.VP9Common*)*, void (%struct.VP9Common*)** %112, align 16
  tail call void %113(%struct.VP9Common* %0) #4
  %114 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 0
  %115 = load i8*, i8** %114, align 8
  tail call void @vpx_free(i8* %115) #4
  store i8* null, i8** %114, align 8
  %116 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 1
  %117 = load i8*, i8** %116, align 8
  tail call void @vpx_free(i8* %117) #4
  %118 = bitcast i8** %116 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 24, i1 false) #4
  %119 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 91
  %120 = load i8*, i8** %119, align 8
  tail call void @vpx_free(i8* %120) #4
  store i8* null, i8** %119, align 8
  %121 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 90
  %122 = load i8*, i8** %121, align 16
  tail call void @vpx_free(i8* %122) #4
  store i8* null, i8** %121, align 16
  %123 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %124 = bitcast %struct.LOOP_FILTER_MASK** %123 to i8**
  %125 = load i8*, i8** %124, align 8
  tail call void @vpx_free(i8* %125) #4
  store %struct.LOOP_FILTER_MASK* null, %struct.LOOP_FILTER_MASK** %123, align 8
  br label %126

126:                                              ; preds = %95, %110
  %127 = phi i32 [ 1, %110 ], [ 0, %95 ]
  ret i32 %127
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_remove_common(%struct.VP9Common*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 20
  %3 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %2) #4
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 21
  %5 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %4) #4
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 7
  %7 = load i8*, i8** %6, align 8
  tail call void @vpx_free(i8* %7) #4
  store i8* null, i8** %6, align 8
  %8 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 82, i32 8
  %9 = load i8*, i8** %8, align 8
  tail call void @vpx_free(i8* %9) #4
  store i8* null, i8** %8, align 8
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 50
  %11 = load void (%struct.VP9Common*)*, void (%struct.VP9Common*)** %10, align 16
  tail call void %11(%struct.VP9Common* %0) #4
  %12 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 0
  %13 = load i8*, i8** %12, align 8
  tail call void @vpx_free(i8* %13) #4
  store i8* null, i8** %12, align 8
  %14 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 1
  %15 = load i8*, i8** %14, align 8
  tail call void @vpx_free(i8* %15) #4
  %16 = bitcast i8** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #4
  %17 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 91
  %18 = load i8*, i8** %17, align 8
  tail call void @vpx_free(i8* %18) #4
  store i8* null, i8** %17, align 8
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 90
  %20 = load i8*, i8** %19, align 16
  tail call void @vpx_free(i8* %20) #4
  store i8* null, i8** %19, align 16
  %21 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 68, i32 10
  %22 = bitcast %struct.LOOP_FILTER_MASK** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @vpx_free(i8* %23) #4
  store %struct.LOOP_FILTER_MASK* null, %struct.LOOP_FILTER_MASK** %21, align 8
  %24 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %25 = bitcast %struct.frame_contexts** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @vpx_free(i8* %26) #4
  store %struct.frame_contexts* null, %struct.frame_contexts** %24, align 8
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 74
  %28 = bitcast %struct.frame_contexts** %27 to i8**
  %29 = load i8*, i8** %28, align 16
  tail call void @vpx_free(i8* %29) #4
  store %struct.frame_contexts* null, %struct.frame_contexts** %27, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_init_context_buffers(%struct.VP9Common*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 51
  %3 = load void (%struct.VP9Common*)*, void (%struct.VP9Common*)** %2, align 8
  tail call void %3(%struct.VP9Common* %0) #4
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 60
  %5 = load i8*, i8** %4, align 16
  %6 = icmp eq i8* %5, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %9 = load i32, i32* %8, align 16
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %11 = load i32, i32* %10, align 8
  %12 = mul nsw i32 %11, %9
  %13 = sext i32 %12 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 0, i64 %13, i1 false)
  br label %14

14:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_swap_current_and_last_seg_map(%struct.VP9Common* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 57
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 58
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %2, align 4
  store i32 %3, i32* %4, align 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 %6
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 61
  %11 = bitcast i8** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = sext i32 %3 to i64
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 59, i64 %12
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 60
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 16
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
