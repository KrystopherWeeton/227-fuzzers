; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_quantize_sse2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_quantize_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_sse2(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %13 = getelementptr inbounds i32, i32* %0, i64 %1
  %14 = getelementptr inbounds i16, i16* %11, i64 %1
  %15 = getelementptr inbounds i32, i32* %6, i64 %1
  %16 = getelementptr inbounds i32, i32* %7, i64 %1
  %17 = bitcast i16* %3 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 16
  %19 = shufflevector <2 x i64> %18, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %20 = bitcast i16* %4 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 16
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %23 = bitcast i16* %8 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 16
  %25 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %26 = bitcast <2 x i64> %24 to <8 x i16>
  %27 = ashr <8 x i16> %26, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %28 = bitcast <2 x i64> %25 to <8 x i16>
  %29 = ashr <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = bitcast i32* %0 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = getelementptr inbounds i32, i32* %0, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 8
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = getelementptr inbounds i32, i32* %0, i64 12
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %31, <4 x i32> %34) #4
  %42 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %37, <4 x i32> %40) #4
  %43 = ashr <8 x i16> %41, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %44 = ashr <8 x i16> %42, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %45 = xor <8 x i16> %43, %41
  %46 = xor <8 x i16> %44, %42
  %47 = sub <8 x i16> %45, %43
  %48 = sub <8 x i16> %46, %44
  %49 = icmp sge <8 x i16> %47, %27
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = icmp sge <8 x i16> %48, %29
  %52 = sext <8 x i1> %51 to <8 x i16>
  %53 = bitcast <8 x i16> %50 to <16 x i8>
  %54 = icmp slt <16 x i8> %53, zeroinitializer
  %55 = bitcast <8 x i16> %52 to <16 x i8>
  %56 = icmp slt <16 x i8> %55, zeroinitializer
  %57 = or <16 x i1> %56, %54
  %58 = bitcast <16 x i1> %57 to i16
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %119, label %60

60:                                               ; preds = %12
  %61 = bitcast <2 x i64> %18 to <8 x i16>
  %62 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %47, <8 x i16> %61) #4
  %63 = bitcast <2 x i64> %19 to <8 x i16>
  %64 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %48, <8 x i16> %63) #4
  %65 = bitcast <2 x i64> %21 to <8 x i16>
  %66 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %62, <8 x i16> %65) #4
  %67 = bitcast <2 x i64> %22 to <8 x i16>
  %68 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %64, <8 x i16> %67) #4
  %69 = xor <8 x i16> %66, %43
  %70 = xor <8 x i16> %68, %44
  %71 = sub <8 x i16> %69, %43
  %72 = sub <8 x i16> %70, %44
  %73 = ashr <8 x i16> %71, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %74 = shufflevector <8 x i16> %71, <8 x i16> %73, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = shufflevector <8 x i16> %71, <8 x i16> %73, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 16
  %77 = getelementptr inbounds i32, i32* %6, i64 4
  %78 = bitcast i32* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 16
  %79 = ashr <8 x i16> %72, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %80 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %81 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %82 = getelementptr inbounds i32, i32* %6, i64 8
  %83 = bitcast i32* %82 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %83, align 16
  %84 = getelementptr inbounds i32, i32* %6, i64 12
  %85 = bitcast i32* %84 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %85, align 16
  %86 = mul <8 x i16> %71, %26
  %87 = mul <8 x i16> %72, %28
  %88 = ashr <8 x i16> %86, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %89 = shufflevector <8 x i16> %86, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = shufflevector <8 x i16> %86, <8 x i16> %88, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %91 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 16
  %92 = getelementptr inbounds i32, i32* %7, i64 4
  %93 = bitcast i32* %92 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %93, align 16
  %94 = ashr <8 x i16> %87, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %95 = shufflevector <8 x i16> %87, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = shufflevector <8 x i16> %87, <8 x i16> %94, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %97 = getelementptr inbounds i32, i32* %7, i64 8
  %98 = bitcast i32* %97 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %98, align 16
  %99 = getelementptr inbounds i32, i32* %7, i64 12
  %100 = bitcast i32* %99 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %100, align 16
  %101 = icmp ne <8 x i16> %86, zeroinitializer
  %102 = icmp ne <8 x i16> %87, zeroinitializer
  %103 = sext <8 x i1> %101 to <8 x i16>
  %104 = sext <8 x i1> %102 to <8 x i16>
  %105 = bitcast i16* %11 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 16
  %107 = getelementptr inbounds i16, i16* %11, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 16
  %110 = sub <8 x i16> %106, %103
  %111 = sub <8 x i16> %109, %104
  %112 = and <8 x i16> %110, %103
  %113 = and <8 x i16> %111, %104
  %114 = icmp sgt <8 x i16> %112, %113
  %115 = select <8 x i1> %114, <8 x i16> %112, <8 x i16> %113
  %116 = icmp sgt <8 x i16> %115, zeroinitializer
  %117 = select <8 x i1> %116, <8 x i16> %115, <8 x i16> zeroinitializer
  %118 = bitcast <8 x i16> %117 to <2 x i64>
  br label %122

119:                                              ; preds = %12
  %120 = bitcast i32* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %120, i8 0, i64 64, i1 false)
  %121 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %121, i8 0, i64 64, i1 false)
  br label %122

122:                                              ; preds = %60, %119
  %123 = phi <8 x i16> [ zeroinitializer, %119 ], [ %117, %60 ]
  %124 = phi <2 x i64> [ zeroinitializer, %119 ], [ %118, %60 ]
  %125 = sub i64 16, %1
  %126 = icmp slt i64 %125, 0
  br i1 %126, label %127, label %237

127:                                              ; preds = %122
  %128 = bitcast <2 x i64> %19 to <8 x i16>
  %129 = bitcast <2 x i64> %22 to <8 x i16>
  br label %130

130:                                              ; preds = %127, %232
  %131 = phi i64 [ %125, %127 ], [ %235, %232 ]
  %132 = phi <2 x i64> [ %124, %127 ], [ %234, %232 ]
  %133 = phi <8 x i16> [ %123, %127 ], [ %233, %232 ]
  %134 = getelementptr inbounds i32, i32* %13, i64 %131
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = getelementptr inbounds i32, i32* %134, i64 4
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 16
  %140 = getelementptr inbounds i32, i32* %134, i64 8
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 16
  %143 = getelementptr inbounds i32, i32* %134, i64 12
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 16
  %146 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %136, <4 x i32> %139) #4
  %147 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %142, <4 x i32> %145) #4
  %148 = ashr <8 x i16> %146, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %149 = ashr <8 x i16> %147, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %150 = xor <8 x i16> %148, %146
  %151 = xor <8 x i16> %149, %147
  %152 = sub <8 x i16> %150, %148
  %153 = sub <8 x i16> %151, %149
  %154 = icmp sge <8 x i16> %152, %29
  %155 = sext <8 x i1> %154 to <8 x i16>
  %156 = icmp sge <8 x i16> %153, %29
  %157 = sext <8 x i1> %156 to <8 x i16>
  %158 = bitcast <8 x i16> %155 to <16 x i8>
  %159 = icmp slt <16 x i8> %158, zeroinitializer
  %160 = bitcast <8 x i16> %157 to <16 x i8>
  %161 = icmp slt <16 x i8> %160, zeroinitializer
  %162 = or <16 x i1> %161, %159
  %163 = bitcast <16 x i1> %162 to i16
  %164 = icmp eq i16 %163, 0
  br i1 %164, label %223, label %165

165:                                              ; preds = %130
  %166 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %152, <8 x i16> %128) #4
  %167 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %153, <8 x i16> %128) #4
  %168 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %166, <8 x i16> %129) #4
  %169 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %167, <8 x i16> %129) #4
  %170 = xor <8 x i16> %168, %148
  %171 = xor <8 x i16> %169, %149
  %172 = sub <8 x i16> %170, %148
  %173 = sub <8 x i16> %171, %149
  %174 = getelementptr inbounds i32, i32* %15, i64 %131
  %175 = ashr <8 x i16> %172, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %176 = shufflevector <8 x i16> %172, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %177 = shufflevector <8 x i16> %172, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %178 = bitcast i32* %174 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %178, align 16
  %179 = getelementptr inbounds i32, i32* %174, i64 4
  %180 = bitcast i32* %179 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %180, align 16
  %181 = ashr <8 x i16> %173, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %182 = shufflevector <8 x i16> %173, <8 x i16> %181, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %183 = shufflevector <8 x i16> %173, <8 x i16> %181, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %184 = getelementptr inbounds i32, i32* %174, i64 8
  %185 = bitcast i32* %184 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds i32, i32* %174, i64 12
  %187 = bitcast i32* %186 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %187, align 16
  %188 = mul <8 x i16> %172, %28
  %189 = mul <8 x i16> %173, %28
  %190 = getelementptr inbounds i32, i32* %16, i64 %131
  %191 = ashr <8 x i16> %188, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %192 = shufflevector <8 x i16> %188, <8 x i16> %191, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %193 = shufflevector <8 x i16> %188, <8 x i16> %191, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %194 = bitcast i32* %190 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %194, align 16
  %195 = getelementptr inbounds i32, i32* %190, i64 4
  %196 = bitcast i32* %195 to <8 x i16>*
  store <8 x i16> %193, <8 x i16>* %196, align 16
  %197 = ashr <8 x i16> %189, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %198 = shufflevector <8 x i16> %189, <8 x i16> %197, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %199 = shufflevector <8 x i16> %189, <8 x i16> %197, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %200 = getelementptr inbounds i32, i32* %190, i64 8
  %201 = bitcast i32* %200 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %201, align 16
  %202 = getelementptr inbounds i32, i32* %190, i64 12
  %203 = bitcast i32* %202 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %203, align 16
  %204 = icmp ne <8 x i16> %188, zeroinitializer
  %205 = icmp ne <8 x i16> %189, zeroinitializer
  %206 = sext <8 x i1> %204 to <8 x i16>
  %207 = sext <8 x i1> %205 to <8 x i16>
  %208 = getelementptr inbounds i16, i16* %14, i64 %131
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = getelementptr inbounds i16, i16* %208, i64 8
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 16
  %214 = sub <8 x i16> %210, %206
  %215 = sub <8 x i16> %213, %207
  %216 = and <8 x i16> %214, %206
  %217 = and <8 x i16> %215, %207
  %218 = icmp sgt <8 x i16> %216, %217
  %219 = select <8 x i1> %218, <8 x i16> %216, <8 x i16> %217
  %220 = icmp sgt <8 x i16> %133, %219
  %221 = select <8 x i1> %220, <8 x i16> %133, <8 x i16> %219
  %222 = bitcast <8 x i16> %221 to <2 x i64>
  br label %232

223:                                              ; preds = %130
  %224 = getelementptr inbounds i32, i32* %15, i64 %131
  %225 = bitcast i32* %224 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %225, align 16
  %226 = getelementptr inbounds i32, i32* %224, i64 4
  %227 = bitcast i32* %226 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %227, i8 0, i64 48, i1 false) #4
  %228 = getelementptr inbounds i32, i32* %16, i64 %131
  %229 = bitcast i32* %228 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %229, align 16
  %230 = getelementptr inbounds i32, i32* %228, i64 4
  %231 = bitcast i32* %230 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %231, i8 0, i64 48, i1 false) #4
  br label %232

232:                                              ; preds = %165, %223
  %233 = phi <8 x i16> [ %133, %223 ], [ %221, %165 ]
  %234 = phi <2 x i64> [ %132, %223 ], [ %222, %165 ]
  %235 = add nsw i64 %131, 16
  %236 = icmp slt i64 %235, 0
  br i1 %236, label %130, label %237

237:                                              ; preds = %232, %122
  %238 = phi <8 x i16> [ %123, %122 ], [ %233, %232 ]
  %239 = phi <2 x i64> [ %124, %122 ], [ %234, %232 ]
  %240 = bitcast <2 x i64> %239 to <4 x i32>
  %241 = shufflevector <4 x i32> %240, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %242 = bitcast <4 x i32> %241 to <8 x i16>
  %243 = icmp sgt <8 x i16> %238, %242
  %244 = select <8 x i1> %243, <8 x i16> %238, <8 x i16> %242
  %245 = shufflevector <8 x i16> %244, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %246 = icmp sgt <8 x i16> %244, %245
  %247 = select <8 x i1> %246, <8 x i16> %244, <8 x i16> %245
  %248 = shufflevector <8 x i16> %247, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %249 = icmp sgt <8 x i16> %247, %248
  %250 = select <8 x i1> %249, <8 x i16> %247, <8 x i16> %248
  %251 = extractelement <8 x i16> %250, i64 1
  store i16 %251, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
