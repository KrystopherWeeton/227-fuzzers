; ModuleID = '../../third_party/libwebp/src/enc/tree_enc.c'
source_filename = "../../third_party/libwebp/src/enc/tree_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }
%struct.VP8EncIterator = type { i32, i32, i8*, i8*, i8*, i8*, %struct.VP8Encoder*, %struct.VP8MBInfo*, %struct.VP8BitWriter*, i8*, i32*, [37 x i8], i8*, i32, [9 x i32], [9 x i32], [4 x [3 x i64]], i64, i64, [4 x [64 x double]]*, i32, i32, i32, i32, [2 x [2 x i8]], [2 x [2 x i8]]*, i8*, i8*, i8*, i8*, i8*, [88 x i8], [3359 x i8] }

@VP8CoeffsProba0 = hidden local_unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]] [[8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\FD\88\FE\FF\E4\DB\80\80\80\80\80", [11 x i8] c"\BD\81\F2\FF\E3\D5\FF\DB\80\80\80", [11 x i8] c"j~\E3\FC\D6\D1\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01b\F8\FF\EC\E2\FF\FF\80\80\80", [11 x i8] c"\B5\85\EE\FE\DD\EA\FF\9A\80\80\80", [11 x i8] c"N\86\CA\F7\C6\B4\FF\DB\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\B9\F9\FF\F3\FF\80\80\80\80\80", [11 x i8] c"\B8\96\F7\FF\EC\E0\80\80\80\80\80", [11 x i8] c"Mn\D8\FF\EC\E6\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01e\FB\FF\F1\FF\80\80\80\80\80", [11 x i8] c"\AA\8B\F1\FC\EC\D1\FF\FF\80\80\80", [11 x i8] c"%t\C4\F3\E4\FF\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\CC\FE\FF\F5\FF\80\80\80\80\80", [11 x i8] c"\CF\A0\FA\FF\EE\80\80\80\80\80\80", [11 x i8] c"fg\E7\FF\D3\AB\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\98\FC\FF\F0\FF\80\80\80\80\80", [11 x i8] c"\B1\87\F3\FF\EA\E1\80\80\80\80\80", [11 x i8] c"P\81\D3\FF\C2\E0\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F6\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\C6#\ED\DF\C1\BB\A2\A0\91\9B>", [11 x i8] c"\83-\C6\DD\AC\B0\DC\9D\FC\DD\01", [11 x i8] c"D/\92\D0\95\A7\DD\A2\FF\DF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\95\F1\FF\DD\E0\FF\FF\80\80\80", [11 x i8] c"\B8\8D\EA\FD\DE\DC\FF\C7\80\80\80", [11 x i8] c"Qc\B5\F2\B0\BE\F9\CA\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\81\E8\FD\D6\C5\F2\C4\FF\FF\80", [11 x i8] c"cy\D2\FA\C9\C6\FF\CA\80\80\80", [11 x i8] c"\17[\A3\F2\AA\BB\F7\D2\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\C8\F6\FF\EA\FF\80\80\80\80\80", [11 x i8] c"m\B2\F1\FF\E7\F5\FF\FF\80\80\80", [11 x i8] c",\82\C9\FD\CD\C0\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\84\EF\FB\DB\D1\FF\A5\80\80\80", [11 x i8] c"^\88\E1\FB\DA\BE\FF\FF\80\80\80", [11 x i8] c"\16d\AE\F5\BA\A1\FF\C7\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\B6\F9\FF\E8\EB\80\80\80\80\80", [11 x i8] c"|\8F\F1\FF\E3\EA\80\80\80\80\80", [11 x i8] c"#M\B5\FB\C1\D3\FF\CD\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\9D\F7\FF\EC\E7\FF\FF\80\80\80", [11 x i8] c"y\8D\EB\FF\E1\E3\FF\FF\80\80\80", [11 x i8] c"-c\BC\FB\C3\D9\FF\E0\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\01\FB\FF\D5\FF\80\80\80\80\80", [11 x i8] c"\CB\01\F8\FF\FF\80\80\80\80\80\80", [11 x i8] c"\89\01\B1\FF\E0\FF\80\80\80\80\80"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\FD\09\F8\FB\CF\D0\FF\C0\80\80\80", [11 x i8] c"\AF\0D\E0\F3\C1\B9\F9\C6\FF\FF\80", [11 x i8] c"I\11\AB\DD\A1\B3\EC\A7\FF\EA\80"], [3 x [11 x i8]] [[11 x i8] c"\01_\F7\FD\D4\B7\FF\FF\80\80\80", [11 x i8] c"\EFZ\F4\FA\D3\D1\FF\FF\80\80\80", [11 x i8] c"\9BM\C3\F8\BC\C3\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\18\EF\FB\DA\DB\FF\CD\80\80\80", [11 x i8] c"\C93\DB\FF\C4\BA\80\80\80\80\80", [11 x i8] c"E.\BE\EF\C9\DA\FF\E4\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\BF\FB\FF\FF\80\80\80\80\80\80", [11 x i8] c"\DF\A5\F9\FF\D5\FF\80\80\80\80\80", [11 x i8] c"\8D|\F8\FF\FF\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\10\F8\FF\FF\80\80\80\80\80\80", [11 x i8] c"\BE$\E6\FF\EC\FF\80\80\80\80\80", [11 x i8] c"\95\01\FF\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\E2\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F7\C0\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F0\80\FF\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\86\FC\FF\FF\80\80\80\80\80\80", [11 x i8] c"\D5>\FA\FF\FF\80\80\80\80\80\80", [11 x i8] c"7]\FF\80\80\80\80\80\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80", [11 x i8] c"\80\80\80\80\80\80\80\80\80\80\80"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\CA\18\D5\EB\BA\BF\DC\A0\F0\AF\FF", [11 x i8] c"~&\B6\E8\A9\B8\E4\AE\FF\BB\80", [11 x i8] c"=.\8A\DB\97\B2\F0\AA\FF\D8\80"], [3 x [11 x i8]] [[11 x i8] c"\01p\E6\FA\C7\BF\F7\9F\FF\FF\80", [11 x i8] c"\A6m\E4\FC\D3\D7\FF\AE\80\80\80", [11 x i8] c"'M\A2\E8\AC\B4\F5\B2\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\014\DC\F6\C6\C7\F9\DC\FF\FF\80", [11 x i8] c"|J\BF\F3\B7\C1\FA\DD\FF\FF\80", [11 x i8] c"\18G\82\DB\9A\AA\F3\B6\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01\B6\E1\F9\DB\F0\FF\E0\80\80\80", [11 x i8] c"\95\96\E2\FC\D8\CD\FF\AB\80\80\80", [11 x i8] c"\1Cl\AA\F2\B7\C2\FE\DF\FF\FF\80"], [3 x [11 x i8]] [[11 x i8] c"\01Q\E6\FC\CC\CB\FF\C0\80\80\80", [11 x i8] c"{f\D1\F7\BC\C4\FF\E9\80\80\80", [11 x i8] c"\14_\99\F3\A4\AD\FF\CB\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\DE\F8\FF\D8\D5\80\80\80\80\80", [11 x i8] c"\A8\AF\F6\FC\EB\CD\FF\FF\80\80\80", [11 x i8] c"/t\D7\FF\D3\D4\FF\FF\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01y\EC\FD\D4\D6\FF\FF\80\80\80", [11 x i8] c"\8DT\D5\FC\C9\CA\FF\DB\80\80\80", [11 x i8] c"*P\A0\F0\A2\B9\FF\CD\80\80\80"], [3 x [11 x i8]] [[11 x i8] c"\01\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\F4\01\FF\80\80\80\80\80\80\80\80", [11 x i8] c"\EE\01\FF\80\80\80\80\80\80\80\80"]]], align 16
@kBModesProba = internal unnamed_addr constant [10 x [10 x [9 x i8]]] [[10 x [9 x i8]] [[9 x i8] c"\E7x0Ysqx\98p", [9 x i8] c"\98\B3@~\AAv.F_", [9 x i8] c"\AFE\8FPURH\9Bg", [9 x i8] c"8:\0A\AB\DA\BD\11\0D\98", [9 x i8] c"r\1A\11\A3,\C3\15\0A\AD", [9 x i8] c"y\18P\C3\1A>,@U", [9 x i8] c"\90G\0A&\AB\D5\90\22\1A", [9 x i8] c"\AA.7\13\88\A0!\CEG", [9 x i8] c"?\14\08rr\D0\0C\09\E2", [9 x i8] c"Q(\0B`\B6T\1D\10$"], [10 x [9 x i8]] [[9 x i8] c"\86\B7Y\89bej\A5\94", [9 x i8] c"H\BBd\82\9Do KP", [9 x i8] c"Bf\A7cJ>(\EA\80", [9 x i8] c")5\09\B2\F1\8D\1A\08k", [9 x i8] c"J+\1A\92I\A61\17\9D", [9 x i8] c"A&i\A034\1Fs\80", [9 x i8] c"hO\0C\1B\D9\FFW\11\07", [9 x i8] c"WDG,r3\0F\BA\17", [9 x i8] c"/)\0En\B6\B7\15\11\C2", [9 x i8] c"B-\19f\C5\BD\17\12\16"], [10 x [9 x i8]] [[9 x i8] c"XX\93\96*.-\C4\CD", [9 x i8] c"+a\B7uU&#\B3=", [9 x i8] c"'5\C8W\1A\15+\E8\AB", [9 x i8] c"8\223hrf\1D]M", [9 x i8] c"'\1CU\AB:\A5Zb@", [9 x i8] c"\22\16t\CE\17\22+\A6I", [9 x i8] c"k6 \1A3\01Q+\1F", [9 x i8] c"D\19j\16@\AB$\E1r", [9 x i8] c"\22\13\15f\84\BC\10L|", [9 x i8] c">\12N_U9203"], [10 x [9 x i8]] [[9 x i8] c"\C1e#\9F\D7oY.o", [9 x i8] c"<\94\1F\AC\DB\E4\15\12o", [9 x i8] c"pqMU\B3\FF&xr", [9 x i8] c"(*\01\C4\F5\D1\0A\19m", [9 x i8] c"X+\1D\8C\A6\D5%+\9A", [9 x i8] c"=?\1E\9BC-D\01\D1", [9 x i8] c"dP\08+\9A\013\1AG", [9 x i8] c"\8ENN\10\FF\80\22\C5\AB", [9 x i8] c")(\05f\D3\B7\04\01\DD", [9 x i8] c"32\11\A8\D1\C0\17\19R"], [10 x [9 x i8]] [[9 x i8] c"\8A\1F$\AB\1B\A6&,\E5", [9 x i8] c"CW:\A9Rs\1A;\B3", [9 x i8] c"?;Z\B4;\A6]I\9A", [9 x i8] c"((\15t\8F\D1\22'\AF", [9 x i8] c"/\0F\10\B7\22\DF1-\B7", [9 x i8] c".\11!\B7\06b\0F \B7", [9 x i8] c"9.\16\18\80\016\11%", [9 x i8] c"A Is\1C\80\17\80\CD", [9 x i8] c"(\03\09s3\C0\12\06\DF", [9 x i8] c"W%\09s;M@\15/"], [10 x [9 x i8]] [[9 x i8] c"h7,\DA\0965\82\E2", [9 x i8] c"@ZF\CD()\17\1A9", [9 x i8] c"69p\B8\05)&\A6\D5", [9 x i8] c"\1E\22\1A\85\98t\0A \86", [9 x i8] c"'\135\DD\1Ar I\FF", [9 x i8] c"\1F\09A\EA\02\0F\01vI", [9 x i8] c"K \0C3\C0\FF\A0+3", [9 x i8] c"X\1F#CfU7\BAU", [9 x i8] c"8\15\17o;\CD-%\C0", [9 x i8] c"7&F|If\01\22b"], [10 x [9 x i8]] [[9 x i8] c"}b*XhUu\AFR", [9 x i8] c"_T5Y\80dqe-", [9 x i8] c"KO{/3\80Q\AB\01", [9 x i8] c"9\11\05Gf95)1", [9 x i8] c"&!\0Dy9I\1A\01U", [9 x i8] c")\0AC\8AMnZ/r", [9 x i8] c"s\15\02\0Af\FF\A6\17\06", [9 x i8] c"e\1D\10\0AU\80e\C4\1A", [9 x i8] c"9\12\0Aff\D5\22\14+", [9 x i8] c"u\14\0F$\A3\80D\01\1A"], [10 x [9 x i8]] [[9 x i8] c"f=G%\225\1F\F3\C0", [9 x i8] c"E<G&Iw\1C\DE%", [9 x i8] c"D-\80\22\01/\0B\F5\AB", [9 x i8] c">\11\13F\92U7>F", [9 x i8] c"%+%\9Ad\A3U\A0\01", [9 x i8] c"?\09\5C\88\1C@ \C9U", [9 x i8] c"K\0F\09\09@\FF\B8w\10", [9 x i8] c"V\06\1C\05@\FF\19\F8\01", [9 x i8] c"8\08\11\84\89\FF7t\80", [9 x i8] c":\0F\14R\879\1Ay("], [10 x [9 x i8]] [[9 x i8] c"\A42\1F\89\9A\85\19#\DA", [9 x i8] c"3g,\83\83{\1F\06\9E", [9 x i8] c"V(@\87\94\E0-\B7\80", [9 x i8] c"\16\1A\11\83\F0\9A\0E\01\D1", [9 x i8] c"-\10\15[@\DE\07\01\C5", [9 x i8] c"8\15'\9B<\8A\17f\D5", [9 x i8] c"S\0C\0D6\C0\FFD/\1C", [9 x i8] c"U\1AUU\80\80 \92\AB", [9 x i8] c"\12\0B\07?\90\AB\04\04\F6", [9 x i8] c"#\1B\0A\92\AE\AB\0C\1A\80"], [10 x [9 x i8]] [[9 x i8] c"\BEP#c\B4P~6-", [9 x i8] c"U~/W\B03)\14 ", [9 x i8] c"eK\80\8Bv\92t\80U", [9 x i8] c"8)\0F\B0\ECU%\09>", [9 x i8] c"G\1E\11wv\FF\11\12\8A", [9 x i8] c"e&<\8A7F+\1A\8E", [9 x i8] c"\92$\13\1E\AB\FFa\1B\14", [9 x i8] c"\8A-=>\DB\01Q\BC@", [9 x i8] c" )\14u\97\8E\14\15\A3", [9 x i8] c"p\13\0C=\C3\800\04\18"]], align 16
@VP8CoeffsUpdateProba = hidden local_unnamed_addr constant [4 x [8 x [3 x [11 x i8]]]] [[8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\B0\F6\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\DF\F1\FC\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F9\FD\FD\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F4\FC\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EA\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F6\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F8\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FD\FF\FE\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FF\FE\FF\FE\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\D9\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\E1\FC\F1\FD\FF\FF\FE\FF\FF\FF\FF", [11 x i8] c"\EA\FA\F1\FA\FD\FF\FD\FE\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\DF\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EE\FD\FE\FE\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\F8\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F9\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F7\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FC\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\BA\FB\FA\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EA\FB\F4\FE\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FB\F3\FD\FE\FF\FE\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\EC\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FB\FD\FD\FE\FE\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]], [8 x [3 x [11 x i8]]] [[3 x [11 x i8]] [[11 x i8] c"\F8\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FE\FC\FE\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F8\FE\F9\FD\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FD\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F6\FD\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FC\FE\FB\FE\FE\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FE\FC\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F8\FE\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FF\FE\FE\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FB\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F5\FB\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FD\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FB\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FC\FD\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FC\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\F9\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FE\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FD\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FA\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"], [3 x [11 x i8]] [[11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FE\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [11 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF"]]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8DefaultProbas(%struct.VP8Encoder* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 7
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -1, i64 3, i1 false)
  %4 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 2, i64 0, i64 0, i64 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 16 getelementptr inbounds ([4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsProba0, i64 0, i64 0, i64 0, i64 0, i64 0), i64 1056, i1 false)
  %5 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 6
  store i32 1, i32* %5, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8CodeIntraModes(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = alloca %struct.VP8EncIterator, align 8
  %3 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 9
  %4 = bitcast %struct.VP8EncIterator* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3848, i8* nonnull %4) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 3848, i1 false)
  call void @VP8IteratorInit(%struct.VP8Encoder* %0, %struct.VP8EncIterator* nonnull %2) #3
  %5 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %2, i64 0, i32 7
  %6 = getelementptr inbounds %struct.VP8EncIterator, %struct.VP8EncIterator* %2, i64 0, i32 9
  %7 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 1
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 0
  %9 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 1
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 7
  %11 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 1
  %12 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 7
  br label %13

13:                                               ; preds = %181, %1
  %14 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %5, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = load i32, i32* %7, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %36, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %14, i64 0, i32 0
  %20 = load i8, i8* %19, align 4
  %21 = lshr i8 %20, 5
  %22 = lshr i8 %20, 6
  %23 = and i8 %22, 1
  %24 = zext i8 %23 to i32
  %25 = load i8, i8* %8, align 1
  %26 = zext i8 %25 to i32
  %27 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %24, i32 %26) #3
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i8* %8, i8* %9
  %30 = and i8 %21, 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %29, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %31, i32 %34) #3
  br label %36

36:                                               ; preds = %13, %18
  %37 = load i32, i32* %10, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %48, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %14, i64 0, i32 0
  %41 = load i8, i8* %40, align 4
  %42 = lshr i8 %41, 4
  %43 = and i8 %42, 1
  %44 = zext i8 %43 to i32
  %45 = load i8, i8* %11, align 1
  %46 = zext i8 %45 to i32
  %47 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %44, i32 %46) #3
  br label %48

48:                                               ; preds = %36, %39
  %49 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %14, i64 0, i32 0
  %50 = load i8, i8* %49, align 4
  %51 = and i8 %50, 3
  %52 = icmp ne i8 %51, 0
  %53 = zext i1 %52 to i32
  %54 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %53, i32 145) #3
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %68, label %56

56:                                               ; preds = %48
  %57 = load i8, i8* %15, align 1
  %58 = or i8 %57, 2
  %59 = icmp eq i8 %58, 3
  %60 = zext i1 %59 to i32
  %61 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %60, i32 156) #3
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i8 2, i8 1
  %64 = select i1 %62, i32 163, i32 128
  %65 = icmp eq i8 %57, %63
  %66 = zext i1 %65 to i32
  %67 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %66, i32 %64) #3
  br label %164

68:                                               ; preds = %48
  %69 = load i32, i32* %12, align 8
  %70 = sext i32 %69 to i64
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i8, i8* %15, i64 %71
  br label %73

73:                                               ; preds = %160, %68
  %74 = phi i32 [ 0, %68 ], [ %162, %160 ]
  %75 = phi i8* [ %72, %68 ], [ %76, %160 ]
  %76 = phi i8* [ %15, %68 ], [ %161, %160 ]
  %77 = getelementptr inbounds i8, i8* %76, i64 -1
  %78 = load i8, i8* %77, align 1
  br label %79

79:                                               ; preds = %157, %73
  %80 = phi i64 [ 0, %73 ], [ %158, %157 ]
  %81 = phi i8 [ %78, %73 ], [ %88, %157 ]
  %82 = getelementptr inbounds i8, i8* %75, i64 %80
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = zext i8 %81 to i64
  %86 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 0
  %87 = getelementptr inbounds i8, i8* %76, i64 %80
  %88 = load i8, i8* %87, align 1
  %89 = icmp ne i8 %88, 0
  %90 = zext i1 %89 to i32
  %91 = load i8, i8* %86, align 1
  %92 = zext i8 %91 to i32
  %93 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %90, i32 %92) #3
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %157, label %95

95:                                               ; preds = %79
  %96 = icmp ne i8 %88, 1
  %97 = zext i1 %96 to i32
  %98 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 1
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %97, i32 %100) #3
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %157, label %103

103:                                              ; preds = %95
  %104 = icmp ne i8 %88, 2
  %105 = zext i1 %104 to i32
  %106 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 2
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %105, i32 %108) #3
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %157, label %111

111:                                              ; preds = %103
  %112 = icmp ugt i8 %88, 5
  %113 = zext i1 %112 to i32
  %114 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 3
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %113, i32 %116) #3
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %134

119:                                              ; preds = %111
  %120 = icmp ne i8 %88, 3
  %121 = zext i1 %120 to i32
  %122 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 4
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %121, i32 %124) #3
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %157, label %127

127:                                              ; preds = %119
  %128 = icmp ne i8 %88, 4
  %129 = zext i1 %128 to i32
  %130 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 5
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %129, i32 %132) #3
  br label %157

134:                                              ; preds = %111
  %135 = icmp ne i8 %88, 6
  %136 = zext i1 %135 to i32
  %137 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 6
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %136, i32 %139) #3
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %157, label %142

142:                                              ; preds = %134
  %143 = icmp ne i8 %88, 7
  %144 = zext i1 %143 to i32
  %145 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 7
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %144, i32 %147) #3
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %157, label %150

150:                                              ; preds = %142
  %151 = icmp ne i8 %88, 8
  %152 = zext i1 %151 to i32
  %153 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @kBModesProba, i64 0, i64 %84, i64 %85, i64 8
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %152, i32 %155) #3
  br label %157

157:                                              ; preds = %79, %95, %103, %119, %127, %134, %142, %150
  %158 = add nuw nsw i64 %80, 1
  %159 = icmp eq i64 %158, 4
  br i1 %159, label %160, label %79

160:                                              ; preds = %157
  %161 = getelementptr inbounds i8, i8* %76, i64 %70
  %162 = add nuw nsw i32 %74, 1
  %163 = icmp eq i32 %162, 4
  br i1 %163, label %164, label %73

164:                                              ; preds = %160, %56
  %165 = load i8, i8* %49, align 4
  %166 = lshr i8 %165, 2
  %167 = and i8 %166, 3
  %168 = icmp ne i8 %167, 0
  %169 = zext i1 %168 to i32
  %170 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %169, i32 142) #3
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %181, label %172

172:                                              ; preds = %164
  %173 = icmp ne i8 %167, 2
  %174 = zext i1 %173 to i32
  %175 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %174, i32 114) #3
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %181, label %177

177:                                              ; preds = %172
  %178 = icmp ne i8 %167, 3
  %179 = zext i1 %178 to i32
  %180 = call i32 @VP8PutBit(%struct.VP8BitWriter* %3, i32 %179, i32 183) #3
  br label %181

181:                                              ; preds = %164, %172, %177
  %182 = call i32 @VP8IteratorNext(%struct.VP8EncIterator* nonnull %2) #3
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %13

184:                                              ; preds = %181
  call void @llvm.lifetime.end.p0i8(i64 3848, i8* nonnull %4) #3
  ret void
}

declare void @VP8IteratorInit(%struct.VP8Encoder*, %struct.VP8EncIterator*) local_unnamed_addr #2

declare i32 @VP8PutBit(%struct.VP8BitWriter*, i32, i32) local_unnamed_addr #2

declare i32 @VP8IteratorNext(%struct.VP8EncIterator*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8WriteProbas(%struct.VP8BitWriter*, %struct.VP8EncProba* nocapture readonly) local_unnamed_addr #0 {
  br label %3

3:                                                ; preds = %25, %2
  %4 = phi i64 [ 0, %2 ], [ %26, %25 ]
  br label %5

5:                                                ; preds = %74, %3
  %6 = phi i64 [ 0, %3 ], [ %75, %74 ]
  br label %7

7:                                                ; preds = %22, %5
  %8 = phi i64 [ 0, %5 ], [ %23, %22 ]
  %9 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %1, i64 0, i32 2, i64 %4, i64 %6, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsProba0, i64 0, i64 %4, i64 %6, i64 0, i64 %8
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %10, %12
  %14 = zext i1 %13 to i32
  %15 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsUpdateProba, i64 0, i64 %4, i64 %6, i64 0, i64 %8
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %14, i32 %17) #3
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %7
  %21 = zext i8 %10 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %0, i32 %21, i32 8) #3
  br label %22

22:                                               ; preds = %7, %20
  %23 = add nuw nsw i64 %8, 1
  %24 = icmp eq i64 %23, 11
  br i1 %24, label %38, label %7

25:                                               ; preds = %74
  %26 = add nuw nsw i64 %4, 1
  %27 = icmp eq i64 %26, 4
  br i1 %27, label %28, label %3

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %1, i64 0, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %0, i32 %30) #3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %1, i64 0, i32 1
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %0, i32 %36, i32 8) #3
  br label %37

37:                                               ; preds = %28, %33
  ret void

38:                                               ; preds = %22, %53
  %39 = phi i64 [ %54, %53 ], [ 0, %22 ]
  %40 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %1, i64 0, i32 2, i64 %4, i64 %6, i64 1, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsProba0, i64 0, i64 %4, i64 %6, i64 1, i64 %39
  %43 = load i8, i8* %42, align 1
  %44 = icmp ne i8 %41, %43
  %45 = zext i1 %44 to i32
  %46 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsUpdateProba, i64 0, i64 %4, i64 %6, i64 1, i64 %39
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %45, i32 %48) #3
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %38
  %52 = zext i8 %41 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %0, i32 %52, i32 8) #3
  br label %53

53:                                               ; preds = %51, %38
  %54 = add nuw nsw i64 %39, 1
  %55 = icmp eq i64 %54, 11
  br i1 %55, label %56, label %38

56:                                               ; preds = %53, %71
  %57 = phi i64 [ %72, %71 ], [ 0, %53 ]
  %58 = getelementptr inbounds %struct.VP8EncProba, %struct.VP8EncProba* %1, i64 0, i32 2, i64 %4, i64 %6, i64 2, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsProba0, i64 0, i64 %4, i64 %6, i64 2, i64 %57
  %61 = load i8, i8* %60, align 1
  %62 = icmp ne i8 %59, %61
  %63 = zext i1 %62 to i32
  %64 = getelementptr inbounds [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]]* @VP8CoeffsUpdateProba, i64 0, i64 %4, i64 %6, i64 2, i64 %57
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = tail call i32 @VP8PutBit(%struct.VP8BitWriter* %0, i32 %63, i32 %66) #3
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %56
  %70 = zext i8 %59 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %0, i32 %70, i32 8) #3
  br label %71

71:                                               ; preds = %69, %56
  %72 = add nuw nsw i64 %57, 1
  %73 = icmp eq i64 %72, 11
  br i1 %73, label %74, label %56

74:                                               ; preds = %71
  %75 = add nuw nsw i64 %6, 1
  %76 = icmp eq i64 %75, 8
  br i1 %76, label %25, label %5
}

declare void @VP8PutBits(%struct.VP8BitWriter*, i32, i32) local_unnamed_addr #2

declare i32 @VP8PutBitUniform(%struct.VP8BitWriter*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
