; ModuleID = '../../net/dns/dns_socket_allocator.cc'
source_filename = "../../net/dns/dns_socket_allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::DnsSocketAllocator" = type { %"class.net::ClientSocketFactory"*, %"class.net::NetLog"*, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"*, %"class.std::__1::__compressed_pair" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::IPEndPoint"* }
%"class.net::ClientSocketFactory" = type { i32 (...)** }
%"class.net::NetLog" = type opaque
%"class.net::DatagramClientSocket" = type { %"class.net::DatagramSocket", %"class.net::Socket" }
%"class.net::DatagramSocket" = type { i32 (...)** }
%"class.net::Socket" = type { i32 (...)**, %"class.std::__1::vector.3" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::basic_string"* }
%"struct.net::NetLogSource" = type { i32, i32, %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.net::StreamSocket" = type { %"class.net::Socket" }
%"class.net::AddressList" = type { %"class.std::__1::vector", %"class.std::__1::vector.3" }
%"class.net::TransportClientSocket" = type { %"class.net::StreamSocket" }
%"class.net::SocketPerformanceWatcher" = type { i32 (...)** }
%"class.net::NetworkQualityEstimator" = type opaque

@_ZN3net18DnsSocketAllocatorC1EPNS_19ClientSocketFactoryENSt3__16vectorINS_10IPEndPointENS3_9allocatorIS5_EEEEPNS_6NetLogE = hidden unnamed_addr alias void (%"class.net::DnsSocketAllocator"*, %"class.net::ClientSocketFactory"*, %"class.std::__1::vector"*, %"class.net::NetLog"*), void (%"class.net::DnsSocketAllocator"*, %"class.net::ClientSocketFactory"*, %"class.std::__1::vector"*, %"class.net::NetLog"*)* @_ZN3net18DnsSocketAllocatorC2EPNS_19ClientSocketFactoryENSt3__16vectorINS_10IPEndPointENS3_9allocatorIS5_EEEEPNS_6NetLogE
@_ZN3net18DnsSocketAllocatorD1Ev = hidden unnamed_addr alias void (%"class.net::DnsSocketAllocator"*), void (%"class.net::DnsSocketAllocator"*)* @_ZN3net18DnsSocketAllocatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18DnsSocketAllocatorC2EPNS_19ClientSocketFactoryENSt3__16vectorINS_10IPEndPointENS3_9allocatorIS5_EEEEPNS_6NetLogE(%"class.net::DnsSocketAllocator"* nocapture, %"class.net::ClientSocketFactory"*, %"class.std::__1::vector"* nocapture, %"class.net::NetLog"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 0
  store %"class.net::ClientSocketFactory"* %1, %"class.net::ClientSocketFactory"** %5, align 8
  %6 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 1
  store %"class.net::NetLog"* %3, %"class.net::NetLog"** %6, align 8
  %7 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #5
  %9 = bitcast %"class.std::__1::vector"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %13 = bitcast %"class.net::IPEndPoint"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2, i32 0, i32 1
  %16 = bitcast %"class.net::IPEndPoint"** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"class.net::IPEndPoint"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast %"class.net::IPEndPoint"** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = bitcast %"class.std::__1::vector"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net18DnsSocketAllocatorD2Ev(%"class.net::DnsSocketAllocator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %2, align 8
  %4 = icmp eq %"class.net::IPEndPoint"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %6, align 8
  %8 = icmp eq %"class.net::IPEndPoint"* %7, %3
  br i1 %8, label %15, label %9

9:                                                ; preds = %5, %9
  %10 = phi %"class.net::IPEndPoint"* [ %11, %9 ], [ %7, %5 ]
  %11 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %10, i64 -1
  tail call void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"* %11) #5
  %12 = icmp eq %"class.net::IPEndPoint"* %11, %3
  br i1 %12, label %13, label %9

13:                                               ; preds = %9
  %14 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %2, align 8
  br label %15

15:                                               ; preds = %13, %5
  %16 = phi %"class.net::IPEndPoint"* [ %14, %13 ], [ %3, %5 ]
  store %"class.net::IPEndPoint"* %3, %"class.net::IPEndPoint"** %6, align 8
  %17 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  tail call void @_ZdlPv(i8* %17) #6
  br label %18

18:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::DatagramClientSocket"* @_ZN3net18DnsSocketAllocator24CreateConnectedUdpSocketEmPi(%"class.net::DnsSocketAllocator"* nocapture readonly, i64, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.net::NetLogSource", align 8
  %5 = bitcast %"struct.net::NetLogSource"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #5
  %6 = bitcast %"struct.net::NetLogSource"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZN3net12NetLogSourceC1Ev(%"struct.net::NetLogSource"* nonnull %4) #5
  %7 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 0
  %8 = load %"class.net::ClientSocketFactory"*, %"class.net::ClientSocketFactory"** %7, align 8
  %9 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 1
  %10 = load %"class.net::NetLog"*, %"class.net::NetLog"** %9, align 8
  %11 = bitcast %"class.net::ClientSocketFactory"* %8 to %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)***
  %12 = load %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)**, %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*, %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)** %12, i64 2
  %14 = load %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*, %"class.net::DatagramClientSocket"* (%"class.net::ClientSocketFactory"*, i32, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)** %13, align 8
  %15 = call %"class.net::DatagramClientSocket"* %14(%"class.net::ClientSocketFactory"* %8, i32 0, %"class.net::NetLog"* %10, %"struct.net::NetLogSource"* nonnull dereferenceable(16) %4) #5
  %16 = ptrtoint %"class.net::DatagramClientSocket"* %15 to i64
  %17 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2, i32 0, i32 0
  %18 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %17, align 8
  %19 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %18, i64 %1
  %20 = bitcast %"class.net::DatagramClientSocket"* %15 to i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)***
  %21 = load i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)**, i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)*** %20, align 8
  %22 = getelementptr inbounds i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)*, i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)** %21, i64 9
  %23 = load i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)*, i32 (%"class.net::DatagramClientSocket"*, %"class.net::IPEndPoint"*)** %22, align 8
  %24 = call i32 %23(%"class.net::DatagramClientSocket"* %15, %"class.net::IPEndPoint"* dereferenceable(20) %19) #5
  store i32 %24, i32* %2, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %3
  %27 = icmp eq %"class.net::DatagramClientSocket"* %15, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %26
  %29 = bitcast %"class.net::DatagramClientSocket"* %15 to void (%"class.net::DatagramClientSocket"*)***
  %30 = load void (%"class.net::DatagramClientSocket"*)**, void (%"class.net::DatagramClientSocket"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.net::DatagramClientSocket"*)*, void (%"class.net::DatagramClientSocket"*)** %30, i64 1
  %32 = load void (%"class.net::DatagramClientSocket"*)*, void (%"class.net::DatagramClientSocket"*)** %31, align 8
  call void %32(%"class.net::DatagramClientSocket"* nonnull %15) #5
  br label %33

33:                                               ; preds = %28, %26, %3
  %34 = phi i64 [ %16, %3 ], [ 0, %26 ], [ 0, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #5
  %35 = inttoptr i64 %34 to %"class.net::DatagramClientSocket"*
  ret %"class.net::DatagramClientSocket"* %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3net12NetLogSourceC1Ev(%"struct.net::NetLogSource"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::StreamSocket"* @_ZN3net18DnsSocketAllocator15CreateTcpSocketEmRKNS_12NetLogSourceE(%"class.net::DnsSocketAllocator"* nocapture readonly, i64, %"struct.net::NetLogSource"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.net::AddressList", align 8
  %5 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 0
  %6 = load %"class.net::ClientSocketFactory"*, %"class.net::ClientSocketFactory"** %5, align 8
  %7 = bitcast %"class.net::AddressList"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #5
  %8 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = load %"class.net::IPEndPoint"*, %"class.net::IPEndPoint"** %8, align 8
  %10 = getelementptr inbounds %"class.net::IPEndPoint", %"class.net::IPEndPoint"* %9, i64 %1
  call void @_ZN3net11AddressListC1ERKNS_10IPEndPointE(%"class.net::AddressList"* nonnull %4, %"class.net::IPEndPoint"* dereferenceable(20) %10) #5
  %11 = getelementptr inbounds %"class.net::DnsSocketAllocator", %"class.net::DnsSocketAllocator"* %0, i64 0, i32 1
  %12 = load %"class.net::NetLog"*, %"class.net::NetLog"** %11, align 8
  %13 = bitcast %"class.net::ClientSocketFactory"* %6 to %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)***
  %14 = load %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)**, %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*, %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)** %14, i64 3
  %16 = load %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)*, %"class.net::TransportClientSocket"* (%"class.net::ClientSocketFactory"*, %"class.net::AddressList"*, %"class.net::SocketPerformanceWatcher"*, %"class.net::NetworkQualityEstimator"*, %"class.net::NetLog"*, %"struct.net::NetLogSource"*)** %15, align 8
  %17 = call %"class.net::TransportClientSocket"* %16(%"class.net::ClientSocketFactory"* %6, %"class.net::AddressList"* nonnull dereferenceable(48) %4, %"class.net::SocketPerformanceWatcher"* null, %"class.net::NetworkQualityEstimator"* null, %"class.net::NetLog"* %12, %"struct.net::NetLogSource"* dereferenceable(16) %2) #5
  call void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #5
  %18 = getelementptr inbounds %"class.net::TransportClientSocket", %"class.net::TransportClientSocket"* %17, i64 0, i32 0
  ret %"class.net::StreamSocket"* %18
}

declare void @_ZN3net11AddressListC1ERKNS_10IPEndPointE(%"class.net::AddressList"*, %"class.net::IPEndPoint"* dereferenceable(20)) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net11AddressListD1Ev(%"class.net::AddressList"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3net10IPEndPointD1Ev(%"class.net::IPEndPoint"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
