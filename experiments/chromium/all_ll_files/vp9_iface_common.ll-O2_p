; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/vp9_iface_common.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/vp9_iface_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8*], [4 x i32], i32, i8*, i8*, i32, i32, i8* }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @yuvconfig2image(%struct.vpx_image*, %struct.yv12_buffer_config* nocapture readonly, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 22
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 21
  %8 = load i32, i32* %7, align 8
  %9 = icmp ne i32 %8, 0
  %10 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 0
  br i1 %6, label %11, label %15

11:                                               ; preds = %3
  %12 = select i1 %9, i32 261, i32 262
  %13 = select i1 %9, i32 2309, i32 2310
  %14 = select i1 %9, i32 16, i32 24
  br label %19

15:                                               ; preds = %3
  %16 = select i1 %9, i32 258, i32 263
  %17 = select i1 %9, i32 2306, i32 2311
  %18 = select i1 %9, i32 12, i32 16
  br label %19

19:                                               ; preds = %15, %11
  %20 = phi i32 [ %12, %11 ], [ %16, %15 ]
  %21 = phi i32 [ %13, %11 ], [ %17, %15 ]
  %22 = phi i32 [ %14, %11 ], [ %18, %15 ]
  store i32 %20, i32* %10, align 8
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 24
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 1
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 25
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 2
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 5
  store i32 8, i32* %29, align 4
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 3
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, 327
  %36 = and i32 %35, -8
  %37 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 4
  store i32 %36, i32* %37, align 8
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 6
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 7
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 8
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 27
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 9
  store i32 %48, i32* %49, align 4
  %50 = load i32, i32* %7, align 8
  %51 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 10
  store i32 %50, i32* %51, align 8
  %52 = load i32, i32* %4, align 4
  %53 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 11
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %55 = bitcast i8** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12
  %58 = bitcast [4 x i8*]* %57 to i64*
  store i64 %56, i64* %58, align 8
  %59 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 1
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8
  %64 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %65 = bitcast i8** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 2
  %68 = bitcast i8** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 3
  store i8* null, i8** %69, align 8
  %70 = load i32, i32* %30, align 8
  %71 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 0
  store i32 %70, i32* %71, align 8
  %72 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 1
  store i32 %73, i32* %74, align 4
  %75 = load i32, i32* %72, align 4
  %76 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 2
  store i32 %75, i32* %76, align 8
  %77 = load i32, i32* %30, align 8
  %78 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 3
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 29
  %80 = load i32, i32* %79, align 8
  %81 = and i32 %80, 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %104, label %83

83:                                               ; preds = %19
  %84 = getelementptr inbounds [4 x i8*], [4 x i8*]* %57, i64 0, i64 0
  store i32 %21, i32* %10, align 8
  %85 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 23
  %86 = load i32, i32* %85, align 8
  store i32 %86, i32* %29, align 4
  %87 = load i64, i64* %55, align 8
  %88 = shl i64 %87, 1
  %89 = inttoptr i64 %88 to i8*
  store i8* %89, i8** %84, align 8
  %90 = load i64, i64* %60, align 8
  %91 = shl i64 %90, 1
  %92 = inttoptr i64 %91 to i8*
  store i8* %92, i8** %62, align 8
  %93 = load i64, i64* %65, align 8
  %94 = shl i64 %93, 1
  %95 = inttoptr i64 %94 to i8*
  store i8* %95, i8** %67, align 8
  store i8* null, i8** %69, align 8
  %96 = load i32, i32* %30, align 8
  %97 = shl nsw i32 %96, 1
  store i32 %97, i32* %71, align 8
  %98 = load i32, i32* %72, align 4
  %99 = shl nsw i32 %98, 1
  store i32 %99, i32* %74, align 4
  %100 = load i32, i32* %72, align 4
  %101 = shl nsw i32 %100, 1
  store i32 %101, i32* %76, align 8
  %102 = load i32, i32* %30, align 8
  %103 = shl nsw i32 %102, 1
  store i32 %103, i32* %78, align 4
  br label %104

104:                                              ; preds = %19, %83
  %105 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 14
  store i32 %22, i32* %105, align 8
  %106 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 15
  store i8* %2, i8** %106, align 8
  %107 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 17
  %108 = bitcast i8** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 16
  %111 = bitcast i8** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 17
  store i32 0, i32* %112, align 8
  %113 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 18
  store i32 0, i32* %113, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @image2yuvconfig(%struct.vpx_image* nocapture readonly, %struct.yv12_buffer_config*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12
  %4 = bitcast [4 x i8*]* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %7 = bitcast i8** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 12, i64 2
  %14 = bitcast i8** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 6
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2
  store i32 %19, i32* %20, align 8
  %21 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 7
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 8
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 26
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 9
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 27
  store i32 %28, i32* %29, align 8
  %30 = load i32, i32* %18, align 8
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 0
  store i32 %30, i32* %31, align 8
  %32 = load i32, i32* %21, align 4
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 1
  store i32 %32, i32* %33, align 4
  %34 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 10
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %41, label %37

37:                                               ; preds = %2
  %38 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 265
  br i1 %40, label %41, label %44

41:                                               ; preds = %37, %2
  %42 = add nsw i32 %30, 1
  %43 = sdiv i32 %42, 2
  br label %44

44:                                               ; preds = %37, %41
  %45 = phi i32 [ %43, %41 ], [ %30, %37 ]
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 11
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = add nsw i32 %32, 1
  %52 = sdiv i32 %51, 2
  br label %53

53:                                               ; preds = %44, %50
  %54 = phi i32 [ %52, %50 ], [ %32, %44 ]
  %55 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 6
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 7
  store i32 %45, i32* %56, align 4
  %57 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 8
  store i32 %54, i32* %57, align 8
  %58 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 0
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 13, i64 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 24
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 2
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 25
  store i32 %68, i32* %69, align 8
  %70 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = and i32 %71, 2048
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %53
  %75 = insertelement <2 x i64> undef, i64 %5, i32 0
  %76 = insertelement <2 x i64> %75, i64 %10, i32 1
  %77 = lshr <2 x i64> %76, <i64 1, i64 1>
  %78 = inttoptr <2 x i64> %77 to <2 x i8*>
  %79 = bitcast i8** %6 to <2 x i8*>*
  store <2 x i8*> %78, <2 x i8*>* %79, align 8
  %80 = lshr i64 %15, 1
  %81 = inttoptr i64 %80 to i8*
  store i8* %81, i8** %16, align 8
  %82 = ashr i32 %59, 1
  store i32 %82, i32* %60, align 8
  %83 = ashr i32 %62, 1
  store i32 %83, i32* %63, align 4
  br label %84

84:                                               ; preds = %53, %74
  %85 = phi i32 [ %82, %74 ], [ %59, %53 ]
  %86 = phi i32 [ 8, %74 ], [ 0, %53 ]
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 29
  store i32 %86, i32* %87, align 8
  %88 = getelementptr inbounds %struct.vpx_image, %struct.vpx_image* %0, i64 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 %85, %89
  %91 = lshr i32 %90, 1
  %92 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 19
  store i32 %91, i32* %92, align 8
  %93 = load i32, i32* %34, align 8
  %94 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 21
  store i32 %93, i32* %94, align 8
  %95 = load i32, i32* %47, align 4
  %96 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 22
  store i32 %95, i32* %96, align 4
  %97 = load i32, i32* %70, align 8
  %98 = icmp eq i32 %97, 265
  br i1 %98, label %99, label %100

99:                                               ; preds = %84
  store i32 1, i32* %94, align 8
  br label %100

100:                                              ; preds = %99, %84
  ret i32 0
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
