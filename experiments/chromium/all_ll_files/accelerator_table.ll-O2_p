; ModuleID = '../../chrome/browser/ui/views/accelerator_table.cc'
source_filename = "../../chrome/browser/ui/views/accelerator_table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [24 x i8] }
%struct.AcceleratorMapping = type { i32, i32, i32 }
%"struct.base::Feature" = type { i8*, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %struct.AcceleratorMapping*, %struct.AcceleratorMapping*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.AcceleratorMapping* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ui::Accelerator" = type { i32, i32, i32, %"class.base::TimeTicks", i8, i32 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }

$_ZNSt3__16vectorI18AcceleratorMappingNS_9allocatorIS1_EEE6insertIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPS1_EEE4typeENSD_IS7_EES9_S9_ = comdat any

@_ZZ18GetAcceleratorListvE12accelerators = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZ18GetAcceleratorListvE12accelerators = internal global i64 0, align 8
@_ZN12_GLOBAL__N_115kAcceleratorMapE = internal constant [120 x %struct.AcceleratorMapping] [%struct.AcceleratorMapping { i32 118, i32 0, i32 40260 }, %struct.AcceleratorMapping { i32 123, i32 0, i32 40237 }, %struct.AcceleratorMapping { i32 27, i32 0, i32 37003 }, %struct.AcceleratorMapping { i32 68, i32 4, i32 35000 }, %struct.AcceleratorMapping { i32 68, i32 6, i32 35001 }, %struct.AcceleratorMapping { i32 87, i32 4, i32 34015 }, %struct.AcceleratorMapping { i32 87, i32 6, i32 34012 }, %struct.AcceleratorMapping { i32 70, i32 4, i32 37000 }, %struct.AcceleratorMapping { i32 65, i32 6, i32 52500 }, %struct.AcceleratorMapping { i32 71, i32 4, i32 37001 }, %struct.AcceleratorMapping { i32 71, i32 6, i32 37002 }, %struct.AcceleratorMapping { i32 76, i32 4, i32 39001 }, %struct.AcceleratorMapping { i32 79, i32 4, i32 40000 }, %struct.AcceleratorMapping { i32 80, i32 4, i32 35003 }, %struct.AcceleratorMapping { i32 82, i32 4, i32 33002 }, %struct.AcceleratorMapping { i32 82, i32 6, i32 33007 }, %struct.AcceleratorMapping { i32 83, i32 4, i32 35004 }, %struct.AcceleratorMapping { i32 57, i32 4, i32 34026 }, %struct.AcceleratorMapping { i32 105, i32 4, i32 34026 }, %struct.AcceleratorMapping { i32 57, i32 8, i32 34026 }, %struct.AcceleratorMapping { i32 105, i32 8, i32 34026 }, %struct.AcceleratorMapping { i32 34, i32 6, i32 34032 }, %struct.AcceleratorMapping { i32 33, i32 6, i32 34033 }, %struct.AcceleratorMapping { i32 9, i32 4, i32 34016 }, %struct.AcceleratorMapping { i32 34, i32 4, i32 34016 }, %struct.AcceleratorMapping { i32 9, i32 6, i32 34017 }, %struct.AcceleratorMapping { i32 33, i32 4, i32 34017 }, %struct.AcceleratorMapping { i32 49, i32 4, i32 34018 }, %struct.AcceleratorMapping { i32 97, i32 4, i32 34018 }, %struct.AcceleratorMapping { i32 50, i32 4, i32 34019 }, %struct.AcceleratorMapping { i32 98, i32 4, i32 34019 }, %struct.AcceleratorMapping { i32 51, i32 4, i32 34020 }, %struct.AcceleratorMapping { i32 99, i32 4, i32 34020 }, %struct.AcceleratorMapping { i32 52, i32 4, i32 34021 }, %struct.AcceleratorMapping { i32 100, i32 4, i32 34021 }, %struct.AcceleratorMapping { i32 53, i32 4, i32 34022 }, %struct.AcceleratorMapping { i32 101, i32 4, i32 34022 }, %struct.AcceleratorMapping { i32 54, i32 4, i32 34023 }, %struct.AcceleratorMapping { i32 102, i32 4, i32 34023 }, %struct.AcceleratorMapping { i32 55, i32 4, i32 34024 }, %struct.AcceleratorMapping { i32 103, i32 4, i32 34024 }, %struct.AcceleratorMapping { i32 56, i32 4, i32 34025 }, %struct.AcceleratorMapping { i32 104, i32 4, i32 34025 }, %struct.AcceleratorMapping { i32 49, i32 8, i32 34018 }, %struct.AcceleratorMapping { i32 97, i32 8, i32 34018 }, %struct.AcceleratorMapping { i32 50, i32 8, i32 34019 }, %struct.AcceleratorMapping { i32 98, i32 8, i32 34019 }, %struct.AcceleratorMapping { i32 51, i32 8, i32 34020 }, %struct.AcceleratorMapping { i32 99, i32 8, i32 34020 }, %struct.AcceleratorMapping { i32 52, i32 8, i32 34021 }, %struct.AcceleratorMapping { i32 100, i32 8, i32 34021 }, %struct.AcceleratorMapping { i32 53, i32 8, i32 34022 }, %struct.AcceleratorMapping { i32 101, i32 8, i32 34022 }, %struct.AcceleratorMapping { i32 54, i32 8, i32 34023 }, %struct.AcceleratorMapping { i32 102, i32 8, i32 34023 }, %struct.AcceleratorMapping { i32 55, i32 8, i32 34024 }, %struct.AcceleratorMapping { i32 103, i32 8, i32 34024 }, %struct.AcceleratorMapping { i32 56, i32 8, i32 34025 }, %struct.AcceleratorMapping { i32 104, i32 8, i32 34025 }, %struct.AcceleratorMapping { i32 171, i32 0, i32 40009 }, %struct.AcceleratorMapping { i32 66, i32 6, i32 40009 }, %struct.AcceleratorMapping { i32 189, i32 4, i32 38003 }, %struct.AcceleratorMapping { i32 109, i32 4, i32 38003 }, %struct.AcceleratorMapping { i32 48, i32 4, i32 38002 }, %struct.AcceleratorMapping { i32 96, i32 4, i32 38002 }, %struct.AcceleratorMapping { i32 187, i32 4, i32 38001 }, %struct.AcceleratorMapping { i32 107, i32 4, i32 38001 }, %struct.AcceleratorMapping { i32 112, i32 0, i32 40019 }, %struct.AcceleratorMapping { i32 114, i32 0, i32 37001 }, %struct.AcceleratorMapping { i32 114, i32 2, i32 37002 }, %struct.AcceleratorMapping { i32 115, i32 4, i32 34015 }, %struct.AcceleratorMapping { i32 115, i32 8, i32 34012 }, %struct.AcceleratorMapping { i32 116, i32 0, i32 33002 }, %struct.AcceleratorMapping { i32 116, i32 4, i32 33007 }, %struct.AcceleratorMapping { i32 116, i32 2, i32 33007 }, %struct.AcceleratorMapping { i32 117, i32 0, i32 39004 }, %struct.AcceleratorMapping { i32 117, i32 2, i32 39005 }, %struct.AcceleratorMapping { i32 121, i32 0, i32 39003 }, %struct.AcceleratorMapping { i32 122, i32 0, i32 34030 }, %struct.AcceleratorMapping { i32 77, i32 6, i32 40134 }, %struct.AcceleratorMapping { i32 166, i32 0, i32 33000 }, %struct.AcceleratorMapping { i32 167, i32 0, i32 33001 }, %struct.AcceleratorMapping { i32 172, i32 0, i32 33003 }, %struct.AcceleratorMapping { i32 168, i32 0, i32 33002 }, %struct.AcceleratorMapping { i32 168, i32 4, i32 33007 }, %struct.AcceleratorMapping { i32 168, i32 2, i32 33007 }, %struct.AcceleratorMapping { i32 46, i32 6, i32 40013 }, %struct.AcceleratorMapping { i32 27, i32 2, i32 40006 }, %struct.AcceleratorMapping { i32 164, i32 0, i32 39003 }, %struct.AcceleratorMapping { i32 18, i32 0, i32 39003 }, %struct.AcceleratorMapping { i32 165, i32 0, i32 39003 }, %struct.AcceleratorMapping { i32 170, i32 0, i32 39002 }, %struct.AcceleratorMapping { i32 78, i32 6, i32 34001 }, %struct.AcceleratorMapping { i32 84, i32 4, i32 34014 }, %struct.AcceleratorMapping { i32 78, i32 4, i32 34000 }, %struct.AcceleratorMapping { i32 84, i32 6, i32 34028 }, %struct.AcceleratorMapping { i32 37, i32 8, i32 33000 }, %struct.AcceleratorMapping { i32 37, i32 32, i32 33000 }, %struct.AcceleratorMapping { i32 80, i32 6, i32 35007 }, %struct.AcceleratorMapping { i32 73, i32 6, i32 40004 }, %struct.AcceleratorMapping { i32 74, i32 6, i32 40005 }, %struct.AcceleratorMapping { i32 67, i32 6, i32 40023 }, %struct.AcceleratorMapping { i32 66, i32 10, i32 39006 }, %struct.AcceleratorMapping { i32 65, i32 10, i32 39007 }, %struct.AcceleratorMapping { i32 68, i32 8, i32 39001 }, %struct.AcceleratorMapping { i32 69, i32 4, i32 39002 }, %struct.AcceleratorMapping { i32 75, i32 4, i32 39002 }, %struct.AcceleratorMapping { i32 84, i32 10, i32 39000 }, %struct.AcceleratorMapping { i32 39, i32 8, i32 33001 }, %struct.AcceleratorMapping { i32 39, i32 32, i32 33001 }, %struct.AcceleratorMapping { i32 36, i32 8, i32 33003 }, %struct.AcceleratorMapping { i32 69, i32 8, i32 40021 }, %struct.AcceleratorMapping { i32 70, i32 8, i32 40021 }, %struct.AcceleratorMapping { i32 79, i32 6, i32 40011 }, %struct.AcceleratorMapping { i32 74, i32 4, i32 40012 }, %struct.AcceleratorMapping { i32 72, i32 4, i32 40010 }, %struct.AcceleratorMapping { i32 85, i32 4, i32 35002 }, %struct.AcceleratorMapping { i32 189, i32 6, i32 38003 }, %struct.AcceleratorMapping { i32 187, i32 6, i32 38001 }, %struct.AcceleratorMapping { i32 32, i32 4, i32 40261 }], align 16
@_ZN8features13kUIDebugToolsE = external global %"struct.base::Feature", align 8
@_ZN12_GLOBAL__N_122kUIDebugAcceleratorMapE = internal constant [3 x %struct.AcceleratorMapping] [%struct.AcceleratorMapping { i32 84, i32 14, i32 52510 }, %struct.AcceleratorMapping { i32 86, i32 14, i32 52511 }, %struct.AcceleratorMapping { i32 77, i32 14, i32 52512 }], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z18GetAcceleratorListv(%"class.std::__1::vector"* noalias sret) local_unnamed_addr #0 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZ18GetAcceleratorListvE12accelerators to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZ18GetAcceleratorListvE12accelerators) #9
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators, i64 0, i32 0, i64 0), i8 0, i64 24, i1 false) #9
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZ18GetAcceleratorListvE12accelerators) #9
  br label %8

8:                                                ; preds = %4, %7, %1
  %9 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** bitcast (%"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators to %struct.AcceleratorMapping**), align 8
  %10 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators, i64 0, i32 0, i64 8) to %struct.AcceleratorMapping**), align 8
  %11 = icmp eq %struct.AcceleratorMapping* %9, %10
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = tail call %struct.AcceleratorMapping* @_ZNSt3__16vectorI18AcceleratorMappingNS_9allocatorIS1_EEE6insertIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPS1_EEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"* bitcast (%"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators to %"class.std::__1::vector"*), %struct.AcceleratorMapping* %9, %struct.AcceleratorMapping* getelementptr inbounds ([120 x %struct.AcceleratorMapping], [120 x %struct.AcceleratorMapping]* @_ZN12_GLOBAL__N_115kAcceleratorMapE, i64 0, i64 0), %struct.AcceleratorMapping* getelementptr inbounds ([120 x %struct.AcceleratorMapping], [120 x %struct.AcceleratorMapping]* @_ZN12_GLOBAL__N_115kAcceleratorMapE, i64 1, i64 0))
  %14 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN8features13kUIDebugToolsE) #9
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** bitcast (%"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators to %struct.AcceleratorMapping**), align 8
  %17 = tail call %struct.AcceleratorMapping* @_ZNSt3__16vectorI18AcceleratorMappingNS_9allocatorIS1_EEE6insertIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPS1_EEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"* bitcast (%"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators to %"class.std::__1::vector"*), %struct.AcceleratorMapping* %16, %struct.AcceleratorMapping* getelementptr inbounds ([3 x %struct.AcceleratorMapping], [3 x %struct.AcceleratorMapping]* @_ZN12_GLOBAL__N_122kUIDebugAcceleratorMapE, i64 0, i64 0), %struct.AcceleratorMapping* getelementptr inbounds ([3 x %struct.AcceleratorMapping], [3 x %struct.AcceleratorMapping]* @_ZN12_GLOBAL__N_122kUIDebugAcceleratorMapE, i64 1, i64 0))
  br label %18

18:                                               ; preds = %12, %15, %8
  %19 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #9
  %20 = load i64, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators, i64 0, i32 0, i64 8) to i64*), align 8
  %21 = load i64, i64* bitcast (%"class.base::NoDestructor"* @_ZZ18GetAcceleratorListvE12accelerators to i64*), align 8
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 12
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %47, label %25

25:                                               ; preds = %18
  %26 = icmp ugt i64 %23, 1537228672809129301
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %28) #10
  unreachable

29:                                               ; preds = %25
  %30 = tail call i8* @_Znwm(i64 %22) #11
  %31 = bitcast i8* %30 to %struct.AcceleratorMapping*
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %33 = bitcast %struct.AcceleratorMapping** %32 to i8**
  store i8* %30, i8** %33, align 8
  %34 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %30, i8** %34, align 8
  %35 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %31, i64 %23
  %36 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %struct.AcceleratorMapping* %35, %struct.AcceleratorMapping** %36, align 8
  %37 = bitcast %struct.AcceleratorMapping** %32 to i64*
  %38 = ptrtoint i8* %30 to i64
  %39 = icmp sgt i64 %22, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %29
  %41 = udiv exact i64 %22, 12
  %42 = inttoptr i64 %21 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %30, i8* align 4 %42, i64 %22, i1 false) #9
  %43 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %31, i64 %41
  %44 = ptrtoint %struct.AcceleratorMapping* %43 to i64
  br label %45

45:                                               ; preds = %40, %29
  %46 = phi i64 [ %44, %40 ], [ %38, %29 ]
  store i64 %46, i64* %37, align 8
  br label %47

47:                                               ; preds = %18, %45
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %struct.AcceleratorMapping* @_ZNSt3__16vectorI18AcceleratorMappingNS_9allocatorIS1_EEE6insertIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPS1_EEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector"*, %struct.AcceleratorMapping*, %struct.AcceleratorMapping*, %struct.AcceleratorMapping*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %struct.AcceleratorMapping* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint %struct.AcceleratorMapping* %3 to i64
  %8 = ptrtoint %struct.AcceleratorMapping* %2 to i64
  %9 = sub i64 %7, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp sgt i64 %9, 0
  br i1 %11, label %12, label %152

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %struct.AcceleratorMapping** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** %16, align 8
  %18 = ptrtoint %struct.AcceleratorMapping* %17 to i64
  %19 = sub i64 %15, %18
  %20 = sdiv exact i64 %19, 12
  %21 = icmp sgt i64 %10, %20
  %22 = bitcast %struct.AcceleratorMapping** %16 to i64*
  br i1 %21, label %78, label %23

23:                                               ; preds = %12
  %24 = sub i64 %18, %5
  %25 = sdiv exact i64 %24, 12
  %26 = icmp sgt i64 %10, %25
  br i1 %26, label %27, label %43

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %2, i64 %25
  %29 = ptrtoint %struct.AcceleratorMapping* %28 to i64
  %30 = sub i64 %7, %29
  %31 = icmp sgt i64 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %27
  %33 = udiv exact i64 %30, 12
  %34 = bitcast %struct.AcceleratorMapping* %17 to i8*
  %35 = bitcast %struct.AcceleratorMapping* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %35, i64 %30, i1 false) #9
  %36 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %17, i64 %33
  %37 = ptrtoint %struct.AcceleratorMapping* %36 to i64
  br label %38

38:                                               ; preds = %32, %27
  %39 = phi i64 [ %37, %32 ], [ %18, %27 ]
  store i64 %39, i64* %22, align 8
  %40 = icmp sgt i64 %24, 0
  br i1 %40, label %41, label %152

41:                                               ; preds = %38
  %42 = inttoptr i64 %39 to %struct.AcceleratorMapping*
  br label %43

43:                                               ; preds = %41, %23
  %44 = phi i64 [ %39, %41 ], [ %18, %23 ]
  %45 = phi %struct.AcceleratorMapping* [ %42, %41 ], [ %17, %23 ]
  %46 = phi %struct.AcceleratorMapping* [ %28, %41 ], [ %3, %23 ]
  %47 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %1, i64 %10
  %48 = ptrtoint %struct.AcceleratorMapping* %47 to i64
  %49 = sub i64 %44, %48
  %50 = sdiv exact i64 %49, 12
  %51 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %1, i64 %50
  %52 = icmp ult %struct.AcceleratorMapping* %51, %17
  br i1 %52, label %63, label %55

53:                                               ; preds = %63
  %54 = ptrtoint %struct.AcceleratorMapping* %69 to i64
  br label %55

55:                                               ; preds = %53, %43
  %56 = phi i64 [ %54, %53 ], [ %44, %43 ]
  store i64 %56, i64* %22, align 8
  %57 = icmp eq i64 %49, 0
  br i1 %57, label %71, label %58

58:                                               ; preds = %55
  %59 = sdiv exact i64 %49, -12
  %60 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %45, i64 %59
  %61 = bitcast %struct.AcceleratorMapping* %60 to i8*
  %62 = bitcast %struct.AcceleratorMapping* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64 %49, i1 false) #9
  br label %71

63:                                               ; preds = %43, %63
  %64 = phi %struct.AcceleratorMapping* [ %69, %63 ], [ %45, %43 ]
  %65 = phi %struct.AcceleratorMapping* [ %68, %63 ], [ %51, %43 ]
  %66 = bitcast %struct.AcceleratorMapping* %64 to i8*
  %67 = bitcast %struct.AcceleratorMapping* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 12, i1 false) #9
  %68 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %65, i64 1
  %69 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %64, i64 1
  %70 = icmp ult %struct.AcceleratorMapping* %68, %17
  br i1 %70, label %63, label %53

71:                                               ; preds = %55, %58
  %72 = ptrtoint %struct.AcceleratorMapping* %46 to i64
  %73 = sub i64 %72, %8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %152, label %75

75:                                               ; preds = %71
  %76 = bitcast %struct.AcceleratorMapping* %1 to i8*
  %77 = bitcast %struct.AcceleratorMapping* %2 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %73, i1 false) #9
  br label %152

78:                                               ; preds = %12
  %79 = bitcast %"class.std::__1::vector"* %0 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %18, %80
  %82 = sdiv exact i64 %81, 12
  %83 = add nsw i64 %82, %10
  %84 = icmp ugt i64 %83, 1537228672809129301
  br i1 %84, label %85, label %87

85:                                               ; preds = %78
  %86 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %86) #10
  unreachable

87:                                               ; preds = %78
  %88 = sub i64 %15, %80
  %89 = sdiv exact i64 %88, 12
  %90 = icmp ult i64 %89, 768614336404564650
  br i1 %90, label %94, label %91

91:                                               ; preds = %87
  %92 = sub i64 %5, %80
  %93 = sdiv exact i64 %92, 12
  br label %101

94:                                               ; preds = %87
  %95 = shl nsw i64 %89, 1
  %96 = icmp ult i64 %95, %83
  %97 = select i1 %96, i64 %83, i64 %95
  %98 = sub i64 %5, %80
  %99 = sdiv exact i64 %98, 12
  %100 = icmp eq i64 %97, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %94, %91
  %102 = phi i64 [ %93, %91 ], [ %99, %94 ]
  %103 = phi i64 [ 1537228672809129301, %91 ], [ %97, %94 ]
  %104 = mul i64 %103, 12
  %105 = tail call i8* @_Znwm(i64 %104) #11
  %106 = bitcast i8* %105 to %struct.AcceleratorMapping*
  br label %107

107:                                              ; preds = %101, %94
  %108 = phi i64 [ %102, %101 ], [ %99, %94 ]
  %109 = phi i64 [ %103, %101 ], [ 0, %94 ]
  %110 = phi %struct.AcceleratorMapping* [ %106, %101 ], [ null, %94 ]
  %111 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %110, i64 %108
  %112 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %110, i64 %109
  %113 = ptrtoint %struct.AcceleratorMapping* %112 to i64
  %114 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %111, i64 %10
  br label %115

115:                                              ; preds = %107, %115
  %116 = phi %struct.AcceleratorMapping* [ %120, %115 ], [ %111, %107 ]
  %117 = phi %struct.AcceleratorMapping* [ %121, %115 ], [ %2, %107 ]
  %118 = bitcast %struct.AcceleratorMapping* %116 to i8*
  %119 = bitcast %struct.AcceleratorMapping* %117 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %119, i64 12, i1 false) #9
  %120 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %116, i64 1
  %121 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %117, i64 1
  %122 = icmp eq %struct.AcceleratorMapping* %114, %120
  br i1 %122, label %123, label %115

123:                                              ; preds = %115
  %124 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** %6, align 8
  %125 = ptrtoint %struct.AcceleratorMapping* %124 to i64
  %126 = sub i64 %5, %125
  %127 = sdiv exact i64 %126, -12
  %128 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %111, i64 %127
  %129 = ptrtoint %struct.AcceleratorMapping* %128 to i64
  %130 = icmp sgt i64 %126, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %123
  %132 = bitcast %struct.AcceleratorMapping* %128 to i8*
  %133 = bitcast %struct.AcceleratorMapping* %124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %132, i8* align 4 %133, i64 %126, i1 false) #9
  br label %134

134:                                              ; preds = %131, %123
  %135 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** %16, align 8
  %136 = icmp eq %struct.AcceleratorMapping* %135, %1
  br i1 %136, label %145, label %137

137:                                              ; preds = %134, %137
  %138 = phi %struct.AcceleratorMapping* [ %143, %137 ], [ %114, %134 ]
  %139 = phi %struct.AcceleratorMapping* [ %142, %137 ], [ %1, %134 ]
  %140 = bitcast %struct.AcceleratorMapping* %138 to i8*
  %141 = bitcast %struct.AcceleratorMapping* %139 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %140, i8* align 4 %141, i64 12, i1 false) #9
  %142 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %139, i64 1
  %143 = getelementptr inbounds %struct.AcceleratorMapping, %struct.AcceleratorMapping* %138, i64 1
  %144 = icmp eq %struct.AcceleratorMapping* %142, %135
  br i1 %144, label %145, label %137

145:                                              ; preds = %137, %134
  %146 = phi %struct.AcceleratorMapping* [ %114, %134 ], [ %143, %137 ]
  %147 = ptrtoint %struct.AcceleratorMapping* %146 to i64
  %148 = load %struct.AcceleratorMapping*, %struct.AcceleratorMapping** %6, align 8
  store i64 %129, i64* %79, align 8
  store i64 %147, i64* %22, align 8
  store i64 %113, i64* %14, align 8
  %149 = icmp eq %struct.AcceleratorMapping* %148, null
  br i1 %149, label %152, label %150

150:                                              ; preds = %145
  %151 = bitcast %struct.AcceleratorMapping* %148 to i8*
  tail call void @_ZdlPv(i8* %151) #11
  br label %152

152:                                              ; preds = %150, %145, %38, %71, %75, %4
  %153 = phi %struct.AcceleratorMapping* [ %1, %4 ], [ %1, %75 ], [ %1, %71 ], [ %1, %38 ], [ %111, %145 ], [ %111, %150 ]
  ret %struct.AcceleratorMapping* %153
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z34GetStandardAcceleratorForCommandIdiPN2ui11AcceleratorE(i32, %"class.ui::Accelerator"*) local_unnamed_addr #0 {
  %3 = alloca %"class.ui::Accelerator", align 8
  %4 = alloca %"class.ui::Accelerator", align 8
  %5 = alloca %"class.ui::Accelerator", align 8
  switch i32 %0, label %16 [
    i32 36000, label %6
    i32 36001, label %8
    i32 36003, label %10
  ]

6:                                                ; preds = %2
  %7 = bitcast %"class.ui::Accelerator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #9
  call void @_ZN2ui11AcceleratorC1ENS_12KeyboardCodeEiNS0_8KeyStateEN4base9TimeTicksE(%"class.ui::Accelerator"* nonnull %3, i32 88, i32 4, i32 0, i64 0) #9
  br label %12

8:                                                ; preds = %2
  %9 = bitcast %"class.ui::Accelerator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #9
  call void @_ZN2ui11AcceleratorC1ENS_12KeyboardCodeEiNS0_8KeyStateEN4base9TimeTicksE(%"class.ui::Accelerator"* nonnull %4, i32 67, i32 4, i32 0, i64 0) #9
  br label %12

10:                                               ; preds = %2
  %11 = bitcast %"class.ui::Accelerator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #9
  call void @_ZN2ui11AcceleratorC1ENS_12KeyboardCodeEiNS0_8KeyStateEN4base9TimeTicksE(%"class.ui::Accelerator"* nonnull %5, i32 86, i32 4, i32 0, i64 0) #9
  br label %12

12:                                               ; preds = %6, %8, %10
  %13 = phi %"class.ui::Accelerator"* [ %5, %10 ], [ %4, %8 ], [ %3, %6 ]
  %14 = phi i8* [ %11, %10 ], [ %9, %8 ], [ %7, %6 ]
  %15 = call dereferenceable(32) %"class.ui::Accelerator"* @_ZN2ui11AcceleratoraSERKS0_(%"class.ui::Accelerator"* %1, %"class.ui::Accelerator"* nonnull dereferenceable(32) %13) #9
  call void @_ZN2ui11AcceleratorD1Ev(%"class.ui::Accelerator"* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #9
  br label %16

16:                                               ; preds = %12, %2
  %17 = phi i1 [ false, %2 ], [ true, %12 ]
  ret i1 %17
}

declare void @_ZN2ui11AcceleratorC1ENS_12KeyboardCodeEiNS0_8KeyStateEN4base9TimeTicksE(%"class.ui::Accelerator"*, i32, i32, i32, i64) unnamed_addr #3

declare dereferenceable(32) %"class.ui::Accelerator"* @_ZN2ui11AcceleratoraSERKS0_(%"class.ui::Accelerator"*, %"class.ui::Accelerator"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2ui11AcceleratorD1Ev(%"class.ui::Accelerator"*) unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_Z19IsCommandRepeatablei(i32) local_unnamed_addr #5 {
  switch i32 %0, label %4 [
    i32 37001, label %2
    i32 37002, label %2
    i32 39004, label %2
    i32 39005, label %2
    i32 34032, label %2
    i32 34033, label %2
    i32 34016, label %2
    i32 34017, label %2
  ]

2:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %4
  %3 = phi i1 [ true, %1 ], [ false, %4 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %3

4:                                                ; preds = %1
  br label %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
