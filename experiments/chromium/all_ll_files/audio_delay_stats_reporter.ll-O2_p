; ModuleID = '../../media/webrtc/audio_delay_stats_reporter.cc'
source_filename = "../../media/webrtc/audio_delay_stats_reporter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::AudioDelayStatsReporter" = type { i32 (...)**, i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.base::HistogramBase" = type <{ i32 (...)**, i8*, %"struct.std::__1::atomic.2", [4 x i8] }>
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZTVN5media23AudioDelayStatsReporterE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::AudioDelayStatsReporter"*)* @_ZN5media23AudioDelayStatsReporterD2Ev to i8*), i8* bitcast (void (%"class.media::AudioDelayStatsReporter"*)* @_ZN5media23AudioDelayStatsReporterD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [38 x i8] c"Media.Audio.Processing.CaptureDelayMs\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"Media.Audio.Processing.RenderDelayMs\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"Media.Audio.Processing.TotalDelayMs\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"Media.Audio.Processing.CaptureDelayVarianceMs\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"Media.Audio.Processing.RenderDelayVarianceMs\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"Media.Audio.Processing.TotalDelayVarianceMs\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1
@_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_0.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_1.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_2.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_3.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8
@_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_4.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

@_ZN5media23AudioDelayStatsReporterC1Ei = hidden unnamed_addr alias void (%"class.media::AudioDelayStatsReporter"*, i32), void (%"class.media::AudioDelayStatsReporter"*, i32)* @_ZN5media23AudioDelayStatsReporterC2Ei
@_ZN5media23AudioDelayStatsReporterD1Ev = hidden unnamed_addr alias void (%"class.media::AudioDelayStatsReporter"*), void (%"class.media::AudioDelayStatsReporter"*)* @_ZN5media23AudioDelayStatsReporterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media23AudioDelayStatsReporterC2Ei(%"class.media::AudioDelayStatsReporter"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5media23AudioDelayStatsReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 2, i32 0
  %6 = bitcast i64* %5 to <2 x i64>*
  store <2 x i64> <i64 1000, i64 500000>, <2 x i64>* %6, align 8
  %7 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4
  %8 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5
  %9 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = icmp eq i32 %1, 0
  %14 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 72, i1 false)
  br i1 %13, label %50, label %15

15:                                               ; preds = %2
  %16 = icmp slt i32 %1, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  tail call void @abort() #9
  unreachable

18:                                               ; preds = %15
  %19 = shl nsw i64 %10, 2
  %20 = tail call i8* @_Znwm(i64 %19) #10
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds i32, i32* %21, i64 %10
  %23 = ptrtoint i32* %22 to i64
  %24 = insertelement <2 x i8*> undef, i8* %20, i32 0
  %25 = shufflevector <2 x i8*> %24, <2 x i8*> undef, <2 x i32> zeroinitializer
  %26 = ptrtoint <2 x i8*> %25 to <2 x i64>
  %27 = bitcast %"class.std::__1::vector"* %7 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %27, align 8
  store i64 %23, i64* %12, align 8
  %28 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast i32** %28 to i64*
  %30 = shl nsw i64 %10, 2
  %31 = tail call i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to i32*
  %33 = getelementptr inbounds i32, i32* %32, i64 %10
  %34 = ptrtoint i32* %33 to i64
  %35 = insertelement <2 x i8*> undef, i8* %31, i32 0
  %36 = shufflevector <2 x i8*> %35, <2 x i8*> undef, <2 x i32> zeroinitializer
  %37 = ptrtoint <2 x i8*> %36 to <2 x i64>
  %38 = bitcast %"class.std::__1::vector"* %8 to <2 x i64>*
  store <2 x i64> %37, <2 x i64>* %38, align 8
  store i64 %34, i64* %29, align 8
  %39 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %40 = bitcast i32** %39 to i64*
  %41 = shl nsw i64 %10, 2
  %42 = tail call i8* @_Znwm(i64 %41) #10
  %43 = bitcast i8* %42 to i32*
  %44 = getelementptr inbounds i32, i32* %43, i64 %10
  %45 = ptrtoint i32* %44 to i64
  %46 = insertelement <2 x i8*> undef, i8* %42, i32 0
  %47 = shufflevector <2 x i8*> %46, <2 x i8*> undef, <2 x i32> zeroinitializer
  %48 = ptrtoint <2 x i8*> %47 to <2 x i64>
  %49 = bitcast %"class.std::__1::vector"* %9 to <2 x i64>*
  store <2 x i64> %48, <2 x i64>* %49, align 8
  store i64 %45, i64* %40, align 8
  br label %50

50:                                               ; preds = %2, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media23AudioDelayStatsReporterD2Ev(%"class.media::AudioDelayStatsReporter"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5media23AudioDelayStatsReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = ptrtoint i32* %22 to i64
  %26 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 1
  %27 = bitcast i32** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = bitcast i32* %22 to i8*
  tail call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %20, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media23AudioDelayStatsReporterD0Ev(%"class.media::AudioDelayStatsReporter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5media23AudioDelayStatsReporterE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = ptrtoint i32* %22 to i64
  %26 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 1
  %27 = bitcast i32** %26 to i64*
  store i64 %25, i64* %27, align 8
  %28 = bitcast i32* %22 to i8*
  tail call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %20, %24
  %30 = bitcast %"class.media::AudioDelayStatsReporter"* %0 to i8*
  tail call void @_ZdlPv(i8* %30) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_(%"class.media::AudioDelayStatsReporter"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca %"class.base::TimeDelta", align 8
  %7 = alloca %"class.base::TimeDelta", align 8
  %8 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %1, i64* %8, align 8
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %6, i64 0, i32 0
  store i64 %2, i64* %9, align 8
  %10 = bitcast %"class.base::TimeDelta"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  %11 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %7, i64 0, i32 0
  store i64 -6148914691236517206, i64* %11, align 8
  %12 = add i64 %2, -9223372036854775807
  %13 = icmp ult i64 %12, 2
  br i1 %13, label %21, label %14

14:                                               ; preds = %3
  %15 = icmp slt i64 %2, 0
  %16 = select i1 %15, i64 -9223372036854775808, i64 9223372036854775807
  %17 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1, i64 %2) #11
  %18 = extractvalue { i64, i1 } %17, 1
  %19 = extractvalue { i64, i1 } %17, 0
  %20 = select i1 %18, i64 %16, i64 %19, !prof !2
  br label %29

21:                                               ; preds = %3
  %22 = add i64 %1, -9223372036854775807
  %23 = icmp ugt i64 %22, 1
  %24 = icmp eq i64 %1, %2
  %25 = or i1 %24, %23
  br i1 %25, label %29, label %26

26:                                               ; preds = %21
  %27 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0)) #11
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #11
  br label %29

29:                                               ; preds = %14, %21, %26
  %30 = phi i64 [ %20, %14 ], [ %2, %21 ], [ %2, %26 ]
  store i64 %30, i64* %11, align 8
  %31 = load atomic i64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer.0.0.0.0.0 acquire, align 8
  %32 = inttoptr i64 %31 to %"class.base::HistogramBase"*
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 2, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 3, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0), i64 %36, i64 %38, i32 50, i32 1) #11
  %40 = ptrtoint %"class.base::HistogramBase"* %39 to i64
  store atomic i64 %40, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer.0.0.0.0.0 release, align 8
  br label %41

41:                                               ; preds = %29, %34
  %42 = phi %"class.base::HistogramBase"* [ %32, %29 ], [ %39, %34 ]
  call void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"* %42, %"class.base::TimeDelta"* nonnull dereferenceable(8) %5) #11
  %43 = load atomic i64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_0.0.0.0.0.0 acquire, align 8
  %44 = inttoptr i64 %43 to %"class.base::HistogramBase"*
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %46, label %53

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 2, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 3, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i64 %48, i64 %50, i32 50, i32 1) #11
  %52 = ptrtoint %"class.base::HistogramBase"* %51 to i64
  store atomic i64 %52, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_0.0.0.0.0.0 release, align 8
  br label %53

53:                                               ; preds = %41, %46
  %54 = phi %"class.base::HistogramBase"* [ %44, %41 ], [ %51, %46 ]
  call void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"* %54, %"class.base::TimeDelta"* nonnull dereferenceable(8) %6) #11
  %55 = load atomic i64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_1.0.0.0.0.0 acquire, align 8
  %56 = inttoptr i64 %55 to %"class.base::HistogramBase"*
  %57 = icmp eq i64 %55, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %53
  %59 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 2, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 3, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = call %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i64 %60, i64 %62, i32 50, i32 1) #11
  %64 = ptrtoint %"class.base::HistogramBase"* %63 to i64
  store atomic i64 %64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_1.0.0.0.0.0 release, align 8
  br label %65

65:                                               ; preds = %53, %58
  %66 = phi %"class.base::HistogramBase"* [ %56, %53 ], [ %63, %58 ]
  call void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"* %66, %"class.base::TimeDelta"* nonnull dereferenceable(8) %7) #11
  %67 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4
  %68 = call i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"* nonnull %5) #11
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 1
  %71 = load i32*, i32** %70, align 8
  %72 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = icmp ult i32* %71, %73
  %75 = ptrtoint i32* %73 to i64
  br i1 %74, label %76, label %80

76:                                               ; preds = %65
  store i32 %69, i32* %71, align 4
  %77 = getelementptr inbounds i32, i32* %71, i64 1
  %78 = ptrtoint i32* %77 to i64
  %79 = bitcast i32** %70 to i64*
  store i64 %78, i64* %79, align 8
  br label %136

80:                                               ; preds = %65
  %81 = ptrtoint i32* %71 to i64
  %82 = bitcast i32** %70 to i64*
  %83 = bitcast %"class.std::__1::vector"* %67 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %81, %84
  %86 = ashr exact i64 %85, 2
  %87 = add nsw i64 %86, 1
  %88 = icmp ugt i64 %87, 4611686018427387903
  br i1 %88, label %89, label %91

89:                                               ; preds = %80
  %90 = bitcast %"class.std::__1::vector"* %67 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %90) #9
  unreachable

91:                                               ; preds = %80
  %92 = bitcast i32** %72 to i64*
  %93 = sub i64 %75, %84
  %94 = ashr exact i64 %93, 2
  %95 = icmp ult i64 %94, 2305843009213693951
  br i1 %95, label %96, label %104

96:                                               ; preds = %91
  %97 = ashr exact i64 %93, 1
  %98 = icmp ult i64 %97, %87
  %99 = select i1 %98, i64 %87, i64 %97
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %109, label %101

101:                                              ; preds = %96
  %102 = icmp ugt i64 %99, 4611686018427387903
  br i1 %102, label %103, label %104

103:                                              ; preds = %101
  call void @abort() #9
  unreachable

104:                                              ; preds = %101, %91
  %105 = phi i64 [ %99, %101 ], [ 4611686018427387903, %91 ]
  %106 = shl i64 %105, 2
  %107 = call i8* @_Znwm(i64 %106) #10
  %108 = bitcast i8* %107 to i32*
  br label %109

109:                                              ; preds = %104, %96
  %110 = phi i64 [ %105, %104 ], [ 0, %96 ]
  %111 = phi i32* [ %108, %104 ], [ null, %96 ]
  %112 = getelementptr inbounds i32, i32* %111, i64 %86
  %113 = getelementptr inbounds i32, i32* %111, i64 %110
  %114 = ptrtoint i32* %113 to i64
  store i32 %69, i32* %112, align 4
  %115 = getelementptr inbounds i32, i32* %112, i64 1
  %116 = ptrtoint i32* %115 to i64
  %117 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %67, i64 0, i32 0, i32 0
  %118 = load i32*, i32** %117, align 8
  %119 = load i64, i64* %82, align 8
  %120 = ptrtoint i32* %118 to i64
  %121 = sub i64 %119, %120
  %122 = ashr exact i64 %121, 2
  %123 = sub nsw i64 0, %122
  %124 = getelementptr inbounds i32, i32* %112, i64 %123
  %125 = ptrtoint i32* %124 to i64
  %126 = icmp sgt i64 %121, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %109
  %128 = bitcast i32* %124 to i8*
  %129 = bitcast i32* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %128, i8* align 4 %129, i64 %121, i1 false) #11
  %130 = load i32*, i32** %117, align 8
  br label %131

131:                                              ; preds = %127, %109
  %132 = phi i32* [ %118, %109 ], [ %130, %127 ]
  store i64 %125, i64* %83, align 8
  store i64 %116, i64* %82, align 8
  store i64 %114, i64* %92, align 8
  %133 = icmp eq i32* %132, null
  br i1 %133, label %136, label %134

134:                                              ; preds = %131
  %135 = bitcast i32* %132 to i8*
  call void @_ZdlPv(i8* %135) #10
  br label %136

136:                                              ; preds = %76, %131, %134
  %137 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5
  %138 = call i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"* nonnull %6) #11
  %139 = trunc i64 %138 to i32
  %140 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 1
  %141 = load i32*, i32** %140, align 8
  %142 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %143 = load i32*, i32** %142, align 8
  %144 = icmp ult i32* %141, %143
  %145 = ptrtoint i32* %143 to i64
  br i1 %144, label %146, label %150

146:                                              ; preds = %136
  store i32 %139, i32* %141, align 4
  %147 = getelementptr inbounds i32, i32* %141, i64 1
  %148 = ptrtoint i32* %147 to i64
  %149 = bitcast i32** %140 to i64*
  store i64 %148, i64* %149, align 8
  br label %206

150:                                              ; preds = %136
  %151 = ptrtoint i32* %141 to i64
  %152 = bitcast i32** %140 to i64*
  %153 = bitcast %"class.std::__1::vector"* %137 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = sub i64 %151, %154
  %156 = ashr exact i64 %155, 2
  %157 = add nsw i64 %156, 1
  %158 = icmp ugt i64 %157, 4611686018427387903
  br i1 %158, label %159, label %161

159:                                              ; preds = %150
  %160 = bitcast %"class.std::__1::vector"* %137 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %160) #9
  unreachable

161:                                              ; preds = %150
  %162 = bitcast i32** %142 to i64*
  %163 = sub i64 %145, %154
  %164 = ashr exact i64 %163, 2
  %165 = icmp ult i64 %164, 2305843009213693951
  br i1 %165, label %166, label %174

166:                                              ; preds = %161
  %167 = ashr exact i64 %163, 1
  %168 = icmp ult i64 %167, %157
  %169 = select i1 %168, i64 %157, i64 %167
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %179, label %171

171:                                              ; preds = %166
  %172 = icmp ugt i64 %169, 4611686018427387903
  br i1 %172, label %173, label %174

173:                                              ; preds = %171
  call void @abort() #9
  unreachable

174:                                              ; preds = %171, %161
  %175 = phi i64 [ %169, %171 ], [ 4611686018427387903, %161 ]
  %176 = shl i64 %175, 2
  %177 = call i8* @_Znwm(i64 %176) #10
  %178 = bitcast i8* %177 to i32*
  br label %179

179:                                              ; preds = %174, %166
  %180 = phi i64 [ %175, %174 ], [ 0, %166 ]
  %181 = phi i32* [ %178, %174 ], [ null, %166 ]
  %182 = getelementptr inbounds i32, i32* %181, i64 %156
  %183 = getelementptr inbounds i32, i32* %181, i64 %180
  %184 = ptrtoint i32* %183 to i64
  store i32 %139, i32* %182, align 4
  %185 = getelementptr inbounds i32, i32* %182, i64 1
  %186 = ptrtoint i32* %185 to i64
  %187 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %137, i64 0, i32 0, i32 0
  %188 = load i32*, i32** %187, align 8
  %189 = load i64, i64* %152, align 8
  %190 = ptrtoint i32* %188 to i64
  %191 = sub i64 %189, %190
  %192 = ashr exact i64 %191, 2
  %193 = sub nsw i64 0, %192
  %194 = getelementptr inbounds i32, i32* %182, i64 %193
  %195 = ptrtoint i32* %194 to i64
  %196 = icmp sgt i64 %191, 0
  br i1 %196, label %197, label %201

197:                                              ; preds = %179
  %198 = bitcast i32* %194 to i8*
  %199 = bitcast i32* %188 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %199, i64 %191, i1 false) #11
  %200 = load i32*, i32** %187, align 8
  br label %201

201:                                              ; preds = %197, %179
  %202 = phi i32* [ %188, %179 ], [ %200, %197 ]
  store i64 %195, i64* %153, align 8
  store i64 %186, i64* %152, align 8
  store i64 %184, i64* %162, align 8
  %203 = icmp eq i32* %202, null
  br i1 %203, label %206, label %204

204:                                              ; preds = %201
  %205 = bitcast i32* %202 to i8*
  call void @_ZdlPv(i8* %205) #10
  br label %206

206:                                              ; preds = %146, %201, %204
  %207 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6
  %208 = call i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"* nonnull %7) #11
  %209 = trunc i64 %208 to i32
  %210 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 1
  %211 = load i32*, i32** %210, align 8
  %212 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %213 = load i32*, i32** %212, align 8
  %214 = icmp ult i32* %211, %213
  %215 = ptrtoint i32* %213 to i64
  br i1 %214, label %216, label %220

216:                                              ; preds = %206
  store i32 %209, i32* %211, align 4
  %217 = getelementptr inbounds i32, i32* %211, i64 1
  %218 = ptrtoint i32* %217 to i64
  %219 = bitcast i32** %210 to i64*
  store i64 %218, i64* %219, align 8
  br label %276

220:                                              ; preds = %206
  %221 = ptrtoint i32* %211 to i64
  %222 = bitcast i32** %210 to i64*
  %223 = bitcast %"class.std::__1::vector"* %207 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = sub i64 %221, %224
  %226 = ashr exact i64 %225, 2
  %227 = add nsw i64 %226, 1
  %228 = icmp ugt i64 %227, 4611686018427387903
  br i1 %228, label %229, label %231

229:                                              ; preds = %220
  %230 = bitcast %"class.std::__1::vector"* %207 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %230) #9
  unreachable

231:                                              ; preds = %220
  %232 = bitcast i32** %212 to i64*
  %233 = sub i64 %215, %224
  %234 = ashr exact i64 %233, 2
  %235 = icmp ult i64 %234, 2305843009213693951
  br i1 %235, label %236, label %244

236:                                              ; preds = %231
  %237 = ashr exact i64 %233, 1
  %238 = icmp ult i64 %237, %227
  %239 = select i1 %238, i64 %227, i64 %237
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %249, label %241

241:                                              ; preds = %236
  %242 = icmp ugt i64 %239, 4611686018427387903
  br i1 %242, label %243, label %244

243:                                              ; preds = %241
  call void @abort() #9
  unreachable

244:                                              ; preds = %241, %231
  %245 = phi i64 [ %239, %241 ], [ 4611686018427387903, %231 ]
  %246 = shl i64 %245, 2
  %247 = call i8* @_Znwm(i64 %246) #10
  %248 = bitcast i8* %247 to i32*
  br label %249

249:                                              ; preds = %244, %236
  %250 = phi i64 [ %245, %244 ], [ 0, %236 ]
  %251 = phi i32* [ %248, %244 ], [ null, %236 ]
  %252 = getelementptr inbounds i32, i32* %251, i64 %226
  %253 = getelementptr inbounds i32, i32* %251, i64 %250
  %254 = ptrtoint i32* %253 to i64
  store i32 %209, i32* %252, align 4
  %255 = getelementptr inbounds i32, i32* %252, i64 1
  %256 = ptrtoint i32* %255 to i64
  %257 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %207, i64 0, i32 0, i32 0
  %258 = load i32*, i32** %257, align 8
  %259 = load i64, i64* %222, align 8
  %260 = ptrtoint i32* %258 to i64
  %261 = sub i64 %259, %260
  %262 = ashr exact i64 %261, 2
  %263 = sub nsw i64 0, %262
  %264 = getelementptr inbounds i32, i32* %252, i64 %263
  %265 = ptrtoint i32* %264 to i64
  %266 = icmp sgt i64 %261, 0
  br i1 %266, label %267, label %271

267:                                              ; preds = %249
  %268 = bitcast i32* %264 to i8*
  %269 = bitcast i32* %258 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %268, i8* align 4 %269, i64 %261, i1 false) #11
  %270 = load i32*, i32** %257, align 8
  br label %271

271:                                              ; preds = %267, %249
  %272 = phi i32* [ %258, %249 ], [ %270, %267 ]
  store i64 %265, i64* %223, align 8
  store i64 %256, i64* %222, align 8
  store i64 %254, i64* %232, align 8
  %273 = icmp eq i32* %272, null
  br i1 %273, label %276, label %274

274:                                              ; preds = %271
  %275 = bitcast i32* %272 to i8*
  call void @_ZdlPv(i8* %275) #10
  br label %276

276:                                              ; preds = %216, %271, %274
  %277 = bitcast i32** %70 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = bitcast %"class.std::__1::vector"* %67 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = sub i64 %278, %280
  %282 = ashr exact i64 %281, 2
  %283 = getelementptr inbounds %"class.media::AudioDelayStatsReporter", %"class.media::AudioDelayStatsReporter"* %0, i64 0, i32 1
  %284 = load i32, i32* %283, align 8
  %285 = sext i32 %284 to i64
  %286 = icmp eq i64 %282, %285
  br i1 %286, label %287, label %1005

287:                                              ; preds = %276
  %288 = icmp ult i64 %282, 2
  %289 = inttoptr i64 %280 to i32*
  %290 = inttoptr i64 %278 to i32*
  br i1 %288, label %508, label %291

291:                                              ; preds = %287
  %292 = icmp eq i32* %289, %290
  br i1 %292, label %494, label %293

293:                                              ; preds = %291
  %294 = getelementptr i32, i32* %290, i64 -1
  %295 = bitcast i32* %294 to i8*
  %296 = sub i64 0, %280
  %297 = getelementptr i8, i8* %295, i64 %296
  %298 = ptrtoint i8* %297 to i64
  %299 = lshr i64 %298, 2
  %300 = add nuw nsw i64 %299, 1
  %301 = icmp ult i64 %300, 8
  br i1 %301, label %388, label %302

302:                                              ; preds = %293
  %303 = and i64 %300, 9223372036854775800
  %304 = getelementptr i32, i32* %289, i64 %303
  %305 = add nsw i64 %303, -8
  %306 = lshr exact i64 %305, 3
  %307 = add nuw nsw i64 %306, 1
  %308 = and i64 %307, 3
  %309 = icmp ult i64 %305, 24
  br i1 %309, label %355, label %310

310:                                              ; preds = %302
  %311 = sub nsw i64 %307, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 0, %310 ], [ %352, %312 ]
  %314 = phi <4 x i32> [ zeroinitializer, %310 ], [ %350, %312 ]
  %315 = phi <4 x i32> [ zeroinitializer, %310 ], [ %351, %312 ]
  %316 = phi i64 [ %311, %310 ], [ %353, %312 ]
  %317 = getelementptr i32, i32* %289, i64 %313
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = getelementptr i32, i32* %317, i64 4
  %321 = bitcast i32* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4
  %323 = add nsw <4 x i32> %319, %314
  %324 = add nsw <4 x i32> %322, %315
  %325 = or i64 %313, 8
  %326 = getelementptr i32, i32* %289, i64 %325
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 4
  %329 = getelementptr i32, i32* %326, i64 4
  %330 = bitcast i32* %329 to <4 x i32>*
  %331 = load <4 x i32>, <4 x i32>* %330, align 4
  %332 = add nsw <4 x i32> %328, %323
  %333 = add nsw <4 x i32> %331, %324
  %334 = or i64 %313, 16
  %335 = getelementptr i32, i32* %289, i64 %334
  %336 = bitcast i32* %335 to <4 x i32>*
  %337 = load <4 x i32>, <4 x i32>* %336, align 4
  %338 = getelementptr i32, i32* %335, i64 4
  %339 = bitcast i32* %338 to <4 x i32>*
  %340 = load <4 x i32>, <4 x i32>* %339, align 4
  %341 = add nsw <4 x i32> %337, %332
  %342 = add nsw <4 x i32> %340, %333
  %343 = or i64 %313, 24
  %344 = getelementptr i32, i32* %289, i64 %343
  %345 = bitcast i32* %344 to <4 x i32>*
  %346 = load <4 x i32>, <4 x i32>* %345, align 4
  %347 = getelementptr i32, i32* %344, i64 4
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 4
  %350 = add nsw <4 x i32> %346, %341
  %351 = add nsw <4 x i32> %349, %342
  %352 = add i64 %313, 32
  %353 = add i64 %316, -4
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %312, !llvm.loop !3

355:                                              ; preds = %312, %302
  %356 = phi <4 x i32> [ undef, %302 ], [ %350, %312 ]
  %357 = phi <4 x i32> [ undef, %302 ], [ %351, %312 ]
  %358 = phi i64 [ 0, %302 ], [ %352, %312 ]
  %359 = phi <4 x i32> [ zeroinitializer, %302 ], [ %350, %312 ]
  %360 = phi <4 x i32> [ zeroinitializer, %302 ], [ %351, %312 ]
  %361 = icmp eq i64 %308, 0
  br i1 %361, label %378, label %362

362:                                              ; preds = %355, %362
  %363 = phi i64 [ %375, %362 ], [ %358, %355 ]
  %364 = phi <4 x i32> [ %373, %362 ], [ %359, %355 ]
  %365 = phi <4 x i32> [ %374, %362 ], [ %360, %355 ]
  %366 = phi i64 [ %376, %362 ], [ %308, %355 ]
  %367 = getelementptr i32, i32* %289, i64 %363
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4
  %370 = getelementptr i32, i32* %367, i64 4
  %371 = bitcast i32* %370 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = add nsw <4 x i32> %369, %364
  %374 = add nsw <4 x i32> %372, %365
  %375 = add i64 %363, 8
  %376 = add i64 %366, -1
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %362, !llvm.loop !5

378:                                              ; preds = %362, %355
  %379 = phi <4 x i32> [ %356, %355 ], [ %373, %362 ]
  %380 = phi <4 x i32> [ %357, %355 ], [ %374, %362 ]
  %381 = add <4 x i32> %380, %379
  %382 = shufflevector <4 x i32> %381, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %383 = add <4 x i32> %381, %382
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = extractelement <4 x i32> %385, i32 0
  %387 = icmp eq i64 %300, %303
  br i1 %387, label %398, label %388

388:                                              ; preds = %378, %293
  %389 = phi i32 [ 0, %293 ], [ %386, %378 ]
  %390 = phi i32* [ %289, %293 ], [ %304, %378 ]
  br label %391

391:                                              ; preds = %388, %391
  %392 = phi i32 [ %395, %391 ], [ %389, %388 ]
  %393 = phi i32* [ %396, %391 ], [ %390, %388 ]
  %394 = load i32, i32* %393, align 4
  %395 = add nsw i32 %394, %392
  %396 = getelementptr inbounds i32, i32* %393, i64 1
  %397 = icmp eq i32* %396, %290
  br i1 %397, label %398, label %391, !llvm.loop !7

398:                                              ; preds = %391, %378
  %399 = phi i32 [ %386, %378 ], [ %395, %391 ]
  %400 = sext i32 %399 to i64
  %401 = udiv i64 %400, %282
  %402 = trunc i64 %401 to i32
  %403 = getelementptr i32, i32* %290, i64 -1
  %404 = bitcast i32* %403 to i8*
  %405 = sub i64 0, %280
  %406 = getelementptr i8, i8* %404, i64 %405
  %407 = ptrtoint i8* %406 to i64
  %408 = lshr i64 %407, 2
  %409 = add nuw nsw i64 %408, 1
  %410 = icmp ult i64 %409, 8
  br i1 %410, label %411, label %414

411:                                              ; preds = %481, %398
  %412 = phi i32 [ 0, %398 ], [ %489, %481 ]
  %413 = phi i32* [ %289, %398 ], [ %416, %481 ]
  br label %499

414:                                              ; preds = %398
  %415 = and i64 %409, 9223372036854775800
  %416 = getelementptr i32, i32* %289, i64 %415
  %417 = insertelement <4 x i32> undef, i32 %402, i32 0
  %418 = shufflevector <4 x i32> %417, <4 x i32> undef, <4 x i32> zeroinitializer
  %419 = insertelement <4 x i32> undef, i32 %402, i32 0
  %420 = shufflevector <4 x i32> %419, <4 x i32> undef, <4 x i32> zeroinitializer
  %421 = add nsw i64 %415, -8
  %422 = lshr exact i64 %421, 3
  %423 = add nuw nsw i64 %422, 1
  %424 = and i64 %423, 1
  %425 = icmp eq i64 %421, 0
  br i1 %425, label %461, label %426

426:                                              ; preds = %414
  %427 = sub nuw nsw i64 %423, %424
  br label %428

428:                                              ; preds = %428, %426
  %429 = phi i64 [ 0, %426 ], [ %458, %428 ]
  %430 = phi <4 x i32> [ zeroinitializer, %426 ], [ %456, %428 ]
  %431 = phi <4 x i32> [ zeroinitializer, %426 ], [ %457, %428 ]
  %432 = phi i64 [ %427, %426 ], [ %459, %428 ]
  %433 = getelementptr i32, i32* %289, i64 %429
  %434 = bitcast i32* %433 to <4 x i32>*
  %435 = load <4 x i32>, <4 x i32>* %434, align 4
  %436 = getelementptr i32, i32* %433, i64 4
  %437 = bitcast i32* %436 to <4 x i32>*
  %438 = load <4 x i32>, <4 x i32>* %437, align 4
  %439 = sub nsw <4 x i32> %435, %418
  %440 = sub nsw <4 x i32> %438, %420
  %441 = mul nsw <4 x i32> %439, %439
  %442 = mul nsw <4 x i32> %440, %440
  %443 = add nuw nsw <4 x i32> %441, %430
  %444 = add nuw nsw <4 x i32> %442, %431
  %445 = or i64 %429, 8
  %446 = getelementptr i32, i32* %289, i64 %445
  %447 = bitcast i32* %446 to <4 x i32>*
  %448 = load <4 x i32>, <4 x i32>* %447, align 4
  %449 = getelementptr i32, i32* %446, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  %451 = load <4 x i32>, <4 x i32>* %450, align 4
  %452 = sub nsw <4 x i32> %448, %418
  %453 = sub nsw <4 x i32> %451, %420
  %454 = mul nsw <4 x i32> %452, %452
  %455 = mul nsw <4 x i32> %453, %453
  %456 = add nuw nsw <4 x i32> %454, %443
  %457 = add nuw nsw <4 x i32> %455, %444
  %458 = add i64 %429, 16
  %459 = add i64 %432, -2
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %461, label %428, !llvm.loop !9

461:                                              ; preds = %428, %414
  %462 = phi <4 x i32> [ undef, %414 ], [ %456, %428 ]
  %463 = phi <4 x i32> [ undef, %414 ], [ %457, %428 ]
  %464 = phi i64 [ 0, %414 ], [ %458, %428 ]
  %465 = phi <4 x i32> [ zeroinitializer, %414 ], [ %456, %428 ]
  %466 = phi <4 x i32> [ zeroinitializer, %414 ], [ %457, %428 ]
  %467 = icmp eq i64 %424, 0
  br i1 %467, label %481, label %468

468:                                              ; preds = %461
  %469 = getelementptr i32, i32* %289, i64 %464
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4
  %472 = getelementptr i32, i32* %469, i64 4
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4
  %475 = sub nsw <4 x i32> %471, %418
  %476 = sub nsw <4 x i32> %474, %420
  %477 = mul nsw <4 x i32> %476, %476
  %478 = add nuw nsw <4 x i32> %477, %466
  %479 = mul nsw <4 x i32> %475, %475
  %480 = add nuw nsw <4 x i32> %479, %465
  br label %481

481:                                              ; preds = %461, %468
  %482 = phi <4 x i32> [ %462, %461 ], [ %480, %468 ]
  %483 = phi <4 x i32> [ %463, %461 ], [ %478, %468 ]
  %484 = add nuw <4 x i32> %483, %482
  %485 = shufflevector <4 x i32> %484, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %486 = add <4 x i32> %484, %485
  %487 = shufflevector <4 x i32> %486, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %488 = add <4 x i32> %486, %487
  %489 = extractelement <4 x i32> %488, i32 0
  %490 = icmp eq i64 %409, %415
  br i1 %490, label %491, label %411

491:                                              ; preds = %499, %481
  %492 = phi i32 [ %489, %481 ], [ %505, %499 ]
  %493 = zext i32 %492 to i64
  br label %494

494:                                              ; preds = %491, %291
  %495 = phi i64 [ %493, %491 ], [ 0, %291 ]
  %496 = add nsw i64 %282, -1
  %497 = udiv i64 %495, %496
  %498 = trunc i64 %497 to i32
  br label %508

499:                                              ; preds = %411, %499
  %500 = phi i32 [ %505, %499 ], [ %412, %411 ]
  %501 = phi i32* [ %506, %499 ], [ %413, %411 ]
  %502 = load i32, i32* %501, align 4
  %503 = sub nsw i32 %502, %402
  %504 = mul nsw i32 %503, %503
  %505 = add nuw nsw i32 %504, %500
  %506 = getelementptr inbounds i32, i32* %501, i64 1
  %507 = icmp eq i32* %506, %290
  br i1 %507, label %491, label %499, !llvm.loop !10

508:                                              ; preds = %287, %494
  %509 = phi i32 [ %498, %494 ], [ 0, %287 ]
  %510 = load atomic i64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_2.0.0.0.0.0 acquire, align 8
  %511 = inttoptr i64 %510 to %"class.base::HistogramBase"*
  %512 = icmp eq i64 %510, 0
  br i1 %512, label %513, label %516

513:                                              ; preds = %508
  %514 = call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0), i32 1, i32 500, i32 50, i32 1) #11
  %515 = ptrtoint %"class.base::HistogramBase"* %514 to i64
  store atomic i64 %515, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_2.0.0.0.0.0 release, align 8
  br label %516

516:                                              ; preds = %508, %513
  %517 = phi %"class.base::HistogramBase"* [ %511, %508 ], [ %514, %513 ]
  %518 = bitcast %"class.base::HistogramBase"* %517 to void (%"class.base::HistogramBase"*, i32)***
  %519 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %518, align 8
  %520 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %519, i64 6
  %521 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %520, align 8
  call void %521(%"class.base::HistogramBase"* %517, i32 %509) #11
  %522 = load i64, i64* %279, align 8
  store i64 %522, i64* %277, align 8
  %523 = bitcast i32** %140 to i64*
  %524 = load i64, i64* %523, align 8
  %525 = bitcast %"class.std::__1::vector"* %137 to i64*
  %526 = load i64, i64* %525, align 8
  %527 = sub i64 %524, %526
  %528 = ashr exact i64 %527, 2
  %529 = icmp ult i64 %528, 2
  %530 = inttoptr i64 %526 to i32*
  %531 = inttoptr i64 %524 to i32*
  br i1 %529, label %749, label %532

532:                                              ; preds = %516
  %533 = icmp eq i32* %530, %531
  br i1 %533, label %735, label %534

534:                                              ; preds = %532
  %535 = getelementptr i32, i32* %531, i64 -1
  %536 = bitcast i32* %535 to i8*
  %537 = sub i64 0, %526
  %538 = getelementptr i8, i8* %536, i64 %537
  %539 = ptrtoint i8* %538 to i64
  %540 = lshr i64 %539, 2
  %541 = add nuw nsw i64 %540, 1
  %542 = icmp ult i64 %541, 8
  br i1 %542, label %629, label %543

543:                                              ; preds = %534
  %544 = and i64 %541, 9223372036854775800
  %545 = getelementptr i32, i32* %530, i64 %544
  %546 = add nsw i64 %544, -8
  %547 = lshr exact i64 %546, 3
  %548 = add nuw nsw i64 %547, 1
  %549 = and i64 %548, 3
  %550 = icmp ult i64 %546, 24
  br i1 %550, label %596, label %551

551:                                              ; preds = %543
  %552 = sub nsw i64 %548, %549
  br label %553

553:                                              ; preds = %553, %551
  %554 = phi i64 [ 0, %551 ], [ %593, %553 ]
  %555 = phi <4 x i32> [ zeroinitializer, %551 ], [ %591, %553 ]
  %556 = phi <4 x i32> [ zeroinitializer, %551 ], [ %592, %553 ]
  %557 = phi i64 [ %552, %551 ], [ %594, %553 ]
  %558 = getelementptr i32, i32* %530, i64 %554
  %559 = bitcast i32* %558 to <4 x i32>*
  %560 = load <4 x i32>, <4 x i32>* %559, align 4
  %561 = getelementptr i32, i32* %558, i64 4
  %562 = bitcast i32* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4
  %564 = add nsw <4 x i32> %560, %555
  %565 = add nsw <4 x i32> %563, %556
  %566 = or i64 %554, 8
  %567 = getelementptr i32, i32* %530, i64 %566
  %568 = bitcast i32* %567 to <4 x i32>*
  %569 = load <4 x i32>, <4 x i32>* %568, align 4
  %570 = getelementptr i32, i32* %567, i64 4
  %571 = bitcast i32* %570 to <4 x i32>*
  %572 = load <4 x i32>, <4 x i32>* %571, align 4
  %573 = add nsw <4 x i32> %569, %564
  %574 = add nsw <4 x i32> %572, %565
  %575 = or i64 %554, 16
  %576 = getelementptr i32, i32* %530, i64 %575
  %577 = bitcast i32* %576 to <4 x i32>*
  %578 = load <4 x i32>, <4 x i32>* %577, align 4
  %579 = getelementptr i32, i32* %576, i64 4
  %580 = bitcast i32* %579 to <4 x i32>*
  %581 = load <4 x i32>, <4 x i32>* %580, align 4
  %582 = add nsw <4 x i32> %578, %573
  %583 = add nsw <4 x i32> %581, %574
  %584 = or i64 %554, 24
  %585 = getelementptr i32, i32* %530, i64 %584
  %586 = bitcast i32* %585 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 4
  %588 = getelementptr i32, i32* %585, i64 4
  %589 = bitcast i32* %588 to <4 x i32>*
  %590 = load <4 x i32>, <4 x i32>* %589, align 4
  %591 = add nsw <4 x i32> %587, %582
  %592 = add nsw <4 x i32> %590, %583
  %593 = add i64 %554, 32
  %594 = add i64 %557, -4
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %596, label %553, !llvm.loop !11

596:                                              ; preds = %553, %543
  %597 = phi <4 x i32> [ undef, %543 ], [ %591, %553 ]
  %598 = phi <4 x i32> [ undef, %543 ], [ %592, %553 ]
  %599 = phi i64 [ 0, %543 ], [ %593, %553 ]
  %600 = phi <4 x i32> [ zeroinitializer, %543 ], [ %591, %553 ]
  %601 = phi <4 x i32> [ zeroinitializer, %543 ], [ %592, %553 ]
  %602 = icmp eq i64 %549, 0
  br i1 %602, label %619, label %603

603:                                              ; preds = %596, %603
  %604 = phi i64 [ %616, %603 ], [ %599, %596 ]
  %605 = phi <4 x i32> [ %614, %603 ], [ %600, %596 ]
  %606 = phi <4 x i32> [ %615, %603 ], [ %601, %596 ]
  %607 = phi i64 [ %617, %603 ], [ %549, %596 ]
  %608 = getelementptr i32, i32* %530, i64 %604
  %609 = bitcast i32* %608 to <4 x i32>*
  %610 = load <4 x i32>, <4 x i32>* %609, align 4
  %611 = getelementptr i32, i32* %608, i64 4
  %612 = bitcast i32* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 4
  %614 = add nsw <4 x i32> %610, %605
  %615 = add nsw <4 x i32> %613, %606
  %616 = add i64 %604, 8
  %617 = add i64 %607, -1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %603, !llvm.loop !12

619:                                              ; preds = %603, %596
  %620 = phi <4 x i32> [ %597, %596 ], [ %614, %603 ]
  %621 = phi <4 x i32> [ %598, %596 ], [ %615, %603 ]
  %622 = add <4 x i32> %621, %620
  %623 = shufflevector <4 x i32> %622, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %624 = add <4 x i32> %622, %623
  %625 = shufflevector <4 x i32> %624, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %626 = add <4 x i32> %624, %625
  %627 = extractelement <4 x i32> %626, i32 0
  %628 = icmp eq i64 %541, %544
  br i1 %628, label %639, label %629

629:                                              ; preds = %619, %534
  %630 = phi i32 [ 0, %534 ], [ %627, %619 ]
  %631 = phi i32* [ %530, %534 ], [ %545, %619 ]
  br label %632

632:                                              ; preds = %629, %632
  %633 = phi i32 [ %636, %632 ], [ %630, %629 ]
  %634 = phi i32* [ %637, %632 ], [ %631, %629 ]
  %635 = load i32, i32* %634, align 4
  %636 = add nsw i32 %635, %633
  %637 = getelementptr inbounds i32, i32* %634, i64 1
  %638 = icmp eq i32* %637, %531
  br i1 %638, label %639, label %632, !llvm.loop !13

639:                                              ; preds = %632, %619
  %640 = phi i32 [ %627, %619 ], [ %636, %632 ]
  %641 = sext i32 %640 to i64
  %642 = udiv i64 %641, %528
  %643 = trunc i64 %642 to i32
  %644 = getelementptr i32, i32* %531, i64 -1
  %645 = bitcast i32* %644 to i8*
  %646 = sub i64 0, %526
  %647 = getelementptr i8, i8* %645, i64 %646
  %648 = ptrtoint i8* %647 to i64
  %649 = lshr i64 %648, 2
  %650 = add nuw nsw i64 %649, 1
  %651 = icmp ult i64 %650, 8
  br i1 %651, label %652, label %655

652:                                              ; preds = %722, %639
  %653 = phi i32 [ 0, %639 ], [ %730, %722 ]
  %654 = phi i32* [ %530, %639 ], [ %657, %722 ]
  br label %740

655:                                              ; preds = %639
  %656 = and i64 %650, 9223372036854775800
  %657 = getelementptr i32, i32* %530, i64 %656
  %658 = insertelement <4 x i32> undef, i32 %643, i32 0
  %659 = shufflevector <4 x i32> %658, <4 x i32> undef, <4 x i32> zeroinitializer
  %660 = insertelement <4 x i32> undef, i32 %643, i32 0
  %661 = shufflevector <4 x i32> %660, <4 x i32> undef, <4 x i32> zeroinitializer
  %662 = add nsw i64 %656, -8
  %663 = lshr exact i64 %662, 3
  %664 = add nuw nsw i64 %663, 1
  %665 = and i64 %664, 1
  %666 = icmp eq i64 %662, 0
  br i1 %666, label %702, label %667

667:                                              ; preds = %655
  %668 = sub nuw nsw i64 %664, %665
  br label %669

669:                                              ; preds = %669, %667
  %670 = phi i64 [ 0, %667 ], [ %699, %669 ]
  %671 = phi <4 x i32> [ zeroinitializer, %667 ], [ %697, %669 ]
  %672 = phi <4 x i32> [ zeroinitializer, %667 ], [ %698, %669 ]
  %673 = phi i64 [ %668, %667 ], [ %700, %669 ]
  %674 = getelementptr i32, i32* %530, i64 %670
  %675 = bitcast i32* %674 to <4 x i32>*
  %676 = load <4 x i32>, <4 x i32>* %675, align 4
  %677 = getelementptr i32, i32* %674, i64 4
  %678 = bitcast i32* %677 to <4 x i32>*
  %679 = load <4 x i32>, <4 x i32>* %678, align 4
  %680 = sub nsw <4 x i32> %676, %659
  %681 = sub nsw <4 x i32> %679, %661
  %682 = mul nsw <4 x i32> %680, %680
  %683 = mul nsw <4 x i32> %681, %681
  %684 = add nuw nsw <4 x i32> %682, %671
  %685 = add nuw nsw <4 x i32> %683, %672
  %686 = or i64 %670, 8
  %687 = getelementptr i32, i32* %530, i64 %686
  %688 = bitcast i32* %687 to <4 x i32>*
  %689 = load <4 x i32>, <4 x i32>* %688, align 4
  %690 = getelementptr i32, i32* %687, i64 4
  %691 = bitcast i32* %690 to <4 x i32>*
  %692 = load <4 x i32>, <4 x i32>* %691, align 4
  %693 = sub nsw <4 x i32> %689, %659
  %694 = sub nsw <4 x i32> %692, %661
  %695 = mul nsw <4 x i32> %693, %693
  %696 = mul nsw <4 x i32> %694, %694
  %697 = add nuw nsw <4 x i32> %695, %684
  %698 = add nuw nsw <4 x i32> %696, %685
  %699 = add i64 %670, 16
  %700 = add i64 %673, -2
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %702, label %669, !llvm.loop !14

702:                                              ; preds = %669, %655
  %703 = phi <4 x i32> [ undef, %655 ], [ %697, %669 ]
  %704 = phi <4 x i32> [ undef, %655 ], [ %698, %669 ]
  %705 = phi i64 [ 0, %655 ], [ %699, %669 ]
  %706 = phi <4 x i32> [ zeroinitializer, %655 ], [ %697, %669 ]
  %707 = phi <4 x i32> [ zeroinitializer, %655 ], [ %698, %669 ]
  %708 = icmp eq i64 %665, 0
  br i1 %708, label %722, label %709

709:                                              ; preds = %702
  %710 = getelementptr i32, i32* %530, i64 %705
  %711 = bitcast i32* %710 to <4 x i32>*
  %712 = load <4 x i32>, <4 x i32>* %711, align 4
  %713 = getelementptr i32, i32* %710, i64 4
  %714 = bitcast i32* %713 to <4 x i32>*
  %715 = load <4 x i32>, <4 x i32>* %714, align 4
  %716 = sub nsw <4 x i32> %712, %659
  %717 = sub nsw <4 x i32> %715, %661
  %718 = mul nsw <4 x i32> %717, %717
  %719 = add nuw nsw <4 x i32> %718, %707
  %720 = mul nsw <4 x i32> %716, %716
  %721 = add nuw nsw <4 x i32> %720, %706
  br label %722

722:                                              ; preds = %702, %709
  %723 = phi <4 x i32> [ %703, %702 ], [ %721, %709 ]
  %724 = phi <4 x i32> [ %704, %702 ], [ %719, %709 ]
  %725 = add nuw <4 x i32> %724, %723
  %726 = shufflevector <4 x i32> %725, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %727 = add <4 x i32> %725, %726
  %728 = shufflevector <4 x i32> %727, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %729 = add <4 x i32> %727, %728
  %730 = extractelement <4 x i32> %729, i32 0
  %731 = icmp eq i64 %650, %656
  br i1 %731, label %732, label %652

732:                                              ; preds = %740, %722
  %733 = phi i32 [ %730, %722 ], [ %746, %740 ]
  %734 = zext i32 %733 to i64
  br label %735

735:                                              ; preds = %732, %532
  %736 = phi i64 [ %734, %732 ], [ 0, %532 ]
  %737 = add nsw i64 %528, -1
  %738 = udiv i64 %736, %737
  %739 = trunc i64 %738 to i32
  br label %749

740:                                              ; preds = %652, %740
  %741 = phi i32 [ %746, %740 ], [ %653, %652 ]
  %742 = phi i32* [ %747, %740 ], [ %654, %652 ]
  %743 = load i32, i32* %742, align 4
  %744 = sub nsw i32 %743, %643
  %745 = mul nsw i32 %744, %744
  %746 = add nuw nsw i32 %745, %741
  %747 = getelementptr inbounds i32, i32* %742, i64 1
  %748 = icmp eq i32* %747, %531
  br i1 %748, label %732, label %740, !llvm.loop !15

749:                                              ; preds = %516, %735
  %750 = phi i32 [ %739, %735 ], [ 0, %516 ]
  %751 = load atomic i64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_3.0.0.0.0.0 acquire, align 8
  %752 = inttoptr i64 %751 to %"class.base::HistogramBase"*
  %753 = icmp eq i64 %751, 0
  br i1 %753, label %754, label %757

754:                                              ; preds = %749
  %755 = call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i32 1, i32 500, i32 50, i32 1) #11
  %756 = ptrtoint %"class.base::HistogramBase"* %755 to i64
  store atomic i64 %756, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_3.0.0.0.0.0 release, align 8
  br label %757

757:                                              ; preds = %749, %754
  %758 = phi %"class.base::HistogramBase"* [ %752, %749 ], [ %755, %754 ]
  %759 = bitcast %"class.base::HistogramBase"* %758 to void (%"class.base::HistogramBase"*, i32)***
  %760 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %759, align 8
  %761 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %760, i64 6
  %762 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %761, align 8
  call void %762(%"class.base::HistogramBase"* %758, i32 %750) #11
  %763 = load i64, i64* %525, align 8
  store i64 %763, i64* %523, align 8
  %764 = bitcast i32** %210 to i64*
  %765 = load i64, i64* %764, align 8
  %766 = bitcast %"class.std::__1::vector"* %207 to i64*
  %767 = load i64, i64* %766, align 8
  %768 = sub i64 %765, %767
  %769 = ashr exact i64 %768, 2
  %770 = icmp ult i64 %769, 2
  %771 = inttoptr i64 %767 to i32*
  %772 = inttoptr i64 %765 to i32*
  br i1 %770, label %990, label %773

773:                                              ; preds = %757
  %774 = icmp eq i32* %771, %772
  br i1 %774, label %976, label %775

775:                                              ; preds = %773
  %776 = getelementptr i32, i32* %772, i64 -1
  %777 = bitcast i32* %776 to i8*
  %778 = sub i64 0, %767
  %779 = getelementptr i8, i8* %777, i64 %778
  %780 = ptrtoint i8* %779 to i64
  %781 = lshr i64 %780, 2
  %782 = add nuw nsw i64 %781, 1
  %783 = icmp ult i64 %782, 8
  br i1 %783, label %870, label %784

784:                                              ; preds = %775
  %785 = and i64 %782, 9223372036854775800
  %786 = getelementptr i32, i32* %771, i64 %785
  %787 = add nsw i64 %785, -8
  %788 = lshr exact i64 %787, 3
  %789 = add nuw nsw i64 %788, 1
  %790 = and i64 %789, 3
  %791 = icmp ult i64 %787, 24
  br i1 %791, label %837, label %792

792:                                              ; preds = %784
  %793 = sub nsw i64 %789, %790
  br label %794

794:                                              ; preds = %794, %792
  %795 = phi i64 [ 0, %792 ], [ %834, %794 ]
  %796 = phi <4 x i32> [ zeroinitializer, %792 ], [ %832, %794 ]
  %797 = phi <4 x i32> [ zeroinitializer, %792 ], [ %833, %794 ]
  %798 = phi i64 [ %793, %792 ], [ %835, %794 ]
  %799 = getelementptr i32, i32* %771, i64 %795
  %800 = bitcast i32* %799 to <4 x i32>*
  %801 = load <4 x i32>, <4 x i32>* %800, align 4
  %802 = getelementptr i32, i32* %799, i64 4
  %803 = bitcast i32* %802 to <4 x i32>*
  %804 = load <4 x i32>, <4 x i32>* %803, align 4
  %805 = add nsw <4 x i32> %801, %796
  %806 = add nsw <4 x i32> %804, %797
  %807 = or i64 %795, 8
  %808 = getelementptr i32, i32* %771, i64 %807
  %809 = bitcast i32* %808 to <4 x i32>*
  %810 = load <4 x i32>, <4 x i32>* %809, align 4
  %811 = getelementptr i32, i32* %808, i64 4
  %812 = bitcast i32* %811 to <4 x i32>*
  %813 = load <4 x i32>, <4 x i32>* %812, align 4
  %814 = add nsw <4 x i32> %810, %805
  %815 = add nsw <4 x i32> %813, %806
  %816 = or i64 %795, 16
  %817 = getelementptr i32, i32* %771, i64 %816
  %818 = bitcast i32* %817 to <4 x i32>*
  %819 = load <4 x i32>, <4 x i32>* %818, align 4
  %820 = getelementptr i32, i32* %817, i64 4
  %821 = bitcast i32* %820 to <4 x i32>*
  %822 = load <4 x i32>, <4 x i32>* %821, align 4
  %823 = add nsw <4 x i32> %819, %814
  %824 = add nsw <4 x i32> %822, %815
  %825 = or i64 %795, 24
  %826 = getelementptr i32, i32* %771, i64 %825
  %827 = bitcast i32* %826 to <4 x i32>*
  %828 = load <4 x i32>, <4 x i32>* %827, align 4
  %829 = getelementptr i32, i32* %826, i64 4
  %830 = bitcast i32* %829 to <4 x i32>*
  %831 = load <4 x i32>, <4 x i32>* %830, align 4
  %832 = add nsw <4 x i32> %828, %823
  %833 = add nsw <4 x i32> %831, %824
  %834 = add i64 %795, 32
  %835 = add i64 %798, -4
  %836 = icmp eq i64 %835, 0
  br i1 %836, label %837, label %794, !llvm.loop !16

837:                                              ; preds = %794, %784
  %838 = phi <4 x i32> [ undef, %784 ], [ %832, %794 ]
  %839 = phi <4 x i32> [ undef, %784 ], [ %833, %794 ]
  %840 = phi i64 [ 0, %784 ], [ %834, %794 ]
  %841 = phi <4 x i32> [ zeroinitializer, %784 ], [ %832, %794 ]
  %842 = phi <4 x i32> [ zeroinitializer, %784 ], [ %833, %794 ]
  %843 = icmp eq i64 %790, 0
  br i1 %843, label %860, label %844

844:                                              ; preds = %837, %844
  %845 = phi i64 [ %857, %844 ], [ %840, %837 ]
  %846 = phi <4 x i32> [ %855, %844 ], [ %841, %837 ]
  %847 = phi <4 x i32> [ %856, %844 ], [ %842, %837 ]
  %848 = phi i64 [ %858, %844 ], [ %790, %837 ]
  %849 = getelementptr i32, i32* %771, i64 %845
  %850 = bitcast i32* %849 to <4 x i32>*
  %851 = load <4 x i32>, <4 x i32>* %850, align 4
  %852 = getelementptr i32, i32* %849, i64 4
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4
  %855 = add nsw <4 x i32> %851, %846
  %856 = add nsw <4 x i32> %854, %847
  %857 = add i64 %845, 8
  %858 = add i64 %848, -1
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %860, label %844, !llvm.loop !17

860:                                              ; preds = %844, %837
  %861 = phi <4 x i32> [ %838, %837 ], [ %855, %844 ]
  %862 = phi <4 x i32> [ %839, %837 ], [ %856, %844 ]
  %863 = add <4 x i32> %862, %861
  %864 = shufflevector <4 x i32> %863, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %865 = add <4 x i32> %863, %864
  %866 = shufflevector <4 x i32> %865, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %867 = add <4 x i32> %865, %866
  %868 = extractelement <4 x i32> %867, i32 0
  %869 = icmp eq i64 %782, %785
  br i1 %869, label %880, label %870

870:                                              ; preds = %860, %775
  %871 = phi i32 [ 0, %775 ], [ %868, %860 ]
  %872 = phi i32* [ %771, %775 ], [ %786, %860 ]
  br label %873

873:                                              ; preds = %870, %873
  %874 = phi i32 [ %877, %873 ], [ %871, %870 ]
  %875 = phi i32* [ %878, %873 ], [ %872, %870 ]
  %876 = load i32, i32* %875, align 4
  %877 = add nsw i32 %876, %874
  %878 = getelementptr inbounds i32, i32* %875, i64 1
  %879 = icmp eq i32* %878, %772
  br i1 %879, label %880, label %873, !llvm.loop !18

880:                                              ; preds = %873, %860
  %881 = phi i32 [ %868, %860 ], [ %877, %873 ]
  %882 = sext i32 %881 to i64
  %883 = udiv i64 %882, %769
  %884 = trunc i64 %883 to i32
  %885 = getelementptr i32, i32* %772, i64 -1
  %886 = bitcast i32* %885 to i8*
  %887 = sub i64 0, %767
  %888 = getelementptr i8, i8* %886, i64 %887
  %889 = ptrtoint i8* %888 to i64
  %890 = lshr i64 %889, 2
  %891 = add nuw nsw i64 %890, 1
  %892 = icmp ult i64 %891, 8
  br i1 %892, label %893, label %896

893:                                              ; preds = %963, %880
  %894 = phi i32 [ 0, %880 ], [ %971, %963 ]
  %895 = phi i32* [ %771, %880 ], [ %898, %963 ]
  br label %981

896:                                              ; preds = %880
  %897 = and i64 %891, 9223372036854775800
  %898 = getelementptr i32, i32* %771, i64 %897
  %899 = insertelement <4 x i32> undef, i32 %884, i32 0
  %900 = shufflevector <4 x i32> %899, <4 x i32> undef, <4 x i32> zeroinitializer
  %901 = insertelement <4 x i32> undef, i32 %884, i32 0
  %902 = shufflevector <4 x i32> %901, <4 x i32> undef, <4 x i32> zeroinitializer
  %903 = add nsw i64 %897, -8
  %904 = lshr exact i64 %903, 3
  %905 = add nuw nsw i64 %904, 1
  %906 = and i64 %905, 1
  %907 = icmp eq i64 %903, 0
  br i1 %907, label %943, label %908

908:                                              ; preds = %896
  %909 = sub nuw nsw i64 %905, %906
  br label %910

910:                                              ; preds = %910, %908
  %911 = phi i64 [ 0, %908 ], [ %940, %910 ]
  %912 = phi <4 x i32> [ zeroinitializer, %908 ], [ %938, %910 ]
  %913 = phi <4 x i32> [ zeroinitializer, %908 ], [ %939, %910 ]
  %914 = phi i64 [ %909, %908 ], [ %941, %910 ]
  %915 = getelementptr i32, i32* %771, i64 %911
  %916 = bitcast i32* %915 to <4 x i32>*
  %917 = load <4 x i32>, <4 x i32>* %916, align 4
  %918 = getelementptr i32, i32* %915, i64 4
  %919 = bitcast i32* %918 to <4 x i32>*
  %920 = load <4 x i32>, <4 x i32>* %919, align 4
  %921 = sub nsw <4 x i32> %917, %900
  %922 = sub nsw <4 x i32> %920, %902
  %923 = mul nsw <4 x i32> %921, %921
  %924 = mul nsw <4 x i32> %922, %922
  %925 = add nuw nsw <4 x i32> %923, %912
  %926 = add nuw nsw <4 x i32> %924, %913
  %927 = or i64 %911, 8
  %928 = getelementptr i32, i32* %771, i64 %927
  %929 = bitcast i32* %928 to <4 x i32>*
  %930 = load <4 x i32>, <4 x i32>* %929, align 4
  %931 = getelementptr i32, i32* %928, i64 4
  %932 = bitcast i32* %931 to <4 x i32>*
  %933 = load <4 x i32>, <4 x i32>* %932, align 4
  %934 = sub nsw <4 x i32> %930, %900
  %935 = sub nsw <4 x i32> %933, %902
  %936 = mul nsw <4 x i32> %934, %934
  %937 = mul nsw <4 x i32> %935, %935
  %938 = add nuw nsw <4 x i32> %936, %925
  %939 = add nuw nsw <4 x i32> %937, %926
  %940 = add i64 %911, 16
  %941 = add i64 %914, -2
  %942 = icmp eq i64 %941, 0
  br i1 %942, label %943, label %910, !llvm.loop !19

943:                                              ; preds = %910, %896
  %944 = phi <4 x i32> [ undef, %896 ], [ %938, %910 ]
  %945 = phi <4 x i32> [ undef, %896 ], [ %939, %910 ]
  %946 = phi i64 [ 0, %896 ], [ %940, %910 ]
  %947 = phi <4 x i32> [ zeroinitializer, %896 ], [ %938, %910 ]
  %948 = phi <4 x i32> [ zeroinitializer, %896 ], [ %939, %910 ]
  %949 = icmp eq i64 %906, 0
  br i1 %949, label %963, label %950

950:                                              ; preds = %943
  %951 = getelementptr i32, i32* %771, i64 %946
  %952 = bitcast i32* %951 to <4 x i32>*
  %953 = load <4 x i32>, <4 x i32>* %952, align 4
  %954 = getelementptr i32, i32* %951, i64 4
  %955 = bitcast i32* %954 to <4 x i32>*
  %956 = load <4 x i32>, <4 x i32>* %955, align 4
  %957 = sub nsw <4 x i32> %953, %900
  %958 = sub nsw <4 x i32> %956, %902
  %959 = mul nsw <4 x i32> %958, %958
  %960 = add nuw nsw <4 x i32> %959, %948
  %961 = mul nsw <4 x i32> %957, %957
  %962 = add nuw nsw <4 x i32> %961, %947
  br label %963

963:                                              ; preds = %943, %950
  %964 = phi <4 x i32> [ %944, %943 ], [ %962, %950 ]
  %965 = phi <4 x i32> [ %945, %943 ], [ %960, %950 ]
  %966 = add nuw <4 x i32> %965, %964
  %967 = shufflevector <4 x i32> %966, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %968 = add <4 x i32> %966, %967
  %969 = shufflevector <4 x i32> %968, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %970 = add <4 x i32> %968, %969
  %971 = extractelement <4 x i32> %970, i32 0
  %972 = icmp eq i64 %891, %897
  br i1 %972, label %973, label %893

973:                                              ; preds = %981, %963
  %974 = phi i32 [ %971, %963 ], [ %987, %981 ]
  %975 = zext i32 %974 to i64
  br label %976

976:                                              ; preds = %973, %773
  %977 = phi i64 [ %975, %973 ], [ 0, %773 ]
  %978 = add nsw i64 %769, -1
  %979 = udiv i64 %977, %978
  %980 = trunc i64 %979 to i32
  br label %990

981:                                              ; preds = %893, %981
  %982 = phi i32 [ %987, %981 ], [ %894, %893 ]
  %983 = phi i32* [ %988, %981 ], [ %895, %893 ]
  %984 = load i32, i32* %983, align 4
  %985 = sub nsw i32 %984, %884
  %986 = mul nsw i32 %985, %985
  %987 = add nuw nsw i32 %986, %982
  %988 = getelementptr inbounds i32, i32* %983, i64 1
  %989 = icmp eq i32* %988, %772
  br i1 %989, label %973, label %981, !llvm.loop !20

990:                                              ; preds = %757, %976
  %991 = phi i32 [ %980, %976 ], [ 0, %757 ]
  %992 = load atomic i64, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_4.0.0.0.0.0 acquire, align 8
  %993 = inttoptr i64 %992 to %"class.base::HistogramBase"*
  %994 = icmp eq i64 %992, 0
  br i1 %994, label %995, label %998

995:                                              ; preds = %990
  %996 = call %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i64 0, i64 0), i32 1, i32 500, i32 50, i32 1) #11
  %997 = ptrtoint %"class.base::HistogramBase"* %996 to i64
  store atomic i64 %997, i64* @_ZZN5media23AudioDelayStatsReporter11ReportDelayEN4base9TimeDeltaES2_E24atomic_histogram_pointer_4.0.0.0.0.0 release, align 8
  br label %998

998:                                              ; preds = %990, %995
  %999 = phi %"class.base::HistogramBase"* [ %993, %990 ], [ %996, %995 ]
  %1000 = bitcast %"class.base::HistogramBase"* %999 to void (%"class.base::HistogramBase"*, i32)***
  %1001 = load void (%"class.base::HistogramBase"*, i32)**, void (%"class.base::HistogramBase"*, i32)*** %1000, align 8
  %1002 = getelementptr inbounds void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %1001, i64 6
  %1003 = load void (%"class.base::HistogramBase"*, i32)*, void (%"class.base::HistogramBase"*, i32)** %1002, align 8
  call void %1003(%"class.base::HistogramBase"* %999, i32 %991) #11
  %1004 = load i64, i64* %766, align 8
  store i64 %1004, i64* %764, align 8
  br label %1005

1005:                                             ; preds = %998, %276
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare %"class.base::HistogramBase"* @_ZN4base9Histogram14FactoryTimeGetEPKcNS_9TimeDeltaES3_ji(i8*, i64, i64, i32, i32) local_unnamed_addr #3

declare void @_ZN4base13HistogramBase30AddTimeMillisecondsGranularityERKNS_9TimeDeltaE(%"class.base::HistogramBase"*, %"class.base::TimeDelta"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @_ZNK4base9TimeDelta14InMillisecondsEv(%"class.base::TimeDelta"*) local_unnamed_addr #3

declare %"class.base::HistogramBase"* @_ZN4base9Histogram10FactoryGetEPKciiji(i8*, i32, i32, i32, i32) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !8, !4}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !6}
!13 = distinct !{!13, !8, !4}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !8, !4}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !6}
!18 = distinct !{!18, !8, !4}
!19 = distinct !{!19, !4}
!20 = distinct !{!20, !8, !4}
