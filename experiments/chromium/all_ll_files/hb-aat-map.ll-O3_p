; ModuleID = '../../third_party/harfbuzz-ng/src/src/hb-aat-map.cc'
source_filename = "../../third_party/harfbuzz-ng/src/src/hb-aat-map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.hb_aat_map_builder_t = type { %struct.hb_face_t*, %struct.hb_sorted_vector_t.140 }
%struct.hb_face_t = type { %struct.hb_object_header_t, %struct.hb_blob_t* (%struct.hb_face_t*, i32, i8*)*, i8*, void (i8*)*, i32, %struct.hb_atomic_int_t, %struct.hb_atomic_int_t, %struct.hb_shaper_object_dataset_t, %struct.hb_ot_face_t, %struct.hb_atomic_ptr_t.126 }
%struct.hb_object_header_t = type { %struct.hb_reference_count_t, %struct.hb_atomic_int_t, %struct.hb_atomic_ptr_t }
%struct.hb_reference_count_t = type { %struct.hb_atomic_int_t }
%struct.hb_atomic_ptr_t = type { %struct.hb_user_data_array_t* }
%struct.hb_user_data_array_t = type { %struct.hb_mutex_t, %struct.hb_lockable_set_t }
%struct.hb_mutex_t = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.hb_lockable_set_t = type { %struct.hb_vector_t }
%struct.hb_vector_t = type { i32, i32, %"struct.hb_user_data_array_t::hb_user_data_item_t"* }
%"struct.hb_user_data_array_t::hb_user_data_item_t" = type { %struct.hb_user_data_key_t*, i8*, void (i8*)* }
%struct.hb_user_data_key_t = type { i8 }
%struct.hb_blob_t = type { %struct.hb_object_header_t, i8*, i32, i32, i8*, void (i8*)* }
%struct.hb_atomic_int_t = type { i32 }
%struct.hb_shaper_object_dataset_t = type { %struct.hb_face_t*, %struct.hb_shaper_lazy_loader_t }
%struct.hb_shaper_lazy_loader_t = type { %struct.hb_lazy_loader_t }
%struct.hb_lazy_loader_t = type { %struct.hb_atomic_ptr_t.0 }
%struct.hb_atomic_ptr_t.0 = type { %struct.hb_ot_face_data_t* }
%struct.hb_ot_face_data_t = type opaque
%struct.hb_ot_face_t = type { %struct.hb_face_t*, %struct.hb_table_lazy_loader_t, %struct.hb_face_lazy_loader_t, %struct.hb_table_lazy_loader_t.6, %struct.hb_face_lazy_loader_t.9, %struct.hb_table_lazy_loader_t.13, %struct.hb_face_lazy_loader_t.16, %struct.hb_face_lazy_loader_t.20, %struct.hb_table_lazy_loader_t.24, %struct.hb_face_lazy_loader_t.27, %struct.hb_table_lazy_loader_t.31, %struct.hb_face_lazy_loader_t.34, %struct.hb_face_lazy_loader_t.38, %struct.hb_face_lazy_loader_t.42, %struct.hb_face_lazy_loader_t.46, %struct.hb_table_lazy_loader_t.50, %struct.hb_table_lazy_loader_t.53, %struct.hb_table_lazy_loader_t.56, %struct.hb_face_lazy_loader_t.59, %struct.hb_table_lazy_loader_t.63, %struct.hb_table_lazy_loader_t.66, %struct.hb_face_lazy_loader_t.69, %struct.hb_face_lazy_loader_t.73, %struct.hb_face_lazy_loader_t.77, %struct.hb_table_lazy_loader_t.81, %struct.hb_table_lazy_loader_t.84, %struct.hb_table_lazy_loader_t.87, %struct.hb_table_lazy_loader_t.90, %struct.hb_table_lazy_loader_t.93, %struct.hb_table_lazy_loader_t.96, %struct.hb_table_lazy_loader_t.99, %struct.hb_table_lazy_loader_t.102, %struct.hb_table_lazy_loader_t.105, %struct.hb_table_lazy_loader_t.108, %struct.hb_face_lazy_loader_t.111, %struct.hb_face_lazy_loader_t.115, %struct.hb_face_lazy_loader_t.119, %struct.hb_table_lazy_loader_t.123 }
%struct.hb_table_lazy_loader_t = type { %struct.hb_lazy_loader_t.1 }
%struct.hb_lazy_loader_t.1 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.2 = type { %struct.hb_blob_t* }
%struct.hb_face_lazy_loader_t = type { %struct.hb_lazy_loader_t.3 }
%struct.hb_lazy_loader_t.3 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_atomic_ptr_t.5 = type { %"struct.OT::cmap_accelerator_t"* }
%"struct.OT::cmap_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.6 = type { %struct.hb_lazy_loader_t.7 }
%struct.hb_lazy_loader_t.7 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.9 = type { %struct.hb_lazy_loader_t.10 }
%struct.hb_lazy_loader_t.10 = type { %struct.hb_atomic_ptr_t.12 }
%struct.hb_atomic_ptr_t.12 = type { %"struct.OT::hmtx_accelerator_t"* }
%"struct.OT::hmtx_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.13 = type { %struct.hb_lazy_loader_t.14 }
%struct.hb_lazy_loader_t.14 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.16 = type { %struct.hb_lazy_loader_t.17 }
%struct.hb_lazy_loader_t.17 = type { %struct.hb_atomic_ptr_t.19 }
%struct.hb_atomic_ptr_t.19 = type { %"struct.OT::post_accelerator_t"* }
%"struct.OT::post_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.20 = type { %struct.hb_lazy_loader_t.21 }
%struct.hb_lazy_loader_t.21 = type { %struct.hb_atomic_ptr_t.23 }
%struct.hb_atomic_ptr_t.23 = type { %"struct.OT::name_accelerator_t"* }
%"struct.OT::name_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.24 = type { %struct.hb_lazy_loader_t.25 }
%struct.hb_lazy_loader_t.25 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.27 = type { %struct.hb_lazy_loader_t.28 }
%struct.hb_lazy_loader_t.28 = type { %struct.hb_atomic_ptr_t.30 }
%struct.hb_atomic_ptr_t.30 = type { %"struct.OT::meta_accelerator_t"* }
%"struct.OT::meta_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.31 = type { %struct.hb_lazy_loader_t.32 }
%struct.hb_lazy_loader_t.32 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.34 = type { %struct.hb_lazy_loader_t.35 }
%struct.hb_lazy_loader_t.35 = type { %struct.hb_atomic_ptr_t.37 }
%struct.hb_atomic_ptr_t.37 = type { %"struct.OT::vmtx_accelerator_t"* }
%"struct.OT::vmtx_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.38 = type { %struct.hb_lazy_loader_t.39 }
%struct.hb_lazy_loader_t.39 = type { %struct.hb_atomic_ptr_t.41 }
%struct.hb_atomic_ptr_t.41 = type { %"struct.OT::glyf_accelerator_t"* }
%"struct.OT::glyf_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.42 = type { %struct.hb_lazy_loader_t.43 }
%struct.hb_lazy_loader_t.43 = type { %struct.hb_atomic_ptr_t.45 }
%struct.hb_atomic_ptr_t.45 = type { %"struct.OT::cff1_accelerator_t"* }
%"struct.OT::cff1_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.46 = type { %struct.hb_lazy_loader_t.47 }
%struct.hb_lazy_loader_t.47 = type { %struct.hb_atomic_ptr_t.49 }
%struct.hb_atomic_ptr_t.49 = type { %"struct.OT::cff2_accelerator_t"* }
%"struct.OT::cff2_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.50 = type { %struct.hb_lazy_loader_t.51 }
%struct.hb_lazy_loader_t.51 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.53 = type { %struct.hb_lazy_loader_t.54 }
%struct.hb_lazy_loader_t.54 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.56 = type { %struct.hb_lazy_loader_t.57 }
%struct.hb_lazy_loader_t.57 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.59 = type { %struct.hb_lazy_loader_t.60 }
%struct.hb_lazy_loader_t.60 = type { %struct.hb_atomic_ptr_t.62 }
%struct.hb_atomic_ptr_t.62 = type { %"struct.OT::gvar_accelerator_t"* }
%"struct.OT::gvar_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.63 = type { %struct.hb_lazy_loader_t.64 }
%struct.hb_lazy_loader_t.64 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.66 = type { %struct.hb_lazy_loader_t.67 }
%struct.hb_lazy_loader_t.67 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.69 = type { %struct.hb_lazy_loader_t.70 }
%struct.hb_lazy_loader_t.70 = type { %struct.hb_atomic_ptr_t.72 }
%struct.hb_atomic_ptr_t.72 = type { %"struct.OT::GDEF_accelerator_t"* }
%"struct.OT::GDEF_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.73 = type { %struct.hb_lazy_loader_t.74 }
%struct.hb_lazy_loader_t.74 = type { %struct.hb_atomic_ptr_t.76 }
%struct.hb_atomic_ptr_t.76 = type { %"struct.OT::GSUB_accelerator_t"* }
%"struct.OT::GSUB_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.77 = type { %struct.hb_lazy_loader_t.78 }
%struct.hb_lazy_loader_t.78 = type { %struct.hb_atomic_ptr_t.80 }
%struct.hb_atomic_ptr_t.80 = type { %"struct.OT::GPOS_accelerator_t"* }
%"struct.OT::GPOS_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.81 = type { %struct.hb_lazy_loader_t.82 }
%struct.hb_lazy_loader_t.82 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.84 = type { %struct.hb_lazy_loader_t.85 }
%struct.hb_lazy_loader_t.85 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.87 = type { %struct.hb_lazy_loader_t.88 }
%struct.hb_lazy_loader_t.88 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.90 = type { %struct.hb_lazy_loader_t.91 }
%struct.hb_lazy_loader_t.91 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.93 = type { %struct.hb_lazy_loader_t.94 }
%struct.hb_lazy_loader_t.94 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.96 = type { %struct.hb_lazy_loader_t.97 }
%struct.hb_lazy_loader_t.97 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.99 = type { %struct.hb_lazy_loader_t.100 }
%struct.hb_lazy_loader_t.100 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.102 = type { %struct.hb_lazy_loader_t.103 }
%struct.hb_lazy_loader_t.103 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.105 = type { %struct.hb_lazy_loader_t.106 }
%struct.hb_lazy_loader_t.106 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.108 = type { %struct.hb_lazy_loader_t.109 }
%struct.hb_lazy_loader_t.109 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.111 = type { %struct.hb_lazy_loader_t.112 }
%struct.hb_lazy_loader_t.112 = type { %struct.hb_atomic_ptr_t.114 }
%struct.hb_atomic_ptr_t.114 = type { %"struct.OT::CBDT_accelerator_t"* }
%"struct.OT::CBDT_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.115 = type { %struct.hb_lazy_loader_t.116 }
%struct.hb_lazy_loader_t.116 = type { %struct.hb_atomic_ptr_t.118 }
%struct.hb_atomic_ptr_t.118 = type { %"struct.OT::sbix_accelerator_t"* }
%"struct.OT::sbix_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.119 = type { %struct.hb_lazy_loader_t.120 }
%struct.hb_lazy_loader_t.120 = type { %struct.hb_atomic_ptr_t.122 }
%struct.hb_atomic_ptr_t.122 = type { %"struct.OT::SVG_accelerator_t"* }
%"struct.OT::SVG_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.123 = type { %struct.hb_lazy_loader_t.124 }
%struct.hb_lazy_loader_t.124 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.126 = type { %"struct.hb_face_t::plan_node_t"* }
%"struct.hb_face_t::plan_node_t" = type { %struct.hb_shape_plan_t*, %"struct.hb_face_t::plan_node_t"* }
%struct.hb_shape_plan_t = type { %struct.hb_object_header_t, %struct.hb_face_t*, %struct.hb_shape_plan_key_t, %struct.hb_ot_shape_plan_t }
%struct.hb_shape_plan_key_t = type { %struct.hb_segment_properties_t, %struct.hb_feature_t*, i32, %struct.hb_ot_shape_plan_key_t, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i8* }
%struct.hb_segment_properties_t = type { i32, i32, %struct.hb_language_impl_t*, i8*, i8* }
%struct.hb_language_impl_t = type opaque
%struct.hb_feature_t = type { i32, i32, i32, i32 }
%struct.hb_ot_shape_plan_key_t = type { [2 x i32] }
%struct.hb_font_t = type { %struct.hb_object_header_t, %struct.hb_font_t*, %struct.hb_face_t*, i32, i32, i64, i64, i32, i32, float, i32, i32*, float*, %struct.hb_font_funcs_t*, i8*, void (i8*)*, %struct.hb_shaper_object_dataset_t.128 }
%struct.hb_font_funcs_t = type { %struct.hb_object_header_t, %struct.anon, %struct.anon.127, %"union.hb_font_funcs_t::get_t" }
%struct.anon = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.127 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%"union.hb_font_funcs_t::get_t" = type { %"struct.hb_font_funcs_t::get_t::get_funcs_t" }
%"struct.hb_font_funcs_t::get_t::get_funcs_t" = type { i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, %struct.hb_glyph_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i8*, i32, i32*, i8*)* }
%struct.hb_font_extents_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hb_glyph_extents_t = type { i32, i32, i32, i32 }
%struct.hb_shaper_object_dataset_t.128 = type { %struct.hb_font_t*, %struct.hb_shaper_lazy_loader_t.129 }
%struct.hb_shaper_lazy_loader_t.129 = type { %struct.hb_lazy_loader_t.130 }
%struct.hb_lazy_loader_t.130 = type { %struct.hb_atomic_ptr_t.132 }
%struct.hb_atomic_ptr_t.132 = type { %struct.hb_ot_font_data_t* }
%struct.hb_ot_font_data_t = type opaque
%struct.hb_buffer_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.hb_segment_properties_t, i8, i8, i8, i32, i32, i32, i32, %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t*, %struct.hb_glyph_position_t*, i32, [2 x [5 x i32]], [2 x i32], i32 (%struct.hb_buffer_t*, %struct.hb_font_t*, i8*, i8*)*, i8*, void (i8*)* }
%struct.hb_unicode_funcs_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, %struct.anon.133, %struct.anon.134, %struct.anon.135 }
%struct.anon.133 = type { i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i8*)* }
%struct.anon.134 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.135 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%struct.hb_glyph_info_t = type { i32, i32, i32, %union._hb_var_int_t, %union._hb_var_int_t }
%union._hb_var_int_t = type { i32 }
%struct.hb_glyph_position_t = type { i32, i32, i32, i32, %union._hb_var_int_t }
%struct.hb_ot_shape_plan_t = type <{ %struct.hb_segment_properties_t, %struct.hb_ot_complex_shaper_t*, %struct.hb_ot_map_t, %struct.hb_aat_map_t, i8*, i32, i32, i32, i32, i32, i32, i16, [6 x i8] }>
%struct.hb_ot_complex_shaper_t = type opaque
%struct.hb_ot_map_t = type { [2 x i32], [2 x i8], i32, %struct.hb_sorted_vector_t, [2 x %struct.hb_vector_t.137], [2 x %struct.hb_vector_t.138] }
%struct.hb_sorted_vector_t = type { %struct.hb_vector_t.136 }
%struct.hb_vector_t.136 = type { i32, i32, %"struct.hb_ot_map_t::feature_map_t"* }
%"struct.hb_ot_map_t::feature_map_t" = type { i32, [2 x i32], [2 x i32], i32, i32, i32, i8 }
%struct.hb_vector_t.137 = type { i32, i32, %"struct.hb_ot_map_t::lookup_map_t"* }
%"struct.hb_ot_map_t::lookup_map_t" = type { i16, i8, i32 }
%struct.hb_vector_t.138 = type { i32, i32, %"struct.hb_ot_map_t::stage_map_t"* }
%"struct.hb_ot_map_t::stage_map_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_t = type { %struct.hb_vector_t.139 }
%struct.hb_vector_t.139 = type { i32, i32, i32* }
%struct.hb_sorted_vector_t.140 = type { %struct.hb_vector_t.141 }
%struct.hb_vector_t.141 = type { i32, i32, %"struct.hb_aat_map_builder_t::feature_info_t"* }
%"struct.hb_aat_map_builder_t::feature_info_t" = type { i32, i32, i8, i32 }
%"struct.AAT::feat" = type { %"struct.OT::FixedVersion", %"struct.OT::IntType", %"struct.OT::IntType", %"struct.OT::IntType.142", %"struct.OT::SortedUnsizedArrayOf" }
%"struct.OT::FixedVersion" = type { %"struct.OT::IntType", %"struct.OT::IntType" }
%"struct.OT::IntType" = type { %struct.BEInt }
%struct.BEInt = type { [2 x i8] }
%"struct.OT::IntType.142" = type { %struct.BEInt.143 }
%struct.BEInt.143 = type { [4 x i8] }
%"struct.OT::SortedUnsizedArrayOf" = type { %"struct.OT::UnsizedArrayOf" }
%"struct.OT::UnsizedArrayOf" = type { [1 x %"struct.AAT::FeatureName"] }
%"struct.AAT::FeatureName" = type { %"struct.OT::IntType", %"struct.OT::IntType", %"struct.OT::OffsetTo", %"struct.OT::IntType", %"struct.OT::IntType.144" }
%"struct.OT::OffsetTo" = type { %"struct.OT::Offset" }
%"struct.OT::Offset" = type { %"struct.OT::IntType.142" }
%"struct.OT::IntType.144" = type { %struct.BEInt.145 }
%struct.BEInt.145 = type { [2 x i8] }
%struct.hb_aat_feature_mapping_t = type { i32, i32, i32, i32 }
%struct.hb_sanitize_context_t = type <{ %struct.hb_dispatch_context_t, [4 x i8], i8*, i8*, i32, i32, i8, [3 x i8], i32, %struct.hb_blob_t*, i32, i8, [3 x i8] }>
%struct.hb_dispatch_context_t = type { i32 }

$_ZNK16hb_lazy_loader_tIN3AAT4featE22hb_table_lazy_loader_tIS1_Lj31EE9hb_face_tLj31E9hb_blob_tE10get_storedEv = comdat any

$_ZN21hb_sanitize_context_t13sanitize_blobIN3AAT4featEEEP9hb_blob_tS4_ = comdat any

$_ZNK2OT14UnsizedArrayOfIN3AAT11FeatureNameEE8sanitizeIJPKNS1_4featEEEEbP21hb_sanitize_context_tjDpOT_ = comdat any

@_hb_NullPool = external hidden local_unnamed_addr constant [48 x i64], align 16
@_hb_CrapPool = external hidden local_unnamed_addr global [48 x i64], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20hb_aat_map_builder_t11add_featureEjj(%struct.hb_aat_map_builder_t* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 0
  %5 = load %struct.hb_face_t*, %struct.hb_face_t** %4, align 8
  %6 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %5, i64 0, i32 8, i32 31, i32 0
  %7 = tail call %struct.hb_blob_t* @_ZNK16hb_lazy_loader_tIN3AAT4featE22hb_table_lazy_loader_tIS1_Lj31EE9hb_face_tLj31E9hb_blob_tE10get_storedEv(%struct.hb_lazy_loader_t.103* %6) #6
  %8 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %7, i64 0, i32 1
  %9 = bitcast i8** %8 to %"struct.AAT::feat"**
  %10 = load %"struct.AAT::feat"*, %"struct.AAT::feat"** %9, align 8
  %11 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %7, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, 12
  %14 = select i1 %13, %"struct.AAT::feat"* bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::feat"*), %"struct.AAT::feat"* %10
  %15 = bitcast %"struct.AAT::feat"* %14 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = tail call i16 @llvm.bswap.i16(i16 %16) #6
  %18 = zext i16 %17 to i32
  %19 = shl nuw i32 %18, 16
  %20 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %14, i64 0, i32 0, i32 1
  %21 = bitcast %"struct.OT::IntType"* %20 to i16*
  %22 = load i16, i16* %21, align 1
  %23 = tail call i16 @llvm.bswap.i16(i16 %22) #6
  %24 = zext i16 %23 to i32
  %25 = or i32 %19, %24
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %320, label %27

27:                                               ; preds = %3
  %28 = icmp eq i32 %1, 1633774708
  br i1 %28, label %29, label %137

29:                                               ; preds = %27
  %30 = load %struct.hb_face_t*, %struct.hb_face_t** %4, align 8
  %31 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %30, i64 0, i32 8, i32 31, i32 0
  %32 = tail call %struct.hb_blob_t* @_ZNK16hb_lazy_loader_tIN3AAT4featE22hb_table_lazy_loader_tIS1_Lj31EE9hb_face_tLj31E9hb_blob_tE10get_storedEv(%struct.hb_lazy_loader_t.103* %31) #6
  %33 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %32, i64 0, i32 1
  %34 = bitcast i8** %33 to %"struct.AAT::feat"**
  %35 = load %"struct.AAT::feat"*, %"struct.AAT::feat"** %34, align 8
  %36 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %32, i64 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = icmp ult i32 %37, 12
  %39 = select i1 %38, %"struct.AAT::feat"* bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::feat"*), %"struct.AAT::feat"* %35
  %40 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %39, i64 0, i32 1
  %41 = bitcast %"struct.OT::IntType"* %40 to i16*
  %42 = load i16, i16* %41, align 1
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %73, label %44

44:                                               ; preds = %29
  %45 = tail call i16 @llvm.bswap.i16(i16 %42) #6
  %46 = zext i16 %45 to i32
  %47 = add nsw i32 %46, -1
  br label %48

48:                                               ; preds = %66, %44
  %49 = phi i32 [ %47, %44 ], [ %68, %66 ]
  %50 = phi i32 [ 0, %44 ], [ %67, %66 ]
  %51 = add i32 %50, %49
  %52 = lshr i32 %51, 1
  %53 = zext i32 %52 to i64
  %54 = mul nuw nsw i64 %53, 12
  %55 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %39, i64 0, i32 4, i32 0, i32 0, i64 0, i32 0, i32 0, i32 0, i64 %54
  %56 = bitcast i8* %55 to i16*
  %57 = load i16, i16* %56, align 1
  %58 = tail call i16 @llvm.bswap.i16(i16 %57) #6
  %59 = icmp ugt i16 %58, 17
  br i1 %59, label %60, label %62

60:                                               ; preds = %48
  %61 = add nsw i32 %52, -1
  br label %66

62:                                               ; preds = %48
  %63 = icmp eq i16 %57, 4352
  br i1 %63, label %70, label %64

64:                                               ; preds = %62
  %65 = add nuw nsw i32 %52, 1
  br label %66

66:                                               ; preds = %64, %60
  %67 = phi i32 [ %50, %60 ], [ %65, %64 ]
  %68 = phi i32 [ %61, %60 ], [ %49, %64 ]
  %69 = icmp sgt i32 %67, %68
  br i1 %69, label %73, label %48

70:                                               ; preds = %62
  %71 = zext i32 %52 to i64
  %72 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %39, i64 0, i32 4, i32 0, i32 0, i64 %71
  br label %73

73:                                               ; preds = %66, %29, %70
  %74 = phi %"struct.AAT::FeatureName"* [ %72, %70 ], [ bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::FeatureName"*), %29 ], [ bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::FeatureName"*), %66 ]
  %75 = getelementptr inbounds %"struct.AAT::FeatureName", %"struct.AAT::FeatureName"* %74, i64 0, i32 1
  %76 = bitcast %"struct.OT::IntType"* %75 to i16*
  %77 = load i16, i16* %76, align 1
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %320, label %79

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = add i32 %81, 1
  %83 = icmp sgt i32 %82, 0
  %84 = select i1 %83, i32 %82, i32 0
  %85 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %123, label %88, !prof !2

88:                                               ; preds = %79
  %89 = icmp ult i32 %86, %84
  br i1 %89, label %90, label %111, !prof !2

90:                                               ; preds = %88, %90
  %91 = phi i32 [ %94, %90 ], [ %86, %88 ]
  %92 = lshr i32 %91, 1
  %93 = add i32 %91, 8
  %94 = add i32 %93, %92
  %95 = icmp ugt i32 %94, %84
  br i1 %95, label %96, label %90

96:                                               ; preds = %90
  %97 = icmp uge i32 %94, %86
  %98 = icmp ult i32 %94, 268435455
  %99 = and i1 %97, %98
  br i1 %99, label %100, label %108, !prof !3

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %102 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"** %101 to i8**
  %103 = load i8*, i8** %102, align 8
  %104 = zext i32 %94 to i64
  %105 = shl nuw nsw i64 %104, 4
  %106 = tail call i8* @realloc(i8* %103, i64 %105) #6
  %107 = icmp eq i8* %106, null
  br i1 %107, label %108, label %109, !prof !2

108:                                              ; preds = %100, %96
  store i32 -1, i32* %85, align 8
  br label %123

109:                                              ; preds = %100
  store i8* %106, i8** %102, align 8
  store i32 %94, i32* %85, align 8
  %110 = load i32, i32* %80, align 4
  br label %111

111:                                              ; preds = %109, %88
  %112 = phi i32 [ %110, %109 ], [ %81, %88 ]
  %113 = icmp ugt i32 %84, %112
  br i1 %113, label %114, label %124

114:                                              ; preds = %111
  %115 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %116 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %115, align 8
  %117 = zext i32 %112 to i64
  %118 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %116, i64 %117
  %119 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"* %118 to i8*
  %120 = sub i32 %84, %112
  %121 = zext i32 %120 to i64
  %122 = shl nuw nsw i64 %121, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %119, i8 0, i64 %122, i1 false) #6
  br label %124

123:                                              ; preds = %108, %79
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  br label %130

124:                                              ; preds = %114, %111
  store i32 %84, i32* %80, align 4
  %125 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %126 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %125, align 8
  %127 = add nsw i32 %84, -1
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %126, i64 %128
  br label %130

130:                                              ; preds = %123, %124
  %131 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %123 ], [ %129, %124 ]
  %132 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %131, i64 0, i32 0
  store i32 17, i32* %132, align 4
  %133 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %131, i64 0, i32 1
  store i32 %2, i32* %133, align 4
  %134 = load i32, i32* %80, align 4
  %135 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %131, i64 0, i32 3
  store i32 %134, i32* %135, align 4
  %136 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %131, i64 0, i32 2
  store i8 1, i8* %136, align 4
  br label %320

137:                                              ; preds = %27
  %138 = tail call %struct.hb_aat_feature_mapping_t* @_Z34hb_aat_layout_find_feature_mappingj(i32 %1) #6
  %139 = icmp eq %struct.hb_aat_feature_mapping_t* %138, null
  br i1 %139, label %320, label %140

140:                                              ; preds = %137
  %141 = load %struct.hb_face_t*, %struct.hb_face_t** %4, align 8
  %142 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %141, i64 0, i32 8, i32 31, i32 0
  %143 = tail call %struct.hb_blob_t* @_ZNK16hb_lazy_loader_tIN3AAT4featE22hb_table_lazy_loader_tIS1_Lj31EE9hb_face_tLj31E9hb_blob_tE10get_storedEv(%struct.hb_lazy_loader_t.103* %142) #6
  %144 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %143, i64 0, i32 1
  %145 = bitcast i8** %144 to %"struct.AAT::feat"**
  %146 = load %"struct.AAT::feat"*, %"struct.AAT::feat"** %145, align 8
  %147 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %143, i64 0, i32 2
  %148 = load i32, i32* %147, align 8
  %149 = icmp ult i32 %148, 12
  %150 = select i1 %149, %"struct.AAT::feat"* bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::feat"*), %"struct.AAT::feat"* %146
  %151 = getelementptr inbounds %struct.hb_aat_feature_mapping_t, %struct.hb_aat_feature_mapping_t* %138, i64 0, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %150, i64 0, i32 1
  %154 = bitcast %"struct.OT::IntType"* %153 to i16*
  %155 = load i16, i16* %154, align 1
  %156 = icmp eq i16 %155, 0
  br i1 %156, label %188, label %157

157:                                              ; preds = %140
  %158 = tail call i16 @llvm.bswap.i16(i16 %155) #6
  %159 = zext i16 %158 to i32
  %160 = add nsw i32 %159, -1
  br label %161

161:                                              ; preds = %181, %157
  %162 = phi i32 [ %160, %157 ], [ %183, %181 ]
  %163 = phi i32 [ 0, %157 ], [ %182, %181 ]
  %164 = add i32 %163, %162
  %165 = lshr i32 %164, 1
  %166 = zext i32 %165 to i64
  %167 = mul nuw nsw i64 %166, 12
  %168 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %150, i64 0, i32 4, i32 0, i32 0, i64 0, i32 0, i32 0, i32 0, i64 %167
  %169 = bitcast i8* %168 to i16*
  %170 = load i16, i16* %169, align 1
  %171 = tail call i16 @llvm.bswap.i16(i16 %170) #6
  %172 = zext i16 %171 to i32
  %173 = sub nsw i32 %152, %172
  %174 = icmp slt i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %161
  %176 = add nsw i32 %165, -1
  br label %181

177:                                              ; preds = %161
  %178 = icmp eq i32 %173, 0
  br i1 %178, label %185, label %179

179:                                              ; preds = %177
  %180 = add nuw nsw i32 %165, 1
  br label %181

181:                                              ; preds = %179, %175
  %182 = phi i32 [ %163, %175 ], [ %180, %179 ]
  %183 = phi i32 [ %176, %175 ], [ %162, %179 ]
  %184 = icmp sgt i32 %182, %183
  br i1 %184, label %188, label %161

185:                                              ; preds = %177
  %186 = zext i32 %165 to i64
  %187 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %150, i64 0, i32 4, i32 0, i32 0, i64 %186
  br label %188

188:                                              ; preds = %181, %140, %185
  %189 = phi %"struct.AAT::FeatureName"* [ %187, %185 ], [ bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::FeatureName"*), %140 ], [ bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::FeatureName"*), %181 ]
  %190 = getelementptr inbounds %"struct.AAT::FeatureName", %"struct.AAT::FeatureName"* %189, i64 0, i32 1
  %191 = bitcast %"struct.OT::IntType"* %190 to i16*
  %192 = load i16, i16* %191, align 1
  %193 = icmp eq i16 %192, 0
  br i1 %193, label %194, label %250

194:                                              ; preds = %188
  %195 = icmp eq i32 %152, 37
  br i1 %195, label %196, label %320

196:                                              ; preds = %194
  %197 = getelementptr inbounds %struct.hb_aat_feature_mapping_t, %struct.hb_aat_feature_mapping_t* %138, i64 0, i32 2
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 1
  br i1 %199, label %200, label %320

200:                                              ; preds = %196
  %201 = load %struct.hb_face_t*, %struct.hb_face_t** %4, align 8
  %202 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %201, i64 0, i32 8, i32 31, i32 0
  %203 = tail call %struct.hb_blob_t* @_ZNK16hb_lazy_loader_tIN3AAT4featE22hb_table_lazy_loader_tIS1_Lj31EE9hb_face_tLj31E9hb_blob_tE10get_storedEv(%struct.hb_lazy_loader_t.103* %202) #6
  %204 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %203, i64 0, i32 1
  %205 = bitcast i8** %204 to %"struct.AAT::feat"**
  %206 = load %"struct.AAT::feat"*, %"struct.AAT::feat"** %205, align 8
  %207 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %203, i64 0, i32 2
  %208 = load i32, i32* %207, align 8
  %209 = icmp ult i32 %208, 12
  %210 = select i1 %209, %"struct.AAT::feat"* bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::feat"*), %"struct.AAT::feat"* %206
  %211 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %210, i64 0, i32 1
  %212 = bitcast %"struct.OT::IntType"* %211 to i16*
  %213 = load i16, i16* %212, align 1
  %214 = icmp eq i16 %213, 0
  br i1 %214, label %244, label %215

215:                                              ; preds = %200
  %216 = tail call i16 @llvm.bswap.i16(i16 %213) #6
  %217 = zext i16 %216 to i32
  %218 = add nsw i32 %217, -1
  br label %219

219:                                              ; preds = %237, %215
  %220 = phi i32 [ %218, %215 ], [ %239, %237 ]
  %221 = phi i32 [ 0, %215 ], [ %238, %237 ]
  %222 = add i32 %221, %220
  %223 = lshr i32 %222, 1
  %224 = zext i32 %223 to i64
  %225 = mul nuw nsw i64 %224, 12
  %226 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %210, i64 0, i32 4, i32 0, i32 0, i64 0, i32 0, i32 0, i32 0, i64 %225
  %227 = bitcast i8* %226 to i16*
  %228 = load i16, i16* %227, align 1
  %229 = tail call i16 @llvm.bswap.i16(i16 %228) #6
  %230 = icmp ugt i16 %229, 3
  br i1 %230, label %231, label %233

231:                                              ; preds = %219
  %232 = add nsw i32 %223, -1
  br label %237

233:                                              ; preds = %219
  %234 = icmp eq i16 %228, 768
  br i1 %234, label %241, label %235

235:                                              ; preds = %233
  %236 = add nuw nsw i32 %223, 1
  br label %237

237:                                              ; preds = %235, %231
  %238 = phi i32 [ %221, %231 ], [ %236, %235 ]
  %239 = phi i32 [ %232, %231 ], [ %220, %235 ]
  %240 = icmp sgt i32 %238, %239
  br i1 %240, label %244, label %219

241:                                              ; preds = %233
  %242 = zext i32 %223 to i64
  %243 = getelementptr inbounds %"struct.AAT::feat", %"struct.AAT::feat"* %210, i64 0, i32 4, i32 0, i32 0, i64 %242
  br label %244

244:                                              ; preds = %237, %200, %241
  %245 = phi %"struct.AAT::FeatureName"* [ %243, %241 ], [ bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::FeatureName"*), %200 ], [ bitcast ([48 x i64]* @_hb_NullPool to %"struct.AAT::FeatureName"*), %237 ]
  %246 = getelementptr inbounds %"struct.AAT::FeatureName", %"struct.AAT::FeatureName"* %245, i64 0, i32 1
  %247 = bitcast %"struct.OT::IntType"* %246 to i16*
  %248 = load i16, i16* %247, align 1
  %249 = icmp eq i16 %248, 0
  br i1 %249, label %320, label %250

250:                                              ; preds = %244, %188
  %251 = phi %"struct.AAT::FeatureName"* [ %189, %188 ], [ %245, %244 ]
  %252 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = add i32 %253, 1
  %255 = icmp sgt i32 %254, 0
  %256 = select i1 %255, i32 %254, i32 0
  %257 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 0
  %258 = load i32, i32* %257, align 8
  %259 = icmp slt i32 %258, 0
  br i1 %259, label %295, label %260, !prof !2

260:                                              ; preds = %250
  %261 = icmp ult i32 %258, %256
  br i1 %261, label %262, label %283, !prof !2

262:                                              ; preds = %260, %262
  %263 = phi i32 [ %266, %262 ], [ %258, %260 ]
  %264 = lshr i32 %263, 1
  %265 = add i32 %263, 8
  %266 = add i32 %265, %264
  %267 = icmp ugt i32 %266, %256
  br i1 %267, label %268, label %262

268:                                              ; preds = %262
  %269 = icmp uge i32 %266, %258
  %270 = icmp ult i32 %266, 268435455
  %271 = and i1 %269, %270
  br i1 %271, label %272, label %280, !prof !3

272:                                              ; preds = %268
  %273 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %274 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"** %273 to i8**
  %275 = load i8*, i8** %274, align 8
  %276 = zext i32 %266 to i64
  %277 = shl nuw nsw i64 %276, 4
  %278 = tail call i8* @realloc(i8* %275, i64 %277) #6
  %279 = icmp eq i8* %278, null
  br i1 %279, label %280, label %281, !prof !2

280:                                              ; preds = %272, %268
  store i32 -1, i32* %257, align 8
  br label %295

281:                                              ; preds = %272
  store i8* %278, i8** %274, align 8
  store i32 %266, i32* %257, align 8
  %282 = load i32, i32* %252, align 4
  br label %283

283:                                              ; preds = %281, %260
  %284 = phi i32 [ %282, %281 ], [ %253, %260 ]
  %285 = icmp ugt i32 %256, %284
  br i1 %285, label %286, label %296

286:                                              ; preds = %283
  %287 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %288 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %287, align 8
  %289 = zext i32 %284 to i64
  %290 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %288, i64 %289
  %291 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"* %290 to i8*
  %292 = sub i32 %256, %284
  %293 = zext i32 %292 to i64
  %294 = shl nuw nsw i64 %293, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %291, i8 0, i64 %294, i1 false) #6
  br label %296

295:                                              ; preds = %280, %250
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  br label %302

296:                                              ; preds = %286, %283
  store i32 %256, i32* %252, align 4
  %297 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %298 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %297, align 8
  %299 = add nsw i32 %256, -1
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %298, i64 %300
  br label %302

302:                                              ; preds = %295, %296
  %303 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %295 ], [ %301, %296 ]
  %304 = load i32, i32* %151, align 4
  %305 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %303, i64 0, i32 0
  store i32 %304, i32* %305, align 4
  %306 = icmp eq i32 %2, 0
  %307 = getelementptr inbounds %struct.hb_aat_feature_mapping_t, %struct.hb_aat_feature_mapping_t* %138, i64 0, i32 2
  %308 = getelementptr inbounds %struct.hb_aat_feature_mapping_t, %struct.hb_aat_feature_mapping_t* %138, i64 0, i32 3
  %309 = select i1 %306, i32* %308, i32* %307
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %303, i64 0, i32 1
  store i32 %310, i32* %311, align 4
  %312 = load i32, i32* %252, align 4
  %313 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %303, i64 0, i32 3
  store i32 %312, i32* %313, align 4
  %314 = getelementptr inbounds %"struct.AAT::FeatureName", %"struct.AAT::FeatureName"* %251, i64 0, i32 3
  %315 = bitcast %"struct.OT::IntType"* %314 to i16*
  %316 = load i16, i16* %315, align 1
  %317 = trunc i16 %316 to i8
  %318 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %303, i64 0, i32 2
  %319 = lshr i8 %317, 7
  store i8 %319, i8* %318, align 4
  br label %320

320:                                              ; preds = %73, %244, %3, %137, %194, %196, %302, %130
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare hidden %struct.hb_aat_feature_mapping_t* @_Z34hb_aat_layout_find_feature_mappingj(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20hb_aat_map_builder_t7compileER12hb_aat_map_t(%struct.hb_aat_map_builder_t*, %struct.hb_aat_map_t* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %118, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  %8 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %10 = zext i32 %4 to i64
  tail call fastcc void @_ZL13sort_r_simpleIJEEvPvmmPFiPKvS2_DpT_ES4_(i8* %9, i64 %10, i64 16) #6
  %11 = load i32, i32* %3, align 4
  %12 = icmp ugt i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.hb_aat_map_builder_t, %struct.hb_aat_map_builder_t* %0, i64 0, i32 1, i32 0, i32 2
  br label %23

15:                                               ; preds = %112, %6
  %16 = phi i32 [ %11, %6 ], [ %115, %112 ]
  %17 = phi i32 [ 0, %6 ], [ %113, %112 ]
  %18 = add i32 %17, 1
  %19 = icmp sgt i32 %18, 0
  %20 = select i1 %19, i32 %18, i32 0
  %21 = icmp ult i32 %20, %16
  br i1 %21, label %22, label %118

22:                                               ; preds = %15
  store i32 %20, i32* %3, align 4
  br label %118

23:                                               ; preds = %13, %112
  %24 = phi i32 [ %11, %13 ], [ %115, %112 ]
  %25 = phi i64 [ 1, %13 ], [ %114, %112 ]
  %26 = phi i32 [ 0, %13 ], [ %113, %112 ]
  %27 = zext i32 %24 to i64
  %28 = icmp ult i64 %25, %27
  br i1 %28, label %31, label %29, !prof !4

29:                                               ; preds = %23
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  %30 = load i32, i32* %3, align 4
  br label %34

31:                                               ; preds = %23
  %32 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %33 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %32, i64 %25
  br label %34

34:                                               ; preds = %29, %31
  %35 = phi i32 [ %30, %29 ], [ %24, %31 ]
  %36 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %29 ], [ %33, %31 ]
  %37 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %36, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp ugt i32 %35, %26
  br i1 %39, label %41, label %40, !prof !4

40:                                               ; preds = %34
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  br label %45

41:                                               ; preds = %34
  %42 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %43 = zext i32 %26 to i64
  %44 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %42, i64 %43
  br label %45

45:                                               ; preds = %40, %41
  %46 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %40 ], [ %44, %41 ]
  %47 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %38, %48
  br i1 %49, label %50, label %89

50:                                               ; preds = %45
  %51 = load i32, i32* %3, align 4
  %52 = zext i32 %51 to i64
  %53 = icmp ult i64 %25, %52
  br i1 %53, label %55, label %54, !prof !4

54:                                               ; preds = %50
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  br label %58

55:                                               ; preds = %50
  %56 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %57 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %56, i64 %25
  br label %58

58:                                               ; preds = %54, %55
  %59 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %54 ], [ %57, %55 ]
  %60 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %59, i64 0, i32 2
  %61 = load i8, i8* %60, align 4, !range !5
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %112

63:                                               ; preds = %58
  %64 = load i32, i32* %3, align 4
  %65 = zext i32 %64 to i64
  %66 = icmp ult i64 %25, %65
  br i1 %66, label %69, label %67, !prof !4

67:                                               ; preds = %63
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  %68 = load i32, i32* %3, align 4
  br label %72

69:                                               ; preds = %63
  %70 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %71 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %70, i64 %25
  br label %72

72:                                               ; preds = %67, %69
  %73 = phi i32 [ %68, %67 ], [ %64, %69 ]
  %74 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %67 ], [ %71, %69 ]
  %75 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %74, i64 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = icmp ugt i32 %73, %26
  br i1 %77, label %79, label %78, !prof !4

78:                                               ; preds = %72
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  br label %83

79:                                               ; preds = %72
  %80 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %81 = zext i32 %26 to i64
  %82 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %80, i64 %81
  br label %83

83:                                               ; preds = %78, %79
  %84 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %78 ], [ %82, %79 ]
  %85 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %84, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = xor i32 %86, %76
  %88 = icmp ugt i32 %87, 1
  br i1 %88, label %89, label %112

89:                                               ; preds = %45, %83
  %90 = load i32, i32* %3, align 4
  %91 = zext i32 %90 to i64
  %92 = icmp ult i64 %25, %91
  br i1 %92, label %95, label %93, !prof !4

93:                                               ; preds = %89
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  %94 = load i32, i32* %3, align 4
  br label %98

95:                                               ; preds = %89
  %96 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %97 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %96, i64 %25
  br label %98

98:                                               ; preds = %93, %95
  %99 = phi i32 [ %94, %93 ], [ %90, %95 ]
  %100 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %93 ], [ %97, %95 ]
  %101 = add i32 %26, 1
  %102 = icmp ugt i32 %99, %101
  br i1 %102, label %104, label %103, !prof !4

103:                                              ; preds = %98
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([48 x i64]* @_hb_CrapPool to i8*), i8* align 16 bitcast ([48 x i64]* @_hb_NullPool to i8*), i64 16, i1 false) #6
  br label %108

104:                                              ; preds = %98
  %105 = load %"struct.hb_aat_map_builder_t::feature_info_t"*, %"struct.hb_aat_map_builder_t::feature_info_t"** %14, align 8
  %106 = zext i32 %101 to i64
  %107 = getelementptr inbounds %"struct.hb_aat_map_builder_t::feature_info_t", %"struct.hb_aat_map_builder_t::feature_info_t"* %105, i64 %106
  br label %108

108:                                              ; preds = %103, %104
  %109 = phi %"struct.hb_aat_map_builder_t::feature_info_t"* [ bitcast ([48 x i64]* @_hb_CrapPool to %"struct.hb_aat_map_builder_t::feature_info_t"*), %103 ], [ %107, %104 ]
  %110 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"* %109 to i8*
  %111 = bitcast %"struct.hb_aat_map_builder_t::feature_info_t"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %110, i8* align 4 %111, i64 16, i1 false)
  br label %112

112:                                              ; preds = %58, %83, %108
  %113 = phi i32 [ %101, %108 ], [ %26, %58 ], [ %26, %83 ]
  %114 = add nuw nsw i64 %25, 1
  %115 = load i32, i32* %3, align 4
  %116 = zext i32 %115 to i64
  %117 = icmp ult i64 %114, %116
  br i1 %117, label %23, label %15

118:                                              ; preds = %22, %15, %2
  tail call void @_Z25hb_aat_layout_compile_mapPK20hb_aat_map_builder_tP12hb_aat_map_t(%struct.hb_aat_map_builder_t* %0, %struct.hb_aat_map_t* %1) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare hidden void @_Z25hb_aat_layout_compile_mapPK20hb_aat_map_builder_tP12hb_aat_map_t(%struct.hb_aat_map_builder_t*, %struct.hb_aat_map_t*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %struct.hb_blob_t* @_ZNK16hb_lazy_loader_tIN3AAT4featE22hb_table_lazy_loader_tIS1_Lj31EE9hb_face_tLj31E9hb_blob_tE10get_storedEv(%struct.hb_lazy_loader_t.103*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.hb_sanitize_context_t, align 8
  %3 = bitcast %struct.hb_lazy_loader_t.103* %0 to i64*
  %4 = load atomic i64, i64* %3 acquire, align 8
  %5 = inttoptr i64 %4 to %struct.hb_blob_t*
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %7, label %46, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.hb_lazy_loader_t.103, %struct.hb_lazy_loader_t.103* %0, i64 -31
  %9 = bitcast %struct.hb_lazy_loader_t.103* %8 to %struct.hb_face_t**
  %10 = bitcast %struct.hb_sanitize_context_t* %2 to i8*
  %11 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %2, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %2, i64 0, i32 2
  %13 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %2, i64 0, i32 8
  %14 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %2, i64 0, i32 9
  %15 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %2, i64 0, i32 10
  %16 = bitcast i8** %12 to i8*
  %17 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %2, i64 0, i32 11
  br label %18

18:                                               ; preds = %7, %41
  %19 = load %struct.hb_face_t*, %struct.hb_face_t** %9, align 8
  %20 = icmp eq %struct.hb_face_t* %19, null
  br i1 %20, label %21, label %23, !prof !2

21:                                               ; preds = %18
  %22 = call %struct.hb_blob_t* @hb_blob_get_empty() #6
  br label %46

23:                                               ; preds = %18
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %10) #6
  store i32 0, i32* %11, align 8
  store i32 0, i32* %13, align 4
  store %struct.hb_blob_t* null, %struct.hb_blob_t** %14, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 25, i1 false) #6
  %24 = call i32 @hb_face_get_glyph_count(%struct.hb_face_t* nonnull %19) #6
  store i32 %24, i32* %15, align 8
  store i8 1, i8* %17, align 4
  %25 = call %struct.hb_blob_t* @hb_face_reference_table(%struct.hb_face_t* nonnull %19, i32 1717920116) #6
  %26 = call %struct.hb_blob_t* @_ZN21hb_sanitize_context_t13sanitize_blobIN3AAT4featEEEP9hb_blob_tS4_(%struct.hb_sanitize_context_t* nonnull %2, %struct.hb_blob_t* %25) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %10) #6
  %27 = icmp eq %struct.hb_blob_t* %26, null
  br i1 %27, label %28, label %30, !prof !2

28:                                               ; preds = %23
  %29 = call %struct.hb_blob_t* @hb_blob_get_empty() #6
  br label %30

30:                                               ; preds = %28, %23
  %31 = phi %struct.hb_blob_t* [ %29, %28 ], [ %26, %23 ]
  %32 = ptrtoint %struct.hb_blob_t* %31 to i64
  %33 = cmpxchg weak i64* %3, i64 0, i64 %32 acq_rel monotonic
  %34 = extractvalue { i64, i1 } %33, 1
  br i1 %34, label %46, label %35, !prof !4

35:                                               ; preds = %30
  %36 = icmp eq %struct.hb_blob_t* %31, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %35
  %38 = call %struct.hb_blob_t* @hb_blob_get_empty() #6
  %39 = icmp eq %struct.hb_blob_t* %38, %31
  br i1 %39, label %41, label %40

40:                                               ; preds = %37
  call void @hb_blob_destroy(%struct.hb_blob_t* nonnull %31) #6
  br label %41

41:                                               ; preds = %40, %37, %35
  %42 = load atomic i64, i64* %3 acquire, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %18, label %44, !prof !2

44:                                               ; preds = %41
  %45 = inttoptr i64 %42 to %struct.hb_blob_t*
  br label %46

46:                                               ; preds = %30, %1, %44, %21
  %47 = phi %struct.hb_blob_t* [ %22, %21 ], [ %45, %44 ], [ %5, %1 ], [ %31, %30 ]
  ret %struct.hb_blob_t* %47
}

declare %struct.hb_blob_t* @hb_blob_get_empty() local_unnamed_addr #2

declare i32 @hb_face_get_glyph_count(%struct.hb_face_t*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %struct.hb_blob_t* @_ZN21hb_sanitize_context_t13sanitize_blobIN3AAT4featEEEP9hb_blob_tS4_(%struct.hb_sanitize_context_t*, %struct.hb_blob_t*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.AAT::feat"*, align 8
  %4 = alloca %"struct.AAT::feat"*, align 8
  %5 = tail call %struct.hb_blob_t* @hb_blob_reference(%struct.hb_blob_t* %1) #6
  %6 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 9
  store %struct.hb_blob_t* %5, %struct.hb_blob_t** %6, align 8
  %7 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 6
  %8 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 2
  %9 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 3
  %10 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 4
  %11 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 8
  %12 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %0, i64 0, i32 0, i32 0
  %13 = bitcast %"struct.AAT::feat"** %4 to i8*
  %14 = bitcast %"struct.AAT::feat"** %4 to i8**
  %15 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %1, i64 0, i32 2
  br label %16

16:                                               ; preds = %102, %2
  %17 = phi %struct.hb_blob_t* [ %5, %2 ], [ %108, %102 ]
  %18 = phi i8 [ 0, %2 ], [ 1, %102 ]
  store i8 %18, i8* %7, align 8
  %19 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %17, i64 0, i32 1
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** %8, align 8
  %21 = getelementptr inbounds %struct.hb_blob_t, %struct.hb_blob_t* %17, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %20, i64 %23
  store i8* %24, i8** %9, align 8
  %25 = icmp ugt i32 %22, 67108862
  br i1 %25, label %32, label %26, !prof !2

26:                                               ; preds = %16
  %27 = shl i32 %22, 6
  %28 = icmp ugt i32 %27, 16384
  %29 = select i1 %28, i32 %27, i32 16384
  %30 = icmp ult i32 %29, 1073741823
  %31 = select i1 %30, i32 %29, i32 1073741823
  br label %32

32:                                               ; preds = %16, %26
  %33 = phi i32 [ %31, %26 ], [ 1073741823, %16 ]
  store i32 %33, i32* %10, align 8
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 8
  %34 = icmp eq i8* %20, null
  br i1 %34, label %35, label %37, !prof !2

35:                                               ; preds = %32
  call void @hb_blob_destroy(%struct.hb_blob_t* %17) #6
  store %struct.hb_blob_t* null, %struct.hb_blob_t** %6, align 8
  %36 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 16, i1 false) #6
  br label %123

37:                                               ; preds = %32
  %38 = icmp ult i32 %22, 12
  br i1 %38, label %39, label %40, !prof !2

39:                                               ; preds = %37
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #6
  br label %117

40:                                               ; preds = %37
  %41 = add nsw i32 %33, -12
  store i32 %41, i32* %10, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #6
  %42 = bitcast i8* %20 to i16*
  %43 = load i16, i16* %42, align 1
  %44 = icmp eq i16 %43, 256
  br i1 %44, label %45, label %117, !prof !4

45:                                               ; preds = %40
  %46 = getelementptr inbounds i8, i8* %20, i64 12
  %47 = bitcast i8* %46 to %"struct.OT::UnsizedArrayOf"*
  %48 = getelementptr inbounds i8, i8* %20, i64 4
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 1
  %51 = call i16 @llvm.bswap.i16(i16 %50) #6
  %52 = zext i16 %51 to i32
  store i8* %20, i8** %14, align 8
  %53 = call zeroext i1 @_ZNK2OT14UnsizedArrayOfIN3AAT11FeatureNameEE8sanitizeIJPKNS1_4featEEEEbP21hb_sanitize_context_tjDpOT_(%"struct.OT::UnsizedArrayOf"* %47, %struct.hb_sanitize_context_t* %0, i32 %52, %"struct.AAT::feat"** nonnull dereferenceable(8) %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #6
  %54 = load i32, i32* %11, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %53, label %56, label %98

56:                                               ; preds = %45
  %57 = bitcast i8* %20 to i16*
  %58 = bitcast i8* %46 to %"struct.OT::UnsizedArrayOf"*
  %59 = bitcast i8* %48 to i16*
  br i1 %55, label %60, label %109

60:                                               ; preds = %56
  store i32 0, i32* %11, align 4
  %61 = load i8*, i8** %8, align 8
  %62 = icmp ugt i8* %61, %20
  br i1 %62, label %72, label %63, !prof !2

63:                                               ; preds = %60
  %64 = load i8*, i8** %9, align 8
  %65 = icmp ult i8* %64, %20
  br i1 %65, label %72, label %66, !prof !2

66:                                               ; preds = %63
  %67 = ptrtoint i8* %64 to i64
  %68 = ptrtoint i8* %20 to i64
  %69 = sub i64 %67, %68
  %70 = trunc i64 %69 to i32
  %71 = icmp ult i32 %70, 12
  br i1 %71, label %72, label %74, !prof !2

72:                                               ; preds = %66, %63, %60
  %73 = bitcast %"struct.AAT::feat"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #6
  br label %91

74:                                               ; preds = %66
  %75 = load i32, i32* %10, align 8
  %76 = add i32 %75, -12
  store i32 %76, i32* %10, align 8
  %77 = icmp sgt i32 %76, 0
  %78 = bitcast %"struct.AAT::feat"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %78) #6
  br i1 %77, label %79, label %91, !prof !4

79:                                               ; preds = %74
  %80 = load i16, i16* %57, align 1
  %81 = icmp eq i16 %80, 256
  br i1 %81, label %82, label %91, !prof !4

82:                                               ; preds = %79
  %83 = load i16, i16* %59, align 1
  %84 = call i16 @llvm.bswap.i16(i16 %83) #6
  %85 = zext i16 %84 to i32
  %86 = bitcast %"struct.AAT::feat"** %3 to i8**
  store i8* %20, i8** %86, align 8
  %87 = call zeroext i1 @_ZNK2OT14UnsizedArrayOfIN3AAT11FeatureNameEE8sanitizeIJPKNS1_4featEEEEbP21hb_sanitize_context_tjDpOT_(%"struct.OT::UnsizedArrayOf"* %58, %struct.hb_sanitize_context_t* %0, i32 %85, %"struct.AAT::feat"** nonnull dereferenceable(8) %3) #6
  %88 = xor i1 %87, true
  %89 = load i32, i32* %11, align 4
  %90 = icmp ne i32 %89, 0
  br label %91

91:                                               ; preds = %72, %74, %79, %82
  %92 = phi i1 [ false, %79 ], [ false, %74 ], [ %90, %82 ], [ false, %72 ]
  %93 = phi i8* [ %78, %79 ], [ %78, %74 ], [ %78, %82 ], [ %73, %72 ]
  %94 = phi i1 [ true, %79 ], [ true, %74 ], [ %88, %82 ], [ true, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #6
  %95 = load %struct.hb_blob_t*, %struct.hb_blob_t** %6, align 8
  call void @hb_blob_destroy(%struct.hb_blob_t* %95) #6
  store %struct.hb_blob_t* null, %struct.hb_blob_t** %6, align 8
  %96 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 16, i1 false) #6
  %97 = or i1 %94, %92
  br i1 %97, label %121, label %112

98:                                               ; preds = %45
  br i1 %55, label %99, label %115

99:                                               ; preds = %98
  %100 = load i8, i8* %7, align 8, !range !5
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %102, label %113

102:                                              ; preds = %99
  %103 = call i8* @hb_blob_get_data_writable(%struct.hb_blob_t* %1, i32* null) #6
  store i8* %103, i8** %8, align 8
  %104 = load i32, i32* %15, align 8
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  store i8* %106, i8** %9, align 8
  %107 = icmp eq i8* %103, null
  %108 = load %struct.hb_blob_t*, %struct.hb_blob_t** %6, align 8
  br i1 %107, label %118, label %16

109:                                              ; preds = %56
  %110 = load %struct.hb_blob_t*, %struct.hb_blob_t** %6, align 8
  call void @hb_blob_destroy(%struct.hb_blob_t* %110) #6
  store %struct.hb_blob_t* null, %struct.hb_blob_t** %6, align 8
  %111 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 16, i1 false) #6
  br label %112

112:                                              ; preds = %91, %109
  call void @hb_blob_make_immutable(%struct.hb_blob_t* %1) #6
  br label %123

113:                                              ; preds = %99
  %114 = load %struct.hb_blob_t*, %struct.hb_blob_t** %6, align 8
  br label %118

115:                                              ; preds = %98
  %116 = load %struct.hb_blob_t*, %struct.hb_blob_t** %6, align 8
  br label %118

117:                                              ; preds = %40, %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #6
  br label %118

118:                                              ; preds = %102, %113, %115, %117
  %119 = phi %struct.hb_blob_t* [ %17, %117 ], [ %116, %115 ], [ %114, %113 ], [ %108, %102 ]
  call void @hb_blob_destroy(%struct.hb_blob_t* %119) #6
  store %struct.hb_blob_t* null, %struct.hb_blob_t** %6, align 8
  %120 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 16, i1 false) #6
  br label %121

121:                                              ; preds = %118, %91
  call void @hb_blob_destroy(%struct.hb_blob_t* %1) #6
  %122 = call %struct.hb_blob_t* @hb_blob_get_empty() #6
  br label %123

123:                                              ; preds = %121, %112, %35
  %124 = phi %struct.hb_blob_t* [ %1, %35 ], [ %122, %121 ], [ %1, %112 ]
  ret %struct.hb_blob_t* %124
}

declare %struct.hb_blob_t* @hb_face_reference_table(%struct.hb_face_t*, i32) local_unnamed_addr #2

declare i8* @hb_blob_get_data_writable(%struct.hb_blob_t*, i32*) local_unnamed_addr #2

declare void @hb_blob_make_immutable(%struct.hb_blob_t*) local_unnamed_addr #2

declare void @hb_blob_destroy(%struct.hb_blob_t*) local_unnamed_addr #2

declare %struct.hb_blob_t* @hb_blob_reference(%struct.hb_blob_t*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2OT14UnsizedArrayOfIN3AAT11FeatureNameEE8sanitizeIJPKNS1_4featEEEEbP21hb_sanitize_context_tjDpOT_(%"struct.OT::UnsizedArrayOf"*, %struct.hb_sanitize_context_t*, i32, %"struct.AAT::feat"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %5 = icmp ult i32 %2, 357913941
  br i1 %5, label %6, label %99, !prof !6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = mul i32 %2, 12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %29, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %1, i64 0, i32 2
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ugt i8* %12, %7
  br i1 %13, label %99, label %14, !prof !2

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %1, i64 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ult i8* %16, %7
  br i1 %17, label %99, label %18, !prof !2

18:                                               ; preds = %14
  %19 = ptrtoint i8* %16 to i64
  %20 = ptrtoint %"struct.OT::UnsizedArrayOf"* %0 to i64
  %21 = sub i64 %19, %20
  %22 = trunc i64 %21 to i32
  %23 = icmp ugt i32 %8, %22
  br i1 %23, label %99, label %24, !prof !2

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %1, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = sub i32 %26, %8
  store i32 %27, i32* %25, align 8
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %99, !prof !4

29:                                               ; preds = %24, %6
  %30 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %1, i64 0, i32 3
  %31 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %1, i64 0, i32 4
  %32 = icmp eq i32 %2, 0
  br i1 %32, label %99, label %33

33:                                               ; preds = %29
  %34 = bitcast %"struct.AAT::feat"** %3 to i8**
  %35 = getelementptr inbounds %struct.hb_sanitize_context_t, %struct.hb_sanitize_context_t* %1, i64 0, i32 2
  %36 = zext i32 %2 to i64
  %37 = load i8*, i8** %35, align 8
  br label %38

38:                                               ; preds = %96, %33
  %39 = phi i64 [ 0, %33 ], [ %97, %96 ]
  %40 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 %39
  %41 = load i8*, i8** %34, align 8
  %42 = getelementptr inbounds %"struct.AAT::FeatureName", %"struct.AAT::FeatureName"* %40, i64 0, i32 0, i32 0, i32 0, i64 0
  %43 = icmp ugt i8* %37, %42
  br i1 %43, label %99, label %44, !prof !2

44:                                               ; preds = %38
  %45 = load i8*, i8** %30, align 8
  %46 = icmp ult i8* %45, %42
  br i1 %46, label %99, label %47, !prof !2

47:                                               ; preds = %44
  %48 = ptrtoint i8* %45 to i64
  %49 = ptrtoint %"struct.AAT::FeatureName"* %40 to i64
  %50 = sub i64 %48, %49
  %51 = trunc i64 %50 to i32
  %52 = icmp ult i32 %51, 12
  br i1 %52, label %99, label %53, !prof !2

53:                                               ; preds = %47
  %54 = load i32, i32* %31, align 8
  %55 = add i32 %54, -12
  store i32 %55, i32* %31, align 8
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %99, !prof !4

57:                                               ; preds = %53
  %58 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 %39, i32 2, i32 0, i32 0, i32 0, i32 0, i64 0
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i64
  %61 = shl nuw nsw i64 %60, 24
  %62 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 %39, i32 2, i32 0, i32 0, i32 0, i32 0, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = shl nuw nsw i64 %64, 16
  %66 = or i64 %65, %61
  %67 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 %39, i32 2, i32 0, i32 0, i32 0, i32 0, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i64
  %70 = shl nuw nsw i64 %69, 8
  %71 = or i64 %66, %70
  %72 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 %39, i32 2, i32 0, i32 0, i32 0, i32 0, i64 3
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i64
  %75 = or i64 %71, %74
  %76 = getelementptr inbounds i8, i8* %41, i64 %75
  %77 = getelementptr inbounds %"struct.OT::UnsizedArrayOf", %"struct.OT::UnsizedArrayOf"* %0, i64 0, i32 0, i64 %39, i32 1
  %78 = bitcast %"struct.OT::IntType"* %77 to i16*
  %79 = load i16, i16* %78, align 1
  %80 = tail call i16 @llvm.bswap.i16(i16 %79) #6
  %81 = zext i16 %80 to i32
  %82 = shl nuw nsw i32 %81, 2
  %83 = icmp eq i16 %79, 0
  br i1 %83, label %96, label %84

84:                                               ; preds = %57
  %85 = icmp ugt i8* %37, %76
  %86 = icmp ult i8* %45, %76
  %87 = or i1 %85, %86
  br i1 %87, label %99, label %88, !prof !7

88:                                               ; preds = %84
  %89 = ptrtoint i8* %76 to i64
  %90 = sub i64 %48, %89
  %91 = trunc i64 %90 to i32
  %92 = icmp ugt i32 %82, %91
  br i1 %92, label %99, label %93, !prof !2

93:                                               ; preds = %88
  %94 = sub nsw i32 %55, %82
  store i32 %94, i32* %31, align 8
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %99, !prof !4

96:                                               ; preds = %93, %57
  %97 = add nuw nsw i64 %39, 1
  %98 = icmp eq i64 %97, %36
  br i1 %98, label %99, label %38

99:                                               ; preds = %53, %47, %44, %38, %93, %88, %84, %96, %29, %10, %14, %18, %4, %24
  %100 = phi i1 [ false, %24 ], [ false, %4 ], [ false, %18 ], [ false, %14 ], [ false, %10 ], [ true, %29 ], [ true, %96 ], [ false, %53 ], [ false, %47 ], [ false, %44 ], [ false, %38 ], [ false, %93 ], [ false, %88 ], [ false, %84 ]
  ret i1 %100
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: inlinehint nofree nounwind ssp uwtable
define internal fastcc void @_ZL13sort_r_simpleIJEEvPvmmPFiPKvS2_DpT_ES4_(i8*, i64, i64) unnamed_addr #5 {
  %4 = mul i64 %1, %2
  %5 = getelementptr inbounds i8, i8* %0, i64 %4
  %6 = icmp ult i64 %1, 10
  br i1 %6, label %37, label %7

7:                                                ; preds = %3
  %8 = sub i64 0, %2
  %9 = icmp sgt i64 %2, 0
  %10 = add i64 %2, -1
  %11 = add i64 %2, -33
  %12 = lshr i64 %11, 5
  %13 = add nuw nsw i64 %12, 1
  %14 = icmp sgt i64 %2, 1
  %15 = icmp ult i64 %10, 32
  %16 = and i64 %10, -32
  %17 = and i64 %13, 1
  %18 = icmp eq i64 %12, 0
  %19 = sub nuw nsw i64 %13, %17
  %20 = icmp eq i64 %17, 0
  %21 = icmp eq i64 %10, %16
  %22 = icmp ult i64 %10, 32
  %23 = and i64 %10, -32
  %24 = and i64 %13, 1
  %25 = icmp eq i64 %12, 0
  %26 = sub nuw nsw i64 %13, %24
  %27 = icmp eq i64 %24, 0
  %28 = icmp eq i64 %10, %23
  %29 = icmp eq i64 %2, 1
  %30 = icmp ult i64 %10, 32
  %31 = and i64 %10, -32
  %32 = and i64 %13, 1
  %33 = icmp eq i64 %12, 0
  %34 = sub nuw nsw i64 %13, %32
  %35 = icmp eq i64 %32, 0
  %36 = icmp eq i64 %10, %31
  br label %229

37:                                               ; preds = %1267, %3
  %38 = phi i8* [ %0, %3 ], [ %1270, %1267 ]
  %39 = phi i8* [ %5, %3 ], [ %1273, %1267 ]
  %40 = getelementptr inbounds i8, i8* %38, i64 %2
  %41 = icmp ult i8* %40, %39
  br i1 %41, label %42, label %1275

42:                                               ; preds = %37
  %43 = sub i64 0, %2
  %44 = icmp sgt i64 %2, 0
  br i1 %44, label %45, label %181

45:                                               ; preds = %42
  %46 = add i64 %2, -1
  %47 = add i64 %2, -33
  %48 = lshr i64 %47, 5
  %49 = add nuw nsw i64 %48, 1
  %50 = icmp ult i64 %46, 32
  %51 = and i64 %46, -32
  %52 = and i64 %49, 1
  %53 = icmp eq i64 %48, 0
  %54 = sub nuw nsw i64 %49, %52
  %55 = icmp eq i64 %52, 0
  %56 = icmp eq i64 %46, %51
  br label %57

57:                                               ; preds = %45, %60
  %58 = phi i8* [ %61, %60 ], [ %40, %45 ]
  %59 = icmp ugt i8* %58, %38
  br i1 %59, label %63, label %60

60:                                               ; preds = %171, %96, %88, %73, %57
  %61 = getelementptr inbounds i8, i8* %58, i64 %2
  %62 = icmp ult i8* %61, %39
  br i1 %62, label %57, label %1275

63:                                               ; preds = %57, %171
  %64 = phi i8* [ %65, %171 ], [ %58, %57 ]
  %65 = getelementptr inbounds i8, i8* %64, i64 %43
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 4, !alias.scope !8, !noalias !11
  %68 = bitcast i8* %64 to i32*
  %69 = load i32, i32* %68, align 4, !alias.scope !11, !noalias !8
  %70 = icmp eq i32 %67, %69
  %71 = trunc i32 %67 to i8
  %72 = trunc i32 %69 to i8
  br i1 %70, label %75, label %73

73:                                               ; preds = %63
  %74 = icmp slt i32 %67, %69
  br i1 %74, label %60, label %98

75:                                               ; preds = %63
  %76 = getelementptr inbounds i8, i8* %65, i64 8
  %77 = load i8, i8* %76, align 4, !range !5, !alias.scope !8, !noalias !11
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %88

79:                                               ; preds = %75
  %80 = getelementptr inbounds i8, i8* %65, i64 4
  %81 = bitcast i8* %80 to i32*
  %82 = load i32, i32* %81, align 4, !alias.scope !8, !noalias !11
  %83 = getelementptr inbounds i8, i8* %64, i64 4
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 4, !alias.scope !11, !noalias !8
  %86 = xor i32 %85, %82
  %87 = icmp ugt i32 %86, 1
  br i1 %87, label %96, label %88

88:                                               ; preds = %79, %75
  %89 = getelementptr inbounds i8, i8* %65, i64 12
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %90, align 4, !alias.scope !8, !noalias !11
  %92 = getelementptr inbounds i8, i8* %64, i64 12
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 4, !alias.scope !11, !noalias !8
  %95 = icmp ugt i32 %91, %94
  br i1 %95, label %98, label %60

96:                                               ; preds = %79
  %97 = icmp slt i32 %82, %85
  br i1 %97, label %60, label %98

98:                                               ; preds = %73, %88, %96
  store i8 %72, i8* %65, align 1, !alias.scope !13, !noalias !16
  store i8 %71, i8* %64, align 1, !alias.scope !16, !noalias !13
  %99 = getelementptr inbounds i8, i8* %65, i64 1
  %100 = icmp ult i8* %99, %64
  br i1 %100, label %101, label %171

101:                                              ; preds = %98
  br i1 %50, label %102, label %105

102:                                              ; preds = %170, %101
  %103 = phi i8* [ %64, %101 ], [ %106, %170 ]
  %104 = phi i8* [ %99, %101 ], [ %107, %170 ]
  br label %173

105:                                              ; preds = %101
  %106 = getelementptr i8, i8* %64, i64 %51
  %107 = getelementptr i8, i8* %99, i64 %51
  br i1 %53, label %150, label %108

108:                                              ; preds = %105
  %109 = getelementptr i8, i8* %64, i64 1
  %110 = getelementptr i8, i8* %64, i64 1
  br label %111

111:                                              ; preds = %111, %108
  %112 = phi i64 [ 0, %108 ], [ %147, %111 ]
  %113 = phi i64 [ %54, %108 ], [ %148, %111 ]
  %114 = getelementptr i8, i8* %99, i64 %112
  %115 = getelementptr inbounds i8, i8* %109, i64 %112
  %116 = bitcast i8* %114 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1, !alias.scope !13, !noalias !16
  %118 = getelementptr i8, i8* %114, i64 16
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1, !alias.scope !13, !noalias !16
  %121 = bitcast i8* %115 to <16 x i8>*
  %122 = load <16 x i8>, <16 x i8>* %121, align 1, !alias.scope !16, !noalias !13
  %123 = getelementptr inbounds i8, i8* %115, i64 16
  %124 = bitcast i8* %123 to <16 x i8>*
  %125 = load <16 x i8>, <16 x i8>* %124, align 1, !alias.scope !16, !noalias !13
  %126 = bitcast i8* %114 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %126, align 1, !alias.scope !13, !noalias !16
  %127 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %127, align 1, !alias.scope !13, !noalias !16
  %128 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %128, align 1, !alias.scope !16, !noalias !13
  %129 = bitcast i8* %123 to <16 x i8>*
  store <16 x i8> %120, <16 x i8>* %129, align 1, !alias.scope !16, !noalias !13
  %130 = or i64 %112, 32
  %131 = getelementptr i8, i8* %99, i64 %130
  %132 = getelementptr inbounds i8, i8* %110, i64 %130
  %133 = bitcast i8* %131 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1, !alias.scope !13, !noalias !16
  %135 = getelementptr i8, i8* %131, i64 16
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1, !alias.scope !13, !noalias !16
  %138 = bitcast i8* %132 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1, !alias.scope !16, !noalias !13
  %140 = getelementptr inbounds i8, i8* %132, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  %142 = load <16 x i8>, <16 x i8>* %141, align 1, !alias.scope !16, !noalias !13
  %143 = bitcast i8* %131 to <16 x i8>*
  store <16 x i8> %139, <16 x i8>* %143, align 1, !alias.scope !13, !noalias !16
  %144 = bitcast i8* %135 to <16 x i8>*
  store <16 x i8> %142, <16 x i8>* %144, align 1, !alias.scope !13, !noalias !16
  %145 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %145, align 1, !alias.scope !16, !noalias !13
  %146 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %146, align 1, !alias.scope !16, !noalias !13
  %147 = add i64 %112, 64
  %148 = add i64 %113, -2
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %111, !llvm.loop !18

150:                                              ; preds = %111, %105
  %151 = phi i64 [ 0, %105 ], [ %147, %111 ]
  br i1 %55, label %170, label %152

152:                                              ; preds = %150
  %153 = getelementptr i8, i8* %64, i64 1
  %154 = getelementptr i8, i8* %99, i64 %151
  %155 = getelementptr inbounds i8, i8* %153, i64 %151
  %156 = bitcast i8* %154 to <16 x i8>*
  %157 = load <16 x i8>, <16 x i8>* %156, align 1, !alias.scope !13, !noalias !16
  %158 = getelementptr i8, i8* %154, i64 16
  %159 = bitcast i8* %158 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1, !alias.scope !13, !noalias !16
  %161 = bitcast i8* %155 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1, !alias.scope !16, !noalias !13
  %163 = getelementptr inbounds i8, i8* %155, i64 16
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1, !alias.scope !16, !noalias !13
  %166 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %166, align 1, !alias.scope !13, !noalias !16
  %167 = bitcast i8* %158 to <16 x i8>*
  store <16 x i8> %165, <16 x i8>* %167, align 1, !alias.scope !13, !noalias !16
  %168 = bitcast i8* %155 to <16 x i8>*
  store <16 x i8> %157, <16 x i8>* %168, align 1, !alias.scope !16, !noalias !13
  %169 = bitcast i8* %163 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %169, align 1, !alias.scope !16, !noalias !13
  br label %170

170:                                              ; preds = %150, %152
  br i1 %56, label %171, label %102

171:                                              ; preds = %173, %170, %98
  %172 = icmp ugt i8* %65, %38
  br i1 %172, label %63, label %60

173:                                              ; preds = %102, %173
  %174 = phi i8* [ %176, %173 ], [ %103, %102 ]
  %175 = phi i8* [ %179, %173 ], [ %104, %102 ]
  %176 = getelementptr inbounds i8, i8* %174, i64 1
  %177 = load i8, i8* %175, align 1, !alias.scope !13, !noalias !16
  %178 = load i8, i8* %176, align 1, !alias.scope !16, !noalias !13
  store i8 %178, i8* %175, align 1, !alias.scope !13, !noalias !16
  store i8 %177, i8* %176, align 1, !alias.scope !16, !noalias !13
  %179 = getelementptr inbounds i8, i8* %175, i64 1
  %180 = icmp eq i8* %179, %64
  br i1 %180, label %171, label %173, !llvm.loop !20

181:                                              ; preds = %42, %226
  %182 = phi i8* [ %227, %226 ], [ %40, %42 ]
  %183 = icmp ugt i8* %182, %38
  br i1 %183, label %184, label %226

184:                                              ; preds = %181
  %185 = bitcast i8* %182 to i32*
  %186 = load i32, i32* %185, align 4, !alias.scope !11, !noalias !8
  br label %187

187:                                              ; preds = %198, %184
  %188 = phi i32 [ %186, %184 ], [ %192, %198 ]
  %189 = phi i8* [ %182, %184 ], [ %190, %198 ]
  %190 = getelementptr inbounds i8, i8* %189, i64 %43
  %191 = bitcast i8* %190 to i32*
  %192 = load i32, i32* %191, align 4, !alias.scope !8, !noalias !11
  %193 = icmp eq i32 %192, %188
  br i1 %193, label %199, label %194

194:                                              ; preds = %187
  %195 = icmp sge i32 %192, %188
  %196 = icmp ugt i8* %190, %38
  %197 = and i1 %195, %196
  br i1 %197, label %198, label %226

198:                                              ; preds = %194, %212, %216
  br label %187

199:                                              ; preds = %187
  %200 = getelementptr inbounds i8, i8* %190, i64 8
  %201 = load i8, i8* %200, align 4, !range !5, !alias.scope !8, !noalias !11
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %203, label %216

203:                                              ; preds = %199
  %204 = getelementptr inbounds i8, i8* %190, i64 4
  %205 = bitcast i8* %204 to i32*
  %206 = load i32, i32* %205, align 4, !alias.scope !8, !noalias !11
  %207 = getelementptr inbounds i8, i8* %189, i64 4
  %208 = bitcast i8* %207 to i32*
  %209 = load i32, i32* %208, align 4, !alias.scope !11, !noalias !8
  %210 = xor i32 %209, %206
  %211 = icmp ugt i32 %210, 1
  br i1 %211, label %212, label %216

212:                                              ; preds = %203
  %213 = icmp sge i32 %206, %209
  %214 = icmp ugt i8* %190, %38
  %215 = and i1 %213, %214
  br i1 %215, label %198, label %226

216:                                              ; preds = %203, %199
  %217 = getelementptr inbounds i8, i8* %190, i64 12
  %218 = bitcast i8* %217 to i32*
  %219 = load i32, i32* %218, align 4, !alias.scope !8, !noalias !11
  %220 = getelementptr inbounds i8, i8* %189, i64 12
  %221 = bitcast i8* %220 to i32*
  %222 = load i32, i32* %221, align 4, !alias.scope !11, !noalias !8
  %223 = icmp ugt i32 %219, %222
  %224 = icmp ugt i8* %190, %38
  %225 = and i1 %223, %224
  br i1 %225, label %198, label %226

226:                                              ; preds = %212, %194, %216, %181
  %227 = getelementptr inbounds i8, i8* %182, i64 %2
  %228 = icmp ult i8* %227, %39
  br i1 %228, label %181, label %1275

229:                                              ; preds = %7, %1267
  %230 = phi i8* [ %5, %7 ], [ %1273, %1267 ]
  %231 = phi i64 [ %1, %7 ], [ %1271, %1267 ]
  %232 = phi i8* [ %0, %7 ], [ %1270, %1267 ]
  %233 = ptrtoint i8* %232 to i64
  %234 = add i64 %231, -1
  %235 = mul i64 %234, %2
  %236 = getelementptr inbounds i8, i8* %232, i64 %235
  %237 = getelementptr inbounds i8, i8* %232, i64 %2
  %238 = lshr i64 %231, 1
  %239 = mul i64 %238, %2
  %240 = getelementptr inbounds i8, i8* %232, i64 %239
  %241 = getelementptr inbounds i8, i8* %236, i64 %8
  %242 = bitcast i8* %237 to i32*
  %243 = load i32, i32* %242, align 4
  %244 = bitcast i8* %240 to i32*
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %243, %245
  br i1 %246, label %250, label %247

247:                                              ; preds = %229
  %248 = icmp slt i32 %243, %245
  %249 = select i1 %248, i32 -1, i32 1
  br label %277

250:                                              ; preds = %229
  %251 = getelementptr inbounds i8, i8* %237, i64 8
  %252 = load i8, i8* %251, align 4, !range !5
  %253 = icmp eq i8 %252, 0
  br i1 %253, label %254, label %266

254:                                              ; preds = %250
  %255 = getelementptr inbounds i8, i8* %237, i64 4
  %256 = bitcast i8* %255 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds i8, i8* %240, i64 4
  %259 = bitcast i8* %258 to i32*
  %260 = load i32, i32* %259, align 4
  %261 = xor i32 %260, %257
  %262 = icmp ugt i32 %261, 1
  br i1 %262, label %263, label %266

263:                                              ; preds = %254
  %264 = icmp slt i32 %257, %260
  %265 = select i1 %264, i32 -1, i32 1
  br label %277

266:                                              ; preds = %254, %250
  %267 = getelementptr inbounds i8, i8* %237, i64 12
  %268 = bitcast i8* %267 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = getelementptr inbounds i8, i8* %240, i64 12
  %271 = bitcast i8* %270 to i32*
  %272 = load i32, i32* %271, align 4
  %273 = icmp ult i32 %269, %272
  %274 = icmp ugt i32 %269, %272
  %275 = zext i1 %274 to i32
  %276 = select i1 %273, i32 -1, i32 %275
  br label %277

277:                                              ; preds = %247, %263, %266
  %278 = phi i32 [ %249, %247 ], [ %265, %263 ], [ %276, %266 ]
  %279 = icmp sgt i32 %278, 0
  %280 = select i1 %279, i8* %237, i8* %240
  %281 = select i1 %279, i8* %240, i8* %237
  %282 = bitcast i8* %280 to i32*
  %283 = load i32, i32* %282, align 4
  %284 = bitcast i8* %241 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = icmp eq i32 %283, %285
  br i1 %286, label %289, label %287

287:                                              ; preds = %277
  %288 = icmp slt i32 %283, %285
  br i1 %288, label %350, label %312

289:                                              ; preds = %277
  %290 = getelementptr inbounds i8, i8* %280, i64 8
  %291 = load i8, i8* %290, align 4, !range !5
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %293, label %304

293:                                              ; preds = %289
  %294 = getelementptr inbounds i8, i8* %280, i64 4
  %295 = bitcast i8* %294 to i32*
  %296 = load i32, i32* %295, align 4
  %297 = getelementptr inbounds i8, i8* %241, i64 4
  %298 = bitcast i8* %297 to i32*
  %299 = load i32, i32* %298, align 4
  %300 = xor i32 %299, %296
  %301 = icmp ugt i32 %300, 1
  br i1 %301, label %302, label %304

302:                                              ; preds = %293
  %303 = icmp slt i32 %296, %299
  br i1 %303, label %350, label %312

304:                                              ; preds = %293, %289
  %305 = getelementptr inbounds i8, i8* %280, i64 12
  %306 = bitcast i8* %305 to i32*
  %307 = load i32, i32* %306, align 4
  %308 = getelementptr inbounds i8, i8* %241, i64 12
  %309 = bitcast i8* %308 to i32*
  %310 = load i32, i32* %309, align 4
  %311 = icmp ugt i32 %307, %310
  br i1 %311, label %312, label %350

312:                                              ; preds = %304, %302, %287
  %313 = bitcast i8* %281 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = icmp eq i32 %314, %285
  br i1 %315, label %319, label %316

316:                                              ; preds = %312
  %317 = icmp slt i32 %314, %285
  %318 = select i1 %317, i32 -1, i32 1
  br label %346

319:                                              ; preds = %312
  %320 = getelementptr inbounds i8, i8* %281, i64 8
  %321 = load i8, i8* %320, align 4, !range !5
  %322 = icmp eq i8 %321, 0
  br i1 %322, label %323, label %335

323:                                              ; preds = %319
  %324 = getelementptr inbounds i8, i8* %281, i64 4
  %325 = bitcast i8* %324 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = getelementptr inbounds i8, i8* %241, i64 4
  %328 = bitcast i8* %327 to i32*
  %329 = load i32, i32* %328, align 4
  %330 = xor i32 %329, %326
  %331 = icmp ugt i32 %330, 1
  br i1 %331, label %332, label %335

332:                                              ; preds = %323
  %333 = icmp slt i32 %326, %329
  %334 = select i1 %333, i32 -1, i32 1
  br label %346

335:                                              ; preds = %323, %319
  %336 = getelementptr inbounds i8, i8* %281, i64 12
  %337 = bitcast i8* %336 to i32*
  %338 = load i32, i32* %337, align 4
  %339 = getelementptr inbounds i8, i8* %241, i64 12
  %340 = bitcast i8* %339 to i32*
  %341 = load i32, i32* %340, align 4
  %342 = icmp ult i32 %338, %341
  %343 = icmp ugt i32 %338, %341
  %344 = zext i1 %343 to i32
  %345 = select i1 %342, i32 -1, i32 %344
  br label %346

346:                                              ; preds = %316, %332, %335
  %347 = phi i32 [ %318, %316 ], [ %334, %332 ], [ %345, %335 ]
  %348 = icmp sgt i32 %347, 0
  %349 = select i1 %348, i8* %281, i8* %241
  br label %350

350:                                              ; preds = %304, %302, %287, %346
  %351 = phi i8* [ %349, %346 ], [ %280, %287 ], [ %280, %302 ], [ %280, %304 ]
  %352 = ptrtoint i8* %351 to i64
  %353 = icmp eq i8* %351, %236
  br i1 %353, label %446, label %354

354:                                              ; preds = %350
  %355 = getelementptr inbounds i8, i8* %351, i64 %2
  br i1 %9, label %356, label %446

356:                                              ; preds = %354
  %357 = getelementptr i8, i8* %351, i64 1
  %358 = icmp ugt i8* %355, %357
  %359 = select i1 %358, i8* %355, i8* %357
  %360 = ptrtoint i8* %359 to i64
  %361 = sub i64 %360, %352
  %362 = icmp ult i64 %361, 32
  br i1 %362, label %435, label %363

363:                                              ; preds = %356
  %364 = and i64 %361, -32
  %365 = getelementptr i8, i8* %351, i64 %364
  %366 = getelementptr i8, i8* %236, i64 %364
  %367 = add i64 %364, -32
  %368 = lshr exact i64 %367, 5
  %369 = add nuw nsw i64 %368, 1
  %370 = and i64 %369, 1
  %371 = icmp eq i64 %367, 0
  br i1 %371, label %413, label %372

372:                                              ; preds = %363
  %373 = sub nuw nsw i64 %369, %370
  br label %374

374:                                              ; preds = %374, %372
  %375 = phi i64 [ 0, %372 ], [ %410, %374 ]
  %376 = phi i64 [ %373, %372 ], [ %411, %374 ]
  %377 = getelementptr i8, i8* %351, i64 %375
  %378 = getelementptr i8, i8* %236, i64 %375
  %379 = bitcast i8* %377 to <16 x i8>*
  %380 = load <16 x i8>, <16 x i8>* %379, align 1, !alias.scope !22, !noalias !25
  %381 = getelementptr i8, i8* %377, i64 16
  %382 = bitcast i8* %381 to <16 x i8>*
  %383 = load <16 x i8>, <16 x i8>* %382, align 1, !alias.scope !22, !noalias !25
  %384 = bitcast i8* %378 to <16 x i8>*
  %385 = load <16 x i8>, <16 x i8>* %384, align 1, !alias.scope !25, !noalias !22
  %386 = getelementptr i8, i8* %378, i64 16
  %387 = bitcast i8* %386 to <16 x i8>*
  %388 = load <16 x i8>, <16 x i8>* %387, align 1, !alias.scope !25, !noalias !22
  %389 = bitcast i8* %377 to <16 x i8>*
  store <16 x i8> %385, <16 x i8>* %389, align 1, !alias.scope !22, !noalias !25
  %390 = bitcast i8* %381 to <16 x i8>*
  store <16 x i8> %388, <16 x i8>* %390, align 1, !alias.scope !22, !noalias !25
  %391 = bitcast i8* %378 to <16 x i8>*
  store <16 x i8> %380, <16 x i8>* %391, align 1, !alias.scope !25, !noalias !22
  %392 = bitcast i8* %386 to <16 x i8>*
  store <16 x i8> %383, <16 x i8>* %392, align 1, !alias.scope !25, !noalias !22
  %393 = or i64 %375, 32
  %394 = getelementptr i8, i8* %351, i64 %393
  %395 = getelementptr i8, i8* %236, i64 %393
  %396 = bitcast i8* %394 to <16 x i8>*
  %397 = load <16 x i8>, <16 x i8>* %396, align 1, !alias.scope !22, !noalias !25
  %398 = getelementptr i8, i8* %394, i64 16
  %399 = bitcast i8* %398 to <16 x i8>*
  %400 = load <16 x i8>, <16 x i8>* %399, align 1, !alias.scope !22, !noalias !25
  %401 = bitcast i8* %395 to <16 x i8>*
  %402 = load <16 x i8>, <16 x i8>* %401, align 1, !alias.scope !25, !noalias !22
  %403 = getelementptr i8, i8* %395, i64 16
  %404 = bitcast i8* %403 to <16 x i8>*
  %405 = load <16 x i8>, <16 x i8>* %404, align 1, !alias.scope !25, !noalias !22
  %406 = bitcast i8* %394 to <16 x i8>*
  store <16 x i8> %402, <16 x i8>* %406, align 1, !alias.scope !22, !noalias !25
  %407 = bitcast i8* %398 to <16 x i8>*
  store <16 x i8> %405, <16 x i8>* %407, align 1, !alias.scope !22, !noalias !25
  %408 = bitcast i8* %395 to <16 x i8>*
  store <16 x i8> %397, <16 x i8>* %408, align 1, !alias.scope !25, !noalias !22
  %409 = bitcast i8* %403 to <16 x i8>*
  store <16 x i8> %400, <16 x i8>* %409, align 1, !alias.scope !25, !noalias !22
  %410 = add i64 %375, 64
  %411 = add i64 %376, -2
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %374, !llvm.loop !27

413:                                              ; preds = %374, %363
  %414 = phi i64 [ 0, %363 ], [ %410, %374 ]
  %415 = icmp eq i64 %370, 0
  br i1 %415, label %433, label %416

416:                                              ; preds = %413
  %417 = getelementptr i8, i8* %351, i64 %414
  %418 = getelementptr i8, i8* %236, i64 %414
  %419 = bitcast i8* %417 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !22, !noalias !25
  %421 = getelementptr i8, i8* %417, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !22, !noalias !25
  %424 = bitcast i8* %418 to <16 x i8>*
  %425 = load <16 x i8>, <16 x i8>* %424, align 1, !alias.scope !25, !noalias !22
  %426 = getelementptr i8, i8* %418, i64 16
  %427 = bitcast i8* %426 to <16 x i8>*
  %428 = load <16 x i8>, <16 x i8>* %427, align 1, !alias.scope !25, !noalias !22
  %429 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %425, <16 x i8>* %429, align 1, !alias.scope !22, !noalias !25
  %430 = bitcast i8* %421 to <16 x i8>*
  store <16 x i8> %428, <16 x i8>* %430, align 1, !alias.scope !22, !noalias !25
  %431 = bitcast i8* %418 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %431, align 1, !alias.scope !25, !noalias !22
  %432 = bitcast i8* %426 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %432, align 1, !alias.scope !25, !noalias !22
  br label %433

433:                                              ; preds = %413, %416
  %434 = icmp eq i64 %361, %364
  br i1 %434, label %446, label %435

435:                                              ; preds = %433, %356
  %436 = phi i8* [ %351, %356 ], [ %365, %433 ]
  %437 = phi i8* [ %236, %356 ], [ %366, %433 ]
  br label %438

438:                                              ; preds = %435, %438
  %439 = phi i8* [ %443, %438 ], [ %436, %435 ]
  %440 = phi i8* [ %444, %438 ], [ %437, %435 ]
  %441 = load i8, i8* %439, align 1, !alias.scope !22, !noalias !25
  %442 = load i8, i8* %440, align 1, !alias.scope !25, !noalias !22
  store i8 %442, i8* %439, align 1, !alias.scope !22, !noalias !25
  store i8 %441, i8* %440, align 1, !alias.scope !25, !noalias !22
  %443 = getelementptr inbounds i8, i8* %439, i64 1
  %444 = getelementptr inbounds i8, i8* %440, i64 1
  %445 = icmp ult i8* %443, %355
  br i1 %445, label %438, label %446, !llvm.loop !28

446:                                              ; preds = %438, %433, %354, %350
  %447 = icmp sgt i64 %235, 0
  br i1 %447, label %448, label %872

448:                                              ; preds = %446
  %449 = bitcast i8* %236 to i32*
  %450 = getelementptr inbounds i8, i8* %236, i64 4
  %451 = bitcast i8* %450 to i32*
  %452 = getelementptr inbounds i8, i8* %236, i64 12
  %453 = bitcast i8* %452 to i32*
  br label %454

454:                                              ; preds = %448, %867
  %455 = phi i8* [ %236, %448 ], [ %868, %867 ]
  %456 = phi i8* [ %236, %448 ], [ %870, %867 ]
  %457 = phi i8* [ %232, %448 ], [ %619, %867 ]
  %458 = phi i8* [ %232, %448 ], [ %869, %867 ]
  %459 = icmp ult i8* %458, %456
  br i1 %459, label %460, label %872

460:                                              ; preds = %454
  br i1 %9, label %463, label %461

461:                                              ; preds = %460
  %462 = load i32, i32* %449, align 4
  br label %581

463:                                              ; preds = %460, %577
  %464 = phi i8* [ %578, %577 ], [ %457, %460 ]
  %465 = phi i8* [ %579, %577 ], [ %458, %460 ]
  %466 = bitcast i8* %465 to i32*
  %467 = load i32, i32* %466, align 4
  %468 = load i32, i32* %449, align 4
  %469 = icmp eq i32 %467, %468
  %470 = trunc i32 %467 to i8
  br i1 %469, label %473, label %471

471:                                              ; preds = %463
  %472 = icmp slt i32 %467, %468
  br i1 %472, label %577, label %616

473:                                              ; preds = %463
  %474 = getelementptr inbounds i8, i8* %465, i64 8
  %475 = load i8, i8* %474, align 4, !range !5
  %476 = icmp eq i8 %475, 0
  br i1 %476, label %477, label %484

477:                                              ; preds = %473
  %478 = getelementptr inbounds i8, i8* %465, i64 4
  %479 = bitcast i8* %478 to i32*
  %480 = load i32, i32* %479, align 4
  %481 = load i32, i32* %451, align 4
  %482 = xor i32 %481, %480
  %483 = icmp ugt i32 %482, 1
  br i1 %483, label %575, label %484

484:                                              ; preds = %477, %473
  %485 = getelementptr inbounds i8, i8* %465, i64 12
  %486 = bitcast i8* %485 to i32*
  %487 = load i32, i32* %486, align 4
  %488 = load i32, i32* %453, align 4
  %489 = icmp ult i32 %487, %488
  br i1 %489, label %577, label %490

490:                                              ; preds = %484
  %491 = icmp ugt i32 %487, %488
  br i1 %491, label %616, label %492

492:                                              ; preds = %490
  %493 = icmp ult i8* %464, %465
  br i1 %493, label %494, label %573

494:                                              ; preds = %492
  %495 = getelementptr inbounds i8, i8* %464, i64 %2
  %496 = load i8, i8* %464, align 1, !alias.scope !29, !noalias !32
  store i8 %470, i8* %464, align 1, !alias.scope !29, !noalias !32
  store i8 %496, i8* %465, align 1, !alias.scope !32, !noalias !29
  %497 = getelementptr inbounds i8, i8* %464, i64 1
  %498 = getelementptr inbounds i8, i8* %465, i64 1
  br i1 %14, label %499, label %573

499:                                              ; preds = %494
  br i1 %15, label %562, label %500

500:                                              ; preds = %499
  %501 = getelementptr i8, i8* %498, i64 %16
  %502 = getelementptr i8, i8* %497, i64 %16
  br i1 %18, label %542, label %503

503:                                              ; preds = %500, %503
  %504 = phi i64 [ %539, %503 ], [ 0, %500 ]
  %505 = phi i64 [ %540, %503 ], [ %19, %500 ]
  %506 = getelementptr i8, i8* %498, i64 %504
  %507 = getelementptr i8, i8* %497, i64 %504
  %508 = bitcast i8* %506 to <16 x i8>*
  %509 = load <16 x i8>, <16 x i8>* %508, align 1, !alias.scope !32, !noalias !29
  %510 = getelementptr i8, i8* %506, i64 16
  %511 = bitcast i8* %510 to <16 x i8>*
  %512 = load <16 x i8>, <16 x i8>* %511, align 1, !alias.scope !32, !noalias !29
  %513 = bitcast i8* %507 to <16 x i8>*
  %514 = load <16 x i8>, <16 x i8>* %513, align 1, !alias.scope !29, !noalias !32
  %515 = getelementptr i8, i8* %507, i64 16
  %516 = bitcast i8* %515 to <16 x i8>*
  %517 = load <16 x i8>, <16 x i8>* %516, align 1, !alias.scope !29, !noalias !32
  %518 = bitcast i8* %507 to <16 x i8>*
  store <16 x i8> %509, <16 x i8>* %518, align 1, !alias.scope !29, !noalias !32
  %519 = bitcast i8* %515 to <16 x i8>*
  store <16 x i8> %512, <16 x i8>* %519, align 1, !alias.scope !29, !noalias !32
  %520 = bitcast i8* %506 to <16 x i8>*
  store <16 x i8> %514, <16 x i8>* %520, align 1, !alias.scope !32, !noalias !29
  %521 = bitcast i8* %510 to <16 x i8>*
  store <16 x i8> %517, <16 x i8>* %521, align 1, !alias.scope !32, !noalias !29
  %522 = or i64 %504, 32
  %523 = getelementptr i8, i8* %498, i64 %522
  %524 = getelementptr i8, i8* %497, i64 %522
  %525 = bitcast i8* %523 to <16 x i8>*
  %526 = load <16 x i8>, <16 x i8>* %525, align 1, !alias.scope !32, !noalias !29
  %527 = getelementptr i8, i8* %523, i64 16
  %528 = bitcast i8* %527 to <16 x i8>*
  %529 = load <16 x i8>, <16 x i8>* %528, align 1, !alias.scope !32, !noalias !29
  %530 = bitcast i8* %524 to <16 x i8>*
  %531 = load <16 x i8>, <16 x i8>* %530, align 1, !alias.scope !29, !noalias !32
  %532 = getelementptr i8, i8* %524, i64 16
  %533 = bitcast i8* %532 to <16 x i8>*
  %534 = load <16 x i8>, <16 x i8>* %533, align 1, !alias.scope !29, !noalias !32
  %535 = bitcast i8* %524 to <16 x i8>*
  store <16 x i8> %526, <16 x i8>* %535, align 1, !alias.scope !29, !noalias !32
  %536 = bitcast i8* %532 to <16 x i8>*
  store <16 x i8> %529, <16 x i8>* %536, align 1, !alias.scope !29, !noalias !32
  %537 = bitcast i8* %523 to <16 x i8>*
  store <16 x i8> %531, <16 x i8>* %537, align 1, !alias.scope !32, !noalias !29
  %538 = bitcast i8* %527 to <16 x i8>*
  store <16 x i8> %534, <16 x i8>* %538, align 1, !alias.scope !32, !noalias !29
  %539 = add i64 %504, 64
  %540 = add i64 %505, -2
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %542, label %503, !llvm.loop !34

542:                                              ; preds = %503, %500
  %543 = phi i64 [ 0, %500 ], [ %539, %503 ]
  br i1 %20, label %561, label %544

544:                                              ; preds = %542
  %545 = getelementptr i8, i8* %498, i64 %543
  %546 = getelementptr i8, i8* %497, i64 %543
  %547 = bitcast i8* %545 to <16 x i8>*
  %548 = load <16 x i8>, <16 x i8>* %547, align 1, !alias.scope !32, !noalias !29
  %549 = getelementptr i8, i8* %545, i64 16
  %550 = bitcast i8* %549 to <16 x i8>*
  %551 = load <16 x i8>, <16 x i8>* %550, align 1, !alias.scope !32, !noalias !29
  %552 = bitcast i8* %546 to <16 x i8>*
  %553 = load <16 x i8>, <16 x i8>* %552, align 1, !alias.scope !29, !noalias !32
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  %556 = load <16 x i8>, <16 x i8>* %555, align 1, !alias.scope !29, !noalias !32
  %557 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %548, <16 x i8>* %557, align 1, !alias.scope !29, !noalias !32
  %558 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %551, <16 x i8>* %558, align 1, !alias.scope !29, !noalias !32
  %559 = bitcast i8* %545 to <16 x i8>*
  store <16 x i8> %553, <16 x i8>* %559, align 1, !alias.scope !32, !noalias !29
  %560 = bitcast i8* %549 to <16 x i8>*
  store <16 x i8> %556, <16 x i8>* %560, align 1, !alias.scope !32, !noalias !29
  br label %561

561:                                              ; preds = %542, %544
  br i1 %21, label %573, label %562

562:                                              ; preds = %561, %499
  %563 = phi i8* [ %498, %499 ], [ %501, %561 ]
  %564 = phi i8* [ %497, %499 ], [ %502, %561 ]
  br label %565

565:                                              ; preds = %562, %565
  %566 = phi i8* [ %571, %565 ], [ %563, %562 ]
  %567 = phi i8* [ %570, %565 ], [ %564, %562 ]
  %568 = load i8, i8* %566, align 1, !alias.scope !32, !noalias !29
  %569 = load i8, i8* %567, align 1, !alias.scope !29, !noalias !32
  store i8 %568, i8* %567, align 1, !alias.scope !29, !noalias !32
  store i8 %569, i8* %566, align 1, !alias.scope !32, !noalias !29
  %570 = getelementptr inbounds i8, i8* %567, i64 1
  %571 = getelementptr inbounds i8, i8* %566, i64 1
  %572 = icmp ult i8* %570, %495
  br i1 %572, label %565, label %573, !llvm.loop !35

573:                                              ; preds = %565, %494, %561, %492
  %574 = getelementptr inbounds i8, i8* %464, i64 %2
  br label %577

575:                                              ; preds = %477
  %576 = icmp slt i32 %480, %481
  br i1 %576, label %577, label %616

577:                                              ; preds = %575, %573, %484, %471
  %578 = phi i8* [ %574, %573 ], [ %464, %471 ], [ %464, %575 ], [ %464, %484 ]
  %579 = getelementptr inbounds i8, i8* %465, i64 %2
  %580 = icmp ult i8* %579, %456
  br i1 %580, label %463, label %872

581:                                              ; preds = %461, %612
  %582 = phi i8* [ %613, %612 ], [ %457, %461 ]
  %583 = phi i8* [ %614, %612 ], [ %458, %461 ]
  %584 = bitcast i8* %583 to i32*
  %585 = load i32, i32* %584, align 4
  %586 = icmp eq i32 %585, %462
  br i1 %586, label %589, label %587

587:                                              ; preds = %581
  %588 = icmp slt i32 %585, %462
  br i1 %588, label %612, label %616

589:                                              ; preds = %581
  %590 = getelementptr inbounds i8, i8* %583, i64 8
  %591 = load i8, i8* %590, align 4, !range !5
  %592 = icmp eq i8 %591, 0
  br i1 %592, label %593, label %602

593:                                              ; preds = %589
  %594 = getelementptr inbounds i8, i8* %583, i64 4
  %595 = bitcast i8* %594 to i32*
  %596 = load i32, i32* %595, align 4
  %597 = load i32, i32* %451, align 4
  %598 = xor i32 %597, %596
  %599 = icmp ugt i32 %598, 1
  br i1 %599, label %600, label %602

600:                                              ; preds = %593
  %601 = icmp slt i32 %596, %597
  br i1 %601, label %612, label %616

602:                                              ; preds = %593, %589
  %603 = getelementptr inbounds i8, i8* %583, i64 12
  %604 = bitcast i8* %603 to i32*
  %605 = load i32, i32* %604, align 4
  %606 = load i32, i32* %453, align 4
  %607 = icmp ult i32 %605, %606
  br i1 %607, label %612, label %608

608:                                              ; preds = %602
  %609 = icmp ugt i32 %605, %606
  br i1 %609, label %616, label %610

610:                                              ; preds = %608
  %611 = getelementptr inbounds i8, i8* %582, i64 %2
  br label %612

612:                                              ; preds = %602, %600, %587, %610
  %613 = phi i8* [ %611, %610 ], [ %582, %587 ], [ %582, %600 ], [ %582, %602 ]
  %614 = getelementptr inbounds i8, i8* %583, i64 %2
  %615 = icmp ult i8* %614, %456
  br i1 %615, label %581, label %872

616:                                              ; preds = %600, %587, %608, %471, %490, %575
  %617 = phi i32 [ %468, %575 ], [ %468, %490 ], [ %468, %471 ], [ %462, %608 ], [ %462, %587 ], [ %462, %600 ]
  %618 = phi i8* [ %465, %575 ], [ %465, %490 ], [ %465, %471 ], [ %583, %608 ], [ %583, %587 ], [ %583, %600 ]
  %619 = phi i8* [ %464, %575 ], [ %464, %490 ], [ %464, %471 ], [ %582, %608 ], [ %582, %587 ], [ %582, %600 ]
  %620 = icmp ult i8* %618, %456
  br i1 %620, label %621, label %867

621:                                              ; preds = %616
  br i1 %9, label %622, label %744

622:                                              ; preds = %621, %742
  %623 = phi i32 [ %743, %742 ], [ %617, %621 ]
  %624 = phi i8* [ %740, %742 ], [ %455, %621 ]
  %625 = phi i8* [ %626, %742 ], [ %456, %621 ]
  %626 = getelementptr inbounds i8, i8* %625, i64 %8
  %627 = bitcast i8* %626 to i32*
  %628 = load i32, i32* %627, align 4
  %629 = icmp eq i32 %628, %623
  %630 = trunc i32 %628 to i8
  br i1 %629, label %633, label %631

631:                                              ; preds = %622
  %632 = icmp slt i32 %628, %623
  br i1 %632, label %776, label %739

633:                                              ; preds = %622
  %634 = getelementptr inbounds i8, i8* %626, i64 8
  %635 = load i8, i8* %634, align 4, !range !5
  %636 = icmp eq i8 %635, 0
  br i1 %636, label %637, label %644

637:                                              ; preds = %633
  %638 = getelementptr inbounds i8, i8* %626, i64 4
  %639 = bitcast i8* %638 to i32*
  %640 = load i32, i32* %639, align 4
  %641 = load i32, i32* %451, align 4
  %642 = xor i32 %641, %640
  %643 = icmp ugt i32 %642, 1
  br i1 %643, label %737, label %644

644:                                              ; preds = %637, %633
  %645 = getelementptr inbounds i8, i8* %626, i64 12
  %646 = bitcast i8* %645 to i32*
  %647 = load i32, i32* %646, align 4
  %648 = load i32, i32* %453, align 4
  %649 = icmp ult i32 %647, %648
  br i1 %649, label %776, label %650

650:                                              ; preds = %644
  %651 = icmp ugt i32 %647, %648
  br i1 %651, label %739, label %652

652:                                              ; preds = %650
  %653 = getelementptr inbounds i8, i8* %624, i64 %8
  %654 = icmp ult i8* %625, %624
  br i1 %654, label %655, label %739

655:                                              ; preds = %652
  %656 = load i8, i8* %653, align 1, !alias.scope !36, !noalias !39
  store i8 %656, i8* %626, align 1, !alias.scope !39, !noalias !36
  store i8 %630, i8* %653, align 1, !alias.scope !36, !noalias !39
  %657 = getelementptr inbounds i8, i8* %626, i64 1
  %658 = icmp ult i8* %657, %625
  br i1 %658, label %659, label %739

659:                                              ; preds = %655
  br i1 %22, label %726, label %660

660:                                              ; preds = %659
  %661 = getelementptr i8, i8* %657, i64 %23
  %662 = getelementptr i8, i8* %653, i64 %23
  br i1 %25, label %705, label %663

663:                                              ; preds = %660
  %664 = getelementptr i8, i8* %653, i64 1
  %665 = getelementptr i8, i8* %653, i64 1
  br label %666

666:                                              ; preds = %666, %663
  %667 = phi i64 [ 0, %663 ], [ %702, %666 ]
  %668 = phi i64 [ %26, %663 ], [ %703, %666 ]
  %669 = getelementptr i8, i8* %657, i64 %667
  %670 = getelementptr inbounds i8, i8* %664, i64 %667
  %671 = bitcast i8* %669 to <16 x i8>*
  %672 = load <16 x i8>, <16 x i8>* %671, align 1, !alias.scope !39, !noalias !36
  %673 = getelementptr i8, i8* %669, i64 16
  %674 = bitcast i8* %673 to <16 x i8>*
  %675 = load <16 x i8>, <16 x i8>* %674, align 1, !alias.scope !39, !noalias !36
  %676 = bitcast i8* %670 to <16 x i8>*
  %677 = load <16 x i8>, <16 x i8>* %676, align 1, !alias.scope !36, !noalias !39
  %678 = getelementptr inbounds i8, i8* %670, i64 16
  %679 = bitcast i8* %678 to <16 x i8>*
  %680 = load <16 x i8>, <16 x i8>* %679, align 1, !alias.scope !36, !noalias !39
  %681 = bitcast i8* %669 to <16 x i8>*
  store <16 x i8> %677, <16 x i8>* %681, align 1, !alias.scope !39, !noalias !36
  %682 = bitcast i8* %673 to <16 x i8>*
  store <16 x i8> %680, <16 x i8>* %682, align 1, !alias.scope !39, !noalias !36
  %683 = bitcast i8* %670 to <16 x i8>*
  store <16 x i8> %672, <16 x i8>* %683, align 1, !alias.scope !36, !noalias !39
  %684 = bitcast i8* %678 to <16 x i8>*
  store <16 x i8> %675, <16 x i8>* %684, align 1, !alias.scope !36, !noalias !39
  %685 = or i64 %667, 32
  %686 = getelementptr i8, i8* %657, i64 %685
  %687 = getelementptr inbounds i8, i8* %665, i64 %685
  %688 = bitcast i8* %686 to <16 x i8>*
  %689 = load <16 x i8>, <16 x i8>* %688, align 1, !alias.scope !39, !noalias !36
  %690 = getelementptr i8, i8* %686, i64 16
  %691 = bitcast i8* %690 to <16 x i8>*
  %692 = load <16 x i8>, <16 x i8>* %691, align 1, !alias.scope !39, !noalias !36
  %693 = bitcast i8* %687 to <16 x i8>*
  %694 = load <16 x i8>, <16 x i8>* %693, align 1, !alias.scope !36, !noalias !39
  %695 = getelementptr inbounds i8, i8* %687, i64 16
  %696 = bitcast i8* %695 to <16 x i8>*
  %697 = load <16 x i8>, <16 x i8>* %696, align 1, !alias.scope !36, !noalias !39
  %698 = bitcast i8* %686 to <16 x i8>*
  store <16 x i8> %694, <16 x i8>* %698, align 1, !alias.scope !39, !noalias !36
  %699 = bitcast i8* %690 to <16 x i8>*
  store <16 x i8> %697, <16 x i8>* %699, align 1, !alias.scope !39, !noalias !36
  %700 = bitcast i8* %687 to <16 x i8>*
  store <16 x i8> %689, <16 x i8>* %700, align 1, !alias.scope !36, !noalias !39
  %701 = bitcast i8* %695 to <16 x i8>*
  store <16 x i8> %692, <16 x i8>* %701, align 1, !alias.scope !36, !noalias !39
  %702 = add i64 %667, 64
  %703 = add i64 %668, -2
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %705, label %666, !llvm.loop !41

705:                                              ; preds = %666, %660
  %706 = phi i64 [ 0, %660 ], [ %702, %666 ]
  br i1 %27, label %725, label %707

707:                                              ; preds = %705
  %708 = getelementptr i8, i8* %657, i64 %706
  %709 = getelementptr i8, i8* %653, i64 1
  %710 = getelementptr inbounds i8, i8* %709, i64 %706
  %711 = bitcast i8* %708 to <16 x i8>*
  %712 = load <16 x i8>, <16 x i8>* %711, align 1, !alias.scope !39, !noalias !36
  %713 = getelementptr i8, i8* %708, i64 16
  %714 = bitcast i8* %713 to <16 x i8>*
  %715 = load <16 x i8>, <16 x i8>* %714, align 1, !alias.scope !39, !noalias !36
  %716 = bitcast i8* %710 to <16 x i8>*
  %717 = load <16 x i8>, <16 x i8>* %716, align 1, !alias.scope !36, !noalias !39
  %718 = getelementptr inbounds i8, i8* %710, i64 16
  %719 = bitcast i8* %718 to <16 x i8>*
  %720 = load <16 x i8>, <16 x i8>* %719, align 1, !alias.scope !36, !noalias !39
  %721 = bitcast i8* %708 to <16 x i8>*
  store <16 x i8> %717, <16 x i8>* %721, align 1, !alias.scope !39, !noalias !36
  %722 = bitcast i8* %713 to <16 x i8>*
  store <16 x i8> %720, <16 x i8>* %722, align 1, !alias.scope !39, !noalias !36
  %723 = bitcast i8* %710 to <16 x i8>*
  store <16 x i8> %712, <16 x i8>* %723, align 1, !alias.scope !36, !noalias !39
  %724 = bitcast i8* %718 to <16 x i8>*
  store <16 x i8> %715, <16 x i8>* %724, align 1, !alias.scope !36, !noalias !39
  br label %725

725:                                              ; preds = %705, %707
  br i1 %28, label %739, label %726

726:                                              ; preds = %725, %659
  %727 = phi i8* [ %657, %659 ], [ %661, %725 ]
  %728 = phi i8* [ %653, %659 ], [ %662, %725 ]
  br label %729

729:                                              ; preds = %726, %729
  %730 = phi i8* [ %735, %729 ], [ %727, %726 ]
  %731 = phi i8* [ %732, %729 ], [ %728, %726 ]
  %732 = getelementptr inbounds i8, i8* %731, i64 1
  %733 = load i8, i8* %730, align 1, !alias.scope !39, !noalias !36
  %734 = load i8, i8* %732, align 1, !alias.scope !36, !noalias !39
  store i8 %734, i8* %730, align 1, !alias.scope !39, !noalias !36
  store i8 %733, i8* %732, align 1, !alias.scope !36, !noalias !39
  %735 = getelementptr inbounds i8, i8* %730, i64 1
  %736 = icmp ult i8* %735, %625
  br i1 %736, label %729, label %739, !llvm.loop !42

737:                                              ; preds = %637
  %738 = icmp slt i32 %640, %641
  br i1 %738, label %776, label %739

739:                                              ; preds = %729, %655, %725, %737, %652, %650, %631
  %740 = phi i8* [ %653, %652 ], [ %624, %631 ], [ %624, %737 ], [ %624, %650 ], [ %653, %725 ], [ %653, %655 ], [ %653, %729 ]
  %741 = icmp ult i8* %618, %626
  br i1 %741, label %742, label %867

742:                                              ; preds = %739
  %743 = load i32, i32* %449, align 4
  br label %622

744:                                              ; preds = %621, %864
  %745 = phi i8* [ %865, %864 ], [ %455, %621 ]
  %746 = phi i8* [ %747, %864 ], [ %456, %621 ]
  %747 = getelementptr inbounds i8, i8* %746, i64 %8
  %748 = bitcast i8* %747 to i32*
  %749 = load i32, i32* %748, align 4
  %750 = icmp eq i32 %749, %617
  br i1 %750, label %753, label %751

751:                                              ; preds = %744
  %752 = icmp slt i32 %749, %617
  br i1 %752, label %776, label %864

753:                                              ; preds = %744
  %754 = getelementptr inbounds i8, i8* %747, i64 8
  %755 = load i8, i8* %754, align 4, !range !5
  %756 = icmp eq i8 %755, 0
  br i1 %756, label %757, label %766

757:                                              ; preds = %753
  %758 = getelementptr inbounds i8, i8* %747, i64 4
  %759 = bitcast i8* %758 to i32*
  %760 = load i32, i32* %759, align 4
  %761 = load i32, i32* %451, align 4
  %762 = xor i32 %761, %760
  %763 = icmp ugt i32 %762, 1
  br i1 %763, label %764, label %766

764:                                              ; preds = %757
  %765 = icmp slt i32 %760, %761
  br i1 %765, label %776, label %864

766:                                              ; preds = %757, %753
  %767 = getelementptr inbounds i8, i8* %747, i64 12
  %768 = bitcast i8* %767 to i32*
  %769 = load i32, i32* %768, align 4
  %770 = load i32, i32* %453, align 4
  %771 = icmp ult i32 %769, %770
  br i1 %771, label %776, label %772

772:                                              ; preds = %766
  %773 = icmp ugt i32 %769, %770
  %774 = getelementptr inbounds i8, i8* %745, i64 %8
  %775 = select i1 %773, i8* %745, i8* %774
  br label %864

776:                                              ; preds = %751, %764, %766, %631, %644, %737
  %777 = phi i32 [ %628, %737 ], [ %628, %644 ], [ %628, %631 ], [ %749, %766 ], [ %749, %764 ], [ %749, %751 ]
  %778 = phi i8* [ %626, %737 ], [ %626, %644 ], [ %626, %631 ], [ %747, %766 ], [ %747, %764 ], [ %747, %751 ]
  %779 = phi i8* [ %624, %737 ], [ %624, %644 ], [ %624, %631 ], [ %745, %766 ], [ %745, %764 ], [ %745, %751 ]
  %780 = icmp ult i8* %618, %778
  br i1 %780, label %781, label %862

781:                                              ; preds = %776
  %782 = getelementptr inbounds i8, i8* %618, i64 %2
  br i1 %9, label %783, label %862

783:                                              ; preds = %781
  %784 = trunc i32 %777 to i8
  %785 = load i8, i8* %618, align 1, !alias.scope !43, !noalias !46
  store i8 %784, i8* %618, align 1, !alias.scope !43, !noalias !46
  store i8 %785, i8* %778, align 1, !alias.scope !46, !noalias !43
  %786 = getelementptr inbounds i8, i8* %618, i64 1
  %787 = getelementptr inbounds i8, i8* %778, i64 1
  br i1 %29, label %862, label %788

788:                                              ; preds = %783
  br i1 %30, label %851, label %789

789:                                              ; preds = %788
  %790 = getelementptr i8, i8* %787, i64 %31
  %791 = getelementptr i8, i8* %786, i64 %31
  br i1 %33, label %831, label %792

792:                                              ; preds = %789, %792
  %793 = phi i64 [ %828, %792 ], [ 0, %789 ]
  %794 = phi i64 [ %829, %792 ], [ %34, %789 ]
  %795 = getelementptr i8, i8* %787, i64 %793
  %796 = getelementptr i8, i8* %786, i64 %793
  %797 = bitcast i8* %795 to <16 x i8>*
  %798 = load <16 x i8>, <16 x i8>* %797, align 1, !alias.scope !46, !noalias !43
  %799 = getelementptr i8, i8* %795, i64 16
  %800 = bitcast i8* %799 to <16 x i8>*
  %801 = load <16 x i8>, <16 x i8>* %800, align 1, !alias.scope !46, !noalias !43
  %802 = bitcast i8* %796 to <16 x i8>*
  %803 = load <16 x i8>, <16 x i8>* %802, align 1, !alias.scope !43, !noalias !46
  %804 = getelementptr i8, i8* %796, i64 16
  %805 = bitcast i8* %804 to <16 x i8>*
  %806 = load <16 x i8>, <16 x i8>* %805, align 1, !alias.scope !43, !noalias !46
  %807 = bitcast i8* %796 to <16 x i8>*
  store <16 x i8> %798, <16 x i8>* %807, align 1, !alias.scope !43, !noalias !46
  %808 = bitcast i8* %804 to <16 x i8>*
  store <16 x i8> %801, <16 x i8>* %808, align 1, !alias.scope !43, !noalias !46
  %809 = bitcast i8* %795 to <16 x i8>*
  store <16 x i8> %803, <16 x i8>* %809, align 1, !alias.scope !46, !noalias !43
  %810 = bitcast i8* %799 to <16 x i8>*
  store <16 x i8> %806, <16 x i8>* %810, align 1, !alias.scope !46, !noalias !43
  %811 = or i64 %793, 32
  %812 = getelementptr i8, i8* %787, i64 %811
  %813 = getelementptr i8, i8* %786, i64 %811
  %814 = bitcast i8* %812 to <16 x i8>*
  %815 = load <16 x i8>, <16 x i8>* %814, align 1, !alias.scope !46, !noalias !43
  %816 = getelementptr i8, i8* %812, i64 16
  %817 = bitcast i8* %816 to <16 x i8>*
  %818 = load <16 x i8>, <16 x i8>* %817, align 1, !alias.scope !46, !noalias !43
  %819 = bitcast i8* %813 to <16 x i8>*
  %820 = load <16 x i8>, <16 x i8>* %819, align 1, !alias.scope !43, !noalias !46
  %821 = getelementptr i8, i8* %813, i64 16
  %822 = bitcast i8* %821 to <16 x i8>*
  %823 = load <16 x i8>, <16 x i8>* %822, align 1, !alias.scope !43, !noalias !46
  %824 = bitcast i8* %813 to <16 x i8>*
  store <16 x i8> %815, <16 x i8>* %824, align 1, !alias.scope !43, !noalias !46
  %825 = bitcast i8* %821 to <16 x i8>*
  store <16 x i8> %818, <16 x i8>* %825, align 1, !alias.scope !43, !noalias !46
  %826 = bitcast i8* %812 to <16 x i8>*
  store <16 x i8> %820, <16 x i8>* %826, align 1, !alias.scope !46, !noalias !43
  %827 = bitcast i8* %816 to <16 x i8>*
  store <16 x i8> %823, <16 x i8>* %827, align 1, !alias.scope !46, !noalias !43
  %828 = add i64 %793, 64
  %829 = add i64 %794, -2
  %830 = icmp eq i64 %829, 0
  br i1 %830, label %831, label %792, !llvm.loop !48

831:                                              ; preds = %792, %789
  %832 = phi i64 [ 0, %789 ], [ %828, %792 ]
  br i1 %35, label %850, label %833

833:                                              ; preds = %831
  %834 = getelementptr i8, i8* %787, i64 %832
  %835 = getelementptr i8, i8* %786, i64 %832
  %836 = bitcast i8* %834 to <16 x i8>*
  %837 = load <16 x i8>, <16 x i8>* %836, align 1, !alias.scope !46, !noalias !43
  %838 = getelementptr i8, i8* %834, i64 16
  %839 = bitcast i8* %838 to <16 x i8>*
  %840 = load <16 x i8>, <16 x i8>* %839, align 1, !alias.scope !46, !noalias !43
  %841 = bitcast i8* %835 to <16 x i8>*
  %842 = load <16 x i8>, <16 x i8>* %841, align 1, !alias.scope !43, !noalias !46
  %843 = getelementptr i8, i8* %835, i64 16
  %844 = bitcast i8* %843 to <16 x i8>*
  %845 = load <16 x i8>, <16 x i8>* %844, align 1, !alias.scope !43, !noalias !46
  %846 = bitcast i8* %835 to <16 x i8>*
  store <16 x i8> %837, <16 x i8>* %846, align 1, !alias.scope !43, !noalias !46
  %847 = bitcast i8* %843 to <16 x i8>*
  store <16 x i8> %840, <16 x i8>* %847, align 1, !alias.scope !43, !noalias !46
  %848 = bitcast i8* %834 to <16 x i8>*
  store <16 x i8> %842, <16 x i8>* %848, align 1, !alias.scope !46, !noalias !43
  %849 = bitcast i8* %838 to <16 x i8>*
  store <16 x i8> %845, <16 x i8>* %849, align 1, !alias.scope !46, !noalias !43
  br label %850

850:                                              ; preds = %831, %833
  br i1 %36, label %862, label %851

851:                                              ; preds = %850, %788
  %852 = phi i8* [ %787, %788 ], [ %790, %850 ]
  %853 = phi i8* [ %786, %788 ], [ %791, %850 ]
  br label %854

854:                                              ; preds = %851, %854
  %855 = phi i8* [ %860, %854 ], [ %852, %851 ]
  %856 = phi i8* [ %859, %854 ], [ %853, %851 ]
  %857 = load i8, i8* %855, align 1, !alias.scope !46, !noalias !43
  %858 = load i8, i8* %856, align 1, !alias.scope !43, !noalias !46
  store i8 %857, i8* %856, align 1, !alias.scope !43, !noalias !46
  store i8 %858, i8* %855, align 1, !alias.scope !46, !noalias !43
  %859 = getelementptr inbounds i8, i8* %856, i64 1
  %860 = getelementptr inbounds i8, i8* %855, i64 1
  %861 = icmp ult i8* %859, %782
  br i1 %861, label %854, label %862, !llvm.loop !49

862:                                              ; preds = %854, %783, %850, %781, %776
  %863 = getelementptr inbounds i8, i8* %618, i64 %2
  br label %867

864:                                              ; preds = %772, %764, %751
  %865 = phi i8* [ %745, %751 ], [ %745, %764 ], [ %775, %772 ]
  %866 = icmp ult i8* %618, %747
  br i1 %866, label %744, label %867

867:                                              ; preds = %864, %739, %616, %862
  %868 = phi i8* [ %779, %862 ], [ %455, %616 ], [ %740, %739 ], [ %865, %864 ]
  %869 = phi i8* [ %863, %862 ], [ %618, %616 ], [ %618, %739 ], [ %618, %864 ]
  %870 = phi i8* [ %778, %862 ], [ %456, %616 ], [ %626, %739 ], [ %747, %864 ]
  %871 = icmp ult i8* %869, %870
  br i1 %871, label %454, label %872

872:                                              ; preds = %867, %454, %612, %577, %446
  %873 = phi i8* [ %236, %446 ], [ %456, %577 ], [ %456, %612 ], [ %456, %454 ], [ %870, %867 ]
  %874 = phi i8* [ %236, %446 ], [ %455, %577 ], [ %455, %612 ], [ %455, %454 ], [ %868, %867 ]
  %875 = phi i8* [ %232, %446 ], [ %578, %577 ], [ %613, %612 ], [ %457, %454 ], [ %619, %867 ]
  %876 = ptrtoint i8* %873 to i64
  %877 = ptrtoint i8* %875 to i64
  %878 = sub i64 %877, %233
  %879 = sub i64 %876, %877
  %880 = icmp ne i64 %878, 0
  %881 = icmp ne i64 %879, 0
  %882 = and i1 %880, %881
  br i1 %882, label %883, label %1071

883:                                              ; preds = %872
  %884 = icmp ugt i64 %878, %879
  br i1 %884, label %885, label %978

885:                                              ; preds = %883
  %886 = getelementptr inbounds i8, i8* %232, i64 %879
  %887 = icmp sgt i64 %879, 0
  br i1 %887, label %888, label %1071

888:                                              ; preds = %885
  %889 = getelementptr i8, i8* %232, i64 1
  %890 = icmp ugt i8* %886, %889
  %891 = select i1 %890, i8* %886, i8* %889
  %892 = ptrtoint i8* %891 to i64
  %893 = sub i64 %892, %233
  %894 = icmp ult i64 %893, 32
  br i1 %894, label %967, label %895

895:                                              ; preds = %888
  %896 = and i64 %893, -32
  %897 = getelementptr i8, i8* %232, i64 %896
  %898 = getelementptr i8, i8* %875, i64 %896
  %899 = add i64 %896, -32
  %900 = lshr exact i64 %899, 5
  %901 = add nuw nsw i64 %900, 1
  %902 = and i64 %901, 1
  %903 = icmp eq i64 %899, 0
  br i1 %903, label %945, label %904

904:                                              ; preds = %895
  %905 = sub nuw nsw i64 %901, %902
  br label %906

906:                                              ; preds = %906, %904
  %907 = phi i64 [ 0, %904 ], [ %942, %906 ]
  %908 = phi i64 [ %905, %904 ], [ %943, %906 ]
  %909 = getelementptr i8, i8* %232, i64 %907
  %910 = getelementptr i8, i8* %875, i64 %907
  %911 = bitcast i8* %909 to <16 x i8>*
  %912 = load <16 x i8>, <16 x i8>* %911, align 1, !alias.scope !50, !noalias !53
  %913 = getelementptr i8, i8* %909, i64 16
  %914 = bitcast i8* %913 to <16 x i8>*
  %915 = load <16 x i8>, <16 x i8>* %914, align 1, !alias.scope !50, !noalias !53
  %916 = bitcast i8* %910 to <16 x i8>*
  %917 = load <16 x i8>, <16 x i8>* %916, align 1, !alias.scope !53, !noalias !50
  %918 = getelementptr i8, i8* %910, i64 16
  %919 = bitcast i8* %918 to <16 x i8>*
  %920 = load <16 x i8>, <16 x i8>* %919, align 1, !alias.scope !53, !noalias !50
  %921 = bitcast i8* %909 to <16 x i8>*
  store <16 x i8> %917, <16 x i8>* %921, align 1, !alias.scope !50, !noalias !53
  %922 = bitcast i8* %913 to <16 x i8>*
  store <16 x i8> %920, <16 x i8>* %922, align 1, !alias.scope !50, !noalias !53
  %923 = bitcast i8* %910 to <16 x i8>*
  store <16 x i8> %912, <16 x i8>* %923, align 1, !alias.scope !53, !noalias !50
  %924 = bitcast i8* %918 to <16 x i8>*
  store <16 x i8> %915, <16 x i8>* %924, align 1, !alias.scope !53, !noalias !50
  %925 = or i64 %907, 32
  %926 = getelementptr i8, i8* %232, i64 %925
  %927 = getelementptr i8, i8* %875, i64 %925
  %928 = bitcast i8* %926 to <16 x i8>*
  %929 = load <16 x i8>, <16 x i8>* %928, align 1, !alias.scope !50, !noalias !53
  %930 = getelementptr i8, i8* %926, i64 16
  %931 = bitcast i8* %930 to <16 x i8>*
  %932 = load <16 x i8>, <16 x i8>* %931, align 1, !alias.scope !50, !noalias !53
  %933 = bitcast i8* %927 to <16 x i8>*
  %934 = load <16 x i8>, <16 x i8>* %933, align 1, !alias.scope !53, !noalias !50
  %935 = getelementptr i8, i8* %927, i64 16
  %936 = bitcast i8* %935 to <16 x i8>*
  %937 = load <16 x i8>, <16 x i8>* %936, align 1, !alias.scope !53, !noalias !50
  %938 = bitcast i8* %926 to <16 x i8>*
  store <16 x i8> %934, <16 x i8>* %938, align 1, !alias.scope !50, !noalias !53
  %939 = bitcast i8* %930 to <16 x i8>*
  store <16 x i8> %937, <16 x i8>* %939, align 1, !alias.scope !50, !noalias !53
  %940 = bitcast i8* %927 to <16 x i8>*
  store <16 x i8> %929, <16 x i8>* %940, align 1, !alias.scope !53, !noalias !50
  %941 = bitcast i8* %935 to <16 x i8>*
  store <16 x i8> %932, <16 x i8>* %941, align 1, !alias.scope !53, !noalias !50
  %942 = add i64 %907, 64
  %943 = add i64 %908, -2
  %944 = icmp eq i64 %943, 0
  br i1 %944, label %945, label %906, !llvm.loop !55

945:                                              ; preds = %906, %895
  %946 = phi i64 [ 0, %895 ], [ %942, %906 ]
  %947 = icmp eq i64 %902, 0
  br i1 %947, label %965, label %948

948:                                              ; preds = %945
  %949 = getelementptr i8, i8* %232, i64 %946
  %950 = getelementptr i8, i8* %875, i64 %946
  %951 = bitcast i8* %949 to <16 x i8>*
  %952 = load <16 x i8>, <16 x i8>* %951, align 1, !alias.scope !50, !noalias !53
  %953 = getelementptr i8, i8* %949, i64 16
  %954 = bitcast i8* %953 to <16 x i8>*
  %955 = load <16 x i8>, <16 x i8>* %954, align 1, !alias.scope !50, !noalias !53
  %956 = bitcast i8* %950 to <16 x i8>*
  %957 = load <16 x i8>, <16 x i8>* %956, align 1, !alias.scope !53, !noalias !50
  %958 = getelementptr i8, i8* %950, i64 16
  %959 = bitcast i8* %958 to <16 x i8>*
  %960 = load <16 x i8>, <16 x i8>* %959, align 1, !alias.scope !53, !noalias !50
  %961 = bitcast i8* %949 to <16 x i8>*
  store <16 x i8> %957, <16 x i8>* %961, align 1, !alias.scope !50, !noalias !53
  %962 = bitcast i8* %953 to <16 x i8>*
  store <16 x i8> %960, <16 x i8>* %962, align 1, !alias.scope !50, !noalias !53
  %963 = bitcast i8* %950 to <16 x i8>*
  store <16 x i8> %952, <16 x i8>* %963, align 1, !alias.scope !53, !noalias !50
  %964 = bitcast i8* %958 to <16 x i8>*
  store <16 x i8> %955, <16 x i8>* %964, align 1, !alias.scope !53, !noalias !50
  br label %965

965:                                              ; preds = %945, %948
  %966 = icmp eq i64 %893, %896
  br i1 %966, label %1071, label %967

967:                                              ; preds = %965, %888
  %968 = phi i8* [ %232, %888 ], [ %897, %965 ]
  %969 = phi i8* [ %875, %888 ], [ %898, %965 ]
  br label %970

970:                                              ; preds = %967, %970
  %971 = phi i8* [ %975, %970 ], [ %968, %967 ]
  %972 = phi i8* [ %976, %970 ], [ %969, %967 ]
  %973 = load i8, i8* %971, align 1, !alias.scope !50, !noalias !53
  %974 = load i8, i8* %972, align 1, !alias.scope !53, !noalias !50
  store i8 %974, i8* %971, align 1, !alias.scope !50, !noalias !53
  store i8 %973, i8* %972, align 1, !alias.scope !53, !noalias !50
  %975 = getelementptr inbounds i8, i8* %971, i64 1
  %976 = getelementptr inbounds i8, i8* %972, i64 1
  %977 = icmp ult i8* %975, %886
  br i1 %977, label %970, label %1071, !llvm.loop !56

978:                                              ; preds = %883
  %979 = icmp sgt i64 %878, 0
  br i1 %979, label %980, label %1071

980:                                              ; preds = %978
  %981 = getelementptr inbounds i8, i8* %232, i64 %879
  %982 = getelementptr i8, i8* %232, i64 1
  %983 = icmp ugt i8* %875, %982
  %984 = select i1 %983, i8* %875, i8* %982
  %985 = ptrtoint i8* %984 to i64
  %986 = sub i64 %985, %233
  %987 = icmp ult i64 %986, 32
  br i1 %987, label %1060, label %988

988:                                              ; preds = %980
  %989 = and i64 %986, -32
  %990 = getelementptr i8, i8* %232, i64 %989
  %991 = getelementptr i8, i8* %981, i64 %989
  %992 = add i64 %989, -32
  %993 = lshr exact i64 %992, 5
  %994 = add nuw nsw i64 %993, 1
  %995 = and i64 %994, 1
  %996 = icmp eq i64 %992, 0
  br i1 %996, label %1038, label %997

997:                                              ; preds = %988
  %998 = sub nuw nsw i64 %994, %995
  br label %999

999:                                              ; preds = %999, %997
  %1000 = phi i64 [ 0, %997 ], [ %1035, %999 ]
  %1001 = phi i64 [ %998, %997 ], [ %1036, %999 ]
  %1002 = getelementptr i8, i8* %232, i64 %1000
  %1003 = getelementptr i8, i8* %981, i64 %1000
  %1004 = bitcast i8* %1002 to <16 x i8>*
  %1005 = load <16 x i8>, <16 x i8>* %1004, align 1, !alias.scope !57, !noalias !60
  %1006 = getelementptr i8, i8* %1002, i64 16
  %1007 = bitcast i8* %1006 to <16 x i8>*
  %1008 = load <16 x i8>, <16 x i8>* %1007, align 1, !alias.scope !57, !noalias !60
  %1009 = bitcast i8* %1003 to <16 x i8>*
  %1010 = load <16 x i8>, <16 x i8>* %1009, align 1, !alias.scope !60, !noalias !57
  %1011 = getelementptr i8, i8* %1003, i64 16
  %1012 = bitcast i8* %1011 to <16 x i8>*
  %1013 = load <16 x i8>, <16 x i8>* %1012, align 1, !alias.scope !60, !noalias !57
  %1014 = bitcast i8* %1002 to <16 x i8>*
  store <16 x i8> %1010, <16 x i8>* %1014, align 1, !alias.scope !57, !noalias !60
  %1015 = bitcast i8* %1006 to <16 x i8>*
  store <16 x i8> %1013, <16 x i8>* %1015, align 1, !alias.scope !57, !noalias !60
  %1016 = bitcast i8* %1003 to <16 x i8>*
  store <16 x i8> %1005, <16 x i8>* %1016, align 1, !alias.scope !60, !noalias !57
  %1017 = bitcast i8* %1011 to <16 x i8>*
  store <16 x i8> %1008, <16 x i8>* %1017, align 1, !alias.scope !60, !noalias !57
  %1018 = or i64 %1000, 32
  %1019 = getelementptr i8, i8* %232, i64 %1018
  %1020 = getelementptr i8, i8* %981, i64 %1018
  %1021 = bitcast i8* %1019 to <16 x i8>*
  %1022 = load <16 x i8>, <16 x i8>* %1021, align 1, !alias.scope !57, !noalias !60
  %1023 = getelementptr i8, i8* %1019, i64 16
  %1024 = bitcast i8* %1023 to <16 x i8>*
  %1025 = load <16 x i8>, <16 x i8>* %1024, align 1, !alias.scope !57, !noalias !60
  %1026 = bitcast i8* %1020 to <16 x i8>*
  %1027 = load <16 x i8>, <16 x i8>* %1026, align 1, !alias.scope !60, !noalias !57
  %1028 = getelementptr i8, i8* %1020, i64 16
  %1029 = bitcast i8* %1028 to <16 x i8>*
  %1030 = load <16 x i8>, <16 x i8>* %1029, align 1, !alias.scope !60, !noalias !57
  %1031 = bitcast i8* %1019 to <16 x i8>*
  store <16 x i8> %1027, <16 x i8>* %1031, align 1, !alias.scope !57, !noalias !60
  %1032 = bitcast i8* %1023 to <16 x i8>*
  store <16 x i8> %1030, <16 x i8>* %1032, align 1, !alias.scope !57, !noalias !60
  %1033 = bitcast i8* %1020 to <16 x i8>*
  store <16 x i8> %1022, <16 x i8>* %1033, align 1, !alias.scope !60, !noalias !57
  %1034 = bitcast i8* %1028 to <16 x i8>*
  store <16 x i8> %1025, <16 x i8>* %1034, align 1, !alias.scope !60, !noalias !57
  %1035 = add i64 %1000, 64
  %1036 = add i64 %1001, -2
  %1037 = icmp eq i64 %1036, 0
  br i1 %1037, label %1038, label %999, !llvm.loop !62

1038:                                             ; preds = %999, %988
  %1039 = phi i64 [ 0, %988 ], [ %1035, %999 ]
  %1040 = icmp eq i64 %995, 0
  br i1 %1040, label %1058, label %1041

1041:                                             ; preds = %1038
  %1042 = getelementptr i8, i8* %232, i64 %1039
  %1043 = getelementptr i8, i8* %981, i64 %1039
  %1044 = bitcast i8* %1042 to <16 x i8>*
  %1045 = load <16 x i8>, <16 x i8>* %1044, align 1, !alias.scope !57, !noalias !60
  %1046 = getelementptr i8, i8* %1042, i64 16
  %1047 = bitcast i8* %1046 to <16 x i8>*
  %1048 = load <16 x i8>, <16 x i8>* %1047, align 1, !alias.scope !57, !noalias !60
  %1049 = bitcast i8* %1043 to <16 x i8>*
  %1050 = load <16 x i8>, <16 x i8>* %1049, align 1, !alias.scope !60, !noalias !57
  %1051 = getelementptr i8, i8* %1043, i64 16
  %1052 = bitcast i8* %1051 to <16 x i8>*
  %1053 = load <16 x i8>, <16 x i8>* %1052, align 1, !alias.scope !60, !noalias !57
  %1054 = bitcast i8* %1042 to <16 x i8>*
  store <16 x i8> %1050, <16 x i8>* %1054, align 1, !alias.scope !57, !noalias !60
  %1055 = bitcast i8* %1046 to <16 x i8>*
  store <16 x i8> %1053, <16 x i8>* %1055, align 1, !alias.scope !57, !noalias !60
  %1056 = bitcast i8* %1043 to <16 x i8>*
  store <16 x i8> %1045, <16 x i8>* %1056, align 1, !alias.scope !60, !noalias !57
  %1057 = bitcast i8* %1051 to <16 x i8>*
  store <16 x i8> %1048, <16 x i8>* %1057, align 1, !alias.scope !60, !noalias !57
  br label %1058

1058:                                             ; preds = %1038, %1041
  %1059 = icmp eq i64 %986, %989
  br i1 %1059, label %1071, label %1060

1060:                                             ; preds = %1058, %980
  %1061 = phi i8* [ %232, %980 ], [ %990, %1058 ]
  %1062 = phi i8* [ %981, %980 ], [ %991, %1058 ]
  br label %1063

1063:                                             ; preds = %1060, %1063
  %1064 = phi i8* [ %1068, %1063 ], [ %1061, %1060 ]
  %1065 = phi i8* [ %1069, %1063 ], [ %1062, %1060 ]
  %1066 = load i8, i8* %1064, align 1, !alias.scope !57, !noalias !60
  %1067 = load i8, i8* %1065, align 1, !alias.scope !60, !noalias !57
  store i8 %1067, i8* %1064, align 1, !alias.scope !57, !noalias !60
  store i8 %1066, i8* %1065, align 1, !alias.scope !60, !noalias !57
  %1068 = getelementptr inbounds i8, i8* %1064, i64 1
  %1069 = getelementptr inbounds i8, i8* %1065, i64 1
  %1070 = icmp ult i8* %1068, %875
  br i1 %1070, label %1063, label %1071, !llvm.loop !63

1071:                                             ; preds = %1063, %970, %1058, %965, %872, %885, %978
  %1072 = ptrtoint i8* %874 to i64
  %1073 = sub i64 %1072, %876
  %1074 = ptrtoint i8* %230 to i64
  %1075 = sub i64 %1074, %1072
  %1076 = icmp ne i64 %1073, 0
  %1077 = icmp ne i64 %1075, 0
  %1078 = and i1 %1076, %1077
  br i1 %1078, label %1079, label %1267

1079:                                             ; preds = %1071
  %1080 = icmp ugt i64 %1073, %1075
  br i1 %1080, label %1081, label %1174

1081:                                             ; preds = %1079
  %1082 = getelementptr inbounds i8, i8* %873, i64 %1075
  %1083 = icmp sgt i64 %1075, 0
  br i1 %1083, label %1084, label %1267

1084:                                             ; preds = %1081
  %1085 = getelementptr i8, i8* %873, i64 1
  %1086 = icmp ugt i8* %1082, %1085
  %1087 = select i1 %1086, i8* %1082, i8* %1085
  %1088 = ptrtoint i8* %1087 to i64
  %1089 = sub i64 %1088, %876
  %1090 = icmp ult i64 %1089, 32
  br i1 %1090, label %1163, label %1091

1091:                                             ; preds = %1084
  %1092 = and i64 %1089, -32
  %1093 = getelementptr i8, i8* %873, i64 %1092
  %1094 = getelementptr i8, i8* %874, i64 %1092
  %1095 = add i64 %1092, -32
  %1096 = lshr exact i64 %1095, 5
  %1097 = add nuw nsw i64 %1096, 1
  %1098 = and i64 %1097, 1
  %1099 = icmp eq i64 %1095, 0
  br i1 %1099, label %1141, label %1100

1100:                                             ; preds = %1091
  %1101 = sub nuw nsw i64 %1097, %1098
  br label %1102

1102:                                             ; preds = %1102, %1100
  %1103 = phi i64 [ 0, %1100 ], [ %1138, %1102 ]
  %1104 = phi i64 [ %1101, %1100 ], [ %1139, %1102 ]
  %1105 = getelementptr i8, i8* %873, i64 %1103
  %1106 = getelementptr i8, i8* %874, i64 %1103
  %1107 = bitcast i8* %1105 to <16 x i8>*
  %1108 = load <16 x i8>, <16 x i8>* %1107, align 1, !alias.scope !64, !noalias !67
  %1109 = getelementptr i8, i8* %1105, i64 16
  %1110 = bitcast i8* %1109 to <16 x i8>*
  %1111 = load <16 x i8>, <16 x i8>* %1110, align 1, !alias.scope !64, !noalias !67
  %1112 = bitcast i8* %1106 to <16 x i8>*
  %1113 = load <16 x i8>, <16 x i8>* %1112, align 1, !alias.scope !67, !noalias !64
  %1114 = getelementptr i8, i8* %1106, i64 16
  %1115 = bitcast i8* %1114 to <16 x i8>*
  %1116 = load <16 x i8>, <16 x i8>* %1115, align 1, !alias.scope !67, !noalias !64
  %1117 = bitcast i8* %1105 to <16 x i8>*
  store <16 x i8> %1113, <16 x i8>* %1117, align 1, !alias.scope !64, !noalias !67
  %1118 = bitcast i8* %1109 to <16 x i8>*
  store <16 x i8> %1116, <16 x i8>* %1118, align 1, !alias.scope !64, !noalias !67
  %1119 = bitcast i8* %1106 to <16 x i8>*
  store <16 x i8> %1108, <16 x i8>* %1119, align 1, !alias.scope !67, !noalias !64
  %1120 = bitcast i8* %1114 to <16 x i8>*
  store <16 x i8> %1111, <16 x i8>* %1120, align 1, !alias.scope !67, !noalias !64
  %1121 = or i64 %1103, 32
  %1122 = getelementptr i8, i8* %873, i64 %1121
  %1123 = getelementptr i8, i8* %874, i64 %1121
  %1124 = bitcast i8* %1122 to <16 x i8>*
  %1125 = load <16 x i8>, <16 x i8>* %1124, align 1, !alias.scope !64, !noalias !67
  %1126 = getelementptr i8, i8* %1122, i64 16
  %1127 = bitcast i8* %1126 to <16 x i8>*
  %1128 = load <16 x i8>, <16 x i8>* %1127, align 1, !alias.scope !64, !noalias !67
  %1129 = bitcast i8* %1123 to <16 x i8>*
  %1130 = load <16 x i8>, <16 x i8>* %1129, align 1, !alias.scope !67, !noalias !64
  %1131 = getelementptr i8, i8* %1123, i64 16
  %1132 = bitcast i8* %1131 to <16 x i8>*
  %1133 = load <16 x i8>, <16 x i8>* %1132, align 1, !alias.scope !67, !noalias !64
  %1134 = bitcast i8* %1122 to <16 x i8>*
  store <16 x i8> %1130, <16 x i8>* %1134, align 1, !alias.scope !64, !noalias !67
  %1135 = bitcast i8* %1126 to <16 x i8>*
  store <16 x i8> %1133, <16 x i8>* %1135, align 1, !alias.scope !64, !noalias !67
  %1136 = bitcast i8* %1123 to <16 x i8>*
  store <16 x i8> %1125, <16 x i8>* %1136, align 1, !alias.scope !67, !noalias !64
  %1137 = bitcast i8* %1131 to <16 x i8>*
  store <16 x i8> %1128, <16 x i8>* %1137, align 1, !alias.scope !67, !noalias !64
  %1138 = add i64 %1103, 64
  %1139 = add i64 %1104, -2
  %1140 = icmp eq i64 %1139, 0
  br i1 %1140, label %1141, label %1102, !llvm.loop !69

1141:                                             ; preds = %1102, %1091
  %1142 = phi i64 [ 0, %1091 ], [ %1138, %1102 ]
  %1143 = icmp eq i64 %1098, 0
  br i1 %1143, label %1161, label %1144

1144:                                             ; preds = %1141
  %1145 = getelementptr i8, i8* %873, i64 %1142
  %1146 = getelementptr i8, i8* %874, i64 %1142
  %1147 = bitcast i8* %1145 to <16 x i8>*
  %1148 = load <16 x i8>, <16 x i8>* %1147, align 1, !alias.scope !64, !noalias !67
  %1149 = getelementptr i8, i8* %1145, i64 16
  %1150 = bitcast i8* %1149 to <16 x i8>*
  %1151 = load <16 x i8>, <16 x i8>* %1150, align 1, !alias.scope !64, !noalias !67
  %1152 = bitcast i8* %1146 to <16 x i8>*
  %1153 = load <16 x i8>, <16 x i8>* %1152, align 1, !alias.scope !67, !noalias !64
  %1154 = getelementptr i8, i8* %1146, i64 16
  %1155 = bitcast i8* %1154 to <16 x i8>*
  %1156 = load <16 x i8>, <16 x i8>* %1155, align 1, !alias.scope !67, !noalias !64
  %1157 = bitcast i8* %1145 to <16 x i8>*
  store <16 x i8> %1153, <16 x i8>* %1157, align 1, !alias.scope !64, !noalias !67
  %1158 = bitcast i8* %1149 to <16 x i8>*
  store <16 x i8> %1156, <16 x i8>* %1158, align 1, !alias.scope !64, !noalias !67
  %1159 = bitcast i8* %1146 to <16 x i8>*
  store <16 x i8> %1148, <16 x i8>* %1159, align 1, !alias.scope !67, !noalias !64
  %1160 = bitcast i8* %1154 to <16 x i8>*
  store <16 x i8> %1151, <16 x i8>* %1160, align 1, !alias.scope !67, !noalias !64
  br label %1161

1161:                                             ; preds = %1141, %1144
  %1162 = icmp eq i64 %1089, %1092
  br i1 %1162, label %1267, label %1163

1163:                                             ; preds = %1161, %1084
  %1164 = phi i8* [ %873, %1084 ], [ %1093, %1161 ]
  %1165 = phi i8* [ %874, %1084 ], [ %1094, %1161 ]
  br label %1166

1166:                                             ; preds = %1163, %1166
  %1167 = phi i8* [ %1171, %1166 ], [ %1164, %1163 ]
  %1168 = phi i8* [ %1172, %1166 ], [ %1165, %1163 ]
  %1169 = load i8, i8* %1167, align 1, !alias.scope !64, !noalias !67
  %1170 = load i8, i8* %1168, align 1, !alias.scope !67, !noalias !64
  store i8 %1170, i8* %1167, align 1, !alias.scope !64, !noalias !67
  store i8 %1169, i8* %1168, align 1, !alias.scope !67, !noalias !64
  %1171 = getelementptr inbounds i8, i8* %1167, i64 1
  %1172 = getelementptr inbounds i8, i8* %1168, i64 1
  %1173 = icmp ult i8* %1171, %1082
  br i1 %1173, label %1166, label %1267, !llvm.loop !70

1174:                                             ; preds = %1079
  %1175 = icmp sgt i64 %1073, 0
  br i1 %1175, label %1176, label %1267

1176:                                             ; preds = %1174
  %1177 = getelementptr inbounds i8, i8* %873, i64 %1075
  %1178 = getelementptr i8, i8* %873, i64 1
  %1179 = icmp ugt i8* %874, %1178
  %1180 = select i1 %1179, i8* %874, i8* %1178
  %1181 = ptrtoint i8* %1180 to i64
  %1182 = sub i64 %1181, %876
  %1183 = icmp ult i64 %1182, 32
  br i1 %1183, label %1256, label %1184

1184:                                             ; preds = %1176
  %1185 = and i64 %1182, -32
  %1186 = getelementptr i8, i8* %873, i64 %1185
  %1187 = getelementptr i8, i8* %1177, i64 %1185
  %1188 = add i64 %1185, -32
  %1189 = lshr exact i64 %1188, 5
  %1190 = add nuw nsw i64 %1189, 1
  %1191 = and i64 %1190, 1
  %1192 = icmp eq i64 %1188, 0
  br i1 %1192, label %1234, label %1193

1193:                                             ; preds = %1184
  %1194 = sub nuw nsw i64 %1190, %1191
  br label %1195

1195:                                             ; preds = %1195, %1193
  %1196 = phi i64 [ 0, %1193 ], [ %1231, %1195 ]
  %1197 = phi i64 [ %1194, %1193 ], [ %1232, %1195 ]
  %1198 = getelementptr i8, i8* %873, i64 %1196
  %1199 = getelementptr i8, i8* %1177, i64 %1196
  %1200 = bitcast i8* %1198 to <16 x i8>*
  %1201 = load <16 x i8>, <16 x i8>* %1200, align 1, !alias.scope !71, !noalias !74
  %1202 = getelementptr i8, i8* %1198, i64 16
  %1203 = bitcast i8* %1202 to <16 x i8>*
  %1204 = load <16 x i8>, <16 x i8>* %1203, align 1, !alias.scope !71, !noalias !74
  %1205 = bitcast i8* %1199 to <16 x i8>*
  %1206 = load <16 x i8>, <16 x i8>* %1205, align 1, !alias.scope !74, !noalias !71
  %1207 = getelementptr i8, i8* %1199, i64 16
  %1208 = bitcast i8* %1207 to <16 x i8>*
  %1209 = load <16 x i8>, <16 x i8>* %1208, align 1, !alias.scope !74, !noalias !71
  %1210 = bitcast i8* %1198 to <16 x i8>*
  store <16 x i8> %1206, <16 x i8>* %1210, align 1, !alias.scope !71, !noalias !74
  %1211 = bitcast i8* %1202 to <16 x i8>*
  store <16 x i8> %1209, <16 x i8>* %1211, align 1, !alias.scope !71, !noalias !74
  %1212 = bitcast i8* %1199 to <16 x i8>*
  store <16 x i8> %1201, <16 x i8>* %1212, align 1, !alias.scope !74, !noalias !71
  %1213 = bitcast i8* %1207 to <16 x i8>*
  store <16 x i8> %1204, <16 x i8>* %1213, align 1, !alias.scope !74, !noalias !71
  %1214 = or i64 %1196, 32
  %1215 = getelementptr i8, i8* %873, i64 %1214
  %1216 = getelementptr i8, i8* %1177, i64 %1214
  %1217 = bitcast i8* %1215 to <16 x i8>*
  %1218 = load <16 x i8>, <16 x i8>* %1217, align 1, !alias.scope !71, !noalias !74
  %1219 = getelementptr i8, i8* %1215, i64 16
  %1220 = bitcast i8* %1219 to <16 x i8>*
  %1221 = load <16 x i8>, <16 x i8>* %1220, align 1, !alias.scope !71, !noalias !74
  %1222 = bitcast i8* %1216 to <16 x i8>*
  %1223 = load <16 x i8>, <16 x i8>* %1222, align 1, !alias.scope !74, !noalias !71
  %1224 = getelementptr i8, i8* %1216, i64 16
  %1225 = bitcast i8* %1224 to <16 x i8>*
  %1226 = load <16 x i8>, <16 x i8>* %1225, align 1, !alias.scope !74, !noalias !71
  %1227 = bitcast i8* %1215 to <16 x i8>*
  store <16 x i8> %1223, <16 x i8>* %1227, align 1, !alias.scope !71, !noalias !74
  %1228 = bitcast i8* %1219 to <16 x i8>*
  store <16 x i8> %1226, <16 x i8>* %1228, align 1, !alias.scope !71, !noalias !74
  %1229 = bitcast i8* %1216 to <16 x i8>*
  store <16 x i8> %1218, <16 x i8>* %1229, align 1, !alias.scope !74, !noalias !71
  %1230 = bitcast i8* %1224 to <16 x i8>*
  store <16 x i8> %1221, <16 x i8>* %1230, align 1, !alias.scope !74, !noalias !71
  %1231 = add i64 %1196, 64
  %1232 = add i64 %1197, -2
  %1233 = icmp eq i64 %1232, 0
  br i1 %1233, label %1234, label %1195, !llvm.loop !76

1234:                                             ; preds = %1195, %1184
  %1235 = phi i64 [ 0, %1184 ], [ %1231, %1195 ]
  %1236 = icmp eq i64 %1191, 0
  br i1 %1236, label %1254, label %1237

1237:                                             ; preds = %1234
  %1238 = getelementptr i8, i8* %873, i64 %1235
  %1239 = getelementptr i8, i8* %1177, i64 %1235
  %1240 = bitcast i8* %1238 to <16 x i8>*
  %1241 = load <16 x i8>, <16 x i8>* %1240, align 1, !alias.scope !71, !noalias !74
  %1242 = getelementptr i8, i8* %1238, i64 16
  %1243 = bitcast i8* %1242 to <16 x i8>*
  %1244 = load <16 x i8>, <16 x i8>* %1243, align 1, !alias.scope !71, !noalias !74
  %1245 = bitcast i8* %1239 to <16 x i8>*
  %1246 = load <16 x i8>, <16 x i8>* %1245, align 1, !alias.scope !74, !noalias !71
  %1247 = getelementptr i8, i8* %1239, i64 16
  %1248 = bitcast i8* %1247 to <16 x i8>*
  %1249 = load <16 x i8>, <16 x i8>* %1248, align 1, !alias.scope !74, !noalias !71
  %1250 = bitcast i8* %1238 to <16 x i8>*
  store <16 x i8> %1246, <16 x i8>* %1250, align 1, !alias.scope !71, !noalias !74
  %1251 = bitcast i8* %1242 to <16 x i8>*
  store <16 x i8> %1249, <16 x i8>* %1251, align 1, !alias.scope !71, !noalias !74
  %1252 = bitcast i8* %1239 to <16 x i8>*
  store <16 x i8> %1241, <16 x i8>* %1252, align 1, !alias.scope !74, !noalias !71
  %1253 = bitcast i8* %1247 to <16 x i8>*
  store <16 x i8> %1244, <16 x i8>* %1253, align 1, !alias.scope !74, !noalias !71
  br label %1254

1254:                                             ; preds = %1234, %1237
  %1255 = icmp eq i64 %1182, %1185
  br i1 %1255, label %1267, label %1256

1256:                                             ; preds = %1254, %1176
  %1257 = phi i8* [ %873, %1176 ], [ %1186, %1254 ]
  %1258 = phi i8* [ %1177, %1176 ], [ %1187, %1254 ]
  br label %1259

1259:                                             ; preds = %1256, %1259
  %1260 = phi i8* [ %1264, %1259 ], [ %1257, %1256 ]
  %1261 = phi i8* [ %1265, %1259 ], [ %1258, %1256 ]
  %1262 = load i8, i8* %1260, align 1, !alias.scope !71, !noalias !74
  %1263 = load i8, i8* %1261, align 1, !alias.scope !74, !noalias !71
  store i8 %1263, i8* %1260, align 1, !alias.scope !71, !noalias !74
  store i8 %1262, i8* %1261, align 1, !alias.scope !74, !noalias !71
  %1264 = getelementptr inbounds i8, i8* %1260, i64 1
  %1265 = getelementptr inbounds i8, i8* %1261, i64 1
  %1266 = icmp ult i8* %1264, %874
  br i1 %1266, label %1259, label %1267, !llvm.loop !77

1267:                                             ; preds = %1259, %1166, %1254, %1161, %1071, %1081, %1174
  %1268 = udiv i64 %879, %2
  tail call fastcc void @_ZL13sort_r_simpleIJEEvPvmmPFiPKvS2_DpT_ES4_(i8* %232, i64 %1268, i64 %2)
  %1269 = sub i64 0, %1073
  %1270 = getelementptr inbounds i8, i8* %230, i64 %1269
  %1271 = udiv i64 %1073, %2
  %1272 = mul i64 %1271, %2
  %1273 = getelementptr inbounds i8, i8* %1270, i64 %1272
  %1274 = icmp ult i64 %1271, 10
  br i1 %1274, label %37, label %229

1275:                                             ; preds = %226, %60, %37
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 4000000, i32 4001}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{i8 0, i8 2}
!6 = !{!"branch_weights", i32 2146410443, i32 1073205}
!7 = !{!"branch_weights", i32 4001, i32 4000000}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZL14sort_r_cmpswapIJEEiPcS0_mPFiPKvS2_DpT_ES4_: argument 0"}
!10 = distinct !{!10, !"_ZL14sort_r_cmpswapIJEEiPcS0_mPFiPKvS2_DpT_ES4_"}
!11 = !{!12}
!12 = distinct !{!12, !10, !"_ZL14sort_r_cmpswapIJEEiPcS0_mPFiPKvS2_DpT_ES4_: argument 1"}
!13 = !{!14, !9}
!14 = distinct !{!14, !15, !"_ZL11sort_r_swapPcS_m: argument 0"}
!15 = distinct !{!15, !"_ZL11sort_r_swapPcS_m"}
!16 = !{!17, !12}
!17 = distinct !{!17, !15, !"_ZL11sort_r_swapPcS_m: argument 1"}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.isvectorized", i32 1}
!20 = distinct !{!20, !21, !19}
!21 = !{!"llvm.loop.unroll.runtime.disable"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZL11sort_r_swapPcS_m: argument 0"}
!24 = distinct !{!24, !"_ZL11sort_r_swapPcS_m"}
!25 = !{!26}
!26 = distinct !{!26, !24, !"_ZL11sort_r_swapPcS_m: argument 1"}
!27 = distinct !{!27, !19}
!28 = distinct !{!28, !21, !19}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZL11sort_r_swapPcS_m: argument 0"}
!31 = distinct !{!31, !"_ZL11sort_r_swapPcS_m"}
!32 = !{!33}
!33 = distinct !{!33, !31, !"_ZL11sort_r_swapPcS_m: argument 1"}
!34 = distinct !{!34, !19}
!35 = distinct !{!35, !21, !19}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZL11sort_r_swapPcS_m: argument 1"}
!38 = distinct !{!38, !"_ZL11sort_r_swapPcS_m"}
!39 = !{!40}
!40 = distinct !{!40, !38, !"_ZL11sort_r_swapPcS_m: argument 0"}
!41 = distinct !{!41, !19}
!42 = distinct !{!42, !21, !19}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZL11sort_r_swapPcS_m: argument 0"}
!45 = distinct !{!45, !"_ZL11sort_r_swapPcS_m"}
!46 = !{!47}
!47 = distinct !{!47, !45, !"_ZL11sort_r_swapPcS_m: argument 1"}
!48 = distinct !{!48, !19}
!49 = distinct !{!49, !21, !19}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZL11sort_r_swapPcS_m: argument 0"}
!52 = distinct !{!52, !"_ZL11sort_r_swapPcS_m"}
!53 = !{!54}
!54 = distinct !{!54, !52, !"_ZL11sort_r_swapPcS_m: argument 1"}
!55 = distinct !{!55, !19}
!56 = distinct !{!56, !21, !19}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZL11sort_r_swapPcS_m: argument 0"}
!59 = distinct !{!59, !"_ZL11sort_r_swapPcS_m"}
!60 = !{!61}
!61 = distinct !{!61, !59, !"_ZL11sort_r_swapPcS_m: argument 1"}
!62 = distinct !{!62, !19}
!63 = distinct !{!63, !21, !19}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZL11sort_r_swapPcS_m: argument 0"}
!66 = distinct !{!66, !"_ZL11sort_r_swapPcS_m"}
!67 = !{!68}
!68 = distinct !{!68, !66, !"_ZL11sort_r_swapPcS_m: argument 1"}
!69 = distinct !{!69, !19}
!70 = distinct !{!70, !21, !19}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZL11sort_r_swapPcS_m: argument 0"}
!73 = distinct !{!73, !"_ZL11sort_r_swapPcS_m"}
!74 = !{!75}
!75 = distinct !{!75, !73, !"_ZL11sort_r_swapPcS_m: argument 1"}
!76 = distinct !{!76, !19}
!77 = distinct !{!77, !21, !19}
