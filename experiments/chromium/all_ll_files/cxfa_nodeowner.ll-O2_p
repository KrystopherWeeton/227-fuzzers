; ModuleID = '../../third_party/pdfium/xfa/fxfa/parser/cxfa_nodeowner.cpp'
source_filename = "../../third_party/pdfium/xfa/fxfa/parser/cxfa_nodeowner.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CXFA_NodeOwner = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"*, %"class.std::__1::__compressed_pair" }
%"class.cppgc::internal::BasicMember" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::MemberBase" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cppgc::internal::BasicMember"* }
%"class.cppgc::Visitor" = type { i32 (...)** }
%class.CXFA_List = type { %class.CXFA_Object }
%class.CXFA_Object = type { i32 (...)**, i32, i16, %"class.fxcrt::StringViewTemplate", i32, %"class.cppgc::internal::BasicMember.2", %"class.cppgc::internal::BasicMember.3" }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.cppgc::internal::BasicMember.2" = type { %"class.cppgc::internal::MemberBase" }
%"class.cppgc::internal::BasicMember.3" = type { %"class.cppgc::internal::MemberBase" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN5cppgc8internal14TraceTraitBaseI9CXFA_ListE5TraceEPNS_7VisitorEPKv = comdat any

@_ZN14CXFA_NodeOwnerC1Ev = hidden unnamed_addr alias void (%class.CXFA_NodeOwner*), void (%class.CXFA_NodeOwner*)* @_ZN14CXFA_NodeOwnerC2Ev
@_ZN14CXFA_NodeOwnerD1Ev = hidden unnamed_addr alias void (%class.CXFA_NodeOwner*), void (%class.CXFA_NodeOwner*)* @_ZN14CXFA_NodeOwnerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CXFA_NodeOwnerC2Ev(%class.CXFA_NodeOwner* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CXFA_NodeOwner* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CXFA_NodeOwnerD2Ev(%class.CXFA_NodeOwner* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %2, align 8
  %4 = icmp eq %"class.cppgc::internal::BasicMember"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.cppgc::internal::BasicMember"* %3 to i64
  %7 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.cppgc::internal::BasicMember"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.cppgc::internal::BasicMember"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #7
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14CXFA_NodeOwner5TraceEPN5cppgc7VisitorE(%class.CXFA_NodeOwner* nocapture readonly, %"class.cppgc::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %3, align 8
  %5 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %5, align 8
  %7 = icmp eq %"class.cppgc::internal::BasicMember"* %4, %6
  br i1 %7, label %23, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.cppgc::Visitor"* %1 to void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)***
  br label %10

10:                                               ; preds = %20, %8
  %11 = phi %"class.cppgc::internal::BasicMember"* [ %4, %8 ], [ %21, %20 ]
  %12 = bitcast %"class.cppgc::internal::BasicMember"* %11 to i64*
  %13 = load atomic i64, i64* %12 monotonic, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %10
  %16 = inttoptr i64 %13 to i8*
  %17 = load void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)**, void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)*** %9, align 8
  %18 = getelementptr inbounds void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)*, void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)** %17, i64 4
  %19 = load void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)*, void (%"class.cppgc::Visitor"*, i8*, i8*, void (%"class.cppgc::Visitor"*, i8*)*)** %18, align 8
  tail call void %19(%"class.cppgc::Visitor"* %1, i8* nonnull %16, i8* nonnull %16, void (%"class.cppgc::Visitor"*, i8*)* nonnull @_ZN5cppgc8internal14TraceTraitBaseI9CXFA_ListE5TraceEPNS_7VisitorEPKv) #6
  br label %20

20:                                               ; preds = %15, %10
  %21 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %11, i64 1
  %22 = icmp eq %"class.cppgc::internal::BasicMember"* %21, %6
  br i1 %22, label %23, label %10

23:                                               ; preds = %20, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CXFA_NodeOwner11PersistListEP9CXFA_List(%class.CXFA_NodeOwner*, %class.CXFA_List*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %class.CXFA_List* %1 to i64
  %4 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %4, align 8
  %6 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %6, align 8
  %8 = icmp ult %"class.cppgc::internal::BasicMember"* %5, %7
  %9 = ptrtoint %"class.cppgc::internal::BasicMember"* %7 to i64
  br i1 %8, label %10, label %15

10:                                               ; preds = %2
  %11 = bitcast %"class.cppgc::internal::BasicMember"* %5 to i64*
  store i64 %3, i64* %11, align 8
  %12 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %5, i64 1
  %13 = ptrtoint %"class.cppgc::internal::BasicMember"* %12 to i64
  %14 = bitcast %"class.cppgc::internal::BasicMember"** %4 to i64*
  store i64 %13, i64* %14, align 8
  br label %136

15:                                               ; preds = %2
  %16 = ptrtoint %"class.cppgc::internal::BasicMember"* %5 to i64
  %17 = bitcast %"class.cppgc::internal::BasicMember"** %4 to i64*
  %18 = bitcast %class.CXFA_NodeOwner* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = add nsw i64 %21, 1
  %23 = icmp ugt i64 %22, 2305843009213693951
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = bitcast %class.CXFA_NodeOwner* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #8
  unreachable

26:                                               ; preds = %15
  %27 = bitcast %"class.cppgc::internal::BasicMember"** %6 to i64*
  %28 = sub i64 %9, %19
  %29 = ashr exact i64 %28, 3
  %30 = icmp ult i64 %29, 1152921504606846975
  br i1 %30, label %31, label %39

31:                                               ; preds = %26
  %32 = ashr exact i64 %28, 2
  %33 = icmp ult i64 %32, %22
  %34 = select i1 %33, i64 %22, i64 %32
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %31
  %37 = icmp ugt i64 %34, 2305843009213693951
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #8
  unreachable

39:                                               ; preds = %36, %26
  %40 = phi i64 [ %34, %36 ], [ 2305843009213693951, %26 ]
  %41 = shl i64 %40, 3
  %42 = tail call i8* @_Znwm(i64 %41) #7
  %43 = bitcast i8* %42 to %"class.cppgc::internal::BasicMember"*
  br label %44

44:                                               ; preds = %39, %31
  %45 = phi i64 [ %40, %39 ], [ 0, %31 ]
  %46 = phi %"class.cppgc::internal::BasicMember"* [ %43, %39 ], [ null, %31 ]
  %47 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %46, i64 %21
  %48 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %46, i64 %45
  %49 = ptrtoint %"class.cppgc::internal::BasicMember"* %48 to i64
  %50 = bitcast %"class.cppgc::internal::BasicMember"* %47 to i64*
  store i64 %3, i64* %50, align 8
  %51 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %47, i64 1
  %52 = ptrtoint %"class.cppgc::internal::BasicMember"* %51 to i64
  %53 = getelementptr inbounds %class.CXFA_NodeOwner, %class.CXFA_NodeOwner* %0, i64 0, i32 0, i32 0, i32 0
  %54 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %53, align 8
  %55 = ptrtoint %"class.cppgc::internal::BasicMember"* %54 to i64
  %56 = load %"class.cppgc::internal::BasicMember"*, %"class.cppgc::internal::BasicMember"** %4, align 8
  %57 = icmp eq %"class.cppgc::internal::BasicMember"* %56, %54
  br i1 %57, label %129, label %58

58:                                               ; preds = %44
  %59 = getelementptr %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %56, i64 -1, i32 0, i32 0
  %60 = ptrtoint i8** %59 to i64
  %61 = sub i64 %60, %55
  %62 = lshr i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 7
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %77, label %66

66:                                               ; preds = %58, %66
  %67 = phi %"class.cppgc::internal::BasicMember"* [ %70, %66 ], [ %47, %58 ]
  %68 = phi %"class.cppgc::internal::BasicMember"* [ %71, %66 ], [ %56, %58 ]
  %69 = phi i64 [ %75, %66 ], [ %64, %58 ]
  %70 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %67, i64 -1
  %71 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %68, i64 -1
  %72 = bitcast %"class.cppgc::internal::BasicMember"* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %"class.cppgc::internal::BasicMember"* %70 to i64*
  store i64 %73, i64* %74, align 8
  store atomic i64 0, i64* %72 monotonic, align 8
  %75 = add i64 %69, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %66, !llvm.loop !2

77:                                               ; preds = %66, %58
  %78 = phi %"class.cppgc::internal::BasicMember"* [ undef, %58 ], [ %70, %66 ]
  %79 = phi %"class.cppgc::internal::BasicMember"* [ %47, %58 ], [ %70, %66 ]
  %80 = phi %"class.cppgc::internal::BasicMember"* [ %56, %58 ], [ %71, %66 ]
  %81 = icmp ult i64 %61, 56
  br i1 %81, label %126, label %82

82:                                               ; preds = %77, %82
  %83 = phi %"class.cppgc::internal::BasicMember"* [ %120, %82 ], [ %79, %77 ]
  %84 = phi %"class.cppgc::internal::BasicMember"* [ %121, %82 ], [ %80, %77 ]
  %85 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -1
  %86 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -1
  %87 = bitcast %"class.cppgc::internal::BasicMember"* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %"class.cppgc::internal::BasicMember"* %85 to i64*
  store i64 %88, i64* %89, align 8
  store atomic i64 0, i64* %87 monotonic, align 8
  %90 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -2
  %91 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -2
  %92 = bitcast %"class.cppgc::internal::BasicMember"* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"class.cppgc::internal::BasicMember"* %90 to i64*
  store i64 %93, i64* %94, align 8
  store atomic i64 0, i64* %92 monotonic, align 8
  %95 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -3
  %96 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -3
  %97 = bitcast %"class.cppgc::internal::BasicMember"* %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.cppgc::internal::BasicMember"* %95 to i64*
  store i64 %98, i64* %99, align 8
  store atomic i64 0, i64* %97 monotonic, align 8
  %100 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -4
  %101 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -4
  %102 = bitcast %"class.cppgc::internal::BasicMember"* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.cppgc::internal::BasicMember"* %100 to i64*
  store i64 %103, i64* %104, align 8
  store atomic i64 0, i64* %102 monotonic, align 8
  %105 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -5
  %106 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -5
  %107 = bitcast %"class.cppgc::internal::BasicMember"* %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.cppgc::internal::BasicMember"* %105 to i64*
  store i64 %108, i64* %109, align 8
  store atomic i64 0, i64* %107 monotonic, align 8
  %110 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -6
  %111 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -6
  %112 = bitcast %"class.cppgc::internal::BasicMember"* %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.cppgc::internal::BasicMember"* %110 to i64*
  store i64 %113, i64* %114, align 8
  store atomic i64 0, i64* %112 monotonic, align 8
  %115 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -7
  %116 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -7
  %117 = bitcast %"class.cppgc::internal::BasicMember"* %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.cppgc::internal::BasicMember"* %115 to i64*
  store i64 %118, i64* %119, align 8
  store atomic i64 0, i64* %117 monotonic, align 8
  %120 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %83, i64 -8
  %121 = getelementptr inbounds %"class.cppgc::internal::BasicMember", %"class.cppgc::internal::BasicMember"* %84, i64 -8
  %122 = bitcast %"class.cppgc::internal::BasicMember"* %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.cppgc::internal::BasicMember"* %120 to i64*
  store i64 %123, i64* %124, align 8
  store atomic i64 0, i64* %122 monotonic, align 8
  %125 = icmp eq %"class.cppgc::internal::BasicMember"* %121, %54
  br i1 %125, label %126, label %82

126:                                              ; preds = %82, %77
  %127 = phi %"class.cppgc::internal::BasicMember"* [ %78, %77 ], [ %120, %82 ]
  %128 = load i64, i64* %18, align 8
  br label %129

129:                                              ; preds = %44, %126
  %130 = phi %"class.cppgc::internal::BasicMember"* [ %127, %126 ], [ %47, %44 ]
  %131 = phi i64 [ %128, %126 ], [ %55, %44 ]
  %132 = ptrtoint %"class.cppgc::internal::BasicMember"* %130 to i64
  store i64 %132, i64* %18, align 8
  store i64 %52, i64* %17, align 8
  store i64 %49, i64* %27, align 8
  %133 = icmp eq i64 %131, 0
  br i1 %133, label %136, label %134

134:                                              ; preds = %129
  %135 = inttoptr i64 %131 to i8*
  tail call void @_ZdlPv(i8* %135) #7
  br label %136

136:                                              ; preds = %10, %129, %134
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5cppgc8internal14TraceTraitBaseI9CXFA_ListE5TraceEPNS_7VisitorEPKv(%"class.cppgc::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %class.CXFA_Object*
  %4 = bitcast i8* %1 to void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)***
  %5 = load void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)**, void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)*, void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)** %5, i64 2
  %7 = load void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)*, void (%class.CXFA_Object*, %"class.cppgc::Visitor"*)** %6, align 8
  tail call void %7(%class.CXFA_Object* %3, %"class.cppgc::Visitor"* %0) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
