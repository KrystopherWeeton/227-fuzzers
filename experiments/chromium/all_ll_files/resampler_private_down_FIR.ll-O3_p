; ModuleID = '../../third_party/opus/src/silk/resampler_private_down_FIR.c'
source_filename = "../../third_party/opus/src/silk/resampler_private_down_FIR.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [20 x i8] c"assertion failed: 0\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"../../third_party/opus/src/silk/resampler_private_down_FIR.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_resampler_private_down_FIR(i8*, i16* nocapture, i16*, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds i8, i8* %0, i64 268
  %6 = bitcast i8* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i8, i8* %0, i64 276
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %7
  %12 = sext i32 %11 to i64
  %13 = shl nsw i64 %12, 2
  %14 = alloca i32, i64 %12, align 16
  %15 = bitcast i32* %14 to i8*
  %16 = getelementptr inbounds i8, i8* %0, i64 24
  %17 = sext i32 %10 to i64
  %18 = shl nsw i64 %17, 2
  %19 = call i64 @llvm.usub.sat.i64(i64 %13, i64 %18)
  %20 = getelementptr i32, i32* %14, i64 %17
  %21 = bitcast i32* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 -86, i64 %19, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %15, i8* align 8 %16, i64 %18, i1 false)
  %22 = getelementptr inbounds i8, i8* %0, i64 296
  %23 = bitcast i8* %22 to i16**
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds i16, i16* %24, i64 2
  %26 = getelementptr inbounds i8, i8* %0, i64 272
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 8
  %29 = bitcast i8* %0 to i32*
  %30 = getelementptr inbounds i8, i8* %0, i64 280
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds i16, i16* %24, i64 3
  %33 = getelementptr inbounds i16, i16* %24, i64 4
  %34 = getelementptr inbounds i16, i16* %24, i64 5
  %35 = getelementptr inbounds i16, i16* %24, i64 6
  %36 = getelementptr inbounds i16, i16* %24, i64 7
  %37 = getelementptr inbounds i16, i16* %24, i64 8
  %38 = getelementptr inbounds i16, i16* %24, i64 9
  %39 = getelementptr inbounds i16, i16* %24, i64 10
  %40 = getelementptr inbounds i16, i16* %24, i64 11
  %41 = getelementptr inbounds i16, i16* %24, i64 12
  %42 = getelementptr inbounds i16, i16* %24, i64 13
  %43 = getelementptr inbounds i16, i16* %24, i64 14
  %44 = getelementptr inbounds i16, i16* %24, i64 15
  %45 = getelementptr inbounds i16, i16* %24, i64 16
  %46 = getelementptr inbounds i16, i16* %24, i64 17
  %47 = getelementptr inbounds i16, i16* %24, i64 18
  %48 = getelementptr inbounds i16, i16* %24, i64 19
  br label %49

49:                                               ; preds = %629, %4
  %50 = phi i16* [ %24, %4 ], [ %637, %629 ]
  %51 = phi i32 [ %10, %4 ], [ %633, %629 ]
  %52 = phi i32 [ %7, %4 ], [ %636, %629 ]
  %53 = phi i16* [ %1, %4 ], [ %625, %629 ]
  %54 = phi i16* [ %2, %4 ], [ %630, %629 ]
  %55 = phi i32 [ %3, %4 ], [ %627, %629 ]
  %56 = icmp slt i32 %55, %52
  %57 = select i1 %56, i32 %55, i32 %52
  %58 = sext i32 %51 to i64
  %59 = getelementptr inbounds i32, i32* %14, i64 %58
  call void @silk_resampler_private_AR2(i32* %29, i32* %59, i16* %54, i16* %50, i32 %57) #5
  %60 = shl i32 %57, 16
  %61 = load i32, i32* %9, align 4
  %62 = load i32, i32* %31, align 8
  switch i32 %61, label %623 [
    i32 18, label %67
    i32 24, label %65
    i32 36, label %63
  ]

63:                                               ; preds = %49
  %64 = icmp sgt i32 %60, 0
  br i1 %64, label %409, label %624

65:                                               ; preds = %49
  %66 = icmp sgt i32 %60, 0
  br i1 %66, label %261, label %624

67:                                               ; preds = %49
  %68 = icmp sgt i32 %60, 0
  br i1 %68, label %69, label %624

69:                                               ; preds = %67
  %70 = zext i32 %62 to i64
  %71 = shl i64 %70, 48
  %72 = ashr exact i64 %71, 48
  br label %73

73:                                               ; preds = %73, %69
  %74 = phi i32 [ 0, %69 ], [ %259, %73 ]
  %75 = phi i16* [ %53, %69 ], [ %258, %73 ]
  %76 = ashr i32 %74, 16
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %14, i64 %77
  %79 = and i32 %74, 65535
  %80 = zext i32 %79 to i64
  %81 = mul nsw i64 %72, %80
  %82 = ashr i64 %81, 16
  %83 = trunc i64 %82 to i32
  %84 = mul nsw i64 %82, 9
  %85 = getelementptr inbounds i16, i16* %25, i64 %84
  %86 = load i32, i32* %78, align 4
  %87 = sext i32 %86 to i64
  %88 = load i16, i16* %85, align 2
  %89 = sext i16 %88 to i64
  %90 = mul nsw i64 %89, %87
  %91 = lshr i64 %90, 16
  %92 = getelementptr inbounds i32, i32* %78, i64 1
  %93 = load i32, i32* %92, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i16, i16* %85, i64 1
  %96 = load i16, i16* %95, align 2
  %97 = sext i16 %96 to i64
  %98 = mul nsw i64 %97, %94
  %99 = lshr i64 %98, 16
  %100 = add nuw nsw i64 %99, %91
  %101 = getelementptr inbounds i32, i32* %78, i64 2
  %102 = load i32, i32* %101, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i16, i16* %85, i64 2
  %105 = load i16, i16* %104, align 2
  %106 = sext i16 %105 to i64
  %107 = mul nsw i64 %106, %103
  %108 = lshr i64 %107, 16
  %109 = add nuw nsw i64 %100, %108
  %110 = getelementptr inbounds i32, i32* %78, i64 3
  %111 = load i32, i32* %110, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i16, i16* %85, i64 3
  %114 = load i16, i16* %113, align 2
  %115 = sext i16 %114 to i64
  %116 = mul nsw i64 %115, %112
  %117 = lshr i64 %116, 16
  %118 = add nuw nsw i64 %109, %117
  %119 = getelementptr inbounds i32, i32* %78, i64 4
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i16, i16* %85, i64 4
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i64
  %125 = mul nsw i64 %124, %121
  %126 = lshr i64 %125, 16
  %127 = add nuw nsw i64 %118, %126
  %128 = getelementptr inbounds i32, i32* %78, i64 5
  %129 = load i32, i32* %128, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %85, i64 5
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i64
  %134 = mul nsw i64 %133, %130
  %135 = lshr i64 %134, 16
  %136 = add nuw nsw i64 %127, %135
  %137 = getelementptr inbounds i32, i32* %78, i64 6
  %138 = load i32, i32* %137, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %85, i64 6
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i64
  %143 = mul nsw i64 %142, %139
  %144 = lshr i64 %143, 16
  %145 = add nuw nsw i64 %136, %144
  %146 = getelementptr inbounds i32, i32* %78, i64 7
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i16, i16* %85, i64 7
  %150 = load i16, i16* %149, align 2
  %151 = sext i16 %150 to i64
  %152 = mul nsw i64 %151, %148
  %153 = lshr i64 %152, 16
  %154 = add nuw nsw i64 %145, %153
  %155 = getelementptr inbounds i32, i32* %78, i64 8
  %156 = load i32, i32* %155, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i16, i16* %85, i64 8
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i64
  %161 = mul nsw i64 %160, %157
  %162 = lshr i64 %161, 16
  %163 = add nuw nsw i64 %154, %162
  %164 = xor i32 %83, -1
  %165 = add i32 %62, %164
  %166 = mul nsw i32 %165, 9
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i16, i16* %25, i64 %167
  %169 = getelementptr inbounds i32, i32* %78, i64 17
  %170 = load i32, i32* %169, align 4
  %171 = sext i32 %170 to i64
  %172 = load i16, i16* %168, align 2
  %173 = sext i16 %172 to i64
  %174 = mul nsw i64 %173, %171
  %175 = lshr i64 %174, 16
  %176 = add nuw nsw i64 %163, %175
  %177 = getelementptr inbounds i32, i32* %78, i64 16
  %178 = load i32, i32* %177, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i16, i16* %168, i64 1
  %181 = load i16, i16* %180, align 2
  %182 = sext i16 %181 to i64
  %183 = mul nsw i64 %182, %179
  %184 = lshr i64 %183, 16
  %185 = add nuw nsw i64 %176, %184
  %186 = getelementptr inbounds i32, i32* %78, i64 15
  %187 = load i32, i32* %186, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %168, i64 2
  %190 = load i16, i16* %189, align 2
  %191 = sext i16 %190 to i64
  %192 = mul nsw i64 %191, %188
  %193 = lshr i64 %192, 16
  %194 = add nuw nsw i64 %185, %193
  %195 = getelementptr inbounds i32, i32* %78, i64 14
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i16, i16* %168, i64 3
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i64
  %201 = mul nsw i64 %200, %197
  %202 = lshr i64 %201, 16
  %203 = add nuw nsw i64 %194, %202
  %204 = getelementptr inbounds i32, i32* %78, i64 13
  %205 = load i32, i32* %204, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i16, i16* %168, i64 4
  %208 = load i16, i16* %207, align 2
  %209 = sext i16 %208 to i64
  %210 = mul nsw i64 %209, %206
  %211 = lshr i64 %210, 16
  %212 = add nuw nsw i64 %203, %211
  %213 = getelementptr inbounds i32, i32* %78, i64 12
  %214 = load i32, i32* %213, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i16, i16* %168, i64 5
  %217 = load i16, i16* %216, align 2
  %218 = sext i16 %217 to i64
  %219 = mul nsw i64 %218, %215
  %220 = lshr i64 %219, 16
  %221 = add nuw nsw i64 %212, %220
  %222 = getelementptr inbounds i32, i32* %78, i64 11
  %223 = load i32, i32* %222, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i16, i16* %168, i64 6
  %226 = load i16, i16* %225, align 2
  %227 = sext i16 %226 to i64
  %228 = mul nsw i64 %227, %224
  %229 = lshr i64 %228, 16
  %230 = add nuw nsw i64 %221, %229
  %231 = getelementptr inbounds i32, i32* %78, i64 10
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i16, i16* %168, i64 7
  %235 = load i16, i16* %234, align 2
  %236 = sext i16 %235 to i64
  %237 = mul nsw i64 %236, %233
  %238 = lshr i64 %237, 16
  %239 = add nuw nsw i64 %230, %238
  %240 = getelementptr inbounds i32, i32* %78, i64 9
  %241 = load i32, i32* %240, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i16, i16* %168, i64 8
  %244 = load i16, i16* %243, align 2
  %245 = sext i16 %244 to i64
  %246 = mul nsw i64 %245, %242
  %247 = lshr i64 %246, 16
  %248 = add nuw nsw i64 %239, %247
  %249 = trunc i64 %248 to i32
  %250 = ashr i32 %249, 5
  %251 = add nsw i32 %250, 1
  %252 = lshr i32 %251, 1
  %253 = icmp sgt i32 %249, 2097119
  %254 = icmp slt i32 %251, -65536
  %255 = select i1 %254, i32 32768, i32 %252
  %256 = select i1 %253, i32 32767, i32 %255
  %257 = trunc i32 %256 to i16
  %258 = getelementptr inbounds i16, i16* %75, i64 1
  store i16 %257, i16* %75, align 2
  %259 = add nsw i32 %74, %28
  %260 = icmp slt i32 %259, %60
  br i1 %260, label %73, label %624

261:                                              ; preds = %65, %261
  %262 = phi i32 [ %407, %261 ], [ 0, %65 ]
  %263 = phi i16* [ %406, %261 ], [ %53, %65 ]
  %264 = ashr i32 %262, 16
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i32, i32* %14, i64 %265
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %266, i64 23
  %269 = load i32, i32* %268, align 4
  %270 = add nsw i32 %269, %267
  %271 = sext i32 %270 to i64
  %272 = load i16, i16* %25, align 2
  %273 = sext i16 %272 to i64
  %274 = mul nsw i64 %271, %273
  %275 = lshr i64 %274, 16
  %276 = getelementptr inbounds i32, i32* %266, i64 1
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds i32, i32* %266, i64 22
  %279 = load i32, i32* %278, align 4
  %280 = add nsw i32 %279, %277
  %281 = sext i32 %280 to i64
  %282 = load i16, i16* %32, align 2
  %283 = sext i16 %282 to i64
  %284 = mul nsw i64 %281, %283
  %285 = lshr i64 %284, 16
  %286 = add nuw nsw i64 %285, %275
  %287 = getelementptr inbounds i32, i32* %266, i64 2
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr inbounds i32, i32* %266, i64 21
  %290 = load i32, i32* %289, align 4
  %291 = add nsw i32 %290, %288
  %292 = sext i32 %291 to i64
  %293 = load i16, i16* %33, align 2
  %294 = sext i16 %293 to i64
  %295 = mul nsw i64 %292, %294
  %296 = lshr i64 %295, 16
  %297 = add nuw nsw i64 %286, %296
  %298 = getelementptr inbounds i32, i32* %266, i64 3
  %299 = load i32, i32* %298, align 4
  %300 = getelementptr inbounds i32, i32* %266, i64 20
  %301 = load i32, i32* %300, align 4
  %302 = add nsw i32 %301, %299
  %303 = sext i32 %302 to i64
  %304 = load i16, i16* %34, align 2
  %305 = sext i16 %304 to i64
  %306 = mul nsw i64 %303, %305
  %307 = lshr i64 %306, 16
  %308 = add nuw nsw i64 %297, %307
  %309 = getelementptr inbounds i32, i32* %266, i64 4
  %310 = load i32, i32* %309, align 4
  %311 = getelementptr inbounds i32, i32* %266, i64 19
  %312 = load i32, i32* %311, align 4
  %313 = add nsw i32 %312, %310
  %314 = sext i32 %313 to i64
  %315 = load i16, i16* %35, align 2
  %316 = sext i16 %315 to i64
  %317 = mul nsw i64 %314, %316
  %318 = lshr i64 %317, 16
  %319 = add nuw nsw i64 %308, %318
  %320 = getelementptr inbounds i32, i32* %266, i64 5
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds i32, i32* %266, i64 18
  %323 = load i32, i32* %322, align 4
  %324 = add nsw i32 %323, %321
  %325 = sext i32 %324 to i64
  %326 = load i16, i16* %36, align 2
  %327 = sext i16 %326 to i64
  %328 = mul nsw i64 %325, %327
  %329 = lshr i64 %328, 16
  %330 = add nuw nsw i64 %319, %329
  %331 = getelementptr inbounds i32, i32* %266, i64 6
  %332 = load i32, i32* %331, align 4
  %333 = getelementptr inbounds i32, i32* %266, i64 17
  %334 = load i32, i32* %333, align 4
  %335 = add nsw i32 %334, %332
  %336 = sext i32 %335 to i64
  %337 = load i16, i16* %37, align 2
  %338 = sext i16 %337 to i64
  %339 = mul nsw i64 %336, %338
  %340 = lshr i64 %339, 16
  %341 = add nuw nsw i64 %330, %340
  %342 = getelementptr inbounds i32, i32* %266, i64 7
  %343 = load i32, i32* %342, align 4
  %344 = getelementptr inbounds i32, i32* %266, i64 16
  %345 = load i32, i32* %344, align 4
  %346 = add nsw i32 %345, %343
  %347 = sext i32 %346 to i64
  %348 = load i16, i16* %38, align 2
  %349 = sext i16 %348 to i64
  %350 = mul nsw i64 %347, %349
  %351 = lshr i64 %350, 16
  %352 = add nuw nsw i64 %341, %351
  %353 = getelementptr inbounds i32, i32* %266, i64 8
  %354 = load i32, i32* %353, align 4
  %355 = getelementptr inbounds i32, i32* %266, i64 15
  %356 = load i32, i32* %355, align 4
  %357 = add nsw i32 %356, %354
  %358 = sext i32 %357 to i64
  %359 = load i16, i16* %39, align 2
  %360 = sext i16 %359 to i64
  %361 = mul nsw i64 %358, %360
  %362 = lshr i64 %361, 16
  %363 = add nuw nsw i64 %352, %362
  %364 = getelementptr inbounds i32, i32* %266, i64 9
  %365 = load i32, i32* %364, align 4
  %366 = getelementptr inbounds i32, i32* %266, i64 14
  %367 = load i32, i32* %366, align 4
  %368 = add nsw i32 %367, %365
  %369 = sext i32 %368 to i64
  %370 = load i16, i16* %40, align 2
  %371 = sext i16 %370 to i64
  %372 = mul nsw i64 %369, %371
  %373 = lshr i64 %372, 16
  %374 = add nuw nsw i64 %363, %373
  %375 = getelementptr inbounds i32, i32* %266, i64 10
  %376 = load i32, i32* %375, align 4
  %377 = getelementptr inbounds i32, i32* %266, i64 13
  %378 = load i32, i32* %377, align 4
  %379 = add nsw i32 %378, %376
  %380 = sext i32 %379 to i64
  %381 = load i16, i16* %41, align 2
  %382 = sext i16 %381 to i64
  %383 = mul nsw i64 %380, %382
  %384 = lshr i64 %383, 16
  %385 = add nuw nsw i64 %374, %384
  %386 = getelementptr inbounds i32, i32* %266, i64 11
  %387 = load i32, i32* %386, align 4
  %388 = getelementptr inbounds i32, i32* %266, i64 12
  %389 = load i32, i32* %388, align 4
  %390 = add nsw i32 %389, %387
  %391 = sext i32 %390 to i64
  %392 = load i16, i16* %42, align 2
  %393 = sext i16 %392 to i64
  %394 = mul nsw i64 %391, %393
  %395 = lshr i64 %394, 16
  %396 = add nuw nsw i64 %385, %395
  %397 = trunc i64 %396 to i32
  %398 = ashr i32 %397, 5
  %399 = add nsw i32 %398, 1
  %400 = lshr i32 %399, 1
  %401 = icmp sgt i32 %397, 2097119
  %402 = icmp slt i32 %399, -65536
  %403 = select i1 %402, i32 32768, i32 %400
  %404 = select i1 %401, i32 32767, i32 %403
  %405 = trunc i32 %404 to i16
  %406 = getelementptr inbounds i16, i16* %263, i64 1
  store i16 %405, i16* %263, align 2
  %407 = add nsw i32 %262, %28
  %408 = icmp slt i32 %407, %60
  br i1 %408, label %261, label %624

409:                                              ; preds = %63, %409
  %410 = phi i32 [ %621, %409 ], [ 0, %63 ]
  %411 = phi i16* [ %620, %409 ], [ %53, %63 ]
  %412 = ashr i32 %410, 16
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i32, i32* %14, i64 %413
  %415 = load i32, i32* %414, align 4
  %416 = getelementptr inbounds i32, i32* %414, i64 35
  %417 = load i32, i32* %416, align 4
  %418 = add nsw i32 %417, %415
  %419 = sext i32 %418 to i64
  %420 = load i16, i16* %25, align 2
  %421 = sext i16 %420 to i64
  %422 = mul nsw i64 %419, %421
  %423 = lshr i64 %422, 16
  %424 = getelementptr inbounds i32, i32* %414, i64 1
  %425 = load i32, i32* %424, align 4
  %426 = getelementptr inbounds i32, i32* %414, i64 34
  %427 = load i32, i32* %426, align 4
  %428 = add nsw i32 %427, %425
  %429 = sext i32 %428 to i64
  %430 = load i16, i16* %32, align 2
  %431 = sext i16 %430 to i64
  %432 = mul nsw i64 %429, %431
  %433 = lshr i64 %432, 16
  %434 = add nuw nsw i64 %433, %423
  %435 = getelementptr inbounds i32, i32* %414, i64 2
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds i32, i32* %414, i64 33
  %438 = load i32, i32* %437, align 4
  %439 = add nsw i32 %438, %436
  %440 = sext i32 %439 to i64
  %441 = load i16, i16* %33, align 2
  %442 = sext i16 %441 to i64
  %443 = mul nsw i64 %440, %442
  %444 = lshr i64 %443, 16
  %445 = add nuw nsw i64 %434, %444
  %446 = getelementptr inbounds i32, i32* %414, i64 3
  %447 = load i32, i32* %446, align 4
  %448 = getelementptr inbounds i32, i32* %414, i64 32
  %449 = load i32, i32* %448, align 4
  %450 = add nsw i32 %449, %447
  %451 = sext i32 %450 to i64
  %452 = load i16, i16* %34, align 2
  %453 = sext i16 %452 to i64
  %454 = mul nsw i64 %451, %453
  %455 = lshr i64 %454, 16
  %456 = add nuw nsw i64 %445, %455
  %457 = getelementptr inbounds i32, i32* %414, i64 4
  %458 = load i32, i32* %457, align 4
  %459 = getelementptr inbounds i32, i32* %414, i64 31
  %460 = load i32, i32* %459, align 4
  %461 = add nsw i32 %460, %458
  %462 = sext i32 %461 to i64
  %463 = load i16, i16* %35, align 2
  %464 = sext i16 %463 to i64
  %465 = mul nsw i64 %462, %464
  %466 = lshr i64 %465, 16
  %467 = add nuw nsw i64 %456, %466
  %468 = getelementptr inbounds i32, i32* %414, i64 5
  %469 = load i32, i32* %468, align 4
  %470 = getelementptr inbounds i32, i32* %414, i64 30
  %471 = load i32, i32* %470, align 4
  %472 = add nsw i32 %471, %469
  %473 = sext i32 %472 to i64
  %474 = load i16, i16* %36, align 2
  %475 = sext i16 %474 to i64
  %476 = mul nsw i64 %473, %475
  %477 = lshr i64 %476, 16
  %478 = add nuw nsw i64 %467, %477
  %479 = getelementptr inbounds i32, i32* %414, i64 6
  %480 = load i32, i32* %479, align 4
  %481 = getelementptr inbounds i32, i32* %414, i64 29
  %482 = load i32, i32* %481, align 4
  %483 = add nsw i32 %482, %480
  %484 = sext i32 %483 to i64
  %485 = load i16, i16* %37, align 2
  %486 = sext i16 %485 to i64
  %487 = mul nsw i64 %484, %486
  %488 = lshr i64 %487, 16
  %489 = add nuw nsw i64 %478, %488
  %490 = getelementptr inbounds i32, i32* %414, i64 7
  %491 = load i32, i32* %490, align 4
  %492 = getelementptr inbounds i32, i32* %414, i64 28
  %493 = load i32, i32* %492, align 4
  %494 = add nsw i32 %493, %491
  %495 = sext i32 %494 to i64
  %496 = load i16, i16* %38, align 2
  %497 = sext i16 %496 to i64
  %498 = mul nsw i64 %495, %497
  %499 = lshr i64 %498, 16
  %500 = add nuw nsw i64 %489, %499
  %501 = getelementptr inbounds i32, i32* %414, i64 8
  %502 = load i32, i32* %501, align 4
  %503 = getelementptr inbounds i32, i32* %414, i64 27
  %504 = load i32, i32* %503, align 4
  %505 = add nsw i32 %504, %502
  %506 = sext i32 %505 to i64
  %507 = load i16, i16* %39, align 2
  %508 = sext i16 %507 to i64
  %509 = mul nsw i64 %506, %508
  %510 = lshr i64 %509, 16
  %511 = add nuw nsw i64 %500, %510
  %512 = getelementptr inbounds i32, i32* %414, i64 9
  %513 = load i32, i32* %512, align 4
  %514 = getelementptr inbounds i32, i32* %414, i64 26
  %515 = load i32, i32* %514, align 4
  %516 = add nsw i32 %515, %513
  %517 = sext i32 %516 to i64
  %518 = load i16, i16* %40, align 2
  %519 = sext i16 %518 to i64
  %520 = mul nsw i64 %517, %519
  %521 = lshr i64 %520, 16
  %522 = add nuw nsw i64 %511, %521
  %523 = getelementptr inbounds i32, i32* %414, i64 10
  %524 = load i32, i32* %523, align 4
  %525 = getelementptr inbounds i32, i32* %414, i64 25
  %526 = load i32, i32* %525, align 4
  %527 = add nsw i32 %526, %524
  %528 = sext i32 %527 to i64
  %529 = load i16, i16* %41, align 2
  %530 = sext i16 %529 to i64
  %531 = mul nsw i64 %528, %530
  %532 = lshr i64 %531, 16
  %533 = add nuw nsw i64 %522, %532
  %534 = getelementptr inbounds i32, i32* %414, i64 11
  %535 = load i32, i32* %534, align 4
  %536 = getelementptr inbounds i32, i32* %414, i64 24
  %537 = load i32, i32* %536, align 4
  %538 = add nsw i32 %537, %535
  %539 = sext i32 %538 to i64
  %540 = load i16, i16* %42, align 2
  %541 = sext i16 %540 to i64
  %542 = mul nsw i64 %539, %541
  %543 = lshr i64 %542, 16
  %544 = add nuw nsw i64 %533, %543
  %545 = getelementptr inbounds i32, i32* %414, i64 12
  %546 = load i32, i32* %545, align 4
  %547 = getelementptr inbounds i32, i32* %414, i64 23
  %548 = load i32, i32* %547, align 4
  %549 = add nsw i32 %548, %546
  %550 = sext i32 %549 to i64
  %551 = load i16, i16* %43, align 2
  %552 = sext i16 %551 to i64
  %553 = mul nsw i64 %550, %552
  %554 = lshr i64 %553, 16
  %555 = add nuw nsw i64 %544, %554
  %556 = getelementptr inbounds i32, i32* %414, i64 13
  %557 = load i32, i32* %556, align 4
  %558 = getelementptr inbounds i32, i32* %414, i64 22
  %559 = load i32, i32* %558, align 4
  %560 = add nsw i32 %559, %557
  %561 = sext i32 %560 to i64
  %562 = load i16, i16* %44, align 2
  %563 = sext i16 %562 to i64
  %564 = mul nsw i64 %561, %563
  %565 = lshr i64 %564, 16
  %566 = add nuw nsw i64 %555, %565
  %567 = getelementptr inbounds i32, i32* %414, i64 14
  %568 = load i32, i32* %567, align 4
  %569 = getelementptr inbounds i32, i32* %414, i64 21
  %570 = load i32, i32* %569, align 4
  %571 = add nsw i32 %570, %568
  %572 = sext i32 %571 to i64
  %573 = load i16, i16* %45, align 2
  %574 = sext i16 %573 to i64
  %575 = mul nsw i64 %572, %574
  %576 = lshr i64 %575, 16
  %577 = add nuw nsw i64 %566, %576
  %578 = getelementptr inbounds i32, i32* %414, i64 15
  %579 = load i32, i32* %578, align 4
  %580 = getelementptr inbounds i32, i32* %414, i64 20
  %581 = load i32, i32* %580, align 4
  %582 = add nsw i32 %581, %579
  %583 = sext i32 %582 to i64
  %584 = load i16, i16* %46, align 2
  %585 = sext i16 %584 to i64
  %586 = mul nsw i64 %583, %585
  %587 = lshr i64 %586, 16
  %588 = add nuw nsw i64 %577, %587
  %589 = getelementptr inbounds i32, i32* %414, i64 16
  %590 = load i32, i32* %589, align 4
  %591 = getelementptr inbounds i32, i32* %414, i64 19
  %592 = load i32, i32* %591, align 4
  %593 = add nsw i32 %592, %590
  %594 = sext i32 %593 to i64
  %595 = load i16, i16* %47, align 2
  %596 = sext i16 %595 to i64
  %597 = mul nsw i64 %594, %596
  %598 = lshr i64 %597, 16
  %599 = add nuw nsw i64 %588, %598
  %600 = getelementptr inbounds i32, i32* %414, i64 17
  %601 = load i32, i32* %600, align 4
  %602 = getelementptr inbounds i32, i32* %414, i64 18
  %603 = load i32, i32* %602, align 4
  %604 = add nsw i32 %603, %601
  %605 = sext i32 %604 to i64
  %606 = load i16, i16* %48, align 2
  %607 = sext i16 %606 to i64
  %608 = mul nsw i64 %605, %607
  %609 = lshr i64 %608, 16
  %610 = add nuw nsw i64 %599, %609
  %611 = trunc i64 %610 to i32
  %612 = ashr i32 %611, 5
  %613 = add nsw i32 %612, 1
  %614 = lshr i32 %613, 1
  %615 = icmp sgt i32 %611, 2097119
  %616 = icmp slt i32 %613, -65536
  %617 = select i1 %616, i32 32768, i32 %614
  %618 = select i1 %615, i32 32767, i32 %617
  %619 = trunc i32 %618 to i16
  %620 = getelementptr inbounds i16, i16* %411, i64 1
  store i16 %619, i16* %411, align 2
  %621 = add nsw i32 %410, %28
  %622 = icmp slt i32 %621, %60
  br i1 %622, label %409, label %624

623:                                              ; preds = %49
  call void @celt_fatal(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0), i32 139) #6
  unreachable

624:                                              ; preds = %409, %261, %73, %63, %65, %67
  %625 = phi i16* [ %53, %67 ], [ %53, %65 ], [ %53, %63 ], [ %258, %73 ], [ %406, %261 ], [ %620, %409 ]
  %626 = sext i32 %57 to i64
  %627 = sub nsw i32 %55, %57
  %628 = icmp sgt i32 %627, 1
  br i1 %628, label %629, label %638

629:                                              ; preds = %624
  %630 = getelementptr inbounds i16, i16* %54, i64 %626
  %631 = getelementptr inbounds i32, i32* %14, i64 %626
  %632 = bitcast i32* %631 to i8*
  %633 = load i32, i32* %9, align 4
  %634 = sext i32 %633 to i64
  %635 = shl nsw i64 %634, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %15, i8* align 4 %632, i64 %635, i1 false)
  %636 = load i32, i32* %6, align 4
  %637 = load i16*, i16** %23, align 8
  br label %49

638:                                              ; preds = %624
  %639 = getelementptr inbounds i32, i32* %14, i64 %626
  %640 = bitcast i32* %639 to i8*
  %641 = load i32, i32* %9, align 4
  %642 = sext i32 %641 to i64
  %643 = shl nsw i64 %642, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 4 %640, i64 %643, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @silk_resampler_private_AR2(i32*, i32*, i16*, i16*, i32) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
