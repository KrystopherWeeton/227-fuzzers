; ModuleID = '../../third_party/opus/src/silk/VAD.c'
source_filename = "../../third_party/opus/src/silk/VAD.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_VAD_state = type { [2 x i32], [2 x i32], [2 x i32], [4 x i32], [4 x i32], i16, [4 x i32], [4 x i32], [4 x i32], i32 }
%struct.silk_encoder_state = type { [2 x i32], i32, i32, %struct.silk_LP_state, %struct.silk_VAD_state, %struct.silk_nsq_state, [16 x i16], i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.silk_NLSF_CB_struct*, [4 x i32], i32, i32, [3 x i8], i8, [3 x i32], %struct.SideInfoIndices, [320 x i8], i32, [322 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct._silk_resampler_state_struct, i32, i32, i32, i32, i32, i32, [3 x %struct.SideInfoIndices], [3 x [320 x i8]] }
%struct.silk_LP_state = type { [2 x i32], i32, i32, i32 }
%struct.silk_nsq_state = type { [640 x i16], [640 x i32], [96 x i32], [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }
%struct.SideInfoIndices = type { [4 x i8], [4 x i8], [17 x i8], i16, i8, i8, i8, i8, i8, i8, i8 }
%struct._silk_resampler_state_struct = type { [6 x i32], %union.anon, [48 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i16* }
%union.anon = type { [36 x i32] }

@.str = private unnamed_addr constant [59 x i8] c"assertion failed: MAX_FRAME_LENGTH >= psEncC->frame_length\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"../../third_party/opus/src/silk/VAD.c\00", align 1
@.str.3 = private unnamed_addr constant [85 x i8] c"assertion failed: psEncC->frame_length == 8 * silk_RSHIFT( psEncC->frame_length, 3 )\00", align 1
@tiltWeights = internal unnamed_addr constant [4 x i32] [i32 30000, i32 6000, i32 -12000, i32 -12000], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_VAD_Init(%struct.silk_VAD_state* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.silk_VAD_state* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 60, i1 false)
  %3 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 8, i64 0
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 50, i32 25, i32 16, i32 12>, <4 x i32>* %4, align 4
  %5 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 6, i64 0
  %6 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 7, i64 0
  %7 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 5000, i32 2500, i32 1600, i32 1200>, <4 x i32>* %7, align 4
  %8 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> <i32 429496, i32 858993, i32 1342177, i32 1789569>, <4 x i32>* %8, align 4
  %9 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 9
  store i32 15, i32* %9, align 4
  %10 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 4, i64 0
  store i32 25600, i32* %10, align 4
  %11 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 4, i64 1
  store i32 25600, i32* %11, align 4
  %12 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 4, i64 2
  store i32 25600, i32* %12, align 4
  %13 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %0, i64 0, i32 4, i64 3
  store i32 25600, i32* %13, align 4
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_VAD_GetSA_Q8_c(%struct.silk_encoder_state*, i16*) local_unnamed_addr #0 {
  %3 = alloca [4 x i32], align 16
  %4 = bitcast [4 x i32]* %3 to i8*
  %5 = alloca [4 x i32], align 16
  %6 = alloca [4 x i32], align 16
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #6
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 2
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 3
  %11 = bitcast [4 x i32]* %5 to i8*
  %12 = bitcast [4 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #6
  %13 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %17 = bitcast [4 x i32]* %6 to i8*
  %18 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #6
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %21 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %22 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %23 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4
  %24 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 21
  %25 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 16, i1 false)
  %26 = load i32, i32* %24, align 8
  %27 = icmp slt i32 %26, 321
  br i1 %27, label %29, label %28

28:                                               ; preds = %2
  tail call void @celt_fatal(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 104) #7
  unreachable

29:                                               ; preds = %2
  %30 = ashr i32 %26, 3
  %31 = and i32 %26, -8
  %32 = icmp eq i32 %26, %31
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void @celt_fatal(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 106) #7
  unreachable

34:                                               ; preds = %29
  %35 = ashr i32 %26, 1
  %36 = ashr i32 %26, 2
  store i32 0, i32* %19, align 16
  %37 = add nsw i32 %30, %36
  store i32 %37, i32* %20, align 4
  %38 = add nsw i32 %37, %30
  store i32 %38, i32* %21, align 8
  %39 = add nsw i32 %38, %36
  store i32 %39, i32* %22, align 4
  %40 = add nsw i32 %39, %35
  %41 = sext i32 %40 to i64
  %42 = shl nsw i64 %41, 1
  %43 = alloca i16, i64 %41, align 16
  %44 = bitcast i16* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 -86, i64 %42, i1 false)
  %45 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %23, i64 0, i32 0, i64 0
  %46 = sext i32 %39 to i64
  %47 = getelementptr inbounds i16, i16* %43, i64 %46
  call void @silk_ana_filt_bank_1(i16* %1, i32* %45, i16* nonnull %43, i16* %47, i32 %26) #6
  %48 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 1, i64 0
  %49 = sext i32 %38 to i64
  %50 = getelementptr inbounds i16, i16* %43, i64 %49
  call void @silk_ana_filt_bank_1(i16* nonnull %43, i32* %48, i16* nonnull %43, i16* %50, i32 %35) #6
  %51 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 2, i64 0
  %52 = sext i32 %37 to i64
  %53 = getelementptr inbounds i16, i16* %43, i64 %52
  call void @silk_ana_filt_bank_1(i16* nonnull %43, i32* %51, i16* nonnull %43, i16* %53, i32 %36) #6
  %54 = add nsw i32 %30, -1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %43, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = ashr i16 %57, 1
  store i16 %58, i16* %56, align 2
  %59 = icmp sgt i32 %54, 0
  br i1 %59, label %60, label %92

60:                                               ; preds = %34
  %61 = add nsw i32 %30, -1
  %62 = sext i32 %61 to i64
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %60
  %66 = add nsw i64 %62, -1
  %67 = getelementptr inbounds i16, i16* %43, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = ashr i16 %68, 1
  store i16 %69, i16* %67, align 2
  %70 = getelementptr inbounds i16, i16* %43, i64 %62
  %71 = sub nsw i16 %58, %69
  store i16 %71, i16* %70, align 2
  br label %72

72:                                               ; preds = %60, %65
  %73 = phi i16 [ %58, %60 ], [ %69, %65 ]
  %74 = phi i64 [ %62, %60 ], [ %66, %65 ]
  %75 = icmp eq i32 %61, 1
  br i1 %75, label %92, label %76

76:                                               ; preds = %72, %76
  %77 = phi i16 [ %88, %76 ], [ %73, %72 ]
  %78 = phi i64 [ %85, %76 ], [ %74, %72 ]
  %79 = add nsw i64 %78, -1
  %80 = getelementptr inbounds i16, i16* %43, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = ashr i16 %81, 1
  store i16 %82, i16* %80, align 2
  %83 = getelementptr inbounds i16, i16* %43, i64 %78
  %84 = sub nsw i16 %77, %82
  store i16 %84, i16* %83, align 2
  %85 = add nsw i64 %78, -2
  %86 = getelementptr inbounds i16, i16* %43, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = ashr i16 %87, 1
  store i16 %88, i16* %86, align 2
  %89 = getelementptr inbounds i16, i16* %43, i64 %79
  %90 = sub nsw i16 %82, %88
  store i16 %90, i16* %89, align 2
  %91 = icmp sgt i64 %85, 0
  br i1 %91, label %76, label %92

92:                                               ; preds = %72, %76, %34
  %93 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 5
  %94 = load i16, i16* %93, align 4
  %95 = load i16, i16* %43, align 16
  %96 = sub i16 %95, %94
  store i16 %96, i16* %43, align 16
  store i16 %58, i16* %93, align 4
  br label %97

97:                                               ; preds = %285, %92
  %98 = phi i64 [ 0, %92 ], [ %290, %285 ]
  %99 = load i32, i32* %24, align 8
  %100 = icmp ugt i64 %98, 1
  %101 = trunc i64 %98 to i32
  %102 = sub i32 4, %101
  %103 = select i1 %100, i32 %102, i32 3
  %104 = ashr i32 %99, %103
  %105 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 3, i64 %98
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %98
  store i32 %106, i32* %107, align 4
  %108 = icmp sgt i32 %104, 3
  br i1 %108, label %109, label %285

109:                                              ; preds = %97
  %110 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %98
  %111 = lshr i32 %104, 2
  %112 = zext i32 %111 to i64
  %113 = load i32, i32* %110, align 4
  %114 = icmp ugt i64 %112, 1
  %115 = select i1 %114, i64 %112, i64 1
  %116 = icmp ult i64 %115, 8
  br i1 %116, label %117, label %120

117:                                              ; preds = %206, %120, %109
  %118 = phi i64 [ 0, %120 ], [ 0, %109 ], [ %130, %206 ]
  %119 = phi i32 [ 0, %120 ], [ 0, %109 ], [ %214, %206 ]
  br label %271

120:                                              ; preds = %109
  %121 = icmp ugt i64 %112, 1
  %122 = select i1 %121, i64 %112, i64 1
  %123 = add nsw i64 %122, -1
  %124 = trunc i64 %123 to i32
  %125 = add i32 %113, %124
  %126 = icmp slt i32 %125, %113
  %127 = icmp ugt i64 %123, 4294967295
  %128 = or i1 %126, %127
  br i1 %128, label %117, label %129

129:                                              ; preds = %120
  %130 = and i64 %115, 1073741816
  %131 = add nsw i64 %130, -8
  %132 = lshr exact i64 %131, 3
  %133 = add nuw nsw i64 %132, 1
  %134 = and i64 %133, 1
  %135 = icmp eq i64 %131, 0
  br i1 %135, label %181, label %136

136:                                              ; preds = %129
  %137 = sub nuw nsw i64 %133, %134
  br label %138

138:                                              ; preds = %138, %136
  %139 = phi i64 [ 0, %136 ], [ %178, %138 ]
  %140 = phi <4 x i32> [ zeroinitializer, %136 ], [ %176, %138 ]
  %141 = phi <4 x i32> [ zeroinitializer, %136 ], [ %177, %138 ]
  %142 = phi i64 [ %137, %136 ], [ %179, %138 ]
  %143 = trunc i64 %139 to i32
  %144 = add i32 %113, %143
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i16, i16* %43, i64 %145
  %147 = bitcast i16* %146 to <4 x i16>*
  %148 = load <4 x i16>, <4 x i16>* %147, align 2
  %149 = getelementptr inbounds i16, i16* %146, i64 4
  %150 = bitcast i16* %149 to <4 x i16>*
  %151 = load <4 x i16>, <4 x i16>* %150, align 2
  %152 = ashr <4 x i16> %148, <i16 3, i16 3, i16 3, i16 3>
  %153 = ashr <4 x i16> %151, <i16 3, i16 3, i16 3, i16 3>
  %154 = sext <4 x i16> %152 to <4 x i32>
  %155 = sext <4 x i16> %153 to <4 x i32>
  %156 = mul nsw <4 x i32> %154, %154
  %157 = mul nsw <4 x i32> %155, %155
  %158 = add nuw nsw <4 x i32> %156, %140
  %159 = add nuw nsw <4 x i32> %157, %141
  %160 = trunc i64 %139 to i32
  %161 = or i32 %160, 8
  %162 = add i32 %113, %161
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i16, i16* %43, i64 %163
  %165 = bitcast i16* %164 to <4 x i16>*
  %166 = load <4 x i16>, <4 x i16>* %165, align 2
  %167 = getelementptr inbounds i16, i16* %164, i64 4
  %168 = bitcast i16* %167 to <4 x i16>*
  %169 = load <4 x i16>, <4 x i16>* %168, align 2
  %170 = ashr <4 x i16> %166, <i16 3, i16 3, i16 3, i16 3>
  %171 = ashr <4 x i16> %169, <i16 3, i16 3, i16 3, i16 3>
  %172 = sext <4 x i16> %170 to <4 x i32>
  %173 = sext <4 x i16> %171 to <4 x i32>
  %174 = mul nsw <4 x i32> %172, %172
  %175 = mul nsw <4 x i32> %173, %173
  %176 = add nuw nsw <4 x i32> %174, %158
  %177 = add nuw nsw <4 x i32> %175, %159
  %178 = add i64 %139, 16
  %179 = add i64 %142, -2
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %138, !llvm.loop !2

181:                                              ; preds = %138, %129
  %182 = phi <4 x i32> [ undef, %129 ], [ %176, %138 ]
  %183 = phi <4 x i32> [ undef, %129 ], [ %177, %138 ]
  %184 = phi i64 [ 0, %129 ], [ %178, %138 ]
  %185 = phi <4 x i32> [ zeroinitializer, %129 ], [ %176, %138 ]
  %186 = phi <4 x i32> [ zeroinitializer, %129 ], [ %177, %138 ]
  %187 = icmp eq i64 %134, 0
  br i1 %187, label %206, label %188

188:                                              ; preds = %181
  %189 = trunc i64 %184 to i32
  %190 = add i32 %113, %189
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i16, i16* %43, i64 %191
  %193 = bitcast i16* %192 to <4 x i16>*
  %194 = load <4 x i16>, <4 x i16>* %193, align 2
  %195 = getelementptr inbounds i16, i16* %192, i64 4
  %196 = bitcast i16* %195 to <4 x i16>*
  %197 = load <4 x i16>, <4 x i16>* %196, align 2
  %198 = ashr <4 x i16> %194, <i16 3, i16 3, i16 3, i16 3>
  %199 = ashr <4 x i16> %197, <i16 3, i16 3, i16 3, i16 3>
  %200 = sext <4 x i16> %198 to <4 x i32>
  %201 = sext <4 x i16> %199 to <4 x i32>
  %202 = mul nsw <4 x i32> %201, %201
  %203 = add nuw nsw <4 x i32> %202, %186
  %204 = mul nsw <4 x i32> %200, %200
  %205 = add nuw nsw <4 x i32> %204, %185
  br label %206

206:                                              ; preds = %181, %188
  %207 = phi <4 x i32> [ %182, %181 ], [ %205, %188 ]
  %208 = phi <4 x i32> [ %183, %181 ], [ %203, %188 ]
  %209 = add nuw <4 x i32> %208, %207
  %210 = shufflevector <4 x i32> %209, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %211 = add <4 x i32> %209, %210
  %212 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %213 = add <4 x i32> %211, %212
  %214 = extractelement <4 x i32> %213, i32 0
  %215 = icmp eq i64 %115, %130
  br i1 %215, label %216, label %117

216:                                              ; preds = %271, %206
  %217 = phi i32 [ %214, %206 ], [ %282, %271 ]
  %218 = add i32 %106, %217
  %219 = icmp ult i32 %218, 2147483647
  %220 = select i1 %219, i32 %218, i32 2147483647
  %221 = icmp ugt i64 %112, 1
  %222 = select i1 %221, i64 %112, i64 1
  %223 = icmp ult i64 %222, 8
  br i1 %223, label %224, label %227

224:                                              ; preds = %263, %227, %216
  %225 = phi i64 [ 0, %227 ], [ 0, %216 ], [ %238, %263 ]
  %226 = phi i32 [ 0, %227 ], [ 0, %216 ], [ %269, %263 ]
  br label %585

227:                                              ; preds = %216
  %228 = icmp ugt i64 %112, 1
  %229 = select i1 %228, i64 %112, i64 1
  %230 = add nsw i64 %229, -1
  %231 = add i32 %113, %111
  %232 = trunc i64 %230 to i32
  %233 = add i32 %231, %232
  %234 = icmp slt i32 %233, %231
  %235 = icmp ugt i64 %230, 4294967295
  %236 = or i1 %234, %235
  br i1 %236, label %224, label %237

237:                                              ; preds = %227
  %238 = and i64 %222, 1073741816
  br label %239

239:                                              ; preds = %239, %237
  %240 = phi i64 [ 0, %237 ], [ %261, %239 ]
  %241 = phi <4 x i32> [ zeroinitializer, %237 ], [ %259, %239 ]
  %242 = phi <4 x i32> [ zeroinitializer, %237 ], [ %260, %239 ]
  %243 = trunc i64 %240 to i32
  %244 = add i32 %111, %243
  %245 = add i32 %244, %113
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i16, i16* %43, i64 %246
  %248 = bitcast i16* %247 to <4 x i16>*
  %249 = load <4 x i16>, <4 x i16>* %248, align 2
  %250 = getelementptr inbounds i16, i16* %247, i64 4
  %251 = bitcast i16* %250 to <4 x i16>*
  %252 = load <4 x i16>, <4 x i16>* %251, align 2
  %253 = ashr <4 x i16> %249, <i16 3, i16 3, i16 3, i16 3>
  %254 = ashr <4 x i16> %252, <i16 3, i16 3, i16 3, i16 3>
  %255 = sext <4 x i16> %253 to <4 x i32>
  %256 = sext <4 x i16> %254 to <4 x i32>
  %257 = mul nsw <4 x i32> %255, %255
  %258 = mul nsw <4 x i32> %256, %256
  %259 = add nuw nsw <4 x i32> %257, %241
  %260 = add nuw nsw <4 x i32> %258, %242
  %261 = add i64 %240, 8
  %262 = icmp eq i64 %261, %238
  br i1 %262, label %263, label %239, !llvm.loop !4

263:                                              ; preds = %239
  %264 = add nuw <4 x i32> %260, %259
  %265 = shufflevector <4 x i32> %264, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %266 = add <4 x i32> %264, %265
  %267 = shufflevector <4 x i32> %266, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %268 = add <4 x i32> %266, %267
  %269 = extractelement <4 x i32> %268, i32 0
  %270 = icmp eq i64 %222, %238
  br i1 %270, label %600, label %224

271:                                              ; preds = %117, %271
  %272 = phi i64 [ %283, %271 ], [ %118, %117 ]
  %273 = phi i32 [ %282, %271 ], [ %119, %117 ]
  %274 = trunc i64 %272 to i32
  %275 = add i32 %113, %274
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i16, i16* %43, i64 %276
  %278 = load i16, i16* %277, align 2
  %279 = ashr i16 %278, 3
  %280 = sext i16 %279 to i32
  %281 = mul nsw i32 %280, %280
  %282 = add nuw nsw i32 %281, %273
  %283 = add nuw nsw i64 %272, 1
  %284 = icmp ult i64 %283, %112
  br i1 %284, label %271, label %216, !llvm.loop !5

285:                                              ; preds = %97, %743
  %286 = phi i32 [ %746, %743 ], [ %106, %97 ]
  %287 = phi i32 [ %744, %743 ], [ 0, %97 ]
  %288 = icmp ult i32 %286, 2147483647
  %289 = select i1 %288, i32 %286, i32 2147483647
  store i32 %289, i32* %107, align 4
  store i32 %287, i32* %105, align 4
  %290 = add nuw nsw i64 %98, 1
  %291 = icmp eq i64 %290, 4
  br i1 %291, label %292, label %97

292:                                              ; preds = %285
  call void @silk_VAD_GetNoiseLevels(i32* nonnull %7, %struct.silk_VAD_state* %23)
  br label %293

293:                                              ; preds = %374, %292
  %294 = phi i64 [ 0, %292 ], [ %377, %374 ]
  %295 = phi i32 [ 0, %292 ], [ %376, %374 ]
  %296 = phi i32 [ 0, %292 ], [ %375, %374 ]
  %297 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %294
  %298 = load i32, i32* %297, align 4
  %299 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 %294
  %300 = load i32, i32* %299, align 4
  %301 = sub nsw i32 %298, %300
  %302 = icmp sgt i32 %301, 0
  br i1 %302, label %303, label %372

303:                                              ; preds = %293
  %304 = icmp ult i32 %298, 8388608
  %305 = ashr i32 %300, 8
  %306 = shl i32 %298, 8
  %307 = select i1 %304, i32 %300, i32 %305
  %308 = select i1 %304, i32 %306, i32 %298
  %309 = add nsw i32 %307, 1
  %310 = sdiv i32 %308, %309
  %311 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %294
  store i32 %310, i32* %311, align 4
  %312 = call i32 @silk_lin2log(i32 %310) #6
  %313 = add nsw i32 %312, -1024
  %314 = shl i32 %313, 16
  %315 = ashr exact i32 %314, 16
  %316 = mul nsw i32 %315, %315
  %317 = add nsw i32 %316, %295
  %318 = icmp slt i32 %301, 1048576
  br i1 %318, label %319, label %360

319:                                              ; preds = %303
  %320 = zext i32 %313 to i64
  %321 = call i32 @llvm.ctlz.i32(i32 %301, i1 false) #6, !range !6
  %322 = sub nsw i32 24, %321
  %323 = add nsw i32 %321, -24
  %324 = icmp eq i32 %322, 0
  br i1 %324, label %337, label %325

325:                                              ; preds = %319
  %326 = icmp ult i32 %301, 128
  br i1 %326, label %327, label %332

327:                                              ; preds = %325
  %328 = shl i32 %301, %323
  %329 = sub nuw nsw i32 56, %321
  %330 = lshr i32 %301, %329
  %331 = or i32 %330, %328
  br label %337

332:                                              ; preds = %325
  %333 = add nuw nsw i32 %321, 8
  %334 = shl i32 %301, %333
  %335 = lshr i32 %301, %322
  %336 = or i32 %334, %335
  br label %337

337:                                              ; preds = %319, %327, %332
  %338 = phi i32 [ %331, %327 ], [ %336, %332 ], [ %301, %319 ]
  %339 = and i32 %338, 127
  %340 = and i32 %321, 1
  %341 = icmp eq i32 %340, 0
  %342 = select i1 %341, i32 46214, i32 32768
  %343 = lshr i32 %321, 1
  %344 = lshr i32 %342, %343
  %345 = sext i32 %344 to i64
  %346 = zext i32 %339 to i64
  %347 = mul nuw nsw i64 %346, 59954170039369728
  %348 = lshr exact i64 %347, 48
  %349 = mul nsw i64 %348, %345
  %350 = lshr i64 %349, 16
  %351 = trunc i64 %350 to i32
  %352 = add i32 %344, %351
  %353 = shl i32 %352, 6
  %354 = sext i32 %353 to i64
  %355 = shl i64 %320, 48
  %356 = ashr exact i64 %355, 48
  %357 = mul nsw i64 %356, %354
  %358 = lshr i64 %357, 16
  %359 = trunc i64 %358 to i32
  br label %360

360:                                              ; preds = %337, %303
  %361 = phi i32 [ %359, %337 ], [ %313, %303 ]
  %362 = getelementptr inbounds [4 x i32], [4 x i32]* @tiltWeights, i64 0, i64 %294
  %363 = load i32, i32* %362, align 4
  %364 = sext i32 %363 to i64
  %365 = zext i32 %361 to i64
  %366 = shl i64 %365, 48
  %367 = ashr exact i64 %366, 48
  %368 = mul nsw i64 %367, %364
  %369 = lshr i64 %368, 16
  %370 = trunc i64 %369 to i32
  %371 = add i32 %296, %370
  br label %374

372:                                              ; preds = %293
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %294
  store i32 256, i32* %373, align 4
  br label %374

374:                                              ; preds = %360, %372
  %375 = phi i32 [ %371, %360 ], [ %296, %372 ]
  %376 = phi i32 [ %317, %360 ], [ %295, %372 ]
  %377 = add nuw nsw i64 %294, 1
  %378 = icmp eq i64 %377, 4
  br i1 %378, label %379, label %293

379:                                              ; preds = %374
  %380 = sdiv i32 %376, 4
  %381 = icmp slt i32 %376, 4
  br i1 %381, label %422, label %382

382:                                              ; preds = %379
  %383 = call i32 @llvm.ctlz.i32(i32 %380, i1 false) #6, !range !6
  %384 = sub nsw i32 24, %383
  %385 = add nsw i32 %383, -24
  %386 = icmp eq i32 %384, 0
  br i1 %386, label %399, label %387

387:                                              ; preds = %382
  %388 = icmp ult i32 %380, 128
  br i1 %388, label %389, label %394

389:                                              ; preds = %387
  %390 = shl i32 %380, %385
  %391 = sub nuw nsw i32 56, %383
  %392 = lshr i32 %380, %391
  %393 = or i32 %392, %390
  br label %399

394:                                              ; preds = %387
  %395 = add nuw nsw i32 %383, 8
  %396 = shl i32 %380, %395
  %397 = lshr i32 %380, %384
  %398 = or i32 %396, %397
  br label %399

399:                                              ; preds = %394, %389, %382
  %400 = phi i32 [ %393, %389 ], [ %398, %394 ], [ %380, %382 ]
  %401 = and i32 %400, 127
  %402 = and i32 %383, 1
  %403 = icmp eq i32 %402, 0
  %404 = select i1 %403, i32 46214, i32 32768
  %405 = lshr i32 %383, 1
  %406 = lshr i32 %404, %405
  %407 = sext i32 %406 to i64
  %408 = zext i32 %401 to i64
  %409 = mul nuw nsw i64 %408, 59954170039369728
  %410 = lshr exact i64 %409, 48
  %411 = mul nsw i64 %410, %407
  %412 = lshr i64 %411, 16
  %413 = trunc i64 %412 to i32
  %414 = add i32 %406, %413
  %415 = zext i32 %414 to i64
  %416 = mul i64 %415, 844424930131968
  %417 = ashr exact i64 %416, 48
  %418 = mul nsw i64 %417, 45000
  %419 = ashr i64 %418, 16
  %420 = trunc i64 %419 to i32
  %421 = add nsw i32 %420, -128
  br label %422

422:                                              ; preds = %379, %399
  %423 = phi i32 [ %421, %399 ], [ -128, %379 ]
  %424 = call i32 @silk_sigm_Q15(i32 %423) #6
  %425 = call i32 @silk_sigm_Q15(i32 %375) #6
  %426 = shl i32 %425, 1
  %427 = add i32 %426, -32768
  %428 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 50
  store i32 %427, i32* %428, align 8
  %429 = load i32, i32* %7, align 16
  %430 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 0
  %431 = load i32, i32* %430, align 4
  %432 = sub nsw i32 %429, %431
  %433 = ashr i32 %432, 4
  %434 = load i32, i32* %8, align 4
  %435 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 1
  %436 = load i32, i32* %435, align 4
  %437 = sub nsw i32 %434, %436
  %438 = ashr i32 %437, 4
  %439 = shl nsw i32 %438, 1
  %440 = add nsw i32 %439, %433
  %441 = load i32, i32* %9, align 8
  %442 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 2
  %443 = load i32, i32* %442, align 4
  %444 = sub nsw i32 %441, %443
  %445 = ashr i32 %444, 4
  %446 = mul nsw i32 %445, 3
  %447 = add nsw i32 %446, %440
  %448 = load i32, i32* %10, align 4
  %449 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 6, i64 3
  %450 = load i32, i32* %449, align 4
  %451 = sub nsw i32 %448, %450
  %452 = ashr i32 %451, 4
  %453 = shl nsw i32 %452, 2
  %454 = add nsw i32 %453, %447
  %455 = load i32, i32* %24, align 8
  %456 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 19
  %457 = load i32, i32* %456, align 8
  %458 = mul nsw i32 %457, 20
  %459 = icmp eq i32 %455, %458
  %460 = zext i1 %459 to i32
  %461 = ashr i32 %454, %460
  %462 = icmp slt i32 %461, 1
  br i1 %462, label %463, label %465

463:                                              ; preds = %422
  %464 = ashr i32 %424, 1
  br label %505

465:                                              ; preds = %422
  %466 = icmp slt i32 %461, 16384
  br i1 %466, label %467, label %505

467:                                              ; preds = %465
  %468 = shl i32 %461, 16
  %469 = icmp slt i32 %468, 1
  br i1 %469, label %497, label %470

470:                                              ; preds = %467
  %471 = call i32 @llvm.ctlz.i32(i32 %468, i1 false) #6, !range !6
  %472 = sub nsw i32 24, %471
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %479, label %474

474:                                              ; preds = %470
  %475 = add nuw nsw i32 %471, 8
  %476 = shl i32 %468, %475
  %477 = lshr i32 %468, %472
  %478 = or i32 %476, %477
  br label %479

479:                                              ; preds = %474, %470
  %480 = phi i32 [ %478, %474 ], [ %468, %470 ]
  %481 = and i32 %480, 127
  %482 = and i32 %471, 1
  %483 = icmp eq i32 %482, 0
  %484 = select i1 %483, i32 46214, i32 32768
  %485 = lshr i32 %471, 1
  %486 = lshr i32 %484, %485
  %487 = sext i32 %486 to i64
  %488 = zext i32 %481 to i64
  %489 = mul nuw nsw i64 %488, 59954170039369728
  %490 = lshr exact i64 %489, 48
  %491 = mul nsw i64 %490, %487
  %492 = lshr i64 %491, 16
  %493 = trunc i64 %492 to i32
  %494 = add nuw nsw i32 %486, 32768
  %495 = add nuw nsw i32 %494, %493
  %496 = sext i32 %495 to i64
  br label %497

497:                                              ; preds = %467, %479
  %498 = phi i64 [ %496, %479 ], [ 32768, %467 ]
  %499 = zext i32 %424 to i64
  %500 = shl i64 %499, 48
  %501 = ashr exact i64 %500, 48
  %502 = mul nsw i64 %498, %501
  %503 = lshr i64 %502, 16
  %504 = trunc i64 %503 to i32
  br label %505

505:                                              ; preds = %465, %497, %463
  %506 = phi i32 [ %464, %463 ], [ %504, %497 ], [ %424, %465 ]
  %507 = ashr i32 %506, 7
  %508 = icmp slt i32 %507, 255
  %509 = select i1 %508, i32 %507, i32 255
  %510 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 7
  store i32 %509, i32* %510, align 4
  %511 = zext i32 %506 to i64
  %512 = shl i64 %511, 48
  %513 = ashr exact i64 %512, 48
  %514 = shl nuw i64 %511, 32
  %515 = mul i64 %514, %513
  %516 = ashr i64 %515, 52
  %517 = trunc i64 %516 to i32
  %518 = mul nsw i32 %457, 10
  %519 = icmp eq i32 %455, %518
  %520 = zext i1 %519 to i32
  %521 = ashr i32 %517, %520
  %522 = zext i32 %521 to i64
  %523 = shl i64 %522, 48
  %524 = ashr exact i64 %523, 48
  %525 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 0
  %526 = load i32, i32* %525, align 4
  %527 = load i32, i32* %13, align 16
  %528 = sub nsw i32 %527, %526
  %529 = sext i32 %528 to i64
  %530 = mul nsw i64 %524, %529
  %531 = lshr i64 %530, 16
  %532 = trunc i64 %531 to i32
  %533 = add i32 %526, %532
  store i32 %533, i32* %525, align 4
  %534 = call i32 @silk_lin2log(i32 %533) #6
  %535 = mul i32 %534, 3
  %536 = add i32 %535, -5120
  %537 = ashr i32 %536, 4
  %538 = call i32 @silk_sigm_Q15(i32 %537) #6
  %539 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 0
  store i32 %538, i32* %539, align 4
  %540 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 1
  %541 = load i32, i32* %540, align 4
  %542 = load i32, i32* %14, align 4
  %543 = sub nsw i32 %542, %541
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %524, %544
  %546 = lshr i64 %545, 16
  %547 = trunc i64 %546 to i32
  %548 = add i32 %541, %547
  store i32 %548, i32* %540, align 4
  %549 = call i32 @silk_lin2log(i32 %548) #6
  %550 = mul i32 %549, 3
  %551 = add i32 %550, -5120
  %552 = ashr i32 %551, 4
  %553 = call i32 @silk_sigm_Q15(i32 %552) #6
  %554 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 1
  store i32 %553, i32* %554, align 4
  %555 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 2
  %556 = load i32, i32* %555, align 4
  %557 = load i32, i32* %15, align 8
  %558 = sub nsw i32 %557, %556
  %559 = sext i32 %558 to i64
  %560 = mul nsw i64 %524, %559
  %561 = lshr i64 %560, 16
  %562 = trunc i64 %561 to i32
  %563 = add i32 %556, %562
  store i32 %563, i32* %555, align 4
  %564 = call i32 @silk_lin2log(i32 %563) #6
  %565 = mul i32 %564, 3
  %566 = add i32 %565, -5120
  %567 = ashr i32 %566, 4
  %568 = call i32 @silk_sigm_Q15(i32 %567) #6
  %569 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 2
  store i32 %568, i32* %569, align 4
  %570 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 4, i32 4, i64 3
  %571 = load i32, i32* %570, align 4
  %572 = load i32, i32* %16, align 4
  %573 = sub nsw i32 %572, %571
  %574 = sext i32 %573 to i64
  %575 = mul nsw i64 %524, %574
  %576 = lshr i64 %575, 16
  %577 = trunc i64 %576 to i32
  %578 = add i32 %571, %577
  store i32 %578, i32* %570, align 4
  %579 = call i32 @silk_lin2log(i32 %578) #6
  %580 = mul i32 %579, 3
  %581 = add i32 %580, -5120
  %582 = ashr i32 %581, 4
  %583 = call i32 @silk_sigm_Q15(i32 %582) #6
  %584 = getelementptr inbounds %struct.silk_encoder_state, %struct.silk_encoder_state* %0, i64 0, i32 49, i64 3
  store i32 %583, i32* %584, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #6
  ret i32 0

585:                                              ; preds = %224, %585
  %586 = phi i64 [ %598, %585 ], [ %225, %224 ]
  %587 = phi i32 [ %597, %585 ], [ %226, %224 ]
  %588 = trunc i64 %586 to i32
  %589 = add i32 %111, %588
  %590 = add i32 %589, %113
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds i16, i16* %43, i64 %591
  %593 = load i16, i16* %592, align 2
  %594 = ashr i16 %593, 3
  %595 = sext i16 %594 to i32
  %596 = mul nsw i32 %595, %595
  %597 = add nuw nsw i32 %596, %587
  %598 = add nuw nsw i64 %586, 1
  %599 = icmp ult i64 %598, %112
  br i1 %599, label %585, label %600, !llvm.loop !7

600:                                              ; preds = %585, %263
  %601 = phi i32 [ %269, %263 ], [ %597, %585 ]
  %602 = add nuw i32 %220, %601
  %603 = icmp ult i32 %602, 2147483647
  %604 = select i1 %603, i32 %602, i32 2147483647
  %605 = shl nuw nsw i32 %111, 1
  %606 = icmp ugt i64 %112, 1
  %607 = select i1 %606, i64 %112, i64 1
  %608 = icmp ult i64 %607, 8
  br i1 %608, label %653, label %609

609:                                              ; preds = %600
  %610 = icmp ugt i64 %112, 1
  %611 = select i1 %610, i64 %112, i64 1
  %612 = add nsw i64 %611, -1
  %613 = add i32 %113, %605
  %614 = trunc i64 %612 to i32
  %615 = add i32 %613, %614
  %616 = icmp slt i32 %615, %613
  %617 = icmp ugt i64 %612, 4294967295
  %618 = or i1 %616, %617
  br i1 %618, label %653, label %619

619:                                              ; preds = %609
  %620 = and i64 %607, 1073741816
  br label %621

621:                                              ; preds = %621, %619
  %622 = phi i64 [ 0, %619 ], [ %643, %621 ]
  %623 = phi <4 x i32> [ zeroinitializer, %619 ], [ %641, %621 ]
  %624 = phi <4 x i32> [ zeroinitializer, %619 ], [ %642, %621 ]
  %625 = trunc i64 %622 to i32
  %626 = add i32 %605, %625
  %627 = add i32 %113, %626
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i16, i16* %43, i64 %628
  %630 = bitcast i16* %629 to <4 x i16>*
  %631 = load <4 x i16>, <4 x i16>* %630, align 2
  %632 = getelementptr inbounds i16, i16* %629, i64 4
  %633 = bitcast i16* %632 to <4 x i16>*
  %634 = load <4 x i16>, <4 x i16>* %633, align 2
  %635 = ashr <4 x i16> %631, <i16 3, i16 3, i16 3, i16 3>
  %636 = ashr <4 x i16> %634, <i16 3, i16 3, i16 3, i16 3>
  %637 = sext <4 x i16> %635 to <4 x i32>
  %638 = sext <4 x i16> %636 to <4 x i32>
  %639 = mul nsw <4 x i32> %637, %637
  %640 = mul nsw <4 x i32> %638, %638
  %641 = add nuw nsw <4 x i32> %639, %623
  %642 = add nuw nsw <4 x i32> %640, %624
  %643 = add i64 %622, 8
  %644 = icmp eq i64 %643, %620
  br i1 %644, label %645, label %621, !llvm.loop !8

645:                                              ; preds = %621
  %646 = add nuw <4 x i32> %642, %641
  %647 = shufflevector <4 x i32> %646, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %648 = add <4 x i32> %646, %647
  %649 = shufflevector <4 x i32> %648, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %650 = add <4 x i32> %648, %649
  %651 = extractelement <4 x i32> %650, i32 0
  %652 = icmp eq i64 %607, %620
  br i1 %652, label %671, label %653

653:                                              ; preds = %645, %609, %600
  %654 = phi i64 [ 0, %609 ], [ 0, %600 ], [ %620, %645 ]
  %655 = phi i32 [ 0, %609 ], [ 0, %600 ], [ %651, %645 ]
  br label %656

656:                                              ; preds = %653, %656
  %657 = phi i64 [ %669, %656 ], [ %654, %653 ]
  %658 = phi i32 [ %668, %656 ], [ %655, %653 ]
  %659 = trunc i64 %657 to i32
  %660 = add i32 %605, %659
  %661 = add i32 %113, %660
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds i16, i16* %43, i64 %662
  %664 = load i16, i16* %663, align 2
  %665 = ashr i16 %664, 3
  %666 = sext i16 %665 to i32
  %667 = mul nsw i32 %666, %666
  %668 = add nuw nsw i32 %667, %658
  %669 = add nuw nsw i64 %657, 1
  %670 = icmp ult i64 %669, %112
  br i1 %670, label %656, label %671, !llvm.loop !9

671:                                              ; preds = %656, %645
  %672 = phi i32 [ %651, %645 ], [ %668, %656 ]
  %673 = add nuw i32 %604, %672
  %674 = icmp ult i32 %673, 2147483647
  %675 = select i1 %674, i32 %673, i32 2147483647
  %676 = mul nuw nsw i64 %112, 3
  %677 = icmp ugt i64 %112, 1
  %678 = select i1 %677, i64 %112, i64 1
  %679 = icmp ult i64 %678, 8
  br i1 %679, label %725, label %680

680:                                              ; preds = %671
  %681 = icmp ugt i64 %112, 1
  %682 = select i1 %681, i64 %112, i64 1
  %683 = add nsw i64 %682, -1
  %684 = mul nuw i32 %111, 3
  %685 = add i32 %113, %684
  %686 = trunc i64 %683 to i32
  %687 = add i32 %685, %686
  %688 = icmp slt i32 %687, %685
  %689 = icmp ugt i64 %683, 4294967295
  %690 = or i1 %688, %689
  br i1 %690, label %725, label %691

691:                                              ; preds = %680
  %692 = and i64 %678, 1073741816
  br label %693

693:                                              ; preds = %693, %691
  %694 = phi i64 [ 0, %691 ], [ %715, %693 ]
  %695 = phi <4 x i32> [ zeroinitializer, %691 ], [ %713, %693 ]
  %696 = phi <4 x i32> [ zeroinitializer, %691 ], [ %714, %693 ]
  %697 = add nuw nsw i64 %694, %676
  %698 = trunc i64 %697 to i32
  %699 = add i32 %113, %698
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds i16, i16* %43, i64 %700
  %702 = bitcast i16* %701 to <4 x i16>*
  %703 = load <4 x i16>, <4 x i16>* %702, align 2
  %704 = getelementptr inbounds i16, i16* %701, i64 4
  %705 = bitcast i16* %704 to <4 x i16>*
  %706 = load <4 x i16>, <4 x i16>* %705, align 2
  %707 = ashr <4 x i16> %703, <i16 3, i16 3, i16 3, i16 3>
  %708 = ashr <4 x i16> %706, <i16 3, i16 3, i16 3, i16 3>
  %709 = sext <4 x i16> %707 to <4 x i32>
  %710 = sext <4 x i16> %708 to <4 x i32>
  %711 = mul nsw <4 x i32> %709, %709
  %712 = mul nsw <4 x i32> %710, %710
  %713 = add nuw nsw <4 x i32> %711, %695
  %714 = add nuw nsw <4 x i32> %712, %696
  %715 = add i64 %694, 8
  %716 = icmp eq i64 %715, %692
  br i1 %716, label %717, label %693, !llvm.loop !10

717:                                              ; preds = %693
  %718 = add nuw <4 x i32> %714, %713
  %719 = shufflevector <4 x i32> %718, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %720 = add <4 x i32> %718, %719
  %721 = shufflevector <4 x i32> %720, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %722 = add <4 x i32> %720, %721
  %723 = extractelement <4 x i32> %722, i32 0
  %724 = icmp eq i64 %678, %692
  br i1 %724, label %743, label %725

725:                                              ; preds = %717, %680, %671
  %726 = phi i64 [ 0, %680 ], [ 0, %671 ], [ %692, %717 ]
  %727 = phi i32 [ 0, %680 ], [ 0, %671 ], [ %723, %717 ]
  br label %728

728:                                              ; preds = %725, %728
  %729 = phi i64 [ %741, %728 ], [ %726, %725 ]
  %730 = phi i32 [ %740, %728 ], [ %727, %725 ]
  %731 = add nuw nsw i64 %729, %676
  %732 = trunc i64 %731 to i32
  %733 = add i32 %113, %732
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds i16, i16* %43, i64 %734
  %736 = load i16, i16* %735, align 2
  %737 = ashr i16 %736, 3
  %738 = sext i16 %737 to i32
  %739 = mul nsw i32 %738, %738
  %740 = add nuw nsw i32 %739, %730
  %741 = add nuw nsw i64 %729, 1
  %742 = icmp ult i64 %741, %112
  br i1 %742, label %728, label %743, !llvm.loop !11

743:                                              ; preds = %728, %717
  %744 = phi i32 [ %723, %717 ], [ %740, %728 ]
  %745 = lshr i32 %744, 1
  %746 = add nuw i32 %675, %745
  br label %285
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_ana_filt_bank_1(i16*, i32*, i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_VAD_GetNoiseLevels(i32* nocapture readonly, %struct.silk_VAD_state* nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 9
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 1000
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = ashr i32 %4, 4
  %8 = add nsw i32 %7, 1
  %9 = sdiv i32 32767, %8
  %10 = add nsw i32 %4, 1
  store i32 %10, i32* %3, align 4
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi i32 [ %9, %6 ], [ 0, %2 ]
  %13 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 6, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* %0, align 4
  %16 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 8, i64 0
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, %15
  %19 = icmp ult i32 %18, 2147483647
  %20 = select i1 %19, i32 %18, i32 2147483647
  %21 = udiv i32 2147483647, %20
  %22 = shl i32 %14, 3
  %23 = icmp sgt i32 %20, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %11
  %25 = icmp slt i32 %20, %14
  br i1 %25, label %33, label %26

26:                                               ; preds = %24
  %27 = zext i32 %21 to i64
  %28 = sext i32 %14 to i64
  %29 = shl nsw i64 %28, 16
  %30 = mul i64 %29, %27
  %31 = ashr i64 %30, 37
  %32 = trunc i64 %31 to i32
  br label %33

33:                                               ; preds = %24, %11, %26
  %34 = phi i32 [ %32, %26 ], [ 128, %11 ], [ 1024, %24 ]
  %35 = icmp sgt i32 %34, %12
  %36 = select i1 %35, i32 %34, i32 %12
  %37 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 7, i64 0
  %38 = load i32, i32* %37, align 4
  %39 = sub nsw i32 %21, %38
  %40 = sext i32 %39 to i64
  %41 = zext i32 %36 to i64
  %42 = shl i64 %41, 48
  %43 = ashr exact i64 %42, 48
  %44 = mul nsw i64 %43, %40
  %45 = lshr i64 %44, 16
  %46 = trunc i64 %45 to i32
  %47 = add i32 %38, %46
  store i32 %47, i32* %37, align 4
  %48 = sdiv i32 2147483647, %47
  %49 = icmp slt i32 %48, 16777215
  %50 = select i1 %49, i32 %48, i32 16777215
  store i32 %50, i32* %13, align 4
  %51 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 6, i64 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds i32, i32* %0, i64 1
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 8, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = add i32 %56, %54
  %58 = icmp ult i32 %57, 2147483647
  %59 = select i1 %58, i32 %57, i32 2147483647
  %60 = udiv i32 2147483647, %59
  %61 = shl i32 %52, 3
  %62 = icmp sgt i32 %59, %61
  br i1 %62, label %72, label %63

63:                                               ; preds = %33
  %64 = icmp slt i32 %59, %52
  br i1 %64, label %72, label %65

65:                                               ; preds = %63
  %66 = zext i32 %60 to i64
  %67 = sext i32 %52 to i64
  %68 = shl nsw i64 %67, 16
  %69 = mul i64 %68, %66
  %70 = ashr i64 %69, 37
  %71 = trunc i64 %70 to i32
  br label %72

72:                                               ; preds = %65, %63, %33
  %73 = phi i32 [ %71, %65 ], [ 128, %33 ], [ 1024, %63 ]
  %74 = icmp sgt i32 %73, %12
  %75 = select i1 %74, i32 %73, i32 %12
  %76 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 7, i64 1
  %77 = load i32, i32* %76, align 4
  %78 = sub nsw i32 %60, %77
  %79 = sext i32 %78 to i64
  %80 = zext i32 %75 to i64
  %81 = shl i64 %80, 48
  %82 = ashr exact i64 %81, 48
  %83 = mul nsw i64 %82, %79
  %84 = lshr i64 %83, 16
  %85 = trunc i64 %84 to i32
  %86 = add i32 %77, %85
  store i32 %86, i32* %76, align 4
  %87 = sdiv i32 2147483647, %86
  %88 = icmp slt i32 %87, 16777215
  %89 = select i1 %88, i32 %87, i32 16777215
  store i32 %89, i32* %51, align 4
  %90 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 6, i64 2
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds i32, i32* %0, i64 2
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 8, i64 2
  %95 = load i32, i32* %94, align 4
  %96 = add i32 %95, %93
  %97 = icmp ult i32 %96, 2147483647
  %98 = select i1 %97, i32 %96, i32 2147483647
  %99 = udiv i32 2147483647, %98
  %100 = shl i32 %91, 3
  %101 = icmp sgt i32 %98, %100
  br i1 %101, label %111, label %102

102:                                              ; preds = %72
  %103 = icmp slt i32 %98, %91
  br i1 %103, label %111, label %104

104:                                              ; preds = %102
  %105 = zext i32 %99 to i64
  %106 = sext i32 %91 to i64
  %107 = shl nsw i64 %106, 16
  %108 = mul i64 %107, %105
  %109 = ashr i64 %108, 37
  %110 = trunc i64 %109 to i32
  br label %111

111:                                              ; preds = %104, %102, %72
  %112 = phi i32 [ %110, %104 ], [ 128, %72 ], [ 1024, %102 ]
  %113 = icmp sgt i32 %112, %12
  %114 = select i1 %113, i32 %112, i32 %12
  %115 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 7, i64 2
  %116 = load i32, i32* %115, align 4
  %117 = sub nsw i32 %99, %116
  %118 = sext i32 %117 to i64
  %119 = zext i32 %114 to i64
  %120 = shl i64 %119, 48
  %121 = ashr exact i64 %120, 48
  %122 = mul nsw i64 %121, %118
  %123 = lshr i64 %122, 16
  %124 = trunc i64 %123 to i32
  %125 = add i32 %116, %124
  store i32 %125, i32* %115, align 4
  %126 = sdiv i32 2147483647, %125
  %127 = icmp slt i32 %126, 16777215
  %128 = select i1 %127, i32 %126, i32 16777215
  store i32 %128, i32* %90, align 4
  %129 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 6, i64 3
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds i32, i32* %0, i64 3
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 8, i64 3
  %134 = load i32, i32* %133, align 4
  %135 = add i32 %134, %132
  %136 = icmp ult i32 %135, 2147483647
  %137 = select i1 %136, i32 %135, i32 2147483647
  %138 = udiv i32 2147483647, %137
  %139 = shl i32 %130, 3
  %140 = icmp sgt i32 %137, %139
  br i1 %140, label %150, label %141

141:                                              ; preds = %111
  %142 = icmp slt i32 %137, %130
  br i1 %142, label %150, label %143

143:                                              ; preds = %141
  %144 = zext i32 %138 to i64
  %145 = sext i32 %130 to i64
  %146 = shl nsw i64 %145, 16
  %147 = mul i64 %146, %144
  %148 = ashr i64 %147, 37
  %149 = trunc i64 %148 to i32
  br label %150

150:                                              ; preds = %143, %141, %111
  %151 = phi i32 [ %149, %143 ], [ 128, %111 ], [ 1024, %141 ]
  %152 = icmp sgt i32 %151, %12
  %153 = select i1 %152, i32 %151, i32 %12
  %154 = getelementptr inbounds %struct.silk_VAD_state, %struct.silk_VAD_state* %1, i64 0, i32 7, i64 3
  %155 = load i32, i32* %154, align 4
  %156 = sub nsw i32 %138, %155
  %157 = sext i32 %156 to i64
  %158 = zext i32 %153 to i64
  %159 = shl i64 %158, 48
  %160 = ashr exact i64 %159, 48
  %161 = mul nsw i64 %160, %157
  %162 = lshr i64 %161, 16
  %163 = trunc i64 %162 to i32
  %164 = add i32 %155, %163
  store i32 %164, i32* %154, align 4
  %165 = sdiv i32 2147483647, %164
  %166 = icmp slt i32 %165, 16777215
  %167 = select i1 %166, i32 %165, i32 16777215
  store i32 %167, i32* %129, align 4
  ret void
}

declare i32 @silk_lin2log(i32) local_unnamed_addr #3

declare i32 @silk_sigm_Q15(i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = !{i32 0, i32 33}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
