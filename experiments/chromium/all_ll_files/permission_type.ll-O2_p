; ModuleID = '../../content/public/browser/permission_type.cc'
source_filename = "../../content/public/browser/permission_type.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [24 x i8] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.blink::mojom::PermissionDescriptor"* }
%"class.blink::mojom::PermissionDescriptor" = type { i32, %"class.mojo::StructPtr.3" }
%"class.mojo::StructPtr.3" = type { %"class.std::__1::unique_ptr.4" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.blink::mojom::PermissionDescriptorExtension"* }
%"class.blink::mojom::PermissionDescriptorExtension" = type { i32, %"union.blink::mojom::PermissionDescriptorExtension::Union_" }
%"union.blink::mojom::PermissionDescriptorExtension::Union_" = type { %"class.mojo::InlinedStructPtr"* }
%"class.mojo::InlinedStructPtr" = type { %"class.blink::mojom::MidiPermissionDescriptor", i32 }
%"class.blink::mojom::MidiPermissionDescriptor" = type { i8 }
%"class.mojo::InlinedStructPtr.8" = type { %"class.blink::mojom::CameraDevicePermissionDescriptor", i32 }
%"class.blink::mojom::CameraDevicePermissionDescriptor" = type { i8 }
%"class.mojo::InlinedStructPtr.7" = type { %"class.blink::mojom::ClipboardPermissionDescriptor", i32 }
%"class.blink::mojom::ClipboardPermissionDescriptor" = type { i8, i8 }

@_ZZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes = internal global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::vector"* @_ZN7content21GetAllPermissionTypesEv() local_unnamed_addr #0 {
  %1 = alloca %"class.std::__1::vector", align 8
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %82, !prof !2

4:                                                ; preds = %0
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes) #8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %82, label %7

7:                                                ; preds = %4
  %8 = bitcast %"class.std::__1::vector"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast i32** %10 to i64*
  %12 = bitcast %"class.std::__1::vector"* %1 to i64*
  %13 = bitcast i32** %9 to i64*
  %14 = tail call i8* @_Znwm(i64 116) #9, !noalias !3
  %15 = ptrtoint i8* %14 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 116
  %17 = ptrtoint i8* %16 to i64
  store i64 %15, i64* %12, align 8, !alias.scope !3
  store i64 %15, i64* %13, align 8, !alias.scope !3
  store i64 %17, i64* %11, align 8, !alias.scope !3
  %18 = bitcast i8* %14 to i32*
  br label %19

19:                                               ; preds = %73, %7
  %20 = phi i64 [ %15, %7 ], [ %74, %73 ]
  %21 = phi i32* [ %18, %7 ], [ %75, %73 ]
  %22 = phi i32 [ 1, %7 ], [ %76, %73 ]
  switch i32 %22, label %23 [
    i32 15, label %73
    i32 14, label %73
    i32 11, label %73
    i32 2, label %73
  ]

23:                                               ; preds = %19
  %24 = load i32*, i32** %10, align 8, !alias.scope !3
  %25 = icmp ult i32* %21, %24
  %26 = ptrtoint i32* %24 to i64
  br i1 %25, label %27, label %30

27:                                               ; preds = %23
  store i32 %22, i32* %21, align 4
  %28 = getelementptr inbounds i32, i32* %21, i64 1
  %29 = ptrtoint i32* %28 to i64
  store i64 %29, i64* %13, align 8, !alias.scope !3
  br label %73

30:                                               ; preds = %23
  %31 = ptrtoint i32* %21 to i64
  %32 = load i64, i64* %12, align 8, !alias.scope !3
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 2
  %35 = add nsw i64 %34, 1
  %36 = icmp ugt i64 %35, 4611686018427387903
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %38) #10
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %26, %32
  %41 = ashr exact i64 %40, 2
  %42 = icmp ult i64 %41, 2305843009213693951
  br i1 %42, label %43, label %51

43:                                               ; preds = %39
  %44 = ashr exact i64 %40, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %56, label %48

48:                                               ; preds = %43
  %49 = icmp ugt i64 %46, 4611686018427387903
  br i1 %49, label %50, label %51

50:                                               ; preds = %48
  tail call void @abort() #10
  unreachable

51:                                               ; preds = %48, %39
  %52 = phi i64 [ %46, %48 ], [ 4611686018427387903, %39 ]
  %53 = shl i64 %52, 2
  %54 = tail call i8* @_Znwm(i64 %53) #9
  %55 = bitcast i8* %54 to i32*
  br label %56

56:                                               ; preds = %51, %43
  %57 = phi i64 [ %52, %51 ], [ 0, %43 ]
  %58 = phi i8* [ %54, %51 ], [ null, %43 ]
  %59 = phi i32* [ %55, %51 ], [ null, %43 ]
  %60 = getelementptr inbounds i32, i32* %59, i64 %34
  %61 = getelementptr inbounds i32, i32* %59, i64 %57
  %62 = ptrtoint i32* %61 to i64
  store i32 %22, i32* %60, align 4, !noalias !3
  %63 = getelementptr inbounds i32, i32* %60, i64 1
  %64 = ptrtoint i32* %63 to i64
  %65 = ptrtoint i32* %59 to i64
  %66 = icmp sgt i64 %33, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %56
  %68 = inttoptr i64 %32 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %68, i64 %33, i1 false) #8
  br label %69

69:                                               ; preds = %67, %56
  store i64 %65, i64* %12, align 8, !alias.scope !3
  store i64 %64, i64* %13, align 8, !alias.scope !3
  store i64 %62, i64* %11, align 8, !alias.scope !3
  %70 = icmp eq i64 %32, 0
  br i1 %70, label %73, label %71

71:                                               ; preds = %69
  %72 = inttoptr i64 %32 to i8*
  tail call void @_ZdlPv(i8* %72) #9
  br label %73

73:                                               ; preds = %71, %69, %27, %19, %19, %19, %19
  %74 = phi i64 [ %64, %71 ], [ %64, %69 ], [ %29, %27 ], [ %20, %19 ], [ %20, %19 ], [ %20, %19 ], [ %20, %19 ]
  %75 = phi i32* [ %63, %71 ], [ %63, %69 ], [ %28, %27 ], [ %21, %19 ], [ %21, %19 ], [ %21, %19 ], [ %21, %19 ]
  %76 = add nuw nsw i32 %22, 1
  %77 = icmp eq i32 %76, 33
  br i1 %77, label %78, label %19

78:                                               ; preds = %73
  %79 = load i64, i64* %12, align 8
  store i64 %79, i64* bitcast (%"class.base::NoDestructor"* @_ZZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes to i64*), align 8
  store i64 %74, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes, i64 0, i32 0, i64 8) to i64*), align 8
  %80 = load i64, i64* %11, align 8
  store i64 %80, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes, i64 0, i32 0, i64 16) to i64*), align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8
  %81 = tail call {}* @llvm.invariant.start.p0i8(i64 24, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes, i64 0, i32 0, i64 0))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes) #8
  br label %82

82:                                               ; preds = %4, %78, %0
  ret %"class.std::__1::vector"* bitcast (%"class.base::NoDestructor"* @_ZZN7content21GetAllPermissionTypesEvE19kAllPermissionTypes to %"class.std::__1::vector"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN7content36PermissionDescriptorToPermissionTypeERKN4mojo9StructPtrIN5blink5mojom20PermissionDescriptorEEE(%"class.mojo::StructPtr"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::mojom::PermissionDescriptor"*, %"class.blink::mojom::PermissionDescriptor"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptor", %"class.blink::mojom::PermissionDescriptor"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %73 [
    i32 0, label %74
    i32 1, label %6
    i32 2, label %7
    i32 3, label %22
    i32 4, label %23
    i32 5, label %24
    i32 6, label %25
    i32 7, label %41
    i32 8, label %42
    i32 9, label %43
    i32 10, label %44
    i32 11, label %45
    i32 12, label %61
    i32 13, label %62
    i32 14, label %63
    i32 15, label %64
    i32 16, label %65
    i32 17, label %66
    i32 18, label %67
    i32 19, label %68
    i32 20, label %69
    i32 21, label %70
    i32 22, label %71
    i32 23, label %72
  ]

6:                                                ; preds = %1
  br label %74

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptor", %"class.blink::mojom::PermissionDescriptor"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::mojom::PermissionDescriptorExtension"*, %"class.blink::mojom::PermissionDescriptorExtension"** %8, align 8
  %10 = icmp eq %"class.blink::mojom::PermissionDescriptorExtension"* %9, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptorExtension", %"class.blink::mojom::PermissionDescriptorExtension"* %9, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptorExtension", %"class.blink::mojom::PermissionDescriptorExtension"* %9, i64 0, i32 1, i32 0
  %17 = load %"class.mojo::InlinedStructPtr"*, %"class.mojo::InlinedStructPtr"** %16, align 8
  %18 = getelementptr inbounds %"class.mojo::InlinedStructPtr", %"class.mojo::InlinedStructPtr"* %17, i64 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 1, !range !6
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %74

21:                                               ; preds = %7, %15, %11
  br label %74

22:                                               ; preds = %1
  br label %74

23:                                               ; preds = %1
  br label %74

24:                                               ; preds = %1
  br label %74

25:                                               ; preds = %1
  %26 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptor", %"class.blink::mojom::PermissionDescriptor"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::mojom::PermissionDescriptorExtension"*, %"class.blink::mojom::PermissionDescriptorExtension"** %26, align 8
  %28 = icmp eq %"class.blink::mojom::PermissionDescriptorExtension"* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptorExtension", %"class.blink::mojom::PermissionDescriptorExtension"* %27, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %33, label %40

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptorExtension", %"class.blink::mojom::PermissionDescriptorExtension"* %27, i64 0, i32 1
  %35 = bitcast %"union.blink::mojom::PermissionDescriptorExtension::Union_"* %34 to %"class.mojo::InlinedStructPtr.8"**
  %36 = load %"class.mojo::InlinedStructPtr.8"*, %"class.mojo::InlinedStructPtr.8"** %35, align 8
  %37 = getelementptr inbounds %"class.mojo::InlinedStructPtr.8", %"class.mojo::InlinedStructPtr.8"* %36, i64 0, i32 0, i32 0
  %38 = load i8, i8* %37, align 1, !range !6
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %74

40:                                               ; preds = %25, %33, %29
  br label %74

41:                                               ; preds = %1
  br label %74

42:                                               ; preds = %1
  br label %74

43:                                               ; preds = %1
  br label %74

44:                                               ; preds = %1
  br label %74

45:                                               ; preds = %1
  %46 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptor", %"class.blink::mojom::PermissionDescriptor"* %3, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %47 = load %"class.blink::mojom::PermissionDescriptorExtension"*, %"class.blink::mojom::PermissionDescriptorExtension"** %46, align 8
  %48 = icmp eq %"class.blink::mojom::PermissionDescriptorExtension"* %47, null
  br i1 %48, label %60, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptorExtension", %"class.blink::mojom::PermissionDescriptorExtension"* %47, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %53, label %60

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.blink::mojom::PermissionDescriptorExtension", %"class.blink::mojom::PermissionDescriptorExtension"* %47, i64 0, i32 1
  %55 = bitcast %"union.blink::mojom::PermissionDescriptorExtension::Union_"* %54 to %"class.mojo::InlinedStructPtr.7"**
  %56 = load %"class.mojo::InlinedStructPtr.7"*, %"class.mojo::InlinedStructPtr.7"** %55, align 8
  %57 = getelementptr inbounds %"class.mojo::InlinedStructPtr.7", %"class.mojo::InlinedStructPtr.7"* %56, i64 0, i32 0, i32 1
  %58 = load i8, i8* %57, align 1, !range !6
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %74

60:                                               ; preds = %45, %53, %49
  br label %74

61:                                               ; preds = %1
  br label %74

62:                                               ; preds = %1
  br label %74

63:                                               ; preds = %1
  br label %74

64:                                               ; preds = %1
  br label %74

65:                                               ; preds = %1
  br label %74

66:                                               ; preds = %1
  br label %74

67:                                               ; preds = %1
  br label %74

68:                                               ; preds = %1
  br label %74

69:                                               ; preds = %1
  br label %74

70:                                               ; preds = %1
  br label %74

71:                                               ; preds = %1
  br label %74

72:                                               ; preds = %1
  br label %74

73:                                               ; preds = %1
  br label %74

74:                                               ; preds = %53, %33, %15, %1, %73, %72, %71, %70, %69, %68, %67, %66, %65, %64, %63, %62, %61, %60, %44, %43, %42, %41, %40, %24, %23, %22, %21, %6
  %75 = phi i64 [ 0, %73 ], [ 1, %72 ], [ 1, %71 ], [ 1, %70 ], [ 1, %69 ], [ 1, %68 ], [ 1, %67 ], [ 1, %66 ], [ 1, %65 ], [ 1, %64 ], [ 1, %63 ], [ 1, %62 ], [ 1, %61 ], [ 1, %60 ], [ 1, %44 ], [ 1, %43 ], [ 1, %42 ], [ 1, %41 ], [ 1, %40 ], [ 1, %24 ], [ 1, %23 ], [ 0, %22 ], [ 1, %21 ], [ 1, %6 ], [ 1, %1 ], [ 1, %15 ], [ 1, %33 ], [ 1, %53 ]
  %76 = phi i64 [ 0, %73 ], [ 137438953472, %72 ], [ 133143986176, %71 ], [ 128849018880, %70 ], [ 124554051584, %69 ], [ 115964116992, %68 ], [ 94489280512, %67 ], [ 90194313216, %66 ], [ 85899345920, %65 ], [ 81604378624, %64 ], [ 77309411328, %63 ], [ 73014444032, %62 ], [ 68719476736, %61 ], [ 103079215104, %60 ], [ 98784247808, %44 ], [ 55834574848, %43 ], [ 51539607552, %42 ], [ 42949672960, %41 ], [ 38654705664, %40 ], [ 34359738368, %24 ], [ 30064771072, %23 ], [ 0, %22 ], [ 25769803776, %21 ], [ 12884901888, %6 ], [ 17179869184, %1 ], [ 4294967296, %15 ], [ 120259084288, %33 ], [ 98784247808, %53 ]
  %77 = or i64 %76, %75
  ret i64 %77
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZZN7content21GetAllPermissionTypesEvENK3$_0clEv: argument 0"}
!5 = distinct !{!5, !"_ZZN7content21GetAllPermissionTypesEvENK3$_0clEv"}
!6 = !{i8 0, i8 2}
