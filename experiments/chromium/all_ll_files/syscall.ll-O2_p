; ModuleID = '../../sandbox/linux/seccomp-bpf/syscall.cc'
source_filename = "../../sandbox/linux/seccomp-bpf/syscall.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".text"
module asm ".align 16, 0x90"
module asm ".type SyscallAsm, @function"
module asm "SyscallAsm:.cfi_startproc"
module asm "test %rdi, %rdi"
module asm "jge  1f"
module asm "lea 2f(%rip), %rax"
module asm "ret"
module asm "1:movq %rdi, %rax"
module asm "movq  0(%rsi), %rdi"
module asm "movq 16(%rsi), %rdx"
module asm "movq 24(%rsi), %r10"
module asm "movq 32(%rsi), %r8"
module asm "movq 40(%rsi), %r9"
module asm "movq  8(%rsi), %rsi"
module asm "syscall"
module asm "2:ret"
module asm ".cfi_endproc"
module asm "9:.size SyscallAsm, 9b-SyscallAsm"

%struct.ucontext_t = type { i64, %struct.ucontext_t*, %struct.stack_t, %struct.mcontext_t, %struct.__sigset_t, %struct._libc_fpstate, [4 x i64] }
%struct.stack_t = type { i8*, i32, i64 }
%struct.mcontext_t = type { [23 x i64], %struct._libc_fpstate*, [8 x i64] }
%struct.__sigset_t = type { [16 x i64] }
%struct._libc_fpstate = type { i16, i16, i16, i16, i64, i64, i32, i32, [8 x %struct._libc_fpxreg], [16 x %struct._libc_xmmreg], [24 x i32] }
%struct._libc_fpxreg = type { [4 x i16], i16, [3 x i16] }
%struct._libc_xmmreg = type { [4 x i32] }

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN7sandbox7Syscall11InvalidCallEv() local_unnamed_addr #0 align 2 {
  %1 = alloca [6 x i64], align 16
  %2 = bitcast [6 x i64]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %2) #4
  %3 = getelementptr inbounds [6 x i64], [6 x i64]* %1, i64 0, i64 0
  %4 = bitcast [6 x i64]* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 48, i1 false)
  %5 = call i64 @SyscallAsm(i64 217555, i64* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %2) #4
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN7sandbox7Syscall4CallEillllllll(i32, i64, i64, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %10 = alloca [6 x i64], align 16
  %11 = bitcast [6 x i64]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #4
  %12 = getelementptr inbounds [6 x i64], [6 x i64]* %10, i64 0, i64 0
  %13 = getelementptr inbounds [6 x i64], [6 x i64]* %10, i64 0, i64 1
  %14 = getelementptr inbounds [6 x i64], [6 x i64]* %10, i64 0, i64 2
  %15 = getelementptr inbounds [6 x i64], [6 x i64]* %10, i64 0, i64 3
  %16 = getelementptr inbounds [6 x i64], [6 x i64]* %10, i64 0, i64 4
  %17 = getelementptr inbounds [6 x i64], [6 x i64]* %10, i64 0, i64 5
  store i64 %1, i64* %12, align 16
  store i64 %2, i64* %13, align 8
  store i64 %3, i64* %14, align 16
  store i64 %4, i64* %15, align 8
  store i64 %5, i64* %16, align 16
  store i64 %6, i64* %17, align 8
  %18 = sext i32 %0 to i64
  %19 = call i64 @SyscallAsm(i64 %18, i64* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #4
  ret i64 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @SyscallAsm(i64, i64*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7sandbox7Syscall18PutValueInUcontextElP10ucontext_t(i64, %struct.ucontext_t* nocapture) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %struct.ucontext_t, %struct.ucontext_t* %1, i64 0, i32 3, i32 0, i64 13
  store i64 %0, i64* %3, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
