; ModuleID = '../../services/viz/privileged/mojom/compositing/renderer_settings_mojom_traits.cc'
source_filename = "../../services/viz/privileged/mojom/compositing/renderer_settings_mojom_traits.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::mojom::internal::DebugRendererSettings_Data" = type { %"struct.mojo::internal::StructHeader", i8, [7 x i8] }
%"struct.mojo::internal::StructHeader" = type { i32, i32 }
%"struct.viz::DebugRendererSettings" = type { i8, i8, i8, i8, i8 }
%"class.viz::mojom::internal::RendererSettings_Data" = type { %"struct.mojo::internal::StructHeader", i16, [2 x i8], i32, i32, [4 x i8], %"struct.mojo::internal::Pointer" }
%"struct.mojo::internal::Pointer" = type { i64 }
%"class.mojo::Message" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::internal::Buffer", %"class.std::__1::vector", %"class.std::__1::vector.2", %"class.mojo::ConnectionGroup::Ref"*, i8, i8, i8* }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessageHandle" }
%"class.mojo::MessageHandle" = type { i64 }
%"class.mojo::internal::Buffer" = type { %"class.mojo::MessageHandle", i64, i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.mojo::ScopedHandleBase.0"*, %"class.mojo::ScopedHandleBase.0"*, %"class.std::__1::__compressed_pair" }
%"class.mojo::ScopedHandleBase.0" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.mojo::ScopedHandleBase.0"* }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.mojo::ScopedInterfaceEndpointHandle"*, %"class.std::__1::__compressed_pair.4" }
%"class.mojo::ScopedInterfaceEndpointHandle" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ScopedInterfaceEndpointHandle::State"* }
%"class.mojo::ScopedInterfaceEndpointHandle::State" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.mojo::ScopedInterfaceEndpointHandle"* }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.9 }
%class.scoped_refptr.9 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.13, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.15", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.11 }
%class.scoped_refptr.11 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.12", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.12" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.13 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.14" }>
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__atomic_base.17" }
%"struct.std::__1::__atomic_base.17" = type { %"struct.std::__1::__cxx_atomic_impl.18" }
%"struct.std::__1::__cxx_atomic_impl.18" = type { %"struct.std::__1::__cxx_atomic_base_impl.19" }
%"struct.std::__1::__cxx_atomic_base_impl.19" = type { i32 }
%"class.viz::RendererSettings" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, %"class.std::__1::vector.20" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { i32*, i32*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i32* }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN3viz5mojom29DebugRendererSettingsDataViewENS1_21DebugRendererSettingsEE4ReadES3_PS4_(%"class.viz::mojom::internal::DebugRendererSettings_Data"*, %"struct.viz::DebugRendererSettings"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::mojom::internal::DebugRendererSettings_Data", %"class.viz::mojom::internal::DebugRendererSettings_Data"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 1
  %6 = getelementptr inbounds %"struct.viz::DebugRendererSettings", %"struct.viz::DebugRendererSettings"* %1, i64 0, i32 0
  store i8 %5, i8* %6, align 1
  %7 = load i8, i8* %3, align 1
  %8 = getelementptr inbounds %"struct.viz::DebugRendererSettings", %"struct.viz::DebugRendererSettings"* %1, i64 0, i32 1
  %9 = lshr i8 %7, 1
  %10 = and i8 %9, 1
  store i8 %10, i8* %8, align 1
  %11 = load i8, i8* %3, align 1
  %12 = getelementptr inbounds %"struct.viz::DebugRendererSettings", %"struct.viz::DebugRendererSettings"* %1, i64 0, i32 2
  %13 = lshr i8 %11, 2
  %14 = and i8 %13, 1
  store i8 %14, i8* %12, align 1
  %15 = load i8, i8* %3, align 1
  %16 = getelementptr inbounds %"struct.viz::DebugRendererSettings", %"struct.viz::DebugRendererSettings"* %1, i64 0, i32 3
  %17 = lshr i8 %15, 3
  %18 = and i8 %17, 1
  store i8 %18, i8* %16, align 1
  %19 = load i8, i8* %3, align 1
  %20 = getelementptr inbounds %"struct.viz::DebugRendererSettings", %"struct.viz::DebugRendererSettings"* %1, i64 0, i32 4
  %21 = lshr i8 %19, 4
  %22 = and i8 %21, 1
  store i8 %22, i8* %20, align 1
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4mojo12StructTraitsIN3viz5mojom24RendererSettingsDataViewENS1_16RendererSettingsEE4ReadES3_PS4_(%"class.viz::mojom::internal::RendererSettings_Data"*, %"class.mojo::Message"*, %"class.viz::RendererSettings"* nocapture) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.viz::mojom::internal::RendererSettings_Data", %"class.viz::mojom::internal::RendererSettings_Data"* %0, i64 0, i32 1
  %5 = load i16, i16* %4, align 1
  %6 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 0
  %7 = trunc i16 %5 to i8
  %8 = and i8 %7, 1
  store i8 %8, i8* %6, align 8
  %9 = load i16, i16* %4, align 1
  %10 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 1
  %11 = lshr i16 %9, 1
  %12 = trunc i16 %11 to i8
  %13 = and i8 %12, 1
  store i8 %13, i8* %10, align 1
  %14 = load i16, i16* %4, align 1
  %15 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 2
  %16 = lshr i16 %14, 2
  %17 = trunc i16 %16 to i8
  %18 = and i8 %17, 1
  store i8 %18, i8* %15, align 2
  %19 = load i16, i16* %4, align 1
  %20 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 3
  %21 = lshr i16 %19, 3
  %22 = trunc i16 %21 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* %20, align 1
  %24 = load i16, i16* %4, align 1
  %25 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 4
  %26 = lshr i16 %24, 4
  %27 = trunc i16 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %25, align 4
  %29 = load i16, i16* %4, align 1
  %30 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 5
  %31 = lshr i16 %29, 6
  %32 = trunc i16 %31 to i8
  %33 = and i8 %32, 1
  store i8 %33, i8* %30, align 1
  %34 = load i16, i16* %4, align 1
  %35 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 6
  %36 = lshr i16 %34, 5
  %37 = trunc i16 %36 to i8
  %38 = and i8 %37, 1
  store i8 %38, i8* %35, align 2
  %39 = getelementptr inbounds %"class.viz::mojom::internal::RendererSettings_Data", %"class.viz::mojom::internal::RendererSettings_Data"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 1
  %41 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 10
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %"class.viz::mojom::internal::RendererSettings_Data", %"class.viz::mojom::internal::RendererSettings_Data"* %0, i64 0, i32 4
  %43 = load i32, i32* %42, align 1
  %44 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 13
  store i32 %43, i32* %44, align 4
  %45 = load i16, i16* %4, align 1
  %46 = trunc i16 %45 to i8
  %47 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 7
  %48 = lshr i8 %46, 7
  store i8 %48, i8* %47, align 1
  %49 = load i16, i16* %4, align 1
  %50 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 8
  %51 = lshr i16 %49, 8
  %52 = trunc i16 %51 to i8
  %53 = and i8 %52, 1
  store i8 %53, i8* %50, align 8
  %54 = load i16, i16* %4, align 1
  %55 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 11
  %56 = lshr i16 %54, 9
  %57 = trunc i16 %56 to i8
  %58 = and i8 %57, 1
  store i8 %58, i8* %55, align 8
  %59 = load i16, i16* %4, align 1
  %60 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 12
  %61 = lshr i16 %59, 10
  %62 = trunc i16 %61 to i8
  %63 = and i8 %62, 1
  store i8 %63, i8* %60, align 1
  %64 = tail call zeroext i1 @_ZN8features20IsUsingOzonePlatformEv() #6
  br i1 %64, label %65, label %134

65:                                               ; preds = %3
  %66 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 17
  %67 = getelementptr inbounds %"class.viz::mojom::internal::RendererSettings_Data", %"class.viz::mojom::internal::RendererSettings_Data"* %0, i64 0, i32 6
  %68 = getelementptr inbounds %"struct.mojo::internal::Pointer", %"struct.mojo::internal::Pointer"* %67, i64 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  %71 = bitcast %"struct.mojo::internal::Pointer"* %67 to i8*
  %72 = getelementptr inbounds i8, i8* %71, i64 %69
  br i1 %70, label %73, label %78

73:                                               ; preds = %65
  %74 = bitcast %"class.std::__1::vector.20"* %66 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 17, i32 0, i32 1
  %77 = bitcast i32** %76 to i64*
  store i64 %75, i64* %77, align 8
  br label %134

78:                                               ; preds = %65
  %79 = getelementptr inbounds i8, i8* %72, i64 4
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 1
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 17, i32 0, i32 1
  %84 = bitcast i32** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"class.std::__1::vector.20"* %66 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %85, %87
  %89 = ashr exact i64 %88, 2
  %90 = icmp eq i64 %89, %82
  br i1 %90, label %114, label %91

91:                                               ; preds = %78
  %92 = icmp eq i32 %81, 0
  br i1 %92, label %106, label %93

93:                                               ; preds = %91
  %94 = shl nuw nsw i64 %82, 2
  %95 = tail call i8* @_Znwm(i64 %94) #7
  %96 = bitcast i8* %95 to i32*
  %97 = getelementptr inbounds i32, i32* %96, i64 %82
  %98 = ptrtoint i8* %95 to i64
  %99 = add nsw i64 %82, -1
  %100 = getelementptr i32, i32* %96, i64 %99
  %101 = ptrtoint i32* %100 to i64
  %102 = sub i64 4, %98
  %103 = add i64 %102, %101
  %104 = and i64 %103, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %95, i8 0, i64 %104, i1 false) #6
  %105 = ptrtoint i32* %97 to i64
  br label %106

106:                                              ; preds = %91, %93
  %107 = phi i64 [ %105, %93 ], [ 0, %91 ]
  %108 = phi i64 [ %98, %93 ], [ 0, %91 ]
  store i64 %108, i64* %86, align 8
  store i64 %107, i64* %84, align 8
  %109 = getelementptr inbounds %"class.viz::RendererSettings", %"class.viz::RendererSettings"* %2, i64 0, i32 17, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast i32** %109 to i64*
  store i64 %107, i64* %110, align 8
  %111 = icmp eq i64 %87, 0
  br i1 %111, label %114, label %112

112:                                              ; preds = %106
  %113 = inttoptr i64 %87 to i8*
  tail call void @_ZdlPv(i8* %113) #7
  br label %114

114:                                              ; preds = %78, %112, %106
  %115 = load i32, i32* %80, align 1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %134, label %117

117:                                              ; preds = %114
  %118 = getelementptr inbounds i8, i8* %72, i64 8
  %119 = bitcast i8* %118 to i32*
  %120 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %66, i64 0, i32 0, i32 0
  br label %121

121:                                              ; preds = %127, %117
  %122 = phi i64 [ 0, %117 ], [ %124, %127 ]
  %123 = getelementptr inbounds i32, i32* %119, i64 %122
  %124 = add nuw nsw i64 %122, 1
  %125 = load i32, i32* %123, align 4
  %126 = icmp ult i32 %125, 4
  br i1 %126, label %127, label %134

127:                                              ; preds = %121
  %128 = load i32*, i32** %120, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 %122
  %130 = add i32 %125, 2
  store i32 %130, i32* %129, align 4
  %131 = load i32, i32* %80, align 1
  %132 = zext i32 %131 to i64
  %133 = icmp ult i64 %124, %132
  br i1 %133, label %121, label %134

134:                                              ; preds = %121, %127, %114, %73, %3
  %135 = phi i1 [ true, %3 ], [ true, %73 ], [ true, %114 ], [ true, %127 ], [ false, %121 ]
  ret i1 %135
}

declare zeroext i1 @_ZN8features20IsUsingOzonePlatformEv() local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
