; ModuleID = '../../third_party/skia/src/gpu/tessellate/GrStrokeTessellationShaderImpl.cpp'
source_filename = "../../third_party/skia/src/gpu/tessellate/GrStrokeTessellationShaderImpl.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrStrokeTessellationShaderImpl = type { %class.GrStrokeShaderImpl }
%class.GrStrokeShaderImpl = type { %class.GrGLSLGeometryProcessor, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.GrResourceHandle, %class.SkString }
%class.GrGLSLGeometryProcessor = type { i32 (...)**, %class.SkTArray }
%class.SkTArray = type { %"struct.GrGLSLGeometryProcessor::TransformInfo"*, i64 }
%"struct.GrGLSLGeometryProcessor::TransformInfo" = type { %class.GrShaderVar, %class.GrShaderVar, %class.GrFragmentProcessor* }
%class.GrShaderVar = type { i32, i32, i32, %class.SkString, %class.SkString, %class.SkString }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.1 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.1 = type { %"class.std::__1::unique_ptr"*, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrFragmentProcessor* }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%class.GrResourceHandle = type { i32 }
%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.GrGLSLGeometryProcessor::EmitArgs" = type { %class.GrGLSLVertexBuilder*, %class.GrGLSLGeometryBuilder*, %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLVaryingHandler*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*, %class.GrGeometryProcessor*, i8*, i8*, %class.GrResourceHandle.22*, %"class.GrGLSLGeometryProcessor::FPCoordTransformHandler"* }
%class.GrGLSLVertexBuilder = type { %class.GrGLSLVertexGeoBuilder.base, [12 x i8] }
%class.GrGLSLVertexGeoBuilder.base = type { %class.GrGLSLShaderBuilder.base }
%class.GrGLSLShaderBuilder.base = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.6, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.9, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.18], i32, i8, [3 x i8], i32 }>
%class.GrGLSLProgramBuilder = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%class.SkSTArray.6 = type { %class.SkAlignedSTStorage.7, %class.SkTArray.8 }
%class.SkAlignedSTStorage.7 = type { [120 x i8] }
%class.SkTArray.8 = type { %class.SkString*, i64 }
%class.SkSTArray.9 = type { %class.SkAlignedSTStorage.10, %class.SkTArray.11 }
%class.SkAlignedSTStorage.10 = type { [16 x i8] }
%class.SkTArray.11 = type { %"class.std::__1::unique_ptr.12"*, i64 }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.SkSL::Statement"* }
%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%class.GrTBlockList = type { %class.GrSBlockAllocator }
%class.GrSBlockAllocator = type { [88 x i8], [8 x i8] }
%class.SkSTArray.18 = type { %class.SkAlignedSTStorage.19, %class.SkTArray.8 }
%class.SkAlignedSTStorage.19 = type { [8 x i8] }
%class.GrGLSLGeometryBuilder = type { %class.GrGLSLVertexGeoBuilder.base, i32, [8 x i8] }
%class.GrGLSLFPFragmentBuilder = type <{ i32 (...)**, [4 x i8], [4 x i8], %class.GrGLSLShaderBuilder.base, [12 x i8] }>
%class.GrGLSLVaryingHandler = type { i32 (...)**, [8 x i8], %class.GrTBlockList.20, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrTBlockList, %class.GrGLSLProgramBuilder*, i8* }
%class.GrTBlockList.20 = type { %class.GrSBlockAllocator.21 }
%class.GrSBlockAllocator.21 = type { [80 x i8] }
%class.GrGLSLUniformHandler = type { i32 (...)**, %class.GrGLSLProgramBuilder* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.GrGeometryProcessor = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32, [4 x i8] }>
%class.GrNonAtomicRef = type { i32 }
%"class.GrGeometryProcessor::AttributeSet" = type { %"class.GrGeometryProcessor::Attribute"*, i32, i32, i64 }
%"class.GrGeometryProcessor::Attribute" = type { i8*, i32, i32 }
%class.GrResourceHandle.22 = type { i32 }
%"class.GrGLSLGeometryProcessor::FPCoordTransformHandler" = type { %"class.GrFragmentProcessor::CIter", %class.SkTArray.26* }
%"class.GrFragmentProcessor::CIter" = type { %class.SkSTArray.23 }
%class.SkSTArray.23 = type { %class.SkAlignedSTStorage.24, %class.SkTArray.25 }
%class.SkAlignedSTStorage.24 = type { [32 x i8] }
%class.SkTArray.25 = type { %class.GrFragmentProcessor**, i64 }
%class.SkTArray.26 = type { %class.GrShaderVar*, i64 }
%"struct.GrGLSLGeometryProcessor::GrGPArgs" = type { %class.GrShaderVar, %class.GrShaderVar }
%class.GrStrokeShader = type <{ %class.GrPathShader.base, i32, i32, %class.SkStrokeRec, %struct.SkRGBA4f, [4 x i8], %class.SkSTArray.27, float, [4 x i8] }>
%class.GrPathShader.base = type { %class.GrGeometryProcessor.base, %class.SkMatrix, i8, i32 }
%class.GrGeometryProcessor.base = type <{ %class.GrProcessor, %class.GrNonAtomicRef, i32, %"class.GrGeometryProcessor::AttributeSet", %"class.GrGeometryProcessor::AttributeSet", i32 }>
%class.SkMatrix = type { [9 x float], i32 }
%class.SkStrokeRec = type { float, float, float, i32 }
%struct.SkRGBA4f = type { float, float, float, float }
%class.SkSTArray.27 = type { %class.SkAlignedSTStorage.28, %class.SkTArray.29 }
%class.SkAlignedSTStorage.28 = type { [80 x i8] }
%class.SkTArray.29 = type { %"class.GrGeometryProcessor::Attribute"*, i64 }
%class.GrGLSLShaderBuilder = type <{ i32 (...)**, %class.GrGLSLProgramBuilder*, %"class.SkSL::String", %class.SkSTArray.6, %class.SkString, %class.SkString, %class.SkString, %class.SkSTArray.9, [8 x i8], %class.GrTBlockList, %class.GrTBlockList, i32, [4 x i8], [2 x %class.SkSTArray.18], i32, i8, [3 x i8], i32, [12 x i8] }>
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%class.GrGLSLProgramDataManager = type { i32 (...)** }

$_ZN19GrGLSLShaderBuilder15defineConstantfEPKcS1_S1_z = comdat any

$_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz = comdat any

$_ZN18GrStrokeShaderImplD2Ev = comdat any

$_ZN30GrStrokeTessellationShaderImplD0Ev = comdat any

$_ZN23GrGLSLGeometryProcessorD2Ev = comdat any

$_ZN23GrGLSLGeometryProcessorD0Ev = comdat any

$_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps = comdat any

$_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps = comdat any

$_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev = comdat any

$_ZTV23GrGLSLGeometryProcessor = comdat any

@.str = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"PI\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"3.141592653589793238\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"kParametricEpsilon\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"1.0 / (%i * 128)\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"vsJoinArgs0\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"vsJoinArgs1\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"vsPts01\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"vsPts23\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"vsPts45\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"vsPts67\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"vsPts89\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"vsTans01\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"vsTans23\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"vsStrokeArgs\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"vsColor\00", align 1
@_ZN18GrStrokeShaderImpl8kAtan2FnE = external local_unnamed_addr global i8*, align 8
@_ZN18GrStrokeShaderImpl23kCosineBetweenVectorsFnE = external local_unnamed_addr global i8*, align 8
@_ZN18GrStrokeShaderImpl14kMiterExtentFnE = external local_unnamed_addr global i8*, align 8
@_ZN18GrStrokeShaderImpl15kUncheckedMixFnE = external local_unnamed_addr global i8*, align 8
@_ZN18GrStrokeShaderImpl29kNumRadialSegmentsPerRadianFnE = external local_unnamed_addr global i8*, align 8
@.str.16 = private unnamed_addr constant [9 x i8] c"tessArgs\00", align 1
@.str.17 = private unnamed_addr constant [86 x i8] c"\0A        float NUM_RADIAL_SEGMENTS_PER_RADIAN = %s.y;\0A        float JOIN_TYPE = %s.z;\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"parametricPrecision\00", align 1
@.str.19 = private unnamed_addr constant [196 x i8] c"\0A        float STROKE_RADIUS = dynamicStrokeAttr.x;\0A        float NUM_RADIAL_SEGMENTS_PER_RADIAN = num_radial_segments_per_radian(%s,STROKE_RADIUS);\0A        float JOIN_TYPE = dynamicStrokeAttr.y;\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"translate\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"affineMatrix\00", align 1
@.str.22 = private unnamed_addr constant [40 x i8] c"float2x2 AFFINE_MATRIX = float2x2(%s);\0A\00", align 1
@.str.23 = private unnamed_addr constant [130 x i8] c"\0A    // Unpack the control points.\0A    float2 prevControlPoint = prevCtrlPtAttr;\0A    float4x2 P = float4x2(pts01Attr, pts23Attr);\00", align 1
@.str.24 = private unnamed_addr constant [247 x i8] c"\0A        P = AFFINE_MATRIX * P;\0A        if (isinf(pts23Attr.w)) {\0A            // If y3 is infinity then x3 is a conic weight. Don't transform.\0A            P[3] = pts23Attr.zw;\0A        }\0A        prevControlPoint = AFFINE_MATRIX * prevControlPoint;\00", align 1
@.str.25 = private unnamed_addr constant [8024 x i8] c"\0A    // Find the tangents. It's imperative that we compute these tangents from the original\0A    // (pre-chopping) input points or else the seams might crack.\0A    float2 prevJoinTangent = P[0] - prevControlPoint;\0A    float2 tan0 = ((P[1] == P[0]) ? P[2] : P[1]) - P[0];\0A    float2 tan1 = (P[3] == P[2] || isinf(P[3].y)) ? P[2] - P[1] : P[3] - P[2];\0A\0A    if (tan0 == float2(0)) {\0A        // [p0, p0, p0, p3] is a reserved pattern that means this patch is a \22bowtie\22.\0A        P[3] = P[0];  // Colocate all the points on the center of the bowtie.\0A        // Use the final curve section to draw the bowtie. Since the points are colocated, this\0A        // curve will register as a line, which overrides innerTangents as [tan0, tan0]. That\0A        // disables the first two sections of the curve because their tangents and points are all\0A        // equal.\0A        tan0 = prevJoinTangent;\0A        prevJoinTangent = float2(0);  // Disable the join section.\0A    }\0A\0A    if (tan1 == float2(0)) {\0A        // [p0, p3, p3, p3] is a reserved pattern that means this patch is a join only. Colocate all\0A        // the curve's points to ensure it gets disabled by the tessellation stages.\0A        P[1] = P[2] = P[3] = P[0];\0A        // Since the points are colocated, this curve will register as a line, which overrides\0A        // innerTangents as [tan0, tan0]. Setting tan1=tan0 as well results in all tangents and all\0A        // points being equal, which disables every section of the curve.\0A        tan1 = tan0;\0A    }\0A\0A    // Calculate the number of segments to chop the join into.\0A    float cosTheta = cosine_between_vectors(prevJoinTangent, tan0);\0A    float joinRotation = (cosTheta == 1) ? 0 : acos(cosTheta);\0A    if (cross(prevJoinTangent, tan0) < 0) {\0A        joinRotation = -joinRotation;\0A    }\0A    float joinRadialSegments = abs(joinRotation) * NUM_RADIAL_SEGMENTS_PER_RADIAN;\0A    float numSegmentsInJoin = (joinRadialSegments != 0 /*Is the join non-empty?*/ &&\0A                               JOIN_TYPE >= 0 /*Is the join not a round type?*/)\0A            ? sign(JOIN_TYPE) + 1  // Non-empty bevel joins have 1 segment and miters have 2.\0A            : ceil(joinRadialSegments);  // Otherwise round up the number of radial segments.\0A\0A    // Extends the middle join edge to the miter point.\0A    float innerJoinRadiusMultiplier = 1;\0A    if (JOIN_TYPE > 0 /*Is the join a miter type?*/) {\0A        innerJoinRadiusMultiplier = miter_extent(cosTheta, JOIN_TYPE/*miterLimit*/);\0A    }\0A\0A    // Clamps join geometry to the exterior side of the junction.\0A    float2 joinOutsetClamp = float2(-1, 1);\0A    if (joinRadialSegments > .1 /*Does the join rotate more than 1/10 of a segment?*/) {\0A        // Only clamp if the join angle is large enough to guarantee there won't be cracks on\0A        // the interior side of the junction.\0A        joinOutsetClamp = (joinRotation < 0) ? float2(-1, 0) : float2(0, 1);\0A    }\0A\0A    // Pack join args for the tessellation control stage.\0A    vsJoinArgs0 = float4(numSegmentsInJoin, innerJoinRadiusMultiplier, prevJoinTangent);\0A    vsJoinArgs1 = float4(atan2(prevJoinTangent), joinRotation / numSegmentsInJoin,\0A                         joinOutsetClamp);\0A\0A    // Now find where to chop the curve so the resulting sub-curves are convex and do not rotate\0A    // more than 180 degrees. We don't need to worry about cusps because the caller chops those out\0A    // on the CPU. Start by finding the cubic's power basis coefficients. These define the bezier\0A    // curve as:\0A    //\0A    //                                    |T^3|\0A    //     Cubic(T) = x,y = |A  3B  3C| * |T^2| + P0\0A    //                      |.   .   .|   |T  |\0A    //\0A    // And the tangent direction (scaled by a uniform 1/3) will be:\0A    //\0A    //                                                 |T^2|\0A    //     Tangent_Direction(T) = dx,dy = |A  2B  C| * |T  |\0A    //                                    |.   .  .|   |1  |\0A    //\0A    float2 C = P[1] - P[0];\0A    float2 D = P[2] - P[1];\0A    float2 E = P[3] - P[0];\0A    float2 B = D - C;\0A    float2 A = fma(float2(-3), D, E);\0A\0A    // Now find the cubic's inflection function. There are inflections where F' x F'' == 0.\0A    // We formulate this as a quadratic equation:  F' x F'' == aT^2 + bT + c == 0.\0A    // See: https://www.microsoft.com/en-us/research/wp-content/uploads/2005/01/p1000-loop.pdf\0A    // NOTE: We only need the roots, so a uniform scale factor does not affect the solution.\0A    float a = cross(A, B);\0A    float b = cross(A, C);\0A    float c = cross(B, C);\0A    float b_over_2 = b*.5;\0A    float discr_over_4 = b_over_2*b_over_2 - a*c;\0A\0A    float2x2 innerTangents = float2x2(0);\0A    if (discr_over_4 <= 0) {\0A        // The curve does not inflect. This means it might rotate more than 180 degrees instead.\0A        // Craft a quadratic whose roots are the points were rotation == 180 deg and 0. (These are\0A        // the points where the tangent is parallel to tan0.)\0A        //\0A        //      Tangent_Direction(T) x tan0 == 0\0A        //      (AT^2 x tan0) + (2BT x tan0) + (C x tan0) == 0\0A        //      (A x C)T^2 + (2B x C)T + (C x C) == 0  [[because tan0 == P1 - P0 == C]]\0A        //      bT^2 + 2cT + 0 == 0  [[because A x C == b, B x C == c]]\0A        //\0A        // NOTE: When P0 == P1 then C != tan0, C == 0 and these roots will be undefined. But that's\0A        // ok because when P0 == P1 the curve cannot rotate more than 180 degrees anyway.\0A        a = b;\0A        b_over_2 = c;\0A        c = 0;\0A        discr_over_4 = b_over_2*b_over_2;\0A        innerTangents[0] = -C;\0A    }\0A\0A    // Solve our quadratic equation for the chop points. This is inspired by the quadratic formula\0A    // from Numerical Recipes in C.\0A    float q = sqrt(discr_over_4);\0A    if (b_over_2 > 0) {\0A        q = -q;\0A    }\0A    q -= b_over_2;\0A    float2 chopT = float2((a != 0) ? q/a : 0,\0A                          (q != 0) ? c/q : 0);\0A\0A    // Reposition any chop points that fall outside ~0..1 and clear their innerTangent.\0A    int numOutside = 0;\0A    if (chopT[0] <= kParametricEpsilon || chopT[0] >= 1 - kParametricEpsilon) {\0A        innerTangents[0] = float2(0);\0A        ++numOutside;\0A    }\0A    if (chopT[1] <= kParametricEpsilon || chopT[1] >= 1 - kParametricEpsilon) {\0A        // Swap places with chopT[0]. This ensures chopT[0] is outside when numOutside > 0.\0A        chopT = chopT.ts;\0A        innerTangents = float2x2(0,0, innerTangents[0]);\0A        ++numOutside;\0A    }\0A    if (numOutside == 2) {\0A        chopT[1] = 2/3.0;\0A    }\0A    if (numOutside >= 1) {\0A        chopT[0] = (chopT[1] <= .5) ? chopT[1] * .5 : fma(chopT[1], .5, .5);\0A    }\0A\0A    // Sort the chop points.\0A    if (chopT[0] > chopT[1]) {\0A        chopT = chopT.ts;\0A        innerTangents = float2x2(innerTangents[1], innerTangents[0]);\0A    }\0A\0A    // If the curve is a straight line, point, or conic, don't chop it into sections after all.\0A    if ((P[0] == P[1] && P[2] == P[3]) || isinf(P[3].y)) {\0A        chopT = float2(0);\0A        innerTangents = float2x2(tan0, tan0);\0A    }\0A\0A    // Chop the curve at chopT[0] and chopT[1].\0A    float4 ab = unchecked_mix(P[0].xyxy, P[1].xyxy, chopT.sstt);\0A    float4 bc = unchecked_mix(P[1].xyxy, P[2].xyxy, chopT.sstt);\0A    float4 cd = isinf(P[3].y) ? P[2].xyxy : unchecked_mix(P[2].xyxy, P[3].xyxy, chopT.sstt);\0A    float4 abc = unchecked_mix(ab, bc, chopT.sstt);\0A    float4 bcd = unchecked_mix(bc, cd, chopT.sstt);\0A    float4 abcd = unchecked_mix(abc, bcd, chopT.sstt);\0A    float4 middle = unchecked_mix(abc, bcd, chopT.ttss);\0A\0A    // Find tangents at the chop points if an inner tangent wasn't specified.\0A    if (innerTangents[0] == float2(0)) {\0A        innerTangents[0] = bcd.xy - abc.xy;\0A    }\0A    if (innerTangents[1] == float2(0)) {\0A        innerTangents[1] = bcd.zw - abc.zw;\0A    }\0A\0A    // Pack curve args for the tessellation control stage.\0A    vsPts01 = float4(P[0], ab.xy);\0A    vsPts23 = float4(abc.xy, abcd.xy);\0A    vsPts45 = middle;\0A    vsPts67 = float4(abcd.zw, bcd.zw);\0A    vsPts89 = float4(cd.zw, P[3]);\0A    vsTans01 = float4(tan0, innerTangents[0]);\0A    vsTans23 = float4(innerTangents[1], tan1);\00", align 1
@.str.26 = private unnamed_addr constant [79 x i8] c"\0A        vsStrokeArgs = float2(NUM_RADIAL_SEGMENTS_PER_RADIAN, STROKE_RADIUS);\00", align 1
@.str.27 = private unnamed_addr constant [37 x i8] c"\0A        vsColor = dynamicColorAttr;\00", align 1
@.str.28 = private unnamed_addr constant [13 x i8] c"dynamicColor\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"flat\00", align 1
@.str.30 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.31 = private unnamed_addr constant [27 x i8] c"layout(vertices = 3) out;\0A\00", align 1
@.str.32 = private unnamed_addr constant [24 x i8] c"precision highp float;\0A\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"#define float2 vec2\0A\00", align 1
@.str.34 = private unnamed_addr constant [21 x i8] c"#define float3 vec3\0A\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"#define float4 vec4\0A\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"#define float2x2 mat2\0A\00", align 1
@.str.37 = private unnamed_addr constant [25 x i8] c"#define float4x2 mat4x2\0A\00", align 1
@.str.38 = private unnamed_addr constant [33 x i8] c"#define PI 3.141592653589793238\0A\00", align 1
@.str.39 = private unnamed_addr constant [40 x i8] c"#define MAX_TESSELLATION_SEGMENTS %i.0\0A\00", align 1
@.str.40 = private unnamed_addr constant [23 x i8] c"#define cross cross2d\0A\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"uniform vec4 %s;\0A\00", align 1
@.str.42 = private unnamed_addr constant [35 x i8] c"#define PARAMETRIC_PRECISION %s.x\0A\00", align 1
@.str.43 = private unnamed_addr constant [45 x i8] c"#define NUM_RADIAL_SEGMENTS_PER_RADIAN %s.y\0A\00", align 1
@.str.44 = private unnamed_addr constant [19 x i8] c"uniform float %s;\0A\00", align 1
@.str.45 = private unnamed_addr constant [33 x i8] c"#define PARAMETRIC_PRECISION %s\0A\00", align 1
@.str.46 = private unnamed_addr constant [58 x i8] c"#define NUM_RADIAL_SEGMENTS_PER_RADIAN vsStrokeArgs[0].x\0A\00", align 1
@.str.47 = private unnamed_addr constant [82 x i8] c"\0A    float cross2d(vec2 a, vec2 b) {\0A        return determinant(mat2(a,b));\0A    }\00", align 1
@.str.48 = private unnamed_addr constant [218 x i8] c"\0A    in vec4 vsJoinArgs0[];\0A    in vec4 vsJoinArgs1[];\0A    in vec4 vsPts01[];\0A    in vec4 vsPts23[];\0A    in vec4 vsPts45[];\0A    in vec4 vsPts67[];\0A    in vec4 vsPts89[];\0A    in vec4 vsTans01[];\0A    in vec4 vsTans23[];\00", align 1
@.str.49 = private unnamed_addr constant [33 x i8] c"\0A        in vec2 vsStrokeArgs[];\00", align 1
@.str.50 = private unnamed_addr constant [36 x i8] c"\0A        in mediump vec4 vsColor[];\00", align 1
@.str.51 = private unnamed_addr constant [419 x i8] c"\0A    out vec4 tcsPts01[];\0A    out vec4 tcsPt2Tan0[];\0A    out vec4 tcsTessArgs[];  // [numCombinedSegments, numParametricSegments, angle0, radsPerSegment]\0A    patch out vec4 tcsJoinArgs0; // [numSegmentsInJoin, innerJoinRadiusMultiplier,\0A                                 //  prevJoinTangent.xy]\0A    patch out vec4 tcsJoinArgs1;  // [joinAngle0, radsPerJoinSegment, joinOutsetClamp.xy]\0A    patch out vec4 tcsEndPtEndTan;\00", align 1
@.str.52 = private unnamed_addr constant [42 x i8] c"\0A        patch out float tcsStrokeRadius;\00", align 1
@.str.53 = private unnamed_addr constant [42 x i8] c"\0A        patch out mediump vec4 tcsColor;\00", align 1
@.str.54 = private unnamed_addr constant [151 x i8] c"\0A    void main() {\0A        // Forward join args to the evaluation stage.\0A        tcsJoinArgs0 = vsJoinArgs0[0];\0A        tcsJoinArgs1 = vsJoinArgs1[0];\00", align 1
@.str.55 = private unnamed_addr constant [46 x i8] c"\0A        tcsStrokeRadius = vsStrokeArgs[0].y;\00", align 1
@.str.56 = private unnamed_addr constant [32 x i8] c"\0A        tcsColor = vsColor[0];\00", align 1
@.str.57 = private unnamed_addr constant [5433 x i8] c"\0A        // Unpack the curve args from the vertex shader.\0A        mat4x2 P;\0A        mat2 tangents;\0A        if (gl_InvocationID == 0) {\0A            // This is the first section of the curve.\0A            P = mat4x2(vsPts01[0], vsPts23[0]);\0A            tangents = mat2(vsTans01[0]);\0A        } else if (gl_InvocationID == 1) {\0A            // This is the middle section of the curve.\0A            P = mat4x2(vsPts23[0].zw, vsPts45[0], vsPts67[0].xy);\0A            tangents = mat2(vsTans01[0].zw, vsTans23[0].xy);\0A        } else {\0A            // This is the final section of the curve.\0A            P = mat4x2(vsPts67[0], vsPts89[0]);\0A            tangents = mat2(vsTans23[0]);\0A        }\0A\0A        // Calculate the number of parametric segments. The final tessellated strip will be a\0A        // composition of these parametric segments as well as radial segments.\0A        float w = isinf(P[3].y) ? P[3].x : -1.0; // w<0 means the curve is an integral cubic.\0A        float numParametricSegments = wangs_formula(PARAMETRIC_PRECISION,\0A                                                    P[0], P[1], P[2], P[3], w);\0A        if (P[0] == P[1] && P[2] == P[3]) {\0A            // This is how the patch builder articulates lineTos but Wang's formula returns\0A            // >>1 segment in this scenario. Assign 1 parametric segment.\0A            numParametricSegments = 1.0;\0A        }\0A\0A        // Determine the curve's start angle.\0A        float angle0 = atan2(tangents[0]);\0A\0A        // Determine the curve's total rotation. The vertex shader ensures our curve does not rotate\0A        // more than 180 degrees or inflect, so the inverse cosine has enough range.\0A        float cosTheta = cosine_between_vectors(tangents[0], tangents[1]);\0A        float rotation = acos(cosTheta);\0A\0A        // Adjust sign of rotation to match the direction the curve turns.\0A        // NOTE: Since the curve is not allowed to inflect, we can just check F'(.5) x F''(.5).\0A        // NOTE: F'(.5) x F''(.5) has the same sign as (P2 - P0) x (P3 - P1)\0A        float turn = isinf(P[3].y) ? cross2d(P[1] - P[0], P[2] - P[1])\0A                                   : cross2d(P[2] - P[0], P[3] - P[1]);\0A        if (turn == 0.0) {  // This is the case for joins and cusps where points are co-located.\0A            turn = determinant(tangents);\0A        }\0A        if (turn < 0.0) {\0A            rotation = -rotation;\0A        }\0A\0A        // Calculate the number of evenly spaced radial segments to chop this section of the curve\0A        // into. Radial segments divide the curve's rotation into even steps. The final tessellated\0A        // strip will be a composition of both parametric and radial segments.\0A        float numRadialSegments = abs(rotation) * NUM_RADIAL_SEGMENTS_PER_RADIAN;\0A        numRadialSegments = max(ceil(numRadialSegments), 1.0);\0A\0A        // The first and last edges are shared by both the parametric and radial sets of edges, so\0A        // the total number of edges is:\0A        //\0A        //   numCombinedEdges = numParametricEdges + numRadialEdges - 2\0A        //\0A        // It's also important to differentiate between the number of edges and segments in a strip:\0A        //\0A        //   numCombinedSegments = numCombinedEdges - 1\0A        //\0A        // So the total number of segments in the combined strip is:\0A        //\0A        //   numCombinedSegments = numParametricEdges + numRadialEdges - 2 - 1\0A        //                       = numParametricSegments + 1 + numRadialSegments + 1 - 2 - 1\0A        //                       = numParametricSegments + numRadialSegments - 1\0A        //\0A        float numCombinedSegments = numParametricSegments + numRadialSegments - 1.0;\0A\0A        if (P[0] == P[3] && tangents[0] == tangents[1]) {\0A            // The vertex shader intentionally disabled our section. Set numCombinedSegments to 0.\0A            numCombinedSegments = 0.0;\0A        }\0A\0A        // Pack the args for the evaluation stage.\0A        tcsPts01[gl_InvocationID] = vec4(P[0], P[1]);\0A        tcsPt2Tan0[gl_InvocationID] = vec4(P[2], tangents[0]);\0A        tcsTessArgs[gl_InvocationID] = vec4(numCombinedSegments, numParametricSegments, angle0,\0A                                            rotation / numRadialSegments);\0A        if (gl_InvocationID == 2) {\0A            tcsEndPtEndTan = vec4(P[3], tangents[1]);\0A        }\0A\0A        barrier();\0A\0A        // Tessellate a quad strip with enough segments for the join plus all 3 curve sections\0A        // combined.\0A        float numTotalCombinedSegments = tcsJoinArgs0.x + tcsTessArgs[0].x + tcsTessArgs[1].x +\0A                                         tcsTessArgs[2].x;\0A\0A        if (tcsJoinArgs0.x != 0.0 && tcsJoinArgs0.x != numTotalCombinedSegments) {\0A            // We are tessellating a quad strip with both a single-sided join and a double-sided\0A            // stroke. Add one more edge to the join. This new edge will fall parallel with the\0A            // first edge of the stroke, eliminating artifacts on the transition from single\0A            // sided to double.\0A            ++tcsJoinArgs0.x;\0A            ++numTotalCombinedSegments;\0A        }\0A\0A        numTotalCombinedSegments = min(numTotalCombinedSegments, MAX_TESSELLATION_SEGMENTS);\0A        gl_TessLevelInner[0] = numTotalCombinedSegments;\0A        gl_TessLevelInner[1] = 2.0;\0A        gl_TessLevelOuter[0] = 2.0;\0A        gl_TessLevelOuter[1] = numTotalCombinedSegments;\0A        gl_TessLevelOuter[2] = 2.0;\0A        gl_TessLevelOuter[3] = numTotalCombinedSegments;\0A    }\00", align 1
@.str.58 = private unnamed_addr constant [39 x i8] c"layout(quads, equal_spacing, ccw) in;\0A\00", align 1
@.str.59 = private unnamed_addr constant [25 x i8] c"#define float3x2 mat3x2\0A\00", align 1
@.str.60 = private unnamed_addr constant [41 x i8] c"#define MAX_PARAMETRIC_SEGMENTS_LOG2 %i\0A\00", align 1
@.str.61 = private unnamed_addr constant [28 x i8] c"#define STROKE_RADIUS %s.w\0A\00", align 1
@.str.62 = private unnamed_addr constant [39 x i8] c"#define STROKE_RADIUS tcsStrokeRadius\0A\00", align 1
@.str.63 = private unnamed_addr constant [18 x i8] c"uniform vec2 %s;\0A\00", align 1
@.str.64 = private unnamed_addr constant [22 x i8] c"#define TRANSLATE %s\0A\00", align 1
@.str.65 = private unnamed_addr constant [32 x i8] c"#define AFFINE_MATRIX mat2(%s)\0A\00", align 1
@.str.66 = private unnamed_addr constant [414 x i8] c"\0A    in vec4 tcsPts01[];\0A    in vec4 tcsPt2Tan0[];\0A    in vec4 tcsTessArgs[];  // [numCombinedSegments, numParametricSegments, angle0, radsPerSegment]\0A    patch in vec4 tcsJoinArgs0;  // [numSegmentsInJoin, innerJoinRadiusMultiplier,\0A                                 //  prevJoinTangent.xy]\0A    patch in vec4 tcsJoinArgs1;  // [joinAngle0, radsPerJoinSegment, joinOutsetClamp.xy]\0A    patch in vec4 tcsEndPtEndTan;\00", align 1
@.str.67 = private unnamed_addr constant [41 x i8] c"\0A        patch in float tcsStrokeRadius;\00", align 1
@.str.68 = private unnamed_addr constant [73 x i8] c"\0A        patch in mediump vec4 tcsColor;\0A        %s out mediump vec4 %s;\00", align 1
@.str.69 = private unnamed_addr constant [31 x i8] c"\0A    uniform vec4 sk_RTAdjust;\00", align 1
@.str.70 = private unnamed_addr constant [2835 x i8] c"\0A    void main() {\0A        // Our patch is composed of exactly \22numTotalCombinedSegments + 1\22 stroke-width edges that\0A        // run orthogonal to the curve and make a strip of \22numTotalCombinedSegments\22 quads.\0A        // Determine which discrete edge belongs to this invocation. An edge can either come from a\0A        // parametric segment or a radial one.\0A        float numSegmentsInJoin = tcsJoinArgs0.x;\0A        float numTotalCombinedSegments = numSegmentsInJoin + tcsTessArgs[0].x + tcsTessArgs[1].x +\0A                                         tcsTessArgs[2].x;\0A        float combinedEdgeID = round(gl_TessCoord.x * numTotalCombinedSegments);\0A        float strokeOutset = gl_TessCoord.y * 2.0 - 1.0;\0A\0A        // Furthermore, the vertex shader may have chopped the curve into 3 different sections.\0A        // Determine which section we belong to, and where we fall relative to its first edge.\0A        mat4x2 P;\0A        vec2 tan0;\0A        vec3 tessellationArgs;\0A        if (combinedEdgeID < numSegmentsInJoin || numSegmentsInJoin == numTotalCombinedSegments) {\0A            // Our edge belongs to the join preceding the curve.\0A            P = mat4x2(tcsPts01[0].xyxy, tcsPts01[0].xyxy);\0A            tan0 = tcsJoinArgs0.zw;\0A            tessellationArgs = vec3(1, tcsJoinArgs1.xy);\0A            strokeOutset = clamp(strokeOutset, tcsJoinArgs1.z, tcsJoinArgs1.w);\0A            strokeOutset *= (combinedEdgeID == 1.0) ? tcsJoinArgs0.y : 1.0;\0A        } else if ((combinedEdgeID -= numSegmentsInJoin) < tcsTessArgs[0].x) {\0A            // Our edge belongs to the first curve section.\0A            P = mat4x2(tcsPts01[0], tcsPt2Tan0[0].xy, tcsPts01[1].xy);\0A            tan0 = tcsPt2Tan0[0].zw;\0A            tessellationArgs = tcsTessArgs[0].yzw;\0A        } else if ((combinedEdgeID -= tcsTessArgs[0].x) < tcsTessArgs[1].x) {\0A            // Our edge belongs to the second curve section.\0A            P = mat4x2(tcsPts01[1], tcsPt2Tan0[1].xy, tcsPts01[2].xy);\0A            tan0 = tcsPt2Tan0[1].zw;\0A            tessellationArgs = tcsTessArgs[1].yzw;\0A        } else {\0A            // Our edge belongs to the third curve section.\0A            combinedEdgeID -= tcsTessArgs[1].x;\0A            P = mat4x2(tcsPts01[2], tcsPt2Tan0[2].xy, tcsEndPtEndTan.xy);\0A            tan0 = tcsPt2Tan0[2].zw;\0A            tessellationArgs = tcsTessArgs[2].yzw;\0A        }\0A        float numParametricSegments = tessellationArgs.x;\0A        float angle0 = tessellationArgs.y;\0A        float radsPerSegment = tessellationArgs.z;\0A        float2 tan1 = tcsEndPtEndTan.zw;\0A        bool isFinalEdge = (gl_TessCoord.x == 1);\0A        float w = -1.0;  // w<0 means the curve is an integral cubic.\0A        if (isinf(P[3].y)) {\0A            w = P[3].x;  // The curve is actually a conic.\0A            P[3] = P[2];  // Setting p3 equal to p2 works for the remaining rotational logic.\0A        }\00", align 1
@.str.71 = private unnamed_addr constant [77 x i8] c"\0A        gl_Position = vec4(%s * sk_RTAdjust.xz + sk_RTAdjust.yw, 0.0, 1.0);\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"\0A        %s = tcsColor;\00", align 1
@.str.73 = private unnamed_addr constant [7 x i8] c"\0A    }\00", align 1
@_ZTV30GrStrokeTessellationShaderImpl = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrStrokeShaderImpl*)* @_ZN18GrStrokeShaderImplD2Ev to i8*), i8* bitcast (void (%class.GrStrokeTessellationShaderImpl*)* @_ZN30GrStrokeTessellationShaderImplD0Ev to i8*), i8* bitcast (void (%class.GrStrokeShaderImpl*, %class.GrGLSLProgramDataManager*, %class.GrShaderCaps*, %class.GrGeometryProcessor*)* @_ZN18GrStrokeShaderImpl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor to i8*), i8* bitcast (void (%class.SkString*, %class.GrStrokeTessellationShaderImpl*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK30GrStrokeTessellationShaderImpl24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrStrokeTessellationShaderImpl*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK30GrStrokeTessellationShaderImpl27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.GrStrokeTessellationShaderImpl*, %"struct.GrGLSLGeometryProcessor::EmitArgs"*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*)* @_ZN30GrStrokeTessellationShaderImpl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS0_8GrGPArgsE to i8*)] }, align 8
@.str.74 = private unnamed_addr constant [19 x i8] c"const %s %s = %s;\0A\00", align 1
@.str.75 = private unnamed_addr constant [15 x i8] c"const %s %s = \00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c";\0A\00", align 1
@.str.78 = private unnamed_addr constant [648 x i8] c"\0A    float length_pow2(float2 v) {\0A        return dot(v, v);\0A    }\0A    float wangs_formula(float parametricPrecision, float2 p0, float2 p1, float2 p2, float2 p3,\0A                        float w) {\0A        const float CUBIC_TERM_POW2 = %f;\0A        float l0 = length_pow2(fma(float2(-2), p1, p2) + p0);\0A        float l1 = length_pow2(fma(float2(-2), p2, p3) + p1);\0A        float m = CUBIC_TERM_POW2 * max(l0, l1);\0A        // FIXME: Use the better formula from GrWangsFormula::conic().\0A        const float QUAD_TERM_POW2 = %f;\0A        m = (w >= 0.0) ? QUAD_TERM_POW2 * l0 : m;\0A        return max(ceil(sqrt(parametricPrecision * sqrt(m))), 1.0);\0A    }\00", align 1
@_ZTV18GrStrokeShaderImpl = external unnamed_addr constant { [8 x i8*] }, align 8
@_ZTV23GrGLSLGeometryProcessor = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD2Ev to i8*), i8* bitcast (void (%class.GrGLSLGeometryProcessor*)* @_ZN23GrGLSLGeometryProcessorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void (%class.SkString*, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor*, i8*, %class.GrGLSLUniformHandler*, %class.GrShaderCaps*)* @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str.79 = private unnamed_addr constant [62 x i8] c"../../third_party/skia/src/gpu/glsl/GrGLSLGeometryProcessor.h\00", align 1
@.str.80 = private unnamed_addr constant [17 x i8] c"Not implemented.\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN30GrStrokeTessellationShaderImpl10onEmitCodeERN23GrGLSLGeometryProcessor8EmitArgsEPNS0_8GrGPArgsE(%class.GrStrokeTessellationShaderImpl*, %"struct.GrGLSLGeometryProcessor::EmitArgs"* dereferenceable(88), %"struct.GrGLSLGeometryProcessor::GrGPArgs"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkString, align 8
  %5 = alloca %class.SkString, align 8
  %6 = alloca %class.SkString, align 8
  %7 = alloca %class.SkString, align 8
  %8 = alloca %class.SkString, align 8
  %9 = alloca %class.SkString, align 8
  %10 = alloca %class.SkString, align 8
  %11 = alloca %class.SkString, align 8
  %12 = alloca %class.SkString, align 8
  %13 = alloca %class.SkString, align 8
  %14 = alloca %class.SkString, align 8
  %15 = alloca %class.GrShaderVar, align 8
  %16 = alloca %class.GrShaderVar, align 8
  %17 = alloca %class.GrShaderVar, align 8
  %18 = alloca %class.GrShaderVar, align 8
  %19 = alloca %class.GrShaderVar, align 8
  %20 = alloca %class.GrShaderVar, align 8
  %21 = alloca %class.GrShaderVar, align 8
  %22 = alloca %class.GrShaderVar, align 8
  %23 = alloca %class.GrShaderVar, align 8
  %24 = alloca %class.GrShaderVar, align 8
  %25 = alloca %class.GrShaderVar, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca %class.SkString, align 8
  %30 = alloca %class.GrShaderVar, align 8
  %31 = alloca %class.SkString, align 8
  %32 = alloca %class.SkString, align 8
  %33 = alloca %class.SkString, align 8
  %34 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 6
  %35 = bitcast %class.GrGeometryProcessor** %34 to %class.GrStrokeShader**
  %36 = load %class.GrStrokeShader*, %class.GrStrokeShader** %35, align 8
  %37 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 4
  %38 = load %class.GrGLSLUniformHandler*, %class.GrGLSLUniformHandler** %37, align 8
  %39 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 0
  %40 = load %class.GrGLSLVertexBuilder*, %class.GrGLSLVertexBuilder** %39, align 8
  %41 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 3
  %42 = load %class.GrGLSLVaryingHandler*, %class.GrGLSLVaryingHandler** %41, align 8
  %43 = bitcast %class.GrStrokeShader* %36 to %class.GrGeometryProcessor*
  tail call void @_ZN20GrGLSLVaryingHandler14emitAttributesERK19GrGeometryProcessor(%class.GrGLSLVaryingHandler* %42, %class.GrGeometryProcessor* dereferenceable(80) %43) #5
  %44 = bitcast %class.GrGLSLVertexBuilder* %40 to %class.GrGLSLShaderBuilder*
  %45 = getelementptr inbounds %class.GrGLSLVertexBuilder, %class.GrGLSLVertexBuilder* %40, i64 0, i32 0, i32 0, i32 3, i32 1, i32 0
  %46 = load %class.SkString*, %class.SkString** %45, align 8
  %47 = getelementptr inbounds %class.SkString, %class.SkString* %46, i64 1
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %47, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0)) #5
  %48 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 5
  %49 = load %class.GrShaderCaps*, %class.GrShaderCaps** %48, align 8
  %50 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %49, i64 0, i32 17
  %51 = load i32, i32* %50, align 4
  tail call void (%class.GrGLSLShaderBuilder*, i8*, i8*, i8*, ...) @_ZN19GrGLSLShaderBuilder15defineConstantfEPKcS1_S1_z(%class.GrGLSLShaderBuilder* %44, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i32 %51)
  %52 = bitcast %class.GrShaderVar* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #5
  %53 = bitcast %class.SkString* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0)) #5
  %54 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %15, i64 0, i32 0
  store i32 24, i32* %54, align 8
  %55 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %15, i64 0, i32 1
  store i32 1, i32* %55, align 4
  %56 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %15, i64 0, i32 2
  store i32 0, i32* %56, align 8
  %57 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %15, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %57, %class.SkString* nonnull dereferenceable(8) %14) #5
  %58 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %15, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %58) #5
  %59 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %15, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %59) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %15) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %59) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %58) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %57) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #5
  %60 = bitcast %class.GrShaderVar* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %60) #5
  %61 = bitcast %class.SkString* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #5
  %62 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %16, i64 0, i32 0
  store i32 24, i32* %62, align 8
  %63 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %16, i64 0, i32 1
  store i32 1, i32* %63, align 4
  %64 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %16, i64 0, i32 2
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %16, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %65, %class.SkString* nonnull dereferenceable(8) %13) #5
  %66 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %16, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %66) #5
  %67 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %16, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %67) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %16) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %67) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %66) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %65) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %60) #5
  %68 = bitcast %class.GrShaderVar* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %68) #5
  %69 = bitcast %class.SkString* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)) #5
  %70 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %17, i64 0, i32 0
  store i32 24, i32* %70, align 8
  %71 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %17, i64 0, i32 1
  store i32 1, i32* %71, align 4
  %72 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %17, i64 0, i32 2
  store i32 0, i32* %72, align 8
  %73 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %17, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %73, %class.SkString* nonnull dereferenceable(8) %12) #5
  %74 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %17, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %74) #5
  %75 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %17, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %75) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %17) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %75) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %74) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %73) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %68) #5
  %76 = bitcast %class.GrShaderVar* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %76) #5
  %77 = bitcast %class.SkString* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0)) #5
  %78 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %18, i64 0, i32 0
  store i32 24, i32* %78, align 8
  %79 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %18, i64 0, i32 1
  store i32 1, i32* %79, align 4
  %80 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %18, i64 0, i32 2
  store i32 0, i32* %80, align 8
  %81 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %18, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %81, %class.SkString* nonnull dereferenceable(8) %11) #5
  %82 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %18, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %82) #5
  %83 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %18, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %83) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %18) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %83) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %82) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %81) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %76) #5
  %84 = bitcast %class.GrShaderVar* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %84) #5
  %85 = bitcast %class.SkString* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0)) #5
  %86 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %19, i64 0, i32 0
  store i32 24, i32* %86, align 8
  %87 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %19, i64 0, i32 1
  store i32 1, i32* %87, align 4
  %88 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %19, i64 0, i32 2
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %19, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %89, %class.SkString* nonnull dereferenceable(8) %10) #5
  %90 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %19, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %90) #5
  %91 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %19, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %91) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %19) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %91) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %90) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %89) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %84) #5
  %92 = bitcast %class.GrShaderVar* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %92) #5
  %93 = bitcast %class.SkString* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0)) #5
  %94 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %20, i64 0, i32 0
  store i32 24, i32* %94, align 8
  %95 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %20, i64 0, i32 1
  store i32 1, i32* %95, align 4
  %96 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %20, i64 0, i32 2
  store i32 0, i32* %96, align 8
  %97 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %20, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %97, %class.SkString* nonnull dereferenceable(8) %9) #5
  %98 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %20, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %98) #5
  %99 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %20, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %99) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %20) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %99) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %98) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %97) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %92) #5
  %100 = bitcast %class.GrShaderVar* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %100) #5
  %101 = bitcast %class.SkString* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %101)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0)) #5
  %102 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %21, i64 0, i32 0
  store i32 24, i32* %102, align 8
  %103 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %21, i64 0, i32 1
  store i32 1, i32* %103, align 4
  %104 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %21, i64 0, i32 2
  store i32 0, i32* %104, align 8
  %105 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %21, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %105, %class.SkString* nonnull dereferenceable(8) %8) #5
  %106 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %21, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %106) #5
  %107 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %21, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %107) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %101)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %21) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %107) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %106) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %105) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %100) #5
  %108 = bitcast %class.GrShaderVar* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %108) #5
  %109 = bitcast %class.SkString* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0)) #5
  %110 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %22, i64 0, i32 0
  store i32 24, i32* %110, align 8
  %111 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %22, i64 0, i32 1
  store i32 1, i32* %111, align 4
  %112 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %22, i64 0, i32 2
  store i32 0, i32* %112, align 8
  %113 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %22, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %113, %class.SkString* nonnull dereferenceable(8) %7) #5
  %114 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %22, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %114) #5
  %115 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %22, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %115) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %22) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %115) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %114) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %113) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %108) #5
  %116 = bitcast %class.GrShaderVar* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %116) #5
  %117 = bitcast %class.SkString* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0)) #5
  %118 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %23, i64 0, i32 0
  store i32 24, i32* %118, align 8
  %119 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %23, i64 0, i32 1
  store i32 1, i32* %119, align 4
  %120 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %23, i64 0, i32 2
  store i32 0, i32* %120, align 8
  %121 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %23, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %121, %class.SkString* nonnull dereferenceable(8) %6) #5
  %122 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %23, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %122) #5
  %123 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %23, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %123) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %23) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %123) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %122) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %121) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %116) #5
  %124 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %36, i64 0, i32 2
  %125 = load i32, i32* %124, align 8
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %138, label %128

128:                                              ; preds = %3
  %129 = bitcast %class.GrShaderVar* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %129) #5
  %130 = bitcast %class.SkString* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %130)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0)) #5
  %131 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %24, i64 0, i32 0
  store i32 22, i32* %131, align 8
  %132 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %24, i64 0, i32 1
  store i32 1, i32* %132, align 4
  %133 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %24, i64 0, i32 2
  store i32 0, i32* %133, align 8
  %134 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %24, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %134, %class.SkString* nonnull dereferenceable(8) %5) #5
  %135 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %24, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %135) #5
  %136 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %24, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %136) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %130)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %24) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %136) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %135) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %134) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %129) #5
  %137 = load i32, i32* %124, align 8
  br label %138

138:                                              ; preds = %3, %128
  %139 = phi i32 [ %125, %3 ], [ %137, %128 ]
  %140 = and i32 %139, 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %151, label %142

142:                                              ; preds = %138
  %143 = bitcast %class.GrShaderVar* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %143) #5
  %144 = bitcast %class.SkString* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %144)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0)) #5
  %145 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %25, i64 0, i32 0
  store i32 31, i32* %145, align 8
  %146 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %25, i64 0, i32 1
  store i32 1, i32* %146, align 4
  %147 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %25, i64 0, i32 2
  store i32 0, i32* %147, align 8
  %148 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %25, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %148, %class.SkString* nonnull dereferenceable(8) %4) #5
  %149 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %25, i64 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %149) #5
  %150 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %25, i64 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %150) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %144)
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %44, %class.GrShaderVar* nonnull dereferenceable(40) %25) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %150) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %149) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %148) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %143) #5
  br label %151

151:                                              ; preds = %138, %142
  %152 = load i8*, i8** @_ZN18GrStrokeShaderImpl8kAtan2FnE, align 8
  %153 = load %class.SkString*, %class.SkString** %45, align 8
  %154 = getelementptr inbounds %class.SkString, %class.SkString* %153, i64 7
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %154, i64 -1, i8* %152) #5
  %155 = load i8*, i8** @_ZN18GrStrokeShaderImpl23kCosineBetweenVectorsFnE, align 8
  %156 = load %class.SkString*, %class.SkString** %45, align 8
  %157 = getelementptr inbounds %class.SkString, %class.SkString* %156, i64 7
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %157, i64 -1, i8* %155) #5
  %158 = load i8*, i8** @_ZN18GrStrokeShaderImpl14kMiterExtentFnE, align 8
  %159 = load %class.SkString*, %class.SkString** %45, align 8
  %160 = getelementptr inbounds %class.SkString, %class.SkString* %159, i64 7
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %160, i64 -1, i8* %158) #5
  %161 = load i8*, i8** @_ZN18GrStrokeShaderImpl15kUncheckedMixFnE, align 8
  %162 = load %class.SkString*, %class.SkString** %45, align 8
  %163 = getelementptr inbounds %class.SkString, %class.SkString* %162, i64 7
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %163, i64 -1, i8* %161) #5
  %164 = load i32, i32* %124, align 8
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %172, label %167

167:                                              ; preds = %151
  %168 = load i8*, i8** @_ZN18GrStrokeShaderImpl29kNumRadialSegmentsPerRadianFnE, align 8
  %169 = load %class.SkString*, %class.SkString** %45, align 8
  %170 = getelementptr inbounds %class.SkString, %class.SkString* %169, i64 7
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %170, i64 -1, i8* %168) #5
  %171 = load i32, i32* %124, align 8
  br label %172

172:                                              ; preds = %151, %167
  %173 = phi i32 [ %164, %151 ], [ %171, %167 ]
  %174 = and i32 %173, 2
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %185

176:                                              ; preds = %172
  %177 = bitcast i8** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %177) #5
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %178 = bitcast %class.GrGLSLUniformHandler* %38 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %179 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %178, align 8
  %180 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %179, i64 13
  %181 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %180, align 8
  %182 = call i32 %181(%class.GrGLSLUniformHandler* %38, %class.GrFragmentProcessor* null, i32 5, i32 24, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.16, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %26) #5
  %183 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 1, i32 0
  store i32 %182, i32* %183, align 8
  %184 = load i8*, i8** %26, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %44, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.17, i64 0, i64 0), i8* %184, i8* %184)
  br label %194

185:                                              ; preds = %172
  %186 = bitcast i8** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #5
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %27, align 8
  %187 = bitcast %class.GrGLSLUniformHandler* %38 to i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)***
  %188 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %187, align 8
  %189 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %188, i64 13
  %190 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %189, align 8
  %191 = call i32 %190(%class.GrGLSLUniformHandler* %38, %class.GrFragmentProcessor* null, i32 5, i32 21, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %27) #5
  %192 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 1, i32 0
  store i32 %191, i32* %192, align 8
  %193 = load i8*, i8** %27, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %44, i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.19, i64 0, i64 0), i8* %193)
  br label %194

194:                                              ; preds = %185, %176
  %195 = phi i8* [ %186, %185 ], [ %177, %176 ]
  %196 = phi i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** [ %187, %185 ], [ %178, %176 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %195) #5
  %197 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %196, align 8
  %198 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %197, i64 13
  %199 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %198, align 8
  %200 = call i32 %199(%class.GrGLSLUniformHandler* %38, %class.GrFragmentProcessor* null, i32 4, i32 22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i1 zeroext true, i32 0, i8** null) #5
  %201 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0
  %202 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 2, i32 0
  store i32 %200, i32* %202, align 4
  %203 = bitcast i8** %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %203) #5
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %28, align 8
  %204 = getelementptr inbounds %class.GrStrokeShader, %class.GrStrokeShader* %36, i64 0, i32 3
  %205 = call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %204) #5
  %206 = icmp eq i32 %205, 0
  %207 = select i1 %206, i32 5, i32 4
  %208 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)**, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*** %196, align 8
  %209 = getelementptr inbounds i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %208, i64 13
  %210 = load i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)*, i32 (%class.GrGLSLUniformHandler*, %class.GrFragmentProcessor*, i32, i32, i8*, i1, i32, i8**)** %209, align 8
  %211 = call i32 %210(%class.GrGLSLUniformHandler* %38, %class.GrFragmentProcessor* null, i32 %207, i32 24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i64 0, i64 0), i1 zeroext true, i32 0, i8** nonnull %28) #5
  %212 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 3, i32 0
  store i32 %211, i32* %212, align 8
  %213 = and i32 %207, 1
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %194
  %216 = load i8*, i8** %28, align 8
  call void (%class.GrGLSLShaderBuilder*, i8*, ...) @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder* %44, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.22, i64 0, i64 0), i8* %216)
  br label %217

217:                                              ; preds = %194, %215
  %218 = getelementptr inbounds %class.GrGLSLVertexBuilder, %class.GrGLSLVertexBuilder* %40, i64 0, i32 0, i32 0, i32 14
  %219 = load i32, i32* %218, align 8
  %220 = load %class.SkString*, %class.SkString** %45, align 8
  %221 = sext i32 %219 to i64
  %222 = getelementptr inbounds %class.SkString, %class.SkString* %220, i64 %221
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %222, i64 -1, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.23, i64 0, i64 0)) #5
  %223 = call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* %204) #5
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %230

225:                                              ; preds = %217
  %226 = load i32, i32* %218, align 8
  %227 = load %class.SkString*, %class.SkString** %45, align 8
  %228 = sext i32 %226 to i64
  %229 = getelementptr inbounds %class.SkString, %class.SkString* %227, i64 %228
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %229, i64 -1, i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.24, i64 0, i64 0)) #5
  br label %230

230:                                              ; preds = %225, %217
  %231 = load i32, i32* %218, align 8
  %232 = load %class.SkString*, %class.SkString** %45, align 8
  %233 = sext i32 %231 to i64
  %234 = getelementptr inbounds %class.SkString, %class.SkString* %232, i64 %233
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %234, i64 -1, i8* getelementptr inbounds ([8024 x i8], [8024 x i8]* @.str.25, i64 0, i64 0)) #5
  %235 = load i32, i32* %124, align 8
  %236 = and i32 %235, 2
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %244, label %238

238:                                              ; preds = %230
  %239 = load i32, i32* %218, align 8
  %240 = load %class.SkString*, %class.SkString** %45, align 8
  %241 = sext i32 %239 to i64
  %242 = getelementptr inbounds %class.SkString, %class.SkString* %240, i64 %241
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %242, i64 -1, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.26, i64 0, i64 0)) #5
  %243 = load i32, i32* %124, align 8
  br label %244

244:                                              ; preds = %230, %238
  %245 = phi i32 [ %235, %230 ], [ %243, %238 ]
  %246 = and i32 %245, 4
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %285, label %248

248:                                              ; preds = %244
  %249 = load i32, i32* %218, align 8
  %250 = load %class.SkString*, %class.SkString** %45, align 8
  %251 = sext i32 %249 to i64
  %252 = getelementptr inbounds %class.SkString, %class.SkString* %250, i64 %251
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %252, i64 -1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.27, i64 0, i64 0)) #5
  %253 = load i32, i32* %124, align 8
  %254 = and i32 %253, 4
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %285, label %256

256:                                              ; preds = %248
  %257 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 6
  %258 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString* %257, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i64 0, i64 0)) #5
  %259 = bitcast %class.SkString* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %259) #5
  %260 = getelementptr inbounds %class.SkString, %class.SkString* %29, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %260, align 8
  %261 = load %class.GrShaderCaps*, %class.GrShaderCaps** %48, align 8
  %262 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %261, i64 0, i32 2
  %263 = bitcast i56* %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = and i64 %264, 2048
  %266 = icmp eq i64 %265, 0
  %267 = select i1 %266, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0)
  call void @_ZN8SkStringC1EPKc(%class.SkString* nonnull %29, i8* %267) #5
  %268 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::EmitArgs", %"struct.GrGLSLGeometryProcessor::EmitArgs"* %1, i64 0, i32 2
  %269 = load %class.GrGLSLFPFragmentBuilder*, %class.GrGLSLFPFragmentBuilder** %268, align 8
  %270 = bitcast %class.GrGLSLFPFragmentBuilder* %269 to i8**
  %271 = load i8*, i8** %270, align 8
  %272 = getelementptr i8, i8* %271, i64 -24
  %273 = bitcast i8* %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast %class.GrGLSLFPFragmentBuilder* %269 to i8*
  %276 = getelementptr inbounds i8, i8* %275, i64 %274
  %277 = bitcast i8* %276 to %class.GrGLSLShaderBuilder*
  %278 = bitcast %class.GrShaderVar* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %278) #5
  call void @_ZN8SkStringC1ERKS_(%class.SkString* nonnull %31, %class.SkString* dereferenceable(8) %257) #5
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %32) #5
  call void @_ZN8SkStringC1ERKS_(%class.SkString* nonnull %33, %class.SkString* nonnull dereferenceable(8) %29) #5
  %279 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %30, i64 0, i32 0
  store i32 31, i32* %279, align 8
  %280 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %30, i64 0, i32 1
  store i32 2, i32* %280, align 4
  %281 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %30, i64 0, i32 2
  store i32 0, i32* %281, align 8
  %282 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %30, i64 0, i32 3
  call void @_ZN8SkStringC1EOS_(%class.SkString* %282, %class.SkString* nonnull dereferenceable(8) %31) #5
  %283 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %30, i64 0, i32 4
  call void @_ZN8SkStringC1EOS_(%class.SkString* %283, %class.SkString* nonnull dereferenceable(8) %32) #5
  %284 = getelementptr inbounds %class.GrShaderVar, %class.GrShaderVar* %30, i64 0, i32 5
  call void @_ZN8SkStringC1EOS_(%class.SkString* %284, %class.SkString* nonnull dereferenceable(8) %33) #5
  call void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder* %277, %class.GrShaderVar* nonnull dereferenceable(40) %30) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %284) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %283) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %282) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %33) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %32) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %31) #5
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %278) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %29) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %259) #5
  br label %285

285:                                              ; preds = %244, %248, %256
  call void @_ZN18GrStrokeShaderImpl16emitFragmentCodeERK14GrStrokeShaderRKN23GrGLSLGeometryProcessor8EmitArgsE(%class.GrStrokeShaderImpl* %201, %class.GrStrokeShader* dereferenceable(272) %36, %"struct.GrGLSLGeometryProcessor::EmitArgs"* dereferenceable(88) %1) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %203) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN20GrGLSLVaryingHandler14emitAttributesERK19GrGeometryProcessor(%class.GrGLSLVaryingHandler*, %class.GrGeometryProcessor* dereferenceable(80)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLShaderBuilder15defineConstantfEPKcS1_S1_z(%class.GrGLSLShaderBuilder*, i8*, i8*, i8*, ...) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [1 x %struct.__va_list_tag], align 16
  %6 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 3, i32 0, i32 0, i64 120
  %7 = bitcast i8* %6 to %class.SkString**
  %8 = load %class.SkString*, %class.SkString** %7, align 8
  %9 = getelementptr inbounds %class.SkString, %class.SkString* %8, i64 1
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.75, i64 0, i64 0), i8* %1, i8* %2) #5
  %10 = bitcast [1 x %struct.__va_list_tag]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #5
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %12 = bitcast [1 x %struct.__va_list_tag]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %10)
  %13 = load %class.SkString*, %class.SkString** %7, align 8
  %14 = getelementptr inbounds %class.SkString, %class.SkString* %13, i64 1
  call void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString* %14, i8* %3, %struct.__va_list_tag* nonnull %11) #5
  call void @llvm.va_end(i8* nonnull %10)
  %15 = load %class.SkString*, %class.SkString** %7, align 8
  %16 = getelementptr inbounds %class.SkString, %class.SkString* %15, i64 1
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %16, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i64 0, i64 0)) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #5
  ret void
}

declare void @_ZN19GrGLSLShaderBuilder13declareGlobalERK11GrShaderVar(%class.GrGLSLShaderBuilder*, %class.GrShaderVar* dereferenceable(40)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrGLSLShaderBuilder11codeAppendfEPKcz(%class.GrGLSLShaderBuilder*, i8*, ...) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %6 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 24, i1 false)
  call void @llvm.va_start(i8* nonnull %4)
  %7 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 3, i32 0, i32 0, i64 120
  %8 = getelementptr inbounds %class.GrGLSLShaderBuilder, %class.GrGLSLShaderBuilder* %0, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = bitcast i8* %7 to %class.SkString**
  %11 = load %class.SkString*, %class.SkString** %10, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds %class.SkString, %class.SkString* %11, i64 %12
  call void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString* %13, i8* %1, %struct.__va_list_tag* nonnull %5) #5
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret void
}

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSEPKc(%class.SkString*, i8*) local_unnamed_addr #2

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #2

declare void @_ZN8SkStringC1ERKS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #2

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #3

declare void @_ZN18GrStrokeShaderImpl16emitFragmentCodeERK14GrStrokeShaderRKN23GrGLSLGeometryProcessor8EmitArgsE(%class.GrStrokeShaderImpl*, %class.GrStrokeShader* dereferenceable(272), %"struct.GrGLSLGeometryProcessor::EmitArgs"* dereferenceable(88)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK30GrStrokeTessellationShaderImpl24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrStrokeTessellationShaderImpl* nocapture readonly, %class.GrGeometryProcessor* nocapture readonly dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* nocapture readonly dereferenceable(144)) unnamed_addr #0 align 2 {
  %7 = alloca %class.SkString, align 8
  %8 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %8, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %3) #5
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.38, i64 0, i64 0)) #5
  %9 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 17
  %10 = load i32, i32* %9, align 4
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.39, i64 0, i64 0), i32 %10) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.40, i64 0, i64 0)) #5
  %11 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = bitcast %class.GrGLSLUniformHandler* %4 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %14 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %13, align 8
  %15 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %14, i64 3
  %16 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %15, align 8
  %17 = tail call i8* %16(%class.GrGLSLUniformHandler* %4, i32 %12) #5
  %18 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %2, i64 1, i32 4
  %19 = bitcast %"class.GrGeometryProcessor::AttributeSet"* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %6
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0), i8* %17) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42, i64 0, i64 0), i8* %17) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.43, i64 0, i64 0), i8* %17) #5
  br label %25

24:                                               ; preds = %6
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.44, i64 0, i64 0), i8* %17) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.45, i64 0, i64 0), i8* %17) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.46, i64 0, i64 0)) #5
  br label %25

25:                                               ; preds = %24, %23
  %26 = bitcast %class.SkString* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #5
  %27 = getelementptr inbounds %class.SkString, %class.SkString* %7, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %27, align 8, !alias.scope !2
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %7) #5
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* nonnull %7, i8* getelementptr inbounds ([648 x i8], [648 x i8]* @.str.78, i64 0, i64 0), double 5.625000e-01, double 6.250000e-02) #5
  %28 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %27, align 8
  %29 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %28, i64 0, i32 2
  %30 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %28, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  call void @_ZN8SkString6insertEmPKcm(%class.SkString* %0, i64 -1, i8* %29, i64 %32) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #5
  %33 = load i8*, i8** @_ZN18GrStrokeShaderImpl8kAtan2FnE, align 8
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* %33) #5
  %34 = load i8*, i8** @_ZN18GrStrokeShaderImpl23kCosineBetweenVectorsFnE, align 8
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* %34) #5
  %35 = load i8*, i8** @_ZN18GrStrokeShaderImpl14kMiterExtentFnE, align 8
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* %35) #5
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.47, i64 0, i64 0)) #5
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([218 x i8], [218 x i8]* @.str.48, i64 0, i64 0)) #5
  %36 = load i32, i32* %19, align 8
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %25
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.49, i64 0, i64 0)) #5
  %40 = load i32, i32* %19, align 8
  br label %41

41:                                               ; preds = %25, %39
  %42 = phi i32 [ %36, %25 ], [ %40, %39 ]
  %43 = and i32 %42, 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.50, i64 0, i64 0)) #5
  br label %46

46:                                               ; preds = %41, %45
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([419 x i8], [419 x i8]* @.str.51, i64 0, i64 0)) #5
  %47 = load i32, i32* %19, align 8
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %46
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.52, i64 0, i64 0)) #5
  %51 = load i32, i32* %19, align 8
  br label %52

52:                                               ; preds = %46, %50
  %53 = phi i32 [ %47, %46 ], [ %51, %50 ]
  %54 = and i32 %53, 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %52
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.53, i64 0, i64 0)) #5
  br label %57

57:                                               ; preds = %52, %56
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([151 x i8], [151 x i8]* @.str.54, i64 0, i64 0)) #5
  %58 = load i32, i32* %19, align 8
  %59 = and i32 %58, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.55, i64 0, i64 0)) #5
  %62 = load i32, i32* %19, align 8
  br label %63

63:                                               ; preds = %57, %61
  %64 = phi i32 [ %58, %57 ], [ %62, %61 ]
  %65 = and i32 %64, 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %68, label %67

67:                                               ; preds = %63
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.56, i64 0, i64 0)) #5
  br label %68

68:                                               ; preds = %63, %67
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([5433 x i8], [5433 x i8]* @.str.57, i64 0, i64 0)) #5
  ret void
}

declare void @_ZN8SkString7appendfEPKcz(%class.SkString*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK30GrStrokeTessellationShaderImpl27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrStrokeTessellationShaderImpl*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #0 align 2 {
  %7 = alloca %"struct.GrGLSLGeometryProcessor::GrGPArgs", align 8
  %8 = bitcast %class.GrGeometryProcessor* %2 to %class.GrStrokeShader*
  %9 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %9, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %3) #5
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.58, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.35, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.59, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i64 0, i64 0)) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.38, i64 0, i64 0)) #5
  %10 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 17
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, -1
  %13 = tail call i32 @llvm.ctlz.i32(i32 %12, i1 false) #5, !range !5
  %14 = sub nuw nsw i32 32, %13
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.60, i64 0, i64 0), i32 %14) #5
  %15 = getelementptr inbounds %class.GrGeometryProcessor, %class.GrGeometryProcessor* %2, i64 1, i32 4
  %16 = bitcast %"class.GrGeometryProcessor::AttributeSet"* %15 to i32*
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %6
  %21 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0, i32 1, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = bitcast %class.GrGLSLUniformHandler* %4 to i8* (%class.GrGLSLUniformHandler*, i32)***
  %24 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %23, align 8
  %25 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %24, i64 3
  %26 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %25, align 8
  %27 = tail call i8* %26(%class.GrGLSLUniformHandler* %4, i32 %22) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0), i8* %27) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.61, i64 0, i64 0), i8* %27) #5
  br label %30

28:                                               ; preds = %6
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.62, i64 0, i64 0)) #5
  %29 = bitcast %class.GrGLSLUniformHandler* %4 to i8* (%class.GrGLSLUniformHandler*, i32)***
  br label %30

30:                                               ; preds = %28, %20
  %31 = phi i8* (%class.GrGLSLUniformHandler*, i32)*** [ %29, %28 ], [ %23, %20 ]
  %32 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0
  %33 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0, i32 2, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %31, align 8
  %36 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %35, i64 3
  %37 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %36, align 8
  %38 = tail call i8* %37(%class.GrGLSLUniformHandler* %4, i32 %34) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.63, i64 0, i64 0), i8* %38) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.64, i64 0, i64 0), i8* %38) #5
  %39 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0, i32 3, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = load i8* (%class.GrGLSLUniformHandler*, i32)**, i8* (%class.GrGLSLUniformHandler*, i32)*** %31, align 8
  %42 = getelementptr inbounds i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %41, i64 3
  %43 = load i8* (%class.GrGLSLUniformHandler*, i32)*, i8* (%class.GrGLSLUniformHandler*, i32)** %42, align 8
  %44 = tail call i8* %43(%class.GrGLSLUniformHandler* %4, i32 %40) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0), i8* %44) #5
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.65, i64 0, i64 0), i8* %44) #5
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([414 x i8], [414 x i8]* @.str.66, i64 0, i64 0)) #5
  %45 = load i32, i32* %16, align 8
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %30
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.67, i64 0, i64 0)) #5
  %49 = load i32, i32* %16, align 8
  br label %50

50:                                               ; preds = %30, %48
  %51 = phi i32 [ %45, %30 ], [ %49, %48 ]
  %52 = and i32 %51, 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %64, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.GrShaderCaps, %class.GrShaderCaps* %5, i64 0, i32 2
  %56 = bitcast i56* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 2048
  %59 = icmp eq i64 %58, 0
  %60 = select i1 %59, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0)
  %61 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0, i32 6, i32 0, i32 0
  %62 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %61, align 8
  %63 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %62, i64 0, i32 2
  tail call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.68, i64 0, i64 0), i8* %60, i8* %63) #5
  br label %64

64:                                               ; preds = %50, %54
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.69, i64 0, i64 0)) #5
  %65 = load i8*, i8** @_ZN18GrStrokeShaderImpl15kUncheckedMixFnE, align 8
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* %65) #5
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([2835 x i8], [2835 x i8]* @.str.70, i64 0, i64 0)) #5
  %66 = bitcast %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %66) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 -86, i64 80, i1 false)
  %67 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 0
  store i32 0, i32* %67, align 8
  %68 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 1
  store i32 0, i32* %68, align 4
  %69 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 2
  store i32 0, i32* %69, align 8
  %70 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 3
  call void @_ZN8SkStringC1Ev(%class.SkString* %70) #5
  %71 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %71) #5
  %72 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %72) #5
  %73 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 1, i32 0
  store i32 0, i32* %73, align 8
  %74 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 1, i32 1
  store i32 0, i32* %74, align 4
  %75 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 1, i32 2
  store i32 0, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 1, i32 3
  call void @_ZN8SkStringC1Ev(%class.SkString* %76) #5
  %77 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 1, i32 4
  call void @_ZN8SkStringC1Ev(%class.SkString* %77) #5
  %78 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 1, i32 5
  call void @_ZN8SkStringC1Ev(%class.SkString* %78) #5
  call void @_ZNK18GrStrokeShaderImpl20emitTessellationCodeERK14GrStrokeShaderP8SkStringPN23GrGLSLGeometryProcessor8GrGPArgsERK12GrShaderCaps(%class.GrStrokeShaderImpl* %32, %class.GrStrokeShader* dereferenceable(272) %8, %class.SkString* %0, %"struct.GrGLSLGeometryProcessor::GrGPArgs"* nonnull %7, %class.GrShaderCaps* dereferenceable(144) %5) #5
  %79 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::GrGPArgs", %"struct.GrGLSLGeometryProcessor::GrGPArgs"* %7, i64 0, i32 0, i32 3, i32 0, i32 0
  %80 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %79, align 8
  %81 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %80, i64 0, i32 2
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.71, i64 0, i64 0), i8* %81) #5
  %82 = load i32, i32* %16, align 8
  %83 = and i32 %82, 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %64
  %86 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %1, i64 0, i32 0, i32 6, i32 0, i32 0
  %87 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %86, align 8
  %88 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %87, i64 0, i32 2
  call void (%class.SkString*, i8*, ...) @_ZN8SkString7appendfEPKcz(%class.SkString* %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.72, i64 0, i64 0), i8* %88) #5
  br label %89

89:                                               ; preds = %64, %85
  call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i64 0, i64 0)) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %78) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %77) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %76) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %72) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %71) #5
  call void @_ZN8SkStringD1Ev(%class.SkString* %70) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %66) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK18GrStrokeShaderImpl20emitTessellationCodeERK14GrStrokeShaderP8SkStringPN23GrGLSLGeometryProcessor8GrGPArgsERK12GrShaderCaps(%class.GrStrokeShaderImpl*, %class.GrStrokeShader* dereferenceable(272), %class.SkString*, %"struct.GrGLSLGeometryProcessor::GrGPArgs"*, %class.GrShaderCaps* dereferenceable(144)) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18GrStrokeShaderImplD2Ev(%class.GrStrokeShaderImpl*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV18GrStrokeShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 6
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %3) #5
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV23GrGLSLGeometryProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %class.GrStrokeShaderImpl, %class.GrStrokeShaderImpl* %0, i64 0, i32 0, i32 1, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %4, i64 0, i32 0
  br label %15

11:                                               ; preds = %15, %1
  %12 = phi i64 [ %6, %1 ], [ %20, %15 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %27, label %24

15:                                               ; preds = %15, %9
  %16 = phi i64 [ 0, %9 ], [ %19, %15 ]
  %17 = load %"struct.GrGLSLGeometryProcessor::TransformInfo"*, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %10, align 8
  %18 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16
  tail call void @_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev(%"struct.GrGLSLGeometryProcessor::TransformInfo"* %18) #5
  %19 = add nuw nsw i64 %16, 1
  %20 = load i64, i64* %5, align 8
  %21 = lshr i64 %20, 1
  %22 = and i64 %21, 2147483647
  %23 = icmp ult i64 %19, %22
  br i1 %23, label %15, label %11

24:                                               ; preds = %11
  %25 = bitcast %class.SkTArray* %4 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @_Z7sk_freePv(i8* %26) #5
  br label %27

27:                                               ; preds = %11, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN30GrStrokeTessellationShaderImplD0Ev(%class.GrStrokeTessellationShaderImpl*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV18GrStrokeShaderImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 6
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %3) #5
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV23GrGLSLGeometryProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %class.GrStrokeTessellationShaderImpl, %class.GrStrokeTessellationShaderImpl* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %4, i64 0, i32 0
  br label %15

11:                                               ; preds = %15, %1
  %12 = phi i64 [ %6, %1 ], [ %25, %15 ]
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %32, label %29

15:                                               ; preds = %15, %9
  %16 = phi i64 [ 0, %9 ], [ %24, %15 ]
  %17 = load %"struct.GrGLSLGeometryProcessor::TransformInfo"*, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %10, align 8
  %18 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 1, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %18) #5
  %19 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 1, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %19) #5
  %20 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 1, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %20) #5
  %21 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 0, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %21) #5
  %22 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 0, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %22) #5
  %23 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %17, i64 %16, i32 0, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %23) #5
  %24 = add nuw nsw i64 %16, 1
  %25 = load i64, i64* %5, align 8
  %26 = lshr i64 %25, 1
  %27 = and i64 %26, 2147483647
  %28 = icmp ult i64 %24, %27
  br i1 %28, label %15, label %11

29:                                               ; preds = %11
  %30 = bitcast %class.SkTArray* %4 to i8**
  %31 = load i8*, i8** %30, align 8
  tail call void @_Z7sk_freePv(i8* %31) #5
  br label %32

32:                                               ; preds = %11, %29
  %33 = bitcast %class.GrStrokeTessellationShaderImpl* %0 to i8*
  tail call void @_ZdlPv(i8* %33) #10
  ret void
}

declare void @_ZN18GrStrokeShaderImpl7setDataERK24GrGLSLProgramDataManagerRK12GrShaderCapsRK19GrGeometryProcessor(%class.GrStrokeShaderImpl*, %class.GrGLSLProgramDataManager* dereferenceable(8), %class.GrShaderCaps* dereferenceable(144), %class.GrGeometryProcessor* dereferenceable(80)) unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

declare void @_ZN8SkString12appendVAListEPKcP13__va_list_tag(%class.SkString*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

declare void @_ZN8SkStringC1EOS_(%class.SkString*, %class.SkString* dereferenceable(8)) unnamed_addr #2

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #2

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #2

declare void @_ZN8SkString6insertEmPKcm(%class.SkString*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessorD2Ev(%class.GrGLSLGeometryProcessor*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV23GrGLSLGeometryProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.GrGLSLGeometryProcessor, %class.GrGLSLGeometryProcessor* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 4294967294
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %3, i64 0, i32 0
  br label %14

10:                                               ; preds = %14, %1
  %11 = phi i64 [ %5, %1 ], [ %19, %14 ]
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %26, label %23

14:                                               ; preds = %14, %8
  %15 = phi i64 [ 0, %8 ], [ %18, %14 ]
  %16 = load %"struct.GrGLSLGeometryProcessor::TransformInfo"*, %"struct.GrGLSLGeometryProcessor::TransformInfo"** %9, align 8
  %17 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %16, i64 %15
  tail call void @_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev(%"struct.GrGLSLGeometryProcessor::TransformInfo"* %17) #5
  %18 = add nuw nsw i64 %15, 1
  %19 = load i64, i64* %4, align 8
  %20 = lshr i64 %19, 1
  %21 = and i64 %20, 2147483647
  %22 = icmp ult i64 %18, %21
  br i1 %22, label %14, label %10

23:                                               ; preds = %10
  %24 = bitcast %class.SkTArray* %3 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @_Z7sk_freePv(i8* %25) #5
  br label %26

26:                                               ; preds = %10, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessorD0Ev(%class.GrGLSLGeometryProcessor*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK23GrGLSLGeometryProcessor24getTessControlShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #0 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.79, i64 0, i64 0), i32 139, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.80, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK23GrGLSLGeometryProcessor27getTessEvaluationShaderGLSLERK19GrGeometryProcessorPKcRK20GrGLSLUniformHandlerRK12GrShaderCaps(%class.SkString* noalias sret, %class.GrGLSLGeometryProcessor*, %class.GrGeometryProcessor* dereferenceable(80), i8*, %class.GrGLSLUniformHandler* dereferenceable(16), %class.GrShaderCaps* dereferenceable(144)) unnamed_addr #0 comdat align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.79, i64 0, i64 0), i32 145, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.80, i64 0, i64 0)) #11
  unreachable
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23GrGLSLGeometryProcessor13TransformInfoD2Ev(%"struct.GrGLSLGeometryProcessor::TransformInfo"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 1, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %2) #5
  %3 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 1, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %3) #5
  %4 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 1, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %4) #5
  %5 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 0, i32 5
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %5) #5
  %6 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 0, i32 4
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %6) #5
  %7 = getelementptr inbounds %"struct.GrGLSLGeometryProcessor::TransformInfo", %"struct.GrGLSLGeometryProcessor::TransformInfo"* %0, i64 0, i32 0, i32 3
  tail call void @_ZN8SkStringD1Ev(%class.SkString* %7) #5
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN14GrWangsFormulaL7as_skslEv: argument 0"}
!4 = distinct !{!4, !"_ZN14GrWangsFormulaL7as_skslEv"}
!5 = !{i32 0, i32 33}
