; ModuleID = '../../third_party/freetype/src/src/base/ftinit.c'
source_filename = "../../third_party/freetype/src/src/base/ftinit.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FT_Module_Class_ = type { i64, i64, i8*, i64, i64, i8*, i32 (%struct.FT_ModuleRec_*)*, void (%struct.FT_ModuleRec_*)*, i8* (%struct.FT_ModuleRec_*, i8*)* }
%struct.FT_ModuleRec_ = type { %struct.FT_Module_Class_*, %struct.FT_LibraryRec_*, %struct.FT_MemoryRec_* }
%struct.FT_LibraryRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i32, [32 x %struct.FT_ModuleRec_*], %struct.FT_ListRec_, %struct.FT_RendererRec_*, %struct.FT_ModuleRec_*, [4 x i32 (i8*)*], [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_RendererRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Renderer_Class_*, i32, %struct.FT_Glyph_Class_, %struct.FT_RasterRec_*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)* }
%struct.FT_Renderer_Class_ = type { %struct.FT_Module_Class_, i32, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_RendererRec_*, i64, i8*)*, %struct.FT_Raster_Funcs_* }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type { i8*, i32, %struct.FT_Size_Metrics_ }
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Driver_ClassRec_*, %struct.FT_ListRec_, %struct.FT_GlyphLoaderRec_* }
%struct.FT_Driver_ClassRec_ = type { %struct.FT_Module_Class_, i64, i64, i64, i32 (%struct.FT_StreamRec_*, %struct.FT_FaceRec_*, i32, i32, %struct.FT_Parameter_*)*, void (%struct.FT_FaceRec_*)*, i32 (%struct.FT_SizeRec_*)*, void (%struct.FT_SizeRec_*)*, i32 (%struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphSlotRec_*)*, i32 (%struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, i32, i32)*, i32 (%struct.FT_FaceRec_*, i32, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_FaceRec_*, %struct.FT_StreamRec_*)*, i32 (%struct.FT_FaceRec_*, i32, i32, i32, i64*)*, i32 (%struct.FT_SizeRec_*, %struct.FT_Size_RequestRec_*)*, i32 (%struct.FT_SizeRec_*, i64)* }
%struct.FT_Parameter_ = type { i64, i8* }
%struct.FT_Size_RequestRec_ = type { i32, i64, i64, i32, i32 }
%struct.FT_GlyphLoaderRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i8, %struct.FT_GlyphLoadRec_, %struct.FT_GlyphLoadRec_, i8* }
%struct.FT_GlyphLoadRec_ = type { %struct.FT_Outline_, %struct.FT_Vector_*, %struct.FT_Vector_*, i32, %struct.FT_SubGlyphRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_Face_InternalRec_ = type { %struct.FT_Matrix_, %struct.FT_Vector_, i32, %struct.FT_ServiceCacheRec_, %struct.FT_Incremental_InterfaceRec_*, i8, i32, [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_Matrix_ = type { i64, i64, i64, i64 }
%struct.FT_ServiceCacheRec_ = type { i8*, i8*, i8*, i8*, i8*, i8* }
%struct.FT_Incremental_InterfaceRec_ = type { %struct.FT_Incremental_FuncsRec_*, %struct.FT_IncrementalRec_* }
%struct.FT_Incremental_FuncsRec_ = type { i32 (%struct.FT_IncrementalRec_*, i32, %struct.FT_Data_*)*, void (%struct.FT_IncrementalRec_*, %struct.FT_Data_*)*, i32 (%struct.FT_IncrementalRec_*, i32, i8, %struct.FT_Incremental_MetricsRec_*)* }
%struct.FT_Data_ = type { i8*, i32 }
%struct.FT_Incremental_MetricsRec_ = type { i64, i64, i64, i64 }
%struct.FT_IncrementalRec_ = type opaque
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type { i32, i16, i32, i32, %struct.FT_Matrix_ }
%struct.FT_Slot_InternalRec_ = type { %struct.FT_GlyphLoaderRec_*, i32, i8, %struct.FT_Matrix_, %struct.FT_Vector_, i8*, i32 }
%struct.FT_Raster_Funcs_ = type { i32, i32 (i8*, %struct.FT_RasterRec_**)*, void (%struct.FT_RasterRec_*, i8*, i64)*, i32 (%struct.FT_RasterRec_*, i64, i8*)*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, void (%struct.FT_RasterRec_*)* }
%struct.FT_Glyph_Class_ = type { i64, i32, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphRec_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphRec_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)* }
%struct.FT_GlyphRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_Glyph_Class_*, i32, %struct.FT_Vector_ }
%struct.FT_RasterRec_ = type opaque
%struct.FT_Raster_Params_ = type { %struct.FT_Bitmap_*, i8*, i32, void (i32, i32, %struct.FT_Span_*, i8*)*, void (i32, i32, %struct.FT_Span_*, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i8*)*, i8*, %struct.FT_BBox_ }
%struct.FT_Span_ = type { i16, i16, i8 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }

@.str = private unnamed_addr constant [20 x i8] c"FREETYPE_PROPERTIES\00", align 1
@autofit_module_class = external constant %struct.FT_Module_Class_, align 8
@tt_driver_class = external constant %struct.FT_Driver_ClassRec_, align 8
@cff_driver_class = external constant %struct.FT_Driver_ClassRec_, align 8
@psnames_module_class = external constant %struct.FT_Module_Class_, align 8
@pshinter_module_class = external constant %struct.FT_Module_Class_, align 8
@ft_raster1_renderer_class = external constant %struct.FT_Renderer_Class_, align 8
@sfnt_module_class = external constant %struct.FT_Module_Class_, align 8
@ft_smooth_renderer_class = external constant %struct.FT_Renderer_Class_, align 8
@psaux_module_class = external constant %struct.FT_Module_Class_, align 8
@t1_driver_class = external constant %struct.FT_Driver_ClassRec_, align 8
@t1cid_driver_class = external constant %struct.FT_Driver_ClassRec_, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @FT_Add_Default_Modules(%struct.FT_LibraryRec_*) local_unnamed_addr #0 {
  %2 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull @autofit_module_class) #4
  %3 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull getelementptr inbounds (%struct.FT_Driver_ClassRec_, %struct.FT_Driver_ClassRec_* @tt_driver_class, i64 0, i32 0)) #4
  %4 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull getelementptr inbounds (%struct.FT_Driver_ClassRec_, %struct.FT_Driver_ClassRec_* @cff_driver_class, i64 0, i32 0)) #4
  %5 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull @psnames_module_class) #4
  %6 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull @pshinter_module_class) #4
  %7 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull getelementptr inbounds (%struct.FT_Renderer_Class_, %struct.FT_Renderer_Class_* @ft_raster1_renderer_class, i64 0, i32 0)) #4
  %8 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull @sfnt_module_class) #4
  %9 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull getelementptr inbounds (%struct.FT_Renderer_Class_, %struct.FT_Renderer_Class_* @ft_smooth_renderer_class, i64 0, i32 0)) #4
  %10 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull @psaux_module_class) #4
  %11 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull getelementptr inbounds (%struct.FT_Driver_ClassRec_, %struct.FT_Driver_ClassRec_* @t1_driver_class, i64 0, i32 0)) #4
  %12 = tail call i32 @FT_Add_Module(%struct.FT_LibraryRec_* %0, %struct.FT_Module_Class_* nonnull getelementptr inbounds (%struct.FT_Driver_ClassRec_, %struct.FT_Driver_ClassRec_* @t1cid_driver_class, i64 0, i32 0)) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @FT_Add_Module(%struct.FT_LibraryRec_*, %struct.FT_Module_Class_*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @FT_Set_Default_Properties(%struct.FT_LibraryRec_*) local_unnamed_addr #0 {
  %2 = alloca [129 x i8], align 16
  %3 = alloca [129 x i8], align 16
  %4 = alloca [129 x i8], align 16
  %5 = getelementptr inbounds [129 x i8], [129 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %5) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 129, i1 false)
  %6 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 129, i1 false)
  %7 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 129, i1 false)
  %8 = tail call i8* @getenv(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)) #4
  %9 = icmp eq i8* %8, null
  br i1 %9, label %105, label %10

10:                                               ; preds = %1, %102
  %11 = phi i8* [ %104, %102 ], [ %8, %1 ]
  %12 = load i8, i8* %11, align 1
  switch i8 %12, label %13 [
    i8 0, label %105
    i8 32, label %102
    i8 9, label %102
  ]

13:                                               ; preds = %10, %24
  %14 = phi i8 [ %25, %24 ], [ %12, %10 ]
  %15 = phi i64 [ %21, %24 ], [ 0, %10 ]
  %16 = phi i32 [ %22, %24 ], [ 0, %10 ]
  %17 = phi i8* [ %19, %24 ], [ %11, %10 ]
  switch i8 %14, label %18 [
    i8 0, label %26
    i8 58, label %26
  ]

18:                                               ; preds = %13
  %19 = getelementptr inbounds i8, i8* %17, i64 1
  %20 = getelementptr inbounds [129 x i8], [129 x i8]* %2, i64 0, i64 %15
  store i8 %14, i8* %20, align 1
  %21 = add nuw nsw i64 %15, 1
  %22 = add nuw nsw i32 %16, 1
  %23 = icmp eq i64 %21, 128
  br i1 %23, label %28, label %24

24:                                               ; preds = %18
  %25 = load i8, i8* %19, align 1
  br label %13

26:                                               ; preds = %13, %13
  %27 = trunc i64 %15 to i32
  br label %28

28:                                               ; preds = %18, %26
  %29 = phi i8* [ %17, %26 ], [ %19, %18 ]
  %30 = phi i32 [ %27, %26 ], [ %22, %18 ]
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [129 x i8], [129 x i8]* %2, i64 0, i64 %31
  store i8 0, i8* %32, align 1
  %33 = load i8, i8* %29, align 1
  %34 = icmp ne i8 %33, 58
  %35 = icmp eq i8* %29, %11
  %36 = or i1 %35, %34
  br i1 %36, label %105, label %37

37:                                               ; preds = %28
  %38 = getelementptr inbounds i8, i8* %29, i64 1
  br label %39

39:                                               ; preds = %106, %37
  %40 = phi i64 [ 0, %37 ], [ %109, %106 ]
  %41 = phi i8* [ %38, %37 ], [ %111, %106 ]
  %42 = phi i32 [ 0, %37 ], [ %110, %106 ]
  %43 = phi i64 [ 1, %37 ], [ %107, %106 ]
  %44 = load i8, i8* %41, align 1
  switch i8 %44, label %45 [
    i8 0, label %53
    i8 61, label %53
  ]

45:                                               ; preds = %39
  %46 = add nuw nsw i64 %43, 1
  %47 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i64 %40
  store i8 %44, i8* %47, align 2
  %48 = or i64 %40, 1
  %49 = getelementptr inbounds i8, i8* %29, i64 %46
  %50 = load i8, i8* %49, align 1
  switch i8 %50, label %106 [
    i8 0, label %51
    i8 61, label %51
  ]

51:                                               ; preds = %45, %45
  %52 = getelementptr inbounds i8, i8* %29, i64 %46
  br label %53

53:                                               ; preds = %39, %39, %51
  %54 = phi i64 [ %48, %51 ], [ %40, %39 ], [ %40, %39 ]
  %55 = phi i8* [ %52, %51 ], [ %41, %39 ], [ %41, %39 ]
  %56 = phi i64 [ %46, %51 ], [ %43, %39 ], [ %43, %39 ]
  %57 = trunc i64 %54 to i32
  br label %58

58:                                               ; preds = %106, %53
  %59 = phi i64 [ %56, %53 ], [ %107, %106 ]
  %60 = phi i32 [ %57, %53 ], [ %110, %106 ]
  %61 = phi i8* [ %55, %53 ], [ %111, %106 ]
  %62 = zext i32 %60 to i64
  %63 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i64 %62
  store i8 0, i8* %63, align 1
  %64 = load i8, i8* %61, align 1
  %65 = icmp ne i8 %64, 61
  %66 = icmp eq i64 %59, 1
  %67 = or i1 %66, %65
  br i1 %67, label %105, label %68

68:                                               ; preds = %58
  %69 = getelementptr inbounds i8, i8* %61, i64 1
  br label %70

70:                                               ; preds = %113, %68
  %71 = phi i64 [ 0, %68 ], [ %116, %113 ]
  %72 = phi i8* [ %69, %68 ], [ %118, %113 ]
  %73 = phi i32 [ 0, %68 ], [ %117, %113 ]
  %74 = phi i64 [ 1, %68 ], [ %114, %113 ]
  %75 = load i8, i8* %72, align 1
  switch i8 %75, label %76 [
    i8 0, label %84
    i8 32, label %84
    i8 9, label %84
  ]

76:                                               ; preds = %70
  %77 = add nuw nsw i64 %74, 1
  %78 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i64 %71
  store i8 %75, i8* %78, align 2
  %79 = or i64 %71, 1
  %80 = getelementptr inbounds i8, i8* %61, i64 %77
  %81 = load i8, i8* %80, align 1
  switch i8 %81, label %113 [
    i8 0, label %82
    i8 32, label %82
    i8 9, label %82
  ]

82:                                               ; preds = %76, %76, %76
  %83 = getelementptr inbounds i8, i8* %61, i64 %77
  br label %84

84:                                               ; preds = %70, %70, %70, %82
  %85 = phi i64 [ %79, %82 ], [ %71, %70 ], [ %71, %70 ], [ %71, %70 ]
  %86 = phi i8* [ %83, %82 ], [ %72, %70 ], [ %72, %70 ], [ %72, %70 ]
  %87 = phi i64 [ %77, %82 ], [ %74, %70 ], [ %74, %70 ], [ %74, %70 ]
  %88 = trunc i64 %85 to i32
  br label %89

89:                                               ; preds = %113, %84
  %90 = phi i64 [ %87, %84 ], [ %114, %113 ]
  %91 = phi i32 [ %88, %84 ], [ %117, %113 ]
  %92 = phi i8* [ %86, %84 ], [ %118, %113 ]
  %93 = zext i32 %91 to i64
  %94 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i64 %93
  store i8 0, i8* %94, align 1
  %95 = load i8, i8* %92, align 1
  switch i8 %95, label %105 [
    i8 0, label %96
    i8 32, label %96
    i8 9, label %96
  ]

96:                                               ; preds = %89, %89, %89
  %97 = icmp eq i64 %90, 1
  br i1 %97, label %105, label %98

98:                                               ; preds = %96
  %99 = call i32 @ft_property_string_set(%struct.FT_LibraryRec_* %0, i8* nonnull %5, i8* nonnull %6, i8* nonnull %7) #4
  %100 = load i8, i8* %92, align 1
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %105, label %102

102:                                              ; preds = %10, %10, %98
  %103 = phi i8* [ %92, %98 ], [ %11, %10 ], [ %11, %10 ]
  %104 = getelementptr inbounds i8, i8* %103, i64 1
  br label %10

105:                                              ; preds = %58, %28, %96, %98, %10, %89, %1
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %6) #4
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %5) #4
  ret void

106:                                              ; preds = %45
  %107 = add nuw nsw i64 %43, 2
  %108 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i64 %48
  store i8 %50, i8* %108, align 1
  %109 = add nuw nsw i64 %40, 2
  %110 = add nuw nsw i32 %42, 2
  %111 = getelementptr inbounds i8, i8* %29, i64 %107
  %112 = icmp eq i64 %109, 128
  br i1 %112, label %58, label %39

113:                                              ; preds = %76
  %114 = add nuw nsw i64 %74, 2
  %115 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i64 %79
  store i8 %81, i8* %115, align 1
  %116 = add nuw nsw i64 %71, 2
  %117 = add nuw nsw i32 %73, 2
  %118 = getelementptr inbounds i8, i8* %61, i64 %114
  %119 = icmp eq i64 %116, 128
  br i1 %119, label %89, label %70
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #3

declare hidden i32 @ft_property_string_set(%struct.FT_LibraryRec_*, i8*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Init_FreeType(%struct.FT_LibraryRec_**) local_unnamed_addr #0 {
  %2 = tail call %struct.FT_MemoryRec_* @FT_New_Memory() #4
  %3 = icmp eq %struct.FT_MemoryRec_* %2, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = tail call i32 @FT_New_Library(%struct.FT_MemoryRec_* nonnull %2, %struct.FT_LibraryRec_** %0) #4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @FT_Done_Memory(%struct.FT_MemoryRec_* nonnull %2) #4
  br label %10

8:                                                ; preds = %4
  %9 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %0, align 8
  tail call void @FT_Add_Default_Modules(%struct.FT_LibraryRec_* %9)
  br label %10

10:                                               ; preds = %8, %7
  %11 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %0, align 8
  tail call void @FT_Set_Default_Properties(%struct.FT_LibraryRec_* %11)
  br label %12

12:                                               ; preds = %1, %10
  %13 = phi i32 [ %5, %10 ], [ 7, %1 ]
  ret i32 %13
}

declare hidden %struct.FT_MemoryRec_* @FT_New_Memory() local_unnamed_addr #2

declare i32 @FT_New_Library(%struct.FT_MemoryRec_*, %struct.FT_LibraryRec_**) local_unnamed_addr #2

declare hidden void @FT_Done_Memory(%struct.FT_MemoryRec_*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Done_FreeType(%struct.FT_LibraryRec_*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.FT_LibraryRec_* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.FT_LibraryRec_, %struct.FT_LibraryRec_* %0, i64 0, i32 0
  %5 = load %struct.FT_MemoryRec_*, %struct.FT_MemoryRec_** %4, align 8
  %6 = tail call i32 @FT_Done_Library(%struct.FT_LibraryRec_* nonnull %0) #4
  tail call void @FT_Done_Memory(%struct.FT_MemoryRec_* %5) #4
  br label %7

7:                                                ; preds = %1, %3
  %8 = phi i32 [ 0, %3 ], [ 33, %1 ]
  ret i32 %8
}

declare i32 @FT_Done_Library(%struct.FT_LibraryRec_*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
